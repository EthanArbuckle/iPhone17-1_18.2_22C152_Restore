void sub_101951BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_100FCF6CC(&a12);
  sub_100FCF6CC(&a63);
  _Unwind_Resume(a1);
}

BOOL sub_101951C60(uint64_t a1, unsigned int a2)
{
  BOOL result = sub_1001662E0(a2);
  if (!result) {
    sub_101A9C000();
  }
  *(_DWORD *)(a1 + 32) |= 4u;
  *(_DWORD *)(a1 + 20) = a2;
  return result;
}

void sub_101951CA4(uint64_t a1, int a2, int a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240448;
    int v11 = a2;
    __int16 v12 = 1026;
    int v13 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gpsd,setRfBandEnable,L1,%{public}d,L5,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::setRfBandEnable(BOOL, BOOL)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024891E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024891E0))
  {
    byte_1024891D8 = sub_10073FAFC();
    __cxa_guard_release(&qword_1024891E0);
  }
  if (byte_1024891D8)
  {
    sub_100FCCCA0((uint64_t)buf);
    if ((sub_100FCD768() & 1) == 0) {
      __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
    }
    int v14 = 38;
    v16 |= 0x40000004u;
    uint64_t v7 = v15;
    if (!v15) {
      operator new();
    }
    int v8 = *(_DWORD *)(v15 + 16);
    *(unsigned char *)(v15 + 8) = a2;
    *(_DWORD *)(v7 + 16) = v8 | 3;
    *(unsigned char *)(v7 + 9) = a3;
    sub_100FD6EA0(a1 + 2576, (uint64_t)buf);
    sub_101940CD8(a1 + 2176, 2);
    sub_100FCF6CC(buf);
  }
}

void sub_101951F70(_Unwind_Exception *a1)
{
}

uint64_t sub_101951FC4(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gpsd,setting duty cycle enable to %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::sendAllowGnssDwellDutyCycling(BOOL)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_100FCCCA0((uint64_t)buf);
  if ((sub_100FCD768() & 1) == 0) {
    __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
  }
  int v10 = 26;
  v12 |= 0x800004u;
  uint64_t v5 = v11;
  if (!v11) {
    operator new();
  }
  *(_DWORD *)(v11 + 16) |= 1u;
  *(unsigned char *)(v5 + 8) = a2;
  sub_100FD6EA0(a1 + 2576, (uint64_t)buf);
  sub_101940CD8(a1 + 2176, 2);
  return sub_100FCF6CC(buf);
}

void sub_101952224()
{
}

uint64_t sub_101952264(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 304)) {
    sub_10071874C(a1 + 248);
  }
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 88) = 1;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(unsigned char *)(a1 + 144) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 152) = _Q1;
  *(_OWORD *)(a1 + 176) = _Q1;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 200) = _Q1;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(void *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 1065353216;
  *(void *)(a1 + 288) = 0x100000005;
  *(void *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 304) = 1;
  return a1;
}

NSDictionary *__cdecl sub_101952308(id a1)
{
  return (NSDictionary *)&off_102397928;
}

NSDictionary *__cdecl sub_101952314(id a1)
{
  return (NSDictionary *)&off_102397950;
}

uint64_t sub_101952320(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 40) + 1368);
  if (!v1) {
    sub_10015E48C();
  }
  v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

int64x2_t *sub_101952384(int64x2_t *result, int a2)
{
  if ((a2 & 0x18) != 0) {
    result[41] = vaddq_s64(result[41], vdupq_n_s64(1uLL));
  }
  if ((a2 & 0x20) != 0)
  {
    ++result[44].i64[1];
    if ((a2 & 0x40) == 0)
    {
LABEL_5:
      if ((a2 & 0x80) == 0) {
        goto LABEL_6;
      }
      goto LABEL_19;
    }
  }
  else if ((a2 & 0x40) == 0)
  {
    goto LABEL_5;
  }
  ++result[44].i64[0];
  if ((a2 & 0x80) == 0)
  {
LABEL_6:
    if ((a2 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  ++result[43].i64[1];
  if ((a2 & 0x100) == 0)
  {
LABEL_7:
    if ((a2 & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  ++result[43].i64[0];
  if ((a2 & 0x200) == 0)
  {
LABEL_8:
    if ((a2 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  ++result[42].i64[0];
  if ((a2 & 0x400) == 0)
  {
LABEL_9:
    if ((a2 & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  ++result[46].i64[0];
  if ((a2 & 0x800) == 0)
  {
LABEL_10:
    if ((a2 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  ++result[49].i64[1];
  if ((a2 & 0x1000) == 0)
  {
LABEL_11:
    if ((a2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  ++result[49].i64[0];
  if ((a2 & 4) == 0)
  {
LABEL_12:
    if ((a2 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_26;
  }
LABEL_25:
  ++result[46].i64[1];
  if ((a2 & 0x2000) == 0)
  {
LABEL_13:
    if ((a2 & 0x40000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_27;
  }
LABEL_26:
  ++result[47].i64[1];
  if ((a2 & 0x40000) == 0)
  {
LABEL_14:
    if ((a2 & 0x80000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }
LABEL_27:
  ++result[48].i64[0];
  if ((a2 & 0x80000) == 0)
  {
LABEL_15:
    if ((a2 & 0x4000) == 0) {
      return result;
    }
LABEL_29:
    ++result[45].i64[1];
    return result;
  }
LABEL_28:
  ++result[48].i64[1];
  if ((a2 & 0x4000) != 0) {
    goto LABEL_29;
  }
  return result;
}

void sub_1019524A8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 3448) || *(unsigned char *)(a1 + 3472) || !*(void *)(a1 + 1656))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v4 = *(void *)(a1 + 3448) != 0;
      int v5 = *(unsigned __int8 *)(a1 + 3472);
      BOOL v6 = *(void *)(a1 + 1656) != 0;
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)v26 = v4;
      *(_WORD *)&v26[4] = 1026;
      *(_DWORD *)&v26[6] = v5;
      LOWORD(v27) = 1026;
      *(_DWORD *)((char *)&v27 + 2) = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#gpsd,updateBasebandTimeFreqTransferData,protoFix,%{public}d,%{public}d,%{public}d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_34;
      }
      goto LABEL_40;
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 48))
    {
      uint64_t v8 = *(void *)(a2 + 8);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_10248A348 + 8);
      }
      if ((~*(_DWORD *)(v8 + 72) & 0x183) == 0)
      {
        *(void *)(a1 + 3408) = *(void *)(v8 + 8);
        *(_DWORD *)(a1 + 3416) = *(_DWORD *)(v8 + 16);
        *(double *)(a1 + 3360) = sub_1018779C0();
        *(_WORD *)(a1 + 3424) = sub_1004BA69C();
        uint64_t v9 = *(void *)(a2 + 8);
        if (!v9) {
          uint64_t v9 = *(void *)(qword_10248A348 + 8);
        }
        double v10 = (double)*(unint64_t *)(v9 + 48);
        *(void *)(a1 + 3368) = (unint64_t)(v10 * 0.000001);
        *(float *)&double v10 = -((double)(unint64_t)(v10 * 0.000001) - v10 * 0.000001);
        *(_DWORD *)(a1 + 3376) = LODWORD(v10);
        *(float *)&double v10 = (double)*(unint64_t *)(v9 + 56) * 0.000000999999997;
        *(_DWORD *)(a1 + 3380) = LODWORD(v10);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        uint64_t v11 = (uint64_t *)(a1 + 3360);
        int v12 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v13 = *v11;
          uint64_t v14 = *(void *)(a2 + 8);
          if (!v14) {
            uint64_t v14 = *(void *)(qword_10248A348 + 8);
          }
          uint64_t v15 = *(void *)(v14 + 48);
          uint64_t v16 = *(void *)(a1 + 3368);
          double v17 = *(float *)(a1 + 3376);
          double v18 = *(float *)(a1 + 3380);
          *(_DWORD *)buf = 134219008;
          *(void *)v26 = v13;
          *(_WORD *)&v26[8] = 2048;
          uint64_t v27 = v15;
          *(_WORD *)v28 = 2048;
          *(void *)&v28[2] = v16;
          __int16 v29 = 2048;
          double v30 = v17;
          __int16 v31 = 2048;
          double v32 = v18;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#gpsd,#tt,baseband TFT data,mct,%.1f,bbNs,%llu,bbIntegerMs,%llu,bbSubMs,%.3f,bbUncMs,%.6f", buf, 0x34u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          v24 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::updateBasebandTimeFreqTransferData(const proto::gnss::Fix &)", "%s\n", v24);
          if (v24 != (char *)buf) {
            free(v24);
          }
        }
        sub_1018BC018(a1 + 1632);
        *uint64_t v11 = 0;
        *(void *)(a1 + 3368) = 0;
        *(void *)(a1 + 3376) = 0xBF800000BF800000;
        *(void *)(a1 + 3384) = 0x7FF8000000000000;
        *(void *)(a1 + 3392) = 3212836864;
        *(void *)(a1 + 3400) = 0x7FF8000000000000;
        *(void *)(a1 + 3408) = 0;
        *(void *)(a1 + 3416) = 3212836864;
        *(_WORD *)(a1 + 3424) = 0x8000;
        *(void *)(a1 + 3426) = 0;
        *(void *)(a1 + 3432) = 0;
        *(_WORD *)(a1 + 3440) = 0x8000;
        *(_DWORD *)(a1 + 3442) = 0;
        *(_WORD *)(a1 + 3446) = 0;
        return;
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    v19 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = *(_DWORD *)(a2 + 48) & 1;
      uint64_t v21 = *(void *)(a2 + 8);
      if (!v21) {
        uint64_t v21 = *(void *)(qword_10248A348 + 8);
      }
      unsigned int v22 = *(_DWORD *)(v21 + 72);
      *(_DWORD *)buf = 67241216;
      *(_DWORD *)v26 = v20;
      *(_WORD *)&v26[4] = 1026;
      *(_DWORD *)&v26[6] = v22 & 1;
      LOWORD(v27) = 1026;
      *(_DWORD *)((char *)&v27 + 2) = (v22 >> 1) & 1;
      HIWORD(v27) = 1026;
      *(_DWORD *)v28 = (v22 >> 7) & 1;
      *(_WORD *)&v28[4] = 1026;
      *(_DWORD *)&v28[6] = (v22 >> 8) & 1;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#gpsd,updateBasebandTimeFreqTransferData,protoFix,isTimeValidInFix,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_34:
        v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::updateBasebandTimeFreqTransferData(const proto::gnss::Fix &)", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
        return;
      }
LABEL_40:
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
      goto LABEL_34;
    }
  }
}

void sub_101952B84(uint64_t a1, unsigned __int8 *a2)
{
  if (*(void *)(a1 + 3448)
    || !*(unsigned char *)(a1 + 3472)
    || (*(void *)(a1 + 1656) ? (_ZF = *a2 == 0) : (_ZF = 1), _ZF || !*((void *)a2 + 6)))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    BOOL v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v5 = *(void *)(a1 + 3448) != 0;
      int v6 = *(unsigned __int8 *)(a1 + 3472);
      BOOL v7 = *(void *)(a1 + 1656) != 0;
      int v8 = *a2;
      BOOL v9 = *((void *)a2 + 6) != 0;
      *(_DWORD *)buf = 67241216;
      *(_DWORD *)v28 = v5;
      *(_WORD *)&v28[4] = 1026;
      *(_DWORD *)&v28[6] = v6;
      LOWORD(v29) = 1026;
      *(_DWORD *)((char *)&v29 + 2) = v7;
      HIWORD(v29) = 1026;
      *(_DWORD *)double v30 = v8;
      *(_WORD *)&v30[4] = 1026;
      *(_DWORD *)&v30[6] = v9;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gpsd,updateBasebandTimeFreqTransferData,ttData,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::updateBasebandTimeFreqTransferData(const gnss::TimeTransferData &)", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
  }
  else
  {
    *(void *)(a1 + 3408) = *((void *)a2 + 1);
    *(_DWORD *)(a1 + 3416) = *((_DWORD *)a2 + 4);
    *(double *)(a1 + 3360) = sub_1018779C0();
    *(_WORD *)(a1 + 3424) = sub_1004BA69C();
    unint64_t v11 = *((void *)a2 + 6);
    *(void *)(a1 + 3368) = v11 / 0xF4240;
    float v12 = -((double)(v11 / 0xF4240) - (double)v11 * 0.000001);
    *(float *)(a1 + 3376) = v12;
    float v13 = (double)*((unint64_t *)a2 + 7) * 0.000001;
    *(float *)(a1 + 3380) = v13;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v14 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = *(void *)(a1 + 3360);
      uint64_t v16 = *((void *)a2 + 6);
      uint64_t v17 = *(void *)(a1 + 3368);
      double v18 = *(float *)(a1 + 3376);
      double v19 = *(float *)(a1 + 3380);
      *(_DWORD *)buf = 134219008;
      *(void *)v28 = v15;
      *(_WORD *)&v28[8] = 2048;
      uint64_t v29 = v16;
      *(_WORD *)double v30 = 2048;
      *(void *)&v30[2] = v17;
      __int16 v31 = 2048;
      double v32 = v18;
      __int16 v33 = 2048;
      double v34 = v19;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#gpsd,#tt,baseband TFT data,mct,%.1f,bbNs,%llu,bbIntegerMs,%llu,bbSubMs,%.3f,bbUncMs,%.6f", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::updateBasebandTimeFreqTransferData(const gnss::TimeTransferData &)", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
    uint64_t v20 = *(void *)(a1 + 1656);
    if (!v20) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 48))(v20, a1 + 3360);
    *(void *)(a1 + 3360) = 0;
    *(void *)(a1 + 3368) = 0;
    __asm { FMOV            V0.2S, #-1.0 }
    *(void *)(a1 + 3376) = _D0;
    *(void *)(a1 + 3384) = 0x7FF8000000000000;
    *(void *)(a1 + 3392) = 3212836864;
    *(void *)(a1 + 3400) = 0x7FF8000000000000;
    *(void *)(a1 + 3408) = 0;
    *(void *)(a1 + 3416) = 3212836864;
    *(_WORD *)(a1 + 3424) = 0x8000;
    *(void *)(a1 + 3426) = 0;
    *(void *)(a1 + 3432) = 0;
    *(_WORD *)(a1 + 3440) = 0x8000;
    *(_DWORD *)(a1 + 3442) = 0;
    *(_WORD *)(a1 + 3446) = 0;
  }
}

void sub_1019530BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    int v4 = *(unsigned __int8 *)(a1 + 40);
    *(_DWORD *)buf = 67240192;
    int v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#gpsd,#cntin,enableClock,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v9 = *(unsigned __int8 *)(a1 + 40);
    int v12 = 67240192;
    int v13 = v9;
    double v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleCntinInquiryRequestIndication(const proto::gpsd::Indication &)_block_invoke", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  BOOL v5 = *(uint64_t **)(v2 + 3336);
  if (*(unsigned char *)(a1 + 40))
  {
    v11[0] = off_102346A68;
    v11[1] = v2;
    v11[3] = v11;
    sub_101953534(v5, (uint64_t)v11);
    sub_101960140(v11);
    sub_10199825C(**(void **)(v2 + 3336), 0xFFFFFFFF);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#gpsd,#cntin,enableCntinClock", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      LOWORD(v12) = 0;
      BOOL v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleCntinInquiryRequestIndication(const proto::gpsd::Indication &)_block_invoke", "%s\n", v7);
LABEL_28:
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    sub_10199825C(*v5, 0);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#gpsd,#cntin,disableCntinClock", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      LOWORD(v12) = 0;
      BOOL v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleCntinInquiryRequestIndication(const proto::gpsd::Indication &)_block_invoke", "%s\n", v7);
      goto LABEL_28;
    }
  }
}

void sub_101953518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_101960140((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_101953534(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  sub_101960078((uint64_t)v4, a2);
  sub_1019989A4(v2, (uint64_t)v4);
  return sub_101960140(v4);
}

void sub_1019535A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101960140((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1019535C0(uint64_t a1, unsigned int a2, unsigned __int8 *a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10199957C(a2, &__p);
    BOOL v7 = (v73 & 0x8000) == 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gpsd,#xocal,status,%s", buf, 0xCu);
    if (SBYTE1(v73) < 0) {
      operator delete(__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    sub_10199957C(a2, buf);
    if ((v56 & 0x8000) == 0) {
      v39 = buf;
    }
    else {
      v39 = *(unsigned char **)buf;
    }
    int v65 = 136315138;
    v66 = v39;
    v40 = (char *)_os_log_send_and_compose_impl();
    if (SBYTE1(v56) < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleLtlInfoInd(CLIceController::LtlStatus, const GnssHal::ExtensionsOlaf::LtlInfo *)", "%s\n", v40);
    if (v40 != (char *)&__p) {
      free(v40);
    }
  }
  switch(a2)
  {
    case 0u:
      *(unsigned char *)(a1 + 3344) = 1;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v9 = *(unsigned __int8 *)(a1 + 3344);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#gpsd,#xocal,ind,ifOn,%d", (uint8_t *)&__p, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        int v41 = *(unsigned __int8 *)(a1 + 3344);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v41;
        v42 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleLtlInfoInd(CLIceController::LtlStatus, const GnssHal::ExtensionsOlaf::LtlInfo *)", "%s\n", v42);
        if (v42 != (char *)&__p) {
          free(v42);
        }
      }
      double v10 = *(int **)(a1 + 3352);
      if (!v10)
      {
        *(void *)(a1 + 3352) = 0;
        return;
      }
      unint64_t v11 = *(uint64_t **)(a1 + 3328);
      if (v11)
      {
        sub_101998AE4(*v11, *v10);
        uint64_t v12 = *(void *)(a1 + 3352);
        *(void *)(a1 + 3352) = 0;
        if (!v12) {
          return;
        }
      }
      else
      {
        *(void *)(a1 + 3352) = 0;
      }
      operator delete();
    case 1u:
      *(unsigned char *)(a1 + 3344) = 0;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      v23 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v24 = *(unsigned __int8 *)(a1 + 3344);
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "#gpsd,#xocal,ind,ifOn,%d", (uint8_t *)&__p, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v25 = *(unsigned __int8 *)(a1 + 3344);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v25;
      v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleLtlInfoInd(CLIceController::LtlStatus, const GnssHal::ExtensionsOlaf::LtlInfo *)", "%s\n", v26);
      goto LABEL_51;
    case 2u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v13 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        LOWORD(__p) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "#gpsd,#xocal,reqFailed", (uint8_t *)&__p, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_50;
      }
      goto LABEL_85;
    case 3u:
      if (a3)
      {
        if (*a3)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          uint64_t v14 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
          {
            int v15 = *a3;
            int v17 = *((_DWORD *)a3 + 7);
            int v16 = *((_DWORD *)a3 + 8);
            int v19 = *((_DWORD *)a3 + 5);
            int v18 = *((_DWORD *)a3 + 6);
            int v21 = *((_DWORD *)a3 + 3);
            int v20 = *((_DWORD *)a3 + 4);
            int v22 = *((_DWORD *)a3 + 2);
            LODWORD(__p) = 67241984;
            HIDWORD(__p) = v15;
            __int16 v68 = 1026;
            int v69 = v22;
            __int16 v70 = 1026;
            int v71 = v16;
            __int16 v72 = 1026;
            int v73 = v17;
            __int16 v74 = 1026;
            int v75 = v18;
            __int16 v76 = 1026;
            int v77 = v19;
            __int16 v78 = 1026;
            int v79 = v20;
            __int16 v80 = 1026;
            int v81 = v21;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#gpsd,#xocal,ind,success,%{public}d,infoType,%{public}d,coeff,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d", (uint8_t *)&__p, 0x32u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_59;
          }
          bzero(&__p, 0x65CuLL);
          if (qword_1024193D0 == -1)
          {
LABEL_81:
            int v43 = *a3;
            int v45 = *((_DWORD *)a3 + 7);
            int v44 = *((_DWORD *)a3 + 8);
            int v47 = *((_DWORD *)a3 + 5);
            int v46 = *((_DWORD *)a3 + 6);
            int v49 = *((_DWORD *)a3 + 3);
            int v48 = *((_DWORD *)a3 + 4);
            int v50 = *((_DWORD *)a3 + 2);
            *(_DWORD *)buf = 67241984;
            *(_DWORD *)&uint8_t buf[4] = v43;
            *(_WORD *)&buf[8] = 1026;
            *(_DWORD *)&buf[10] = v50;
            __int16 v53 = 1026;
            int v54 = v44;
            __int16 v55 = 1026;
            int v56 = v45;
            __int16 v57 = 1026;
            int v58 = v46;
            __int16 v59 = 1026;
            int v60 = v47;
            __int16 v61 = 1026;
            int v62 = v48;
            __int16 v63 = 1026;
            int v64 = v49;
            v51 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleLtlInfoInd(CLIceController::LtlStatus, const GnssHal::ExtensionsOlaf::LtlInfo *)", "%s\n", v51);
            if (v51 != (char *)&__p) {
              free(v51);
            }
LABEL_59:
            sub_100FCF7D8(a1 + 2576);
            if ((sub_100FCD768() & 1) == 0) {
              sub_101A9BF7C();
            }
            int v37 = *(_DWORD *)(a1 + 2972);
            *(_DWORD *)(a1 + 2596) = 29;
            *(_DWORD *)(a1 + 2972) = v37 | 0x4000004;
            uint64_t v38 = *(void *)(a1 + 2784);
            if (!v38) {
              operator new();
            }
            sub_1017E5774((char *)a3, v38);
            sub_101940CD8(a1 + 2176, 2);
            return;
          }
        }
        else
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          v28 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
            int v29 = *a3;
            int v31 = *((_DWORD *)a3 + 7);
            int v30 = *((_DWORD *)a3 + 8);
            int v33 = *((_DWORD *)a3 + 5);
            int v32 = *((_DWORD *)a3 + 6);
            int v35 = *((_DWORD *)a3 + 3);
            int v34 = *((_DWORD *)a3 + 4);
            int v36 = *((_DWORD *)a3 + 2);
            LODWORD(__p) = 67241984;
            HIDWORD(__p) = v29;
            __int16 v68 = 1026;
            int v69 = v36;
            __int16 v70 = 1026;
            int v71 = v30;
            __int16 v72 = 1026;
            int v73 = v31;
            __int16 v74 = 1026;
            int v75 = v32;
            __int16 v76 = 1026;
            int v77 = v33;
            __int16 v78 = 1026;
            int v79 = v34;
            __int16 v80 = 1026;
            int v81 = v35;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#Warning,#gpsd,#xocal,ind,success,%{public}d,infoType,%{public}d,coeff,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d,%{public}d", (uint8_t *)&__p, 0x32u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_59;
          }
          bzero(&__p, 0x65CuLL);
          if (qword_1024193D0 == -1) {
            goto LABEL_81;
          }
        }
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
        goto LABEL_81;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      uint64_t v27 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p) = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#gpsd,#xocal,nullInfo", (uint8_t *)&__p, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1024193D0 != -1) {
LABEL_85:
        }
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
LABEL_50:
        *(_WORD *)buf = 0;
        v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleLtlInfoInd(CLIceController::LtlStatus, const GnssHal::ExtensionsOlaf::LtlInfo *)", "%s\n", v26);
LABEL_51:
        if (v26 != (char *)&__p) {
          free(v26);
        }
      }
      return;
    default:
      return;
  }
}

void sub_101954158()
{
}

uint64_t sub_101954194(uint64_t a1, unsigned int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240192;
    unsigned int v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#gpsd,#cntin,handleXccStatus,status,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleXccStatus(CLIceController::CLXccControllerProxy::XccStatus)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (a2 > 5) {
    unsigned int v5 = 0;
  }
  else {
    unsigned int v5 = dword_101E496D4[a2];
  }
  sub_100FCF7D8(a1 + 2576);
  if ((sub_100FCD768() & 1) == 0) {
    sub_101A9BF7C();
  }
  int v6 = *(_DWORD *)(a1 + 2972);
  *(_DWORD *)(a1 + 2596) = 30;
  *(_DWORD *)(a1 + 2972) = v6 | 0x10000004;
  uint64_t v7 = *(void *)(a1 + 2800);
  if (!v7) {
    operator new();
  }
  if (!sub_1003DE2E4(v5)) {
    sub_101A9C108();
  }
  *(_DWORD *)(v7 + 16) |= 1u;
  *(_DWORD *)(v7 + 8) = v5;
  return sub_101940CD8(a1 + 2176, 2);
}

void sub_1019543F4()
{
}

void sub_101954420(uint64_t a1)
{
}

void sub_101954434(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*a3 && a3[1] > (unint64_t)*a3)
  {
    sub_101957728(a1, a2, a3, (uint64_t)&v27);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v6 = qword_1024193D8;
    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
LABEL_23:
      if (!sub_10013D1A0(115, 2))
      {
LABEL_24:
        sub_101952B84(a1, (unsigned __int8 *)a2);
        v25[2] = v29;
        v25[3] = v30;
        uint64_t v26 = v31;
        v25[0] = v27;
        v25[1] = v28;
        sub_1019272CC(a1, (uint64_t)v25);
        if (*(unsigned char *)a2)
        {
          uint64_t v18 = *(void *)(a1 + 3448);
          if (v18) {
            sub_10184E4AC(v18, *(void *)(a2 + 8), *a3, a3[1], *(float *)(a2 + 16));
          }
        }
        sub_101941B88(a1, 28);
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      BOOL v19 = sub_101822038((uint64_t)&v27);
      if (*((float *)&v27 + 2) >= 1.0e11)
      {
        if (*((float *)&v27 + 2) <= 0.0)
        {
          BOOL v20 = 0;
          goto LABEL_38;
        }
      }
      else
      {
        BOOL v20 = 0;
        if (*((float *)&v27 + 2) <= 0.0 || !(void)v27)
        {
LABEL_38:
          double v21 = *(float *)(a2 + 16);
          uint64_t v22 = *a3;
          uint64_t v23 = a3[1];
          int v32 = 67111680;
          *(_DWORD *)int v33 = v19;
          *(_WORD *)&v33[4] = 1024;
          *(_DWORD *)&v33[6] = v20;
          LOWORD(v34) = 1024;
          *(_DWORD *)((char *)&v34 + 2) = BYTE12(v27);
          HIWORD(v34) = 2048;
          uint64_t v35 = v27;
          __int16 v36 = 2048;
          uint64_t v37 = 604800000000000 * dword_10248D870;
          __int16 v38 = 2048;
          double v39 = *((float *)&v27 + 2);
          __int16 v40 = 2048;
          double v41 = v21;
          __int16 v42 = 2048;
          uint64_t v43 = v29;
          __int16 v44 = 1024;
          int v45 = v31;
          __int16 v46 = 2048;
          uint64_t v47 = v22;
          __int16 v48 = 2048;
          uint64_t v49 = v23;
          int v24 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleTimeTransferData(const gnss::TimeTransferData &, const GNSS::TimeMark &)", "%s\n", v24);
          if (v24 != (char *)buf) {
            free(v24);
          }
          goto LABEL_24;
        }
      }
      BOOL v20 = *((void *)&v28 + 1) != -1;
      goto LABEL_38;
    }
    BOOL v7 = sub_101822038((uint64_t)&v27);
    if (*((float *)&v27 + 2) >= 1.0e11)
    {
      if (*((float *)&v27 + 2) <= 0.0)
      {
        BOOL v8 = 0;
        goto LABEL_22;
      }
    }
    else
    {
      BOOL v8 = 0;
      if (*((float *)&v27 + 2) <= 0.0 || !(void)v27) {
        goto LABEL_22;
      }
    }
    BOOL v8 = *((void *)&v28 + 1) != -1;
LABEL_22:
    double v15 = *(float *)(a2 + 16);
    uint64_t v16 = *a3;
    uint64_t v17 = a3[1];
    *(_DWORD *)buf = 67111680;
    *(_DWORD *)v51 = v7;
    *(_WORD *)&v51[4] = 1024;
    *(_DWORD *)&v51[6] = v8;
    LOWORD(v52) = 1024;
    *(_DWORD *)((char *)&v52 + 2) = BYTE12(v27);
    HIWORD(v52) = 2048;
    uint64_t v53 = v27;
    __int16 v54 = 2048;
    uint64_t v55 = 604800000000000 * dword_10248D870;
    __int16 v56 = 2048;
    double v57 = *((float *)&v27 + 2);
    __int16 v58 = 2048;
    double v59 = v15;
    __int16 v60 = 2048;
    uint64_t v61 = v29;
    __int16 v62 = 1024;
    int v63 = v31;
    __int16 v64 = 2048;
    uint64_t v65 = v16;
    __int16 v66 = 2048;
    uint64_t v67 = v17;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#tt,pulseTimeValid,%d,fTimeValid,%d,LeapValid,%d,GPSNs,%llu,%llu,uncNs,%.1f,uncNsTT,%.1f,fBias,%lld,fSource,%d,before,%llu,after,%llu", buf, 0x60u);
    goto LABEL_23;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *a3;
    uint64_t v11 = a3[1];
    *(_DWORD *)buf = 134349312;
    *(void *)v51 = v10;
    *(_WORD *)&v51[8] = 2050;
    uint64_t v52 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#gpsd,#tt,#Warning,invalid ttPulseMark,before,%{public}llu,after,%{public}llu", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v12 = *a3;
    uint64_t v13 = a3[1];
    int v32 = 134349312;
    *(void *)int v33 = v12;
    *(_WORD *)&v33[8] = 2050;
    uint64_t v34 = v13;
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleTimeTransferData(const gnss::TimeTransferData &, const GNSS::TimeMark &)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
}

uint64_t sub_1019549AC(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = *(void *)(a2 + 40);
    uint64_t v8 = *(void *)(a2 + 48);
    uint64_t v9 = *(void *)(a2 + 64);
    int v10 = *(unsigned __int8 *)(a2 + 72);
    int v11 = *(unsigned __int8 *)(a2 + 73);
    int v12 = *(unsigned __int8 *)(a2 + 74);
    int v13 = *(unsigned __int8 *)(a2 + 75);
    int v14 = *(unsigned __int8 *)(a2 + 76);
    *(_DWORD *)buf = 134220288;
    uint64_t v22 = v5;
    __int16 v23 = 2048;
    *(void *)int v24 = v6;
    *(_WORD *)&v24[8] = 2048;
    uint64_t v25 = v7;
    __int16 v26 = 2048;
    uint64_t v27 = v8;
    __int16 v28 = 2048;
    uint64_t v29 = v9;
    __int16 v30 = 1024;
    int v31 = v10;
    __int16 v32 = 1024;
    int v33 = v11;
    __int16 v34 = 1024;
    int v35 = v12;
    __int16 v36 = 1024;
    LODWORD(v37[0]) = v13;
    WORD2(v37[0]) = 1024;
    *(_DWORD *)((char *)v37 + 6) = v14;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gpsd,feeding mapVector,startLat,%.7lf,startLon,%.7lf,length,%.1f,azimuth,%.1f,width,%.1f,isTunnel,%d,isOneWay,%d,isRailWay,%d,isBridge,%d,isFreeway,%d", buf, 0x52u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    BOOL v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistanceMapVector(CLGpsAssistant_Type::DirectionOfTravelAssistance)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  sub_100FCCCA0((uint64_t)buf);
  if ((sub_100FCD768() & 1) == 0) {
    __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
  }
  *(_DWORD *)&v24[6] = 17;
  v38 |= 0x204u;
  uint64_t v15 = v37[0];
  if (!v37[0]) {
    operator new();
  }
  int v16 = *(_DWORD *)(v37[0] + 76);
  *(void *)(v37[0] + 8) = (unint64_t)(*(double *)(a2 + 96) * 1000000000.0);
  *(_OWORD *)(v15 + 16) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(v15 + 64) = 0;
  *(_OWORD *)(v15 + 40) = *(_OWORD *)(a2 + 40);
  uint8x8_t v17 = *(uint8x8_t *)(a2 + 64);
  *(uint8x8_t *)(v15 + 56) = v17;
  *(unsigned char *)(v15 + 65) = *(unsigned char *)(a2 + 76);
  *(_DWORD *)(v15 + 76) = v16 | 0x1FEF;
  v17.i32[0] = *(_DWORD *)(a2 + 72);
  int16x8_t v18 = (int16x8_t)vmovl_u8(v17);
  *(int16x4_t *)v18.i8 = vrev32_s16(*(int16x4_t *)v18.i8);
  *(int8x8_t *)v18.i8 = vext_s8(*(int8x8_t *)v18.i8, *(int8x8_t *)v18.i8, 6uLL);
  *(_DWORD *)(v15 + 66) = vmovn_s16(v18).u32[0];
  sub_100FD6EA0(a1 + 2576, (uint64_t)buf);
  sub_101940CD8(a1 + 2176, 2);
  return sub_100FCF6CC(buf);
}

void sub_101954D40()
{
}

void sub_101954D80()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "#gpsd,#Warning,Map matched position assistance not supported", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectMapMatchedPosition(CLGpsAssistant_Type::MapMatchedPositionAssistance)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

uint64_t sub_101954F08(uint64_t a1, int a2)
{
  sub_100FCCCA0((uint64_t)v7);
  if ((sub_100FCD768() & 1) == 0) {
    __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
  }
  int v8 = 20;
  v10 |= 0x1004u;
  uint64_t v4 = v9;
  if (!v9) {
    operator new();
  }
  switch(a2)
  {
    case 0:
      if ((sub_100748754(0) & 1) == 0) {
        goto LABEL_21;
      }
      int v5 = 0;
      goto LABEL_18;
    case 1:
      if ((sub_100748754(1u) & 1) == 0) {
        goto LABEL_21;
      }
      int v5 = 1;
      goto LABEL_18;
    case 2:
      if ((sub_100748754(2u) & 1) == 0) {
        goto LABEL_21;
      }
      int v5 = 2;
      goto LABEL_18;
    case 3:
      goto LABEL_16;
    case 4:
      if (!sub_100740310())
      {
LABEL_16:
        if (sub_100748754(3u))
        {
          int v5 = 3;
          goto LABEL_18;
        }
LABEL_21:
        __assert_rtn("set_signal_environment_type", "GpsdProtocol.pb.h", 10246, "::proto::gnss::SignalEnvironmentType_IsValid(value)");
      }
      if ((sub_100748754(4u) & 1) == 0) {
        goto LABEL_21;
      }
      int v5 = 4;
LABEL_18:
      *(_DWORD *)(v4 + 16) |= 1u;
      *(_DWORD *)(v4 + 8) = v5;
LABEL_19:
      sub_100FD6EA0(a1 + 2576, (uint64_t)v7);
      sub_101940CD8(a1 + 2176, 2);
      return sub_100FCF6CC(v7);
    case 6:
      if ((sub_100748754(6u) & 1) == 0) {
        goto LABEL_21;
      }
      int v5 = 6;
      goto LABEL_18;
    default:
      goto LABEL_19;
  }
}

void sub_1019550C0()
{
}

uint64_t sub_101955114(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 1706)) {
    return result;
  }
  v3 = (_DWORD *)result;
  unint64_t v4 = sub_101877458();
  unint64_t v51 = 0;
  double v5 = *(double *)(a2 + 40);
  if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || v5 <= 0.0
    || (sub_101956020((uint64_t)v3, &v51, 1, v5), (v6 & 1) == 0))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a2 + 40);
      *(_DWORD *)buf = 134349056;
      *(void *)__int16 v60 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#gpsd,injectAssistanceMotion,invalid timestamp,%{public}.1f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      uint64_t v45 = *(void *)(a2 + 40);
      int v54 = 134349056;
      v55[0] = v45;
      __int16 v46 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistanceMotion(CLMotionActivity)", "%s\n", v46);
      if (v46 != (char *)buf) {
        free(v46);
      }
    }
    unint64_t v51 = v4;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v10 = *(_DWORD *)a2;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)__int16 v60 = v10;
    *(_WORD *)&v60[4] = 2048;
    *(void *)&v60[6] = v4 - v51;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#gpsd,feeding motionState,%d,ageNs,%llu", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v38 = *(_DWORD *)a2;
    int v54 = 67109376;
    LODWORD(v55[0]) = v38;
    WORD2(v55[0]) = 2048;
    *(void *)((char *)v55 + 6) = v4 - v51;
    double v39 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistanceMotion(CLMotionActivity)", "%s\n", v39);
    if (v39 != (char *)buf) {
      free(v39);
    }
  }
  sub_100FCCCA0((uint64_t)&v54);
  if ((sub_100FCD768() & 1) == 0) {
    __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
  }
  int v56 = 18;
  v58 |= 0x404u;
  uint64_t v11 = v57;
  if (!v57) {
    operator new();
  }
  unint64_t v12 = v51;
  *(_DWORD *)(v57 + 32) |= 1u;
  *(void *)(v11 + 8) = v12;
  signed int v13 = *(_DWORD *)a2;
  if (*(int *)a2 <= 11804)
  {
    if (v13 <= 2009)
    {
      switch(v13)
      {
        case 0:
          goto LABEL_76;
        case 1:
          goto LABEL_138;
        case 2:
          int v14 = *(_DWORD *)(a2 + 4);
          goto LABEL_121;
        case 3:
        case 7:
        case 9:
          goto LABEL_44;
        case 4:
          if (*(_DWORD *)(a2 + 4) == 2) {
            int v35 = 3;
          }
          else {
            int v35 = 2;
          }
          goto LABEL_137;
        case 5:
          goto LABEL_68;
        case 6:
          BOOL v18 = *(_DWORD *)(a2 + 4) == 2;
          int v19 = 5;
          goto LABEL_134;
        case 8:
          if ((*(_DWORD *)(a2 + 4) - 1) < 2) {
            int v35 = 1;
          }
          else {
            int v35 = 2;
          }
          goto LABEL_137;
        case 10:
          if (*(int *)(a2 + 4) >= 1) {
            v3[585] = 4;
          }
          signed int v13 = 1;
          goto LABEL_138;
        case 11:
          int v14 = *(_DWORD *)(a2 + 4);
          if (v14 >= 1) {
            v3[585] = 4;
          }
LABEL_121:
          if (v14 == 2) {
            signed int v13 = 1;
          }
          else {
            signed int v13 = 2;
          }
          goto LABEL_138;
        default:
          char v16 = v13 - 41;
          if ((v13 - 41) > 0x3B) {
            goto LABEL_139;
          }
          if (((1 << v16) & 0x800000003C00000) != 0) {
            goto LABEL_76;
          }
          if (((1 << v16) & 0x300001) != 0)
          {
LABEL_44:
            v3[585] = 2;
            if (sub_1001662E0(3u))
            {
              int v17 = 3;
LABEL_78:
              *(_DWORD *)(v11 + 32) |= 4u;
              *(_DWORD *)(v11 + 20) = v17;
              goto LABEL_79;
            }
            goto LABEL_158;
          }
          if (((1 << v16) & 0x8800) == 0) {
            goto LABEL_139;
          }
LABEL_68:
          BOOL v18 = *(_DWORD *)(a2 + 4) == 2;
          int v19 = 4;
          break;
      }
      goto LABEL_134;
    }
    if (((v13 - 2010) > 0x3D || ((1 << (v13 + 38)) & 0x2488004000005401) == 0)
      && ((v13 - 2101) > 0x31 || ((1 << (v13 - 53)) & 0x2000000000011) == 0)
      && (v13 - 3015) >= 2)
    {
      goto LABEL_139;
    }
    goto LABEL_76;
  }
  if (v13 <= 15651)
  {
    if (v13 > 15329)
    {
      if ((v13 - 15560) <= 0x3C && ((1 << (v13 + 56)) & 0x1004000100000001) != 0
        || (v13 - 15330) <= 0x1E && ((1 << (v13 + 30)) & 0x40100001) != 0)
      {
        goto LABEL_76;
      }
      int v15 = 15460;
    }
    else if (v13 <= 15099)
    {
      if (v13 > 15029)
      {
        if (v13 == 15030) {
          goto LABEL_76;
        }
        int v15 = 15055;
      }
      else
      {
        if (v13 == 11805) {
          goto LABEL_76;
        }
        int v15 = 12150;
      }
    }
    else
    {
      if ((v13 - 15100) <= 0x32 && ((1 << (v13 + 4)) & 0x4000000000401) != 0
        || v13 == 15230)
      {
        goto LABEL_76;
      }
      int v15 = 15250;
    }
    goto LABEL_75;
  }
  if (v13 <= 18199)
  {
    if (v13 <= 15732)
    {
      if ((v13 - 15652) > 0x3B || ((1 << (v13 - 36)) & 0x800000000840101) == 0) {
        goto LABEL_139;
      }
      goto LABEL_76;
    }
    if (v13 > 18049)
    {
      if (v13 == 18050) {
        goto LABEL_76;
      }
      int v15 = 18100;
    }
    else
    {
      if (v13 == 15733) {
        goto LABEL_76;
      }
      int v15 = 17150;
    }
    goto LABEL_75;
  }
  if (v13 <= 19149)
  {
    if (v13 <= 19029)
    {
      if (v13 != 18200)
      {
        if (v13 == 18240)
        {
          BOOL v18 = *(_DWORD *)(a2 + 4) == 2;
          int v19 = 6;
LABEL_134:
          if (v18) {
            int v35 = v19;
          }
          else {
            int v35 = 2;
          }
          goto LABEL_137;
        }
LABEL_139:
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        __int16 v36 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          int v37 = *(_DWORD *)a2;
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)__int16 v60 = v37;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#gpsd,Unhandled activity type case,%{public}d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          int v49 = *(_DWORD *)a2;
          int v52 = 67240192;
          int v53 = v49;
          int v50 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistanceMotion(CLMotionActivity)", "%s\n", v50);
          if (v50 != (char *)buf) {
            free(v50);
          }
        }
        signed int v13 = 0;
        v3[585] = 0;
        goto LABEL_138;
      }
LABEL_76:
      v3[585] = 0;
      if (sub_1001662E0(0))
      {
        int v17 = 0;
        goto LABEL_78;
      }
LABEL_158:
      __int16 v40 = "::proto::gnss::MovingState_IsValid(value)";
      int v41 = 10147;
      __int16 v42 = "set_moving_state";
LABEL_159:
      __assert_rtn(v42, "GpsdProtocol.pb.h", v41, v40);
    }
    if (v13 == 19030) {
      goto LABEL_76;
    }
    int v15 = 19090;
LABEL_75:
    if (v13 != v15) {
      goto LABEL_139;
    }
    goto LABEL_76;
  }
  if (v13 > 515620)
  {
    if (v13 == 515621 || v13 == 515652) {
      goto LABEL_76;
    }
    int v15 = 519150;
    goto LABEL_75;
  }
  if (v13 == 19150) {
    goto LABEL_76;
  }
  if (v13 != 90603) {
    goto LABEL_139;
  }
  int v35 = 7;
LABEL_137:
  v3[585] = v35;
  signed int v13 = 3;
LABEL_138:
  sub_101951C60(v11, v13);
LABEL_79:
  unsigned int v20 = sub_101874C50(v3[585]);
  if (!sub_100748708(v20))
  {
    __int16 v40 = "::proto::gnss::MotionActivityContext_IsValid(value)";
    int v41 = 10124;
    __int16 v42 = "set_context";
    goto LABEL_159;
  }
  *(_DWORD *)(v11 + 32) |= 2u;
  *(_DWORD *)(v11 + 16) = v20;
  int v21 = *(_DWORD *)(a2 + 4);
  if (v21 == 2)
  {
    if (sub_100748714(0x4Bu))
    {
      int v22 = 75;
      goto LABEL_96;
    }
    goto LABEL_151;
  }
  if (v21 == 1)
  {
    if (sub_100748714(0x32u))
    {
      int v22 = 50;
      goto LABEL_96;
    }
    goto LABEL_151;
  }
  if (v21)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    __int16 v23 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)__int16 v60 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#gpsd,Unhandled activity confidence case,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v47 = *(_DWORD *)(a2 + 4);
      int v52 = 67240192;
      int v53 = v47;
      __int16 v48 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistanceMotion(CLMotionActivity)", "%s\n", v48);
      if (v48 != (char *)buf) {
        free(v48);
      }
    }
    if (sub_100748714(1u))
    {
      int v22 = 1;
      goto LABEL_96;
    }
    goto LABEL_151;
  }
  if (!sub_100748714(0x19u))
  {
LABEL_151:
    __int16 v40 = "::proto::gnss::Reliability_IsValid(value)";
    int v41 = 10170;
    __int16 v42 = "set_motion_reliability";
    goto LABEL_159;
  }
  int v22 = 25;
LABEL_96:
  *(_DWORD *)(v11 + 32) |= 8u;
  *(_DWORD *)(v11 + 24) = v22;
  unsigned int v25 = *(_DWORD *)(v11 + 16) - 1;
  if (v25 > 8) {
    int v26 = 0;
  }
  else {
    int v26 = dword_101E496EC[v25];
  }
  v3[86] = v26;
  unsigned int v27 = *(_DWORD *)(v11 + 20) - 1;
  if (v27 > 2) {
    int v28 = 0;
  }
  else {
    int v28 = dword_101E49710[v27];
  }
  v3[87] = v28;
  uint64_t v29 = (uint64_t)(v3 + 644);
  sub_100FD6EA0((uint64_t)(v3 + 644), (uint64_t)&v54);
  uint64_t v30 = (uint64_t)(v3 + 544);
  sub_101940CD8(v30, 2);
  sub_100FCF6CC(&v54);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v31 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v32 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)__int16 v60 = v32;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "#gpsd,feeding mountState,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v43 = *(_DWORD *)(a2 + 12);
    int v54 = 67109120;
    LODWORD(v55[0]) = v43;
    __int16 v44 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistanceMotion(CLMotionActivity)", "%s\n", v44);
    if (v44 != (char *)buf) {
      free(v44);
    }
  }
  sub_100FCCCA0((uint64_t)buf);
  if ((sub_100FCD768() & 1) == 0) {
    __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
  }
  int v61 = 19;
  v63 |= 0x804u;
  uint64_t v33 = v62;
  if (!v62) {
    operator new();
  }
  *(_DWORD *)(v62 + 24) |= 1u;
  *(void *)(v33 + 8) = v12;
  if (*(_DWORD *)(a2 + 12) == 1) {
    int v34 = 2;
  }
  else {
    int v34 = 3;
  }
  if (!sub_10023E790(v34)) {
    __assert_rtn("set_mount_state", "GpsdProtocol.pb.h", 10219, "::proto::gnss::DeviceMountState_IsValid(value)");
  }
  *(_DWORD *)(v33 + 24) |= 2u;
  *(_DWORD *)(v33 + 16) = v34;
  sub_100FD6EA0(v29, (uint64_t)buf);
  sub_101940CD8(v30, 2);
  return sub_100FCF6CC(buf);
}

void sub_101955F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_100FCF6CC(va);
  _Unwind_Resume(a1);
}

double sub_101956020(uint64_t a1, void *a2, char a3, double a4)
{
  double v7 = a4;
  if ((a3 & 1) != 0 || *(double *)&qword_102479EC0 == -1.0)
  {
    double v6 = 0.0;
    if (sub_100B01398(a1 + 2464, &v7, &v6))
    {
      *(double *)&qword_102479EC0 = v6 - v7;
      double result = v6 * 1000000000.0;
      *a2 = (unint64_t)(v6 * 1000000000.0);
    }
  }
  else
  {
    double result = (*(double *)&qword_102479EC0 + a4) * 1000000000.0;
    *a2 = (unint64_t)result;
  }
  return result;
}

void sub_1019560BC(uint64_t a1, double *a2)
{
  if ((*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *a2 < 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      double v10 = *a2;
      *(_DWORD *)buf = 134349056;
      double v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#gpsd,PedometerAssistance,Ignored due to invalid validity time,%{public}f", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_37:
      int v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistancePedometerSpeed(const CLGNSSPedometerAssistanceCommand &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
      return;
    }
LABEL_44:
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
    goto LABEL_37;
  }
  if (((void)a2[2] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || a2[2] < 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      double v12 = a2[2];
      *(_DWORD *)buf = 134349056;
      double v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#gpsd,PedometerAssistance,Ignored due to invalid speed,%{public}f", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_37;
    }
    goto LABEL_44;
  }
  if (((void)a2[3] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && a2[3] > 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    unint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      double v5 = a2[2];
      uint64_t v6 = *((void *)a2 + 3);
      *(_DWORD *)buf = 134218240;
      double v18 = v5;
      __int16 v19 = 2048;
      v20[0] = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gpsd,PedometerAssistance,Speed,%.2f,Uncertainty=%.2f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      char v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistancePedometerSpeed(const CLGNSSPedometerAssistanceCommand &)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    sub_100FCCCA0((uint64_t)buf);
    if ((sub_100FCD768() & 1) == 0) {
      __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
    }
    *(_DWORD *)((char *)v20 + 6) = 22;
    v22 |= 0x4004u;
    uint64_t v7 = v21;
    if (!v21) {
      operator new();
    }
    int v8 = *(_DWORD *)(v21 + 36);
    *(void *)(v21 + 8) = (unint64_t)(a2[1] * 1000000000.0);
    *(_DWORD *)(v7 + 36) = v8 | 7;
    *(_OWORD *)(v7 + 16) = *((_OWORD *)a2 + 1);
    sub_100FD6EA0(a1 + 2576, (uint64_t)buf);
    sub_101940CD8(a1 + 2176, 2);
    sub_100FCF6CC(buf);
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  signed int v13 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    double v14 = a2[3];
    *(_DWORD *)buf = 134349056;
    double v18 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#gpsd,PedometerAssistance,Ignored due to invalid uncertainty,%{public}f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_37;
    }
    goto LABEL_44;
  }
}

void sub_101956774()
{
}

void sub_1019567B4(uint64_t a1, uint64_t a2)
{
  if ((*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || *(double *)a2 < 0.0
    || (*(void *)(a2 + 16) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || *(double *)(a2 + 16) <= 0.0
    || (double v3 = *(double *)(a2 + 24), (*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    || v3 < 0.0
    || (*(void *)(a2 + 32) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || *(double *)(a2 + 32) < v3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    double v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      double v13 = *(double *)a2;
      uint64_t v14 = *(void *)(a2 + 16);
      uint64_t v15 = *(void *)(a2 + 24);
      uint64_t v16 = *(void *)(a2 + 32);
      *(_DWORD *)buf = 134349824;
      double v20 = v13;
      __int16 v21 = 2050;
      *(void *)int v22 = v14;
      *(_WORD *)&v22[8] = 2050;
      uint64_t v23 = v15;
      __int16 v24 = 2050;
      uint64_t v25 = v16;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#gpsd,PedometerAssistance,Ignoring invalid constraint,validityTime,%{public}.2f,duration,%{public}.2f,min,%{public}.2f,max,%{public}.2f", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssDaemonDevice::injectAssistancePedometerSpeedConstraint(const CLGNSSPedometerConstraintAssistanceCommand &)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    double v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      double v7 = *(double *)(a2 + 24);
      uint64_t v6 = *(void *)(a2 + 32);
      uint64_t v8 = *(void *)(a2 + 16);
      *(_DWORD *)buf = 134349568;
      double v20 = v7;
      __int16 v21 = 2050;
      *(void *)int v22 = v6;
      *(_WORD *)&v22[8] = 2050;
      uint64_t v23 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#gpsd,PedometerAssistance,SpeedConstraint,MinSpeedBound,%{public}.2f,MaxSpeedBound,%{public}.2f,ValidityDuration,%{public}.2f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      double v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistancePedometerSpeedConstraint(const CLGNSSPedometerConstraintAssistanceCommand &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    sub_100FCCCA0((uint64_t)buf);
    if ((sub_100FCD768() & 1) == 0) {
      __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
    }
    *(_DWORD *)&v22[6] = 21;
    v27 |= 0x2004u;
    uint64_t v9 = v26;
    if (!v26) {
      operator new();
    }
    int v10 = *(_DWORD *)(v26 + 44);
    *(void *)(v26 + 8) = (unint64_t)(*(double *)(a2 + 8) * 1000000000.0);
    *(_OWORD *)(v9 + 16) = *(_OWORD *)(a2 + 16);
    uint64_t v11 = *(void *)(a2 + 32);
    *(_DWORD *)(v9 + 44) = v10 | 0xF;
    *(void *)(v9 + 32) = v11;
    sub_100FD6EA0(a1 + 2576, (uint64_t)buf);
    sub_101940CD8(a1 + 2176, 2);
    sub_100FCF6CC(buf);
  }
}

void sub_101956C7C()
{
}

void sub_101956CBC(uint64_t a1, void *a2)
{
  if (*a2 == a2[1])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    double v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "#gpsd,GPSSENSOR,No Sensor Samples", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_47:
      uint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssDaemonDevice::injectRawSensorSamples(const GNSS::RawSensorSampleVector &)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
      return;
    }
LABEL_49:
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
    goto LABEL_47;
  }
  sub_100FCF7D8(a1 + 2576);
  int v4 = *(unsigned __int8 *)(*a2 + 8);
  if (v4 == 2)
  {
    if ((sub_100FCD768() & 1) == 0) {
      sub_101A9BF7C();
    }
    int v14 = *(_DWORD *)(a1 + 2972);
    *(_DWORD *)(a1 + 2596) = 15;
    *(_DWORD *)(a1 + 2972) = v14 | 0x84;
    uint64_t v15 = *(int **)(a1 + 2632);
    if (!v15) {
      operator new();
    }
    uint64_t v16 = *a2;
    if (a2[1] != *a2)
    {
      uint64_t v17 = 0;
      unint64_t v18 = 0;
      do
      {
        int v19 = v15[5];
        uint64_t v20 = v15[4];
        if ((int)v20 >= v19)
        {
          if (v19 == v15[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v15 + 2), v19 + 1);
            int v19 = v15[5];
          }
          v15[5] = v19 + 1;
          sub_100FEA244();
        }
        uint64_t v21 = *((void *)v15 + 1);
        v15[4] = v20 + 1;
        sub_101957288(a1, v16 + v17, *(float32x2_t **)(v21 + 8 * v20), v18++ == 0, 0.0174532925);
        uint64_t v16 = *a2;
        v17 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) > v18);
    }
    *(unsigned char *)(a1 + 651) = 1;
    goto LABEL_35;
  }
  if (v4 == 1)
  {
    if ((sub_100FCD768() & 1) == 0) {
      sub_101A9BF7C();
    }
    int v5 = *(_DWORD *)(a1 + 2972);
    *(_DWORD *)(a1 + 2596) = 14;
    *(_DWORD *)(a1 + 2972) = v5 | 0x44;
    uint64_t v6 = *(int **)(a1 + 2624);
    if (!v6) {
      operator new();
    }
    uint64_t v7 = *a2;
    if (a2[1] != *a2)
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        int v10 = v6[5];
        uint64_t v11 = v6[4];
        if ((int)v11 >= v10)
        {
          if (v10 == v6[6])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v6 + 2), v10 + 1);
            int v10 = v6[5];
          }
          v6[5] = v10 + 1;
          sub_100FEA244();
        }
        uint64_t v12 = *((void *)v6 + 1);
        v6[4] = v11 + 1;
        sub_101957288(a1, v7 + v8, *(float32x2_t **)(v12 + 8 * v11), v9++ == 0, -9.80665);
        uint64_t v7 = *a2;
        v8 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) > v9);
    }
    *(unsigned char *)(a1 + 650) = 1;
LABEL_35:
    sub_101940CD8(a1 + 2176, 2);
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v22 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "#gpsd,GPSSENSOR,unsupported Type", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_47;
    }
    goto LABEL_49;
  }
}

void sub_101957258()
{
}

float32_t sub_101957288(uint64_t a1, uint64_t a2, float32x2_t *a3, char a4, double a5)
{
  float32x2_t v14 = 0;
  sub_101956020(a1, &v14, a4, *(double *)a2);
  if (v7)
  {
    float32x2_t v8 = v14;
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    unint64_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "#gpsd,Could not get cont time for inertial sensor sample", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::populateProtoSensorSample(const GNSS::RawSensorSample &, proto::gnss::SensorSample3Axis *, BOOL, double)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    float32x2_t v8 = 0;
  }
  __int32 v10 = a3[4].i32[0];
  a3[1] = v8;
  a3[2] = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(a2 + 12)), a5));
  float32_t result = *(float *)(a2 + 20) * a5;
  a3[4].i32[0] = v10 | 0xF;
  a3[3].f32[0] = result;
  return result;
}

void sub_101957484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10065AB34((uint64_t)v6, a2);
  sub_10183C268((uint64_t)v5, a3);
  sub_101926E60(a1, (uint64_t)v6, (uint64_t)v5);
  sub_10183C300(v5);
  sub_10065ABCC(v6);
  sub_101926FE8(a1, 1);
}

void sub_10195751C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_10183C300((uint64_t *)va);
  sub_10065ABCC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10195754C(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tt,timeTransferPulse,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::timeTransferPulse(const BOOL)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  sub_101941B88(a1, 27);
  float32_t result = *(uint64_t **)(a1 + 3448);
  if (result && a2) {
    return (uint64_t *)sub_10184D96C(result);
  }
  if (result)
  {
    if ((a2 & 1) == 0) {
      return (uint64_t *)sub_10184D97C(result);
    }
  }
  return result;
}

void sub_101957728(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(_DWORD *)(a4 + 8) = -1082130432;
  *(unsigned char *)(a4 + 12) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  *(_OWORD *)(a4 + 24) = xmmword_101E3A320;
  *(void *)(a4 + 48) = 0;
  *(void *)(a4 + 56) = 0;
  *(void *)(a4 + 40) = 0;
  *(_DWORD *)(a4 + 64) = 0;
  if (*(unsigned char *)a2)
  {
    *(void *)a4 = *(void *)(a2 + 8);
    float v8 = sub_1000D3D90(a3[1] - *a3) * 1000000000.0 + 1000000.0 + *(float *)(a2 + 16);
    *(float *)(a4 + 8) = v8;
    *(unsigned char *)(a4 + 12) = *(unsigned char *)(a1 + 1704);
    *(_DWORD *)(a4 + 16) = sub_1004BA69C();
    *(void *)(a4 + 24) = *(void *)(a2 + 32);
    *(void *)(a4 + 32) = 0;
    *(_OWORD *)(a4 + 48) = *(_OWORD *)a3;
    *(_DWORD *)(a4 + 64) = sub_100D67E10((uint64_t *)(a1 + 1848), (float *)a4);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    unint64_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 68289026;
      v10[1] = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#tt,InvalidGpsWeek\"}", (uint8_t *)v10, 0x12u);
    }
  }
}

uint64_t *sub_1019578BC(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#clgda,setBasebandCausesL1InterferenceAssertion", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::setBasebandCausesL1InterferenceAssertion(BOOL)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return sub_1019271B8(a1, 7);
}

void sub_101957A5C(uint64_t a1, unsigned int a2, double *a3, double a4)
{
  if (a2 > 2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    __int32 v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = *((void *)a3 + 67);
      uint64_t v12 = *((void *)a3 + 68);
      uint64_t v13 = *((void *)a3 + 63);
      *(_DWORD *)buf = 134219008;
      uint64_t v36 = v11;
      __int16 v37 = 2048;
      uint64_t v38 = v12;
      __int16 v39 = 1024;
      unsigned int v40 = a2;
      __int16 v41 = 2048;
      double v42 = a4;
      __int16 v43 = 2048;
      uint64_t v44 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#gpsd,DEM,feeding,alt,%.3f,unc,%.3f,reliability,%d,undulation,%.3lf,mach_cont,%.2f", buf, 0x30u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      uint64_t v19 = *((void *)a3 + 67);
      uint64_t v20 = *((void *)a3 + 68);
      uint64_t v21 = *((void *)a3 + 63);
      int v24 = 134219008;
      uint64_t v25 = v19;
      __int16 v26 = 2048;
      *(void *)int v27 = v20;
      *(_WORD *)&v27[8] = 1024;
      unsigned int v28 = a2;
      __int16 v29 = 2048;
      double v30 = a4;
      __int16 v31 = 2048;
      uint64_t v32 = v21;
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistanceDem(GNSS::ReliabilityIndication, const GNSS::DaemonLocation &, double, BOOL)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
    sub_100FCCCA0((uint64_t)&v24);
    if ((sub_100FCD768() & 1) == 0) {
      __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
    }
    *(_DWORD *)&v27[6] = 16;
    v34 |= 0x104u;
    uint64_t v14 = v33;
    if (!v33) {
      operator new();
    }
    unint64_t v15 = (unint64_t)(a3[63] * 1000000000.0);
    *(_DWORD *)(v33 + 36) |= 1u;
    *(void *)(v14 + 8) = v15;
    if (!v15)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      uint64_t v16 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#gpsd,#Warning DEM timestamp is zero", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        uint64_t v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistanceDem(GNSS::ReliabilityIndication, const GNSS::DaemonLocation &, double, BOOL)", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
    }
    int v17 = *(_DWORD *)(v14 + 36);
    *(double *)(v14 + 16) = a3[67] + a4;
    uint64_t v18 = *((void *)a3 + 68);
    *(_DWORD *)(v14 + 36) = v17 | 6;
    *(void *)(v14 + 24) = v18;
    sub_100FD6EA0(a1 + 2576, (uint64_t)&v24);
    sub_101940CD8(a1 + 2176, 2);
    sub_100FCF6CC(&v24);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v36) = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#gpsd,DEM,reliability too low to inject,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v24 = 67240192;
      LODWORD(v25) = a2;
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistanceDem(GNSS::ReliabilityIndication, const GNSS::DaemonLocation &, double, BOOL)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_101957FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100FCF6CC(va);
  _Unwind_Resume(a1);
}

void *sub_101958024(uint64_t a1, uint64_t a2)
{
  return sub_10195802C((void *)(a1 + 3000), a2);
}

void *sub_10195802C(void *a1, uint64_t a2)
{
  sub_101961478((uint64_t)v4, a2);
  sub_101961510(v4, a1);
  sub_1019605C4(v4);
  return a1;
}

void *sub_1019580A0(uint64_t a1, uint64_t a2)
{
  return sub_1019580A8((void *)(a1 + 3032), a2);
}

void *sub_1019580A8(void *a1, uint64_t a2)
{
  sub_10196177C((uint64_t)v4, a2);
  sub_101961814(v4, a1);
  sub_101960648(v4);
  return a1;
}

void *sub_10195811C(uint64_t a1, uint64_t a2)
{
  return sub_101958124((void *)(a1 + 3064), a2);
}

void *sub_101958124(void *a1, uint64_t a2)
{
  sub_101961A80((uint64_t)v4, a2);
  sub_101961B18(v4, a1);
  sub_1019606CC(v4);
  return a1;
}

void *sub_101958198(uint64_t a1, uint64_t a2)
{
  return sub_1019581A0((void *)(a1 + 3096), a2);
}

void *sub_1019581A0(void *a1, uint64_t a2)
{
  sub_101961D84((uint64_t)v4, a2);
  sub_101961E1C(v4, a1);
  sub_101960750(v4);
  return a1;
}

void *sub_101958214(uint64_t a1, uint64_t a2)
{
  return sub_10195821C((void *)(a1 + 3128), a2);
}

void *sub_10195821C(void *a1, uint64_t a2)
{
  sub_101962088((uint64_t)v4, a2);
  sub_101962120(v4, a1);
  sub_1019607D4(v4);
  return a1;
}

void *sub_101958290(uint64_t a1, uint64_t a2)
{
  return sub_101958298((void *)(a1 + 3160), a2);
}

void *sub_101958298(void *a1, uint64_t a2)
{
  sub_10196238C((uint64_t)v4, a2);
  sub_101962424(v4, a1);
  sub_101960858(v4);
  return a1;
}

void sub_10195830C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#gpsd, enableLocationServices", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::enableLocationServices()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  *(unsigned char *)(a1 + 2336) = 1;
}

uint64_t sub_1019584A8(unsigned char *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#gpsd, disableLocationServices", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::disableLocationServices()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 296))(a1);
  a1[2336] = 0;
  return result;
}

uint64_t sub_101958670(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,resetInfo,first_stage", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::resetPrivacyInfo()", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  sub_101941B88(a1, 4);
  double v3 = sub_1018779C0();
  double v4 = *(double *)&qword_1024891E8;
  qword_1024891E8 = *(void *)&v3;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  double v5 = v3 - v4;
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349056;
    *(double *)uint64_t v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gpsd,resetInfo,second_stage,deltaSeconds,%{public}.1f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::resetPrivacyInfo()", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  if (v5 >= 16.0)
  {
    dword_102479EB8 = 1;
  }
  else
  {
    int v7 = dword_102479EB8++;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    float v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240448;
      LODWORD(v16[0]) = dword_102479EB8;
      WORD2(v16[0]) = 1026;
      *(_DWORD *)((char *)v16 + 6) = v7 > 4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#gpsd,resetInfo,repeated,%{public}d,forceClearAllNv,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::resetPrivacyInfo()", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    if (v7 >= 5)
    {
      dword_102479EB8 = 1;
      sub_101941B88(a1, 37);
    }
  }
  sub_100FCCCA0((uint64_t)buf);
  if ((sub_100FCD768() & 1) == 0) {
    __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
  }
  int v17 = 36;
  v19 |= 0x2000004u;
  uint64_t v9 = v18;
  if (!v18) {
    operator new();
  }
  *(_DWORD *)(v18 + 20) |= 1u;
  __int32 v10 = *(std::string **)(v9 + 8);
  if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::assign(v10, "LS off");
  ++*(_DWORD *)(a1 + 1244);
  sub_100FD6EA0(a1 + 2576, (uint64_t)buf);
  sub_101940CD8(a1 + 2176, 2);
  return sub_100FCF6CC(buf);
}

void sub_101958C28()
{
}

uint64_t sub_101958C64(unsigned char *a1, int *a2, const __CFDictionary **a3)
{
  double v5 = (const void *)sub_1000FA17C(a2);
  uint64_t result = CFEqual(v5, @"kCLCellularTransmitStateNotification");
  CFDictionaryRef v7 = *a3;
  if (result) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    sub_10013FA80((int)v16, v7);
    BOOL v15 = 0;
    if (sub_1000D29FC((uint64_t)v16, @"kCLCellularTransmitStateNotification", &v15))
    {
      int v9 = v15;
      int v10 = a1[16];
      a1[16] = v15;
      if (v9 != v10 && *(unsigned char *)(*(void *)a1 + 1680))
      {
        if (v9)
        {
          if (a1[17]) {
            sub_10195FD88((uint64_t)a1);
          }
          else {
            sub_10194BA90(a1);
          }
        }
        else
        {
          sub_10195FBC0((uint64_t)a1);
        }
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      uint64_t v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000FECE0(@"kCLCellularTransmitStateNotification", (uint64_t)__p);
        uint64_t v12 = v22 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,#cts,key,%{public}s,notExist", buf, 0xCu);
        if (v22 < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        sub_1000FECE0(@"kCLCellularTransmitStateNotification", (uint64_t)buf);
        if (v18 >= 0) {
          uint64_t v13 = buf;
        }
        else {
          uint64_t v13 = *(unsigned char **)buf;
        }
        int v19 = 136446210;
        uint64_t v20 = v13;
        uint64_t v14 = (char *)_os_log_send_and_compose_impl();
        if (v18 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::ThermalRiskController::onTelephonyNotificationCellTransmitState(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v14);
        if (v14 != (char *)__p) {
          free(v14);
        }
      }
    }
    return sub_10013F3C4(v16);
  }
  return result;
}

void sub_101958F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_101958F4C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,startEmergencyPreemptiveSession", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    LOWORD(v13[0]) = 0;
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::startEmergencyPreemptiveSession()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (*(unsigned char *)(a1 + 1680))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    double v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#gpsd,emergency preemptive session requested during a local client session", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      LOWORD(v13[0]) = 0;
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::startEmergencyPreemptiveSession()", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  sub_100FCF7D8(a1 + 2576);
  sub_100103240();
  if (sub_100119A30())
  {
    sub_1000C7F88(buf);
    unsigned __int8 v4 = *(unsigned char *)(a1 + 2564);
    LOBYTE(v13[0]) = 0;
    if (sub_1000D2988(*(uint64_t *)buf, "b13Enable", (BOOL *)v13)) {
      unsigned __int8 v5 = v13[0];
    }
    else {
      unsigned __int8 v5 = v4;
    }
    if (v17) {
      sub_1000DB0A0(v17);
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(unsigned __int8 *)(a1 + 2564);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v5;
      LOWORD(v17) = 1024;
      *(_DWORD *)((char *)&v17 + 2) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gpsd,b13Enable,%d,context.fB13,%d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v11 = *(unsigned __int8 *)(a1 + 2564);
      v13[0] = 67109376;
      v13[1] = v5;
      __int16 v14 = 1024;
      int v15 = v11;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::startEmergencyPreemptiveSession()", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    *(_DWORD *)(a1 + 2972) |= 0x8000000u;
    uint64_t v8 = *(void *)(a1 + 2792);
    if (!v8) {
      operator new();
    }
    *(_DWORD *)(v8 + 24) |= 1u;
    *(unsigned char *)(v8 + 16) = v5;
    if (!*(unsigned char *)(a1 + 1665)) {
      sub_10194B694(a1);
    }
  }
  if ((sub_100FCD768() & 1) == 0) {
    sub_101A9BF7C();
  }
  *(_DWORD *)(a1 + 2972) |= 4u;
  *(_DWORD *)(a1 + 2596) = 51;
  sub_101940CD8(a1 + 2176, 2);
  sub_10194B884(a1);
}

void sub_101959460()
{
}

uint64_t sub_1019594A0(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,stopEmergencyPreemptiveSession", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    unsigned __int8 v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::stopEmergencyPreemptiveSession()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_100FCF7D8(a1 + 2576);
  if ((sub_100FCD768() & 1) == 0) {
    sub_101A9BF7C();
  }
  *(_DWORD *)(a1 + 2972) |= 4u;
  *(_DWORD *)(a1 + 2596) = 52;
  sub_101940CD8(a1 + 2176, 2);
  sub_100103240();
  uint64_t result = sub_100119A30();
  if (result)
  {
    if (!*(unsigned char *)(a1 + 1665)) {
      return sub_101959688(a1);
    }
  }
  return result;
}

uint64_t sub_101959688(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 1284);
    *(_DWORD *)buf = 67240192;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#nilr,#gpsd,en,denylistFlags,0x%{public}x", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    unsigned __int8 v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::setGnssConstellationsPersistentConfig()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return sub_10194B3D0(a1, 0, *(_DWORD *)(a1 + 1284));
}

uint64_t sub_10195984C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,enterEmergencyMode", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    unsigned __int8 v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::enterEmergencyMode()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_100FCF7D8(a1 + 2576);
  if ((sub_100FCD768() & 1) == 0) {
    sub_101A9BF7C();
  }
  *(_DWORD *)(a1 + 2972) |= 4u;
  *(_DWORD *)(a1 + 2596) = 55;
  return sub_101940CD8(a1 + 2176, 2);
}

uint64_t sub_101959A18(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,exitEmergencyMode", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    unsigned __int8 v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::exitEmergencyMode()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_100FCF7D8(a1 + 2576);
  if ((sub_100FCD768() & 1) == 0) {
    sub_101A9BF7C();
  }
  *(_DWORD *)(a1 + 2972) |= 4u;
  *(_DWORD *)(a1 + 2596) = 56;
  return sub_101940CD8(a1 + 2176, 2);
}

void sub_101959BE4(uint64_t a1, int *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  unsigned __int8 v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gpsd,updateDeviceOperatingContext", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::updateDeviceOperatingContext(const DeviceOperatingContext_t &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  int v5 = *a2;
  *(_WORD *)(a1 + 2564) = *((_WORD *)a2 + 2);
  *(_DWORD *)(a1 + 2560) = v5;
}

void sub_101959D8C(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = a1 + 1684;
  int v5 = sub_100D33A54(a1 + 1684);
  int v6 = sub_100D33A54((uint64_t)a2);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100D335B8(a2, &__p);
    uint64_t v8 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    BOOL v9 = sub_100D33CD4((uint64_t)a2);
    BOOL v10 = sub_100D33D08((uint64_t)a2);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v6;
    WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(buf.__r_.__value_.__r.__words[2]) = v9;
    __int16 v30 = 1024;
    BOOL v31 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#gpsd,EMERGENCY: state,%s,inBasebandEmergencyNow,%d,inEmergency,%d,isNoneOrCleea,%d", (uint8_t *)&buf, 0x1Eu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    sub_100D335B8(a2, &v25);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v16 = &v25;
    }
    else {
      uint64_t v16 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    BOOL v17 = sub_100D33CD4((uint64_t)a2);
    BOOL v18 = sub_100D33D08((uint64_t)a2);
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v6;
    WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(__p.__r_.__value_.__r.__words[2]) = v17;
    __int16 v27 = 1024;
    BOOL v28 = v18;
    int v19 = (std::string *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::handleEmergencyStateChange(CLEmergencyState)", "%s\n", (const char *)v19);
    if (v19 != &buf) {
      free(v19);
    }
  }
  long long v11 = *(_OWORD *)a2;
  *(_DWORD *)(v4 + 16) = a2[4];
  *(_OWORD *)uint64_t v4 = v11;
  if (sub_100D33CD4((uint64_t)a2) && *(unsigned char *)(a1 + 1706)) {
    (*(void (**)(uint64_t, void))(*(void *)a1 + 272))(a1, 0);
  }
  uint64_t v12 = *(void *)(a1 + 3192);
  if (v12)
  {
    long long v23 = *(_OWORD *)a2;
    int v24 = a2[4];
    sub_10197A538(v12, (unsigned int *)&v23);
  }
  if (v5 != v6)
  {
    if (v6) {
      sub_10195A2F8(a1);
    }
    else {
      sub_10195A4B0(a1);
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v13 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    p_std::string buf = &buf;
    sub_100D335B8(a2, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    BOOL v15 = sub_100D33A54((uint64_t)a2);
    if (v15) {
      BOOL v15 = sub_100D33A78((uint64_t)a2);
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#gpsd,EMERGENCY: state,%s,isDefiniteBasebandEmergency,%d", (uint8_t *)&__p, 0x12u);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    p_p = &__p;
    sub_100D335B8(a2, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    BOOL v21 = sub_100D33A54((uint64_t)a2);
    if (v21) {
      BOOL v21 = sub_100D33A78((uint64_t)a2);
    }
    LODWORD(v25.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    WORD2(v25.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v25.__r_.__value_.__r.__words[1] + 6) = v21;
    char v22 = (std::string *)_os_log_send_and_compose_impl();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::handleEmergencyStateChange(CLEmergencyState)", "%s\n", (const char *)v22);
    if (v22 != &buf) {
      free(v22);
    }
  }
}

void sub_10195A2A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10195A2F8(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,enterCellularEmergency", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::enterCellularEmergency()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  if (!*(unsigned char *)(a1 + 1665)) {
    sub_10194B694(a1);
  }
  sub_100103240();
  uint64_t result = sub_10073CBFC();
  if (result) {
    return sub_10195984C(a1);
  }
  return result;
}

void sub_10195A4B0(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,exitCellularEmergency", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::exitCellularEmergency()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_100103240();
  if (sub_10073CBFC()) {
    sub_101959A18(a1);
  }
  if (!*(unsigned char *)(a1 + 1665))
  {
    sub_101959688(a1);
    sub_10195A670(a1);
  }
}

void sub_10195A670(uint64_t a1)
{
  uint64_t v2 = a1 + 1684;
  BOOL v3 = sub_100D33A54(a1 + 1684) && sub_100D33A78(v2);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 2424);
    *(_DWORD *)std::string buf = 67109376;
    int v23 = v5;
    __int16 v24 = 1024;
    BOOL v25 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#awd,fWasNilrRequestReceived,%d,isDefiniteBasebandEmergency,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v7 = *(unsigned __int8 *)(a1 + 2424);
    int v18 = 67109376;
    int v19 = v7;
    __int16 v20 = 1024;
    BOOL v21 = v3;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::reportNoNILRtoAWD()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (v3 && !*(unsigned char *)(a1 + 2424))
  {
    sub_10084CBBC((uint64_t)buf);
    char v26 = 0;
    sub_10192B6A8((uint64_t)buf);
    if (*(void *)(a1 + 2456))
    {
      sub_101832D90((uint64_t)v9, (uint64_t)buf);
      uint64_t v6 = *(void *)(a1 + 2456);
      if (!v6) {
        sub_10015E48C();
      }
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v6 + 48))(v6, v9);
      if (v17 < 0) {
        operator delete(__p);
      }
      if (v15 < 0) {
        operator delete(v14);
      }
      if (v13 < 0) {
        operator delete(v12);
      }
      if (v11 < 0) {
        operator delete(v10);
      }
    }
    if (v34 < 0) {
      operator delete(v33);
    }
    if (v32 < 0) {
      operator delete(v31);
    }
    if (v30 < 0) {
      operator delete(v29);
    }
    if (v28 < 0) {
      operator delete(v27);
    }
  }
  *(unsigned char *)(a1 + 2424) = 0;
}

void sub_10195A95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10083788C((uint64_t)va);
  sub_10083788C((uint64_t)&STACK[0x500]);
  _Unwind_Resume(a1);
}

void sub_10195A988(uint64_t a1, signed int *a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a1 + 3192);
  if (v3) {
    sub_101978E0C(v3, a2, a3);
  }
}

void sub_10195A998(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 3192) && (sub_10073CBFC() & 1) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 3192);
    sub_101979888(v4, a2);
  }
}

void sub_10195A9F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 3192);
  if (v1) {
    sub_10197BCD4(v1);
  }
}

BOOL sub_10195AA00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 3192);
  if (v2) {
    sub_10197C2A8(*(void *)(a1 + 3192), a2);
  }
  return v2 != 0;
}

void sub_10195AA34(uint64_t a1, uint64_t a2, int *a3, unsigned char *a4)
{
  int v5 = *a3;
  if (*a3 == 8)
  {
    *(unsigned char *)(a1 + 1707) = *a4;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(unsigned __int8 *)(a1 + 1707);
      *(_DWORD *)std::string buf = 67240192;
      int v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gpsd,modemFlightMode,%{public}d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_24:
      char v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
      return;
    }
LABEL_26:
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
    goto LABEL_24;
  }
  if (v5 == 3)
  {
    sub_10195AF2C(a1);
    return;
  }
  if (v5 == 2)
  {
    sub_10195AD8C(a1);
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  BOOL v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *a3;
    *(_DWORD *)std::string buf = 67240192;
    int v13 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#gpsd,#Warning,Unhandled notification %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_24;
    }
    goto LABEL_26;
  }
}

uint64_t *sub_10195AD8C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#gpsd,onSleep", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::onSleep()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return sub_1019271B8(a1, 2);
}

uint64_t *sub_10195AF2C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#gpsd,onWake", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::onWake()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return sub_1019271B8(a1, 3);
}

void sub_10195B0CC(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,onNilrBegin", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::onNilrBegin()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  if (*(unsigned char *)(a1 + 1665)) {
    sub_10194B694(a1);
  }
  sub_1019271B8(a1, 4);
  *(unsigned char *)(a1 + 2424) = 1;
  sub_100103240();
  if ((sub_10073CBFC() & 1) == 0) {
    sub_101958F4C(a1);
  }
}

uint64_t *sub_10195B298(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,onNilrEnd", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::onNilrEnd()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_100103240();
  if ((sub_10073CBFC() & 1) == 0) {
    sub_1019594A0(a1);
  }
  uint64_t result = sub_1019271B8(a1, 5);
  if (*(unsigned char *)(a1 + 1665)) {
    return (uint64_t *)sub_101959688(a1);
  }
  return result;
}

uint64_t sub_10195B45C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = a2;
  char v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, char *))(*(void *)v4 + 48))(v4, &v7, a3, &v6);
}

void sub_10195B4B8(uint64_t a1, unsigned __int16 *a2, unsigned __int8 *a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  char v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gpsd,startEmergencyPositionRequest", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::startEmergencyPositionRequest(const gnss::Emergency::Cplane::PositionRequest &, const gnss::Emergency::Cplane::Context &)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  sub_100FCF7D8(a1 + 2576);
  if ((sub_100FCD768() & 1) == 0) {
    sub_101A9BF7C();
  }
  *(_DWORD *)(a1 + 2596) = 60;
  *(int8x8_t *)(a1 + 2972) = vorr_s8(*(int8x8_t *)(a1 + 2972), (int8x8_t)0x200000004);
  uint64_t v7 = *(_DWORD **)(a1 + 2840);
  if (!v7) {
    operator new();
  }
  sub_1017DF714(a2, v7);
  *(_DWORD *)(a1 + 2976) |= 0x100u;
  uint64_t v8 = *(void *)(a1 + 2896);
  if (!v8) {
    operator new();
  }
  sub_1017DFD40((uint64_t)a3, v8);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102346718);
  }
  BOOL v9 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *a3;
    int v11 = a3[1];
    *(_DWORD *)std::string buf = 67109376;
    int v15 = v10;
    __int16 v16 = 1024;
    int v17 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#gpsd,#nilr,#cplane,cplaneContext,heloEnabled,%d,cplane_early_return,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102346718);
    }
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::startEmergencyPositionRequest(const gnss::Emergency::Cplane::PositionRequest &, const gnss::Emergency::Cplane::Context &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  sub_101940CD8(a1 + 2176, 2);
  sub_10194B884(a1);
}

void sub_10195B898()
{
}

uint64_t sub_10195B8E0(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gpsd,stopEmergencyPositionRequest", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::stopEmergencyPositionRequest(const uint32_t)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  sub_100FCF7D8(a1 + 2576);
  if ((sub_100FCD768() & 1) == 0) {
    sub_101A9BF7C();
  }
  *(_DWORD *)(a1 + 2596) = 61;
  *(void *)(a1 + 2972) |= 0x400000004uLL;
  *(_DWORD *)(a1 + 2880) = a2;
  return sub_101940CD8(a1 + 2176, 2);
}

uint64_t sub_10195BAB8(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gpsd,setNwAssistanceGpsRefTime", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::setNwAssistanceGpsRefTime(const gnss::Emergency::Cplane::GpsReferenceTime &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_100FCF7D8(a1 + 2576);
  if ((sub_100FCD768() & 1) == 0) {
    sub_101A9BF7C();
  }
  *(_DWORD *)(a1 + 2596) = 65;
  *(int8x8_t *)(a1 + 2972) = vorr_s8(*(int8x8_t *)(a1 + 2972), (int8x8_t)0x800000004);
  int v5 = *(_DWORD **)(a1 + 2848);
  if (!v5) {
    operator new();
  }
  sub_1017DF828(a2, v5);
  return sub_101940CD8(a1 + 2176, 2);
}

void sub_10195BCD0()
{
}

uint64_t sub_10195BCFC(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gpsd,setNwAssistanceRefPosition", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::setNwAssistanceRefPosition(const gnss::Emergency::Cplane::ReferenceLocation &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_100FCF7D8(a1 + 2576);
  if ((sub_100FCD768() & 1) == 0) {
    sub_101A9BF7C();
  }
  *(_DWORD *)(a1 + 2596) = 66;
  uint8x8_t v5 = (uint8x8_t)vorr_s8(*(int8x8_t *)(a1 + 2972), (int8x8_t)0x1000000004);
  *(uint8x8_t *)(a1 + 2972) = v5;
  uint64_t v6 = *(void *)(a1 + 2856);
  if (!v6) {
    operator new();
  }
  sub_1017DF9C4(a2, v6, v5);
  return sub_101940CD8(a1 + 2176, 2);
}

void sub_10195BF14()
{
}

uint64_t sub_10195BF40(uint64_t a1, _DWORD *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gpsd,setNwAssistanceGpsEphemeris", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::setNwAssistanceGpsEphemeris(const gnss::Emergency::Cplane::GpsNavigationModel &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_100FCF7D8(a1 + 2576);
  if ((sub_100FCD768() & 1) == 0) {
    sub_101A9BF7C();
  }
  *(_DWORD *)(a1 + 2596) = 67;
  *(int8x8_t *)(a1 + 2972) = vorr_s8(*(int8x8_t *)(a1 + 2972), (int8x8_t)0x2000000004);
  uint8x8_t v5 = *(int **)(a1 + 2864);
  if (!v5) {
    operator new();
  }
  sub_1017DFC00(a2, v5);
  return sub_101940CD8(a1 + 2176, 2);
}

void sub_10195C158()
{
}

uint64_t sub_10195C184(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gpsd,setNwAssistanceGpsAcq", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::setNwAssistanceGpsAcq(const gnss::Emergency::Cplane::GpsAcqAssistance &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_100FCF7D8(a1 + 2576);
  if ((sub_100FCD768() & 1) == 0) {
    sub_101A9BF7C();
  }
  *(_DWORD *)(a1 + 2596) = 68;
  *(int8x8_t *)(a1 + 2972) = vorr_s8(*(int8x8_t *)(a1 + 2972), (int8x8_t)0x4000000004);
  uint64_t v5 = *(void *)(a1 + 2872);
  if (!v5) {
    operator new();
  }
  sub_1017E03D4(a2, v5);
  return sub_101940CD8(a1 + 2176, 2);
}

void sub_10195C39C()
{
}

uint64_t sub_10195C3C8(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gpsd,injectFt1xAssistance", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::injectFt1xAssistance(const gnss::Emergency::Cplane::CellFTAssistance &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_100FCF7D8(a1 + 2576);
  if ((sub_100FCD768() & 1) == 0) {
    sub_101A9BF7C();
  }
  *(_DWORD *)(a1 + 2596) = 69;
  *(int8x8_t *)(a1 + 2972) = vorr_s8(*(int8x8_t *)(a1 + 2972), (int8x8_t)0x8000000004);
  uint64_t v5 = *(void *)(a1 + 2888);
  if (!v5) {
    operator new();
  }
  sub_1017E057C(a2, v5);
  return sub_101940CD8(a1 + 2176, 2);
}

void sub_10195C5E0()
{
}

uint64_t sub_10195C60C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_10195C660(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_10195C6B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_10195C708(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_10195C75C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_10195C7B0(uint64_t result)
{
  uint64_t v1 = *(unsigned char **)(result + 32);
  if (v1[1680])
  {
    (*(void (**)(void, void))(*(void *)v1 + 240))(*(void *)(result + 32), 0);
    return sub_101941B88((uint64_t)v1, 28);
  }
  return result;
}

void sub_10195C828(_DWORD *a1, int a2, int a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67240448;
    int v9 = a2;
    __int16 v10 = 1026;
    int v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gpsd,exceptionCategory,%{public}d,payload,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::awdLoggingOfGpsdException(int, int)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  ++a1[319];
  a1[317] = a2;
  a1[318] = a3;
}

void *sub_10195CA10(uint64_t a1, uint64_t a2)
{
  return sub_10195CA18((void *)(a1 + 3200), a2);
}

void *sub_10195CA18(void *a1, uint64_t a2)
{
  sub_101962690((uint64_t)v4, a2);
  sub_101962728(v4, a1);
  sub_10196092C(v4);
  return a1;
}

uint64_t sub_10195CA8C(uint64_t a1, int a2, int a3, unsigned __int8 **a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a2;
    LOWORD(v20) = 1024;
    *(_DWORD *)((char *)&v20 + 2) = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#nilr,#supl,,inst,%d,decodeSuplInit,index,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::decodeSuplInit(SimInstance, gnss::Emergency::Supl::SuplInitIndex, const std::vector<uint8_t> &)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  sub_100FCF7D8(a1 + 2576);
  if ((sub_100FCD768() & 1) == 0) {
    sub_101A9BF7C();
  }
  *(_DWORD *)(a1 + 2972) |= 4u;
  *(_DWORD *)(a1 + 2596) = 70;
  __int16 v10 = *a4;
  int v9 = a4[1];
  *(void *)std::string buf = 0;
  uint64_t v20 = 0;
  if (v9 == v10)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      int v12 = *v10;
      int v13 = v20;
      if (v20 == HIDWORD(v20))
      {
        sub_100221DFC((uint64_t)buf, v20 + 1);
        int v13 = v20;
        uint64_t v11 = *(void *)buf;
      }
      LODWORD(v20) = v13 + 1;
      *(_DWORD *)(v11 + 4 * v13) = v12;
      ++v10;
    }
    while (v10 != v9);
  }
  if ((uint8_t *)(a1 + 2904) != buf)
  {
    uint64_t v14 = *(void *)(a1 + 2904);
    *(void *)(a1 + 2904) = v11;
    *(void *)std::string buf = v14;
    uint64_t v15 = *(void *)(a1 + 2912);
    *(void *)(a1 + 2912) = v20;
    uint64_t v20 = v15;
  }
  int v16 = *(_DWORD *)(a1 + 2976);
  *(_DWORD *)(a1 + 2884) = a3;
  *(_DWORD *)(a1 + 2976) = v16 | 0x4800;
  *(_DWORD *)(a1 + 2948) = a2;
  sub_101940CD8(a1 + 2176, 2);
  uint64_t result = *(void *)buf;
  if (*(void *)buf) {
    operator delete[]();
  }
  return result;
}

void sub_10195CD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10195CD88(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#nilr,#supl,#wlan,setSuplWlanMeas", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::setSuplWlanMeas(const gnss::Emergency::Supl::WlanMeasurementList &)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  if (*(void *)(a2 + 16) != *(void *)(a2 + 8))
  {
    unint64_t v4 = 0;
    uint64_t v5 = 10;
    do
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102346718);
      }
      uint64_t v6 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = (__int16 *)(*(void *)(a2 + 8) + v5);
        int v8 = *((unsigned __int8 *)v7 - 10);
        int v9 = *((unsigned __int8 *)v7 - 9);
        int v10 = *((unsigned __int8 *)v7 - 8);
        int v11 = *((unsigned __int8 *)v7 - 7);
        int v12 = *((unsigned __int8 *)v7 - 6);
        int v13 = *((unsigned __int8 *)v7 - 5);
        int v14 = (unsigned __int16)*(v7 - 1);
        int v15 = *v7;
        int v16 = *((unsigned __int8 *)v7 - 4);
        LODWORD(v7) = *((unsigned __int8 *)v7 - 3);
        *(_DWORD *)std::string buf = 67111424;
        int v23 = v8;
        __int16 v24 = 1024;
        int v25 = v9;
        __int16 v26 = 1024;
        int v27 = v10;
        __int16 v28 = 1024;
        int v29 = v11;
        __int16 v30 = 1024;
        int v31 = v12;
        __int16 v32 = 1024;
        int v33 = v13;
        __int16 v34 = 1024;
        int v35 = v14;
        __int16 v36 = 1024;
        int v37 = v15;
        __int16 v38 = 1024;
        int v39 = v16;
        __int16 v40 = 1024;
        int v41 = (int)v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#wlan,setSuplWlanMeas,WlanMeasurementElement,bssid,%02x:%02x:%02x:%02x:%02x:%02x,channel,%d,rssi,%d,isServingFlagPresent,%d,servingFlag,%d", buf, 0x3Eu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102346718);
        }
        int v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::setSuplWlanMeas(const gnss::Emergency::Supl::WlanMeasurementList &)", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
      ++v4;
      v5 += 12;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2) > v4);
  }
  sub_100FCF7D8(a1 + 2576);
  if ((sub_100FCD768() & 1) == 0) {
    sub_101A9BF7C();
  }
  *(_DWORD *)(a1 + 2596) = 76;
  *(int8x8_t *)(a1 + 2972) = vorr_s8(*(int8x8_t *)(a1 + 2972), (int8x8_t)0x1000000000004);
  int v18 = *(int **)(a1 + 2960);
  if (!v18) {
    operator new();
  }
  sub_1017E66DC(a2, v18);
  return sub_101940CD8(a1 + 2176, 2);
}

void sub_10195D244()
{
}

uint64_t sub_10195D270(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3, std::string *a4, std::string *a5)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v10 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#nilr,#supl,setSuplInit", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    LOWORD(v49) = 0;
    __int16 v36 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::setSuplInit(const std::vector<uint8_t> &, const gnss::Emergency::Supl::ConnectionContext &, const gnss::Emergency::Supl::Context &, const std::string &)", "%s\n", v36);
    if (v36 != (char *)buf) {
      free(v36);
    }
  }
  sub_100FCF7D8(a1 + 2576);
  if ((sub_100FCD768() & 1) == 0) {
    sub_101A9BF7C();
  }
  *(_DWORD *)(a1 + 2972) |= 4u;
  *(_DWORD *)(a1 + 2596) = 71;
  int v12 = *a2;
  int v11 = a2[1];
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  if (v11 == v12)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      int v14 = *v12;
      int v15 = v48;
      if (v48 == HIDWORD(v48))
      {
        sub_100221DFC((uint64_t)&v47, v48 + 1);
        int v15 = v48;
        uint64_t v13 = v47;
      }
      LODWORD(v48) = v15 + 1;
      *(_DWORD *)(v13 + 4 * v15) = v14;
      ++v12;
    }
    while (v12 != v11);
  }
  if ((uint64_t *)(a1 + 2904) != &v47)
  {
    uint64_t v16 = *(void *)(a1 + 2904);
    *(void *)(a1 + 2904) = v13;
    uint64_t v47 = v16;
    uint64_t v17 = *(void *)(a1 + 2912);
    *(void *)(a1 + 2912) = v48;
    uint64_t v48 = v17;
  }
  int v18 = *a3;
  int v19 = a3[1];
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  if (v19 == v18)
  {
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v20 = 0;
    do
    {
      int v21 = *v18;
      int v22 = v46;
      if (v46 == HIDWORD(v46))
      {
        sub_100221DFC((uint64_t)&v45, v46 + 1);
        int v22 = v46;
        uint64_t v20 = v45;
      }
      LODWORD(v46) = v22 + 1;
      *(_DWORD *)(v20 + 4 * v22) = v21;
      ++v18;
    }
    while (v18 != v19);
  }
  if ((uint64_t *)(a1 + 2928) != &v45)
  {
    uint64_t v23 = *(void *)(a1 + 2928);
    *(void *)(a1 + 2928) = v20;
    uint64_t v45 = v23;
    uint64_t v24 = *(void *)(a1 + 2936);
    *(void *)(a1 + 2936) = v46;
    uint64_t v46 = v24;
  }
  int v25 = *(_DWORD *)(a1 + 2976);
  *(unsigned char *)(a1 + 2944) = *((unsigned char *)a3 + 24);
  *(_DWORD *)(a1 + 2976) = v25 | 0xA000;
  uint64_t v26 = *(void *)(a1 + 2952);
  if (!v26) {
    operator new();
  }
  sub_1017E6490(a4, v26);
  sub_1017DF698(a5, v26);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102346718);
  }
  int v27 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v28 = a4[3].__r_.__value_.__s.__data_[0];
    if (a4[2].__r_.__value_.__s.__data_[15] >= 0) {
      int v29 = &a4[1].__r_.__value_.__s.__data_[16];
    }
    else {
      int v29 = (std::string::value_type *)a4[1].__r_.__value_.__r.__words[2];
    }
    int v30 = a4[1].__r_.__value_.__s.__data_[8];
    int data_low = LOWORD(a4->__r_.__value_.__l.__data_);
    if (a4[1].__r_.__value_.__s.__data_[7] >= 0) {
      std::string::size_type p_size = (std::string::size_type)&a4->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type p_size = a4->__r_.__value_.__l.__size_;
    }
    int v33 = a4[3].__r_.__value_.__s.__data_[1];
    if ((a5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v34 = a5;
    }
    else {
      __int16 v34 = (std::string *)a5->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 67110659;
    int v64 = v28;
    __int16 v65 = 2081;
    __int16 v66 = v29;
    __int16 v67 = 1024;
    int v68 = v30;
    __int16 v69 = 1024;
    int v70 = data_low;
    __int16 v71 = 2081;
    std::string::size_type v72 = p_size;
    __int16 v73 = 1024;
    int v74 = v33;
    __int16 v75 = 2080;
    __int16 v76 = v34;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#gpsd,#nilr,#supl,emergContext,heloEnabled,%d,imsi,%{private}s,supl_enable_msa,%d,suplPort,%d,suplServer,%{private}s,cplane_early_return,%d,uuid,%s", buf, 0x38u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102346718);
    }
    int v37 = a4[3].__r_.__value_.__s.__data_[0];
    if (a4[2].__r_.__value_.__s.__data_[15] >= 0) {
      __int16 v38 = &a4[1].__r_.__value_.__s.__data_[16];
    }
    else {
      __int16 v38 = (std::string::value_type *)a4[1].__r_.__value_.__r.__words[2];
    }
    int v39 = a4[1].__r_.__value_.__s.__data_[8];
    int v40 = LOWORD(a4->__r_.__value_.__l.__data_);
    if (a4[1].__r_.__value_.__s.__data_[7] >= 0) {
      std::string::size_type size = (std::string::size_type)&a4->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type size = a4->__r_.__value_.__l.__size_;
    }
    int v42 = a4[3].__r_.__value_.__s.__data_[1];
    if ((a5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v43 = a5;
    }
    else {
      __int16 v43 = (std::string *)a5->__r_.__value_.__r.__words[0];
    }
    int v49 = 67110659;
    int v50 = v37;
    __int16 v51 = 2081;
    int v52 = v38;
    __int16 v53 = 1024;
    int v54 = v39;
    __int16 v55 = 1024;
    int v56 = v40;
    __int16 v57 = 2081;
    std::string::size_type v58 = size;
    __int16 v59 = 1024;
    int v60 = v42;
    __int16 v61 = 2080;
    uint64_t v62 = v43;
    uint64_t v44 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::setSuplInit(const std::vector<uint8_t> &, const gnss::Emergency::Supl::ConnectionContext &, const gnss::Emergency::Supl::Context &, const std::string &)", "%s\n", v44);
    if (v44 != (char *)buf) {
      free(v44);
    }
  }
  sub_101940CD8(a1 + 2176, 2);
  if (v45) {
    operator delete[]();
  }
  uint64_t result = v47;
  if (v47) {
    operator delete[]();
  }
  return result;
}

void sub_10195D84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a11) {
    operator delete[]();
  }
  if (a13) {
    operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10195D8C4(uint64_t a1, uint64_t a2)
{
  sub_100FCF7D8(a1 + 2576);
  if ((sub_100FCD768() & 1) == 0) {
    sub_101A9BF7C();
  }
  *(_DWORD *)(a1 + 2596) = 73;
  *(int8x8_t *)(a1 + 2972) = vorr_s8(*(int8x8_t *)(a1 + 2972), (int8x8_t)0x40000000004);
  unint64_t v4 = *(int **)(a1 + 2920);
  if (!v4) {
    operator new();
  }
  sub_1017DF3F0(a2, v4);

  return sub_101940CD8(a1 + 2176, 2);
}

void sub_10195D978()
{
}

uint64_t sub_10195D99C(uint64_t a1)
{
  sub_100FCF7D8(a1 + 2576);
  if ((sub_100FCD768() & 1) == 0) {
    sub_101A9BF7C();
  }
  *(_DWORD *)(a1 + 2972) |= 4u;
  *(_DWORD *)(a1 + 2596) = 74;

  return sub_101940CD8(a1 + 2176, 2);
}

void sub_10195DA00(uint64_t a1)
{
  sub_1000C7F88(buf);
  LOBYTE(v7[0]) = 0;
  int v2 = sub_1000D2988(*(uint64_t *)buf, "b13EnableInConformance", (BOOL *)v7);
  if (LOBYTE(v7[0])) {
    int v3 = v2;
  }
  else {
    int v3 = 0;
  }
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v3)
  {
    sub_100103240();
    if (sub_100119A30())
    {
      sub_100103240();
      if (sub_10010145C())
      {
        if (*(unsigned char *)(a1 + 1665) && !sub_100D33A54(a1 + 1684))
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          unint64_t v4 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67240192;
            *(_DWORD *)&uint8_t buf[4] = 1;
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gpsd,isBand13EnabledInConformance,%{public}d,", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023466B8);
            }
            v7[0] = 67240192;
            v7[1] = 1;
            uint64_t v6 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::setB13InConformanceMode()", "%s\n", v6);
            if (v6 != (char *)buf) {
              free(v6);
            }
          }
          *(_DWORD *)(a1 + 2972) |= 0x8000000u;
          uint64_t v5 = *(void *)(a1 + 2792);
          if (!v5) {
            operator new();
          }
          *(_DWORD *)(v5 + 24) |= 1u;
          *(unsigned char *)(v5 + 16) = 1;
        }
      }
    }
  }
}

void sub_10195DC6C()
{
}

uint64_t sub_10195DCAC(uint64_t a1, int a2, int a3, int a4)
{
  int v8 = a2;
  int v6 = a4;
  int v7 = a3;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *, int *, int *))(*(void *)v4 + 48))(v4, &v8, &v7, &v6);
}

uint64_t sub_10195DD0C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 3320);
  if (!v1) {
    sub_10015E48C();
  }
  int v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void *sub_10195DD68(uint64_t a1, uint64_t a2)
{
  return sub_10195DD70((void *)(a1 + 3296), a2);
}

void *sub_10195DD70(void *a1, uint64_t a2)
{
  sub_101962994((uint64_t)v4, a2);
  sub_101962A2C(v4, a1);
  sub_101960AB8(v4);
  return a1;
}

void *sub_10195DDE4(uint64_t a1, uint64_t a2)
{
  return sub_10195DDEC((void *)(a1 + 3232), a2);
}

void *sub_10195DDEC(void *a1, uint64_t a2)
{
  sub_101962C98((uint64_t)v4, a2);
  sub_101962D30(v4, a1);
  sub_1019609B0(v4);
  return a1;
}

void *sub_10195DE60(uint64_t a1, uint64_t a2)
{
  return sub_10195DE68((void *)(a1 + 3264), a2);
}

void *sub_10195DE68(void *a1, uint64_t a2)
{
  sub_101962F9C((uint64_t)v4, a2);
  sub_101963034(v4, a1);
  sub_101960A34(v4);
  return a1;
}

void sub_10195DEDC(uint64_t a1, int a2)
{
  if (a2 == 10)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,#Warning,EE injection failure code", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::performActionForFailureCodeResponse(proto::gpsd::Request::Type)", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

uint64_t *sub_10195E06C(uint64_t a1)
{
  return sub_1019271B8(*(void *)(a1 + 32), 0);
}

void sub_10195E078(uint64_t a1, signed int a2, double a3)
{
  unsigned int v41 = a2;
  uint64_t v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    __int16 v32 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v33 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v33 = (void *)*v33;
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v37 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v37 = (void *)*v37;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v37;
      __int16 v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLGnssDaemonDevice>::setTimeoutEvent(Event, double) [T = CLGnssDaemonDevice]", "%s\n", v38);
      if (v38 != buf) {
        free(v38);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    __int16 v34 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
    }
    int v35 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)std::string buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
    }
    __int16 v36 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v8 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v8 = (void *)*v8;
      }
      sub_10195ED64(a2, __p);
      if (v49 >= 0) {
        int v9 = __p;
      }
      else {
        int v9 = *(unsigned char **)__p;
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&unsigned char buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v49) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v10 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v10 = (void *)*v10;
      }
      sub_10195ED64(a2, v42);
      if (v45 >= 0) {
        int v11 = v42;
      }
      else {
        int v11 = *(unsigned char **)v42;
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = v10;
      __int16 v47 = 2082;
      uint64_t v48 = v11;
      __int16 v49 = 2050;
      double v50 = a3;
      int v12 = (char *)_os_log_send_and_compose_impl();
      if (v45 < 0) {
        operator delete(*(void **)v42);
      }
LABEL_79:
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLGnssDaemonDevice>::setTimeoutEvent(Event, double) [T = CLGnssDaemonDevice]", "%s\n", v12);
LABEL_80:
      if (v12 != buf) {
        free(v12);
      }
      return;
    }
    return;
  }
  uint64_t v13 = *(void *)(a1 + 64);
  if (v13)
  {
    uint64_t v14 = a1 + 64;
    do
    {
      signed int v15 = *(_DWORD *)(v13 + 32);
      BOOL v16 = v15 < a2;
      if (v15 >= a2) {
        uint64_t v17 = (uint64_t *)v13;
      }
      else {
        uint64_t v17 = (uint64_t *)(v13 + 8);
      }
      if (!v16) {
        uint64_t v14 = v13;
      }
      uint64_t v13 = *v17;
    }
    while (*v17);
    if (v14 != a1 + 64 && *(_DWORD *)(v14 + 32) <= a2)
    {
      int v18 = *(NSObject **)(v14 + 40);
      if (v18)
      {
LABEL_37:
        dispatch_time_t v20 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v18, v20, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        int v21 = qword_1024193D8;
        os_log_type_t v22 = *(unsigned char *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1024193D8, v22))
        {
          uint64_t v23 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            uint64_t v23 = (void *)*v23;
          }
          sub_10195ED64(v41, __p);
          if (v49 >= 0) {
            uint64_t v24 = __p;
          }
          else {
            uint64_t v24 = *(unsigned char **)__p;
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = v23;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&unsigned char buf[14] = v24;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v49) < 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          int v25 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            int v25 = (void *)*v25;
          }
          sub_10195ED64(v41, v42);
          if (v45 >= 0) {
            uint64_t v26 = v42;
          }
          else {
            uint64_t v26 = *(unsigned char **)v42;
          }
          *(_DWORD *)std::string __p = 136315650;
          *(void *)&__p[4] = v25;
          __int16 v47 = 2080;
          uint64_t v48 = v26;
          __int16 v49 = 2048;
          double v50 = a3;
          int v12 = (char *)_os_log_send_and_compose_impl();
          if (v45 < 0) {
            operator delete(*(void **)v42);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLGnssDaemonDevice>::setTimeoutEvent(Event, double) [T = CLGnssDaemonDevice]", "%s\n", v12);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  int v19 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v19)
  {
    int v18 = v19;
    *(void *)std::string buf = &v41;
    sub_1000FEE0C((uint64_t **)(a1 + 56), (int *)&v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5] = v19;
    dispatch_source_set_timer(v18, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1019632A0;
    handler[3] = &unk_1022B2410;
    handler[4] = a1;
    unsigned int v40 = v41;
    dispatch_source_set_event_handler(v18, handler);
    dispatch_resume(v18);
    goto LABEL_37;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v27 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    int v28 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v28 = (void *)*v28;
    }
    sub_10195ED64(a2, buf);
    if (buf[23] >= 0) {
      int v29 = buf;
    }
    else {
      int v29 = *(unsigned char **)buf;
    }
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v28;
    __int16 v47 = 2082;
    uint64_t v48 = v29;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v30 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v30 = (void *)*v30;
    }
    sub_10195ED64(a2, __p);
    if (v49 >= 0) {
      int v31 = __p;
    }
    else {
      int v31 = *(unsigned char **)__p;
    }
    *(_DWORD *)int v42 = 136315394;
    *(void *)&v42[4] = v30;
    __int16 v43 = 2082;
    uint64_t v44 = v31;
    int v12 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v49) < 0) {
      operator delete(*(void **)__p);
    }
    goto LABEL_79;
  }
}

void sub_10195EB64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_1019271B8(v1, 1);
  if ((sub_1000FFFBC() & 1) == 0 && sub_100D33D08(v1 + 1684))
  {
    sub_1019275C0(v1);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      int v3 = *(_DWORD *)(v1 + 1284);
      *(_DWORD *)std::string buf = 67240192;
      int v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#gpsd,on build,MA blocked constellation,0x%{public}x", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Idle(CLGnssDaemonDevice::Event)_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    sub_10194B3D0(v1, 0, *(_DWORD *)(v1 + 1284));
  }
  sub_10194C094(v1, v1 + 2344);
  sub_10195DA00(v1);
}

void *sub_10195ED64@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0xA) {
    int v2 = "EventUnknown";
  }
  else {
    int v2 = (&off_102346AE8)[a1];
  }
  return sub_100134750(a2, v2);
}

void sub_10195ED90(_DWORD *a1, int a2, int a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67240448;
    int v9 = a2;
    __int16 v10 = 1026;
    int v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gpsd,exitCategory,%{public}d,payload,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::awdLoggingOfExitCommand(GpsdExitCategory_t, int)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  ++a1[308];
  a1[306] = a2;
  a1[307] = a3;
}

void sub_10195EF78(uint64_t a1, signed int a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    goto LABEL_33;
  }
  uint64_t v5 = a1 + 64;
  do
  {
    signed int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      int v8 = (uint64_t *)v4;
    }
    else {
      int v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (int v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    __int16 v10 = qword_1024193D8;
    os_log_type_t v11 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v11))
    {
      int v12 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v12 = (void *)*v12;
      }
      sub_10195ED64(a2, __p);
      if (v31 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v23 = 2080;
      uint64_t v24 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      uint64_t v14 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v14 = (void *)*v14;
      }
      sub_10195ED64(a2, buf);
      if (v25 >= 0) {
        signed int v15 = buf;
      }
      else {
        signed int v15 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      int v27 = v14;
      __int16 v28 = 2080;
      int v29 = v15;
      BOOL v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
LABEL_54:
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLGnssDaemonDevice>::cancelTimeoutEvent(Event) [T = CLGnssDaemonDevice]", "%s\n", v16);
      if (v16 != (char *)__p) {
        free(v16);
      }
    }
  }
  else
  {
LABEL_33:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v18 = (void *)*v18;
      }
      sub_10195ED64(a2, __p);
      if (v31 >= 0) {
        int v19 = __p;
      }
      else {
        int v19 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v18;
      __int16 v23 = 2080;
      uint64_t v24 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      dispatch_time_t v20 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        dispatch_time_t v20 = (void *)*v20;
      }
      sub_10195ED64(a2, buf);
      if (v25 >= 0) {
        int v21 = buf;
      }
      else {
        int v21 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      int v27 = v20;
      __int16 v28 = 2080;
      int v29 = v21;
      BOOL v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_54;
    }
  }
}

uint64_t *sub_10195F40C(uint64_t a1)
{
  return sub_1019271B8(*(void *)(a1 + 32), 0);
}

uint64_t sub_10195F418(uint64_t result, int a2)
{
  switch(a2)
  {
    case 9:
      *(unsigned char *)(result + 648) = 1;
      ++*(void *)(result + 592);
      break;
    case 10:
      ++*(void *)(result + 624);
      break;
    case 11:
      ++*(void *)(result + 616);
      break;
    case 13:
      *(unsigned char *)(result + 652) = 1;
      break;
    case 16:
      ++*(void *)(result + 536);
      break;
    case 17:
      ++*(void *)(result + 520);
      break;
    case 18:
      ++*(void *)(result + 584);
      ++*(void *)(result + 640);
      break;
    case 19:
      ++*(void *)(result + 632);
      break;
    case 20:
      ++*(void *)(result + 608);
      break;
    case 21:
      ++*(void *)(result + 576);
      break;
    case 22:
      ++*(void *)(result + 568);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *sub_10195F53C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,handleOTADeleteRequest", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    signed int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleOTADeleteRequest()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (*(unsigned char *)(a1 + 1680))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#gpsd,handleOTADeleteRequest,gnss session active,OTA reset queued", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      BOOL v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleOTADeleteRequest()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    return sub_1019271B8(a1, 6);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#gpsd,handleOTADeleteRequest,OTA reset initiated", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleOTADeleteRequest()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    return (uint64_t *)sub_10194B17C(a1, 1);
  }
}

uint64_t sub_10195F93C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  id v3 = [[objc_msgSend(*(id *)(a2 + 1784), "silo") newTimer];
  *(void *)(a1 + 8) = v3;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10195F9D0;
  v5[3] = &unk_1022A3020;
  void v5[4] = a1;
  [v3 setHandler:v5];
  return a1;
}

void sub_10195F9D0(uint64_t a1)
{
}

void sub_10195F9D8(unsigned char *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#cts,timer,debounceTimeout", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    id v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::ThermalRiskController::onDebounceTimeout()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_10195FD88((uint64_t)a1);
  if (!a1[16]) {
    sub_10194BA90(a1);
  }
}

uint64_t sub_10195FB84(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  return a1;
}

id sub_10195FBC0(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 134349056;
    uint64_t v6 = 0x4000000000000000;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#cts,timer,setDebounce,interval,%{public}.1f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::ThermalRiskController::setDebouncedFalling()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  id result = [*(id *)(a1 + 8) setNextFireDelay:2.0];
  *(unsigned char *)(a1 + 17) = 1;
  return result;
}

id sub_10195FD88(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)std::string buf = 67240192;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#cts,timer,clearDebounce,state,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::ThermalRiskController::clearDebouncedFalling()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  id result = [*(id *)(a1 + 8) setNextFireDelay:1.79769313e308];
  *(unsigned char *)(a1 + 17) = 0;
  return result;
}

void sub_10195FF50(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10195FF80(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_10195FFB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_101960048(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_101960078(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_101960110(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void *sub_101960140(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1019601C4(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10196024C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_101960288(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1019602CC(uint64_t a1, const void **a2, void *a3)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *a3;
  uint64_t v5 = a3[1];
  *(void *)(a1 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  uint64_t v6 = (void **)(a1 + 96);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 2;
  if (*((char *)a2 + 23) < 0)
  {
    if (a2[1]) {
      goto LABEL_5;
    }
LABEL_20:
    sub_101963FE8();
    uint64_t result = abort_report_np();
    __break(1u);
    return result;
  }
  if (!*((unsigned char *)a2 + 23)) {
    goto LABEL_20;
  }
LABEL_5:
  if (*((char *)a2 + 23) >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  sub_1001110E4((uint64_t)&v11, v7 + 1);
  if (v12 >= 0) {
    int v8 = &v11;
  }
  else {
    int v8 = (long long *)v11;
  }
  if (v7)
  {
    if (*((char *)a2 + 23) >= 0) {
      int v9 = a2;
    }
    else {
      int v9 = *a2;
    }
    memmove(v8, v9, v7);
  }
  *(_WORD *)((char *)v8 + v7) = 44;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = v11;
  *(void *)(a1 + 112) = v12;
  return a1;
}

void sub_101960440(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  sub_1000F5BB0(v3, *(void **)(v1 + 64));
  size_t v7 = *(std::__shared_weak_count **)(v1 + 40);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  sub_1000F5BB0(v2, *v4);
  _Unwind_Resume(a1);
}

uint64_t sub_101960484(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10195FB84(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1019604D4(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  sub_101960544(*(void **)(a1 + 56), (void *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  sub_1000F5BB0(v2, *(void **)(a1 + 64));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000F5BB0(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

uint64_t sub_101960544(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      sub_10195EF78(a3, *((_DWORD *)v5 + 8));
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          size_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          size_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

void *sub_1019605C4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_101960648(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1019606CC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_101960750(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1019607D4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_101960858(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1019608DC(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1019788E4();
    operator delete();
  }
  return result;
}

void *sub_10196092C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1019609B0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_101960A34(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_101960AB8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_101960B3C(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    sub_10084FC8C(a2 + 21);
    sub_10184E6D4(a2, 0);
    operator delete();
  }
}

void sub_101960BA0()
{
}

void *sub_101960BB4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1023467A8;
  result[1] = v3;
  return result;
}

uint64_t sub_101960BFC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023467A8;
  a2[1] = v2;
  return result;
}

void sub_101960C28(uint64_t a1, int *a2, int *a3, uint64_t *a4)
{
  int v4 = *a2;
  int v5 = *a3;
  uint64_t v6 = *a4;
  uint64_t v7 = *(void *)(a1 + 8);
  BOOL v8 = *(NSObject **)(v7 + 2152);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101960CF8;
  block[3] = &unk_1022B8680;
  int v10 = v4;
  int v11 = v5;
  block[4] = v7;
  block[5] = v6;
  dispatch_async(v8, block);
}

uint64_t sub_101960CAC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101960CEC()
{
}

uint64_t sub_101960CF8(uint64_t a1)
{
  return sub_101941EA8(*(void *)(a1 + 32), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), *(void *)(a1 + 40));
}

void sub_101960D0C()
{
}

void *sub_101960D20(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102346838;
  result[1] = v3;
  return result;
}

uint64_t sub_101960D68(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102346838;
  a2[1] = v2;
  return result;
}

uint64_t sub_101960D94(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v6 = v2;
  sub_101949BC0(v3, &v6);
  uint64_t result = v6;
  if (v6)
  {
    int v5 = *(uint64_t (**)(void))(*(void *)v6 + 8);
    return v5();
  }
  return result;
}

void sub_101960E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101810654(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101960E30(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101960E70()
{
}

void sub_101960E80()
{
}

void *sub_101960E94(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1023468C8;
  result[1] = v3;
  return result;
}

uint64_t sub_101960EDC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023468C8;
  a2[1] = v2;
  return result;
}

uint64_t sub_101960F08(uint64_t a1)
{
  return sub_101941F20(*(void *)(a1 + 8));
}

uint64_t sub_101960F10(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101960F50()
{
}

void sub_101960F60()
{
}

void *sub_101960F74(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102346948;
  result[1] = v3;
  return result;
}

uint64_t sub_101960FBC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102346948;
  a2[1] = v2;
  return result;
}

uint64_t sub_101960FE8(uint64_t a1, uint64_t a2)
{
  sub_10196122C((uint64_t)v7, a2);
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "NilrDbg,ExecWrapper", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLGnssDaemonDevice::CLGnssDaemonDevice(dispatch_queue_t, std::map<CLGnssDeviceEvent, EventCallback> &&, LocationEventCallback, MeasurementEventCallback, DecodedExtendedEphemerisCallback, SleepCallback, PowerLoggingCallback, EmergencyAWDCallback, DpoCallback, MeasurementFeaturesCallback, BOOL, BOOL)::(anonymous class)::operator()(std::function<void (CLGnssDaemonDevice &)>) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (!v8) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 48))(v8, v3);
  sub_1017DCC68(v7);
  return 1;
}

void sub_1019611CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1017DCC68((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1019611E0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101961220()
{
}

uint64_t sub_10196122C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void sub_1019612B0()
{
}

void *sub_1019612C4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1023469D8;
  result[1] = v3;
  return result;
}

uint64_t sub_10196130C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023469D8;
  a2[1] = v2;
  return result;
}

void sub_101961338(uint64_t a1, unsigned int *a2, unsigned __int8 **a3)
{
}

uint64_t sub_101961348(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101961388()
{
}

void sub_101961398()
{
}

void *sub_1019613AC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102346A68;
  result[1] = v3;
  return result;
}

uint64_t sub_1019613F4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102346A68;
  a2[1] = v2;
  return result;
}

uint64_t sub_101961420(uint64_t a1, unsigned int *a2)
{
  return sub_101954194(*(void *)(a1 + 8), *a2);
}

uint64_t sub_10196142C(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_102346AD8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10196146C()
{
  return &off_102346AD8;
}

uint64_t sub_101961478(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_101961510(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_101961770(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_10196177C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_101961814(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_101961A74(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_101961A80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_101961B18(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_101961D78(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_101961D84(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_101961E1C(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10196207C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_101962088(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_101962120(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_101962380(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_10196238C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_101962424(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_101962684(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_101962690(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_101962728(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_101962988(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_101962994(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_101962A2C(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_101962C8C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_101962C98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_101962D30(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_101962F90(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_101962F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_101963034(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_101963294(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_1019632A0(uint64_t a1)
{
  return sub_101940CD8(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_1019632B0()
{
  sub_100857C1C();
  if (!v1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  if (sub_100857B88())
  {
    sub_1001DB2F0();
    sub_1003252B0((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"#gpsd,null fCallbackQueue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v17[0]);
    if (*(void *)(v0 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
  }
  if (sub_100857BC4())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v8, v9, v10, "#gpsd,null fCallbackQueue", "{\"msg%{public}.0s\":\"#gpsd,null fCallbackQueue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17);
    if (*(void *)(v0 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
  }
  if (sub_100857BA8())
  {
    sub_1001DB2F0();
    sub_1003252D0((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"#gpsd,null fCallbackQueue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17[0]);
  }
}

#error "101963484: call analysis failed (funcsize=77)"

uint64_t sub_101963590(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

#error "101963640: call analysis failed (funcsize=73)"

#error "1019637AC: call analysis failed (funcsize=77)"

#error "101963930: call analysis failed (funcsize=73)"

#error "101963AA0: call analysis failed (funcsize=73)"

#error "101963C10: call analysis failed (funcsize=73)"

#error "101963D80: call analysis failed (funcsize=73)"

#error "101963EF0: call analysis failed (funcsize=73)"

void sub_101963FE8()
{
  sub_100857C1C();
  if (!v1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  if (sub_100857B88())
  {
    sub_1001DB2F0();
    sub_1003252B0((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v17[0]);
    if (*(void *)(v0 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
  }
  if (sub_100857BC4())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v8, v9, v10, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17);
    if (*(void *)(v0 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
  }
  if (sub_100857BA8())
  {
    sub_1001DB2F0();
    sub_1003252D0((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17[0]);
  }
}

void sub_101964148()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_101964200(_Unwind_Exception *a1)
{
}

void sub_101964218()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_1019642C0(_Unwind_Exception *a1)
{
}

void sub_1019642D8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101E4792C;
      v0[3] = unk_101E4793C;
      v0[4] = xmmword_101E4794C;
      v0[0] = xmmword_101E4790C;
      v0[1] = unk_101E4791C;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_1019643B8(_Unwind_Exception *a1)
{
}

void sub_1019643D0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_101964450()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_1019644E0(_Unwind_Exception *a1)
{
}

uint64_t sub_1019644F8()
{
  sub_100134750(&qword_1024891C0, ".lzma");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024891C0, (void *)&_mh_execute_header);
}

void sub_101964558(uint64_t a1)
{
  sub_100134750(&__p, "CLCplane");
  *(void *)std::string buf = a1;
  operator new();
}

void sub_1019648E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  sub_100850B38(v21);
  sub_10083788C(v20);
  uint64_t v23 = *v19;
  uint64_t *v19 = 0;
  if (v23) {
    sub_1017C6CD8((uint64_t)v19, v23);
  }
  sub_1018330B4(v18);
  sub_10196B5B4(v17);
  _Unwind_Resume(a1);
}

uint64_t **sub_1019649B8(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  int v19 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    uint64_t v4 = a4;
    uint64_t v5 = a3;
    unsigned int v7 = a2;
    uint64_t v6 = a1;
    if (qword_1024193D0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_10196B6B4(qword_1024193D0 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1024193D0, &stru_102346B78);
LABEL_3:
  uint64_t v8 = qword_1024193D8;
  os_log_type_t v9 = *(unsigned char *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v9))
  {
    uint64_t v10 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    if (v7 > 3) {
      uint64_t v11 = "StateUnknown";
    }
    else {
      uint64_t v11 = (&off_102346C68)[v7];
    }
    sub_100134750(__p, v11);
    if (SBYTE3(v24) >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = *(unsigned char **)__p;
    }
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = v10;
    __int16 v26 = 1024;
    unsigned int v27 = v7;
    __int16 v28 = 2080;
    int v29 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v24) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346B78);
    }
    uint64_t v14 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      uint64_t v14 = (void *)*v14;
    }
    sub_10196AFD4(v7, v17);
    if (v18 >= 0) {
      uint64_t v15 = v17;
    }
    else {
      uint64_t v15 = (void **)v17[0];
    }
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v14;
    __int16 v21 = 1024;
    unsigned int v22 = v7;
    __int16 v23 = 2080;
    uint64_t v24 = v15;
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaControlPlane>::setStateHandler(State, StateHandler) [T = CLEurekaControlPlane]", "%s\n", v16);
    if (v16 != buf) {
      free(v16);
    }
  }
  *(void *)std::string buf = &v19;
  uint64_t result = sub_1000C5658((uint64_t **)(v6 + 8), &v19, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

BOOL sub_101964CA4(uint64_t a1, unsigned int a2)
{
  BOOL result = 0;
  switch(a2)
  {
    case 0u:
      sub_101966688(a1, 11);
      sub_101966688(a1, 12);
      if (*(_DWORD *)(a1 + 332) != 26)
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102346B58);
        }
        uint64_t v8 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
        {
          sub_100134750(__p, "Enter");
          if (v14 >= 0) {
            os_log_type_t v9 = __p;
          }
          else {
            os_log_type_t v9 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 68289283;
          int v16 = 0;
          __int16 v17 = 2082;
          char v18 = "";
          __int16 v19 = 2081;
          uint64_t v20 = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Cplane calling printSessionStatus from Idle State\", \"event\":%{private, location:escape_only}s}", buf, 0x1Cu);
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }
        sub_101966B48(a1);
      }
      sub_10192C5D4(a1 + 184);
      return 0;
    case 2u:
      return 1;
    case 3u:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102346B58);
      }
      uint64_t v5 = qword_1024193E8;
      BOOL v10 = os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT);
      BOOL result = 0;
      if (!v10) {
        return result;
      }
      sub_100134750(__p, "EmergencyExit");
      if (v14 >= 0) {
        unsigned int v7 = __p;
      }
      else {
        unsigned int v7 = (void **)__p[0];
      }
      goto LABEL_8;
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xBu:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102346B58);
      }
      uint64_t v5 = qword_1024193E8;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT);
      BOOL result = 0;
      if (!v6) {
        return result;
      }
      sub_101966B1C(a2, __p);
      if (v14 >= 0) {
        unsigned int v7 = __p;
      }
      else {
        unsigned int v7 = (void **)__p[0];
      }
LABEL_8:
      *(_DWORD *)std::string buf = 68289283;
      int v16 = 0;
      __int16 v17 = 2082;
      char v18 = "";
      __int16 v19 = 2081;
      uint64_t v20 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Cplane unexpected event in Idle State\", \"event\":%{private, location:escape_only}s}", buf, 0x1Cu);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      break;
    case 0xDu:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346B78);
      }
      uint64_t v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#Cplane,#ca,Summary stats received in Idle state", buf, 2u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346B78);
      }
      LOWORD(__p[0]) = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLEurekaControlPlane::State CLEurekaControlPlane::handler_Idle(CLEurekaControlPlane::Event)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
      break;
    default:
      return result;
  }
  return 0;
}

uint64_t sub_101965128(uint64_t a1, unsigned int a2)
{
  uint64_t result = 1;
  switch(a2)
  {
    case 0u:
      sub_101966688(a1, 11);
      sub_101966688(a1, 12);
      if (*(_DWORD *)(a1 + 332) != 26)
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102346B58);
        }
        uint64_t v8 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
        {
          sub_100134750(__p, "Enter");
          if (v16 >= 0) {
            os_log_type_t v9 = __p;
          }
          else {
            os_log_type_t v9 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 68289283;
          int v18 = 0;
          __int16 v19 = 2082;
          uint64_t v20 = "";
          __int16 v21 = 2081;
          unsigned int v22 = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Cplane calling printSessionStatus from Ready State\", \"event\":%{private, location:escape_only}s}", buf, 0x1Cu);
          if (v16 < 0) {
            operator delete(__p[0]);
          }
        }
        sub_101966B48(a1);
      }
      sub_10192C5D4(a1 + 184);
      goto LABEL_41;
    case 3u:
      return *(unsigned __int8 *)(a1 + 128);
    case 4u:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102346B58);
      }
      BOOL v10 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v18 = 0;
        __int16 v19 = 2082;
        uint64_t v20 = "";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Cplane Comm Begin/Open event received, expecting nilr shortly\"}", buf, 0x12u);
      }
      return 2;
    case 5u:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102346B58);
      }
      uint64_t v11 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v18 = 0;
        __int16 v19 = 2082;
        uint64_t v20 = "";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning #Cplane NILR received before assistance was received\"}", buf, 0x12u);
      }
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      *(CFAbsoluteTime *)(a1 + 192) = Current;
      *(CFAbsoluteTime *)(a1 + 1736) = Current;
      return 2;
    case 6u:
    case 8u:
    case 0xBu:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102346B58);
      }
      uint64_t v5 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_101966B1C(a2, __p);
        BOOL v6 = v16 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 68289283;
        int v18 = 0;
        __int16 v19 = 2082;
        uint64_t v20 = "";
        __int16 v21 = 2081;
        unsigned int v22 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning #Cplane unexpected event in Ready State\", \"event\":%{private, location:escape_only}s}", buf, 0x1Cu);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
      }
      goto LABEL_41;
    case 7u:
    case 9u:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102346B58);
      }
      unsigned int v7 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v18 = 0;
        __int16 v19 = 2082;
        uint64_t v20 = "";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Cplane Failure/Abort received from previous session\"}", buf, 0x12u);
      }
      goto LABEL_41;
    case 0xDu:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346B78);
      }
      uint64_t v13 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#Cplane,#ca,Summary stats received in Ready state", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346B78);
        }
        LOWORD(__p[0]) = 0;
        char v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEurekaControlPlane::State CLEurekaControlPlane::handler_Ready(CLEurekaControlPlane::Event)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
LABEL_41:
      uint64_t result = 1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1019656AC(uint64_t a1, int a2)
{
  uint64_t result = 2;
  switch(a2)
  {
    case 0:
      *(_DWORD *)(a1 + 376) = *(_DWORD *)(a1 + 176);
      *(unsigned char *)(a1 + 1124) = *(unsigned char *)(a1 + 129);
      sub_101966EC4(a1, 12, 120.0);
      goto LABEL_26;
    case 2:
      *(_DWORD *)(a1 + 376) = *(_DWORD *)(a1 + 176);
      return result;
    case 3:
      if (*(_DWORD *)(a1 + 332) != 26) {
        goto LABEL_28;
      }
      return 3;
    case 5:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102346B58);
      }
      uint64_t v4 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v13 = 0;
        __int16 v14 = 2082;
        uint64_t v15 = "";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Cplane NILR Session is active\"}", buf, 0x12u);
      }
      *(CFAbsoluteTime *)(a1 + 192) = CFAbsoluteTimeGetCurrent();
      *(CFAbsoluteTime *)(a1 + 1864) = CFAbsoluteTimeGetCurrent();
      *(void *)(a1 + 1736) = *(void *)(a1 + 192);
      int v5 = 263;
      goto LABEL_16;
    case 6:
      *(CFAbsoluteTime *)(a1 + 200) = CFAbsoluteTimeGetCurrent();
      *(CFAbsoluteTime *)(a1 + 1872) = CFAbsoluteTimeGetCurrent();
      sub_101966688(a1, 11);
      *(void *)(a1 + 1744) = *(void *)(a1 + 200);
      *(_DWORD *)(a1 + 332) = 2;
      goto LABEL_13;
    case 7:
      *(CFAbsoluteTime *)(a1 + 200) = CFAbsoluteTimeGetCurrent();
      *(CFAbsoluteTime *)(a1 + 1872) = CFAbsoluteTimeGetCurrent();
      sub_101966688(a1, 11);
      *(_DWORD *)(a1 + 332) = 6;
      *(CFAbsoluteTime *)(a1 + 1744) = CFAbsoluteTimeGetCurrent();
LABEL_13:
      *(_DWORD *)(a1 + 1792) |= 0x18u;
      goto LABEL_35;
    case 8:
      *(CFAbsoluteTime *)(a1 + 200) = CFAbsoluteTimeGetCurrent();
      *(CFAbsoluteTime *)(a1 + 1872) = CFAbsoluteTimeGetCurrent();
      sub_101966688(a1, 11);
      double v7 = *(double *)(a1 + 192);
      double v6 = *(double *)(a1 + 200);
      *(double *)(a1 + 1744) = v6;
      *(_DWORD *)(a1 + 332) = 0;
      *(double *)(a1 + 256) = v6 - v7;
      *(unsigned char *)(a1 + 224) = 1;
      int v5 = *(_DWORD *)(a1 + 1792) | 0x30;
      goto LABEL_16;
    case 9:
      *(CFAbsoluteTime *)(a1 + 200) = CFAbsoluteTimeGetCurrent();
      *(CFAbsoluteTime *)(a1 + 1744) = CFAbsoluteTimeGetCurrent();
      sub_101966688(a1, 11);
      *(CFAbsoluteTime *)(a1 + 1872) = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)(a1 + 332) = 1;
      int v5 = *(_DWORD *)(a1 + 1792) | 0x80;
LABEL_16:
      *(_DWORD *)(a1 + 1792) = v5;
      goto LABEL_26;
    case 10:
      sub_101966EC4(a1, 11, 3.0);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102346B58);
      }
      uint64_t v8 = qword_1024193E8;
      if (!os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_26;
      }
      *(_DWORD *)std::string buf = 68289026;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      os_log_type_t v9 = "{\"msg%{public}.0s\":\"#Cplane Session in Progress\"}";
      goto LABEL_25;
    case 11:
      *(CFAbsoluteTime *)(a1 + 200) = CFAbsoluteTimeGetCurrent();
      *(CFAbsoluteTime *)(a1 + 1872) = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)(a1 + 332) = 2;
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102346B58);
      }
      uint64_t v8 = qword_1024193E8;
      if (!os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_26;
      }
      *(_DWORD *)std::string buf = 68289026;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      os_log_type_t v9 = "{\"msg%{public}.0s\":\"#warning #Cplane Session in Progress not received for 3 secs, timing out\"}";
LABEL_25:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v9, buf, 0x12u);
LABEL_26:
      uint64_t result = 2;
      break;
    case 12:
      if (*(unsigned char *)(a1 + 129)) {
        goto LABEL_35;
      }
LABEL_28:
      uint64_t result = *(unsigned __int8 *)(a1 + 128);
      break;
    case 13:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346B78);
      }
      BOOL v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#Cplane,#ca,Summary stats received in Session state", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346B78);
        }
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEurekaControlPlane::State CLEurekaControlPlane::handler_Session(CLEurekaControlPlane::Event)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      sub_1019679B0(a1);
LABEL_35:
      uint64_t result = 1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_101965BD0(uint64_t a1, int a2)
{
  uint64_t result = 3;
  switch(a2)
  {
    case 0:
      sub_101966EC4(a1, 12, 120.0);
      return 3;
    case 2:
      return 1;
    case 4:
    case 5:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102346B58);
      }
      uint64_t v4 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v23 = 0;
        __int16 v24 = 2082;
        char v25 = "";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#warning #Cplane control plane comm event in Lingering state, spurious event received\"}", buf, 0x12u);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102346B58);
        }
      }
      int v5 = qword_1024193E8;
      if (!os_signpost_enabled((os_log_t)qword_1024193E8)) {
        return 3;
      }
      *(_DWORD *)std::string buf = 68289026;
      int v23 = 0;
      __int16 v24 = 2082;
      char v25 = "";
      double v6 = "#warning #Cplane control plane comm event in Lingering state, spurious event received";
      double v7 = "{\"msg%{public}.0s\":\"#warning #Cplane control plane comm event in Lingering state, spurious event received\"}";
      break;
    case 6:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102346B58);
      }
      uint64_t v8 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v23 = 0;
        __int16 v24 = 2082;
        char v25 = "";
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#warning #Cplane control plane timeout in Lingering state, spurious event received\"}", buf, 0x12u);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102346B58);
        }
      }
      os_log_type_t v9 = qword_1024193E8;
      if (os_signpost_enabled((os_log_t)qword_1024193E8))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v23 = 0;
        __int16 v24 = 2082;
        char v25 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#warning #Cplane control plane timeout in Lingering state, spurious event received", "{\"msg%{public}.0s\":\"#warning #Cplane control plane timeout in Lingering state, spurious event received\"}", buf, 0x12u);
      }
      *(CFAbsoluteTime *)(a1 + 200) = CFAbsoluteTimeGetCurrent();
      int v10 = 2;
      goto LABEL_42;
    case 7:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102346B58);
      }
      uint64_t v11 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v23 = 0;
        __int16 v24 = 2082;
        char v25 = "";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#warning #Cplane control plane nilr failure in Lingering state, spurious event received\"}", buf, 0x12u);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102346B58);
        }
      }
      uint64_t v12 = qword_1024193E8;
      if (os_signpost_enabled((os_log_t)qword_1024193E8))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v23 = 0;
        __int16 v24 = 2082;
        char v25 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#warning #Cplane control plane nilr failure in Lingering state, spurious event received", "{\"msg%{public}.0s\":\"#warning #Cplane control plane nilr failure in Lingering state, spurious event received\"}", buf, 0x12u);
      }
      *(CFAbsoluteTime *)(a1 + 200) = CFAbsoluteTimeGetCurrent();
      int v10 = 6;
      goto LABEL_42;
    case 8:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102346B58);
      }
      int v13 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v23 = 0;
        __int16 v24 = 2082;
        char v25 = "";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#warning #Cplane control plane nilr success in Lingering state, spurious event received\"}", buf, 0x12u);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102346B58);
        }
      }
      __int16 v14 = qword_1024193E8;
      if (os_signpost_enabled((os_log_t)qword_1024193E8))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v23 = 0;
        __int16 v24 = 2082;
        char v25 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#warning #Cplane control plane nilr success in Lingering state, spurious event received", "{\"msg%{public}.0s\":\"#warning #Cplane control plane nilr success in Lingering state, spurious event received\"}", buf, 0x12u);
      }
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      *(CFAbsoluteTime *)(a1 + 200) = Current;
      *(_DWORD *)(a1 + 332) = 0;
      *(CFAbsoluteTime *)(a1 + 256) = Current - *(double *)(a1 + 192);
      *(unsigned char *)(a1 + 224) = 1;
      return 3;
    case 9:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102346B58);
      }
      char v16 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v23 = 0;
        __int16 v24 = 2082;
        char v25 = "";
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#warning #Cplane control plane nilr abort in Lingering state, spurious event received\"}", buf, 0x12u);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102346B58);
        }
      }
      __int16 v17 = qword_1024193E8;
      if (os_signpost_enabled((os_log_t)qword_1024193E8))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v23 = 0;
        __int16 v24 = 2082;
        char v25 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#warning #Cplane control plane nilr abort in Lingering state, spurious event received", "{\"msg%{public}.0s\":\"#warning #Cplane control plane nilr abort in Lingering state, spurious event received\"}", buf, 0x12u);
      }
      *(CFAbsoluteTime *)(a1 + 200) = CFAbsoluteTimeGetCurrent();
      int v10 = 1;
LABEL_42:
      *(_DWORD *)(a1 + 332) = v10;
      return 3;
    case 10:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102346B58);
      }
      int v18 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v23 = 0;
        __int16 v24 = 2082;
        char v25 = "";
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#warning #Cplane Session in Progress in Lingering state\"}", buf, 0x12u);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102346B58);
        }
      }
      int v5 = qword_1024193E8;
      if (!os_signpost_enabled((os_log_t)qword_1024193E8)) {
        return 3;
      }
      *(_DWORD *)std::string buf = 68289026;
      int v23 = 0;
      __int16 v24 = 2082;
      char v25 = "";
      double v6 = "#warning #Cplane Session in Progress in Lingering state";
      double v7 = "{\"msg%{public}.0s\":\"#warning #Cplane Session in Progress in Lingering state\"}";
      break;
    case 11:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102346B58);
      }
      __int16 v19 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v23 = 0;
        __int16 v24 = 2082;
        char v25 = "";
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#warning #Cplane control plane nilr no progress timeout in Lingering state, spurious event received\"}", buf, 0x12u);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102346B58);
        }
      }
      int v5 = qword_1024193E8;
      if (!os_signpost_enabled((os_log_t)qword_1024193E8)) {
        return 3;
      }
      *(_DWORD *)std::string buf = 68289026;
      int v23 = 0;
      __int16 v24 = 2082;
      char v25 = "";
      double v6 = "#warning #Cplane control plane nilr no progress timeout in Lingering state, spurious event received";
      double v7 = "{\"msg%{public}.0s\":\"#warning #Cplane control plane nilr no progress timeout in Lingering state, spurious e"
           "vent received\"}";
      break;
    case 12:
      *(_DWORD *)(a1 + 332) = 26;
      return *(unsigned __int8 *)(a1 + 129);
    case 13:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346B78);
      }
      uint64_t v20 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#warning,#Cplane,#ca,Summary stats received in LingeringSession state", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346B78);
        }
        __int16 v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEurekaControlPlane::State CLEurekaControlPlane::handler_LingeringSession(CLEurekaControlPlane::Event)", "%s\n", v21);
        if (v21 != (char *)buf) {
          free(v21);
        }
      }
      sub_1019679B0(a1);
      return 1;
    default:
      return result;
  }
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v6, v7, buf, 0x12u);
  return 3;
}

uint64_t sub_1019665D4(uint64_t a1)
{
  *(void *)(a1 + 1800) = 0;
  sub_101833030((void *)(a1 + 1704));
  sub_100850B38((void *)(a1 + 1672));
  if (*(char *)(a1 + 1383) < 0) {
    operator delete(*(void **)(a1 + 1360));
  }
  if (*(char *)(a1 + 1359) < 0) {
    operator delete(*(void **)(a1 + 1336));
  }
  if (*(char *)(a1 + 1191) < 0) {
    operator delete(*(void **)(a1 + 1168));
  }
  if (*(char *)(a1 + 1167) < 0) {
    operator delete(*(void **)(a1 + 1144));
  }
  uint64_t v2 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = 0;
  if (v2) {
    sub_1017C6CD8(a1 + 168, v2);
  }
  sub_1018330B4((void *)(a1 + 136));

  return sub_10196B5B4(a1);
}

void sub_101966688(uint64_t a1, signed int a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    goto LABEL_33;
  }
  uint64_t v5 = a1 + 64;
  do
  {
    signed int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      uint64_t v8 = (uint64_t *)v4;
    }
    else {
      uint64_t v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (os_log_type_t v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346B78);
    }
    int v10 = qword_1024193D8;
    os_log_type_t v11 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v11))
    {
      uint64_t v12 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v12 = (void *)*v12;
      }
      sub_101966B1C(a2, __p);
      if (v31 >= 0) {
        int v13 = __p;
      }
      else {
        int v13 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v23 = 2080;
      __int16 v24 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346B78);
      }
      __int16 v14 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        __int16 v14 = (void *)*v14;
      }
      sub_101966B1C(a2, buf);
      if (v25 >= 0) {
        uint64_t v15 = buf;
      }
      else {
        uint64_t v15 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      unsigned int v27 = v14;
      __int16 v28 = 2080;
      int v29 = v15;
      char v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
LABEL_54:
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaControlPlane>::cancelTimeoutEvent(Event) [T = CLEurekaControlPlane]", "%s\n", v16);
      if (v16 != (char *)__p) {
        free(v16);
      }
    }
  }
  else
  {
LABEL_33:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346B78);
    }
    __int16 v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v18 = (void *)*v18;
      }
      sub_101966B1C(a2, __p);
      if (v31 >= 0) {
        __int16 v19 = __p;
      }
      else {
        __int16 v19 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v18;
      __int16 v23 = 2080;
      __int16 v24 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346B78);
      }
      uint64_t v20 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v20 = (void *)*v20;
      }
      sub_101966B1C(a2, buf);
      if (v25 >= 0) {
        __int16 v21 = buf;
      }
      else {
        __int16 v21 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      unsigned int v27 = v20;
      __int16 v28 = 2080;
      int v29 = v21;
      char v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_54;
    }
  }
}

void *sub_101966B1C@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0xD) {
    uint64_t v2 = "EventUnknown";
  }
  else {
    uint64_t v2 = (&off_102346BF8)[a1];
  }
  return sub_100134750(a2, v2);
}

double sub_101966B48(uint64_t a1)
{
  uint64_t v2 = (std::string *)(a1 + 184);
  *(_DWORD *)(a1 + 272) = 1;
  int v3 = *(_DWORD *)(a1 + 376);
  int v4 = sub_1000FFBA8();
  if (v3) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  uint64_t v6 = sub_1017BE0C0((void *)(a1 + 168), v5);
  sub_10182E764(v2, v6);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102346B58);
  }
  BOOL v7 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10192B5CC(*(_DWORD *)(a1 + 332), v36);
    if (v37 >= 0) {
      uint64_t v8 = v36;
    }
    else {
      uint64_t v8 = (void **)v36[0];
    }
    uint64_t v10 = *(void *)(a1 + 208);
    uint64_t v9 = *(void *)(a1 + 216);
    uint64_t v12 = *(void *)(a1 + 232);
    uint64_t v11 = *(void *)(a1 + 240);
    uint64_t v21 = *(void *)(a1 + 248);
    int v22 = *(_DWORD *)(a1 + 264);
    sub_10192B548(*(_DWORD *)(a1 + 268), v34);
    int v13 = v35;
    __int16 v14 = (void **)v34[0];
    sub_10192B5A0(*(_DWORD *)(a1 + 276), __p);
    uint64_t v15 = v34;
    char v16 = (void **)__p[0];
    if (v13 < 0) {
      uint64_t v15 = v14;
    }
    uint64_t v17 = *(void *)(a1 + 256);
    if (v33 >= 0) {
      char v16 = __p;
    }
    uint64_t buf = 68291587;
    __int16 v39 = 2082;
    unsigned int v40 = "";
    __int16 v41 = 2081;
    int v42 = v8;
    __int16 v43 = 2049;
    uint64_t v44 = v10;
    __int16 v45 = 2049;
    uint64_t v46 = v9;
    __int16 v47 = 2049;
    uint64_t v48 = v12;
    __int16 v49 = 2050;
    uint64_t v50 = v11;
    __int16 v51 = 2050;
    uint64_t v52 = v21;
    __int16 v53 = 1026;
    int v54 = v22;
    __int16 v55 = 2082;
    int v56 = v15;
    __int16 v57 = 2082;
    std::string::size_type v58 = v16;
    __int16 v59 = 2049;
    uint64_t v60 = v17;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Cplane,Summary Status\", \"status\":%{private, location:escape_only}s, \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"alt\":\"%{private}f\", \"acc\":\"%{public}f\", \"vunc\":\"%{public}f\", \"source\":%{public}d, \"method\":%{public, location:escape_only}s, \"protocol\":%{public, location:escape_only}s, \"ttf\":\"%{private}f\"}", (uint8_t *)&buf, 0x72u);
    if (v33 < 0) {
      operator delete(__p[0]);
    }
    if (v35 < 0) {
      operator delete(v34[0]);
    }
    if (v37 < 0) {
      operator delete(v36[0]);
    }
  }
  sub_10192B6A8((uint64_t)v2);
  if (*(void *)(a1 + 1696))
  {
    sub_101832D90((uint64_t)v23, (uint64_t)v2);
    uint64_t v18 = *(void *)(a1 + 1696);
    if (!v18) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v18 + 48))(v18, v23);
    if (v31 < 0) {
      operator delete(v30);
    }
    if (v29 < 0) {
      operator delete(v28);
    }
    if (v27 < 0) {
      operator delete(v26);
    }
    if (v25 < 0) {
      operator delete(v24);
    }
  }
  uint64_t v19 = *(void *)(a1 + 1728);
  if (v19) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 48))(v19, a1 + 1736);
  }
  *(void *)(a1 + 1736) = 0xBFF0000000000000;
  *(void *)(a1 + 1744) = 0xBFF0000000000000;
  *(void *)(a1 + 1752) = 0;
  *(void *)(a1 + 1768) = 0;
  *(void *)(a1 + 1760) = 0;
  *(void *)(a1 + 1776) = 0xBFF0000000000000;
  double result = NAN;
  *(void *)(a1 + 1784) = -1;
  *(_DWORD *)(a1 + 1792) = 0;
  return result;
}

void sub_101966E78(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x517]) < 0) {
    operator delete((void *)STACK[0x500]);
  }
  if (*(char *)(v1 - 225) < 0) {
    operator delete(*(void **)(v1 - 248));
  }
  _Unwind_Resume(a1);
}

void sub_101966EC4(uint64_t a1, signed int a2, double a3)
{
  unsigned int v41 = a2;
  int v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346B78);
    }
    __int16 v32 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      char v33 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        char v33 = (void *)*v33;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346B78);
      }
      char v37 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        char v37 = (void *)*v37;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v37;
      __int16 v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLEurekaControlPlane>::setTimeoutEvent(Event, double) [T = CLEurekaControlPlane]", "%s\n", v38);
      if (v38 != buf) {
        free(v38);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346B78);
    }
    __int16 v34 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346B78);
      }
    }
    char v35 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346B78);
      }
    }
    __int16 v36 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346B78);
    }
    BOOL v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v8 = (void *)*v8;
      }
      sub_101966B1C(a2, __p);
      if (v49 >= 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = *(unsigned char **)__p;
      }
      *(_DWORD *)uint64_t buf = 136315650;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&unsigned char buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v49) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346B78);
      }
      uint64_t v10 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v10 = (void *)*v10;
      }
      sub_101966B1C(a2, v42);
      if (v45 >= 0) {
        uint64_t v11 = v42;
      }
      else {
        uint64_t v11 = *(unsigned char **)v42;
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = v10;
      __int16 v47 = 2082;
      uint64_t v48 = v11;
      __int16 v49 = 2050;
      double v50 = a3;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      if (v45 < 0) {
        operator delete(*(void **)v42);
      }
LABEL_79:
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLEurekaControlPlane>::setTimeoutEvent(Event, double) [T = CLEurekaControlPlane]", "%s\n", v12);
LABEL_80:
      if (v12 != buf) {
        free(v12);
      }
      return;
    }
    return;
  }
  uint64_t v13 = *(void *)(a1 + 64);
  if (v13)
  {
    uint64_t v14 = a1 + 64;
    do
    {
      signed int v15 = *(_DWORD *)(v13 + 32);
      BOOL v16 = v15 < a2;
      if (v15 >= a2) {
        uint64_t v17 = (uint64_t *)v13;
      }
      else {
        uint64_t v17 = (uint64_t *)(v13 + 8);
      }
      if (!v16) {
        uint64_t v14 = v13;
      }
      uint64_t v13 = *v17;
    }
    while (*v17);
    if (v14 != a1 + 64 && *(_DWORD *)(v14 + 32) <= a2)
    {
      uint64_t v18 = *(NSObject **)(v14 + 40);
      if (v18)
      {
LABEL_37:
        dispatch_time_t v20 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v18, v20, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346B78);
        }
        uint64_t v21 = qword_1024193D8;
        os_log_type_t v22 = *(unsigned char *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1024193D8, v22))
        {
          __int16 v23 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            __int16 v23 = (void *)*v23;
          }
          sub_101966B1C(v41, __p);
          if (v49 >= 0) {
            __int16 v24 = __p;
          }
          else {
            __int16 v24 = *(unsigned char **)__p;
          }
          *(_DWORD *)uint64_t buf = 136315650;
          *(void *)&uint8_t buf[4] = v23;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&unsigned char buf[14] = v24;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v49) < 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102346B78);
          }
          char v25 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            char v25 = (void *)*v25;
          }
          sub_101966B1C(v41, v42);
          if (v45 >= 0) {
            int v26 = v42;
          }
          else {
            int v26 = *(unsigned char **)v42;
          }
          *(_DWORD *)std::string __p = 136315650;
          *(void *)&__p[4] = v25;
          __int16 v47 = 2080;
          uint64_t v48 = v26;
          __int16 v49 = 2048;
          double v50 = a3;
          uint64_t v12 = (char *)_os_log_send_and_compose_impl();
          if (v45 < 0) {
            operator delete(*(void **)v42);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaControlPlane>::setTimeoutEvent(Event, double) [T = CLEurekaControlPlane]", "%s\n", v12);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  uint64_t v19 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v19)
  {
    uint64_t v18 = v19;
    *(void *)uint64_t buf = &v41;
    sub_1000FEE0C((uint64_t **)(a1 + 56), (int *)&v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5] = v19;
    dispatch_source_set_timer(v18, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10196B6A4;
    handler[3] = &unk_1022B2410;
    handler[4] = a1;
    unsigned int v40 = v41;
    dispatch_source_set_event_handler(v18, handler);
    dispatch_resume(v18);
    goto LABEL_37;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346B78);
  }
  char v27 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    __int16 v28 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      __int16 v28 = (void *)*v28;
    }
    sub_101966B1C(a2, buf);
    if (buf[23] >= 0) {
      char v29 = buf;
    }
    else {
      char v29 = *(unsigned char **)buf;
    }
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v28;
    __int16 v47 = 2082;
    uint64_t v48 = v29;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346B78);
    }
    int v30 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v30 = (void *)*v30;
    }
    sub_101966B1C(a2, __p);
    if (v49 >= 0) {
      char v31 = __p;
    }
    else {
      char v31 = *(unsigned char **)__p;
    }
    *(_DWORD *)int v42 = 136315394;
    *(void *)&v42[4] = v30;
    __int16 v43 = 2082;
    uint64_t v44 = v31;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v49) < 0) {
      operator delete(*(void **)__p);
    }
    goto LABEL_79;
  }
}

void sub_1019679B0(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346B78);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#Cplane,#ca,submitSessionStatsToCA", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346B78);
    }
    LOWORD(v35) = 0;
    int v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaControlPlane::submitSessionStatsToCA()", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  double v3 = sqrt(*(double *)(a1 + 1480) * *(double *)(a1 + 1480) + *(double *)(a1 + 1472) * *(double *)(a1 + 1472));
  *(double *)(a1 + 1488) = v3;
  int v4 = *(_DWORD *)(a1 + 1508);
  *(_DWORD *)uint64_t buf = 44;
  v41[0] = v4;
  int v5 = (int)*(double *)(a1 + 1512);
  int v42 = 0;
  v43[0] = 45;
  v43[2] = v5;
  v43[8] = 0;
  v43[10] = 46;
  v43[12] = 1;
  int v6 = *(_DWORD *)(a1 + 1432);
  v43[18] = 0;
  v43[20] = 47;
  v43[22] = v6;
  v43[28] = 0;
  int v7 = *(_DWORD *)(a1 + 176);
  v43[30] = 79;
  v43[32] = v7;
  float v8 = *(double *)(a1 + 1440);
  v43[38] = 0;
  v43[40] = 68;
  *(float *)&v43[42] = v8;
  float v9 = *(double *)(a1 + 1448);
  v43[48] = 4;
  v43[50] = 69;
  *(float *)&v43[52] = v9;
  v43[58] = 4;
  v43[60] = 70;
  v43[62] = (int)v3;
  v43[68] = 0;
  int v10 = *(unsigned __int8 *)(a1 + 1504);
  v43[70] = 71;
  v43[72] = v10;
  v43[78] = 0;
  if (*(unsigned char *)(a1 + 1521)) {
    int v11 = 1;
  }
  else {
    int v11 = 2;
  }
  v43[80] = 63;
  v43[82] = v11;
  v43[88] = 0;
  uint64_t v12 = *(void *)(a1 + 1616);
  if ((v12 & 0x20) != 0) {
    int v13 = 1;
  }
  else {
    int v13 = 2;
  }
  v43[90] = 74;
  v43[92] = v13;
  v43[98] = 0;
  if ((v12 & 0x10) != 0) {
    int v14 = 1;
  }
  else {
    int v14 = 2;
  }
  v43[100] = 67;
  v43[102] = v14;
  v43[108] = 0;
  if ((v12 & 4) != 0) {
    int v15 = 1;
  }
  else {
    int v15 = 2;
  }
  v43[110] = 75;
  v43[112] = v15;
  v43[118] = 0;
  uint64_t v16 = *(void *)(a1 + 1856);
  if (v16 == -1) {
    int v17 = 2;
  }
  else {
    int v17 = 1;
  }
  v43[120] = 27;
  v43[122] = v17;
  v43[128] = 0;
  v43[130] = 28;
  uint64_t v44 = v16;
  int v45 = 2;
  char v18 = *(unsigned char *)(a1 + 129);
  int v46 = 83;
  char v47 = v18;
  int v48 = 7;
  char v35 = 0;
  __int16 v36 = 0;
  char v37 = 0;
  char v31 = (void **)&v35;
  LOBYTE(v32) = 0;
  char v35 = (char *)operator new(0x280uLL);
  __int16 v36 = v35;
  char v37 = v35 + 640;
  __int16 v36 = (unsigned char *)sub_100682A48((uint64_t)&v37, (uint64_t)buf, (uint64_t)&v49, (uint64_t)v35);
  for (uint64_t i = 608; i != -32; i -= 40)
    sub_100118010((uint64_t)&buf[i]);
  dispatch_time_t v20 = *(void **)(a1 + 1800);
  memset(v34, 0, sizeof(v34));
  sub_100682C20(v34, (uint64_t)v35, (uint64_t)v36, 0xCCCCCCCCCCCCCCCDLL * ((v36 - v35) >> 3));
  [v20 setMeasurements:sub_10067C03C(v34)];
  *(void *)uint64_t buf = v34;
  sub_100682B1C((void ***)buf);
  if (*(_DWORD *)(a1 + 1432) == 1)
  {
    double v21 = *(double *)(a1 + 1872) - *(double *)(a1 + 1864);
    *(_DWORD *)uint64_t buf = 42;
    v41[0] = (int)v21;
    int v42 = 0;
    uint64_t v32 = 0;
    char v33 = 0;
    char v31 = 0;
    __int16 v38 = &v31;
    char v39 = 0;
    char v31 = (void **)operator new(0x28uLL);
    uint64_t v32 = (uint64_t)v31;
    char v33 = v31 + 5;
    uint64_t v32 = sub_100682A48((uint64_t)&v33, (uint64_t)buf, (uint64_t)v43, (uint64_t)v31);
    sub_100118010((uint64_t)v41);
    os_log_type_t v22 = *(void **)(a1 + 1800);
    memset(v30, 0, sizeof(v30));
    sub_100682C20(v30, (uint64_t)v31, v32, 0xCCCCCCCCCCCCCCCDLL * ((v32 - (uint64_t)v31) >> 3));
    [v22 setMeasurements:sub_10067C03C(v30)];
    *(void *)uint64_t buf = v30;
    sub_100682B1C((void ***)buf);
    *(void *)uint64_t buf = &v31;
    sub_100682B1C((void ***)buf);
  }
  if (sub_1000EF68C(*(double *)(a1 + 1440), *(double *)(a1 + 1448))
    && !sub_1000EF668(*(double *)(a1 + 1440), *(double *)(a1 + 1448))
    && sub_1000EF68C(*(double *)(a1 + 1536), *(double *)(a1 + 1544))
    && !sub_1000EF668(*(double *)(a1 + 1536), *(double *)(a1 + 1544)))
  {
    long double v23 = sub_1000F1648((double *)(a1 + 1816), *(double *)(a1 + 1440), *(double *)(a1 + 1448), *(double *)(a1 + 1536), *(double *)(a1 + 1544), 0.0);
    *(_DWORD *)uint64_t buf = 72;
    v41[0] = (int)v23;
    int v42 = 0;
    uint64_t v32 = 0;
    char v33 = 0;
    char v31 = 0;
    __int16 v38 = &v31;
    char v39 = 0;
    char v31 = (void **)operator new(0x28uLL);
    uint64_t v32 = (uint64_t)v31;
    char v33 = v31 + 5;
    uint64_t v32 = sub_100682A48((uint64_t)&v33, (uint64_t)buf, (uint64_t)v43, (uint64_t)v31);
    sub_100118010((uint64_t)v41);
    __int16 v24 = *(void **)(a1 + 1800);
    memset(v29, 0, sizeof(v29));
    sub_100682C20(v29, (uint64_t)v31, v32, 0xCCCCCCCCCCCCCCCDLL * ((v32 - (uint64_t)v31) >> 3));
    [v24 setMeasurements:sub_10067C03C(v29)];
    *(void *)uint64_t buf = v29;
    sub_100682B1C((void ***)buf);
    *(void *)uint64_t buf = &v31;
    sub_100682B1C((void ***)buf);
  }
  char v25 = *(void **)(a1 + 1800);
  if (byte_10248A8CF < 0)
  {
    sub_1000DC48C(__p, (void *)xmmword_10248A8B8, *((unint64_t *)&xmmword_10248A8B8 + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = xmmword_10248A8B8;
    uint64_t v28 = unk_10248A8C8;
  }
  [v25 submitEvent:sub_1007EB0E8((long long *)__p)];
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 1856) = -1;
  *(void *)(a1 + 1864) = 0xBFF0000000000000;
  *(void *)(a1 + 1872) = 0xBFF0000000000000;
  sub_101937710(a1 + 1424);
  *(void *)uint64_t buf = &v35;
  sub_100682B1C((void ***)buf);
}

void sub_101968018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char *a36)
{
  a36 = &a24;
  sub_100682B1C((void ***)&a36);
  a36 = &a30;
  sub_100682B1C((void ***)&a36);
  _Unwind_Resume(a1);
}

uint64_t sub_1019680FC(uint64_t a1, unsigned int *a2)
{
  uint64_t result = sub_1006D40B0(a2);
  *(_DWORD *)(a1 + 176) = result;
  *(_DWORD *)(a1 + 376) = result;
  return result;
}

void sub_10196812C(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 129);
  *(unsigned char *)(a1 + 129) = sub_100D33A54(a2);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102346B58);
  }
  int v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 129);
    v7[0] = 68289282;
    v7[1] = 0;
    __int16 v8 = 2082;
    float v9 = "";
    __int16 v10 = 1026;
    int v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Cplane\", \"Emergency\":%{public}d}", (uint8_t *)v7, 0x18u);
  }
  if (v3)
  {
    if (*(unsigned char *)(a1 + 129)) {
      return;
    }
    uint64_t v6 = 3;
  }
  else
  {
    if (!*(unsigned char *)(a1 + 129)) {
      return;
    }
    uint64_t v6 = 2;
  }
  sub_101968254(a1, v6);
}

uint64_t sub_101968254(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 88);
  unsigned int v90 = *(_DWORD *)(a1 + 4);
  if (!*(void *)(a1 + 32))
  {
    sub_10196B830();
    goto LABEL_169;
  }
  int v3 = &qword_102419000;
  if (!*(unsigned char *)(a1 + 48))
  {
    sub_10196B99C(qword_1024193D0 == -1);
    goto LABEL_169;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346B78);
  }
  int v5 = qword_1024193D8;
  os_log_type_t v6 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v6))
  {
    int v7 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v7 = (void *)*v7;
    }
    uint64_t v8 = *(int *)(a1 + 4);
    if (v8 > 3) {
      float v9 = "StateUnknown";
    }
    else {
      float v9 = (&off_102346C68)[v8];
    }
    sub_100134750(__p, v9);
    int v10 = SHIBYTE(v94);
    int v11 = *(unsigned char **)__p;
    sub_101966B1C(a2, v101);
    uint64_t v12 = __p;
    if (v10 < 0) {
      uint64_t v12 = v11;
    }
    if (v104 >= 0) {
      int v13 = v101;
    }
    else {
      int v13 = *(unsigned char **)v101;
    }
    *(_DWORD *)uint64_t buf = 136315650;
    *(void *)&uint8_t buf[4] = v7;
    __int16 v97 = 2080;
    v98 = v12;
    __int16 v99 = 2080;
    v100 = v13;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v104 < 0) {
      operator delete(*(void **)v101);
    }
    int v3 = &qword_102419000;
    if (SHIBYTE(v94) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346B78);
    }
    int v63 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v63 = (void *)*v63;
    }
    sub_10196AFD4(*(_DWORD *)(a1 + 4), v101);
    int v64 = v104;
    __int16 v65 = *(unsigned char **)v101;
    sub_101966B1C(a2, v88);
    __int16 v66 = v101;
    if (v64 < 0) {
      __int16 v66 = v65;
    }
    if (v89 >= 0) {
      __int16 v67 = v88;
    }
    else {
      __int16 v67 = (void **)v88[0];
    }
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v63;
    __int16 v92 = 2080;
    v93 = v66;
    __int16 v94 = 2080;
    v95 = v67;
    int v68 = (char *)_os_log_send_and_compose_impl();
    if (v89 < 0) {
      operator delete(v88[0]);
    }
    int v3 = &qword_102419000;
    if (v104 < 0) {
      operator delete(*(void **)v101);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaControlPlane>::handleEvent(Event) [T = CLEurekaControlPlane]", "%s\n", v68);
    if (v68 != buf) {
      free(v68);
    }
  }
  uint64_t v14 = *(void *)(a1 + 16);
  if (!v14) {
    goto LABEL_31;
  }
  int v15 = (uint64_t **)(a1 + 8);
  int v16 = *(_DWORD *)(a1 + 4);
  uint64_t v17 = a1 + 16;
  do
  {
    int v18 = *(_DWORD *)(v14 + 32);
    BOOL v19 = v18 < v16;
    if (v18 >= v16) {
      dispatch_time_t v20 = (uint64_t *)v14;
    }
    else {
      dispatch_time_t v20 = (uint64_t *)(v14 + 8);
    }
    if (!v19) {
      uint64_t v17 = v14;
    }
    uint64_t v14 = *v20;
  }
  while (*v20);
  if (v17 == a1 + 16 || v16 < *(_DWORD *)(v17 + 32))
  {
LABEL_31:
    sub_10196BB18();
    goto LABEL_169;
  }
  double v21 = *(uint64_t (**)(void *, uint64_t))(v17 + 40);
  uint64_t v22 = *(void *)(v17 + 48);
  long double v23 = (void *)(*(void *)(a1 + 32) + (v22 >> 1));
  if (v22) {
    double v21 = *(uint64_t (**)(void *, uint64_t))(*v23 + v21);
  }
  uint64_t v24 = v21(v23, a2);
  uint64_t v25 = v24;
  int v87 = v24;
  if (a2 <= 1 && v24 != v90)
  {
    sub_10196BF5C();
    goto LABEL_169;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346B78);
    }
    int v26 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      char v27 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        char v27 = (void *)*v27;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346B78);
      }
      std::string::size_type v72 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        std::string::size_type v72 = (void *)*v72;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v72;
      __int16 v73 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "State CLStateMachine<CLEurekaControlPlane>::handleEvent(Event) [T = CLEurekaControlPlane]", "%s\n", v73);
      if (v73 != buf) {
        free(v73);
      }
    }
  }
  if (v3[122] != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346B78);
  }
  uint64_t v28 = qword_1024193D8;
  os_log_type_t v29 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v29))
  {
    int v30 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v30 = (void *)*v30;
    }
    if (v25 > 3) {
      char v31 = "StateUnknown";
    }
    else {
      char v31 = (&off_102346C68)[(int)v25];
    }
    sub_100134750(buf, v31);
    if (v99 >= 0) {
      uint64_t v32 = buf;
    }
    else {
      uint64_t v32 = *(unsigned char **)buf;
    }
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v30;
    __int16 v92 = 2080;
    v93 = v32;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v99) < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346B78);
    }
    __int16 v69 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      __int16 v69 = (void *)*v69;
    }
    sub_10196AFD4(v25, __p);
    if (v94 >= 0) {
      int v70 = __p;
    }
    else {
      int v70 = *(unsigned char **)__p;
    }
    *(_DWORD *)v101 = 136315394;
    *(void *)&v101[4] = v69;
    __int16 v102 = 2080;
    v103 = v70;
    __int16 v71 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v94) < 0) {
      operator delete(*(void **)__p);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaControlPlane>::handleEvent(Event) [T = CLEurekaControlPlane]", "%s\n", v71);
    if (v71 != buf) {
      free(v71);
    }
  }
  if (v25 != v90)
  {
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346B78);
    }
    char v33 = qword_1024193D8;
    os_log_type_t v34 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v34))
    {
      char v35 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        char v35 = (void *)*v35;
      }
      if (v90 > 3) {
        __int16 v36 = "StateUnknown";
      }
      else {
        __int16 v36 = (&off_102346C68)[v90];
      }
      sub_100134750(__p, v36);
      char v37 = v3;
      int v38 = SHIBYTE(v94);
      char v39 = *(unsigned char **)__p;
      sub_100134750(v101, "Exit");
      unsigned int v40 = __p;
      if (v38 < 0) {
        unsigned int v40 = v39;
      }
      if (v104 >= 0) {
        unsigned int v41 = v101;
      }
      else {
        unsigned int v41 = *(unsigned char **)v101;
      }
      *(_DWORD *)uint64_t buf = 136315650;
      *(void *)&uint8_t buf[4] = v35;
      __int16 v97 = 2080;
      v98 = v40;
      __int16 v99 = 2080;
      v100 = v41;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%soldState,%s,event,%s", buf, 0x20u);
      if (v104 < 0) {
        operator delete(*(void **)v101);
      }
      int v3 = v37;
      if (SHIBYTE(v94) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346B78);
      }
      int v74 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v74 = (void *)*v74;
      }
      sub_10196AFD4(v90, v101);
      __int16 v75 = v3;
      int v76 = v104;
      int v77 = *(unsigned char **)v101;
      sub_100134750(v88, "Exit");
      __int16 v78 = v101;
      if (v76 < 0) {
        __int16 v78 = v77;
      }
      if (v89 >= 0) {
        int v79 = v88;
      }
      else {
        int v79 = (void **)v88[0];
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = v74;
      __int16 v92 = 2080;
      v93 = v78;
      __int16 v94 = 2080;
      v95 = v79;
      __int16 v80 = (char *)_os_log_send_and_compose_impl();
      if (v89 < 0) {
        operator delete(v88[0]);
      }
      int v3 = v75;
      int v15 = (uint64_t **)(a1 + 8);
      if (v104 < 0) {
        operator delete(*(void **)v101);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaControlPlane>::handleEvent(Event) [T = CLEurekaControlPlane]", "%s\n", v80);
      if (v80 != buf) {
        free(v80);
      }
    }
    uint64_t v42 = *(void *)(a1 + 32);
    *(void *)uint64_t buf = &v90;
    __int16 v43 = sub_1000C5658(v15, (int *)&v90, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    uint64_t v44 = v43[5];
    uint64_t v45 = (uint64_t)v43[6];
    int v46 = (void *)(v42 + (v45 >> 1));
    if (v45) {
      uint64_t v44 = *(uint64_t **)(*v46 + v44);
    }
    int v47 = ((uint64_t (*)(void *, uint64_t))v44)(v46, 1);
    if (v47 == v90)
    {
      *(_DWORD *)(a1 + 4) = v25;
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346B78);
      }
      int v48 = qword_1024193D8;
      os_log_type_t v49 = *(unsigned char *)(a1 + 120);
      if (os_log_type_enabled((os_log_t)qword_1024193D8, v49))
      {
        double v50 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          double v50 = (void *)*v50;
        }
        if (v25 > 3) {
          __int16 v51 = "StateUnknown";
        }
        else {
          __int16 v51 = (&off_102346C68)[(int)v25];
        }
        sub_100134750(__p, v51);
        uint64_t v52 = v3;
        int v53 = SHIBYTE(v94);
        int v54 = *(unsigned char **)__p;
        sub_100134750(v101, "Enter");
        __int16 v55 = __p;
        if (v53 < 0) {
          __int16 v55 = v54;
        }
        if (v104 >= 0) {
          int v56 = v101;
        }
        else {
          int v56 = *(unsigned char **)v101;
        }
        *(_DWORD *)uint64_t buf = 136315650;
        *(void *)&uint8_t buf[4] = v50;
        __int16 v97 = 2080;
        v98 = v55;
        __int16 v99 = 2080;
        v100 = v56;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "%snewState,%s,event,%s", buf, 0x20u);
        if (v104 < 0) {
          operator delete(*(void **)v101);
        }
        int v3 = v52;
        if (SHIBYTE(v94) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v3[122] != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346B78);
        }
        int v81 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          int v81 = (void *)*v81;
        }
        sub_10196AFD4(v25, v101);
        int v82 = v104;
        v83 = *(unsigned char **)v101;
        sub_100134750(v88, "Enter");
        v84 = v101;
        if (v82 < 0) {
          v84 = v83;
        }
        if (v89 >= 0) {
          v85 = v88;
        }
        else {
          v85 = (void **)v88[0];
        }
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = v81;
        __int16 v92 = 2080;
        v93 = v84;
        __int16 v94 = 2080;
        v95 = v85;
        v86 = (char *)_os_log_send_and_compose_impl();
        if (v89 < 0) {
          operator delete(v88[0]);
        }
        if (v104 < 0) {
          operator delete(*(void **)v101);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaControlPlane>::handleEvent(Event) [T = CLEurekaControlPlane]", "%s\n", v86);
        if (v86 != buf) {
          free(v86);
        }
      }
      uint64_t v57 = *(void *)(a1 + 32);
      *(void *)uint64_t buf = &v87;
      std::string::size_type v58 = sub_1000C5658(v15, &v87, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      __int16 v59 = v58[5];
      uint64_t v60 = (uint64_t)v58[6];
      __int16 v61 = (void *)(v57 + (v60 >> 1));
      if (v60) {
        __int16 v59 = *(uint64_t **)(*v61 + v59);
      }
      uint64_t v25 = ((uint64_t (*)(void *, void))v59)(v61, 0);
      if (v25 == v87) {
        goto LABEL_101;
      }
      sub_10196BC84();
    }
    else
    {
      sub_10196BDF0();
    }
LABEL_169:
    __break(1u);
  }
LABEL_101:
  --*(_DWORD *)(a1 + 88);
  return v25;
}

void sub_101968FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 105) < 0) {
    operator delete(*(void **)(v22 - 128));
  }
  _Unwind_Resume(exception_object);
}

void sub_10196903C(uint64_t a1, char *a2)
{
  int v4 = sub_101969A58(a1, (uint64_t)a2);
  if (v4)
  {
    *(_DWORD *)(a1 + 276) = v4;
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102346B58);
    }
    int v5 = qword_1024193E8;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      sub_10192B5A0(*(_DWORD *)(a1 + 276), &__p);
      int v7 = SHIBYTE(v44) >= 0 ? &__p : (void **)__p;
      int v8 = *a2;
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v46 = 2082;
      *(void *)&v46[2] = "";
      __int16 v47 = 2082;
      int v48 = v7;
      __int16 v49 = 1026;
      v50[0] = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Cplane\", \"protocol\":%{public, location:escape_only}s, \"type\":%{public}d}", buf, 0x22u);
      if (SHIBYTE(v44) < 0) {
        operator delete(__p);
      }
    }
    int v9 = sub_101969C44(v6, (uint64_t)a2);
    *(_DWORD *)uint64_t buf = 49;
    *(_DWORD *)int v46 = v9;
    *(_DWORD *)((char *)v50 + 2) = 0;
    *(_DWORD *)((char *)&v50[2] + 2) = 51;
    *(_DWORD *)((char *)&v50[4] + 2) = 1;
    *(_DWORD *)((char *)&v50[10] + 2) = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    std::string __p = 0;
    p_p = &__p;
    char v39 = 0;
    std::string __p = operator new(0x50uLL);
    uint64_t v43 = (uint64_t)__p;
    uint64_t v44 = (char *)__p + 80;
    uint64_t v43 = sub_100682A48((uint64_t)&v44, (uint64_t)buf, (uint64_t)&v51, (uint64_t)__p);
    for (uint64_t i = 48; i != -32; i -= 40)
      sub_100118010((uint64_t)&buf[i]);
    int v11 = *(void **)(a1 + 1800);
    memset(v41, 0, sizeof(v41));
    sub_100682C20(v41, (uint64_t)__p, v43, 0xCCCCCCCCCCCCCCCDLL * ((v43 - (uint64_t)__p) >> 3));
    [v11 setMeasurements:sub_10067C03C(v41)];
    *(void *)uint64_t buf = v41;
    sub_100682B1C((void ***)buf);
    unsigned int v12 = a2[1];
    if (v12 > 0xC) {
      goto LABEL_47;
    }
    if (((1 << v12) & 0xC) != 0)
    {
      if (!*a2) {
        goto LABEL_45;
      }
      if (*a2 == 3)
      {
LABEL_44:
        uint64_t v23 = 5;
        goto LABEL_46;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102346B58);
      }
      os_log_type_t v34 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        sub_10192B5A0(*(_DWORD *)(a1 + 276), &p_p);
        if (v40 >= 0) {
          p_p_p = &p_p;
        }
        else {
          p_p_p = (void **)p_p;
        }
        int v36 = *a2;
        *(_DWORD *)uint64_t buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)int v46 = 2082;
        *(void *)&v46[2] = "";
        __int16 v47 = 2082;
        int v48 = p_p_p;
        __int16 v49 = 1026;
        v50[0] = v36;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Cplane Unusual COM event failure response returned\", \"protocol\":%{public, location:escape_only}s, \"type\":%{public}d}", buf, 0x22u);
        if (v40 < 0) {
          operator delete(p_p);
        }
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102346B58);
        }
      }
      uint64_t v17 = qword_1024193E8;
      if (!os_signpost_enabled((os_log_t)qword_1024193E8)) {
        goto LABEL_93;
      }
      sub_10192B5A0(*(_DWORD *)(a1 + 276), &p_p);
      if (v40 >= 0) {
        int v18 = &p_p;
      }
      else {
        int v18 = (void **)p_p;
      }
    }
    else
    {
      if (((1 << v12) & 0x120) == 0)
      {
        if (((1 << v12) & 0x1400) != 0)
        {
          unsigned int v13 = *a2;
          if (v13 >= 2)
          {
            if (v13 != 3)
            {
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_102346B58);
              }
              uint64_t v14 = qword_1024193E8;
              if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
              {
                sub_10192B5A0(*(_DWORD *)(a1 + 276), &p_p);
                if (v40 >= 0) {
                  int v15 = &p_p;
                }
                else {
                  int v15 = (void **)p_p;
                }
                int v16 = *a2;
                *(_DWORD *)uint64_t buf = 68289538;
                *(_DWORD *)&uint8_t buf[4] = 0;
                *(_WORD *)int v46 = 2082;
                *(void *)&v46[2] = "";
                __int16 v47 = 2082;
                int v48 = v15;
                __int16 v49 = 1026;
                v50[0] = v16;
                _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Cplane Unusual COM event failure response returned\", \"protocol\":%{public, location:escape_only}s, \"type\":%{public}d}", buf, 0x22u);
                if (v40 < 0) {
                  operator delete(p_p);
                }
                if (qword_1024193E0 != -1) {
                  dispatch_once(&qword_1024193E0, &stru_102346B58);
                }
              }
              uint64_t v17 = qword_1024193E8;
              if (!os_signpost_enabled((os_log_t)qword_1024193E8)) {
                goto LABEL_93;
              }
              sub_10192B5A0(*(_DWORD *)(a1 + 276), &p_p);
              if (v40 >= 0) {
                int v18 = &p_p;
              }
              else {
                int v18 = (void **)p_p;
              }
              goto LABEL_90;
            }
            goto LABEL_44;
          }
LABEL_45:
          uint64_t v23 = 4;
          goto LABEL_46;
        }
LABEL_47:
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102346B58);
        }
        uint64_t v24 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          sub_10192B5A0(*(_DWORD *)(a1 + 276), &p_p);
          if (v40 >= 0) {
            uint64_t v25 = &p_p;
          }
          else {
            uint64_t v25 = (void **)p_p;
          }
          *(_DWORD *)uint64_t buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)int v46 = 2082;
          *(void *)&v46[2] = "";
          __int16 v47 = 2082;
          int v48 = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Cplane Unusual COM event failure response returned\", \"protocol\":%{public, location:escape_only}s}", buf, 0x1Cu);
          if (v40 < 0) {
            operator delete(p_p);
          }
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102346B58);
          }
        }
        uint64_t v26 = qword_1024193E8;
        if (!os_signpost_enabled((os_log_t)qword_1024193E8)) {
          goto LABEL_93;
        }
        sub_10192B5A0(*(_DWORD *)(a1 + 276), &p_p);
        if (v40 >= 0) {
          char v27 = &p_p;
        }
        else {
          char v27 = (void **)p_p;
        }
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)int v46 = 2082;
        *(void *)&v46[2] = "";
        __int16 v47 = 2082;
        int v48 = v27;
        uint64_t v28 = "{\"msg%{public}.0s\":\"#Cplane Unusual COM event failure response returned\", \"protocol\":%{public, locat"
              "ion:escape_only}s}";
        os_log_type_t v29 = v26;
        uint32_t v30 = 28;
        goto LABEL_91;
      }
      unint64_t v22 = *a2;
      if (v22 <= 3)
      {
        uint64_t v23 = dword_101E49720[v22];
LABEL_46:
        sub_101968254(a1, v23);
LABEL_93:
        *(void *)uint64_t buf = &__p;
        sub_100682B1C((void ***)buf);
        return;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102346B58);
      }
      char v31 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        sub_10192B5A0(*(_DWORD *)(a1 + 276), &p_p);
        if (v40 >= 0) {
          uint64_t v32 = &p_p;
        }
        else {
          uint64_t v32 = (void **)p_p;
        }
        int v33 = *a2;
        *(_DWORD *)uint64_t buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)int v46 = 2082;
        *(void *)&v46[2] = "";
        __int16 v47 = 2082;
        int v48 = v32;
        __int16 v49 = 1026;
        v50[0] = v33;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Cplane Unusual COM event failure response returned\", \"protocol\":%{public, location:escape_only}s, \"type\":%{public}d}", buf, 0x22u);
        if (v40 < 0) {
          operator delete(p_p);
        }
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102346B58);
        }
      }
      uint64_t v17 = qword_1024193E8;
      if (!os_signpost_enabled((os_log_t)qword_1024193E8)) {
        goto LABEL_93;
      }
      sub_10192B5A0(*(_DWORD *)(a1 + 276), &p_p);
      if (v40 >= 0) {
        int v18 = &p_p;
      }
      else {
        int v18 = (void **)p_p;
      }
    }
LABEL_90:
    int v37 = *a2;
    *(_DWORD *)uint64_t buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)int v46 = 2082;
    *(void *)&v46[2] = "";
    __int16 v47 = 2082;
    int v48 = v18;
    __int16 v49 = 1026;
    v50[0] = v37;
    uint64_t v28 = "{\"msg%{public}.0s\":\"#Cplane Unusual COM event failure response returned\", \"protocol\":%{public, location:"
          "escape_only}s, \"type\":%{public}d}";
    os_log_type_t v29 = v17;
    uint32_t v30 = 34;
LABEL_91:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Cplane Unusual COM event failure response returned", v28, buf, v30);
    if (v40 < 0) {
      operator delete(p_p);
    }
    goto LABEL_93;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102346B58);
  }
  BOOL v19 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10192B5A0(0, &__p);
    dispatch_time_t v20 = SHIBYTE(v44) >= 0 ? &__p : (void **)__p;
    int v21 = *a2;
    *(_DWORD *)uint64_t buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)int v46 = 2082;
    *(void *)&v46[2] = "";
    __int16 v47 = 2082;
    int v48 = v20;
    __int16 v49 = 1026;
    v50[0] = v21;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning dropping the protocol:\", \"protocol\":%{public, location:escape_only}s, \"type\":%{public}d}", buf, 0x22u);
    if (SHIBYTE(v44) < 0) {
      operator delete(__p);
    }
  }
}

void sub_1019699C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a16;
  sub_100682B1C(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_101969A58(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 1) - 2;
  if (v3 < 0xB && ((0x543u >> v3) & 1) != 0) {
    return dword_101E49980[(char)v3];
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346B78);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    int v5 = *(unsigned __int8 *)(a2 + 1);
    *(_DWORD *)uint64_t buf = 67109120;
    int v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#error,protocol not supported,%d", buf, 8u);
  }
  BOOL v6 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346B78);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "Emergency::PositionProtocol CLEurekaControlPlane::getProtocol(const pds::tlv::commEvent &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
    return 0;
  }
  return result;
}

uint64_t sub_101969C44(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 1) - 2;
  if (v3 < 0xB && ((0x543u >> v3) & 1) != 0) {
    return dword_101E499AC[(char)v3];
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346B78);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    int v5 = *(unsigned __int8 *)(a2 + 1);
    *(_DWORD *)uint64_t buf = 67109120;
    int v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#error,protocol not supported,%d", buf, 8u);
  }
  BOOL v6 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346B78);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "Emergency::NILRPositionProtocol CLEurekaControlPlane::mapProtocolType(const pds::tlv::commEvent &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
    return 0;
  }
  return result;
}

void sub_101969E30(uint64_t a1, unsigned int a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102346B58);
  }
  unsigned int v3 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    sub_1019BCAD4(a2, __p);
    int v4 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uint64_t buf = 136446210;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#Cplane,Emergency Event ,EmergencyEvent,%{public}s", buf, 0xCu);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102346B58);
    }
    sub_1019BCAD4(a2, buf);
    if (v11 >= 0) {
      int v7 = buf;
    }
    else {
      int v7 = *(unsigned char **)buf;
    }
    int v12 = 136446210;
    unsigned int v13 = v7;
    int v8 = (char *)_os_log_send_and_compose_impl();
    if (v11 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaControlPlane::process_EmergencyEvent(const qmi::pds::EmergencyEvent)", "%s\n", v8);
    if (v8 != (char *)__p) {
      free(v8);
    }
  }
  if (a2 <= 0xA)
  {
    if (((1 << a2) & 0x416) != 0)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102346B58);
      }
      int v5 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#Cplane,BB Emergency Session begin", (uint8_t *)__p, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024193E0 == -1)
      {
LABEL_36:
        *(_WORD *)uint64_t buf = 0;
        int v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaControlPlane::process_EmergencyEvent(const qmi::pds::EmergencyEvent)", "%s\n", v9);
        if (v9 != (char *)__p) {
          free(v9);
        }
        return;
      }
LABEL_38:
      dispatch_once(&qword_1024193E0, &stru_102346B58);
      goto LABEL_36;
    }
    if (a2 == 9)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102346B58);
      }
      BOOL v6 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#Cplane,BB Emergency Session end", (uint8_t *)__p, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193E0 == -1) {
          goto LABEL_36;
        }
        goto LABEL_38;
      }
    }
  }
}

void sub_10196A2A8(uint64_t a1, uint64_t a2, unsigned int *a3, char a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346B78);
  }
  int v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "process_SessionResponse", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346B78);
    }
    LOWORD(v25) = 0;
    BOOL v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaControlPlane::process_SessionResponse(const GNSS::PerEpochData &, const qmi::pds::SessionFixStatus &, uint8_t)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 240) = *(void *)(a2 + 96);
  LODWORD(v9) = sub_10182E740(a4);
  *(float *)(a1 + 268) = v9;
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 232) = v10;
  *(void *)(a1 + 248) = *(void *)(a2 + 104);
  *(_DWORD *)(a1 + 264) = (*(_DWORD *)(a2 + 136) >> 4) & 2 | (*(_DWORD *)(a2 + 136) >> 5) & 4 | (*(_DWORD *)(a2 + 136) >> 1) & 0x20 | ((*(_DWORD *)(a2 + 136) & 0x1F) != 0);
  *(_OWORD *)(a1 + 1752) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 1768) = v10;
  *(void *)(a1 + 1776) = *(void *)(a2 + 96);
  *(_DWORD *)(a1 + 272) = 1;
  sub_1000FFBA8();
  *(_DWORD *)uint64_t buf = 52;
  v30[0] = v9;
  int v31 = 0;
  uint64_t v26 = 0;
  v27[0] = 0;
  uint64_t v25 = 0;
  int v21 = (void **)&v25;
  LOBYTE(v22) = 0;
  uint64_t v25 = (char *)operator new(0x28uLL);
  uint64_t v26 = v25;
  v27[0] = v25 + 40;
  uint64_t v26 = (unsigned char *)sub_100682A48((uint64_t)v27, (uint64_t)buf, (uint64_t)v32, (uint64_t)v25);
  sub_100118010((uint64_t)v30);
  char v11 = *(void **)(a1 + 1800);
  memset(v24, 0, sizeof(v24));
  sub_100682C20(v24, (uint64_t)v25, (uint64_t)v26, 0xCCCCCCCCCCCCCCCDLL * ((v26 - v25) >> 3));
  [v11 setMeasurements:sub_10067C03C(v24)];
  *(void *)uint64_t buf = v24;
  sub_100682B1C((void ***)buf);
  unsigned int v12 = *a3;
  if (!*a3)
  {
    float v13 = *(double *)(a2 + 72);
    v30[0] = v13;
    double v14 = *(double *)(a2 + 96);
    double v15 = *(double *)(a2 + 104);
    *(_DWORD *)uint64_t buf = 39;
    int v31 = 4;
    v32[0] = 40;
    v32[2] = (int)v14;
    v32[8] = 0;
    v32[10] = 41;
    v32[12] = (int)v15;
    unsigned int v16 = *(_DWORD *)(a2 + 136);
    v32[18] = 0;
    v32[20] = 43;
    v32[22] = (v16 >> 4) & 2 | (v16 >> 5) & 4 | (v16 >> 1) & 0x20 | ((v16 & 0x1F) != 0);
    v32[28] = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v21 = 0;
    v27[2] = &v21;
    char v28 = 0;
    int v21 = (void **)operator new(0xA0uLL);
    uint64_t v22 = (uint64_t)v21;
    uint64_t v23 = v21 + 20;
    uint64_t v22 = sub_100682A48((uint64_t)&v23, (uint64_t)buf, (uint64_t)&v33, (uint64_t)v21);
    for (uint64_t i = 128; i != -32; i -= 40)
      sub_100118010((uint64_t)&buf[i]);
    int v18 = *(void **)(a1 + 1800);
    memset(v20, 0, sizeof(v20));
    sub_100682C20(v20, (uint64_t)v21, v22, 0xCCCCCCCCCCCCCCCDLL * ((v22 - (uint64_t)v21) >> 3));
    [v18 setMeasurements:sub_10067C03C(v20)];
    *(void *)uint64_t buf = v20;
    sub_100682B1C((void ***)buf);
    *(void *)uint64_t buf = &v21;
    sub_100682B1C((void ***)buf);
    unsigned int v12 = *a3;
  }
  if (v12 <= 9) {
    sub_101968254(a1, dword_101E499D8[v12]);
  }
  *(void *)uint64_t buf = &v25;
  sub_100682B1C((void ***)buf);
}

void sub_10196A71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27)
{
  a27 = (void **)&a15;
  sub_100682B1C(&a27);
  a27 = (void **)&a21;
  sub_100682B1C(&a27);
  _Unwind_Resume(a1);
}

void sub_10196A7D4(uint64_t a1, long long *a2, uint64_t a3)
{
  if ((*(_DWORD *)(a1 + 276) - 1) <= 1 && *((_DWORD *)a2 + 2) == 1) {
    *((void *)a2 + 28) = 1;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346B78);
  }
  BOOL v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    sub_1019BD4D4(*((void *)a2 + 28), __p);
    int v7 = v29 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uint64_t buf = 136315138;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#Cplane,#ca,processPdsSessionStatisticsReport,type,%s", buf, 0xCu);
    if (v29 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346B78);
    }
    sub_1019BD4D4(*((void *)a2 + 28), buf);
    if (v25 >= 0) {
      int v21 = buf;
    }
    else {
      int v21 = *(unsigned char **)buf;
    }
    int v26 = 136315138;
    char v27 = v21;
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    if (v25 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaControlPlane::processPdsSessionStatisticsReport(CLEurekaNilrTypes::sessionStatisticsReport, uint64_t)", "%s\n", v22);
    if (v22 != (char *)__p) {
      free(v22);
    }
  }
  if (*(unsigned char *)(a1 + 128) || *(unsigned char *)(a1 + 129))
  {
    if (*((void *)a2 + 28) == 1)
    {
      long long v8 = *a2;
      long long v9 = a2[1];
      long long v10 = a2[2];
      *(_OWORD *)(a1 + 1472) = a2[3];
      *(_OWORD *)(a1 + 1456) = v10;
      *(_OWORD *)(a1 + 1440) = v9;
      *(_OWORD *)(a1 + 1424) = v8;
      long long v11 = a2[4];
      long long v12 = a2[5];
      long long v13 = a2[6];
      *(_OWORD *)(a1 + 1536) = a2[7];
      *(_OWORD *)(a1 + 1520) = v13;
      *(_OWORD *)(a1 + 1504) = v12;
      *(_OWORD *)(a1 + 1488) = v11;
      long long v14 = a2[8];
      long long v15 = a2[9];
      long long v16 = a2[10];
      *(_OWORD *)(a1 + 1600) = a2[11];
      *(_OWORD *)(a1 + 1584) = v16;
      *(_OWORD *)(a1 + 1568) = v15;
      *(_OWORD *)(a1 + 1552) = v14;
      long long v17 = a2[12];
      long long v18 = a2[13];
      long long v19 = a2[14];
      *(unsigned char *)(a1 + 1664) = *((unsigned char *)a2 + 240);
      *(_OWORD *)(a1 + 1648) = v19;
      *(_OWORD *)(a1 + 1632) = v18;
      *(_OWORD *)(a1 + 1616) = v17;
      *(void *)(a1 + 1856) = a3;
      sub_101968254(a1, 13);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346B78);
    }
    dispatch_time_t v20 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#Cplane,#ca,processPdsSessionStatisticsReport,summary report for non-emergency NILR", (uint8_t *)__p, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346B78);
      }
      *(_WORD *)uint64_t buf = 0;
      uint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaControlPlane::processPdsSessionStatisticsReport(CLEurekaNilrTypes::sessionStatisticsReport, uint64_t)", "%s\n", v23);
      if (v23 != (char *)__p) {
        free(v23);
      }
    }
    sub_10196ABE0(a1);
  }
}

void sub_10196ABE0(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346B78);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67110144;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)long long v17 = 1024;
    *(_DWORD *)&v17[2] = 1;
    __int16 v18 = 1024;
    int v19 = 0;
    __int16 v20 = 1024;
    int v21 = 0;
    __int16 v22 = 1024;
    int v23 = 1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#Cplane,#ca,submitNonEmergencyNILRSessionStatsToCA,posProtocol,%d,sessionProtocol,%d,msgType,%d,methodType,%d,discardReason,%d", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346B78);
    }
    uint64_t v11 = 67110144;
    uint64_t v12 = 0x400000000010400;
    *(_DWORD *)long long v13 = 0;
    *(_WORD *)&v13[4] = 1024;
    *(_DWORD *)&v13[6] = 0;
    __int16 v14 = 1024;
    int v15 = 1;
    BOOL v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaControlPlane::submitNonEmergencyNILRSessionStatsToCA()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  *(_DWORD *)uint64_t buf = 86;
  *(_DWORD *)long long v17 = 0;
  int v24 = 0;
  int v25 = 51;
  int v26 = 1;
  int v27 = 0;
  int v28 = 52;
  int v29 = 0;
  int v30 = 0;
  int v31 = 84;
  int v32 = 1;
  int v33 = 0;
  int v34 = 85;
  int v35 = 0;
  int v36 = 0;
  uint64_t v12 = 0;
  *(void *)long long v13 = 0;
  uint64_t v11 = 0;
  v9[3] = (uint64_t)&v11;
  char v10 = 0;
  uint64_t v11 = (uint64_t)operator new(0xC8uLL);
  uint64_t v12 = v11;
  *(void *)long long v13 = v11 + 200;
  uint64_t v12 = sub_100682A48((uint64_t)v13, (uint64_t)buf, (uint64_t)&v37, v11);
  for (uint64_t i = 168; i != -32; i -= 40)
    sub_100118010((uint64_t)&buf[i]);
  int v4 = *(void **)(a1 + 1800);
  memset(v9, 0, 24);
  sub_100682C20(v9, v11, v12, 0xCCCCCCCCCCCCCCCDLL * ((v12 - v11) >> 3));
  [v4 setMeasurements:sub_10067C03C(v9)];
  *(void *)uint64_t buf = v9;
  sub_100682B1C((void ***)buf);
  int v5 = *(void **)(a1 + 1800);
  if (byte_10248A8FF < 0)
  {
    sub_1000DC48C(__p, (void *)xmmword_10248A8E8, *((unint64_t *)&xmmword_10248A8E8 + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = xmmword_10248A8E8;
    uint64_t v8 = unk_10248A8F8;
  }
  [v5 submitEvent:sub_1007EB0E8((long long *)__p)];
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  *(void *)uint64_t buf = &v11;
  sub_100682B1C((void ***)buf);
}

void sub_10196AF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

void *sub_10196AFD4@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 3) {
    uint64_t v2 = "StateUnknown";
  }
  else {
    uint64_t v2 = (&off_102346C68)[a1];
  }
  return sub_100134750(a2, v2);
}

void sub_10196B000(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102346B58);
  }
  int v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#Cplane,emergency settings changed", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102346B58);
    }
    long long v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaControlPlane::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  int v5 = *(_DWORD *)a2;
  if (!*(_DWORD *)a2) {
    goto LABEL_10;
  }
  if (v5 == 1 && sub_1000FFBA8())
  {
    int v5 = *(_DWORD *)a2;
LABEL_10:
    uint64_t v6 = sub_1017BE0C0((void *)(a1 + 168), v5);
    sub_10083C6B4(v6, a2);
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346B78);
  }
  int v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    int v8 = *(_DWORD *)a2;
    *(_DWORD *)uint64_t buf = 67109120;
    int v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "InvalidArg,handleEmergencySettingsChange,instance,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346B78);
    }
    char v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaControlPlane::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
}

void sub_10196B318(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_10196B348(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10196B37C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10196B3B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10196B3FC(uint64_t a1, const void **a2, void *a3)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *a3;
  uint64_t v5 = a3[1];
  *(void *)(a1 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  uint64_t v6 = (void **)(a1 + 96);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 2;
  if (*((char *)a2 + 23) < 0)
  {
    if (a2[1]) {
      goto LABEL_5;
    }
LABEL_20:
    sub_10196C0C8();
    uint64_t result = abort_report_np();
    __break(1u);
    return result;
  }
  if (!*((unsigned char *)a2 + 23)) {
    goto LABEL_20;
  }
LABEL_5:
  if (*((char *)a2 + 23) >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  sub_1001110E4((uint64_t)&v11, v7 + 1);
  if (v12 >= 0) {
    int v8 = &v11;
  }
  else {
    int v8 = (long long *)v11;
  }
  if (v7)
  {
    if (*((char *)a2 + 23) >= 0) {
      long long v9 = a2;
    }
    else {
      long long v9 = *a2;
    }
    memmove(v8, v9, v7);
  }
  *(_WORD *)((char *)v8 + v7) = 44;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = v11;
  *(void *)(a1 + 112) = v12;
  return a1;
}

void sub_10196B570(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  sub_1000F5BB0(v3, *(void **)(v1 + 64));
  size_t v7 = *(std::__shared_weak_count **)(v1 + 40);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  sub_1000F5BB0(v2, *v4);
  _Unwind_Resume(a1);
}

uint64_t sub_10196B5B4(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  sub_10196B624(*(void **)(a1 + 56), (void *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  sub_1000F5BB0(v2, *(void **)(a1 + 64));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000F5BB0(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

uint64_t sub_10196B624(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      sub_101966688(a3, *((_DWORD *)v5 + 8));
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          size_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          size_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_10196B6A4(uint64_t a1)
{
  return sub_101968254(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

#error "10196B728: call analysis failed (funcsize=76)"

#error "10196B8A8: call analysis failed (funcsize=72)"

#error "10196BA10: call analysis failed (funcsize=76)"

#error "10196BB90: call analysis failed (funcsize=72)"

#error "10196BCFC: call analysis failed (funcsize=72)"

#error "10196BE68: call analysis failed (funcsize=72)"

#error "10196BFD4: call analysis failed (funcsize=72)"

void sub_10196C0C8()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346B78);
  }
  if (sub_100857B88())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346B78);
    }
  }
  if (sub_100857BC4())
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v0, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346B78);
    }
  }
  if (sub_100857BA8())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
  }
}

void sub_10196C26C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  sub_1018E6D64(a1 + 16, a3);
  *(void *)(a1 + 48) = off_102346CD8;
  *(void *)(a1 + 56) = a1;
  *(void *)(a1 + 72) = a1 + 48;
  *(void *)(a1 + 80) = off_102346D58;
  *(void *)(a1 + 88) = a1;
  *(void *)(a1 + 104) = a1 + 80;
  sub_101973420(a1 + 112, a4);
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = xmmword_101D2A430;
  *(_DWORD *)(a1 + 192) = -1;
  *(void *)(a1 + 200) = 0x7FEFFFFFFFFFFFFFLL;
  *(_WORD *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 210) = 0;
  *(_OWORD *)(a1 + 216) = xmmword_101D2A460;
  *(_WORD *)(a1 + 232) = 1;
  *(_OWORD *)(a1 + 240) = xmmword_101E49A00;
  *(unsigned char *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(_WORD *)(a1 + 288) = 0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346C88);
  }
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "CLRGCM,created", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    size_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLRhythmicGnssClientManager::CLRhythmicGnssClientManager(id<CLIntersiloUniverse>, GnssStateUpdateCallback, GnssRegisteredClientStateChangeCallback)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  qword_10248D878 = a1;
  sub_10196C7C8();
}

void sub_10196C71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  int v19 = *v17;
  if (*v17)
  {
    v12[34] = (uint64_t)v19;
    operator delete(v19);
  }
  __int16 v20 = (void *)v12[19];
  if (v20)
  {
    v12[20] = (uint64_t)v20;
    operator delete(v20);
  }
  sub_1019734B8(v16, 0);
  sub_100E93A04(a12);
  sub_10043C994(v15);
  sub_10068280C(v14);
  sub_100E93890(v13);
  uint64_t v21 = *v12;
  *uint64_t v12 = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  _Unwind_Resume(a1);
}

void sub_10196C7C8()
{
}

void sub_10196C8B4(uint64_t a1, ...)
{
  va_start(va2, a1);
  va_start(va1, a1);
  va_start(va, a1);
  uint64_t v1 = va_arg(va1, void);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  sub_10068280C((uint64_t *)va);
  sub_100E93890((uint64_t *)va1);
  sub_10043C994((uint64_t *)va2);
  operator delete();
}

void sub_10196C908(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102346CA8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRhythmicGnssClientManager::onMotionStateWorkoutNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102346CA8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      long long v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRhythmicGnssClientManager::onMotionStateWorkoutNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101972D60(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10196CAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10196CAE8(uint64_t *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346C88);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLRGCM,deconstructor", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLRhythmicGnssClientManager::~CLRhythmicGnssClientManager()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  uint64_t v3 = (void *)a1[33];
  if (v3)
  {
    a1[34] = (uint64_t)v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[19];
  if (v4)
  {
    a1[20] = (uint64_t)v4;
    operator delete(v4);
  }
  sub_1019734B8(a1 + 18, 0);
  sub_100E93A04(a1 + 14);
  sub_10043C994(a1 + 10);
  sub_10068280C(a1 + 6);
  sub_100E93890(a1 + 2);
  uint64_t v5 = *a1;
  *a1 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void sub_10196CCFC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_10196CD0C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t result = 0;
  switch(*a2)
  {
    case 0xFFFFFFFF:
      return result;
    case 0:
      __asm { FMOV            V0.2D, #30.0; jumptable 000000010196CD54 case 1 }
      *(_OWORD *)a3 = _Q0;
      *(_DWORD *)(a3 + 16) = 0;
      sub_10196CE94();
      char v10 = 0;
      *(void *)(a3 + 24) = v11;
      *(_WORD *)(a3 + 32) = 256;
      *(void *)(a3 + 48) = 0x408C200000000000;
      goto LABEL_4;
    case 1:
      __asm { FMOV            V0.2D, #30.0; jumptable 000000010196CD54 case 2 }
      *(_OWORD *)a3 = _Q0;
      *(_DWORD *)(a3 + 16) = 1;
      sub_10196CE94();
      *(void *)(a3 + 24) = v13;
      *(_WORD *)(a3 + 32) = 257;
      sub_10196CE94();
      char v10 = 0;
      *(void *)(a3 + 48) = v14;
LABEL_4:
      *(unsigned char *)(a3 + 34) = 0;
      double v15 = 1.79769313e308;
      goto LABEL_10;
    case 2:
      *(void *)a3 = 0x403E000000000000;
      sub_1000C7F88(&v19);
      double v21 = 0.0;
      int v16 = sub_1000A699C(v19, "CLRhythmicGnssDefaultActiveGnssTime_s", &v21);
      double v17 = v21;
      if (!v16) {
        double v17 = 18.0;
      }
      *(double *)(a3 + 8) = v17;
      if (v20) {
        sub_1000DB0A0(v20);
      }
      *(_DWORD *)(a3 + 16) = 2;
      sub_10196CE94();
      *(void *)(a3 + 24) = v18;
      *(_WORD *)(a3 + 32) = 0;
      *(void *)(a3 + 48) = 0x7FEFFFFFFFFFFFFFLL;
      char v10 = 1;
      *(unsigned char *)(a3 + 34) = 1;
      double v15 = (double)sub_10196CF20();
LABEL_10:
      *(double *)(a3 + 40) = v15;
      *(_WORD *)(a3 + 56) = 1;
      *(_OWORD *)(a3 + 64) = xmmword_101E49A10;
      *(unsigned char *)(a3 + 80) = v10;
      break;
    default:
      return 1;
  }
  return 1;
}

void sub_10196CE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10196CE94()
{
  sub_1000C7F88(&v0);
  uint64_t v2 = 0;
  sub_1000A699C(v0, "CLRhythmicGnssDefaultInterSessionInterval_s", &v2);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

void sub_10196CF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10196CF20()
{
  v4[0] = 0;
  sub_1000C7F88(buf);
  char v0 = sub_1004D0870(*(uint64_t *)buf, "CLProactiveGnssPowerBudget_s", v4);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if ((v0 & 1) == 0) {
    v4[0] = sub_100743E58();
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346C88);
  }
  uint64_t v1 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v4[0];
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "CLRGE,getPowerBudget,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    v4[1] = 67240192;
    v4[2] = v4[0];
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "uint32_t CLRhythmicGnssClientManager::getProactiveGnssPowerBudgetInSecondsBasedOnHW()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  return v4[0];
}

void sub_10196D10C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10196D12C(uint64_t a1, int *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346C88);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *a2;
    *(_DWORD *)uint64_t buf = 67174657;
    int v22 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLRGCM,removeRhythmicGnssClient,%{private}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    int v10 = *a2;
    LODWORD(v16) = 67174657;
    DWORD1(v16) = v10;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::removeRhythmicGnssClient(const CLRhythmicGnssRegistrationOptions &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  long long v16 = xmmword_101D2A430;
  LODWORD(v17) = -1;
  *((void *)&v17 + 1) = 0x7FEFFFFFFFFFFFFFLL;
  *(_WORD *)uint64_t v18 = 0;
  v18[2] = 0;
  *(_OWORD *)&v18[8] = xmmword_101D2A460;
  *(_WORD *)&v18[24] = 1;
  long long v19 = xmmword_101E49A00;
  LOBYTE(v20) = 0;
  uint64_t v6 = sub_10196CD0C(a1, a2, (uint64_t)&v16);
  if (v6)
  {
    _DWORD v13[2] = *(_OWORD *)v18;
    v13[3] = *(_OWORD *)&v18[16];
    v13[4] = v19;
    uint64_t v14 = v20;
    v13[0] = v16;
    v13[1] = v17;
    sub_10196D4F0(a1, (uint64_t *)v13);
    if (*(void *)(a1 + 152) == *(void *)(a1 + 160))
    {
      uint64_t v7 = *(void *)(a1 + 144);
      if (v7) {
        sub_1018E1DAC(v7);
      }
    }
    if (*(void *)(a1 + 136)) {
      sub_10196E080(a1 + 112, 0, *(_DWORD *)(a1 + 192), -1431655765 * ((*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 5));
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    uint64_t v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLRGCM,removeRhythmicGnssClient,invalid mode", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346C88);
      }
      __int16 v15 = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::removeRhythmicGnssClient(const CLRhythmicGnssRegistrationOptions &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  return v6;
}

void sub_10196D4F0(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346C88);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 5);
    *(_DWORD *)uint64_t buf = 134349056;
    *(void *)v100 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLRGCM,removeClientConfigurationList,size,%{public}zu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 5);
    int v85 = 134349056;
    *(void *)v86 = v76;
    int v77 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::removeClientConfigurationList(const struct CLRhythmicGnssConfiguration::RhythmicGnssConfiguration)", "%s\n", v77);
    if (v77 != (char *)buf) {
      free(v77);
    }
  }
  uint64_t v6 = *(void *)(a1 + 152);
  if (v6 != *(void *)(a1 + 160))
  {
    uint64_t v7 = -v6;
    while (1)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346C88);
      }
      uint64_t v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v9 = *(_DWORD *)v6;
        uint64_t v10 = *(void *)(v6 + 8);
        uint64_t v11 = *(void *)(v6 + 16);
        int v12 = *(_DWORD *)(v6 + 24);
        uint64_t v13 = *(void *)(v6 + 32);
        int v14 = *(unsigned __int8 *)(v6 + 40);
        int v15 = *(unsigned __int8 *)(v6 + 41);
        int v16 = *(unsigned __int8 *)(v6 + 42);
        uint64_t v18 = *(void *)(v6 + 48);
        uint64_t v17 = *(void *)(v6 + 56);
        int v19 = *(unsigned __int8 *)(v6 + 64);
        int v20 = *(unsigned __int8 *)(v6 + 65);
        uint64_t v21 = *(void *)(v6 + 72);
        uint64_t v22 = *(void *)(v6 + 80);
        *(_DWORD *)uint64_t buf = 67243520;
        *(_DWORD *)v100 = v9;
        *(_WORD *)&v100[4] = 2050;
        *(void *)&v100[6] = v10;
        *(_WORD *)&v100[14] = 2050;
        *(void *)&v100[16] = v11;
        __int16 v101 = 1026;
        *(_DWORD *)__int16 v102 = v12;
        *(_WORD *)&v102[4] = 2050;
        *(void *)&v102[6] = v13;
        __int16 v103 = 1026;
        int v104 = v14;
        __int16 v105 = 1026;
        *(_DWORD *)v106 = v15;
        *(_WORD *)&v106[4] = 2050;
        *(void *)&v106[6] = v17;
        __int16 v107 = 1026;
        *(_DWORD *)v108 = v16;
        *(_WORD *)&v108[4] = 2050;
        *(void *)&v108[6] = v18;
        __int16 v109 = 1026;
        int v110 = v19;
        __int16 v111 = 1026;
        *(_DWORD *)v112 = v20;
        *(_WORD *)&v112[4] = 2050;
        *(void *)&v112[6] = v21;
        *(_WORD *)&v112[14] = 2050;
        *(void *)&v112[16] = v22;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLRGCM,removeClientConfigurationList,clientIter->clientInfo,fRhythmicGnssActiveConfiguration,refCount,%{public}d,hAccuracy_m,%{public}.3lff,gpsActiveTimeout_s,%{public}.3lf,powerMode,%{public}d,rhythmicGnssInterSessionInterval_s,%{public}.3lf,wakeAPUp,%{public}d,takePowerAssertion,%{public}d,apWakeBackStopTimeForNextSession_s,%{public}.3lf,isPowerBudgetApplicable,%{public}d,totalPowerBudgetPerDay_s,%{public}.3lf,skipDebounce,%{public}d,useLeechGPSFixesToOffsetRhythmicGnssDutyCycle,%{public}d,wifiCellInterSessionInterval_s,%{public}.3lf,additionalPowerAssertionTime_s,%{public}.3lf", buf, 0x72u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346C88);
        }
        int v37 = *(_DWORD *)v6;
        uint64_t v38 = *(void *)(v6 + 8);
        uint64_t v39 = *(void *)(v6 + 16);
        int v40 = *(_DWORD *)(v6 + 24);
        uint64_t v41 = *(void *)(v6 + 32);
        int v42 = *(unsigned __int8 *)(v6 + 40);
        int v43 = *(unsigned __int8 *)(v6 + 41);
        int v44 = *(unsigned __int8 *)(v6 + 42);
        uint64_t v46 = *(void *)(v6 + 48);
        uint64_t v45 = *(void *)(v6 + 56);
        int v47 = *(unsigned __int8 *)(v6 + 64);
        int v48 = *(unsigned __int8 *)(v6 + 65);
        uint64_t v49 = *(void *)(v6 + 72);
        uint64_t v50 = *(void *)(v6 + 80);
        int v85 = 67243520;
        *(_DWORD *)v86 = v37;
        *(_WORD *)&v86[4] = 2050;
        *(void *)&v86[6] = v38;
        *(_WORD *)&v86[14] = 2050;
        *(void *)&v86[16] = v39;
        __int16 v87 = 1026;
        *(_DWORD *)v88 = v40;
        *(_WORD *)&v88[4] = 2050;
        *(void *)&v88[6] = v41;
        __int16 v89 = 1026;
        int v90 = v42;
        __int16 v91 = 1026;
        *(_DWORD *)__int16 v92 = v43;
        *(_WORD *)&v92[4] = 2050;
        *(void *)&v92[6] = v45;
        __int16 v93 = 1026;
        *(_DWORD *)__int16 v94 = v44;
        *(_WORD *)&v94[4] = 2050;
        *(void *)&v94[6] = v46;
        __int16 v95 = 1026;
        int v96 = v47;
        __int16 v97 = 1026;
        *(_DWORD *)v98 = v48;
        *(_WORD *)&v98[4] = 2050;
        *(void *)&v98[6] = v49;
        *(_WORD *)&v98[14] = 2050;
        *(void *)&v98[16] = v50;
        uint64_t v51 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::removeClientConfigurationList(const struct CLRhythmicGnssConfiguration::RhythmicGnssConfiguration)", "%s\n", v51);
        if (v51 != (char *)buf) {
          free(v51);
        }
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346C88);
      }
      int v23 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v24 = *a2;
        uint64_t v25 = a2[1];
        int v26 = *((_DWORD *)a2 + 4);
        uint64_t v27 = a2[3];
        int v28 = *((unsigned __int8 *)a2 + 32);
        int v29 = *((unsigned __int8 *)a2 + 33);
        int v30 = *((unsigned __int8 *)a2 + 34);
        uint64_t v32 = a2[5];
        uint64_t v31 = a2[6];
        int v33 = *((unsigned __int8 *)a2 + 56);
        int v34 = *((unsigned __int8 *)a2 + 57);
        uint64_t v35 = a2[8];
        uint64_t v36 = a2[9];
        *(_DWORD *)uint64_t buf = 134352128;
        *(void *)v100 = v24;
        *(_WORD *)&v100[8] = 2050;
        *(void *)&v100[10] = v25;
        *(_WORD *)&v100[18] = 1026;
        *(_DWORD *)&v100[20] = v26;
        __int16 v101 = 2050;
        *(void *)__int16 v102 = v27;
        *(_WORD *)&v102[8] = 1026;
        *(_DWORD *)&v102[10] = v28;
        __int16 v103 = 1026;
        int v104 = v29;
        __int16 v105 = 2050;
        *(void *)v106 = v31;
        *(_WORD *)&v106[8] = 1026;
        *(_DWORD *)&v106[10] = v30;
        __int16 v107 = 2050;
        *(void *)v108 = v32;
        *(_WORD *)&v108[8] = 1026;
        *(_DWORD *)&v108[10] = v33;
        __int16 v109 = 1026;
        int v110 = v34;
        __int16 v111 = 2050;
        *(void *)v112 = v35;
        *(_WORD *)&v112[8] = 2050;
        *(void *)&v112[10] = v36;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLRGCM,removeClientConfigurationList,config,fRhythmicGnssActiveConfiguration,hAccuracy_m,%{public}.3lff,gpsActiveTimeout_s,%{public}.3lf,powerMode,%{public}d,rhythmicGnssInterSessionInterval_s,%{public}.3lf,wakeAPUp,%{public}d,takePowerAssertion,%{public}d,apWakeBackStopTimeForNextSession_s,%{public}.3lf,isPowerBudgetApplicable,%{public}d,totalPowerBudgetPerDay_s,%{public}.3lf,skipDebounce,%{public}d,useLeechGPSFixesToOffsetRhythmicGnssDutyCycle,%{public}d,wifiCellInterSessionInterval_s,%{public}.3lf,additionalPowerAssertionTime_s,%{public}.3lf", buf, 0x6Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346C88);
        }
        uint64_t v52 = *a2;
        uint64_t v53 = a2[1];
        int v54 = *((_DWORD *)a2 + 4);
        uint64_t v55 = a2[3];
        int v56 = *((unsigned __int8 *)a2 + 32);
        int v57 = *((unsigned __int8 *)a2 + 33);
        int v58 = *((unsigned __int8 *)a2 + 34);
        uint64_t v60 = a2[5];
        uint64_t v59 = a2[6];
        int v61 = *((unsigned __int8 *)a2 + 56);
        int v62 = *((unsigned __int8 *)a2 + 57);
        uint64_t v63 = a2[8];
        uint64_t v64 = a2[9];
        int v85 = 134352128;
        *(void *)v86 = v52;
        *(_WORD *)&v86[8] = 2050;
        *(void *)&v86[10] = v53;
        *(_WORD *)&v86[18] = 1026;
        *(_DWORD *)&v86[20] = v54;
        __int16 v87 = 2050;
        *(void *)v88 = v55;
        *(_WORD *)&v88[8] = 1026;
        *(_DWORD *)&v88[10] = v56;
        __int16 v89 = 1026;
        int v90 = v57;
        __int16 v91 = 2050;
        *(void *)__int16 v92 = v59;
        *(_WORD *)&v92[8] = 1026;
        *(_DWORD *)&v92[10] = v58;
        __int16 v93 = 2050;
        *(void *)__int16 v94 = v60;
        *(_WORD *)&v94[8] = 1026;
        *(_DWORD *)&v94[10] = v61;
        __int16 v95 = 1026;
        int v96 = v62;
        __int16 v97 = 2050;
        *(void *)v98 = v63;
        *(_WORD *)&v98[8] = 2050;
        *(void *)&v98[10] = v64;
        __int16 v65 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::removeClientConfigurationList(const struct CLRhythmicGnssConfiguration::RhythmicGnssConfiguration)", "%s\n", v65);
        if (v65 != (char *)buf) {
          free(v65);
        }
      }
      if (*((_DWORD *)a2 + 4) == *(_DWORD *)(v6 + 24)) {
        break;
      }
      v6 += 96;
      v7 -= 96;
      if (v6 == *(void *)(a1 + 160)) {
        goto LABEL_40;
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    __int16 v66 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "CLRGCM,removeClientConfigurationList,item found", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346C88);
      }
      LOWORD(v85) = 0;
      __int16 v80 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::removeClientConfigurationList(const struct CLRhythmicGnssConfiguration::RhythmicGnssConfiguration)", "%s\n", v80);
      if (v80 != (char *)buf) {
        free(v80);
      }
    }
    --*(_DWORD *)v6;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    __int16 v67 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v68 = *(_DWORD *)v6;
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)v100 = v68;
      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "CLRGCM,removeClientConfigurationList,clientIter->refCount,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346C88);
      }
      int v81 = *(_DWORD *)v6;
      int v85 = 67240192;
      *(_DWORD *)v86 = v81;
      int v82 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::removeClientConfigurationList(const struct CLRhythmicGnssConfiguration::RhythmicGnssConfiguration)", "%s\n", v82);
      if (v82 != (char *)buf) {
        free(v82);
      }
    }
    if (!*(_DWORD *)v6)
    {
      uint64_t v71 = *(void *)(a1 + 160);
      uint64_t v72 = v71 - (96 - v7);
      if (v71 != 96 - v7) {
        memmove((void *)-v7, (const void *)(96 - v7), v71 - (96 - v7));
      }
      *(void *)(a1 + 160) = v72 - v7;
      sub_10196F444(a1);
      uint64_t v73 = *(void *)(a1 + 144);
      if (v73 && *(void *)(a1 + 160) != *(void *)(a1 + 152))
      {
        long long v74 = *(_OWORD *)(a1 + 224);
        v83[2] = *(_OWORD *)(a1 + 208);
        v83[3] = v74;
        v83[4] = *(_OWORD *)(a1 + 240);
        uint64_t v84 = *(void *)(a1 + 256);
        long long v75 = *(_OWORD *)(a1 + 192);
        v83[0] = *(_OWORD *)(a1 + 176);
        v83[1] = v75;
        sub_1018E16D8(v73, (uint64_t *)v83);
      }
    }
  }
LABEL_40:
  sub_1019708F4(a1, (int *)a2 + 4);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346C88);
  }
  __int16 v69 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 5);
    *(_DWORD *)uint64_t buf = 134349056;
    *(void *)v100 = v70;
    _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "CLRGCM,removeClientConfigurationList,size,%{public}zu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 5);
    int v85 = 134349056;
    *(void *)v86 = v78;
    int v79 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::removeClientConfigurationList(const struct CLRhythmicGnssConfiguration::RhythmicGnssConfiguration)", "%s\n", v79);
    if (v79 != (char *)buf) {
      free(v79);
    }
  }
}

uint64_t sub_10196E080(uint64_t a1, char a2, int a3, int a4)
{
  char v8 = a2;
  int v6 = a4;
  int v7 = a3;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, char *, int *, int *))(*(void *)v4 + 48))(v4, &v8, &v7, &v6);
}

uint64_t sub_10196E0E0(uint64_t a1, int *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346C88);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *a2;
    *(_DWORD *)uint64_t buf = 67174657;
    LODWORD(v63) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLRGCM,addRhythmicGnssClient,%{private}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    int v16 = *a2;
    int v34 = 67174657;
    LODWORD(v35) = v16;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::addRhythmicGnssClient(const CLRhythmicGnssRegistrationOptions &)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  int v6 = *a2;
  if (*a2 == 2)
  {
    if (sub_100743ED4()) {
      goto LABEL_15;
    }
  }
  else
  {
    if (v6 == 1)
    {
      if (sub_100743D88()) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v6) {
        goto LABEL_30;
      }
      if (sub_10010145C())
      {
LABEL_15:
        int v24 = 0;
        long long v25 = xmmword_101D2A430;
        int v26 = -1;
        uint64_t v27 = 0x7FEFFFFFFFFFFFFFLL;
        __int16 v28 = 0;
        unsigned __int8 v29 = 0;
        long long v30 = xmmword_101D2A460;
        __int16 v31 = 1;
        long long v32 = xmmword_101E49A00;
        unsigned __int8 v33 = 0;
        uint64_t v7 = sub_10196CD0C(a1, a2, (uint64_t)&v25);
        if (v7)
        {
          sub_10196E9E8(a1, (uint64_t)&v25);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102346C88);
          }
          char v8 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLRGCM,addRhythmicGnssClient starting Gps", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102346C88);
            }
            LOWORD(v34) = 0;
            int v19 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::addRhythmicGnssClient(const CLRhythmicGnssRegistrationOptions &)", "%s\n", v19);
            if (v19 != (char *)buf) {
              free(v19);
            }
          }
          sub_10196EA5C((void *)a1, (uint64_t *)&v25);
          sub_10196F444(a1);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102346C88);
          }
          int v9 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t buf = 134352384;
            uint64_t v63 = v25;
            __int16 v64 = 2050;
            uint64_t v65 = *((void *)&v25 + 1);
            __int16 v66 = 1026;
            int v67 = v26;
            __int16 v68 = 2050;
            uint64_t v69 = v27;
            __int16 v70 = 1026;
            int v71 = v28;
            __int16 v72 = 1026;
            int v73 = HIBYTE(v28);
            __int16 v74 = 2050;
            uint64_t v75 = *((void *)&v30 + 1);
            __int16 v76 = 1026;
            int v77 = v29;
            __int16 v78 = 2050;
            uint64_t v79 = v30;
            __int16 v80 = 1026;
            int v81 = v31;
            __int16 v82 = 1026;
            int v83 = HIBYTE(v31);
            __int16 v84 = 2050;
            uint64_t v85 = v32;
            __int16 v86 = 2050;
            uint64_t v87 = *((void *)&v32 + 1);
            __int16 v88 = 1026;
            int v89 = v33;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLRGCM,addRhythmicGnssClient,config,fRhythmicGnssActiveConfiguration,hAccuracy_m,%{public}.3lf,gpsActiveTimeout_s,%{public}.3lf,powerMode,%{public}d,rhythmicGnssInterSessionInterval_s,%{public}.3lf,wakeAPUp,%{public}d,takePowerAssertion,%{public}d,apWakeBackStopTimeForNextSession_s,%{public}.3lf,isPowerBudgetApplicable,%{public}d,totalPowerBudgetPerDay_s,%{public}.3lf,skipDebounce,%{public}d,useLeechGPSFixesToOffsetRhythmicGnssDutyCycle,%{public}d,wifiCellInterSessionInterval_s,%{public}.3lf,additionalPowerAssertionTime_s,%{public}.3lf,isStaticDeviceOptimizationEnabled,%{public}d", buf, 0x72u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102346C88);
            }
            int v34 = 134352384;
            uint64_t v35 = v25;
            __int16 v36 = 2050;
            uint64_t v37 = *((void *)&v25 + 1);
            __int16 v38 = 1026;
            int v39 = v26;
            __int16 v40 = 2050;
            uint64_t v41 = v27;
            __int16 v42 = 1026;
            int v43 = v28;
            __int16 v44 = 1026;
            int v45 = HIBYTE(v28);
            __int16 v46 = 2050;
            uint64_t v47 = *((void *)&v30 + 1);
            __int16 v48 = 1026;
            int v49 = v29;
            __int16 v50 = 2050;
            uint64_t v51 = v30;
            __int16 v52 = 1026;
            int v53 = v31;
            __int16 v54 = 1026;
            int v55 = HIBYTE(v31);
            __int16 v56 = 2050;
            uint64_t v57 = v32;
            __int16 v58 = 2050;
            uint64_t v59 = *((void *)&v32 + 1);
            __int16 v60 = 1026;
            int v61 = v33;
            int v20 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::addRhythmicGnssClient(const CLRhythmicGnssRegistrationOptions &)", "%s\n", v20);
            if (v20 != (char *)buf) {
              free(v20);
            }
          }
          sub_101970050((void *)a1, (uint64_t)&v25);
          uint64_t v10 = *(void *)(a1 + 144);
          if (v10)
          {
            long long v11 = *(_OWORD *)(a1 + 224);
            v22[2] = *(_OWORD *)(a1 + 208);
            v22[3] = v11;
            v22[4] = *(_OWORD *)(a1 + 240);
            uint64_t v23 = *(void *)(a1 + 256);
            long long v12 = *(_OWORD *)(a1 + 192);
            v22[0] = *(_OWORD *)(a1 + 176);
            v22[1] = v12;
            sub_1018E16D8(v10, (uint64_t *)v22);
          }
          if (*(void *)(a1 + 136)) {
            sub_10196E080(a1 + 112, 1, *(_DWORD *)(a1 + 192), -1431655765 * ((*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 5));
          }
        }
        else
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102346C88);
          }
          int v14 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "CLRGCM,addRhythmicGnssClient,invalid mode", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102346C88);
            }
            LOWORD(v34) = 0;
            uint64_t v21 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::addRhythmicGnssClient(const CLRhythmicGnssRegistrationOptions &)", "%s\n", v21);
            if (v21 != (char *)buf) {
              free(v21);
            }
          }
        }
        return v7;
      }
    }
    if (sub_10016CCBC()) {
      goto LABEL_15;
    }
  }
LABEL_30:
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346C88);
  }
  uint64_t v13 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "CLRGCM,addRhythmicGnssClient,not supported", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    LOWORD(v34) = 0;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::addRhythmicGnssClient(const CLRhythmicGnssRegistrationOptions &)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  return 0;
}

void sub_10196E9E8(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 16);
  if (v3) {
    BOOL v4 = v3 == 2;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    sub_10196CE94();
    *(void *)(a2 + 24) = v5;
    uint64_t v6 = 0x408C200000000000;
  }
  else
  {
    if (v3 != 1) {
      return;
    }
    if (*(unsigned char *)(a1 + 288))
    {
      *(void *)(a2 + 24) = 0x404E000000000000;
      uint64_t v6 = 0x404E000000000000;
    }
    else
    {
      sub_10196CE94();
      *(void *)(a2 + 24) = v7;
      sub_10196CE94();
    }
  }
  *(void *)(a2 + 48) = v6;
}

void sub_10196EA5C(void *a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346C88);
  }
  BOOL v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[20] - a1[19]) >> 5);
    *(_DWORD *)uint64_t buf = 134349056;
    v57[0] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLRGCM,addClientToClientManagerInfo,size,%{public}zu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    __int16 v48 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::addClientToClientManagerInfo(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v48);
    if (v48 != (char *)buf) {
      free(v48);
    }
  }
  uint64_t v6 = (int *)a1[19];
  uint64_t v51 = (char **)(a1 + 19);
  if (v6 == (int *)a1[20])
  {
LABEL_19:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    long long v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CLRGCM,addClientToClientManagerInfo,adding new client type", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346C88);
      }
      int v49 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::addClientToClientManagerInfo(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v49);
      if (v49 != (char *)buf) {
        free(v49);
      }
    }
    uint64_t v13 = *a2;
    uint64_t v12 = a2[1];
    int v15 = *((_DWORD *)a2 + 4);
    int v14 = *((_DWORD *)a2 + 5);
    uint64_t v16 = a2[3];
    char v17 = *((unsigned char *)a2 + 32);
    char v18 = *((unsigned char *)a2 + 33);
    char v19 = *((unsigned char *)a2 + 34);
    int v54 = *(_DWORD *)((char *)a2 + 35);
    char v55 = *((unsigned char *)a2 + 39);
    uint64_t v21 = a2[5];
    uint64_t v20 = a2[6];
    char v22 = *((unsigned char *)a2 + 56);
    char v23 = *((unsigned char *)a2 + 57);
    __int16 v53 = *((_WORD *)a2 + 31);
    int v52 = *(_DWORD *)((char *)a2 + 58);
    uint64_t v25 = a2[8];
    uint64_t v24 = a2[9];
    char v26 = *((unsigned char *)a2 + 80);
    unint64_t v27 = a1[21];
    unint64_t v28 = a1[20];
    if (v28 >= v27)
    {
      unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (void)*v51) >> 5);
      unint64_t v31 = v30 + 1;
      if (v30 + 1 > 0x2AAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - (void)*v51) >> 5);
      if (2 * v32 > v31) {
        unint64_t v31 = 2 * v32;
      }
      if (v32 >= 0x155555555555555) {
        unint64_t v33 = 0x2AAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v33 = v31;
      }
      if (v33) {
        int v34 = (char *)sub_100642EA8((uint64_t)(a1 + 21), v33);
      }
      else {
        int v34 = 0;
      }
      __int16 v38 = &v34[96 * v30];
      *(_DWORD *)__int16 v38 = 1;
      *((void *)v38 + 1) = v13;
      *((void *)v38 + 2) = v12;
      int v39 = &v34[96 * v33];
      *((_DWORD *)v38 + 6) = v15;
      *((_DWORD *)v38 + 7) = v14;
      *((void *)v38 + 4) = v16;
      v38[40] = v17;
      v38[41] = v18;
      v38[42] = v19;
      *(_DWORD *)(v38 + 43) = v54;
      v38[47] = v55;
      *((void *)v38 + 6) = v21;
      *((void *)v38 + 7) = v20;
      v38[64] = v22;
      v38[65] = v23;
      *((_WORD *)v38 + 35) = v53;
      *(_DWORD *)(v38 + 66) = v52;
      *((void *)v38 + 9) = v25;
      *((void *)v38 + 10) = v24;
      v38[88] = v26;
      unsigned __int8 v29 = v38 + 96;
      uint64_t v41 = (char *)a1[19];
      __int16 v40 = (char *)a1[20];
      if (v40 != v41)
      {
        do
        {
          long long v42 = *((_OWORD *)v40 - 5);
          *((_OWORD *)v38 - 6) = *((_OWORD *)v40 - 6);
          *((_OWORD *)v38 - 5) = v42;
          long long v43 = *((_OWORD *)v40 - 4);
          long long v44 = *((_OWORD *)v40 - 3);
          long long v45 = *((_OWORD *)v40 - 1);
          *((_OWORD *)v38 - 2) = *((_OWORD *)v40 - 2);
          *((_OWORD *)v38 - 1) = v45;
          *((_OWORD *)v38 - 4) = v43;
          *((_OWORD *)v38 - 3) = v44;
          v38 -= 96;
          v40 -= 96;
        }
        while (v40 != v41);
        __int16 v40 = *v51;
      }
      a1[19] = v38;
      a1[20] = v29;
      a1[21] = v39;
      if (v40) {
        operator delete(v40);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v28 = 1;
      *(void *)(v28 + 8) = v13;
      *(void *)(v28 + 16) = v12;
      *(_DWORD *)(v28 + 24) = v15;
      *(_DWORD *)(v28 + 28) = v14;
      *(void *)(v28 + 32) = v16;
      *(unsigned char *)(v28 + 40) = v17;
      *(unsigned char *)(v28 + 41) = v18;
      *(unsigned char *)(v28 + 42) = v19;
      *(_DWORD *)(v28 + 43) = v54;
      *(unsigned char *)(v28 + 47) = v55;
      *(void *)(v28 + 48) = v21;
      *(void *)(v28 + 56) = v20;
      *(unsigned char *)(v28 + 64) = v22;
      *(unsigned char *)(v28 + 65) = v23;
      *(_WORD *)(v28 + 70) = v53;
      *(_DWORD *)(v28 + 66) = v52;
      *(void *)(v28 + 72) = v25;
      *(void *)(v28 + 80) = v24;
      unsigned __int8 v29 = (char *)(v28 + 96);
      *(unsigned char *)(v28 + 88) = v26;
    }
    a1[20] = v29;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    __int16 v46 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[20] - a1[19]) >> 5);
      *(_DWORD *)uint64_t buf = 134349056;
      v57[0] = v47;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "CLRGCM,addClientToClientManagerInfo,size,%{public}zu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_62;
      }
      goto LABEL_65;
    }
  }
  else
  {
    while (1)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346C88);
      }
      uint64_t v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = v6[6];
        int v9 = *((_DWORD *)a2 + 4);
        *(_DWORD *)uint64_t buf = 67109376;
        LODWORD(v57[0]) = v8;
        WORD2(v57[0]) = 1024;
        *(_DWORD *)((char *)v57 + 6) = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLRGCM,addClientToClientManagerInfo,clientInfo.powerMode,%d,requestPowerMode,%d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346C88);
        }
        uint64_t v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::addClientToClientManagerInfo(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
      if (*((_DWORD *)a2 + 4) == v6[6]) {
        break;
      }
      v6 += 24;
      if (v6 == (int *)a1[20]) {
        goto LABEL_19;
      }
    }
    ++*v6;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    uint64_t v35 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v36 = v6[6];
      int v37 = *v6;
      *(_DWORD *)uint64_t buf = 67240448;
      LODWORD(v57[0]) = v36;
      WORD2(v57[0]) = 1026;
      *(_DWORD *)((char *)v57 + 6) = v37;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "CLRGCM,addClientToClientManagerInfo,clientInfo.powerMode,%{public}d,refCount,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_62:
        __int16 v50 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::addClientToClientManagerInfo(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v50);
        if (v50 != (char *)buf) {
          free(v50);
        }
        return;
      }
LABEL_65:
      dispatch_once(&qword_1024193D0, &stru_102346C88);
      goto LABEL_62;
    }
  }
}

void sub_10196F444(uint64_t a1)
{
  *(_OWORD *)(a1 + 176) = xmmword_101D2A430;
  *(_DWORD *)(a1 + 192) = -1;
  *(void *)(a1 + 200) = 0x7FEFFFFFFFFFFFFFLL;
  *(_WORD *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 210) = 0;
  *(_OWORD *)(a1 + 216) = xmmword_101D2A460;
  *(_WORD *)(a1 + 232) = 1;
  *(_OWORD *)(a1 + 240) = xmmword_101E49A00;
  *(unsigned char *)(a1 + 256) = 0;
  uint64_t v1 = *(void *)(a1 + 152);
  uint64_t v2 = *(void *)(a1 + 160);
  if (v1 == v2) {
    return;
  }
  uint64_t v4 = v1 + 96;
  if (v1 + 96 == v2)
  {
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(v1 + 8);
    *(void *)(a1 + 200) = *(void *)(v1 + 32);
    *(_WORD *)(a1 + 208) = *(_WORD *)(v1 + 40);
    *(unsigned char *)(a1 + 256) = *(unsigned char *)(v1 + 88);
    *(void *)(a1 + 224) = *(void *)(v1 + 56);
    uint64_t v20 = v1;
  }
  else
  {
    double v5 = *(double *)(v1 + 104);
    double v6 = *(double *)(v1 + 8);
    if (v5 >= v6) {
      uint64_t v7 = *(void *)(a1 + 152);
    }
    else {
      uint64_t v7 = v1 + 96;
    }
    uint64_t v8 = v1 + 192;
    if (v1 + 192 != v2)
    {
      if (v5 >= v6) {
        uint64_t v9 = v1 + 96;
      }
      else {
        uint64_t v9 = *(void *)(a1 + 152);
      }
      uint64_t v10 = v1 + 192;
      uint64_t v11 = *(void *)(a1 + 152);
      while (1)
      {
        uint64_t v12 = v10;
        uint64_t v13 = v10 + 96;
        if (v13 == v2) {
          break;
        }
        uint64_t v14 = v11 + 288;
        double v15 = *(double *)(v12 + 104);
        double v16 = *(double *)(v12 + 8);
        double v17 = *(double *)(v7 + 8);
        double v18 = *(double *)(v9 + 8);
        if (v16 >= v17) {
          uint64_t v19 = v7;
        }
        else {
          uint64_t v19 = v12;
        }
        if (v15 < v18) {
          uint64_t v14 = v9;
        }
        if (v15 < v17) {
          uint64_t v7 = v13;
        }
        if (v16 >= v18) {
          uint64_t v9 = v12;
        }
        if (v15 >= v16)
        {
          uint64_t v7 = v19;
          uint64_t v9 = v14;
        }
        uint64_t v10 = v12 + 192;
        uint64_t v11 = v12;
        if (v12 + 192 == v2) {
          goto LABEL_28;
        }
      }
      if (*(double *)(v12 + 8) < *(double *)(v7 + 8)) {
        uint64_t v7 = v12;
      }
    }
LABEL_28:
    *(void *)(a1 + 176) = *(void *)(v7 + 8);
    double v21 = *(double *)(v1 + 112);
    double v22 = *(double *)(v1 + 16);
    if (v21 >= v22) {
      uint64_t v23 = v1 + 96;
    }
    else {
      uint64_t v23 = v1;
    }
    if (v8 != v2)
    {
      if (v21 >= v22) {
        uint64_t v24 = v1;
      }
      else {
        uint64_t v24 = v1 + 96;
      }
      uint64_t v25 = v1 + 192;
      uint64_t v26 = v1;
      while (1)
      {
        uint64_t v27 = v25;
        uint64_t v28 = v25 + 96;
        if (v28 == v2) {
          break;
        }
        uint64_t v29 = v26 + 288;
        double v30 = *(double *)(v27 + 112);
        double v31 = *(double *)(v27 + 16);
        double v32 = *(double *)(v24 + 16);
        double v33 = *(double *)(v23 + 16);
        if (v31 >= v32) {
          uint64_t v34 = v24;
        }
        else {
          uint64_t v34 = v27;
        }
        if (v30 < v33) {
          uint64_t v29 = v23;
        }
        if (v30 < v32) {
          uint64_t v24 = v28;
        }
        if (v31 >= v33) {
          uint64_t v23 = v27;
        }
        if (v30 >= v31)
        {
          uint64_t v24 = v34;
          uint64_t v23 = v29;
        }
        uint64_t v25 = v27 + 192;
        uint64_t v26 = v27;
        if (v27 + 192 == v2) {
          goto LABEL_53;
        }
      }
      double v35 = *(double *)(v27 + 16);
      if (v35 >= *(double *)(v24 + 16) && v35 >= *(double *)(v23 + 16)) {
        uint64_t v23 = v27;
      }
    }
LABEL_53:
    *(void *)(a1 + 184) = *(void *)(v23 + 16);
    double v36 = *(double *)(v1 + 128);
    double v37 = *(double *)(v1 + 32);
    if (v36 >= v37) {
      uint64_t v38 = v1;
    }
    else {
      uint64_t v38 = v1 + 96;
    }
    if (v8 != v2)
    {
      if (v36 >= v37) {
        uint64_t v39 = v1 + 96;
      }
      else {
        uint64_t v39 = v1;
      }
      uint64_t v40 = v1 + 192;
      uint64_t v41 = v1;
      while (1)
      {
        uint64_t v42 = v40;
        uint64_t v43 = v40 + 96;
        if (v43 == v2) {
          break;
        }
        uint64_t v44 = v41 + 288;
        double v45 = *(double *)(v42 + 128);
        double v46 = *(double *)(v42 + 32);
        double v47 = *(double *)(v38 + 32);
        double v48 = *(double *)(v39 + 32);
        if (v46 >= v47) {
          uint64_t v49 = v38;
        }
        else {
          uint64_t v49 = v42;
        }
        if (v45 < v48) {
          uint64_t v44 = v39;
        }
        if (v45 < v47) {
          uint64_t v38 = v43;
        }
        if (v46 >= v48) {
          uint64_t v39 = v42;
        }
        if (v45 >= v46)
        {
          uint64_t v38 = v49;
          uint64_t v39 = v44;
        }
        uint64_t v40 = v42 + 192;
        uint64_t v41 = v42;
        if (v42 + 192 == v2) {
          goto LABEL_77;
        }
      }
      if (*(double *)(v42 + 32) < *(double *)(v38 + 32)) {
        uint64_t v38 = v42;
      }
    }
LABEL_77:
    *(void *)(a1 + 200) = *(void *)(v38 + 32);
    unsigned int v50 = *(unsigned __int8 *)(v1 + 136);
    unsigned int v51 = *(unsigned __int8 *)(v1 + 40);
    if (v50 >= v51) {
      uint64_t v52 = v1 + 96;
    }
    else {
      uint64_t v52 = v1;
    }
    if (v8 != v2)
    {
      if (v50 >= v51) {
        uint64_t v53 = v1;
      }
      else {
        uint64_t v53 = v1 + 96;
      }
      uint64_t v54 = v1 + 192;
      while (v54 + 96 != v2)
      {
        unsigned int v55 = *(unsigned __int8 *)(v54 + 136);
        unsigned int v56 = *(unsigned __int8 *)(v54 + 40);
        unsigned int v57 = *(unsigned __int8 *)(v53 + 40);
        if (v55 >= v56)
        {
          if (v56 < v57) {
            uint64_t v53 = v54;
          }
          if (v55 >= *(unsigned __int8 *)(v52 + 40)) {
            uint64_t v52 = v54 + 96;
          }
        }
        else
        {
          if (v55 < v57) {
            uint64_t v53 = v54 + 96;
          }
          uint64_t v52 = v54;
        }
        v54 += 192;
        if (v54 == v2) {
          goto LABEL_99;
        }
      }
      unsigned int v58 = *(unsigned __int8 *)(v54 + 40);
      if (v58 >= *(unsigned __int8 *)(v53 + 40) && v58 >= *(unsigned __int8 *)(v52 + 40)) {
        uint64_t v52 = v54;
      }
    }
LABEL_99:
    *(unsigned char *)(a1 + 208) = *(unsigned char *)(v52 + 40);
    unsigned int v59 = *(unsigned __int8 *)(v1 + 137);
    unsigned int v60 = *(unsigned __int8 *)(v1 + 41);
    if (v59 >= v60) {
      uint64_t v61 = v1 + 96;
    }
    else {
      uint64_t v61 = v1;
    }
    if (v8 != v2)
    {
      if (v59 >= v60) {
        uint64_t v62 = v1;
      }
      else {
        uint64_t v62 = v1 + 96;
      }
      uint64_t v63 = v1 + 192;
      while (v63 + 96 != v2)
      {
        unsigned int v64 = *(unsigned __int8 *)(v63 + 137);
        unsigned int v65 = *(unsigned __int8 *)(v63 + 41);
        unsigned int v66 = *(unsigned __int8 *)(v62 + 41);
        if (v64 >= v65)
        {
          if (v65 < v66) {
            uint64_t v62 = v63;
          }
          if (v64 >= *(unsigned __int8 *)(v61 + 41)) {
            uint64_t v61 = v63 + 96;
          }
        }
        else
        {
          if (v64 < v66) {
            uint64_t v62 = v63 + 96;
          }
          uint64_t v61 = v63;
        }
        v63 += 192;
        if (v63 == v2) {
          goto LABEL_121;
        }
      }
      unsigned int v67 = *(unsigned __int8 *)(v63 + 41);
      if (v67 >= *(unsigned __int8 *)(v62 + 41) && v67 >= *(unsigned __int8 *)(v61 + 41)) {
        uint64_t v61 = v63;
      }
    }
LABEL_121:
    *(unsigned char *)(a1 + 209) = *(unsigned char *)(v61 + 41);
    if (*(unsigned __int8 *)(v1 + 184) >= *(unsigned __int8 *)(v1 + 88)) {
      uint64_t v68 = v1;
    }
    else {
      uint64_t v68 = v1 + 96;
    }
    if (v8 != v2)
    {
      uint64_t v69 = v1 + 192;
      while (1)
      {
        uint64_t v70 = v69 + 96;
        if (v69 + 96 == v2) {
          break;
        }
        unsigned int v71 = *(unsigned __int8 *)(v69 + 184);
        if (v71 >= *(unsigned __int8 *)(v69 + 88))
        {
          unsigned int v71 = *(unsigned __int8 *)(v69 + 88);
          uint64_t v70 = v69;
        }
        if (v71 < *(unsigned __int8 *)(v68 + 88)) {
          uint64_t v68 = v70;
        }
        v69 += 192;
        if (v69 == v2) {
          goto LABEL_135;
        }
      }
      if (*(unsigned __int8 *)(v69 + 88) < *(unsigned __int8 *)(v68 + 88)) {
        uint64_t v68 = v69;
      }
    }
LABEL_135:
    *(unsigned char *)(a1 + 256) = *(unsigned char *)(v68 + 88);
    double v72 = *(double *)(v1 + 152);
    double v73 = *(double *)(v1 + 56);
    if (v72 >= v73) {
      uint64_t v74 = v1;
    }
    else {
      uint64_t v74 = v1 + 96;
    }
    if (v8 != v2)
    {
      if (v72 >= v73) {
        uint64_t v75 = v1 + 96;
      }
      else {
        uint64_t v75 = v1;
      }
      uint64_t v76 = v1 + 192;
      uint64_t v77 = v1;
      while (1)
      {
        uint64_t v78 = v76;
        uint64_t v79 = v76 + 96;
        if (v79 == v2) {
          break;
        }
        uint64_t v80 = v77 + 288;
        double v81 = *(double *)(v78 + 152);
        double v82 = *(double *)(v78 + 56);
        double v83 = *(double *)(v74 + 56);
        double v84 = *(double *)(v75 + 56);
        if (v82 >= v83) {
          uint64_t v85 = v74;
        }
        else {
          uint64_t v85 = v78;
        }
        if (v81 < v84) {
          uint64_t v80 = v75;
        }
        if (v81 < v83) {
          uint64_t v74 = v79;
        }
        if (v82 >= v84) {
          uint64_t v75 = v78;
        }
        if (v81 >= v82)
        {
          uint64_t v74 = v85;
          uint64_t v75 = v80;
        }
        uint64_t v76 = v78 + 192;
        uint64_t v77 = v78;
        if (v78 + 192 == v2) {
          goto LABEL_159;
        }
      }
      if (*(double *)(v78 + 56) < *(double *)(v74 + 56)) {
        uint64_t v74 = v78;
      }
    }
LABEL_159:
    *(void *)(a1 + 224) = *(void *)(v74 + 56);
    if (*(unsigned __int8 *)(v1 + 138) >= *(unsigned __int8 *)(v1 + 42)) {
      uint64_t v20 = v1;
    }
    else {
      uint64_t v20 = v1 + 96;
    }
    if (v8 == v2)
    {
      int v88 = *(unsigned __int8 *)(v20 + 42);
      *(unsigned char *)(a1 + 210) = v88;
      if (!v88) {
        goto LABEL_203;
      }
LABEL_176:
      double v91 = *(double *)(v1 + 144);
      double v92 = *(double *)(v1 + 48);
      if (v91 >= v92) {
        uint64_t v90 = v1 + 96;
      }
      else {
        uint64_t v90 = v1;
      }
      uint64_t v93 = v1 + 192;
      if (v1 + 192 != v2)
      {
        if (v91 >= v92) {
          uint64_t v94 = v1;
        }
        else {
          uint64_t v94 = v1 + 96;
        }
        uint64_t v95 = v1;
        while (1)
        {
          uint64_t v96 = v93;
          uint64_t v97 = v93 + 96;
          if (v97 == v2) {
            break;
          }
          uint64_t v98 = v95 + 288;
          double v99 = *(double *)(v96 + 144);
          double v100 = *(double *)(v96 + 48);
          double v101 = *(double *)(v94 + 48);
          double v102 = *(double *)(v90 + 48);
          if (v100 >= v101) {
            uint64_t v103 = v94;
          }
          else {
            uint64_t v103 = v96;
          }
          if (v99 < v102) {
            uint64_t v98 = v90;
          }
          if (v99 < v101) {
            uint64_t v94 = v97;
          }
          if (v100 >= v102) {
            uint64_t v90 = v96;
          }
          if (v99 >= v100)
          {
            uint64_t v94 = v103;
            uint64_t v90 = v98;
          }
          uint64_t v93 = v96 + 192;
          uint64_t v95 = v96;
          if (v96 + 192 == v2) {
            goto LABEL_201;
          }
        }
        double v104 = *(double *)(v96 + 48);
        if (v104 >= *(double *)(v94 + 48) && v104 >= *(double *)(v90 + 48)) {
          uint64_t v90 = v96;
        }
      }
      goto LABEL_201;
    }
    while (1)
    {
      uint64_t v86 = v8 + 96;
      if (v8 + 96 == v2) {
        break;
      }
      unsigned int v87 = *(unsigned __int8 *)(v8 + 138);
      if (v87 >= *(unsigned __int8 *)(v8 + 42))
      {
        unsigned int v87 = *(unsigned __int8 *)(v8 + 42);
        uint64_t v86 = v8;
      }
      if (v87 < *(unsigned __int8 *)(v20 + 42)) {
        uint64_t v20 = v86;
      }
      v8 += 192;
      if (v8 == v2) {
        goto LABEL_174;
      }
    }
    if (*(unsigned __int8 *)(v8 + 42) < *(unsigned __int8 *)(v20 + 42)) {
      uint64_t v20 = v8;
    }
  }
LABEL_174:
  int v89 = *(unsigned __int8 *)(v20 + 42);
  *(unsigned char *)(a1 + 210) = v89;
  if (!v89) {
    goto LABEL_202;
  }
  uint64_t v90 = v1;
  if (v4 != v2) {
    goto LABEL_176;
  }
LABEL_201:
  *(void *)(a1 + 216) = *(void *)(v90 + 48);
LABEL_202:
  if (v4 == v2)
  {
    *(unsigned char *)(a1 + 232) = *(unsigned char *)(v1 + 64);
    goto LABEL_242;
  }
LABEL_203:
  if (*(unsigned __int8 *)(v1 + 160) >= *(unsigned __int8 *)(v1 + 64)) {
    uint64_t v105 = v1;
  }
  else {
    uint64_t v105 = v1 + 96;
  }
  uint64_t v106 = v1 + 192;
  if (v1 + 192 != v2)
  {
    uint64_t v107 = v1 + 192;
    while (1)
    {
      uint64_t v108 = v107 + 96;
      if (v107 + 96 == v2) {
        break;
      }
      unsigned int v109 = *(unsigned __int8 *)(v107 + 160);
      if (v109 >= *(unsigned __int8 *)(v107 + 64))
      {
        unsigned int v109 = *(unsigned __int8 *)(v107 + 64);
        uint64_t v108 = v107;
      }
      if (v109 < *(unsigned __int8 *)(v105 + 64)) {
        uint64_t v105 = v108;
      }
      v107 += 192;
      if (v107 == v2) {
        goto LABEL_219;
      }
    }
    if (*(unsigned __int8 *)(v107 + 64) < *(unsigned __int8 *)(v105 + 64)) {
      uint64_t v105 = v107;
    }
LABEL_219:
    *(unsigned char *)(a1 + 232) = *(unsigned char *)(v105 + 64);
    if (v4 != v2) {
      goto LABEL_220;
    }
LABEL_242:
    *(void *)(a1 + 248) = *(void *)(v1 + 80);
    goto LABEL_243;
  }
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(v105 + 64);
LABEL_220:
  double v110 = *(double *)(v1 + 176);
  double v111 = *(double *)(v1 + 80);
  if (v110 >= v111) {
    uint64_t v112 = v1 + 96;
  }
  else {
    uint64_t v112 = v1;
  }
  if (v106 == v2)
  {
    *(void *)(a1 + 248) = *(void *)(v112 + 80);
LABEL_280:
    double v151 = *(double *)(v1 + 168);
    double v152 = *(double *)(v1 + 72);
    if (v151 >= v152) {
      uint64_t v124 = v1 + 96;
    }
    else {
      uint64_t v124 = v1;
    }
    if (v106 != v2)
    {
      if (v151 >= v152) {
        uint64_t v4 = v1;
      }
      uint64_t v153 = v1;
      while (1)
      {
        uint64_t v154 = v106;
        uint64_t v155 = v106 + 96;
        if (v155 == v2) {
          break;
        }
        uint64_t v156 = v153 + 288;
        double v157 = *(double *)(v154 + 168);
        double v158 = *(double *)(v154 + 72);
        double v159 = *(double *)(v4 + 72);
        double v160 = *(double *)(v124 + 72);
        if (v158 >= v159) {
          uint64_t v161 = v4;
        }
        else {
          uint64_t v161 = v154;
        }
        if (v157 < v160) {
          uint64_t v156 = v124;
        }
        if (v157 < v159) {
          uint64_t v4 = v155;
        }
        if (v158 >= v160) {
          uint64_t v162 = v154;
        }
        else {
          uint64_t v162 = v124;
        }
        if (v157 < v158)
        {
          uint64_t v124 = v162;
        }
        else
        {
          uint64_t v4 = v161;
          uint64_t v124 = v156;
        }
        uint64_t v106 = v154 + 192;
        uint64_t v153 = v154;
        if (v154 + 192 == v2) {
          goto LABEL_244;
        }
      }
      double v163 = *(double *)(v154 + 72);
      if (v163 >= *(double *)(v4 + 72) && v163 >= *(double *)(v124 + 72)) {
        uint64_t v124 = v154;
      }
    }
    goto LABEL_244;
  }
  if (v110 >= v111) {
    uint64_t v113 = v1;
  }
  else {
    uint64_t v113 = v1 + 96;
  }
  uint64_t v114 = v1 + 192;
  uint64_t v115 = v1;
  while (1)
  {
    uint64_t v116 = v114;
    uint64_t v117 = v114 + 96;
    if (v117 == v2) {
      break;
    }
    uint64_t v118 = v115 + 288;
    double v119 = *(double *)(v116 + 176);
    double v120 = *(double *)(v116 + 80);
    double v121 = *(double *)(v113 + 80);
    double v122 = *(double *)(v112 + 80);
    if (v120 >= v121) {
      uint64_t v123 = v113;
    }
    else {
      uint64_t v123 = v116;
    }
    if (v119 < v122) {
      uint64_t v118 = v112;
    }
    if (v119 < v121) {
      uint64_t v113 = v117;
    }
    if (v120 >= v122) {
      uint64_t v112 = v116;
    }
    if (v119 >= v120)
    {
      uint64_t v113 = v123;
      uint64_t v112 = v118;
    }
    uint64_t v114 = v116 + 192;
    uint64_t v115 = v116;
    if (v116 + 192 == v2) {
      goto LABEL_279;
    }
  }
  double v150 = *(double *)(v116 + 80);
  if (v150 >= *(double *)(v113 + 80) && v150 >= *(double *)(v112 + 80)) {
    uint64_t v112 = v116;
  }
LABEL_279:
  *(void *)(a1 + 248) = *(void *)(v112 + 80);
  if (v4 != v2) {
    goto LABEL_280;
  }
LABEL_243:
  uint64_t v124 = v1;
LABEL_244:
  *(void *)(a1 + 240) = *(void *)(v124 + 72);
  uint64_t v125 = (unsigned __int128)((v2 - v1) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  unint64_t v126 = (v125 >> 4) + ((unint64_t)v125 >> 63);
  if (v126 <= 1) {
    unint64_t v126 = 1;
  }
  v127 = (int *)(v1 + 24);
  int v128 = -1;
  do
  {
    int v130 = *v127;
    v127 += 24;
    int v129 = v130;
    if (v130 == 1 || v128 == 1)
    {
      int v128 = 1;
LABEL_265:
      *(_DWORD *)(a1 + 192) = v128;
      goto LABEL_266;
    }
    if (v129) {
      BOOL v132 = v128 == 0;
    }
    else {
      BOOL v132 = 1;
    }
    if (v132)
    {
      int v128 = 0;
      goto LABEL_265;
    }
    if (v129 == 2 || v128 == 2)
    {
      int v128 = 2;
      goto LABEL_265;
    }
LABEL_266:
    --v126;
  }
  while (v126);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346C88);
  }
  v134 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v135 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 5);
    uint64_t v136 = *(void *)(a1 + 176);
    uint64_t v137 = *(void *)(a1 + 184);
    int v138 = *(_DWORD *)(a1 + 192);
    uint64_t v139 = *(void *)(a1 + 200);
    int v140 = *(unsigned __int8 *)(a1 + 208);
    int v141 = *(unsigned __int8 *)(a1 + 209);
    double v142 = *(double *)(a1 + 224);
    if (v142 == 1.79769313e308) {
      double v142 = -1.0;
    }
    int v143 = *(unsigned __int8 *)(a1 + 210);
    uint64_t v144 = *(void *)(a1 + 216);
    int v145 = *(unsigned __int8 *)(a1 + 232);
    int v146 = *(unsigned __int8 *)(a1 + 233);
    uint64_t v147 = *(void *)(a1 + 240);
    uint64_t v148 = *(void *)(a1 + 248);
    int v149 = *(unsigned __int8 *)(a1 + 256);
    *(_DWORD *)uint64_t buf = 134352640;
    unint64_t v166 = v135;
    __int16 v167 = 2050;
    uint64_t v168 = v136;
    __int16 v169 = 2050;
    uint64_t v170 = v137;
    __int16 v171 = 1026;
    int v172 = v138;
    __int16 v173 = 2050;
    uint64_t v174 = v139;
    __int16 v175 = 1026;
    int v176 = v140;
    __int16 v177 = 1026;
    int v178 = v141;
    __int16 v179 = 2050;
    double v180 = v142;
    __int16 v181 = 1026;
    int v182 = v143;
    __int16 v183 = 2050;
    uint64_t v184 = v144;
    __int16 v185 = 1026;
    int v186 = v145;
    __int16 v187 = 1026;
    int v188 = v146;
    __int16 v189 = 2050;
    uint64_t v190 = v147;
    __int16 v191 = 2050;
    uint64_t v192 = v148;
    __int16 v193 = 1026;
    int v194 = v149;
    _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_DEBUG, "CLRGCM,updateCurrentConfigurations,size,%{public}zu,fRhythmicGnssActiveConfiguration,hAccuracy_m,%{public}.3lff,gpsActiveTimeout_s,%{public}.3lf,powerMode,%{public}d,rhythmicGnssInterSessionInterval_s,%{public}.3lf,wakeAPUp,%{public}d,takePowerAssertion,%{public}d,apWakeBackStopTimeForNextSession_s,%{public}.3lf,isPowerBudgetApplicable,%{public}d,totalPowerBudgetPerDay_s,%{public}.3lf,skipDebounce,%{public}d,useLeechGPSFixesToOffsetRhythmicGnssDutyCycle,%{public}d,wifiCellInterSessionInterval_s,%{public}.3lf,additionalPowerAssertionTime_s,%{public}.3lf,isStaticDeviceOptimizationEnabled,%{public}d", buf, 0x7Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    v164 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::updateCurrentConfigurations()", "%s\n", v164);
    if (v164 != (char *)buf) {
      free(v164);
    }
  }
}

void sub_101970050(void *a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346C88);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[34] - a1[33]) >> 4);
    *(_DWORD *)uint64_t buf = 134349056;
    v36[0] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLRGCM,addClientToCoreAnalyticsInfo,size,%{public}zu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    double v32 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::addClientToCoreAnalyticsInfo(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v32);
    if (v32 != (char *)buf) {
      free(v32);
    }
  }
  uint64_t v6 = a1[33];
  if (v6 == a1[34])
  {
LABEL_19:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    uint64_t v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CLRGCM,addClientToCoreAnalyticsInfo,adding new client type", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346C88);
      }
      double v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::addClientToCoreAnalyticsInfo(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v33);
      if (v33 != (char *)buf) {
        free(v33);
      }
    }
    int v11 = *(_DWORD *)(a2 + 16);
    double v12 = sub_10016C458();
    double v13 = v12;
    uint64_t v14 = (double *)a1[34];
    unint64_t v15 = a1[35];
    if ((unint64_t)v14 >= v15)
    {
      double v17 = (double *)a1[33];
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v17) >> 4);
      unint64_t v19 = v18 + 1;
      if (v18 + 1 > 0x555555555555555) {
        sub_1001D7FD4();
      }
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (void)v17) >> 4);
      if (2 * v20 > v19) {
        unint64_t v19 = 2 * v20;
      }
      if (v20 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v21 = 0x555555555555555;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        double v22 = (char *)sub_10014F86C((uint64_t)(a1 + 35), v21);
        double v17 = (double *)a1[33];
        uint64_t v14 = (double *)a1[34];
      }
      else
      {
        double v22 = 0;
      }
      uint64_t v26 = &v22[48 * v18];
      *(double *)uint64_t v26 = v13;
      *((_DWORD *)v26 + 2) = 1;
      *((_DWORD *)v26 + 4) = v11;
      *((void *)v26 + 3) = 0;
      uint64_t v27 = &v22[48 * v21];
      *((_DWORD *)v26 + 8) = 0;
      *((void *)v26 + 5) = 0;
      double v16 = (double *)(v26 + 48);
      if (v14 != v17)
      {
        do
        {
          long long v28 = *((_OWORD *)v14 - 3);
          long long v29 = *((_OWORD *)v14 - 1);
          *((_OWORD *)v26 - 2) = *((_OWORD *)v14 - 2);
          *((_OWORD *)v26 - 1) = v29;
          *((_OWORD *)v26 - 3) = v28;
          v26 -= 48;
          v14 -= 6;
        }
        while (v14 != v17);
        double v17 = (double *)a1[33];
      }
      a1[33] = v26;
      a1[34] = v16;
      a1[35] = v27;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *uint64_t v14 = v12;
      *((_DWORD *)v14 + 2) = 1;
      *((_DWORD *)v14 + 4) = v11;
      v14[3] = 0.0;
      *((_DWORD *)v14 + 8) = 0;
      double v16 = v14 + 6;
      v14[5] = 0.0;
    }
    a1[34] = v16;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    double v30 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[34] - a1[33]) >> 4);
      *(_DWORD *)uint64_t buf = 134349056;
      v36[0] = v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CLRGCM,addClientToCoreAnalyticsInfo,size,%{public}zu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_62;
      }
      goto LABEL_65;
    }
  }
  else
  {
    while (1)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346C88);
      }
      uint64_t v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = *(_DWORD *)(v6 + 16);
        *(_DWORD *)uint64_t buf = 67109120;
        LODWORD(v36[0]) = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLRGCM,addClientToCoreAnalyticsInfo,clientInfo.powerMode,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346C88);
        }
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::addClientToCoreAnalyticsInfo(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      if (*(_DWORD *)(a2 + 16) == *(_DWORD *)(v6 + 16)) {
        break;
      }
      v6 += 48;
      if (v6 == a1[34]) {
        goto LABEL_19;
      }
    }
    ++*(_DWORD *)(v6 + 8);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    uint64_t v23 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = *(_DWORD *)(v6 + 16);
      int v25 = *(_DWORD *)(v6 + 8);
      *(_DWORD *)uint64_t buf = 67240448;
      LODWORD(v36[0]) = v24;
      WORD2(v36[0]) = 1026;
      *(_DWORD *)((char *)v36 + 6) = v25;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "CLRGCM,addClientToCoreAnalyticsInfo,clientInfo.powerMode,%{public}d,refCount,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_62:
        uint64_t v34 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::addClientToCoreAnalyticsInfo(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v34);
        if (v34 != (char *)buf) {
          free(v34);
        }
        return;
      }
LABEL_65:
      dispatch_once(&qword_1024193D0, &stru_102346C88);
      goto LABEL_62;
    }
  }
}

void sub_1019708F4(uint64_t a1, int *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346C88);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 272) - *(void *)(a1 + 264)) >> 4);
    *(_DWORD *)uint64_t buf = 134349056;
    *(void *)uint64_t v27 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLRGCM,removeClientToCoreAnalyticsInfo,size,%{public}zu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    uint64_t v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::removeClientToCoreAnalyticsInfo(const CLRhythmicGnssWakeMode &)", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
  uint64_t v7 = *(void *)(a1 + 264);
  uint64_t v6 = *(int **)(a1 + 272);
  if ((int *)v7 != v6)
  {
    int v8 = *a2;
    uint64_t v9 = (double *)(v7 + 16);
    uint64_t v10 = -v7;
    while (v8 != *(_DWORD *)v9)
    {
      int v11 = (int *)(v9 + 4);
      v9 += 6;
      v10 -= 48;
      if (v11 == v6) {
        goto LABEL_20;
      }
    }
    int v12 = *((_DWORD *)v9 - 2) - 1;
    *((_DWORD *)v9 - 2) = v12;
    if (!v12)
    {
      double v13 = sub_10016C458();
      v9[1] = v13 - *(v9 - 2);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346C88);
      }
      uint64_t v14 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v15 = *(_DWORD *)v9;
        uint64_t v16 = *((void *)v9 + 1);
        uint64_t v17 = *((void *)v9 - 2);
        *(_DWORD *)uint64_t buf = 67240960;
        *(_DWORD *)uint64_t v27 = v15;
        *(_WORD *)&v27[4] = 2050;
        *(void *)&v27[6] = v16;
        __int16 v28 = 2050;
        double v29 = v13;
        __int16 v30 = 2050;
        uint64_t v31 = v17;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLRGCM,CoreAnalytics for client,PowerMode,%{public}d,ClientLifeDuration,%{public}.3lf,now,%{public}.3lf,clientAddedAt,%{public}.3lf", buf, 0x26u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346C88);
        }
        int v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::removeClientToCoreAnalyticsInfo(const CLRhythmicGnssWakeMode &)", "%s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
      uint64_t v18 = sub_10071B604();
      sub_100726A58(v18, (int *)v9);
      uint64_t v19 = *(void *)(a1 + 272);
      uint64_t v20 = v19 - (48 - v10);
      if (v19 != 48 - v10) {
        memmove((void *)-v10, (const void *)(48 - v10), v19 - (48 - v10));
      }
      *(void *)(a1 + 272) = v20 - v10;
    }
  }
LABEL_20:
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346C88);
  }
  unint64_t v21 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 272) - *(void *)(a1 + 264)) >> 4);
    *(_DWORD *)uint64_t buf = 134349056;
    *(void *)uint64_t v27 = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLRGCM,removeClientToCoreAnalyticsInfo,size,%{public}zu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    int v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::removeClientToCoreAnalyticsInfo(const CLRhythmicGnssWakeMode &)", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
}

uint64_t sub_101970E80(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 152);
  if (v3 == *(void *)(a1 + 160)) {
    return 0;
  }
  while (1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(_DWORD *)(v3 + 24);
      *(_DWORD *)uint64_t buf = 67109120;
      int v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLRGCM,clientIter->clientInfo.powerMode,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346C88);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::getRegisteredClientInformation(const CLRhythmicGnssWakeMode &, CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    if (*a2 == *(_DWORD *)(v3 + 24)) {
      break;
    }
    v3 += 96;
    if (v3 == *(void *)(a1 + 160)) {
      return 0;
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346C88);
  }
  int v11 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = *(_DWORD *)(v3 + 24);
    *(_DWORD *)uint64_t buf = 67109120;
    int v19 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CLRGCM,clientIter->clientInfo.powerMode,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::getRegisteredClientInformation(const CLRhythmicGnssWakeMode &, CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  long long v13 = *(_OWORD *)(v3 + 24);
  *(_OWORD *)a3 = *(_OWORD *)(v3 + 8);
  *(_OWORD *)(a3 + 16) = v13;
  long long v14 = *(_OWORD *)(v3 + 40);
  long long v15 = *(_OWORD *)(v3 + 56);
  long long v16 = *(_OWORD *)(v3 + 72);
  *(unsigned char *)(a3 + 80) = *(unsigned char *)(v3 + 88);
  *(_OWORD *)(a3 + 48) = v15;
  *(_OWORD *)(a3 + 64) = v16;
  *(_OWORD *)(a3 + 32) = v14;
  return 1;
}

uint64_t sub_1019711F8(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v3 = *(void *)(a1 + 152);
  if (v3 == *(void *)(a1 + 160)) {
    return 0;
  }
  while (1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(_DWORD *)(v3 + 24);
      *(_DWORD *)uint64_t buf = 67109120;
      int v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLRGCM,clientIter->clientInfo.powerMode,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346C88);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::modifyRegisteredGnssClientConfiguration(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &, const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    if (*(_DWORD *)(a2 + 16) == *(_DWORD *)(v3 + 24)) {
      break;
    }
    v3 += 96;
    if (v3 == *(void *)(a1 + 160)) {
      return 0;
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346C88);
  }
  int v11 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = *(_DWORD *)(v3 + 24);
    *(_DWORD *)uint64_t buf = 67109120;
    int v19 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CLRGCM,clientIter->clientInfo.powerMode,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::modifyRegisteredGnssClientConfiguration(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &, const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  long long v13 = *a3;
  *(_OWORD *)(v3 + 24) = a3[1];
  *(_OWORD *)(v3 + 8) = v13;
  long long v14 = a3[2];
  long long v15 = a3[3];
  long long v16 = a3[4];
  *(unsigned char *)(v3 + 88) = *((unsigned char *)a3 + 80);
  *(_OWORD *)(v3 + 72) = v16;
  *(_OWORD *)(v3 + 56) = v15;
  *(_OWORD *)(v3 + 40) = v14;
  return 1;
}

BOOL sub_101971570(uint64_t a1, _DWORD *a2, long long *a3)
{
  long long v16 = xmmword_101D2A430;
  int v17 = -1;
  uint64_t v18 = 0x7FEFFFFFFFFFFFFFLL;
  __int16 v19 = 0;
  char v20 = 0;
  long long v21 = xmmword_101D2A460;
  __int16 v22 = 1;
  long long v23 = xmmword_101E49A00;
  char v24 = 0;
  if (sub_101970E80(a1, a2, (uint64_t)&v16))
  {
    if (sub_101971964((uint64_t)&v16, (uint64_t)a3))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346C88);
      }
      unint64_t v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLRGCM,updateRegisteredClientConfiguration,no configuration changed", buf, 2u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346C88);
        }
        __int16 v15 = 0;
LABEL_32:
        int v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::updateRegisteredClientConfiguration(const CLRhythmicGnssWakeMode &, const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
        return 0;
      }
    }
    else if (sub_1019711F8(a1, (uint64_t)&v16, a3))
    {
      sub_10196F444(a1);
      uint64_t v8 = *(void *)(a1 + 144);
      if (v8)
      {
        long long v9 = *(_OWORD *)(a1 + 224);
        _DWORD v13[2] = *(_OWORD *)(a1 + 208);
        v13[3] = v9;
        v13[4] = *(_OWORD *)(a1 + 240);
        uint64_t v14 = *(void *)(a1 + 256);
        long long v10 = *(_OWORD *)(a1 + 192);
        v13[0] = *(_OWORD *)(a1 + 176);
        v13[1] = v10;
        sub_1018E16D8(v8, (uint64_t *)v13);
      }
      return 1;
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346C88);
      }
      int v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CLRGCM,updateRegisteredClientConfiguration,config could not be changed", buf, 2u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346C88);
        }
        __int16 v15 = 0;
        goto LABEL_32;
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLRGCM,updateRegisteredClientConfiguration,no registered client", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346C88);
      }
      __int16 v15 = 0;
      goto LABEL_32;
    }
  }
  return result;
}

BOOL sub_101971964(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(double *)(a1 + 24) == *(double *)(a2 + 24)
      && *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32)
      && *(unsigned __int8 *)(a1 + 33) == *(unsigned __int8 *)(a2 + 33)
      && *(double *)(a1 + 48) == *(double *)(a2 + 48)
      && *(unsigned __int8 *)(a1 + 34) == *(unsigned __int8 *)(a2 + 34)
      && *(double *)(a1 + 40) == *(double *)(a2 + 40)
      && *(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56)
      && *(unsigned __int8 *)(a1 + 57) == *(unsigned __int8 *)(a2 + 57)
      && *(double *)(a1 + 64) == *(double *)(a2 + 64)
      && *(double *)(a1 + 72) == *(double *)(a2 + 72)
      && *(unsigned __int8 *)(a1 + 80) == *(unsigned __int8 *)(a2 + 80);
}

uint64_t sub_101971A50(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346C88);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLRGCM,addProactiveGnssClientWithConfiguration", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    __int16 v21 = 0;
    long long v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::addProactiveGnssClientWithConfiguration(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  for (uint64_t i = *(void *)(a1 + 152); i != *(void *)(a1 + 160); i += 96)
  {
    if (*(_DWORD *)(i + 24) == 2)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346C88);
      }
      uint64_t v14 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "CLRGCM,addProactiveGnssClientWithConfiguration,only one proactive client is allowed", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346C88);
        }
        __int16 v21 = 0;
        uint64_t v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::addProactiveGnssClientWithConfiguration(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
      return 0;
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346C88);
  }
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLRGCM,addProactiveGnssClientWithConfiguration starting Gps", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    __int16 v21 = 0;
    int v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::addProactiveGnssClientWithConfiguration(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration &)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  sub_10196EA5C((void *)a1, a2);
  sub_10196F444(a1);
  sub_101970050((void *)a1, (uint64_t)a2);
  uint64_t v7 = *(void *)(a1 + 144);
  if (v7)
  {
    long long v8 = *(_OWORD *)(a1 + 224);
    v19[2] = *(_OWORD *)(a1 + 208);
    v19[3] = v8;
    v19[4] = *(_OWORD *)(a1 + 240);
    uint64_t v20 = *(void *)(a1 + 256);
    long long v9 = *(_OWORD *)(a1 + 192);
    v19[0] = *(_OWORD *)(a1 + 176);
    v19[1] = v9;
    sub_1018E16D8(v7, (uint64_t *)v19);
  }
  if (!*(void *)(a1 + 136)) {
    return 1;
  }
  uint64_t v10 = a1 + 112;
  int v11 = *(_DWORD *)(a1 + 192);
  int v12 = -1431655765 * ((*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 5);
  uint64_t v13 = 1;
  sub_10196E080(v10, 1, v11, v12);
  return v13;
}

void sub_101971EF8(uint64_t a1, double a2)
{
  uint64_t v4 = *(void *)(a1 + 264);
  if (v4 == *(void *)(a1 + 272))
  {
LABEL_5:
    char v5 = 0;
LABEL_16:
    uint64_t v8 = *(void *)(a1 + 264);
    if (v8 != v4)
    {
      do
      {
        char v24 = 0;
        *(_DWORD *)uint64_t buf = *(_DWORD *)(v8 + 16);
        sub_10196CD0C(a1, buf, (uint64_t)&v20);
        if (v24) {
          char v9 = v5;
        }
        else {
          char v9 = 0;
        }
        if ((v9 & 1) == 0)
        {
          *(double *)(v8 + 40) = *(double *)(v8 + 40) + a2;
          ++*(_DWORD *)(v8 + 32);
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346C88);
        }
        uint64_t v10 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v11 = *(_DWORD *)(v8 + 16);
          uint64_t v12 = *(void *)(v8 + 24);
          uint64_t v13 = *(void *)(v8 + 40);
          int v14 = *(_DWORD *)(v8 + 32);
          *(_DWORD *)uint64_t buf = 67240960;
          int v35 = v11;
          __int16 v36 = 2050;
          uint64_t v37 = v12;
          __int16 v38 = 2050;
          uint64_t v39 = v13;
          __int16 v40 = 1026;
          int v41 = v14;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLRGCM,CoreAnalytics for client,PowerMode,%{public}d,ClientLifeDuration,%{public}.3lf,totalGPSDuration,%{public}.3lf,sessionCount,%{public}d", buf, 0x22u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102346C88);
          }
          int v15 = *(_DWORD *)(v8 + 16);
          uint64_t v16 = *(void *)(v8 + 24);
          uint64_t v17 = *(void *)(v8 + 40);
          int v18 = *(_DWORD *)(v8 + 32);
          int v26 = 67240960;
          int v27 = v15;
          __int16 v28 = 2050;
          uint64_t v29 = v16;
          __int16 v30 = 2050;
          uint64_t v31 = v17;
          __int16 v32 = 1026;
          int v33 = v18;
          __int16 v19 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::rhythmicGnssSessionUsageDetails(double)", "%s\n", v19);
          if (v19 != (char *)buf) {
            free(v19);
          }
        }
        v8 += 48;
      }
      while (v8 != *(void *)(a1 + 272));
    }
  }
  else
  {
    while (1)
    {
      long long v20 = xmmword_101D2A430;
      int v21 = -1;
      uint64_t v22 = 0x7FEFFFFFFFFFFFFFLL;
      __int16 v23 = 0;
      char v24 = 0;
      uint64_t v25 = 0;
      *(_DWORD *)uint64_t buf = *(_DWORD *)(v4 + 16);
      if ((sub_10196CD0C(a1, buf, (uint64_t)&v20) & 1) == 0) {
        break;
      }
      if (!v24)
      {
        uint64_t v4 = *(void *)(a1 + 272);
        char v5 = 1;
        goto LABEL_16;
      }
      v4 += 48;
      if (v4 == *(void *)(a1 + 272)) {
        goto LABEL_5;
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLRGCM,rhythmicGnssSessionUsageDetails,invalid mode", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346C88);
      }
      LOWORD(v26) = 0;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::rhythmicGnssSessionUsageDetails(double)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

uint64_t sub_10197233C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 144);
  if (result) {
    return sub_1018E6CFC(result);
  }
  return result;
}

BOOL sub_10197234C(uint64_t a1)
{
  return *(void *)(a1 + 160) != *(void *)(a1 + 152);
}

void sub_10197235C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346C88);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 5);
    *(_DWORD *)uint64_t buf = 134349056;
    uint64_t v21 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLRGCM,RhythmicGnssClientManagerHeartBeatTimerCallback,size,%{public}zu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 5);
    *(_DWORD *)uint64_t v12 = 134349056;
    *(void *)&v12[4] = v10;
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::RhythmicGnssClientManagerHeartBeatTimerCallback()", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  if (*(void *)(a1 + 152) == *(void *)(a1 + 160) || (sub_101972A30(a1) & 1) == 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLRGCM,RhythmicGnssClientManagerHeartBeatTimerCallback no waking mode client", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346C88);
      }
      *(_WORD *)uint64_t v12 = 0;
      goto LABEL_50;
    }
  }
  else if (*(unsigned char *)(a1 + 289))
  {
    if (*(unsigned char *)(a1 + 288) || (double v4 = sub_10016C458() - *(double *)(a1 + 296), v4 >= 60.0))
    {
      *(unsigned char *)(a1 + 289) = 0;
      *(_OWORD *)uint64_t v12 = xmmword_101D2A430;
      *(_DWORD *)&v12[16] = -1;
      uint64_t v13 = 0x7FEFFFFFFFFFFFFFLL;
      __int16 v14 = 0;
      char v15 = 0;
      long long v16 = xmmword_101D2A460;
      __int16 v17 = 1;
      long long v18 = xmmword_101E49A00;
      char v19 = 0;
      *(_DWORD *)uint64_t buf = 1;
      if (sub_10196CD0C(a1, buf, (uint64_t)v12))
      {
        sub_10196E9E8(a1, (uint64_t)v12);
        *(_DWORD *)uint64_t buf = 1;
        sub_101971570(a1, buf, (long long *)v12);
        return;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346C88);
      }
      uint64_t v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLRGCM,RhythmicGnssClientManagerHeartBeatTimerCallback,can not read config", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346C88);
        }
        char v9 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLRhythmicGnssClientManager::RhythmicGnssClientManagerHeartBeatTimerCallback()", "%s\n");
        goto LABEL_51;
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346C88);
      }
      char v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 134349312;
        uint64_t v21 = 0x404E000000000000;
        __int16 v22 = 2050;
        double v23 = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLRGCM,RunningStopped less than,%{public}.3lf,timeElapsed,%{public}.3lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346C88);
        }
        *(_DWORD *)uint64_t v12 = 134349312;
        *(void *)&v12[4] = 0x404E000000000000;
        *(_WORD *)&v12[12] = 2050;
        *(double *)&v12[14] = v4;
LABEL_50:
        char v9 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::RhythmicGnssClientManagerHeartBeatTimerCallback()", "%s\n");
LABEL_51:
        if (v9 != buf) {
          free(v9);
        }
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLRGCM,RhythmicGnssClientManagerHeartBeatTimerCallback state is up to date", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346C88);
      }
      *(_WORD *)uint64_t v12 = 0;
      goto LABEL_50;
    }
  }
}

uint64_t sub_101972A30(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 152);
  if (v1 == *(void *)(a1 + 160)) {
    return 0;
  }
  while (1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    unint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(_DWORD *)(v1 + 24);
      *(_DWORD *)uint64_t buf = 67109120;
      int v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CLRGCM,isWakingModeClientActive,clientInfo.powerMode,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346C88);
      }
      char v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::isWakingModeClientActive()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    if (*(_DWORD *)(v1 + 24) == 1) {
      break;
    }
    v1 += 96;
    if (v1 == *(void *)(a1 + 160)) {
      return 0;
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346C88);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLRGCM,isWakingModeClientActive,valid client", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssClientManager::isWakingModeClientActive()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return 1;
}

void sub_101972D60(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346C88);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    int v8 = *a3;
    *(_DWORD *)uint64_t buf = 67240192;
    LODWORD(v19) = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLRGCM,onMotionStateWorkoutNotification,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    char v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::onMotionStateWorkoutNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  if (*a3 == 2)
  {
    uint64_t v9 = *(void *)(a4 + 112);
    int v11 = v9 == 2 || v9 == 17;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    uint64_t v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v13 = *(unsigned __int8 *)(a1 + 288);
      *(_DWORD *)uint64_t buf = 134349568;
      uint64_t v19 = v9;
      __int16 v20 = 1026;
      int v21 = v13;
      __int16 v22 = 1026;
      int v23 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLRGCM,onMotionStateWorkoutNotification,workout,%{public}ld,fIsRunningWorkout,%{public}d,newRunningWorkoutState,%{public}d", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346C88);
      }
      long long v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::onMotionStateWorkoutNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    if (*(unsigned __int8 *)(a1 + 288) != v11)
    {
      *(unsigned char *)(a1 + 288) = v11;
      *(double *)(a1 + 296) = sub_10016C458();
      *(unsigned char *)(a1 + 289) = 1;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346C88);
    }
    __int16 v14 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "CLRGCM,onMotionStateWorkoutNotification,invalid notification", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346C88);
      }
      __int16 v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssClientManager::onMotionStateWorkoutNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
}

void sub_1019731FC(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10197322C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101973260()
{
}

void *sub_101973274(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102346CD8;
  result[1] = v3;
  return result;
}

uint64_t sub_1019732BC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102346CD8;
  a2[1] = v2;
  return result;
}

void sub_1019732E8(uint64_t a1)
{
}

uint64_t sub_1019732F0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101973330()
{
}

void sub_101973340()
{
}

void *sub_101973354(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102346D58;
  result[1] = v3;
  return result;
}

uint64_t sub_10197339C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102346D58;
  a2[1] = v2;
  return result;
}

void sub_1019733C8(uint64_t a1, double *a2)
{
}

uint64_t sub_1019733D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101973414()
{
}

uint64_t sub_101973420(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1019734B8(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1018DFB78(result);
    operator delete();
  }
  return result;
}

void sub_101973508(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v13 = a2;
  char v12 = a3;
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 696) = 0;
  *(void *)(a1 + 704) = a2;
  sub_1017DB7F4(a1 + 712, a5);
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(void *)(a1 + 760) = a1 + 768;
  *(void *)(a1 + 784) = 0xFF000000FFLL;
  *(unsigned char *)(a1 + 792) = sub_1000FFBA8();
  sub_10198CAEC(a1 + 800, a2, a3);
  *(unsigned char *)(a1 + 1200) = a4;
  *(unsigned char *)(a1 + 1201) = a3;
  *(void *)(a1 + 1204) = 0;
  *(void *)(a1 + 1212) = 0;
  *(void *)(a1 + 1220) = 0;
  *(void *)(a1 + 1228) = 0xFF00000000;
  *(_WORD *)(a1 + 1236) = 0;
  *(void *)(a1 + 1240) = 0;
  v11[1] = a1;
  v11[2] = a1;
  v11[0] = [objc_msgSend(*(id *)(a1 + 704), "silo") queue];
  sub_10197D658(v11, (unsigned __int8 *)(a1 + 1200), (unsigned __int8 *)(a1 + 1201), buf);
  long long v9 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  int v10 = *(std::__shared_weak_count **)(a1 + 752);
  *(_OWORD *)(a1 + 744) = v9;
  if (v10)
  {
    sub_1000DB0A0(v10);
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_1019749EC();
}

void sub_101974788(_Unwind_Exception *a1)
{
  uint64_t v6 = *(void *)(v1 + 1240);
  *(void *)(v1 + 1240) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void **)(v1 + 1208);
  if (v7)
  {
    *(void *)(v1 + 1216) = v7;
    operator delete(v7);
  }
  sub_10198CB94(v4);
  sub_10197D5F8(v3, *(void **)(v1 + 768));
  int v8 = *(std::__shared_weak_count **)(v1 + 752);
  if (v8) {
    sub_1000DB0A0(v8);
  }
  sub_1017DBD28(v2);
  sub_1000F3950(v1);
  _Unwind_Resume(a1);
}

void sub_1019749EC()
{
}

void sub_101974B88(uint64_t a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v18 = va_arg(va3, void);
  sub_1017DBF24((uint64_t *)va);
  sub_100850B38((uint64_t *)va1);
  sub_101833480((uint64_t *)va2);
  if (a4) {
    sub_1000DB0A0(a4);
  }
  sub_1017DBD28((uint64_t *)va3);
  operator delete();
}

void *sub_101974BE8(uint64_t a1, int a2, uint64_t a3)
{
  v20[0] = a2;
  uint64_t v3 = a1 + 192;
  uint64_t v4 = *(void *)(a1 + 192);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v7 = (uint64_t **)(a1 + 184);
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 28);
    BOOL v10 = v9 < a2;
    if (v9 >= a2) {
      uint64_t v11 = (uint64_t *)v4;
    }
    else {
      uint64_t v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(void *)(a1 + 144))
  {
LABEL_13:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    char v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      v20[1] = 67240192;
      v20[2] = a2;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::ResetDataReqParams]", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    uint64_t v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    uint64_t v17 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    uint64_t v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  *(void *)uint64_t buf = v20;
  int v12 = *((_DWORD *)sub_100125FD0(v7, v20, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3321888768;
  v28[2] = sub_10197E044;
  v28[3] = &unk_1023470C8;
  v28[4] = a1;
  sub_1017CB4F8((uint64_t)v29, a3);
  sub_101845C78(*(void **)(a1 + 144), v12, (uint64_t)v28);
  return sub_1017C7344(v29);
}

void sub_1019750AC(_Unwind_Exception *a1)
{
  sub_1017C7344(v1);
  _Unwind_Resume(a1);
}

void *sub_1019750C8(uint64_t a1, int a2, uint64_t a3)
{
  v20[0] = a2;
  uint64_t v3 = a1 + 192;
  uint64_t v4 = *(void *)(a1 + 192);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v7 = (uint64_t **)(a1 + 184);
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 28);
    BOOL v10 = v9 < a2;
    if (v9 >= a2) {
      uint64_t v11 = (uint64_t *)v4;
    }
    else {
      uint64_t v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(void *)(a1 + 144))
  {
LABEL_13:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    char v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      v20[1] = 67240192;
      v20[2] = a2;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::PositionRequestFromModem]", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    uint64_t v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    uint64_t v17 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    uint64_t v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  *(void *)uint64_t buf = v20;
  int v12 = *((_DWORD *)sub_100125FD0(v7, v20, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3321888768;
  v28[2] = sub_10197E8C8;
  v28[3] = &unk_1023471B8;
  v28[4] = a1;
  sub_1017CB7FC((uint64_t)v29, a3);
  sub_101845C78(*(void **)(a1 + 144), v12, (uint64_t)v28);
  return sub_1017C73C8(v29);
}

void sub_10197558C(_Unwind_Exception *a1)
{
  sub_1017C73C8(v1);
  _Unwind_Resume(a1);
}

void *sub_1019755A8(uint64_t a1, int a2, uint64_t a3)
{
  v20[0] = a2;
  uint64_t v3 = a1 + 192;
  uint64_t v4 = *(void *)(a1 + 192);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v7 = (uint64_t **)(a1 + 184);
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 28);
    BOOL v10 = v9 < a2;
    if (v9 >= a2) {
      uint64_t v11 = (uint64_t *)v4;
    }
    else {
      uint64_t v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(void *)(a1 + 144))
  {
LABEL_13:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    char v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      v20[1] = 67240192;
      v20[2] = a2;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::GpsNavigationModelFromModem]", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    uint64_t v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    uint64_t v17 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    uint64_t v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  *(void *)uint64_t buf = v20;
  int v12 = *((_DWORD *)sub_100125FD0(v7, v20, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3321888768;
  v28[2] = sub_10197F1A4;
  v28[3] = &unk_1023472A8;
  v28[4] = a1;
  sub_1017CBE04((uint64_t)v29, a3);
  sub_101845C78(*(void **)(a1 + 144), v12, (uint64_t)v28);
  return sub_1017C744C(v29);
}

void sub_101975A6C(_Unwind_Exception *a1)
{
  sub_1017C744C(v1);
  _Unwind_Resume(a1);
}

void *sub_101975A88(uint64_t a1, int a2, uint64_t a3)
{
  v20[0] = a2;
  uint64_t v3 = a1 + 192;
  uint64_t v4 = *(void *)(a1 + 192);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v7 = (uint64_t **)(a1 + 184);
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 28);
    BOOL v10 = v9 < a2;
    if (v9 >= a2) {
      uint64_t v11 = (uint64_t *)v4;
    }
    else {
      uint64_t v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(void *)(a1 + 144))
  {
LABEL_13:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    char v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      v20[1] = 67240192;
      v20[2] = a2;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::GpsAcqAssistanceFromModem]", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    uint64_t v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    uint64_t v17 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    uint64_t v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  *(void *)uint64_t buf = v20;
  int v12 = *((_DWORD *)sub_100125FD0(v7, v20, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3321888768;
  v28[2] = sub_10197FADC;
  v28[3] = &unk_102347398;
  v28[4] = a1;
  sub_10197FE78((uint64_t)v29, a3);
  sub_101845C78(*(void **)(a1 + 144), v12, (uint64_t)v28);
  return sub_101980484(v29);
}

void sub_101975F4C(_Unwind_Exception *a1)
{
  sub_101980484(v1);
  _Unwind_Resume(a1);
}

void *sub_101975F68(uint64_t a1, int a2, uint64_t a3)
{
  v20[0] = a2;
  uint64_t v3 = a1 + 192;
  uint64_t v4 = *(void *)(a1 + 192);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v7 = (uint64_t **)(a1 + 184);
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 28);
    BOOL v10 = v9 < a2;
    if (v9 >= a2) {
      uint64_t v11 = (uint64_t *)v4;
    }
    else {
      uint64_t v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(void *)(a1 + 144))
  {
LABEL_13:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    char v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      v20[1] = 67240192;
      v20[2] = a2;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::ReferenceLocationFromModem]", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    uint64_t v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    uint64_t v17 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    uint64_t v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  *(void *)uint64_t buf = v20;
  int v12 = *((_DWORD *)sub_100125FD0(v7, v20, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3321888768;
  v28[2] = sub_101980508;
  v28[3] = &unk_102347488;
  v28[4] = a1;
  sub_1017CC108((uint64_t)v29, a3);
  sub_101845C78(*(void **)(a1 + 144), v12, (uint64_t)v28);
  return sub_1017C74D0(v29);
}

void sub_10197642C(_Unwind_Exception *a1)
{
  sub_1017C74D0(v1);
  _Unwind_Resume(a1);
}

void *sub_101976448(uint64_t a1, int a2, uint64_t a3)
{
  v20[0] = a2;
  uint64_t v3 = a1 + 192;
  uint64_t v4 = *(void *)(a1 + 192);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v7 = (uint64_t **)(a1 + 184);
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 28);
    BOOL v10 = v9 < a2;
    if (v9 >= a2) {
      uint64_t v11 = (uint64_t *)v4;
    }
    else {
      uint64_t v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(void *)(a1 + 144))
  {
LABEL_13:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    char v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      v20[1] = 67240192;
      v20[2] = a2;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::GpsReferenceTimeFromModem]", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    uint64_t v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    uint64_t v17 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    uint64_t v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  *(void *)uint64_t buf = v20;
  int v12 = *((_DWORD *)sub_100125FD0(v7, v20, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3321888768;
  v28[2] = sub_101980DC0;
  v28[3] = &unk_102347578;
  v28[4] = a1;
  sub_1017CC40C((uint64_t)v29, a3);
  sub_101845C78(*(void **)(a1 + 144), v12, (uint64_t)v28);
  return sub_1017C7554(v29);
}

void sub_10197690C(_Unwind_Exception *a1)
{
  sub_1017C7554(v1);
  _Unwind_Resume(a1);
}

void *sub_101976928(uint64_t a1, int a2, uint64_t a3)
{
  v20[0] = a2;
  uint64_t v3 = a1 + 192;
  uint64_t v4 = *(void *)(a1 + 192);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v7 = (uint64_t **)(a1 + 184);
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 28);
    BOOL v10 = v9 < a2;
    if (v9 >= a2) {
      uint64_t v11 = (uint64_t *)v4;
    }
    else {
      uint64_t v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(void *)(a1 + 144))
  {
LABEL_13:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    char v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      v20[1] = 67240192;
      v20[2] = a2;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::GnssAbortReqParams]", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    uint64_t v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    uint64_t v17 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    uint64_t v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  *(void *)uint64_t buf = v20;
  int v12 = *((_DWORD *)sub_100125FD0(v7, v20, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3321888768;
  v28[2] = sub_1019816B0;
  v28[3] = &unk_102347668;
  v28[4] = a1;
  sub_1019819D4((uint64_t)v29, a3);
  sub_101845C78(*(void **)(a1 + 144), v12, (uint64_t)v28);
  return sub_101981FE0(v29);
}

void sub_101976DEC(_Unwind_Exception *a1)
{
  sub_101981FE0(v1);
  _Unwind_Resume(a1);
}

void *sub_101976E08(uint64_t a1, int a2, uint64_t a3)
{
  v20[0] = a2;
  uint64_t v3 = a1 + 192;
  uint64_t v4 = *(void *)(a1 + 192);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v7 = (uint64_t **)(a1 + 184);
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 28);
    BOOL v10 = v9 < a2;
    if (v9 >= a2) {
      uint64_t v11 = (uint64_t *)v4;
    }
    else {
      uint64_t v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(void *)(a1 + 144))
  {
LABEL_13:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    char v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      v20[1] = 67240192;
      v20[2] = a2;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::DiscardedPosSessionIndParams]", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    uint64_t v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    uint64_t v17 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    uint64_t v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  *(void *)uint64_t buf = v20;
  int v12 = *((_DWORD *)sub_100125FD0(v7, v20, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3321888768;
  v28[2] = sub_101982064;
  v28[3] = &unk_102347758;
  v28[4] = a1;
  sub_101982390((uint64_t)v29, a3);
  sub_101845C78(*(void **)(a1 + 144), v12, (uint64_t)v28);
  return sub_10198299C(v29);
}

void sub_1019772CC(_Unwind_Exception *a1)
{
  sub_10198299C(v1);
  _Unwind_Resume(a1);
}

void *sub_1019772E8(uint64_t a1, int a2, uint64_t a3)
{
  v20[0] = a2;
  uint64_t v3 = a1 + 192;
  uint64_t v4 = *(void *)(a1 + 192);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v7 = (uint64_t **)(a1 + 184);
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 28);
    BOOL v10 = v9 < a2;
    if (v9 >= a2) {
      uint64_t v11 = (uint64_t *)v4;
    }
    else {
      uint64_t v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(void *)(a1 + 144))
  {
LABEL_13:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    char v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      v20[1] = 67240192;
      v20[2] = a2;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::PosLocationRequestStatusIndParams]", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    uint64_t v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    uint64_t v17 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    uint64_t v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  *(void *)uint64_t buf = v20;
  int v12 = *((_DWORD *)sub_100125FD0(v7, v20, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3321888768;
  v28[2] = sub_101982A20;
  v28[3] = &unk_102347848;
  v28[4] = a1;
  sub_1017CBB00((uint64_t)v29, a3);
  sub_101845C78(*(void **)(a1 + 144), v12, (uint64_t)v28);
  return sub_1017C75D8(v29);
}

void sub_1019777AC(_Unwind_Exception *a1)
{
  sub_1017C75D8(v1);
  _Unwind_Resume(a1);
}

void *sub_1019777C8(uint64_t a1, int a2, uint64_t a3)
{
  v20[0] = a2;
  uint64_t v3 = a1 + 192;
  uint64_t v4 = *(void *)(a1 + 192);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v7 = (uint64_t **)(a1 + 184);
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 28);
    BOOL v10 = v9 < a2;
    if (v9 >= a2) {
      uint64_t v11 = (uint64_t *)v4;
    }
    else {
      uint64_t v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(void *)(a1 + 144))
  {
LABEL_13:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    char v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      v20[1] = 67240192;
      v20[2] = a2;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::CellFTAssistanceFromModem]", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    uint64_t v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    uint64_t v17 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    uint64_t v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  *(void *)uint64_t buf = v20;
  int v12 = *((_DWORD *)sub_100125FD0(v7, v20, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3321888768;
  v28[2] = sub_1019832B4;
  v28[3] = &unk_102347938;
  v28[4] = a1;
  sub_1019835FC((uint64_t)v29, a3);
  sub_101845C78(*(void **)(a1 + 144), v12, (uint64_t)v28);
  return sub_101983C08(v29);
}

void sub_101977C8C(_Unwind_Exception *a1)
{
  sub_101983C08(v1);
  _Unwind_Resume(a1);
}

void *sub_101977CA8(uint64_t a1, int a2, uint64_t a3)
{
  v20[0] = a2;
  uint64_t v3 = a1 + 192;
  uint64_t v4 = *(void *)(a1 + 192);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v7 = (uint64_t **)(a1 + 184);
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 28);
    BOOL v10 = v9 < a2;
    if (v9 >= a2) {
      uint64_t v11 = (uint64_t *)v4;
    }
    else {
      uint64_t v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(void *)(a1 + 144))
  {
LABEL_13:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    char v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      v20[1] = 67240192;
      v20[2] = a2;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::PosIs801GpsLocationIndParams]", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    uint64_t v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    uint64_t v17 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    uint64_t v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  *(void *)uint64_t buf = v20;
  int v12 = *((_DWORD *)sub_100125FD0(v7, v20, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3321888768;
  v28[2] = sub_101983C8C;
  v28[3] = &unk_102347A28;
  v28[4] = a1;
  sub_101983FB8((uint64_t)v29, a3);
  sub_101845C78(*(void **)(a1 + 144), v12, (uint64_t)v28);
  return sub_1019845C4(v29);
}

void sub_10197816C(_Unwind_Exception *a1)
{
  sub_1019845C4(v1);
  _Unwind_Resume(a1);
}

void *sub_101978188(uint64_t a1, int a2, uint64_t a3)
{
  v20[0] = a2;
  uint64_t v3 = a1 + 192;
  uint64_t v4 = *(void *)(a1 + 192);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v7 = (uint64_t **)(a1 + 184);
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 28);
    BOOL v10 = v9 < a2;
    if (v9 >= a2) {
      uint64_t v11 = (uint64_t *)v4;
    }
    else {
      uint64_t v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(void *)(a1 + 144))
  {
LABEL_13:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    char v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      v20[1] = 67240192;
      v20[2] = a2;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::WlanMeasReqParams]", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    uint64_t v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    uint64_t v17 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    uint64_t v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  *(void *)uint64_t buf = v20;
  int v12 = *((_DWORD *)sub_100125FD0(v7, v20, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3321888768;
  v28[2] = sub_101984648;
  v28[3] = &unk_102347B18;
  v28[4] = a1;
  sub_101984974((uint64_t)v29, a3);
  sub_101845C78(*(void **)(a1 + 144), v12, (uint64_t)v28);
  return sub_101984F80(v29);
}

void sub_10197864C(_Unwind_Exception *a1)
{
  sub_101984F80(v1);
  _Unwind_Resume(a1);
}

void sub_101978668(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 704), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102346DE8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNilrInterfaceController::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102346DE8);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNilrInterfaceController::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101978918(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101978824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101978848(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 1240);
  *(void *)(a1 + 1240) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void **)(a1 + 1208);
  if (v3)
  {
    *(void *)(a1 + 1216) = v3;
    operator delete(v3);
  }
  sub_10198CB94(a1 + 800);
  sub_10197D5F8(a1 + 760, *(void **)(a1 + 768));
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 752);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  sub_1017DBD28((void *)(a1 + 712));

  return sub_1000F3950(a1);
}

uint64_t sub_1019788E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 744) + 32);
  if (v1) {
    return v1 + 312;
  }
  else {
    return 0;
  }
}

uint64_t sub_101978900(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 744) + 32);
  if (v1) {
    return v1 + 320;
  }
  else {
    return 0;
  }
}

void sub_101978918(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  BOOL v13 = 0;
  if (*a3 == 4)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102346E08);
    }
    uint64_t v6 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 138477827;
      *(void *)&uint8_t buf[4] = sub_1000E9358(a4);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#timingadvance Asset Harvest notification data: %{private}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_102346E08);
      }
      int v14 = 138477827;
      uint64_t v15 = sub_1000E9358(a4);
      char v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v11);
      if (v11 != buf) {
        free(v11);
      }
    }
    sub_1000E9354();
    if (sub_100012960(a4, "CellHarvest", buf) && sub_1000D2988((uint64_t)buf, "TimingAdvance", &v13)) {
      *(unsigned char *)(a1 + 1237) = v13;
    }
    sub_10013F3C4(buf);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,setTimingAdvanceConfig(allowTimingAdvance)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v14 = 67109120;
    LODWORD(v15) = 0;
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v10);
    if (v10 != buf) {
      free(v10);
    }
  }
  if (sub_1000FED50(a1, 0))
  {
    *(void *)uint64_t buf = &dword_101E49DA0;
    uint64_t v8 = sub_1000FEE0C((uint64_t **)(a1 + 760), &dword_101E49DA0, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019AAD2C((uint64_t)v8[5], &v13);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      LOWORD(v14) = 0;
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrInterfaceController::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v12);
      if (v12 != buf) {
        free(v12);
      }
    }
  }
}

void sub_101978DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_101978E0C(uint64_t a1, signed int *a2, unsigned int a3)
{
  if (!sub_1000FED50(a1, *a2))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      signed int v10 = *a2;
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,#Warning,#EmergSettings, Unexpected instance,%d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_22;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    char v11 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n");
LABEL_32:
    if (v11 != buf) {
      free(v11);
    }
    goto LABEL_22;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    signed int v7 = *a2;
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,handleEmergencySettingsChange(locSettings, reason)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  if (sub_1000FED50(a1, *a2))
  {
    *(void *)uint64_t buf = a2;
    uint64_t v8 = sub_1000FEE0C((uint64_t **)(a1 + 760), a2, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019AAEF4((uint64_t)v8[5], (uint64_t)a2, a3);
    goto LABEL_22;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  int v12 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    char v11 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrInterfaceController::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n");
    goto LABEL_32;
  }
LABEL_22:
  sub_10198F068(a1 + 800, a2, a3);
  uint64_t v13 = *(void *)(*(void *)(a1 + 744) + 40);
  if (v13) {
    sub_1017C4BA4(v13, (uint64_t *)a2, a3);
  }
}

void sub_1019792A0(uint64_t a1, char **a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_RawSuplInit(suplInitBuffer)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    signed int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::processRawSuplInit(const std::vector<uint8_t> &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (sub_1000FED50(a1, 0))
  {
    *(void *)uint64_t buf = &dword_101E49DA0;
    char v5 = sub_1000FEE0C((uint64_t **)(a1 + 760), &dword_101E49DA0, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019AAEEC((uint64_t)v5[5], a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      char v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrInterfaceController::processRawSuplInit(const std::vector<uint8_t> &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  if (sub_1000FED50(a1, 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    signed int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = 1;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_RawSuplInit(suplInitBuffer)", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::processRawSuplInit(const std::vector<uint8_t> &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    if (sub_1000FED50(a1, 1))
    {
      *(void *)uint64_t buf = &dword_101E49DA4;
      uint64_t v8 = sub_1000FEE0C((uint64_t **)(a1 + 760), &dword_101E49DA4, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      sub_1019AAEEC((uint64_t)v8[5], a2);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      int v9 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346DC8);
        }
        uint64_t v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrInterfaceController::processRawSuplInit(const std::vector<uint8_t> &)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

void sub_101979888(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,handleNilrLockoutStatus(lockNilr)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    signed int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::handleNilrLockoutStatus(const BOOL)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (sub_1000FED50(a1, 0))
  {
    *(void *)uint64_t buf = &dword_101E49DA0;
    char v5 = sub_1000FEE0C((uint64_t **)(a1 + 760), &dword_101E49DA0, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019AB22C((uint64_t)v5[5], a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      char v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrInterfaceController::handleNilrLockoutStatus(const BOOL)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  if (sub_1000FED50(a1, 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    signed int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = 1;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,handleNilrLockoutStatus(lockNilr)", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::handleNilrLockoutStatus(const BOOL)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    if (sub_1000FED50(a1, 1))
    {
      *(void *)uint64_t buf = &dword_101E49DA4;
      uint64_t v8 = sub_1000FEE0C((uint64_t **)(a1 + 760), &dword_101E49DA4, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      sub_1019AB22C((uint64_t)v8[5], a2);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      int v9 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346DC8);
        }
        uint64_t v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrInterfaceController::handleNilrLockoutStatus(const BOOL)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

void sub_101979E70(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 1237);
    int v4 = *(unsigned __int8 *)(a1 + 1236);
    *(_DWORD *)uint64_t buf = 67109376;
    int v10 = v3;
    __int16 v11 = 1024;
    int v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#timingadvance,query timing advance,isTimingAdvanceEnabled, %d,isDeviceInRRCState %d ", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    signed int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::queryTimingAdvance()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (sub_1000FF52C() && sub_100119964() && *(unsigned char *)(a1 + 1236))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    char v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v6 = *(_DWORD *)(a1 + 1232);
      *(_DWORD *)uint64_t buf = 67109120;
      int v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#timingadvance,queryTimingAdvance for mav22 TB,siminstance %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::queryTimingAdvance()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    sub_1017C6A98(*(uint64_t **)(*(void *)(a1 + 744) + 40), *(_DWORD *)(a1 + 1232));
  }
  else if (((sub_1000FFFBC() & 1) != 0 || sub_1000FFF30()) {
         && *(unsigned char *)(a1 + 1236)
  }
         && *(_DWORD *)(a1 + 8) == 6)
  {
    sub_10197A1E8(a1, *(_DWORD *)(a1 + 1232));
  }
}

void *sub_10197A1E8(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 744) + 32);
  v4[0] = off_1023489A8;
  v4[1] = a1;
  v4[2] = a2;
  v4[3] = v4;
  sub_101997AA0(v2, a2 != 0, (uint64_t)v4);
  return sub_1017DD2F4(v4);
}

void sub_10197A288(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017DD2F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10197A29C(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  int v5 = *(unsigned __int16 *)(*(void *)a3 + 2);
  int v6 = *(unsigned __int16 *)(*(void *)a3 + 4);
  int v8 = *(_DWORD *)(*(void *)a3 + 8);
  int v7 = *(_DWORD *)(*(void *)a3 + 12);
  int v9 = *(unsigned __int16 *)(*(void *)a3 + 16);
  int v10 = *(unsigned __int8 *)(*(void *)a3 + 18);
  int v11 = *(unsigned __int8 *)(*(void *)a3 + 19);
  int v12 = *(_DWORD *)(*(void *)a3 + 20);
  int v15 = *(_DWORD *)(*(void *)a3 + 24);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v13 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67242497;
    int v18 = a2;
    __int16 v19 = 1025;
    int v20 = v5;
    __int16 v21 = 1025;
    int v22 = v6;
    __int16 v23 = 1026;
    int v24 = v8;
    __int16 v25 = 1026;
    int v26 = v7;
    __int16 v27 = 1026;
    int v28 = v9;
    __int16 v29 = 1026;
    int v30 = v10;
    __int16 v31 = 1026;
    int v32 = v11;
    __int16 v33 = 1026;
    int v34 = v12;
    __int16 v35 = 1026;
    int v36 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#timingadvance,SimInstance,%{public}d,LTE Cell Info,mcc,%{private}hu,mnc,%{private}d,tac,%{public}u,cellid,%{public}d,pci,%{public}d,rsrp,%{public}u,rsrq,%{public}u,ta,%{public}d,dlearfcn,%{public}u", buf, 0x3Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::printTimingAdvanceForIceDevices(SimInstance, std::vector<gnss::Emergency::Supl::LteCellInfo>, int32_t &)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  *a4 = v12;
}

void sub_10197A538(uint64_t a1, unsigned int *a2)
{
  BOOL v4 = sub_100D33A54((uint64_t)a2);
  signed int v5 = sub_1006D40B0(a2);
  int v55 = v5;
  if (!sub_100D33CD4((uint64_t)a2))
  {
    int v6 = 0;
    goto LABEL_6;
  }
  if (*(_DWORD *)(a1 + 1204)) {
    goto LABEL_7;
  }
  if (sub_100D33CB4((uint64_t)a2))
  {
    int v6 = 1;
LABEL_6:
    *(_DWORD *)(a1 + 1204) = v6;
    goto LABEL_7;
  }
  if (sub_100D33CC4((uint64_t)a2))
  {
    int v6 = 2;
    goto LABEL_6;
  }
LABEL_7:
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  int v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100D335B8(a2, &v56);
    int v8 = SHIBYTE(v56.__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = v56.__r_.__value_.__r.__words[0];
    sub_10192B650(*(_DWORD *)(a1 + 1204), &__p);
    int v10 = &v56;
    if (v8 < 0) {
      int v10 = (std::string *)v9;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)uint64_t buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = v5;
    __int16 v60 = 2080;
    uint64_t v61 = v10;
    __int16 v62 = 1024;
    BOOL v63 = v4;
    __int16 v64 = 2080;
    unsigned int v65 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,handleEmergencyStateChange,instance,%d,state,%s,isBasebandEmergency,%d,commType,%s", buf, 0x22u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    sub_100D335B8(a2, &__p);
    int v35 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type v36 = __p.__r_.__value_.__r.__words[0];
    sub_10192B650(*(_DWORD *)(a1 + 1204), v52);
    uint64_t v37 = &__p;
    if (v35 < 0) {
      uint64_t v37 = (std::string *)v36;
    }
    if (v53 >= 0) {
      __int16 v38 = v52;
    }
    else {
      __int16 v38 = (void **)v52[0];
    }
    LODWORD(v56.__r_.__value_.__l.__data_) = 67109890;
    HIDWORD(v56.__r_.__value_.__r.__words[0]) = v5;
    LOWORD(v56.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v56.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v37;
    WORD1(v56.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(v56.__r_.__value_.__r.__words[2]) = v4;
    __int16 v57 = 2080;
    unsigned int v58 = v38;
    uint64_t v39 = (char *)_os_log_send_and_compose_impl();
    if (v53 < 0) {
      operator delete(v52[0]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v39);
    if (v39 != (char *)buf) {
      free(v39);
    }
  }
  if (v5 == 255)
  {
    if (*(unsigned char *)(a1 + 792))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      int v12 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_EmergencyMode(inBasebandEmergency, fCommType)", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346DC8);
        }
        v56.__r_.__value_.__r.__words[0] = 67109120;
        int v41 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v41);
        if (v41 != (char *)buf) {
          free(v41);
        }
      }
      if (sub_1000FED50(a1, 0))
      {
        *(void *)uint64_t buf = &dword_101E49DA0;
        uint64_t v13 = sub_1000FEE0C((uint64_t **)(a1 + 760), &dword_101E49DA0, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        sub_1019AD770((uint64_t)v13[5], v4, *(_DWORD *)(a1 + 1204));
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346DC8);
        }
        int v28 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102346DC8);
          }
          LOWORD(v56.__r_.__value_.__l.__data_) = 0;
          double v48 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrInterfaceController::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v48);
          if (v48 != (char *)buf) {
            free(v48);
          }
        }
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      __int16 v29 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = 1;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_EmergencyMode(inBasebandEmergency, fCommType)", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346DC8);
        }
        v56.__r_.__value_.__r.__words[0] = 0x104000100;
        uint64_t v42 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v42);
        if (v42 != (char *)buf) {
          free(v42);
        }
      }
      if (sub_1000FED50(a1, 1))
      {
        *(void *)uint64_t buf = &dword_101E49DA4;
        int v30 = sub_1000FEE0C((uint64_t **)(a1 + 760), &dword_101E49DA4, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        sub_1019AD770((uint64_t)v30[5], v4, *(_DWORD *)(a1 + 1204));
        goto LABEL_110;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      __int16 v31 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_161;
        }
        goto LABEL_163;
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      int v26 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_EmergencyMode(inBasebandEmergency, fCommType)", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346DC8);
        }
        v56.__r_.__value_.__r.__words[0] = 67109120;
        double v47 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v47);
        if (v47 != (char *)buf) {
          free(v47);
        }
      }
      if (sub_1000FED50(a1, 0))
      {
        *(void *)uint64_t buf = &dword_101E49DA0;
        __int16 v27 = sub_1000FEE0C((uint64_t **)(a1 + 760), &dword_101E49DA0, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        sub_1019AD770((uint64_t)v27[5], v4, *(_DWORD *)(a1 + 1204));
        goto LABEL_110;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      __int16 v33 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_161;
        }
        goto LABEL_163;
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v14 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_EmergencyMode(inBasebandEmergency, fCommType)", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      LODWORD(v56.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(v56.__r_.__value_.__r.__words[0]) = v5;
      __int16 v40 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v40);
      if (v40 != (char *)buf) {
        free(v40);
      }
    }
    if (sub_1000FED50(a1, v5))
    {
      *(void *)uint64_t buf = &v55;
      int v15 = sub_1000FEE0C((uint64_t **)(a1 + 760), &v55, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      sub_1019AD770((uint64_t)v15[5], v4, *(_DWORD *)(a1 + 1204));
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      __int16 v16 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346DC8);
        }
        LOWORD(v56.__r_.__value_.__l.__data_) = 0;
        uint64_t v43 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrInterfaceController::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v43);
        if (v43 != (char *)buf) {
          free(v43);
        }
      }
    }
    if (*(unsigned char *)(a1 + 792)) {
      BOOL v17 = v4;
    }
    else {
      BOOL v17 = 0;
    }
    if (v17)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      int v18 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        if (v55 == 1) {
          int v19 = 0;
        }
        else {
          int v19 = 255;
        }
        if (v55) {
          int v20 = v19;
        }
        else {
          int v20 = 1;
        }
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_EmergencyMode(false, fCommType)", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346DC8);
        }
        if (v55 == 1) {
          int v44 = 0;
        }
        else {
          int v44 = 255;
        }
        if (v55) {
          int v45 = v44;
        }
        else {
          int v45 = 1;
        }
        LODWORD(v56.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(v56.__r_.__value_.__r.__words[0]) = v45;
        double v46 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v46);
        if (v46 != (char *)buf) {
          free(v46);
        }
      }
      if (v55 == 1) {
        int v21 = 0;
      }
      else {
        int v21 = 255;
      }
      if (v55) {
        signed int v22 = v21;
      }
      else {
        signed int v22 = 1;
      }
      if (sub_1000FED50(a1, v22))
      {
        if (v55 == 1) {
          int v23 = 0;
        }
        else {
          int v23 = 255;
        }
        if (v55) {
          int v24 = v23;
        }
        else {
          int v24 = 1;
        }
        LODWORD(v56.__r_.__value_.__l.__data_) = v24;
        *(void *)uint64_t buf = &v56;
        __int16 v25 = sub_1000FEE0C((uint64_t **)(a1 + 760), (int *)&v56, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        sub_1019AD770((uint64_t)v25[5], 0, *(_DWORD *)(a1 + 1204));
        goto LABEL_110;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      int v32 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1)
        {
LABEL_161:
          LOWORD(v56.__r_.__value_.__l.__data_) = 0;
          uint64_t v49 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrInterfaceController::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v49);
          if (v49 != (char *)buf) {
            free(v49);
          }
          goto LABEL_110;
        }
LABEL_163:
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
        goto LABEL_161;
      }
    }
  }
LABEL_110:
  uint64_t v34 = *(void *)(*(void *)(a1 + 744) + 40);
  if (v34)
  {
    long long v50 = *(_OWORD *)a2;
    unsigned int v51 = a2[4];
    sub_1017C44E0(v34, &v50);
  }
}

void sub_10197B658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10197B690(uint64_t a1, unsigned int a2, int a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109376;
    unsigned int v43 = a2;
    __int16 v44 = 1024;
    int v45 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,#ins%d,setNilrActiveStatus,isActive,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v30 = 67109376;
    unsigned int v31 = a2;
    __int16 v32 = 1024;
    int v33 = a3;
    int v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::setNilrActiveStatus(const SimInstance, BOOL)", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
  if (a2) {
    BOOL v7 = *(unsigned char *)(a1 + 792) == 0;
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = !v7;
  if (a2 > 1 || (v8 & 1) == 0) {
    sub_10198AB1C();
  }
  int v9 = *(_DWORD *)(a1 + 784);
  if (v9 == 255) {
    int v10 = a3;
  }
  else {
    int v10 = 0;
  }
  if (v9 == a2) {
    int v11 = a3 ^ 1;
  }
  else {
    int v11 = 0;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  int v12 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = *(_DWORD *)(a1 + 784);
    int v14 = *(_DWORD *)(a1 + 788);
    *(_DWORD *)uint64_t buf = 67110400;
    unsigned int v43 = a2;
    __int16 v44 = 1024;
    int v45 = v10;
    __int16 v46 = 1024;
    int v47 = v11;
    __int16 v48 = 1024;
    int v49 = v13;
    __int16 v50 = 1024;
    int v51 = a3;
    __int16 v52 = 1024;
    int v53 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,#ins%d,isNewInstGettingActivated,%d,isCurrentInstGettingDeactivated,%d,fActiveNilrInst,%d,isActive,%d,fChosenNilrInst,%d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v22 = *(_DWORD *)(a1 + 784);
    int v23 = *(_DWORD *)(a1 + 788);
    int v30 = 67110400;
    unsigned int v31 = a2;
    __int16 v32 = 1024;
    int v33 = v10;
    __int16 v34 = 1024;
    int v35 = v11;
    __int16 v36 = 1024;
    int v37 = v22;
    __int16 v38 = 1024;
    int v39 = a3;
    __int16 v40 = 1024;
    int v41 = v23;
    int v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::setNilrActiveStatus(const SimInstance, BOOL)", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  if (((v10 | v11) & 1) == 0) {
    sub_10198A990();
  }
  if (a3)
  {
    *(_DWORD *)(a1 + 784) = a2;
    *(_DWORD *)(a1 + 788) = a2;
    v29[0] = off_102348A28;
    uint64_t v29[3] = v29;
    uint64_t v15 = *(void *)(a1 + 736);
    if (!v15) {
      sub_10015E48C();
    }
    __int16 v16 = v29;
    (*(void (**)(uint64_t, void *))(*(void *)v15 + 48))(v15, v29);
  }
  else
  {
    *(_DWORD *)(a1 + 784) = 255;
    v28[0] = off_102348AA8;
    v28[3] = v28;
    uint64_t v17 = *(void *)(a1 + 736);
    if (!v17) {
      sub_10015E48C();
    }
    __int16 v16 = v28;
    (*(void (**)(uint64_t, void *))(*(void *)v17 + 48))(v17, v28);
  }
  sub_1017DCC68(v16);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  int v18 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v19 = *(_DWORD *)(a1 + 784);
    int v20 = *(_DWORD *)(a1 + 788);
    *(_DWORD *)uint64_t buf = 67109376;
    unsigned int v43 = v19;
    __int16 v44 = 1024;
    int v45 = v20;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,setNilrActiveStatus,fActiveNilrInst,%d,fChosenNilrInst,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v25 = *(_DWORD *)(a1 + 784);
    int v26 = *(_DWORD *)(a1 + 788);
    int v30 = 67109376;
    unsigned int v31 = v25;
    __int16 v32 = 1024;
    int v33 = v26;
    __int16 v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::setNilrActiveStatus(const SimInstance, BOOL)", "%s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
  }
}

void sub_10197BCAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1017DCC68(va);
  _Unwind_Resume(a1);
}

void sub_10197BCD4(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,resetControlPlaneStatus()", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    char v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::resetControlPlaneStatus()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (sub_1000FED50(a1, 0))
  {
    *(void *)uint64_t buf = &dword_101E49DA0;
    int v3 = sub_1000FEE0C((uint64_t **)(a1 + 760), &dword_101E49DA0, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B7470((uint64_t)v3[5]);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    BOOL v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrInterfaceController::resetControlPlaneStatus()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  if (sub_1000FED50(a1, 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    signed int v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = 1;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,resetControlPlaneStatus()", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::resetControlPlaneStatus()", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    if (sub_1000FED50(a1, 1))
    {
      *(void *)uint64_t buf = &dword_101E49DA4;
      int v6 = sub_1000FEE0C((uint64_t **)(a1 + 760), &dword_101E49DA4, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      sub_1019B7470((uint64_t)v6[5]);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      BOOL v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346DC8);
        }
        int v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrInterfaceController::resetControlPlaneStatus()", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
    }
  }
}

void sub_10197C2A8(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  BOOL v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,getControlPlaneStatusReport(report)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::getControlPlaneStatusReport(CLGnssControlPlaneStatusReport &)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  if (sub_1000FED50(a1, 0))
  {
    *(void *)uint64_t buf = &dword_101E49DA0;
    signed int v5 = sub_1000FEE0C((uint64_t **)(a1 + 760), &dword_101E49DA0, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B764C((uint64_t)v5[5], a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      __int16 v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrInterfaceController::getControlPlaneStatusReport(CLGnssControlPlaneStatusReport &)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  BOOL v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v21 = 1024;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,#ins%d, report status %u", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::getControlPlaneStatusReport(CLGnssControlPlaneStatusReport &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  if (!*(_DWORD *)(a2 + 56) && sub_1000FED50(a1, 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = 1;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,getControlPlaneStatusReport(report)", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::getControlPlaneStatusReport(CLGnssControlPlaneStatusReport &)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    if (sub_1000FED50(a1, 1))
    {
      *(void *)uint64_t buf = &dword_101E49DA4;
      int v10 = sub_1000FEE0C((uint64_t **)(a1 + 760), &dword_101E49DA4, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      sub_1019B764C((uint64_t)v10[5], a2);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      int v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346DC8);
        }
        unsigned int v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrInterfaceController::getControlPlaneStatusReport(CLGnssControlPlaneStatusReport &)", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *(_DWORD *)(a2 + 56);
      *(_DWORD *)uint64_t buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = 1;
      __int16 v21 = 1024;
      int v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,#ins%d, report status %u", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      int v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::getControlPlaneStatusReport(CLGnssControlPlaneStatusReport &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
}

void sub_10197CB60(uint64_t a1, int *a2)
{
  uint64_t v22 = 0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  BOOL v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,getConstellationDenylistMask(dlInstance1)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v23 = 67109120;
    int v24 = 0;
    int v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::getConstellationDenylistMask(uint32_t &)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  if (sub_1000FED50(a1, 0))
  {
    *(void *)uint64_t buf = &dword_101E49DA0;
    signed int v5 = sub_1000FEE0C((uint64_t **)(a1 + 760), &dword_101E49DA0, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B78EC(v5[5], (int *)&v22 + 1);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      LOWORD(v23) = 0;
      int v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrInterfaceController::getConstellationDenylistMask(uint32_t &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  BOOL v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v28 = 1024;
    int v29 = HIDWORD(v22);
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,#ins%d,dlMask,%x", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v23 = 67109376;
    int v24 = 0;
    __int16 v25 = 1024;
    int v26 = HIDWORD(v22);
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::getConstellationDenylistMask(uint32_t &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  if (sub_1000FED50(a1, 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = 1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,getConstellationDenylistMask(dlInstance2)", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      int v23 = 67109120;
      int v24 = 1;
      unsigned int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::getConstellationDenylistMask(uint32_t &)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    if (sub_1000FED50(a1, 1))
    {
      *(void *)uint64_t buf = &dword_101E49DA4;
      int v9 = sub_1000FEE0C((uint64_t **)(a1 + 760), &dword_101E49DA4, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      sub_1019B78EC(v9[5], (int *)&v22);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      int v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102346DC8);
        }
        LOWORD(v23) = 0;
        __int16 v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrInterfaceController::getConstellationDenylistMask(uint32_t &)", "%s\n", v21);
        if (v21 != (char *)buf) {
          free(v21);
        }
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = 1;
      __int16 v28 = 1024;
      int v29 = v22;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,#ins%d,dlMask,%x", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      int v23 = 67109376;
      int v24 = 1;
      __int16 v25 = 1024;
      int v26 = v22;
      int v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::getConstellationDenylistMask(uint32_t &)", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
  }
  *a2 = v22 | HIDWORD(v22);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  int v12 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = *a2;
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,fromCb,dlMask,%x", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v16 = *a2;
    int v23 = 67109120;
    int v24 = v16;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrInterfaceController::getConstellationDenylistMask(uint32_t &)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
}

void sub_10197D568(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10197D598(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10197D5C8(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_10197D5F8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10197D5F8(a1, *a2);
    sub_10197D5F8(a1, a2[1]);
    sub_10197D9E8(a2 + 5, 0);
    operator delete(a2);
  }
}

void *sub_10197D658@<X0>(void *a1@<X1>, unsigned __int8 *a2@<X2>, unsigned __int8 *a3@<X3>, void *a4@<X8>)
{
  int v8 = operator new(0x50uLL);
  uint64_t result = sub_10197D6CC(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_10197D6B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10197D6CC(void *a1, void *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102346E38;
  sub_1018547E0(a1 + 3, *a2, *a3, *a4);
  return a1;
}

void sub_10197D720(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10197D734(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102346E38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10197D754(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102346E38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void *sub_10197D7A8(uint64_t a1)
{
  return sub_10197D7D4((uint64_t)&v2, (void *)(a1 + 24));
}

void *sub_10197D7D4(uint64_t a1, void *a2)
{
  sub_101854870(a2 + 5, 0);
  sub_101854820(a2 + 4, 0);

  return sub_1017DBDAC(a2);
}

void sub_10197D824()
{
}

void *sub_10197D838(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102346E88;
  result[1] = v3;
  return result;
}

uint64_t sub_10197D880(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102346E88;
  a2[1] = v2;
  return result;
}

void sub_10197D8AC(uint64_t a1, unsigned int *a2, unsigned __int8 *a3)
{
}

uint64_t sub_10197D8BC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10197D8FC()
{
}

void sub_10197D90C()
{
}

void *sub_10197D920(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102346F08;
  result[1] = v3;
  return result;
}

uint64_t sub_10197D968(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102346F08;
  a2[1] = v2;
  return result;
}

void sub_10197D994(uint64_t a1, char **a2)
{
}

uint64_t sub_10197D99C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10197D9DC()
{
}

uint64_t sub_10197D9E8(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1019AAA18();
    operator delete();
  }
  return result;
}

void sub_10197DA3C()
{
}

void *sub_10197DA50(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102346F98;
  result[1] = v3;
  return result;
}

uint64_t sub_10197DA98(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102346F98;
  a2[1] = v2;
  return result;
}

void sub_10197DAC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  BOOL v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(v3 + 788);
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,wlanMeasurementHandler(measResult)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Supl::WlanMeasurementList &) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (sub_1000FED50(v3, *(_DWORD *)(v3 + 788)))
  {
    *(void *)uint64_t buf = v3 + 788;
    int v6 = sub_1000FEE0C((uint64_t **)(v3 + 760), (int *)(v3 + 788), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B7960((uint64_t)v6[5], a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    BOOL v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Supl::WlanMeasurementList &) const", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

uint64_t sub_10197DDEC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10197DE2C()
{
}

void *sub_10197DE38(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10197DEC0()
{
}

void *sub_10197DED4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102347028;
  result[1] = v3;
  return result;
}

uint64_t sub_10197DF1C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102347028;
  a2[1] = v2;
  return result;
}

uint64_t sub_10197DF48(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  BOOL v7 = &dword_101E49DA0;
  BOOL v4 = sub_1000FEE0C((uint64_t **)(v3 + 760), &dword_101E49DA0, (uint64_t)&unk_101D0B290, &v7);
  sub_1019B212C((uint64_t)v4[5], v2);
  uint64_t result = sub_1000FED50(v3, 1);
  if (result)
  {
    BOOL v7 = &dword_101E49DA4;
    int v6 = sub_1000FEE0C((uint64_t **)(v3 + 760), &dword_101E49DA4, (uint64_t)&unk_101D0B290, &v7);
    return sub_1019B212C((uint64_t)v6[5], v2 != 0);
  }
  return result;
}

uint64_t sub_10197DFF8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10197E038()
{
}

void *sub_10197E044(uint64_t a1, AriMsg *a2)
{
  BOOL v4 = *(NSObject ***)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = AriMsg::getGmid(a2) >> 26;
    LOWORD(v17[0]) = 1024;
    *(_DWORD *)((char *)v17 + 2) = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v12 = 67109376;
    unsigned int v13 = AriMsg::getGmid(a2) >> 26;
    __int16 v14 = 1024;
    unsigned int v15 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::ResetDataReqParams]_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_10189DC24(a2, buf);
  int v6 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_10197E2D4;
  block[3] = &unk_102347098;
  sub_1017CB4F8((uint64_t)v10, a1 + 40);
  v10[4] = *(void *)buf;
  int v11 = v17[0];
  dispatch_async(v6, block);
  return sub_1017C7344(v10);
}

uint64_t sub_10197E2D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    sub_10015E48C();
  }
  int v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_10197E32C(uint64_t a1, uint64_t a2)
{
  return sub_1017CB4F8(a1 + 32, a2 + 32);
}

void *sub_10197E338(uint64_t a1)
{
  return sub_1017C7344((void *)(a1 + 32));
}

uint64_t sub_10197E340(uint64_t a1, uint64_t a2)
{
  return sub_1017CB4F8(a1 + 40, a2 + 40);
}

void *sub_10197E34C(uint64_t a1)
{
  return sub_1017C7344((void *)(a1 + 40));
}

void sub_10197E358()
{
}

void *sub_10197E36C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102347108;
  result[1] = v3;
  return result;
}

uint64_t sub_10197E3B4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102347108;
  a2[1] = v2;
  return result;
}

void sub_10197E3E0(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  BOOL v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = *a2;
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = 4;
    __int16 v20 = 1024;
    unsigned int v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,Ari,Ind,NilrController::Ind,ResetDataReqParams,id,%d,inst,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v10 = *a2;
    int v15 = 67109376;
    int v16 = 4;
    __int16 v17 = 1024;
    unsigned int v18 = v10;
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::ResetDataReqParams &) const", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  signed int v6 = sub_100554F14(*a2);
  int v14 = v6;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  BOOL v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_ResetDataReq(nilr)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v15 = 67109120;
    int v16 = v6;
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::ResetDataReqParams &) const", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  if (sub_1000FED50(v3, v6))
  {
    *(void *)uint64_t buf = &v14;
    int v8 = sub_1000FEE0C((uint64_t **)(v3 + 760), &v14, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B0F78((uint64_t)v8[5]);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      LOWORD(v15) = 0;
      unsigned int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::ResetDataReqParams &) const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

uint64_t sub_10197E87C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10197E8BC()
{
}

void *sub_10197E8C8(uint64_t a1, AriMsg *a2)
{
  BOOL v4 = *(NSObject ***)(a1 + 32);
  WORD2(v9) = -1;
  DWORD2(v9) = -1;
  WORD6(v9) = -1;
  BYTE14(v9) = 0;
  LODWORD(v10) = -1;
  WORD2(v10) = 0;
  BYTE6(v10) = 0;
  *((void *)&v10 + 1) = -1;
  LODWORD(v11) = -16777216;
  BYTE4(v11) = -1;
  *((void *)&v11 + 1) = -1;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  unsigned int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109376;
    unsigned int v24 = AriMsg::getGmid(a2) >> 26;
    __int16 v25 = 1024;
    unsigned int v26 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v19 = 67109376;
    unsigned int v20 = AriMsg::getGmid(a2) >> 26;
    __int16 v21 = 1024;
    unsigned int v22 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::PositionRequestFromModem]_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_10189DB4C(a2, (uint64_t)&v9);
  signed int v6 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_10197EBB0;
  block[3] = &unk_102347188;
  sub_1017CB7FC((uint64_t)v14, a1 + 40);
  long long v15 = v9;
  long long v16 = v10;
  long long v17 = v11;
  int v18 = v12;
  dispatch_async(v6, block);
  return sub_1017C73C8(v14);
}

uint64_t sub_10197EBB0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    sub_10015E48C();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_10197EC08(uint64_t a1, uint64_t a2)
{
  return sub_1017CB7FC(a1 + 32, a2 + 32);
}

void *sub_10197EC14(uint64_t a1)
{
  return sub_1017C73C8((void *)(a1 + 32));
}

uint64_t sub_10197EC1C(uint64_t a1, uint64_t a2)
{
  return sub_1017CB7FC(a1 + 40, a2 + 40);
}

void *sub_10197EC28(uint64_t a1)
{
  return sub_1017C73C8((void *)(a1 + 40));
}

void sub_10197EC34()
{
}

void *sub_10197EC48(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1023471F8;
  result[1] = v3;
  return result;
}

uint64_t sub_10197EC90(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023471F8;
  a2[1] = v2;
  return result;
}

void sub_10197ECBC(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  BOOL v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = *a2;
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = 5;
    __int16 v20 = 1024;
    unsigned int v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,Ari,Ind,NilrController::Ind,PositionRequestFromModem,id,%d,inst,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v10 = *a2;
    int v15 = 67109376;
    int v16 = 5;
    __int16 v17 = 1024;
    unsigned int v18 = v10;
    long long v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PositionRequestFromModem &) const", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  signed int v6 = sub_100554F14(*a2);
  int v14 = v6;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  BOOL v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_CplaneRequest(nilr)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v15 = 67109120;
    int v16 = v6;
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PositionRequestFromModem &) const", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  if (sub_1000FED50(v3, v6))
  {
    *(void *)uint64_t buf = &v14;
    int v8 = sub_1000FEE0C((uint64_t **)(v3 + 760), &v14, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B0DBC((uint64_t)v8[5], (uint64_t)a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    long long v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      LOWORD(v15) = 0;
      unsigned int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PositionRequestFromModem &) const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

uint64_t sub_10197F158(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10197F198()
{
}

void *sub_10197F1A4(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  unsigned int v5 = *(NSObject ***)(v3 + 32);
  __src[4] = -1;
  uint64_t v6 = 8;
  *(void *)&long long v7 = 0x8000000080000000;
  *((void *)&v7 + 1) = 0x8000000080000000;
  do
  {
    int v8 = &__src[v6];
    *(_OWORD *)int v8 = xmmword_101E34EE0;
    *((_OWORD *)v8 + 1) = v7;
    *((_OWORD *)v8 + 2) = xmmword_101E34EF0;
    *((void *)v8 + 6) = 0x8000800080008000;
    *((_DWORD *)v8 + 14) = 0x80000000;
    *((_WORD *)v8 + 30) = -1;
    *((_DWORD *)v8 + 16) = -1;
    v8[68] = 127;
    *((_DWORD *)v8 + 18) = -1;
    v6 += 96;
    v8[76] = -1;
  }
  while (v8 + 96 != &__src[1544]);
  *(void *)&__src[1544] = -1;
  *(_DWORD *)&__src[1552] = -1;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  long long v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v10 = AriMsg::getGmid(v2) >> 26;
    unsigned int Gmid = AriMsg::getGmid(v2);
    *(_DWORD *)uint64_t buf = 67109376;
    unsigned int v26 = v10;
    __int16 v27 = 1024;
    int v28 = (Gmid >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v14 = AriMsg::getGmid(v2) >> 26;
    unsigned int v15 = AriMsg::getGmid(v2);
    int v21 = 67109376;
    unsigned int v22 = v14;
    __int16 v23 = 1024;
    int v24 = (v15 >> 15) & 0x3FF;
    int v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::GpsNavigationModelFromModem]_block_invoke", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  sub_10189E184(v2, (uint64_t)__src);
  int v12 = *v5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_10197F4E8;
  block[3] = &unk_102347278;
  sub_1017CBE04((uint64_t)v19, v4 + 40);
  memcpy(v20, __src, sizeof(v20));
  dispatch_async(v12, block);
  return sub_1017C744C(v19);
}

uint64_t sub_10197F4E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    sub_10015E48C();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_10197F540(uint64_t a1, uint64_t a2)
{
  return sub_1017CBE04(a1 + 32, a2 + 32);
}

void *sub_10197F54C(uint64_t a1)
{
  return sub_1017C744C((void *)(a1 + 32));
}

uint64_t sub_10197F554(uint64_t a1, uint64_t a2)
{
  return sub_1017CBE04(a1 + 40, a2 + 40);
}

void *sub_10197F560(uint64_t a1)
{
  return sub_1017C744C((void *)(a1 + 40));
}

void sub_10197F56C()
{
}

void *sub_10197F580(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1023472E8;
  result[1] = v3;
  return result;
}

uint64_t sub_10197F5C8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023472E8;
  a2[1] = v2;
  return result;
}

void sub_10197F5F4(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = *a2;
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = 21;
    __int16 v20 = 1024;
    unsigned int v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,Ari,Ind,NilrController::Ind,GpsNavigationModelFromModem,id,%d,inst,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v10 = *a2;
    int v15 = 67109376;
    int v16 = 21;
    __int16 v17 = 1024;
    unsigned int v18 = v10;
    long long v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GpsNavigationModelFromModem &) const", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  signed int v6 = sub_100554F14(*a2);
  int v14 = v6;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  long long v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_AssistanceEph(nilr)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v15 = 67109120;
    int v16 = v6;
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GpsNavigationModelFromModem &) const", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  if (sub_1000FED50(v3, v6))
  {
    *(void *)uint64_t buf = &v14;
    int v8 = sub_1000FEE0C((uint64_t **)(v3 + 760), &v14, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B12F8((uint64_t)v8[5], (uint64_t)a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    long long v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      LOWORD(v15) = 0;
      unsigned int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GpsNavigationModelFromModem &) const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

uint64_t sub_10197FA90(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10197FAD0()
{
}

void *sub_10197FADC(uint64_t a1, AriMsg *a2)
{
  uint64_t v4 = 0;
  unsigned int v5 = *(NSObject ***)(a1 + 32);
  *(_DWORD *)&__src[4] = -1;
  __src[8] = -1;
  *(_DWORD *)&__src[12] = 0;
  *(_WORD *)&__src[16] = -1;
  *(_DWORD *)&__src[20] = -1;
  *(_WORD *)&__src[24] = -1;
  *(void *)&__src[28] = -1;
  *(_WORD *)&__src[36] = -1;
  *(_DWORD *)&__src[40] = -1;
  do
  {
    signed int v6 = &__src[v4];
    *(void *)(v6 + 44) = 0xFFFFFFFF7FFFFFFFLL;
    v6[52] = -1;
    *(_DWORD *)(v6 + 54) = -1;
    *((_WORD *)v6 + 29) = -1;
    v4 += 20;
  }
  while (v4 != 320);
  __src[364] = -1;
  *(void *)&__src[368] = -1;
  *(_DWORD *)&__src[376] = -1;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  long long v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v8 = AriMsg::getGmid(a2) >> 26;
    unsigned int Gmid = AriMsg::getGmid(a2);
    *(_DWORD *)uint64_t buf = 67109376;
    unsigned int v24 = v8;
    __int16 v25 = 1024;
    int v26 = (Gmid >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v12 = AriMsg::getGmid(a2) >> 26;
    unsigned int v13 = AriMsg::getGmid(a2);
    int v19 = 67109376;
    unsigned int v20 = v12;
    __int16 v21 = 1024;
    int v22 = (v13 >> 15) & 0x3FF;
    int v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::GpsAcqAssistanceFromModem]_block_invoke", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  sub_10189E800(a2, (uint64_t)__src);
  unsigned int v10 = *v5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_10197FDF8;
  block[3] = &unk_102347368;
  sub_10197FE78((uint64_t)v17, a1 + 40);
  memcpy(v18, __src, sizeof(v18));
  dispatch_async(v10, block);
  return sub_101980484(v17);
}

uint64_t sub_10197FDF8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    sub_10015E48C();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_10197FE50(uint64_t a1, uint64_t a2)
{
  return sub_10197FE78(a1 + 32, a2 + 32);
}

void *sub_10197FE5C(uint64_t a1)
{
  return sub_101980484((void *)(a1 + 32));
}

uint64_t sub_10197FE64(uint64_t a1, uint64_t a2)
{
  return sub_10197FE78(a1 + 40, a2 + 40);
}

void *sub_10197FE70(uint64_t a1)
{
  return sub_101980484((void *)(a1 + 40));
}

uint64_t sub_10197FE78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10197FF14()
{
}

void *sub_10197FF28(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1023473D8;
  result[1] = v3;
  return result;
}

uint64_t sub_10197FF70(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023473D8;
  a2[1] = v2;
  return result;
}

void sub_10197FF9C(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = *a2;
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = 18;
    __int16 v20 = 1024;
    unsigned int v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,Ari,Ind,NilrController::Ind,GpsAcqAssistanceFromModem,id,%d,inst,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v10 = *a2;
    int v15 = 67109376;
    int v16 = 18;
    __int16 v17 = 1024;
    unsigned int v18 = v10;
    long long v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GpsAcqAssistanceFromModem &) const", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  signed int v6 = sub_100554F14(*a2);
  int v14 = v6;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  long long v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_AssistanceAcquisition(nilr)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v15 = 67109120;
    int v16 = v6;
    unsigned int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GpsAcqAssistanceFromModem &) const", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  if (sub_1000FED50(v3, v6))
  {
    *(void *)uint64_t buf = &v14;
    unsigned int v8 = sub_1000FEE0C((uint64_t **)(v3 + 760), &v14, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B1608((uint64_t)v8[5], (uint64_t)a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    long long v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      LOWORD(v15) = 0;
      unsigned int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GpsAcqAssistanceFromModem &) const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

uint64_t sub_101980438(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101980478()
{
}

void *sub_101980484(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_101980508(uint64_t a1, AriMsg *a2)
{
  uint64_t v4 = *(NSObject ***)(a1 + 32);
  *(void *)&uint64_t v9[4] = -1;
  *(void *)&v9[12] = 0xFFFFFFFF7FFFFFFFLL;
  *(void *)&v9[24] = -1;
  int v10 = -1;
  *(_WORD *)&v9[20] = -1;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  unsigned int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109376;
    unsigned int v21 = AriMsg::getGmid(a2) >> 26;
    __int16 v22 = 1024;
    unsigned int v23 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v16 = 67109376;
    unsigned int v17 = AriMsg::getGmid(a2) >> 26;
    __int16 v18 = 1024;
    unsigned int v19 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    unsigned int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::ReferenceLocationFromModem]_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_10189DEF0(a2, (uint64_t)v9);
  signed int v6 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1019807CC;
  block[3] = &unk_102347458;
  sub_1017CC108((uint64_t)v12, a1 + 40);
  long long v13 = *(_OWORD *)v9;
  long long v14 = *(_OWORD *)&v9[16];
  int v15 = v10;
  dispatch_async(v6, block);
  return sub_1017C74D0(v12);
}

uint64_t sub_1019807CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    sub_10015E48C();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_101980824(uint64_t a1, uint64_t a2)
{
  return sub_1017CC108(a1 + 32, a2 + 32);
}

void *sub_101980830(uint64_t a1)
{
  return sub_1017C74D0((void *)(a1 + 32));
}

uint64_t sub_101980838(uint64_t a1, uint64_t a2)
{
  return sub_1017CC108(a1 + 40, a2 + 40);
}

void *sub_101980844(uint64_t a1)
{
  return sub_1017C74D0((void *)(a1 + 40));
}

void sub_101980850()
{
}

void *sub_101980864(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1023474C8;
  result[1] = v3;
  return result;
}

uint64_t sub_1019808AC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023474C8;
  a2[1] = v2;
  return result;
}

void sub_1019808D8(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = *a2;
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = 23;
    __int16 v20 = 1024;
    unsigned int v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,Ari,Ind,NilrController::Ind,ReferenceLocationFromModem,id,%d,inst,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v10 = *a2;
    int v15 = 67109376;
    int v16 = 23;
    __int16 v17 = 1024;
    unsigned int v18 = v10;
    long long v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::ReferenceLocationFromModem &) const", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  signed int v6 = sub_100554F14(*a2);
  int v14 = v6;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  long long v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_AssistanceLocation(nilr)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v15 = 67109120;
    int v16 = v6;
    unsigned int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::ReferenceLocationFromModem &) const", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  if (sub_1000FED50(v3, v6))
  {
    *(void *)uint64_t buf = &v14;
    unsigned int v8 = sub_1000FEE0C((uint64_t **)(v3 + 760), &v14, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B1918((uint64_t)v8[5], (uint64_t)a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    long long v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      LOWORD(v15) = 0;
      long long v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::ReferenceLocationFromModem &) const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

uint64_t sub_101980D74(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101980DB4()
{
}

void *sub_101980DC0(uint64_t a1, AriMsg *a2)
{
  uint64_t v4 = *(NSObject ***)(a1 + 32);
  *(void *)&__src[4] = -1;
  uint64_t v5 = 12;
  do
  {
    signed int v6 = &__src[v5];
    *(_WORD *)signed int v6 = -1;
    v6[2] = -1;
    *(void *)(v6 + 4) = -1;
    v6[12] = -1;
    v5 += 16;
  }
  while (v6 + 16 != &__src[268]);
  __src[268] = -1;
  *(void *)&__src[272] = -1;
  *(_DWORD *)&__src[280] = -1;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  long long v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v8 = AriMsg::getGmid(a2) >> 26;
    unsigned int Gmid = AriMsg::getGmid(a2);
    *(_DWORD *)uint64_t buf = 67109376;
    unsigned int v24 = v8;
    __int16 v25 = 1024;
    int v26 = (Gmid >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v12 = AriMsg::getGmid(a2) >> 26;
    unsigned int v13 = AriMsg::getGmid(a2);
    int v19 = 67109376;
    unsigned int v20 = v12;
    __int16 v21 = 1024;
    int v22 = (v13 >> 15) & 0x3FF;
    int v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::GpsReferenceTimeFromModem]_block_invoke", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  sub_10189DC60(a2, (uint64_t)__src);
  unsigned int v10 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1019810BC;
  block[3] = &unk_102347548;
  sub_1017CC40C((uint64_t)v17, a1 + 40);
  memcpy(v18, __src, sizeof(v18));
  dispatch_async(v10, block);
  return sub_1017C7554(v17);
}

uint64_t sub_1019810BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    sub_10015E48C();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_101981114(uint64_t a1, uint64_t a2)
{
  return sub_1017CC40C(a1 + 32, a2 + 32);
}

void *sub_101981120(uint64_t a1)
{
  return sub_1017C7554((void *)(a1 + 32));
}

uint64_t sub_101981128(uint64_t a1, uint64_t a2)
{
  return sub_1017CC40C(a1 + 40, a2 + 40);
}

void *sub_101981134(uint64_t a1)
{
  return sub_1017C7554((void *)(a1 + 40));
}

void sub_101981140()
{
}

void *sub_101981154(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1023475B8;
  result[1] = v3;
  return result;
}

uint64_t sub_10198119C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023475B8;
  a2[1] = v2;
  return result;
}

void sub_1019811C8(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = *a2;
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = 24;
    __int16 v20 = 1024;
    unsigned int v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,Ari,Ind,NilrController::Ind,GpsReferenceTimeFromModem,id,%d,inst,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v10 = *a2;
    int v15 = 67109376;
    int v16 = 24;
    __int16 v17 = 1024;
    unsigned int v18 = v10;
    long long v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GpsReferenceTimeFromModem &) const", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  signed int v6 = sub_100554F14(*a2);
  int v14 = v6;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  long long v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_AssistanceTime(nilr)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v15 = 67109120;
    int v16 = v6;
    unsigned int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GpsReferenceTimeFromModem &) const", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  if (sub_1000FED50(v3, v6))
  {
    *(void *)uint64_t buf = &v14;
    unsigned int v8 = sub_1000FEE0C((uint64_t **)(v3 + 760), &v14, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B1C28((uint64_t)v8[5], (uint64_t)a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    long long v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      LOWORD(v15) = 0;
      unsigned int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GpsReferenceTimeFromModem &) const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

uint64_t sub_101981664(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1019816A4()
{
}

void *sub_1019816B0(uint64_t a1, AriMsg *a2)
{
  uint64_t v4 = *(NSObject ***)(a1 + 32);
  *(void *)&v9[20] = 0;
  *(_DWORD *)&v9[16] = 0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  unsigned int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109376;
    unsigned int v18 = AriMsg::getGmid(a2) >> 26;
    __int16 v19 = 1024;
    unsigned int v20 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v13 = 67109376;
    unsigned int v14 = AriMsg::getGmid(a2) >> 26;
    __int16 v15 = 1024;
    unsigned int v16 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    unsigned int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::GnssAbortReqParams]_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_10189E670(a2, (uint64_t)v9);
  signed int v6 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_101981954;
  block[3] = &unk_102347638;
  sub_1019819D4((uint64_t)v11, a1 + 40);
  v12[0] = *(_OWORD *)v9;
  *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)&v9[12];
  dispatch_async(v6, block);
  return sub_101981FE0(v11);
}

uint64_t sub_101981954(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    sub_10015E48C();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_1019819AC(uint64_t a1, uint64_t a2)
{
  return sub_1019819D4(a1 + 32, a2 + 32);
}

void *sub_1019819B8(uint64_t a1)
{
  return sub_101981FE0((void *)(a1 + 32));
}

uint64_t sub_1019819C0(uint64_t a1, uint64_t a2)
{
  return sub_1019819D4(a1 + 40, a2 + 40);
}

void *sub_1019819CC(uint64_t a1)
{
  return sub_101981FE0((void *)(a1 + 40));
}

uint64_t sub_1019819D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_101981A70()
{
}

void *sub_101981A84(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1023476A8;
  result[1] = v3;
  return result;
}

uint64_t sub_101981ACC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023476A8;
  a2[1] = v2;
  return result;
}

void sub_101981AF8(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = *a2;
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = 16;
    __int16 v20 = 1024;
    unsigned int v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,Ari,Ind,NilrController::Ind,GnssAbortReqParams,id,%d,inst,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v10 = *a2;
    int v15 = 67109376;
    int v16 = 16;
    __int16 v17 = 1024;
    unsigned int v18 = v10;
    long long v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GnssAbortReqParams &) const", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  signed int v6 = sub_100554F14(*a2);
  int v14 = v6;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  long long v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_SessionAbort(nilr)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v15 = 67109120;
    int v16 = v6;
    unsigned int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GnssAbortReqParams &) const", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  if (sub_1000FED50(v3, v6))
  {
    *(void *)uint64_t buf = &v14;
    unsigned int v8 = sub_1000FEE0C((uint64_t **)(v3 + 760), &v14, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B1F38((uint64_t)v8[5], a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    long long v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      LOWORD(v15) = 0;
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GnssAbortReqParams &) const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

uint64_t sub_101981F94(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101981FD4()
{
}

void *sub_101981FE0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_101982064(uint64_t a1, AriMsg *a2)
{
  uint64_t v4 = *(NSObject ***)(a1 + 32);
  *(void *)((char *)&v9 + 4) = -1;
  HIDWORD(v9) = -1;
  DWORD1(v10) = 0;
  *((void *)&v10 + 1) = 0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  unsigned int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109376;
    unsigned int v20 = AriMsg::getGmid(a2) >> 26;
    __int16 v21 = 1024;
    unsigned int v22 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v15 = 67109376;
    unsigned int v16 = AriMsg::getGmid(a2) >> 26;
    __int16 v17 = 1024;
    unsigned int v18 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    unsigned int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::DiscardedPosSessionIndParams]_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_10189E73C(a2, (uint64_t)&v9);
  signed int v6 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_101982310;
  block[3] = &unk_102347728;
  sub_101982390((uint64_t)v12, a1 + 40);
  long long v13 = v9;
  long long v14 = v10;
  dispatch_async(v6, block);
  return sub_10198299C(v12);
}

uint64_t sub_101982310(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    sub_10015E48C();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_101982368(uint64_t a1, uint64_t a2)
{
  return sub_101982390(a1 + 32, a2 + 32);
}

void *sub_101982374(uint64_t a1)
{
  return sub_10198299C((void *)(a1 + 32));
}

uint64_t sub_10198237C(uint64_t a1, uint64_t a2)
{
  return sub_101982390(a1 + 40, a2 + 40);
}

void *sub_101982388(uint64_t a1)
{
  return sub_10198299C((void *)(a1 + 40));
}

uint64_t sub_101982390(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10198242C()
{
}

void *sub_101982440(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102347798;
  result[1] = v3;
  return result;
}

uint64_t sub_101982488(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102347798;
  a2[1] = v2;
  return result;
}

void sub_1019824B4(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = *a2;
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = 29;
    __int16 v20 = 1024;
    unsigned int v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,Ari,Ind,NilrController::Ind,DiscardedPosSessionIndParams,id,%d,inst,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v10 = *a2;
    int v15 = 67109376;
    int v16 = 29;
    __int16 v17 = 1024;
    unsigned int v18 = v10;
    long long v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::DiscardedPosSessionIndParams &) const", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  signed int v6 = sub_100554F14(*a2);
  int v14 = v6;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  long long v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,log_DiscardedSessionInd(nilr)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v15 = 67109120;
    int v16 = v6;
    unsigned int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::DiscardedPosSessionIndParams &) const", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  if (sub_1000FED50(v3, v6))
  {
    *(void *)uint64_t buf = &v14;
    unsigned int v8 = sub_1000FEE0C((uint64_t **)(v3 + 760), &v14, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019AE97C((uint64_t)v8[5], a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    long long v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      LOWORD(v15) = 0;
      long long v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::DiscardedPosSessionIndParams &) const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

uint64_t sub_101982950(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101982990()
{
}

void *sub_10198299C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_101982A20(uint64_t a1, AriMsg *a2)
{
  uint64_t v4 = *(NSObject ***)(a1 + 32);
  *(void *)((char *)&v9 + 4) = -1;
  HIDWORD(v9) = -1;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  unsigned int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109376;
    unsigned int v20 = AriMsg::getGmid(a2) >> 26;
    __int16 v21 = 1024;
    unsigned int v22 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v15 = 67109376;
    unsigned int v16 = AriMsg::getGmid(a2) >> 26;
    __int16 v17 = 1024;
    unsigned int v18 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    unsigned int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::PosLocationRequestStatusIndParams]_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_10189E7C0(a2, &v9);
  signed int v6 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_101982CC0;
  block[3] = &unk_102347818;
  sub_1017CBB00((uint64_t)v12, a1 + 40);
  long long v13 = v9;
  uint64_t v14 = v10;
  dispatch_async(v6, block);
  return sub_1017C75D8(v12);
}

uint64_t sub_101982CC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    sub_10015E48C();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_101982D18(uint64_t a1, uint64_t a2)
{
  return sub_1017CBB00(a1 + 32, a2 + 32);
}

void *sub_101982D24(uint64_t a1)
{
  return sub_1017C75D8((void *)(a1 + 32));
}

uint64_t sub_101982D2C(uint64_t a1, uint64_t a2)
{
  return sub_1017CBB00(a1 + 40, a2 + 40);
}

void *sub_101982D38(uint64_t a1)
{
  return sub_1017C75D8((void *)(a1 + 40));
}

void sub_101982D44()
{
}

void *sub_101982D58(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102347888;
  result[1] = v3;
  return result;
}

uint64_t sub_101982DA0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102347888;
  a2[1] = v2;
  return result;
}

void sub_101982DCC(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = *a2;
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = 28;
    __int16 v20 = 1024;
    unsigned int v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,Ari,Ind,NilrController::Ind,PosLocationRequestStatusIndParams,id,%d,inst,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v10 = *a2;
    int v15 = 67109376;
    int v16 = 28;
    __int16 v17 = 1024;
    unsigned int v18 = v10;
    long long v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PosLocationRequestStatusIndParams &) const", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  signed int v6 = sub_100554F14(*a2);
  int v14 = v6;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  long long v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_BasebandCplaneInd(nilr)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v15 = 67109120;
    int v16 = v6;
    unsigned int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PosLocationRequestStatusIndParams &) const", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  if (sub_1000FED50(v3, v6))
  {
    *(void *)uint64_t buf = &v14;
    unsigned int v8 = sub_1000FEE0C((uint64_t **)(v3 + 760), &v14, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B0774((uint64_t)v8[5], a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    long long v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      LOWORD(v15) = 0;
      long long v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PosLocationRequestStatusIndParams &) const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

uint64_t sub_101983268(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1019832A8()
{
}

void *sub_1019832B4(uint64_t a1, AriMsg *a2)
{
  uint64_t v4 = *(NSObject ***)(a1 + 32);
  *(void *)((char *)&v9 + 4) = 0;
  WORD6(v9) = -1;
  LODWORD(v10) = -1;
  WORD2(v10) = -1;
  *((void *)&v10 + 1) = -1;
  LOWORD(v11) = -1;
  HIDWORD(v11) = -1;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  unsigned int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109376;
    unsigned int v22 = AriMsg::getGmid(a2) >> 26;
    __int16 v23 = 1024;
    unsigned int v24 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v17 = 67109376;
    unsigned int v18 = AriMsg::getGmid(a2) >> 26;
    __int16 v19 = 1024;
    unsigned int v20 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    unsigned int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::CellFTAssistanceFromModem]_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_10189EA70(a2, (uint64_t)&v9);
  signed int v6 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_10198357C;
  block[3] = &unk_102347908;
  sub_1019835FC((uint64_t)v13, a1 + 40);
  long long v14 = v9;
  long long v15 = v10;
  uint64_t v16 = v11;
  dispatch_async(v6, block);
  return sub_101983C08(v13);
}

uint64_t sub_10198357C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    sub_10015E48C();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_1019835D4(uint64_t a1, uint64_t a2)
{
  return sub_1019835FC(a1 + 32, a2 + 32);
}

void *sub_1019835E0(uint64_t a1)
{
  return sub_101983C08((void *)(a1 + 32));
}

uint64_t sub_1019835E8(uint64_t a1, uint64_t a2)
{
  return sub_1019835FC(a1 + 40, a2 + 40);
}

void *sub_1019835F4(uint64_t a1)
{
  return sub_101983C08((void *)(a1 + 40));
}

uint64_t sub_1019835FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_101983698()
{
}

void *sub_1019836AC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102347978;
  result[1] = v3;
  return result;
}

uint64_t sub_1019836F4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102347978;
  a2[1] = v2;
  return result;
}

void sub_101983720(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = *a2;
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = 30;
    __int16 v20 = 1024;
    unsigned int v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,Ari,Ind,NilrController::Ind,CellFTAssistanceFromModem,id,%d,inst,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v10 = *a2;
    int v15 = 67109376;
    int v16 = 30;
    __int16 v17 = 1024;
    unsigned int v18 = v10;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::CellFTAssistanceFromModem &) const", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  signed int v6 = sub_100554F14(*a2);
  int v14 = v6;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  long long v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_CellFT1xAssistance(nilr)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v15 = 67109120;
    int v16 = v6;
    unsigned int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::CellFTAssistanceFromModem &) const", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  if (sub_1000FED50(v3, v6))
  {
    *(void *)uint64_t buf = &v14;
    unsigned int v8 = sub_1000FEE0C((uint64_t **)(v3 + 760), &v14, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B479C((uint64_t)v8[5], (uint64_t)a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    long long v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      LOWORD(v15) = 0;
      long long v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::CellFTAssistanceFromModem &) const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

uint64_t sub_101983BBC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101983BFC()
{
}

void *sub_101983C08(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_101983C8C(uint64_t a1, AriMsg *a2)
{
  uint64_t v4 = *(NSObject ***)(a1 + 32);
  *(void *)((char *)v9 + 4) = -1;
  HIDWORD(v9[0]) = -1;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  unsigned int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109376;
    unsigned int v21 = AriMsg::getGmid(a2) >> 26;
    __int16 v22 = 1024;
    unsigned int v23 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v16 = 67109376;
    unsigned int v17 = AriMsg::getGmid(a2) >> 26;
    __int16 v18 = 1024;
    unsigned int v19 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    unsigned int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::PosIs801GpsLocationIndParams]_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_10189E6FC(a2, (uint64_t)v9);
  signed int v6 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_101983F38;
  block[3] = &unk_1023479F8;
  sub_101983FB8((uint64_t)v11, a1 + 40);
  long long v12 = v9[0];
  long long v13 = v9[1];
  long long v14 = v9[2];
  long long v15 = v9[3];
  dispatch_async(v6, block);
  return sub_1019845C4(v11);
}

uint64_t sub_101983F38(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    sub_10015E48C();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_101983F90(uint64_t a1, uint64_t a2)
{
  return sub_101983FB8(a1 + 32, a2 + 32);
}

void *sub_101983F9C(uint64_t a1)
{
  return sub_1019845C4((void *)(a1 + 32));
}

uint64_t sub_101983FA4(uint64_t a1, uint64_t a2)
{
  return sub_101983FB8(a1 + 40, a2 + 40);
}

void *sub_101983FB0(uint64_t a1)
{
  return sub_1019845C4((void *)(a1 + 40));
}

uint64_t sub_101983FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_101984054()
{
}

void *sub_101984068(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102347A68;
  result[1] = v3;
  return result;
}

uint64_t sub_1019840B0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102347A68;
  a2[1] = v2;
  return result;
}

void sub_1019840DC(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = *a2;
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = 31;
    __int16 v22 = 1024;
    unsigned int v23 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,Ari,Ind,NilrController::Ind,PosIs801GpsLocationIndParams,id,%d,inst,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v12 = *a2;
    int v17 = 67109376;
    int v18 = 31;
    __int16 v19 = 1024;
    unsigned int v20 = v12;
    long long v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PosIs801GpsLocationIndParams &) const", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  signed int v6 = sub_100554F14(*a2);
  int v16 = v6;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  long long v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,log_1xFinalFixFromNetwork(nilr)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v17 = 67109120;
    int v18 = v6;
    long long v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PosIs801GpsLocationIndParams &) const", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  if (sub_1000FED50(v3, v6))
  {
    *(void *)uint64_t buf = &v16;
    unsigned int v8 = sub_1000FEE0C((uint64_t **)(v3 + 760), &v16, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B0180((uint64_t)v8[5], (uint64_t)a2, v9, v10);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    uint64_t v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      LOWORD(v17) = 0;
      long long v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PosIs801GpsLocationIndParams &) const", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
}

uint64_t sub_101984578(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1019845B8()
{
}

void *sub_1019845C4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_101984648(uint64_t a1, AriMsg *a2)
{
  uint64_t v4 = *(NSObject ***)(a1 + 32);
  *(void *)((char *)&v9 + 4) = -1;
  HIDWORD(v9) = -1;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  unsigned int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109376;
    unsigned int v20 = AriMsg::getGmid(a2) >> 26;
    __int16 v21 = 1024;
    unsigned int v22 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v15 = 67109376;
    unsigned int v16 = AriMsg::getGmid(a2) >> 26;
    __int16 v17 = 1024;
    unsigned int v18 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    unsigned int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = gnss::Emergency::Cplane::WlanMeasReqParams]_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_10189F03C(a2, (uint64_t)&v9);
  signed int v6 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1019848F4;
  block[3] = &unk_102347AE8;
  sub_101984974((uint64_t)v12, a1 + 40);
  long long v13 = v9;
  int v14 = v10;
  dispatch_async(v6, block);
  return sub_101984F80(v12);
}

uint64_t sub_1019848F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    sub_10015E48C();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_10198494C(uint64_t a1, uint64_t a2)
{
  return sub_101984974(a1 + 32, a2 + 32);
}

void *sub_101984958(uint64_t a1)
{
  return sub_101984F80((void *)(a1 + 32));
}

uint64_t sub_101984960(uint64_t a1, uint64_t a2)
{
  return sub_101984974(a1 + 40, a2 + 40);
}

void *sub_10198496C(uint64_t a1)
{
  return sub_101984F80((void *)(a1 + 40));
}

uint64_t sub_101984974(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_101984A10()
{
}

void *sub_101984A24(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102347B58;
  result[1] = v3;
  return result;
}

uint64_t sub_101984A6C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102347B58;
  a2[1] = v2;
  return result;
}

void sub_101984A98(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = *a2;
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = 33;
    __int16 v20 = 1024;
    unsigned int v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,Ari,Ind,NilrController::Ind,WlanMeasReqParams,id,%d,inst,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v10 = *a2;
    int v15 = 67109376;
    int v16 = 33;
    __int16 v17 = 1024;
    unsigned int v18 = v10;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::WlanMeasReqParams &) const", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  signed int v6 = sub_100554F14(*a2);
  int v14 = v6;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  long long v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_CplaneWlanRequest(nilr)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v15 = 67109120;
    int v16 = v6;
    unsigned int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::WlanMeasReqParams &) const", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  if (sub_1000FED50(v3, v6))
  {
    *(void *)uint64_t buf = &v14;
    unsigned int v8 = sub_1000FEE0C((uint64_t **)(v3 + 760), &v14, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B22F0((uint64_t)v8[5], (int *)a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    long long v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      LOWORD(v15) = 0;
      long long v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::WlanMeasReqParams &) const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

uint64_t sub_101984F34(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101984F74()
{
}

void *sub_101984F80(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_101985008()
{
}

void *sub_10198501C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102347BE8;
  result[1] = v3;
  return result;
}

uint64_t sub_101985064(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102347BE8;
  a2[1] = v2;
  return result;
}

void sub_101985090(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = sub_100554F14(*a2);
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_ResetDataReq(req)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v9 = sub_100554F14(*a2);
    v12[0] = 67109120;
    v12[1] = v9;
    unsigned int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::ResetDataReqParams &) const", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  signed int v6 = sub_100554F14(*a2);
  if (sub_1000FED50(v3, v6))
  {
    v12[0] = sub_100554F14(*a2);
    *(void *)uint64_t buf = v12;
    long long v7 = sub_1000FEE0C((uint64_t **)(v3 + 760), v12, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B0F78((uint64_t)v7[5]);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      LOWORD(v12[0]) = 0;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::ResetDataReqParams &) const", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

uint64_t sub_1019853E0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101985420()
{
}

void sub_101985430()
{
}

void *sub_101985444(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102347C68;
  result[1] = v3;
  return result;
}

uint64_t sub_10198548C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102347C68;
  a2[1] = v2;
  return result;
}

void sub_1019854B8(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = sub_100554F14(*a2);
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_AssistanceTime(data)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v9 = sub_100554F14(*a2);
    v12[0] = 67109120;
    v12[1] = v9;
    unsigned int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GpsReferenceTimeFromModem &) const", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  signed int v6 = sub_100554F14(*a2);
  if (sub_1000FED50(v3, v6))
  {
    v12[0] = sub_100554F14(*a2);
    *(void *)uint64_t buf = v12;
    long long v7 = sub_1000FEE0C((uint64_t **)(v3 + 760), v12, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B1C28((uint64_t)v7[5], (uint64_t)a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      LOWORD(v12[0]) = 0;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GpsReferenceTimeFromModem &) const", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

uint64_t sub_101985808(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101985848()
{
}

void sub_101985858()
{
}

void *sub_10198586C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102347CE8;
  result[1] = v3;
  return result;
}

uint64_t sub_1019858B4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102347CE8;
  a2[1] = v2;
  return result;
}

void sub_1019858E0(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = sub_100554F14(*a2);
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_CplaneRequest(req)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v9 = sub_100554F14(*a2);
    v12[0] = 67109120;
    v12[1] = v9;
    unsigned int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PositionRequestFromModem &) const", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  signed int v6 = sub_100554F14(*a2);
  if (sub_1000FED50(v3, v6))
  {
    v12[0] = sub_100554F14(*a2);
    *(void *)uint64_t buf = v12;
    long long v7 = sub_1000FEE0C((uint64_t **)(v3 + 760), v12, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B0DBC((uint64_t)v7[5], (uint64_t)a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      LOWORD(v12[0]) = 0;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PositionRequestFromModem &) const", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

uint64_t sub_101985C30(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101985C70()
{
}

void sub_101985C80()
{
}

void *sub_101985C94(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102347D68;
  result[1] = v3;
  return result;
}

uint64_t sub_101985CDC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102347D68;
  a2[1] = v2;
  return result;
}

void sub_101985D08(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = sub_100554F14(*a2);
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_AssistanceEph(data)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v9 = sub_100554F14(*a2);
    v12[0] = 67109120;
    v12[1] = v9;
    unsigned int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GpsNavigationModelFromModem &) const", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  signed int v6 = sub_100554F14(*a2);
  if (sub_1000FED50(v3, v6))
  {
    v12[0] = sub_100554F14(*a2);
    *(void *)uint64_t buf = v12;
    long long v7 = sub_1000FEE0C((uint64_t **)(v3 + 760), v12, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B12F8((uint64_t)v7[5], (uint64_t)a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      LOWORD(v12[0]) = 0;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::GpsNavigationModelFromModem &) const", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

uint64_t sub_101986058(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101986098()
{
}

void sub_1019860A8()
{
}

void *sub_1019860BC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102347DE8;
  result[1] = v3;
  return result;
}

uint64_t sub_101986104(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102347DE8;
  a2[1] = v2;
  return result;
}

void sub_101986130(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = sub_100554F14(*a2);
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_AssistanceLocation(data)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v9 = sub_100554F14(*a2);
    v12[0] = 67109120;
    v12[1] = v9;
    unsigned int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::ReferenceLocationFromModem &) const", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  signed int v6 = sub_100554F14(*a2);
  if (sub_1000FED50(v3, v6))
  {
    v12[0] = sub_100554F14(*a2);
    *(void *)uint64_t buf = v12;
    long long v7 = sub_1000FEE0C((uint64_t **)(v3 + 760), v12, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B1918((uint64_t)v7[5], (uint64_t)a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      LOWORD(v12[0]) = 0;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::ReferenceLocationFromModem &) const", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

uint64_t sub_101986480(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1019864C0()
{
}

void sub_1019864D0()
{
}

void *sub_1019864E4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102347E68;
  result[1] = v3;
  return result;
}

uint64_t sub_10198652C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102347E68;
  a2[1] = v2;
  return result;
}

void sub_101986558(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = sub_100554F14(*a2);
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,process_BasebandCplaneInd(ind)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v9 = sub_100554F14(*a2);
    v12[0] = 67109120;
    v12[1] = v9;
    unsigned int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PosLocationRequestStatusIndParams &) const", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  signed int v6 = sub_100554F14(*a2);
  if (sub_1000FED50(v3, v6))
  {
    v12[0] = sub_100554F14(*a2);
    *(void *)uint64_t buf = v12;
    long long v7 = sub_1000FEE0C((uint64_t **)(v3 + 760), v12, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B0774((uint64_t)v7[5], a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      LOWORD(v12[0]) = 0;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PosLocationRequestStatusIndParams &) const", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

uint64_t sub_1019868A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1019868E8()
{
}

void sub_1019868F8()
{
}

void *sub_10198690C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102347EE8;
  result[1] = v3;
  return result;
}

uint64_t sub_101986954(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102347EE8;
  a2[1] = v2;
  return result;
}

void *sub_101986980(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v4[0] = off_102347F58;
  v4[1] = v2;
  v4[3] = v4;
  sub_101958024(a2, (uint64_t)v4);
  return sub_1019605C4(v4);
}

void sub_101986A10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019605C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101986A24(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101986A64()
{
}

void sub_101986A74()
{
}

void *sub_101986A88(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102347F58;
  result[1] = v3;
  return result;
}

uint64_t sub_101986AD0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102347F58;
  a2[1] = v2;
  return result;
}

void sub_101986AFC(uint64_t a1, _DWORD **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(v3 + 788);
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,nilrAssistanceRequestHandler(pAssistReq)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Cplane::AssistanceNeededReport *) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (sub_1000FED50(v3, *(_DWORD *)(v3 + 788)))
  {
    *(void *)uint64_t buf = v3 + 788;
    signed int v6 = sub_1000FEE0C((uint64_t **)(v3 + 760), (int *)(v3 + 788), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B275C((uint64_t)v6[5], v2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    long long v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Cplane::AssistanceNeededReport *) const", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

uint64_t sub_101986E24(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101986E64()
{
}

void sub_101986E74()
{
}

void *sub_101986E88(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102347FF8;
  result[1] = v3;
  return result;
}

uint64_t sub_101986ED0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102347FF8;
  a2[1] = v2;
  return result;
}

void *sub_101986EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v4[0] = off_102348068;
  v4[1] = v2;
  v4[3] = v4;
  sub_10195811C(a2, (uint64_t)v4);
  return sub_1019606CC(v4);
}

void sub_101986F8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019606CC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101986FA0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101986FE0()
{
}

void sub_101986FF0()
{
}

void *sub_101987004(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102348068;
  result[1] = v3;
  return result;
}

uint64_t sub_10198704C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102348068;
  a2[1] = v2;
  return result;
}

void sub_101987078(uint64_t a1, _DWORD **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  signed int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(v5 + 788);
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,nilrPositionHandler(pFix, pvtFix)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PositionReport *, const gnss::Fix &) const", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (sub_1000FED50(v5, *(_DWORD *)(v5 + 788)))
  {
    *(void *)uint64_t buf = v5 + 788;
    unsigned int v8 = sub_1000FEE0C((uint64_t **)(v5 + 760), (int *)(v5 + 788), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B2920((uint64_t)v8[5], v4, a3);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Cplane::PositionReport *, const gnss::Fix &) const", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

uint64_t sub_1019873A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1019873E8()
{
}

void sub_1019873F8()
{
}

void *sub_10198740C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102348108;
  result[1] = v3;
  return result;
}

uint64_t sub_101987454(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102348108;
  a2[1] = v2;
  return result;
}

void *sub_101987480(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v4[0] = off_102348178;
  v4[1] = v2;
  v4[3] = v4;
  sub_101958198(a2, (uint64_t)v4);
  return sub_101960750(v4);
}

void sub_101987510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101960750((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101987524(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101987564()
{
}

void sub_101987574()
{
}

void *sub_101987588(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102348178;
  result[1] = v3;
  return result;
}

uint64_t sub_1019875D0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102348178;
  a2[1] = v2;
  return result;
}

void sub_1019875FC(uint64_t a1, _DWORD **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(v3 + 788);
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,nilrMeasurementHandler(pMeas)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Cplane::MeasurementReport *) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (sub_1000FED50(v3, *(_DWORD *)(v3 + 788)))
  {
    *(void *)uint64_t buf = v3 + 788;
    signed int v6 = sub_1000FEE0C((uint64_t **)(v3 + 760), (int *)(v3 + 788), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B2AF4((uint64_t)v6[5], v2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Cplane::MeasurementReport *) const", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

uint64_t sub_101987924(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101987964()
{
}

void sub_101987974()
{
}

void *sub_101987988(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102348218;
  result[1] = v3;
  return result;
}

uint64_t sub_1019879D0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102348218;
  a2[1] = v2;
  return result;
}

void *sub_1019879FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v4[0] = off_102348288;
  v4[1] = v2;
  v4[3] = v4;
  sub_101958214(a2, (uint64_t)v4);
  return sub_1019607D4(v4);
}

void sub_101987A8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019607D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101987AA0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101987AE0()
{
}

void sub_101987AF0()
{
}

void *sub_101987B04(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102348288;
  result[1] = v3;
  return result;
}

uint64_t sub_101987B4C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102348288;
  a2[1] = v2;
  return result;
}

void sub_101987B78(uint64_t a1, _DWORD **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(v3 + 788);
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,nilrMeasurementReportWithEstimateHandler(pMeasReportWithEstimate)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Cplane::MeasurementReportWithEstimate *) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (sub_1000FED50(v3, *(_DWORD *)(v3 + 788)))
  {
    *(void *)uint64_t buf = v3 + 788;
    signed int v6 = sub_1000FEE0C((uint64_t **)(v3 + 760), (int *)(v3 + 788), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B2CB8((uint64_t)v6[5], v2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Cplane::MeasurementReportWithEstimate *) const", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

uint64_t sub_101987EA0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101987EE0()
{
}

void sub_101987EF0()
{
}

void *sub_101987F04(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102348328;
  result[1] = v3;
  return result;
}

uint64_t sub_101987F4C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102348328;
  a2[1] = v2;
  return result;
}

void *sub_101987F78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v4[0] = off_102348398;
  v4[1] = v2;
  v4[3] = v4;
  sub_101958290(a2, (uint64_t)v4);
  return sub_101960858(v4);
}

void sub_101988008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101960858((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10198801C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10198805C()
{
}

void sub_10198806C()
{
}

void *sub_101988080(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102348398;
  result[1] = v3;
  return result;
}

uint64_t sub_1019880C8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102348398;
  a2[1] = v2;
  return result;
}

void sub_1019880F4(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v5 = *a2;
  int v6 = *a4;
  uint64_t v7 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  unsigned int v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *(_DWORD *)(v7 + 788);
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,nilrReportHandler(pReport, filename, isOrbitFile)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::SummaryReport *, const std::string &, BOOL) const", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  if (sub_1000FED50(v7, *(_DWORD *)(v7 + 788)))
  {
    *(void *)uint64_t buf = v7 + 788;
    unsigned int v10 = sub_1000FEE0C((uint64_t **)(v7 + 760), (int *)(v7 + 788), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B2E7C((uint64_t)v10[5], v5, a3, v6 != 0);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    uint64_t v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      long long v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::SummaryReport *, const std::string &, BOOL) const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

uint64_t sub_10198843C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10198847C()
{
}

void sub_10198848C()
{
}

void *sub_1019884A0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102348438;
  result[1] = v3;
  return result;
}

uint64_t sub_1019884E8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102348438;
  a2[1] = v2;
  return result;
}

void *sub_101988514(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v4[0] = off_1023484A8;
  v4[1] = v2;
  v4[3] = v4;
  sub_10195DD68(a2, (uint64_t)v4);
  return sub_101960AB8(v4);
}

void sub_1019885A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101960AB8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1019885B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1019885F8()
{
}

void sub_101988608()
{
}

void *sub_10198861C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1023484A8;
  result[1] = v3;
  return result;
}

uint64_t sub_101988664(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023484A8;
  a2[1] = v2;
  return result;
}

void sub_101988690(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(v3 + 788);
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,updateSessionStatus(suplStatusReport)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Supl::SessionStatus &) const", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  if (sub_1000FED50(v3, *(_DWORD *)(v3 + 788)))
  {
    *(void *)uint64_t buf = v3 + 788;
    int v6 = sub_1000FEE0C((uint64_t **)(v3 + 760), (int *)(v3 + 788), (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5];
    long long v7 = a2[7];
    long long v20 = a2[6];
    long long v21 = v7;
    long long v22 = a2[8];
    long long v8 = a2[3];
    long long v16 = a2[2];
    long long v17 = v8;
    long long v9 = a2[5];
    long long v18 = a2[4];
    long long v19 = v9;
    long long v10 = a2[1];
    *(_OWORD *)uint64_t buf = *a2;
    long long v15 = v10;
    sub_1019B4ECC((uint64_t)v6, buf);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    uint64_t v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      long long v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Supl::SessionStatus &) const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

uint64_t sub_1019889E0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101988A20()
{
}

void sub_101988A30()
{
}

void *sub_101988A44(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102348548;
  result[1] = v3;
  return result;
}

uint64_t sub_101988A8C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102348548;
  a2[1] = v2;
  return result;
}

void *sub_101988AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v4[0] = off_1023485B8;
  v4[1] = v2;
  v4[3] = v4;
  sub_10195DDE4(a2, (uint64_t)v4);
  return sub_1019609B0(v4);
}

void sub_101988B48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019609B0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101988B5C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101988B9C()
{
}

void sub_101988BAC()
{
}

void *sub_101988BC0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1023485B8;
  result[1] = v3;
  return result;
}

uint64_t sub_101988C08(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023485B8;
  a2[1] = v2;
  return result;
}

uint64_t sub_101988C34(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(v1 + 788);
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,suplLocationIdRequestHandler()", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    long long v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()() const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (sub_1000FED50(v1, *(_DWORD *)(v1 + 788)))
  {
    *(void *)uint64_t buf = v1 + 788;
    uint64_t v4 = sub_1000FEE0C((uint64_t **)(v1 + 760), (int *)(v1 + 788), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B4960((uint64_t)v4[5]);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      long long v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()() const", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  return 1;
}

uint64_t sub_101988F50(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101988F90()
{
}

void sub_101988FA0()
{
}

void *sub_101988FB4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102348658;
  result[1] = v3;
  return result;
}

uint64_t sub_101988FFC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102348658;
  a2[1] = v2;
  return result;
}

void *sub_101989028(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v4[0] = off_1023486C8;
  v4[1] = v2;
  v4[3] = v4;
  sub_1019580A0(a2, (uint64_t)v4);
  return sub_101960648(v4);
}

void sub_1019890B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101960648((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1019890CC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10198910C()
{
}

void sub_10198911C()
{
}

void *sub_101989130(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1023486C8;
  result[1] = v3;
  return result;
}

uint64_t sub_101989178(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023486C8;
  a2[1] = v2;
  return result;
}

void sub_1019891A4(uint64_t a1, _DWORD **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(v3 + 788);
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,processFineTimeAssistance1x(ftAssist)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    long long v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Cplane::CellFTAssistanceRequest *) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (sub_1000FED50(v3, *(_DWORD *)(v3 + 788)))
  {
    *(void *)uint64_t buf = v3 + 788;
    int v6 = sub_1000FEE0C((uint64_t **)(v3 + 760), (int *)(v3 + 788), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019AB584((uint64_t)v6[5], v2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    long long v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      long long v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Cplane::CellFTAssistanceRequest *) const", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

uint64_t sub_1019894CC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10198950C()
{
}

void sub_10198951C()
{
}

void *sub_101989530(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102348768;
  result[1] = v3;
  return result;
}

uint64_t sub_101989578(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102348768;
  a2[1] = v2;
  return result;
}

void *sub_1019895A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v4[0] = off_1023487D8;
  v4[1] = v2;
  v4[3] = v4;
  sub_10195CA10(a2, (uint64_t)v4);
  return sub_10196092C(v4);
}

void sub_101989634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10196092C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101989648(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101989688()
{
}

void sub_101989698()
{
}

void *sub_1019896AC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1023487D8;
  result[1] = v3;
  return result;
}

uint64_t sub_1019896F4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023487D8;
  a2[1] = v2;
  return result;
}

void sub_101989720(uint64_t a1, uint64_t a2, signed int *a3, int *a4, uint64_t *a5)
{
  signed int v6 = *a3;
  int v7 = *a4;
  int v16 = *a3;
  uint64_t v8 = *(void *)(a1 + 8);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102348848);
  }
  long long v9 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v6;
    __int16 v22 = 1024;
    int v23 = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,#supl,decodedSuplInit,ins,%d,index,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102348848);
    }
    int v17 = 67109376;
    signed int v18 = v6;
    __int16 v19 = 1024;
    int v20 = v7;
    long long v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(gnss::Emergency::Supl::DecodeResult, SimInstance, gnss::Emergency::Supl::SuplInitIndex, const gnss::Emergency::Supl::Init &) const", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  long long v10 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,dispatch_decodedSuplInit(index, decodedSuplInit)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v17 = 67109120;
    signed int v18 = v6;
    int v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(gnss::Emergency::Supl::DecodeResult, SimInstance, gnss::Emergency::Supl::SuplInitIndex, const gnss::Emergency::Supl::Init &) const", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  if (sub_1000FED50(v8, v6))
  {
    *(void *)uint64_t buf = &v16;
    uint64_t v11 = sub_1000FEE0C((uint64_t **)(v8 + 760), &v16, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B4CE0((uint64_t)v11[5], v7, a5);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      LOWORD(v17) = 0;
      long long v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(gnss::Emergency::Supl::DecodeResult, SimInstance, gnss::Emergency::Supl::SuplInitIndex, const gnss::Emergency::Supl::Init &) const", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
}

uint64_t sub_101989BBC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101989BFC()
{
}

void sub_101989C08(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_101989C3C()
{
}

void *sub_101989C50(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102348898;
  result[1] = v3;
  return result;
}

uint64_t sub_101989C98(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102348898;
  a2[1] = v2;
  return result;
}

void *sub_101989CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v4[0] = off_102348908;
  v4[1] = v2;
  v4[3] = v4;
  sub_10195DE60(a2, (uint64_t)v4);
  return sub_101960A34(v4);
}

void sub_101989D54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101960A34((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101989D68(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101989DA8()
{
}

void sub_101989DB8()
{
}

void *sub_101989DCC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102348908;
  result[1] = v3;
  return result;
}

uint64_t sub_101989E14(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102348908;
  a2[1] = v2;
  return result;
}

void sub_101989E40(uint64_t a1, __int16 *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102348848);
  }
  uint64_t v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,#supl,#wlan,suplWlanMeasRequestHandler", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102348848);
    }
    long long v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Supl::WlanMeasurementRequest &) const", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(v3 + 788);
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#nilr,#nifc,invoke,%d,suplWlanMeasRequestHandler(wlanMeasRequest)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    long long v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Supl::WlanMeasurementRequest &) const", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (sub_1000FED50(v3, *(_DWORD *)(v3 + 788)))
  {
    *(void *)uint64_t buf = v3 + 788;
    int v7 = sub_1000FEE0C((uint64_t **)(v3 + 760), (int *)(v3 + 788), (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_1019B4B1C((uint64_t)v7[5], a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    uint64_t v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Invalid instance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLNilrInterfaceController::CLNilrInterfaceController(id<CLIntersiloUniverse>, BOOL, BOOL, CLGnssDaemonDevice::ExecuteWrapper, CLGnssDaemonDevice::EmergencyAWDCallback)::(anonymous class)::operator()(CLGnssDaemonDevice &)::(anonymous class)::operator()(const gnss::Emergency::Supl::WlanMeasurementRequest &) const", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

uint64_t sub_10198A298(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10198A2D8()
{
}

void sub_10198A2E8()
{
}

__n128 sub_10198A2FC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1023489A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10198A348(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1023489A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10198A378(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
  int v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)uint64_t buf = 67240449;
    int v23 = v8;
    __int16 v24 = 1025;
    int v25 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#timingadvance,SimInstance,%{public}d,isServingCellLTE,%{private}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    int v15 = *(_DWORD *)(a1 + 16);
    LODWORD(__p) = 67240449;
    HIDWORD(__p) = v15;
    LOWORD(v20) = 1025;
    *(_DWORD *)((char *)&v20 + 2) = v5;
    int v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::queryTimingAdvanceForIceDevices(SimInstance)::(anonymous class)::operator()(BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &) const", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  if (v5 && *(void *)a3 != *(void *)(a3 + 8))
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    if (v6 + 1208 != a3) {
      sub_100ADA2D8((char *)(v6 + 1208), *(char **)a3, *(void *)(a3 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2));
    }
    v18[0] = 0;
    int v10 = *(_DWORD *)(a1 + 16);
    int v20 = 0;
    uint64_t v21 = 0;
    std::string __p = 0;
    uint64_t v11 = sub_100D69FEC(&__p, *(const void **)(v6 + 1208), *(void *)(v6 + 1216), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v6 + 1216) - *(void *)(v6 + 1208)) >> 2));
    sub_10197A29C((uint64_t)v11, v10, (uint64_t)&__p, v18);
    if (__p)
    {
      int v20 = __p;
      operator delete(__p);
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102346DC8);
    }
    unsigned int v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v23 = v18[0];
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#timingadvance,ta,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
      int v13 = v18[0];
      v18[1] = 67240192;
      v18[2] = v18[0];
      int v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrInterfaceController::queryTimingAdvanceForIceDevices(SimInstance)::(anonymous class)::operator()(BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &) const", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    else
    {
      int v13 = v18[0];
    }
    id v14 = [[objc_msgSend(*(id *)(v6 + 704), "vendor") proxyForService:@"CLTelephonyService"];
    *(_DWORD *)uint64_t buf = 16 * v13;
    CFAbsoluteTime v26 = Current;
    __int16 v27 = 1;
    [v14 updateTAInfo:buf];
  }
}

void sub_10198A788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10198A7AC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10198A7EC()
{
}

void sub_10198A7FC()
{
}

void *sub_10198A810()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_102348A28;
  return result;
}

void sub_10198A848(uint64_t a1, void *a2)
{
  *a2 = off_102348A28;
}

void sub_10198A870(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10198A878(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10198A8B8()
{
}

void sub_10198A8C8()
{
}

void *sub_10198A8DC()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_102348AA8;
  return result;
}

void sub_10198A914(uint64_t a1, void *a2)
{
  *a2 = off_102348AA8;
}

uint64_t *sub_10198A93C(uint64_t a1, uint64_t a2)
{
  return sub_10195B298(a2);
}

uint64_t sub_10198A944(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10198A984()
{
}

void sub_10198A990()
{
  if (qword_1024193D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100857B88())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"InvalidActivationSequence\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 984)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "InvalidActivationSequence", "{\"msg%{public}.0s\":\"InvalidActivationSequence\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 984), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"InvalidActivationSequence\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 639;
    int v20 = "setNilrActiveStatus";
    signed int v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/NILR/CLNilrInterfaceController.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
}

void sub_10198AB1C()
{
  if (qword_1024193D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100857B88())
    {
      sub_1001DB29C();
      sub_1001DB33C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Invalid Instance\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    if (os_signpost_enabled(*(os_log_t *)(v0 + 984)))
    {
      sub_1001DB29C();
      sub_1001E9A98((void *)&_mh_execute_header, v7, v8, v9, "Invalid Instance", "{\"msg%{public}.0s\":\"Invalid Instance\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102346DC8);
      }
    }
    if (os_log_type_enabled(*(os_log_t *)(v0 + 984), OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      sub_1001DB35C((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Invalid Instance\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, (uint64_t)v18, v19, (uint64_t)v20, v21, v22);
    }
    uint64_t v19 = 624;
    int v20 = "setNilrActiveStatus";
    signed int v18 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/NILR/CLNilrInterfaceController.mm";
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1024193D0, &stru_102346DC8);
  }
}

void sub_10198ACA8(uint64_t a1, uint64_t a2, char a3)
{
  *(_OWORD *)(a1 + 40) = unk_101E4F8E4;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 24) = xmmword_101E4F8D4;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = qword_10248AB78;
  if (byte_10248AB80[23] < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 96), *(void **)byte_10248AB80, *(unint64_t *)&byte_10248AB80[8]);
  }
  else
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)byte_10248AB80;
    *(void *)(a1 + 112) = *(void *)&byte_10248AB80[16];
  }
  long long v5 = xmmword_10248ABA8;
  *(_OWORD *)(a1 + 120) = xmmword_10248AB98;
  *(_OWORD *)(a1 + 136) = v5;
  *(_OWORD *)(a1 + 152) = xmmword_10248ABB8;
  *(void *)(a1 + 168) = qword_10248ABC8;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 220) = a3;
  *(void *)(a1 + 224) = 0;
  sub_100134750(&v7, "#wlan,CLNilrWlanScanner");
  uint64_t v6 = a1;
  operator new();
}

void sub_10198B6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_1000D7F78((void ***)va);
  uint64_t v16 = *(void *)(v14 + 16);
  *(void *)(v14 + 16) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t **sub_10198B780(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  int v18 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    int v4 = a4;
    long long v5 = a3;
    int v7 = a2;
    uint64_t v6 = a1;
    if (qword_1024193D0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1019918D0(qword_1024193D0 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1024193D0, &stru_102348BD8);
LABEL_3:
  int v8 = qword_1024193D8;
  os_log_type_t v9 = *(unsigned char *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v9))
  {
    int v10 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      int v10 = (void *)*v10;
    }
    sub_100134750(__p, (&off_102348C28)[v7]);
    if (SBYTE3(v23) >= 0) {
      int v11 = __p;
    }
    else {
      int v11 = *(unsigned char **)__p;
    }
    *(_DWORD *)uint64_t buf = 136315650;
    *(void *)&uint8_t buf[4] = v10;
    __int16 v25 = 1024;
    int v26 = v7;
    __int16 v27 = 2080;
    int v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v23) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348BD8);
    }
    int v13 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      int v13 = (void *)*v13;
    }
    sub_100134750(v16, (&off_102348C28)[v7]);
    if (v17 >= 0) {
      uint64_t v14 = v16;
    }
    else {
      uint64_t v14 = (void **)v16[0];
    }
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v13;
    __int16 v20 = 1024;
    int v21 = v7;
    __int16 v22 = 2080;
    int v23 = v14;
    int v15 = (char *)_os_log_send_and_compose_impl();
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLNilrWlanScanner>::setStateHandler(State, StateHandler) [T = CLNilrWlanScanner]", "%s\n", v15);
    if (v15 != buf) {
      free(v15);
    }
  }
  *(void *)uint64_t buf = &v18;
  __n128 result = sub_1000C5658((uint64_t **)(v6 + 8), &v18, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

uint64_t sub_10198BA60(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 2:
      uint64_t result = sub_10198CBAC(a1);
      if (result)
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102348B38);
        }
        int v3 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#wlan,LPPR13 feature enabled", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102348B38);
          }
          int v8 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrWlanScanner::State CLNilrWlanScanner::handler_Disabled(CLNilrWlanScanner::Event)", "%s\n", v8);
          if (v8 != (char *)buf) {
            free(v8);
          }
        }
        uint64_t result = 1;
      }
      break;
    case 3:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102348B38);
      }
      int v4 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#Warning,#wlan request in disabled mode", buf, 2u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          goto LABEL_37;
        }
        goto LABEL_29;
      }
      break;
    case 4:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102348B38);
      }
      long long v5 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#Warning,#wlan response in disabled mode", buf, 2u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          goto LABEL_37;
        }
        goto LABEL_29;
      }
      break;
    case 5:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102348B38);
      }
      uint64_t v6 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#Warning,#wlan request timeout in disabled mode", buf, 2u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
LABEL_37:
        }
          dispatch_once(&qword_1024193E0, &stru_102348B38);
LABEL_29:
        int v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrWlanScanner::State CLNilrWlanScanner::handler_Disabled(CLNilrWlanScanner::Event)", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
        goto LABEL_31;
      }
      break;
    default:
LABEL_31:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_10198BF0C(uint64_t a1, int a2)
{
  uint64_t result = 1;
  switch(a2)
  {
    case 0:
      sub_10198CD34(a1);
      return 1;
    case 2:
      if (sub_10198CBAC(a1)) {
        return 1;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102348B38);
      }
      int v4 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#wlan,LPPR13 feature disabled", buf, 2u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102348B38);
        }
        long long v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrWlanScanner::State CLNilrWlanScanner::handler_Idle(CLNilrWlanScanner::Event)", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
        return 0;
      }
      return result;
    case 3:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102348B38);
      }
      uint64_t v6 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#wlan request", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102348B38);
        }
        int v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrWlanScanner::State CLNilrWlanScanner::handler_Idle(CLNilrWlanScanner::Event)", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
      sub_10198CED4(a1);
      if (sub_10198D090(a1)) {
        return 2;
      }
      sub_10198D248(a1);
      sub_10198D458(a1);
      return 1;
    case 4:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102348B38);
      }
      int v7 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#Warning,#wlan response in Idle state", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_34;
      }
      goto LABEL_43;
    case 5:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102348B38);
      }
      int v8 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#Warning,#wlan request timeout in Idle state", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 == -1) {
        goto LABEL_34;
      }
LABEL_43:
      dispatch_once(&qword_1024193E0, &stru_102348B38);
LABEL_34:
      os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrWlanScanner::State CLNilrWlanScanner::handler_Idle(CLNilrWlanScanner::Event)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
      return 1;
    default:
      return result;
  }
}

uint64_t sub_10198C468(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      sub_10198D610(a1 + 232, 5, *(double *)(a1 + 224));
      return 2;
    case 1:
      sub_10198E0FC(a1 + 232, 5);
      sub_10198D458(a1);
      sub_10198CD34(a1);
      return 2;
    case 2:
      if (sub_10198CBAC(a1)) {
        return 2;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102348B38);
      }
      int v7 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#wlan,LPPR13 feature disabled", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102348B38);
        }
        int v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrWlanScanner::State CLNilrWlanScanner::handler_Session(CLNilrWlanScanner::Event)", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
      sub_10198D248(a1);
      return 0;
    case 3:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102348B38);
      }
      int v4 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#Warning,#wlan,dropping the second wlan request", buf, 2u);
      }
      uint64_t v3 = 2;
      if (!sub_10013D1A0(115, 2)) {
        return v3;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102348B38);
      }
      long long v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrWlanScanner::State CLNilrWlanScanner::handler_Session(CLNilrWlanScanner::Event)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
      return 2;
    case 4:
      sub_10198E590(a1);
      return 1;
    case 5:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102348B38);
      }
      uint64_t v6 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#wlan request timeout", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102348B38);
        }
        os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrWlanScanner::State CLNilrWlanScanner::handler_Session(CLNilrWlanScanner::Event)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      return 1;
    default:
      return 2;
  }
}

void sub_10198C910(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102348B18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNilrWlanScanner::onWifiNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102348B18);
    }
    os_log_type_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      char v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNilrWlanScanner::onWifiNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1019903F8((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10198CACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10198CAF0(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  sub_10085044C(a1 + 360);
  sub_1019914CC(a1 + 232);
  sub_10197DE38((void *)(a1 + 176));
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  int v4 = (void **)(a1 + 56);
  sub_1000D7F78(&v4);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void *sub_10198CB98@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100134750(a2, (&off_102348BF8)[a1]);
}

uint64_t sub_10198CBAC(uint64_t a1)
{
  uint64_t v1 = a1 + 360;
  if (sub_1000FFBA8())
  {
    int v6 = 0;
    uint64_t v7 = &v6;
    BOOL v2 = 1;
    BOOL v3 = 1;
    if (!*((_DWORD *)sub_1008567B8(v1, &v6, (uint64_t)&unk_101D0B290, &v7) + 28))
    {
      int v5 = 0;
      uint64_t v7 = &v5;
      BOOL v3 = *((_DWORD *)sub_1008567B8(v1, &v5, (uint64_t)&unk_101D0B290, &v7) + 16) != 0;
    }
    int v6 = 1;
    uint64_t v7 = &v6;
    if (!*((_DWORD *)sub_1008567B8(v1, &v6, (uint64_t)&unk_101D0B290, &v7) + 28))
    {
      int v5 = 1;
      uint64_t v7 = &v5;
      BOOL v2 = *((_DWORD *)sub_1008567B8(v1, &v5, (uint64_t)&unk_101D0B290, &v7) + 16) != 0;
    }
    return v3 | v2;
  }
  else
  {
    int v6 = 0;
    uint64_t v7 = &v6;
    if (*((_DWORD *)sub_1008567B8(v1, &v6, (uint64_t)&unk_101D0B290, &v7) + 28))
    {
      return 1;
    }
    else
    {
      int v5 = 0;
      uint64_t v7 = &v5;
      return *((_DWORD *)sub_1008567B8(v1, &v5, (uint64_t)&unk_101D0B290, &v7) + 16) != 0;
    }
  }
}

void sub_10198CD34(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102348B38);
  }
  BOOL v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#wlan,clearWlanScanResults", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102348B38);
    }
    BOOL v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrWlanScanner::clearWlanScanResults()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_1000D7FCC((uint64_t *)(a1 + 56));
  *(void *)(a1 + 80) = 0;
}

id sub_10198CED4(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102348B38);
  }
  BOOL v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#wlan,registerForWifiNotifications", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102348B38);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrWlanScanner::registerForWifiNotifications()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  for (uint64_t i = 0; i != 32; i += 4)
    id result = [*(id *)(*(void *)(a1 + 16) + 16) register:*(void *)(*(void *)(a1 + 16) + 8) forNotification:*(unsigned int *)(a1 + 24 + i) registrationInfo:0];
  return result;
}

id sub_10198D090(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102348B38);
  }
  BOOL v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#wlan,triggerWifiScan", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102348B38);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLNilrWlanScanner::triggerWifiScan()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_10198CD34(a1);
  return [*(id *)(a1 + 8) syncgetStartScanWithType:10 lowPriority:0 passive:0 requester:"nilr"];
}

void sub_10198D248(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102348B38);
  }
  BOOL v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#wlan,sendError", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102348B38);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrWlanScanner::sendError()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  std::string __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  *(_DWORD *)uint64_t buf = 4;
  uint64_t v3 = *(void *)(a1 + 200);
  if (!v3) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v3 + 48))(v3, buf);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
}

void sub_10198D434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
}

id sub_10198D458(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102348B38);
  }
  BOOL v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#wlan,unregisterForWifiNotifications", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102348B38);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrWlanScanner::unregisterForWifiNotifications()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  for (uint64_t i = 0; i != 32; i += 4)
    id result = [*(id *)(*(void *)(a1 + 16) + 16) unregister:*(void *)(*(void *)(a1 + 16) + 8) forNotification:*(unsigned int *)(a1 + 24 + i)];
  return result;
}

void sub_10198D610(uint64_t a1, int a2, double a3)
{
  int v41 = a2;
  int v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348BD8);
    }
    __int16 v32 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v33 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v33 = (void *)*v33;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348BD8);
      }
      int v37 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v37 = (void *)*v37;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v37;
      __int16 v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLNilrWlanScanner>::setTimeoutEvent(Event, double) [T = CLNilrWlanScanner]", "%s\n", v38);
      if (v38 != buf) {
        free(v38);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348BD8);
    }
    __int16 v34 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348BD8);
      }
    }
    int v35 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348BD8);
      }
    }
    __int16 v36 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348BD8);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v8 = (void *)*v8;
      }
      sub_10198CB98(a2, __p);
      if (v49 >= 0) {
        os_log_type_t v9 = __p;
      }
      else {
        os_log_type_t v9 = *(unsigned char **)__p;
      }
      *(_DWORD *)uint64_t buf = 136315650;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&unsigned char buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v49) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348BD8);
      }
      int v10 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v10 = (void *)*v10;
      }
      sub_10198CB98(a2, v42);
      if (v45 >= 0) {
        char v11 = v42;
      }
      else {
        char v11 = *(unsigned char **)v42;
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = v10;
      __int16 v47 = 2082;
      __int16 v48 = v11;
      __int16 v49 = 2050;
      double v50 = a3;
      int v12 = (char *)_os_log_send_and_compose_impl();
      if (v45 < 0) {
        operator delete(*(void **)v42);
      }
LABEL_79:
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLNilrWlanScanner>::setTimeoutEvent(Event, double) [T = CLNilrWlanScanner]", "%s\n", v12);
LABEL_80:
      if (v12 != buf) {
        free(v12);
      }
      return;
    }
    return;
  }
  uint64_t v13 = *(void *)(a1 + 64);
  if (v13)
  {
    uint64_t v14 = a1 + 64;
    do
    {
      int v15 = *(_DWORD *)(v13 + 32);
      BOOL v16 = v15 < a2;
      if (v15 >= a2) {
        char v17 = (uint64_t *)v13;
      }
      else {
        char v17 = (uint64_t *)(v13 + 8);
      }
      if (!v16) {
        uint64_t v14 = v13;
      }
      uint64_t v13 = *v17;
    }
    while (*v17);
    if (v14 != a1 + 64 && *(_DWORD *)(v14 + 32) <= a2)
    {
      __int16 v18 = *(NSObject **)(v14 + 40);
      if (v18)
      {
LABEL_37:
        dispatch_time_t v20 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v18, v20, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102348BD8);
        }
        int v21 = qword_1024193D8;
        os_log_type_t v22 = *(unsigned char *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1024193D8, v22))
        {
          int v23 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            int v23 = (void *)*v23;
          }
          sub_10198CB98(v41, __p);
          if (v49 >= 0) {
            __int16 v24 = __p;
          }
          else {
            __int16 v24 = *(unsigned char **)__p;
          }
          *(_DWORD *)uint64_t buf = 136315650;
          *(void *)&uint8_t buf[4] = v23;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&unsigned char buf[14] = v24;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v49) < 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102348BD8);
          }
          __int16 v25 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            __int16 v25 = (void *)*v25;
          }
          sub_10198CB98(v41, v42);
          if (v45 >= 0) {
            int v26 = v42;
          }
          else {
            int v26 = *(unsigned char **)v42;
          }
          *(_DWORD *)std::string __p = 136315650;
          *(void *)&__p[4] = v25;
          __int16 v47 = 2080;
          __int16 v48 = v26;
          __int16 v49 = 2048;
          double v50 = a3;
          int v12 = (char *)_os_log_send_and_compose_impl();
          if (v45 < 0) {
            operator delete(*(void **)v42);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLNilrWlanScanner>::setTimeoutEvent(Event, double) [T = CLNilrWlanScanner]", "%s\n", v12);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  uint64_t v19 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v19)
  {
    __int16 v18 = v19;
    *(void *)uint64_t buf = &v41;
    sub_1000FEE0C((uint64_t **)(a1 + 56), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5] = v19;
    dispatch_source_set_timer(v18, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1019915BC;
    handler[3] = &unk_1022B2410;
    handler[4] = a1;
    int v40 = v41;
    dispatch_source_set_event_handler(v18, handler);
    dispatch_resume(v18);
    goto LABEL_37;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348BD8);
  }
  __int16 v27 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    int v28 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v28 = (void *)*v28;
    }
    sub_10198CB98(a2, buf);
    if (buf[23] >= 0) {
      int v29 = buf;
    }
    else {
      int v29 = *(unsigned char **)buf;
    }
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v28;
    __int16 v47 = 2082;
    __int16 v48 = v29;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348BD8);
    }
    int v30 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v30 = (void *)*v30;
    }
    sub_10198CB98(a2, __p);
    if (v49 >= 0) {
      unsigned int v31 = __p;
    }
    else {
      unsigned int v31 = *(unsigned char **)__p;
    }
    *(_DWORD *)uint64_t v42 = 136315394;
    *(void *)&v42[4] = v30;
    __int16 v43 = 2082;
    __int16 v44 = v31;
    int v12 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v49) < 0) {
      operator delete(*(void **)__p);
    }
    goto LABEL_79;
  }
}

void sub_10198E0FC(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    goto LABEL_33;
  }
  uint64_t v5 = a1 + 64;
  do
  {
    int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      uint64_t v8 = (uint64_t *)v4;
    }
    else {
      uint64_t v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (os_log_type_t v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348BD8);
    }
    int v10 = qword_1024193D8;
    os_log_type_t v11 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v11))
    {
      int v12 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v12 = (void *)*v12;
      }
      sub_10198CB98(a2, __p);
      if (v31 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t buf = 136315394;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v23 = 2080;
      __int16 v24 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348BD8);
      }
      uint64_t v14 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v14 = (void *)*v14;
      }
      sub_10198CB98(a2, buf);
      if (v25 >= 0) {
        int v15 = buf;
      }
      else {
        int v15 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      __int16 v27 = v14;
      __int16 v28 = 2080;
      int v29 = v15;
      BOOL v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
LABEL_54:
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLNilrWlanScanner>::cancelTimeoutEvent(Event) [T = CLNilrWlanScanner]", "%s\n", v16);
      if (v16 != (char *)__p) {
        free(v16);
      }
    }
  }
  else
  {
LABEL_33:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348BD8);
    }
    char v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v18 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        __int16 v18 = (void *)*v18;
      }
      sub_10198CB98(a2, __p);
      if (v31 >= 0) {
        uint64_t v19 = __p;
      }
      else {
        uint64_t v19 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t buf = 136315394;
      *(void *)&uint8_t buf[4] = v18;
      __int16 v23 = 2080;
      __int16 v24 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348BD8);
      }
      dispatch_time_t v20 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        dispatch_time_t v20 = (void *)*v20;
      }
      sub_10198CB98(a2, buf);
      if (v25 >= 0) {
        int v21 = buf;
      }
      else {
        int v21 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      __int16 v27 = v20;
      __int16 v28 = 2080;
      int v29 = v21;
      BOOL v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_54;
    }
  }
}

void sub_10198E590(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 208)) {
    return;
  }
  int v75 = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v76 = 0;
  BOOL v2 = &qword_102419000;
  if (*(void *)(a1 + 56) != *(void *)(a1 + 64))
  {
    double v104 = (void *)qword_10248AB78;
    if (byte_10248AB80[23] < 0)
    {
      sub_1000DC48C(v105, *(void **)byte_10248AB80, *(unint64_t *)&byte_10248AB80[8]);
    }
    else
    {
      *(_OWORD *)uint64_t v105 = *(_OWORD *)byte_10248AB80;
      *(void *)&v105[16] = *(void *)&byte_10248AB80[16];
    }
    *(_OWORD *)uint64_t v106 = xmmword_10248AB98;
    *(_OWORD *)&v106[16] = xmmword_10248ABA8;
    long long v107 = xmmword_10248ABB8;
    uint64_t v108 = qword_10248ABC8;
    unsigned int v3 = [*(id *)(a1 + 8) syncgetAssociatedNetwork:&v104];
    if (v3)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102348B38);
      }
      uint64_t v4 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100D5475C((uint64_t *)&v104);
        uint64_t v5 = (v89 & 0x8000) == 0 ? &__p : (void **)__p;
        *(_DWORD *)uint64_t buf = 136315138;
        *(void *)&uint8_t buf[4] = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#wlan,sendScanResults,serving AP,%s", buf, 0xCu);
        if (SBYTE1(v89) < 0) {
          operator delete(__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102348B38);
        }
        sub_100D5475C((uint64_t *)&v104);
        if (v80 >= 0) {
          double v73 = buf;
        }
        else {
          double v73 = *(unsigned char **)buf;
        }
        int v81 = 136315138;
        double v82 = v73;
        uint64_t v74 = (char *)_os_log_send_and_compose_impl();
        if (v80 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrWlanScanner::sendScanResults()", "%s\n", v74);
        if (v74 != (char *)&__p) {
          free(v74);
        }
      }
    }
    int v6 = *(_DWORD *)(a1 + 212);
    if (v6)
    {
      if (v6 != 1) {
        goto LABEL_70;
      }
      uint64_t v7 = *(void *)(a1 + 56);
      for (uint64_t i = *(void *)(a1 + 64); v7 != i; v7 += 88)
      {
        int v9 = *(_DWORD *)(v7 + 40);
        std::string __p = *(void **)v7;
        unint64_t v10 = sub_100B39370((unint64_t *)&__p);
        if (*(_DWORD *)(a1 + 216))
        {
          int v11 = *(_DWORD *)(v7 + 32);
          if (!v3) {
            goto LABEL_24;
          }
        }
        else
        {
          LOWORD(v11) = 0x7FFF;
          if (!v3)
          {
LABEL_24:
            BOOL v13 = 0;
            goto LABEL_25;
          }
        }
        std::string __p = v104;
        uint64_t v12 = sub_1000D8908((uint64_t)&__p);
        *(void *)uint64_t buf = *(void *)v7;
        BOOL v13 = v12 == sub_1000D8908((uint64_t)buf);
LABEL_25:
        uint64_t v14 = v77;
        if (v77 >= v78)
        {
          unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v77 - (unsigned char *)v76) >> 2);
          unint64_t v17 = v16 + 1;
          if (v16 + 1 > 0x1555555555555555) {
            sub_1001D7FD4();
          }
          if (0x5555555555555556 * ((v78 - (unsigned char *)v76) >> 2) > v17) {
            unint64_t v17 = 0x5555555555555556 * ((v78 - (unsigned char *)v76) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v78 - (unsigned char *)v76) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v18 = 0x1555555555555555;
          }
          else {
            unint64_t v18 = v17;
          }
          if (v18) {
            uint64_t v19 = (char *)sub_10080FC80((uint64_t)&v78, v18);
          }
          else {
            uint64_t v19 = 0;
          }
          dispatch_time_t v20 = &v19[4 * ((v77 - (unsigned char *)v76) >> 2)];
          *((_WORD *)v20 + 2) = WORD2(v10);
          *(_DWORD *)dispatch_time_t v20 = v10;
          v20[6] = v13;
          v20[7] = v13;
          *((_WORD *)v20 + 4) = v9;
          *((_WORD *)v20 + 5) = v11;
          os_log_type_t v22 = v76;
          int v21 = v77;
          __int16 v23 = &v19[12 * v16];
          BOOL v2 = &qword_102419000;
          if (v77 != v76)
          {
            do
            {
              uint64_t v24 = *(void *)(v21 - 3);
              v21 -= 3;
              int v25 = v21[2];
              *(void *)(v23 - 12) = v24;
              v23 -= 12;
              *((_DWORD *)v23 + 2) = v25;
            }
            while (v21 != v22);
            int v21 = v76;
          }
          int v15 = v20 + 12;
          uint64_t v76 = v23;
          uint64_t v77 = v20 + 12;
          uint64_t v78 = &v19[12 * v18];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v77 = v10;
          *((_WORD *)v14 + 2) = WORD2(v10);
          v14[6] = v13;
          v14[7] = v13;
          *((_WORD *)v14 + 4) = v9;
          int v15 = v14 + 12;
          *((_WORD *)v14 + 5) = v11;
        }
        uint64_t v77 = v15;
      }
      int v26 = 1;
    }
    else
    {
      if (v3)
      {
        uint64_t v27 = *(void *)(a1 + 56);
        for (uint64_t j = *(void *)(a1 + 64); v27 != j; v27 += 88)
        {
          std::string __p = v104;
          uint64_t v29 = sub_1000D8908((uint64_t)&__p);
          *(void *)uint64_t buf = *(void *)v27;
          if (v29 == sub_1000D8908((uint64_t)buf))
          {
            if (*(_DWORD *)(a1 + 216)) {
              int v30 = *(_DWORD *)(v27 + 32);
            }
            else {
              LOWORD(v30) = 0x7FFF;
            }
            int v31 = *(_DWORD *)(v27 + 40);
            std::string __p = *(void **)v27;
            unint64_t v32 = sub_100B39370((unint64_t *)&__p);
            unint64_t v33 = v32;
            __int16 v34 = v77;
            if (v77 >= v78)
            {
              unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((v77 - (unsigned char *)v76) >> 2);
              unint64_t v37 = v36 + 1;
              if (v36 + 1 > 0x1555555555555555) {
                sub_1001D7FD4();
              }
              if (0x5555555555555556 * ((v78 - (unsigned char *)v76) >> 2) > v37) {
                unint64_t v37 = 0x5555555555555556 * ((v78 - (unsigned char *)v76) >> 2);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v78 - (unsigned char *)v76) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v38 = 0x1555555555555555;
              }
              else {
                unint64_t v38 = v37;
              }
              if (v38) {
                int v39 = (char *)sub_10080FC80((uint64_t)&v78, v38);
              }
              else {
                int v39 = 0;
              }
              int v40 = &v39[4 * ((v77 - (unsigned char *)v76) >> 2)];
              *((_WORD *)v40 + 2) = WORD2(v33);
              *(_DWORD *)int v40 = v33;
              *((_WORD *)v40 + 3) = 257;
              *((_WORD *)v40 + 4) = v31;
              *((_WORD *)v40 + 5) = v30;
              uint64_t v42 = v76;
              int v41 = v77;
              __int16 v43 = &v39[12 * v36];
              if (v77 != v76)
              {
                do
                {
                  uint64_t v44 = *(void *)(v41 - 3);
                  v41 -= 3;
                  int v45 = v41[2];
                  *(void *)(v43 - 12) = v44;
                  v43 -= 12;
                  *((_DWORD *)v43 + 2) = v45;
                }
                while (v41 != v42);
                int v41 = v76;
              }
              int v35 = v40 + 12;
              uint64_t v76 = v43;
              uint64_t v77 = v40 + 12;
              uint64_t v78 = &v39[12 * v38];
              if (v41) {
                operator delete(v41);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v77 = v32;
              *((_WORD *)v34 + 2) = WORD2(v32);
              *((_WORD *)v34 + 3) = 257;
              *((_WORD *)v34 + 4) = v31;
              int v35 = v34 + 12;
              *((_WORD *)v34 + 5) = v30;
            }
            uint64_t v77 = v35;
            int v75 = 1;
          }
        }
        goto LABEL_70;
      }
      int v26 = 4;
    }
    int v75 = v26;
LABEL_70:
    if ((v105[23] & 0x80000000) != 0) {
      operator delete(*(void **)v105);
    }
    goto LABEL_72;
  }
  int v75 = 4;
LABEL_72:
  if (v2[124] != -1) {
    dispatch_once(&qword_1024193E0, &stru_102348B38);
  }
  __int16 v46 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(__p) = 67109120;
    HIDWORD(__p) = v75;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "#wlan,sendScanResults,result,%d", (uint8_t *)&__p, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (v2[124] != -1) {
      dispatch_once(&qword_1024193E0, &stru_102348B38);
    }
    LODWORD(v104) = 67109120;
    HIDWORD(v104) = v75;
    double v72 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrWlanScanner::sendScanResults()", "%s\n", v72);
    if (v72 != (char *)&__p) {
      free(v72);
    }
  }
  if (v77 != v76)
  {
    unint64_t v47 = 0;
    uint64_t v48 = 10;
    do
    {
      if (v2[124] != -1) {
        dispatch_once(&qword_1024193E0, &stru_102348B38);
      }
      __int16 v49 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        int v50 = *((char *)v76 + v48 - 10);
        int v51 = *((char *)v76 + v48 - 9);
        int v52 = *((char *)v76 + v48 - 8);
        int v53 = *((char *)v76 + v48 - 7);
        int v54 = *((char *)v76 + v48 - 6);
        int v55 = *((char *)v76 + v48 - 5);
        int v56 = *(unsigned __int16 *)((char *)v76 + v48 - 2);
        int v57 = *(__int16 *)((char *)v76 + v48);
        int v58 = *((char *)v76 + v48 - 4);
        int v59 = *((char *)v76 + v48 - 3);
        LODWORD(__p) = 67111680;
        HIDWORD(__p) = v75;
        __int16 v84 = 1024;
        int v85 = v50;
        __int16 v86 = 1024;
        int v87 = v51;
        __int16 v88 = 1024;
        int v89 = v52;
        __int16 v90 = 1024;
        int v91 = v53;
        __int16 v92 = 1024;
        int v93 = v54;
        __int16 v94 = 1024;
        int v95 = v55;
        __int16 v96 = 1024;
        int v97 = v56;
        __int16 v98 = 1024;
        int v99 = v57;
        __int16 v100 = 1024;
        int v101 = v58;
        __int16 v102 = 1024;
        int v103 = v59;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "#wlan,sendScanResults,result,%d,WlanMeasurementElement,bssid,%02x:%02x:%02x:%02x:%02x:%02x,channel,%d,rssi,%d,isServingFlagPresent,%d,servingFlag,%d", (uint8_t *)&__p, 0x44u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (v2[124] != -1) {
          dispatch_once(&qword_1024193E0, &stru_102348B38);
        }
        int v60 = *((char *)v76 + v48 - 10);
        int v61 = *((char *)v76 + v48 - 9);
        int v62 = *((char *)v76 + v48 - 8);
        int v63 = *((char *)v76 + v48 - 7);
        int v64 = *((char *)v76 + v48 - 6);
        int v65 = *((char *)v76 + v48 - 5);
        int v66 = *(unsigned __int16 *)((char *)v76 + v48 - 2);
        int v67 = *(__int16 *)((char *)v76 + v48);
        int v68 = *((char *)v76 + v48 - 4);
        int v69 = *((char *)v76 + v48 - 3);
        LODWORD(v104) = 67111680;
        HIDWORD(v104) = v75;
        *(_WORD *)uint64_t v105 = 1024;
        *(_DWORD *)&v105[2] = v60;
        *(_WORD *)&v105[6] = 1024;
        *(_DWORD *)&v105[8] = v61;
        *(_WORD *)&v105[12] = 1024;
        *(_DWORD *)&v105[14] = v62;
        *(_WORD *)&v105[18] = 1024;
        *(_DWORD *)&v105[20] = v63;
        *(_WORD *)uint64_t v106 = 1024;
        *(_DWORD *)&v106[2] = v64;
        *(_WORD *)&v106[6] = 1024;
        *(_DWORD *)&v106[8] = v65;
        *(_WORD *)&v106[12] = 1024;
        *(_DWORD *)&unsigned char v106[14] = v66;
        *(_WORD *)&v106[18] = 1024;
        *(_DWORD *)&v106[20] = v67;
        *(_WORD *)&v106[24] = 1024;
        *(_DWORD *)&v106[26] = v68;
        *(_WORD *)&v106[30] = 1024;
        LODWORD(v107) = v69;
        uint64_t v70 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrWlanScanner::sendScanResults()", "%s\n", v70);
        if (v70 != (char *)&__p) {
          free(v70);
        }
      }
      ++v47;
      v48 += 12;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v77 - (unsigned char *)v76) >> 2) > v47);
  }
  uint64_t v71 = *(void *)(a1 + 200);
  if (!v71) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t, int *))(*(void *)v71 + 48))(v71, &v75);
  if (v76)
  {
    uint64_t v77 = (char *)v76;
    operator delete(v76);
  }
}

void sub_10198EFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (*(char *)(v17 - 161) < 0) {
    operator delete(*(void **)(v17 - 184));
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10198F068(uint64_t a1, int *a2, unsigned int a3)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102348B38);
  }
  int v6 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *a2;
    sub_10101AE9C(a3, __p);
    uint64_t v8 = v25 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uint64_t buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v7;
    __int16 v17 = 2080;
    unint64_t v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#wlan,handleEmergencySettingsChange,inst,%d,reason,%s", buf, 0x12u);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102348B38);
    }
    int v12 = *a2;
    sub_10101AE9C(a3, buf);
    if (v19 >= 0) {
      BOOL v13 = buf;
    }
    else {
      BOOL v13 = *(uint8_t **)buf;
    }
    int v20 = 67109378;
    int v21 = v12;
    __int16 v22 = 2080;
    __int16 v23 = v13;
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    if (v19 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrWlanScanner::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v14);
    if (v14 != (char *)__p) {
      free(v14);
    }
  }
  int v9 = sub_10011853C((void *)(a1 + 360), a2);
  if (v9)
  {
    sub_10102ECD4((uint64_t)__p, v9 + 3);
    sub_10083C6B4((uint64_t)__p, (uint64_t *)a2);
    *(void *)uint64_t buf = a2;
    unint64_t v10 = sub_1008567B8(a1 + 360, a2, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_10083C6B4((uint64_t)(v10 + 3), (uint64_t *)__p);
    if (a3 < 4 || a3 == 5) {
      sub_10198F474(a1 + 232, 2);
    }
    sub_10084DD34((uint64_t)__p);
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102348B38);
    }
    int v11 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#wlan,#Warning,handleEmergencySettingsChange,fLocationSettingsMap,null", (uint8_t *)__p, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102348B38);
      }
      *(_WORD *)uint64_t buf = 0;
      int v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrWlanScanner::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v15);
      if (v15 != (char *)__p) {
        free(v15);
      }
    }
  }
}

void sub_10198F458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_10084DD34((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10198F474(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 88);
  int v85 = *(_DWORD *)(a1 + 4);
  if (!*(void *)(a1 + 32))
  {
    sub_101991A4C();
    goto LABEL_157;
  }
  unsigned int v3 = &qword_102419000;
  if (!*(unsigned char *)(a1 + 48))
  {
    sub_101991BBC(qword_1024193D0 == -1);
    goto LABEL_157;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348BD8);
  }
  uint64_t v5 = qword_1024193D8;
  os_log_type_t v6 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v6))
  {
    int v7 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v7 = (void *)*v7;
    }
    sub_100134750(__p, (&off_102348C28)[*(int *)(a1 + 4)]);
    int v8 = SHIBYTE(v89);
    int v9 = *(unsigned char **)__p;
    sub_10198CB98(a2, v96);
    unint64_t v10 = __p;
    if (v8 < 0) {
      unint64_t v10 = v9;
    }
    if (v99 >= 0) {
      int v11 = v96;
    }
    else {
      int v11 = *(unsigned char **)v96;
    }
    *(_DWORD *)uint64_t buf = 136315650;
    *(void *)&uint8_t buf[4] = v7;
    __int16 v92 = 2080;
    int v93 = v10;
    __int16 v94 = 2080;
    int v95 = v11;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v99 < 0) {
      operator delete(*(void **)v96);
    }
    unsigned int v3 = &qword_102419000;
    if (SHIBYTE(v89) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348BD8);
    }
    int v58 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v58 = (void *)*v58;
    }
    sub_100134750(v96, (&off_102348C28)[*(int *)(a1 + 4)]);
    int v59 = v99;
    int v60 = *(unsigned char **)v96;
    sub_10198CB98(a2, v83);
    int v61 = v96;
    if (v59 < 0) {
      int v61 = v60;
    }
    if (v84 >= 0) {
      int v62 = v83;
    }
    else {
      int v62 = (void **)v83[0];
    }
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v58;
    __int16 v87 = 2080;
    __int16 v88 = v61;
    __int16 v89 = 2080;
    __int16 v90 = v62;
    int v63 = (char *)_os_log_send_and_compose_impl();
    if (v84 < 0) {
      operator delete(v83[0]);
    }
    unsigned int v3 = &qword_102419000;
    if (v99 < 0) {
      operator delete(*(void **)v96);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLNilrWlanScanner>::handleEvent(Event) [T = CLNilrWlanScanner]", "%s\n", v63);
    if (v63 != buf) {
      free(v63);
    }
  }
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    goto LABEL_28;
  }
  BOOL v13 = (uint64_t **)(a1 + 8);
  int v14 = *(_DWORD *)(a1 + 4);
  uint64_t v15 = a1 + 16;
  do
  {
    int v16 = *(_DWORD *)(v12 + 32);
    BOOL v17 = v16 < v14;
    if (v16 >= v14) {
      unint64_t v18 = (uint64_t *)v12;
    }
    else {
      unint64_t v18 = (uint64_t *)(v12 + 8);
    }
    if (!v17) {
      uint64_t v15 = v12;
    }
    uint64_t v12 = *v18;
  }
  while (*v18);
  if (v15 == a1 + 16 || v14 < *(_DWORD *)(v15 + 32))
  {
LABEL_28:
    sub_101991D38();
    goto LABEL_157;
  }
  char v19 = *(uint64_t (**)(void *, uint64_t))(v15 + 40);
  uint64_t v20 = *(void *)(v15 + 48);
  int v21 = (void *)(*(void *)(a1 + 32) + (v20 >> 1));
  if (v20) {
    char v19 = *(uint64_t (**)(void *, uint64_t))(*v21 + v19);
  }
  uint64_t v22 = v19(v21, a2);
  uint64_t v23 = v22;
  int v82 = v22;
  if (a2 <= 1 && v22 != v85)
  {
    sub_101992188();
    goto LABEL_157;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348BD8);
    }
    uint64_t v24 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      char v25 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        char v25 = (void *)*v25;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348BD8);
      }
      int v67 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v67 = (void *)*v67;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v67;
      int v68 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "State CLStateMachine<CLNilrWlanScanner>::handleEvent(Event) [T = CLNilrWlanScanner]", "%s\n", v68);
      if (v68 != buf) {
        free(v68);
      }
    }
  }
  if (v3[122] != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348BD8);
  }
  int v26 = qword_1024193D8;
  os_log_type_t v27 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v27))
  {
    __int16 v28 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      __int16 v28 = (void *)*v28;
    }
    sub_100134750(buf, (&off_102348C28)[(int)v23]);
    if (v94 >= 0) {
      uint64_t v29 = buf;
    }
    else {
      uint64_t v29 = *(unsigned char **)buf;
    }
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v28;
    __int16 v87 = 2080;
    __int16 v88 = v29;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v94) < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348BD8);
    }
    int v64 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v64 = (void *)*v64;
    }
    sub_100134750(__p, (&off_102348C28)[(int)v23]);
    if (v89 >= 0) {
      int v65 = __p;
    }
    else {
      int v65 = *(unsigned char **)__p;
    }
    *(_DWORD *)__int16 v96 = 136315394;
    *(void *)&v96[4] = v64;
    __int16 v97 = 2080;
    __int16 v98 = v65;
    int v66 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v89) < 0) {
      operator delete(*(void **)__p);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLNilrWlanScanner>::handleEvent(Event) [T = CLNilrWlanScanner]", "%s\n", v66);
    if (v66 != buf) {
      free(v66);
    }
  }
  if (v23 != v85)
  {
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348BD8);
    }
    int v30 = qword_1024193D8;
    os_log_type_t v31 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v31))
    {
      unint64_t v32 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        unint64_t v32 = (void *)*v32;
      }
      sub_100134750(__p, (&off_102348C28)[v85]);
      unint64_t v33 = v3;
      int v34 = SHIBYTE(v89);
      int v35 = *(unsigned char **)__p;
      sub_100134750(v96, "Exit");
      unint64_t v36 = __p;
      if (v34 < 0) {
        unint64_t v36 = v35;
      }
      if (v99 >= 0) {
        unint64_t v37 = v96;
      }
      else {
        unint64_t v37 = *(unsigned char **)v96;
      }
      *(_DWORD *)uint64_t buf = 136315650;
      *(void *)&uint8_t buf[4] = v32;
      __int16 v92 = 2080;
      int v93 = v36;
      __int16 v94 = 2080;
      int v95 = v37;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%soldState,%s,event,%s", buf, 0x20u);
      if (v99 < 0) {
        operator delete(*(void **)v96);
      }
      unsigned int v3 = v33;
      if (SHIBYTE(v89) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348BD8);
      }
      int v69 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v69 = (void *)*v69;
      }
      sub_100134750(v96, (&off_102348C28)[v85]);
      uint64_t v70 = v3;
      int v71 = v99;
      double v72 = *(unsigned char **)v96;
      sub_100134750(v83, "Exit");
      double v73 = v96;
      if (v71 < 0) {
        double v73 = v72;
      }
      if (v84 >= 0) {
        uint64_t v74 = v83;
      }
      else {
        uint64_t v74 = (void **)v83[0];
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = v69;
      __int16 v87 = 2080;
      __int16 v88 = v73;
      __int16 v89 = 2080;
      __int16 v90 = v74;
      int v75 = (char *)_os_log_send_and_compose_impl();
      if (v84 < 0) {
        operator delete(v83[0]);
      }
      unsigned int v3 = v70;
      BOOL v13 = (uint64_t **)(a1 + 8);
      if (v99 < 0) {
        operator delete(*(void **)v96);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLNilrWlanScanner>::handleEvent(Event) [T = CLNilrWlanScanner]", "%s\n", v75);
      if (v75 != buf) {
        free(v75);
      }
    }
    uint64_t v38 = *(void *)(a1 + 32);
    *(void *)uint64_t buf = &v85;
    int v39 = sub_1000C5658(v13, &v85, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    int v40 = v39[5];
    uint64_t v41 = (uint64_t)v39[6];
    uint64_t v42 = (void *)(v38 + (v41 >> 1));
    if (v41) {
      int v40 = *(uint64_t **)(*v42 + v40);
    }
    int v43 = ((uint64_t (*)(void *, uint64_t))v40)(v42, 1);
    if (v43 == v85)
    {
      *(_DWORD *)(a1 + 4) = v23;
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348BD8);
      }
      uint64_t v44 = qword_1024193D8;
      os_log_type_t v45 = *(unsigned char *)(a1 + 120);
      if (os_log_type_enabled((os_log_t)qword_1024193D8, v45))
      {
        __int16 v46 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          __int16 v46 = (void *)*v46;
        }
        sub_100134750(__p, (&off_102348C28)[(int)v23]);
        unint64_t v47 = v3;
        int v48 = SHIBYTE(v89);
        __int16 v49 = *(unsigned char **)__p;
        sub_100134750(v96, "Enter");
        int v50 = __p;
        if (v48 < 0) {
          int v50 = v49;
        }
        if (v99 >= 0) {
          int v51 = v96;
        }
        else {
          int v51 = *(unsigned char **)v96;
        }
        *(_DWORD *)uint64_t buf = 136315650;
        *(void *)&uint8_t buf[4] = v46;
        __int16 v92 = 2080;
        int v93 = v50;
        __int16 v94 = 2080;
        int v95 = v51;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "%snewState,%s,event,%s", buf, 0x20u);
        if (v99 < 0) {
          operator delete(*(void **)v96);
        }
        unsigned int v3 = v47;
        if (SHIBYTE(v89) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v3[122] != -1) {
          dispatch_once(&qword_1024193D0, &stru_102348BD8);
        }
        uint64_t v76 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          uint64_t v76 = (void *)*v76;
        }
        sub_100134750(v96, (&off_102348C28)[(int)v23]);
        int v77 = v99;
        uint64_t v78 = *(unsigned char **)v96;
        sub_100134750(v83, "Enter");
        uint64_t v79 = v96;
        if (v77 < 0) {
          uint64_t v79 = v78;
        }
        if (v84 >= 0) {
          char v80 = v83;
        }
        else {
          char v80 = (void **)v83[0];
        }
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = v76;
        __int16 v87 = 2080;
        __int16 v88 = v79;
        __int16 v89 = 2080;
        __int16 v90 = v80;
        int v81 = (char *)_os_log_send_and_compose_impl();
        if (v84 < 0) {
          operator delete(v83[0]);
        }
        if (v99 < 0) {
          operator delete(*(void **)v96);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLNilrWlanScanner>::handleEvent(Event) [T = CLNilrWlanScanner]", "%s\n", v81);
        if (v81 != buf) {
          free(v81);
        }
      }
      uint64_t v52 = *(void *)(a1 + 32);
      *(void *)uint64_t buf = &v82;
      int v53 = sub_1000C5658(v13, &v82, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      int v54 = v53[5];
      uint64_t v55 = (uint64_t)v53[6];
      int v56 = (void *)(v52 + (v55 >> 1));
      if (v55) {
        int v54 = *(uint64_t **)(*v56 + v54);
      }
      uint64_t v23 = ((uint64_t (*)(void *, void))v54)(v56, 0);
      if (v23 == v82) {
        goto LABEL_89;
      }
      sub_101991EA8();
    }
    else
    {
      sub_101992018();
    }
LABEL_157:
    __break(1u);
  }
LABEL_89:
  --*(_DWORD *)(a1 + 88);
  return v23;
}

void sub_1019901D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 105) < 0) {
    operator delete(*(void **)(v22 - 128));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101990234(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102348B38);
  }
  int v8 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#wlan,requestWifiScan", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102348B38);
    }
    unint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrWlanScanner::requestWifiScan(CLEmergencyController::LocationSettings::Emergency::Settings::LPPRel13MeasSettings, uint16_t)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  *(void *)(a1 + 208) = a2;
  *(_DWORD *)(a1 + 216) = a3;
  *(double *)(a1 + 224) = (double)a4;
  return sub_10198F474(a1 + 232, 3);
}

void sub_1019903F8(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int8 *a4)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102348B38);
  }
  int v7 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#wlan,onWifiNotification", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102348B38);
    }
    *(_WORD *)unint64_t v36 = 0;
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrWlanScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v24);
    if (v24 != buf) {
      free(v24);
    }
  }
  switch(*a3)
  {
    case 1:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102348B38);
      }
      int v11 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        int v12 = *a4;
        *(_DWORD *)uint64_t buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#wlan,onWifiNotification,power state,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102348B38);
        }
        int v13 = *a4;
        *(_DWORD *)unint64_t v36 = 67109120;
        *(_DWORD *)&v36[4] = v13;
        int v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrWlanScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v9);
        goto LABEL_35;
      }
      break;
    case 3:
      double Current = CFAbsoluteTimeGetCurrent();
      if ((unsigned __int8 *)(a1 + 56) != a4 + 112) {
        sub_1000DAC8C((uint64_t *)(a1 + 56), *((void *)a4 + 14), *((void *)a4 + 15), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)a4 + 15) - *((void *)a4 + 14)) >> 3));
      }
      *(void *)(a1 + 80) = *((void *)a4 + 13);
      if (a4[96])
      {
        if (*((int *)a4 + 12) >= 1)
        {
          sub_100D555F0((uint64_t)(a4 + 8), (uint64_t)buf);
          sub_100D55514((uint64_t)buf, (uint64_t *)(a1 + 56));
          if (SHIBYTE(v43) < 0) {
            operator delete(*(void **)&buf[8]);
          }
        }
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102348B58);
      }
      uint64_t v15 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v16 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 3);
        uint64_t v17 = *(void *)(a1 + 80);
        double v18 = Current - *((double *)a4 + 13);
        *(_DWORD *)uint64_t buf = 134218496;
        *(void *)&uint8_t buf[4] = v16;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&unsigned char buf[14] = v17;
        *(_WORD *)&buf[22] = 2048;
        double v43 = v18;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#wlan,onWifiNotification,scanResult,%zu,scanTimestamp, %.1lf,age,%.1lf", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102348B58);
        }
        uint64_t v25 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 3);
        uint64_t v26 = *(void *)(a1 + 80);
        double v27 = Current - *((double *)a4 + 13);
        *(_DWORD *)unint64_t v36 = 134218496;
        *(void *)&v36[4] = v25;
        *(_WORD *)&v36[12] = 2048;
        *(void *)&v36[14] = v26;
        *(_WORD *)&v36[22] = 2048;
        double v37 = v27;
        __int16 v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrWlanScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v28);
        if (v28 != buf) {
          free(v28);
        }
      }
      sub_10198F474(a1 + 232, 4);
      break;
    case 4:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102348B38);
      }
      unint64_t v10 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#wlan,scan failed", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102348B38);
        }
        *(_WORD *)unint64_t v36 = 0;
        int v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrWlanScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v9);
        goto LABEL_35;
      }
      break;
    case 6:
    case 7:
      if (a4[96] && *((int *)a4 + 12) >= 1)
      {
        *(void *)unint64_t v36 = qword_10248AB78;
        if (byte_10248AB80[23] < 0)
        {
          sub_1000DC48C(&v36[8], *(void **)byte_10248AB80, *(unint64_t *)&byte_10248AB80[8]);
        }
        else
        {
          *(_OWORD *)&v36[8] = *(_OWORD *)byte_10248AB80;
          double v37 = *(double *)&byte_10248AB80[16];
        }
        long long v38 = xmmword_10248AB98;
        long long v39 = xmmword_10248ABA8;
        long long v40 = xmmword_10248ABB8;
        uint64_t v41 = qword_10248ABC8;
        if ([*(id *)(a1 + 8) syncgetAssociatedNetwork:v36])
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102348B38);
          }
          char v19 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
          {
            sub_100D5475C((uint64_t *)v36);
            uint64_t v20 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
            *(_DWORD *)unint64_t v32 = 136315138;
            *(void *)&v32[4] = v20;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#wlan,onWifiNotification,serving AP,%s", v32, 0xCu);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_102348B38);
            }
            sub_100D5475C((uint64_t *)v36);
            if (v33 >= 0) {
              int v30 = v32;
            }
            else {
              int v30 = *(unsigned char **)v32;
            }
            int v34 = 136315138;
            int v35 = v30;
            os_log_type_t v31 = (char *)_os_log_send_and_compose_impl();
            if (v33 < 0) {
              operator delete(*(void **)v32);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrWlanScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v31);
            if (v31 != buf) {
              free(v31);
            }
          }
          sub_100D555F0((uint64_t)v36, (uint64_t)buf);
          *(void *)(a1 + 88) = *(void *)buf;
          int v21 = (void **)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            operator delete(*v21);
          }
          *(_OWORD *)int v21 = *(_OWORD *)&buf[8];
          *(double *)(a1 + 112) = v43;
          long long v22 = v45;
          *(_OWORD *)(a1 + 120) = v44;
          *(_OWORD *)(a1 + 136) = v22;
          *(_OWORD *)(a1 + 152) = v46;
          *(void *)(a1 + 168) = v47;
        }
        else
        {
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102348B38);
          }
          uint64_t v23 = qword_1024193E8;
          if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "#wlan,onWifiNotification,could not fetch serving AP", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_102348B38);
            }
            *(_WORD *)unint64_t v32 = 0;
            uint64_t v29 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrWlanScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v29);
            if (v29 != buf) {
              free(v29);
            }
          }
        }
        if (SHIBYTE(v37) < 0) {
          operator delete(*(void **)&v36[8]);
        }
      }
      else
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102348B38);
        }
        int v8 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#wlan,onWifiNotification,not associated to any AP", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102348B38);
          }
          *(_WORD *)unint64_t v36 = 0;
          int v9 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrWlanScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v9);
LABEL_35:
          if (v9 != buf) {
            free(v9);
          }
        }
      }
      break;
    default:
      return;
  }
}

void sub_101990F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_101990FB8(uint64_t a1, uint64_t a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102348B38);
  }
  uint64_t v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#wlan,setWlanMeasurementHandler", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102348B38);
    }
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrWlanScanner::setWlanMeasurementHandler(WlanMeasurementHandler)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return sub_10199115C((void *)(a1 + 176), a2);
}

void *sub_10199115C(void *a1, uint64_t a2)
{
  sub_1019915CC((uint64_t)v4, a2);
  sub_101991664(v4, a1);
  sub_10197DE38(v4);
  return a1;
}

void sub_1019911D0(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101991200(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_101991230(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_101991264(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1019912A0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1019912E4(uint64_t a1, const void **a2, void *a3)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *a3;
  uint64_t v5 = a3[1];
  *(void *)(a1 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  os_log_type_t v6 = (void **)(a1 + 96);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 2;
  if (*((char *)a2 + 23) < 0)
  {
    if (a2[1]) {
      goto LABEL_5;
    }
LABEL_20:
    sub_1019922F8();
    uint64_t result = abort_report_np();
    __break(1u);
    return result;
  }
  if (!*((unsigned char *)a2 + 23)) {
    goto LABEL_20;
  }
LABEL_5:
  if (*((char *)a2 + 23) >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  sub_1001110E4((uint64_t)&v11, v7 + 1);
  if (v12 >= 0) {
    int v8 = &v11;
  }
  else {
    int v8 = (long long *)v11;
  }
  if (v7)
  {
    if (*((char *)a2 + 23) >= 0) {
      int v9 = a2;
    }
    else {
      int v9 = *a2;
    }
    memmove(v8, v9, v7);
  }
  *(_WORD *)((char *)v8 + v7) = 44;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)os_log_type_t v6 = v11;
  *(void *)(a1 + 112) = v12;
  return a1;
}

void sub_101991458(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  sub_1000F5BB0(v3, *(void **)(v1 + 64));
  size_t v7 = *(std::__shared_weak_count **)(v1 + 40);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  sub_1000F5BB0(v2, *v4);
  _Unwind_Resume(a1);
}

void sub_10199149C(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_1019914CC(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  sub_10199153C(*(void **)(a1 + 56), (void *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  sub_1000F5BB0(v2, *(void **)(a1 + 64));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000F5BB0(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

uint64_t sub_10199153C(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      sub_10198E0FC(a3, *((_DWORD *)v5 + 8));
      os_log_type_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          size_t v7 = v6;
          os_log_type_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          size_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_1019915BC(uint64_t a1)
{
  return sub_10198F474(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t sub_1019915CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_101991664(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1019918C4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

#error "101991944: call analysis failed (funcsize=76)"

#error "101991AC8: call analysis failed (funcsize=73)"

#error "101991C30: call analysis failed (funcsize=76)"

#error "101991DB4: call analysis failed (funcsize=73)"

#error "101991F24: call analysis failed (funcsize=73)"

#error "101992094: call analysis failed (funcsize=73)"

#error "101992204: call analysis failed (funcsize=73)"

void sub_1019922F8()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348BD8);
  }
  if (sub_100857B88())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348BD8);
    }
  }
  if (sub_100857BC4())
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v0, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348BD8);
    }
  }
  if (sub_100857BA8())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
  }
}

void sub_10199249C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_WORD *)(a1 + 8) = 0;
  uint64_t __dst = a1;
  operator new();
}

void sub_1019928F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  sub_10199B4DC(&a31);
  sub_1011A2D74((void *)(v32 + 400));
  sub_1011A2D74(v38);
  sub_1019601C4(v37);
  sub_101960140(v36);
  sub_10065ABCC(v35);
  sub_1000F5BB0(v34, *(void **)(v32 + 192));
  sub_101999CB8(a9);
  uint64_t v40 = *v33;
  *char v33 = 0;
  if (v40) {
    sub_101999C60((uint64_t)v33, v40);
  }
  sub_1019996DC(v31);
  _Unwind_Resume(a1);
}

uint64_t **sub_1019929D8(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  int v20 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    uint64_t v4 = a4;
    uint64_t v5 = a3;
    int v7 = a2;
    uint64_t v6 = a1;
    if (qword_1024193D0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1019A3A24(qword_1024193D0 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1024193D0, &stru_102348C40);
LABEL_3:
  BOOL v8 = qword_1024193D8;
  os_log_type_t v9 = *(unsigned char *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v9))
  {
    unint64_t v10 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      unint64_t v10 = (void *)*v10;
    }
    if (v7) {
      long long v11 = "kRunning";
    }
    else {
      long long v11 = "kDisconnected";
    }
    sub_100134750(__p, v11);
    if (SBYTE3(v25) >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = *(unsigned char **)__p;
    }
    *(_DWORD *)uint64_t buf = 136315650;
    *(void *)&uint8_t buf[4] = v10;
    __int16 v27 = 1024;
    int v28 = v7;
    __int16 v29 = 2080;
    int v30 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v25) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v14 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      int v14 = (void *)*v14;
    }
    if (v7) {
      uint64_t v15 = "kRunning";
    }
    else {
      uint64_t v15 = "kDisconnected";
    }
    sub_100134750(v18, v15);
    if (v19 >= 0) {
      uint64_t v16 = v18;
    }
    else {
      uint64_t v16 = (void **)v18[0];
    }
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v14;
    __int16 v22 = 1024;
    int v23 = v7;
    __int16 v24 = 2080;
    uint64_t v25 = v16;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLIceController>::setStateHandler(State, StateHandler) [T = CLIceController]", "%s\n", v17);
    if (v17 != buf) {
      free(v17);
    }
  }
  *(void *)uint64_t buf = &v20;
  uint64_t result = sub_1000C5658((uint64_t **)(v6 + 8), &v20, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

BOOL sub_101992CD0(uint64_t a1, int a2)
{
  BOOL result = 0;
  switch(a2)
  {
    case 0:
      sub_101995384(a1);
      return 0;
    case 2:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      uint64_t v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Already in disconnected state, but getting another kDisconnect", buf, 2u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_26;
      }
      goto LABEL_28;
    case 3:
      return 1;
    case 4:
    case 5:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      uint64_t v4 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Unexpected events", buf, 2u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_26;
      }
      goto LABEL_28;
    case 6:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      uint64_t v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning kResetRequestFromGnss when disconnected", buf, 2u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_26;
      }
LABEL_28:
      dispatch_once(&qword_1024193D0, &stru_102348C40);
LABEL_26:
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLIceController::State CLIceController::handler_kDisconnected(CLIceController::Event)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
      return 0;
    default:
      return result;
  }
}

uint64_t sub_101993068(uint64_t a1, int a2)
{
  uint64_t result = 1;
  switch(a2)
  {
    case 0:
    case 3:
      sub_101995544(a1);
      goto LABEL_10;
    case 2:
      uint64_t result = 0;
      break;
    case 6:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      uint64_t v4 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning servicing kResetRequestFromGnss", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102348C40);
        }
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLIceController::State CLIceController::handler_kRunning(CLIceController::Event)", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
      [+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance") proxyForService:@"CLTelephonyService"] resetModemWithReason:@"GPS library cannot reach BB; please attach sysdiagnose and BB logs for triage"];
LABEL_10:
      uint64_t result = 1;
      break;
    default:
      return result;
  }
  return result;
}

void sub_10199327C(uint64_t a1)
{
  uint64_t v1 = *(NSObject ***)(a1 + 32);
  uint64_t v2 = *v1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1019932F0;
  block[3] = &unk_1022A3020;
  void block[4] = v1;
  dispatch_async(v2, block);
}

uint64_t sub_1019932F0(uint64_t a1)
{
  return sub_101993300(*(void *)(a1 + 32) + 16, 4);
}

uint64_t sub_101993300(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 88);
  int v93 = *(_DWORD *)(a1 + 4);
  if (!*(void *)(a1 + 32))
  {
    sub_1019A3BA0();
    goto LABEL_181;
  }
  uint64_t v3 = &qword_102419000;
  if (!*(unsigned char *)(a1 + 48))
  {
    sub_1019A3D0C(qword_1024193D0 == -1);
    goto LABEL_181;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  uint64_t v5 = qword_1024193D8;
  os_log_type_t v6 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v6))
  {
    int v7 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v7 = (void *)*v7;
    }
    if (*(_DWORD *)(a1 + 4)) {
      BOOL v8 = "kRunning";
    }
    else {
      BOOL v8 = "kDisconnected";
    }
    sub_100134750(__p, v8);
    int v9 = SHIBYTE(v97);
    unint64_t v10 = *(unsigned char **)__p;
    sub_101995710(a2, v104);
    long long v11 = __p;
    if (v9 < 0) {
      long long v11 = v10;
    }
    if (v107 >= 0) {
      uint64_t v12 = v104;
    }
    else {
      uint64_t v12 = *(unsigned char **)v104;
    }
    *(_DWORD *)uint64_t buf = 136315650;
    *(void *)&uint8_t buf[4] = v7;
    __int16 v100 = 2080;
    int v101 = v11;
    __int16 v102 = 2080;
    int v103 = v12;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v107 < 0) {
      operator delete(*(void **)v104);
    }
    uint64_t v3 = &qword_102419000;
    if (SHIBYTE(v97) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v62 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v62 = (void *)*v62;
    }
    if (*(_DWORD *)(a1 + 4)) {
      int v63 = "kRunning";
    }
    else {
      int v63 = "kDisconnected";
    }
    sub_100134750(v104, v63);
    int v64 = v107;
    int v65 = *(unsigned char **)v104;
    sub_101995710(a2, v91);
    int v66 = v104;
    if (v64 < 0) {
      int v66 = v65;
    }
    if (v92 >= 0) {
      int v67 = v91;
    }
    else {
      int v67 = (void **)v91[0];
    }
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v62;
    __int16 v95 = 2080;
    __int16 v96 = v66;
    __int16 v97 = 2080;
    __int16 v98 = v67;
    int v68 = (char *)_os_log_send_and_compose_impl();
    if (v92 < 0) {
      operator delete(v91[0]);
    }
    uint64_t v3 = &qword_102419000;
    if (v107 < 0) {
      operator delete(*(void **)v104);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLIceController>::handleEvent(Event) [T = CLIceController]", "%s\n", v68);
    if (v68 != buf) {
      free(v68);
    }
  }
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13) {
    goto LABEL_31;
  }
  int v14 = (uint64_t **)(a1 + 8);
  int v15 = *(_DWORD *)(a1 + 4);
  uint64_t v16 = a1 + 16;
  do
  {
    int v17 = *(_DWORD *)(v13 + 32);
    BOOL v18 = v17 < v15;
    if (v17 >= v15) {
      char v19 = (uint64_t *)v13;
    }
    else {
      char v19 = (uint64_t *)(v13 + 8);
    }
    if (!v18) {
      uint64_t v16 = v13;
    }
    uint64_t v13 = *v19;
  }
  while (*v19);
  if (v16 == a1 + 16 || v15 < *(_DWORD *)(v16 + 32))
  {
LABEL_31:
    sub_1019A3E88();
    goto LABEL_181;
  }
  int v20 = *(uint64_t (**)(void *, uint64_t))(v16 + 40);
  uint64_t v21 = *(void *)(v16 + 48);
  __int16 v22 = (void *)(*(void *)(a1 + 32) + (v21 >> 1));
  if (v21) {
    int v20 = *(uint64_t (**)(void *, uint64_t))(*v22 + v20);
  }
  uint64_t v23 = v20(v22, a2);
  uint64_t v24 = v23;
  int v90 = v23;
  if (a2 <= 1 && v23 != v93)
  {
    sub_1019A42CC();
    goto LABEL_181;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    uint64_t v25 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v26 = (void *)*v26;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      double v73 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        double v73 = (void *)*v73;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v73;
      uint64_t v74 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "State CLStateMachine<CLIceController>::handleEvent(Event) [T = CLIceController]", "%s\n", v74);
      if (v74 != buf) {
        free(v74);
      }
    }
  }
  if (v3[122] != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  __int16 v27 = qword_1024193D8;
  os_log_type_t v28 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v28))
  {
    __int16 v29 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      __int16 v29 = (void *)*v29;
    }
    if (v24) {
      int v30 = "kRunning";
    }
    else {
      int v30 = "kDisconnected";
    }
    sub_100134750(buf, v30);
    if (v102 >= 0) {
      uint64_t v31 = buf;
    }
    else {
      uint64_t v31 = *(unsigned char **)buf;
    }
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v29;
    __int16 v95 = 2080;
    __int16 v96 = v31;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v102) < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v69 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v69 = (void *)*v69;
    }
    if (v24) {
      uint64_t v70 = "kRunning";
    }
    else {
      uint64_t v70 = "kDisconnected";
    }
    sub_100134750(__p, v70);
    if (v97 >= 0) {
      int v71 = __p;
    }
    else {
      int v71 = *(unsigned char **)__p;
    }
    *(_DWORD *)double v104 = 136315394;
    *(void *)&v104[4] = v69;
    __int16 v105 = 2080;
    uint64_t v106 = v71;
    double v72 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v97) < 0) {
      operator delete(*(void **)__p);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLIceController>::handleEvent(Event) [T = CLIceController]", "%s\n", v72);
    if (v72 != buf) {
      free(v72);
    }
  }
  if (v24 != v93)
  {
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    uint64_t v32 = qword_1024193D8;
    os_log_type_t v33 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v33))
    {
      uint64_t v34 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v34 = (void *)*v34;
      }
      if (v93) {
        int v35 = "kRunning";
      }
      else {
        int v35 = "kDisconnected";
      }
      sub_100134750(__p, v35);
      unint64_t v36 = v3;
      int v37 = SHIBYTE(v97);
      long long v38 = *(unsigned char **)__p;
      sub_100134750(v104, "Exit");
      long long v39 = __p;
      if (v37 < 0) {
        long long v39 = v38;
      }
      if (v107 >= 0) {
        uint64_t v40 = v104;
      }
      else {
        uint64_t v40 = *(unsigned char **)v104;
      }
      *(_DWORD *)uint64_t buf = 136315650;
      *(void *)&uint8_t buf[4] = v34;
      __int16 v100 = 2080;
      int v101 = v39;
      __int16 v102 = 2080;
      int v103 = v40;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "%soldState,%s,event,%s", buf, 0x20u);
      if (v107 < 0) {
        operator delete(*(void **)v104);
      }
      uint64_t v3 = v36;
      if (SHIBYTE(v97) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v75 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v75 = (void *)*v75;
      }
      if (v93) {
        uint64_t v76 = "kRunning";
      }
      else {
        uint64_t v76 = "kDisconnected";
      }
      sub_100134750(v104, v76);
      int v77 = v3;
      int v78 = v107;
      uint64_t v79 = *(unsigned char **)v104;
      sub_100134750(v91, "Exit");
      char v80 = v104;
      if (v78 < 0) {
        char v80 = v79;
      }
      if (v92 >= 0) {
        int v81 = v91;
      }
      else {
        int v81 = (void **)v91[0];
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = v75;
      __int16 v95 = 2080;
      __int16 v96 = v80;
      __int16 v97 = 2080;
      __int16 v98 = v81;
      int v82 = (char *)_os_log_send_and_compose_impl();
      if (v92 < 0) {
        operator delete(v91[0]);
      }
      uint64_t v3 = v77;
      int v14 = (uint64_t **)(a1 + 8);
      if (v107 < 0) {
        operator delete(*(void **)v104);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLIceController>::handleEvent(Event) [T = CLIceController]", "%s\n", v82);
      if (v82 != buf) {
        free(v82);
      }
    }
    uint64_t v41 = *(void *)(a1 + 32);
    *(void *)uint64_t buf = &v93;
    uint64_t v42 = sub_1000C5658(v14, &v93, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    double v43 = v42[5];
    uint64_t v44 = (uint64_t)v42[6];
    long long v45 = (void *)(v41 + (v44 >> 1));
    if (v44) {
      double v43 = *(uint64_t **)(*v45 + v43);
    }
    int v46 = ((uint64_t (*)(void *, uint64_t))v43)(v45, 1);
    if (v46 == v93)
    {
      *(_DWORD *)(a1 + 4) = v24;
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      uint64_t v47 = qword_1024193D8;
      os_log_type_t v48 = *(unsigned char *)(a1 + 120);
      if (os_log_type_enabled((os_log_t)qword_1024193D8, v48))
      {
        __int16 v49 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          __int16 v49 = (void *)*v49;
        }
        if (v24) {
          int v50 = "kRunning";
        }
        else {
          int v50 = "kDisconnected";
        }
        sub_100134750(__p, v50);
        int v51 = v3;
        int v52 = SHIBYTE(v97);
        int v53 = *(unsigned char **)__p;
        sub_100134750(v104, "Enter");
        int v54 = __p;
        if (v52 < 0) {
          int v54 = v53;
        }
        if (v107 >= 0) {
          uint64_t v55 = v104;
        }
        else {
          uint64_t v55 = *(unsigned char **)v104;
        }
        *(_DWORD *)uint64_t buf = 136315650;
        *(void *)&uint8_t buf[4] = v49;
        __int16 v100 = 2080;
        int v101 = v54;
        __int16 v102 = 2080;
        int v103 = v55;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "%snewState,%s,event,%s", buf, 0x20u);
        if (v107 < 0) {
          operator delete(*(void **)v104);
        }
        uint64_t v3 = v51;
        if (SHIBYTE(v97) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v3[122] != -1) {
          dispatch_once(&qword_1024193D0, &stru_102348C40);
        }
        double v83 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          double v83 = (void *)*v83;
        }
        if (v24) {
          char v84 = "kRunning";
        }
        else {
          char v84 = "kDisconnected";
        }
        sub_100134750(v104, v84);
        int v85 = v107;
        __int16 v86 = *(unsigned char **)v104;
        sub_100134750(v91, "Enter");
        __int16 v87 = v104;
        if (v85 < 0) {
          __int16 v87 = v86;
        }
        if (v92 >= 0) {
          __int16 v88 = v91;
        }
        else {
          __int16 v88 = (void **)v91[0];
        }
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = v83;
        __int16 v95 = 2080;
        __int16 v96 = v87;
        __int16 v97 = 2080;
        __int16 v98 = v88;
        __int16 v89 = (char *)_os_log_send_and_compose_impl();
        if (v92 < 0) {
          operator delete(v91[0]);
        }
        if (v107 < 0) {
          operator delete(*(void **)v104);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLIceController>::handleEvent(Event) [T = CLIceController]", "%s\n", v89);
        if (v89 != buf) {
          free(v89);
        }
      }
      uint64_t v56 = *(void *)(a1 + 32);
      *(void *)uint64_t buf = &v90;
      int v57 = sub_1000C5658(v14, &v90, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      int v58 = v57[5];
      uint64_t v59 = (uint64_t)v57[6];
      int v60 = (void *)(v56 + (v59 >> 1));
      if (v59) {
        int v58 = *(uint64_t **)(*v60 + v58);
      }
      uint64_t v24 = ((uint64_t (*)(void *, void))v58)(v60, 0);
      if (v24 == v90) {
        goto LABEL_101;
      }
      sub_1019A3FF4();
    }
    else
    {
      sub_1019A4160();
    }
LABEL_181:
    __break(1u);
  }
LABEL_101:
  --*(_DWORD *)(a1 + 88);
  return v24;
}

void sub_1019940C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 105) < 0) {
    operator delete(*(void **)(v22 - 128));
  }
  _Unwind_Resume(exception_object);
}

void sub_101994120(uint64_t a1)
{
  uint64_t v1 = *(NSObject ***)(a1 + 32);
  uint64_t v2 = *v1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101994194;
  block[3] = &unk_1022A3020;
  void block[4] = v1;
  dispatch_async(v2, block);
}

uint64_t sub_101994194(uint64_t a1)
{
  return sub_101993300(*(void *)(a1 + 32) + 16, 5);
}

void sub_1019941A4(uint64_t a1)
{
  uint64_t v1 = *(NSObject ***)(a1 + 32);
  uint64_t v2 = *v1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101994218;
  block[3] = &unk_1022A3020;
  void block[4] = v1;
  dispatch_async(v2, block);
}

uint64_t sub_101994218(uint64_t a1)
{
  return sub_101993300(*(void *)(a1 + 32) + 16, 3);
}

void sub_101994228(uint64_t a1)
{
  uint64_t v1 = *(NSObject ***)(a1 + 32);
  uint64_t v2 = *v1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10199429C;
  block[3] = &unk_1022A3020;
  void block[4] = v1;
  dispatch_async(v2, block);
}

uint64_t sub_10199429C(uint64_t a1)
{
  return sub_101993300(*(void *)(a1 + 32) + 16, 2);
}

void *sub_1019942AC(uint64_t a1, int a2, uint64_t a3)
{
  v20[0] = a2;
  uint64_t v3 = a1 + 192;
  uint64_t v4 = *(void *)(a1 + 192);
  if (!v4) {
    goto LABEL_13;
  }
  int v7 = (uint64_t **)(a1 + 184);
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 28);
    BOOL v10 = v9 < a2;
    if (v9 >= a2) {
      long long v11 = (uint64_t *)v4;
    }
    else {
      long long v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(void *)(a1 + 144))
  {
LABEL_13:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      v20[1] = 67240192;
      v20[2] = a2;
      char v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = GnssHal::ExtensionsOlaf::LtlInfo]", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    uint64_t v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      uint64_t v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      __int16 v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
    }
    int v17 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      uint64_t v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      __int16 v27 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
    }
    BOOL v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      uint64_t v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = "assert";
      __int16 v26 = 2081;
      __int16 v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  *(void *)uint64_t buf = v20;
  int v12 = *((_DWORD *)sub_100125FD0(v7, v20, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3321888768;
  v28[2] = sub_10199AFEC;
  v28[3] = &unk_102348F00;
  void v28[4] = a1;
  sub_10199B364((uint64_t)v29, a3);
  sub_101845C78(*(void **)(a1 + 144), v12, (uint64_t)v28);
  return sub_10199B4DC(v29);
}

void sub_101994770(_Unwind_Exception *a1)
{
  sub_10199B4DC(v1);
  _Unwind_Resume(a1);
}

void sub_10199478C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_101994794(uint64_t a1)
{
  sub_1011A2D74((void *)(a1 + 400));
  sub_1011A2D74((void *)(a1 + 344));
  sub_1019601C4((void *)(a1 + 280));
  sub_101960140((void *)(a1 + 248));
  sub_10065ABCC((void *)(a1 + 208));
  sub_1000F5BB0(a1 + 184, *(void **)(a1 + 192));
  sub_101999CB8((void *)(a1 + 152));
  uint64_t v2 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  if (v2) {
    sub_101999C60(a1 + 144, v2);
  }
  sub_1019996DC(a1 + 16);
  return a1;
}

uint64_t sub_101994814(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 208;
  sub_101926EA4((void *)(a1 + 208), a2);
  char v4 = *(unsigned char *)(a1 + 8);

  return sub_100180260(v3, v4);
}

void sub_101994858(uint64_t a1, unsigned int a2, int a3, int a4, int a5)
{
  char v10 = sub_1000FFBA8();
  if (!a2 || (v10 & 1) != 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    uint64_t v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67109888;
      unsigned int v18 = a2;
      __int16 v19 = 1024;
      int v20 = a3;
      __int16 v21 = 1024;
      int v22 = a4;
      __int16 v23 = 1024;
      int v24 = a5;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "setLPPConfig,nInstance,%d,enable,%d,enableRssi,%d,enableLocationSource,%d", buf, 0x1Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::setLPPConfig(uint32_t, BOOL, BOOL, BOOL)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    if (sub_10073C6AC())
    {
      int v14 = (uint64_t *)(a1 + 392);
      sub_101994C5C(v14, a2, 0x2Cu, a3);
      sub_101994C5C(v14, a2, 0x2Du, a4);
      sub_101994C5C(v14, a2, 0x2Eu, a5);
    }
    else
    {
      int v15 = (uint64_t *)(a1 + 336);
      sub_101994FF4(v15, a2, 0x2Cu, a3);
      sub_101994FF4(v15, a2, 0x2Du, a4);
      sub_101994FF4(v15, a2, 0x2Eu, a5);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    long long v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67109888;
      unsigned int v18 = a2;
      __int16 v19 = 1024;
      int v20 = a3;
      __int16 v21 = 1024;
      int v22 = a4;
      __int16 v23 = 1024;
      int v24 = a5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "setLPPConfig,Invalid,nInstance,%d,enable,%d,enableRssi,%d,enableLocationSource,%d", buf, 0x1Au);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::setLPPConfig(uint32_t, BOOL, BOOL, BOOL)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
}

void sub_101994C5C(uint64_t *a1, unsigned int a2, unsigned int a3, int a4)
{
  unint64_t v12 = __PAIR64__(a3, a2);
  LOBYTE(v13) = a4;
  if (a2 && (sub_1000FFBA8() & 1) == 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67175169;
      unsigned int v21 = a2;
      __int16 v22 = 1025;
      unsigned int v23 = a3;
      __int16 v24 = 1025;
      int v25 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "PosCapabilityQueue,push,Invalid,nInstance,%{private}d,cap,%{private}d,value,%{private}d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v14 = 67175169;
      unsigned int v15 = a2;
      __int16 v16 = 1025;
      unsigned int v17 = a3;
      __int16 v18 = 1025;
      int v19 = a4;
      long long v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::PosCapabilityQueue::setCapability(uint32_t, IBIClsPositioningCapabilityType, BOOL)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    uint64_t v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67175169;
      unsigned int v21 = a2;
      __int16 v22 = 1025;
      unsigned int v23 = a3;
      __int16 v24 = 1025;
      int v25 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PosCapabilityQueue,push,nInstance,%{private}d,cap,%{private}d,value,%{private}d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v14 = 67175169;
      unsigned int v15 = a2;
      __int16 v16 = 1025;
      unsigned int v17 = a3;
      __int16 v18 = 1025;
      int v19 = a4;
      char v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::PosCapabilityQueue::setCapability(uint32_t, IBIClsPositioningCapabilityType, BOOL)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    sub_10199DE30(a1 + 1, (uint64_t *)&v12);
    if (a1[6] == 1) {
      sub_1019962FC(a1, v12, v13);
    }
  }
}

void sub_101994FF4(uint64_t *a1, unsigned int a2, unsigned int a3, int a4)
{
  unint64_t v13 = __PAIR64__(a3, a2);
  int v14 = a4;
  char v8 = sub_1000FFBA8();
  if (!a2 || (v8 & 1) != 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    long long v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67109632;
      unsigned int v22 = a2;
      __int16 v23 = 1024;
      unsigned int v24 = a3;
      __int16 v25 = 1024;
      int v26 = a4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "SsLcsCapabilityQueue,push,nInstance,%d,cap,%d,value,%d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v15 = 67109632;
      unsigned int v16 = a2;
      __int16 v17 = 1024;
      unsigned int v18 = a3;
      __int16 v19 = 1024;
      int v20 = a4;
      unint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::SsLcsCapabilityQueue::setCapability(uint32_t, IBISsLcsPositioningCapabilityType, BOOL)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    sub_10199C7DC(a1 + 1, (uint64_t *)&v13);
    if (a1[6] == 1) {
      sub_101995B64(a1, v13, v14);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67109632;
      unsigned int v22 = a2;
      __int16 v23 = 1024;
      unsigned int v24 = a3;
      __int16 v25 = 1024;
      int v26 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "SsLcsCapabilityQueue,push,Invalid,nInstance,%d,cap,%d,value,%d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v15 = 67109632;
      unsigned int v16 = a2;
      __int16 v17 = 1024;
      unsigned int v18 = a3;
      __int16 v19 = 1024;
      int v20 = a4;
      char v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::SsLcsCapabilityQueue::setCapability(uint32_t, IBISsLcsPositioningCapabilityType, BOOL)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

uint64_t sub_101995384(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "baseband/CT is down", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    char v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::onStop()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  *(unsigned char *)(a1 + 8) = 0;
  sub_100180260(a1 + 208, 0);
  sub_101997A4C(a1 + 248, 5);
  return sub_10199931C(a1 + 280, 1, 0);
}

void sub_101995544(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "baseband/CT is up", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::onStart()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  *(unsigned char *)(a1 + 8) = 1;
  sub_100180260(a1 + 208, 1);
  sub_101997A4C(a1 + 248, 4);
  sub_10199931C(a1 + 280, 0, 0);
  sub_1019974F8(a1);
}

void *sub_101995710@<X0>(int a1@<W0>, void *a2@<X8>)
{
  return sub_100134750(a2, off_1023496F0[a1]);
}

BOOL sub_101995724(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = a1 + 192;
  uint64_t v4 = *(void *)(a1 + 192);
  if (!v4) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 192;
  uint64_t v7 = *(void *)(a1 + 192);
  do
  {
    int v8 = *(_DWORD *)(v7 + 28);
    BOOL v9 = v8 < a2;
    if (v8 >= a2) {
      char v10 = (uint64_t *)v7;
    }
    else {
      char v10 = (uint64_t *)(v7 + 8);
    }
    if (!v9) {
      uint64_t v6 = v7;
    }
    uint64_t v7 = *v10;
  }
  while (*v10);
  if (v6 == v3 || *(_DWORD *)(v6 + 28) > a2)
  {
LABEL_11:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    long long v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Invalid request id. Cannot map to GMID", buf, 2u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (!v12) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_44;
    }
LABEL_48:
    dispatch_once(&qword_1024193D0, &stru_102348C40);
LABEL_44:
    unsigned int v22 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLIceController::isSendAllowed(CLIceMessageDef::MessageId, CLIceMessageDef::MessageId)", "%s\n");
LABEL_45:
    if (v22 != buf) {
      free(v22);
    }
    return 0;
  }
  uint64_t v14 = a1 + 192;
  do
  {
    int v15 = *(_DWORD *)(v4 + 28);
    BOOL v16 = v15 < a3;
    if (v15 >= a3) {
      __int16 v17 = (uint64_t *)v4;
    }
    else {
      __int16 v17 = (uint64_t *)(v4 + 8);
    }
    if (!v16) {
      uint64_t v14 = v4;
    }
    uint64_t v4 = *v17;
  }
  while (*v17);
  if (v14 == v3 || *(_DWORD *)(v14 + 28) > a3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    unsigned int v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Invalid expected response id. Cannot map to GMID", buf, 2u);
    }
    BOOL v19 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v19)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_44;
      }
      goto LABEL_48;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 8)) {
      return 1;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v20 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = *(unsigned __int8 *)(a1 + 8);
      *(_DWORD *)uint64_t buf = 67109120;
      int v24 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning Message send not allowed,connected,%d", buf, 8u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      unsigned int v22 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLIceController::isSendAllowed(CLIceMessageDef::MessageId, CLIceMessageDef::MessageId)", "%s\n");
      goto LABEL_45;
    }
  }
  return result;
}

void *sub_101995B64(uint64_t *a1, unint64_t a2, char a3)
{
  int v4 = a2;
  unint64_t v6 = HIDWORD(a2);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109632;
    int v20 = v4;
    *(_WORD *)int v21 = 1024;
    *(_DWORD *)&v21[2] = v6;
    __int16 v22 = 1024;
    int v23 = a3 & 1;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SsLcsCapabilityQueue,send,nInstance,%d,cap,%d,value,%d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v8 = a3 & 1;
    int v13 = 67109632;
    int v14 = v4;
    __int16 v15 = 1024;
    int v16 = v6;
    __int16 v17 = 1024;
    int v18 = v8;
    long long v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::SsLcsCapabilityQueue::sendToBaseband(SsLcsCapabilityElement)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  else
  {
    int v8 = a3 & 1;
  }
  *(_DWORD *)uint64_t buf = v4;
  int v20 = 0;
  *(_DWORD *)int v21 = v6;
  v21[4] = 1;
  int v23 = v8;
  int v24 = 0;
  uint64_t v9 = *a1;
  v12[0] = off_102349060;
  v12[1] = a1;
  v12[3] = v12;
  sub_101995DCC(v9, 53, (uint64_t)buf, 39, (uint64_t)v12);
  return sub_10199C758(v12);
}

void sub_101995DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_101995DCC(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  int v21 = a4;
  int v22 = a2;
  if (sub_101995724(a1, a2, a4))
  {
    *(void *)uint64_t buf = &v21;
    int v9 = *((_DWORD *)sub_100125FD0((uint64_t **)(a1 + 184), &v21, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
    *(void *)uint64_t buf = &v22;
    char v10 = sub_100125FD0((uint64_t **)(a1 + 184), &v22, (uint64_t)&unk_101D0B290, (unsigned int **)buf);
    AriMsg::AriMsg((AriMsg *)v20, *((_DWORD *)v10 + 8));
    if (sub_10189D32C((AriMsg *)v20, a3))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      long long v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        unsigned int Gmid = AriMsg::getGmid((AriMsg *)v20);
        unsigned int v13 = AriMsg::getGmid((AriMsg *)v20);
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = Gmid >> 26;
        __int16 v33 = 1024;
        int v34 = (v13 >> 15) & 0x3FF;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102348C40);
        }
        unsigned int v17 = AriMsg::getGmid((AriMsg *)v20);
        unsigned int v18 = AriMsg::getGmid((AriMsg *)v20);
        int v35 = 67109376;
        unsigned int v36 = v17 >> 26;
        __int16 v37 = 1024;
        int v38 = (v18 >> 15) & 0x3FF;
        BOOL v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsSsLcsPositioningCapabilityReqParamWithInstance, TResp = IBIMsSsLcsPositioningCapabilityRspParamWithInstance]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3321888768;
      v26[2] = sub_10199B5B4;
      v26[3] = &unk_102348FF0;
      v26[4] = a1;
      int v28 = v9;
      int v29 = v21;
      sub_10199C288((uint64_t)v27, a5);
      sub_101845E6C(*(void **)(a1 + 144), (uint64_t)v20, (uint64_t)v26);
      sub_10199C758(v27);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      __int16 v15 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102348C40);
        }
        int v30 = 67240192;
        int v31 = v22;
        int v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsSsLcsPositioningCapabilityReqParamWithInstance, TResp = IBIMsSsLcsPositioningCapabilityRspParamWithInstance]", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      sub_10199B560(a5, 3);
    }
    AriMsg::~AriMsg((AriMsg *)v20);
  }
  else
  {
    int v14 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_10199C0C4;
    block[3] = &unk_102349020;
    int v25 = a2;
    sub_10199C288((uint64_t)v24, a5);
    dispatch_async(v14, block);
    sub_10199C758(v24);
  }
}

void sub_1019962B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

void *sub_1019962FC(uint64_t *a1, unint64_t a2, char a3)
{
  int v4 = a2;
  unint64_t v6 = HIDWORD(a2);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67175169;
    int v20 = v4;
    *(_WORD *)int v21 = 1025;
    *(_DWORD *)&v21[2] = v6;
    __int16 v22 = 1025;
    int v23 = a3 & 1;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PosLcsCapabilityElement,send,nInstance,%{private}d,cap,%{private}d,value,%{private}d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v8 = a3 & 1;
    int v13 = 67175169;
    int v14 = v4;
    __int16 v15 = 1025;
    int v16 = v6;
    __int16 v17 = 1025;
    int v18 = v8;
    long long v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::PosCapabilityQueue::sendToBaseband(PosLcsCapabilityElement)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  else
  {
    int v8 = a3 & 1;
  }
  *(_DWORD *)uint64_t buf = v4;
  int v20 = 0;
  *(_DWORD *)int v21 = v6;
  v21[4] = 1;
  int v23 = v8;
  int v24 = 0;
  uint64_t v9 = *a1;
  v12[0] = off_102349180;
  v12[1] = a1;
  v12[3] = v12;
  sub_101996564(v9, 54, (uint64_t)buf, 40, (uint64_t)v12);
  return sub_10199DDAC(v12);
}

void sub_101996548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_101996564(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  int v21 = a4;
  int v22 = a2;
  if (sub_101995724(a1, a2, a4))
  {
    *(void *)uint64_t buf = &v21;
    int v9 = *((_DWORD *)sub_100125FD0((uint64_t **)(a1 + 184), &v21, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
    *(void *)uint64_t buf = &v22;
    char v10 = sub_100125FD0((uint64_t **)(a1 + 184), &v22, (uint64_t)&unk_101D0B290, (unsigned int **)buf);
    AriMsg::AriMsg((AriMsg *)v20, *((_DWORD *)v10 + 8));
    if (sub_10189D32C((AriMsg *)v20, a3))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      long long v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        unsigned int Gmid = AriMsg::getGmid((AriMsg *)v20);
        unsigned int v13 = AriMsg::getGmid((AriMsg *)v20);
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = Gmid >> 26;
        __int16 v33 = 1024;
        int v34 = (v13 >> 15) & 0x3FF;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102348C40);
        }
        unsigned int v17 = AriMsg::getGmid((AriMsg *)v20);
        unsigned int v18 = AriMsg::getGmid((AriMsg *)v20);
        int v35 = 67109376;
        unsigned int v36 = v17 >> 26;
        __int16 v37 = 1024;
        int v38 = (v18 >> 15) & 0x3FF;
        BOOL v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsClsPositioningCapabilityReqParamWithInstance, TResp = IBIMsClsPositioningCapabilityRspParamWithInstance]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3321888768;
      v26[2] = sub_10199CC08;
      v26[3] = &unk_102349110;
      v26[4] = a1;
      int v28 = v9;
      int v29 = v21;
      sub_10199D8DC((uint64_t)v27, a5);
      sub_101845E6C(*(void **)(a1 + 144), (uint64_t)v20, (uint64_t)v26);
      sub_10199DDAC(v27);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      __int16 v15 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102348C40);
        }
        int v30 = 67240192;
        int v31 = v22;
        int v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsClsPositioningCapabilityReqParamWithInstance, TResp = IBIMsClsPositioningCapabilityRspParamWithInstance]", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      sub_10199CBB4(a5, 3);
    }
    AriMsg::~AriMsg((AriMsg *)v20);
  }
  else
  {
    int v14 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_10199D718;
    block[3] = &unk_102349140;
    int v25 = a2;
    sub_10199D8DC((uint64_t)v24, a5);
    dispatch_async(v14, block);
    sub_10199DDAC(v24);
  }
}

void sub_101996A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

void sub_101996A94(uint64_t a1)
{
  if (!*(void *)(a1 + 48))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "SsLcsCapabilityQueue,pop,queueEmptyFailure", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v9 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::SsLcsCapabilityQueue::onCapabilityResponse()", "%s\n");
LABEL_30:
    if (v9 != buf) {
      free(v9);
    }
    return;
  }
  unint64_t v2 = *(void *)(*(void *)(a1 + 16) + 8 * (*(void *)(a1 + 40) / 0x155uLL))
     + 12 * (*(void *)(a1 + 40) % 0x155uLL);
  int v4 = *(_DWORD *)v2;
  int v3 = *(_DWORD *)(v2 + 4);
  char v5 = *(unsigned char *)(v2 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  unint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109632;
    int v13 = v4;
    __int16 v14 = 1024;
    int v15 = v3;
    __int16 v16 = 1024;
    int v17 = v5 & 1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SsLcsCapabilityQueue,pop,nInstance,%d,cap,%d,value,%d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    long long v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::SsLcsCapabilityQueue::onCapabilityResponse()", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  *(int64x2_t *)(a1 + 40) = vaddq_s64(*(int64x2_t *)(a1 + 40), (int64x2_t)xmmword_101D0A740);
  sub_1011A2F44(a1 + 8, 1);
  if (*(void *)(a1 + 48))
  {
    unint64_t v7 = *(void *)(*(void *)(a1 + 16) + 8 * (*(void *)(a1 + 40) / 0x155uLL))
       + 12 * (*(void *)(a1 + 40) % 0x155uLL);
    sub_101995B64((uint64_t *)a1, *(void *)v7, *(_DWORD *)(v7 + 8));
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  char v10 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109632;
    int v13 = v4;
    __int16 v14 = 1024;
    int v15 = v3;
    __int16 v16 = 1024;
    int v17 = v5 & 1;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "SsLcsCapabilityQueue,end,nInstance,%d,cap,%d,value,%d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v9 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::SsLcsCapabilityQueue::onCapabilityResponse()", "%s\n");
    goto LABEL_30;
  }
}

void sub_101996FD4(uint64_t a1)
{
  if (!*(void *)(a1 + 48))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    unint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "PosCapabilityQueue,pop,queueEmptyFailure", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v8 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::PosCapabilityQueue::onCapabilityResponse()", "%s\n");
LABEL_30:
    if (v8 != buf) {
      free(v8);
    }
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  unint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8 * (*(void *)(a1 + 40) / 0x155uLL))
       + 12 * (*(void *)(a1 + 40) % 0x155uLL);
    int v4 = *(_DWORD *)v3;
    int v5 = *(_DWORD *)(v3 + 4);
    LODWORD(v3) = *(unsigned __int8 *)(v3 + 8);
    *(_DWORD *)uint64_t buf = 67109632;
    int v12 = v4;
    __int16 v13 = 1024;
    int v14 = v5;
    __int16 v15 = 1024;
    int v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PosCapabilityQueue,pop,nInstance,%d,cap,%d,value,%d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    char v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::PosCapabilityQueue::onCapabilityResponse()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  *(int64x2_t *)(a1 + 40) = vaddq_s64(*(int64x2_t *)(a1 + 40), (int64x2_t)xmmword_101D0A740);
  sub_1011A2F44(a1 + 8, 1);
  if (*(void *)(a1 + 48))
  {
    unint64_t v6 = *(void *)(*(void *)(a1 + 16) + 8 * (*(void *)(a1 + 40) / 0x155uLL))
       + 12 * (*(void *)(a1 + 40) % 0x155uLL);
    sub_1019962FC((uint64_t *)a1, *(void *)v6, *(_DWORD *)(v6 + 8));
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  int v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PosCapabilityQueue,end", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v8 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::PosCapabilityQueue::onCapabilityResponse()", "%s\n");
    goto LABEL_30;
  }
}

void sub_1019974F8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 240))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    unint64_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning,fIsNonEmergencySessionAllowed,true", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_21:
        unint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::sendNonEmergencySessionConfig()", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        goto LABEL_14;
      }
LABEL_23:
      dispatch_once(&qword_1024193D0, &stru_102348C40);
      goto LABEL_21;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    unint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "fIsNonEmergencySessionAllowed,false", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_21;
      }
      goto LABEL_23;
    }
  }
LABEL_14:
  int v4 = sub_10073C6AC();
  BOOL v5 = *(unsigned char *)(a1 + 240) != 0;
  if (v4)
  {
    sub_101994C5C((uint64_t *)(a1 + 392), 0, 0x23u, v5);
    if (sub_1000FFBA8()) {
      sub_101994C5C((uint64_t *)(a1 + 392), 1u, 0x23u, *(unsigned __int8 *)(a1 + 240));
    }
  }
  else
  {
    sub_101994FF4((uint64_t *)(a1 + 336), 0, 0x23u, v5);
    if (sub_1000FFBA8()) {
      sub_101994FF4((uint64_t *)(a1 + 336), 1u, 0x23u, *(unsigned __int8 *)(a1 + 240));
    }
  }
}

uint64_t sub_1019977EC(uint64_t a1, int *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[5];
    int v6 = *a2;
    int v7 = a2[1];
    int v8 = a2[2];
    int v9 = a2[3];
    int v10 = *((__int16 *)a2 + 8);
    int v11 = *((__int16 *)a2 + 9);
    *(_DWORD *)uint64_t buf = 67110656;
    int v18 = v6;
    __int16 v19 = 1024;
    int v20 = v5;
    __int16 v21 = 1024;
    int v22 = v7;
    __int16 v23 = 1024;
    int v24 = v8;
    __int16 v25 = 1024;
    int v26 = v9;
    __int16 v27 = 1024;
    int v28 = v10;
    __int16 v29 = 1024;
    int v30 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "XccDbg,kXccClockCotrolInd,ind_type,%d,peripheral,%d,ref_clk_status,%d,ref_clock_state,%d,modem_connected,%d,freq_error_ppb,%d,freq_qual,%d", buf, 0x2Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::handleXccIndication(const IBIXccClockControlIndCbParams &)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  if (*a2) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = a2[1] == 0;
  }
  int v14 = v12 || a2[2] == -1;
  return sub_101997A4C(a1 + 248, v14);
}

uint64_t sub_101997A4C(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *sub_101997AA0(uint64_t a1, int a2, uint64_t a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#ecid,req", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v13 = 67109120;
    int v14 = a2;
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::setSingleShotRadioSignalReportingCb(uint32_t, std::function<void (BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &)>)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  sub_10199E208((uint64_t)v10, a3);
  BOOL v12 = 0;
  int v7 = operator new(0x30uLL);
  *int v7 = off_1023492A0;
  v7[1] = a1;
  sub_1019A0388((uint64_t)(v7 + 2), (uint64_t)v10);
  BOOL v12 = v7;
  sub_101997D0C(a1);
  sub_1019A048C(v11);
  return sub_1017DD2F4(v10);
}

void sub_101997CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1019A048C((uint64_t *)va);
  sub_1017DD2F4(v9);
  _Unwind_Resume(a1);
}

void sub_101997D0C(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  int v4 = v3;
  int v6 = v5;
  uint64_t v8 = v7;
  int v22 = v9;
  int v23 = v5;
  if (sub_101995724(v7, v5, v9))
  {
    *(void *)uint64_t buf = &v22;
    int v10 = *((_DWORD *)sub_100125FD0((uint64_t **)(v8 + 184), &v22, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
    *(void *)uint64_t buf = &v23;
    int v11 = sub_100125FD0((uint64_t **)(v8 + 184), &v23, (uint64_t)&unk_101D0B290, (unsigned int **)buf);
    AriMsg::AriMsg((AriMsg *)v21, *((_DWORD *)v11 + 8));
    if (sub_10189D3F0((AriMsg *)v21, v4))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      BOOL v12 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        unsigned int Gmid = AriMsg::getGmid((AriMsg *)v21);
        unsigned int v14 = AriMsg::getGmid((AriMsg *)v21);
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = Gmid >> 26;
        __int16 v38 = 1024;
        int v39 = (v14 >> 15) & 0x3FF;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102348C40);
        }
        unsigned int v18 = AriMsg::getGmid((AriMsg *)v21);
        unsigned int v19 = AriMsg::getGmid((AriMsg *)v21);
        *(_DWORD *)__int16 v33 = 67109376;
        int v34 = v18 >> 26;
        __int16 v35 = 1024;
        int v36 = (v19 >> 15) & 0x3FF;
        int v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBINetSingleShotRadioSignalReportingReqParam, TResp = CLIBINetSingleShotRadioSignalReportingRspParam]", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3321888768;
      v27[2] = sub_10199E2F4;
      void v27[3] = &unk_102349230;
      void v27[4] = v8;
      int v29 = v10;
      int v30 = v22;
      sub_10199F078((uint64_t)v28, v2);
      sub_101845E6C(*(void **)(v8 + 144), (uint64_t)v21, (uint64_t)v27);
      sub_1019A048C(v28);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v16 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__int16 v33 = 67240192;
        int v34 = v23;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", v33, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(v33, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102348C40);
        }
        int v31 = 67240192;
        int v32 = v23;
        int v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBINetSingleShotRadioSignalReportingReqParam, TResp = CLIBINetSingleShotRadioSignalReportingRspParam]", "%s\n", v17);
        if (v17 != (char *)v33) {
          free(v17);
        }
      }
      sub_10199E2A0(v2, 3);
    }
    AriMsg::~AriMsg((AriMsg *)v21);
  }
  else
  {
    __int16 v15 = *(NSObject **)v8;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_10199EEB4;
    block[3] = &unk_102349260;
    int v26 = v6;
    sub_10199F078((uint64_t)v25, v2);
    dispatch_async(v15, block);
    sub_1019A048C(v25);
  }
}

void sub_101998218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

void *sub_10199825C(uint64_t a1, unsigned int a2)
{
  v7[0] = 0;
  v7[1] = a2;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    unsigned int v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "XccDbg,timeout,%u", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v9 = 67109120;
    unsigned int v10 = a2;
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::setXccEnableInternal(uint32_t)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  v8[0] = off_1023493E0;
  v8[1] = a2;
  v8[2] = a1;
  v8[3] = v8;
  sub_101998474(a1, 56, v7, 42, (uint64_t)v8);
  return sub_1019A18C0(v8);
}

void sub_101998458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_101998474(uint64_t a1, int a2, void *a3, int a4, uint64_t a5)
{
  int v21 = a4;
  int v22 = a2;
  if (sub_101995724(a1, a2, a4))
  {
    *(void *)uint64_t buf = &v21;
    int v9 = *((_DWORD *)sub_100125FD0((uint64_t **)(a1 + 184), &v21, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
    *(void *)uint64_t buf = &v22;
    unsigned int v10 = sub_100125FD0((uint64_t **)(a1 + 184), &v22, (uint64_t)&unk_101D0B290, (unsigned int **)buf);
    AriMsg::AriMsg((AriMsg *)v20, *((_DWORD *)v10 + 8));
    if (sub_10189D3C4((AriMsg *)v20, a3))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        unsigned int Gmid = AriMsg::getGmid((AriMsg *)v20);
        unsigned int v13 = AriMsg::getGmid((AriMsg *)v20);
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = Gmid >> 26;
        __int16 v33 = 1024;
        int v34 = (v13 >> 15) & 0x3FF;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102348C40);
        }
        unsigned int v17 = AriMsg::getGmid((AriMsg *)v20);
        unsigned int v18 = AriMsg::getGmid((AriMsg *)v20);
        int v35 = 67109376;
        unsigned int v36 = v17 >> 26;
        __int16 v37 = 1024;
        int v38 = (v18 >> 15) & 0x3FF;
        unsigned int v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccClockControlReqParams, TResp = IBIXccClockControlRspCbParams]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3321888768;
      v26[2] = sub_1019A0564;
      v26[3] = &unk_102349370;
      v26[4] = a1;
      int v28 = v9;
      int v29 = v21;
      sub_1019A1238((uint64_t)v27, a5);
      sub_101845E6C(*(void **)(a1 + 144), (uint64_t)v20, (uint64_t)v26);
      sub_1019A18C0(v27);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      __int16 v15 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102348C40);
        }
        int v30 = 67240192;
        int v31 = v22;
        int v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccClockControlReqParams, TResp = IBIXccClockControlRspCbParams]", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      sub_1019A0510(a5, 3);
    }
    AriMsg::~AriMsg((AriMsg *)v20);
  }
  else
  {
    unsigned int v14 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_1019A1074;
    block[3] = &unk_1023493A0;
    int v25 = a2;
    sub_1019A1238((uint64_t)v24, a5);
    dispatch_async(v14, block);
    sub_1019A18C0(v24);
  }
}

void sub_101998960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1019989A4(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 24))
  {
    sub_1019A4438();
    __break(1u);
  }
  sub_101960078((uint64_t)v8, a2);
  uint64_t v9 = a1;
  sub_1019A1944((uint64_t)v10, (uint64_t)v8);
  unint64_t v3 = operator new(0x30uLL);
  uint64_t v4 = v9;
  void *v3 = off_102349470;
  v3[1] = v4;
  sub_1019A1944((uint64_t)(v3 + 2), (uint64_t)v10);
  void v11[3] = v3;
  sub_10199A718(v11, (void *)(a1 + 248));
  sub_101960140(v11);
  sub_101960140(v10);
  sub_101960140(v8);
  if (*(unsigned char *)(a1 + 8)) {
    int v5 = 4;
  }
  else {
    int v5 = 5;
  }
  return sub_101997A4C(a1 + 248, v5);
}

void sub_101998AC0(_Unwind_Exception *a1)
{
  sub_101960140(v2);
  sub_101960140(v1);
  _Unwind_Resume(a1);
}

void *sub_101998AE4(uint64_t a1, int a2)
{
  v7[0] = 0;
  if ((a2 + 1) <= 3) {
    v7[1] = a2;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#xocal,requestInfo,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v9 = 67109120;
    int v10 = a2;
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::requestLtlInfo(const GnssHal::ExtensionsOlaf::LtlInfoType)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  v8[0] = off_102349670;
  v8[1] = a1;
  v8[3] = v8;
  sub_101998D08(a1, 59, (char *)v7, 45, (uint64_t)v8);
  return sub_1019A39A0(v8);
}

void sub_101998CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_101998D08(uint64_t a1, int a2, char *a3, int a4, uint64_t a5)
{
  int v21 = a4;
  int v22 = a2;
  if (sub_101995724(a1, a2, a4))
  {
    *(void *)uint64_t buf = &v21;
    int v9 = *((_DWORD *)sub_100125FD0((uint64_t **)(a1 + 184), &v21, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
    *(void *)uint64_t buf = &v22;
    int v10 = sub_100125FD0((uint64_t **)(a1 + 184), &v22, (uint64_t)&unk_101D0B290, (unsigned int **)buf);
    AriMsg::AriMsg((AriMsg *)v20, *((_DWORD *)v10 + 8));
    if (sub_10189D44C((AriMsg *)v20, a3))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        unsigned int Gmid = AriMsg::getGmid((AriMsg *)v20);
        unsigned int v13 = AriMsg::getGmid((AriMsg *)v20);
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = Gmid >> 26;
        __int16 v37 = 1024;
        int v38 = (v13 >> 15) & 0x3FF;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Req,gid,0x%03x,mid,0x%03x", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102348C40);
        }
        unsigned int v17 = AriMsg::getGmid((AriMsg *)v20);
        unsigned int v18 = AriMsg::getGmid((AriMsg *)v20);
        int v30 = 67109376;
        unsigned int v31 = v17 >> 26;
        __int16 v32 = 1024;
        int v33 = (v18 >> 15) & 0x3FF;
        unsigned int v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccLtlReq, TResp = IBIXccLtlRspCb]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3321888768;
      v26[2] = sub_1019A2860;
      v26[3] = &unk_102349600;
      v26[4] = a1;
      int v28 = v9;
      int v29 = v21;
      sub_1019A352C((uint64_t)v27, a5);
      sub_101845E6C(*(void **)(a1 + 144), (uint64_t)v20, (uint64_t)v26);
      sub_1019A39A0(v27);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      __int16 v15 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "NilrDbg,Ari,ReqFail,sendId,%{public}d,failure,packFailed", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102348C40);
        }
        int v34 = 67240192;
        int v35 = v22;
        int v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccLtlReq, TResp = IBIXccLtlRspCb]", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      sub_1019A280C(a5, 3);
    }
    AriMsg::~AriMsg((AriMsg *)v20);
  }
  else
  {
    unsigned int v14 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_1019A3368;
    block[3] = &unk_102349630;
    int v25 = a2;
    sub_1019A352C((uint64_t)v24, a5);
    dispatch_async(v14, block);
    sub_1019A39A0(v24);
  }
}

void sub_1019991FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  AriMsg::~AriMsg((AriMsg *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101999240(uint64_t a1)
{
  return sub_101993300(a1 + 16, 6);
}

void *sub_10199924C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 24))
  {
    uint64_t v3 = a1 + 280;
    sub_1019992A8((void *)(a1 + 280), a2);
    BOOL v4 = *(unsigned char *)(a1 + 8) == 0;
    return (void *)sub_10199931C(v3, v4, 0);
  }
  else
  {
    int v6 = (void *)sub_1019A45A4();
    return sub_1019992A8(v6, v7);
  }
}

void *sub_1019992A8(void *a1, uint64_t a2)
{
  sub_10195FFB0((uint64_t)v4, a2);
  sub_10199AD80(v4, a1);
  sub_1019601C4(v4);
  return a1;
}

uint64_t sub_10199931C(uint64_t a1, int a2, uint64_t a3)
{
  int v6 = a2;
  uint64_t v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *, uint64_t *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

void sub_101999378(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 304))
  {
    uint64_t v2 = a1 + 280;
    sub_10199931C(v2, 3, a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#xocal,callback not set", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      BOOL v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::handleLtlInfoInd(const GnssHal::ExtensionsOlaf::LtlInfo &)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void *sub_101999550@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 5) {
    uint64_t v2 = "StatusUnknown";
  }
  else {
    uint64_t v2 = off_102349728[a1];
  }
  return sub_100134750(a2, v2);
}

void *sub_10199957C@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 3) {
    uint64_t v2 = "StatusUnknown";
  }
  else {
    uint64_t v2 = off_102349758[a1];
  }
  return sub_100134750(a2, v2);
}

uint64_t sub_1019995A8(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  BOOL v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      sub_1007329F8((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_101999610(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_101999628(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10199965C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_101999698(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1019996DC(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  sub_10199974C(*(void **)(a1 + 56), (void *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  sub_1000F5BB0(v2, *(void **)(a1 + 64));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000F5BB0(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

uint64_t sub_10199974C(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      sub_1019997CC(a3, *((_DWORD *)v5 + 8));
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

void sub_1019997CC(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    goto LABEL_33;
  }
  uint64_t v5 = a1 + 64;
  do
  {
    int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      BOOL v8 = (uint64_t *)v4;
    }
    else {
      BOOL v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (int v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v10 = qword_1024193D8;
    os_log_type_t v11 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v11))
    {
      int v12 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v12 = (void *)*v12;
      }
      sub_101995710(a2, __p);
      if (v31 >= 0) {
        unsigned int v13 = __p;
      }
      else {
        unsigned int v13 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t buf = 136315394;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v23 = 2080;
      int v24 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      unsigned int v14 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        unsigned int v14 = (void *)*v14;
      }
      sub_101995710(a2, buf);
      if (v25 >= 0) {
        __int16 v15 = buf;
      }
      else {
        __int16 v15 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      __int16 v27 = v14;
      __int16 v28 = 2080;
      int v29 = v15;
      int v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
LABEL_54:
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLIceController>::cancelTimeoutEvent(Event) [T = CLIceController]", "%s\n", v16);
      if (v16 != (char *)__p) {
        free(v16);
      }
    }
  }
  else
  {
LABEL_33:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    unsigned int v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v18 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        unsigned int v18 = (void *)*v18;
      }
      sub_101995710(a2, __p);
      if (v31 >= 0) {
        unsigned int v19 = __p;
      }
      else {
        unsigned int v19 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t buf = 136315394;
      *(void *)&uint8_t buf[4] = v18;
      __int16 v23 = 2080;
      int v24 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v20 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v20 = (void *)*v20;
      }
      sub_101995710(a2, buf);
      if (v25 >= 0) {
        int v21 = buf;
      }
      else {
        int v21 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      __int16 v27 = v20;
      __int16 v28 = 2080;
      int v29 = v21;
      int v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_54;
    }
  }
}

void sub_101999C60(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
    if (v2) {
      sub_1000DB0A0(v2);
    }
    operator delete();
  }
}

void *sub_101999CB8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_101999D40()
{
}

void *sub_101999D54(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = off_102348CD0;
  result[1] = v3;
  return result;
}

uint64_t sub_101999D9C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102348CD0;
  a2[1] = v2;
  return result;
}

uint64_t sub_101999DC8(uint64_t a1, uint64_t a2)
{
  sub_101999EC8((uint64_t)v4, a2);
  if (!v5) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t, void))(*(void *)v5 + 48))(v5, *(void *)(a1 + 8));
  sub_101999F48(v4);
  return 1;
}

void sub_101999E68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101999F48((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101999E7C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101999EBC()
{
}

uint64_t sub_101999EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *sub_101999F48(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_101999FCC(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        BOOL result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10199A22C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_10199A23C()
{
}

void *sub_10199A250()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = off_102348D60;
  return result;
}

void sub_10199A288(uint64_t a1, void *a2)
{
  *a2 = off_102348D60;
}

void sub_10199A2B0(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v6 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Baseband status callback not yet registered, power, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLIceController::CLIceController(dispatch_queue_t, BOOL, BOOL)::(anonymous class)::operator()(BOOL) const", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

uint64_t sub_10199A45C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10199A49C()
{
}

void sub_10199A4AC()
{
}

void *sub_10199A4C0()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = off_102348DE0;
  return result;
}

void sub_10199A4F8(uint64_t a1, void *a2)
{
  *a2 = off_102348DE0;
}

void sub_10199A520(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v6 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning XCC status callback not yet registered, status, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLIceController::CLIceController(dispatch_queue_t, BOOL, BOOL)::(anonymous class)::operator()(CLXccControllerProxy::XccStatus) const", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

uint64_t sub_10199A6CC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10199A70C()
{
}

void *sub_10199A718(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        BOOL result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10199A978(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_10199A988()
{
}

void *sub_10199A99C()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = off_102348E60;
  return result;
}

void sub_10199A9D4(uint64_t a1, void *a2)
{
  *a2 = off_102348E60;
}

void sub_10199A9FC(uint64_t a1, int *a2, _DWORD **a3)
{
  uint64_t v3 = *a3;
  if (*a3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(unsigned __int8 *)v3;
      int v7 = v3[7];
      int v6 = v3[8];
      int v9 = v3[5];
      int v8 = v3[6];
      int v11 = v3[3];
      int v10 = v3[4];
      int v12 = v3[2];
      *(_DWORD *)uint64_t buf = 67110912;
      int v17 = v5;
      __int16 v18 = 1024;
      int v19 = v12;
      __int16 v20 = 1024;
      int v21 = v6;
      __int16 v22 = 1024;
      int v23 = v7;
      __int16 v24 = 1024;
      int v25 = v8;
      __int16 v26 = 1024;
      int v27 = v9;
      __int16 v28 = 1024;
      int v29 = v10;
      __int16 v30 = 1024;
      int v31 = v11;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#warning,#xocal,defaultHandler,success,%d,infoType,%d,coeff,%d,%d,%d,%d,%d,%d", buf, 0x32u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_16:
        __int16 v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "auto CLIceController::CLIceController(dispatch_queue_t, BOOL, BOOL)::(anonymous class)::operator()(LtlStatus, const GnssHal::ExtensionsOlaf::LtlInfo *) const", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
        return;
      }
LABEL_18:
      dispatch_once(&qword_1024193D0, &stru_102348C40);
      goto LABEL_16;
    }
  }
  else
  {
    int v13 = *a2;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    unsigned int v14 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v17 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#warning,#xocal,defaultHandler,status,%d,infoStatus,nullptr", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_16;
      }
      goto LABEL_18;
    }
  }
}

uint64_t sub_10199AD34(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10199AD74()
{
}

void *sub_10199AD80(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        BOOL result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10199AFE0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void *sub_10199AFEC(uint64_t a1, AriMsg *a2)
{
  uint64_t v4 = *(NSObject ***)(a1 + 32);
  LOBYTE(__src[0]) = 0;
  *(_OWORD *)((char *)__src + 4) = xmmword_101E4F9D0;
  *(void *)&long long v5 = 0x8000000080000000;
  *((void *)&v5 + 1) = 0x8000000080000000;
  *(_OWORD *)((char *)&__src[2] + 4) = v5;
  BYTE4(__src[4]) = 0;
  HIWORD(__src[4]) = 0x7FFF;
  memset(&__src[5], 255, 20);
  bzero((char *)&__src[7] + 4, 0x32AuLL);
  *(_OWORD *)&__src[109] = 0u;
  LODWORD(__src[111]) = -1;
  WORD2(__src[111]) = -1;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v7 = AriMsg::getGmid(a2) >> 26;
    unsigned int Gmid = AriMsg::getGmid(a2);
    *(_DWORD *)uint64_t buf = 67109376;
    unsigned int v23 = v7;
    __int16 v24 = 1024;
    int v25 = (Gmid >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    unsigned int v11 = AriMsg::getGmid(a2) >> 26;
    unsigned int v12 = AriMsg::getGmid(a2);
    int v18 = 67109376;
    unsigned int v19 = v11;
    __int16 v20 = 1024;
    int v21 = (v12 >> 15) & 0x3FF;
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = GnssHal::ExtensionsOlaf::LtlInfo]_block_invoke", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  sub_10189ED1C(a2, (uint64_t)__src);
  int v9 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_10199B2E4;
  block[3] = &unk_102348ED0;
  sub_10199B364((uint64_t)v16, a1 + 40);
  memcpy(v17, __src, sizeof(v17));
  dispatch_async(v9, block);
  return sub_10199B4DC(v16);
}

uint64_t sub_10199B2E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    sub_10015E48C();
  }
  int v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_10199B33C(uint64_t a1, uint64_t a2)
{
  return sub_10199B364(a1 + 32, a2 + 32);
}

void *sub_10199B348(uint64_t a1)
{
  return sub_10199B4DC((void *)(a1 + 32));
}

uint64_t sub_10199B350(uint64_t a1, uint64_t a2)
{
  return sub_10199B364(a1 + 40, a2 + 40);
}

void *sub_10199B35C(uint64_t a1)
{
  return sub_10199B4DC((void *)(a1 + 40));
}

uint64_t sub_10199B364(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10199B400()
{
}

void *sub_10199B414(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = off_102348F40;
  result[1] = v3;
  return result;
}

uint64_t sub_10199B45C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102348F40;
  a2[1] = v2;
  return result;
}

void sub_10199B488(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10199B490(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10199B4D0()
{
}

void *sub_10199B4DC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_10199B560(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *sub_10199B5B4(uint64_t a1, AriMsg *a2)
{
  int v4 = *(NSObject ***)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  long long v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int Gmid = AriMsg::getGmid(a2);
    unsigned int v7 = AriMsg::getGmid(a2) >> 26;
    unsigned int v8 = AriMsg::getGmid(a2);
    unsigned int v9 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)uint64_t buf = 67110400;
    int v50 = Gmid;
    __int16 v51 = 1024;
    unsigned int v52 = v7;
    __int16 v53 = 1024;
    int v54 = (v8 >> 15) & 0x3FF;
    __int16 v55 = 1024;
    unsigned int v56 = v9;
    __int16 v57 = 1024;
    unsigned int v58 = v9 >> 26;
    __int16 v59 = 1024;
    int v60 = (v9 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v22 = AriMsg::getGmid(a2);
    unsigned int v23 = AriMsg::getGmid(a2);
    unsigned int v24 = AriMsg::getGmid(a2);
    unsigned int v25 = *(_DWORD *)(a1 + 72);
    int v37 = 67110400;
    int v38 = v22;
    __int16 v39 = 1024;
    unsigned int v40 = v23 >> 26;
    __int16 v41 = 1024;
    int v42 = (v24 >> 15) & 0x3FF;
    __int16 v43 = 1024;
    unsigned int v44 = v25;
    __int16 v45 = 1024;
    unsigned int v46 = v25 >> 26;
    __int16 v47 = 1024;
    int v48 = (v25 >> 15) & 0x3FF;
    __int16 v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsSsLcsPositioningCapabilityReqParamWithInstance, TResp = IBIMsSsLcsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  if (AriMsg::isValid(a2))
  {
    if (AriMsg::isValid(a2))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = AriMsg::getGmid(a2);
        *(_DWORD *)uint64_t buf = 67109120;
        int v50 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Unexpected response %x", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_34;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v37 = 67109120;
      int v38 = AriMsg::getGmid(a2);
      unsigned int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsSsLcsPositioningCapabilityReqParamWithInstance, TResp = IBIMsSsLcsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v12);
LABEL_72:
      if (v12 != (char *)buf) {
        free(v12);
      }
LABEL_34:
      int v14 = 3;
      goto LABEL_35;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    __int16 v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Nack received", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      LOWORD(v37) = 0;
      int v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsSsLcsPositioningCapabilityReqParamWithInstance, TResp = IBIMsSsLcsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
    int v14 = 2;
  }
  else
  {
    if (!sub_10189CC44(a2, (uint64_t)v32))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v16 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "NilrDbg,Could not unpack response", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_34;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      LOWORD(v37) = 0;
      unsigned int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsSsLcsPositioningCapabilityReqParamWithInstance, TResp = IBIMsSsLcsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v12);
      goto LABEL_72;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "NilrDbg,Valid response", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      LOWORD(v37) = 0;
      __int16 v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsSsLcsPositioningCapabilityReqParamWithInstance, TResp = IBIMsSsLcsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
    int v14 = *(_DWORD *)(a1 + 76);
  }
LABEL_35:
  int v17 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_10199C088;
  block[3] = &unk_102348FC0;
  sub_10199C288((uint64_t)v34, a1 + 40);
  int v35 = v14;
  *(_OWORD *)unsigned int v36 = *(_OWORD *)v32;
  *(_OWORD *)&v36[12] = *(_OWORD *)&v32[12];
  dispatch_async(v17, block);
  int v31 = 0;
  if (AriMsg::extractCtx(a2, &v31) || v31 == 0x8000)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    __int16 v20 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v50 = v14;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Invalid context id for response %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v37 = 67240192;
      int v38 = v14;
      int v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsSsLcsPositioningCapabilityReqParamWithInstance, TResp = IBIMsSsLcsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v50 = v31;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Free response context 0x%08x", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v37 = 67109120;
      int v38 = v31;
      __int16 v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsSsLcsPositioningCapabilityReqParamWithInstance, TResp = IBIMsSsLcsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    AriHost::ExitTrx(a2, 0, v19);
  }
  return sub_10199C758(v34);
}

void sub_10199C064(_Unwind_Exception *a1)
{
  sub_10199C758(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10199C088(uint64_t a1)
{
  return sub_10199B560(a1 + 32, *(_DWORD *)(a1 + 64));
}

uint64_t sub_10199C09C(uint64_t a1, uint64_t a2)
{
  return sub_10199C288(a1 + 32, a2 + 32);
}

void *sub_10199C0A8(uint64_t a1)
{
  return sub_10199C758((void *)(a1 + 32));
}

uint64_t sub_10199C0B0(uint64_t a1, uint64_t a2)
{
  return sub_10199C288(a1 + 40, a2 + 40);
}

void *sub_10199C0BC(uint64_t a1)
{
  return sub_10199C758((void *)(a1 + 40));
}

uint64_t sub_10199C0C4(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 67109120;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    long long v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsSsLcsPositioningCapabilityReqParamWithInstance, TResp = IBIMsSsLcsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return sub_10199B560(a1 + 32, 3);
}

uint64_t sub_10199C288(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10199C324()
{
}

void *sub_10199C338(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = off_102349060;
  result[1] = v3;
  return result;
}

uint64_t sub_10199C380(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102349060;
  a2[1] = v2;
  return result;
}

void sub_10199C3AC(uint64_t a1, int *a2, int *a3)
{
  int v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 8);
  if (*a2 == 39)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v7 = a3[2];
      int v8 = a3[3];
      int v9 = *((unsigned __int8 *)a3 + 16);
      int v10 = a3[5];
      int v12 = *a3;
      int v11 = a3[1];
      *(_DWORD *)uint64_t buf = 67110400;
      int v17 = v11;
      __int16 v18 = 1024;
      int v19 = v7;
      __int16 v20 = 1024;
      int v21 = v8;
      __int16 v22 = 1024;
      int v23 = v9;
      __int16 v24 = 1024;
      int v25 = v10;
      __int16 v26 = 1024;
      int v27 = v12;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "kSsLcsPositioningCapabilityRsp,result,%d,operation_type,%d,pos_caps_type,%d,pos_caps_value_length,%d,pos_caps_value,%u,ins%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_16:
        __int16 v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "auto CLIceController::SsLcsCapabilityQueue::sendToBaseband(SsLcsCapabilityElement)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBIMsSsLcsPositioningCapabilityRspParamWithInstance &) const", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
        goto LABEL_14;
      }
LABEL_18:
      dispatch_once(&qword_1024193D0, &stru_102348C40);
      goto LABEL_16;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = *a3;
      *(_DWORD *)uint64_t buf = 67109376;
      int v17 = v4;
      __int16 v18 = 1024;
      int v19 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning Unexpected response for kSsLcsPositioningCapabilityReq,resp,%d,ins,%d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_16;
      }
      goto LABEL_18;
    }
  }
LABEL_14:
  sub_101996A94(v5);
}

uint64_t sub_10199C70C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10199C74C()
{
}

void *sub_10199C758(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10199C7DC(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 341 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10199C89C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x155)) + 12 * (v7 % 0x155);
  uint64_t v9 = *a2;
  *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 + 2);
  *(void *)unint64_t v8 = v9;
  ++a1[5];
}

void sub_10199C89C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x155;
  unint64_t v4 = v2 - 341;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000DA54C(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __int16 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int16 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFFCuLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFFCuLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    unsigned int v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        __int16 v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)__int16 v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      __int16 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unsigned int v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  __int16 v53 = operator new(0xFFCuLL);
  sub_1000DA434(&v54, &v53);
  int v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  int v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10199CB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10199CBB4(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *sub_10199CC08(uint64_t a1, AriMsg *a2)
{
  int v4 = *(NSObject ***)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  uint64_t v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int Gmid = AriMsg::getGmid(a2);
    unsigned int v7 = AriMsg::getGmid(a2) >> 26;
    unsigned int v8 = AriMsg::getGmid(a2);
    unsigned int v9 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)uint64_t buf = 67110400;
    int v50 = Gmid;
    __int16 v51 = 1024;
    unsigned int v52 = v7;
    __int16 v53 = 1024;
    int v54 = (v8 >> 15) & 0x3FF;
    __int16 v55 = 1024;
    unsigned int v56 = v9;
    __int16 v57 = 1024;
    unsigned int v58 = v9 >> 26;
    __int16 v59 = 1024;
    int v60 = (v9 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v22 = AriMsg::getGmid(a2);
    unsigned int v23 = AriMsg::getGmid(a2);
    unsigned int v24 = AriMsg::getGmid(a2);
    unsigned int v25 = *(_DWORD *)(a1 + 72);
    int v37 = 67110400;
    int v38 = v22;
    __int16 v39 = 1024;
    unsigned int v40 = v23 >> 26;
    __int16 v41 = 1024;
    int v42 = (v24 >> 15) & 0x3FF;
    __int16 v43 = 1024;
    unsigned int v44 = v25;
    __int16 v45 = 1024;
    unsigned int v46 = v25 >> 26;
    __int16 v47 = 1024;
    int v48 = (v25 >> 15) & 0x3FF;
    uint64_t v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsClsPositioningCapabilityReqParamWithInstance, TResp = IBIMsClsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  if (AriMsg::isValid(a2))
  {
    if (AriMsg::isValid(a2))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      uint64_t v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = AriMsg::getGmid(a2);
        *(_DWORD *)uint64_t buf = 67109120;
        int v50 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Unexpected response %x", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_34;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v37 = 67109120;
      int v38 = AriMsg::getGmid(a2);
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsClsPositioningCapabilityReqParamWithInstance, TResp = IBIMsClsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v12);
LABEL_72:
      if (v12 != (char *)buf) {
        free(v12);
      }
LABEL_34:
      int v14 = 3;
      goto LABEL_35;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    uint64_t v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Nack received", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      LOWORD(v37) = 0;
      int v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsClsPositioningCapabilityReqParamWithInstance, TResp = IBIMsClsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
    int v14 = 2;
  }
  else
  {
    if (!sub_10189CC44(a2, (uint64_t)v32))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      uint64_t v16 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "NilrDbg,Could not unpack response", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_34;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      LOWORD(v37) = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsClsPositioningCapabilityReqParamWithInstance, TResp = IBIMsClsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v12);
      goto LABEL_72;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    uint64_t v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "NilrDbg,Valid response", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      LOWORD(v37) = 0;
      long long v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsClsPositioningCapabilityReqParamWithInstance, TResp = IBIMsClsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
    int v14 = *(_DWORD *)(a1 + 76);
  }
LABEL_35:
  uint64_t v17 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_10199D6DC;
  block[3] = &unk_1023490E0;
  sub_10199D8DC((uint64_t)v34, a1 + 40);
  int v35 = v14;
  *(_OWORD *)uint64_t v36 = *(_OWORD *)v32;
  *(_OWORD *)&v36[12] = *(_OWORD *)&v32[12];
  dispatch_async(v17, block);
  int v31 = 0;
  if (AriMsg::extractCtx(a2, &v31) || v31 == 0x8000)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int64_t v20 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v50 = v14;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Invalid context id for response %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v37 = 67240192;
      int v38 = v14;
      int v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsClsPositioningCapabilityReqParamWithInstance, TResp = IBIMsClsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    uint64_t v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v50 = v31;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Free response context 0x%08x", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v37 = 67109120;
      int v38 = v31;
      uint64_t v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsClsPositioningCapabilityReqParamWithInstance, TResp = IBIMsClsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    AriHost::ExitTrx(a2, 0, v19);
  }
  return sub_10199DDAC(v34);
}

void sub_10199D6B8(_Unwind_Exception *a1)
{
  sub_10199DDAC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10199D6DC(uint64_t a1)
{
  return sub_10199CBB4(a1 + 32, *(_DWORD *)(a1 + 64));
}

uint64_t sub_10199D6F0(uint64_t a1, uint64_t a2)
{
  return sub_10199D8DC(a1 + 32, a2 + 32);
}

void *sub_10199D6FC(uint64_t a1)
{
  return sub_10199DDAC((void *)(a1 + 32));
}

uint64_t sub_10199D704(uint64_t a1, uint64_t a2)
{
  return sub_10199D8DC(a1 + 40, a2 + 40);
}

void *sub_10199D710(uint64_t a1)
{
  return sub_10199DDAC((void *)(a1 + 40));
}

uint64_t sub_10199D718(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 67109120;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIMsClsPositioningCapabilityReqParamWithInstance, TResp = IBIMsClsPositioningCapabilityRspParamWithInstance]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return sub_10199CBB4(a1 + 32, 3);
}

uint64_t sub_10199D8DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10199D978()
{
}

void *sub_10199D98C(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = off_102349180;
  result[1] = v3;
  return result;
}

uint64_t sub_10199D9D4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102349180;
  a2[1] = v2;
  return result;
}

void sub_10199DA00(uint64_t a1, int *a2, int *a3)
{
  int v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 8);
  if (*a2 == 40)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v7 = a3[2];
      int v8 = a3[3];
      int v9 = *((unsigned __int8 *)a3 + 16);
      int v10 = a3[5];
      int v12 = *a3;
      int v11 = a3[1];
      *(_DWORD *)uint64_t buf = 67110400;
      int v17 = v11;
      __int16 v18 = 1024;
      int v19 = v7;
      __int16 v20 = 1024;
      int v21 = v8;
      __int16 v22 = 1024;
      int v23 = v9;
      __int16 v24 = 1024;
      int v25 = v10;
      __int16 v26 = 1024;
      int v27 = v12;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "kClsPositioningCapabilityRsp,result,%d,operation_type,%d,pos_caps_type,%d,pos_caps_value_length,%d,pos_caps_value,%u,ins%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_16:
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "auto CLIceController::PosCapabilityQueue::sendToBaseband(PosLcsCapabilityElement)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const CLIBIMsClsPositioningCapabilityRspParamWithInstance &) const", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
        goto LABEL_14;
      }
LABEL_18:
      dispatch_once(&qword_1024193D0, &stru_102348C40);
      goto LABEL_16;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    uint64_t v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = *a3;
      *(_DWORD *)uint64_t buf = 67174913;
      int v17 = v4;
      __int16 v18 = 1025;
      int v19 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning Unexpected response for kClsPositioningCapabilityReq,resp,%{private}d,ins,%{private}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_16;
      }
      goto LABEL_18;
    }
  }
LABEL_14:
  sub_101996FD4(v5);
}

uint64_t sub_10199DD60(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10199DDA0()
{
}

void *sub_10199DDAC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10199DE30(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 341 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10199DEF0(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x155)) + 12 * (v7 % 0x155);
  uint64_t v9 = *a2;
  *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 + 2);
  *(void *)unint64_t v8 = v9;
  ++a1[5];
}

void sub_10199DEF0(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x155;
  unint64_t v4 = v2 - 341;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000DA54C(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __int16 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int16 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFFCuLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFFCuLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    unsigned int v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        __int16 v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)__int16 v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      __int16 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unsigned int v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  __int16 v53 = operator new(0xFFCuLL);
  sub_1000DA434(&v54, &v53);
  int v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  int v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10199E1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10199E208(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10199E2A0(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *sub_10199E2F4(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(NSObject ***)(v3 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int Gmid = AriMsg::getGmid(v2);
    unsigned int v8 = AriMsg::getGmid(v2) >> 26;
    unsigned int v9 = AriMsg::getGmid(v2);
    unsigned int v10 = *(_DWORD *)(v4 + 72);
    int v50 = 67110400;
    int v51 = Gmid;
    __int16 v52 = 1024;
    unsigned int v53 = v8;
    __int16 v54 = 1024;
    int v55 = (v9 >> 15) & 0x3FF;
    __int16 v56 = 1024;
    unsigned int v57 = v10;
    __int16 v58 = 1024;
    unsigned int v59 = v10 >> 26;
    __int16 v60 = 1024;
    int v61 = (v10 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", (uint8_t *)&v50, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v50, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v23 = AriMsg::getGmid(v2);
    unsigned int v24 = AriMsg::getGmid(v2);
    unsigned int v25 = AriMsg::getGmid(v2);
    unsigned int v26 = *(_DWORD *)(v4 + 72);
    int v38 = 67110400;
    int v39 = v23;
    __int16 v40 = 1024;
    unsigned int v41 = v24 >> 26;
    __int16 v42 = 1024;
    int v43 = (v25 >> 15) & 0x3FF;
    __int16 v44 = 1024;
    unsigned int v45 = v26;
    __int16 v46 = 1024;
    unsigned int v47 = v26 >> 26;
    __int16 v48 = 1024;
    int v49 = (v26 >> 15) & 0x3FF;
    int v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBINetSingleShotRadioSignalReportingReqParam, TResp = CLIBINetSingleShotRadioSignalReportingRspParam]_block_invoke", "%s\n", v27);
    if (v27 != (char *)&v50) {
      free(v27);
    }
  }
  if (AriMsg::isValid(v2))
  {
    if (AriMsg::isValid(v2))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      uint64_t v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = AriMsg::getGmid(v2);
        int v50 = 67109120;
        int v51 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Unexpected response %x", (uint8_t *)&v50, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_34;
      }
      bzero(&v50, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v38 = 67109120;
      int v39 = AriMsg::getGmid(v2);
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBINetSingleShotRadioSignalReportingReqParam, TResp = CLIBINetSingleShotRadioSignalReportingRspParam]_block_invoke", "%s\n", v13);
LABEL_72:
      if (v13 != (char *)&v50) {
        free(v13);
      }
LABEL_34:
      int v15 = 3;
      goto LABEL_35;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    uint64_t v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v50) = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Nack received", (uint8_t *)&v50, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v50, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      LOWORD(v38) = 0;
      long long v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBINetSingleShotRadioSignalReportingReqParam, TResp = CLIBINetSingleShotRadioSignalReportingRspParam]_block_invoke", "%s\n", v30);
      if (v30 != (char *)&v50) {
        free(v30);
      }
    }
    int v15 = 2;
  }
  else
  {
    if (!sub_10189DA6C(v2, __src))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      uint64_t v17 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        LOWORD(v50) = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "NilrDbg,Could not unpack response", (uint8_t *)&v50, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_34;
      }
      bzero(&v50, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      LOWORD(v38) = 0;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBINetSingleShotRadioSignalReportingReqParam, TResp = CLIBINetSingleShotRadioSignalReportingRspParam]_block_invoke", "%s\n", v13);
      goto LABEL_72;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    BOOL v14 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v50) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "NilrDbg,Valid response", (uint8_t *)&v50, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v50, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      LOWORD(v38) = 0;
      long long v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBINetSingleShotRadioSignalReportingReqParam, TResp = CLIBINetSingleShotRadioSignalReportingRspParam]_block_invoke", "%s\n", v31);
      if (v31 != (char *)&v50) {
        free(v31);
      }
    }
    int v15 = *(_DWORD *)(v4 + 76);
  }
LABEL_35:
  uint64_t v18 = *v5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_10199EE78;
  block[3] = &unk_102349200;
  sub_10199F078((uint64_t)v35, v4 + 40);
  int v36 = v15;
  memcpy(v37, __src, sizeof(v37));
  dispatch_async(v18, block);
  int v32 = 0;
  if (AriMsg::extractCtx(v2, &v32) || v32 == 0x8000)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    uint64_t v21 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v50 = 67240192;
      int v51 = v15;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "Invalid context id for response %{public}d", (uint8_t *)&v50, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&v50, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v38 = 67240192;
      int v39 = v15;
      uint64_t v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBINetSingleShotRadioSignalReportingReqParam, TResp = CLIBINetSingleShotRadioSignalReportingRspParam]_block_invoke", "%s\n", v28);
      if (v28 != (char *)&v50) {
        free(v28);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v19 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v50 = 67109120;
      int v51 = v32;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Free response context 0x%08x", (uint8_t *)&v50, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v50, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v38 = 67109120;
      int v39 = v32;
      int v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBINetSingleShotRadioSignalReportingReqParam, TResp = CLIBINetSingleShotRadioSignalReportingRspParam]_block_invoke", "%s\n", v29);
      if (v29 != (char *)&v50) {
        free(v29);
      }
    }
    AriHost::ExitTrx(v2, 0, v20);
  }
  return sub_1019A048C(v35);
}

void sub_10199EE54(_Unwind_Exception *a1)
{
  sub_1019A048C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10199EE78(uint64_t a1)
{
  return sub_10199E2A0(a1 + 32, *(_DWORD *)(a1 + 64));
}

uint64_t sub_10199EE8C(uint64_t a1, uint64_t a2)
{
  return sub_10199F078(a1 + 32, a2 + 32);
}

void *sub_10199EE98(uint64_t a1)
{
  return sub_1019A048C((void *)(a1 + 32));
}

uint64_t sub_10199EEA0(uint64_t a1, uint64_t a2)
{
  return sub_10199F078(a1 + 40, a2 + 40);
}

void *sub_10199EEAC(uint64_t a1)
{
  return sub_1019A048C((void *)(a1 + 40));
}

uint64_t sub_10199EEB4(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 67109120;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = CLIBINetSingleShotRadioSignalReportingReqParam, TResp = CLIBINetSingleShotRadioSignalReportingRspParam]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return sub_10199E2A0(a1 + 32, 3);
}

uint64_t sub_10199F078(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_10199F110(void *a1)
{
  *a1 = off_1023492A0;
  sub_1017DD2F4(a1 + 2);
  return a1;
}

void sub_10199F154(void *a1)
{
  *a1 = off_1023492A0;
  sub_1017DD2F4(a1 + 2);

  operator delete();
}

void *sub_10199F1B8(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t v2 = off_1023492A0;
  v2[1] = v3;
  sub_10199E208((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_10199F210(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10199F224(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = off_1023492A0;
  a2[1] = v2;
  return sub_10199E208((uint64_t)(a2 + 2), a1 + 16);
}

void *sub_10199F254(uint64_t a1)
{
  return sub_1017DD2F4((void *)(a1 + 16));
}

void sub_10199F25C(void *a1)
{
  sub_1017DD2F4(a1 + 2);

  operator delete(a1);
}

void sub_10199F298(uint64_t a1, int *a2, int *a3)
{
  int v3 = *a2;
  std::string __p = 0;
  int v81 = 0;
  int v82 = 0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *a3;
    *(_DWORD *)uint64_t buf = 67109120;
    LODWORD(v100) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#ecid,rsp", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v69 = *a3;
    int v83 = 67109120;
    LODWORD(v84) = v69;
    uint64_t v70 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLIceController::setSingleShotRadioSignalReportingCb(uint32_t, std::function<void (BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &)>)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBINetSingleShotRadioSignalReportingRspParam &) const", "%s\n", v70);
    if (v70 != (char *)buf) {
      free(v70);
    }
  }
  if (*((unsigned __int8 *)a3 + 1744) >= 0x21u)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102349310);
    }
    uint64_t v6 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      int v7 = *((unsigned __int8 *)a3 + 1744);
      *(_DWORD *)uint64_t buf = 134218240;
      *(void *)&long long v100 = 32;
      WORD4(v100) = 1024;
      *(_DWORD *)((char *)&v100 + 10) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "LteCellListArraySize,%zu,is smaller than lteCellLength,%d", buf, 0x12u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_90;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102349310);
    }
    int v8 = *((unsigned __int8 *)a3 + 1744);
    int v83 = 134218240;
    *(void *)&long long v84 = 32;
    WORD4(v84) = 1024;
    *(_DWORD *)((char *)&v84 + 10) = v8;
    unsigned int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "auto CLIceController::setSingleShotRadioSignalReportingCb(uint32_t, std::function<void (BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &)>)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBINetSingleShotRadioSignalReportingRspParam &) const", "%s\n", v9);
LABEL_109:
    if (v9 != (char *)buf) {
      free(v9);
    }
LABEL_90:
    sub_1019A0408(a1 + 16, 0);
    goto LABEL_91;
  }
  if (v3 != 43)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102349310);
    }
    int v62 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v63 = *a3;
      *(_DWORD *)uint64_t buf = 67109376;
      LODWORD(v100) = v63;
      WORD2(v100) = 1024;
      *(_DWORD *)((char *)&v100 + 6) = v3;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "#Warning,#ins%d,#nilr,#supl,#ecid,Unexpected response for kNetSingleShotRadioSignalReportingReq,id,%d", buf, 0xEu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_90;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102349310);
    }
    int v64 = *a3;
    int v83 = 67109376;
    LODWORD(v84) = v64;
    WORD2(v84) = 1024;
    *(_DWORD *)((char *)&v84 + 6) = v3;
    unsigned int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLIceController::setSingleShotRadioSignalReportingCb(uint32_t, std::function<void (BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &)>)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBINetSingleShotRadioSignalReportingRspParam &) const", "%s\n", v9);
    goto LABEL_109;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102349310);
  }
  unsigned int v10 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *a3;
    *(_DWORD *)uint64_t buf = 67109120;
    LODWORD(v100) = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#ecid,valid kSingleShotRadioSignalReportingRsp", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102349310);
    }
    int v71 = *a3;
    int v83 = 67109120;
    LODWORD(v84) = v71;
    double v72 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLIceController::setSingleShotRadioSignalReportingCb(uint32_t, std::function<void (BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &)>)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBINetSingleShotRadioSignalReportingRspParam &) const", "%s\n", v72);
    if (v72 != (char *)buf) {
      free(v72);
    }
  }
  if (!*((unsigned char *)a3 + 1744))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102349310);
    }
    int v67 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v68 = *a3;
      *(_DWORD *)uint64_t buf = 67109120;
      LODWORD(v100) = v68;
      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#ecid,LTE is not the serving RAT", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_90;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102349310);
    }
    int v75 = *a3;
    int v83 = 67109120;
    LODWORD(v84) = v75;
    unsigned int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLIceController::setSingleShotRadioSignalReportingCb(uint32_t, std::function<void (BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &)>)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBINetSingleShotRadioSignalReportingRspParam &) const", "%s\n", v9);
    goto LABEL_109;
  }
  uint64_t v12 = 0;
  uint64_t v13 = a3;
  do
  {
    uint64_t v78 = v12;
    if (v13[12 * v12 + 437])
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102349310);
      }
      BOOL v14 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = *a3;
        *(_DWORD *)uint64_t buf = 67109120;
        LODWORD(v100) = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#ecid,LTE NBR CEll", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102349310);
        }
        int v58 = *a3;
        int v83 = 67109120;
        LODWORD(v84) = v58;
        unsigned int v59 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "auto CLIceController::setSingleShotRadioSignalReportingCb(uint32_t, std::function<void (BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &)>)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBINetSingleShotRadioSignalReportingRspParam &) const", "%s\n", v59);
        if (v59 != (char *)buf) {
          free(v59);
        }
      }
      char v77 = 0;
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102349310);
      }
      uint64_t v16 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = *a3;
        *(_DWORD *)uint64_t buf = 67109120;
        LODWORD(v100) = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#ecid,LTE Serving CEll", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102349310);
        }
        int v60 = *a3;
        int v83 = 67109120;
        LODWORD(v84) = v60;
        int v61 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "auto CLIceController::setSingleShotRadioSignalReportingCb(uint32_t, std::function<void (BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &)>)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBINetSingleShotRadioSignalReportingRspParam &) const", "%s\n", v61);
        if (v61 != (char *)buf) {
          free(v61);
        }
      }
      char v77 = 1;
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102349310);
    }
    uint64_t v18 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = *a3;
      BOOL v20 = &a3[12 * v78];
      int v21 = *((unsigned __int16 *)v20 + 876);
      int v22 = *((unsigned __int16 *)v20 + 877);
      int v23 = *((unsigned __int16 *)v20 + 880);
      int v24 = v20[441];
      int v25 = *((unsigned __int16 *)v20 + 888);
      int v26 = *((unsigned __int8 *)v20 + 1778);
      int v27 = *((unsigned __int8 *)v20 + 1779);
      int v28 = v20[446];
      LODWORD(v20) = v20[442];
      *(_DWORD *)uint64_t buf = 67111424;
      LODWORD(v100) = v19;
      WORD2(v100) = 1024;
      *(_DWORD *)((char *)&v100 + 6) = v21;
      WORD5(v100) = 1024;
      HIDWORD(v100) = v22;
      __int16 v101 = 1024;
      int v102 = v23;
      __int16 v103 = 1024;
      int v104 = v24;
      __int16 v105 = 1024;
      int v106 = v25;
      __int16 v107 = 1024;
      int v108 = v26;
      __int16 v109 = 1024;
      int v110 = v27;
      __int16 v111 = 1024;
      int v112 = v28;
      __int16 v113 = 1024;
      int v114 = (int)v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#ecid,LTE Cell Info,mcc,%hu,mnc,%d,tac,%u,ellid,%d,pci,%d,rsrp,%u,rsrq,%u,ta,%d,dlearfcn,%u", buf, 0x3Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102349310);
      }
      int v47 = *a3;
      __int16 v48 = &a3[12 * v78];
      int v49 = *((unsigned __int16 *)v48 + 876);
      int v50 = *((unsigned __int16 *)v48 + 877);
      int v51 = *((unsigned __int16 *)v48 + 880);
      int v52 = v48[441];
      int v53 = *((unsigned __int16 *)v48 + 888);
      int v54 = *((unsigned __int8 *)v48 + 1778);
      int v55 = *((unsigned __int8 *)v48 + 1779);
      int v56 = v48[446];
      LODWORD(v48) = v48[442];
      int v83 = 67111424;
      LODWORD(v84) = v47;
      WORD2(v84) = 1024;
      *(_DWORD *)((char *)&v84 + 6) = v49;
      WORD5(v84) = 1024;
      HIDWORD(v84) = v50;
      __int16 v85 = 1024;
      int v86 = v51;
      __int16 v87 = 1024;
      int v88 = v52;
      __int16 v89 = 1024;
      int v90 = v53;
      __int16 v91 = 1024;
      int v92 = v54;
      __int16 v93 = 1024;
      int v94 = v55;
      __int16 v95 = 1024;
      int v96 = v56;
      __int16 v97 = 1024;
      int v98 = (int)v48;
      unsigned int v57 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLIceController::setSingleShotRadioSignalReportingCb(uint32_t, std::function<void (BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &)>)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBINetSingleShotRadioSignalReportingRspParam &) const", "%s\n", v57);
      if (v57 != (char *)buf) {
        free(v57);
      }
    }
    int v29 = &a3[12 * v78];
    __int16 v30 = *((_WORD *)v29 + 876);
    __int16 v31 = *((_WORD *)v29 + 877);
    int v32 = *((unsigned __int16 *)v29 + 880);
    int v33 = v29[441];
    __int16 v34 = *((_WORD *)v29 + 888);
    char v35 = *((unsigned char *)v29 + 1778);
    char v36 = *((unsigned char *)v29 + 1779);
    int v37 = v29[446];
    int v38 = v29[442];
    if (v81 >= v82)
    {
      unint64_t v40 = 0x6DB6DB6DB6DB6DB7 * ((v81 - __p) >> 2) + 1;
      if (v40 > 0x924924924924924) {
        sub_1001D7FD4();
      }
      if (0xDB6DB6DB6DB6DB6ELL * ((v82 - __p) >> 2) > v40) {
        unint64_t v40 = 0xDB6DB6DB6DB6DB6ELL * ((v82 - __p) >> 2);
      }
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v82 - __p) >> 2)) >= 0x492492492492492) {
        unint64_t v41 = 0x924924924924924;
      }
      else {
        unint64_t v41 = v40;
      }
      if (v41) {
        __int16 v42 = (char *)sub_100ADA48C((uint64_t)&v82, v41);
      }
      else {
        __int16 v42 = 0;
      }
      int v43 = &v42[4 * ((v81 - __p) >> 2)];
      *int v43 = v77;
      *((_WORD *)v43 + 1) = v30;
      *((_WORD *)v43 + 2) = v31;
      *((_DWORD *)v43 + 2) = v32;
      *((_DWORD *)v43 + 3) = v33;
      *((_WORD *)v43 + 8) = v34;
      v43[18] = v35;
      v43[19] = v36;
      *((_DWORD *)v43 + 5) = v37;
      *((_DWORD *)v43 + 6) = v38;
      __int16 v44 = v81;
      unsigned int v45 = v43;
      if (v81 != __p)
      {
        do
        {
          long long v46 = *(_OWORD *)(v44 - 28);
          *((_OWORD *)v45 - 1) = *((_OWORD *)v44 - 1);
          *(_OWORD *)(v45 - 28) = v46;
          v45 -= 28;
          v44 -= 28;
        }
        while (v44 != __p);
        __int16 v44 = __p;
      }
      int v39 = v43 + 28;
      std::string __p = v45;
      int v82 = &v42[28 * v41];
      if (v44) {
        operator delete(v44);
      }
    }
    else
    {
      *int v81 = v77;
      *((_WORD *)v81 + 1) = v30;
      *((_WORD *)v81 + 2) = v31;
      *((_DWORD *)v81 + 2) = v32;
      *((_DWORD *)v81 + 3) = v33;
      *((_WORD *)v81 + 8) = v34;
      v81[18] = v35;
      v81[19] = v36;
      int v39 = v81 + 28;
      *((_DWORD *)v81 + 5) = v37;
      *((_DWORD *)v81 + 6) = v38;
    }
    int v81 = v39;
    uint64_t v13 = a3;
    uint64_t v12 = v78 + 1;
  }
  while (v78 + 1 < (unint64_t)*((unsigned __int8 *)a3 + 1744));
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102349310);
  }
  int v65 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v66 = *a3;
    *(_DWORD *)uint64_t buf = 67109376;
    LODWORD(v100) = v66;
    WORD2(v100) = 2048;
    *(void *)((char *)&v100 + 6) = 0x6DB6DB6DB6DB6DB7 * ((v39 - __p) >> 2);
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#supl,#ecid,lteCellListSize,%lu", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102349310);
    }
    int v73 = *a3;
    int v83 = 67109376;
    LODWORD(v84) = v73;
    WORD2(v84) = 2048;
    *(void *)((char *)&v84 + 6) = 0x6DB6DB6DB6DB6DB7 * ((v39 - __p) >> 2);
    uint64_t v74 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLIceController::setSingleShotRadioSignalReportingCb(uint32_t, std::function<void (BOOL, const std::vector<gnss::Emergency::Supl::LteCellInfo> &)>)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBINetSingleShotRadioSignalReportingRspParam &) const", "%s\n", v74);
    if (v74 != (char *)buf) {
      free(v74);
    }
  }
  sub_1019A0408(a1 + 16, 1);
LABEL_91:
  if (__p) {
    operator delete(__p);
  }
}

void sub_1019A02EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1019A033C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1019A037C()
{
}

uint64_t sub_1019A0388(uint64_t a1, uint64_t a2)
{
  int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    int v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t sub_1019A0408(uint64_t a1, char a2)
{
  char v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_1019A045C(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void *sub_1019A048C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1019A0510(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *sub_1019A0564(uint64_t a1, AriMsg *a2)
{
  int v4 = *(NSObject ***)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int Gmid = AriMsg::getGmid(a2);
    unsigned int v7 = AriMsg::getGmid(a2) >> 26;
    unsigned int v8 = AriMsg::getGmid(a2);
    unsigned int v9 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)uint64_t buf = 67110400;
    int v52 = Gmid;
    __int16 v53 = 1024;
    unsigned int v54 = v7;
    __int16 v55 = 1024;
    int v56 = (v8 >> 15) & 0x3FF;
    __int16 v57 = 1024;
    unsigned int v58 = v9;
    __int16 v59 = 1024;
    unsigned int v60 = v9 >> 26;
    __int16 v61 = 1024;
    int v62 = (v9 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v22 = AriMsg::getGmid(a2);
    unsigned int v23 = AriMsg::getGmid(a2);
    unsigned int v24 = AriMsg::getGmid(a2);
    unsigned int v25 = *(_DWORD *)(a1 + 72);
    int v39 = 67110400;
    int v40 = v22;
    __int16 v41 = 1024;
    unsigned int v42 = v23 >> 26;
    __int16 v43 = 1024;
    int v44 = (v24 >> 15) & 0x3FF;
    __int16 v45 = 1024;
    unsigned int v46 = v25;
    __int16 v47 = 1024;
    unsigned int v48 = v25 >> 26;
    __int16 v49 = 1024;
    int v50 = (v25 >> 15) & 0x3FF;
    int v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccClockControlReqParams, TResp = IBIXccClockControlRspCbParams]_block_invoke", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  if (AriMsg::isValid(a2))
  {
    if (AriMsg::isValid(a2))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      unsigned int v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = AriMsg::getGmid(a2);
        *(_DWORD *)uint64_t buf = 67109120;
        int v52 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Unexpected response %x", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_34;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v39 = 67109120;
      int v40 = AriMsg::getGmid(a2);
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccClockControlReqParams, TResp = IBIXccClockControlRspCbParams]_block_invoke", "%s\n", v12);
LABEL_72:
      if (v12 != (char *)buf) {
        free(v12);
      }
LABEL_34:
      int v14 = 3;
      goto LABEL_35;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Nack received", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      LOWORD(v39) = 0;
      int v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccClockControlReqParams, TResp = IBIXccClockControlRspCbParams]_block_invoke", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
    int v14 = 2;
  }
  else
  {
    if (!sub_10189CCEC(a2, &v32))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      uint64_t v16 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "NilrDbg,Could not unpack response", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_34;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      LOWORD(v39) = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccClockControlReqParams, TResp = IBIXccClockControlRspCbParams]_block_invoke", "%s\n", v12);
      goto LABEL_72;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    uint64_t v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "NilrDbg,Valid response", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      LOWORD(v39) = 0;
      __int16 v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccClockControlReqParams, TResp = IBIXccClockControlRspCbParams]_block_invoke", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
    int v14 = *(_DWORD *)(a1 + 76);
  }
LABEL_35:
  int v17 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1019A1038;
  block[3] = &unk_102349340;
  sub_1019A1238((uint64_t)v35, a1 + 40);
  int v36 = v14;
  long long v37 = v32;
  uint64_t v38 = v33;
  dispatch_async(v17, block);
  int v31 = 0;
  if (AriMsg::extractCtx(a2, &v31) || v31 == 0x8000)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    BOOL v20 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v52 = v14;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Invalid context id for response %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v39 = 67240192;
      int v40 = v14;
      int v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccClockControlReqParams, TResp = IBIXccClockControlRspCbParams]_block_invoke", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    uint64_t v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v52 = v31;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Free response context 0x%08x", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v39 = 67109120;
      int v40 = v31;
      int v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccClockControlReqParams, TResp = IBIXccClockControlRspCbParams]_block_invoke", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    AriHost::ExitTrx(a2, 0, v19);
  }
  return sub_1019A18C0(v35);
}

void sub_1019A1014(_Unwind_Exception *a1)
{
  sub_1019A18C0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1019A1038(uint64_t a1)
{
  return sub_1019A0510(a1 + 32, *(_DWORD *)(a1 + 64));
}

uint64_t sub_1019A104C(uint64_t a1, uint64_t a2)
{
  return sub_1019A1238(a1 + 32, a2 + 32);
}

void *sub_1019A1058(uint64_t a1)
{
  return sub_1019A18C0((void *)(a1 + 32));
}

uint64_t sub_1019A1060(uint64_t a1, uint64_t a2)
{
  return sub_1019A1238(a1 + 40, a2 + 40);
}

void *sub_1019A106C(uint64_t a1)
{
  return sub_1019A18C0((void *)(a1 + 40));
}

uint64_t sub_1019A1074(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 67109120;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccClockControlReqParams, TResp = IBIXccClockControlRspCbParams]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return sub_1019A0510(a1 + 32, 3);
}

uint64_t sub_1019A1238(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1019A12D4()
{
}

__n128 sub_1019A12E8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1023493E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1019A1334(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1023493E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1019A1364(uint64_t a1, int *a2, int *a3)
{
  int v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(_DWORD *)(a1 + 8)) {
    int v5 = 2;
  }
  else {
    int v5 = 3;
  }
  if (v3 != 42)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    BOOL v19 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v23 = v3;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning Unexpected response for kXccClockControlReq,resp,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLIceController::setXccEnableInternal(uint32_t)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBIXccClockControlRspCbParams &) const", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    goto LABEL_26;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  unsigned int v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v9 = *(_DWORD *)(a1 + 8);
    int v10 = a3[5];
    int v11 = *a3;
    int v12 = a3[1];
    int v13 = a3[2];
    int v14 = a3[3];
    int v15 = *((__int16 *)a3 + 8);
    int v16 = *((__int16 *)a3 + 9);
    *(_DWORD *)uint64_t buf = 67110912;
    int v23 = v9;
    __int16 v24 = 1024;
    int v25 = v11;
    __int16 v26 = 1024;
    int v27 = v10;
    __int16 v28 = 1024;
    int v29 = v12;
    __int16 v30 = 1024;
    int v31 = v13;
    __int16 v32 = 1024;
    int v33 = v14;
    __int16 v34 = 1024;
    int v35 = v15;
    __int16 v36 = 1024;
    int v37 = v16;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "XccDbg,kXccClockCotrolRsp,timeout,%u,rsp_type,%d,peripheral,%d,ref_clk_status,%d,ref_clock_state,%d,modem_connected,%d,freq_error_ppb,%d,freq_qual,%d", buf, 0x32u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    BOOL v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLIceController::setXccEnableInternal(uint32_t)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBIXccClockControlRspCbParams &) const", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  if (*a3 != 3)
  {
LABEL_26:
    sub_101997A4C(v4 + 248, v5);
    return;
  }
  if (*(_DWORD *)(a1 + 8))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "XccDbg, Received the successful kXccClockCotrolRsp, Wait for Indication", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLIceController::setXccEnableInternal(uint32_t)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBIXccClockControlRspCbParams &) const", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
}

uint64_t sub_1019A1874(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1019A18B4()
{
}

void *sub_1019A18C0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1019A1944(uint64_t a1, uint64_t a2)
{
  int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    int v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *sub_1019A19C4(void *a1)
{
  *a1 = off_102349470;
  sub_101960140(a1 + 2);
  return a1;
}

void sub_1019A1A08(void *a1)
{
  *a1 = off_102349470;
  sub_101960140(a1 + 2);

  operator delete();
}

void *sub_1019A1A6C(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t v2 = off_102349470;
  v2[1] = v3;
  sub_101960078((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_1019A1AC4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1019A1AD8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = off_102349470;
  a2[1] = v2;
  return sub_101960078((uint64_t)(a2 + 2), a1 + 16);
}

void *sub_1019A1B08(uint64_t a1)
{
  return sub_101960140((void *)(a1 + 16));
}

void sub_1019A1B10(void *a1)
{
  sub_101960140(a1 + 2);

  operator delete(a1);
}

uint64_t sub_1019A1B4C(uint64_t a1, unsigned int *a2)
{
  unsigned int v3 = *a2;
  if (*a2 == 4)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    v16[0] = off_102349540;
    v16[1] = v4;
    v16[3] = v16;
    sub_1019A1E20(v4, 27, (uint64_t)v16);
    sub_1019A2788(v16);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    sub_101999550(v3, __p);
    uint64_t v6 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uint64_t buf = 136315138;
    *(void *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "XccStatus(%s)", buf, 0xCu);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    sub_101999550(v3, buf);
    if (v11 >= 0) {
      unsigned int v8 = buf;
    }
    else {
      unsigned int v8 = *(unsigned char **)buf;
    }
    int v12 = 136315138;
    int v13 = v8;
    int v9 = (char *)_os_log_send_and_compose_impl();
    if (v11 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLIceController::setXccStatusCb(std::function<void (CLXccControllerProxy::XccStatus)>)::(anonymous class)::operator()(CLXccControllerProxy::XccStatus) const", "%s\n", v9);
    if (v9 != (char *)__p) {
      free(v9);
    }
  }
  return sub_101997A4C(a1 + 16, v3);
}

void sub_1019A1DB8(_Unwind_Exception *a1)
{
  sub_1019A2788((void *)(v1 - 104));
  _Unwind_Resume(a1);
}

uint64_t sub_1019A1DD4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1019A1E14()
{
}

void *sub_1019A1E20(uint64_t a1, int a2, uint64_t a3)
{
  v20[0] = a2;
  uint64_t v3 = a1 + 192;
  uint64_t v4 = *(void *)(a1 + 192);
  if (!v4) {
    goto LABEL_13;
  }
  int v7 = (uint64_t **)(a1 + 184);
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 28);
    BOOL v10 = v9 < a2;
    if (v9 >= a2) {
      char v11 = (uint64_t *)v4;
    }
    else {
      char v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3 || *(_DWORD *)(v8 + 28) > a2 || !*(void *)(a1 + 144))
  {
LABEL_13:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    char v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "NilrDbg,Dont know how to map nilr,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      v20[1] = 67240192;
      v20[2] = a2;
      BOOL v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = IBIXccClockControlIndCbParams]", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      int v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
    }
    int v17 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      int v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
    }
    uint64_t v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2082;
      int v25 = "assert";
      __int16 v26 = 2081;
      int v27 = "false";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  *(void *)uint64_t buf = v20;
  int v12 = *((_DWORD *)sub_100125FD0(v7, v20, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3321888768;
  v28[2] = sub_1019A2300;
  v28[3] = &unk_102349500;
  void v28[4] = a1;
  sub_1019A2610((uint64_t)v29, a3);
  sub_101845C78(*(void **)(a1 + 144), v12, (uint64_t)v28);
  return sub_1019A2788(v29);
}

void sub_1019A22E4(_Unwind_Exception *a1)
{
  sub_1019A2788(v1);
  _Unwind_Resume(a1);
}

void *sub_1019A2300(uint64_t a1, AriMsg *a2)
{
  uint64_t v4 = *(NSObject ***)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = AriMsg::getGmid(a2) >> 26;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Ind,gid,0x%03x,mid,0x%03x", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v13 = 67109376;
    unsigned int v14 = AriMsg::getGmid(a2) >> 26;
    __int16 v15 = 1024;
    unsigned int v16 = (AriMsg::getGmid(a2) >> 15) & 0x3FF;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::regIndication(CLIceMessageDef::MessageId, std::function<void (const TNilr &)>) [TNilr = IBIXccClockControlIndCbParams]_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_10189CCEC(a2, buf);
  uint64_t v6 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1019A2590;
  block[3] = &unk_1023494D0;
  sub_1019A2610((uint64_t)v10, a1 + 40);
  long long v11 = *(_OWORD *)buf;
  uint64_t v12 = v18;
  dispatch_async(v6, block);
  return sub_1019A2788(v10);
}

uint64_t sub_1019A2590(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    sub_10015E48C();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_1019A25E8(uint64_t a1, uint64_t a2)
{
  return sub_1019A2610(a1 + 32, a2 + 32);
}

void *sub_1019A25F4(uint64_t a1)
{
  return sub_1019A2788((void *)(a1 + 32));
}

uint64_t sub_1019A25FC(uint64_t a1, uint64_t a2)
{
  return sub_1019A2610(a1 + 40, a2 + 40);
}

void *sub_1019A2608(uint64_t a1)
{
  return sub_1019A2788((void *)(a1 + 40));
}

uint64_t sub_1019A2610(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1019A26AC()
{
}

void *sub_1019A26C0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_102349540;
  result[1] = v3;
  return result;
}

uint64_t sub_1019A2708(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102349540;
  a2[1] = v2;
  return result;
}

uint64_t sub_1019A2734(uint64_t a1, int *a2)
{
  return sub_1019977EC(*(void *)(a1 + 8), a2);
}

uint64_t sub_1019A273C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1019A277C()
{
}

void *sub_1019A2788(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1019A280C(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void *sub_1019A2860(uint64_t a1, AriMsg *a2)
{
  int v4 = *(NSObject ***)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int Gmid = AriMsg::getGmid(a2);
    unsigned int v7 = AriMsg::getGmid(a2) >> 26;
    unsigned int v8 = AriMsg::getGmid(a2);
    unsigned int v9 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)uint64_t buf = 67110400;
    int v50 = Gmid;
    __int16 v51 = 1024;
    unsigned int v52 = v7;
    __int16 v53 = 1024;
    int v54 = (v8 >> 15) & 0x3FF;
    __int16 v55 = 1024;
    unsigned int v56 = v9;
    __int16 v57 = 1024;
    unsigned int v58 = v9 >> 26;
    __int16 v59 = 1024;
    int v60 = (v9 >> 15) & 0x3FF;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NilrDbg,Ari,Rsp,gmid,%x,gid,%d,mid,%x, expecting ack gmid,%x,gid,%d,mid,%x", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v22 = AriMsg::getGmid(a2);
    unsigned int v23 = AriMsg::getGmid(a2);
    unsigned int v24 = AriMsg::getGmid(a2);
    unsigned int v25 = *(_DWORD *)(a1 + 72);
    int v37 = 67110400;
    int v38 = v22;
    __int16 v39 = 1024;
    unsigned int v40 = v23 >> 26;
    __int16 v41 = 1024;
    int v42 = (v24 >> 15) & 0x3FF;
    __int16 v43 = 1024;
    unsigned int v44 = v25;
    __int16 v45 = 1024;
    unsigned int v46 = v25 >> 26;
    __int16 v47 = 1024;
    int v48 = (v25 >> 15) & 0x3FF;
    __int16 v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccLtlReq, TResp = IBIXccLtlRspCb]_block_invoke", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  if (AriMsg::isValid(a2))
  {
    if (AriMsg::isValid(a2))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      BOOL v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = AriMsg::getGmid(a2);
        *(_DWORD *)uint64_t buf = 67109120;
        int v50 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Unexpected response %x", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_34;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v37 = 67109120;
      int v38 = AriMsg::getGmid(a2);
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccLtlReq, TResp = IBIXccLtlRspCb]_block_invoke", "%s\n", v12);
LABEL_72:
      if (v12 != (char *)buf) {
        free(v12);
      }
LABEL_34:
      int v14 = 3;
      goto LABEL_35;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    __int16 v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Nack received", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      LOWORD(v37) = 0;
      int v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccLtlReq, TResp = IBIXccLtlRspCb]_block_invoke", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
    int v14 = 2;
  }
  else
  {
    if (!sub_10189F008(a2, &v32))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      unsigned int v16 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "NilrDbg,Could not unpack response", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_34;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      LOWORD(v37) = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccLtlReq, TResp = IBIXccLtlRspCb]_block_invoke", "%s\n", v12);
      goto LABEL_72;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "NilrDbg,Valid response", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      LOWORD(v37) = 0;
      __int16 v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccLtlReq, TResp = IBIXccLtlRspCb]_block_invoke", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
    int v14 = *(_DWORD *)(a1 + 76);
  }
LABEL_35:
  int v17 = *v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1019A332C;
  block[3] = &unk_1023495D0;
  sub_1019A352C((uint64_t)v34, a1 + 40);
  int v35 = v14;
  uint64_t v36 = v32;
  dispatch_async(v17, block);
  int v31 = 0;
  if (AriMsg::extractCtx(a2, &v31) || v31 == 0x8000)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    BOOL v20 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v50 = v14;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Invalid context id for response %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v37 = 67240192;
      int v38 = v14;
      int v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccLtlReq, TResp = IBIXccLtlRspCb]_block_invoke", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    uint64_t v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v50 = v31;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Free response context 0x%08x", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v37 = 67109120;
      int v38 = v31;
      __int16 v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccLtlReq, TResp = IBIXccLtlRspCb]_block_invoke", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    AriHost::ExitTrx(a2, 0, v19);
  }
  return sub_1019A39A0(v34);
}

void sub_1019A3308(_Unwind_Exception *a1)
{
  sub_1019A39A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1019A332C(uint64_t a1)
{
  return sub_1019A280C(a1 + 32, *(_DWORD *)(a1 + 64));
}

uint64_t sub_1019A3340(uint64_t a1, uint64_t a2)
{
  return sub_1019A352C(a1 + 32, a2 + 32);
}

void *sub_1019A334C(uint64_t a1)
{
  return sub_1019A39A0((void *)(a1 + 32));
}

uint64_t sub_1019A3354(uint64_t a1, uint64_t a2)
{
  return sub_1019A352C(a1 + 40, a2 + 40);
}

void *sub_1019A3360(uint64_t a1)
{
  return sub_1019A39A0((void *)(a1 + 40));
}

uint64_t sub_1019A3368(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102348C40);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 67109120;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning NilrDbg,Ari,ReqFail,sendId,%d,failure,sendNotAllowed", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceController::send(CLIceMessageDef::MessageId, const IBItype &, CLIceMessageDef::MessageId, std::function<void (CLIceMessageDef::MessageId, const TResp &)>) [IBItype = IBIXccLtlReq, TResp = IBIXccLtlRspCb]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return sub_1019A280C(a1 + 32, 3);
}

uint64_t sub_1019A352C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1019A35C8()
{
}

void *sub_1019A35DC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_102349670;
  result[1] = v3;
  return result;
}

uint64_t sub_1019A3624(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102349670;
  a2[1] = v2;
  return result;
}

void sub_1019A3650(uint64_t a1, _DWORD *a2, int *a3)
{
  if (*a2 == 45)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102348C40);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *a3;
      *(_DWORD *)uint64_t buf = 67109120;
      int v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#xocal,rsp,status_code,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_20:
        unsigned int v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "auto CLIceController::requestLtlInfo(const GnssHal::ExtensionsOlaf::LtlInfoType)::(anonymous class)::operator()(CLIceMessageDef::MessageId, const IBIXccLtlRspCb &) const", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
        return;
      }
LABEL_22:
      dispatch_once(&qword_1024193D0, &stru_102348C40);
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 8);
    if (*(void *)(v6 + 304))
    {
      sub_10199931C(v6 + 280, 2, 0);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102348C40);
      }
      int v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#xocal,callback not set", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_20;
        }
        goto LABEL_22;
      }
    }
  }
}

uint64_t sub_1019A3954(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1019A3994()
{
}

void *sub_1019A39A0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

#error "1019A3A98: call analysis failed (funcsize=76)"

#error "1019A3C18: call analysis failed (funcsize=72)"

#error "1019A3D80: call analysis failed (funcsize=76)"

#error "1019A3F00: call analysis failed (funcsize=72)"

#error "1019A406C: call analysis failed (funcsize=72)"

#error "1019A41D8: call analysis failed (funcsize=72)"

#error "1019A4344: call analysis failed (funcsize=72)"

#error "1019A44B0: call analysis failed (funcsize=72)"

#error "1019A461C: call analysis failed (funcsize=71)"

uint64_t sub_1019A4708(uint64_t a1, char *a2, uint64_t *a3, NSObject *a4, uint64_t a5)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, a4);
  *(double *)(a1 + 16) = (double)*a3 / 1000.0;
  sub_100134750((void *)(a1 + 24), a2);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  unsigned int v9 = *(NSObject **)(a1 + 8);
  if (!v9)
  {
    sub_1019A61B0(&v12);
    goto LABEL_10;
  }
  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 47)) {
      goto LABEL_4;
    }
LABEL_7:
    sub_1019A6490(&v12);
    goto LABEL_10;
  }
  if (!*(void *)(a1 + 32)) {
    goto LABEL_7;
  }
LABEL_4:
  if (*(double *)(a1 + 16) <= 0.0)
  {
    sub_1019A6320(&v12);
LABEL_10:
    abort_report_np();
    __break(1u);
  }
  dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
  int v10 = *(NSObject **)(a1 + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3321888768;
  handler[2] = sub_1019A48EC;
  handler[3] = &unk_102349778;
  handler[4] = a1;
  sub_1019A5E58((uint64_t)v14, a5);
  dispatch_source_set_event_handler(v10, handler);
  dispatch_resume(*(dispatch_object_t *)(a1 + 8));
  sub_1019A5DD4(v14);
  return a1;
}

void sub_1019A48C8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1019A48EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_10010F274((uint64_t)v14);
  uint64_t v3 = sub_100132EFC(v15, (uint64_t)"#qmidiag,error,reason,", 22);
  int v4 = (const char *)(v2 + 24);
  if (*(char *)(v2 + 47) < 0) {
    int v4 = *(const char **)v4;
  }
  size_t v5 = strlen(v4);
  uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
  sub_100132EFC(v6, (uint64_t)",started,", 9);
  int v7 = (void *)std::ostream::operator<<();
  sub_100132EFC(v7, (uint64_t)",delay,", 7);
  sub_10016C458();
  unsigned int v8 = (void *)std::ostream::operator<<();
  sub_100132EFC(v8, (uint64_t)" seconds", 8);
  std::stringbuf::str();
  if (v13 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_1019A4B40(a1 + 40, (uint64_t)p_p);
  if (v13 < 0) {
    operator delete(__p);
  }
  *(void *)((char *)v14
  v15[0] = v10;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1019A4B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1019A4B40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_1019A4B94(uint64_t a1, uint64_t a2)
{
  return sub_1019A5E58(a1 + 40, a2 + 40);
}

void *sub_1019A4BA0(uint64_t a1)
{
  return sub_1019A5DD4((void *)(a1 + 40));
}

void sub_1019A4BA8(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023497A8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = (void *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0) {
      uint64_t v3 = (void *)*v3;
    }
    *(_DWORD *)uint64_t buf = 136315138;
    unsigned int v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#qmidiag,start,%s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023497A8);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiDiag::DiagTimer::start()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  *(unsigned char *)a1 = 1;
  *(double *)(a1 + 48) = sub_10016C458();
  uint64_t v4 = *(NSObject **)(a1 + 8);
  dispatch_time_t v5 = dispatch_time(0, (uint64_t)(*(double *)(a1 + 16) * 1000000000.0));
  dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
}

void sub_1019A4DBC(uint64_t a1)
{
  double v2 = sub_10016C458() - *(double *)(a1 + 48);
  if (v2 > *(double *)(a1 + 56))
  {
    *(double *)(a1 + 56) = v2;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023497A8);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = (void *)(a1 + 24);
      if (*(char *)(a1 + 47) < 0) {
        uint64_t v4 = (void *)*v4;
      }
      uint64_t v5 = *(void *)(a1 + 56);
      *(_DWORD *)uint64_t buf = 136315394;
      unsigned int v8 = v4;
      __int16 v9 = 2048;
      uint64_t v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#qmidiag,maxDelay,reason,%s,delay,%.2f seconds", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023497A8);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiDiag::DiagTimer::updateDelay()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_1019A4FC0(unsigned char *a1)
{
  if (*a1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023497A8);
    }
    double v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = a1 + 24;
      if ((char)a1[47] < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      uint64_t v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#qmidiag,update,%s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023497A8);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiDiag::DiagTimer::update()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    sub_1019A4DBC((uint64_t)a1);
    sub_1019A4BA8((uint64_t)a1);
  }
}

void sub_1019A51A4(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023497A8);
    }
    double v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 24);
      if (*(char *)(a1 + 47) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      uint64_t v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#qmidiag,cancel,%s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023497A8);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiDiag::DiagTimer::cancel()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    *(unsigned char *)a1 = 0;
    sub_1019A4DBC(a1);
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
  }
}

uint64_t sub_1019A539C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  uint64_t v3 = dispatch_queue_create("com.apple.locationd.qmidiag", 0);
  *(void *)(a1 + 8) = v3;
  v12[0] = off_1023497D8;
  v12[1] = a1;
  v12[3] = v12;
  sub_1019A4708(a1 + 16, "com.apple.locationd.qmiSilence", &qword_101E50C00, v3, (uint64_t)v12);
  sub_1019A5DD4(v12);
  uint64_t v4 = *(NSObject **)(a1 + 8);
  v11[0] = off_102349868;
  v11[1] = a1;
  void v11[3] = v11;
  sub_1019A4708(a1 + 80, "com.apple.locationd.processPds", &qword_101E50C08, v4, (uint64_t)v11);
  sub_1019A5DD4(v11);
  uint64_t v5 = *(NSObject **)(a1 + 8);
  v10[0] = off_1023498E8;
  v10[1] = a1;
  v10[3] = v10;
  sub_1019A4708(a1 + 144, "com.apple.locationd.prepareToSleep", &qword_101E50C10, v5, (uint64_t)v10);
  sub_1019A5DD4(v10);
  *(unsigned char *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023497A8);
  }
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#qmidiag,created", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023497A8);
    }
    unsigned int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLQmiDiag::CLQmiDiag(CLIntersiloUniverse *)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return a1;
}

void sub_1019A5638(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 191) < 0) {
    operator delete(*(void **)(v1 + 168));
  }
  if (*(char *)(v1 + 127) < 0) {
    operator delete(*(void **)(v1 + 104));
  }
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*(void **)(v1 + 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1019A56AC(uint64_t a1)
{
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  return a1;
}

void sub_1019A5704(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1019A5778;
  block[3] = &unk_1022A3020;
  void block[4] = a1;
  dispatch_async(v1, block);
}

void sub_1019A5778(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_1019A4FC0((unsigned char *)(v1 + 16));

  sub_1019A4BA8(v1 + 80);
}

void sub_1019A57B4(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1019A5828;
  block[3] = &unk_1022A3020;
  void block[4] = a1;
  dispatch_async(v1, block);
}

void sub_1019A5828(uint64_t a1)
{
}

void sub_1019A5834(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1019A58A8;
  block[3] = &unk_1022A3020;
  void block[4] = a1;
  dispatch_async(v1, block);
}

void sub_1019A58A8(uint64_t a1)
{
}

void sub_1019A58B4(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1019A5928;
  block[3] = &unk_1022A3020;
  void block[4] = a1;
  dispatch_async(v1, block);
}

void sub_1019A5928(uint64_t a1)
{
}

void sub_1019A5934(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1019A59A8;
  block[3] = &unk_1022A3020;
  void block[4] = a1;
  dispatch_async(v1, block);
}

void sub_1019A59A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + 208) = 0;
  sub_1019A4BA8(v1 + 16);
}

void sub_1019A59B8(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1019A5A2C;
  block[3] = &unk_1022A3020;
  void block[4] = a1;
  dispatch_async(v1, block);
}

void sub_1019A5A2C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + 208) = 0;
  sub_1019A51A4(v1 + 16);
}

void sub_1019A5A3C(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023497A8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 136315138;
    uint64_t v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#qmidiag,error,dumping logs with reason,%s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023497A8);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiDiag::dumpLogs(const char *)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 216) <= 600.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023497A8);
    }
    uint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 216);
      *(_DWORD *)uint64_t buf = 134217984;
      uint64_t v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#qmidiag,error,dumpingToFrequent,last,%.2f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023497A8);
      }
      unsigned int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLQmiDiag::dumpLogs(const char *)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  else
  {
    *(CFAbsoluteTime *)(a1 + 216) = CFAbsoluteTimeGetCurrent();
    [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", @"CLTelephonyService"), "dumpLogWithReason:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2)];
    CLWriteStackshot();
  }
}

void sub_1019A5DA4(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void *sub_1019A5DD4(void *a1)
{
  double v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1019A5E58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1019A5EF4()
{
}

void *sub_1019A5F08(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1023497D8;
  result[1] = v3;
  return result;
}

uint64_t sub_1019A5F50(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023497D8;
  a2[1] = v2;
  return result;
}

void sub_1019A5F7C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 208))
  {
    uint64_t v3 = *a2;
    *(unsigned char *)(v2 + 208) = 1;
    sub_1019A5A3C(v2, v3);
  }
}

uint64_t sub_1019A5F9C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1019A5FDC()
{
}

void sub_1019A5FEC()
{
}

void *sub_1019A6000(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_102349868;
  result[1] = v3;
  return result;
}

uint64_t sub_1019A6048(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102349868;
  a2[1] = v2;
  return result;
}

void sub_1019A6074(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1019A6080(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1019A60C0()
{
}

void sub_1019A60D0()
{
}

void *sub_1019A60E4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1023498E8;
  result[1] = v3;
  return result;
}

uint64_t sub_1019A612C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023498E8;
  a2[1] = v2;
  return result;
}

void sub_1019A6158(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1019A6164(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1019A61A4()
{
}

void sub_1019A61B0(_DWORD *a1)
{
  sub_101329AF8();
  if (!v3) {
    dispatch_once(&qword_1024193D0, &stru_1023497A8);
  }
  if (sub_100857BFC())
  {
    sub_100219C98();
    sub_100234FD0((void *)&_mh_execute_header, v4, v5, "{\"msg%{public}.0s\":\"fTimer should not be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, v7, v8, v9, v21);
    sub_101329AF8();
    if (!v3) {
      dispatch_once(&qword_1024193D0, &stru_1023497A8);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v1 + 984)))
  {
    sub_100219C98();
    sub_100234F98((void *)&_mh_execute_header, v10, v11, v12, "fTimer should not be null", "{\"msg%{public}.0s\":\"fTimer should not be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v21);
    sub_101329AF8();
    if (!v3) {
      dispatch_once(&qword_1024193D0, &stru_1023497A8);
    }
  }
  if (sub_10151F830())
  {
    sub_100219C98();
    sub_100234FF0((void *)&_mh_execute_header, v15, v16, "{\"msg%{public}.0s\":\"fTimer should not be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v21);
  }
  *a1 = 27;
}

void sub_1019A6320(_DWORD *a1)
{
  sub_101329AF8();
  if (!v3) {
    dispatch_once(&qword_1024193D0, &stru_1023497A8);
  }
  if (sub_100857BFC())
  {
    sub_100219C98();
    sub_100234FD0((void *)&_mh_execute_header, v4, v5, "{\"msg%{public}.0s\":\"fTimeout should be > 0\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, v7, v8, v9, v21);
    sub_101329AF8();
    if (!v3) {
      dispatch_once(&qword_1024193D0, &stru_1023497A8);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v1 + 984)))
  {
    sub_100219C98();
    sub_100234F98((void *)&_mh_execute_header, v10, v11, v12, "fTimeout should be > 0", "{\"msg%{public}.0s\":\"fTimeout should be > 0\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v21);
    sub_101329AF8();
    if (!v3) {
      dispatch_once(&qword_1024193D0, &stru_1023497A8);
    }
  }
  if (sub_10151F830())
  {
    sub_100219C98();
    sub_100234FF0((void *)&_mh_execute_header, v15, v16, "{\"msg%{public}.0s\":\"fTimeout should be > 0\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v21);
  }
  *a1 = 29;
}

void sub_1019A6490(_DWORD *a1)
{
  sub_101329AF8();
  if (!v3) {
    dispatch_once(&qword_1024193D0, &stru_1023497A8);
  }
  if (sub_100857BFC())
  {
    sub_100219C98();
    sub_100234FD0((void *)&_mh_execute_header, v4, v5, "{\"msg%{public}.0s\":\"fName should not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, v7, v8, v9, v21);
    sub_101329AF8();
    if (!v3) {
      dispatch_once(&qword_1024193D0, &stru_1023497A8);
    }
  }
  if (os_signpost_enabled(*(os_log_t *)(v1 + 984)))
  {
    sub_100219C98();
    sub_100234F98((void *)&_mh_execute_header, v10, v11, v12, "fName should not be empty", "{\"msg%{public}.0s\":\"fName should not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v21);
    sub_101329AF8();
    if (!v3) {
      dispatch_once(&qword_1024193D0, &stru_1023497A8);
    }
  }
  if (sub_10151F830())
  {
    sub_100219C98();
    sub_100234FF0((void *)&_mh_execute_header, v15, v16, "{\"msg%{public}.0s\":\"fName should not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17, v18, v19, v20, v21);
  }
  *a1 = 28;
}

void sub_1019A6600(void *a1, int a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  *a1 = a3;
  a1[1] = [objc_msgSend(objc_msgSend(a3, "silo")) queue];
  sub_1017DB7F4((uint64_t)(a1 + 2), a5);
  a1[6] = *a6;
  uint64_t v10 = a6[1];
  a1[7] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = a1[1];
  sub_1017DB7F4((uint64_t)v15, (uint64_t)(a1 + 2));
  sub_1018547E4(a1[6], (uint64_t)v14);
  v13[0] = off_1023499E8;
  v13[1] = a1;
  v13[3] = v13;
  v12[0] = off_102349A78;
  v12[1] = a1;
  v12[3] = v12;
  sub_1017EE4B8(a1 + 8, a2, v11);
}

void sub_1019A6D18()
{
}

void sub_1019A6D34(void *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  JUMPOUT(0x1019A6E78);
}

void sub_1019A6D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
}

void sub_1019A6D94()
{
}

void sub_1019A6D9C()
{
  sub_1017DC09C((void *)(v0 - 224));
  sub_1017DBE30((void *)(v0 - 192));
  sub_1017DBDAC((void *)(v0 - 160));
  sub_1017DBD28((void *)(v0 - 128));
  JUMPOUT(0x1019A6E64);
}

void sub_1019A6DCC()
{
}

void sub_1019A6DDC()
{
  sub_10083788C(v0);
  JUMPOUT(0x1019A6DE8);
}

uint64_t **sub_1019A6E80(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  int v19 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    uint64_t v4 = a4;
    uint64_t v5 = a3;
    unsigned int v7 = a2;
    uint64_t v6 = a1;
    if (qword_1024193D0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1019B9350(qword_1024193D0 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1024193D0, &stru_102349958);
LABEL_3:
  uint64_t v8 = qword_1024193D8;
  os_log_type_t v9 = *(unsigned char *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v9))
  {
    uint64_t v10 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    if (v7 > 3) {
      uint64_t v11 = "StateUnknown";
    }
    else {
      uint64_t v11 = (&off_102349E80)[v7];
    }
    sub_100134750(__p, v11);
    if (SBYTE3(v24) >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = *(unsigned char **)__p;
    }
    *(_DWORD *)uint64_t buf = 136315650;
    *(void *)&uint8_t buf[4] = v10;
    __int16 v26 = 1024;
    unsigned int v27 = v7;
    __int16 v28 = 2080;
    int v29 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v24) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    uint64_t v14 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      uint64_t v14 = (void *)*v14;
    }
    sub_1019B7444(v7, v17);
    if (v18 >= 0) {
      uint64_t v15 = v17;
    }
    else {
      uint64_t v15 = (void **)v17[0];
    }
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v14;
    __int16 v21 = 1024;
    unsigned int v22 = v7;
    __int16 v23 = 2080;
    unsigned int v24 = v15;
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLNilrController>::setStateHandler(State, StateHandler) [T = CLNilrController]", "%s\n", v16);
    if (v16 != buf) {
      free(v16);
    }
  }
  *(void *)uint64_t buf = &v19;
  __n128 result = sub_1000C5658((uint64_t **)(v6 + 8), &v19, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

uint64_t sub_1019A716C(uint64_t a1, int a2)
{
  uint64_t v4 = (unsigned __int8 *)(a1 + 6984);
  if (*(unsigned char *)(a1 + 6984))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    uint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "#nilr,#nict,We cannot be in Idle when in Conformance mode", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      *(_WORD *)int v66 = 0;
      unsigned int v52 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Idle(CLNilrController::Event)", "%s\n", v52);
      if (v52 != buf) {
        free(v52);
      }
    }
    if (*v4)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102349998);
      }
      __int16 v51 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/NILR/CLNilrController.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = 386;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "!fIsConformanceMode";
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102349998);
        }
        *(_DWORD *)int v66 = 136315650;
        *(void *)&v66[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/NILR/CLNilrController.mm";
        __int16 v67 = 1024;
        int v68 = 386;
        __int16 v69 = 2080;
        uint64_t v70 = "!fIsConformanceMode";
        int v63 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Idle(CLNilrController::Event)", "%s\n", v63);
        if (v63 != buf) {
          free(v63);
        }
      }
      sub_1004BA578();
    }
  }
  uint64_t result = 0;
  switch(a2)
  {
    case 0:
      sub_1019AB58C(a1, 0);
      return 0;
    case 2:
      return 1;
    case 3:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      int v42 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        sub_100134750(buf, "EmergencyModeEnd");
        __int16 v43 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)int v66 = 136446210;
        *(void *)&v66[4] = v43;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_FAULT, "#nilr,#nict,Unexpected,%{public}s", v66, 0xCu);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      uint64_t result = sub_10013D1A0(115, 0);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      sub_100134750(v66, "EmergencyModeEnd");
      if (SBYTE3(v70) >= 0) {
        unsigned int v44 = v66;
      }
      else {
        unsigned int v44 = *(unsigned char **)v66;
      }
      *(_DWORD *)std::string __p = 136446210;
      *(void *)&__p[4] = v44;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE3(v70) < 0) {
        operator delete(*(void **)v66);
      }
      goto LABEL_190;
    case 4:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      int v35 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        sub_100134750(v66, "BasebandCplaneStartInd");
        uint64_t v36 = SBYTE3(v70) >= 0 ? v66 : *(unsigned char **)v66;
        int v37 = *v4;
        int v38 = v4[1];
        *(_DWORD *)uint64_t buf = 136446722;
        *(void *)&uint8_t buf[4] = v36;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&unsigned char buf[14] = v37;
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = v38;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_FAULT, "#nilr,#nict,Unexpected,%{public}s,fIsConformanceMode,%{public}d,fIsCellularEmergency,%{public}d", buf, 0x18u);
        if (SBYTE3(v70) < 0) {
          operator delete(*(void **)v66);
        }
      }
      uint64_t result = sub_10013D1A0(115, 0);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      sub_100134750(__p, "BasebandCplaneStartInd");
      if (v65 >= 0) {
        __int16 v39 = __p;
      }
      else {
        __int16 v39 = *(unsigned char **)__p;
      }
      int v40 = *v4;
      int v41 = v4[1];
      *(_DWORD *)int v66 = 136446722;
      *(void *)&v66[4] = v39;
      __int16 v67 = 1026;
      int v68 = v40;
      __int16 v69 = 1026;
      LODWORD(v70) = v41;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      if (v65 < 0) {
        operator delete(*(void **)__p);
      }
      goto LABEL_190;
    case 5:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      uint64_t v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100134750(v66, "BasebandCplaneEndInd");
        uint64_t v12 = SBYTE3(v70) >= 0 ? v66 : *(unsigned char **)v66;
        int v13 = *v4;
        int v14 = v4[1];
        *(_DWORD *)uint64_t buf = 136315650;
        *(void *)&uint8_t buf[4] = v12;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v13;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Unexpected,%s,fIsConformanceMode,%d,fIsCellularEmergency,%d,did we abort previous control plane session due to emergency call termination?", buf, 0x18u);
        if (SBYTE3(v70) < 0) {
          operator delete(*(void **)v66);
        }
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      sub_100134750(__p, "BasebandCplaneEndInd");
      if (v65 >= 0) {
        uint64_t v15 = __p;
      }
      else {
        uint64_t v15 = *(unsigned char **)__p;
      }
      int v16 = *v4;
      int v17 = v4[1];
      *(_DWORD *)int v66 = 136315650;
      *(void *)&v66[4] = v15;
      __int16 v67 = 1024;
      int v68 = v16;
      __int16 v69 = 1024;
      LODWORD(v70) = v17;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      if (v65 < 0) {
        operator delete(*(void **)__p);
      }
      goto LABEL_140;
    case 6:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      __int16 v21 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        sub_100134750(v66, "CplaneRequest");
        unsigned int v22 = SBYTE3(v70) >= 0 ? v66 : *(unsigned char **)v66;
        int v23 = *v4;
        int v24 = v4[1];
        *(_DWORD *)uint64_t buf = 136446722;
        *(void *)&uint8_t buf[4] = v22;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&unsigned char buf[14] = v23;
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = v24;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "#nilr,#nict,Unexpected,%{public}s,fIsConformanceMode,%{public}d,fIsCellularEmergency,%{public}d,dropping control plane request", buf, 0x18u);
        if (SBYTE3(v70) < 0) {
          operator delete(*(void **)v66);
        }
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102349958);
        }
        sub_100134750(__p, "CplaneRequest");
        if (v65 >= 0) {
          int v54 = __p;
        }
        else {
          int v54 = *(unsigned char **)__p;
        }
        int v55 = *v4;
        int v56 = v4[1];
        *(_DWORD *)int v66 = 136446722;
        *(void *)&v66[4] = v54;
        __int16 v67 = 1026;
        int v68 = v55;
        __int16 v69 = 1026;
        LODWORD(v70) = v56;
        __int16 v57 = (char *)_os_log_send_and_compose_impl();
        if (v65 < 0) {
          operator delete(*(void **)__p);
        }
        sub_1004BA5E4("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Idle(CLNilrController::Event)", "%s\n", v57);
        if (v57 != buf) {
          free(v57);
        }
      }
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)&uint8_t buf[8] = _Q0;
      *(_OWORD *)&unsigned char buf[24] = _Q0;
      uint64_t v72 = -1;
      uint64_t v74 = 0;
      char v75 = 0;
      int64x2_t v76 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      long long v77 = xmmword_101D2A480;
      long long v78 = _Q0;
      unint64_t v79 = 0xBFF0000000000000;
      uint64_t v80 = 0;
      int v81 = 2;
      int v83 = 0;
      char v84 = 0;
      v82[0] = 0;
      *(void *)((char *)v82 + 5) = 0;
      unint64_t v85 = 0xFFFFFFFF00000000;
      int v86 = -1;
      int64x2_t v87 = v76;
      unint64_t v88 = 0xBFF0000000000000;
      unint64_t v89 = 0xFFFFFFFF00000000;
      int v90 = 0;
      __int16 v91 = 255;
      int v92 = 1;
      char v94 = 0;
      uint64_t v93 = 0;
      uint64_t v95 = 0;
      char v96 = 0;
      int64x2_t v97 = v76;
      unint64_t v98 = 0xBFF0000000000000;
      int v73 = 0;
      *(void *)uint64_t buf = 0x400000000;
      sub_1019AB7D4(a1, (uint64_t)buf);
      return 0;
    case 7:
      sub_1019ABB54(a1, *(void *)(a1 + 7008));
      uint64_t result = 0;
      v4[176] = 0;
      return result;
    case 8:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      __int16 v45 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Starting non-emergency SUPL", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102349958);
        }
        *(_WORD *)int v66 = 0;
        __int16 v53 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrController::State CLNilrController::handler_Idle(CLNilrController::Event)", "%s\n", v53);
        if (v53 != buf) {
          free(v53);
        }
      }
      return 3;
    case 9:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      __int16 v49 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        sub_100134750(buf, "SuplEnd");
        int v50 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)int v66 = 136446210;
        *(void *)&v66[4] = v50;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_FAULT, "#nilr,#nict,Unexpected,%{public}s", v66, 0xCu);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      uint64_t result = sub_10013D1A0(115, 0);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      sub_100134750(v66, "SuplEnd");
      if (SBYTE3(v70) >= 0) {
        int v62 = v66;
      }
      else {
        int v62 = *(unsigned char **)v66;
      }
      *(_DWORD *)std::string __p = 136446210;
      *(void *)&__p[4] = v62;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE3(v70) < 0) {
        operator delete(*(void **)v66);
      }
LABEL_190:
      sub_1004BA5E4("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Idle(CLNilrController::Event)", "%s\n", v10);
      goto LABEL_191;
    case 10:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      unsigned int v46 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100134750(buf, "NilrSessionTimeout");
        __int16 v47 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)int v66 = 136315138;
        *(void *)&v66[4] = v47;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Spurious event,%s", v66, 0xCu);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      sub_100134750(v66, "NilrSessionTimeout");
      if (SBYTE3(v70) >= 0) {
        int v48 = v66;
      }
      else {
        int v48 = *(unsigned char **)v66;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v48;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE3(v70) < 0) {
        operator delete(*(void **)v66);
      }
      goto LABEL_140;
    case 11:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      unsigned int v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100134750(buf, "NetworkAssistanceReceived");
        uint64_t v8 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)int v66 = 136315138;
        *(void *)&v66[4] = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Unexpected network assistance received,%s", v66, 0xCu);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      sub_100134750(v66, "NetworkAssistanceReceived");
      if (SBYTE3(v70) >= 0) {
        os_log_type_t v9 = v66;
      }
      else {
        os_log_type_t v9 = *(unsigned char **)v66;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v9;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE3(v70) < 0) {
        operator delete(*(void **)v66);
      }
      goto LABEL_140;
    case 12:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      __int16 v30 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        sub_100134750(v66, "CplaneWlanRequest");
        int v31 = SBYTE3(v70) >= 0 ? v66 : *(unsigned char **)v66;
        int v32 = *v4;
        int v33 = v4[1];
        *(_DWORD *)uint64_t buf = 136446722;
        *(void *)&uint8_t buf[4] = v31;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&unsigned char buf[14] = v32;
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = v33;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#Warning,#nilr,#nict,#wlan,Unexpected,%{public}s,fIsConformanceMode,%{public}d,fIsCellularEmergency,%{public}d,dropping wlan control plane request", buf, 0x18u);
        if (SBYTE3(v70) < 0) {
          operator delete(*(void **)v66);
        }
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102349958);
        }
        sub_100134750(__p, "CplaneWlanRequest");
        if (v65 >= 0) {
          unsigned int v58 = __p;
        }
        else {
          unsigned int v58 = *(unsigned char **)__p;
        }
        int v59 = *v4;
        int v60 = v4[1];
        *(_DWORD *)int v66 = 136446722;
        *(void *)&v66[4] = v58;
        __int16 v67 = 1026;
        int v68 = v59;
        __int16 v69 = 1026;
        LODWORD(v70) = v60;
        __int16 v61 = (char *)_os_log_send_and_compose_impl();
        if (v65 < 0) {
          operator delete(*(void **)__p);
        }
        sub_1004BA5E4("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Idle(CLNilrController::Event)", "%s\n", v61);
        if (v61 != buf) {
          free(v61);
        }
      }
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)&uint8_t buf[16] = _Q0;
      *(_WORD *)&buf[38] = 0;
      *(_DWORD *)&buf[32] = 0;
      buf[36] = 0;
      LODWORD(v72) = 1;
      *(_DWORD *)&uint8_t buf[8] = 6;
      *(void *)uint64_t buf = 0x500000000;
      sub_1019ABCF8(a1);
      return 0;
    case 13:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      char v18 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100134750(buf, "WlanResponse");
        int v19 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)int v66 = 136315138;
        *(void *)&v66[4] = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,#wlan,Spurious event,%s", v66, 0xCu);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      sub_100134750(v66, "WlanResponse");
      if (SBYTE3(v70) >= 0) {
        uint64_t v20 = v66;
      }
      else {
        uint64_t v20 = *(unsigned char **)v66;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v20;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE3(v70) < 0) {
        operator delete(*(void **)v66);
      }
LABEL_140:
      sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrController::State CLNilrController::handler_Idle(CLNilrController::Event)", "%s\n", v10);
LABEL_191:
      if (v10 != buf) {
        free(v10);
      }
      return 0;
    default:
      return result;
  }
}

uint64_t sub_1019A8764(uint64_t a1, int a2)
{
  uint64_t result = 1;
  uint64_t v4 = (unsigned __int8 *)(a1 + 6984);
  switch(a2)
  {
    case 0:
      sub_1019AB58C(a1, 0);
      return 1;
    case 2:
      if (*v4) {
        return result;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      uint64_t v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string __p = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "#nilr,#nict,If we are in mission mode, why are we READY when we did not get EmergencyModeStart yet", __p, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102349958);
        }
        *(_WORD *)uint64_t buf = 0;
        int v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Ready(CLNilrController::Event)", "%s\n", v14);
        if (v14 != __p) {
          free(v14);
        }
      }
      if (!*v4)
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102349998);
        }
        uint64_t v11 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)std::string __p = 136315650;
          *(void *)&__p[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/NILR/CLNilrController.mm";
          __int16 v22 = 1024;
          int v23 = 491;
          __int16 v24 = 2080;
          unsigned int v25 = "fIsConformanceMode";
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", __p, 0x1Cu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_102349998);
          }
          *(_DWORD *)uint64_t buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/NILR/CLNilrController.mm";
          __int16 v17 = 1024;
          int v18 = 491;
          __int16 v19 = 2080;
          uint64_t v20 = "fIsConformanceMode";
          uint64_t v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Ready(CLNilrController::Event)", "%s\n", v15);
          if (v15 != __p) {
            free(v15);
          }
        }
        sub_1004BA578();
      }
      return 1;
    case 3:
      return *v4;
    case 4:
    case 6:
    case 12:
      return 2;
    case 5:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      uint64_t v12 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100134750(__p, "BasebandCplaneEndInd");
        int v13 = SBYTE3(v25) >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)uint64_t buf = 136315138;
        *(void *)&uint8_t buf[4] = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Unexpected,%s,did we abort previous control plane session due to emergency call termination?", buf, 0xCu);
        if (SBYTE3(v25) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      sub_100134750(buf, "BasebandCplaneEndInd");
      unsigned int v7 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE3(v20) < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_60;
    case 7:
      sub_1019ABB54(a1, *(void *)(a1 + 7008));
      return 1;
    case 8:
      return 3;
    case 9:
      sub_1019AC1EC(a1, *(void *)(a1 + 7088));
      return 1;
    case 10:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      uint64_t v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100134750(__p, "NilrSessionTimeout");
        uint64_t v6 = SBYTE3(v25) >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)uint64_t buf = 136315138;
        *(void *)&uint8_t buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Spurious event,%s", buf, 0xCu);
        if (SBYTE3(v25) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      sub_100134750(buf, "NilrSessionTimeout");
      unsigned int v7 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE3(v20) < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_60;
    case 11:
      *(unsigned char *)(a1 + 7131) = 1;
      return 2;
    case 13:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      uint64_t v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100134750(__p, "WlanResponse");
        os_log_type_t v9 = SBYTE3(v25) >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)uint64_t buf = 136315138;
        *(void *)&uint8_t buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,#wlan,Spurious event,%s", buf, 0xCu);
        if (SBYTE3(v25) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      sub_100134750(buf, "WlanResponse");
      unsigned int v7 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE3(v20) < 0) {
        operator delete(*(void **)buf);
      }
LABEL_60:
      sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrController::State CLNilrController::handler_Ready(CLNilrController::Event)", "%s\n", v7);
      if (v7 != __p) {
        free(v7);
      }
      return 1;
    default:
      return result;
  }
}

uint64_t sub_1019A9068(uint64_t a1, int a2)
{
  uint64_t result = 2;
  uint64_t v4 = (unsigned char *)(a1 + 6984);
  switch(a2)
  {
    case 0:
      __asm { FMOV            V0.2D, #-1.0; jumptable 00000001019A90D4 case 0 }
      *(_OWORD *)(a1 + 7024) = _Q0;
      *(void *)(a1 + 7040) = 0;
      *(void *)(a1 + 7056) = 0;
      *(void *)(a1 + 7048) = 0;
      *(void *)(a1 + 7064) = 0xBFF0000000000000;
      *(void *)(a1 + 7072) = -1;
      *(_DWORD *)(a1 + 7080) = 0;
      *(_DWORD *)(a1 + 8528) = 0;
      uint64_t v10 = (void *)(a1 + 8536);
      uint64_t v11 = *(void **)(a1 + 8536);
      if (v11)
      {
        *(void *)(a1 + 8544) = v11;
        operator delete(v11);
        *uint64_t v10 = 0;
        *(void *)(a1 + 8544) = 0;
        *(void *)(a1 + 8552) = 0;
      }
      *uint64_t v10 = 0;
      *(void *)(a1 + 8544) = 0;
      *(void *)(a1 + 8552) = 0;
      if (*(unsigned char *)(a1 + 7131))
      {
        sub_1019AB58C(a1, 1);
        uint64_t v12 = a1 + 6856;
        uint64_t v13 = 0x404E000000000000;
        goto LABEL_10;
      }
      sub_1017D9740(a1 + 3352, 0, *(unsigned __int8 *)(a1 + 10192), *(_DWORD *)(a1 + 10196));
      if (*(void *)(a1 + 6992))
      {
        sub_1019AB58C(a1, 1);
        sub_1017F7888(a1 + 64, *(long long **)(a1 + 6992));
        return 2;
      }
      if (*(void *)(a1 + 8520)) {
        goto LABEL_20;
      }
      goto LABEL_9;
    case 1:
      sub_1019ACE7C(a1 + 6856, 10);
      sub_1017D9740(a1 + 3352, 1, 0, 0);
      *(unsigned char *)(a1 + 7131) = 0;
      return 2;
    case 2:
      if (*v4) {
        return result;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102349998);
      }
      int v16 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/NILR/CLNilrController.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = 583;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "fIsConformanceMode";
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102349998);
        }
        int v39 = 136315650;
        int v40 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/NILR/CLNilrController.mm";
        __int16 v41 = 1024;
        int v42 = 583;
        __int16 v43 = 2080;
        unsigned int v44 = "fIsConformanceMode";
        __int16 v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Cplane(CLNilrController::Event)", "%s\n", v28);
        if (v28 != buf) {
          free(v28);
        }
      }
      sub_1004BA578();
      return 2;
    case 3:
      *(unsigned char *)(a1 + 7160) = 0;
      return 2 * *v4;
    case 4:
      if (*(unsigned char *)(a1 + 7131))
      {
        *(unsigned char *)(a1 + 7131) = 0;
        sub_1017D9740(a1 + 3352, 0, 0, 0);
LABEL_9:
        uint64_t v12 = a1 + 6856;
        uint64_t v13 = 0x405E000000000000;
LABEL_10:
        double v14 = *(double *)&v13;
LABEL_11:
        sub_1019AC390(v12, 10, v14);
        return 2;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      __int16 v19 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "#nilr,#nict,Got out of sequence baseband indication and a control plane request", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 2;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        goto LABEL_107;
      }
      goto LABEL_63;
    case 5:
      uint64_t v17 = *(void *)(a1 + 7016);
      if (v17)
      {
        if (*(unsigned char *)(a1 + 8632))
        {
          sub_1017FA5C0(a1 + 64, buf);
          sub_101810A60((int *)buf, (uint64_t)"AWD-Summary-Report-DBH");
          sub_101832D90((uint64_t)v30, a1 + 8640);
          sub_1019AD310(a1, (uint64_t)v30, buf);
          if (v38 < 0) {
            operator delete(__p);
          }
          if (v36 < 0) {
            operator delete(v35);
          }
          if (v34 < 0) {
            operator delete(v33);
          }
          if (v32 < 0) {
            operator delete(v31);
          }
          uint64_t v17 = *(void *)(a1 + 7016);
        }
        *(unsigned char *)(a1 + 8632) = 0;
        sub_1017F9204(a1 + 64, v17);
        return 1;
      }
      sub_1019B94CC(2);
      __break(1u);
LABEL_78:
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102349998);
      }
      __int16 v24 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 136315650;
        *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/NILR/CLNilrController.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = 623;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "fMeasurementRequest";
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102349998);
        }
        int v39 = 136315650;
        int v40 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/NILR/CLNilrController.mm";
        __int16 v41 = 1024;
        int v42 = 623;
        __int16 v43 = 2080;
        unsigned int v44 = "fMeasurementRequest";
        int v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Cplane(CLNilrController::Event)", "%s\n", v29);
        if (v29 != buf) {
          free(v29);
        }
      }
      sub_1004BA578();
      if (*(void *)(a1 + 6992))
      {
LABEL_44:
        sub_1019ACE7C(a1 + 6856, 10);
        *(unsigned char *)(a1 + 7131) = 0;
        sub_1019AB58C(a1, 1);
        sub_1017D9740(a1 + 3352, 0, 0, 0);
        sub_1017F7888(a1 + 64, *(long long **)(a1 + 6992));
        return 2;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      unsigned int v25 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "#nilr,#nict,fMeasurement request not set. Cannot start cplane", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 2;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        goto LABEL_107;
      }
      goto LABEL_63;
    case 6:
      if (*(void *)(a1 + 6992)) {
        goto LABEL_44;
      }
      goto LABEL_78;
    case 7:
      sub_1019ABB54(a1, *(void *)(a1 + 7008));
      int v18 = *(_DWORD **)(a1 + 7008);
      if (*v18 != 2 || v18[1] == 8) {
        return 2;
      }
      uint64_t v12 = a1 + 6856;
      double v14 = 30.0;
      goto LABEL_11;
    case 8:
      if (*(unsigned char *)(a1 + 7131)) {
        return 3;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      __int16 v22 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "#nilr,#nict,SUPL started even though we disabled it. Aborting SUPL", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102349958);
        }
        LOWORD(v39) = 0;
        unsigned int v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Cplane(CLNilrController::Event)", "%s\n", v27);
        if (v27 != buf) {
          free(v27);
        }
      }
      sub_1017D8F20(a1 + 3352);
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)&uint8_t buf[8] = _Q0;
      *(_OWORD *)&unsigned char buf[24] = _Q0;
      uint64_t v48 = 0;
      long long v51 = xmmword_101D2A480;
      char v49 = 0;
      int64x2_t v50 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      long long v52 = _Q0;
      unint64_t v53 = 0xBFF0000000000000;
      uint64_t v54 = 0;
      int v55 = 2;
      int v57 = 0;
      char v58 = 0;
      v56[0] = 0;
      *(void *)((char *)v56 + 5) = 0;
      unint64_t v59 = 0xFFFFFFFF00000000;
      int v60 = -1;
      int64x2_t v61 = v50;
      unint64_t v62 = 0xBFF0000000000000;
      unint64_t v63 = 0xFFFFFFFF00000000;
      int v64 = 0;
      __int16 v65 = 255;
      int v66 = 1;
      char v68 = 0;
      uint64_t v67 = 0;
      uint64_t v69 = 0;
      char v70 = 0;
      int64x2_t v71 = v50;
      unint64_t v72 = 0xBFF0000000000000;
      int v47 = 1;
      uint64_t v46 = -1;
      *(void *)uint64_t buf = 0x1800000000;
      sub_1019AB7D4(a1, (uint64_t)buf);
      return 2;
    case 9:
      sub_1019AC1EC(a1, *(void *)(a1 + 7088));
      return 2;
    case 10:
      return 1;
    case 12:
      if (*(void *)(a1 + 8520))
      {
        sub_1019ACE7C(a1 + 6856, 10);
        *(unsigned char *)(a1 + 7131) = 0;
        sub_1017D9740(a1 + 3352, 0, 0, 0);
LABEL_20:
        sub_1019AB58C(a1, 1);
        sub_1017FA5D0(a1 + 64, *(int **)(a1 + 8520));
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102349958);
        }
        uint64_t v20 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "#nilr,#nict,#wlan,fWlanRequest request not set. Cannot start cplane wlan session", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
LABEL_107:
          }
            dispatch_once(&qword_1024193D0, &stru_102349958);
LABEL_63:
          LOWORD(v39) = 0;
          __int16 v21 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Cplane(CLNilrController::Event)", "%s\n", v21);
          if (v21 != buf) {
            free(v21);
          }
        }
      }
      return 2;
    case 13:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      uint64_t v15 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#wlan response received", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102349958);
        }
        LOWORD(v39) = 0;
        __int16 v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrController::State CLNilrController::handler_Cplane(CLNilrController::Event)", "%s\n", v26);
        if (v26 != buf) {
          free(v26);
        }
      }
      sub_1017FA97C(a1 + 64, a1 + 8528);
      return 2;
    default:
      return result;
  }
}

void sub_1019A9DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10083788C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1019A9E44(uint64_t a1, int a2)
{
  uint64_t result = 3;
  uint64_t v4 = (unsigned __int8 *)(a1 + 6984);
  switch(a2)
  {
    case 0:
      sub_1019AB58C(a1, 1);
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)(a1 + 7024) = _Q0;
      *(void *)(a1 + 7040) = 0;
      *(void *)(a1 + 7056) = 0;
      *(void *)(a1 + 7048) = 0;
      *(void *)(a1 + 7064) = 0xBFF0000000000000;
      *(void *)(a1 + 7072) = -1;
      *(_DWORD *)(a1 + 7080) = 0;
      *(_DWORD *)(a1 + 8528) = 0;
      uint64_t v10 = *(void **)(a1 + 8536);
      if (v10)
      {
        *(void *)(a1 + 8544) = v10;
        operator delete(v10);
      }
      *(void *)(a1 + 8536) = 0;
      *(void *)(a1 + 8544) = 0;
      uint64_t result = 3;
      *(void *)(a1 + 8552) = 0;
      return result;
    case 2:
      if (!*v4)
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102349998);
        }
        __int16 v19 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)uint64_t buf = 136315650;
          *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/NILR/CLNilrController.mm";
          __int16 v31 = 1024;
          int v32 = 713;
          __int16 v33 = 2080;
          char v34 = "fIsConformanceMode";
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_102349998);
          }
          *(_DWORD *)unsigned int v25 = 136315650;
          *(void *)&void v25[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/NILR/CLNilrController.mm";
          __int16 v26 = 1024;
          int v27 = 713;
          __int16 v28 = 2080;
          int v29 = "fIsConformanceMode";
          __int16 v24 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Supl(CLNilrController::Event)", "%s\n", v24);
          if (v24 != buf) {
            free(v24);
          }
        }
        sub_1004BA578();
        goto LABEL_74;
      }
      return result;
    case 4:
      *(unsigned char *)(a1 + 10192) = 1;
      *(_DWORD *)(a1 + 10196) = 1;
      return 2;
    case 5:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      uint64_t v17 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        sub_100134750(buf, "BasebandCplaneEndInd");
        int v18 = SBYTE3(v34) >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)unsigned int v25 = 136446210;
        *(void *)&void v25[4] = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "#nilr,#nict,Unexpected,%{public}s", v25, 0xCu);
        if (SBYTE3(v34) < 0) {
          operator delete(*(void **)buf);
        }
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_74;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      sub_100134750(v25, "BasebandCplaneEndInd");
      int v16 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE3(v29) < 0) {
        operator delete(*(void **)v25);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Supl(CLNilrController::Event)", "%s\n", v16);
      goto LABEL_62;
    case 6:
      uint64_t v12 = a1 + 3352;
      int v13 = 1;
      goto LABEL_67;
    case 7:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      double v14 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100134750(buf, "CplaneSessionStatus");
        uint64_t v15 = SBYTE3(v34) >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)unsigned int v25 = 136315138;
        *(void *)&void v25[4] = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Spurious event,%s", v25, 0xCu);
        if (SBYTE3(v34) < 0) {
          operator delete(*(void **)buf);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_74;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      sub_100134750(v25, "CplaneSessionStatus");
      int v16 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE3(v29) < 0) {
        operator delete(*(void **)v25);
      }
      goto LABEL_61;
    case 8:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      uint64_t v20 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100134750(buf, "SuplStart");
        __int16 v21 = SBYTE3(v34) >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)unsigned int v25 = 136315138;
        *(void *)&void v25[4] = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Spurious event,%s", v25, 0xCu);
        if (SBYTE3(v34) < 0) {
          operator delete(*(void **)buf);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_74;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      sub_100134750(v25, "SuplStart");
      int v16 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE3(v29) < 0) {
        operator delete(*(void **)v25);
      }
LABEL_61:
      sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrController::State CLNilrController::handler_Supl(CLNilrController::Event)", "%s\n", v16);
LABEL_62:
      if (v16 != buf) {
LABEL_84:
      }
        free(v16);
      goto LABEL_74;
    case 9:
      sub_1019AC1EC(a1, *(void *)(a1 + 7088));
      if (*(unsigned char *)(a1 + 6985)) {
        return 1;
      }
      else {
        return *v4;
      }
    case 10:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      __int16 v22 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "#nilr,#nict,Spurious message received", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102349958);
        }
        *(_WORD *)unsigned int v25 = 0;
        int v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLNilrController::State CLNilrController::handler_Supl(CLNilrController::Event)", "%s\n", v16);
        if (v16 != buf) {
          goto LABEL_84;
        }
      }
      goto LABEL_74;
    case 12:
      uint64_t v12 = a1 + 3352;
      int v13 = 6;
LABEL_67:
      sub_1017D9740(v12, 0, 1, v13);
      return 2;
    case 13:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      uint64_t v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#wlan response received", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102349958);
        }
        *(_WORD *)unsigned int v25 = 0;
        int v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLNilrController::State CLNilrController::handler_Supl(CLNilrController::Event)", "%s\n", v23);
        if (v23 != buf) {
          free(v23);
        }
      }
      sub_1017DB294(a1 + 3352, a1 + 8528);
LABEL_74:
      uint64_t result = 3;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1019AA8F4(void *a1, int a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
}

uint64_t sub_1019AA900(uint64_t a1)
{
  *(void *)(a1 + 10224) = 0;
  if (*(char *)(a1 + 9839) < 0) {
    operator delete(*(void **)(a1 + 9816));
  }
  if (*(char *)(a1 + 9815) < 0) {
    operator delete(*(void **)(a1 + 9792));
  }
  if (*(char *)(a1 + 9647) < 0) {
    operator delete(*(void **)(a1 + 9624));
  }
  if (*(char *)(a1 + 9623) < 0) {
    operator delete(*(void **)(a1 + 9600));
  }
  sub_101833480((void *)(a1 + 8560));
  uint64_t v2 = *(void **)(a1 + 8536);
  if (v2)
  {
    *(void *)(a1 + 8544) = v2;
    operator delete(v2);
  }
  sub_10084DD34(a1 + 7176);
  if (*(char *)(a1 + 7159) < 0) {
    operator delete(*(void **)(a1 + 7136));
  }
  sub_100850B38((void *)(a1 + 7096));
  sub_1019B8A44(a1 + 6856);
  uint64_t v5 = (void **)(a1 + 6832);
  sub_1000FA7C8(&v5);
  sub_1000F3950(a1 + 6128);
  sub_1017D5B80(a1 + 3352);
  sub_1017EE85C((void *)(a1 + 64));
  char v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1017DBD28((void *)(a1 + 16));
  return a1;
}

void sub_1019AAA1C(uint64_t a1)
{
  long long v15 = 0uLL;
  uint64_t v16 = 0;
  __int16 v18 = -1;
  *(void *)uint64_t v20 = 0;
  long long v19 = 0uLL;
  *(_DWORD *)&v20[7] = 0;
  v20[11] = 1;
  char v17 = *(unsigned char *)(a1 + 7181);
  v14[0] = *(unsigned char *)(a1 + 7180);
  std::string::operator=((std::string *)&v19, (const std::string *)(a1 + 8120));
  __int16 v18 = *(_WORD *)(a1 + 8168);
  v20[8] = *(_DWORD *)(a1 + 7240) != 0;
  v20[9] = *(_DWORD *)(a1 + 7264) != 0;
  v20[10] = *(_DWORD *)(a1 + 7272) != 0;
  sub_1017DA67C(a1 + 3352, (uint64_t)v14);
  char v6 = v14[0];
  if (SHIBYTE(v16) < 0)
  {
    sub_1000DC48C(&v7, (void *)v15, *((unint64_t *)&v15 + 1));
  }
  else
  {
    long long v7 = v15;
    uint64_t v8 = v16;
  }
  char v9 = v17;
  __int16 v10 = v18;
  if ((v20[7] & 0x80000000) != 0)
  {
    sub_1000DC48C(&__p, (void *)v19, *((unint64_t *)&v19 + 1));
  }
  else
  {
    long long __p = v19;
    uint64_t v12 = *(void *)v20;
  }
  int v2 = *(_DWORD *)&v20[8];
  int v13 = *(_DWORD *)&v20[8];
  __int16 v22 = 0;
  char v3 = (char *)operator new(0x60uLL);
  *(void *)char v3 = off_102349CE8;
  *((void *)v3 + 1) = a1;
  v3[16] = v6;
  *(_OWORD *)(v3 + 24) = v7;
  *((void *)v3 + 5) = v8;
  long long v7 = 0uLL;
  uint64_t v8 = 0;
  v3[48] = v9;
  *((_WORD *)v3 + 28) = v10;
  long long v4 = __p;
  *((void *)v3 + 10) = v12;
  *((_OWORD *)v3 + 4) = v4;
  long long __p = 0uLL;
  uint64_t v12 = 0;
  *((_DWORD *)v3 + 22) = v2;
  __int16 v22 = v3;
  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v5 + 48))(v5, v21);
  sub_1017DCC68(v21);
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete((void *)v7);
  }
  if ((v20[7] & 0x80000000) != 0) {
    operator delete((void *)v19);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete((void *)v15);
  }
}

void sub_1019AAC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_101940A1C((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_1019AACE8(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1019AAD2C(uint64_t a1, unsigned char *a2)
{
  int v2 = (unsigned __int8 *)(a1 + 10232);
  *(unsigned char *)(a1 + 10232) = *a2;
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_102349978);
  }
  char v3 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *v2;
    *(_DWORD *)uint64_t buf = 67109120;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#timingadvance onMobileAssetNotification IsTimingAdvanceSetInMobileAsset %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_102349978);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::setTimingAdvanceConfig(const BOOL &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

uint64_t sub_1019AAEEC(uint64_t a1, char **a2)
{
  return sub_1017D3ADC(a1 + 3352, a2);
}

uint64_t sub_1019AAEF4(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  char v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(_DWORD *)(a1 + 8512);
    sub_10101AE9C(a3, &__p);
    if (v31 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    int v9 = *(unsigned __int8 *)(a2 + 5);
    int v10 = *(unsigned __int8 *)(a2 + 4);
    uint64_t v11 = a2 + 944;
    int v12 = *(unsigned __int16 *)(a2 + 992);
    if (*(char *)(a2 + 967) < 0) {
      uint64_t v11 = *(void *)(a2 + 944);
    }
    int v13 = *(_DWORD *)(a2 + 64);
    int v14 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)uint64_t buf = 67110914;
    int v43 = v7;
    __int16 v44 = 2080;
    __int16 v45 = p_p;
    __int16 v46 = 1024;
    int v47 = v9;
    __int16 v48 = 1024;
    int v49 = v10;
    __int16 v50 = 1024;
    int v51 = v12;
    __int16 v52 = 2080;
    uint64_t v53 = v11;
    __int16 v54 = 1024;
    int v55 = v13;
    __int16 v56 = 1024;
    int v57 = v14;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,#cb,LocationSettings,reason,%s,earlyReturn,%d,HELO,%d,suplPort,%d,suplServer,%s,enableMSAUP,%d,enableMSACP,%d", buf, 0x3Au);
    if (SHIBYTE(v31) < 0) {
      operator delete(__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v16 = *(_DWORD *)(a1 + 8512);
    sub_10101AE9C(a3, v25);
    if (v26 >= 0) {
      char v17 = v25;
    }
    else {
      char v17 = (void **)v25[0];
    }
    int v18 = *(unsigned __int8 *)(a2 + 5);
    int v19 = *(unsigned __int8 *)(a2 + 4);
    uint64_t v20 = a2 + 944;
    int v21 = *(unsigned __int16 *)(a2 + 992);
    if (*(char *)(a2 + 967) < 0) {
      uint64_t v20 = *(void *)(a2 + 944);
    }
    int v22 = *(_DWORD *)(a2 + 64);
    int v23 = *(_DWORD *)(a2 + 16);
    LODWORD(__p) = 67110914;
    HIDWORD(__p) = v16;
    __int16 v28 = 2080;
    int v29 = v17;
    __int16 v30 = 1024;
    int v31 = v18;
    __int16 v32 = 1024;
    int v33 = v19;
    __int16 v34 = 1024;
    int v35 = v21;
    __int16 v36 = 2080;
    uint64_t v37 = v20;
    __int16 v38 = 1024;
    int v39 = v22;
    __int16 v40 = 1024;
    int v41 = v23;
    __int16 v24 = (char *)_os_log_send_and_compose_impl();
    if (v26 < 0) {
      operator delete(v25[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  sub_10083C6B4(a1 + 7176, (uint64_t *)a2);
  sub_1019AAA1C(a1);
  sub_1017D9478(a1 + 3352, (uint64_t *)a2, a3);
  return sub_1017FA548((_DWORD *)(a1 + 64), (int *)a2);
}

void sub_1019AB22C(uint64_t a1, int a2)
{
  if ((sub_10073CBFC() & 1) == 0)
  {
    int v4 = (char *)(a1 + 7130);
    *(unsigned char *)(a1 + 7130) = a2;
    if (a2)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      uint64_t v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v6 = *(_DWORD *)(a1 + 8512);
        *(_DWORD *)uint64_t buf = 67109120;
        int v13 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,#Warning,locking out NILR", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102349958);
        }
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::handleNilrLockoutStatus(const BOOL)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *(_DWORD *)(a1 + 8512);
      int v9 = *v4;
      *(_DWORD *)uint64_t buf = 67109376;
      int v13 = v8;
      __int16 v14 = 1024;
      int v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,lockOutNILR,%d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::handleNilrLockoutStatus(const BOOL)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    sub_1017D98B0(a1 + 3352, *v4);
    sub_1017EE860(a1 + 64, *v4);
  }
}

void sub_1019AB584(uint64_t a1, _DWORD *a2)
{
}

void sub_1019AB58C(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 8512);
    int v6 = *(unsigned __int8 *)(a1 + 8592);
    *(_DWORD *)uint64_t buf = 67109632;
    int v9 = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    __int16 v12 = 1024;
    int v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#nict,fIsNilrActive,%d,setNilrActive,%d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::setNilrActive(BOOL)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (*(unsigned __int8 *)(a1 + 8592) != a2)
  {
    *(unsigned char *)(a1 + 8592) = a2;
    sub_101933798(a1 + 8560, *(_DWORD *)(a1 + 8512), a2);
  }
}

void *sub_1019AB7A8@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0xD) {
    int v2 = "EventUnknown";
  }
  else {
    int v2 = (&off_102349DD8)[a1];
  }
  return sub_100134750(a2, v2);
}

void sub_1019AB7D4(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nict,#awd,submitSessionStatsToAWD", (uint8_t *)buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    __int16 v25 = 0;
    int v15 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::submitSessionStatsToAWD(const CLNilrTypes::SessionStatus &)", "%s\n", (const char *)v15);
    if (v15 != buf) {
      free(v15);
    }
  }
  if (*(unsigned char *)(a2 + 228))
  {
    memcpy((void *)(a1 + 9880), (const void *)a2, 0x110uLL);
    *(unsigned char *)(a1 + 8633) = 1;
    return;
  }
  uint64_t v5 = sub_10084CBBC((uint64_t)buf);
  uint64_t v6 = sub_1019B6D0C(v5, *(_DWORD *)(a2 + 136));
  int v27 = v6;
  uint64_t v7 = sub_1019B6ED4(v6, *(_DWORD *)(a2 + 48));
  int v28 = v7;
  uint64_t v8 = sub_1019B70A4(v7, *(_DWORD *)(a2 + 44));
  int v9 = *(_DWORD *)(a1 + 8512);
  int v29 = v8;
  int v31 = v9;
  char v32 = *(unsigned char *)(a1 + 7160);
  unsigned int v10 = *(_DWORD *)(a2 + 4);
  int v11 = sub_1019B655C(v8, v10);
  int v12 = *(_DWORD *)(a1 + 8600);
  int v30 = v11;
  int v33 = v12;
  char v34 = *(unsigned char *)(a1 + 6985);
  switch(v10)
  {
    case 0x13u:
      goto LABEL_11;
    case 8u:
      uint64_t v36 = *(void *)(a2 + 220);
      int v33 = *(_DWORD *)(a1 + 8596);
      break;
    case 5u:
LABEL_11:
      unsigned int v13 = *(_DWORD *)(a2 + 216);
      if (v13 >= 8) {
        unsigned int v13 = 1;
      }
      unsigned int v35 = v13;
      break;
  }
  sub_1019B6494(a1, buf);
  sub_10192B6A8((uint64_t)buf);
  if (*(void *)(a1 + 7120))
  {
    sub_101832D90((uint64_t)v16, (uint64_t)buf);
    uint64_t v14 = *(void *)(a1 + 7120);
    if (!v14) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v14 + 48))(v14, v16);
    if (v24 < 0) {
      operator delete(__p);
    }
    if (v22 < 0) {
      operator delete(v21);
    }
    if (v20 < 0) {
      operator delete(v19);
    }
    if (v18 < 0) {
      operator delete(v17);
    }
    sub_1019B657C(a1);
  }
  if (v44 < 0) {
    operator delete(v43);
  }
  if (v42 < 0) {
    operator delete(v41);
  }
  if (v40 < 0) {
    operator delete(v39);
  }
  if (v38 < 0) {
    operator delete(v37);
  }
}

void sub_1019ABB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10083788C((uint64_t)va);
  sub_10083788C((uint64_t)&STACK[0x500]);
  _Unwind_Resume(a1);
}

void sub_1019ABB54(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nict,cplaneSummaryReport", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::cplaneSummaryReport(const CLNilrTypes::SessionStatus &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_1019B5BDC(a1, a2);
}

void sub_1019ABCF8(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  uint64_t v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#nilr,#nict,#wlan,#awd,submitWlanSessionStatsToAWD", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    __int16 v25 = 0;
    int v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::submitWlanSessionStatsToAWD(const CLNilrTypes::WlanSessionStatus &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  sub_10084CBBC((uint64_t)&v25);
  int v6 = *(_DWORD *)(v2 + 4);
  int v29 = *(_DWORD *)(v2 + 8);
  char v38 = *(unsigned char *)(v2 + 32);
  char v39 = *(unsigned char *)(v2 + 33);
  __int16 v40 = *(_WORD *)(v2 + 34);
  LOWORD(v7) = *(_WORD *)(v2 + 38);
  double v30 = (double)v7;
  switch(v6)
  {
    case 0:
      int v8 = 35;
      goto LABEL_14;
    case 1:
      int v31 = 0;
      break;
    case 2:
    case 5:
      int v8 = 32;
      goto LABEL_14;
    case 3:
      int v8 = 34;
      goto LABEL_14;
    case 4:
      int v8 = 33;
      goto LABEL_14;
    case 6:
      int v8 = 11;
      goto LABEL_14;
    case 7:
      int v8 = 10;
LABEL_14:
      int v31 = v8;
      break;
    default:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      int v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        int v12 = *(_DWORD *)(v2 + 4);
        *(_DWORD *)uint64_t buf = 67240192;
        int v48 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Unhandled enum value,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102349958);
        }
        int v13 = *(_DWORD *)(v2 + 4);
        int v45 = 67240192;
        int v46 = v13;
        uint64_t v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrController::submitWlanSessionStatsToAWD(const CLNilrTypes::WlanSessionStatus &)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      break;
  }
  double v9 = *(double *)(v2 + 24);
  double v26 = *(double *)(v2 + 16);
  double v27 = v9;
  double v28 = v9 - v26;
  int v32 = *(_DWORD *)(v4 + 8600);
  char v33 = *(unsigned char *)(v4 + 6985);
  sub_10192B6A8((uint64_t)&v25);
  if (*(void *)(v4 + 7120))
  {
    sub_101832D90((uint64_t)v16, (uint64_t)&v25);
    uint64_t v10 = *(void *)(v4 + 7120);
    if (!v10) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v10 + 48))(v10, v16);
    if (v24 < 0) {
      operator delete(__p);
    }
    if (v22 < 0) {
      operator delete(v21);
    }
    if (v20 < 0) {
      operator delete(v19);
    }
    if (v18 < 0) {
      operator delete(v17);
    }
    sub_1019B657C(v4);
  }
  if (v44 < 0) {
    operator delete(v43);
  }
  if (v42 < 0) {
    operator delete(v41);
  }
  if (v37 < 0) {
    operator delete(v36);
  }
  if (v35 < 0) {
    operator delete(v34);
  }
}

void sub_1019AC19C(_Unwind_Exception *a1)
{
}

void sub_1019AC1EC(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nict,suplSummaryReport", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::suplSummaryReport(const CLNilrTypes::SessionStatus &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_1019B5BDC(a1, a2);
}

void sub_1019AC390(uint64_t a1, signed int a2, double a3)
{
  unsigned int v41 = a2;
  uint64_t v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v32 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      char v33 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        char v33 = (void *)*v33;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      char v37 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        char v37 = (void *)*v37;
      }
      *(_DWORD *)long long __p = 136315138;
      *(void *)&__p[4] = v37;
      char v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLNilrController>::setTimeoutEvent(Event, double) [T = CLNilrController]", "%s\n", v38);
      if (v38 != buf) {
        free(v38);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    char v34 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
    }
    char v35 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
    }
    uint64_t v36 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    unint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v8 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v8 = (void *)*v8;
      }
      sub_1019AB7A8(a2, __p);
      if (v49 >= 0) {
        double v9 = __p;
      }
      else {
        double v9 = *(unsigned char **)__p;
      }
      *(_DWORD *)uint64_t buf = 136315650;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&unsigned char buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&unsigned char buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v49) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      uint64_t v10 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v10 = (void *)*v10;
      }
      sub_1019AB7A8(a2, v42);
      if (v45 >= 0) {
        int v11 = v42;
      }
      else {
        int v11 = *(unsigned char **)v42;
      }
      *(_DWORD *)long long __p = 136315650;
      *(void *)&__p[4] = v10;
      __int16 v47 = 2082;
      int v48 = v11;
      __int16 v49 = 2050;
      double v50 = a3;
      int v12 = (char *)_os_log_send_and_compose_impl();
      if (v45 < 0) {
        operator delete(*(void **)v42);
      }
LABEL_79:
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLNilrController>::setTimeoutEvent(Event, double) [T = CLNilrController]", "%s\n", v12);
LABEL_80:
      if (v12 != buf) {
        free(v12);
      }
      return;
    }
    return;
  }
  uint64_t v13 = *(void *)(a1 + 64);
  if (v13)
  {
    uint64_t v14 = a1 + 64;
    do
    {
      signed int v15 = *(_DWORD *)(v13 + 32);
      BOOL v16 = v15 < a2;
      if (v15 >= a2) {
        char v17 = (uint64_t *)v13;
      }
      else {
        char v17 = (uint64_t *)(v13 + 8);
      }
      if (!v16) {
        uint64_t v14 = v13;
      }
      uint64_t v13 = *v17;
    }
    while (*v17);
    if (v14 != a1 + 64 && *(_DWORD *)(v14 + 32) <= a2)
    {
      char v18 = *(NSObject **)(v14 + 40);
      if (v18)
      {
LABEL_37:
        dispatch_time_t v20 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v18, v20, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102349958);
        }
        int v21 = qword_1024193D8;
        os_log_type_t v22 = *(unsigned char *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1024193D8, v22))
        {
          int v23 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            int v23 = (void *)*v23;
          }
          sub_1019AB7A8(v41, __p);
          if (v49 >= 0) {
            char v24 = __p;
          }
          else {
            char v24 = *(unsigned char **)__p;
          }
          *(_DWORD *)uint64_t buf = 136315650;
          *(void *)&uint8_t buf[4] = v23;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&unsigned char buf[14] = v24;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&unsigned char buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v49) < 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102349958);
          }
          __int16 v25 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            __int16 v25 = (void *)*v25;
          }
          sub_1019AB7A8(v41, v42);
          if (v45 >= 0) {
            double v26 = v42;
          }
          else {
            double v26 = *(unsigned char **)v42;
          }
          *(_DWORD *)long long __p = 136315650;
          *(void *)&__p[4] = v25;
          __int16 v47 = 2080;
          int v48 = v26;
          __int16 v49 = 2048;
          double v50 = a3;
          int v12 = (char *)_os_log_send_and_compose_impl();
          if (v45 < 0) {
            operator delete(*(void **)v42);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLNilrController>::setTimeoutEvent(Event, double) [T = CLNilrController]", "%s\n", v12);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  int v19 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v19)
  {
    char v18 = v19;
    *(void *)uint64_t buf = &v41;
    sub_1000FEE0C((uint64_t **)(a1 + 56), (int *)&v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5] = v19;
    dispatch_source_set_timer(v18, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1019B9114;
    handler[3] = &unk_1022B2410;
    handler[4] = a1;
    unsigned int v40 = v41;
    dispatch_source_set_event_handler(v18, handler);
    dispatch_resume(v18);
    goto LABEL_37;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  double v27 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    double v28 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      double v28 = (void *)*v28;
    }
    sub_1019AB7A8(a2, buf);
    if (buf[23] >= 0) {
      int v29 = buf;
    }
    else {
      int v29 = *(unsigned char **)buf;
    }
    *(_DWORD *)long long __p = 136315394;
    *(void *)&__p[4] = v28;
    __int16 v47 = 2082;
    int v48 = v29;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    double v30 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      double v30 = (void *)*v30;
    }
    sub_1019AB7A8(a2, __p);
    if (v49 >= 0) {
      int v31 = __p;
    }
    else {
      int v31 = *(unsigned char **)__p;
    }
    *(_DWORD *)char v42 = 136315394;
    *(void *)&v42[4] = v30;
    __int16 v43 = 2082;
    char v44 = v31;
    int v12 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v49) < 0) {
      operator delete(*(void **)__p);
    }
    goto LABEL_79;
  }
}

void sub_1019ACE7C(uint64_t a1, signed int a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    goto LABEL_33;
  }
  uint64_t v5 = a1 + 64;
  do
  {
    signed int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      int v8 = (uint64_t *)v4;
    }
    else {
      int v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (double v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    uint64_t v10 = qword_1024193D8;
    os_log_type_t v11 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v11))
    {
      int v12 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v12 = (void *)*v12;
      }
      sub_1019AB7A8(a2, __p);
      if (v31 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t buf = 136315394;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v23 = 2080;
      char v24 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      uint64_t v14 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v14 = (void *)*v14;
      }
      sub_1019AB7A8(a2, buf);
      if (v25 >= 0) {
        signed int v15 = buf;
      }
      else {
        signed int v15 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      double v27 = v14;
      __int16 v28 = 2080;
      int v29 = v15;
      BOOL v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
LABEL_54:
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLNilrController>::cancelTimeoutEvent(Event) [T = CLNilrController]", "%s\n", v16);
      if (v16 != (char *)__p) {
        free(v16);
      }
    }
  }
  else
  {
LABEL_33:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    char v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      char v18 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        char v18 = (void *)*v18;
      }
      sub_1019AB7A8(a2, __p);
      if (v31 >= 0) {
        int v19 = __p;
      }
      else {
        int v19 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t buf = 136315394;
      *(void *)&uint8_t buf[4] = v18;
      __int16 v23 = 2080;
      char v24 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      dispatch_time_t v20 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        dispatch_time_t v20 = (void *)*v20;
      }
      sub_1019AB7A8(a2, buf);
      if (v25 >= 0) {
        int v21 = buf;
      }
      else {
        int v21 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      double v27 = v20;
      __int16 v28 = 2080;
      int v29 = v21;
      BOOL v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_54;
    }
  }
}

double sub_1019AD310(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  signed int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#nilr,#nict,#awd,submit1xSessionStatsToAWD", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    LOWORD(v26) = 0;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::submit1xSessionStatsToAWD(Emergency::CLEmergencySessionReport, const CLNilrTypes::SessionStatus &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  *(_DWORD *)(a2 + 208) = a3[212];
  *(unsigned char *)(a2 + 1018) = a3[213];
  *(unsigned char *)(a2 + 1090) = a3[211];
  BOOL v7 = (unsigned char *)(a1 + 8604);
  if (*(unsigned char *)(a1 + 8604))
  {
    *(unsigned char *)(a2 + 1019) = 1;
    *(_OWORD *)(a2 + 1024) = *(_OWORD *)(a1 + 8608);
    *(void *)(a2 + 1040) = *(void *)(a1 + 8624);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  int v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *v7;
    int v10 = *(unsigned __int8 *)(a2 + 40);
    *(_DWORD *)uint64_t buf = 67109376;
    int v31 = v9;
    __int16 v32 = 1024;
    int v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#nilr,#nict,#awd,submit1xSessionStatsToAWD,f1xNwFixValid,%d,emergencyReport.fPositionValid,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v14 = *v7;
    int v15 = *(unsigned __int8 *)(a2 + 40);
    int v26 = 67109376;
    int v27 = v14;
    __int16 v28 = 1024;
    int v29 = v15;
    BOOL v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::submit1xSessionStatsToAWD(Emergency::CLEmergencySessionReport, const CLNilrTypes::SessionStatus &)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  if (*v7 && *(unsigned char *)(a2 + 40) && *(double *)(a1 + 8624) > 0.0 && *(double *)(a2 + 56) > 0.0) {
    *(_DWORD *)(a2 + 1048) = (int)sub_1000F1648((double *)(a1 + 10152), *(double *)(a2 + 24), *(double *)(a2 + 32), *(double *)(a1 + 8608), *(double *)(a1 + 8616), 0.0);
  }
  sub_1019B6494(a1, (std::string *)a2);
  sub_10192B6A8(a2);
  if (*(void *)(a1 + 7120))
  {
    sub_101832D90((uint64_t)v17, a2);
    uint64_t v12 = *(void *)(a1 + 7120);
    if (!v12) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v12 + 48))(v12, v17);
    if (v25 < 0) {
      operator delete(__p);
    }
    if (v23 < 0) {
      operator delete(v22);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    if (v19 < 0) {
      operator delete(v18);
    }
    return sub_1019B657C(a1);
  }
  return result;
}

void sub_1019AD754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10083788C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1019AD770(uint64_t a1, int a2, unsigned int a3)
{
  *(_DWORD *)(a1 + 8596) = *(_DWORD *)(a1 + 8600);
  *(_DWORD *)(a1 + 8600) = a3;
  uint64_t v5 = (char *)(a1 + 6985);
  if (*(unsigned __int8 *)(a1 + 6985) == a2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    signed int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(_DWORD *)(a1 + 8512);
      int v8 = *v5;
      *(_DWORD *)uint64_t buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v7;
      __int16 v27 = 1024;
      int v28 = v8;
      __int16 v29 = 1024;
      int v30 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,noChangeInEmg,fIsCellularEmergency,%d,enable,%d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      int v9 = *(_DWORD *)(a1 + 8512);
      int v10 = *v5;
      *(_DWORD *)char v18 = 67109632;
      *(_DWORD *)&v18[4] = v9;
      __int16 v19 = 1024;
      *(_DWORD *)dispatch_time_t v20 = v10;
      *(_WORD *)&v20[4] = 1024;
      *(_DWORD *)&v20[6] = a2;
      os_log_type_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_EmergencyMode(BOOL, Emergency::CommunicationType)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  else
  {
    *uint64_t v5 = a2;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    uint64_t v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10192B650(a3, buf);
      int v14 = v31 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)char v18 = 67109378;
      *(_DWORD *)&v18[4] = a2;
      __int16 v19 = 2080;
      *(void *)dispatch_time_t v20 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#nilr,#nict,process_EmergencyMode,%d,commType,%s", v18, 0x12u);
      if (v31 < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      sub_10192B650(a3, v18);
      if (v21 >= 0) {
        BOOL v16 = v18;
      }
      else {
        BOOL v16 = *(uint8_t **)v18;
      }
      int v22 = 67109378;
      int v23 = a2;
      __int16 v24 = 2080;
      char v25 = v16;
      char v17 = (char *)_os_log_send_and_compose_impl();
      if (v21 < 0) {
        operator delete(*(void **)v18);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_EmergencyMode(BOOL, Emergency::CommunicationType)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    if (*v5) {
      uint64_t v15 = 2;
    }
    else {
      uint64_t v15 = 3;
    }
    sub_1019ADB94(a1 + 6856, v15);
    sub_1017F6610(a1 + 64, *v5, a3);
    sub_1017D95D0(a1 + 3352, *v5, a3);
  }
}

uint64_t sub_1019ADB94(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 88);
  unsigned int v90 = *(_DWORD *)(a1 + 4);
  if (!*(void *)(a1 + 32))
  {
    sub_1019B9638();
    goto LABEL_169;
  }
  uint64_t v3 = &qword_102419000;
  if (!*(unsigned char *)(a1 + 48))
  {
    sub_1019B97A4(qword_1024193D0 == -1);
    goto LABEL_169;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  uint64_t v5 = qword_1024193D8;
  os_log_type_t v6 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v6))
  {
    int v7 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v7 = (void *)*v7;
    }
    uint64_t v8 = *(int *)(a1 + 4);
    if (v8 > 3) {
      int v9 = "StateUnknown";
    }
    else {
      int v9 = (&off_102349E80)[v8];
    }
    sub_100134750(__p, v9);
    int v10 = SHIBYTE(v94);
    os_log_type_t v11 = *(unsigned char **)__p;
    sub_1019AB7A8(a2, v101);
    uint64_t v12 = __p;
    if (v10 < 0) {
      uint64_t v12 = v11;
    }
    if (v104 >= 0) {
      uint64_t v13 = v101;
    }
    else {
      uint64_t v13 = *(unsigned char **)v101;
    }
    *(_DWORD *)uint64_t buf = 136315650;
    *(void *)&uint8_t buf[4] = v7;
    __int16 v97 = 2080;
    unint64_t v98 = v12;
    __int16 v99 = 2080;
    long long v100 = v13;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v104 < 0) {
      operator delete(*(void **)v101);
    }
    uint64_t v3 = &qword_102419000;
    if (SHIBYTE(v94) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    unint64_t v63 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      unint64_t v63 = (void *)*v63;
    }
    sub_1019B7444(*(_DWORD *)(a1 + 4), v101);
    int v64 = v104;
    __int16 v65 = *(unsigned char **)v101;
    sub_1019AB7A8(a2, v88);
    int v66 = v101;
    if (v64 < 0) {
      int v66 = v65;
    }
    if (v89 >= 0) {
      uint64_t v67 = v88;
    }
    else {
      uint64_t v67 = (void **)v88[0];
    }
    *(_DWORD *)long long __p = 136315650;
    *(void *)&__p[4] = v63;
    __int16 v92 = 2080;
    uint64_t v93 = v66;
    __int16 v94 = 2080;
    uint64_t v95 = v67;
    char v68 = (char *)_os_log_send_and_compose_impl();
    if (v89 < 0) {
      operator delete(v88[0]);
    }
    uint64_t v3 = &qword_102419000;
    if (v104 < 0) {
      operator delete(*(void **)v101);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLNilrController>::handleEvent(Event) [T = CLNilrController]", "%s\n", v68);
    if (v68 != buf) {
      free(v68);
    }
  }
  uint64_t v14 = *(void *)(a1 + 16);
  if (!v14) {
    goto LABEL_31;
  }
  uint64_t v15 = (uint64_t **)(a1 + 8);
  int v16 = *(_DWORD *)(a1 + 4);
  uint64_t v17 = a1 + 16;
  do
  {
    int v18 = *(_DWORD *)(v14 + 32);
    BOOL v19 = v18 < v16;
    if (v18 >= v16) {
      dispatch_time_t v20 = (uint64_t *)v14;
    }
    else {
      dispatch_time_t v20 = (uint64_t *)(v14 + 8);
    }
    if (!v19) {
      uint64_t v17 = v14;
    }
    uint64_t v14 = *v20;
  }
  while (*v20);
  if (v17 == a1 + 16 || v16 < *(_DWORD *)(v17 + 32))
  {
LABEL_31:
    sub_1019B9920();
    goto LABEL_169;
  }
  char v21 = *(uint64_t (**)(void *, uint64_t))(v17 + 40);
  uint64_t v22 = *(void *)(v17 + 48);
  int v23 = (void *)(*(void *)(a1 + 32) + (v22 >> 1));
  if (v22) {
    char v21 = *(uint64_t (**)(void *, uint64_t))(*v23 + v21);
  }
  uint64_t v24 = v21(v23, a2);
  uint64_t v25 = v24;
  int v87 = v24;
  if (a2 <= 1 && v24 != v90)
  {
    sub_1019B9D64();
    goto LABEL_169;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v26 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      __int16 v27 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        __int16 v27 = (void *)*v27;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      unint64_t v72 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        unint64_t v72 = (void *)*v72;
      }
      *(_DWORD *)long long __p = 136315138;
      *(void *)&__p[4] = v72;
      int v73 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "State CLStateMachine<CLNilrController>::handleEvent(Event) [T = CLNilrController]", "%s\n", v73);
      if (v73 != buf) {
        free(v73);
      }
    }
  }
  if (v3[122] != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  int v28 = qword_1024193D8;
  os_log_type_t v29 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v29))
  {
    int v30 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v30 = (void *)*v30;
    }
    if (v25 > 3) {
      char v31 = "StateUnknown";
    }
    else {
      char v31 = (&off_102349E80)[(int)v25];
    }
    sub_100134750(buf, v31);
    if (v99 >= 0) {
      __int16 v32 = buf;
    }
    else {
      __int16 v32 = *(unsigned char **)buf;
    }
    *(_DWORD *)long long __p = 136315394;
    *(void *)&__p[4] = v30;
    __int16 v92 = 2080;
    uint64_t v93 = v32;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v99) < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    uint64_t v69 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      uint64_t v69 = (void *)*v69;
    }
    sub_1019B7444(v25, __p);
    if (v94 >= 0) {
      char v70 = __p;
    }
    else {
      char v70 = *(unsigned char **)__p;
    }
    *(_DWORD *)__int16 v101 = 136315394;
    *(void *)&v101[4] = v69;
    __int16 v102 = 2080;
    __int16 v103 = v70;
    int64x2_t v71 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v94) < 0) {
      operator delete(*(void **)__p);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLNilrController>::handleEvent(Event) [T = CLNilrController]", "%s\n", v71);
    if (v71 != buf) {
      free(v71);
    }
  }
  if (v25 != v90)
  {
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v33 = qword_1024193D8;
    os_log_type_t v34 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v34))
    {
      char v35 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        char v35 = (void *)*v35;
      }
      if (v90 > 3) {
        uint64_t v36 = "StateUnknown";
      }
      else {
        uint64_t v36 = (&off_102349E80)[v90];
      }
      sub_100134750(__p, v36);
      char v37 = v3;
      int v38 = SHIBYTE(v94);
      char v39 = *(unsigned char **)__p;
      sub_100134750(v101, "Exit");
      unsigned int v40 = __p;
      if (v38 < 0) {
        unsigned int v40 = v39;
      }
      if (v104 >= 0) {
        unsigned int v41 = v101;
      }
      else {
        unsigned int v41 = *(unsigned char **)v101;
      }
      *(_DWORD *)uint64_t buf = 136315650;
      *(void *)&uint8_t buf[4] = v35;
      __int16 v97 = 2080;
      unint64_t v98 = v40;
      __int16 v99 = 2080;
      long long v100 = v41;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%soldState,%s,event,%s", buf, 0x20u);
      if (v104 < 0) {
        operator delete(*(void **)v101);
      }
      uint64_t v3 = v37;
      if (SHIBYTE(v94) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      uint64_t v74 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v74 = (void *)*v74;
      }
      sub_1019B7444(v90, v101);
      char v75 = v3;
      int v76 = v104;
      long long v77 = *(unsigned char **)v101;
      sub_100134750(v88, "Exit");
      long long v78 = v101;
      if (v76 < 0) {
        long long v78 = v77;
      }
      if (v89 >= 0) {
        unint64_t v79 = v88;
      }
      else {
        unint64_t v79 = (void **)v88[0];
      }
      *(_DWORD *)long long __p = 136315650;
      *(void *)&__p[4] = v74;
      __int16 v92 = 2080;
      uint64_t v93 = v78;
      __int16 v94 = 2080;
      uint64_t v95 = v79;
      uint64_t v80 = (char *)_os_log_send_and_compose_impl();
      if (v89 < 0) {
        operator delete(v88[0]);
      }
      uint64_t v3 = v75;
      uint64_t v15 = (uint64_t **)(a1 + 8);
      if (v104 < 0) {
        operator delete(*(void **)v101);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLNilrController>::handleEvent(Event) [T = CLNilrController]", "%s\n", v80);
      if (v80 != buf) {
        free(v80);
      }
    }
    uint64_t v42 = *(void *)(a1 + 32);
    *(void *)uint64_t buf = &v90;
    __int16 v43 = sub_1000C5658(v15, (int *)&v90, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    char v44 = v43[5];
    uint64_t v45 = (uint64_t)v43[6];
    int v46 = (void *)(v42 + (v45 >> 1));
    if (v45) {
      char v44 = *(uint64_t **)(*v46 + v44);
    }
    int v47 = ((uint64_t (*)(void *, uint64_t))v44)(v46, 1);
    if (v47 == v90)
    {
      *(_DWORD *)(a1 + 4) = v25;
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      int v48 = qword_1024193D8;
      os_log_type_t v49 = *(unsigned char *)(a1 + 120);
      if (os_log_type_enabled((os_log_t)qword_1024193D8, v49))
      {
        double v50 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          double v50 = (void *)*v50;
        }
        if (v25 > 3) {
          int v51 = "StateUnknown";
        }
        else {
          int v51 = (&off_102349E80)[(int)v25];
        }
        sub_100134750(__p, v51);
        __int16 v52 = v3;
        int v53 = SHIBYTE(v94);
        __int16 v54 = *(unsigned char **)__p;
        sub_100134750(v101, "Enter");
        int v55 = __p;
        if (v53 < 0) {
          int v55 = v54;
        }
        if (v104 >= 0) {
          __int16 v56 = v101;
        }
        else {
          __int16 v56 = *(unsigned char **)v101;
        }
        *(_DWORD *)uint64_t buf = 136315650;
        *(void *)&uint8_t buf[4] = v50;
        __int16 v97 = 2080;
        unint64_t v98 = v55;
        __int16 v99 = 2080;
        long long v100 = v56;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "%snewState,%s,event,%s", buf, 0x20u);
        if (v104 < 0) {
          operator delete(*(void **)v101);
        }
        uint64_t v3 = v52;
        if (SHIBYTE(v94) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v3[122] != -1) {
          dispatch_once(&qword_1024193D0, &stru_102349958);
        }
        int v81 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          int v81 = (void *)*v81;
        }
        sub_1019B7444(v25, v101);
        int v82 = v104;
        int v83 = *(unsigned char **)v101;
        sub_100134750(v88, "Enter");
        char v84 = v101;
        if (v82 < 0) {
          char v84 = v83;
        }
        if (v89 >= 0) {
          unint64_t v85 = v88;
        }
        else {
          unint64_t v85 = (void **)v88[0];
        }
        *(_DWORD *)long long __p = 136315650;
        *(void *)&__p[4] = v81;
        __int16 v92 = 2080;
        uint64_t v93 = v84;
        __int16 v94 = 2080;
        uint64_t v95 = v85;
        int v86 = (char *)_os_log_send_and_compose_impl();
        if (v89 < 0) {
          operator delete(v88[0]);
        }
        if (v104 < 0) {
          operator delete(*(void **)v101);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLNilrController>::handleEvent(Event) [T = CLNilrController]", "%s\n", v86);
        if (v86 != buf) {
          free(v86);
        }
      }
      uint64_t v57 = *(void *)(a1 + 32);
      *(void *)uint64_t buf = &v87;
      char v58 = sub_1000C5658(v15, &v87, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      unint64_t v59 = v58[5];
      uint64_t v60 = (uint64_t)v58[6];
      int64x2_t v61 = (void *)(v57 + (v60 >> 1));
      if (v60) {
        unint64_t v59 = *(uint64_t **)(*v61 + v59);
      }
      uint64_t v25 = ((uint64_t (*)(void *, void))v59)(v61, 0);
      if (v25 == v87) {
        goto LABEL_101;
      }
      sub_1019B9A8C();
    }
    else
    {
      sub_1019B9BF8();
    }
LABEL_169:
    __break(1u);
  }
LABEL_101:
  --*(_DWORD *)(a1 + 88);
  return v25;
}

void sub_1019AE91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 105) < 0) {
    operator delete(*(void **)(v22 - 128));
  }
  _Unwind_Resume(exception_object);
}

void sub_1019AE97C(uint64_t a1, _DWORD *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 8512);
    int v6 = a2[1];
    int v7 = a2[2];
    int v8 = a2[3];
    sub_1019AEC88(a2[4], &__p);
    int v9 = (v30 & 0x8000) == 0 ? &__p : (void **)__p;
    int v10 = a2[5];
    int v11 = a2[6];
    int v12 = a2[7];
    *(_DWORD *)uint64_t buf = 67110914;
    int v40 = v5;
    __int16 v41 = 1024;
    int v42 = v7;
    __int16 v43 = 1024;
    int v44 = v6;
    __int16 v45 = 1024;
    int v46 = v8;
    __int16 v47 = 2080;
    int v48 = v9;
    __int16 v49 = 1024;
    int v50 = v10;
    __int16 v51 = 1024;
    int v52 = v11;
    __int16 v53 = 1024;
    int v54 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,DiscardedPosSessionIndParams,posProtocol,%d,sessionProtocol,%d,sessionId,%u,msgType,%s,positionMethodBitmap,%d,methodType,%d,discardReason,%d", buf, 0x36u);
    if (SBYTE1(v30) < 0) {
      operator delete(__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v13 = *(_DWORD *)(a1 + 8512);
    int v14 = a2[1];
    int v15 = a2[2];
    int v16 = a2[3];
    sub_1019AEC88(a2[4], v22);
    if (v23 >= 0) {
      uint64_t v17 = v22;
    }
    else {
      uint64_t v17 = (void **)v22[0];
    }
    int v18 = a2[5];
    int v19 = a2[6];
    int v20 = a2[7];
    LODWORD(__p) = 67110914;
    HIDWORD(__p) = v13;
    __int16 v25 = 1024;
    int v26 = v15;
    __int16 v27 = 1024;
    int v28 = v14;
    __int16 v29 = 1024;
    int v30 = v16;
    __int16 v31 = 2080;
    __int16 v32 = v17;
    __int16 v33 = 1024;
    int v34 = v18;
    __int16 v35 = 1024;
    int v36 = v19;
    __int16 v37 = 1024;
    int v38 = v20;
    char v21 = (char *)_os_log_send_and_compose_impl();
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::log_DiscardedSessionInd(const gnss::Emergency::Cplane::DiscardedPosSessionIndParams &)", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
  if (sub_10073CB54())
  {
    sub_1019AECB0(a1, a2);
    sub_1019AF15C(a1, a2);
  }
  if (a2[7] == 1 && a2[4] <= 2u) {
    sub_1019AF84C(a1, 0);
  }
}

void *sub_1019AEC88@<X0>(unsigned int a1@<W1>, void *a2@<X8>)
{
  if (a1 > 6) {
    uint64_t v2 = "DiscardedposMsgTypeUnknown";
  }
  else {
    uint64_t v2 = (&off_102349E48)[a1];
  }
  return sub_100134750(a2, v2);
}

void sub_1019AECB0(uint64_t a1, _DWORD *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 8512);
    int v6 = a2[1];
    int v7 = a2[2];
    int v8 = a2[3];
    sub_1019AEC88(a2[4], &__p);
    int v9 = (v47 & 0x8000) == 0 ? &__p : (void **)__p;
    int v10 = a2[5];
    int v11 = a2[6];
    int v12 = a2[7];
    *(_DWORD *)uint64_t buf = 67110914;
    int v57 = v5;
    __int16 v58 = 1024;
    int v59 = v7;
    __int16 v60 = 1024;
    int v61 = v6;
    __int16 v62 = 1024;
    int v63 = v8;
    __int16 v64 = 2080;
    __int16 v65 = v9;
    __int16 v66 = 1024;
    int v67 = v10;
    __int16 v68 = 1024;
    int v69 = v11;
    __int16 v70 = 1024;
    int v71 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,#awd,submitDiscardedSessionStatsToAWD,posProtocol,%d,sessionProtocol,%d,sessionId,%u,msgType,%s,positionMethodBitmap,%d,methodType,%d,discardReason,%d", buf, 0x36u);
    if (SBYTE1(v47) < 0) {
      operator delete(__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v21 = *(_DWORD *)(a1 + 8512);
    int v22 = a2[1];
    int v23 = a2[2];
    int v24 = a2[3];
    sub_1019AEC88(a2[4], v39);
    if (v40 >= 0) {
      __int16 v25 = v39;
    }
    else {
      __int16 v25 = (void **)v39[0];
    }
    int v26 = a2[5];
    int v27 = a2[6];
    int v28 = a2[7];
    LODWORD(__p) = 67110914;
    HIDWORD(__p) = v21;
    __int16 v42 = 1024;
    int v43 = v23;
    __int16 v44 = 1024;
    int v45 = v22;
    __int16 v46 = 1024;
    int v47 = v24;
    __int16 v48 = 2080;
    __int16 v49 = v25;
    __int16 v50 = 1024;
    int v51 = v26;
    __int16 v52 = 1024;
    int v53 = v27;
    __int16 v54 = 1024;
    int v55 = v28;
    __int16 v29 = (char *)_os_log_send_and_compose_impl();
    if (v40 < 0) {
      operator delete(v39[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::submitDiscardedSessionStatsToAWD(const gnss::Emergency::Cplane::DiscardedPosSessionIndParams &)", "%s\n", v29);
    if (v29 != (char *)buf) {
      free(v29);
    }
  }
  sub_10084CBBC((uint64_t)buf);
  unsigned int v13 = a2[5];
  if (v13 > 1)
  {
    if ((v13 & 0xFFFFFFEF) == 0)
    {
      int v73 = 6;
      goto LABEL_22;
    }
    if ((v13 & 0xFFFFFFFB) != 0) {
      goto LABEL_22;
    }
    int v15 = 7;
  }
  else
  {
    int v73 = 1;
    int v14 = a2[6];
    if (v14 == 2)
    {
      int v15 = 3;
    }
    else if (v14 == 1)
    {
      int v15 = 2;
    }
    else
    {
      if (v14) {
        goto LABEL_22;
      }
      int v15 = 1;
    }
  }
  int v72 = v15;
LABEL_22:
  int v75 = *(_DWORD *)(a1 + 8512);
  char v76 = *(unsigned char *)(a1 + 7160);
  int v16 = a2[7];
  if (v16 == 1)
  {
    int v17 = 27;
  }
  else
  {
    if (v16 != 2) {
      goto LABEL_27;
    }
    int v17 = 7;
  }
  int v74 = v17;
LABEL_27:
  int v77 = *(_DWORD *)(a1 + 8600);
  char v78 = *(unsigned char *)(a1 + 6985);
  unsigned int v18 = a2[4];
  if (v18 < 7) {
    unsigned int v19 = v18 + 1;
  }
  else {
    unsigned int v19 = 0;
  }
  unsigned int v83 = v19;
  sub_1019B6494(a1, (std::string *)buf);
  sub_10192B6A8((uint64_t)buf);
  if (*(void *)(a1 + 7120))
  {
    sub_101832D90((uint64_t)v30, (uint64_t)buf);
    uint64_t v20 = *(void *)(a1 + 7120);
    if (!v20) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v20 + 48))(v20, v30);
    if (v38 < 0) {
      operator delete(v37);
    }
    if (v36 < 0) {
      operator delete(v35);
    }
    if (v34 < 0) {
      operator delete(v33);
    }
    if (v32 < 0) {
      operator delete(v31);
    }
    sub_1019B657C(a1);
  }
  if (v87 < 0) {
    operator delete(v86);
  }
  if (v85 < 0) {
    operator delete(v84);
  }
  if (v82 < 0) {
    operator delete(v81);
  }
  if (v80 < 0) {
    operator delete(v79);
  }
}

void sub_1019AF130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10083788C((uint64_t)va);
  sub_10083788C((uint64_t)&STACK[0x540]);
  _Unwind_Resume(a1);
}

void sub_1019AF15C(uint64_t a1, _DWORD *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 8512);
    int v6 = a2[1];
    int v7 = a2[2];
    int v8 = a2[3];
    sub_1019AEC88(a2[4], &__p);
    int v9 = (v54 & 0x8000) == 0 ? &__p : (void **)__p;
    int v10 = a2[5];
    int v11 = a2[6];
    int v12 = a2[7];
    *(_DWORD *)uint64_t buf = 67110914;
    *(_DWORD *)&uint8_t buf[4] = v5;
    *(_WORD *)int v63 = 1024;
    *(_DWORD *)&v63[2] = v7;
    __int16 v64 = 1024;
    int v65 = v6;
    __int16 v66 = 1024;
    int v67 = v8;
    __int16 v68 = 2080;
    *(void *)int v69 = v9;
    *(_WORD *)&v69[8] = 1024;
    *(_DWORD *)__int16 v70 = v10;
    *(_WORD *)&v70[4] = 1024;
    int v71 = v11;
    LOWORD(v72[0]) = 1024;
    *(_DWORD *)((char *)v72 + 2) = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,#ca,submitDiscardedSessionStatsToCA,posProtocol,%d,sessionProtocol,%d,sessionId,%u,msgType,%s,positionMethodBitmap,%d,methodType,%d,discardReason,%d", buf, 0x36u);
    if (SBYTE1(v54) < 0) {
      operator delete(__p);
    }
  }
  uint64_t v13 = sub_10013D1A0(115, 2);
  if (v13)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v30 = *(_DWORD *)(a1 + 8512);
    int v31 = a2[1];
    int v32 = a2[2];
    int v33 = a2[3];
    sub_1019AEC88(a2[4], &v45);
    if (SHIBYTE(v47) >= 0) {
      char v34 = &v45;
    }
    else {
      char v34 = v45;
    }
    int v35 = a2[5];
    int v36 = a2[6];
    int v37 = a2[7];
    LODWORD(__p) = 67110914;
    HIDWORD(__p) = v30;
    __int16 v49 = 1024;
    int v50 = v32;
    __int16 v51 = 1024;
    int v52 = v31;
    __int16 v53 = 1024;
    int v54 = v33;
    __int16 v55 = 2080;
    *(void *)__int16 v56 = v34;
    *(_WORD *)&v56[8] = 1024;
    int v57 = v35;
    __int16 v58 = 1024;
    int v59 = v36;
    __int16 v60 = 1024;
    int v61 = v37;
    char v38 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v47) < 0) {
      operator delete(v45);
    }
    uint64_t v13 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::submitDiscardedSessionStatsToCA(const gnss::Emergency::Cplane::DiscardedPosSessionIndParams &)", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
  }
  int v14 = sub_1019B7274(v13, a2[2]);
  int v15 = v14;
  unsigned int v16 = a2[5];
  if (v16 > 1)
  {
    if ((v16 & 0xFFFFFFFB) != 0) {
      int v18 = 0;
    }
    else {
      int v18 = 7;
    }
  }
  else
  {
    unsigned int v17 = a2[6];
    if (v17 < 3) {
      int v18 = v17 + 1;
    }
    else {
      int v18 = 0;
    }
  }
  unsigned int v19 = a2[4];
  if (v19 < 7) {
    unsigned int v20 = v19 + 1;
  }
  else {
    unsigned int v20 = 0;
  }
  int v21 = a2[7];
  *(_DWORD *)uint64_t buf = 86;
  *(_DWORD *)int v63 = v14;
  if (v21 == 1) {
    int v22 = 1;
  }
  else {
    int v22 = 2 * (v21 == 2);
  }
  *(_DWORD *)&v69[4] = 0;
  *(_DWORD *)&v70[2] = 51;
  v72[0] = 1;
  v72[6] = 0;
  v72[8] = 52;
  v72[10] = v18;
  v72[16] = 0;
  v72[18] = 84;
  v72[20] = v22;
  v72[26] = 0;
  v72[28] = 85;
  v72[30] = v20;
  int v23 = *(_DWORD *)(a1 + 8512);
  v72[36] = 0;
  v72[38] = 79;
  v72[40] = v23;
  v72[46] = 0;
  int v45 = 0;
  uint64_t v46 = 0;
  int v47 = 0;
  long long __p = &v45;
  LOBYTE(v49) = 0;
  int v45 = operator new(0xF0uLL);
  uint64_t v46 = (uint64_t)v45;
  int v47 = (char *)v45 + 240;
  uint64_t v46 = sub_100682A48((uint64_t)&v47, (uint64_t)buf, (uint64_t)&v73, (uint64_t)v45);
  for (uint64_t i = 208; i != -32; i -= 40)
    sub_100118010((uint64_t)&buf[i]);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  __int16 v25 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v26 = *(_DWORD *)(a1 + 8512);
    int v27 = a2[7];
    *(_DWORD *)uint64_t buf = 67110400;
    *(_DWORD *)&uint8_t buf[4] = v26;
    *(_WORD *)int v63 = 1024;
    *(_DWORD *)&v63[2] = v15;
    __int16 v64 = 1024;
    int v65 = 1;
    __int16 v66 = 1024;
    int v67 = v18;
    __int16 v68 = 1024;
    *(_DWORD *)int v69 = v27;
    *(_WORD *)&v69[4] = 1024;
    *(_DWORD *)&v69[6] = v20;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,#ca,submitDiscardedSessionStatsToCA,posProtocol,%d,sessionType,%d,methodType,%d,discardReason,%d,discardMsgType,%d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v39 = *(_DWORD *)(a1 + 8512);
    int v40 = a2[7];
    LODWORD(__p) = 67110400;
    HIDWORD(__p) = v39;
    __int16 v49 = 1024;
    int v50 = v15;
    __int16 v51 = 1024;
    int v52 = 1;
    __int16 v53 = 1024;
    int v54 = v18;
    __int16 v55 = 1024;
    *(_DWORD *)__int16 v56 = v40;
    *(_WORD *)&v56[4] = 1024;
    *(_DWORD *)&v56[6] = v20;
    __int16 v41 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::submitDiscardedSessionStatsToCA(const gnss::Emergency::Cplane::DiscardedPosSessionIndParams &)", "%s\n", v41);
    if (v41 != (char *)buf) {
      free(v41);
    }
  }
  int v28 = *(void **)(a1 + 10224);
  memset(v44, 0, sizeof(v44));
  sub_100682C20(v44, (uint64_t)v45, v46, 0xCCCCCCCCCCCCCCCDLL * ((v46 - (uint64_t)v45) >> 3));
  [v28 setMeasurements:sub_10067C03C(v44)];
  *(void *)uint64_t buf = v44;
  sub_100682B1C((void ***)buf);
  __int16 v29 = *(void **)(a1 + 10224);
  if (byte_10248A8FF < 0)
  {
    sub_1000DC48C(__dst, (void *)xmmword_10248A8E8, *((unint64_t *)&xmmword_10248A8E8 + 1));
  }
  else
  {
    *(_OWORD *)uint64_t __dst = xmmword_10248A8E8;
    uint64_t v43 = unk_10248A8F8;
  }
  [v29 submitEvent:sub_1007EB0E8((long long *)__dst)];
  if (SHIBYTE(v43) < 0) {
    operator delete(__dst[0]);
  }
  sub_1019B657C(a1);
  *(void *)uint64_t buf = &v45;
  sub_100682B1C((void ***)buf);
}

void sub_1019AF7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char *a32)
{
  a32 = &a21;
  sub_100682B1C((void ***)&a32);
  _Unwind_Resume(a1);
}

uint64_t sub_1019AF84C(uint64_t a1, int a2)
{
  sub_1000C7F88(buf);
  double v23 = 0.0;
  if (sub_1000A699C(*(uint64_t *)buf, "AbcCooldownTime", &v23)) {
    double v4 = v23;
  }
  else {
    double v4 = 864000.0;
  }
  if (v22) {
    sub_1000DB0A0(v22);
  }
  sub_1019B79DC((_DWORD *)a1);
  if (!a2)
  {
    ++*(_DWORD *)(a1 + 10200);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *(_DWORD *)(a1 + 10200);
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "handleNonEmergencyNilr,non-emergency NILR Cplane request received,count,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      int v17 = *(_DWORD *)(a1 + 10200);
      LODWORD(v23) = 67109120;
      HIDWORD(v23) = v17;
      int v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::handleNonEmergencyNilr(const BOOL)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    int v7 = (double *)(a1 + 10216);
    if (*(double *)(a1 + 10216) == 0.0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      uint64_t v13 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "handleNonEmergencyNilr,first non-emergency NILR Cplane request received,triggering non_emergency_NILR_CPlane ABC", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_44;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      LOWORD(v23) = 0;
      unsigned int v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::handleNonEmergencyNilr(const BOOL)", "%s\n", v20);
      if (v20 == (char *)buf) {
        goto LABEL_44;
      }
    }
    else
    {
      if (CFAbsoluteTimeGetCurrent() - *v7 <= v4) {
        return sub_1019B7E60(a1);
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      int v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "handleNonEmergencyNilr,non-emergency NILR Cplane request received after cooldown period,triggering non_emergency_NILR_CPlane ABC", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_44;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      LOWORD(v23) = 0;
      unsigned int v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::handleNonEmergencyNilr(const BOOL)", "%s\n", v20);
      if (v20 == (char *)buf)
      {
LABEL_44:
        sub_10187A1C8((uint64_t)[objc_msgSend(*(id *)a1, "silo") queue], (uint64_t)"Emergency", (uint64_t)"non_emergency_NILR_CPlane", 1);
        *(_DWORD *)(a1 + 10200) = 0;
        goto LABEL_45;
      }
    }
    free(v20);
    goto LABEL_44;
  }
  ++*(_DWORD *)(a1 + 10204);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(a1 + 10204);
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "handleNonEmergencyNilr,non-emergency NILR SUPL INIT received,count,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v15 = *(_DWORD *)(a1 + 10204);
    LODWORD(v23) = 67109120;
    HIDWORD(v23) = v15;
    unsigned int v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::handleNonEmergencyNilr(const BOOL)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  int v7 = (double *)(a1 + 10208);
  if (*(double *)(a1 + 10208) == 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "handleNonEmergencyNilr,first SUPL INIT received outside emergency,triggering non_emergency_NILR_SUPL ABC", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_38;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    LOWORD(v23) = 0;
    unsigned int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::handleNonEmergencyNilr(const BOOL)", "%s\n", v19);
    if (v19 == (char *)buf) {
      goto LABEL_38;
    }
LABEL_58:
    free(v19);
LABEL_38:
    sub_10187A1C8((uint64_t)[[objc_msgSend(*(id *)a1, "silo") queue], @"Emergency", @"non_emergency_NILR_SUPL", 0);
    *(_DWORD *)(a1 + 10204) = 0;
LABEL_45:
    *int v7 = CFAbsoluteTimeGetCurrent();
    return sub_1019B7E60(a1);
  }
  if (CFAbsoluteTimeGetCurrent() - *v7 > v4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "handleNonEmergencyNilr,SUPL INIT received outside emergency,triggering non_emergency_NILR_SUPL ABC", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_38;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    LOWORD(v23) = 0;
    unsigned int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::handleNonEmergencyNilr(const BOOL)", "%s\n", v19);
    if (v19 == (char *)buf) {
      goto LABEL_38;
    }
    goto LABEL_58;
  }
  return sub_1019B7E60(a1);
}

void sub_1019B0160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1019B0180(uint64_t a1, uint64_t a2, double a3, double a4)
{
  LODWORD(a3) = *(_DWORD *)(a2 + 20);
  LODWORD(a4) = *(_DWORD *)(a2 + 24);
  double v6 = (double)*(unint64_t *)&a3;
  double v7 = (double)*(unint64_t *)&a4;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  double v8 = v6 * 0.00000536441803;
  double v9 = v7 * 0.00000536441803 + -360.0;
  int v10 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v11 = *(_DWORD *)(a1 + 8512);
    int v13 = *(_DWORD *)(a2 + 4);
    int v12 = *(_DWORD *)(a2 + 8);
    int v14 = *(_DWORD *)(a2 + 12);
    int v15 = *(_DWORD *)(a2 + 16);
    int v16 = *(_DWORD *)(a2 + 20);
    int v17 = *(_DWORD *)(a2 + 24);
    int v18 = *(_DWORD *)(a2 + 32);
    int v19 = *(unsigned __int8 *)(a2 + 28);
    int v20 = *(unsigned __int8 *)(a2 + 30);
    int v21 = *(unsigned __int8 *)(a2 + 36);
    int v22 = *(unsigned __int16 *)(a2 + 38);
    int v23 = *(unsigned __int16 *)(a2 + 40);
    int v24 = *(unsigned __int8 *)(a2 + 42);
    int v25 = *(unsigned __int8 *)(a2 + 44);
    int v26 = *(_DWORD *)(a2 + 48);
    int v27 = *(unsigned __int16 *)(a2 + 52);
    int v28 = *(unsigned __int8 *)(a2 + 56);
    int v29 = *(unsigned __int16 *)(a2 + 58);
    int v30 = *(unsigned __int8 *)(a2 + 60);
    *(_DWORD *)uint64_t buf = 67114497;
    int v40 = v11;
    __int16 v41 = 1024;
    *(_DWORD *)__int16 v42 = v12;
    *(_WORD *)&v42[4] = 1024;
    *(_DWORD *)&v42[6] = v13;
    __int16 v43 = 1024;
    int v44 = v14;
    __int16 v45 = 1024;
    int v46 = v15;
    __int16 v47 = 1025;
    int v48 = v16;
    __int16 v49 = 1025;
    int v50 = v17;
    __int16 v51 = 2049;
    double v52 = v6 * 0.00000536441803;
    __int16 v53 = 2049;
    double v54 = v7 * 0.00000536441803 + -360.0;
    __int16 v55 = 1024;
    int v56 = v18;
    __int16 v57 = 1024;
    int v58 = v19;
    __int16 v59 = 1024;
    int v60 = v20;
    __int16 v61 = 1024;
    int v62 = v21;
    __int16 v63 = 1024;
    int v64 = v22;
    __int16 v65 = 1024;
    int v66 = v23;
    __int16 v67 = 1024;
    int v68 = v24;
    __int16 v69 = 1024;
    int v70 = v25;
    __int16 v71 = 1024;
    int v72 = v26;
    __int16 v73 = 1024;
    int v74 = v27;
    __int16 v75 = 1024;
    int v76 = v28;
    __int16 v77 = 1024;
    int v78 = v29;
    __int16 v79 = 1024;
    int v80 = v30;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,PosIs801GpsLocationIndParams,posProtocol,%d,sessionProtocol,%d,sessionId,%u,status,%d,3ggp2lat,%{private}d,3gpp2lon,%{private}d,lat,%{private}.8f,lon,%{private}.8f,fixType,%d,locUncAng,%d,locUncP,%d,vel,%d,HorVelocity,%d,HeadingVelocity,%d,VerVelocity,%d,clockIncluded,%d,clockBias,%d,clockDrift,%d,heightIncluded,%d,height,%d,locUncV,%d", buf, 0x8Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::log_1xFinalFixFromNetwork(const gnss::Emergency::Cplane::PosIs801GpsLocationIndParams &)", "%s\n", v37);
    if (v37 != (char *)buf) {
      free(v37);
    }
  }
  int v31 = *(_DWORD *)(a1 + 7080);
  if (*(_DWORD *)(a2 + 16))
  {
    *(_DWORD *)(a1 + 7080) = v31 | 0x18;
  }
  else
  {
    *(double *)(a1 + 7040) = v8;
    *(double *)(a1 + 7048) = v9;
    *(_DWORD *)(a1 + 7080) = v31 | 0x30;
    double v32 = sub_101811610(*(unsigned __int8 *)(a2 + 29));
    double v33 = sub_101811610(*(unsigned __int8 *)(a2 + 30));
    if (v32 > 0.0 && v33 > 0.0)
    {
      double v33 = sqrt(v33 * v33 + v32 * v32) * 2.14;
      *(double *)(a1 + 7064) = v33;
    }
    if (*(unsigned char *)(a2 + 56))
    {
      LOWORD(v33) = *(_WORD *)(a2 + 58);
      *(double *)(a1 + 7056) = (double)*(unint64_t *)&v33;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    char v34 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v35 = *(_DWORD *)(a1 + 8512);
      uint64_t v36 = *(void *)(a1 + 7064);
      *(_DWORD *)uint64_t buf = 67109376;
      int v40 = v35;
      __int16 v41 = 2048;
      *(void *)__int16 v42 = v36;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,Scaled hunc %f", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      char v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::log_1xFinalFixFromNetwork(const gnss::Emergency::Cplane::PosIs801GpsLocationIndParams &)", "%s\n", v38);
      if (v38 != (char *)buf) {
        free(v38);
      }
    }
    *(unsigned char *)(a1 + 8604) = 1;
    *(double *)(a1 + 8608) = v8;
    *(double *)(a1 + 8616) = v9;
    *(void *)(a1 + 8624) = *(void *)(a1 + 7064);
  }
}

void sub_1019B0774(uint64_t a1, _DWORD *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 8512);
    int v6 = a2[1];
    int v7 = a2[2];
    int v8 = a2[3];
    int v9 = a2[4];
    int v10 = a2[5];
    *(_DWORD *)uint64_t buf = 67110400;
    int v22 = v5;
    __int16 v23 = 1024;
    int v24 = v6;
    __int16 v25 = 1024;
    int v26 = v7;
    __int16 v27 = 1024;
    int v28 = v8;
    __int16 v29 = 1024;
    int v30 = v9;
    __int16 v31 = 1024;
    int v32 = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,PosLocationRequestStatusIndParams,sessionProtocol,%d,posProtocol,%d,sessionId,%u,positionMethodBitmap,0x%02x,locationRequestStatus,%d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_BasebandCplaneInd(const gnss::Emergency::Cplane::PosLocationRequestStatusIndParams &)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  if (!*(unsigned char *)(a1 + 7130))
  {
    *(void *)(a1 + 7016) = a2;
    int v13 = a2[5];
    if (v13 == 1)
    {
      sub_1019ADB94(a1 + 6856, 5);
    }
    else
    {
      if (v13)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102349958);
        }
        int v18 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
        {
          int v19 = a2[5];
          *(_DWORD *)uint64_t buf = 67240192;
          int v22 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "#nilr,#nict,Unrecognized indication type,%{public}d", buf, 8u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_32;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102349958);
        }
        int v17 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLNilrController::process_BasebandCplaneInd(const gnss::Emergency::Cplane::PosLocationRequestStatusIndParams &)", "%s\n");
      }
      else
      {
        sub_1019ADB94(a1 + 6856, 4);
        *(unsigned char *)(a1 + 7160) = 1;
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102349958);
        }
        int v14 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v15 = *(_DWORD *)(a1 + 8512);
          int v16 = *(unsigned __int8 *)(a1 + 7160);
          *(_DWORD *)uint64_t buf = 67109376;
          int v22 = v15;
          __int16 v23 = 1024;
          int v24 = v16;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,#awd,fWasNilrRequestReceived,%d", buf, 0xEu);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_32;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102349958);
        }
        int v17 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_BasebandCplaneInd(const gnss::Emergency::Cplane::PosLocationRequestStatusIndParams &)", "%s\n");
      }
      if (v17 != buf) {
        free(v17);
      }
    }
LABEL_32:
    *(void *)(a1 + 7016) = 0;
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  int v11 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,ignoring control plane indication due to NILR lock out", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_BasebandCplaneInd(const gnss::Emergency::Cplane::PosLocationRequestStatusIndParams &)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
}

void sub_1019B0DBC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 7130))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    uint64_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,ignoring control plane request due to NILR lock out", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_CplaneRequest(const gnss::Emergency::Cplane::PositionRequestFromModem &)", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
  else
  {
    *(void *)(a1 + 6992) = a2 + 4;
    *(_DWORD *)(a1 + 7000) = *(_DWORD *)(a2 + 48);
    sub_1019ADB94(a1 + 6856, 6);
    *(void *)(a1 + 6992) = 0;
  }
}

void sub_1019B0F78(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(_DWORD *)(a1 + 8512);
    *(_DWORD *)uint64_t buf = 67109120;
    int v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,process_ResetDataReq", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v7 = *(_DWORD *)(a1 + 8512);
    int v10 = 67109120;
    int v11 = v7;
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_ResetDataReq(const gnss::Emergency::Cplane::ResetDataReqParams &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (*(unsigned char *)(a1 + 7130))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    double v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Ignoring ResetData request due to NILR lock out", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      LOWORD(v10) = 0;
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_ResetDataReq(const gnss::Emergency::Cplane::ResetDataReqParams &)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  else
  {
    v9[0] = off_102349D68;
    v9[3] = v9;
    uint64_t v6 = *(void *)(a1 + 40);
    if (!v6) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *))(*(void *)v6 + 48))(v6, v9);
    sub_1017DCC68(v9);
    sub_1017F8E40(a1 + 64);
  }
}

void sub_1019B12DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1017DCC68((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1019B12F8(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 8512);
    *(_DWORD *)uint64_t buf = 67109120;
    int v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,process_AssistanceEph", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_AssistanceEph(const gnss::Emergency::Cplane::GpsNavigationModelFromModem &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (*(unsigned char *)(a1 + 7130))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Ignoring Nav Model assistance due to NILR lock out", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_AssistanceEph(const gnss::Emergency::Cplane::GpsNavigationModelFromModem &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    sub_1019ADB94(a1 + 6856, 11);
    sub_1017F70DC(a1 + 64, a2 + 4);
  }
}

void sub_1019B1608(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 8512);
    *(_DWORD *)uint64_t buf = 67109120;
    int v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,process_AssistanceAcquisition", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_AssistanceAcquisition(const gnss::Emergency::Cplane::GpsAcqAssistanceFromModem &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (*(unsigned char *)(a1 + 7130))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Ignoring Acquisition assistance due to NILR lock out", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_AssistanceAcquisition(const gnss::Emergency::Cplane::GpsAcqAssistanceFromModem &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    sub_1019ADB94(a1 + 6856, 11);
    sub_1017F6D3C(a1 + 64, a2 + 4);
  }
}

void sub_1019B1918(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 8512);
    *(_DWORD *)uint64_t buf = 67109120;
    int v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,process_AssistanceLocation", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_AssistanceLocation(const gnss::Emergency::Cplane::ReferenceLocationFromModem &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (*(unsigned char *)(a1 + 7130))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Ignoring Ref Location network assistance due to NILR lock out", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_AssistanceLocation(const gnss::Emergency::Cplane::ReferenceLocationFromModem &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    sub_1019ADB94(a1 + 6856, 11);
    sub_1017F76B8(a1 + 64, a2 + 4);
  }
}

void sub_1019B1C28(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 8512);
    *(_DWORD *)uint64_t buf = 67109120;
    int v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,process_AssistanceTime", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_AssistanceTime(const gnss::Emergency::Cplane::GpsReferenceTimeFromModem &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (*(unsigned char *)(a1 + 7130))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Ignoring Ref Time network assistance due to NILR lock out", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_AssistanceTime(const gnss::Emergency::Cplane::GpsReferenceTimeFromModem &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    sub_1019ADB94(a1 + 6856, 11);
    sub_1017F72AC(a1 + 64, (void *)(a2 + 4));
  }
}

uint64_t sub_1019B1F38(uint64_t a1, _DWORD *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[4];
    int v6 = a2[5];
    int v7 = a2[6];
    *(_DWORD *)uint64_t buf = 67109632;
    int v11 = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "process_SessionAbort,abortReason,%d,overRidingPositionMethod,%d,overRidingMethodType,%d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_SessionAbort(const gnss::Emergency::Cplane::GnssAbortReqParams &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  return sub_1017F7C7C(a1 + 64, (uint64_t)a2);
}

uint64_t sub_1019B212C(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 8512);
    *(_DWORD *)uint64_t buf = 67109120;
    int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,process_BasebandPowerStatus", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_BasebandPowerStatus(BOOL)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return sub_1017F9000(a1 + 64, a2);
}

void sub_1019B22F0(uint64_t a1, int *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 8512);
    *(_DWORD *)uint64_t buf = 67109120;
    int v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#nict,#wlan,process_CplaneWlanRequest", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_CplaneWlanRequest(const gnss::Emergency::Cplane::WlanMeasReqParams &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  if (*(unsigned char *)(a1 + 7130))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,#wlan,ignoring control plane wlan request due to NILR lock out", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_CplaneWlanRequest(const gnss::Emergency::Cplane::WlanMeasReqParams &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v9 = *a2;
      int v10 = *((unsigned __int16 *)a2 + 8);
      *(_DWORD *)uint64_t buf = 67109376;
      int v14 = v9;
      __int16 v15 = 1024;
      int v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#wlan,#nilr,#nict,wlanMeasRequest,nInstance,%d,responseTime,%d,", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_CplaneWlanRequest(const gnss::Emergency::Cplane::WlanMeasReqParams &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    *(void *)(a1 + 8520) = a2;
    sub_1019ADB94(a1 + 6856, 12);
    *(void *)(a1 + 8520) = 0;
  }
}

void sub_1019B275C(uint64_t a1, _DWORD *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 8512);
    *(_DWORD *)uint64_t buf = 67109120;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,AssistanceNeededReport", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::nilrAssistanceRequestHandler(const gnss::Emergency::Cplane::AssistanceNeededReport *)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  sub_1017F93DC(a1 + 64, a2);
}

void sub_1019B2920(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(_DWORD *)(a1 + 8512);
    *(_DWORD *)uint64_t buf = 67109120;
    int v10 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,PositionReport", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::nilrPositionHandler(const gnss::Emergency::Cplane::PositionReport *, const gnss::Fix &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_1017F9AA4(a1 + 64, a2, a3);
}

void sub_1019B2AF4(uint64_t a1, _DWORD *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 8512);
    *(_DWORD *)uint64_t buf = 67109120;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,MeasurementReport", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::nilrMeasurementHandler(const gnss::Emergency::Cplane::MeasurementReport *)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  sub_1017F9E50(a1 + 64, a2);
}

void sub_1019B2CB8(uint64_t a1, _DWORD *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 8512);
    *(_DWORD *)uint64_t buf = 67109120;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,MeasurementReportWithEstimate", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::nilrMeasurementReportWithEstimateHandler(const gnss::Emergency::Cplane::MeasurementReportWithEstimate *)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  sub_1017FA1CC(a1 + 64, a2);
}

void sub_1019B2E7C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  int v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v9 = *(_DWORD *)(a1 + 8512);
    *(_DWORD *)uint64_t buf = 67109120;
    int v12 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,SummaryReport", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::nilrReportHandler(const gnss::Emergency::SummaryReport *, const std::string &, BOOL)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  sub_1019B306C(a1, a2, a3, a4);
  sub_1019B3864(a1, a2, a3, a4);
}

void sub_1019B306C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  int v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#nilr,#nict,#awd,submitSessionStatsToAWD,CB", (uint8_t *)buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    LOWORD(__dst[0]) = 0;
    int v35 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::submitSessionStatsToAWD(const gnss::Emergency::SummaryReport *, const std::string &, BOOL)", "%s\n", (const char *)v35);
    if (v35 != buf) {
      free(v35);
    }
  }
  uint64_t v9 = sub_10084CBBC((uint64_t)buf);
  int v10 = *(_DWORD *)(a2 + 92);
  if (v10 == 1)
  {
    double v11 = *(double *)(a2 + 8);
    if (v11 >= -180.0 && v11 <= 180.0)
    {
      double v12 = *(double *)a2;
      if (*(double *)a2 >= -90.0 && v12 <= 90.0)
      {
        double v13 = *(double *)(a2 + 24);
        if (v13 > 0.0 && (fabs(v12) >= 0.0000001 || fabs(v11) >= 0.0000001))
        {
          buf[1].__r_.__value_.__s.__data_[16] = 1;
          *(double *)&buf[1].__r_.__value_.__l.__data_ = v12;
          *(double *)&buf[1].__r_.__value_.__l.__size_ = v11;
          *(double *)&buf[2].__r_.__value_.__l.__size_ = v13;
        }
      }
    }
    double v14 = *(double *)(a2 + 16);
    if (v14 > -450.0 && v14 < 8850.0)
    {
      double v15 = *(double *)(a2 + 32);
      if (v15 > 0.0)
      {
        buf[2].__r_.__value_.__r.__words[0] = *(void *)(a2 + 16);
        *(double *)&buf[2].__r_.__value_.__r.__words[2] = v15;
      }
    }
  }
  buf[3].__r_.__value_.__r.__words[0] = *(void *)(a2 + 40);
  *(_OWORD *)&buf[0].__r_.__value_.__r.__words[1] = *(_OWORD *)(a1 + 7024);
  LODWORD(buf[0].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 120);
  if (v10 == 1) {
    buf[1].__r_.__value_.__s.__data_[16] = 1;
  }
  HIDWORD(buf[3].__r_.__value_.__r.__words[1]) = sub_1019B5F04(v9, *(_DWORD *)(a2 + 52));
  sub_100103240();
  uint64_t v16 = sub_10073CCBC();
  if (v16 && (sub_100103240(), uint64_t v16 = sub_10010145C(), (v16 & 1) == 0))
  {
    if (*(_DWORD *)(a1 + 7000) == 2) {
      uint64_t v17 = 2;
    }
    else {
      uint64_t v17 = 1;
    }
  }
  else
  {
    uint64_t v17 = sub_1019B60D4(v16, *(unsigned int *)(a2 + 56));
  }
  LODWORD(buf[3].__r_.__value_.__r.__words[2]) = v17;
  uint64_t v18 = sub_1019B629C(v17, *(_DWORD *)(a2 + 60));
  int v19 = *(_DWORD *)(a2 + 48);
  HIDWORD(buf[3].__r_.__value_.__r.__words[2]) = v18;
  LODWORD(buf[3].__r_.__value_.__r.__words[1]) |= v19 & 3 | (8 * v19) & 0x20;
  *(_OWORD *)&buf[5].__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 64);
  int v20 = *(_DWORD *)(a2 + 88) - 1;
  if (v20 > 5) {
    int v21 = 0;
  }
  else {
    int v21 = dword_101E521AC[v20];
  }
  LODWORD(buf[5].__r_.__value_.__r.__words[2]) = v21;
  HIDWORD(buf[6].__r_.__value_.__r.__words[0]) = sub_1019B6470(v18, *(_DWORD *)(a2 + 92));
  buf[6].__r_.__value_.__s.__data_[8] = *(unsigned char *)(a1 + 7128);
  buf[6].__r_.__value_.__s.__data_[9] = *(unsigned char *)(a2 + 97);
  if ((v19 & 2) != 0) {
    int v22 = 1;
  }
  else {
    int v22 = 2;
  }
  int v23 = *(_DWORD *)(a1 + 8512);
  HIDWORD(buf[6].__r_.__value_.__r.__words[1]) = v22;
  LODWORD(buf[8].__r_.__value_.__l.__data_) = v23;
  buf[10].__r_.__value_.__s.__data_[4] = *(unsigned char *)(a1 + 7160);
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)((char *)__dst + 8) = _Q1;
  *(_OWORD *)((char *)&__dst[1] + 8) = _Q1;
  *(void *)&__dst[0] = 0;
  *((void *)&__dst[2] + 1) = -1;
  LODWORD(__dst[3]) = -1;
  *((void *)&__dst[3] + 1) = 0;
  LOBYTE(__dst[4]) = 0;
  *(int64x2_t *)((char *)&__dst[4] + 8) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)((char *)&__dst[5] + 8) = xmmword_101D2A480;
  *(_OWORD *)((char *)&__dst[6] + 8) = _Q1;
  *((void *)&__dst[7] + 1) = 0xBFF0000000000000;
  *(void *)&__dst[8] = 0;
  DWORD2(__dst[8]) = 2;
  HIDWORD(__dst[9]) = 0;
  LOBYTE(__dst[10]) = 0;
  *(void *)((char *)&__dst[8] + 12) = 0;
  *(void *)((char *)&__dst[9] + 1) = 0;
  *(void *)((char *)&__dst[10] + 4) = 0xFFFFFFFF00000000;
  HIDWORD(__dst[10]) = -1;
  __dst[11] = *(_OWORD *)((char *)&__dst[4] + 8);
  *(void *)&__dst[12] = 0xBFF0000000000000;
  *((void *)&__dst[12] + 1) = 0xFFFFFFFF00000000;
  LODWORD(__dst[13]) = 0;
  WORD2(__dst[13]) = 255;
  DWORD2(__dst[13]) = 1;
  BYTE4(__dst[14]) = 0;
  *(void *)((char *)&__dst[13] + 12) = 0;
  *((void *)&__dst[14] + 1) = 0;
  LOBYTE(__dst[15]) = 0;
  *(_OWORD *)((char *)&__dst[15] + 8) = *(_OWORD *)((char *)&__dst[4] + 8);
  *((void *)&__dst[16] + 1) = 0xBFF0000000000000;
  if (LODWORD(buf[3].__r_.__value_.__r.__words[2]) == 2)
  {
    sub_1017DA618(a1 + 3352, __src);
    memcpy(__dst, __src, sizeof(__dst));
    sub_101810A60((int *)__dst, (uint64_t)"AWD-Summary-Report-Supl");
    if (LOBYTE(__dst[15]) && *((double *)&__dst[16] + 1) > 0.0) {
      DWORD1(v54) = sub_1000F1648((double *)(a1 + 10152), *(double *)&buf[1].__r_.__value_.__l.__data_, *(double *)&buf[1].__r_.__value_.__l.__size_, *((double *)&__dst[15] + 1), *(double *)&__dst[16], 0.0);
    }
    buf[10].__r_.__value_.__s.__data_[4] = 1;
  }
  else if (LODWORD(buf[3].__r_.__value_.__r.__words[2]) == 1)
  {
    sub_1017FA5C0(a1 + 64, __src);
    memcpy(__dst, __src, sizeof(__dst));
    sub_101810A60((int *)__dst, (uint64_t)"AWD-Summary-Report-Cplane");
  }
  LOBYTE(v55) = __dst[13];
  BYTE1(v55) = BYTE2(__dst[13]);
  buf[10].__r_.__value_.__s.__data_[5] = BYTE1(__dst[13]);
  if (BYTE1(__dst[13]))
  {
    *(_OWORD *)&buf[38].__r_.__value_.__l.__data_ = __dst[11];
    buf[10].__r_.__value_.__l.__size_ = *(void *)&__dst[12];
    *(double *)&buf[38].__r_.__value_.__r.__words[2] = (double)SDWORD2(__dst[12]);
  }
  __src[0] = 0.0;
  if (a4)
  {
    __int16 v29 = *(char *)(a3 + 23) >= 0 ? (const char *)a3 : *(const char **)a3;
    if (sub_1004BE590(v29, __src))
    {
      buf[7].__r_.__value_.__s.__data_[2] = 1;
      buf[7].__r_.__value_.__l.__size_ = (unint64_t)(CFAbsoluteTimeGetCurrent() - __src[0]);
    }
  }
  LODWORD(buf[39].__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 8600);
  buf[39].__r_.__value_.__s.__data_[4] = *(unsigned char *)(a1 + 6985);
  sub_1019B6494(a1, buf);
  sub_10192B6A8((uint64_t)buf);
  if (*(unsigned char *)(a1 + 8633) && *(_DWORD *)(a1 + 9920) == *(_DWORD *)(a2 + 120))
  {
    unsigned int v31 = *(_DWORD *)(a1 + 9884);
    HIDWORD(buf[6].__r_.__value_.__r.__words[0]) = sub_1019B655C(v30, v31);
    switch(v31)
    {
      case 0x13u:
        goto LABEL_53;
      case 8u:
        *(std::string::size_type *)((char *)&buf[39].__r_.__value_.__r.__words[1] + 4) = *(void *)(a1 + 10100);
        LODWORD(buf[39].__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 8596);
        break;
      case 5u:
LABEL_53:
        unsigned int v32 = *(_DWORD *)(a1 + 10096);
        if (v32 >= 8) {
          unsigned int v32 = 1;
        }
        LODWORD(buf[39].__r_.__value_.__r.__words[1]) = v32;
        break;
    }
  }
  *(unsigned char *)(a1 + 8633) = 0;
  if (HIDWORD(buf[3].__r_.__value_.__r.__words[2]) == 5 && *(unsigned char *)(a1 + 7232))
  {
    memcpy((void *)(a1 + 8640), buf, 0x3C0uLL);
    std::string::operator=((std::string *)(a1 + 9600), &v48);
    std::string::operator=((std::string *)(a1 + 9624), &v49);
    *(_OWORD *)(a1 + 9728) = v55;
    *(_OWORD *)(a1 + 9744) = v56;
    *(_OWORD *)(a1 + 9760) = v57[0];
    long long v33 = v50;
    *(_OWORD *)(a1 + 9664) = v51;
    *(_OWORD *)(a1 + 9680) = v52;
    *(_OWORD *)(a1 + 9696) = v53;
    *(_OWORD *)(a1 + 9712) = v54;
    *(_OWORD *)(a1 + 9772) = *(_OWORD *)((char *)v57 + 12);
    *(_OWORD *)(a1 + 9648) = v33;
    std::string::operator=((std::string *)(a1 + 9792), &v58);
    std::string::operator=((std::string *)(a1 + 9816), &v59);
    *(_OWORD *)(a1 + 9840) = v60;
    *(_OWORD *)(a1 + 9856) = v61;
    *(void *)(a1 + 9872) = v62;
    *(unsigned char *)(a1 + 8632) = 1;
  }
  else if (*(void *)(a1 + 7120))
  {
    sub_101832D90((uint64_t)v36, (uint64_t)buf);
    uint64_t v34 = *(void *)(a1 + 7120);
    if (!v34) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v34 + 48))(v34, v36);
    if (v44 < 0) {
      operator delete(__p);
    }
    if (v42 < 0) {
      operator delete(v41);
    }
    if (v40 < 0) {
      operator delete(v39);
    }
    if (v38 < 0) {
      operator delete(v37);
    }
    sub_1019B657C(a1);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
}

void sub_1019B3828(_Unwind_Exception *a1)
{
}

void sub_1019B3864(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (*(_DWORD *)(a2 + 92) == 1)
  {
    double v8 = *(double *)(a2 + 8);
    if (v8 >= -180.0 && v8 <= 180.0)
    {
      double v9 = *(double *)a2;
      if (*(double *)a2 >= -90.0 && v9 <= 90.0)
      {
        double v10 = *(double *)(a2 + 24);
        if (v10 > 0.0 && (fabs(v9) >= 0.0000001 || fabs(v8) >= 0.0000001))
        {
          double v11 = *(double *)(a2 + 40);
          LODWORD(__dst[0]) = 40;
          DWORD2(__dst[0]) = (int)v10;
          LODWORD(__dst[2]) = 0;
          DWORD2(__dst[2]) = 42;
          LODWORD(__dst[3]) = (int)v11;
          DWORD2(__dst[4]) = 0;
          memset(__src, 0, 24);
          int v72 = __src;
          LOBYTE(v73) = 0;
          __src[0] = (void **)operator new(0x50uLL);
          __src[1] = __src[0];
          __src[2] = __src[0] + 10;
          __src[1] = (void **)sub_100682A48((uint64_t)&__src[2], (uint64_t)__dst, (uint64_t)&__dst[5], (uint64_t)__src[0]);
          for (uint64_t i = 48; i != -32; i -= 40)
            sub_100118010((uint64_t)__dst + i);
          double v13 = *(void **)(a1 + 10224);
          memset(v77, 0, sizeof(v77));
          sub_100682C20(v77, (uint64_t)__src[0], (uint64_t)__src[1], 0xCCCCCCCCCCCCCCCDLL * (__src[1] - __src[0]));
          [v13 setMeasurements:sub_10067C03C(v77)];
          *(void *)&__dst[0] = v77;
          sub_100682B1C((void ***)__dst);
          *(void *)&__dst[0] = __src;
          sub_100682B1C((void ***)__dst);
        }
      }
    }
    double v14 = *(double *)(a2 + 16);
    if (v14 > -450.0 && v14 < 8850.0)
    {
      double v15 = *(double *)(a2 + 32);
      if (v15 > 0.0)
      {
        float v16 = v14;
        LODWORD(__dst[0]) = 39;
        *((float *)__dst + 2) = v16;
        LODWORD(__dst[2]) = 4;
        DWORD2(__dst[2]) = 41;
        LODWORD(__dst[3]) = (int)v15;
        DWORD2(__dst[4]) = 0;
        memset(__src, 0, 24);
        int v72 = __src;
        LOBYTE(v73) = 0;
        __src[0] = (void **)operator new(0x50uLL);
        __src[1] = __src[0];
        __src[2] = __src[0] + 10;
        __src[1] = (void **)sub_100682A48((uint64_t)&__src[2], (uint64_t)__dst, (uint64_t)&__dst[5], (uint64_t)__src[0]);
        for (uint64_t j = 48; j != -32; j -= 40)
          sub_100118010((uint64_t)__dst + j);
        uint64_t v18 = *(void **)(a1 + 10224);
        memset(v76, 0, sizeof(v76));
        sub_100682C20(v76, (uint64_t)__src[0], (uint64_t)__src[1], 0xCCCCCCCCCCCCCCCDLL * (__src[1] - __src[0]));
        [v18 setMeasurements:sub_10067C03C(v76)];
        *(void *)&__dst[0] = v76;
        sub_100682B1C((void ***)__dst);
        *(void *)&__dst[0] = __src;
        sub_100682B1C((void ***)__dst);
      }
    }
    int v19 = *(_DWORD *)(a2 + 48) & 3 | (32 * ((*(_DWORD *)(a2 + 48) >> 2) & 1));
    LODWORD(__dst[0]) = 43;
    DWORD2(__dst[0]) = v19;
    LODWORD(__dst[2]) = 0;
    memset(__src, 0, 24);
    int v72 = __src;
    LOBYTE(v73) = 0;
    __src[0] = (void **)operator new(0x28uLL);
    __src[1] = __src[0];
    __src[2] = __src[0] + 5;
    __src[1] = (void **)sub_100682A48((uint64_t)&__src[2], (uint64_t)__dst, (uint64_t)&__dst[2] + 8, (uint64_t)__src[0]);
    sub_100118010((uint64_t)__dst + 8);
    int v20 = *(void **)(a1 + 10224);
    memset(v75, 0, sizeof(v75));
    sub_100682C20(v75, (uint64_t)__src[0], (uint64_t)__src[1], 0xCCCCCCCCCCCCCCCDLL * (__src[1] - __src[0]));
    [v20 setMeasurements:sub_10067C03C(v75)];
    *(void *)&__dst[0] = v75;
    sub_100682B1C((void ***)__dst);
    *(void *)&__dst[0] = __src;
    sub_100682B1C((void ***)__dst);
  }
  uint64_t v21 = *(unsigned int *)(a2 + 56);
  sub_100103240();
  uint64_t v22 = sub_10073CCBC();
  if (v22)
  {
    sub_100103240();
    uint64_t v22 = sub_10010145C();
    if ((v22 & 1) == 0)
    {
      if (*(_DWORD *)(a1 + 7000) == 2) {
        uint64_t v21 = 2;
      }
      else {
        uint64_t v21 = 1;
      }
    }
  }
  uint64_t v23 = sub_1019B5F04(v22, *(_DWORD *)(a2 + 52));
  LODWORD(__dst[0]) = 52;
  DWORD2(__dst[0]) = v23;
  LODWORD(__dst[2]) = 0;
  uint64_t v24 = sub_1019B694C(v23, v21);
  DWORD2(__dst[2]) = 51;
  LODWORD(__dst[3]) = v24;
  DWORD2(__dst[4]) = 0;
  uint64_t v25 = sub_1019B6B14(v24, *(_DWORD *)(a2 + 60));
  int v26 = 0;
  double v27 = *(double *)(a2 + 64);
  double v28 = *(double *)(a2 + 72);
  LODWORD(__dst[5]) = 49;
  DWORD2(__dst[5]) = v25;
  LODWORD(__dst[7]) = 0;
  DWORD2(__dst[7]) = 44;
  LODWORD(__dst[8]) = (int)v27;
  DWORD2(__dst[9]) = 0;
  LODWORD(__dst[10]) = 45;
  DWORD2(__dst[10]) = (int)v28;
  LODWORD(__dst[12]) = 0;
  unsigned int v29 = *(_DWORD *)(a2 + 88) - 1;
  if (v29 <= 5) {
    int v26 = dword_101E521AC[v29];
  }
  DWORD2(__dst[12]) = 46;
  LODWORD(__dst[13]) = v26;
  DWORD2(__dst[14]) = 0;
  int v30 = sub_1019B6CE8(v25, *(_DWORD *)(a2 + 92));
  LODWORD(__dst[15]) = 47;
  DWORD2(__dst[15]) = v30;
  int v82 = 0;
  int v31 = *(_DWORD *)(a1 + 8512);
  int v83 = 79;
  int v84 = v31;
  LOBYTE(v31) = *(unsigned char *)(a1 + 6985);
  int v85 = 0;
  int v86 = 83;
  char v87 = v31;
  int v88 = 7;
  uint64_t v73 = 0;
  int v74 = 0;
  int v72 = 0;
  __src[0] = (void **)&v72;
  LOBYTE(__src[1]) = 0;
  int v72 = (void ***)operator new(0x168uLL);
  uint64_t v73 = (uint64_t)v72;
  int v74 = v72 + 45;
  uint64_t v73 = sub_100682A48((uint64_t)&v74, (uint64_t)__dst, (uint64_t)&v89, (uint64_t)v72);
  for (uint64_t k = 328; k != -32; k -= 40)
    sub_100118010((uint64_t)__dst + k);
  long long v33 = *(void **)(a1 + 10224);
  memset(v71, 0, sizeof(v71));
  sub_100682C20(v71, (uint64_t)v72, v73, 0xCCCCCCCCCCCCCCCDLL * ((v73 - (uint64_t)v72) >> 3));
  [v33 setMeasurements:sub_10067C03C(v71)];
  *(void *)&__dst[0] = v71;
  sub_100682B1C((void ***)__dst);
  if (*(_DWORD *)(a2 + 92) == 1)
  {
    if ((*(unsigned char *)(a2 + 48) & 2) != 0)
    {
      LODWORD(__dst[0]) = 63;
      DWORD2(__dst[0]) = 1;
      LODWORD(__dst[2]) = 0;
      memset(__src, 0, 24);
      int v66 = __src;
      LOBYTE(v67) = 0;
      __src[0] = (void **)operator new(0x28uLL);
      __src[1] = __src[0];
      __src[2] = __src[0] + 5;
      __src[1] = (void **)sub_100682A48((uint64_t)&__src[2], (uint64_t)__dst, (uint64_t)&__dst[2] + 8, (uint64_t)__src[0]);
      sub_100118010((uint64_t)__dst + 8);
      uint64_t v36 = *(void **)(a1 + 10224);
      memset(v70, 0, sizeof(v70));
      sub_100682C20(v70, (uint64_t)__src[0], (uint64_t)__src[1], 0xCCCCCCCCCCCCCCCDLL * (__src[1] - __src[0]));
      [v36 setMeasurements:sub_10067C03C(v70)];
      int v35 = v70;
    }
    else
    {
      LODWORD(__dst[0]) = 63;
      DWORD2(__dst[0]) = 2;
      LODWORD(__dst[2]) = 0;
      memset(__src, 0, 24);
      int v66 = __src;
      LOBYTE(v67) = 0;
      __src[0] = (void **)operator new(0x28uLL);
      __src[1] = __src[0];
      __src[2] = __src[0] + 5;
      __src[1] = (void **)sub_100682A48((uint64_t)&__src[2], (uint64_t)__dst, (uint64_t)&__dst[2] + 8, (uint64_t)__src[0]);
      sub_100118010((uint64_t)__dst + 8);
      uint64_t v34 = *(void **)(a1 + 10224);
      memset(v69, 0, sizeof(v69));
      sub_100682C20(v69, (uint64_t)__src[0], (uint64_t)__src[1], 0xCCCCCCCCCCCCCCCDLL * (__src[1] - __src[0]));
      [v34 setMeasurements:sub_10067C03C(v69)];
      int v35 = v69;
    }
    *(void *)&__dst[0] = v35;
    sub_100682B1C((void ***)__dst);
    *(void *)&__dst[0] = __src;
    sub_100682B1C((void ***)__dst);
  }
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)((char *)__dst + 8) = _Q0;
  *(_OWORD *)((char *)&__dst[1] + 8) = _Q0;
  *(void *)&__dst[0] = 0;
  *((void *)&__dst[2] + 1) = -1;
  LODWORD(__dst[3]) = -1;
  *((void *)&__dst[3] + 1) = 0;
  LOBYTE(__dst[4]) = 0;
  *(int64x2_t *)((char *)&__dst[4] + 8) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)((char *)&__dst[5] + 8) = xmmword_101D2A480;
  *(_OWORD *)((char *)&__dst[6] + 8) = _Q0;
  *((void *)&__dst[7] + 1) = 0xBFF0000000000000;
  *(void *)&__dst[8] = 0;
  DWORD2(__dst[8]) = 2;
  HIDWORD(__dst[9]) = 0;
  LOBYTE(__dst[10]) = 0;
  *(void *)((char *)&__dst[8] + 12) = 0;
  *(void *)((char *)&__dst[9] + 1) = 0;
  *(void *)((char *)&__dst[10] + 4) = 0xFFFFFFFF00000000;
  HIDWORD(__dst[10]) = -1;
  __dst[11] = *(_OWORD *)((char *)&__dst[4] + 8);
  *(void *)&__dst[12] = 0xBFF0000000000000;
  *((void *)&__dst[12] + 1) = 0xFFFFFFFF00000000;
  LODWORD(__dst[13]) = 0;
  WORD2(__dst[13]) = 255;
  DWORD2(__dst[13]) = 1;
  BYTE4(__dst[14]) = 0;
  *(void *)((char *)&__dst[13] + 12) = 0;
  *((void *)&__dst[14] + 1) = 0;
  LOBYTE(__dst[15]) = 0;
  *(_OWORD *)((char *)&__dst[15] + 8) = *(_OWORD *)((char *)&__dst[4] + 8);
  *((void *)&__dst[16] + 1) = 0xBFF0000000000000;
  if (v21 == 2)
  {
    sub_1017DA618(a1 + 3352, __src);
    memcpy(__dst, __src, sizeof(__dst));
    char v42 = "Summary-Report-Supl";
  }
  else
  {
    if (v21 != 1) {
      goto LABEL_38;
    }
    sub_1017FA5C0(a1 + 64, __src);
    memcpy(__dst, __src, sizeof(__dst));
    char v42 = "Summary-Report-Cplane";
  }
  sub_101810A60((int *)__dst, (uint64_t)v42);
LABEL_38:
  if (LOBYTE(__dst[13])) {
    int v43 = 1;
  }
  else {
    int v43 = 2;
  }
  LODWORD(__src[0]) = 74;
  LODWORD(__src[1]) = v43;
  if (BYTE1(__dst[13])) {
    int v44 = 1;
  }
  else {
    int v44 = 2;
  }
  LODWORD(__src[4]) = 0;
  LODWORD(__src[5]) = 67;
  LODWORD(__src[6]) = v44;
  LODWORD(__src[9]) = 0;
  if (BYTE2(__dst[13])) {
    int v45 = 1;
  }
  else {
    int v45 = 2;
  }
  LODWORD(__src[10]) = 75;
  LODWORD(__src[11]) = v45;
  LODWORD(__src[14]) = 0;
  uint64_t v67 = 0;
  int v68 = 0;
  int v66 = 0;
  uint64_t v62 = &v66;
  LOBYTE(v63) = 0;
  int v66 = (void ***)operator new(0x78uLL);
  uint64_t v67 = (uint64_t)v66;
  int v68 = v66 + 15;
  uint64_t v67 = sub_100682A48((uint64_t)&v68, (uint64_t)__src, (uint64_t)&__src[15], (uint64_t)v66);
  for (uint64_t m = 11; m != -4; m -= 5)
    sub_100118010((uint64_t)&__src[m]);
  __int16 v47 = *(void **)(a1 + 10224);
  memset(v65, 0, sizeof(v65));
  sub_100682C20(v65, (uint64_t)v66, v67, 0xCCCCCCCCCCCCCCCDLL * ((v67 - (uint64_t)v66) >> 3));
  [v47 setMeasurements:sub_10067C03C(v65)];
  __src[0] = (void **)v65;
  sub_100682B1C(__src);
  if (BYTE1(__dst[13]))
  {
    float v48 = *(double *)&__dst[11];
    *(float *)&__src[1] = v48;
    LODWORD(__src[0]) = 68;
    float v49 = *((double *)&__dst[11] + 1);
    LODWORD(__src[4]) = 4;
    LODWORD(__src[5]) = 69;
    *(float *)&__src[6] = v49;
    LODWORD(__src[9]) = 4;
    LODWORD(__src[10]) = 70;
    LODWORD(__src[11]) = (int)*(double *)&__dst[12];
    LODWORD(__src[14]) = 0;
    LODWORD(__src[15]) = 71;
    LODWORD(__src[16]) = DWORD2(__dst[12]);
    LODWORD(__src[19]) = 0;
    uint64_t v63 = 0;
    int v64 = 0;
    uint64_t v62 = 0;
    int v78 = &v62;
    char v79 = 0;
    uint64_t v62 = (void ****)operator new(0xA0uLL);
    uint64_t v63 = (uint64_t)v62;
    int v64 = v62 + 20;
    uint64_t v63 = sub_100682A48((uint64_t)&v64, (uint64_t)__src, (uint64_t)&__src[20], (uint64_t)v62);
    for (uint64_t n = 16; n != -4; n -= 5)
      sub_100118010((uint64_t)&__src[n]);
    long long v51 = *(void **)(a1 + 10224);
    memset(v61, 0, sizeof(v61));
    sub_100682C20(v61, (uint64_t)v62, v63, 0xCCCCCCCCCCCCCCCDLL * ((v63 - (uint64_t)v62) >> 3));
    [v51 setMeasurements:sub_10067C03C(v61)];
    __src[0] = (void **)v61;
    sub_100682B1C(__src);
    __src[0] = (void **)&v62;
    sub_100682B1C(__src);
  }
  double v60 = 0.0;
  if (a4)
  {
    long long v52 = *(char *)(a3 + 23) >= 0 ? (const char *)a3 : *(const char **)a3;
    if (sub_1004BE590(v52, &v60))
    {
      LODWORD(__src[0]) = 27;
      LODWORD(__src[1]) = 1;
      LODWORD(__src[4]) = 0;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      LODWORD(__src[5]) = 28;
      __src[6] = (void **)(Current - v60);
      LODWORD(__src[9]) = 2;
      uint64_t v63 = 0;
      int v64 = 0;
      uint64_t v62 = 0;
      int v78 = &v62;
      char v79 = 0;
      uint64_t v62 = (void ****)operator new(0x50uLL);
      uint64_t v63 = (uint64_t)v62;
      int v64 = v62 + 10;
      uint64_t v63 = sub_100682A48((uint64_t)&v64, (uint64_t)__src, (uint64_t)&__src[10], (uint64_t)v62);
      for (iuint64_t i = 6; ii != -4; ii -= 5)
        sub_100118010((uint64_t)&__src[ii]);
      long long v55 = *(void **)(a1 + 10224);
      memset(v59, 0, sizeof(v59));
      sub_100682C20(v59, (uint64_t)v62, v63, 0xCCCCCCCCCCCCCCCDLL * ((v63 - (uint64_t)v62) >> 3));
      [v55 setMeasurements:sub_10067C03C(v59)];
      __src[0] = (void **)v59;
      sub_100682B1C(__src);
      __src[0] = (void **)&v62;
      sub_100682B1C(__src);
    }
  }
  long long v56 = *(void **)(a1 + 10224);
  if (byte_10248A8CF < 0)
  {
    sub_1000DC48C(__p, (void *)xmmword_10248A8B8, *((unint64_t *)&xmmword_10248A8B8 + 1));
  }
  else
  {
    *(_OWORD *)long long __p = xmmword_10248A8B8;
    uint64_t v58 = unk_10248A8C8;
  }
  [v56 submitEvent:sub_1007EB0E8((long long *)__p)];
  if (SHIBYTE(v58) < 0) {
    operator delete(__p[0]);
  }
  __src[0] = (void **)&v66;
  sub_100682B1C(__src);
  *(void *)&__dst[0] = &v72;
  sub_100682B1C((void ***)__dst);
}

void sub_1019B44A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  STACK[0x260] = (unint64_t)&a51;
  sub_100682B1C((void ***)&STACK[0x260]);
  _Unwind_Resume(a1);
}

void sub_1019B479C(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 8512);
    *(_DWORD *)uint64_t buf = 67109120;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,CellFTAssistance", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_CellFT1xAssistance(const gnss::Emergency::Cplane::CellFTAssistanceFromModem &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  sub_1017F6F0C(a1 + 64, a2 + 4);
}

id sub_1019B4960(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(_DWORD *)(a1 + 8512);
    *(_DWORD *)uint64_t buf = 67109120;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,suplLocationIdRequestHandler", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::suplLocationIdRequestHandler()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return sub_1017D3530(a1 + 3352);
}

double sub_1019B4B1C(uint64_t a1, __int16 *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 8512);
    *(_DWORD *)uint64_t buf = 67109120;
    int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,#wlan,suplWlanMeasRequestHandler", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::suplWlanMeasRequestHandler(const gnss::Emergency::Supl::WlanMeasurementRequest &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  *(void *)&double result = sub_1017DACC8(a1 + 3352, a2).n128_u64[0];
  return result;
}

void sub_1019B4CE0(uint64_t a1, int a2, uint64_t *a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(_DWORD *)(a1 + 8512);
    *(_DWORD *)uint64_t buf = 67109376;
    int v10 = v7;
    __int16 v11 = 1024;
    int v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,#supl,dispatch_decodedSuplInit,index,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::dispatch_decodedSuplInit(gnss::Emergency::Supl::SuplInitIndex, const gnss::Emergency::Supl::Init &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_1017D2ECC(a1 + 3352, a2, a3);
}

__n128 sub_1019B4ECC(uint64_t a1, _OWORD *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 8512);
    *(_DWORD *)uint64_t buf = 67109120;
    int v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,updateSessionStatus", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v11 = *(_DWORD *)(a1 + 8512);
    int v14 = 67109120;
    int v15 = v11;
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::updateSessionStatus(const gnss::Emergency::Supl::SessionStatus)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  long long v6 = a2[7];
  v13[6] = a2[6];
  v13[7] = v6;
  v13[8] = a2[8];
  long long v7 = a2[3];
  _DWORD v13[2] = a2[2];
  v13[3] = v7;
  long long v8 = a2[5];
  void v13[4] = a2[4];
  _OWORD v13[5] = v8;
  long long v9 = a2[1];
  v13[0] = *a2;
  v13[1] = v9;
  sub_1017D9A00(a1 + 3352, (uint64_t)v13);
  return result;
}

void sub_1019B50B8(uint64_t a1, int *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 8512);
    int v6 = *a2;
    int v7 = a2[1];
    int v8 = *(unsigned __int8 *)(a1 + 6984);
    *(_DWORD *)uint64_t buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = v5;
    __int16 v13 = 1024;
    int v14 = v6;
    __int16 v15 = 1024;
    int v16 = v7;
    __int16 v17 = 1024;
    int v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#nict,CplaneStatus,status,%d,result,%d,IsConformanceMode,%d", buf, 0x1Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_CplaneStatus(const CLNilrTypes::SessionStatus &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  sub_100103240();
  if (sub_10073CCBC())
  {
    if (*(_DWORD *)(a1 + 7000) == 2) {
      long long v9 = "Supl";
    }
    else {
      long long v9 = "Cplane";
    }
    sub_100134750(buf, v9);
    if ((v18 & 0x8000) == 0) {
      int v10 = buf;
    }
    else {
      int v10 = *(uint8_t **)buf;
    }
    sub_101810A60(a2, (uint64_t)v10);
    if (SBYTE1(v18) < 0) {
      operator delete(*(void **)buf);
    }
  }
  else
  {
    sub_101810A60(a2, (uint64_t)"Cplane");
  }
  switch(*a2)
  {
    case 0:
      sub_1019ABB54(a1, (uint64_t)a2);
      break;
    case 1:
      *(_DWORD *)(a1 + 7080) |= 0x100u;
      break;
    case 2:
      if (a2[34]) {
        *(_DWORD *)(a1 + 7080) |= 0x10u;
      }
      *(void *)(a1 + 7008) = a2;
      sub_1019ADB94(a1 + 6856, 7);
      *(void *)(a1 + 7008) = 0;
      break;
    case 3:
      sub_1019AB7D4(a1, (uint64_t)a2);
      break;
    default:
      return;
  }
}

void sub_1019B53B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1019B53EC(uint64_t a1, double *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 8512);
    int v6 = *(_DWORD *)a2;
    int v7 = *((_DWORD *)a2 + 1);
    *(_DWORD *)uint64_t buf = 67109632;
    int v10 = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#nict,CplaneWlanStatus,status,%d,result,%d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_CplaneWlanStatus(const CLNilrTypes::WlanSessionStatus &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_10181115C(a2, (uint64_t)"Cplane,AWD");
  if (*(_DWORD *)a2 == 3) {
    sub_1019ABCF8(a1);
  }
}

void sub_1019B55FC(uint64_t a1, int *a2)
{
  double v4 = (unsigned __int8 *)(a1 + 6984);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *a2;
    int v7 = a2[1];
    int v8 = *v4;
    *(_DWORD *)uint64_t buf = 67109632;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#nilr,#nict,SuplStatus,status,%d,result,%d,IsConformanceMode,%d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_SuplStatus(const CLNilrTypes::SessionStatus &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (v4[146])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    long long v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,#nilr,#nict,Ignoring Supl Status due to NILR lock out", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      __int16 v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_SuplStatus(const CLNilrTypes::SessionStatus &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  else
  {
    sub_101810A60(a2, (uint64_t)"Supl");
    switch(*a2)
    {
      case 0:
        sub_1019AC1EC(a1, (uint64_t)a2);
        break;
      case 1:
        sub_1019ADB94(a1 + 6856, 8);
        break;
      case 2:
        *(_DWORD *)(a1 + 7080) |= 0x10u;
        *(void *)(a1 + 7088) = a2;
        sub_1019ADB94(a1 + 6856, 9);
        *(void *)(a1 + 7088) = 0;
        break;
      case 3:
        sub_1019AB7D4(a1, (uint64_t)a2);
        break;
      default:
        return;
    }
  }
}

void sub_1019B59CC(uint64_t a1, double *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 8512);
    int v6 = *(_DWORD *)a2;
    int v7 = *((_DWORD *)a2 + 1);
    *(_DWORD *)uint64_t buf = 67109632;
    int v10 = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#nict,SuplWlanStatus,status,%d,result,%d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::process_SuplWlanStatus(const CLNilrTypes::WlanSessionStatus &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_10181115C(a2, (uint64_t)"Supl,AWD");
  if (*(_DWORD *)a2 == 3) {
    sub_1019ABCF8(a1);
  }
}

void sub_1019B5BDC(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#nict,convertSessionStatusToNiReport", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    __int16 v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::convertSessionStatusToNiReport(const CLNilrTypes::SessionStatus &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  *(_OWORD *)(a1 + 7024) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 7040) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 7056) = *(void *)(a2 + 88);
  double v5 = sqrt(*(double *)(a2 + 112) * *(double *)(a2 + 112) + *(double *)(a2 + 104) * *(double *)(a2 + 104));
  if (*(_DWORD *)(a2 + 128) != 68) {
    double v5 = v5 * 0.408163265;
  }
  if (*(unsigned __int8 *)(a2 + 152) >= 0x28u) {
    double v5 = v5 + v5;
  }
  *(double *)(a1 + 7064) = v5;
  if (*(unsigned char *)(a2 + 208)) {
    *(_DWORD *)(a1 + 7080) |= 1u;
  }
  if (*(unsigned char *)(a2 + 209)) {
    *(_DWORD *)(a1 + 7080) |= 2u;
  }
  if (*(unsigned char *)(a2 + 210)) {
    *(_DWORD *)(a1 + 7080) |= 4u;
  }
  int v6 = *(_DWORD *)(a2 + 4);
  if (v6 == 5)
  {
    int v7 = 128;
  }
  else if (v6 == 3)
  {
    int v7 = 8;
  }
  else
  {
    if (v6 != 1 || v5 > *(double *)(a2 + 56)) {
      goto LABEL_24;
    }
    int v7 = 32;
  }
  *(_DWORD *)(a1 + 7080) |= v7;
LABEL_24:
  if (!*(unsigned char *)(a1 + 6824)) {
    return;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 6136);
  if (v8 < 3) {
    goto LABEL_28;
  }
  if (v8 == 9)
  {
    *(_DWORD *)(a1 + 7072) = *(_DWORD *)sub_1006E744C(a1 + 6128);
    uint64_t v9 = sub_1006E744C(a1 + 6128);
    goto LABEL_29;
  }
  if (v8 == 7)
  {
LABEL_28:
    *(_DWORD *)(a1 + 7072) = *(_DWORD *)sub_1006E6690(a1 + 6128);
    uint64_t v9 = sub_1006E6690(a1 + 6128);
LABEL_29:
    int v10 = (_DWORD *)(v9 + 4);
LABEL_30:
    *(_DWORD *)(a1 + 7076) = *v10;
    return;
  }
  if (v8 - 3 <= 2)
  {
    *(_DWORD *)(a1 + 7072) = *(_DWORD *)(sub_1006E58D4(a1 + 6128) + 32);
    int v10 = (_DWORD *)(sub_1006E58D4(a1 + 6128) + 36);
    goto LABEL_30;
  }
  if (v8 == 6)
  {
    *(_DWORD *)(a1 + 7072) = *(_DWORD *)sub_100117098(a1 + 6128);
    uint64_t v9 = sub_100117098(a1 + 6128);
    goto LABEL_29;
  }
}

uint64_t sub_1019B5F04(uint64_t a1, unsigned int a2)
{
  if (a2 < 0xF) {
    return *(unsigned int *)&asc_101E52170[4 * a2];
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    unsigned int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value,%{public}d", buf, 8u);
  }
  BOOL v5 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "Emergency::PositionMethod CLNilrController::convertEmergencySessionMethod(gnss::Emergency::PositionMethod)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1019B60D4(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  if (a2 < 3) {
    return a2;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    int v8 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value,%{public}d", buf, 8u);
  }
  BOOL v5 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "Emergency::PositionSession CLNilrController::convertEmergencySessionType(gnss::Emergency::PositionSession)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1019B629C(uint64_t a1, int a2)
{
  if ((a2 - 1) < 4) {
    return dword_101E50E00[a2 - 1];
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value PositionProtocol,%{public}d", buf, 8u);
  }
  BOOL v5 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "Emergency::PositionProtocol CLNilrController::convertEmergencyProtocol(gnss::Emergency::PositionProtocol)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1019B6470(uint64_t a1, int a2)
{
  if ((a2 - 1) > 0xF) {
    return 26;
  }
  else {
    return dword_101E521C4[a2 - 1];
  }
}

std::string *sub_1019B6494(uint64_t a1, std::string *a2)
{
  a2[42].__r_.__value_.__s.__data_[8] = *(unsigned char *)(a1 + 7183);
  a2[42].__r_.__value_.__s.__data_[9] = *(unsigned char *)(a1 + 7232);
  if (*(_DWORD *)(a1 + 7216)) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = *(_DWORD *)(a1 + 7264) != 0;
  }
  a2[44].__r_.__value_.__s.__data_[12] = v4;
  if (*(_DWORD *)(a1 + 7228)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = *(_DWORD *)(a1 + 7276) != 0;
  }
  a2[44].__r_.__value_.__s.__data_[13] = v5;
  if (*(_DWORD *)(a1 + 7224)) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = *(_DWORD *)(a1 + 7272) != 0;
  }
  a2[44].__r_.__value_.__s.__data_[14] = v6;
  std::string::operator=(a2 + 40, (const std::string *)(a1 + 8416));

  return std::string::operator=(a2 + 41, (const std::string *)(a1 + 8440));
}

uint64_t sub_1019B655C(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x1A) {
    return 26;
  }
  else {
    return dword_101E52204[a2];
  }
}

double sub_1019B657C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 8512);
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ins%d,#nilr,#nict,resetStateData", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    __int16 v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::resetStateData()", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  *(_DWORD *)(a1 + 8600) = 0;
  bzero(buf, 0x4D8uLL);
  sub_10084CBBC((uint64_t)buf);
  memcpy((void *)(a1 + 8640), buf, 0x3C0uLL);
  BOOL v4 = (void **)(a1 + 9600);
  if (*(char *)(a1 + 9623) < 0) {
    operator delete(*v4);
  }
  *(_OWORD *)BOOL v4 = v13;
  *(void *)(a1 + 9616) = v14;
  HIBYTE(v14) = 0;
  LOBYTE(v13) = 0;
  BOOL v5 = (void **)(a1 + 9624);
  if (*(char *)(a1 + 9647) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v15;
  *(_OWORD *)(a1 + 9728) = v22;
  *(_OWORD *)(a1 + 9744) = v23;
  *(_OWORD *)(a1 + 9760) = v24[0];
  long long v6 = v17;
  *(_OWORD *)(a1 + 9664) = v18;
  *(_OWORD *)(a1 + 9680) = v19;
  *(_OWORD *)(a1 + 9696) = v20;
  *(_OWORD *)(a1 + 9712) = v21;
  *(void *)(a1 + 9640) = v16;
  HIBYTE(v16) = 0;
  LOBYTE(v15) = 0;
  *(_OWORD *)(a1 + 9648) = v6;
  *(_OWORD *)(a1 + 9772) = *(_OWORD *)((char *)v24 + 12);
  int v7 = (void **)(a1 + 9792);
  if (*(char *)(a1 + 9815) < 0) {
    operator delete(*v7);
  }
  *(_OWORD *)int v7 = __p;
  *(void *)(a1 + 9808) = v26;
  HIBYTE(v26) = 0;
  LOBYTE(__p) = 0;
  int v8 = (_OWORD *)(a1 + 9816);
  if (*(char *)(a1 + 9839) < 0)
  {
    operator delete(*(void **)(a1 + 9816));
    int v9 = SHIBYTE(v26);
    *int v8 = v27;
    *(void *)(a1 + 9832) = v28;
    HIBYTE(v28) = 0;
    LOBYTE(v27) = 0;
    *(_OWORD *)(a1 + 9840) = v29;
    *(_OWORD *)(a1 + 9856) = v30;
    *(void *)(a1 + 9872) = v31;
    if (v9 < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
    *(void *)(a1 + 9832) = v28;
    *int v8 = v27;
    HIBYTE(v28) = 0;
    LOBYTE(v27) = 0;
    *(_OWORD *)(a1 + 9840) = v29;
    *(_OWORD *)(a1 + 9856) = v30;
    *(void *)(a1 + 9872) = v31;
  }
  if (SHIBYTE(v16) < 0) {
    operator delete((void *)v15);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)v13);
  }
  *(unsigned char *)(a1 + 8604) = 0;
  *(int64x2_t *)(a1 + 8608) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 8624) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 8632) = 0;
  *(unsigned char *)(a1 + 10192) = 0;
  *(_DWORD *)(a1 + 10196) = 0;
  return sub_1017D5A6C(a1 + 9880);
}

uint64_t sub_1019B694C(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  if (a2 < 3) {
    return a2;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  BOOL v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    int v8 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value,%{public}d", buf, 8u);
  }
  BOOL v5 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "Emergency::NILRSessionType CLNilrController::convertNILRSessionType(gnss::Emergency::PositionSession)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1019B6B14(uint64_t a1, int a2)
{
  if ((a2 - 1) < 5) {
    return dword_101E522C4[a2 - 1];
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  BOOL v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value PositionProtocol,%{public}d", buf, 8u);
  }
  BOOL v5 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "Emergency::NILRPositionProtocol CLNilrController::convertNILRProtocol(gnss::Emergency::PositionProtocol)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1019B6CE8(uint64_t a1, int a2)
{
  if ((a2 - 1) > 0xF) {
    return 0;
  }
  else {
    return dword_101E52270[a2 - 1];
  }
}

uint64_t sub_1019B6D0C(uint64_t a1, unsigned int a2)
{
  if (a2 < 3) {
    return a2 + 1;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  BOOL v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    unsigned int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value,%{public}d", buf, 8u);
  }
  BOOL v5 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "Emergency::PositionMethod CLNilrController::convertEmergencySessionMethod(gnss::Emergency::Cplane::MethodType)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1019B6ED4(uint64_t a1, unsigned int a2)
{
  if (a2 < 4) {
    return dword_101E50E10[a2];
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  BOOL v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    unsigned int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value,%{public}d", buf, 8u);
  }
  BOOL v5 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "Emergency::PositionSession CLNilrController::convertEmergencySessionType(gnss::Emergency::Cplane::SessionProtocol)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1019B70A4(uint64_t a1, unsigned int a2)
{
  if (a2 < 5) {
    return dword_101E522B0[a2];
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  BOOL v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    unsigned int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value PosProtocol,%{public}d", buf, 8u);
  }
  BOOL v5 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "Emergency::PositionProtocol CLNilrController::convertEmergencyProtocol(gnss::Emergency::Cplane::PosProtocol)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1019B7274(uint64_t a1, unsigned int a2)
{
  if (a2 < 5) {
    return dword_101E522C4[a2];
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  BOOL v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    unsigned int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value PosProtocol,%{public}d", buf, 8u);
  }
  BOOL v5 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "Emergency::NILRPositionProtocol CLNilrController::convertEmergencyProtocolToNilrPosProtocol(gnss::Emergency::Cplane::PosProtocol)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    return 0;
  }
  return result;
}

void *sub_1019B7444@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 3) {
    int v2 = "StateUnknown";
  }
  else {
    int v2 = (&off_102349E80)[a1];
  }
  return sub_100134750(a2, v2);
}

double sub_1019B7470(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(_DWORD *)(a1 + 8512);
    *(_DWORD *)uint64_t buf = 67109120;
    int v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,Resetting control plane status records", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::resetControlPlaneStatus()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 7024) = _Q0;
  *(void *)(a1 + 7040) = 0;
  *(void *)(a1 + 7056) = 0;
  *(void *)(a1 + 7048) = 0;
  *(void *)(a1 + 7064) = 0xBFF0000000000000;
  double result = NAN;
  *(void *)(a1 + 7072) = -1;
  *(_DWORD *)(a1 + 7080) = 0;
  return result;
}

__n128 sub_1019B764C(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  BOOL v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 8512);
    uint64_t v6 = *(void *)(a1 + 7024);
    uint64_t v7 = *(void *)(a1 + 7032);
    uint64_t v8 = *(void *)(a1 + 7040);
    uint64_t v9 = *(void *)(a1 + 7048);
    uint64_t v10 = *(void *)(a1 + 7056);
    uint64_t v11 = *(void *)(a1 + 7064);
    int v12 = *(_DWORD *)(a1 + 7080);
    *(_DWORD *)uint64_t buf = 67110913;
    int v19 = v5;
    __int16 v20 = 2050;
    uint64_t v21 = v6;
    __int16 v22 = 2050;
    uint64_t v23 = v7;
    __int16 v24 = 2049;
    uint64_t v25 = v8;
    __int16 v26 = 2049;
    uint64_t v27 = v9;
    __int16 v28 = 2049;
    uint64_t v29 = v10;
    __int16 v30 = 2050;
    uint64_t v31 = v11;
    __int16 v32 = 1026;
    int v33 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,getControlPlaneStatusReport,%{public}0.2f,end,%{public}0.2f,lat,%{private}f,lon,%{private}f,alt,%{private}0.2f,accuracy,%{public}0.2f,statusMask,0x%{public}04x", buf, 0x4Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    long long v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::getControlPlaneStatusReport(CLGnssControlPlaneStatusReport &)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  __n128 result = *(__n128 *)(a1 + 7068);
  long long v14 = *(_OWORD *)(a1 + 7024);
  long long v15 = *(_OWORD *)(a1 + 7040);
  long long v16 = *(_OWORD *)(a1 + 7056);
  *(__n128 *)(a2 + 44) = result;
  *(_OWORD *)(a2 + 16) = v15;
  *(_OWORD *)(a2 + 32) = v16;
  *(_OWORD *)a2 = v14;
  return result;
}

_DWORD *sub_1019B78EC(_DWORD *result, int *a2)
{
  *a2 = 0;
  if (result[1799] && result[1811])
  {
    int v2 = 0;
  }
  else
  {
    int v2 = 2;
    *a2 = 2;
  }
  if (!result[1801] || !result[1813])
  {
    v2 |= 0x10u;
    *a2 = v2;
  }
  if (!result[1800] || !result[1812])
  {
    v2 |= 8u;
    *a2 = v2;
  }
  if (!result[1803] || !result[1815]) {
    *a2 = v2 | 4;
  }
  return result;
}

uint64_t sub_1019B7960(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8528) = *(_DWORD *)a2;
  if (a1 + 8528 != a2) {
    sub_1019B8238((char *)(a1 + 8536), *(char **)(a2 + 8), *(void *)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2));
  }

  return sub_1019ADB94(a1 + 6856, 13);
}

uint64_t sub_1019B79DC(_DWORD *a1)
{
  uint64_t v2 = sub_1000A6958();
  (*(void (**)(uint64_t))(*(void *)v2 + 936))(v2);
  sub_1000E9354();
  uint64_t v3 = sub_1000A6958();
  if (byte_102489207 >= 0) {
    BOOL v4 = (const char *)&qword_1024891F0;
  }
  else {
    BOOL v4 = (const char *)qword_1024891F0;
  }
  if (sub_100012960(v3, v4, v25))
  {
    if (byte_10248921F >= 0) {
      int v5 = (const char *)&qword_102489208;
    }
    else {
      int v5 = (const char *)qword_102489208;
    }
    uint64_t v6 = (uint64_t *)(a1 + 2552);
    sub_1000A699C((uint64_t)v25, v5, a1 + 2552);
    if (byte_102489237 >= 0) {
      uint64_t v7 = (const char *)&qword_102489220;
    }
    else {
      uint64_t v7 = (const char *)qword_102489220;
    }
    uint64_t v8 = a1 + 2551;
    sub_10006EF84((uint64_t)v25, v7, a1 + 2551);
    if (byte_10248924F >= 0) {
      uint64_t v9 = (const char *)&qword_102489238;
    }
    else {
      uint64_t v9 = (const char *)qword_102489238;
    }
    uint64_t v10 = (uint64_t *)(a1 + 2554);
    sub_1000A699C((uint64_t)v25, v9, a1 + 2554);
    if (byte_102489267 >= 0) {
      uint64_t v11 = (const char *)&qword_102489250;
    }
    else {
      uint64_t v11 = (const char *)qword_102489250;
    }
    int v12 = a1 + 2550;
    sub_10006EF84((uint64_t)v25, v11, v12);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    long long v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *v6;
      int v15 = *v8;
      uint64_t v16 = *v10;
      int v17 = *v12;
      *(_DWORD *)uint64_t buf = 134218752;
      uint64_t v35 = v14;
      __int16 v36 = 1024;
      int v37 = v15;
      __int16 v38 = 2048;
      uint64_t v39 = v16;
      __int16 v40 = 1024;
      int v41 = v17;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#abc,loadCachedAbcInfo,supl ABC trigger time,%f,non-emergnecy NILR supl request count,%d,cplane ABC trigger time,%f,non-emergnecy NILR cplane request count,%d", buf, 0x22u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349958);
      }
      uint64_t v18 = *v6;
      int v19 = *v8;
      uint64_t v20 = *v10;
      int v21 = *v12;
      int v26 = 134218752;
      uint64_t v27 = v18;
      __int16 v28 = 1024;
      int v29 = v19;
      __int16 v30 = 2048;
      uint64_t v31 = v20;
      __int16 v32 = 1024;
      int v33 = v21;
      __int16 v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::loadCachedAbcInfo()", "%s\n", v22);
LABEL_34:
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1023499B8);
    }
    uint64_t v23 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#abc,loadCachedAbcSuplInfo,no cached ABC info available", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1023499B8);
      }
      LOWORD(v26) = 0;
      __int16 v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::loadCachedAbcInfo()", "%s\n", v22);
      goto LABEL_34;
    }
  }
  return sub_10013F3C4(v25);
}

void sub_1019B7E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1019B7E60(uint64_t a1)
{
  sub_1000E9354();
  if (byte_10248921F >= 0) {
    uint64_t v2 = (const char *)&qword_102489208;
  }
  else {
    uint64_t v2 = (const char *)qword_102489208;
  }
  uint64_t v3 = (uint64_t *)(a1 + 10208);
  sub_10016332C((uint64_t)v24, v2, (const void *)(a1 + 10208));
  if (byte_102489237 >= 0) {
    BOOL v4 = (const char *)&qword_102489220;
  }
  else {
    BOOL v4 = (const char *)qword_102489220;
  }
  int v5 = (int *)(a1 + 10204);
  sub_1000EA838((uint64_t)v24, v4, (const void *)(a1 + 10204));
  if (byte_10248924F >= 0) {
    uint64_t v6 = (const char *)&qword_102489238;
  }
  else {
    uint64_t v6 = (const char *)qword_102489238;
  }
  uint64_t v7 = (uint64_t *)(a1 + 10216);
  sub_10016332C((uint64_t)v24, v6, (const void *)(a1 + 10216));
  if (byte_102489267 >= 0) {
    uint64_t v8 = (const char *)&qword_102489250;
  }
  else {
    uint64_t v8 = (const char *)qword_102489250;
  }
  uint64_t v9 = (int *)(a1 + 10200);
  sub_1000EA838((uint64_t)v24, v8, v9);
  uint64_t v10 = sub_1000A6958();
  if (byte_102489207 >= 0) {
    uint64_t v11 = (const char *)&qword_1024891F0;
  }
  else {
    uint64_t v11 = (const char *)qword_1024891F0;
  }
  sub_1004D3878(v10, v11, (uint64_t)v24);
  uint64_t v12 = sub_1000A6958();
  (*(void (**)(uint64_t))(*(void *)v12 + 944))(v12);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  long long v13 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *v3;
    int v15 = *v5;
    uint64_t v16 = *v7;
    int v17 = *v9;
    *(_DWORD *)uint64_t buf = 134218752;
    uint64_t v34 = v14;
    __int16 v35 = 1024;
    int v36 = v15;
    __int16 v37 = 2048;
    uint64_t v38 = v16;
    __int16 v39 = 1024;
    int v40 = v17;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#abc,writeCachedAbcInfo,supl ABC trigger time,%f,non-emergnecy NILR supl request count,%d,cplane ABC trigger time,%f,non-emergnecy NILR cplane request count,%d", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    uint64_t v19 = *v3;
    int v20 = *v5;
    uint64_t v21 = *v7;
    int v22 = *v9;
    int v25 = 134218752;
    uint64_t v26 = v19;
    __int16 v27 = 1024;
    int v28 = v20;
    __int16 v29 = 2048;
    uint64_t v30 = v21;
    __int16 v31 = 1024;
    int v32 = v22;
    uint64_t v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNilrController::writeCachedAbcInfo()", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
  return sub_10013F3C4(v24);
}

void sub_1019B8188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_1019B81A8(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1019B81D8(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_1019B8208(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

char *sub_1019B8238(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      _DWORD v7[2] = 0;
    }
    if (a4 > 0x1555555555555555) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x1555555555555555;
    }
    else {
      unint64_t v12 = v11;
    }
    __n128 result = sub_100CA7AA0(v7, v12);
    uint64_t v14 = (char *)v7[1];
    long long v13 = (void **)(v7 + 1);
    uint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  long long v13 = (void **)(result + 8);
  int v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 2) >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v15 - v9);
    uint64_t v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *long long v13 = &v9[v17];
  return result;
}

void sub_1019B8374(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_1019B83A8()
{
}

void *sub_1019B83BC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1023499E8;
  result[1] = v3;
  return result;
}

uint64_t sub_1019B8404(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023499E8;
  a2[1] = v2;
  return result;
}

void sub_1019B8430(uint64_t a1, int *a2)
{
}

uint64_t sub_1019B8438(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1019B8478()
{
}

void sub_1019B8488()
{
}

void *sub_1019B849C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_102349A78;
  result[1] = v3;
  return result;
}

uint64_t sub_1019B84E4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102349A78;
  a2[1] = v2;
  return result;
}

void sub_1019B8510(uint64_t a1, double *a2)
{
}

uint64_t sub_1019B8518(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1019B8558()
{
}

void sub_1019B8568()
{
}

void *sub_1019B857C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_102349B08;
  result[1] = v3;
  return result;
}

uint64_t sub_1019B85C4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102349B08;
  a2[1] = v2;
  return result;
}

void sub_1019B85F0(uint64_t a1, int *a2)
{
}

uint64_t sub_1019B85F8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1019B8638()
{
}

void sub_1019B8648()
{
}

void *sub_1019B865C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_102349B88;
  result[1] = v3;
  return result;
}

uint64_t sub_1019B86A4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102349B88;
  a2[1] = v2;
  return result;
}

void sub_1019B86D0(uint64_t a1, double *a2)
{
}

uint64_t sub_1019B86D8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1019B8718()
{
}

void sub_1019B8728()
{
}

void *sub_1019B873C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_102349C08;
  result[1] = v3;
  return result;
}

uint64_t sub_1019B8784(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102349C08;
  a2[1] = v2;
  return result;
}

uint64_t sub_1019B87B0(uint64_t a1, unsigned __int8 *a2)
{
  return sub_1019AF84C(*(void *)(a1 + 8), *a2);
}

uint64_t sub_1019B87BC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1019B87FC()
{
}

void sub_1019B880C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1019B8848(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1019B888C(uint64_t a1, const void **a2, void *a3)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *a3;
  uint64_t v5 = a3[1];
  *(void *)(a1 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  uint64_t v6 = (void **)(a1 + 96);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 2;
  if (*((char *)a2 + 23) < 0)
  {
    if (a2[1]) {
      goto LABEL_5;
    }
LABEL_20:
    sub_1019B9ED0();
    uint64_t result = abort_report_np();
    __break(1u);
    return result;
  }
  if (!*((unsigned char *)a2 + 23)) {
    goto LABEL_20;
  }
LABEL_5:
  if (*((char *)a2 + 23) >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  sub_1001110E4((uint64_t)&v11, v7 + 1);
  if (v12 >= 0) {
    uint64_t v8 = &v11;
  }
  else {
    uint64_t v8 = (long long *)v11;
  }
  if (v7)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *a2;
    }
    memmove(v8, v9, v7);
  }
  *(_WORD *)((char *)v8 + v7) = 44;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = v11;
  *(void *)(a1 + 112) = v12;
  return a1;
}

void sub_1019B8A00(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  sub_1000F5BB0(v3, *(void **)(v1 + 64));
  size_t v7 = *(std::__shared_weak_count **)(v1 + 40);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  sub_1000F5BB0(v2, *v4);
  _Unwind_Resume(a1);
}

uint64_t sub_1019B8A44(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  sub_1019B8AB4(*(void **)(a1 + 56), (void *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  sub_1000F5BB0(v2, *(void **)(a1 + 64));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000F5BB0(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

uint64_t sub_1019B8AB4(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      sub_1019ACE7C(a3, *((_DWORD *)v5 + 8));
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          size_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          size_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_1019B8B34(uint64_t a1)
{
  *(void *)a1 = off_102349CE8;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void sub_1019B8B94(uint64_t a1)
{
  *(void *)a1 = off_102349CE8;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  operator delete();
}

void *sub_1019B8C14(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x60uLL);
  *uint64_t v2 = off_102349CE8;
  sub_1019B8FEC((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1019B8C68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1019B8C7C(uint64_t a1, void *a2)
{
  *a2 = off_102349CE8;
  return sub_1019B8FEC((uint64_t)(a2 + 1), a1 + 8);
}

void sub_1019B8CA8(uint64_t a1)
{
}

void sub_1019B8CB0(void *a1)
{
  sub_1019B90BC((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_1019B8CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  uint64_t v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a1 + 64);
    int v7 = *(_DWORD *)(v4 + 8512);
    int v8 = *(unsigned __int8 *)(a1 + 48);
    int v9 = *(unsigned __int8 *)(a1 + 16);
    int v10 = *(unsigned __int16 *)(a1 + 56);
    if (*(char *)(a1 + 87) >= 0) {
      uint64_t v6 = a1 + 64;
    }
    int v11 = *(unsigned __int8 *)(a1 + 88);
    int v12 = *(unsigned __int8 *)(a1 + 89);
    int v13 = *(unsigned __int8 *)(a1 + 90);
    *(_DWORD *)uint64_t buf = 67110914;
    int v17 = v7;
    __int16 v18 = 1024;
    int v19 = v8;
    __int16 v20 = 1024;
    int v21 = v9;
    __int16 v22 = 1024;
    int v23 = v10;
    __int16 v24 = 2080;
    uint64_t v25 = v6;
    __int16 v26 = 1024;
    int v27 = v11;
    __int16 v28 = 1024;
    int v29 = v12;
    __int16 v30 = 1024;
    int v31 = v13;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#ins%d,#nilr,#nict,earlyReturn,%d,HELO,%d,suplPort,%d,suplServer,%s,enableMSA,%d,enableLPPRel13,%d,enableRssi,%d", buf, 0x36u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
    int v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLNilrController::sendEmergencyConfig()::(anonymous class)::operator()(CLGnssDaemonDevice &) const", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  uint64_t result = sub_10194C094(a2, a1 + 16);
  *(unsigned char *)(v4 + 7128) = *(unsigned char *)(a1 + 16);
  return result;
}

uint64_t sub_1019B8FA0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1019B8FE0()
{
}

uint64_t sub_1019B8FEC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 16), *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v4;
  }
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  uint64_t v5 = (unsigned char *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_1000DC48C(v5, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)uint64_t v5 = v6;
  }
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

void sub_1019B90A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1019B90BC(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 39) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 16);
    operator delete(v2);
  }
}

uint64_t sub_1019B9114(uint64_t a1)
{
  return sub_1019ADB94(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_1019B9128()
{
}

void *sub_1019B913C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_102349D68;
  return result;
}

void sub_1019B9174(uint64_t a1, void *a2)
{
  *a2 = off_102349D68;
}

uint64_t *sub_1019B919C(uint64_t a1, uint64_t a2)
{
  return sub_10195F53C(a2);
}

uint64_t sub_1019B91A4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1019B91E4()
{
}

void sub_1019B91F0()
{
  sub_100857C1C();
  if (!v1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  if (sub_100857B88())
  {
    sub_1001DB2F0();
    sub_1003252B0((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"#nilr,#nict,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v17[0]);
    if (*(void *)(v0 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
  }
  if (sub_100857BC4())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v8, v9, v10, "#nilr,#nict,Assertion failed", "{\"msg%{public}.0s\":\"#nilr,#nict,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17);
    if (*(void *)(v0 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
  }
  if (sub_100857BA8())
  {
    sub_1001DB2F0();
    sub_1003252D0((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"#nilr,#nict,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17[0]);
  }
}

#error "1019B93CC: call analysis failed (funcsize=76)"

#error "1019B9544: call analysis failed (funcsize=72)"

#error "1019B96B0: call analysis failed (funcsize=72)"

#error "1019B9820: call analysis failed (funcsize=76)"

#error "1019B9998: call analysis failed (funcsize=72)"

#error "1019B9B04: call analysis failed (funcsize=72)"

#error "1019B9C70: call analysis failed (funcsize=72)"

#error "1019B9DDC: call analysis failed (funcsize=72)"

void sub_1019B9ED0()
{
  sub_100857C1C();
  if (!v1) {
    dispatch_once(&qword_1024193D0, &stru_102349958);
  }
  if (sub_100857B88())
  {
    sub_1001DB2F0();
    sub_1003252B0((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v17[0]);
    if (*(void *)(v0 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
  }
  if (sub_100857BC4())
  {
    sub_1001DB2F0();
    sub_1001DB2C8((void *)&_mh_execute_header, v8, v9, v10, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v17);
    if (*(void *)(v0 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349958);
    }
  }
  if (sub_100857BA8())
  {
    sub_1001DB2F0();
    sub_1003252D0((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17[0]);
  }
}

uint64_t sub_1019BA030()
{
  sub_100134750(&qword_1024891F0, "CacheAbcInfo");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024891F0, (void *)&_mh_execute_header);
  sub_100134750(&qword_102489208, "SuplAbcTriggerTime");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102489208, (void *)&_mh_execute_header);
  sub_100134750(&qword_102489220, "NumOfNonEmergencyNilrSupl");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102489220, (void *)&_mh_execute_header);
  sub_100134750(&qword_102489238, "CplaneAbcTriggerTime");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102489238, (void *)&_mh_execute_header);
  sub_100134750(&qword_102489250, "NumOfNonEmergencyNilrCplane");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102489250, (void *)&_mh_execute_header);
}

void sub_1019BA344(uint64_t a1, void *a2)
{
  if ((sub_100743ED4() & 1) == 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349EA0);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLPG,onVisit for ProactiveGnss is not handled on this platform", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_22:
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLProactiveGnss::onVisit(const CLVisit *)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
      return;
    }
LABEL_24:
    dispatch_once(&qword_1024193D0, &stru_102349EA0);
    goto LABEL_22;
  }
  if (a2)
  {
    int v4 = [a2 hasDepartureDate];
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349EA0);
    }
    uint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(unsigned __int8 *)(a1 + 208);
      *(_DWORD *)uint64_t buf = 68289795;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 1026;
      int v15 = v4;
      __int16 v16 = 2113;
      int v17 = a2;
      __int16 v18 = 1026;
      int v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPG,ProactiveGnss,received leeched visit notification\", \"isVisitExit\":%{public}d, \"visit\":%{private, location:escape_only}@, \"Previous visit state\":%{public}d}", buf, 0x28u);
    }
    *(unsigned char *)(a1 + 210) = v4;
    sub_1019BB420(a1, v4);
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349EA0);
  }
  uint64_t v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLPG,onVisit is nil", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_22;
    }
    goto LABEL_24;
  }
}

uint64_t *sub_1019BA698(uint64_t *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349EA0);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLPG,deconstructor", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349EA0);
    }
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLProactiveGnss::~CLProactiveGnss()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (*a1) {
    [*(id *)(*a1 + 16) unregister:*(void *)(*a1 + 8) forNotification:13];
  }
  uint64_t v3 = (void *)a1[18];
  if (v3)
  {
    [v3 invalidate];

    a1[18] = 0;
  }
  uint64_t v4 = a1[4];
  a1[4] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[3];
  a1[3] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = a1[2];
  a1[2] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a1[1];
  a1[1] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *a1;
  *a1 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return a1;
}

void sub_1019BA94C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1019BA95C()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349EA0);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "CLPG,getMinSessionDurationBetween2Sessions", (uint8_t *)buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349EA0);
    }
    LOWORD(v5[0]) = 0;
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "double CLProactiveGnss::getDurationBetween2Sessions(const double)", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_1000C7F88(buf);
  v5[0] = 0.0;
  if (sub_1000A699C(*(uint64_t *)&buf[0], "CLProactiveGnssMinDurBetween2Sessions_s", v5)) {
    double v1 = v5[0];
  }
  else {
    double v1 = 30.0;
  }
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349EA0);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 134349056;
    *(double *)((char *)buf + 4) = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLPG,getMinSessionDurationBetween2Sessions,durBetween2Sessions,%{public}.3lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349EA0);
    }
    LODWORD(v5[0]) = 134349056;
    *(double *)((char *)v5 + 4) = v1;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "double CLProactiveGnss::getDurationBetween2Sessions(const double)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

void sub_1019BAC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1019BACA0(unsigned char *a1, unsigned __int8 *a2)
{
  if (!a1[203])
  {
    if (a1[197] && !a1[196]) {
      goto LABEL_7;
    }
LABEL_6:
    BOOL v4 = *((_DWORD *)a2 + 1) > 3;
    goto LABEL_8;
  }
  if (a1[202]) {
    goto LABEL_6;
  }
LABEL_7:
  BOOL v4 = 0;
LABEL_8:
  if (a1[205])
  {
    if (!a1[204]) {
      goto LABEL_15;
    }
  }
  else if (a1[199] && !a1[198])
  {
    goto LABEL_15;
  }
  if (a2[8])
  {
    BOOL v5 = 1;
    goto LABEL_22;
  }
LABEL_15:
  if (!a1[207])
  {
    if (a1[201] && !a1[200]) {
      goto LABEL_21;
    }
LABEL_20:
    BOOL v5 = a2[2] != 0;
    goto LABEL_22;
  }
  if (a1[206]) {
    goto LABEL_20;
  }
LABEL_21:
  BOOL v5 = 0;
LABEL_22:
  if ((sub_100743ED4() & 1) == 0)
  {
    int v6 = !v5;
    char v9 = *a2;
LABEL_34:
    BOOL v13 = 0;
    BOOL v15 = v9 != 0;
    int v16 = v6 | v4;
    char v11 = v16 & v15;
    if ((v16 & v15) != 0) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = 2;
    }
    goto LABEL_37;
  }
  int v6 = !v5;
  if (a1[209]) {
    int v7 = !v5;
  }
  else {
    int v7 = 1;
  }
  int v8 = v7 | v4;
  char v9 = *a2;
  if (v8 == 1) {
    goto LABEL_34;
  }
  BOOL v10 = *a2 != 0;
  char v11 = v4 && v10;
  if (v4 && v10) {
    unsigned int v12 = 0;
  }
  else {
    unsigned int v12 = 2;
  }
  BOOL v13 = *a2 == 0;
  if (*a2) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = 1;
  }
LABEL_37:
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349EA0);
  }
  int v17 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = *((_DWORD *)a2 + 1);
    int v19 = *((_DWORD *)a2 + 3);
    int v20 = a2[8];
    int v21 = a2[2];
    int v22 = *a2;
    *(_DWORD *)uint64_t buf = 67176705;
    int v26 = v18;
    __int16 v27 = 1025;
    int v28 = v19;
    __int16 v29 = 1025;
    int v30 = v20;
    __int16 v31 = 1025;
    int v32 = v21;
    __int16 v33 = 1025;
    int v34 = v22;
    __int16 v35 = 1025;
    BOOL v36 = v5;
    __int16 v37 = 1025;
    int v38 = v14;
    __int16 v39 = 1025;
    BOOL v40 = v13;
    __int16 v41 = 1025;
    int v42 = v11 & 1;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "CLPG,determineProactiveGnssNextAction,thermalState,%{private}d,motionActivityState,%{private}d,isDriving,%{private}d, isOutsideVisit,%{private}d,proactiveGnssState,%{private}d,allowProactiveBasedOnDeviceState,%{private}d,proactiveGnssDerivedState,%{private}d,start,%{private}d,stop,%{private}d", buf, 0x38u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349EA0);
    }
    __int16 v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLProactiveGnss::CLProactiveGnssNextAction CLProactiveGnss::determineProactiveGnssNextAction(const CLProactiveGnssStateVariables &)", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  return v14;
}

void sub_1019BB030(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 208))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349EA0);
    }
    double v1 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "CLPG,proactiveGnss already active", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349EA0);
      }
      LOWORD(v13[0]) = 0;
LABEL_24:
      unsigned int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveGnss::startProactiveGnss()", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  else if (sub_100743ED4() && *(unsigned char *)(a1 + 209))
  {
    *(_OWORD *)uint64_t buf = xmmword_101D2A430;
    int v15 = -1;
    uint64_t v16 = 0x7FEFFFFFFFFFFFFFLL;
    __int16 v17 = 0;
    char v18 = 0;
    long long v19 = xmmword_101D2A460;
    __int16 v20 = 1;
    long long v21 = xmmword_101E49A00;
    char v22 = 0;
    sub_1019BB380(a1);
    uint64_t v3 = *(void *)(a1 + 40);
    v13[0] = 2;
    sub_10196CD0C(v3, v13, (uint64_t)buf);
    sub_1019BA95C();
    uint64_t v16 = v4;
    int v5 = sub_101971A50(*(void *)(a1 + 40), (uint64_t *)buf);
    *(unsigned char *)(a1 + 208) = v5;
    int v6 = (uint8_t *)(a1 + 56);
    if (v5) {
      int v6 = buf;
    }
    long long v7 = *((_OWORD *)v6 + 1);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 72) = v7;
    long long v9 = *((_OWORD *)v6 + 3);
    long long v8 = *((_OWORD *)v6 + 4);
    uint8_t v10 = v6[80];
    *(_OWORD *)(a1 + 88) = *((_OWORD *)v6 + 2);
    *(unsigned char *)(a1 + 136) = v10;
    *(_OWORD *)(a1 + 120) = v8;
    *(_OWORD *)(a1 + 104) = v9;
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349EA0);
    }
    char v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CLPG,#warning,start,isProactiveGnssAllowed not allowed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349EA0);
      }
      LOWORD(v13[0]) = 0;
      goto LABEL_24;
    }
  }
}

void sub_1019BB380(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 216))
  {
    int v2 = sub_100743E04();
  }
  else
  {
    int v3 = *(unsigned __int8 *)(a1 + 210);
    int v2 = sub_100743E04();
    if (!v3)
    {
      double v7 = 280.0;
      goto LABEL_11;
    }
  }
  int v4 = v2;
  if (*(void *)(a1 + 40))
  {
    sub_10196CE94();
    double v6 = v5;
    if (*(void *)(a1 + 40)) {
      sub_10196CE94();
    }
    else {
      double v7 = 120.0;
    }
  }
  else
  {
    double v6 = 120.0;
    double v7 = 120.0;
  }
  if (v4) {
    double v7 = v6;
  }
LABEL_11:
  *(double *)(a1 + 184) = v7;
}

void sub_1019BB420(uint64_t a1, int a2)
{
  if (!*(void *)(a1 + 40))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349EA0);
    }
    long long v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLPG,RhythmicGnssManager is not available", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349EA0);
      }
      LOWORD(v15[0]) = 0;
      long long v9 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLProactiveGnss::startStopProactiveGnss(const BOOL)", "%s\n");
      goto LABEL_54;
    }
    return;
  }
  v15[0] = 2;
  int v4 = (unsigned __int8 *)(a1 + 208);
  if (*(unsigned char *)(a1 + 208) && (!sub_100743ED4() || !*(unsigned char *)(a1 + 209)))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349EA0);
    }
    uint8_t v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "CLPG,onVisit MA feature is dis-allowed, stop proactive", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349EA0);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveGnss::startStopProactiveGnss(const BOOL)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    sub_10196D12C(*(void *)(a1 + 40), v15);
    *(unsigned char *)(a1 + 208) = 0;
    return;
  }
  if (!sub_100743ED4() || !*(unsigned char *)(a1 + 209))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102349EA0);
    }
    char v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLPG,onVisit MA feature is dis-allowed", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_53:
      long long v9 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveGnss::startStopProactiveGnss(const BOOL)", "%s\n");
LABEL_54:
      if (v9 != buf) {
        free(v9);
      }
      return;
    }
LABEL_56:
    dispatch_once(&qword_1024193D0, &stru_102349EA0);
    goto LABEL_53;
  }
  int v5 = sub_1019BACA0((unsigned char *)a1, v4);
  int v6 = v5;
  if (a2)
  {
    if (*(unsigned char *)(a1 + 208))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102349EA0);
      }
      double v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLPG,visit exit proactive rhythmic active", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_53;
        }
        goto LABEL_56;
      }
    }
    else
    {
      *(double *)(a1 + 176) = sub_10016C458();
      if (v6 == 1) {
        sub_1019BB030(a1);
      }
    }
    return;
  }
  if (*(unsigned char *)(a1 + 208))
  {
    if (!v5)
    {
      double v12 = sub_10016C458();
      *(double *)(a1 + 176) = v12;
      LODWORD(v12) = *(_DWORD *)(a1 + 192);
      [*(id *)(a1 + 144) setNextFireDelay:(double)*(unint64_t *)&v12];
    }
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102349EA0);
  }
  BOOL v13 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "CLPG,visit entry proactive rhythmic not-active", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_53;
    }
    goto LABEL_56;
  }
}

void sub_1019BBA70(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1019BBAA0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101E52300;
      v0[3] = unk_101E52310;
      v0[4] = xmmword_101E52320;
      v0[0] = xmmword_101E522E0;
      v0[1] = unk_101E522F0;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_1019BBB80(_Unwind_Exception *a1)
{
}

void sub_1019BBB98()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_1019BBC18()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_1019BBCA8(_Unwind_Exception *a1)
{
}

void sub_1019BBCC0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_1019BBD78(_Unwind_Exception *a1)
{
}

void sub_1019BBD90()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_1019BBE38(_Unwind_Exception *a1)
{
}

uint64_t sub_1019BBE50()
{
  sub_100134750(qword_102489268, "t");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102489268, (void *)&_mh_execute_header);
}

void sub_1019BBEB4(int a1@<W0>, uint64_t a2@<X8>)
{
  sub_100134750(v6, "gps");
  sub_100134750(v7, "glo");
  sub_100134750(v8, "qzs");
  sub_100134750(v9, "bds");
  sub_100134750(v10, "gal");
  int v4 = (void **)&v6[3 * a1];
  if (*((char *)v4 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)a2, *v4, (unint64_t)v4[1]);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)v4;
    *(void *)(a2 + 16) = v4[2];
  }
  for (uint64_t i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v10[i + 2]) < 0) {
      operator delete((void *)v10[i]);
    }
  }
}

void sub_1019BBFD8(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = 0;
  while (1)
  {
    if (*((char *)&a9 + v10 + 119) < 0) {
      operator delete(*(void **)((char *)&a9 + v10 + 96));
    }
    v10 -= 24;
    if (v10 == -120) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t sub_1019BC03C(int a1)
{
  return word_101E5234C[a1];
}

_OWORD *sub_1019BC04C(_OWORD *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  do
  {
    sub_1019BC224((uint64_t)a1, dword_101E52338[v4], a2 + 24 * dword_101E52338[v4]);
    ++v4;
  }
  while (v4 != 5);
  return a1;
}

void sub_1019BC0D8(_Unwind_Exception *a1)
{
  sub_1019D47E0(v1 + 240, v2, v1);
  _Unwind_Resume(a1);
}

_OWORD *sub_1019BC0F4(_OWORD *a1)
{
  unsigned __int8 v9 = 0;
  sub_100BC9C68(v10, 0x20uLL, &v9);
  unsigned __int8 v8 = 0;
  sub_100BC9C68(v11, 0x18uLL, &v8);
  unsigned __int8 v7 = 0;
  sub_100BC9C68(v12, 5uLL, &v7);
  unsigned __int8 v6 = 0;
  sub_100BC9C68(v13, 0x3FuLL, &v6);
  unsigned __int8 v5 = 0;
  sub_100BC9C68(v14, 0x24uLL, &v5);
  sub_1019BC04C(a1, (uint64_t)v10);
  for (uint64_t i = 12; i != -3; i -= 3)
  {
    int v3 = (void *)v10[i];
    if (v3) {
      operator delete(v3);
    }
  }
  return a1;
}

void sub_1019BC1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 96;
  while (1)
  {
    BOOL v13 = *(void **)(v10 + v12);
    if (v13) {
      operator delete(v13);
    }
    v12 -= 24;
    if (v12 == -24) {
      _Unwind_Resume(exception_object);
    }
  }
}

void sub_1019BC224(uint64_t a1, int a2, uint64_t a3)
{
  long long __p = 0;
  BOOL v40 = 0;
  unint64_t v41 = 0;
  __src = 0;
  __int16 v37 = 0;
  unint64_t v38 = 0;
  unint64_t v3 = *(void *)(a3 + 8);
  int v4 = v3 & 0x3F;
  if (v3 > 0x3F || v4 != 0)
  {
    int v6 = 0;
    int v7 = 0;
    unsigned __int8 v8 = *(void **)a3;
    uint64_t v9 = *(void *)a3 + 8 * (v3 >> 6);
    __int16 v10 = word_101E52356[a2];
    do
    {
      if ((*v8 >> v7))
      {
        char v11 = v40;
        if ((unint64_t)v40 >= v41)
        {
          int v15 = __p;
          uint64_t v16 = (char *)v40 - (unsigned char *)__p;
          if ((char *)v40 - (unsigned char *)__p <= -3) {
            goto LABEL_57;
          }
          uint64_t v17 = v16 >> 1;
          if (v41 - (unint64_t)__p <= (v16 >> 1) + 1) {
            uint64_t v18 = v17 + 1;
          }
          else {
            uint64_t v18 = v41 - (void)__p;
          }
          if (v41 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v19 = v18;
          }
          if (v19)
          {
            __int16 v20 = (char *)sub_100C3D5E0((uint64_t)&v41, v19);
            int v15 = __p;
            char v11 = v40;
          }
          else
          {
            __int16 v20 = 0;
          }
          __int16 v27 = &v20[2 * v17];
          *(_WORD *)__int16 v27 = v10;
          uint64_t v12 = v27 + 2;
          while (v11 != v15)
          {
            __int16 v28 = *--v11;
            *((_WORD *)v27 - 1) = v28;
            v27 -= 2;
          }
          long long __p = v27;
          BOOL v40 = v12;
          unint64_t v41 = (unint64_t)&v20[2 * v19];
          if (v15) {
            operator delete(v15);
          }
        }
        else
        {
          _WORD *v40 = v10;
          uint64_t v12 = v11 + 1;
        }
        BOOL v40 = v12;
      }
      else
      {
        BOOL v13 = v37;
        if ((unint64_t)v37 >= v38)
        {
          long long v21 = __src;
          uint64_t v22 = (char *)v37 - (unsigned char *)__src;
          if ((char *)v37 - (unsigned char *)__src < -2) {
LABEL_57:
          }
            sub_1001D7FD4();
          uint64_t v23 = v22 >> 1;
          if (v38 - (unint64_t)__src <= (v22 >> 1) + 1) {
            uint64_t v24 = v23 + 1;
          }
          else {
            uint64_t v24 = v38 - (void)__src;
          }
          if (v38 - (unint64_t)__src >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v25 = v24;
          }
          if (v25)
          {
            int v26 = (char *)sub_100C3D5E0((uint64_t)&v38, v25);
            long long v21 = __src;
            BOOL v13 = v37;
          }
          else
          {
            int v26 = 0;
          }
          __int16 v29 = &v26[2 * v23];
          *(_WORD *)__int16 v29 = v10;
          uint64_t v14 = v29 + 2;
          while (v13 != v21)
          {
            __int16 v30 = *--v13;
            *((_WORD *)v29 - 1) = v30;
            v29 -= 2;
          }
          __src = v29;
          __int16 v37 = v14;
          unint64_t v38 = (unint64_t)&v26[2 * v25];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *__int16 v37 = v10;
          uint64_t v14 = v13 + 1;
        }
        __int16 v37 = v14;
      }
      ++v10;
      v8 += v6 == 63;
      if (v6 == 63) {
        int v7 = 0;
      }
      else {
        ++v7;
      }
      int v6 = v7;
    }
    while (v8 != (void *)v9 || v4 != v7);
  }
  __int16 v31 = (char *)(a1 + 24 * a2);
  if (v31 != (char *)&__p) {
    sub_1019C50D4(v31, (char *)__p, (uint64_t)v40, ((char *)v40 - (unsigned char *)__p) >> 1);
  }
  int v32 = (char *)(a1 + 24 * a2 + 120);
  __int16 v33 = __src;
  if (v32 != (char *)&__src)
  {
    sub_1019C50D4(v32, (char *)__src, (uint64_t)v37, ((char *)v37 - (unsigned char *)__src) >> 1);
    __int16 v33 = __src;
  }
  if (v33)
  {
    __int16 v37 = v33;
    operator delete(v33);
  }
  if (__p)
  {
    BOOL v40 = __p;
    operator delete(__p);
  }
}

void sub_1019BC4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1019BC508(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v21 = a1 + 120;
  do
  {
    int v3 = dword_101E52338[v2];
    sub_10010F274((uint64_t)v25);
    sub_1019BBEB4(v3, (uint64_t)__p);
    if ((v33 & 0x80u) == 0) {
      int v4 = __p;
    }
    else {
      int v4 = (void **)__p[0];
    }
    if ((v33 & 0x80u) == 0) {
      uint64_t v5 = v33;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    int v6 = sub_100132EFC(v26, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)",", 1);
    int v7 = (void *)std::ostream::operator<<();
    sub_100132EFC(v7, (uint64_t)",deny,", 6);
    if ((char)v33 < 0) {
      operator delete(__p[0]);
    }
    unsigned __int8 v8 = (uint64_t *)(a1 + 24 * v3);
    uint64_t v10 = *v8;
    uint64_t v9 = v8[1];
    while (v10 != v9)
    {
      char v11 = (void *)std::ostream::operator<<();
      sub_100132EFC(v11, (uint64_t)",", 1);
      v10 += 2;
    }
    sub_100132EFC(v26, (uint64_t)"clear,", 6);
    uint64_t v12 = (uint64_t *)(v21 + 24 * v3);
    uint64_t v14 = *v12;
    uint64_t v13 = v12[1];
    while (v14 != v13)
    {
      int v15 = (void *)std::ostream::operator<<();
      sub_100132EFC(v15, (uint64_t)",", 1);
      v14 += 2;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234A020);
    }
    uint64_t v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str();
      uint64_t v17 = __p;
      if ((v33 & 0x80u) != 0) {
        uint64_t v17 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#rti,%s", buf, 0xCu);
      if ((char)v33 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      std::stringbuf::str();
      if (v29 >= 0) {
        uint64_t v19 = buf;
      }
      else {
        uint64_t v19 = *(unsigned char **)buf;
      }
      int v30 = 136315138;
      __int16 v31 = v19;
      __int16 v20 = (char *)_os_log_send_and_compose_impl();
      if (v29 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "auto qmi::pds::BlockListSv::log()::(anonymous class)::operator()(GnssConstellation) const", "%s\n", v20);
      if (v20 != (char *)__p) {
        free(v20);
      }
    }
    v25[0] = v23;
    *(void *)((char *)v25 + *(void *)(v23 - 24)) = v22;
    v26[0] = v24;
    if (v27 < 0) {
      operator delete((void *)v26[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    uint64_t result = std::ios::~ios();
    ++v2;
  }
  while (v2 != 5);
  return result;
}

void sub_1019BC988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  a18 = a15;
  *(uint64_t *)((char *)&a18 + *(void *)(a15 - 24)) = a14;
  a20 = a16;
  if (a34 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  _Unwind_Resume(a1);
}

void *sub_1019BCAD4@<X0>(int a1@<W0>, void *a2@<X8>)
{
  switch(a1)
  {
    case 0:
      int v4 = "EarlyStart";
      goto LABEL_20;
    case 1:
      int v4 = "CpGsmStart";
      goto LABEL_20;
    case 2:
      int v4 = "CpWcdmaStart";
      goto LABEL_20;
    case 3:
      int v4 = "SuplWcdmaStart";
      goto LABEL_20;
    case 4:
      int v4 = "CpLteStart";
      goto LABEL_20;
    case 5:
      int v4 = "SuplLteStart";
      goto LABEL_20;
    case 6:
      int v4 = "UnknownEmergencyEvent";
      goto LABEL_20;
    case 7:
      int v4 = "Cp1xStart";
      goto LABEL_20;
    case 8:
      int v4 = "Supl1xStart";
      goto LABEL_20;
    case 9:
      int v4 = "Done";
      goto LABEL_20;
    case 10:
      int v4 = "CpNrStart";
      goto LABEL_20;
    case 11:
      int v4 = "SuplNrStart";
LABEL_20:
      uint64_t result = sub_100134750(a2, v4);
      break;
    default:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      uint64_t v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 67109120;
        int v9 = a1;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Invalid emergency event value,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        int v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "std::string qmi::pds::to_string(qmi::pds::EmergencyEvent)", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      uint64_t result = sub_100134750(a2, "UnknownEvent");
      break;
  }
  return result;
}

void *sub_1019BCEC8@<X0>(int a1@<W0>, void *a2@<X8>)
{
  switch(a1)
  {
    case 0:
      int v4 = "Success";
      goto LABEL_18;
    case 1:
      int v4 = "InProgress";
      goto LABEL_18;
    case 2:
      int v4 = "Failure";
      goto LABEL_18;
    case 3:
      int v4 = "Timeout";
      goto LABEL_18;
    case 4:
      int v4 = "UserEnded";
      goto LABEL_18;
    case 5:
      int v4 = "BadParam";
      goto LABEL_18;
    case 6:
      int v4 = "Offline";
      goto LABEL_18;
    case 7:
      int v4 = "Locked";
      goto LABEL_18;
    case 8:
      int v4 = "E911InProgress";
      goto LABEL_18;
    case 9:
      int v4 = "Max";
LABEL_18:
      uint64_t result = sub_100134750(a2, v4);
      break;
    default:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      uint64_t v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 67109120;
        int v9 = a1;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Invalid SessionFixStatus value,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        int v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "std::string qmi::pds::to_string(SessionFixStatus)", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      uint64_t result = sub_100134750(a2, "UnknownSessionStatus");
      break;
  }
  return result;
}

void *sub_1019BD26C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  switch(a1)
  {
    case 2:
      int v4 = "kCpiTimeTypeAge";
      goto LABEL_7;
    case 1:
      int v4 = "kCpiTimeTypeGps";
      goto LABEL_7;
    case 0:
      int v4 = "kCpiTimeTypeUtc";
LABEL_7:
      return sub_100134750(a2, v4);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10234A020);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v9 = a1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Invalid CpiTimeType value,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234A020);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "std::string qmi::pds::to_string(qmi::pds::CpiTimeType)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return sub_100134750(a2, "UnknownCpiTimeType");
}

void *sub_1019BD4D4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v2 = a1;
  switch(a1)
  {
    case 1:
      int v4 = "kNILRRequestMSB";
      goto LABEL_12;
    case 2:
      int v4 = "kNILRRequestMSA";
      goto LABEL_12;
    case 4:
      int v4 = "kNILRRequestOTDOA_MSA";
      goto LABEL_12;
    case 8:
      int v4 = "kNILRRequestECID";
LABEL_12:
      uint64_t result = sub_100134750(a2, v4);
      break;
    default:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      uint64_t v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 67109120;
        int v9 = v2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Invalid NILRRequestType value,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        int v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "std::string qmi::pds::to_string(qmi::pds::NILRRequestType)", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      uint64_t result = sub_100134750(a2, "UnknownNILRRequestType");
      break;
  }
  return result;
}

void *sub_1019BD798@<X0>(int a1@<W0>, void *a2@<X8>)
{
  switch(a1)
  {
    case 0:
      int v4 = "kPdsModemSubscriptionId0";
      goto LABEL_8;
    case 1:
      int v4 = "kPdsModemSubscriptionId1";
      goto LABEL_8;
    case 2:
      int v4 = "kPdsModemSubscriptionId2";
      goto LABEL_8;
    case 3:
      int v4 = "kPdsModemSubscriptionId3";
      goto LABEL_8;
    default:
      if (a1 == 255)
      {
        int v4 = "kPdsModemSubscriptionIdInvalid";
LABEL_8:
        return sub_100134750(a2, v4);
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        int v6 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 67109120;
          int v9 = a1;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Invalid SubscriptionId value,%d", buf, 8u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10234A020);
          }
          int v7 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "std::string qmi::pds::to_string(qmi::pds::SubscriptionId)", "%s\n", v7);
          if (v7 != (char *)buf) {
            free(v7);
          }
        }
        return sub_100134750(a2, "UnknownSubscriptionId");
      }
  }
}

void *sub_1019BDA78@<X0>(int a1@<W0>, void *a2@<X8>)
{
  switch(a1)
  {
    case 0:
      int v4 = "QMI_RELIABILITY_NOT_SET";
      goto LABEL_13;
    case 1:
      int v4 = "QMI_RELIABILITY_VERY_LOW";
      goto LABEL_13;
    case 2:
      int v4 = "QMI_RELIABILITY_LOW";
      goto LABEL_13;
    case 3:
      int v4 = "QMI_RELIABILITY_MED";
      goto LABEL_13;
    case 4:
      int v4 = "QMI_RELIABILITY_HIGH";
LABEL_13:
      uint64_t result = sub_100134750(a2, v4);
      break;
    default:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      uint64_t v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 67109120;
        int v9 = a1;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Invalid  QmiReliabilityIndication value,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        int v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "std::string qmi::pds::to_string(qmi::pds::QmiReliabilityIndication)", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      uint64_t result = sub_100134750(a2, "UnknownQmiReliabilityIndication");
      break;
  }
  return result;
}

char *sub_1019BDD54@<X0>(uint64_t a1@<X0>, qmi::MutableMessageBase *a2@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a2, 0x21u);
  uint64_t result = sub_1019C51D8((uint64_t)a2, 1);
  *uint64_t result = a1 != 0;
  if (a1)
  {
    uint64_t result = sub_1019C5414((uint64_t)a2, 16);
    *(void *)uint64_t result = a1;
  }
  return result;
}

void sub_1019BDDB0(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1019BDDC8(int a1@<W1>, int a2@<W2>, int a3@<W3>, int a4@<W4>, int a5@<W5>, int a6@<W6>, int a7@<W7>, qmi::MutableMessageBase *a8@<X8>, int a9)
{
  qmi::MutableMessageBase::MutableMessageBase(a8, 0x34u);
  if (a2 | a1 | a3 | a4 | a5 | a6 | a7)
  {
    if (a2) {
      *(_DWORD *)sub_1019C5658((uint64_t)a8, 19) = a2;
    }
    if (a3) {
      *(_DWORD *)sub_1019C589C((uint64_t)a8, 20) = a3;
    }
    if (a4) {
      *(_DWORD *)sub_1019C5AE0((uint64_t)a8, 21) = a4;
    }
    if (a5) {
      *(_DWORD *)sub_1019C5D24((uint64_t)a8, 22) = a5;
    }
    if (a6) {
      *(_DWORD *)sub_1019C5F68((uint64_t)a8, 23) = a6;
    }
    if (a7) {
      *(_DWORD *)sub_1019C61AC((uint64_t)a8, 24) = a7;
    }
    if (a9 && sub_100740B14()) {
      *(_DWORD *)sub_1019C63F0((uint64_t)a8, 25) = a9;
    }
    if (a1) {
      *(_DWORD *)sub_1019C6634((uint64_t)a8, 17) = a1;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234A020);
    }
    uint64_t v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v19 = 68289026;
      int v20 = 0;
      __int16 v21 = 2082;
      uint64_t v22 = "";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#bb.e,invalid params for reset GPS service data\"}", (uint8_t *)&v19, 0x12u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
    }
    uint64_t v18 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      int v19 = 68289026;
      int v20 = 0;
      __int16 v21 = 2082;
      uint64_t v22 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#bb.e,invalid params for reset GPS service data", "{\"msg%{public}.0s\":\"#bb.e,invalid params for reset GPS service data\"}", (uint8_t *)&v19, 0x12u);
    }
  }
}

void sub_1019BE034(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1019BE068@<X0>(char a1@<W0>, char a2@<W1>, int a3@<W2>, int a4@<W3>, qmi::MutableMessageBase *a5@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a5, 0x2Au);
  uint64_t result = sub_1019C6878((uint64_t)a5, 1);
  *uint64_t result = a1;
  result[1] = a2;
  *((_DWORD *)result + 1) = a3;
  *((_DWORD *)result + 2) = a4;
  return result;
}

void sub_1019BE0CC(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1019BE0E0@<X0>(char a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a2, 0x31u);
  uint64_t result = sub_1019C6B5C((uint64_t)a2, 1);
  *uint64_t result = a1;
  return result;
}

void sub_1019BE120(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1019BE134@<X0>(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, char a4@<W3>, qmi::MutableMessageBase *a5@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a5, 0x3Du);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[3] = &unk_102349EC0;
  void v12[4] = a1;
  int v13 = a2;
  char v14 = a3;
  char v15 = a4;
  uint64_t v10 = sub_1019C6D98((uint64_t)a5, 1);
  return sub_1019BE20C((uint64_t)v12, (uint64_t)v10);
}

void sub_1019BE1F8(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1019BE20C(uint64_t result, uint64_t a2)
{
  *(void *)a2 = *(void *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 40);
  *(_WORD *)(a2 + 12) = *(_WORD *)(result + 44);
  return result;
}

_DWORD *sub_1019BE228@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, qmi::MutableMessageBase *a4@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a4, 0x53u);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[3] = &unk_102349EE0;
  int v11 = a1;
  int v12 = a2;
  int v13 = a3;
  unsigned __int8 v8 = sub_1019C706C((uint64_t)a4, 1);
  return sub_1019BE2F4(v10, v8);
}

void sub_1019BE2E0(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1019BE2F4(_DWORD *result, _DWORD *a2)
{
  *a2 = result[8];
  a2[1] = result[9];
  a2[2] = result[10];
  return result;
}

uint64_t sub_1019BE310@<X0>(char a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a2, 0x85u);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[3] = &unk_102349F00;
  char v7 = a1;
  int v4 = sub_1019C733C((uint64_t)a2, 1);
  return sub_1019BE3C8((uint64_t)v6, v4);
}

void sub_1019BE3B4(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1019BE3C8(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t sub_1019BE3D4@<X0>(uint64_t a1@<X0>, qmi::MutableMessageBase *a2@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a2, 0x87u);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[3] = &unk_102349F20;
  void v6[4] = a1;
  int v4 = sub_1019C7578((uint64_t)a2, 1);
  return sub_1019BE48C((uint64_t)v6, v4);
}

void sub_1019BE478(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1019BE48C(uint64_t result, void *a2)
{
  *a2 = *(void *)(result + 32);
  return result;
}

char *sub_1019BE498@<X0>(uint64_t a1@<X0>, qmi::MutableMessageBase *a2@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a2, 0x57u);
  *(_DWORD *)sub_1019C77BC((uint64_t)a2, 16) = *(_DWORD *)a1;
  *(_DWORD *)sub_1019C7A00((uint64_t)a2, 17) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)sub_1019C7C44((uint64_t)a2, 18) = *(_DWORD *)(a1 + 8);
  *sub_1019C7E88((uint64_t)a2, 19) = *(unsigned char *)(a1 + 12);
  *(_DWORD *)sub_1019C80C4((uint64_t)a2, 20) = *(_DWORD *)(a1 + 16);
  uint64_t result = sub_1019C8308((uint64_t)a2, 21);
  *(_DWORD *)uint64_t result = *(_DWORD *)(a1 + 20);
  if (*(unsigned char *)(a1 + 24))
  {
    *(_DWORD *)sub_1019C854C((uint64_t)a2, 22) = *(_DWORD *)(a1 + 28);
    *(_DWORD *)sub_1019C8790((uint64_t)a2, 23) = *(_DWORD *)(a1 + 32);
    *(_DWORD *)sub_1019C89D4((uint64_t)a2, 24) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)sub_1019C8C18((uint64_t)a2, 25) = *(_DWORD *)(a1 + 40);
    *(_DWORD *)sub_1019C8E5C((uint64_t)a2, 26) = *(_DWORD *)(a1 + 44);
    *(_DWORD *)sub_1019C90A0((uint64_t)a2, 27) = *(_DWORD *)(a1 + 48);
    *sub_1019C92E4((uint64_t)a2, 28) = *(unsigned char *)(a1 + 52);
    uint64_t result = sub_1019C9520((uint64_t)a2, 29);
    *uint64_t result = *(unsigned char *)(a1 + 53);
    if (*(unsigned char *)(a1 + 54))
    {
      uint64_t result = sub_1019C975C((uint64_t)a2, 37);
      *(_DWORD *)uint64_t result = *(_DWORD *)(a1 + 56);
    }
  }
  return result;
}

void sub_1019BE604(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

float *sub_1019BE650@<X0>(int a1@<W0>, uint64_t a2@<X1>, qmi::MutableMessageBase *a3@<X8>, float a4@<S0>, float a5@<S1>)
{
  qmi::MutableMessageBase::MutableMessageBase(a3, 0x8Eu);
  uint64_t v10 = sub_1019C99A0((uint64_t)a3, 1);
  *(_DWORD *)uint64_t v10 = a1;
  *((void *)v10 + 1) = a2;
  uint64_t result = (float *)sub_1019C9C4C((uint64_t)a3, 2);
  *uint64_t result = a4;
  result[1] = a5;
  return result;
}

void sub_1019BE6C0(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1019BE6D8@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, qmi::MutableMessageBase *a4@<X8>, float a5@<S0>, float a6@<S1>)
{
  qmi::MutableMessageBase::MutableMessageBase(a4, 0x97u);
  int v12 = sub_1019C9EF8((uint64_t)a4, 1);
  *(_DWORD *)int v12 = a1;
  *((void *)v12 + 1) = a2;
  uint64_t result = sub_1019CA140((uint64_t)a4, 2);
  *(_DWORD *)uint64_t result = a3;
  *((float *)result + 1) = a5;
  *((float *)result + 2) = a6;
  return result;
}

void sub_1019BE750(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1019BE768@<X0>(int a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a2, 0x96u);
  uint64_t result = sub_1019CA390((uint64_t)a2, 1);
  *(_DWORD *)uint64_t result = a1;
  return result;
}

void sub_1019BE7A8(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1019BE7BC@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, char a8@<W7>, qmi::MutableMessageBase *a9@<X8>, double a10@<D0>, double a11@<D1>, float a12@<S2>, float a13@<S3>, float a14@<S4>, float a15@<S5>, float a16@<S6>, float a17@<S7>, char a18, char a19)
{
  qmi::MutableMessageBase::MutableMessageBase(a9, 0x38u);
  *(void *)sub_1019CA5D4((uint64_t)a9, 16) = a2;
  *(double *)sub_1019CA818((uint64_t)a9, 17) = a10;
  *(double *)sub_1019CAA5C((uint64_t)a9, 18) = a11;
  *(float *)sub_1019CACA0((uint64_t)a9, 19) = a12;
  if (a13 > 0.0) {
    *(float *)sub_1019CAEE4((uint64_t)a9, 21) = a13;
  }
  *(float *)sub_1019CB128((uint64_t)a9, 22) = a14;
  *sub_1019CB36C((uint64_t)a9, 23) = a18;
  *sub_1019CB5A8((uint64_t)a9, 24) = a19;
  *sub_1019CB7E4((uint64_t)a9, 25) = a5;
  *sub_1019CBA20((uint64_t)a9, 26) = a1;
  BOOL v36 = sub_1019CBC5C((uint64_t)a9, 27);
  *BOOL v36 = a3;
  v36[1] = a4;
  uint64_t result = sub_1019CBEF0((uint64_t)a9, 28);
  *uint64_t result = a6;
  result[1] = a7;
  result[2] = a8;
  if (a15 > 0.0 && a16 > 0.0)
  {
    uint64_t result = sub_1019CC1AC((uint64_t)a9, 29);
    *(float *)uint64_t result = a15;
    *((float *)result + 1) = a16;
    *((float *)result + 2) = a17;
  }
  return result;
}

void sub_1019BE968(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1019BE9AC@<X0>(char a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a2, 0x5557u);
  uint64_t result = sub_1019CC3FC((uint64_t)a2, 1);
  *uint64_t result = a1;
  return result;
}

void sub_1019BE9EC(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1019BEA00@<X0>(char a1@<W0>, __int16 a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, qmi::MutableMessageBase *a5@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a5, 0x27u);
  uint64_t v10 = sub_1019CC638((uint64_t)a5, 1);
  *uint64_t v10 = a1;
  v10[1] = 0;
  *((_DWORD *)v10 + 1) = 0;
  *(_WORD *)sub_1019CC8F8((uint64_t)a5, 16) = a2;
  *sub_1019CCB3C((uint64_t)a5, 17) = a3;
  uint64_t result = sub_1019CCD78((uint64_t)a5, 18);
  *(void *)uint64_t result = a4;
  return result;
}

void sub_1019BEA94(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1019BEAB4@<X0>(char a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a2, 0x40u);
  uint64_t result = sub_1019CCFBC((uint64_t)a2, 16);
  *uint64_t result = a1;
  return result;
}

void sub_1019BEAF4(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1019BEB08@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, __int16 a4@<W3>, __int16 a5@<W4>, qmi::MutableMessageBase *a6@<X8>, float a7@<S0>)
{
  qmi::MutableMessageBase::MutableMessageBase(a6, 0x61u);
  uint64_t result = sub_1019CD1F8((uint64_t)a6, 1);
  *(_DWORD *)uint64_t result = a1;
  *((_DWORD *)result + 1) = a2;
  *((_DWORD *)result + 2) = a3;
  *((float *)result + 3) = a7;
  *((_WORD *)result + 8) = a4;
  *((_WORD *)result + 9) = a5;
  return result;
}

void sub_1019BEB84(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1019BEB98(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int *a5@<X4>, char *a6@<X5>, char *a7@<X6>, char *a8@<X7>, qmi::MutableMessageBase *a9@<X8>, int *a10, int *a11, int *a12, int *a13, uint64_t a14, char *a15, char *a16, char *a17, char *a18, char *a19, char *a20,char *a21,char *a22,char *a23,char *a24,char *a25,_DWORD *a26,_DWORD *a27,char *a28,unsigned char *a29,void *a30)
{
  uint64_t v250 = qmi::MutableMessageBase::MutableMessageBase(a9, 0x3Cu);
  *sub_1019CD5A0(v250, 1) = a1;
  int v249 = a1;
  if (a1 && a3)
  {
    unsigned __int8 v33 = sub_1019CD7DC(v250, 20);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234A020);
    }
    int v34 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v35 = *((_DWORD *)a25 + 2) - *(_DWORD *)a25;
      *(_DWORD *)uint64_t buf = 67109120;
      int v254 = v35;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "Supl,suplUrl.size,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      v206 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v206);
      if (v206 != (char *)buf) {
        free(v206);
      }
    }
    BOOL v36 = *(char **)a25;
    __int16 v37 = (char *)*((void *)a25 + 1);
    if (v37 == *(char **)a25)
    {
      unint64_t v41 = 0;
    }
    else
    {
      unint64_t v38 = 0;
      do
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        __int16 v39 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v40 = *(unsigned __int8 *)(*(void *)a25 + v38);
          *(_DWORD *)uint64_t buf = 67109376;
          int v254 = v38;
          __int16 v255 = 1024;
          int v256 = v40;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "suplUrl[%d],%x", buf, 0xEu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10234A020);
          }
          int v42 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v42);
          if (v42 != (char *)buf) {
            free(v42);
          }
        }
        ++v38;
        BOOL v36 = *(char **)a25;
        __int16 v37 = (char *)*((void *)a25 + 1);
        unint64_t v41 = (unint64_t)&v37[-*(void *)a25];
      }
      while (v41 > v38);
    }
    if (v33 != a25) {
      sub_100A60544(v33, v36, v37, v41);
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234A020);
    }
    int v43 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v44 = *((_DWORD *)v33 + 2) - *(_DWORD *)v33;
      *(_DWORD *)uint64_t buf = 67109120;
      int v254 = v44;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplUrl.size,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      v207 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v207);
      if (v207 != (char *)buf) {
        free(v207);
      }
    }
    if (*((void *)v33 + 1) != *(void *)v33)
    {
      unint64_t v45 = 0;
      do
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        int v46 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v47 = *(unsigned __int8 *)(*(void *)v33 + v45);
          *(_DWORD *)uint64_t buf = 67109376;
          int v254 = v45;
          __int16 v255 = 1024;
          int v256 = v47;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "tlv.suplUrl[%d],%x", buf, 0xEu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10234A020);
          }
          float v48 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v48);
          if (v48 != (char *)buf) {
            free(v48);
          }
        }
        ++v45;
      }
      while (*((void *)v33 + 1) - *(void *)v33 > v45);
    }
  }
  if (a1 && a2)
  {
    float v49 = sub_1019CDBE0(v250, 17);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234A020);
    }
    long long v50 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v51 = *a5;
      *(_DWORD *)uint64_t buf = 67109120;
      int v254 = v51;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "Supl,validMask,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      v208 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v208);
      if (v208 != (char *)buf) {
        free(v208);
      }
    }
    *(_DWORD *)float v49 = *a5;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234A020);
    }
    long long v52 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v53 = *(_DWORD *)v49;
      *(_DWORD *)uint64_t buf = 67109120;
      int v254 = v53;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "Supl,tlv.validMask,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      v209 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v209);
      if (v209 != (char *)buf) {
        free(v209);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234A020);
    }
    long long v54 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v55 = *a6;
      *(_DWORD *)uint64_t buf = 67109120;
      int v254 = v55;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "Supl,suplPrivacy,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      v210 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v210);
      if (v210 != (char *)buf) {
        free(v210);
      }
    }
    v49[4] = *a6;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234A020);
    }
    long long v56 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v57 = v49[4];
      *(_DWORD *)uint64_t buf = 67109120;
      int v254 = v57;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplPrivacy,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      v211 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v211);
      if (v211 != (char *)buf) {
        free(v211);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234A020);
    }
    uint64_t v58 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v59 = *((_DWORD *)a7 + 2) - *(_DWORD *)a7;
      *(_DWORD *)uint64_t buf = 67109120;
      int v254 = v59;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "Supl,suplHash.size,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      v212 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v212);
      if (v212 != (char *)buf) {
        free(v212);
      }
    }
    double v60 = *(char **)a7;
    long long v61 = (char *)*((void *)a7 + 1);
    if (v61 == *(char **)a7)
    {
      unint64_t v65 = 0;
    }
    else
    {
      unint64_t v62 = 0;
      do
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        uint64_t v63 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v64 = *(unsigned __int8 *)(*(void *)a7 + v62);
          *(_DWORD *)uint64_t buf = 67109376;
          int v254 = v62;
          __int16 v255 = 1024;
          int v256 = v64;
          _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "suplHash[%d],%x", buf, 0xEu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10234A020);
          }
          int v66 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v66);
          if (v66 != (char *)buf) {
            free(v66);
          }
        }
        ++v62;
        double v60 = *(char **)a7;
        long long v61 = (char *)*((void *)a7 + 1);
        unint64_t v65 = (unint64_t)&v61[-*(void *)a7];
      }
      while (v65 > v62);
    }
    if (v49 + 8 != a7) {
      sub_100A60544((void *)v49 + 1, v60, v61, v65);
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234A020);
    }
    uint64_t v67 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v68 = *((_DWORD *)v49 + 4) - *((_DWORD *)v49 + 2);
      *(_DWORD *)uint64_t buf = 67109120;
      int v254 = v68;
      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplHash.size,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      v213 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v213);
      if (v213 != (char *)buf) {
        free(v213);
      }
    }
    if (*((void *)v49 + 2) != *((void *)v49 + 1))
    {
      unint64_t v69 = 0;
      do
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        int v70 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v71 = *(unsigned __int8 *)(*((void *)v49 + 1) + v69);
          *(_DWORD *)uint64_t buf = 67109376;
          int v254 = v69;
          __int16 v255 = 1024;
          int v256 = v71;
          _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "tlv.suplHash[%d],%x", buf, 0xEu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10234A020);
          }
          int v72 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v72);
          if (v72 != (char *)buf) {
            free(v72);
          }
        }
        ++v69;
      }
      while (*((void *)v49 + 2) - *((void *)v49 + 1) > v69);
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234A020);
    }
    uint64_t v73 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v74 = *a8;
      *(_DWORD *)uint64_t buf = 67109120;
      int v254 = v74;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "Supl,suplMode,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      v214 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v214);
      if (v214 != (char *)buf) {
        free(v214);
      }
    }
    v49[32] = *a8;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234A020);
    }
    __int16 v75 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v76 = v49[32];
      *(_DWORD *)uint64_t buf = 67109120;
      int v254 = v76;
      _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplMode,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      v215 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v215);
      if (v215 != (char *)buf) {
        free(v215);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234A020);
    }
    __int16 v77 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v78 = *a10;
      *(_DWORD *)uint64_t buf = 67109120;
      int v254 = v78;
      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "Supl,suplSessionId,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      v216 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v216);
      if (v216 != (char *)buf) {
        free(v216);
      }
    }
    *((_DWORD *)v49 + 9) = *a10;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234A020);
    }
    char v79 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v80 = *((_DWORD *)v49 + 9);
      *(_DWORD *)uint64_t buf = 67109120;
      int v254 = v80;
      _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplSessionId,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      v217 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v217);
      if (v217 != (char *)buf) {
        free(v217);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234A020);
    }
    int v81 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v82 = *a11;
      *(_DWORD *)uint64_t buf = 67109120;
      int v254 = v82;
      _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEBUG, "Supl,suplSlpServerIpv4Port,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      v218 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v218);
      if (v218 != (char *)buf) {
        free(v218);
      }
    }
    *((_DWORD *)v49 + 10) = *a11;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234A020);
    }
    int v83 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v84 = *((_DWORD *)v49 + 10);
      *(_DWORD *)uint64_t buf = 67109120;
      int v254 = v84;
      _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplSlpServerIpv4Port,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      v219 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v219);
      if (v219 != (char *)buf) {
        free(v219);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234A020);
    }
    int v85 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v86 = *a12;
      *(_DWORD *)uint64_t buf = 67109120;
      int v254 = v86;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEBUG, "Supl,suplSlpServerIpv4Addr,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      v220 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v220);
      if (v220 != (char *)buf) {
        free(v220);
      }
    }
    *((_DWORD *)v49 + 11) = *a12;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234A020);
    }
    char v87 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v88 = *((_DWORD *)v49 + 11);
      *(_DWORD *)uint64_t buf = 67109120;
      int v254 = v88;
      _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplSlpServerIpv4Addr,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      v221 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v221);
      if (v221 != (char *)buf) {
        free(v221);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234A020);
    }
    uint64_t v89 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v90 = *a13;
      *(_DWORD *)uint64_t buf = 67109120;
      int v254 = v90;
      _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEBUG, "Supl,suplSlpServerIpv6Port,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      v222 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v222);
      if (v222 != (char *)buf) {
        free(v222);
      }
    }
    *((_DWORD *)v49 + 12) = *a13;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234A020);
    }
    __int16 v91 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v92 = *((_DWORD *)v49 + 12);
      *(_DWORD *)uint64_t buf = 67109120;
      int v254 = v92;
      _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplSlpServerIpv6Port,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      v223 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v223);
      if (v223 != (char *)buf) {
        free(v223);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234A020);
    }
    uint64_t v93 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v254 = 8;
      _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEBUG, "Supl,suplSlpServerIpv6Addr.size,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      v224 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v224);
      if (v224 != (char *)buf) {
        free(v224);
      }
    }
    for (uint64_t i = 0; i != 8; ++i)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      uint64_t v95 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v96 = *(unsigned __int16 *)(a14 + 2 * i);
        *(_DWORD *)uint64_t buf = 67109376;
        int v254 = i;
        __int16 v255 = 1024;
        int v256 = v96;
        _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEBUG, "suplSlpServerIpv6Addr[%d],%x", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        __int16 v97 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v97);
        if (v97 != (char *)buf) {
          free(v97);
        }
      }
    }
    uint64_t v98 = 0;
    __int16 v99 = (unint64_t *)(v49 + 56);
    long long v100 = (unsigned char *)*((void *)v49 + 8);
    __int16 v101 = v49;
    while (1)
    {
      __int16 v102 = *(_WORD *)(a14 + 2 * v98);
      unint64_t v103 = *((void *)v49 + 9);
      if ((unint64_t)v100 >= v103)
      {
        unint64_t v105 = *v99;
        int v106 = &v100[-*v99];
        unint64_t v107 = (unint64_t)(v106 + 1);
        if ((uint64_t)(v106 + 1) < 0) {
          sub_1001D7FD4();
        }
        unint64_t v108 = v103 - v105;
        if (2 * v108 > v107) {
          unint64_t v107 = 2 * v108;
        }
        if (v108 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v109 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v109 = v107;
        }
        if (v109) {
          int v110 = (char *)operator new(v109);
        }
        else {
          int v110 = 0;
        }
        __int16 v111 = &v106[(void)v110];
        int v112 = &v106[(void)v110];
        *int v112 = v102;
        char v104 = v112 + 1;
        if (v100 != (unsigned char *)v105)
        {
          __int16 v113 = &v100[~v105];
          do
          {
            char v114 = *--v100;
            (v113--)[(void)v110] = v114;
          }
          while (v100 != (unsigned char *)v105);
          long long v100 = (unsigned char *)*v99;
          __int16 v111 = v110;
        }
        float v49 = v101;
        *((void *)v101 + 7) = v111;
        *((void *)v101 + 8) = v104;
        *((void *)v101 + 9) = &v110[v109];
        if (v100) {
          operator delete(v100);
        }
      }
      else
      {
        unsigned char *v100 = v102;
        char v104 = v100 + 1;
      }
      *((void *)v49 + 8) = v104;
      unint64_t v115 = *((void *)v49 + 9);
      if ((unint64_t)v104 >= v115)
      {
        unint64_t v116 = *v99;
        uint64_t v117 = &v104[-*v99];
        unint64_t v118 = (unint64_t)(v117 + 1);
        if ((uint64_t)(v117 + 1) < 0) {
          sub_1001D7FD4();
        }
        unint64_t v119 = v115 - v116;
        if (2 * v119 > v118) {
          unint64_t v118 = 2 * v119;
        }
        if (v119 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v120 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v120 = v118;
        }
        if (v120) {
          double v121 = operator new(v120);
        }
        else {
          double v121 = 0;
        }
        double v122 = &v117[(void)v121];
        uint64_t v123 = (char *)v121 + v120;
        uint64_t v124 = &v117[(void)v121];
        *uint64_t v124 = HIBYTE(v102);
        long long v100 = v124 + 1;
        if (v104 == (unsigned char *)v116)
        {
          float v49 = v101;
          *((void *)v101 + 7) = v122;
          *((void *)v101 + 8) = v100;
          *((void *)v101 + 9) = v123;
        }
        else
        {
          uint64_t v125 = &v104[~v116];
          do
          {
            char v126 = *--v104;
            (v125--)[(void)v121] = v126;
          }
          while (v104 != (unsigned char *)v116);
          float v49 = v101;
          char v104 = (unsigned char *)*((void *)v101 + 7);
          *((void *)v101 + 7) = v121;
          *((void *)v101 + 8) = v100;
          *((void *)v101 + 9) = v123;
          if (!v104) {
            goto LABEL_205;
          }
        }
        operator delete(v104);
      }
      else
      {
        *char v104 = HIBYTE(v102);
        long long v100 = v104 + 1;
      }
LABEL_205:
      *((void *)v49 + 8) = v100;
      if (++v98 == 8)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        v127 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v128 = *((_DWORD *)v49 + 16) - *((_DWORD *)v49 + 14);
          *(_DWORD *)uint64_t buf = 67109120;
          int v254 = v128;
          _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplSlpServerIpv6Addr.size,%d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10234A020);
          }
          v225 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v225);
          if (v225 != (char *)buf) {
            free(v225);
          }
        }
        if (*((void *)v49 + 8) != *((void *)v49 + 7))
        {
          unint64_t v129 = 0;
          do
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10234A020);
            }
            int v130 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
            {
              int v131 = *(unsigned __int8 *)(*v99 + v129);
              *(_DWORD *)uint64_t buf = 67109376;
              int v254 = v129;
              __int16 v255 = 1024;
              int v256 = v131;
              _os_log_impl((void *)&_mh_execute_header, v130, OS_LOG_TYPE_DEBUG, "tlv.suplSlpServerIpv6Addr[%d],%x", buf, 0xEu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_10234A020);
              }
              BOOL v132 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v132);
              if (v132 != (char *)buf) {
                free(v132);
              }
            }
            ++v129;
          }
          while (*((void *)v49 + 8) - *((void *)v49 + 7) > v129);
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        v133 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v134 = *((_DWORD *)a15 + 2) - *(_DWORD *)a15;
          *(_DWORD *)uint64_t buf = 67109120;
          int v254 = v134;
          _os_log_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_DEBUG, "Supl,suplSlpServerUrl.size,%d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10234A020);
          }
          v226 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v226);
          if (v226 != (char *)buf) {
            free(v226);
          }
        }
        unint64_t v135 = *(char **)a15;
        uint64_t v136 = (char *)*((void *)a15 + 1);
        if (v136 == *(char **)a15)
        {
          unint64_t v140 = 0;
        }
        else
        {
          unint64_t v137 = 0;
          do
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10234A020);
            }
            int v138 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
            {
              int v139 = *(unsigned __int8 *)(*(void *)a15 + v137);
              *(_DWORD *)uint64_t buf = 67109376;
              int v254 = v137;
              __int16 v255 = 1024;
              int v256 = v139;
              _os_log_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_DEBUG, "suplSlpServerUrl[%d],%x", buf, 0xEu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_10234A020);
              }
              int v141 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v141);
              if (v141 != (char *)buf) {
                free(v141);
              }
            }
            ++v137;
            unint64_t v135 = *(char **)a15;
            uint64_t v136 = (char *)*((void *)a15 + 1);
            unint64_t v140 = (unint64_t)&v136[-*(void *)a15];
          }
          while (v140 > v137);
        }
        if (v49 + 80 != a15) {
          sub_100A60544((void *)v49 + 10, v135, v136, v140);
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        double v142 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v143 = *((_DWORD *)v49 + 22) - *((_DWORD *)v49 + 20);
          *(_DWORD *)uint64_t buf = 67109120;
          int v254 = v143;
          _os_log_impl((void *)&_mh_execute_header, v142, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplSlpServerUrl.size,%d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10234A020);
          }
          v227 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v227);
          if (v227 != (char *)buf) {
            free(v227);
          }
        }
        if (*((void *)v49 + 11) != *((void *)v49 + 10))
        {
          unint64_t v144 = 0;
          do
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10234A020);
            }
            int v145 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
            {
              int v146 = *(unsigned __int8 *)(*((void *)v49 + 10) + v144);
              *(_DWORD *)uint64_t buf = 67109376;
              int v254 = v144;
              __int16 v255 = 1024;
              int v256 = v146;
              _os_log_impl((void *)&_mh_execute_header, v145, OS_LOG_TYPE_DEBUG, "tlv.suplSlpServerUrl[%d],%x", buf, 0xEu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_10234A020);
              }
              uint64_t v147 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v147);
              if (v147 != (char *)buf) {
                free(v147);
              }
            }
            ++v144;
          }
          while (*((void *)v49 + 11) - *((void *)v49 + 10) > v144);
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        uint64_t v148 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v149 = *a16;
          *(_DWORD *)uint64_t buf = 67109120;
          int v254 = v149;
          _os_log_impl((void *)&_mh_execute_header, v148, OS_LOG_TYPE_DEBUG, "Supl,suplDcs,%d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10234A020);
          }
          v228 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v228);
          if (v228 != (char *)buf) {
            free(v228);
          }
        }
        v49[104] = *a16;
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        double v150 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v151 = v49[104];
          *(_DWORD *)uint64_t buf = 67109120;
          int v254 = v151;
          _os_log_impl((void *)&_mh_execute_header, v150, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplDcs,%d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10234A020);
          }
          v229 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v229);
          if (v229 != (char *)buf) {
            free(v229);
          }
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        double v152 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v153 = *a17;
          *(_DWORD *)uint64_t buf = 67109120;
          int v254 = v153;
          _os_log_impl((void *)&_mh_execute_header, v152, OS_LOG_TYPE_DEBUG, "Supl,suplRequestorIdDcs,%d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10234A020);
          }
          v230 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v230);
          if (v230 != (char *)buf) {
            free(v230);
          }
        }
        v49[105] = *a17;
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        uint64_t v154 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v155 = v49[105];
          *(_DWORD *)uint64_t buf = 67109120;
          int v254 = v155;
          _os_log_impl((void *)&_mh_execute_header, v154, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplRequestorIdDcs,%d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10234A020);
          }
          v231 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v231);
          if (v231 != (char *)buf) {
            free(v231);
          }
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        uint64_t v156 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v157 = *((_DWORD *)a18 + 2) - *(_DWORD *)a18;
          *(_DWORD *)uint64_t buf = 67109120;
          int v254 = v157;
          _os_log_impl((void *)&_mh_execute_header, v156, OS_LOG_TYPE_DEBUG, "Supl,suplRequestorId.size,%d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10234A020);
          }
          v232 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v232);
          if (v232 != (char *)buf) {
            free(v232);
          }
        }
        double v158 = *(char **)a18;
        double v159 = (char *)*((void *)a18 + 1);
        if (v159 == *(char **)a18)
        {
          unint64_t v163 = 0;
        }
        else
        {
          unint64_t v160 = 0;
          do
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10234A020);
            }
            uint64_t v161 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
            {
              int v162 = *(unsigned __int8 *)(*(void *)a18 + v160);
              *(_DWORD *)uint64_t buf = 67109376;
              int v254 = v160;
              __int16 v255 = 1024;
              int v256 = v162;
              _os_log_impl((void *)&_mh_execute_header, v161, OS_LOG_TYPE_DEBUG, "suplRequestorId[%d],%x", buf, 0xEu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_10234A020);
              }
              v164 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v164);
              if (v164 != (char *)buf) {
                free(v164);
              }
            }
            ++v160;
            double v158 = *(char **)a18;
            double v159 = (char *)*((void *)a18 + 1);
            unint64_t v163 = (unint64_t)&v159[-*(void *)a18];
          }
          while (v163 > v160);
        }
        if (v49 + 112 != a18) {
          sub_100A60544((void *)v49 + 14, v158, v159, v163);
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        v165 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v166 = *((_DWORD *)v49 + 30) - *((_DWORD *)v49 + 28);
          *(_DWORD *)uint64_t buf = 67109120;
          int v254 = v166;
          _os_log_impl((void *)&_mh_execute_header, v165, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplRequestorId.size,%d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10234A020);
          }
          v233 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v233);
          if (v233 != (char *)buf) {
            free(v233);
          }
        }
        if (*((void *)v49 + 15) != *((void *)v49 + 14))
        {
          unint64_t v167 = 0;
          do
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10234A020);
            }
            uint64_t v168 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
            {
              int v169 = *(unsigned __int8 *)(*((void *)v49 + 14) + v167);
              *(_DWORD *)uint64_t buf = 67109376;
              int v254 = v167;
              __int16 v255 = 1024;
              int v256 = v169;
              _os_log_impl((void *)&_mh_execute_header, v168, OS_LOG_TYPE_DEBUG, "tlv.suplRequestorId[%d],%x", buf, 0xEu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_10234A020);
              }
              uint64_t v170 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v170);
              if (v170 != (char *)buf) {
                free(v170);
              }
            }
            ++v167;
          }
          while (*((void *)v49 + 15) - *((void *)v49 + 14) > v167);
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        __int16 v171 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v172 = *a19;
          *(_DWORD *)uint64_t buf = 67109120;
          int v254 = v172;
          _os_log_impl((void *)&_mh_execute_header, v171, OS_LOG_TYPE_DEBUG, "Supl,suplClientNameDcs,%d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10234A020);
          }
          v234 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v234);
          if (v234 != (char *)buf) {
            free(v234);
          }
        }
        v49[136] = *a19;
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        __int16 v173 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v174 = v49[136];
          *(_DWORD *)uint64_t buf = 67109120;
          int v254 = v174;
          _os_log_impl((void *)&_mh_execute_header, v173, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplClientNameDcs,%d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10234A020);
          }
          v235 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v235);
          if (v235 != (char *)buf) {
            free(v235);
          }
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        __int16 v175 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v176 = *((_DWORD *)a20 + 2) - *(_DWORD *)a20;
          *(_DWORD *)uint64_t buf = 67109120;
          int v254 = v176;
          _os_log_impl((void *)&_mh_execute_header, v175, OS_LOG_TYPE_DEBUG, "Supl,suplClientName.size,%d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10234A020);
          }
          v236 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v236);
          if (v236 != (char *)buf) {
            free(v236);
          }
        }
        __int16 v177 = *(char **)a20;
        int v178 = (char *)*((void *)a20 + 1);
        if (v178 == *(char **)a20)
        {
          unint64_t v182 = 0;
        }
        else
        {
          unint64_t v179 = 0;
          do
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10234A020);
            }
            double v180 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
            {
              int v181 = *(unsigned __int8 *)(*(void *)a20 + v179);
              *(_DWORD *)uint64_t buf = 67109376;
              int v254 = v179;
              __int16 v255 = 1024;
              int v256 = v181;
              _os_log_impl((void *)&_mh_execute_header, v180, OS_LOG_TYPE_DEBUG, "suplClientName[%d],%x", buf, 0xEu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_10234A020);
              }
              __int16 v183 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v183);
              if (v183 != (char *)buf) {
                free(v183);
              }
            }
            ++v179;
            __int16 v177 = *(char **)a20;
            int v178 = (char *)*((void *)a20 + 1);
            unint64_t v182 = (unint64_t)&v178[-*(void *)a20];
          }
          while (v182 > v179);
        }
        if (v49 + 144 != a20) {
          sub_100A60544((void *)v49 + 18, v177, v178, v182);
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        uint64_t v184 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v185 = *((_DWORD *)v49 + 38) - *((_DWORD *)v49 + 36);
          *(_DWORD *)uint64_t buf = 67109120;
          int v254 = v185;
          _os_log_impl((void *)&_mh_execute_header, v184, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplClientName.size,%d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10234A020);
          }
          v237 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v237);
          if (v237 != (char *)buf) {
            free(v237);
          }
        }
        if (*((void *)v49 + 19) != *((void *)v49 + 18))
        {
          unint64_t v186 = 0;
          do
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10234A020);
            }
            __int16 v187 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
            {
              int v188 = *(unsigned __int8 *)(*((void *)v49 + 18) + v186);
              *(_DWORD *)uint64_t buf = 67109376;
              int v254 = v186;
              __int16 v255 = 1024;
              int v256 = v188;
              _os_log_impl((void *)&_mh_execute_header, v187, OS_LOG_TYPE_DEBUG, "tlv.suplClientName[%d],%x", buf, 0xEu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_10234A020);
              }
              __int16 v189 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v189);
              if (v189 != (char *)buf) {
                free(v189);
              }
            }
            ++v186;
          }
          while (*((void *)v49 + 19) - *((void *)v49 + 18) > v186);
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        uint64_t v190 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v191 = *a21;
          *(_DWORD *)uint64_t buf = 67109120;
          int v254 = v191;
          _os_log_impl((void *)&_mh_execute_header, v190, OS_LOG_TYPE_DEBUG, "Supl,suplQopHorizAcc,%d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10234A020);
          }
          v238 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v238);
          if (v238 != (char *)buf) {
            free(v238);
          }
        }
        v49[168] = *a21;
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        uint64_t v192 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v193 = v49[168];
          *(_DWORD *)uint64_t buf = 67109120;
          int v254 = v193;
          _os_log_impl((void *)&_mh_execute_header, v192, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplQopHorizAcc,%d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10234A020);
          }
          v239 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v239);
          if (v239 != (char *)buf) {
            free(v239);
          }
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        int v194 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v195 = *a22;
          *(_DWORD *)uint64_t buf = 67109120;
          int v254 = v195;
          _os_log_impl((void *)&_mh_execute_header, v194, OS_LOG_TYPE_DEBUG, "Supl,suplQopVertzAcc,%d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10234A020);
          }
          v240 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v240);
          if (v240 != (char *)buf) {
            free(v240);
          }
        }
        v49[169] = *a22;
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        v196 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v197 = v49[169];
          *(_DWORD *)uint64_t buf = 67109120;
          int v254 = v197;
          _os_log_impl((void *)&_mh_execute_header, v196, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplQopVertzAcc,%d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10234A020);
          }
          v241 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v241);
          if (v241 != (char *)buf) {
            free(v241);
          }
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        v198 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v199 = *a23;
          *(_DWORD *)uint64_t buf = 67109120;
          int v254 = v199;
          _os_log_impl((void *)&_mh_execute_header, v198, OS_LOG_TYPE_DEBUG, "Supl,suplQopMaxLocAge,%d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10234A020);
          }
          v242 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v242);
          if (v242 != (char *)buf) {
            free(v242);
          }
        }
        v49[170] = *a23;
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        v200 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v201 = v49[170];
          *(_DWORD *)uint64_t buf = 67109120;
          int v254 = v201;
          _os_log_impl((void *)&_mh_execute_header, v200, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplQopMaxLocAge,%d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10234A020);
          }
          v243 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v243);
          if (v243 != (char *)buf) {
            free(v243);
          }
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        v202 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v203 = *a24;
          *(_DWORD *)uint64_t buf = 67109120;
          int v254 = v203;
          _os_log_impl((void *)&_mh_execute_header, v202, OS_LOG_TYPE_DEBUG, "Supl,suplQopDelay,%d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10234A020);
          }
          v244 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v244);
          if (v244 != (char *)buf) {
            free(v244);
          }
        }
        v49[171] = *a24;
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234A020);
        }
        v204 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v205 = v49[171];
          *(_DWORD *)uint64_t buf = 67109120;
          int v254 = v205;
          _os_log_impl((void *)&_mh_execute_header, v204, OS_LOG_TYPE_DEBUG, "Supl,tlv.suplQopDelay,%d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10234A020);
          }
          v245 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "pds::sendSuplNiResponse::Request pds::stuffMsgNiResponse(BOOL, BOOL, BOOL, BOOL, const uint32_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint32_t &, const uint32_t &, const uint32_t &, const uint32_t &, const IPv6Address_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const std::vector<uint8_t> &, const uint8_t &, const uint8_t &, const uint8_t &, const uint8_t &, const std::vector<uint8_t> &, const qmi::pds::SuplTriggerType &, const qmi::pds::SubscriptionId &, const qmi::pds::SuplCertIndex &, const BOOL &, const uint64_t &)", "%s\n", v245);
          if (v245 != (char *)buf) {
            free(v245);
          }
        }
        break;
      }
    }
  }
  if (v249 && a4) {
    *(_DWORD *)sub_1019CE4F0(v250, 19) = *a26;
  }
  if (v249 && *a28 != 255) {
    *sub_1019CE734(v250, 21) = *a28;
  }
  if (v249 && *a29) {
    *(void *)sub_1019CE970(v250, 23) = *a30;
  }
  if (v249)
  {
    if (*a27 != 255) {
      *(_DWORD *)sub_1019CEBB4(v250, 24) = *a27;
    }
  }
}

void sub_1019C3A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, qmi::MutableMessageBase *a20)
{
}

void sub_1019C3B9C(int a1@<W0>, int a2@<W1>, uint64_t *a3@<X2>, qmi::MutableMessageBase *a4@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a4, 0x78u);
  *(_DWORD *)sub_1019CEDF8((uint64_t)a4, 1) = a1;
  unsigned __int8 v8 = sub_1019CF03C((uint64_t)a4, 16);
  *(_DWORD *)unsigned __int8 v8 = a2;
  int v9 = v8 + 8;
  if (*((char *)a3 + 23) < 0) {
    unint64_t v10 = a3[1];
  }
  else {
    unint64_t v10 = *((unsigned __int8 *)a3 + 23);
  }
  uint64_t v11 = *((void *)v8 + 1);
  unint64_t v12 = *((void *)v8 + 2) - v11;
  if (v10 <= v12)
  {
    if (v10 < v12) {
      *((void *)v8 + 2) = v11 + v10;
    }
  }
  else
  {
    sub_1004BFB3C((unint64_t *)v8 + 1, v10 - v12);
  }
  for (unint64_t i = 0; ; ++i)
  {
    unint64_t v14 = *((char *)a3 + 23) < 0 ? a3[1] : *((unsigned __int8 *)a3 + 23);
    if (v14 <= i) {
      break;
    }
    char v15 = a3;
    if ((*((unsigned char *)a3 + 23) & 0x80) != 0) {
      char v15 = (uint64_t *)*a3;
    }
    *(unsigned char *)(*v9 + i) = *((unsigned char *)v15 + i);
  }
}

void sub_1019C3C80(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1019C3C98(unsigned int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X3>, qmi::MutableMessageBase *a5@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a5, 0x78u);
  *(_DWORD *)sub_1019CEDF8((uint64_t)a5, 1) = a2;
  unint64_t v10 = sub_1019CF03C((uint64_t)a5, 16);
  *(_DWORD *)unint64_t v10 = a3;
  uint64_t v11 = v10 + 8;
  if (*((char *)a4 + 23) < 0) {
    unint64_t v12 = a4[1];
  }
  else {
    unint64_t v12 = *((unsigned __int8 *)a4 + 23);
  }
  uint64_t v13 = *((void *)v10 + 1);
  unint64_t v14 = *((void *)v10 + 2) - v13;
  if (v12 <= v14)
  {
    if (v12 < v14) {
      *((void *)v10 + 2) = v13 + v12;
    }
  }
  else
  {
    sub_1004BFB3C((unint64_t *)v10 + 1, v12 - v14);
  }
  for (unint64_t i = 0; ; ++i)
  {
    unint64_t v16 = *((char *)a4 + 23) < 0 ? a4[1] : *((unsigned __int8 *)a4 + 23);
    if (v16 <= i) {
      break;
    }
    uint64_t v17 = a4;
    if ((*((unsigned char *)a4 + 23) & 0x80) != 0) {
      uint64_t v17 = (uint64_t *)*a4;
    }
    *(unsigned char *)(*v11 + i) = *((unsigned char *)v17 + i);
  }
  if (a1 < 2) {
    *(_DWORD *)sub_1019CEBB4((uint64_t)a5, 19) = a1 != 0;
  }
}

void sub_1019C3DA8(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1019C3DC4@<X0>(int a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a2, 0x83u);
  uint64_t result = sub_1019CF460((uint64_t)a2, 1);
  *(_DWORD *)uint64_t result = a1;
  return result;
}

void sub_1019C3E04(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1019C3E18@<X0>(int a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a2, 0x7Eu);
  uint64_t result = sub_1019CF6A4((uint64_t)a2, 1);
  *(_DWORD *)uint64_t result = a1;
  return result;
}

void sub_1019C3E58(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1019C3E6C@<X0>(char a1@<W0>, char a2@<W1>, qmi::MutableMessageBase *a3@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a3, 0x8Au);
  *sub_1019CF8E8((uint64_t)a3, 16) = a1;
  uint64_t result = sub_1019CFB24((uint64_t)a3, 17);
  *uint64_t result = a2;
  return result;
}

void sub_1019C3EC8(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1019C3EE0@<X0>(char a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a2, 0x93u);
  uint64_t result = sub_1019CFD60((uint64_t)a2, 1);
  *uint64_t result = a1;
  return result;
}

void sub_1019C3F20(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1019C3F34@<X0>(qmi::MutableMessageBase *a1@<X8>)
{
  return qmi::MutableMessageBase::MutableMessageBase(a1, 0x84u);
}

char *sub_1019C3F40@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, char a4@<W3>, qmi::MutableMessageBase *a5@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a5, 0x74u);
  uint64_t result = sub_1019CFF9C((uint64_t)a5, 1);
  *(_DWORD *)uint64_t result = a1;
  *((_DWORD *)result + 1) = a2;
  *((_DWORD *)result + 2) = a3;
  result[12] = a4;
  return result;
}

void sub_1019C3FA4(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1019C3FB8@<X0>(int a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, qmi::MutableMessageBase *a4@<X8>, float a5@<S0>, float a6@<S1>)
{
  qmi::MutableMessageBase::MutableMessageBase(a4, 0x66u);
  uint64_t result = sub_1019D0270((uint64_t)a4, 1);
  *(_DWORD *)uint64_t result = a1;
  *((void *)result + 1) = a2;
  *((float *)result + 4) = a5;
  *((float *)result + 5) = a6;
  result[24] = a3;
  return result;
}

void sub_1019C4024(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1019C4038@<X0>(int a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a2, 0x5Fu);
  uint64_t result = sub_1019D05E8((uint64_t)a2, 16);
  *(_DWORD *)uint64_t result = a1;
  return result;
}

void sub_1019C4078(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1019C408C@<X0>(char a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a2, 0xA1u);
  uint64_t result = sub_1019D082C((uint64_t)a2, 1);
  *uint64_t result = a1;
  return result;
}

void sub_1019C40CC(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1019C40E0@<X0>(char a1@<W0>, uint64_t a2@<X1>, qmi::MutableMessageBase *a3@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a3, 0xA9u);
  *sub_1019D0A68((uint64_t)a3, 1) = a1;
  uint64_t result = sub_1019D0CA4((uint64_t)a3, 16);
  *(void *)uint64_t result = a2;
  return result;
}

void sub_1019C413C(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1019C4154@<X0>(uint64_t a1@<X0>, qmi::MutableMessageBase *a2@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a2, 0x8Bu);
  int v4 = sub_1019D0EE8((uint64_t)a2, 16);
  if (v4 != (char *)a1) {
    sub_1019C50D4(v4, *(char **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1);
  }
  uint64_t v5 = sub_1019D12E4((uint64_t)a2, 17);
  if (v5 != (char *)(a1 + 120)) {
    sub_1019C50D4(v5, *(char **)(a1 + 120), *(void *)(a1 + 128), (uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 1);
  }
  int v6 = sub_1019D1628((uint64_t)a2, 18);
  if (v6 != (char *)(a1 + 24)) {
    sub_1019C50D4(v6, *(char **)(a1 + 24), *(void *)(a1 + 32), (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 1);
  }
  char v7 = sub_1019D196C((uint64_t)a2, 19);
  if (v7 != (char *)(a1 + 144)) {
    sub_1019C50D4(v7, *(char **)(a1 + 144), *(void *)(a1 + 152), (uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 1);
  }
  unsigned __int8 v8 = sub_1019D1CB0((uint64_t)a2, 22);
  if (v8 != (char *)(a1 + 48)) {
    sub_1019C50D4(v8, *(char **)(a1 + 48), *(void *)(a1 + 56), (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 1);
  }
  int v9 = sub_1019D1FF4((uint64_t)a2, 23);
  if (v9 != (char *)(a1 + 168)) {
    sub_1019C50D4(v9, *(char **)(a1 + 168), *(void *)(a1 + 176), (uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 1);
  }
  unint64_t v10 = sub_1019D2338((uint64_t)a2, 24);
  if (v10 != (char *)(a1 + 96)) {
    sub_1019C50D4(v10, *(char **)(a1 + 96), *(void *)(a1 + 104), (uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 1);
  }
  uint64_t v11 = sub_1019D267C((uint64_t)a2, 25);
  if (v11 != (char *)(a1 + 216)) {
    sub_1019C50D4(v11, *(char **)(a1 + 216), *(void *)(a1 + 224), (uint64_t)(*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 1);
  }
  unint64_t v12 = sub_1019D29C0((uint64_t)a2, 26);
  if (v12 != (char *)(a1 + 72)) {
    sub_1019C50D4(v12, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 1);
  }
  uint64_t result = sub_1019D2D04((uint64_t)a2, 27);
  if (result != (char *)(a1 + 192)) {
    return sub_1019C50D4(result, *(char **)(a1 + 192), *(void *)(a1 + 200), (uint64_t)(*(void *)(a1 + 200) - *(void *)(a1 + 192)) >> 1);
  }
  return result;
}

void sub_1019C4310(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

void *sub_1019C4348@<X0>(char a1@<W0>, uint64_t a2@<X1>, qmi::MutableMessageBase *a3@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a3, 0x67u);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_1019C4468;
  void v10[3] = &unk_102349F40;
  char v11 = a1;
  int v6 = sub_1019CE734((uint64_t)a3, 1);
  sub_1019C4468((uint64_t)v10, v6);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1019C4474;
  void v9[3] = &unk_1022C1698;
  void v9[4] = a2;
  char v7 = (unint64_t *)sub_1019D3048((uint64_t)a3, 2);
  return sub_1019C4474((uint64_t)v9, v7);
}

void sub_1019C4454(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1019C4468(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void *sub_1019C4474(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8) - **(void **)(a1 + 32);
  unint64_t v5 = a2[1] - *a2;
  if (v4 <= v5)
  {
    if (v4 < v5) {
      a2[1] = *a2 + v4;
    }
  }
  else
  {
    sub_1004BFB3C(a2, v4 - v5);
  }
  int v6 = *(char ***)(a1 + 32);
  char v7 = *v6;
  unsigned __int8 v8 = v6[1];
  unint64_t v9 = v8 - *v6;

  return sub_10008ABCC(a2, v7, v8, v9);
}

uint64_t sub_1019C44EC@<X0>(char a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a2, 0x68u);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[3] = &unk_102349F40;
  char v7 = a1;
  unint64_t v4 = sub_1019CE734((uint64_t)a2, 16);
  return sub_1019C45A4((uint64_t)v6, v4);
}

void sub_1019C4590(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1019C45A4(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t sub_1019C45B0@<X0>(char a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a2, 0x98u);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[3] = &unk_102349F60;
  char v7 = a1;
  unint64_t v4 = sub_1019D3400((uint64_t)a2, 1);
  return sub_1019C4668((uint64_t)v6, v4);
}

void sub_1019C4654(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1019C4668(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

signed int sub_1019C4674(signed int a1, signed int a2, int a3, float a4)
{
  signed int result = llroundf(a4 * 10.0);
  if (result < a1 || result > a2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234A020);
    }
    unint64_t v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134349568;
      double v13 = a4;
      __int16 v14 = 1026;
      signed int v15 = a1;
      __int16 v16 = 1026;
      signed int v17 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "tenth dB value is out of range,input,%{public}.3f,range,%{public}d,%{public}d", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      char v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "int convertToTenthDbAndValidateRange(float, int, int, int)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    return a3;
  }
  return result;
}

uint64_t sub_1019C4888@<X0>(uint64_t a1@<X0>, qmi::MutableMessageBase *a2@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a2, 0x65u);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_1019C4A04;
  void v10[3] = &unk_102349F80;
  void v10[4] = a1;
  unint64_t v4 = sub_10186BE68((uint64_t)a2, 1);
  sub_1019C4A04((uint64_t)v10, v4);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1019C4A40;
  void v9[3] = &unk_102349FA0;
  void v9[4] = a1;
  unint64_t v5 = sub_10186C0FC((uint64_t)a2, 16);
  sub_1019C4A40((uint64_t)v9, v5);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1019C4A7C;
  void v8[3] = &unk_102349FC0;
  void v8[4] = a1;
  int v6 = sub_10186BB98((uint64_t)a2, 17);
  return sub_1019C4A7C((uint64_t)v8, v6);
}

void sub_1019C49EC(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1019C4A04(uint64_t a1, _WORD *a2)
{
  uint64_t result = sub_1019C4674(-70, 50, -40, **(float **)(a1 + 32));
  *a2 = result;
  return result;
}

uint64_t sub_1019C4A40(uint64_t a1, _WORD *a2)
{
  uint64_t result = sub_1019C4674(1, 100, 35, *(float *)(*(void *)(a1 + 32) + 4));
  *a2 = result;
  return result;
}

uint64_t sub_1019C4A7C(uint64_t a1, _WORD *a2)
{
  *a2 = sub_1019C4674(1, 100, 35, *(float *)(*(void *)(a1 + 32) + 12));
  a2[1] = sub_1019C4674(1, 100, 35, *(float *)(*(void *)(a1 + 32) + 8));
  uint64_t result = sub_1019C4674(1, 100, 35, *(float *)(*(void *)(a1 + 32) + 16));
  a2[2] = result;
  return result;
}

uint64_t sub_1019C4AF4(char a1, int a2, void *a3, uint64_t a4)
{
  if (!a2 || a3[1] == *a3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234A020);
    }
    unint64_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v19 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid xtra data,xtraLen,%{public}u", buf, 8u);
    }
    uint64_t v6 = 0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234A020);
      }
      int v16 = 67240192;
      int v17 = a2;
      char v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL pds::stuffXtraData(uint8_t, uint32_t, const std::vector<uint8_t> &, pds::injectXTRAData::Request &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
      return 0;
    }
  }
  else
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_1019C4D94;
    void v14[3] = &unk_102349FE0;
    char v15 = a1;
    void v14[4] = a3;
    uint64_t v6 = 1;
    char v7 = sub_1019D363C(a4, 1);
    sub_1019C4D94((uint64_t)v14, (uint64_t)v7);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    _OWORD v12[2] = sub_1019C4DC0;
    void v12[3] = &unk_10234A000;
    int v13 = a2;
    unsigned __int8 v8 = sub_1019D3A68(a4, 16);
    sub_1019C4DC0((uint64_t)v12, v8);
  }
  return v6;
}

void *sub_1019C4D94(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a2 = *(unsigned char *)(a1 + 40);
  *(_WORD *)(a2 + 2) = 0;
  int v2 = *(char ***)(a1 + 32);
  uint64_t result = (void *)(a2 + 8);
  if ((char **)(a2 + 8) != v2) {
    return sub_100A60544(result, *v2, v2[1], v2[1] - *v2);
  }
  return result;
}

uint64_t sub_1019C4DC0(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

char *sub_1019C4DCC@<X0>(char a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a2, 0xB7u);
  uint64_t result = sub_1019D3CAC((uint64_t)a2, 16);
  *uint64_t result = a1;
  return result;
}

void sub_1019C4E0C(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

char *sub_1019C4E20@<X0>(int a1@<W0>, qmi::MutableMessageBase *a2@<X8>)
{
  qmi::MutableMessageBase::MutableMessageBase(a2, 0xC0u);
  *sub_1019D3EE8((uint64_t)a2, 1) = 0;
  uint64_t result = sub_1019D4124((uint64_t)a2, 16);
  *(_DWORD *)uint64_t result = a1;
  return result;
}

void sub_1019C4E70(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1019C4E88(int a1@<W0>, int a2@<W1>, qmi::MutableMessageBase *a3@<X8>)
{
  uint64_t v6 = qmi::MutableMessageBase::MutableMessageBase(a3, 0xE0u);
  char v7 = sub_1019D4368(v6, 1);
  unsigned __int8 v8 = sub_1019D45A4((uint64_t)a3, 2);
  *char v7 = a1;
  *unsigned __int8 v8 = a2;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10234A020);
  }
  unint64_t v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67240448;
    int v12 = a1;
    __int16 v13 = 1026;
    int v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "stuffMsgGetTimingAdvance,requested rat,%{public}d,sub_id,%{public}d,for this platforms", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234A020);
    }
    unint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "pds::getTimingAdvance::Request pds::stuffMsgGetTimingAdvance(uint8_t, uint8_t)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
}

void sub_1019C5088(_Unwind_Exception *a1)
{
  qmi::MutableMessageBase::~MutableMessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1019C50A4(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

char *sub_1019C50D4(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  char v7 = result;
  unint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(void *)result) >> 1)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *char v7 = 0;
      v7[1] = 0;
      _DWORD v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      sub_1001D7FD4();
    }
    if (v8 <= a4) {
      unint64_t v10 = a4;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v10;
    }
    uint64_t result = sub_100C3D5A0(v7, v11);
    __int16 v13 = (char *)v7[1];
    int v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_17:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      int v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  int v12 = (void **)(result + 8);
  int v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 1;
  if (v15 >= a4) {
    goto LABEL_17;
  }
  int v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    int v19 = v16;
LABEL_19:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  *int v12 = &v9[v17];
  return result;
}

char *sub_1019C51D8(uint64_t a1, int a2)
{
  int v2 = *(const void ***)(a1 + 8);
  int v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C5288();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019C5288()
{
}

void sub_1019C53B8()
{
}

char *sub_1019C5414(uint64_t a1, int a2)
{
  int v2 = *(const void ***)(a1 + 8);
  int v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C54C4();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019C54C4()
{
}

void sub_1019C55F4()
{
}

char *sub_1019C5658(uint64_t a1, int a2)
{
  int v2 = *(const void ***)(a1 + 8);
  int v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C5708();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019C5708()
{
}

void sub_1019C5838()
{
}

char *sub_1019C589C(uint64_t a1, int a2)
{
  int v2 = *(const void ***)(a1 + 8);
  int v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C594C();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019C594C()
{
}

void sub_1019C5A7C()
{
}

char *sub_1019C5AE0(uint64_t a1, int a2)
{
  int v2 = *(const void ***)(a1 + 8);
  int v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C5B90();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019C5B90()
{
}

void sub_1019C5CC0()
{
}

char *sub_1019C5D24(uint64_t a1, int a2)
{
  int v2 = *(const void ***)(a1 + 8);
  int v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C5DD4();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019C5DD4()
{
}

void sub_1019C5F04()
{
}

char *sub_1019C5F68(uint64_t a1, int a2)
{
  int v2 = *(const void ***)(a1 + 8);
  int v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C6018();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019C6018()
{
}

void sub_1019C6148()
{
}

char *sub_1019C61AC(uint64_t a1, int a2)
{
  int v2 = *(const void ***)(a1 + 8);
  int v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C625C();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019C625C()
{
}

void sub_1019C638C()
{
}

char *sub_1019C63F0(uint64_t a1, int a2)
{
  int v2 = *(const void ***)(a1 + 8);
  int v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C64A0();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019C64A0()
{
}

void sub_1019C65D0()
{
}

char *sub_1019C6634(uint64_t a1, int a2)
{
  int v2 = *(const void ***)(a1 + 8);
  int v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C66E4();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019C66E4()
{
}

void sub_1019C6814()
{
}

char *sub_1019C6878(uint64_t a1, int a2)
{
  int v2 = *(const void ***)(a1 + 8);
  int v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C6928();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019C6928()
{
}

void sub_1019C6A5C()
{
}

uint64_t sub_1019C6A70()
{
  return 13;
}

uint64_t sub_1019C6A78(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *a2 += 3;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 12);
  uint64_t v4 = (*a2)++;
  *(unsigned char *)(v4 + 1) = *(unsigned char *)(result + 13);
  uint64_t v5 = (*a2)++;
  *(_DWORD *)(v5 + 1) = *(_DWORD *)(result + 16);
  uint64_t v6 = *a2;
  *a2 += 4;
  *(_DWORD *)(v6 + 4) = *(_DWORD *)(result + 20);
  uint64_t v7 = *a2 + 4;
  *a2 = v7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = v7 - (v3 + 3);
  return result;
}

void sub_1019C6AF0()
{
}

char *sub_1019C6B5C(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C6C0C();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019C6C0C()
{
}

void sub_1019C6D3C()
{
}

char *sub_1019C6D98(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C6E48();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019C6E48()
{
}

void sub_1019C6F7C()
{
}

uint64_t sub_1019C6F90(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *a2 += 3;
  *(void *)(v3 + 3) = *(void *)(result + 16);
  uint64_t v4 = *a2;
  *a2 += 8;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(result + 24);
  uint64_t v5 = *a2;
  *a2 += 4;
  *(unsigned char *)(v5 + 4) = *(unsigned char *)(result + 28);
  uint64_t v6 = (*a2)++;
  *(unsigned char *)(v6 + 1) = *(unsigned char *)(result + 29);
  uint64_t v7 = *a2 + 1;
  *a2 = v7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = v7 - (v3 + 3);
  return result;
}

void sub_1019C7008()
{
}

char *sub_1019C706C(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C711C();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019C711C()
{
}

void sub_1019C7250()
{
}

uint64_t sub_1019C7264()
{
  return 15;
}

uint64_t sub_1019C726C(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *a2 += 3;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  uint64_t v4 = *a2;
  *a2 += 4;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(result + 16);
  uint64_t v5 = *a2;
  *a2 += 4;
  *(_DWORD *)(v5 + 4) = *(_DWORD *)(result + 20);
  uint64_t v6 = *a2 + 4;
  *a2 = v6;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = v6 - (v3 + 3);
  return result;
}

void sub_1019C72D0()
{
}

char *sub_1019C733C(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C73EC();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019C73EC()
{
}

void sub_1019C751C()
{
}

char *sub_1019C7578(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C7628();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019C7628()
{
}

void sub_1019C7758()
{
}

char *sub_1019C77BC(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C786C();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019C786C()
{
}

void sub_1019C799C()
{
}

char *sub_1019C7A00(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C7AB0();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019C7AB0()
{
}

void sub_1019C7BE0()
{
}

char *sub_1019C7C44(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C7CF4();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019C7CF4()
{
}

void sub_1019C7E24()
{
}

char *sub_1019C7E88(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C7F38();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019C7F38()
{
}

void sub_1019C8068()
{
}

char *sub_1019C80C4(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C8174();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019C8174()
{
}

void sub_1019C82A4()
{
}

char *sub_1019C8308(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C83B8();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019C83B8()
{
}

void sub_1019C84E8()
{
}

char *sub_1019C854C(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C85FC();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019C85FC()
{
}

void sub_1019C872C()
{
}

char *sub_1019C8790(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C8840();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019C8840()
{
}

void sub_1019C8970()
{
}

char *sub_1019C89D4(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C8A84();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019C8A84()
{
}

void sub_1019C8BB4()
{
}

char *sub_1019C8C18(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C8CC8();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019C8CC8()
{
}

void sub_1019C8DF8()
{
}

char *sub_1019C8E5C(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C8F0C();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019C8F0C()
{
}

void sub_1019C903C()
{
}

char *sub_1019C90A0(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C9150();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019C9150()
{
}

void sub_1019C9280()
{
}

char *sub_1019C92E4(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C9394();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019C9394()
{
}

void sub_1019C94C4()
{
}

char *sub_1019C9520(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C95D0();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019C95D0()
{
}

void sub_1019C9700()
{
}

char *sub_1019C975C(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C980C();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019C980C()
{
}

void sub_1019C993C()
{
}

char *sub_1019C99A0(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C9A50();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019C9A50()
{
}

void sub_1019C9B84()
{
}

uint64_t sub_1019C9B98(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *a2 += 3;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 16);
  uint64_t v4 = *a2;
  *a2 += 4;
  *(void *)(v4 + 4) = *(void *)(result + 24);
  uint64_t v5 = *a2 + 8;
  *a2 = v5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = v5 - (v3 + 3);
  return result;
}

void sub_1019C9BE8()
{
}

char *sub_1019C9C4C(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C9CFC();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019C9CFC()
{
}

void sub_1019C9E30()
{
}

uint64_t sub_1019C9E44(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *a2 += 3;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  uint64_t v4 = *a2;
  *a2 += 4;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(result + 16);
  uint64_t v5 = *a2 + 4;
  *a2 = v5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = v5 - (v3 + 3);
  return result;
}

void sub_1019C9E94()
{
}

char *sub_1019C9EF8(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019C9FA8();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019C9FA8()
{
}

void sub_1019CA0DC()
{
}

char *sub_1019CA140(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CA1F0();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019CA1F0()
{
}

void sub_1019CA324()
{
}

char *sub_1019CA390(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CA440();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019CA440()
{
}

void sub_1019CA570()
{
}

char *sub_1019CA5D4(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CA684();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019CA684()
{
}

void sub_1019CA7B4()
{
}

char *sub_1019CA818(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CA8C8();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019CA8C8()
{
}

void sub_1019CA9F8()
{
}

char *sub_1019CAA5C(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CAB0C();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019CAB0C()
{
}

void sub_1019CAC3C()
{
}

char *sub_1019CACA0(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CAD50();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019CAD50()
{
}

void sub_1019CAE80()
{
}

char *sub_1019CAEE4(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CAF94();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019CAF94()
{
}

void sub_1019CB0C4()
{
}

char *sub_1019CB128(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CB1D8();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019CB1D8()
{
}

void sub_1019CB308()
{
}

char *sub_1019CB36C(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CB41C();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019CB41C()
{
}

void sub_1019CB54C()
{
}

char *sub_1019CB5A8(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CB658();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019CB658()
{
}

void sub_1019CB788()
{
}

char *sub_1019CB7E4(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CB894();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019CB894()
{
}

void sub_1019CB9C4()
{
}

char *sub_1019CBA20(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CBAD0();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019CBAD0()
{
}

void sub_1019CBC00()
{
}

char *sub_1019CBC5C(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CBD0C();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019CBD0C()
{
}

unsigned char *sub_1019CBE3C(unsigned char *result, uint64_t *a2)
{
  char v2 = result[8];
  uint64_t v3 = *a2;
  *a2 += 3;
  *(unsigned char *)(v3 + 3) = result[9];
  uint64_t v4 = (*a2)++;
  *(unsigned char *)(v4 + 1) = result[10];
  uint64_t v5 = *a2 + 1;
  *a2 = v5;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = v5 - (v3 + 3);
  return result;
}

void sub_1019CBE8C()
{
}

char *sub_1019CBEF0(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CBFA0();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019CBFA0()
{
}

uint64_t sub_1019CC0D4()
{
  return 6;
}

unsigned char *sub_1019CC0DC(unsigned char *result, uint64_t *a2)
{
  char v2 = result[8];
  uint64_t v3 = *a2;
  *a2 += 3;
  *(unsigned char *)(v3 + 3) = result[9];
  uint64_t v4 = (*a2)++;
  *(unsigned char *)(v4 + 1) = result[10];
  uint64_t v5 = (*a2)++;
  *(unsigned char *)(v5 + 1) = result[11];
  uint64_t v6 = *a2 + 1;
  *a2 = v6;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = v6 - (v3 + 3);
  return result;
}

void sub_1019CC140()
{
}

char *sub_1019CC1AC(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CC25C();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019CC25C()
{
}

void sub_1019CC390()
{
}

char *sub_1019CC3FC(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CC4AC();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019CC4AC()
{
}

void sub_1019CC5DC()
{
}

char *sub_1019CC638(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CC6E8();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019CC6E8()
{
}

void sub_1019CC81C()
{
}

uint64_t sub_1019CC830(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *a2 += 3;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 12);
  uint64_t v4 = (*a2)++;
  *(unsigned char *)(v4 + 1) = *(unsigned char *)(result + 13);
  uint64_t v5 = (*a2)++;
  *(unsigned char *)(v5 + 1) = *(_DWORD *)(result + 16);
  uint64_t v6 = *a2 + 1;
  *a2 = v6;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = v6 - (v3 + 3);
  return result;
}

void sub_1019CC894()
{
}

char *sub_1019CC8F8(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CC9A8();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 10;
}

void sub_1019CC9A8()
{
}

void sub_1019CCAD8()
{
}

char *sub_1019CCB3C(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CCBEC();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019CCBEC()
{
}

void sub_1019CCD1C()
{
}

char *sub_1019CCD78(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CCE28();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019CCE28()
{
}

void sub_1019CCF58()
{
}

char *sub_1019CCFBC(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CD06C();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019CD06C()
{
}

void sub_1019CD19C()
{
}

char *sub_1019CD1F8(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CD2A8();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019CD2A8()
{
}

void sub_1019CD3E0()
{
}

uint64_t sub_1019CD3F4()
{
  return 14;
}

uint64_t sub_1019CD3FC(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  unint64_t v8 = a2;
  uint64_t v9 = a1 + 12;
  uint64_t result = sub_1019CD4D4((uint64_t)&v9, &v8);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void sub_1019CD468()
{
}

uint64_t sub_1019CD4D4(uint64_t result, void **a2)
{
  *(unsigned char *)(**a2)++ = **(_DWORD **)result;
  char v2 = *(_DWORD **)result;
  *(unsigned char *)(**a2)++ = *(_DWORD *)(*(void *)result + 4);
  *(unsigned char *)(**a2)++ = v2[2];
  *(_DWORD *)**a2 = v2[3];
  **a2 += 4;
  *(_WORD *)**a2 = *((_WORD *)v2 + 8);
  **a2 += 2;
  *(_WORD *)**a2 = *((_WORD *)v2 + 9);
  **a2 += 2;
  return result;
}

char *sub_1019CD5A0(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CD650();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019CD650()
{
}

void sub_1019CD780()
{
}

char *sub_1019CD7DC(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CD88C();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019CD88C()
{
}

void *sub_1019CD9C0(void *a1)
{
  *a1 = off_10234B238;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1019CDA10(void *a1)
{
  *a1 = off_10234B238;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_1019CDA80(uint64_t a1)
{
  return *(void *)(a1 + 24) - *(void *)(a1 + 16) + 4;
}

uint64_t sub_1019CDA90(uint64_t result, void *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *a2 += 3;
  *(unsigned char *)(v3 + 3) = *(_DWORD *)(result + 24) - *(_DWORD *)(result + 16);
  uint64_t v4 = (unsigned char *)(*a2 + 1);
  *a2 = v4;
  uint64_t v5 = *(char **)(result + 16);
  uint64_t v6 = *(char **)(result + 24);
  while (v5 != v6)
  {
    char v7 = *v5++;
    unsigned char *v4 = v7;
    uint64_t v4 = (unsigned char *)(*a2 + 1);
    *a2 = v4;
  }
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = (_WORD)v4 - (v3 + 3);
  return result;
}

void sub_1019CDAF8()
{
}

void sub_1019CDB70()
{
}

void **sub_1019CDB94(void **result, _DWORD *a2)
{
  char v2 = *result;
  *(unsigned char *)**uint64_t result = a2[2] - *a2;
  uint64_t v3 = (unsigned char *)(*v2 + 1);
  *char v2 = v3;
  uint64_t v4 = *(char **)a2;
  uint64_t v5 = (char *)*((void *)a2 + 1);
  while (v4 != v5)
  {
    char v6 = *v4++;
    unsigned char *v3 = v6;
    uint64_t v3 = (unsigned char *)(*v2 + 1);
    *char v2 = v3;
  }
  return result;
}

char *sub_1019CDBE0(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CDC90();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019CDC90()
{
}

void *sub_1019CDE04(void *a1)
{
  *a1 = off_10234B288;
  char v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[9];
  if (v5)
  {
    a1[10] = v5;
    operator delete(v5);
  }
  char v6 = (void *)a1[3];
  if (v6)
  {
    a1[4] = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_1019CDE94(void *a1)
{
  *a1 = off_10234B288;
  char v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[9];
  if (v5)
  {
    a1[10] = v5;
    operator delete(v5);
  }
  char v6 = (void *)a1[3];
  if (v6)
  {
    a1[4] = v6;
    operator delete(v6);
  }

  operator delete();
}

double sub_1019CDF44(uint64_t a1)
{
  int64x2_t v1 = vaddq_s64((int64x2_t)(*(_OWORD *)(a1 + 24) + __PAIR128__(35, 0)), vaddq_s64(vaddq_s64(vaddq_s64(*(int64x2_t *)(a1 + 72), *(int64x2_t *)(a1 + 96)), *(int64x2_t *)(a1 + 128)), *(int64x2_t *)(a1 + 160)));
  *(void *)&double result = vsubq_s64(vdupq_laneq_s64(v1, 1), v1).u64[0];
  return result;
}

void **sub_1019CDF84(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  unint64_t v8 = a2;
  uint64_t v9 = (_DWORD *)(a1 + 16);
  double result = sub_1019CE080(&v9, &v8);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void sub_1019CDFF0()
{
}

void sub_1019CE05C()
{
}

void **sub_1019CE080(_DWORD **a1, void **a2)
{
  *(_DWORD *)**a2 = **a1;
  **a2 += 4;
  char v2 = *a1;
  *(unsigned char *)(**a2)++ = *((unsigned char *)*a1 + 4);
  char v3 = (_DWORD **)*a2;
  uint64_t v4 = (char *)*((void *)v2 + 1);
  uint64_t v5 = (char *)*((void *)v2 + 2);
  if (v4 != v5)
  {
    char v6 = *v3;
    do
    {
      char v7 = *v4++;
      unsigned char *v6 = v7;
      char v6 = (char *)*v3 + 1;
      void *v3 = v6;
    }
    while (v4 != v5);
    char v3 = (_DWORD **)*a2;
  }
  *(unsigned char *)void *v3 = *((unsigned char *)v2 + 32);
  ++**a2;
  uint64_t v9 = v2;
  return sub_1019CE140((uint64_t *)&v9, a2);
}

void **sub_1019CE140(uint64_t *a1, void **a2)
{
  *(_DWORD *)**a2 = *(_DWORD *)(*a1 + 36);
  **a2 += 4;
  uint64_t v2 = *a1;
  *(_DWORD *)**a2 = *(_DWORD *)(*a1 + 40);
  **a2 += 4;
  *(_DWORD *)**a2 = *(_DWORD *)(v2 + 44);
  **a2 += 4;
  *(_DWORD *)**a2 = *(_DWORD *)(v2 + 48);
  **a2 += 4;
  uint64_t v4 = v2;
  return sub_1019CE1F0(&v4, a2);
}

void **sub_1019CE1F0(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(char **)(*a1 + 56);
  uint64_t v5 = *(char **)(*a1 + 64);
  if (v4 != v5)
  {
    char v6 = *a2;
    char v7 = (unsigned char *)**a2;
    do
    {
      char v8 = *v4++;
      *char v7 = v8;
      char v7 = (unsigned char *)(*v6 + 1);
      void *v6 = v7;
    }
    while (v4 != v5);
    uint64_t v3 = *a1;
  }
  sub_1019CDB94(a2, (_DWORD *)(v3 + 80));
  *(unsigned char *)(**a2)++ = *(unsigned char *)(v3 + 104);
  *(unsigned char *)(**a2)++ = *(unsigned char *)(v3 + 105);
  uint64_t v10 = v3;
  return sub_1019CE2AC(&v10, a2);
}

void **sub_1019CE2AC(uint64_t *a1, void **a2)
{
  sub_1019CDB94(a2, (_DWORD *)(*a1 + 112));
  uint64_t v4 = *a1;
  *(unsigned char *)(**a2)++ = *(unsigned char *)(v4 + 136);
  double result = sub_1019CDB94(a2, (_DWORD *)(v4 + 144));
  *(unsigned char *)(**a2)++ = *(unsigned char *)(v4 + 168);
  *(unsigned char *)(**a2)++ = *(unsigned char *)(v4 + 169);
  *(unsigned char *)(**a2)++ = *(unsigned char *)(v4 + 170);
  *(unsigned char *)(**a2)++ = *(unsigned char *)(v4 + 171);
  return result;
}

uint64_t sub_1019CE390(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(unsigned char *)(a1 + 4) = *((unsigned char *)a2 + 4);
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)a1 = v4;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_10016989C((void *)(a1 + 8), *((const void **)a2 + 1), *((void *)a2 + 2), *((void *)a2 + 2) - *((void *)a2 + 1));
  long long v5 = *((_OWORD *)a2 + 2);
  int v6 = a2[12];
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_10016989C((void *)(a1 + 56), *((const void **)a2 + 7), *((void *)a2 + 8), *((void *)a2 + 8) - *((void *)a2 + 7));
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_10016989C((void *)(a1 + 80), *((const void **)a2 + 10), *((void *)a2 + 11), *((void *)a2 + 11) - *((void *)a2 + 10));
  __int16 v7 = *((_WORD *)a2 + 52);
  *(void *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 104) = v7;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  sub_10016989C((void *)(a1 + 112), *((const void **)a2 + 14), *((void *)a2 + 15), *((void *)a2 + 15) - *((void *)a2 + 14));
  char v8 = *((unsigned char *)a2 + 136);
  *(void *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 136) = v8;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  sub_10016989C((void *)(a1 + 144), *((const void **)a2 + 18), *((void *)a2 + 19), *((void *)a2 + 19) - *((void *)a2 + 18));
  *(_DWORD *)(a1 + 168) = a2[42];
  return a1;
}

void sub_1019CE48C(_Unwind_Exception *exception_object)
{
  __int16 v7 = *v5;
  if (*v5)
  {
    v1[15] = v7;
    operator delete(v7);
  }
  char v8 = *v4;
  if (*v4)
  {
    v1[11] = v8;
    operator delete(v8);
  }
  uint64_t v9 = *v3;
  if (*v3)
  {
    v1[8] = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v2;
  if (*v2)
  {
    v1[2] = v10;
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1019CE4F0(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CE5A0();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019CE5A0()
{
}

void sub_1019CE6D0()
{
}

char *sub_1019CE734(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CE7E4();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019CE7E4()
{
}

void sub_1019CE914()
{
}

char *sub_1019CE970(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CEA20();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019CEA20()
{
}

void sub_1019CEB50()
{
}

char *sub_1019CEBB4(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CEC64();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019CEC64()
{
}

void sub_1019CED94()
{
}

char *sub_1019CEDF8(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CEEA8();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019CEEA8()
{
}

void sub_1019CEFD8()
{
}

char *sub_1019CF03C(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CF0EC();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019CF0EC()
{
}

void *sub_1019CF224(void *a1)
{
  *a1 = off_10234B468;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1019CF274(void *a1)
{
  *a1 = off_10234B468;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_1019CF2E4(uint64_t a1)
{
  return *(void *)(a1 + 32) - *(void *)(a1 + 24) + 8;
}

void **sub_1019CF2F4(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  char v8 = a2;
  double result = sub_1019CF400(&v8, (_DWORD *)(a1 + 16));
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void sub_1019CF35C()
{
}

void sub_1019CF3DC()
{
}

void **sub_1019CF400(void **result, _DWORD *a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)**double result = *a2;
  uint64_t v3 = *v2;
  *v2 += 4;
  *(unsigned char *)(v3 + 4) = a2[4] - a2[2];
  uint64_t v4 = (unsigned char *)(*v2 + 1);
  *uint64_t v2 = v4;
  uint64_t v5 = (char *)*((void *)a2 + 1);
  int v6 = (char *)*((void *)a2 + 2);
  while (v5 != v6)
  {
    char v7 = *v5++;
    unsigned char *v4 = v7;
    uint64_t v4 = (unsigned char *)(*v2 + 1);
    *uint64_t v2 = v4;
  }
  return result;
}

char *sub_1019CF460(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CF510();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019CF510()
{
}

void sub_1019CF640()
{
}

char *sub_1019CF6A4(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CF754();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019CF754()
{
}

void sub_1019CF884()
{
}

char *sub_1019CF8E8(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CF998();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019CF998()
{
}

void sub_1019CFAC8()
{
}

char *sub_1019CFB24(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CFBD4();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019CFBD4()
{
}

void sub_1019CFD04()
{
}

char *sub_1019CFD60(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019CFE10();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019CFE10()
{
}

void sub_1019CFF40()
{
}

char *sub_1019CFF9C(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019D004C();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019D004C()
{
}

void sub_1019D0180()
{
}

uint64_t sub_1019D0194(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *a2 += 3;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  uint64_t v4 = *a2;
  *a2 += 4;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(result + 16);
  uint64_t v5 = *a2;
  *a2 += 4;
  *(_DWORD *)(v5 + 4) = *(_DWORD *)(result + 20);
  uint64_t v6 = *a2;
  *a2 += 4;
  *(unsigned char *)(v6 + 4) = *(unsigned char *)(result + 24);
  uint64_t v7 = *a2 + 1;
  *a2 = v7;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = v7 - (v3 + 3);
  return result;
}

void sub_1019D020C()
{
}

char *sub_1019D0270(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019D0320();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019D0320()
{
}

void sub_1019D0458()
{
}

_DWORD **sub_1019D046C(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  char v8 = a2;
  uint64_t v9 = (_DWORD *)(a1 + 16);
  double result = sub_1019D053C(&v9, (_DWORD ***)&v8);
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void sub_1019D04D8()
{
}

_DWORD **sub_1019D053C(_DWORD **result, _DWORD ***a2)
{
  *(**a2)++ = **result;
  char v2 = *result;
  *(void *)**a2 = *((void *)*result + 1);
  **a2 += 2;
  *(**a2)++ = v2[4];
  *(**a2)++ = v2[5];
  *(unsigned char *)**a2 = *((unsigned char *)v2 + 24);
  **a2 = (_DWORD *)((char *)**a2 + 1);
  return result;
}

char *sub_1019D05E8(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019D0698();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019D0698()
{
}

void sub_1019D07C8()
{
}

char *sub_1019D082C(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019D08DC();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019D08DC()
{
}

void sub_1019D0A0C()
{
}

char *sub_1019D0A68(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019D0B18();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019D0B18()
{
}

void sub_1019D0C48()
{
}

char *sub_1019D0CA4(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019D0D54();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019D0D54()
{
}

void sub_1019D0E84()
{
}

char *sub_1019D0EE8(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019D0F98();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019D0F98()
{
}

void *sub_1019D10CC(void *a1)
{
  *a1 = off_10234B828;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1019D111C(void *a1)
{
  *a1 = off_10234B828;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

void **sub_1019D118C(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  char v8 = a2;
  double result = sub_1019D1294(&v8, (_DWORD *)(a1 + 16));
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void sub_1019D11F4()
{
}

void sub_1019D1270()
{
}

void **sub_1019D1294(void **result, _DWORD *a2)
{
  char v2 = *result;
  *(unsigned char *)**double result = (a2[2] - *a2) >> 1;
  char v3 = (_WORD *)(*v2 + 1);
  *char v2 = v3;
  uint64_t v4 = *(__int16 **)a2;
  uint64_t v5 = (__int16 *)*((void *)a2 + 1);
  while (v4 != v5)
  {
    __int16 v6 = *v4++;
    _WORD *v3 = v6;
    char v3 = (_WORD *)(*v2 + 2);
    *char v2 = v3;
  }
  return result;
}

char *sub_1019D12E4(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019D1394();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019D1394()
{
}

void *sub_1019D14C8(void *a1)
{
  *a1 = off_10234B878;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1019D1518(void *a1)
{
  *a1 = off_10234B878;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

void sub_1019D1588()
{
}

void sub_1019D1604()
{
}

char *sub_1019D1628(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019D16D8();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019D16D8()
{
}

void *sub_1019D180C(void *a1)
{
  *a1 = off_10234B8C8;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1019D185C(void *a1)
{
  *a1 = off_10234B8C8;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

void sub_1019D18CC()
{
}

void sub_1019D1948()
{
}

char *sub_1019D196C(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019D1A1C();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019D1A1C()
{
}

void *sub_1019D1B50(void *a1)
{
  *a1 = off_10234B918;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1019D1BA0(void *a1)
{
  *a1 = off_10234B918;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

void sub_1019D1C10()
{
}

void sub_1019D1C8C()
{
}

char *sub_1019D1CB0(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019D1D60();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019D1D60()
{
}

void *sub_1019D1E94(void *a1)
{
  *a1 = off_10234B968;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1019D1EE4(void *a1)
{
  *a1 = off_10234B968;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

void sub_1019D1F54()
{
}

void sub_1019D1FD0()
{
}

char *sub_1019D1FF4(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019D20A4();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019D20A4()
{
}

void *sub_1019D21D8(void *a1)
{
  *a1 = off_10234B9B8;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1019D2228(void *a1)
{
  *a1 = off_10234B9B8;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

void sub_1019D2298()
{
}

void sub_1019D2314()
{
}

char *sub_1019D2338(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019D23E8();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019D23E8()
{
}

void *sub_1019D251C(void *a1)
{
  *a1 = off_10234BA08;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1019D256C(void *a1)
{
  *a1 = off_10234BA08;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

void sub_1019D25DC()
{
}

void sub_1019D2658()
{
}

char *sub_1019D267C(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019D272C();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019D272C()
{
}

void *sub_1019D2860(void *a1)
{
  *a1 = off_10234BA58;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1019D28B0(void *a1)
{
  *a1 = off_10234BA58;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

void sub_1019D2920()
{
}

void sub_1019D299C()
{
}

char *sub_1019D29C0(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019D2A70();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019D2A70()
{
}

void *sub_1019D2BA4(void *a1)
{
  *a1 = off_10234BAA8;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1019D2BF4(void *a1)
{
  *a1 = off_10234BAA8;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

void sub_1019D2C64()
{
}

void sub_1019D2CE0()
{
}

char *sub_1019D2D04(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019D2DB4();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019D2DB4()
{
}

void *sub_1019D2EE8(void *a1)
{
  *a1 = off_10234BAF8;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1019D2F38(void *a1)
{
  *a1 = off_10234BAF8;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

void sub_1019D2FA8()
{
}

void sub_1019D3024()
{
}

char *sub_1019D3048(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019D30F8();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019D30F8()
{
}

void *sub_1019D322C(void *a1)
{
  *a1 = off_10234BB48;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1019D327C(void *a1)
{
  *a1 = off_10234BB48;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_1019D32EC(uint64_t a1)
{
  return *(void *)(a1 + 24) - *(void *)(a1 + 16) + 5;
}

uint64_t sub_1019D32FC(uint64_t result, void *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *a2 += 3;
  *(_WORD *)(v3 + 3) = *(_DWORD *)(result + 24) - *(_DWORD *)(result + 16);
  uint64_t v4 = (unsigned char *)(*a2 + 2);
  *a2 = v4;
  uint64_t v5 = *(char **)(result + 16);
  __int16 v6 = *(char **)(result + 24);
  while (v5 != v6)
  {
    char v7 = *v5++;
    unsigned char *v4 = v7;
    uint64_t v4 = (unsigned char *)(*a2 + 1);
    *a2 = v4;
  }
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = (_WORD)v4 - (v3 + 3);
  return result;
}

void sub_1019D3364()
{
}

void sub_1019D33DC()
{
}

char *sub_1019D3400(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019D34B0();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019D34B0()
{
}

void sub_1019D35E0()
{
}

char *sub_1019D363C(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019D36EC();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void sub_1019D36EC()
{
}

void *sub_1019D3828(void *a1)
{
  *a1 = off_10234BBE8;
  char v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1019D3878(void *a1)
{
  *a1 = off_10234BBE8;
  char v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  operator delete();
}

void **sub_1019D38E8(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  char v8 = a2;
  double result = sub_1019D39F4(&v8, a1 + 16);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void sub_1019D3950()
{
}

void sub_1019D39D0()
{
}

void **sub_1019D39F4(void **result, uint64_t a2)
{
  char v2 = *result;
  *(unsigned char *)**double result = *(unsigned char *)a2;
  uint64_t v3 = (*v2)++;
  *(_WORD *)(v3 + 1) = *(_WORD *)(a2 + 2);
  uint64_t v4 = *v2;
  *v2 += 2;
  *(_WORD *)(v4 + 2) = *(_DWORD *)(a2 + 16) - *(_DWORD *)(a2 + 8);
  uint64_t v5 = (unsigned char *)(*v2 + 2);
  *char v2 = v5;
  __int16 v6 = *(char **)(a2 + 8);
  uint64_t v7 = *(char **)(a2 + 16);
  while (v6 != v7)
  {
    char v8 = *v6++;
    *uint64_t v5 = v8;
    uint64_t v5 = (unsigned char *)(*v2 + 1);
    *char v2 = v5;
  }
  return result;
}

char *sub_1019D3A68(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019D3B18();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019D3B18()
{
}

void sub_1019D3C48()
{
}

char *sub_1019D3CAC(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019D3D5C();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019D3D5C()
{
}

void sub_1019D3E8C()
{
}

char *sub_1019D3EE8(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019D3F98();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019D3F98()
{
}

void sub_1019D40C8()
{
}

char *sub_1019D4124(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019D41D4();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1019D41D4()
{
}

void sub_1019D4304()
{
}

char *sub_1019D4368(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019D4418();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019D4418()
{
}

void sub_1019D4548()
{
}

char *sub_1019D45A4(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1019D4654();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void sub_1019D4654()
{
}

void sub_1019D4784()
{
}

void sub_1019D47E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  do
  {
    uint64_t v7 = *(void **)(v5 - 24);
    v5 -= 24;
    __int16 v6 = v7;
    if (v7)
    {
      *(void *)(a1 - 16) = v6;
      operator delete(v6);
    }
    a1 = v5;
  }
  while (v5 != a2);
  uint64_t v8 = a2;
  do
  {
    uint64_t v10 = *(void **)(v8 - 24);
    v8 -= 24;
    uint64_t v9 = v10;
    if (v10)
    {
      *(void *)(a2 - 16) = v9;
      operator delete(v9);
    }
    a2 = v8;
  }
  while (v8 != a3);
}

void sub_1019D4850(int a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    LOBYTE(v27) = 0;
    char v29 = 0;
    if (a1)
    {
      if (a1 != 1)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234BDF0);
        }
        uint64_t v11 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 67109120;
          int v35 = a1;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#timingadvance,invalid SIM ID,%d", buf, 8u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_38;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234BDF0);
        }
        int v32 = 67109120;
        int v33 = a1;
        int v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaCommon::queryTimingAdvance(SimInstance, std::vector<CLCell>, CLQmiPdsController &, id<CLIntersiloUniverse>)", "%s\n", v12);
        goto LABEL_49;
      }
      char v7 = 1;
    }
    else
    {
      char v7 = 0;
    }
    sub_1000FA8B8(a2, buf);
    sub_1000F399C((uint64_t)&v27, (uint64_t)buf);
    sub_1000F3950((uint64_t)buf);
    if (v29)
    {
      if ((v28 > 9 || ((1 << v28) & 0x287) == 0) && v28 - 3 > 2)
      {
        if (v28 == 10)
        {
          HIDWORD(v26) = *(_DWORD *)sub_1006E8278((uint64_t)&v27);
          LODWORD(v26) = *(_DWORD *)(sub_1006E8278((uint64_t)&v27) + 4);
          uint64_t v25 = *(unsigned int *)(sub_1006E8278((uint64_t)&v27) + 8);
          uint64_t v24 = *(unsigned int *)(sub_1006E8278((uint64_t)&v27) + 16);
          uint64_t v23 = *(unsigned int *)(sub_1006E8278((uint64_t)&v27) + 24);
          uint64_t v22 = *(unsigned int *)(sub_1006E8278((uint64_t)&v27) + 28);
          int v14 = *(_DWORD *)(sub_1006E8278((uint64_t)&v27) + 32);
          uint64_t v21 = 0;
          int v17 = 0;
          char v19 = 0;
          int v15 = *(_DWORD *)(sub_1006E8278((uint64_t)&v27) + 64);
          char v18 = 6;
          char v16 = 1;
        }
        else if (v28 == 6)
        {
          HIDWORD(v25) = *(_DWORD *)sub_100117098((uint64_t)&v27);
          HIDWORD(v24) = *(_DWORD *)(sub_100117098((uint64_t)&v27) + 4);
          HIDWORD(v23) = *(_DWORD *)(sub_100117098((uint64_t)&v27) + 8);
          HIDWORD(v22) = *(_DWORD *)(sub_100117098((uint64_t)&v27) + 12);
          HIDWORD(v21) = *(_DWORD *)(sub_100117098((uint64_t)&v27) + 16);
          LODWORD(v21) = *(_DWORD *)(sub_100117098((uint64_t)&v27) + 20);
          uint64_t v26 = 0;
          LODWORD(v25) = 0;
          LODWORD(v24) = 0;
          LODWORD(v23) = 0;
          LODWORD(v22) = 0;
          int v14 = 0;
          int v15 = 0;
          char v16 = 0;
          int v17 = *(_DWORD *)(sub_100117098((uint64_t)&v27) + 24);
          char v18 = 4;
          char v19 = 1;
        }
        else
        {
          uint64_t v21 = 0;
          uint64_t v22 = 0;
          int v17 = 0;
          uint64_t v25 = 0;
          uint64_t v26 = 0;
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          int v14 = 0;
          int v15 = 0;
          char v19 = 0;
          char v16 = 0;
          char v18 = 0;
        }
        __int16 v31 = 0;
        int v20 = operator new(0x58uLL);
        *(void *)int v20 = off_10234BE20;
        v20[2] = a1;
        *((unsigned char *)v20 + 12) = v18;
        *((unsigned char *)v20 + 13) = v7;
        *((void *)v20 + 2) = a4;
        v20[6] = HIDWORD(v25);
        v20[7] = HIDWORD(v24);
        v20[8] = HIDWORD(v23);
        v20[9] = HIDWORD(v22);
        unsigned char v20[10] = HIDWORD(v21);
        v20[11] = v21;
        unsigned char v20[12] = v17;
        v20[13] = HIDWORD(v26);
        v20[14] = v26;
        v20[15] = v25;
        v20[16] = v24;
        v20[17] = v23;
        v20[18] = v22;
        v20[19] = v14;
        v20[20] = v15;
        *((unsigned char *)v20 + 84) = v19;
        *((unsigned char *)v20 + 85) = v16;
        __int16 v31 = v20;
        sub_1018D6764(a3, (uint64_t)v30);
        sub_1017C825C(v30);
        goto LABEL_38;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234BDF0);
      }
      uint64_t v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#timingadvance,RAT not supported", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_38;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_48;
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234BDF0);
      }
      __int16 v13 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#timingadvance,kCellInfoNotification,serving cell missing", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_38;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_48;
      }
    }
    dispatch_once(&qword_1024193D0, &stru_10234BDF0);
LABEL_48:
    LOWORD(v32) = 0;
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaCommon::queryTimingAdvance(SimInstance, std::vector<CLCell>, CLQmiPdsController &, id<CLIntersiloUniverse>)", "%s\n", v12);
LABEL_49:
    if (v12 != (char *)buf) {
      free(v12);
    }
LABEL_38:
    sub_1000F3950((uint64_t)&v27);
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10234BDF0);
  }
  uint64_t v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#timingadvance,fUniverse nil", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234BDF0);
    }
    __int16 v27 = 0;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaCommon::queryTimingAdvance(SimInstance, std::vector<CLCell>, CLQmiPdsController &, id<CLIntersiloUniverse>)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
}

void sub_1019D501C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000F3950((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1019D5068(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1019D509C()
{
}

__n128 sub_1019D50B0(uint64_t a1)
{
  char v2 = (char *)operator new(0x58uLL);
  *(void *)char v2 = off_10234BE20;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1019D511C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10234BE20;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_1019D516C(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10234BDF0);
  }
  long long v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 8);
    int v6 = *(unsigned __int8 *)(a1 + 12);
    int v7 = *(unsigned __int8 *)(a1 + 13);
    *(_DWORD *)uint64_t buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = v5;
    LOWORD(v12) = 1026;
    *(_DWORD *)((char *)&v12 + 2) = v6;
    HIWORD(v12) = 1026;
    LODWORD(v13) = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#timingadvance,queryTimingAdvance,SimInstance,%d,rat,%{public}d,sub_id,%{public}d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234BDF0);
    }
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaCommon::queryTimingAdvance(SimInstance, std::vector<CLCell>, CLQmiPdsController &, id<CLIntersiloUniverse>)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  int v8 = *(unsigned __int8 *)(a1 + 12);
  int v9 = *(unsigned __int8 *)(a1 + 13);
  *(void *)uint64_t buf = _NSConcreteStackBlock;
  uint64_t v12 = 3221225472;
  __int16 v13 = sub_1019D5430;
  int v14 = &unk_10234BE88;
  int v16 = *(_DWORD *)(a1 + 8);
  long long v17 = *(_OWORD *)(a1 + 24);
  long long v18 = *(_OWORD *)(a1 + 40);
  long long v19 = *(_OWORD *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 72);
  uint64_t v15 = *(void *)(a1 + 16);
  sub_10185F608(a2, v8, v9, (uint64_t)buf);
}

uint64_t sub_1019D53E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1019D5424()
{
}

void sub_1019D5430(uint64_t a1, qmi::MessageBase *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10234BDF0);
  }
  long long v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(unsigned __int16 *)a2;
    int v6 = *((_DWORD *)a2 + 1);
    *(_DWORD *)uint64_t buf = 67240707;
    *(_DWORD *)unint64_t v119 = v5;
    *(_WORD *)&v119[4] = 1026;
    *(_DWORD *)&v119[6] = v6;
    __int16 v120 = 2081;
    *(void *)double v121 = qmi::asString();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#timingadvance,sendGetTimingAdvance,qmiResponse,msgId,%{public}d,eCode,%{public}d,eCodeStr,%{private}s", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234BDF0);
    }
    int v38 = *(unsigned __int16 *)a2;
    int v39 = *((_DWORD *)a2 + 1);
    int v71 = 67240707;
    *(_DWORD *)int v72 = v38;
    *(_WORD *)&v72[4] = 1026;
    *(_DWORD *)&v72[6] = v39;
    __int16 v73 = 2081;
    *(void *)int v74 = qmi::asString();
    int v40 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaCommon::queryTimingAdvance(SimInstance, std::vector<CLCell>, CLQmiPdsController &, id<CLIntersiloUniverse>)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v40);
    if (v40 != (char *)buf) {
      free(v40);
    }
  }
  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234BDF0);
    }
    int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = qmi::asString();
      *(_DWORD *)uint64_t buf = 136380675;
      *(void *)unint64_t v119 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#timingadvance,sendGetTimingAdvance returned error,eCodeStr,%{private}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234BDF0);
      }
      int v71 = 136380675;
      *(void *)int v72 = qmi::asString();
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLEurekaCommon::queryTimingAdvance(SimInstance, std::vector<CLCell>, CLQmiPdsController &, id<CLIntersiloUniverse>)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  else
  {
    v113[0] = 0;
    sub_1019D5CCC(a2, 3, v113);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234BDF0);
    }
    uint64_t v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (!v113[0]) {
        sub_101A503C0();
      }
      int v11 = *(_DWORD *)(a1 + 40);
      int v12 = *(_DWORD *)(a1 + 44);
      int v13 = *(_DWORD *)(a1 + 48);
      int v14 = *(_DWORD *)(a1 + 52);
      int v15 = *(_DWORD *)(a1 + 56);
      int v16 = *(_DWORD *)(a1 + 60);
      int v18 = *(_DWORD *)(a1 + 64);
      int v17 = *(_DWORD *)(a1 + 68);
      int v19 = *(_DWORD *)(a1 + 72);
      int v20 = *(_DWORD *)(a1 + 76);
      int v21 = *(_DWORD *)(a1 + 80);
      int v22 = *(_DWORD *)(a1 + 84);
      int v23 = *(_DWORD *)(a1 + 88);
      int v24 = *(_DWORD *)(a1 + 92);
      int v25 = *(_DWORD *)(a1 + 96);
      int v26 = *(_DWORD *)(a1 + 100);
      int v27 = *(unsigned __int8 *)(a1 + 104);
      int v28 = *(unsigned __int8 *)(a1 + 105);
      *(_DWORD *)uint64_t buf = 67114753;
      *(_DWORD *)unint64_t v119 = v11;
      *(_WORD *)&v119[4] = 1026;
      *(_DWORD *)&v119[6] = v114;
      __int16 v120 = 1026;
      *(_DWORD *)double v121 = v115;
      *(_WORD *)&v121[4] = 1025;
      *(_DWORD *)&v121[6] = v12;
      __int16 v122 = 1025;
      int v123 = v13;
      __int16 v124 = 1025;
      int v125 = v14;
      __int16 v126 = 1025;
      int v127 = v15;
      __int16 v128 = 1025;
      int v129 = v16;
      __int16 v130 = 1025;
      int v131 = v18;
      __int16 v132 = 1026;
      int v133 = v17;
      __int16 v134 = 1026;
      int v135 = HIDWORD(v115);
      __int16 v136 = 1026;
      int v137 = v117;
      __int16 v138 = 1026;
      int v139 = v116;
      __int16 v140 = 1025;
      int v141 = v19;
      __int16 v142 = 1025;
      int v143 = v20;
      __int16 v144 = 1025;
      int v145 = v21;
      __int16 v146 = 1025;
      int v147 = v22;
      __int16 v148 = 1025;
      int v149 = v23;
      __int16 v150 = 1025;
      int v151 = v24;
      __int16 v152 = 1025;
      int v153 = v25;
      __int16 v154 = 1025;
      int v155 = v26;
      __int16 v156 = 1025;
      int v157 = v27;
      __int16 v158 = 1025;
      int v159 = v28;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#timingadvance,SimInstance,%d,ta_lte,%{public}d,lte_connection_state,%{public}d,lte_mcc,%{private}d,lte_mnc,%{private}d,lte_tac,%{private}d,lte_ci,%{private}d,lte_uarfcn,%{private}d,lte_pid,%{private}d,lte_band_info,%{public}d,ta_nr,%{public}d,nr_connection_state,%{public}d,nr_offset,%{public}d,nr_mcc,%{private}d,nr_mnc,%{private}d,nr_tac,%{private}d,nr_ci,%{private}d,nr_nrarfcn,%{private}d,nr_pid,%{private}d,nr_band_info,%{private}d,nr_scs,%{private}d,isLTE,%{private}d,isNR,%{private}d", buf, 0x8Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234BDF0);
      }
      if (!v113[0]) {
        sub_101A503C0();
      }
      int v41 = *(_DWORD *)(a1 + 40);
      int v42 = *(_DWORD *)(a1 + 44);
      int v43 = *(_DWORD *)(a1 + 48);
      int v44 = *(_DWORD *)(a1 + 52);
      int v45 = *(_DWORD *)(a1 + 56);
      int v46 = *(_DWORD *)(a1 + 60);
      int v47 = *(_DWORD *)(a1 + 64);
      int v48 = *(_DWORD *)(a1 + 68);
      int v49 = *(_DWORD *)(a1 + 72);
      int v50 = *(_DWORD *)(a1 + 76);
      int v51 = *(_DWORD *)(a1 + 80);
      int v52 = *(_DWORD *)(a1 + 84);
      int v53 = *(_DWORD *)(a1 + 88);
      int v54 = *(_DWORD *)(a1 + 92);
      int v55 = *(_DWORD *)(a1 + 96);
      int v56 = *(_DWORD *)(a1 + 100);
      int v57 = *(unsigned __int8 *)(a1 + 104);
      int v58 = *(unsigned __int8 *)(a1 + 105);
      int v71 = 67114753;
      *(_DWORD *)int v72 = v41;
      *(_WORD *)&v72[4] = 1026;
      *(_DWORD *)&v72[6] = v114;
      __int16 v73 = 1026;
      *(_DWORD *)int v74 = v115;
      *(_WORD *)&v74[4] = 1025;
      *(_DWORD *)&v74[6] = v42;
      __int16 v75 = 1025;
      int v76 = v43;
      __int16 v77 = 1025;
      int v78 = v44;
      __int16 v79 = 1025;
      int v80 = v45;
      __int16 v81 = 1025;
      int v82 = v46;
      __int16 v83 = 1025;
      int v84 = v47;
      __int16 v85 = 1026;
      int v86 = v48;
      __int16 v87 = 1026;
      int v88 = HIDWORD(v115);
      __int16 v89 = 1026;
      int v90 = v117;
      __int16 v91 = 1026;
      int v92 = v116;
      __int16 v93 = 1025;
      int v94 = v49;
      __int16 v95 = 1025;
      int v96 = v50;
      __int16 v97 = 1025;
      int v98 = v51;
      __int16 v99 = 1025;
      int v100 = v52;
      __int16 v101 = 1025;
      int v102 = v53;
      __int16 v103 = 1025;
      int v104 = v54;
      __int16 v105 = 1025;
      int v106 = v55;
      __int16 v107 = 1025;
      int v108 = v56;
      __int16 v109 = 1025;
      int v110 = v57;
      __int16 v111 = 1025;
      int v112 = v58;
      int v59 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaCommon::queryTimingAdvance(SimInstance, std::vector<CLCell>, CLQmiPdsController &, id<CLIntersiloUniverse>)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v59);
      if (v59 != (char *)buf) {
        free(v59);
      }
    }
    double Current = CFAbsoluteTimeGetCurrent();
    if (!v113[0]) {
      sub_101A503C0();
    }
    double v30 = Current;
    int v31 = v114;
    uint64_t v61 = v115;
    int v33 = v116;
    int v32 = v117;
    char v34 = *(unsigned char *)(a1 + 104);
    char v35 = *(unsigned char *)(a1 + 105);
    if (v34 && v115 == 4 || *(unsigned char *)(a1 + 105) && v117 == 2)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10234BDF0);
      }
      BOOL v36 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "#timingadvance,in connected state,send TA details", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10234BDF0);
        }
        LOWORD(v71) = 0;
        double v60 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "auto CLEurekaCommon::queryTimingAdvance(SimInstance, std::vector<CLCell>, CLQmiPdsController &, id<CLIntersiloUniverse>)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v60);
        if (v60 != (char *)buf) {
          free(v60);
        }
      }
      id v37 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLTelephonyService"];
      int v62 = v31;
      uint64_t v63 = v61;
      int v64 = v32;
      int v65 = v33;
      double v66 = v30;
      char v67 = v34;
      char v68 = v35;
      int v69 = *(_DWORD *)buf;
      __int16 v70 = *(_WORD *)v119;
      [v37 updateTAInfo:&v62];
    }
  }
}

uint64_t sub_1019D5CCC(qmi::MessageBase *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  v9[0] = result;
  v9[1] = v5;
  if (result)
  {
    long long v7 = 0uLL;
    int v8 = 0;
    uint64_t v10 = (_DWORD **)v9;
    uint64_t result = sub_1019D5D50(&v10, v5, &v7);
    if (result) {
      v9[0] = 0;
    }
    int v6 = *a3;
    *(_OWORD *)(a3 + 4) = v7;
    *((_DWORD *)a3 + 5) = v8;
    if (!v6) {
      *a3 = 1;
    }
    if (!v9[0]) {
      *a3 = 0;
    }
  }
  return result;
}

uint64_t sub_1019D5D50(_DWORD ***a1, int a2, _DWORD *a3)
{
  if (a2 < 4) {
    return (a2 - 20);
  }
  long long v3 = *a1;
  *a3 = ***a1;
  long long v4 = (_DWORD *)(*v3 + 4);
  void *v3 = v4;
  if (a2 < 8) {
    return (a2 - 20);
  }
  a3[1] = *v4;
  uint64_t v5 = (_DWORD *)(*v3 + 4);
  void *v3 = v5;
  if ((a2 - 12) > 0xFFFFFFF7) {
    return (a2 - 20);
  }
  a3[2] = *v5;
  int v6 = (_DWORD *)(*v3 + 4);
  void *v3 = v6;
  if ((a2 - 16) >= 0xFFFFFFF8) {
    return (a2 - 20);
  }
  a3[3] = *v6;
  long long v7 = (_DWORD *)(*v3 + 4);
  void *v3 = v7;
  uint64_t result = (a2 - 20);
  if ((a2 - 20) <= 0xFFFFFFF7)
  {
    a3[4] = *v7;
    *v3 += 4;
  }
  return result;
}

void sub_1019D5DFC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = 2;
  *(unsigned char *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = -1;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10234BEB8);
  }
  long long v3 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLRhythmicGnssUtility,created", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10234BEB8);
    }
    long long v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLRhythmicGnssUtility::CLRhythmicGnssUtility(id<CLIntersiloUniverse>)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  qword_10248D880 = a1;
  sub_100E92BC0();
}

void sub_1019D6060(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *int64x2_t v1 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1019D60A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10234BED8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRhythmicGnssUtility::onRhythmicModeOfOperationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10234BED8);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRhythmicGnssUtility::onRhythmicModeOfOperationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1019D6670(a4, v6, v7, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1019D625C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1019D627C(uint64_t a1)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10234BEB8);
  }
  char v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLRhythmicGnssUtility,createRhythmicGnssUtilityInUniverse", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10234BEB8);
    }
    __int16 v6 = 0;
    long long v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static CLRhythmicGnssUtility *CLRhythmicGnssUtility::createRhythmicGnssUtilityInUniverse(id<CLIntersiloUniverse>)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1019D6484;
  block[3] = &unk_10229FED8;
  void block[4] = a1;
  if (qword_102489298 != -1) {
    dispatch_once(&qword_102489298, block);
  }
  return qword_10248D880;
}

void sub_1019D6484()
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10234BEB8);
  }
  uint64_t v0 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "CLRhythmicGnssUtility,createRhythmicGnssUtilityInUniverse first time", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10234BEB8);
    }
    int64x2_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static CLRhythmicGnssUtility *CLRhythmicGnssUtility::createRhythmicGnssUtilityInUniverse(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
  operator new();
}

void sub_1019D6644()
{
}

void sub_1019D6670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5 = *(_DWORD *)(a4 + 1448);
  int v6 = *(unsigned __int8 *)(a4 + 1452);
  int v7 = *(_DWORD *)(a4 + 1456);
  uint64_t v8 = *(void *)(a4 + 1464);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10234BEF8);
  }
  int v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67241216;
    unsigned int v13 = v5;
    __int16 v14 = 1026;
    int v15 = v7;
    __int16 v16 = 1026;
    int v17 = v8 & 1;
    __int16 v18 = 1026;
    unsigned int v19 = (v8 >> 1) & 1;
    __int16 v20 = 1026;
    int v21 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLRhythmicGnssUtility,onRhythmicModeOfOperationNotification,modeOfOps,%{public}d,powerMode,%{public}d,1Hz,%{public}d,rhythmic,%{public}d,state,%{public}d", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234BEF8);
    }
    char v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssUtility::onRhythmicModeOfOperationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = v7;
  if (v6)
  {
    if (v5 >= 2) {
      sub_10000EDDC("bitset set argument out of range");
    }
    uint64_t v10 = *(void *)(a1 + 32) | (1 << v5);
  }
  else
  {
    if (v5 >= 2) {
      sub_10000EDDC("bitset reset argument out of range");
    }
    uint64_t v10 = *(void *)(a1 + 32) & ~(1 << v5);
  }
  *(void *)(a1 + 32) = v10;
  *(unsigned char *)(a1 + 20) = v6;
}

void sub_1019D68F0(uint64_t a1, int a2, int a3, int a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10234BEF8);
  }
  uint64_t v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 67240704;
    int v12 = a2;
    __int16 v13 = 1026;
    int v14 = a4;
    __int16 v15 = 1026;
    int v16 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "CLRhythmicGnssUtility,updateStateInformationToRhythmic,modeOfOps,%{public}d,powerMode,%{public}d,state,%{public}d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10234BEF8);
    }
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssUtility::updateStateInformationToRhythmic(const CLLocationProvider_Type::GnssModeOfOperation, const BOOL, const CLRhythmicGnssWakeMode)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = a4;
  uint64_t v9 = 2;
  if (!a3) {
    uint64_t v9 = 0;
  }
  *(void *)(a1 + 32) = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFDLL | v9;
}

void sub_1019D6AFC(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1019D6B2C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1019D6B5C(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1019D6B8C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_1019D6C0C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_1019D6C9C(_Unwind_Exception *a1)
{
}

void sub_1019D6CB4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_1019D6D6C(_Unwind_Exception *a1)
{
}

void sub_1019D6D84()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_1019D6E2C(_Unwind_Exception *a1)
{
}

uint64_t sub_1019D6E44()
{
  sub_100134750(qword_102489280, "t");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102489280, (void *)&_mh_execute_header);
}

void sub_1019D72C4()
{
}

id sub_1019D72F0(uint64_t a1, void *a2)
{
  return _[a2 onDeviceMotionData:a1];
}

void sub_1019D75E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1019D76E8(id a1)
{
  qword_102419198 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void *sub_1019D7718(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_10234BF80;
  id v9 = a5;
  *a1 = off_10234BF48;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  void v14[2] = 0x2020000000;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1019D78A0;
  aBlock[3] = &unk_1022B6BE8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  _OWORD v12[2] = sub_1019D78B4;
  void v12[3] = &unk_1022B6C10;
  void v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_1019D7878(_Unwind_Exception *a1)
{
  sub_1019D78CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1019D78A0(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_1019D78B4(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

uint64_t sub_1019D78CC(uint64_t a1)
{
  *(void *)a1 = off_10234BF80;

  return a1;
}

void sub_1019D791C(uint64_t a1)
{
  sub_1019D7C5C(a1);

  operator delete();
}

id sub_1019D7954(void *a1, int a2, void *__src, unint64_t a4)
{
  HIWORD(v27) = 0;
  if (a4 >= 0x78) {
    size_t v8 = 120;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(__dst, __src, v8);
  if (a4 >= 0x79)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10234BFA8);
    }
    id v9 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 136315906;
      unint64_t v38 = (unint64_t)"N14CLDeviceMotion6SampleE" & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v39 = 2048;
      uint64_t v40 = 120;
      __int16 v41 = 2048;
      unint64_t v42 = a4;
      __int16 v43 = 1024;
      int v44 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234BFA8);
      }
      int v29 = 136315906;
      unint64_t v30 = (unint64_t)"N14CLDeviceMotion6SampleE" & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v31 = 2048;
      uint64_t v32 = 120;
      __int16 v33 = 2048;
      unint64_t v34 = a4;
      __int16 v35 = 1024;
      int v36 = a2;
      char v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLDeviceMotion::Sample>::dispatchData(int, const void *, size_t) [T = CLDeviceMotion::Sample]", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  __int16 v13 = (void *)a1[4];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_1019D7CD8;
  v16[3] = &unk_1022C3A78;
  void v16[4] = v12;
  v16[5] = v11;
  long long v21 = __dst[4];
  long long v22 = __dst[5];
  long long v23 = v27;
  long long v17 = __dst[0];
  long long v18 = __dst[1];
  long long v19 = __dst[2];
  long long v20 = __dst[3];
  uint64_t v24 = v28;
  uint64_t v25 = v10;
  return [v13 async:v16];
}

uint64_t sub_1019D7C44()
{
  return 1;
}

uint64_t sub_1019D7C4C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1019D7C5C(uint64_t a1)
{
  *(void *)a1 = off_10234BF48;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1019D78CC(a1);
}

uint64_t sub_1019D7CD8(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1[4] + 16))();
  if (result)
  {
    uint64_t v3 = (uint64_t (*)(void *, uint64_t))a1[5];
    uint64_t v4 = a1[21];
    return v3(a1 + 6, v4);
  }
  return result;
}

void sub_1019D7D34(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1019D7D68(uint64_t a1)
{
  sub_1019D78CC(a1);

  operator delete();
}

uint64_t sub_1019D7DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a3, *(void *)(a1 + 24));
}

void sub_1019D7DAC(uint64_t a1)
{
  sub_100513074(a1, "CLDaemonCore", 1, 1);
  id v2 = [objc_alloc((Class)CLIntersiloUniverse) initWithSilo:+[CLSilo main](CLSilo, "main") vendor:+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance")];
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 16) = v2;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 1;
  *(void *)(a1 + 88) = 0x4066800000000000;
  *(void *)(a1 + 96) = 0;
  if (qword_10248D888)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C000);
    }
    uint64_t v3 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)unint64_t v34 = 2082;
      *(void *)&v34[2] = "";
      *(_WORD *)&v34[10] = 2050;
      *(void *)&v34[12] = qword_10248D888;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning multiple instances created\", \"last instance\":\"%{public}p\"}", buf, 0x1Cu);
    }
  }
  qword_10248D888 = a1;
  id v4 = objc_alloc_init((Class)NSMutableDictionary);
  unsigned int v32 = 0;
  sub_1000C7F88(buf);
  char v5 = sub_1004D0870(*(uint64_t *)buf, "CLSilo.Version", &v32);
  if (v32 >= dword_102479EC8) {
    char v6 = v5;
  }
  else {
    char v6 = 0;
  }
  if (*(void *)v34) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v34);
  }
  if ((v6 & 1) == 0)
  {
    sub_1000C7F88(buf);
    sub_1004CF7DC(*(uint64_t *)buf, "CLSilo.SyncgetGraphFile", 0xFFFFFFFFLL);
    if (*(void *)v34) {
      sub_1000DB0A0(*(std::__shared_weak_count **)v34);
    }
    sub_1000C7F88(buf);
    sub_1004CF7DC(*(uint64_t *)buf, "CLSilo.NameToCohortMap", 0xFFFFFFFFLL);
    if (*(void *)v34) {
      sub_1000DB0A0(*(std::__shared_weak_count **)v34);
    }
  }
  sub_1000C7F88(buf);
  sub_1004D2BC4(*(uint64_t *)buf, "CLSilo.Version", (unsigned int *)&dword_102479EC8);
  if (*(void *)v34) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v34);
  }
  *(void *)uint64_t buf = 0;
  *(void *)unint64_t v34 = 0;
  *(void *)&v34[8] = 0;
  sub_1000C7F88(__p);
  BOOL v7 = sub_1004D1284((uint64_t)__p[0], "CLSilo.SyncgetGraphFile", (std::string *)buf);
  if (__p[1]) {
    sub_1000DB0A0((std::__shared_weak_count *)__p[1]);
  }
  if (v7)
  {
    if (v34[15] >= 0) {
      size_t v8 = buf;
    }
    else {
      size_t v8 = *(uint8_t **)buf;
    }
    [v4 setObject:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8) forKeyedSubscript:@"SyncgetGraphFile"];
  }
  else
  {
    id v9 = +[NSFileManager defaultManager];
    sub_10053BE74(&v29);
    if (byte_10248974F >= 0) {
      uint64_t v10 = (const std::string::value_type *)&qword_102489738;
    }
    else {
      uint64_t v10 = (const std::string::value_type *)qword_102489738;
    }
    if (byte_10248974F >= 0) {
      std::string::size_type v11 = byte_10248974F;
    }
    else {
      std::string::size_type v11 = unk_102489740;
    }
    uint64_t v12 = std::string::append(&v29, v10, v11);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    int64_t v31 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (v31 >= 0) {
      int v14 = __p;
    }
    else {
      int v14 = (void **)__p[0];
    }
    unsigned int v15 = [(NSFileManager *)v9 fileExistsAtPath:+[NSString stringWithUTF8String:v14]];
    if (SHIBYTE(v31) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v29.__r_.__value_.__l.__data_);
      if (!v15) {
        goto LABEL_53;
      }
    }
    else if (!v15)
    {
      goto LABEL_53;
    }
    sub_10053BE74(&v29);
    if (byte_10248974F >= 0) {
      int v16 = (const std::string::value_type *)&qword_102489738;
    }
    else {
      int v16 = (const std::string::value_type *)qword_102489738;
    }
    if (byte_10248974F >= 0) {
      std::string::size_type v17 = byte_10248974F;
    }
    else {
      std::string::size_type v17 = unk_102489740;
    }
    long long v18 = std::string::append(&v29, v16, v17);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    int64_t v31 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (v31 >= 0) {
      long long v20 = __p;
    }
    else {
      long long v20 = (void **)__p[0];
    }
    [v4 setObject:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20) forKeyedSubscript:@"SyncgetGraphFile"];
    if (SHIBYTE(v31) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
  }
LABEL_53:
  if ((v34[15] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_1000E9354();
  sub_1000C7F88(__p);
  sub_100012960((uint64_t)__p[0], "CLSilo.NameToCohortMap", buf);
  if (__p[1]) {
    sub_1000DB0A0((std::__shared_weak_count *)__p[1]);
  }
  long long v21 = (void *)sub_1000E9358((uint64_t)buf);
  if ([v21 count]) {
    [v4 setObject:v21 forKeyedSubscript:@"NameToCohortMap"];
  }
  sub_10013F3C4(buf);
  sub_10053B99C(0, (std::string *)buf);
  if (v34[15] >= 0) {
    long long v22 = buf;
  }
  else {
    long long v22 = *(uint8_t **)buf;
  }
  [v4 setObject:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22) forKeyedSubscript:@"AutoCohortEdgesDirectoryPath"];
  if ((v34[15] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  +[CLSilo setGlobalConfiguration:v4];

  sub_1000E9354();
  sub_1000C7F88(buf);
  sub_100012960(*(uint64_t *)buf, "CLServiceVendor.RecordingTriggersFromByTo", __p);
  if (*(void *)v34) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v34);
  }
  long long v23 = (void *)sub_1000E9358((uint64_t)__p);
  uint64_t v24 = [[(NSString *)NSTemporaryDirectory() stringByAppendingString:@"/intersilo_recording"] UTF8String];
  sub_100134750(buf, v24);
  sub_1000C7F88(&v29);
  sub_1004D1284((uint64_t)v29.__r_.__value_.__l.__data_, "CLServiceVendor.RecordingPathBase", (std::string *)buf);
  if (v29.__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)v29.__r_.__value_.__l.__size_);
  }
  sub_1000C7F88(&v29);
  id v25 = [[(id)sub_1000E9358((uint64_t)v29.__r_.__value_.__l.__data_)] cl_deepMutableCopy];
  if (v29.__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)v29.__r_.__value_.__l.__size_);
  }
  if (![v25 objectForKey:@"HeartAttackStackshot"])
  {
    sub_100103240();
    if (sub_10073E30C()) {
      goto LABEL_75;
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C000);
    }
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG)) {
LABEL_75:
    }
      uint64_t v26 = 1;
    else {
      uint64_t v26 = 0;
    }
    [v25 setObject:[NSNumber numberWithBool:v26] forKey:@"HeartAttackStackshot"];
  }
  sub_100103240();
  [v25 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_10073E30C())] forKey:@"IsInternalInstall"];
  [v25 setValue:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_1001198CC() == 1)] forKey:@"IsLocationServicesEnabled"];
  +[CLServiceVendor rereadConfiguration:v25];
  if ([v23 count])
  {
    id v27 = [*(id *)(a1 + 16) vendor];
    if (v34[15] >= 0) {
      uint64_t v28 = buf;
    }
    else {
      uint64_t v28 = *(uint8_t **)buf;
    }
    [v27 setRecordingTriggerMap:v23 outputPathBase:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v28)];
  }

  if ((v34[15] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_10013F3C4(__p);
  sub_10071B604();
  sub_1000A6958();
  sub_10060F068();
}

void sub_1019D8698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  uint64_t v40 = *(void *)(v38 + 32);
  *(void *)(v38 + 32) = 0;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  sub_10051310C(v38);
  _Unwind_Resume(a1);
}

void sub_1019D8844(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 16), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10234C020);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    char v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonCore::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10234C020);
    }
    BOOL v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      long long v13 = "";
      __int16 v14 = 2082;
      unsigned int v15 = "activity";
      __int16 v16 = 2050;
      uint64_t v17 = a4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonCore::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v9 = 0;
  }
  if (*a2 == 4
    && (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a4 + 16), "vendor"), "proxyForService:", @"CLDaemonStatus"), "syncgetHasLingerClients") & 1) == 0)
  {
    sub_1019DAE8C(a4, -1);
  }
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_1019D8A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1019D8A40(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 32);
  (*((void (**)(id *))*v1 + 2))(v1);
  if (objc_msgSend(objc_msgSend(objc_msgSend(v1[2], "vendor"), "proxyForService:", @"CLDaemonStatus"), "syncgetHasLingerClients"))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C000);
    }
    id v2 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      v4[0] = 68289026;
      v4[1] = 0;
      __int16 v5 = 2082;
      char v6 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"linger requested - not shutting down\"}", (uint8_t *)v4, 0x12u);
    }
  }
  else
  {
    sub_1019DB5D0((uint64_t)v1, 0);
    [v1[6] setNextFireDelay:1.79769313e308];
  }
  return (*((uint64_t (**)(id *))*v1 + 3))(v1);
}

void sub_1019D8BA8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

void sub_1019D8BF4()
{
}

uint64_t sub_1019D8C04(uint64_t a1)
{
  [*(id *)(a1 + 48) invalidate];

  *(void *)(a1 + 48) = 0;
  [*(id *)(a1 + 96) invalidate];

  *(void *)(a1 + 96) = 0;
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  return sub_10051310C(a1);
}

uint64_t sub_1019D8C94(uint64_t a1)
{
  uint64_t v1 = (const char *)a1;
  if (sub_10014DB48(a1))
  {
    uint64_t v2 = _os_activity_create((void *)&_mh_execute_header, "CL: startInitialize", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &state);

    if (qword_102419530 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10234C040);
    }
    uint64_t v24 = qword_102419638;
    uint64_t v1 = "(fMutex).__assertOwned()";
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v47 = 0;
      __int16 v48 = 2082;
      int v49 = "";
      __int16 v50 = 2082;
      int v51 = "assert";
      __int16 v52 = 2081;
      int v53 = "(fMutex).__assertOwned()";
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10234C040);
      }
    }
    id v25 = qword_102419638;
    if (os_signpost_enabled((os_log_t)qword_102419638))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v47 = 0;
      __int16 v48 = 2082;
      int v49 = "";
      __int16 v50 = 2082;
      int v51 = "assert";
      __int16 v52 = 2081;
      int v53 = "(fMutex).__assertOwned()";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10234C040);
      }
    }
    uint64_t v26 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v47 = 0;
      __int16 v48 = 2082;
      int v49 = "";
      __int16 v50 = 2082;
      int v51 = "assert";
      __int16 v52 = 2081;
      int v53 = "(fMutex).__assertOwned()";
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    uint64_t v29 = 594;
    unint64_t v30 = "startInitialize";
    uint64_t v28 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonCore.mm";
    abort_report_np();
    __break(1u);
  }
  dispatch_once(&qword_102419530, &stru_10234C000);
LABEL_3:
  uint64_t v3 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v47 = 0;
    __int16 v48 = 2082;
    int v49 = "";
    __int16 v50 = 2082;
    int v51 = "activity";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"startInitialize\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLCapabilityMonitor"];
  int64_t v31 = v4;
  [*(id *)(*((void *)v1 + 4) + 16) register:*(void *)(*((void *)v1 + 4) + 8) forNotification:4 registrationInfo:0];
  id v5 = [objc_alloc((Class)NSURLCache) initWithMemoryCapacity:0 diskCapacity:0 diskPath:0];
  +[NSURLCache setSharedURLCache:v5];

  BOOL v33 = 0;
  uint64_t v6 = sub_1000A6958();
  if (sub_1000D29FC(v6, @"PrivateMode", &v33))
  {
    id v7 = [[objc_msgSend(*((id *)v1 + 2), "vendor") proxyForService:@"CLNetworkLocationProvider"];
    [v7 setPrivateMode:v33];
    id v8 = [[[*((id *)v1 + 2) vendor] proxyForService:@"CLHarvesterService"];
    [v8 setPrivateMode:v33];
  }
  [objc_msgSend(*((id *)v1 + 2), "vendor", v28, v29, v30) ensureServiceIsRunning:@"CLLocationController"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLFilteredLocationController"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLTimeZoneManager"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLApplicationLifecycleManager"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLCountryTracker"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLMotionCuesService"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLFenceManager"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CMHealthColdStorageService"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLStatusBarIconManager"];
  sub_1000D2E34(0);
  sub_100A68CE8();
  sub_100B92EF8();
  sub_10065C2C8();
  sub_100DFD2AC();
  sub_100C22EEC();
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLWorkoutRecorder"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLPredictedWalkDistanceServiceCompanion"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLVO2MaxService"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLAudioAccessoryService"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CMHealthColdStorageCompanionSyncService"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLCardioChangeService"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLGyroCalibrationDatabase"];
  sub_1012AD420();
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLPressureCalibrationDatabase"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLFitnessTrackingNotifier"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLStepCountNotifier"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLMotionState"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLOnBodyNotifier"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLMotionStateMediator"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLNatalimetryNotifier"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLCatherineNotifier"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLCompanionNotifier"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLSedentaryTimerNotifier"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLActivityLogger"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLVehicleConnectionNotifier"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLVehicleStateNotifier"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLSensorRecorderNotifier"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLMotionSyncStore"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLMotionStateObserver"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLMotionHintLogger"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLRunningAggregatorAWD"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLFitnessDailyAnalyticsAggregator"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLFallNotifier"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLPencilState"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLMagneticAccessory"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLEmergencyController"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLKappaNotifier"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLNearbydInterfaceManager"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLSpringTrackingNotifier"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLFitnessMachineNotifier"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLMotionAlarmNotifier"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLHealthAssessmentNotifier"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLPressureStatsCollector"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLMobilityWalkingBoutService"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLVO2MaxCloudKitManager"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLDMVisionService"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLSimulationController"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLClientManager"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLTilesManager"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLCellTilesManager"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLCoarseCellTilesManager"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLWifiTilesManager"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLAppTileDataProvider"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLTransitMacTileDataProvider"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLRoutineMonitor"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLSmootherMonitor"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLSignificantVisitManager"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLSuggestedActionManager"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLLocationStreamer"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLLocationMulticlientStreamer"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLSensorMonitor"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLInternalService"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLAvengerObservationReporterService"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLGeoMapTilesPreloaderService"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLTrackingAvoidanceService"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLSeparationAlertsService"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLGatheringService"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLMicroLocationNotifier"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLDurianService"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLBarometerCalibration"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLFenceHandoffConnectionManager"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLAnalyticsLogger"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLOutdoorService"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLFenceAnalyticsManager"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLDistributedSensingService"];
  [objc_msgSend(*((id *)v1 + 2), "vendor") ensureServiceIsRunning:@"CLContextMetricsService"];
  sub_100103240();
  if ((sub_1000A16E8() & 0x2000000000000) != 0) {
    sub_101A20CE8();
  }
  id v9 = [+[NSDictionary dictionaryWithContentsOfFile:@"/System/Library/LaunchDaemons/com.apple.locationd.plist"] objectForKeyedSubscript:@"LaunchEvents"];
  if (!v9)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C000);
    }
    long long v21 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "no LaunchEvents found", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_38;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419530 == -1)
    {
LABEL_52:
      LOWORD(v34) = 0;
      id v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void launchServicesWithLaunchEvents()", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
      goto LABEL_38;
    }
LABEL_54:
    dispatch_once(&qword_102419530, &stru_10234C000);
    goto LABEL_52;
  }
  id v10 = [v9 objectForKeyedSubscript:@"com.apple.xpc.activity"];
  int v11 = v10;
  if (v10)
  {
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id v12 = [v10 countByEnumeratingWithState:&v34 objects:buf count:16];
    if (v12)
    {
      uint64_t v13 = *(void *)v35;
      do
      {
        __int16 v14 = 0;
        do
        {
          if (*(void *)v35 != v13) {
            objc_enumerationMutation(v11);
          }
          unsigned int v15 = *(void **)(*((void *)&v34 + 1) + 8 * (void)v14);
          unsigned int v16 = [v15 hasPrefix:@"com.apple.locationd."];
          id v17 = [v15 componentsSeparatedByString:@"."];
          if (v16) {
            uint64_t v18 = 3;
          }
          else {
            uint64_t v18 = 0;
          }
          id v19 = [v17 objectAtIndexedSubscript:v18];
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_10234C000);
          }
          long long v20 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t v38 = 68289538;
            int v39 = 0;
            __int16 v40 = 2082;
            __int16 v41 = "";
            __int16 v42 = 2114;
            id v43 = v19;
            __int16 v44 = 2114;
            int v45 = v15;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"ensure service is running for xpc activity\", \"service\":%{public, location:escape_only}@, \"identifier\":%{public, location:escape_only}@}", v38, 0x26u);
          }
          [+[CLServiceVendor sharedInstance] ensureServiceIsRunning:v19];
          __int16 v14 = (char *)v14 + 1;
        }
        while (v12 != v14);
        id v12 = [v11 countByEnumeratingWithState:&v34 objects:buf count:16];
      }
      while (v12);
    }
    goto LABEL_38;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_10234C000);
  }
  long long v22 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "no xpc activities registered", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 == -1) {
      goto LABEL_52;
    }
    goto LABEL_54;
  }
LABEL_38:
  [v31 drain];
  os_activity_scope_leave(&state);
  return 1;
}

void sub_1019D9B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state)
{
}

void sub_1019D9B4C(int a1, uint64_t a2, CFArrayRef theArray)
{
  if (a2 == 1) {
    goto LABEL_6;
  }
  if (a2 == 128 || a2 == 32)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count <= 0) {
      __assert_rtn("wrapRunLoopWithAutoreleasePoolHandler", "CLDaemonCore.mm", 704, "count > 0");
    }
    CFIndex v6 = Count - 1;
    CFArrayGetValueAtIndex(theArray, Count - 1);
    NSPopAutoreleasePool();
    CFArrayRemoveValueAtIndex(theArray, v6);
    if (a2 == 32)
    {
LABEL_6:
      id v7 = (const void *)NSPushAutoreleasePool();
      CFArrayAppendValue(theArray, v7);
    }
  }
}

void sub_1019D9C18(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024892B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024892B8))
  {
    qword_1024892B0 = 2000000000 * (unint64_t)unk_1024892C4 / dword_1024892C0;
    __cxa_guard_release(&qword_1024892B8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024892D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024892D8))
  {
    qword_1024892D0 = mach_absolute_time();
    __cxa_guard_release(&qword_1024892D8);
  }
  uint64_t v3 = mach_absolute_time();
  uint64_t v4 = v3;
  if ((a2 & 0x40) == 0)
  {
    uint64_t v5 = qword_1024892D0;
    uint64_t v6 = v3 - qword_1024892D0;
    if (v3 - qword_1024892D0 >= qword_1024892B0)
    {
      memset(&v20, 0, sizeof(v20));
      memset(&__p, 0, sizeof(__p));
      uint64_t v8 = dword_1024892C0;
      unint64_t v7 = unk_1024892C4;
      sub_1019D9FF8(qword_1024892C8, &__p);
      sub_1019D9FF8(a2, &v20);
      unint64_t v9 = v5 * v8 / v7;
      unint64_t v10 = v6 * v8 / v7;
      if (qword_102419530 != -1)
      {
        dispatch_once(&qword_102419530, &stru_10234C000);
        unint64_t v9 = v5 * v8 / v7;
      }
      double v11 = (double)v9;
      double v12 = (double)v10;
      uint64_t v13 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        unsigned int v15 = &v20;
        if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unsigned int v15 = (std::string *)v20.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t buf = 136315906;
        unint64_t v30 = p_p;
        __int16 v31 = 2080;
        unsigned int v32 = v15;
        __int16 v33 = 2048;
        double v34 = v11 / 1000000000.0;
        __int16 v35 = 2048;
        double v36 = v12 / 1000000000.0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning OBSERVER: TIMEOUT: %s => %s RunLoop is really busy time(%.8lf) tdiff(%.8lf)", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_10234C000);
        }
        unsigned int v16 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unsigned int v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        id v17 = &v20;
        if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          id v17 = (std::string *)v20.__r_.__value_.__r.__words[0];
        }
        int v21 = 136315906;
        long long v22 = v16;
        __int16 v23 = 2080;
        uint64_t v24 = v17;
        __int16 v25 = 2048;
        double v26 = v11 / 1000000000.0;
        __int16 v27 = 2048;
        double v28 = v12 / 1000000000.0;
        uint64_t v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLDaemonCore::profileObserverCallback(CFRunLoopObserverRef, CFRunLoopActivity, void *)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
    }
  }
  qword_1024892C8 = a2;
  qword_1024892D0 = v4;
}

void sub_1019D9FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

std::string *sub_1019D9FF8(char a1, std::string *this)
{
  uint64_t result = std::string::assign(this, "");
  if (a1)
  {
    uint64_t result = std::string::append(this, " kCFRunLoopEntry");
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = std::string::append(this, " kCFRunLoopBeforeTimers");
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t result = std::string::append(this, " kCFRunLoopBeforeSources");
  if ((a1 & 0x20) == 0)
  {
LABEL_5:
    if ((a1 & 0x40) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t result = std::string::append(this, " kCFRunLoopAfterWaiting");
    if ((a1 & 0x80) == 0) {
      return result;
    }
    goto LABEL_13;
  }
LABEL_11:
  uint64_t result = std::string::append(this, " kCFRunLoopBeforeWaiting");
  if ((a1 & 0x40) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((a1 & 0x80) == 0) {
    return result;
  }
LABEL_13:

  return std::string::append(this, " kCFRunLoopExit");
}

void sub_1019DA0D0(uint64_t a1, os_activity_scope_state_s *a2)
{
  kern_return_t v13;
  uint64_t v14;
  NSObject *v15;
  char *v16;
  NSObject *v17;
  __CFRunLoopObserver *v18;
  CFMutableArrayRef v19;
  __CFNotificationCenter *DarwinNotifyCenter;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  char *v26;
  char *v27;
  char *v28;
  BOOL v29;
  os_activity_scope_state_s state;
  int v31;
  int v32;
  __int16 v33;
  int v34;
  CFRunLoopObserverContext buf[40];

  uint64_t v4 = a1;
  if (!sub_10014DB48(a1))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10234C040);
    }
    uint64_t v24 = qword_102419638;
    uint64_t v5 = (uint64_t *)"assert";
    a2 = (os_activity_scope_state_s *)"(fMutex).__assertOwned()";
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      buf[0].versiouint64_t n = 68289539;
      LOWORD(buf[0].info) = 2082;
      *(void **)((char *)&buf[0].info + 2) = "";
      WORD1(buf[0].retain) = 2082;
      *(const void *(__cdecl **)(const void *))((char *)&buf[0].retain + 4) = (const void *(__cdecl *)(const void *))"assert";
      WORD2(buf[0].release) = 2081;
      *(void (__cdecl **)(const void *))((char *)&buf[0].release + 6) = (void (__cdecl *)(const void *))"(fMutex).__assertOwned()";
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10234C040);
      }
    }
    __int16 v25 = qword_102419638;
    if (os_signpost_enabled((os_log_t)qword_102419638))
    {
      buf[0].versiouint64_t n = 68289539;
      LOWORD(buf[0].info) = 2082;
      *(void **)((char *)&buf[0].info + 2) = "";
      WORD1(buf[0].retain) = 2082;
      *(const void *(__cdecl **)(const void *))((char *)&buf[0].retain + 4) = (const void *(__cdecl *)(const void *))"assert";
      WORD2(buf[0].release) = 2081;
      *(void (__cdecl **)(const void *))((char *)&buf[0].release + 6) = (void (__cdecl *)(const void *))"(fMutex).__assertOwned()";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10234C040);
      }
    }
    uint64_t v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
    {
      buf[0].versiouint64_t n = 68289539;
      LOWORD(buf[0].info) = 2082;
      *(void **)((char *)&buf[0].info + 2) = "";
      WORD1(buf[0].retain) = 2082;
      *(const void *(__cdecl **)(const void *))((char *)&buf[0].retain + 4) = (const void *(__cdecl *)(const void *))"assert";
      WORD2(buf[0].release) = 2081;
      *(void (__cdecl **)(const void *))((char *)&buf[0].release + 6) = (void (__cdecl *)(const void *))"(fMutex).__assertOwned()";
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)buf, 0x26u);
    }
    abort_report_np();
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  uint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: startRun", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  uint64_t v2 = &qword_102419000;
  if (qword_102419530 != -1) {
LABEL_72:
  }
    dispatch_once(&qword_102419530, &stru_10234C000);
  unint64_t v7 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    buf[0].versiouint64_t n = 68289282;
    LOWORD(buf[0].info) = 2082;
    *(void **)((char *)&buf[0].info + 2) = "";
    WORD1(buf[0].retain) = 2082;
    *(const void *(__cdecl **)(const void *))((char *)&buf[0].retain + 4) = (const void *(__cdecl *)(const void *))"activity";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"startRun\", \"event\":%{public, location:escape_only}s}", (uint8_t *)buf, 0x1Cu);
  }
  if (!_CFRunLoopSetPerCalloutAutoreleasepoolEnabled())
  {
    uint64_t v8 = (__CFRunLoop *)sub_1001C2710();
    unint64_t v9 = (__CFRunLoopObserver *)qword_1024892A0;
    if (!qword_1024892A0)
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, 0);
      buf[0].versiouint64_t n = 0;
      buf[0].info = Mutable;
      buf[0].retaiuint64_t n = (const void *(__cdecl *)(const void *))&_CFRetain;
      buf[0].release = (void (__cdecl *)(const void *))&_CFRelease;
      buf[0].copyDescriptiouint64_t n = (CFStringRef (__cdecl *)(const void *))&CFCopyDescription;
      qword_1024892A0 = (uint64_t)CFRunLoopObserverCreate(0, 1uLL, 1u, -2147483647, (CFRunLoopObserverCallBack)sub_1019D9B4C, buf);
      qword_1024892A8 = (uint64_t)CFRunLoopObserverCreate(0, 0xA0uLL, 1u, 0x7FFFFFFFLL, (CFRunLoopObserverCallBack)sub_1019D9B4C, buf);
      CFRunLoopAddObserver(v8, (CFRunLoopObserverRef)qword_1024892A0, kCFRunLoopCommonModes);
      CFRunLoopAddObserver(v8, (CFRunLoopObserverRef)qword_1024892A8, kCFRunLoopCommonModes);
      CFRelease(Mutable);
      unint64_t v9 = (__CFRunLoopObserver *)qword_1024892A0;
    }
    if (!CFRunLoopContainsObserver(v8, v9, kCFRunLoopDefaultMode))
    {
      CFRunLoopAddObserver(v8, (CFRunLoopObserverRef)qword_1024892A0, kCFRunLoopDefaultMode);
      CFRunLoopAddObserver(v8, (CFRunLoopObserverRef)qword_1024892A8, kCFRunLoopDefaultMode);
    }
  }
  uint64_t v29 = 0;
  sub_1000C7F88(buf);
  sub_1000D2988(buf[0].version, "RunLoopProfileObserver", &v29);
  if (buf[0].info) {
    sub_1000DB0A0((std::__shared_weak_count *)buf[0].info);
  }
  if (v2[166] != -1) {
    dispatch_once(&qword_102419530, &stru_10234C000);
  }
  double v11 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0].version) = 67109120;
    HIDWORD(buf[0].version) = v29;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "OBSERVER: ProfileObserver = %d", (uint8_t *)buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v2[166] != -1) {
      dispatch_once(&qword_102419530, &stru_10234C000);
    }
    __int16 v31 = 67109120;
    unsigned int v32 = v29;
    double v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonCore::startRun(os_activity_scope_state_t)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  if (v29)
  {
    double v12 = (__CFRunLoop *)sub_1001C2710();
    uint64_t v13 = mach_timebase_info((mach_timebase_info_t)&dword_1024892C0);
    __int16 v14 = v2[166];
    if (v13)
    {
      if (v14 != -1) {
        dispatch_once(&qword_102419530, &stru_10234C000);
      }
      unsigned int v15 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf[0].version) = 67240192;
        HIDWORD(buf[0].version) = v13;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Can't read mach_timebase_info = %{public}d", (uint8_t *)buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (v2[166] != -1) {
          dispatch_once(&qword_102419530, &stru_10234C000);
        }
        __int16 v31 = 67240192;
        unsigned int v32 = v13;
        unsigned int v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonCore::installProfileObserver(CFStringRef)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
    }
    else
    {
      if (v14 != -1) {
        dispatch_once(&qword_102419530, &stru_10234C000);
      }
      id v17 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0].version) = 67109376;
        HIDWORD(buf[0].version) = unk_1024892C4;
        LOWORD(buf[0].info) = 1024;
        *(_DWORD *)((char *)&buf[0].info + 2) = dword_1024892C0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "sTimebaseInfo.denom %d sTimebaseInfo.numer %d", (uint8_t *)buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v2[166] != -1) {
          dispatch_once(&qword_102419530, &stru_10234C000);
        }
        __int16 v31 = 67109376;
        unsigned int v32 = unk_1024892C4;
        __int16 v33 = 1024;
        double v34 = dword_1024892C0;
        double v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonCore::installProfileObserver(CFStringRef)", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      uint64_t v18 = (__CFRunLoopObserver *)qword_1024892E0;
      if (!qword_1024892E0)
      {
        id v19 = CFArrayCreateMutable(0, 0, 0);
        buf[0].versiouint64_t n = 0;
        buf[0].info = v19;
        buf[0].retaiuint64_t n = (const void *(__cdecl *)(const void *))&_CFRetain;
        buf[0].release = (void (__cdecl *)(const void *))&_CFRelease;
        buf[0].copyDescriptiouint64_t n = (CFStringRef (__cdecl *)(const void *))&CFCopyDescription;
        qword_1024892E0 = (uint64_t)CFRunLoopObserverCreate(0, 0xFFFFFFFuLL, 1u, 0, (CFRunLoopObserverCallBack)sub_1019D9C18, buf);
        CFRunLoopAddObserver(v12, (CFRunLoopObserverRef)qword_1024892E0, kCFRunLoopCommonModes);
        CFRelease(v19);
        uint64_t v18 = (__CFRunLoopObserver *)qword_1024892E0;
      }
      if (!CFRunLoopContainsObserver(v12, v18, kCFRunLoopDefaultMode)) {
        CFRunLoopAddObserver(v12, (CFRunLoopObserverRef)qword_1024892E0, kCFRunLoopDefaultMode);
      }
    }
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CLDaemonStartedNotification, 0, 0, 1u);
  *(_DWORD *)(v4 + 24) = 1;
  if (*(_DWORD *)(v4 + 40) != -1)
  {
    if (v2[166] != -1) {
      dispatch_once(&qword_102419530, &stru_10234C000);
    }
    int v21 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      buf[0].versiouint64_t n = 0x304000100;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "starting idle shutdown timer of %d seconds", (uint8_t *)buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v2[166] != -1) {
        dispatch_once(&qword_102419530, &stru_10234C000);
      }
      __int16 v31 = 67109120;
      unsigned int v32 = 3;
      __int16 v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonCore::startRun(os_activity_scope_state_t)", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
    sub_1019DAE8C(v4, 3);
  }
  os_activity_scope_leave(&state);
  os_activity_scope_leave(a2);
  while (*(_DWORD *)(v4 + 24))
  {
    sub_10014D468(v4);
    if (!sub_100513188(v4))
    {
      a2 = (os_activity_scope_state_s *)&qword_102419000;
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10234C040);
      }
      uint64_t v5 = &qword_102419000;
      long long v22 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        buf[0].versiouint64_t n = 68289539;
        LOWORD(buf[0].info) = 2082;
        *(void **)((char *)&buf[0].info + 2) = "";
        WORD1(buf[0].retain) = 2082;
        *(const void *(__cdecl **)(const void *))((char *)&buf[0].retain + 4) = (const void *(__cdecl *)(const void *))"assert";
        WORD2(buf[0].release) = 2081;
        *(void (__cdecl **)(const void *))((char *)&buf[0].release + 6) = (void (__cdecl *)(const void *))"(fMutex).__assertNotOwned()";
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)buf, 0x26u);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10234C040);
        }
      }
      __int16 v23 = qword_102419638;
      if (os_signpost_enabled((os_log_t)qword_102419638))
      {
        buf[0].versiouint64_t n = 68289539;
        LOWORD(buf[0].info) = 2082;
        *(void **)((char *)&buf[0].info + 2) = "";
        WORD1(buf[0].retain) = 2082;
        *(const void *(__cdecl **)(const void *))((char *)&buf[0].retain + 4) = (const void *(__cdecl *)(const void *))"assert";
        WORD2(buf[0].release) = 2081;
        *(void (__cdecl **)(const void *))((char *)&buf[0].release + 6) = (void (__cdecl *)(const void *))"(fMutex).__assertNotOwned()";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)buf, 0x26u);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10234C040);
        }
      }
      uint64_t v4 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
      {
        buf[0].versiouint64_t n = 68289539;
        LOWORD(buf[0].info) = 2082;
        *(void **)((char *)&buf[0].info + 2) = "";
        WORD1(buf[0].retain) = 2082;
        *(const void *(__cdecl **)(const void *))((char *)&buf[0].retain + 4) = (const void *(__cdecl *)(const void *))"assert";
        WORD2(buf[0].release) = 2081;
        *(void (__cdecl **)(const void *))((char *)&buf[0].release + 6) = (void (__cdecl *)(const void *))"(fMutex).__assertNotOwned()";
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)buf, 0x26u);
      }
      abort_report_np();
      goto LABEL_71;
    }
    CFRunLoopRun();
    sub_10014DB24(v4);
  }
}

void sub_1019DAE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

uint64_t sub_1019DAE8C(uint64_t a1, int a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (*(_DWORD *)(a1 + 24))
  {
    if (a2 == -1)
    {
      a2 = *(_DWORD *)(a1 + 40);
      if (a2 < 0) {
        return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      }
    }
    else if (a2 < 0)
    {
      return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C000);
    }
    uint64_t v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v8 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "no more clients, %d second(s) to auto-shutdown", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10234C000);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonCore::scheduleShutdown(int)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    [*(id *)(a1 + 48) setNextFireDelay:(double)a2];
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
}

void sub_1019DB0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1019DB0EC(uint64_t a1)
{
  uint64_t v1 = a1;
  if (sub_10014DB48(a1))
  {
    uint64_t v2 = _os_activity_create((void *)&_mh_execute_header, "CL: startCleanup", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &state);

    if (qword_102419530 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10234C040);
    }
    unint64_t v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      unsigned int v15 = "assert";
      __int16 v16 = 2081;
      id v17 = "(fMutex).__assertOwned()";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10234C040);
      }
    }
    int v8 = qword_102419638;
    if (os_signpost_enabled((os_log_t)qword_102419638))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      unsigned int v15 = "assert";
      __int16 v16 = 2081;
      id v17 = "(fMutex).__assertOwned()";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10234C040);
      }
    }
    uint64_t v1 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      unsigned int v15 = "assert";
      __int16 v16 = 2081;
      id v17 = "(fMutex).__assertOwned()";
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  dispatch_once(&qword_102419530, &stru_10234C000);
LABEL_3:
  uint64_t v3 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    __int16 v14 = 2082;
    unsigned int v15 = "activity";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"startCleanup\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (&_SBApplicationStateEndGeneratingChangeNotifications) {
    SBApplicationStateEndGeneratingChangeNotifications();
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(DarwinNotifyCenter, v1);
  uint64_t v6 = sub_1000A6958();
  buf[0] = 1;
  sub_1000EA238(v6, off_10241CD00, buf);
  [v4 drain];
  os_activity_scope_leave(&state);
}

void sub_1019DB47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
}

uint64_t sub_1019DB4A0(unsigned __int8 *a1, os_activity_scope_state_s *a2)
{
  (*(void (**)(unsigned __int8 *))(*(void *)a1 + 16))(a1);
  sub_1019D8C94((uint64_t)a1);
  sub_1019DA0D0((uint64_t)a1, a2);
  sub_1019DB0EC((uint64_t)a1);
  uint64_t v4 = a1[56];
  (*(void (**)(unsigned __int8 *))(*(void *)a1 + 24))(a1);
  return v4;
}

void sub_1019DB54C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1019DB560(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 17))
  {
    if (*(unsigned char *)(a1 + 16)) {
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
    }
    else {
      (*(void (**)(void))(**(void **)a1 + 24))();
    }
    *(unsigned char *)(a1 + 17) = 0;
  }
  return a1;
}

BOOL sub_1019DB5D0(uint64_t a1, int a2)
{
  uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: locationd shutting down", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v4, &v10);

  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_10234C000);
  }
  uint64_t v5 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    __int16 v14 = 2082;
    unsigned int v15 = "activity";
    __int16 v16 = 1026;
    int v17 = a2;
    __int16 v18 = 1026;
    int v19 = dword_102479ED0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"locationd shutting down\", \"event\":%{public, location:escape_only}s, \"force\":%{public}hhd, \"killerPid\":%{public}d}", buf, 0x28u);
  }
  alarm(0xAu);
  *(void *)uint64_t buf = a1;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  HIWORD(v13) = 256;
  int v6 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 24), (unsigned int *)&v6, 0, memory_order_relaxed, memory_order_relaxed);
  BOOL v7 = v6 == 1;
  if (v6 == 1)
  {
    *(unsigned char *)(a1 + 56) = a2;
    int v8 = (__CFRunLoop *)sub_1001C2710();
    CFRunLoopStop(v8);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  os_activity_scope_leave(&v10);
  return v7;
}

void sub_1019DB7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1019DB7E0(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_1000C7F88(buf);
    v46.__r_.__value_.__s.__data_[0] = 0;
    sub_1000EA238(*(uint64_t *)buf, "ObsoleteDataDeleted", &v46);
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
    sub_1000C7F88(buf);
    sub_10051F604(*(uint64_t *)buf);
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
    [*(id *)(a1 + 96) setNextFireDelay:0.0];
  }
  else
  {
    BOOL v37 = 0;
    sub_1000C7F88(buf);
    int v3 = sub_1000D2988(*(uint64_t *)buf, "ObsoleteDataDeleted", &v37);
    if (v37) {
      int v4 = v3;
    }
    else {
      int v4 = 0;
    }
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
    if (v4)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10234C000);
      }
      uint64_t v5 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Obsolete data has already been deleted; not deleting again\"}",
          buf,
          0x12u);
      }
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10234C000);
      }
      int v6 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Deleting obsolete data\"}", buf, 0x12u);
      }
      double Current = CFAbsoluteTimeGetCurrent();
      int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: _deleteObsoleteData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
      os_activity_scope_enter(v8, &state);

      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10234C000);
      }
      unint64_t v9 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = "activity";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"_deleteObsoleteData\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      sub_100E844E0();
      sub_100E8476C();
      uint64_t v10 = sub_1000A6958();
      sub_1004CF7DC(v10, "PreviousLocation", 0xFFFFFFFFLL);
      uint64_t v11 = sub_1000A6958();
      sub_1004CF7DC(v11, "WifiLocationNearby", 0xFFFFFFFFLL);
      uint64_t v12 = sub_1000A6958();
      (*(void (**)(uint64_t))(*(void *)v12 + 944))(v12);
      sub_1000C7F88(buf);
      sub_1004CF7DC(*(uint64_t *)buf, "LocationEnabled", 0xFFFFFFFFLL);
      if (*(void *)&buf[8]) {
        sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
      }
      sub_10053B99C(0, &v46);
      for (uint64_t i = 0; i != 23; ++i)
      {
        __int16 v14 = off_10234C060[i];
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v46.__r_.__value_.__l.__size_;
        }
        size_t v16 = strlen(off_10234C060[i]);
        sub_1001110E4((uint64_t)__p, size + v16);
        if (v39 >= 0) {
          int v17 = __p;
        }
        else {
          int v17 = (void **)__p[0];
        }
        if (size)
        {
          if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            __int16 v18 = &v46;
          }
          else {
            __int16 v18 = (std::string *)v46.__r_.__value_.__r.__words[0];
          }
          memmove(v17, v18, size);
        }
        int v19 = (char *)v17 + size;
        if (v16) {
          memmove(v19, v14, v16);
        }
        v19[v16] = 0;
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_10234C000);
        }
        std::string v20 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          if (v39 >= 0) {
            int v21 = __p;
          }
          else {
            int v21 = (void **)__p[0];
          }
          *(_DWORD *)uint64_t buf = 136446210;
          *(void *)&uint8_t buf[4] = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Notice Deleting %{public}s if present", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_10234C000);
          }
          if (v39 >= 0) {
            __int16 v23 = __p;
          }
          else {
            __int16 v23 = (void **)__p[0];
          }
          int v41 = 136446210;
          __int16 v42 = v23;
          uint64_t v24 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void _deleteObsoleteData()", "%s\n", v24);
          if (v24 != buf) {
            free(v24);
          }
        }
        if (v39 >= 0) {
          long long v22 = __p;
        }
        else {
          long long v22 = (void **)__p[0];
        }
        sub_1004BB38C((const char *)v22);
        if (SHIBYTE(v39) < 0) {
          operator delete(__p[0]);
        }
      }
      sub_10053B99C(0, (std::string *)buf);
      __int16 v25 = std::string::append((std::string *)buf, "wifi");
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      int64_t v39 = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (v39 >= 0) {
        __int16 v27 = __p;
      }
      else {
        __int16 v27 = (void **)__p[0];
      }
      if (sub_1000A569C((const char *)v27))
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_10234C000);
        }
        double v28 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 68289026;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Deleting obsolete wifi subdirectory\"}", buf, 0x12u);
        }
        if (v39 >= 0) {
          uint64_t v29 = __p;
        }
        else {
          uint64_t v29 = (void **)__p[0];
        }
        *(void *)uint64_t buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 3321888768;
        *(void *)&uint8_t buf[16] = sub_1019DC39C;
        *(void *)&unsigned char buf[24] = &unk_10234C120;
        if (SHIBYTE(v39) < 0)
        {
          sub_1000DC48C(&v44, __p[0], (unint64_t)__p[1]);
        }
        else
        {
          long long v44 = *(_OWORD *)__p;
          uint64_t v45 = v39;
        }
        sub_100B04560((uint64_t)v29, (uint64_t)buf);
        if (v39 >= 0) {
          unint64_t v30 = __p;
        }
        else {
          unint64_t v30 = (void **)__p[0];
        }
        sub_1004BB3AC((const char *)v30);
        if (SHIBYTE(v45) < 0) {
          operator delete((void *)v44);
        }
      }
      if (SHIBYTE(v39) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
      os_activity_scope_leave(&state);
      if ((sub_10074157C() & 8) != 0)
      {
        sub_10051F6A8((uint64_t)buf, @"com.apple.springboard", 1, @"mobile");
        __p[0] = 0;
        if (sub_10013F3C8((uint64_t)buf, @"SBLastSystemVersion", (CFTypeRef *)__p)) {
          BOOL v31 = CFStringGetCharacterAtIndex((CFStringRef)__p[0], 0) == 57;
        }
        else {
          BOOL v31 = 0;
        }
        LOBYTE(state.opaque[0]) = 0;
        sub_1000C7F88(&v46);
        int v32 = sub_1000D29FC((uint64_t)v46.__r_.__value_.__l.__data_, @"GestureServiceEnabled", (BOOL *)&state);
        if (v46.__r_.__value_.__l.__size_) {
          sub_1000DB0A0((std::__shared_weak_count *)v46.__r_.__value_.__l.__size_);
        }
        sub_10051F740(buf);
        if ((v31 & (v32 ^ 1)) == 1)
        {
          sub_1000C7F88(buf);
          v46.__r_.__value_.__s.__data_[0] = 1;
          sub_1000EA52C(*(uint64_t *)buf, @"GestureServiceEnabled", &v46);
          if (*(void *)&buf[8]) {
            sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
          }
        }
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10234C000);
      }
      __int16 v33 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        CFAbsoluteTime v34 = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)uint64_t buf = 134217984;
        *(double *)&uint8_t buf[4] = v34 - Current;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "Obsolete data deleted in %.2f seconds", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_10234C000);
        }
        CFAbsoluteTime v35 = CFAbsoluteTimeGetCurrent();
        LODWORD(v46.__r_.__value_.__l.__data_) = 134217984;
        *(double *)((char *)v46.__r_.__value_.__r.__words + 4) = v35 - Current;
        double v36 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonCore::deleteObsoleteData(BOOL)", "%s\n", v36);
        if (v36 != buf) {
          free(v36);
        }
      }
      sub_1000C7F88(buf);
      v46.__r_.__value_.__s.__data_[0] = 1;
      sub_1000EA238(*(uint64_t *)buf, "ObsoleteDataDeleted", &v46);
      if (*(void *)&buf[8]) {
        sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
      }
      sub_1000C7F88(buf);
      sub_10051F604(*(uint64_t *)buf);
      if (*(void *)&buf[8]) {
        sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
      }
    }
  }
}

void sub_1019DC208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,os_activity_scope_state_s state,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v37 - 121) < 0) {
    operator delete(*(void **)(v37 - 144));
  }
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1019DC30C(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1019DC33C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1019DC36C(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1019DC39C(uint64_t a1, const std::string::value_type *a2)
{
  if (*(char *)(a1 + 55) >= 0) {
    size_t v4 = *(unsigned __int8 *)(a1 + 55);
  }
  else {
    size_t v4 = *(void *)(a1 + 40);
  }
  uint64_t v5 = &v24;
  sub_1001110E4((uint64_t)&v24, v4 + 1);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v5 = (std::string *)v24.__r_.__value_.__r.__words[0];
  }
  if (v4)
  {
    int v8 = *(char **)(a1 + 32);
    BOOL v7 = (char *)(a1 + 32);
    int v6 = v8;
    if (v7[23] >= 0) {
      unint64_t v9 = v7;
    }
    else {
      unint64_t v9 = v6;
    }
    memmove(v5, v9, v4);
  }
  *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 47;
  uint64_t v10 = std::string::append(&v24, a2);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  int64_t v21 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_10234C000);
  }
  uint64_t v12 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = __p;
    if (v21 < 0) {
      uint64_t v13 = (void **)__p[0];
    }
    LODWORD(v24.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Deleting %s", (uint8_t *)&v24, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v24, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C000);
    }
    int v17 = __p;
    if (v21 < 0) {
      int v17 = (void **)__p[0];
    }
    int v22 = 136315138;
    __int16 v23 = v17;
    __int16 v18 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void _deleteObsoleteData()_block_invoke", "%s\n", (const char *)v18);
    if (v18 != &v24) {
      free(v18);
    }
  }
  if (v21 >= 0) {
    __int16 v14 = __p;
  }
  else {
    __int16 v14 = (void **)__p[0];
  }
  if (!sub_1004BB38C((const char *)v14))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C000);
    }
    unsigned int v15 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v24.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Could not delete file %{public}s", (uint8_t *)&v24, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&v24, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10234C000);
      }
      int v22 = 136446210;
      __int16 v23 = (void *)a2;
      int v19 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void _deleteObsoleteData()_block_invoke", "%s\n", (const char *)v19);
      if (v19 != &v24) {
        free(v19);
      }
    }
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  return 1;
}

void sub_1019DC778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1019DC7B8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101E54118;
      v0[3] = unk_101E54128;
      v0[4] = xmmword_101E54138;
      v0[0] = xmmword_101E540F8;
      v0[1] = unk_101E54108;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_1019DC898(_Unwind_Exception *a1)
{
}

void sub_1019DC8B0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_1019DC930()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_1019DC9C0(_Unwind_Exception *a1)
{
}

uint64_t sub_1019DC9D8()
{
  sub_100134750(qword_1024892E8, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024892E8, (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[3], "RoadAndBuildingPrecachingEnabled");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[3], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[6], "RoadTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[6], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[9], "BuildingTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[9], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[12], "RunningTrackTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[12], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[15], "RoadTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[15], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[18], "BuildingTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[18], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[21], "RunningTrackTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[21], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[24], "RoadTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[24], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[27], "BuildingTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[27], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[30], "RunningTrackTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[30], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[33], "PrecachingTileRefreshPeriodV2");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[33], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[36], "PrecachingTileRefreshPeriodNPLOIAndTouristV2");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[36], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[39], "PrecachingMinimumBatteryLevel");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[39], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[42], "PrecachingMinimumBatteryLevelAggressiveMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[42], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[45], "PrecachingXPCDownloadInterval");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[45], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[48], "PrecachingDownloadSizePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[48], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[51], "PrecachingUploadSizePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[51], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[54], "PrecachingDownloadTimePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[54], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[57], "UseInsideOutTileDownload");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[57], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[60], "IsDiskIntensiveActivity");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[60], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[63], "PrecachingAllowSignalEnvironmentMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[63], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[66], "RoadTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[66], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[69], "BuildingTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[69], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[72], "RunningTrackTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[72], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[75], "PrecachingAllowAggressiveSettingInTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[75], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[78], "RoadTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[78], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[81], "BuildingTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[81], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[84], "RunningTrackTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[84], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[87], "MaxSectionDownloadAllowedForTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[87], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[90], "TimeWindowToCheckForMaxSectionDownloadForTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[90], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[93], "PrecachingAllowTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[93], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[96], "RoadTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[96], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[99], "BuildingTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[99], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[102], "RunningTrackTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[102], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[105], "MaxLocationAgeForTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[105], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[108], "SectionsToDownloadPerXPCCall");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[108], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[111], "SectionsToDownloadPerXPCCallForTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[111], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[114], "SectionsToDownloadPerXPCCallForNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[114], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[117], "SectionsToDownloadPerXPCCallForSignalEnvironment");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[117], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[120], "PrecachngAllowNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[120], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[123], "RoadTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[123], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[126], "BuildingTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[126], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[129], "RunningTrackTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[129], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[132], "DistanceFromHomeForTouristModeMeters");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[132], (void *)&_mh_execute_header);
  sub_100134750(&qword_1024892E8[135], "NumDaysLookbackForWorkouts");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024892E8[135], (void *)&_mh_execute_header);
  sub_100134750(&qword_102489738, "syncget_graph_iOS.plist");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102489738, (void *)&_mh_execute_header);
}

void sub_1019DD0C0(uint64_t a1, uint64_t a2)
{
  nullsub_41(a1, a2);
  sub_100527358();
  sub_10071B71C();
  [+[CLServiceVendor sharedInstance] retireServiceWithName:@"CLClientManager"];
  sub_100F544C8();

  sub_1005B4E40();
}

uint64_t start(int a1)
{
  AnalyticsSendEventLazy();
  id v2 = objc_alloc_init((Class)NSAutoreleasePool);
  int v3 = _os_activity_create((void *)&_mh_execute_header, "CL: locationd main - setup", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DETACHED);
  os_activity_scope_enter(v3, &state);

  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_10234C1C0);
  }
  size_t v4 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)BOOL v31 = 2082;
    *(void *)&v31[2] = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"locationd main - setup\"}", buf, 0x12u);
  }
  if (_set_user_dir_suffix())
  {
    uint64_t v5 = [(NSString *)NSTemporaryDirectory() UTF8String];
    if (!sub_100B047E0(v5, 73, 0))
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10234C1C0);
      }
      int v6 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)BOOL v31 = 2082;
        *(void *)&v31[2] = "";
        __int16 v32 = 2114;
        __int16 v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"locationd could not find attributes of file\", \"Error\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_10234C1C0);
        }
      }
      BOOL v7 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)BOOL v31 = 2082;
        *(void *)&v31[2] = "";
        __int16 v32 = 2114;
        __int16 v33 = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "locationd could not find attributes of file", "{\"msg%{public}.0s\":\"locationd could not find attributes of file\", \"Error\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
    }
  }
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1004BA7B0(Current);
  if (a1 < 2)
  {
    int v22 = +[NSMutableDictionary dictionaryWithDictionary:&off_1023979A0];
    sub_100103240();
    if (sub_10073E30C())
    {
      cf[0] = 0;
      sub_1000C7F88(buf);
      if (sub_1004D01D8(*(uint64_t *)buf, @"DefaultServiceReplacementMap", cf))
      {
        CFTypeID v12 = CFGetTypeID(cf[0]);
        CFTypeID TypeID = CFDictionaryGetTypeID();
        if (*(void *)v31) {
          sub_1000DB0A0(*(std::__shared_weak_count **)v31);
        }
        if (v12 == TypeID)
        {
          __int16 v14 = (void *)cf[0];
          long long v24 = 0u;
          long long v25 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          id v15 = [(id)cf[0] countByEnumeratingWithState:&v24 objects:v29 count:16];
          if (v15)
          {
            uint64_t v16 = *(void *)v25;
            do
            {
              for (uint64_t i = 0; i != v15; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v25 != v16) {
                  objc_enumerationMutation(v14);
                }
                uint64_t v18 = *(void *)(*((void *)&v24 + 1) + 8 * i);
                int v19 = (__CFString *)[v14 objectForKeyedSubscript:v18];
                if ([(__CFString *)v19 length]) {
                  CFStringRef v20 = v19;
                }
                else {
                  CFStringRef v20 = @"_CLUnSupportedService";
                }
                [(NSMutableDictionary *)v22 setObject:v20 forKey:v18];
              }
              id v15 = [v14 countByEnumeratingWithState:&v24 objects:v29 count:16];
            }
            while (v15);
          }
        }
      }
      else if (*(void *)v31)
      {
        sub_1000DB0A0(*(std::__shared_weak_count **)v31);
      }
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    int64_t v21 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)BOOL v31 = 2082;
      *(void *)&v31[2] = "";
      __int16 v32 = 2114;
      __int16 v33 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"locationd starting up with serviceReplacementMap\", \"ReplacementMap\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    [+[CLServiceVendor sharedInstance] setServiceReplacementMap:v22 missBehavior:0];
    sub_1019DE0A8();
    sub_1019DE1CC();
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10234C1E0);
  }
  unint64_t v9 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "locationd does not take any command-line arguments. Use CFPreferences instead.", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10234C1E0);
    }
    LOWORD(cf[0]) = 0;
    long long v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "int main(int, const char **)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  return 0;
}

void sub_1019DDF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  os_activity_scope_leave(&state);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a66 < 0) {
    operator delete(a61);
  }
  _Unwind_Resume(a1);
}

NSDictionary *__cdecl sub_1019DE09C(id a1)
{
  return (NSDictionary *)&off_102397978;
}

void sub_1019DE0A8()
{
  double v6 = 0.0;
  sub_1000C7F88(&v4);
  char v0 = sub_1000A699C(v4, "LowWaterLoopProtectionInterval", &v6);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if ((v0 & 1) == 0)
  {
    double v6 = 600.0;
    goto LABEL_7;
  }
  if (v6 > 0.0)
  {
LABEL_7:
    uint64_t v1 = [[CLOSTransaction alloc] initWithDescription:"main.low-water-loop-protection"];
    dispatch_time_t v2 = dispatch_time(0, (uint64_t)(v6 * 1000000000.0));
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = nullsub_2093;
    v3[3] = &unk_10229FED8;
    v3[4] = v1;
    dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, v3);
  }
}

void sub_1019DE1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1000DB0A0(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1019DE1CC()
{
  sub_1000C7F88(&buf);
  LODWORD(v106) = 0;
  if (sub_10006EF84(buf, "LogLegacyRadar", &v106)) {
    int v0 = v106;
  }
  else {
    int v0 = 0;
  }
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (sub_100AFB134(v0))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    uint64_t v1 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289282;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 1026;
      *(_DWORD *)&buf_8[12] = v0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Warning, Legacy logging enabled\", \"radar\":%{public}d}", (uint8_t *)&buf, 0x18u);
    }
    sub_1000C7F88(&v106);
    uint64_t v2 = v106;
    int v3 = (char *)sub_1000A6958();
    sub_1000A5670(v3, (uint64_t)&buf);
    uint64_t v4 = std::string::append((std::string *)&buf, "locationd.log");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v105 = v4->__r_.__value_.__r.__words[2];
    long long v104 = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    sub_1004D37A8(v2 + 104, "LogFile", (char *)&v104);
    if (SHIBYTE(v105) < 0) {
      operator delete((void *)v104);
    }
    if ((buf_8[15] & 0x80000000) != 0) {
      operator delete((void *)buf);
    }
    if (*((void *)&v106 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v106 + 1));
    }
    sub_1000C7F88(&v106);
    uint64_t v6 = v106;
    BOOL v7 = (char *)sub_1000A6958();
    sub_1000A5670(v7, (uint64_t)&buf);
    int v8 = std::string::append((std::string *)&buf, "logs");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v103 = v8->__r_.__value_.__r.__words[2];
    long long v102 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    sub_1004D37A8(v6 + 104, "LogFileDirectory", (char *)&v102);
    if (SHIBYTE(v103) < 0) {
      operator delete((void *)v102);
    }
    if ((buf_8[15] & 0x80000000) != 0) {
      operator delete((void *)buf);
    }
    if (*((void *)&v106 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v106 + 1));
    }
    sub_1000C7F88(&buf);
    sub_1004D34AC(buf + 104, "LogFilePrefix", "locationd");
    if (*(void *)buf_8) {
      sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
    }
    sub_1000C7F88(&buf);
    LODWORD(v106) = 52428800;
    sub_1000EA838(buf + 104, "LogFileRotationSize", &v106);
    if (*(void *)buf_8) {
      sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
    }
    sub_1000C7F88(&buf);
    LODWORD(v106) = 6;
    sub_1000EA838(buf + 104, "LogFileStorageCount", &v106);
    if (*(void *)buf_8) {
      sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
    }
    sub_1000C7F88(&buf);
    LODWORD(v106) = -1;
    sub_1000EA838(buf + 104, "LogFileLevel", &v106);
    if (*(void *)buf_8) {
      sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
    }
    sub_1000C7F88(&buf);
    LOBYTE(v106) = 0;
    sub_1000EA238(buf + 104, "LogFileFlush", &v106);
    if (*(void *)buf_8) {
      sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
    }
    sub_1000C7F88(&buf);
    LOBYTE(v106) = 0;
    sub_1000EA238(buf + 104, "LogShowUI", &v106);
    if (*(void *)buf_8) {
      sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
    }
    sub_1000C7F88(&buf);
    LOBYTE(v106) = 0;
    sub_1000EA238(buf + 104, "LogFence", &v106);
    if (*(void *)buf_8) {
      sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
    }
    sub_1000C7F88(&buf);
    LODWORD(v106) = -1;
    sub_1000EA838(buf + 104, "LogBufferLevel", &v106);
    if (*(void *)buf_8) {
      sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
    }
    sub_1000C7F88(&buf);
    LODWORD(v106) = 0;
    sub_1000EA838(buf + 104, "LogBufferSize", &v106);
    if (*(void *)buf_8) {
      sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
    }
    sub_1000C7F88(&buf);
    LODWORD(v106) = 0;
    sub_1000EA838(buf + 104, "LogConsoleLevel", &v106);
    if (*(void *)buf_8) {
      sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
    }
    sub_1000C7F88(&buf);
    LODWORD(v106) = 0;
    sub_1000EA838(buf + 104, "LogStackLevel", &v106);
    if (*(void *)buf_8) {
      sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
    }
    BOOL v101 = 0;
    sub_1000C7F88(&buf);
    int v10 = sub_1000D2988(buf, "LogLocationsFlush", &v101);
    if (*(void *)buf_8) {
      sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
    }
    if (v10)
    {
      sub_1000C7F88(&buf);
      sub_1004CF7DC(buf, "LogLocationsFlush", 0xFFFFFFFFLL);
      if (*(void *)buf_8) {
        sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
      }
      sub_1000C7F88(&buf);
      sub_1000EA238(buf, "LogFileFlush", &v101);
      if (*(void *)buf_8) {
        sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
      }
    }
    uint64_t buf = 0;
    *(void *)buf_8 = 0;
    *(void *)&buf_8[8] = 0;
    sub_1000C7F88(&v106);
    BOOL v11 = sub_1004D1284(v106, "LogLocationsFile", (std::string *)&buf);
    if (*((void *)&v106 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v106 + 1));
    }
    if (v11)
    {
      sub_1000C7F88(&v106);
      sub_1004CF7DC(v106, "LogLocationsFile", 0xFFFFFFFFLL);
      if (*((void *)&v106 + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v106 + 1));
      }
      sub_1000C7F88(&v106);
      sub_1004D37A8(v106, "LogFile", (char *)&buf);
      if (*((void *)&v106 + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v106 + 1));
      }
    }
    BOOL v100 = 0;
    sub_1000C7F88(&v106);
    int v12 = sub_1000D2988(v106, "LogLocations", &v100);
    if (*((void *)&v106 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v106 + 1));
    }
    if (v12)
    {
      sub_1000C7F88(&v106);
      sub_1004CF7DC(v106, "LogLocations", 0xFFFFFFFFLL);
      if (*((void *)&v106 + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v106 + 1));
      }
      if (v100)
      {
        sub_1000C7F88(&v106);
        LODWORD(v98) = 3;
        sub_1000EA838(v106, "LogFileLevel", &v98);
        if (*((void *)&v106 + 1)) {
          sub_1000DB0A0(*((std::__shared_weak_count **)&v106 + 1));
        }
        sub_1000C7F88(&v106);
        LOBYTE(v98) = 1;
        sub_1000EA238(v106, "LogShowUI", &v98);
      }
      else
      {
        sub_1000C7F88(&v106);
        LODWORD(v98) = -1;
        sub_1000EA838(v106, "LogFileLevel", &v98);
        if (*((void *)&v106 + 1)) {
          sub_1000DB0A0(*((std::__shared_weak_count **)&v106 + 1));
        }
        sub_1000C7F88(&v106);
        LOBYTE(v98) = 0;
        sub_1000EA238(v106, "LogShowUI", &v98);
      }
      if (*((void *)&v106 + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v106 + 1));
      }
      sub_1000C7F88(&v106);
      sub_1004CF7DC(v106, "LogConsoleLevel", 0);
      if (*((void *)&v106 + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v106 + 1));
      }
      sub_1000C7F88(&v106);
      sub_1004CF7DC(v106, "LogStackLevel", 0xFFFFFFFFLL);
      if (*((void *)&v106 + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v106 + 1));
      }
    }
    sub_1000C7F88(&v106);
    sub_10051F604(v106);
    if (*((void *)&v106 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v106 + 1));
    }
    uint64_t v91 = sub_10013D1F4();
    sub_1000C7F88(&v106);
    long long v99 = v106;
    long long v106 = 0uLL;
    sub_1012FA0E8(v91);
  }
  if (v0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    uint64_t v13 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      uint64_t buf = 68289282;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 1026;
      *(_DWORD *)&buf_8[12] = v0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid radar\", \"radar\":%{public}d}", (uint8_t *)&buf, 0x18u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10234C1C0);
      }
    }
    __int16 v14 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t buf = 68289282;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 1026;
      *(_DWORD *)&buf_8[12] = v0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid radar", "{\"msg%{public}.0s\":\"Invalid radar\", \"radar\":%{public}d}", (uint8_t *)&buf, 0x18u);
    }
  }
  CFTypeRef v98 = 0;
  sub_1000C7F88(&buf);
  int v15 = sub_1004D0164(buf, "LogFile", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v15)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    uint64_t v16 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogFile";
      __int16 v109 = 1026;
      int v110 = 1;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v17 = sub_1004D0164(buf, "LogFilePrefix", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v17)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    uint64_t v18 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogFilePrefix";
      __int16 v109 = 1026;
      int v110 = 1;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v19 = sub_1004D0164(buf, "LogFileFlush", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v19)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    CFStringRef v20 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogFileFlush";
      __int16 v109 = 1026;
      int v110 = 1;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v21 = sub_1004D0164(buf, "ShowError", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v21)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    int v22 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "ShowError";
      __int16 v109 = 1026;
      int v110 = 1;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v23 = sub_1004D0164(buf, "LogFence", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v23)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    long long v24 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogFence";
      __int16 v109 = 1026;
      int v110 = 1;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v25 = sub_1004D0164(buf, "LogBufferSize", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v25)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    long long v26 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogBufferSize";
      __int16 v109 = 1026;
      int v110 = 1;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v27 = sub_1004D0164(buf, "LogShowUI", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v27)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    double v28 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogShowUI";
      __int16 v109 = 1026;
      int v110 = 1;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v29 = sub_1004D0164(buf, "LogFileLevel", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v29)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    unint64_t v30 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogFileLevel";
      __int16 v109 = 1026;
      int v110 = 1;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v31 = sub_1004D0164(buf, "LogBufferLevel", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v31)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    __int16 v32 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogBufferLevel";
      __int16 v109 = 1026;
      int v110 = 1;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v33 = sub_1004D0164(buf, "LogConsoleLevel", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v33)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    CFAbsoluteTime v34 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogConsoleLevel";
      __int16 v109 = 1026;
      int v110 = 1;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v35 = sub_1004D0164(buf, "LogStackLevel", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v35)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    double v36 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogStackLevel";
      __int16 v109 = 1026;
      int v110 = 1;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v37 = sub_1004D0164(buf, "LogFileRotationSize", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v37)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    uint64_t v38 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogFileRotationSize";
      __int16 v109 = 1026;
      int v110 = 1;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v39 = sub_1004D0164(buf, "LogFileStorageCount", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v39)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    __int16 v40 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogFileStorageCount";
      __int16 v109 = 1026;
      int v110 = 1;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v41 = sub_1004D0164(buf, "LogLocations", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v41)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    __int16 v42 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogLocations";
      __int16 v109 = 1026;
      int v110 = 1;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v43 = sub_1004D0164(buf, "LogLocationsFile", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v43)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    long long v44 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogLocationsFile";
      __int16 v109 = 1026;
      int v110 = 1;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v45 = sub_1004D0164(buf, "LogLocationsFlush", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v45)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    std::string v46 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogLocationsFlush";
      __int16 v109 = 1026;
      int v110 = 1;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  sub_1004CF7DC(buf, "LogFile", 0xFFFFFFFFLL);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  sub_1000C7F88(&buf);
  sub_1004CF7DC(buf, "LogFilePrefix", 0xFFFFFFFFLL);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  sub_1000C7F88(&buf);
  sub_1004CF7DC(buf, "LogFileFlush", 0xFFFFFFFFLL);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  sub_1000C7F88(&buf);
  sub_1004CF7DC(buf, "ShowError", 0xFFFFFFFFLL);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  sub_1000C7F88(&buf);
  sub_1004CF7DC(buf, "LogFence", 0xFFFFFFFFLL);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  sub_1000C7F88(&buf);
  sub_1004CF7DC(buf, "LogBufferSize", 0xFFFFFFFFLL);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  sub_1000C7F88(&buf);
  sub_1004CF7DC(buf, "LogShowUI", 0xFFFFFFFFLL);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  sub_1000C7F88(&buf);
  sub_1004CF7DC(buf, "LogFileLevel", 0xFFFFFFFFLL);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  sub_1000C7F88(&buf);
  sub_1004CF7DC(buf, "LogBufferLevel", 0xFFFFFFFFLL);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  sub_1000C7F88(&buf);
  sub_1004CF7DC(buf, "LogConsoleLevel", 0xFFFFFFFFLL);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  sub_1000C7F88(&buf);
  sub_1004CF7DC(buf, "LogStackLevel", 0xFFFFFFFFLL);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  sub_1000C7F88(&buf);
  sub_1004CF7DC(buf, "LogFileRotationSize", 0xFFFFFFFFLL);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  sub_1000C7F88(&buf);
  sub_1004CF7DC(buf, "LogFileStorageCount", 0xFFFFFFFFLL);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  sub_1000C7F88(&buf);
  sub_1004CF7DC(buf, "LogLocations", 0xFFFFFFFFLL);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  sub_1000C7F88(&buf);
  sub_1004CF7DC(buf, "LogLocationsFile", 0xFFFFFFFFLL);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  sub_1000C7F88(&buf);
  sub_1004CF7DC(buf, "LogLocationsFlush", 0xFFFFFFFFLL);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  sub_1000C7F88(&buf);
  sub_10051F604(buf);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  sub_1000C7F88(&buf);
  int v47 = sub_1004D0164(buf, "LogFile", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v47)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    __int16 v48 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogFile";
      __int16 v109 = 1026;
      int v110 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v49 = sub_1004D0164(buf, "LogFilePrefix", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v49)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    __int16 v50 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogFilePrefix";
      __int16 v109 = 1026;
      int v110 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v51 = sub_1004D0164(buf, "LogFileFlush", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v51)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    __int16 v52 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogFileFlush";
      __int16 v109 = 1026;
      int v110 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v53 = sub_1004D0164(buf, "ShowError", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v53)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    int v54 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "ShowError";
      __int16 v109 = 1026;
      int v110 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v55 = sub_1004D0164(buf, "LogFence", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v55)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    int v56 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogFence";
      __int16 v109 = 1026;
      int v110 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v57 = sub_1004D0164(buf, "LogBufferSize", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v57)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    int v58 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogBufferSize";
      __int16 v109 = 1026;
      int v110 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v59 = sub_1004D0164(buf, "LogShowUI", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v59)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    double v60 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogShowUI";
      __int16 v109 = 1026;
      int v110 = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v61 = sub_1004D0164(buf, "LogFileLevel", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v61)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    int v62 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogFileLevel";
      __int16 v109 = 1026;
      int v110 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v63 = sub_1004D0164(buf, "LogBufferLevel", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v63)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    int v64 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogBufferLevel";
      __int16 v109 = 1026;
      int v110 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v65 = sub_1004D0164(buf, "LogConsoleLevel", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v65)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    double v66 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogConsoleLevel";
      __int16 v109 = 1026;
      int v110 = 0;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v67 = sub_1004D0164(buf, "LogStackLevel", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v67)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    char v68 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogStackLevel";
      __int16 v109 = 1026;
      int v110 = 0;
      _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v69 = sub_1004D0164(buf, "LogFileRotationSize", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v69)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    __int16 v70 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogFileRotationSize";
      __int16 v109 = 1026;
      int v110 = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v71 = sub_1004D0164(buf, "LogFileStorageCount", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v71)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    int v72 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogFileStorageCount";
      __int16 v109 = 1026;
      int v110 = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v73 = sub_1004D0164(buf, "LogLocations", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v73)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    int v74 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogLocations";
      __int16 v109 = 1026;
      int v110 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v75 = sub_1004D0164(buf, "LogLocationsFile", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v75)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    int v76 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogLocationsFile";
      __int16 v109 = 1026;
      int v110 = 0;
      _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  sub_1000C7F88(&buf);
  int v77 = sub_1004D0164(buf, "LogLocationsFlush", &v98);
  if (*(void *)buf_8) {
    sub_1000DB0A0(*(std::__shared_weak_count **)buf_8);
  }
  if (v77)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C1C0);
    }
    int v78 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289538;
      *(_WORD *)buf_8 = 2082;
      *(void *)&buf_8[2] = "";
      *(_WORD *)&buf_8[10] = 2082;
      *(void *)&buf_8[12] = "LogLocationsFlush";
      __int16 v109 = 1026;
      int v110 = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
    }
  }
  __int16 v79 = operator new(0xA0uLL);
  v79[1] = 0;
  v79[2] = 0;
  *__int16 v79 = off_10234C210;
  sub_100AFED40((uint64_t)(v79 + 3), @"com.apple.locationd.legacy-logging-dummy-settings", 1);
  int v80 = (char *)sub_1000A6958();
  sub_1000A5670(v80, (uint64_t)&buf);
  __int16 v81 = std::string::append((std::string *)&buf, "locationd.log");
  long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
  std::string::size_type v97 = v81->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v82;
  v81->__r_.__value_.__l.__size_ = 0;
  v81->__r_.__value_.__r.__words[2] = 0;
  v81->__r_.__value_.__r.__words[0] = 0;
  sub_1004D37A8((uint64_t)(v79 + 16), "LogFile", (char *)__p);
  if (SHIBYTE(v97) < 0) {
    operator delete(__p[0]);
  }
  if ((buf_8[15] & 0x80000000) != 0) {
    operator delete((void *)buf);
  }
  __int16 v83 = (char *)sub_1000A6958();
  sub_1000A5670(v83, (uint64_t)&buf);
  int v84 = std::string::append((std::string *)&buf, "logs");
  long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
  std::string::size_type v95 = v84->__r_.__value_.__r.__words[2];
  *(_OWORD *)int v94 = v85;
  v84->__r_.__value_.__l.__size_ = 0;
  v84->__r_.__value_.__r.__words[2] = 0;
  v84->__r_.__value_.__r.__words[0] = 0;
  sub_1004D37A8((uint64_t)(v79 + 16), "LogFileDirectory", (char *)v94);
  if (SHIBYTE(v95) < 0) {
    operator delete(v94[0]);
  }
  if ((buf_8[15] & 0x80000000) != 0) {
    operator delete((void *)buf);
  }
  sub_1000C7F88(&v106);
  uint64_t v86 = v106;
  __int16 v87 = (char *)sub_1000A6958();
  sub_1000A5670(v87, (uint64_t)&buf);
  int v88 = std::string::append((std::string *)&buf, "logs");
  long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
  std::string::size_type v93 = v88->__r_.__value_.__r.__words[2];
  *(_OWORD *)int v92 = v89;
  v88->__r_.__value_.__l.__size_ = 0;
  v88->__r_.__value_.__r.__words[2] = 0;
  v88->__r_.__value_.__r.__words[0] = 0;
  sub_1004D37A8(v86 + 104, "LogFileDirectory", (char *)v92);
  if (SHIBYTE(v93) < 0) {
    operator delete(v92[0]);
  }
  if ((buf_8[15] & 0x80000000) != 0) {
    operator delete((void *)buf);
  }
  if (*((void *)&v106 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v106 + 1));
  }
  sub_1004D34AC((uint64_t)(v79 + 16), "LogFilePrefix", "locationd");
  LODWORD(buf) = 52428800;
  sub_1000EA838((uint64_t)(v79 + 16), "LogFileRotationSize", &buf);
  LODWORD(buf) = 0;
  sub_1000EA838((uint64_t)(v79 + 16), "LogFileStorageCount", &buf);
  LODWORD(buf) = -1;
  sub_1000EA838((uint64_t)(v79 + 16), "LogFileLevel", &buf);
  LOBYTE(buf) = 0;
  sub_1000EA238((uint64_t)(v79 + 16), "LogFileFlush", &buf);
  LOBYTE(buf) = 0;
  sub_1000EA238((uint64_t)(v79 + 16), "LogShowUI", &buf);
  LOBYTE(buf) = 0;
  sub_1000EA238((uint64_t)(v79 + 16), "LogFence", &buf);
  LODWORD(buf) = -1;
  sub_1000EA838((uint64_t)(v79 + 16), "LogBufferLevel", &buf);
  LODWORD(buf) = 0;
  sub_1000EA838((uint64_t)(v79 + 16), "LogBufferSize", &buf);
  LODWORD(buf) = -1;
  sub_1000EA838((uint64_t)(v79 + 16), "LogConsoleLevel", &buf);
  LODWORD(buf) = -1;
  sub_1000EA838((uint64_t)(v79 + 16), "LogStackLevel", &buf);
  uint64_t v90 = sub_10013D1F4();
  atomic_fetch_add_explicit(v79 + 1, 1uLL, memory_order_relaxed);
  sub_1012FA0E8(v90);
}

void sub_1019E0A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  int v47 = *(std::__shared_weak_count **)(v45 - 152);
  if (v47) {
    sub_1000DB0A0(v47);
  }
  if (*(char *)(v45 - 121) < 0) {
    operator delete(*(void **)(v45 - 144));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1019E0D10()
{
  uint64_t result = qword_102489758;
  if (qword_102489758) {
    return sub_1019DB5D0(qword_102489758, 1);
  }
  return result;
}

uint64_t sub_1019E0D28()
{
  signal(14, (void (__cdecl *)(int))sub_1019E0EF4);
  signal(2, (void (__cdecl *)(int))sub_1019E0EF4);
  sigaction v1 = (sigaction)off_10234C250;
  sigaction(3, &v1, 0);
  return sigaction(15, &v1, 0);
}

void (__cdecl *sub_1019E0DA4())(int)
{
  signal(14, (void (__cdecl *)(int))1);
  signal(2, (void (__cdecl *)(int))1);
  signal(3, (void (__cdecl *)(int))1);

  return signal(15, (void (__cdecl *)(int))1);
}

void sub_1019E0DF4(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1019E0E24(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1019E0E58(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10234C210;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1019E0E78(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10234C210;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1019E0ECC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1019E0EF4(int a1)
{
  if ((a1 - 2) < 2 || a1 == 15)
  {
    alarm(0xAu);
    CFRunLoopSourceSignal((CFRunLoopSourceRef)qword_102489750);
    uint64_t v2 = (__CFRunLoop *)sub_1001C2710();
    CFRunLoopWakeUp(v2);
  }
  else if (a1 == 14)
  {
    _Exit(1);
  }
}

void sub_1019E0F58(int a1, uint64_t a2)
{
  if (a2) {
    dword_102479ED0 = *(_DWORD *)(a2 + 12);
  }
  sub_1019E0EF4(a1);
}

void sub_1019E0F6C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101E54170;
      v0[3] = unk_101E54180;
      v0[4] = xmmword_101E54190;
      v0[0] = xmmword_101E54150;
      v0[1] = unk_101E54160;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_1019E104C(_Unwind_Exception *a1)
{
}

void sub_1019E1064()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_1019E10E4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_1019E1174(_Unwind_Exception *a1)
{
}

BOOL sub_1019E118C(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 16);
  int v3 = *(_DWORD *)(a2 + 16);
  if (v2 < v3) {
    return 1;
  }
  if (v2 > v3) {
    return 0;
  }
  float v4 = *(float *)(a1 + 12);
  float v5 = *(float *)(a2 + 12);
  if (v4 < v5) {
    return 1;
  }
  if (v4 > v5) {
    return 0;
  }
  if (*(float *)a1 < *(float *)a2) {
    return 1;
  }
  if (*(float *)a1 > *(float *)a2) {
    return 0;
  }
  float v6 = *(float *)(a1 + 4);
  float v7 = *(float *)(a2 + 4);
  if (v6 < v7) {
    return 1;
  }
  if (v6 > v7) {
    return 0;
  }
  return *(float *)(a1 + 8) < *(float *)(a2 + 8);
}

void sub_1019E1200(void *a1)
{
}

void sub_1019E1968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  uint64_t v20 = v16[403];
  v16[403] = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  int v21 = (void **)(v16 + 35);
  sub_1019E92E0(a15);
  int v22 = *v18;
  if (*v18)
  {
    v16[40] = v22;
    operator delete(v22);
  }
  int v23 = *v21;
  if (*v21)
  {
    v16[36] = v23;
    operator delete(v23);
  }
  sub_1019E2510(a16);
  sub_1012D0524(v16);
  _Unwind_Resume(a1);
}

void sub_1019E1AAC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 270))
  {
    *(void *)(a1 + 32sub_1019DB7E0(qword_10248D888, 0) = *(void *)(a1 + 312);
    *(void *)(a1 + 288) = *(void *)(a1 + 280);
    *(_DWORD *)(a1 + 304) = 0;
    std::string __p = 0;
    *(void *)int v27 = 0;
    *(void *)&v27[8] = 0;
    sub_10096239C(&__p);
    int v2 = __p;
    int v3 = *(_DWORD **)v27;
    if (__p != *(void **)v27)
    {
      float v4 = *(char **)(a1 + 288);
      do
      {
        float v5 = (uint64_t *)(v2 + 1);
        unint64_t v6 = *(void *)(a1 + 296);
        if ((unint64_t)v4 >= v6)
        {
          uint64_t v9 = *(void *)(a1 + 280);
          unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v4[-v9] >> 2);
          unint64_t v11 = v10 + 1;
          if (v10 + 1 > 0xCCCCCCCCCCCCCCCLL) {
            sub_1001D7FD4();
          }
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - v9) >> 2);
          if (2 * v12 > v11) {
            unint64_t v11 = 2 * v12;
          }
          if (v12 >= 0x666666666666666) {
            unint64_t v13 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v13 = v11;
          }
          __int16 v14 = (char *)sub_1019E9AAC(v13);
          uint64_t v16 = &v14[20 * v10];
          int v17 = *v2;
          uint64_t v18 = *v5;
          *((_DWORD *)v16 + 2) = v2[3];
          *(void *)uint64_t v16 = v18;
          *((_DWORD *)v16 + 3) = v17;
          *((_DWORD *)v16 + 4) = -1;
          uint64_t v20 = *(char **)(a1 + 280);
          int v19 = *(char **)(a1 + 288);
          int v21 = v16;
          if (v19 != v20)
          {
            do
            {
              long long v22 = *(_OWORD *)(v19 - 20);
              *((_DWORD *)v21 - 1) = *((_DWORD *)v19 - 1);
              *(_OWORD *)(v21 - 2sub_1019DB7E0(qword_10248D888, 0) = v22;
              v21 -= 20;
              v19 -= 20;
            }
            while (v19 != v20);
            int v19 = *(char **)(a1 + 280);
          }
          float v4 = v16 + 20;
          *(void *)(a1 + 28sub_1019DB7E0(qword_10248D888, 0) = v21;
          *(void *)(a1 + 288) = v16 + 20;
          *(void *)(a1 + 296) = &v14[20 * v15];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          int v7 = *v2;
          uint64_t v8 = *v5;
          *((_DWORD *)v4 + 2) = v2[3];
          *(void *)float v4 = v8;
          *((_DWORD *)v4 + 3) = v7;
          *((_DWORD *)v4 + 4) = -1;
          v4 += 20;
        }
        *(void *)(a1 + 288) = v4;
        ++*(_DWORD *)(a1 + 304);
        v2 += 4;
      }
      while (v2 != v3);
    }
    sub_1019E5314(a1, -1);
  }
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10234C668);
  }
  int v23 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
  {
    std::string __p = (void *)68289539;
    *(_WORD *)int v27 = 2082;
    *(void *)&v27[2] = "";
    *(_WORD *)&unsigned char v27[10] = 2082;
    *(void *)&v27[12] = "assert";
    __int16 v28 = 2081;
    int v29 = "!fBuilding";
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234C668);
    }
  }
  long long v24 = off_1024190B8;
  if (os_signpost_enabled((os_log_t)off_1024190B8))
  {
    std::string __p = (void *)68289539;
    *(_WORD *)int v27 = 2082;
    *(void *)&v27[2] = "";
    *(_WORD *)&unsigned char v27[10] = 2082;
    *(void *)&v27[12] = "assert";
    __int16 v28 = 2081;
    int v29 = "!fBuilding";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234C668);
    }
  }
  int v25 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    std::string __p = (void *)68289539;
    *(_WORD *)int v27 = 2082;
    *(void *)&v27[2] = "";
    *(_WORD *)&unsigned char v27[10] = 2082;
    *(void *)&v27[12] = "assert";
    __int16 v28 = 2081;
    int v29 = "!fBuilding";
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
  }
  abort_report_np();
  __break(1u);
}

void sub_1019E1EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1019E1F0C(float32x2_t *a1, float32x2_t *a2, void *a3, uint64_t a4)
{
  int v56 = 0;
  int v57 = 0;
  unint64_t v58 = 0;
  if (a1 == a2) {
    return 0;
  }
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 2);
  float v5 = a1;
  do
  {
    unint64_t v6 = v4 >> 1;
    int v7 = (char *)v5 + 20 * (v4 >> 1);
    __int32 v8 = *((_DWORD *)v7 + 4);
    uint64_t v9 = (float32x2_t *)(v7 + 20);
    v4 += ~(v4 >> 1);
    if (v8 <= a1[2].i32[0]) {
      float v5 = v9;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  unint64_t v10 = 0;
  unint64_t v11 = 0;
  unint64_t v12 = 0;
  unint64_t v13 = v57;
  float v14 = 1.1755e-38;
  float v15 = 3.4028e38;
  for (uint64_t i = a1; ; uint64_t i = v17)
  {
    int v17 = v5;
    if (((sub_1000A16E8() & 0x8000) == 0 || i[2].i32[0] == -1) && (char *)v17 - (char *)i >= 40)
    {
      for (uint64_t j = (float32x2_t *)((char *)v17 - 20); i != j; uint64_t j = (float32x2_t *)((char *)v17 - 20))
      {
        uint64_t v20 = i;
        float v21 = i[1].f32[1];
        if (v21 < v15) {
          float v15 = i[1].f32[1];
        }
        if (v21 > v14) {
          float v14 = i[1].f32[1];
        }
        uint64_t i = (float32x2_t *)((char *)i + 20);
        if (i != v17)
        {
          long long v22 = i;
          do
          {
            v18.i32[0] = v20[1].i32[1];
            float v23 = v22[1].f32[1];
            if (*(float *)v18.i32 != v23)
            {
              if (v23 < v15) {
                float v15 = v22[1].f32[1];
              }
              if (v23 > v14) {
                float v14 = v22[1].f32[1];
              }
              *(float *)v18.i32 = *(float *)v18.i32 - v23;
              float32x2_t v24 = vdiv_f32(vsub_f32(*v20, *v22), (float32x2_t)vdup_lane_s32(v18, 0));
              float v25 = (float)(v20[1].f32[0] - v22[1].f32[0]) / *(float *)v18.i32;
              if ((unint64_t)v10 >= v12)
              {
                unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)v11) >> 2) + 1;
                if (v26 > 0x1555555555555555)
                {
                  int v57 = v13;
                  unint64_t v58 = v12;
                  int v56 = v11;
                  sub_1001D7FD4();
                }
                if (0x5555555555555556 * ((uint64_t)(v12 - (void)v11) >> 2) > v26) {
                  unint64_t v26 = 0x5555555555555556 * ((uint64_t)(v12 - (void)v11) >> 2);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v11) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                  unint64_t v27 = 0x1555555555555555;
                }
                else {
                  unint64_t v27 = v26;
                }
                if (v27) {
                  unint64_t v27 = (unint64_t)sub_1019EB1D0(v27);
                }
                else {
                  uint64_t v28 = 0;
                }
                int v29 = (float32x2_t *)(v27 + 4 * (((char *)v10 - (char *)v11) >> 2));
                *int v29 = v24;
                v29[1].f32[0] = v25;
                unint64_t v30 = v29;
                while (v10 != v11)
                {
                  float32x2_t v31 = *(float32x2_t *)((char *)v10 - 12);
                  unint64_t v10 = (float32x2_t *)((char *)v10 - 12);
                  __int32 v32 = v10[1].i32[0];
                  *(float32x2_t *)((char *)v30 - 12) = v31;
                  unint64_t v30 = (float32x2_t *)((char *)v30 - 12);
                  v30[1].i32[0] = v32;
                }
                unint64_t v12 = v27 + 12 * v28;
                unint64_t v13 = (float32x2_t *)((char *)v29 + 12);
                if (v11) {
                  operator delete(v11);
                }
                unint64_t v10 = v13;
                unint64_t v11 = v30;
              }
              else
              {
                *unint64_t v10 = v24;
                v10[1].f32[0] = v25;
                unint64_t v13 = (float32x2_t *)((char *)v10 + 12);
                unint64_t v10 = (float32x2_t *)((char *)v10 + 12);
              }
            }
            long long v22 = (float32x2_t *)((char *)v22 + 20);
          }
          while (v22 != v17);
        }
      }
    }
    if (v17 == a2) {
      break;
    }
    unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v17) >> 2);
    float v5 = v17;
    do
    {
      unint64_t v34 = v33 >> 1;
      int v35 = (char *)v5 + 20 * (v33 >> 1);
      __int32 v36 = *((_DWORD *)v35 + 4);
      int v37 = (float32x2_t *)(v35 + 20);
      v33 += ~(v33 >> 1);
      if (v36 <= v17[2].i32[0]) {
        float v5 = v37;
      }
      else {
        unint64_t v33 = v34;
      }
    }
    while (v33);
  }
  int v57 = v13;
  unint64_t v58 = v12;
  int v56 = v11;
  if (v11 == v10)
  {
    BOOL v46 = 0;
    if (!v10) {
      return v46;
    }
LABEL_60:
    int v57 = v10;
    operator delete(v10);
    return v46;
  }
  *(float *)(a4 + 24) = v15;
  *(float *)(a4 + 28) = v14;
  *(float *)(a4 + 32) = sub_1019E6FCC((uint64_t *)&v56);
  *(_DWORD *)(a4 + 36) = v38;
  *(_DWORD *)(a4 + 4sub_1019DB7E0(qword_10248D888, 0) = v39;
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10234C668);
  }
  __int16 v40 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    double v41 = *(float *)(a4 + 32);
    double v42 = *(float *)(a4 + 36);
    double v43 = *(float *)(a4 + 40);
    *(_DWORD *)uint64_t buf = 134218496;
    double v66 = v41;
    __int16 v67 = 2048;
    double v68 = v42;
    __int16 v69 = 2048;
    double v70 = v43;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "ComputeFullBias: x,%f,y,%f,z,%f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234C668);
    }
    double v48 = *(float *)(a4 + 32);
    double v49 = *(float *)(a4 + 36);
    double v50 = *(float *)(a4 + 40);
    int v59 = 134218496;
    double v60 = v48;
    __int16 v61 = 2048;
    double v62 = v49;
    __int16 v63 = 2048;
    double v64 = v50;
    int v51 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLGyroCalibrationDatabaseLocalMultiRun::computeFullBias(const std::vector<BiasTemperatureRound>::const_iterator, const std::vector<BiasTemperatureRound>::const_iterator, const std::deque<BiasTemperatureRound> *, CLMotionTypeGyroBiasFit &)", "%s\n", v51);
    if (v51 != (char *)buf) {
      free(v51);
    }
  }
  BOOL v46 = sub_1019E3308(a1, a2, a3, a4, v44, v45);
  unint64_t v10 = v11;
  if (v11) {
    goto LABEL_60;
  }
  return v46;
}

void sub_1019E2424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (v18) {
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1019E2460(char *result)
{
  if (result[384])
  {
    uint64_t v1 = result;
    sub_1019E4278(result);
    memcpy(__dst, v1 + 392, sizeof(__dst));
    int v2 = 0;
    return (char *)(*(uint64_t (**)(char *, int *, unsigned char *, uint64_t, uint64_t, void))(*((void *)v1 + 2)
                                                                                               + 152))(v1 + 16, &v2, __dst, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

uint64_t sub_1019E2510(void *a1)
{
  *a1 = off_10234D708;
  sub_1005F5850(a1 + 14);

  return sub_1005D7428(a1);
}

void *sub_1019E2564(void *a1)
{
  *a1 = off_10234C270;
  int v2 = a1 + 2;
  a1[2] = off_10234C330;
  uint64_t v3 = a1[403];
  a1[403] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_1019E92E0((uint64_t)(a1 + 42));
  unint64_t v4 = (void *)a1[39];
  if (v4)
  {
    a1[40] = v4;
    operator delete(v4);
  }
  float v5 = (void *)a1[35];
  if (v5)
  {
    a1[36] = v5;
    operator delete(v5);
  }
  a1[2] = off_10234D708;
  sub_1005F5850(a1 + 16);
  sub_1005D7428(v2);

  return sub_1012D0524(a1);
}

void *sub_1019E265C(uint64_t a1)
{
  return sub_1019E2564((void *)(a1 - 16));
}

void sub_1019E2664(void *a1)
{
  sub_1019E2564(a1);

  operator delete();
}

void sub_1019E269C(uint64_t a1)
{
  sub_1019E2564((void *)(a1 - 16));

  operator delete();
}

uint64_t sub_1019E26D8(char *a1, float *a2, float *a3, __n128 a4, double a5)
{
  float v6 = a4.n128_f32[0];
  uint64_t v10 = *((void *)a1 + 403);
  if (v10) {
    (*(void (**)(uint64_t, float *, float *, __n128, double))(*(void *)v10 + 208))(v10, a2, a3, a4, a4.n128_f32[0]);
  }
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10234C668);
  }
  unint64_t v11 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    double v12 = *a2;
    double v13 = a2[1];
    double v14 = a2[2];
    LODWORD(buf[0]) = 134218752;
    *(double *)((char *)buf + 4) = v12;
    WORD2(buf[1]) = 2048;
    *(double *)((char *)&buf[1] + 6) = v13;
    HIWORD(buf[2]) = 2048;
    *(double *)&std::string buf[3] = v14;
    LOWORD(buf[4]) = 2048;
    *(double *)((char *)&buf[4] + 2) = v6;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "CLGyroCalibrationDatabaseLocalMultiRun insert x,%f,y,%f,z,%f,temperature,%f", (uint8_t *)buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234C668);
    }
    double v120 = *a2;
    double v121 = a2[1];
    double v122 = a2[2];
    int v161 = 134218752;
    double v162 = v120;
    __int16 v163 = 2048;
    double v164 = v121;
    __int16 v165 = 2048;
    double v166 = v122;
    __int16 v167 = 2048;
    double v168 = v6;
    int v123 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGyroCalibrationDatabaseLocalMultiRun::insert(const CLMotionTypeRotationRate &, const CLMotionTypeVector3 &, float, CFAbsoluteTime)", "%s\n", v123);
    if (v123 != (char *)buf) {
      free(v123);
    }
  }
  if (fabsf(*a2) > 75.0 || fabsf(a2[1]) > 75.0 || fabsf(a2[2]) > 75.0) {
    return 0;
  }
  sub_100103240();
  int v15 = sub_1000B5AD4();
  float v16 = 1.1755e-38;
  if (((v15 - 82) & 0xFFFFFFF9) == 0) {
    float v16 = 20.0;
  }
  if (v16 >= v6) {
    return 0;
  }
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10234C668);
  }
  int v17 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEBUG))
  {
    int v18 = a1[270];
    LODWORD(buf[0]) = 67109120;
    HIDWORD(buf[0]) = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "fBuilding,%d", (uint8_t *)buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234C668);
    }
    int v158 = a1[270];
    int v161 = 67109120;
    LODWORD(v162) = v158;
    int v159 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGyroCalibrationDatabaseLocalMultiRun::insert(const CLMotionTypeRotationRate &, const CLMotionTypeVector3 &, float, CFAbsoluteTime)", "%s\n", v159);
    if (v159 != (char *)buf) {
      free(v159);
    }
  }
  if (a1[270])
  {
    uint64_t v20 = *((void *)a1 + 35);
    unint64_t v19 = *((void *)a1 + 36);
    unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v20) >> 2);
    if (v21 > 0x3B)
    {
      int v51 = *((_DWORD *)a1 + 76);
      LODWORD(buf[0]) = 0;
      HIDWORD(buf[0]) = v51;
      int v52 = sub_1019E9AF4((uint64_t)buf, (uint64_t)(a1 + 720), buf);
      uint64_t v53 = *((void *)a1 + 35);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)a1 + 36) - v53) >> 2) > v52)
      {
        int v54 = *((_DWORD *)a1 + 68);
        uint64_t v55 = v53 + 20 * v52;
        uint64_t v56 = *(void *)a2;
        *(float *)(v55 + 8) = a2[2];
        *(void *)uint64_t v55 = v56;
        *(float *)(v55 + 12) = v6;
        *(_DWORD *)(v55 + 16) = v54;
      }
    }
    else
    {
      unint64_t v22 = *((void *)a1 + 37);
      if (v19 >= v22)
      {
        unint64_t v57 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - v20) >> 2);
        if (2 * v57 <= v21 + 1) {
          uint64_t v58 = v21 + 1;
        }
        else {
          uint64_t v58 = 2 * v57;
        }
        if (v57 >= 0x666666666666666) {
          unint64_t v59 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v59 = v58;
        }
        double v60 = (char *)sub_1019E9AAC(v59);
        __int16 v61 = (float *)&v60[20 * v21];
        __int16 v63 = &v60[20 * v62];
        int v64 = *((_DWORD *)a1 + 68);
        uint64_t v65 = *(void *)a2;
        v61[2] = a2[2];
        *(void *)__int16 v61 = v65;
        uint64_t v61[3] = v6;
        *((_DWORD *)v61 + 4) = v64;
        float v25 = (char *)(v61 + 5);
        __int16 v67 = (float *)*((void *)a1 + 35);
        double v66 = (float *)*((void *)a1 + 36);
        if (v66 != v67)
        {
          do
          {
            long long v68 = *(_OWORD *)(v66 - 5);
            *(v61 - 1) = *(v66 - 1);
            *(_OWORD *)(v61 - 5) = v68;
            v61 -= 5;
            v66 -= 5;
          }
          while (v66 != v67);
          double v66 = (float *)*((void *)a1 + 35);
        }
        *((void *)a1 + 35) = v61;
        *((void *)a1 + 36) = v25;
        *((void *)a1 + 37) = v63;
        if (v66) {
          operator delete(v66);
        }
      }
      else
      {
        int v23 = *((_DWORD *)a1 + 68);
        uint64_t v24 = *(void *)a2;
        *(float *)(v19 + 8) = a2[2];
        *(void *)unint64_t v19 = v24;
        *(float *)(v19 + 12) = v6;
        *(_DWORD *)(v19 + 16) = v23;
        float v25 = (char *)(v19 + 20);
      }
      *((void *)a1 + 36) = v25;
    }
    ++*((_DWORD *)a1 + 76);
    return 1;
  }
  uint64_t result = 0;
  if (*a3 <= 0.01 && a3[1] <= 0.01 && a3[2] <= 0.01)
  {
    unint64_t v27 = *((void *)a1 + 46);
    unint64_t v28 = *((void *)a1 + 47);
    if (v28 >= 0x33)
    {
      --v28;
      *((void *)a1 + 46) = ++v27;
      *((void *)a1 + 47) = v28;
      if (v27 >= 0x198)
      {
        operator delete(**((void ***)a1 + 43));
        *((void *)a1 + 43) += 8;
        unint64_t v28 = *((void *)a1 + 47);
        unint64_t v27 = *((void *)a1 + 46) - 204;
        *((void *)a1 + 46) = v27;
      }
    }
    int v29 = a1 + 336;
    unint64_t v30 = (char **)(a1 + 344);
    float32x2_t v31 = (char *)*((void *)a1 + 44);
    __int32 v32 = (char *)*((void *)a1 + 43);
    unint64_t v33 = (v31 - v32) >> 3;
    uint64_t v34 = 204 * v33 - 1;
    if (v31 == v32) {
      uint64_t v34 = 0;
    }
    unint64_t v35 = v28 + v27;
    unint64_t v160 = a1 + 336;
    if (v34 != v35) {
      goto LABEL_82;
    }
    BOOL v36 = v27 >= 0xCC;
    unint64_t v37 = v27 - 204;
    if (v36)
    {
      *((void *)a1 + 46) = v37;
      uint64_t v40 = *(void *)v32;
      int v38 = v32 + 8;
      uint64_t v39 = v40;
      *((void *)a1 + 43) = v38;
      if (v31 == *((char **)a1 + 45))
      {
        uint64_t v41 = (uint64_t)&v38[-*v29];
        if ((unint64_t)v38 <= *v29)
        {
          if (v31 == (char *)*v29) {
            unint64_t v84 = 1;
          }
          else {
            unint64_t v84 = (uint64_t)&v31[-*v29] >> 2;
          }
          long long v85 = (char *)sub_1019E9BB8(v84);
          __int16 v87 = &v85[8 * (v84 >> 2)];
          int v88 = (uint64_t *)*((void *)a1 + 43);
          float32x2_t v31 = v87;
          uint64_t v89 = *((void *)a1 + 44) - (void)v88;
          if (v89)
          {
            float32x2_t v31 = &v87[v89 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v90 = 8 * (v89 >> 3);
            uint64_t v91 = &v85[8 * (v84 >> 2)];
            do
            {
              uint64_t v92 = *v88++;
              *(void *)uint64_t v91 = v92;
              v91 += 8;
              v90 -= 8;
            }
            while (v90);
          }
          std::string::size_type v93 = (void *)*((void *)a1 + 42);
          *((void *)a1 + 42) = v85;
          *((void *)a1 + 43) = v87;
          *((void *)a1 + 44) = v31;
          *((void *)a1 + 45) = &v85[8 * v86];
          if (v93)
          {
            operator delete(v93);
            float32x2_t v31 = (char *)*((void *)a1 + 44);
          }
        }
        else
        {
          uint64_t v42 = v41 >> 3;
          BOOL v43 = v41 >> 3 < -1;
          uint64_t v44 = (v41 >> 3) + 2;
          if (v43) {
            uint64_t v45 = v44;
          }
          else {
            uint64_t v45 = v42 + 1;
          }
          uint64_t v46 = -(v45 >> 1);
          uint64_t v47 = v45 >> 1;
          double v48 = &v38[-8 * v47];
          int64_t v49 = v31 - v38;
          if (v31 != v38)
          {
            memmove(&v38[-8 * v47], v38, v31 - v38);
            float32x2_t v31 = *v30;
          }
          double v50 = &v31[8 * v46];
          float32x2_t v31 = &v48[v49];
          *((void *)a1 + 43) = v50;
          *((void *)a1 + 44) = &v48[v49];
        }
      }
      *(void *)float32x2_t v31 = v39;
    }
    else
    {
      __int16 v69 = (char *)*((void *)a1 + 45);
      double v70 = (char *)*((void *)a1 + 42);
      if (v33 >= (v69 - v70) >> 3)
      {
        if (v69 == v70) {
          unint64_t v73 = 1;
        }
        else {
          unint64_t v73 = (v69 - v70) >> 2;
        }
        int v74 = (char *)sub_1019E9BB8(v73);
        uint64_t v76 = v75;
        int v77 = operator new(0xFF0uLL);
        int v78 = &v74[8 * v33];
        uint64_t v79 = v76;
        int v80 = &v74[8 * v76];
        if (v33 == v79)
        {
          uint64_t v81 = 8 * v33;
          if (v31 - v32 < 1)
          {
            __int16 v124 = v77;
            uint64_t v125 = v81 >> 2;
            if (v31 == v32) {
              unint64_t v126 = 1;
            }
            else {
              unint64_t v126 = v125;
            }
            int v127 = (char *)sub_1019E9BB8(v126);
            int v78 = &v127[8 * (v126 >> 2)];
            int v80 = &v127[8 * v128];
            if (v74) {
              operator delete(v74);
            }
            int v74 = v127;
            int v77 = v124;
          }
          else
          {
            uint64_t v82 = v81 >> 3;
            if (v82 >= -1) {
              unint64_t v83 = v82 + 1;
            }
            else {
              unint64_t v83 = v82 + 2;
            }
            v78 -= 8 * (v83 >> 1);
          }
        }
        *(void *)int v78 = v77;
        int v129 = v78 + 8;
        __int16 v130 = (char *)*((void *)a1 + 43);
        int v131 = (char *)*((void *)a1 + 44);
        while (v131 != v130)
        {
          if (v78 == v74)
          {
            if (v129 >= v80)
            {
              if (v80 == v74) {
                unint64_t v136 = 1;
              }
              else {
                unint64_t v136 = (v80 - v74) >> 2;
              }
              int v137 = (char *)sub_1019E9BB8(v136);
              int v139 = v137;
              int v78 = &v137[(2 * v136 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v141 = v129 - v74;
              BOOL v140 = v129 == v74;
              int v129 = v78;
              if (!v140)
              {
                int v129 = &v78[v141 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v142 = 8 * (v141 >> 3);
                int v143 = v78;
                __int16 v144 = (uint64_t *)v74;
                do
                {
                  uint64_t v145 = *v144++;
                  *(void *)int v143 = v145;
                  v143 += 8;
                  v142 -= 8;
                }
                while (v142);
              }
              int v80 = &v137[8 * v138];
              if (v74) {
                operator delete(v74);
              }
              int v74 = v139;
            }
            else
            {
              uint64_t v132 = (v80 - v129) >> 3;
              if (v132 >= -1) {
                uint64_t v133 = v132 + 1;
              }
              else {
                uint64_t v133 = v132 + 2;
              }
              uint64_t v134 = v133 >> 1;
              int v78 = &v74[8 * (v133 >> 1)];
              int v135 = v74;
              if (v129 != v74)
              {
                memmove(v78, v74, v129 - v74);
                int v135 = v129;
              }
              int v129 = &v135[8 * v134];
            }
          }
          uint64_t v146 = *((void *)v131 - 1);
          v131 -= 8;
          *((void *)v78 - 1) = v146;
          v78 -= 8;
          __int16 v130 = *v30;
        }
        int v147 = (void *)*((void *)a1 + 42);
        *((void *)a1 + 42) = v74;
        *((void *)a1 + 43) = v78;
        *((void *)a1 + 44) = v129;
        *((void *)a1 + 45) = v80;
        if (v147) {
          operator delete(v147);
        }
        goto LABEL_81;
      }
      int v71 = operator new(0xFF0uLL);
      int v72 = v71;
      if (v69 == v31)
      {
        if (v32 == v70)
        {
          if (v31 == v32) {
            unint64_t v99 = 1;
          }
          else {
            unint64_t v99 = (v69 - v32) >> 2;
          }
          BOOL v100 = (char *)sub_1019E9BB8(v99);
          __int32 v32 = &v100[8 * ((v99 + 3) >> 2)];
          long long v102 = (uint64_t *)*((void *)a1 + 43);
          std::string::size_type v103 = v32;
          uint64_t v104 = *((void *)a1 + 44) - (void)v102;
          if (v104)
          {
            std::string::size_type v103 = &v32[v104 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v105 = 8 * (v104 >> 3);
            long long v106 = &v100[8 * ((v99 + 3) >> 2)];
            do
            {
              uint64_t v107 = *v102++;
              *(void *)long long v106 = v107;
              v106 += 8;
              v105 -= 8;
            }
            while (v105);
          }
          int v108 = (void *)*((void *)a1 + 42);
          *((void *)a1 + 42) = v100;
          *((void *)a1 + 43) = v32;
          *((void *)a1 + 44) = v103;
          *((void *)a1 + 45) = &v100[8 * v101];
          if (v108)
          {
            operator delete(v108);
            __int32 v32 = *v30;
          }
        }
        *((void *)v32 - 1) = v72;
        __int16 v109 = (char *)*((void *)a1 + 43);
        int v110 = (char *)*((void *)a1 + 44);
        *((void *)a1 + 43) = v109 - 8;
        uint64_t v111 = *((void *)v109 - 1);
        *((void *)a1 + 43) = v109;
        if (v110 == *((char **)a1 + 45))
        {
          uint64_t v112 = (uint64_t)&v109[-*v160];
          if ((unint64_t)v109 <= *v160)
          {
            if (v110 == (char *)*v160) {
              unint64_t v148 = 1;
            }
            else {
              unint64_t v148 = (uint64_t)&v110[-*v160] >> 2;
            }
            int v149 = (char *)sub_1019E9BB8(v148);
            int v151 = &v149[8 * (v148 >> 2)];
            __int16 v152 = (uint64_t *)*((void *)a1 + 43);
            int v110 = v151;
            uint64_t v153 = *((void *)a1 + 44) - (void)v152;
            if (v153)
            {
              int v110 = &v151[v153 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v154 = 8 * (v153 >> 3);
              int v155 = &v149[8 * (v148 >> 2)];
              do
              {
                uint64_t v156 = *v152++;
                *(void *)int v155 = v156;
                v155 += 8;
                v154 -= 8;
              }
              while (v154);
            }
            int v157 = (void *)*((void *)a1 + 42);
            *((void *)a1 + 42) = v149;
            *((void *)a1 + 43) = v151;
            *((void *)a1 + 44) = v110;
            *((void *)a1 + 45) = &v149[8 * v150];
            if (v157)
            {
              operator delete(v157);
              int v110 = (char *)*((void *)a1 + 44);
            }
          }
          else
          {
            uint64_t v113 = v112 >> 3;
            BOOL v43 = v112 >> 3 < -1;
            uint64_t v114 = (v112 >> 3) + 2;
            if (v43) {
              uint64_t v115 = v114;
            }
            else {
              uint64_t v115 = v113 + 1;
            }
            uint64_t v116 = -(v115 >> 1);
            uint64_t v117 = v115 >> 1;
            unint64_t v118 = &v109[-8 * v117];
            int64_t v119 = v110 - v109;
            if (v110 != v109)
            {
              memmove(&v109[-8 * v117], v109, v110 - v109);
              __int16 v109 = *v30;
            }
            int v110 = &v118[v119];
            *((void *)a1 + 43) = &v109[8 * v116];
            *((void *)a1 + 44) = &v118[v119];
          }
        }
        *(void *)int v110 = v111;
      }
      else
      {
        *(void *)float32x2_t v31 = v71;
      }
    }
    *((void *)a1 + 44) += 8;
LABEL_81:
    __int32 v32 = (char *)*((void *)a1 + 43);
    unint64_t v35 = *((void *)a1 + 47) + *((void *)a1 + 46);
LABEL_82:
    uint64_t v94 = *(void *)a2;
    unint64_t v95 = *(void *)&v32[8 * (v35 / 0xCC)] + 20 * (v35 % 0xCC);
    *(float *)(v95 + 8) = a2[2];
    *(void *)unint64_t v95 = v94;
    *(float *)(v95 + 12) = v6;
    *(_DWORD *)(v95 + 16) = -2;
    ++*((void *)a1 + 47);
    memset(&buf[1], 0, 312);
    *(double *)uint64_t buf = a5;
    *(float *)&buf[1] = v6;
    int v161 = 3;
    (*(void (**)(char *, int *, void *, uint64_t, uint64_t, void))(*((void *)a1 + 2) + 152))(a1 + 16, &v161, buf, 1, 0xFFFFFFFFLL, 0);
    if (a1[384]) {
      BOOL v98 = sub_1019E3308(*((float32x2_t **)a1 + 39), *((float32x2_t **)a1 + 40), v160, (uint64_t)(a1 + 392), v96, v97);
    }
    else {
      BOOL v98 = 0;
    }
    a1[384] = v98;
    (*(void (**)(char *, char *))(*(void *)a1 + 128))(a1, a1 + 400);
    sub_1019E2460(a1);
    return 1;
  }
  return result;
}

void sub_1019E32D4(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1019E3308(float32x2_t *a1, float32x2_t *a2, void *a3, uint64_t a4, double a5, double a6)
{
  long long v180 = 0u;
  long long v181 = 0u;
  *(_OWORD *)std::string __p = 0u;
  if (a1 == a2)
  {
    uint64_t v111 = 0;
    int v176 = 0;
    __int16 v177 = 0;
    unint64_t v178 = 0;
    if (!a3) {
      goto LABEL_201;
    }
    goto LABEL_178;
  }
  float v6 = a2;
  __int16 v171 = a3;
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unint64_t v11 = a1;
  do
  {
    uint64_t v12 = v10 - v9;
    if (v10 == v9) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = ((v10 - v9) << 7) - 1;
    }
    unint64_t v14 = v7 + v8;
    if (v13 != v7 + v8) {
      goto LABEL_95;
    }
    if (v8 < 0x400)
    {
      if (v12 >> 3 >= (unint64_t)((uint64_t)(*((void *)&v180 + 1) - (unint64_t)__p[0]) >> 3))
      {
        uint64_t v173 = v12 >> 3;
        if (*((void **)&v180 + 1) == __p[0]) {
          unint64_t v28 = 1;
        }
        else {
          unint64_t v28 = (uint64_t)(*((void *)&v180 + 1) - (unint64_t)__p[0]) >> 2;
        }
        int v29 = (char *)sub_1019E9BB8(v28);
        uint64_t v31 = v30;
        __int32 v32 = operator new(0x1000uLL);
        unint64_t v33 = &v29[8 * v173];
        uint64_t v34 = &v29[8 * v31];
        if (v173 == v31)
        {
          uint64_t v35 = 8 * v173;
          if (v12 < 1)
          {
            uint64_t v47 = v32;
            uint64_t v48 = v35 >> 2;
            if (v10 == v9) {
              unint64_t v49 = 1;
            }
            else {
              unint64_t v49 = v48;
            }
            double v50 = (char *)sub_1019E9BB8(v49);
            unint64_t v33 = &v50[8 * (v49 >> 2)];
            uint64_t v34 = &v50[8 * v51];
            if (v29) {
              operator delete(v29);
            }
            int v29 = v50;
            __int32 v32 = v47;
          }
          else
          {
            uint64_t v36 = v35 >> 3;
            if (v36 >= -1) {
              unint64_t v37 = v36 + 1;
            }
            else {
              unint64_t v37 = v36 + 2;
            }
            v33 -= 8 * (v37 >> 1);
          }
        }
        *(void *)unint64_t v33 = v32;
        uint64_t v10 = v33 + 8;
        for (uint64_t i = (char *)v180; i != __p[1]; i -= 8)
        {
          if (v33 == v29)
          {
            if (v10 >= v34)
            {
              if (v34 == v29) {
                unint64_t v57 = 1;
              }
              else {
                unint64_t v57 = (v34 - v29) >> 2;
              }
              uint64_t v58 = (char *)sub_1019E9BB8(v57);
              double v60 = v58;
              unint64_t v33 = &v58[(2 * v57 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v62 = v10 - v29;
              BOOL v61 = v10 == v29;
              uint64_t v10 = v33;
              if (!v61)
              {
                uint64_t v10 = &v33[v62 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v63 = 8 * (v62 >> 3);
                int v64 = v33;
                uint64_t v65 = v29;
                do
                {
                  uint64_t v66 = *(void *)v65;
                  v65 += 8;
                  *(void *)int v64 = v66;
                  v64 += 8;
                  v63 -= 8;
                }
                while (v63);
              }
              uint64_t v34 = &v58[8 * v59];
              if (v29) {
                operator delete(v29);
              }
              int v29 = v60;
            }
            else
            {
              uint64_t v53 = (v34 - v10) >> 3;
              if (v53 >= -1) {
                uint64_t v54 = v53 + 1;
              }
              else {
                uint64_t v54 = v53 + 2;
              }
              uint64_t v55 = v54 >> 1;
              unint64_t v33 = &v29[8 * (v54 >> 1)];
              uint64_t v56 = v29;
              if (v10 != v29)
              {
                memmove(v33, v29, v10 - v29);
                uint64_t v56 = v10;
              }
              uint64_t v10 = &v56[8 * v55];
            }
          }
          uint64_t v67 = *((void *)i - 1);
          *((void *)v33 - 1) = v67;
          v33 -= 8;
        }
        long long v68 = __p[0];
        __p[0] = v29;
        __p[1] = v33;
        *(void *)&long long v180 = v10;
        *((void *)&v180 + 1) = v34;
        if (v68) {
          operator delete(v68);
        }
        float v6 = a2;
        goto LABEL_94;
      }
      unint64_t v26 = operator new(0x1000uLL);
      unint64_t v27 = v26;
      if (*((char **)&v180 + 1) == v10)
      {
        if (v9 == __p[0])
        {
          if (v10 == v9) {
            unint64_t v69 = 1;
          }
          else {
            unint64_t v69 = (uint64_t)(*((void *)&v180 + 1) - (void)v9) >> 2;
          }
          double v70 = (char *)sub_1019E9BB8(v69);
          uint64_t v9 = &v70[(2 * v69 + 6) & 0xFFFFFFFFFFFFFFF8];
          int v72 = (uint64_t *)__p[1];
          unint64_t v73 = v9;
          uint64_t v74 = v180 - (unint64_t)__p[1];
          float v6 = a2;
          if ((void *)v180 != __p[1])
          {
            unint64_t v73 = &v9[v74 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v75 = 8 * (v74 >> 3);
            uint64_t v76 = v9;
            do
            {
              uint64_t v77 = *v72++;
              *(void *)uint64_t v76 = v77;
              v76 += 8;
              v75 -= 8;
            }
            while (v75);
          }
          int v78 = __p[0];
          __p[0] = v70;
          __p[1] = v9;
          *(void *)&long long v180 = v73;
          *((void *)&v180 + 1) = &v70[8 * v71];
          if (v78) {
            operator delete(v78);
          }
        }
        else
        {
          float v6 = a2;
        }
        *((void *)v9 - 1) = v27;
        uint64_t v79 = (char *)v180;
        uint64_t v80 = *((void *)__p[1] - 1);
        if ((void)v180 == *((void *)&v180 + 1))
        {
          int64_t v81 = (char *)__p[1] - (char *)__p[0];
          if (__p[1] <= __p[0])
          {
            if ((void *)v180 == __p[0]) {
              unint64_t v87 = 1;
            }
            else {
              unint64_t v87 = (uint64_t)(v180 - (unint64_t)__p[0]) >> 2;
            }
            int v88 = (char *)sub_1019E9BB8(v87);
            uint64_t v90 = (uint64_t *)__p[1];
            uint64_t v79 = &v88[8 * (v87 >> 2)];
            uint64_t v91 = v180 - (unint64_t)__p[1];
            float v6 = a2;
            if ((void *)v180 != __p[1])
            {
              uint64_t v79 = &v88[8 * (v87 >> 2) + (v91 & 0xFFFFFFFFFFFFFFF8)];
              uint64_t v92 = 8 * (v91 >> 3);
              std::string::size_type v93 = &v88[8 * (v87 >> 2)];
              do
              {
                uint64_t v94 = *v90++;
                *(void *)std::string::size_type v93 = v94;
                v93 += 8;
                v92 -= 8;
              }
              while (v92);
            }
            unint64_t v95 = __p[0];
            __p[0] = v88;
            __p[1] = &v88[8 * (v87 >> 2)];
            *(void *)&long long v180 = v79;
            *((void *)&v180 + 1) = &v88[8 * v89];
            if (v95) {
              operator delete(v95);
            }
          }
          else
          {
            uint64_t v82 = v81 >> 3;
            BOOL v20 = v81 >> 3 < -1;
            uint64_t v83 = (v81 >> 3) + 2;
            if (v20) {
              unint64_t v84 = v83;
            }
            else {
              unint64_t v84 = v82 + 1;
            }
            unint64_t v85 = v84 >> 1;
            uint64_t v86 = (char *)__p[1] - 8 * v85;
            if ((void *)v180 != __p[1]) {
              memmove((char *)__p[1] - 8 * v85, __p[1], v180 - (unint64_t)__p[1]);
            }
            uint64_t v79 = &v86[v180 - (unint64_t)__p[1]];
            __p[1] = v86;
            *(void *)&long long v180 = v79;
          }
        }
        *(void *)uint64_t v79 = v80;
        uint64_t v10 = (char *)(v180 + 8);
        *(void *)&long long v180 = v180 + 8;
        goto LABEL_94;
      }
      *(void *)uint64_t v10 = v26;
    }
    else
    {
      *(void *)&long long v181 = v8 - 1024;
      uint64_t v17 = *(void *)v9;
      int v15 = v9 + 8;
      uint64_t v16 = v17;
      __p[1] = v15;
      if (v10 == *((char **)&v180 + 1))
      {
        uint64_t v18 = v15 - (char *)__p[0];
        if (v15 <= __p[0])
        {
          if (v10 == __p[0]) {
            unint64_t v38 = 1;
          }
          else {
            unint64_t v38 = (v10 - (char *)__p[0]) >> 2;
          }
          uint64_t v39 = (char *)sub_1019E9BB8(v38);
          uint64_t v41 = (uint64_t *)__p[1];
          uint64_t v10 = &v39[8 * (v38 >> 2)];
          uint64_t v42 = v180 - (unint64_t)__p[1];
          if ((void *)v180 != __p[1])
          {
            uint64_t v10 = &v39[8 * (v38 >> 2) + (v42 & 0xFFFFFFFFFFFFFFF8)];
            uint64_t v43 = 8 * (v42 >> 3);
            uint64_t v44 = &v39[8 * (v38 >> 2)];
            do
            {
              uint64_t v45 = *v41++;
              *(void *)uint64_t v44 = v45;
              v44 += 8;
              v43 -= 8;
            }
            while (v43);
          }
          uint64_t v46 = __p[0];
          __p[0] = v39;
          __p[1] = &v39[8 * (v38 >> 2)];
          *(void *)&long long v180 = v10;
          *((void *)&v180 + 1) = &v39[8 * v40];
          if (v46) {
            operator delete(v46);
          }
        }
        else
        {
          uint64_t v19 = v18 >> 3;
          BOOL v20 = v18 >> 3 < -1;
          uint64_t v21 = (v18 >> 3) + 2;
          if (v20) {
            uint64_t v22 = v21;
          }
          else {
            uint64_t v22 = v19 + 1;
          }
          int v23 = &v15[-8 * (v22 >> 1)];
          int64_t v24 = v10 - v15;
          if (v10 != v15)
          {
            memmove(&v15[-8 * (v22 >> 1)], v15, v10 - v15);
            uint64_t v10 = v15;
          }
          float v25 = &v10[-8 * (v22 >> 1)];
          uint64_t v10 = &v23[v24];
          __p[1] = v25;
          *(void *)&long long v180 = &v23[v24];
        }
      }
      *(void *)uint64_t v10 = v16;
    }
    uint64_t v10 = (char *)(v180 + 8);
    *(void *)&long long v180 = v180 + 8;
    float v6 = a2;
LABEL_94:
    unint64_t v7 = *((void *)&v181 + 1);
    unint64_t v8 = v181;
    uint64_t v9 = (char *)__p[1];
    unint64_t v14 = v181 + *((void *)&v181 + 1);
LABEL_95:
    *(_DWORD *)(*(void *)&v9[(v14 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v14 & 0x3FF)) = v11[2].i32[0];
    *((void *)&v181 + 1) = ++v7;
    if (v11 == v6) {
      break;
    }
    __int32 v96 = v11[2].i32[0];
    unint64_t v97 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v6 - (char *)v11) >> 2);
    do
    {
      unint64_t v98 = v97 >> 1;
      uint64_t v99 = (uint64_t)v11 + 20 * (v97 >> 1);
      int v100 = *(_DWORD *)(v99 + 16);
      uint64_t v101 = (float32x2_t *)(v99 + 20);
      v97 += ~(v97 >> 1);
      if (v100 <= v96) {
        unint64_t v11 = v101;
      }
      else {
        unint64_t v97 = v98;
      }
    }
    while (v97);
  }
  while (v11 != v6);
  long long v102 = &v9[8 * (v8 >> 10)];
  std::string::size_type v103 = *(char **)v102;
  uint64_t v104 = (int *)(*(void *)v102 + 4 * (v8 & 0x3FF));
  uint64_t v105 = *(void *)&v9[((v8 + v7) >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * ((v8 + v7) & 0x3FF);
  long long v106 = a1;
  if (v104 != (int *)v105)
  {
    do
    {
      uint64_t v107 = v104 + 1;
      if ((char *)(v104 + 1) - v103 == 4096)
      {
        int v108 = (char *)*((void *)v102 + 1);
        v102 += 8;
        std::string::size_type v103 = v108;
        uint64_t v107 = (int *)v108;
      }
      if (v107 == (int *)v105) {
        goto LABEL_118;
      }
      int v109 = *v104;
      uint64_t v104 = v107;
    }
    while (*v107 >= v109);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234C668);
    }
    int v110 = off_1024190B8;
    uint64_t v111 = "";
    uint64_t v112 = "std::is_sorted(rounds.begin(), rounds.end())";
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)__int16 v189 = 0;
      *(_WORD *)&v189[4] = 2082;
      *(void *)&v189[6] = "";
      *(_WORD *)&v189[14] = 2082;
      *(void *)&v189[16] = "assert";
      *(_WORD *)&v189[24] = 2081;
      *(void *)&v189[26] = "std::is_sorted(rounds.begin(), rounds.end())";
      _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234C668);
      }
    }
    uint64_t v113 = off_1024190B8;
    if (os_signpost_enabled((os_log_t)off_1024190B8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)__int16 v189 = 0;
      *(_WORD *)&v189[4] = 2082;
      *(void *)&v189[6] = "";
      *(_WORD *)&v189[14] = 2082;
      *(void *)&v189[16] = "assert";
      *(_WORD *)&v189[24] = 2081;
      *(void *)&v189[26] = "std::is_sorted(rounds.begin(), rounds.end())";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v113, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234C668);
      }
    }
    uint64_t v114 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)__int16 v189 = 0;
      *(_WORD *)&v189[4] = 2082;
      *(void *)&v189[6] = "";
      *(_WORD *)&v189[14] = 2082;
      *(void *)&v189[16] = "assert";
      *(_WORD *)&v189[24] = 2081;
      *(void *)&v189[26] = "std::is_sorted(rounds.begin(), rounds.end())";
      _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
LABEL_216:
    dispatch_once(&qword_1024190B0, &stru_10234C668);
LABEL_211:
    double v167 = *(float *)(a4 + 44);
    double v168 = *(float *)(a4 + 48);
    double v169 = *(float *)(a4 + 52);
    int v182 = 134218496;
    double v183 = v167;
    __int16 v184 = 2048;
    double v185 = v168;
    __int16 v186 = 2048;
    double v187 = v169;
    uint64_t v170 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLGyroCalibrationDatabaseLocalMultiRun::computeIntercept(const std::vector<BiasTemperatureRound>::const_iterator, const std::vector<BiasTemperatureRound>::const_iterator, const std::deque<BiasTemperatureRound> *, CLMotionTypeGyroBiasFit &)", "%s\n", v170);
    if (v170 != (char *)buf) {
      free(v170);
    }
    goto LABEL_207;
  }
LABEL_118:
  int v176 = 0;
  __int16 v177 = 0;
  unint64_t v178 = 0;
  if (v7)
  {
    if (v7 >= 4)
    {
      uint64_t v115 = (void **)__p[1];
      do
      {
        if (v8 + 1 >= 0x800)
        {
          uint64_t v116 = *v115++;
          operator delete(v116);
          __p[1] = v115;
          v8 -= 1023;
        }
        else
        {
          ++v8;
        }
        --v7;
      }
      while (v7 > 3);
      *(void *)&long long v181 = v8;
      *((void *)&v181 + 1) = v7;
    }
    if (v6 != a1)
    {
      unint64_t v117 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v6 - (char *)a1) >> 2);
      do
      {
        unint64_t v118 = v117 >> 1;
        int64_t v119 = (char *)v106 + 20 * (v117 >> 1);
        int v120 = *((_DWORD *)v119 + 4);
        double v121 = (float32x2_t *)(v119 + 20);
        v117 += ~(v117 >> 1);
        if (v120 < *(_DWORD *)(*(void *)((char *)__p[1] + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF))) {
          long long v106 = v121;
        }
        else {
          unint64_t v117 = v118;
        }
      }
      while (v117);
      if (v106 != v6)
      {
        double v122 = 0;
        uint64_t v111 = v177;
        unint64_t v123 = v178;
        __int16 v124 = (char *)v176;
        while (1)
        {
          LODWORD(a6) = v106[1].i32[1];
          float32x2_t v125 = vmls_lane_f32(*v106, *(float32x2_t *)(a4 + 32), *(float32x2_t *)&a6, 0);
          float v126 = v106[1].f32[0] - (float)(*(float *)(a4 + 40) * *(float *)&a6);
          if ((unint64_t)v122 >= v123)
          {
            unint64_t v128 = 0xAAAAAAAAAAAAAAABLL * ((v122 - v124) >> 2) + 1;
            if (v128 > 0x1555555555555555)
            {
              __int16 v177 = v111;
              unint64_t v178 = v123;
              int v176 = v124;
              sub_1001D7FD4();
            }
            if (0x5555555555555556 * ((uint64_t)(v123 - (void)v124) >> 2) > v128) {
              unint64_t v128 = 0x5555555555555556 * ((uint64_t)(v123 - (void)v124) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v123 - (void)v124) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v129 = 0x1555555555555555;
            }
            else {
              unint64_t v129 = v128;
            }
            if (v129) {
              unint64_t v129 = (unint64_t)sub_1019EB1D0(v129);
            }
            else {
              uint64_t v130 = 0;
            }
            int v131 = (float32x2_t *)(v129 + 4 * ((v122 - v124) >> 2));
            *int v131 = v125;
            v131[1].f32[0] = v126;
            if (v122 == v124)
            {
              __int16 v124 = (char *)(v129 + 4 * ((v122 - v124) >> 2));
            }
            else
            {
              uint64_t v132 = (char *)(v129 + 4 * ((v122 - v124) >> 2));
              do
              {
                uint64_t v133 = *(void *)(v122 - 12);
                v122 -= 12;
                int v134 = *((_DWORD *)v122 + 2);
                *(void *)(v132 - 12) = v133;
                v132 -= 12;
                *((_DWORD *)v132 + 2) = v134;
              }
              while (v122 != v124);
              double v122 = v124;
              __int16 v124 = v132;
            }
            unint64_t v123 = v129 + 12 * v130;
            int v127 = (char *)&v131[1] + 4;
            if (v122) {
              operator delete(v122);
            }
          }
          else
          {
            *(float32x2_t *)double v122 = v125;
            *((float *)v122 + 2) = v126;
            int v127 = v122 + 12;
          }
          if (v106[2].i32[0] == *(_DWORD *)(*(void *)((char *)__p[1]
                                                       + (((unint64_t)(*((void *)&v181 + 1) + v181 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                                           + 4 * ((*((void *)&v181 + 1) + v181 - 1) & 0x3FF)))
          {
            int v135 = v127 - 12;
            if ((unint64_t)v127 >= v123)
            {
              unint64_t v136 = 0xAAAAAAAAAAAAAAABLL * ((v127 - v124) >> 2) + 1;
              if (v136 > 0x1555555555555555)
              {
                __int16 v177 = v127;
                unint64_t v178 = v123;
                int v176 = v124;
                sub_1001D7FD4();
              }
              if (0x5555555555555556 * ((uint64_t)(v123 - (void)v124) >> 2) > v136) {
                unint64_t v136 = 0x5555555555555556 * ((uint64_t)(v123 - (void)v124) >> 2);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v123 - (void)v124) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v137 = 0x1555555555555555;
              }
              else {
                unint64_t v137 = v136;
              }
              if (v137) {
                unint64_t v137 = (unint64_t)sub_1019EB1D0(v137);
              }
              else {
                uint64_t v138 = 0;
              }
              int v139 = (char *)(v137 + 4 * ((v127 - v124) >> 2));
              uint64_t v140 = *(void *)v135;
              unint64_t v123 = v137 + 12 * v138;
              *((_DWORD *)v139 + 2) = *((_DWORD *)v127 - 1);
              *(void *)int v139 = v140;
              uint64_t v111 = v139 + 12;
              if (v127 == v124)
              {
                __int16 v124 = v127;
              }
              else
              {
                do
                {
                  uint64_t v141 = *(void *)(v127 - 12);
                  v127 -= 12;
                  int v142 = *((_DWORD *)v127 + 2);
                  *(void *)(v139 - 12) = v141;
                  v139 -= 12;
                  *((_DWORD *)v139 + 2) = v142;
                }
                while (v127 != v124);
                if (!v124) {
                  goto LABEL_171;
                }
              }
              operator delete(v124);
LABEL_171:
              __int16 v124 = v139;
              goto LABEL_172;
            }
            *(void *)int v127 = *(void *)v135;
            *((_DWORD *)v127 + 2) = *((_DWORD *)v127 - 1);
            uint64_t v111 = v127 + 12;
          }
          else
          {
            uint64_t v111 = v127;
          }
LABEL_172:
          long long v106 = (float32x2_t *)((char *)v106 + 20);
          double v122 = v111;
          if (v106 == a2)
          {
            __int16 v177 = v111;
            unint64_t v178 = v123;
            int v176 = v124;
            goto LABEL_175;
          }
        }
      }
    }
  }
  uint64_t v111 = 0;
LABEL_175:
  a3 = v171;
  if (v171)
  {
LABEL_178:
    uint64_t v143 = a3[1];
    if (a3[2] != v143)
    {
      unint64_t v144 = a3[4];
      uint64_t v145 = (float32x2_t *)(*(void *)(v143 + 8 * (v144 / 0xCC)) + 20 * (v144 % 0xCC));
      unint64_t v146 = *(void *)(v143 + 8 * ((a3[5] + v144) / 0xCC)) + 20 * ((a3[5] + v144) % 0xCC);
      if (v145 != (float32x2_t *)v146)
      {
        unint64_t v147 = v178;
        unint64_t v148 = (char *)v176;
        int v149 = (void *)(v143 + 8 * (v144 / 0xCC));
        do
        {
          LODWORD(a6) = v145[1].i32[1];
          float32x2_t v150 = vmls_lane_f32(*v145, *(float32x2_t *)(a4 + 32), *(float32x2_t *)&a6, 0);
          float v151 = v145[1].f32[0] - (float)(*(float *)(a4 + 40) * *(float *)&a6);
          if ((unint64_t)v111 >= v147)
          {
            unint64_t v152 = 0xAAAAAAAAAAAAAAABLL * ((v111 - v148) >> 2) + 1;
            if (v152 > 0x1555555555555555) {
              sub_1001D7FD4();
            }
            if (0x5555555555555556 * ((uint64_t)(v147 - (void)v148) >> 2) > v152) {
              unint64_t v152 = 0x5555555555555556 * ((uint64_t)(v147 - (void)v148) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v147 - (void)v148) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v153 = 0x1555555555555555;
            }
            else {
              unint64_t v153 = v152;
            }
            if (v153) {
              unint64_t v153 = (unint64_t)sub_1019EB1D0(v153);
            }
            else {
              uint64_t v154 = 0;
            }
            unint64_t v155 = v153 + 4 * ((v111 - v148) >> 2);
            *(float32x2_t *)unint64_t v155 = v150;
            *(float *)(v155 + 8) = v151;
            uint64_t v156 = (_DWORD *)v155;
            while (v111 != v148)
            {
              uint64_t v157 = *(void *)(v111 - 12);
              v111 -= 12;
              int v158 = *((_DWORD *)v111 + 2);
              *(void *)(v156 - 3) = v157;
              v156 -= 3;
              v156[2] = v158;
            }
            unint64_t v147 = v153 + 12 * v154;
            uint64_t v111 = (char *)(v155 + 12);
            int v176 = v156;
            unint64_t v178 = v147;
            if (v148) {
              operator delete(v148);
            }
            unint64_t v148 = (char *)v156;
          }
          else
          {
            *(float32x2_t *)uint64_t v111 = v150;
            *((float *)v111 + 2) = v151;
            v111 += 12;
          }
          __int16 v177 = v111;
          uint64_t v145 = (float32x2_t *)((char *)v145 + 20);
          if ((float32x2_t *)((char *)v145 - *v149) == (float32x2_t *)4080)
          {
            int v159 = (float32x2_t *)v149[1];
            ++v149;
            uint64_t v145 = v159;
          }
        }
        while (v145 != (float32x2_t *)v146);
      }
    }
  }
LABEL_201:
  uint64_t v112 = (char *)v176;
  if (v176 != v111)
  {
    *(float *)(a4 + 44) = sub_1019E6FCC((uint64_t *)&v176);
    *(_DWORD *)(a4 + 48) = v160;
    *(_DWORD *)(a4 + 52) = v161;
    *(CFAbsoluteTime *)(a4 + 16) = CFAbsoluteTimeGetCurrent();
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234C668);
    }
    double v162 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      double v163 = *(float *)(a4 + 44);
      double v164 = *(float *)(a4 + 48);
      double v165 = *(float *)(a4 + 52);
      *(_DWORD *)uint64_t buf = 134218496;
      *(double *)__int16 v189 = v163;
      *(_WORD *)&v189[8] = 2048;
      *(double *)&v189[10] = v164;
      *(_WORD *)&v189[18] = 2048;
      *(double *)&v189[20] = v165;
      _os_log_impl((void *)&_mh_execute_header, v162, OS_LOG_TYPE_INFO, "ComputeIntercept: x,%f,y,%f,z,%f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        goto LABEL_216;
      }
      goto LABEL_211;
    }
  }
LABEL_207:
  if (v112) {
    operator delete(v112);
  }
  sub_1019EB218((uint64_t)__p);
  return v112 != v111;
}

void sub_1019E41A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1019EB218((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_1019E4224(uint64_t a1, float *a2, float *a3, __n128 a4, double a5)
{
  return sub_1019E26D8((char *)(a1 - 16), a2, a3, a4, a5);
}

BOOL sub_1019E422C(uint64_t a1, void *__dst)
{
  int v2 = *(unsigned __int8 *)(a1 + 384);
  if (*(unsigned char *)(a1 + 384))
  {
    memcpy(__dst, (const void *)(a1 + 392), 0x140uLL);
    sub_1019E4278((char *)a1);
  }
  return v2 != 0;
}

void sub_1019E4278(char *a1)
{
  if (*((_DWORD *)a1 + 98) == 1)
  {
    uint64_t v1 = a1;
    if (qword_1024190B0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234C668);
    }
    unint64_t v14 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)unint64_t v28 = 0;
      *(_WORD *)&void v28[4] = 2082;
      *(void *)&v28[6] = "";
      *(_WORD *)&v28[14] = 2082;
      *(void *)&v28[16] = "assert";
      *(_WORD *)&v28[24] = 2081;
      *(void *)&v28[26] = "fFit.kind == kCLMotionTypeGyroBiasFitKindLinear";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234C668);
      }
    }
    int v15 = off_1024190B8;
    if (os_signpost_enabled((os_log_t)off_1024190B8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)unint64_t v28 = 0;
      *(_WORD *)&void v28[4] = 2082;
      *(void *)&v28[6] = "";
      *(_WORD *)&v28[14] = 2082;
      *(void *)&v28[16] = "assert";
      *(_WORD *)&v28[24] = 2081;
      *(void *)&v28[26] = "fFit.kind == kCLMotionTypeGyroBiasFitKindLinear";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234C668);
      }
    }
    uint64_t v1 = (char *)off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)unint64_t v28 = 0;
      *(_WORD *)&void v28[4] = 2082;
      *(void *)&v28[6] = "";
      *(_WORD *)&v28[14] = 2082;
      *(void *)&v28[16] = "assert";
      *(_WORD *)&v28[24] = 2081;
      *(void *)&v28[26] = "fFit.kind == kCLMotionTypeGyroBiasFitKindLinear";
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  dispatch_once(&qword_1024190B0, &stru_10234C668);
LABEL_3:
  int v2 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEBUG))
  {
    double v3 = *((float *)v1 + 106);
    double v4 = *((float *)v1 + 107);
    double v5 = *((float *)v1 + 108);
    double v6 = *((float *)v1 + 109);
    double v7 = *((float *)v1 + 110);
    double v8 = *((float *)v1 + 111);
    uint64_t v9 = *((void *)v1 + 50);
    *(_DWORD *)uint64_t buf = 134219520;
    *(double *)unint64_t v28 = v3;
    *(_WORD *)&v28[8] = 2048;
    *(double *)&unsigned char v28[10] = v4;
    *(_WORD *)&v28[18] = 2048;
    *(double *)&v28[20] = v5;
    *(_WORD *)&v28[28] = 2048;
    *(double *)&v28[30] = v6;
    __int16 v29 = 2048;
    double v30 = v7;
    __int16 v31 = 2048;
    double v32 = v8;
    __int16 v33 = 2048;
    uint64_t v34 = v9;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "GyroBiasFit: slope,%f,%f,%f,intercept,%f,%f,%f,seconds,%f", buf, 0x48u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234C668);
    }
    double v16 = *((float *)v1 + 106);
    double v17 = *((float *)v1 + 107);
    double v18 = *((float *)v1 + 108);
    double v19 = *((float *)v1 + 109);
    double v20 = *((float *)v1 + 110);
    double v21 = *((float *)v1 + 111);
    uint64_t v22 = *((void *)v1 + 50);
    *(_DWORD *)unint64_t v38 = 134219520;
    *(double *)&uint8_t v38[4] = v16;
    *(_WORD *)&v38[12] = 2048;
    *(double *)&v38[14] = v17;
    *(_WORD *)&v38[22] = 2048;
    *(double *)&v38[24] = v18;
    *(_WORD *)&v38[32] = 2048;
    *(double *)&v38[34] = v19;
    *(_WORD *)&v38[42] = 2048;
    double v39 = v20;
    __int16 v40 = 2048;
    double v41 = v21;
    __int16 v42 = 2048;
    uint64_t v43 = v22;
    int v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyroCalibrationDatabaseLocalMultiRun::logFit() const", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
  if (v1[712])
  {
    *(void *)unint64_t v38 = off_1022E6820;
    *(void *)&v38[8] = CFAbsoluteTimeGetCurrent();
    *(_OWORD *)&v38[20] = *(_OWORD *)(v1 + 424);
    *(void *)&v38[36] = *((void *)v1 + 55);
    float v10 = *((double *)v1 + 50);
    *(float *)&double v39 = v10;
    uint64_t v11 = sub_101282D9C();
    sub_10128431C(v11, (uint64_t)v38);
    sub_10170140C(buf);
    sub_101726CA8((uint64_t)buf);
    v37 |= 1u;
    uint64_t v35 = *(void *)&v38[8];
    uint64_t __src = *((void *)v1 + 53);
    int v25 = *((_DWORD *)v1 + 108);
    sub_1000FB43C(v36 + 32, (char *)&__src, (uint64_t)v26, 3uLL);
    uint64_t __src = *(void *)(v1 + 436);
    int v25 = *((_DWORD *)v1 + 111);
    sub_1000FB43C(v36 + 8, (char *)&__src, (uint64_t)v26, 3uLL);
    uint64_t v12 = v36;
    float v13 = *((double *)v1 + 50);
    v36[60] |= 1u;
    *((float *)v12 + 14) = v13;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_10234C688);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)buf);
    }
    sub_101706914((PB::Base *)buf);
  }
}

void sub_1019E483C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

BOOL sub_1019E4864(uint64_t a1, void *__dst)
{
  int v2 = *(unsigned __int8 *)(a1 + 368);
  if (*(unsigned char *)(a1 + 368))
  {
    double v3 = (char *)(a1 - 16);
    memcpy(__dst, (const void *)(a1 + 376), 0x140uLL);
    sub_1019E4278(v3);
  }
  return v2 != 0;
}

BOOL sub_1019E48B0(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 270);
  if (!*(unsigned char *)(a1 + 270))
  {
    *(void *)(a1 + 32sub_1019DB7E0(qword_10248D888, 0) = *(void *)(a1 + 312);
    double v5 = *(void ***)(a1 + 344);
    uint64_t v6 = *(void *)(a1 + 352);
    *(void *)(a1 + 376) = 0;
    unint64_t v7 = v6 - (void)v5;
    if (v7 >= 0x11)
    {
      do
      {
        operator delete(*v5);
        uint64_t v8 = *(void *)(a1 + 352);
        double v5 = (void **)(*(void *)(a1 + 344) + 8);
        *(void *)(a1 + 344) = v5;
        unint64_t v7 = v8 - (void)v5;
      }
      while (v7 > 0x10);
    }
    if (v7 >> 3 == 1)
    {
      uint64_t v9 = 102;
    }
    else
    {
      if (v7 >> 3 != 2) {
        goto LABEL_18;
      }
      uint64_t v9 = 204;
    }
    *(void *)(a1 + 368) = v9;
LABEL_18:
    *(unsigned char *)(a1 + 384) = 0;
    sub_10014D518(a1 + 128, (uint64_t)"DELETE FROM GyroMultiCalibration");
  }
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10234C668);
  }
  int v2 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Wipe database during a build.", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234C668);
    }
    double v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGyroCalibrationDatabaseLocalMultiRun::wipeDatabase()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  return v1 == 0;
}

void sub_1019E4B34(_Unwind_Exception *exception_object)
{
}

BOOL sub_1019E4B74(uint64_t a1)
{
  return sub_1019E48B0(a1 - 16);
}

uint64_t sub_1019E4B7C(void *a1)
{
  unint64_t v14 = 0;
  uint64_t v15 = 0;
  float v13 = (uint64_t *)&v14;
  uint64_t v2 = a1[39];
  uint64_t v3 = a1[40];
  while (v2 != v3)
  {
    sub_1019E9BF0(&v13, (float *)(v2 + 12), (_DWORD *)(v2 + 12));
    v2 += 20;
  }
  uint64_t v4 = a1[43];
  if (a1[44] != v4)
  {
    unint64_t v5 = a1[46];
    uint64_t v6 = a1[47];
    unint64_t v7 = (void *)(v4 + 8 * (v5 / 0xCC));
    unint64_t v8 = *v7 + 20 * (v5 % 0xCC);
    unint64_t v9 = *(void *)(v4 + 8 * ((v6 + v5) / 0xCC)) + 20 * ((v6 + v5) % 0xCC);
    while (v8 != v9)
    {
      sub_1019E9BF0(&v13, (float *)(v8 + 12), (_DWORD *)(v8 + 12));
      v8 += 20;
      if (v8 - *v7 == 4080)
      {
        unint64_t v10 = v7[1];
        ++v7;
        unint64_t v8 = v10;
      }
    }
  }
  uint64_t v11 = v15;
  sub_1000F5BB0((uint64_t)&v13, v14);
  return v11;
}

void sub_1019E4C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_1019E4C9C(uint64_t a1)
{
  return sub_1019E4B7C((void *)(a1 - 16));
}

uint64_t sub_1019E4CA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 3224);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }

  return sub_1005D7534(a1 + 16);
}

uint64_t sub_1019E4D04(uint64_t a1)
{
  return sub_1019E4CA4(a1 - 16);
}

void sub_1019E4D0C()
{
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10234C668);
  }
  int v0 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "CLGyroCalibrationDatabaseLocalMultiRun startFactoryGYTT", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234C668);
    }
    int v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGyroCalibrationDatabaseLocalMultiRun::startFactoryGYTT()", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
  operator new();
}

void sub_1019E4F20()
{
}

void sub_1019E4F4C()
{
}

unint64_t sub_1019E4F54()
{
  return ((unint64_t)sub_1000A16E8() >> 13) & 1;
}

unint64_t sub_1019E4F70()
{
  return ((unint64_t)sub_1000A16E8() >> 13) & 1;
}

uint64_t sub_1019E4F8C(uint64_t a1, void *a2)
{
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10234C668);
  }
  uint64_t v4 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLGyroCalibrationDatabaseLocalMultiRun getLastMiniCalibration", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234C668);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGyroCalibrationDatabaseLocalMultiRun::getLastMiniCalibration(CFAbsoluteTime &) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  *a2 = *(void *)(a1 + 3240);
  return 1;
}

uint64_t sub_1019E5130(uint64_t a1, void *a2)
{
  return 1;
}

void sub_1019E5150(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    sub_1016F8A70(v4, a2);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

uint64_t sub_1019E519C(unsigned int a1)
{
  if (a1 > 2) {
    uint64_t v2 = @"com.apple.CoreMotion.GyroCalibration.UnknownCal";
  }
  else {
    uint64_t v2 = off_10234C720[a1];
  }
  CFAbsoluteTimeGetCurrent();
  sub_100779584(&v4, v2);
  sub_100779674(&v4, @"Intercept.X");
  sub_100779674(&v4, @"Intercept.Y");
  sub_100779674(&v4, @"Intercept.Z");
  sub_100779674(&v4, @"Slope.X");
  sub_100779674(&v4, @"Slope.Y");
  sub_100779674(&v4, @"Slope.Z");
  if (a1 == 1) {
    sub_100779674(&v4, @"TimeSinceLastCal");
  }
  return sub_1007795E8(&v4);
}

void sub_1019E5300(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1007795E8(va);
  _Unwind_Resume(a1);
}

void sub_1019E5314(uint64_t a1, int a2)
{
  uint64_t v4 = a1 + 128;
  sub_10002B640(a1 + 128);
  if ((a2 & 0x80000000) == 0 && !*(unsigned char *)(a1 + 265)) {
    sub_10014D518(v4, (uint64_t)"DELETE FROM GyroMultiCalibration WHERE Round <= ? AND Round <> ?");
  }
  v5[0] = *(_OWORD *)&off_10234C460;
  v5[1] = *(_OWORD *)&off_10234C470;
  double v5[2] = off_10234C480;
  sub_100603530(v4, "GyroMultiCalibration", (const char **)v5, 0);
}

void sub_1019E55F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1019E5640(uint64_t *a1, int a2)
{
  uint64_t v2 = a1;
  if ((a2 & 0x80000000) == 0)
  {
    uint64_t v3 = a1[40];
    uint64_t v4 = (char *)sub_1019EAA74(a1[39], v3, a2);
    if (v4 != v5)
    {
      uint64_t v6 = v4;
      size_t v7 = v3 - (void)v5;
      if (v7) {
        memmove(v4, v5, v7);
      }
      v2[40] = (uint64_t)&v6[v7];
    }
  }
  unint64_t v8 = (__n128 *)v2[35];
  unint64_t v9 = (__n128 *)v2[36];
  unint64_t v10 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v9 - (char *)v8) >> 2));
  if (v9 == v8) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v10;
  }
  sub_1019E9CAC(v8, v9, v11, 1);
  float v13 = (uint64_t *)v2[35];
  uint64_t v12 = (uint64_t *)v2[36];
  if (v13 == v12)
  {
LABEL_23:
    unint64_t v14 = (char *)v2[39];
    uint64_t v15 = (char *)v2[40];
    goto LABEL_25;
  }
  unint64_t v14 = (char *)v2[39];
  uint64_t v15 = (char *)v2[40];
  if (v14 != v15)
  {
    if (*((_DWORD *)v15 - 1) < *((_DWORD *)v13 + 4)) {
      goto LABEL_25;
    }
    float v13 = &qword_102419000;
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234C668);
    }
    double v16 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v47 = 0;
      __int16 v48 = 2082;
      unint64_t v49 = "";
      __int16 v50 = 2082;
      uint64_t v51 = "assert";
      __int16 v52 = 2081;
      uint64_t v53 = "fPendingPoints.empty() || fPoints.empty() || fPoints.rbegin()->round < fPendingPoints.begin()->round";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234C668);
      }
    }
    double v17 = off_1024190B8;
    if (os_signpost_enabled((os_log_t)off_1024190B8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v47 = 0;
      __int16 v48 = 2082;
      unint64_t v49 = "";
      __int16 v50 = 2082;
      uint64_t v51 = "assert";
      __int16 v52 = 2081;
      uint64_t v53 = "fPendingPoints.empty() || fPoints.empty() || fPoints.rbegin()->round < fPendingPoints.begin()->round";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234C668);
      }
    }
    uint64_t v2 = (uint64_t *)off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v47 = 0;
      __int16 v48 = 2082;
      unint64_t v49 = "";
      __int16 v50 = 2082;
      uint64_t v51 = "assert";
      __int16 v52 = 2081;
      uint64_t v53 = "fPendingPoints.empty() || fPoints.empty() || fPoints.rbegin()->round < fPendingPoints.begin()->round";
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v15 = (char *)v2[39];
LABEL_25:
  if ((char *)v12 - (char *)v13 < 1) {
    goto LABEL_60;
  }
  uint64_t v18 = ((char *)v12 - (char *)v13) / 20;
  uint64_t v19 = (v15 - v14) / 20;
  double v20 = &v14[20 * v19];
  uint64_t v21 = v2[41];
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v21 - (uint64_t)v15) >> 2)) < v18)
  {
    if ((unint64_t)(v19 + v18) > 0xCCCCCCCCCCCCCCCLL) {
      sub_1001D7FD4();
    }
    unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - (uint64_t)v14) >> 2);
    uint64_t v23 = 2 * v22;
    if (2 * v22 <= v19 + v18) {
      uint64_t v23 = v19 + v18;
    }
    if (v22 >= 0x666666666666666) {
      unint64_t v24 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v24 = v23;
    }
    if (v24) {
      unint64_t v24 = (unint64_t)sub_1019E9AAC(v24);
    }
    else {
      uint64_t v25 = 0;
    }
    unint64_t v33 = v24 + 20 * v19;
    uint64_t v34 = (char *)(v33 + 20 * v18);
    uint64_t v35 = 20 * v18;
    unint64_t v36 = v33;
    do
    {
      long long v37 = *(_OWORD *)v13;
      *(_DWORD *)(v36 + 16) = *((_DWORD *)v13 + 4);
      *(_OWORD *)unint64_t v36 = v37;
      v36 += 20;
      float v13 = (uint64_t *)((char *)v13 + 20);
      v35 -= 20;
    }
    while (v35);
    unint64_t v38 = (char *)v2[39];
    if (v38 == v20)
    {
      unint64_t v41 = v24 + 20 * v19;
    }
    else
    {
      double v39 = v20;
      do
      {
        long long v40 = *(_OWORD *)(v39 - 20);
        unint64_t v41 = v33 - 20;
        *(_DWORD *)(v33 - 4) = *((_DWORD *)v39 - 1);
        *(_OWORD *)(v33 - 2sub_1019DB7E0(qword_10248D888, 0) = v40;
        v39 -= 20;
        v33 -= 20;
      }
      while (v39 != v38);
    }
    unint64_t v42 = v24 + 20 * v25;
    uint64_t v43 = (unsigned char *)v2[40];
    uint64_t v44 = v43 - v20;
    if (v43 != v20) {
      memmove(v34, v20, v43 - v20);
    }
    uint64_t v45 = (void *)v2[39];
    v2[39] = v41;
    v2[40] = (uint64_t)&v34[v44];
    v2[41] = v42;
    if (v45) {
      operator delete(v45);
    }
    goto LABEL_60;
  }
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v15 - v20) >> 2)) >= v18)
  {
    unint64_t v26 = (uint64_t *)((char *)v13 + 20 * v18);
    unint64_t v28 = v15;
LABEL_41:
    __int16 v29 = &v20[20 * v18];
    unint64_t v30 = (unint64_t)&v28[-20 * v18];
    __int16 v31 = v28;
    if (v30 < (unint64_t)v15)
    {
      __int16 v31 = v28;
      do
      {
        long long v32 = *(_OWORD *)v30;
        *((_DWORD *)v31 + 4) = *(_DWORD *)(v30 + 16);
        *(_OWORD *)__int16 v31 = v32;
        v31 += 20;
        v30 += 20;
      }
      while (v30 < (unint64_t)v15);
    }
    v2[40] = (uint64_t)v31;
    if (v28 != v29) {
      memmove(&v20[20 * v18], v20, v28 - v29);
    }
    if (v26 != v13) {
      memmove(v20, v13, (char *)v26 - (char *)v13);
    }
    goto LABEL_60;
  }
  unint64_t v26 = (uint64_t *)((char *)v13 + 4 * ((v15 - v20) >> 2));
  int64_t v27 = (char *)v12 - (char *)v26;
  if (v12 != v26) {
    memmove(v15, (char *)v13 + 4 * ((v15 - v20) >> 2), (char *)v12 - (char *)v26);
  }
  unint64_t v28 = &v15[v27];
  v2[40] = (uint64_t)&v15[v27];
  if (v15 - v20 >= 1) {
    goto LABEL_41;
  }
LABEL_60:
  v2[36] = v2[35];
  *((_DWORD *)v2 + 76) = 0;
}

uint64_t sub_1019E5BB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 312);
  uint64_t v2 = *(void *)(a1 + 320);
  if (v1 == v2) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    int v4 = *(_DWORD *)(v1 + 16);
    unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - v1) >> 2);
    do
    {
      unint64_t v6 = v5 >> 1;
      uint64_t v7 = v1 + 20 * (v5 >> 1);
      int v8 = *(_DWORD *)(v7 + 16);
      uint64_t v9 = v7 + 20;
      v5 += ~(v5 >> 1);
      if (v8 <= v4) {
        uint64_t v1 = v9;
      }
      else {
        unint64_t v5 = v6;
      }
    }
    while (v5);
    uint64_t result = result + (v4 >= 0);
  }
  while (v1 != v2);
  return result;
}

uint64_t sub_1019E5C2C(uint64_t a1)
{
  return sub_1019E5BB8(a1 - 16);
}

uint64_t sub_1019E5C34(uint64_t a1)
{
  uint64_t result = sub_1005F93E4(a1, "GyroMultiCalibration");
  if (result)
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234C668);
    }
    uint64_t v3 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Dropping GyroMultiCalibration.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234C668);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLGyroCalibrationDatabaseLocalMultiRun::dropTableIfPresent(CLSqliteDatabase &)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return sub_100603138(a1, "GyroMultiCalibration");
  }
  return result;
}

void sub_1019E5DE8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 270))
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234C668);
    }
    uint64_t v12 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v20 = 0;
      __int16 v21 = 2082;
      unint64_t v22 = "";
      __int16 v23 = 2082;
      unint64_t v24 = "assert";
      __int16 v25 = 2081;
      unint64_t v26 = "!fBuilding";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234C668);
      }
    }
    float v13 = off_1024190B8;
    if (os_signpost_enabled((os_log_t)off_1024190B8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v20 = 0;
      __int16 v21 = 2082;
      unint64_t v22 = "";
      __int16 v23 = 2082;
      unint64_t v24 = "assert";
      __int16 v25 = 2081;
      unint64_t v26 = "!fBuilding";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234C668);
      }
    }
    unint64_t v14 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v20 = 0;
      __int16 v21 = 2082;
      unint64_t v22 = "";
      __int16 v23 = 2082;
      unint64_t v24 = "assert";
      __int16 v25 = 2081;
      unint64_t v26 = "!fBuilding";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_44;
  }
  *(void *)(a1 + 288) = *(void *)(a1 + 280);
  *(_DWORD *)(a1 + 304) = 0;
  uint64_t v2 = *(void ***)(a1 + 344);
  uint64_t v3 = *(void *)(a1 + 352);
  *(void *)(a1 + 376) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 352);
      uint64_t v2 = (void **)(*(void *)(a1 + 344) + 8);
      *(void *)(a1 + 344) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 102;
  }
  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 204;
  }
  *(void *)(a1 + 368) = v6;
LABEL_9:
  *(unsigned char *)(a1 + 27sub_1019DB7E0(qword_10248D888, 0) = 1;
  uint64_t v7 = *(void *)(a1 + 320);
  if (*(void *)(a1 + 312) != v7)
  {
    int v8 = *(_DWORD *)(v7 - 4);
    if (v8 > -2)
    {
      int v9 = v8 + 1;
      goto LABEL_13;
    }
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234C668);
    }
    double v16 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v20 = 0;
      __int16 v21 = 2082;
      unint64_t v22 = "";
      __int16 v23 = 2082;
      unint64_t v24 = "assert";
      __int16 v25 = 2081;
      unint64_t v26 = "fPoints.empty() || fPoints.rbegin()->round >= kFactoryRound";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234C668);
      }
    }
    double v17 = off_1024190B8;
    if (os_signpost_enabled((os_log_t)off_1024190B8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v20 = 0;
      __int16 v21 = 2082;
      unint64_t v22 = "";
      __int16 v23 = 2082;
      unint64_t v24 = "assert";
      __int16 v25 = 2081;
      unint64_t v26 = "fPoints.empty() || fPoints.rbegin()->round >= kFactoryRound";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234C668);
      }
    }
    uint64_t v18 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v20 = 0;
      __int16 v21 = 2082;
      unint64_t v22 = "";
      __int16 v23 = 2082;
      unint64_t v24 = "assert";
      __int16 v25 = 2081;
      unint64_t v26 = "fPoints.empty() || fPoints.rbegin()->round >= kFactoryRound";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
LABEL_44:
    abort_report_np();
    __break(1u);
  }
  int v9 = 0;
LABEL_13:
  *(_DWORD *)(a1 + 272) = v9;
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10234C668);
  }
  unint64_t v10 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    int v11 = *(_DWORD *)(a1 + 272);
    *(_DWORD *)uint64_t buf = 67109120;
    int v20 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "fNextRound,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234C668);
    }
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGyroCalibrationDatabaseLocalMultiRun::beginRun()", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
}

uint64_t sub_1019E648C(uint64_t result)
{
  if (!*(unsigned char *)(result + 270))
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234C668);
    }
    uint64_t v1 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v5 = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      int v9 = "assert";
      __int16 v10 = 2081;
      int v11 = "fBuilding";
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234C668);
      }
    }
    uint64_t v2 = off_1024190B8;
    if (os_signpost_enabled((os_log_t)off_1024190B8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v5 = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      int v9 = "assert";
      __int16 v10 = 2081;
      int v11 = "fBuilding";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234C668);
      }
    }
    uint64_t v3 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v5 = 0;
      __int16 v6 = 2082;
      uint64_t v7 = "";
      __int16 v8 = 2082;
      int v9 = "assert";
      __int16 v10 = 2081;
      int v11 = "fBuilding";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  *(void *)(result + 288) = *(void *)(result + 280);
  *(_DWORD *)(result + 304) = 0;
  *(unsigned char *)(result + 27sub_1019DB7E0(qword_10248D888, 0) = 0;
  *(_DWORD *)(result + 272) = -2;
  return result;
}

void sub_1019E6710(NSObject *a1)
{
  if (BYTE6(a1[33].isa))
  {
    uint64_t v1 = a1;
    if ((*((int (**))a1->isa + 17))(a1) < 6) {
      goto LABEL_11;
    }
    Class isa = v1[39].isa;
    Class v3 = v1[40].isa;
    if (v3 == isa) {
      goto LABEL_11;
    }
    unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - isa) >> 2);
    do
    {
      unint64_t v5 = v4 >> 1;
      __int16 v6 = (char *)isa + 20 * (v4 >> 1);
      int v7 = *((_DWORD *)v6 + 4);
      __int16 v8 = (objc_class *)(v6 + 20);
      v4 += ~(v4 >> 1);
      if (v7 < 0) {
        Class isa = v8;
      }
      else {
        unint64_t v4 = v5;
      }
    }
    while (v4);
    if (isa == v3) {
LABEL_11:
    }
      LODWORD(v9) = -1;
    else {
      LODWORD(v9) = *((_DWORD *)isa + 4);
    }
    __int16 v10 = &qword_102419000;
    if (qword_1024190B0 == -1)
    {
LABEL_13:
      int v11 = off_1024190B8;
      if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
      {
        int v12 = (*((uint64_t (**))v1->isa + 17))(v1);
        *(_DWORD *)uint64_t buf = 67109632;
        int v17 = v12;
        __int16 v18 = 1024;
        *(_DWORD *)uint64_t v19 = 6;
        *(_WORD *)&void v19[4] = 1024;
        *(_DWORD *)&v19[6] = v9;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "nonFactoryRoundCount,%d,kRoundLimit,%d,roundToRemove,%d", buf, 0x14u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v10[22] != -1) {
          dispatch_once(&qword_1024190B0, &stru_10234C668);
        }
        (*((void (**))v1->isa + 17))(v1);
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGyroCalibrationDatabaseLocalMultiRun::endRun()", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      sub_1019E5314((uint64_t)v1, (int)v9);
    }
  }
  else
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234C668);
    }
    float v13 = off_1024190B8;
    __int16 v10 = (uint64_t *)"";
    int v9 = "fBuilding";
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v17 = 0;
      __int16 v18 = 2082;
      *(void *)uint64_t v19 = "";
      *(_WORD *)&v19[8] = 2082;
      int v20 = "assert";
      __int16 v21 = 2081;
      unint64_t v22 = "fBuilding";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234C668);
      }
    }
    unint64_t v14 = off_1024190B8;
    if (os_signpost_enabled((os_log_t)off_1024190B8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v17 = 0;
      __int16 v18 = 2082;
      *(void *)uint64_t v19 = "";
      *(_WORD *)&v19[8] = 2082;
      int v20 = "assert";
      __int16 v21 = 2081;
      unint64_t v22 = "fBuilding";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234C668);
      }
    }
    uint64_t v1 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      int v17 = 0;
      __int16 v18 = 2082;
      *(void *)uint64_t v19 = "";
      *(_WORD *)&v19[8] = 2082;
      int v20 = "assert";
      __int16 v21 = 2081;
      unint64_t v22 = "fBuilding";
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
  }
  dispatch_once(&qword_1024190B0, &stru_10234C668);
  goto LABEL_13;
}

char *sub_1019E6CD4(double *a1, double a2)
{
  a1[405] = a2;
  (*(void (**)(double *, double *))(*(void *)a1 + 128))(a1, a1 + 50);

  return sub_1019E2460((char *)a1);
}

BOOL sub_1019E6D34(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, int a5)
{
  memset(v28, 0, sizeof(v28));
  LODWORD(v28[0]) = 1;
  if (a5)
  {
    if (!*(unsigned char *)(a1 + 384)) {
      return 0;
    }
    int v9 = *(float32x2_t **)(a1 + 312);
    __int16 v8 = *(float32x2_t **)(a1 + 320);
    if (v8 == v9)
    {
      int v9 = *(float32x2_t **)(a1 + 320);
    }
    else
    {
      unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v8 - (char *)v9) >> 2);
      do
      {
        unint64_t v11 = v10 >> 1;
        int v12 = (char *)v9 + 20 * (v10 >> 1);
        int v13 = *((_DWORD *)v12 + 4);
        unint64_t v14 = (float32x2_t *)(v12 + 20);
        v10 += ~(v10 >> 1);
        if (v13 < 0) {
          int v9 = v14;
        }
        else {
          unint64_t v10 = v11;
        }
      }
      while (v10);
    }
    memcpy(v28, (const void *)(a1 + 392), sizeof(v28));
  }
  else
  {
    int v9 = (float32x2_t *)sub_1019EAA74(*(void *)(a1 + 312), *(void *)(a1 + 320), -1);
    __int16 v8 = v15;
    BOOL result = sub_1019E1F0C(v9, v15, 0, (uint64_t)v28);
    if (!result) {
      return result;
    }
  }
  *(void *)a3 = *(void *)&v28[2];
  *(_DWORD *)(a3 + 8) = DWORD2(v28[2]);
  long long v17 = v28[2];
  uint64_t v18 = *(void *)&v28[3];
  float v19 = *(float *)&v28[3] + (float)(*((float *)&v28[2] + 1) * 25.0);
  *a2 = *((float *)&v28[2] + 3) + (float)(*(float *)&v28[2] * 25.0);
  a2[1] = v19;
  a2[2] = *((float *)&v18 + 1) + (float)(*((float *)&v17 + 2) * 25.0);
  *(_DWORD *)(a4 + 8) = 0;
  *(void *)a4 = 0;
  if (v8 == v9) {
    return 0;
  }
  int v20 = 0;
  float v21 = 0.0;
  float v22 = 0.0;
  float v23 = 0.0;
  do
  {
    float v25 = v9[1].f32[0];
    float v24 = v9[1].f32[1];
    float v26 = v9->f32[0];
    float v27 = v9->f32[1];
    int v9 = (float32x2_t *)((char *)v9 + 20);
    float v21 = v21
        + (float)((float)((float)(*((float *)&v17 + 3) + (float)(v24 * *(float *)&v17)) - v26)
                * (float)((float)(*((float *)&v17 + 3) + (float)(v24 * *(float *)&v17)) - v26));
    float v22 = v22
        + (float)((float)((float)(*(float *)&v18 + (float)(v24 * *((float *)&v17 + 1))) - v27)
                * (float)((float)(*(float *)&v18 + (float)(v24 * *((float *)&v17 + 1))) - v27));
    *(float *)a4 = v21;
    *(float *)(a4 + 4) = v22;
    float v23 = v23
        + (float)((float)((float)(*((float *)&v18 + 1) + (float)(v24 * *((float *)&v17 + 2))) - v25)
                * (float)((float)(*((float *)&v18 + 1) + (float)(v24 * *((float *)&v17 + 2))) - v25));
    *(float *)(a4 + 8) = v23;
    ++v20;
  }
  while (v9 != v8);
  *(float *)a4 = v21 / (float)v20;
  *(float *)(a4 + 4) = v22 / (float)v20;
  *(float *)(a4 + 8) = v23 / (float)v20;
  return 1;
}

BOOL sub_1019E6F28(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_1019E6D34(a1 - 16, a2, a3, a4, a5);
}

uint64_t sub_1019E6F30(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 312);
  uint64_t v2 = *(void *)(a1 + 320);
  if (v2 != v1)
  {
    unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - v1) >> 2);
    do
    {
      unint64_t v4 = v3 >> 1;
      uint64_t v5 = v1 + 20 * (v3 >> 1);
      int v6 = *(_DWORD *)(v5 + 16);
      uint64_t v7 = v5 + 20;
      v3 += ~(v3 >> 1);
      if (v6 < 0) {
        uint64_t v1 = v7;
      }
      else {
        unint64_t v3 = v4;
      }
    }
    while (v3);
  }
  uint64_t result = 0x80000000;
  while (v1 != v2)
  {
    int v9 = (int)*(float *)(v1 + 12);
    if ((int)result <= v9) {
      uint64_t result = v9;
    }
    else {
      uint64_t result = result;
    }
    v1 += 20;
  }
  return result;
}

uint64_t sub_1019E6FA4(uint64_t a1)
{
  return sub_1019E6F30(a1 - 16);
}

uint64_t sub_1019E6FAC()
{
  return 1;
}

uint64_t sub_1019E6FB4()
{
  return 1;
}

uint64_t sub_1019E6FBC()
{
  return 1;
}

uint64_t sub_1019E6FC4()
{
  return 1;
}

float sub_1019E6FCC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v1 = a1[1];
  if (*a1 == v1)
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234C668);
    }
    unint64_t v11 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v15 = 2082;
      double v16 = "";
      __int16 v17 = 2082;
      uint64_t v18 = "assert";
      __int16 v19 = 2081;
      int v20 = "!v.empty()";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234C668);
      }
    }
    int v12 = off_1024190B8;
    if (os_signpost_enabled((os_log_t)off_1024190B8))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v15 = 2082;
      double v16 = "";
      __int16 v17 = 2082;
      uint64_t v18 = "assert";
      __int16 v19 = 2081;
      int v20 = "!v.empty()";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234C668);
      }
    }
    int v13 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v15 = 2082;
      double v16 = "";
      __int16 v17 = 2082;
      uint64_t v18 = "assert";
      __int16 v19 = 2081;
      int v20 = "!v.empty()";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
  }
  unint64_t v4 = (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1 - v2) >> 2)) >> 1;
  uint64_t v5 = (float *)(v2 + 12 * v4);
  *(void *)uint64_t buf = &stru_10234C4B0;
  if (v5 == (float *)v1)
  {
    uint64_t v6 = v2;
  }
  else
  {
    sub_1019EAB58(v2, v2 + 12 * v4, v1, (uint64_t)buf);
    uint64_t v6 = *a1;
    unint64_t v1 = a1[1];
  }
  float v7 = *v5;
  *(void *)uint64_t buf = &stru_10234C4D0;
  if (v5 != (float *)v1)
  {
    sub_1019EAB58(v6, v2 + 12 * v4, v1, (uint64_t)buf);
    uint64_t v8 = *a1;
    unint64_t v9 = a1[1];
    *(void *)uint64_t buf = &stru_10234C4F0;
    if (v5 != (float *)v9) {
      sub_1019EAB58(v8, v2 + 12 * v4, v9, (uint64_t)buf);
    }
  }
  return v7;
}

BOOL sub_1019E7308(id a1, const $E2C29196C7A5C696474C6955C5A9CE06 *a2, const $E2C29196C7A5C696474C6955C5A9CE06 *a3)
{
  return a2->var0 < a3->var0;
}

BOOL sub_1019E731C(id a1, const $E2C29196C7A5C696474C6955C5A9CE06 *a2, const $E2C29196C7A5C696474C6955C5A9CE06 *a3)
{
  return a2->var1 < a3->var1;
}

BOOL sub_1019E7330(id a1, const $E2C29196C7A5C696474C6955C5A9CE06 *a2, const $E2C29196C7A5C696474C6955C5A9CE06 *a3)
{
  return a2->var2 < a3->var2;
}

void sub_1019E7344(uint64_t a1, int a2)
{
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10234C668);
  }
  unint64_t v4 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Starting gyro calibration, user initiated, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234C668);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGyroCalibrationDatabaseLocalMultiRun::startCalibration(BOOL)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (!*(void *)(a1 + 3232))
  {
    [[CLDeviceMotionProperties alloc] initWithMode:19];
    operator new();
  }
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10234C668);
  }
  uint64_t v6 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    unint64_t v14 = "assert";
    __int16 v15 = 2081;
    double v16 = "!fDeviceMotionDispatcher";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234C668);
    }
  }
  float v7 = off_1024190B8;
  if (os_signpost_enabled((os_log_t)off_1024190B8))
  {
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    unint64_t v14 = "assert";
    __int16 v15 = 2081;
    double v16 = "!fDeviceMotionDispatcher";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234C668);
    }
  }
  uint64_t v8 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    unint64_t v14 = "assert";
    __int16 v15 = 2081;
    double v16 = "!fDeviceMotionDispatcher";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }
  abort_report_np();
  __break(1u);
}

void sub_1019E77D4()
{
}

void sub_1019E7804(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = sub_10125D0BC();
  uint64_t v3 = *(void *)(v1 + 3232);

  sub_10125DACC(v2, v3, 1.0);
}

void sub_1019E7840(uint64_t a1)
{
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10234C668);
  }
  uint64_t v2 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stopped gyro calibration", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234C668);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGyroCalibrationDatabaseLocalMultiRun::teardown()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (*(void *)(a1 + 3232))
  {
    uint64_t v3 = sub_10125D0BC();
    sub_10125DDA0(v3, *(void *)(a1 + 3232));
    uint64_t v4 = *(void *)(a1 + 3232);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    *(void *)(a1 + 3232) = 0;
  }
}

uint64_t sub_1019E7A18(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 108)) {
    return 0xFFFFFFFFLL;
  }
  float v7 = (int *)v8;
  v8[0] = 0;
  v8[1] = 0;
  unint64_t v9 = a2;
  uint64_t v3 = (unsigned int *)(a1 + 104);
  ++*(_DWORD *)(a1 + 104);
  int v10 = (_DWORD *)(a1 + 104);
  uint64_t v4 = sub_10008A098((uint64_t **)(a1 + 80), (int *)(a1 + 104), (uint64_t)&unk_101D0B290, &v10);
  if (v4 + 5 != (uint64_t **)&v7) {
    sub_1000F5C04(v4 + 5, v7, (int *)v8);
  }
  uint64_t v5 = (void *)v8[0];
  v4[8] = v9;
  uint64_t v2 = *v3;
  sub_1000F5BB0((uint64_t)&v7, v5);
  return v2;
}

void sub_1019E7ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_1019E7AE4(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        unint64_t v9 = (uint64_t *)v4;
      }
      else {
        unint64_t v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)uint64_t buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10234C6A8);
      }
      int v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        __int16 v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          __int16 v11 = (void *)*v11;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        __int16 v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_10234C6A8);
        }
        int v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        __int16 v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        __int16 v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData>::removeClient(int) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_1019E7D74(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_1019E7E28(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_1019E7E70(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_1019E7EB8(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_1019E7F04(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (!result)
  {
    int v3 = objc_alloc_init(CLNotifierServiceAdapter);
    *(void *)(a1 + 48) = v3;
    [(CLNotifierServiceAdapter *)v3 setValid:1];
    [*(id *)(a1 + 48) setAdaptedNotifier:a1];
    return *(void *)(a1 + 48);
  }
  return result;
}

uint64_t sub_1019E7F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_10241CB58);
}

uint64_t sub_1019E7F80(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        __int16 v13 = (uint64_t *)v7;
      }
      else {
        __int16 v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)unint64_t v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          float v24 = (uint64_t *)v18;
        }
        else {
          float v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          __int16 v29 = (uint64_t *)v25;
        }
        else {
          __int16 v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)&buf[0] = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        memset(buf, 0, 320);
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_1019EBCD0();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_10241CB59;
        int v39 = v17;
        *(void *)&buf[0] = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 8sub_1019DB7E0(qword_10248D888, 0) = v30;
        int v39 = *a3;
        *(void *)&buf[0] = &v39;
        __int16 v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        long long v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)&buf[0] = &v39;
        uint64_t v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)&buf[0] = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10234C6A8);
  }
  unint64_t v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    __int16 v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      __int16 v15 = (void *)*v15;
    }
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10234C6A8);
    }
    long long v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v37 = (void *)*v37;
    }
    *(_DWORD *)unint64_t v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    unint64_t v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_1019E8450(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10234C6A8);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      float v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10234C6A8);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1019E86D4(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        __int16 v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            __int16 v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10234C6A8);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_10234C6A8);
                }
                __int16 v29 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                unint64_t v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                __int16 v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

void sub_1019E8AA8(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v2 = a1 + 64;
  uint64_t v3 = v4;
  if (v4)
  {
    int v5 = *a2;
    uint64_t v6 = v2;
    do
    {
      int v7 = *(_DWORD *)(v3 + 32);
      BOOL v8 = v7 < v5;
      if (v7 >= v5) {
        int v9 = (uint64_t *)v3;
      }
      else {
        int v9 = (uint64_t *)(v3 + 8);
      }
      if (!v8) {
        uint64_t v6 = v3;
      }
      uint64_t v3 = *v9;
    }
    while (*v9);
    if (v6 != v2 && v5 >= *(_DWORD *)(v6 + 32))
    {
      BOOL v10 = *(std::__shared_weak_count **)(v6 + 72);
      *(void *)(v6 + 64) = 0;
      *(void *)(v6 + 72) = 0;
      if (v10) {
        sub_1000DB0A0(v10);
      }
    }
  }
}

uint64_t sub_1019E8AFC(uint64_t a1, int *a2, void *__dst)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  int v11 = *(const void **)(v7 + 64);
  if (!v11) {
    return 0;
  }
  memcpy(__dst, v11, 0x140uLL);
  return 1;
}

uint64_t sub_1019E8B70(uint64_t a1, int *a2, const void *a3)
{
  int v6 = (uint64_t *)operator new(0x158uLL);
  v6[1] = 0;
  v6[2] = 0;
  uint64_t *v6 = (uint64_t)off_10234C6F8;
  memcpy(v6 + 3, a3, 0x140uLL);
  int v10 = *a2;
  int v11 = &v10;
  uint64_t v7 = sub_10044715C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101D0B290, &v11);
  int v8 = (std::__shared_weak_count *)v7[9];
  v7[8] = v6 + 3;
  v7[9] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return 1;
}

void sub_1019E8C34(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1019E8C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_1019E8CF8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10234C6A8);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10234C6A8);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData>::listClients() [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10234C6A8);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10234C6A8);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData>::listClients() [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    int v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        BOOL v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_10234C6A8);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)uint64_t buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10234C6A8);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData>::listClients() [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                BOOL v9 = v15;
              }
              while (!v16);
            }
            BOOL v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            int v8 = v19;
          }
          while (!v16);
        }
        int v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

uint64_t sub_1019E92A4()
{
  return 0;
}

void sub_1019E92AC(id a1)
{
  off_1024190B8 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

uint64_t sub_1019E92E0(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 4sub_1019DB7E0(qword_10248D888, 0) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 102;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 204;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1019E93A8(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1019E93D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10234C6F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1019E93F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10234C6F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

id sub_1019E944C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_1019E97B8((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_10234C6C8);
    }
    unint64_t v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = (unint64_t)"N30CLGyroCalibrationDatabase_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_10234C6C8);
  }
  uint64_t v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = (unint64_t)"N30CLGyroCalibrationDatabase_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_10234C6C8);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = (unint64_t)"N30CLGyroCalibrationDatabase_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLGyroCalibrationDatabase_Type::NotificationData, Callbacuint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_1019E97B8(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1023954B0))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)320)
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10234C6C8);
      }
      unint64_t v4 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 68289539;
        int v8 = 0;
        __int16 v9 = 2082;
        __int16 v10 = "";
        __int16 v11 = 2082;
        __int16 v12 = "assert";
        __int16 v13 = 2081;
        uint64_t v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_102418F90 != -1) {
          dispatch_once(&qword_102418F90, &stru_10234C6C8);
        }
      }
      unint64_t v5 = qword_102418F98;
      if (os_signpost_enabled((os_log_t)qword_102418F98))
      {
        *(_DWORD *)uint64_t buf = 68289539;
        int v8 = 0;
        __int16 v9 = 2082;
        __int16 v10 = "";
        __int16 v11 = 2082;
        __int16 v12 = "assert";
        __int16 v13 = 2081;
        uint64_t v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_102418F90 != -1) {
          dispatch_once(&qword_102418F90, &stru_10234C6C8);
        }
      }
      uint64_t v6 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 68289539;
        int v8 = 0;
        __int16 v9 = 2082;
        __int16 v10 = "";
        __int16 v11 = 2082;
        __int16 v12 = "assert";
        __int16 v13 = 2081;
        uint64_t v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }
      abort_report_np();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_1019E9A7C(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void *sub_1019E9AAC(unint64_t a1)
{
  if (a1 >= 0xCCCCCCCCCCCCCCDLL) {
    sub_1001D7FA0();
  }
  return operator new(20 * a1);
}

uint64_t sub_1019E9AF4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result = a3[1];
  int v4 = result - *a3;
  if (result != *a3)
  {
    unsigned int v6 = v4 + 1;
    if (v4 == -1)
    {
      return sub_100C4B484(a2);
    }
    else
    {
      uint64_t v8 = __clz(v6);
      uint64_t v9 = 31;
      if (((v6 << v8) & 0x7FFFFFFF) != 0) {
        uint64_t v9 = 32;
      }
      unint64_t v10 = v9 - v8;
      unint64_t v11 = v10 >> 5;
      if ((v10 & 0x1F) != 0) {
        ++v11;
      }
      if (v11 <= v10) {
        unsigned int v12 = 0xFFFFFFFF >> -(v10 / v11);
      }
      else {
        unsigned int v12 = 0;
      }
      do
        unsigned int v13 = sub_100C4B484(a2) & v12;
      while (v13 >= v6);
      return *a3 + v13;
    }
  }
  return result;
}

void *sub_1019E9BB8(unint64_t a1)
{
  if (a1 >> 61) {
    sub_1001D7FA0();
  }
  return operator new(8 * a1);
}

uint64_t **sub_1019E9BF0(uint64_t **a1, float *a2, _DWORD *a3)
{
  unsigned int v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    float v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        float v9 = *((float *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = (uint64_t *)*v5;
        unsigned int v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      unint64_t v5 = (uint64_t *)v5[1];
      if (!v5)
      {
        unsigned int v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    unint64_t v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    sub_1000EDF90(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_1019E9CAC(__n128 *a1, __n128 *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = (uint64_t)&a2[-2].n128_i64[1] + 4;
    uint64_t v100 = (uint64_t)&a2[-3].n128_i64[1];
    uint64_t v101 = a2;
    uint64_t v11 = (uint64_t)a2[-4].n128_i64 + 4;
    unint64_t v12 = (unint64_t)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (__n128 *)v12;
          uint64_t v13 = (uint64_t)a2 - v12;
          uint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v12) >> 2);
          if (v5 || !v4)
          {
            switch(v14)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (sub_1019E118C(v10, (uint64_t)a1))
                {
                  __n128 v44 = *a1;
                  unsigned __int32 v105 = a1[1].n128_u32[0];
                  __n128 v104 = v44;
                  __n128 v45 = *(__n128 *)v10;
                  a1[1].n128_u32[0] = *(_DWORD *)(v10 + 16);
                  *a1 = v45;
                  __n128 v46 = v104;
                  *(_DWORD *)(v10 + 16) = v105;
                  *(__n128 *)uint64_t v10 = v46;
                }
                break;
              case 3:
                sub_1019EA590((uint64_t)a1, (uint64_t)a1[1].n128_i64 + 4, v10);
                break;
              case 4:
                sub_1019EA898(a1, (uint64_t)a1[1].n128_i64 + 4, (uint64_t)&a1[2].n128_i64[1], v10);
                break;
              case 5:
                sub_1019EA968(a1, (uint64_t)a1[1].n128_i64 + 4, (uint64_t)&a1[2].n128_i64[1], (uint64_t)&a1[3].n128_i64[1] + 4, v10);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 479)
          {
            uint64_t v47 = (uint64_t)a1[1].n128_i64 + 4;
            BOOL v49 = a1 == a2 || v47 == (void)a2;
            if (a4)
            {
              if (!v49)
              {
                uint64_t v50 = 0;
                uint64_t v51 = (uint64_t)a1;
                do
                {
                  uint64_t v52 = v51;
                  uint64_t v51 = v47;
                  if (sub_1019E118C(v47, v52))
                  {
                    __n128 v53 = *(__n128 *)v51;
                    unsigned __int32 v105 = *(_DWORD *)(v51 + 16);
                    __n128 v104 = v53;
                    uint64_t v54 = v50;
                    while (1)
                    {
                      uint64_t v55 = (char *)a1 + v54;
                      *(__n128 *)(v55 + 2sub_1019DB7E0(qword_10248D888, 0) = *(__n128 *)((char *)a1 + v54);
                      *((_DWORD *)v55 + 9) = *(unsigned __int32 *)((char *)a1[1].n128_u32 + v54);
                      if (!v54) {
                        break;
                      }
                      v54 -= 20;
                      if (!sub_1019E118C((uint64_t)&v104, (uint64_t)a1 + v54))
                      {
                        uint64_t v56 = (uint64_t)a1[1].n128_i64 + v54 + 4;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v56 = (uint64_t)a1;
LABEL_81:
                    __n128 v57 = v104;
                    *(_DWORD *)(v56 + 16) = v105;
                    *(__n128 *)uint64_t v56 = v57;
                  }
                  uint64_t v47 = v51 + 20;
                  v50 += 20;
                }
                while ((__n128 *)(v51 + 20) != a2);
              }
            }
            else if (!v49)
            {
              uint64_t v94 = &a1[-2].n128_i8[12];
              do
              {
                uint64_t v95 = (uint64_t)a1;
                a1 = (__n128 *)v47;
                if (sub_1019E118C(v47, v95))
                {
                  __n128 v96 = *a1;
                  unsigned __int32 v105 = a1[1].n128_u32[0];
                  __n128 v104 = v96;
                  uint64_t v97 = (uint64_t)v94;
                  do
                  {
                    *(_OWORD *)(v97 + 4sub_1019DB7E0(qword_10248D888, 0) = *(_OWORD *)(v97 + 20);
                    *(_DWORD *)(v97 + 56) = *(_DWORD *)(v97 + 36);
                    BOOL v98 = sub_1019E118C((uint64_t)&v104, v97);
                    v97 -= 20;
                  }
                  while (v98);
                  __n128 v99 = v104;
                  *(_DWORD *)(v97 + 56) = v105;
                  *(__n128 *)(v97 + 4sub_1019DB7E0(qword_10248D888, 0) = v99;
                }
                uint64_t v47 = (uint64_t)a1[1].n128_i64 + 4;
                v94 += 20;
              }
              while (&a1[1].n128_u8[4] != (unsigned __int8 *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (a1 != a2)
            {
              int64_t v58 = (unint64_t)(v14 - 2) >> 1;
              int64_t v59 = v58;
              do
              {
                int64_t v60 = v59;
                if (v58 >= v59)
                {
                  uint64_t v61 = (2 * v59) | 1;
                  uint64_t v62 = (uint64_t)a1 + 20 * v61;
                  if (2 * v59 + 2 < v14 && sub_1019E118C((uint64_t)a1 + 20 * v61, v62 + 20))
                  {
                    v62 += 20;
                    uint64_t v61 = 2 * v60 + 2;
                  }
                  uint64_t v63 = (uint64_t)a1 + 20 * v60;
                  if (!sub_1019E118C(v62, v63))
                  {
                    __n128 v64 = *(__n128 *)v63;
                    unsigned __int32 v105 = *(_DWORD *)(v63 + 16);
                    __n128 v104 = v64;
                    do
                    {
                      uint64_t v65 = v62;
                      long long v66 = *(_OWORD *)v62;
                      *(_DWORD *)(v63 + 16) = *(_DWORD *)(v62 + 16);
                      *(_OWORD *)uint64_t v63 = v66;
                      if (v58 < v61) {
                        break;
                      }
                      uint64_t v67 = (2 * v61) | 1;
                      uint64_t v62 = (uint64_t)a1 + 20 * v67;
                      uint64_t v68 = 2 * v61 + 2;
                      if (v68 < v14 && sub_1019E118C((uint64_t)a1 + 20 * v67, v62 + 20))
                      {
                        v62 += 20;
                        uint64_t v67 = v68;
                      }
                      uint64_t v63 = v65;
                      uint64_t v61 = v67;
                    }
                    while (!sub_1019E118C(v62, (uint64_t)&v104));
                    __n128 v69 = v104;
                    *(_DWORD *)(v65 + 16) = v105;
                    *(__n128 *)uint64_t v65 = v69;
                  }
                }
                int64_t v59 = v60 - 1;
              }
              while (v60);
              int64_t v70 = v13 / 0x14uLL;
              uint64_t v71 = v101;
              do
              {
                int v72 = v71;
                uint64_t v73 = 0;
                __n128 v74 = *a1;
                unsigned __int32 v103 = a1[1].n128_u32[0];
                __n128 v102 = v74;
                uint64_t v75 = v70 - 2;
                if (v70 < 2) {
                  uint64_t v75 = v70 - 1;
                }
                uint64_t v76 = v75 >> 1;
                uint64_t v77 = (uint64_t)a1;
                do
                {
                  uint64_t v78 = v77 + 20 * v73 + 20;
                  uint64_t v79 = (2 * v73) | 1;
                  uint64_t v80 = 2 * v73 + 2;
                  if (v80 < v70 && sub_1019E118C(v77 + 20 * v73 + 20, v77 + 20 * v73 + 40))
                  {
                    v78 += 20;
                    uint64_t v79 = v80;
                  }
                  __n128 v81 = *(__n128 *)v78;
                  *(_DWORD *)(v77 + 16) = *(_DWORD *)(v78 + 16);
                  *(__n128 *)uint64_t v77 = v81;
                  uint64_t v77 = v78;
                  uint64_t v73 = v79;
                }
                while (v79 <= v76);
                uint64_t v71 = (__n128 *)((char *)v72 - 20);
                if ((__n128 *)v78 == (__n128 *)((char *)&v72[-2].n128_f64[1] + 4))
                {
                  __n128 v92 = v102;
                  *(_DWORD *)(v78 + 16) = v103;
                  *(__n128 *)uint64_t v78 = v92;
                  int64_t v85 = v70 - 1;
                }
                else
                {
                  __n128 v82 = *v71;
                  *(_DWORD *)(v78 + 16) = v72[-1].n128_u32[3];
                  *(__n128 *)uint64_t v78 = v82;
                  __n128 v83 = v102;
                  v72[-1].n128_u32[3] = v103;
                  *uint64_t v71 = v83;
                  uint64_t v84 = v78 - (void)a1 + 20;
                  int64_t v85 = v70 - 1;
                  if (v84 >= 21)
                  {
                    unint64_t v86 = (v84 / 0x14uLL - 2) >> 1;
                    uint64_t v87 = (uint64_t)a1 + 20 * v86;
                    if (sub_1019E118C(v87, v78))
                    {
                      __n128 v88 = *(__n128 *)v78;
                      unsigned __int32 v105 = *(_DWORD *)(v78 + 16);
                      __n128 v104 = v88;
                      do
                      {
                        uint64_t v89 = v87;
                        long long v90 = *(_OWORD *)v87;
                        *(_DWORD *)(v78 + 16) = *(_DWORD *)(v87 + 16);
                        *(_OWORD *)uint64_t v78 = v90;
                        if (!v86) {
                          break;
                        }
                        unint64_t v86 = (v86 - 1) >> 1;
                        uint64_t v87 = (uint64_t)a1 + 20 * v86;
                        uint64_t v78 = v89;
                      }
                      while (sub_1019E118C(v87, (uint64_t)&v104));
                      __n128 v91 = v104;
                      *(_DWORD *)(v89 + 16) = v105;
                      *(__n128 *)uint64_t v89 = v91;
                    }
                  }
                }
                BOOL v93 = v70 <= 2;
                int64_t v70 = v85;
              }
              while (!v93);
            }
            return;
          }
          unint64_t v15 = (unint64_t)v14 >> 1;
          uint64_t v16 = (uint64_t)a1 + 20 * ((unint64_t)v14 >> 1);
          if ((unint64_t)v13 < 0xA01)
          {
            sub_1019EA590(v16, (uint64_t)a1, v10);
          }
          else
          {
            sub_1019EA590((uint64_t)a1, v16, v10);
            uint64_t v17 = 5 * v15;
            sub_1019EA590((uint64_t)a1[1].n128_i64 + 4, (uint64_t)&a1[-1] + 4 * v17 - 4, v100);
            sub_1019EA590((uint64_t)&a1[2].n128_i64[1], (uint64_t)a1[1].n128_i64 + 4 * v17 + 4, v11);
            sub_1019EA590((uint64_t)&a1[-1] + 4 * v17 - 4, v16, (uint64_t)a1[1].n128_i64 + 4 * v17 + 4);
            __n128 v18 = *a1;
            unsigned __int32 v105 = a1[1].n128_u32[0];
            __n128 v104 = v18;
            unsigned __int32 v19 = *(_DWORD *)(v16 + 16);
            *a1 = *(__n128 *)v16;
            a1[1].n128_u32[0] = v19;
            __n128 v20 = v104;
            *(_DWORD *)(v16 + 16) = v105;
            *(__n128 *)uint64_t v16 = v20;
          }
          --a3;
          if ((a4 & 1) != 0 || sub_1019E118C((uint64_t)&a1[-2].n128_i64[1] + 4, (uint64_t)a1)) {
            break;
          }
          __n128 v34 = *a1;
          unsigned __int32 v103 = a1[1].n128_u32[0];
          __n128 v102 = v34;
          if (sub_1019E118C((uint64_t)&v102, v10))
          {
            unint64_t v12 = (unint64_t)a1;
            do
              v12 += 20;
            while (!sub_1019E118C((uint64_t)&v102, v12));
          }
          else
          {
            unint64_t v35 = (unint64_t)a1[1].n128_u64 + 4;
            do
            {
              unint64_t v12 = v35;
              if (v35 >= (unint64_t)a2) {
                break;
              }
              BOOL v36 = sub_1019E118C((uint64_t)&v102, v35);
              unint64_t v35 = v12 + 20;
            }
            while (!v36);
          }
          unint64_t v37 = (unint64_t)a2;
          if (v12 < (unint64_t)a2)
          {
            unint64_t v37 = (unint64_t)a2;
            do
              v37 -= 20;
            while (sub_1019E118C((uint64_t)&v102, v37));
          }
          while (v12 < v37)
          {
            __n128 v38 = *(__n128 *)v12;
            unsigned __int32 v105 = *(_DWORD *)(v12 + 16);
            __n128 v104 = v38;
            long long v39 = *(_OWORD *)v37;
            *(_DWORD *)(v12 + 16) = *(_DWORD *)(v37 + 16);
            *(_OWORD *)unint64_t v12 = v39;
            __n128 v40 = v104;
            *(_DWORD *)(v37 + 16) = v105;
            *(__n128 *)unint64_t v37 = v40;
            do
              v12 += 20;
            while (!sub_1019E118C((uint64_t)&v102, v12));
            do
              v37 -= 20;
            while (sub_1019E118C((uint64_t)&v102, v37));
          }
          int v41 = (__n128 *)(v12 - 20);
          BOOL v4 = v12 - 20 >= (unint64_t)a1;
          BOOL v5 = v12 - 20 == (void)a1;
          if ((__n128 *)(v12 - 20) != a1)
          {
            __n128 v42 = *v41;
            a1[1].n128_u32[0] = *(_DWORD *)(v12 - 4);
            *a1 = v42;
          }
          a4 = 0;
          __n128 v43 = v102;
          *(_DWORD *)(v12 - 4) = v103;
          *int v41 = v43;
        }
        uint64_t v21 = 0;
        __n128 v22 = *a1;
        unsigned __int32 v103 = a1[1].n128_u32[0];
        __n128 v102 = v22;
        do
          v21 += 20;
        while (sub_1019E118C((uint64_t)a1 + v21, (uint64_t)&v102));
        __int16 v23 = (char *)a1 + v21;
        unint64_t v24 = (unint64_t)v101;
        if (v21 == 20)
        {
          unint64_t v24 = (unint64_t)v101;
          do
          {
            if ((unint64_t)v23 >= v24) {
              break;
            }
            v24 -= 20;
          }
          while (!sub_1019E118C(v24, (uint64_t)&v102));
        }
        else
        {
          do
            v24 -= 20;
          while (!sub_1019E118C(v24, (uint64_t)&v102));
        }
        if ((unint64_t)v23 >= v24)
        {
          unint64_t v30 = (unint64_t)(v23 - 20);
        }
        else
        {
          unint64_t v25 = (unint64_t)a1->n128_u64 + v21;
          unint64_t v26 = v24;
          do
          {
            __n128 v27 = *(__n128 *)v25;
            unsigned __int32 v105 = *(_DWORD *)(v25 + 16);
            __n128 v104 = v27;
            long long v28 = *(_OWORD *)v26;
            *(_DWORD *)(v25 + 16) = *(_DWORD *)(v26 + 16);
            *(_OWORD *)unint64_t v25 = v28;
            __n128 v29 = v104;
            *(_DWORD *)(v26 + 16) = v105;
            *(__n128 *)unint64_t v26 = v29;
            do
              v25 += 20;
            while (sub_1019E118C(v25, (uint64_t)&v102));
            do
              v26 -= 20;
            while (!sub_1019E118C(v26, (uint64_t)&v102));
          }
          while (v25 < v26);
          unint64_t v30 = v25 - 20;
        }
        if ((__n128 *)v30 != a1)
        {
          __n128 v31 = *(__n128 *)v30;
          a1[1].n128_u32[0] = *(_DWORD *)(v30 + 16);
          *a1 = v31;
        }
        __n128 v32 = v102;
        *(_DWORD *)(v30 + 16) = v103;
        *(__n128 *)unint64_t v30 = v32;
        BOOL v4 = (unint64_t)v23 >= v24;
        a2 = v101;
        if (v4) {
          break;
        }
LABEL_33:
        sub_1019E9CAC(a1, v30, a3, a4 & 1);
        a4 = 0;
        unint64_t v12 = v30 + 20;
      }
      BOOL v33 = sub_1019EA6B0(a1, (__n128 *)v30);
      unint64_t v12 = v30 + 20;
      if (sub_1019EA6B0((__n128 *)(v30 + 20), v101)) {
        break;
      }
      if (!v33) {
        goto LABEL_33;
      }
    }
    a2 = (__n128 *)v30;
    if (!v33) {
      continue;
    }
    break;
  }
}

BOOL sub_1019EA590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = sub_1019E118C(a2, a1);
  BOOL result = sub_1019E118C(a3, a2);
  if (v6)
  {
    if (result)
    {
      int v8 = *(_DWORD *)(a1 + 16);
      long long v9 = *(_OWORD *)a1;
      int v10 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_DWORD *)(a1 + 16) = v10;
    }
    else
    {
      int v17 = *(_DWORD *)(a1 + 16);
      long long v18 = *(_OWORD *)a1;
      int v19 = *(_DWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_DWORD *)(a1 + 16) = v19;
      *(_OWORD *)a2 = v18;
      *(_DWORD *)(a2 + 16) = v17;
      BOOL result = sub_1019E118C(a3, a2);
      if (!result) {
        return result;
      }
      int v8 = *(_DWORD *)(a2 + 16);
      long long v9 = *(_OWORD *)a2;
      int v20 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v20;
    }
    *(_OWORD *)a3 = v9;
    *(_DWORD *)(a3 + 16) = v8;
  }
  else if (result)
  {
    int v11 = *(_DWORD *)(a2 + 16);
    long long v12 = *(_OWORD *)a2;
    int v13 = *(_DWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_DWORD *)(a2 + 16) = v13;
    *(_OWORD *)a3 = v12;
    *(_DWORD *)(a3 + 16) = v11;
    BOOL result = sub_1019E118C(a2, a1);
    if (result)
    {
      int v14 = *(_DWORD *)(a1 + 16);
      long long v15 = *(_OWORD *)a1;
      int v16 = *(_DWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_DWORD *)(a1 + 16) = v16;
      *(_OWORD *)a2 = v15;
      *(_DWORD *)(a2 + 16) = v14;
    }
  }
  return result;
}

BOOL sub_1019EA6B0(__n128 *a1, __n128 *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 2;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      BOOL v6 = (__n128 *)((char *)a2 - 20);
      if (sub_1019E118C((uint64_t)&a2[-2].n128_i64[1] + 4, (uint64_t)a1))
      {
        unsigned __int32 v7 = a1[1].n128_u32[0];
        __n128 v8 = *a1;
        unsigned __int32 v9 = v6[1].n128_u32[0];
        *a1 = *v6;
        a1[1].n128_u32[0] = v9;
        __n128 *v6 = v8;
        v6[1].n128_u32[0] = v7;
      }
      return 1;
    case 3uLL:
      sub_1019EA590((uint64_t)a1, (uint64_t)a1[1].n128_i64 + 4, (uint64_t)&a2[-2].n128_i64[1] + 4);
      return 1;
    case 4uLL:
      sub_1019EA898(a1, (uint64_t)a1[1].n128_i64 + 4, (uint64_t)&a1[2].n128_i64[1], (uint64_t)&a2[-2].n128_i64[1] + 4);
      return 1;
    case 5uLL:
      sub_1019EA968(a1, (uint64_t)a1[1].n128_i64 + 4, (uint64_t)&a1[2].n128_i64[1], (uint64_t)&a1[3].n128_i64[1] + 4, (uint64_t)&a2[-2].n128_i64[1] + 4);
      return 1;
    default:
      uint64_t v10 = (uint64_t)&a1[2].n128_i64[1];
      sub_1019EA590((uint64_t)a1, (uint64_t)a1[1].n128_i64 + 4, (uint64_t)&a1[2].n128_i64[1]);
      uint64_t v11 = (uint64_t)&a1[3].n128_i64[1] + 4;
      if ((__n128 *)((char *)&a1[3].n128_f64[1] + 4) == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if (sub_1019E118C(v11, v10))
    {
      long long v17 = *(_OWORD *)v11;
      int v18 = *(_DWORD *)(v11 + 16);
      uint64_t v14 = v12;
      while (1)
      {
        long long v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 6sub_1019DB7E0(qword_10248D888, 0) = *(__n128 *)((char *)a1 + v14 + 40);
        *((_DWORD *)v15 + 19) = *(unsigned __int32 *)((char *)&a1[3].n128_u32[2] + v14);
        if (v14 == -40) {
          break;
        }
        v14 -= 20;
        if (!sub_1019E118C((uint64_t)&v17, (uint64_t)(v15 + 20)))
        {
          uint64_t v16 = (uint64_t)&a1[3].n128_i64[1] + v14 + 4;
          goto LABEL_12;
        }
      }
      uint64_t v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)uint64_t v16 = v17;
      *(_DWORD *)(v16 + 16) = v18;
      if (++v13 == 8) {
        return v11 + 20 == (void)a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 20;
    v11 += 20;
    if ((__n128 *)v11 == a2) {
      return 1;
    }
  }
}

__n128 sub_1019EA898(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1019EA590((uint64_t)a1, a2, a3);
  if (sub_1019E118C(a4, a3))
  {
    int v9 = *(_DWORD *)(a3 + 16);
    long long v10 = *(_OWORD *)a3;
    int v11 = *(_DWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_DWORD *)(a3 + 16) = v11;
    *(_OWORD *)a4 = v10;
    *(_DWORD *)(a4 + 16) = v9;
    if (sub_1019E118C(a3, a2))
    {
      int v12 = *(_DWORD *)(a2 + 16);
      __n128 v13 = *(__n128 *)a2;
      int v14 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v14;
      *(__n128 *)a3 = v13;
      *(_DWORD *)(a3 + 16) = v12;
      if (sub_1019E118C(a2, (uint64_t)a1))
      {
        unsigned __int32 v15 = a1[1].n128_u32[0];
        __n128 result = *a1;
        unsigned __int32 v16 = *(_DWORD *)(a2 + 16);
        *a1 = *(__n128 *)a2;
        a1[1].n128_u32[0] = v16;
        *(__n128 *)a2 = result;
        *(_DWORD *)(a2 + 16) = v15;
      }
    }
  }
  return result;
}

__n128 sub_1019EA968(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1019EA898(a1, a2, a3, a4);
  if (sub_1019E118C(a5, a4))
  {
    int v11 = *(_DWORD *)(a4 + 16);
    long long v12 = *(_OWORD *)a4;
    int v13 = *(_DWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_DWORD *)(a4 + 16) = v13;
    *(_OWORD *)a5 = v12;
    *(_DWORD *)(a5 + 16) = v11;
    if (sub_1019E118C(a4, a3))
    {
      int v14 = *(_DWORD *)(a3 + 16);
      long long v15 = *(_OWORD *)a3;
      int v16 = *(_DWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_DWORD *)(a3 + 16) = v16;
      *(_OWORD *)a4 = v15;
      *(_DWORD *)(a4 + 16) = v14;
      if (sub_1019E118C(a3, a2))
      {
        int v17 = *(_DWORD *)(a2 + 16);
        __n128 v18 = *(__n128 *)a2;
        int v19 = *(_DWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_DWORD *)(a2 + 16) = v19;
        *(__n128 *)a3 = v18;
        *(_DWORD *)(a3 + 16) = v17;
        if (sub_1019E118C(a2, (uint64_t)a1))
        {
          unsigned __int32 v20 = a1[1].n128_u32[0];
          __n128 result = *a1;
          unsigned __int32 v21 = *(_DWORD *)(a2 + 16);
          *a1 = *(__n128 *)a2;
          a1[1].n128_u32[0] = v21;
          *(__n128 *)a2 = result;
          *(_DWORD *)(a2 + 16) = v20;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1019EAA74(uint64_t result, uint64_t a2, int a3)
{
  if (a2 == result) {
    return result;
  }
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - result) >> 2);
  while (1)
  {
    unint64_t v4 = v3 >> 1;
    uint64_t v5 = result + 20 * (v3 >> 1);
    int v6 = *(_DWORD *)(v5 + 16);
    if (v6 >= a3) {
      break;
    }
    __n128 result = v5 + 20;
    unint64_t v4 = v3 + ~v4;
LABEL_7:
    unint64_t v3 = v4;
    if (!v4) {
      return result;
    }
  }
  if (v6 > a3)
  {
    a2 = result + 20 * (v3 >> 1);
    goto LABEL_7;
  }
  if (v3 >= 2)
  {
    do
    {
      unint64_t v7 = v4 >> 1;
      uint64_t v8 = result + 20 * (v4 >> 1);
      int v9 = *(_DWORD *)(v8 + 16);
      uint64_t v10 = v8 + 20;
      v4 += ~(v4 >> 1);
      if (v9 < a3) {
        __n128 result = v10;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    while (v4);
  }
  uint64_t v11 = v5 + 20;
  uint64_t v12 = a2 - (v5 + 20);
  if (v12)
  {
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (v12 >> 2);
    do
    {
      unint64_t v14 = v13 >> 1;
      uint64_t v15 = v11 + 20 * (v13 >> 1);
      int v16 = *(_DWORD *)(v15 + 16);
      uint64_t v17 = v15 + 20;
      v13 += ~(v13 >> 1);
      if (v16 > a3) {
        unint64_t v13 = v14;
      }
      else {
        uint64_t v11 = v17;
      }
    }
    while (v13);
  }
  return result;
}

uint64_t sub_1019EAB58(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    unint64_t v5 = a3;
    uint64_t v7 = result;
    do
    {
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v7) >> 2);
      if (v8 < 2) {
        break;
      }
      if (v8 == 3)
      {
        return sub_1019EB064((uint64_t *)v7, (uint64_t *)(v7 + 12), (uint64_t *)(v5 - 12), a4);
      }
      if (v8 == 2)
      {
        uint64_t v26 = *(void *)a4;
        __n128 v27 = (uint64_t *)(v5 - 12);
        __n128 result = (*(uint64_t (**)(void))(v26 + 16))();
        if (result)
        {
          int v45 = *(_DWORD *)(v7 + 8);
          uint64_t v38 = *(void *)v7;
          uint64_t v28 = *v27;
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v5 - 4);
          *(void *)uint64_t v7 = v28;
          *(_DWORD *)(v5 - 4) = v45;
          *__n128 v27 = v38;
        }
        return result;
      }
      if ((uint64_t)(v5 - v7) <= 95)
      {
        while (v7 != v5 - 12)
        {
          uint64_t v29 = v7;
          v7 += 12;
          if (v29 != v5 && v7 != v5)
          {
            uint64_t v30 = v7;
            __n128 v31 = (uint64_t *)v29;
            do
            {
              __n128 result = (*(uint64_t (**)(void))(*(void *)a4 + 16))();
              if (result) {
                __n128 v31 = (uint64_t *)v30;
              }
              v30 += 12;
            }
            while (v30 != v5);
            if (v31 != (uint64_t *)v29)
            {
              int v46 = *(_DWORD *)(v29 + 8);
              uint64_t v39 = *(void *)v29;
              uint64_t v32 = *v31;
              *(_DWORD *)(v29 + 8) = *((_DWORD *)v31 + 2);
              *(void *)uint64_t v29 = v32;
              *((_DWORD *)v31 + 2) = v46;
              *__n128 v31 = v39;
            }
          }
        }
        return result;
      }
      unint64_t v9 = v7 + 12 * (v8 >> 1);
      uint64_t v10 = (uint64_t *)(v5 - 12);
      int v11 = sub_1019EB064((uint64_t *)v7, (uint64_t *)v9, (uint64_t *)(v5 - 12), a4);
      __n128 result = (*(uint64_t (**)(void))(*(void *)a4 + 16))();
      if (result)
      {
        unint64_t v12 = v5 - 12;
LABEL_13:
        unint64_t v14 = v7 + 12;
        if (v7 + 12 < v12)
        {
          while (1)
          {
            unint64_t v15 = v14 - 12;
            do
              v15 += 12;
            while (((*(uint64_t (**)(void))(*(void *)a4 + 16))() & 1) != 0);
            unint64_t v14 = v15 + 12;
            do
            {
              v12 -= 12;
              __n128 result = (*(uint64_t (**)(void))(*(void *)a4 + 16))();
            }
            while (!result);
            if (v15 >= v12) {
              break;
            }
            int v41 = *(_DWORD *)(v15 + 8);
            uint64_t v34 = *(void *)v15;
            uint64_t v16 = *(void *)v12;
            *(_DWORD *)(v15 + 8) = *(_DWORD *)(v12 + 8);
            *(void *)unint64_t v15 = v16;
            *(_DWORD *)(v12 + 8) = v41;
            *(void *)unint64_t v12 = v34;
            ++v11;
            if (v15 == v9) {
              unint64_t v9 = v12;
            }
          }
          unint64_t v14 = v15;
        }
        if (v14 != v9)
        {
          __n128 result = (*(uint64_t (**)(void))(*(void *)a4 + 16))();
          if (result)
          {
            int v42 = *(_DWORD *)(v14 + 8);
            uint64_t v35 = *(void *)v14;
            uint64_t v17 = *(void *)v9;
            *(_DWORD *)(v14 + 8) = *(_DWORD *)(v9 + 8);
            *(void *)unint64_t v14 = v17;
            *(_DWORD *)(v9 + 8) = v42;
            *(void *)unint64_t v9 = v35;
            ++v11;
          }
        }
        if (v14 == a2) {
          return result;
        }
        if (!v11)
        {
          unint64_t v19 = v14;
          if (v14 <= a2)
          {
            while (1)
            {
              unint64_t v22 = v19 + 12;
              if (v19 + 12 == v5) {
                break;
              }
              __n128 result = (*(uint64_t (**)(void))(*(void *)a4 + 16))();
              unint64_t v19 = v22;
              if (result) {
                goto LABEL_28;
              }
            }
          }
          else
          {
            uint64_t v20 = v7;
            while (1)
            {
              uint64_t v21 = v20 + 12;
              if (v20 + 12 == v14) {
                break;
              }
              __n128 result = (*(uint64_t (**)(void))(*(void *)a4 + 16))();
              uint64_t v20 = v21;
              if (result) {
                goto LABEL_28;
              }
            }
          }
          return result;
        }
LABEL_28:
        if (v14 <= a2)
        {
          unint64_t v18 = v14 + 12;
        }
        else
        {
          unint64_t v5 = v14;
          unint64_t v18 = v7;
        }
      }
      else
      {
        unint64_t v12 = v5 - 12;
        while (1)
        {
          v12 -= 12;
          if (v12 == v7) {
            break;
          }
          __n128 result = (*(uint64_t (**)(void))(*(void *)a4 + 16))();
          if (result)
          {
            int v40 = *(_DWORD *)(v7 + 8);
            uint64_t v33 = *(void *)v7;
            uint64_t v13 = *(void *)v12;
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v12 + 8);
            *(void *)uint64_t v7 = v13;
            *(_DWORD *)(v12 + 8) = v40;
            *(void *)unint64_t v12 = v33;
            ++v11;
            goto LABEL_13;
          }
        }
        uint64_t v23 = v7 + 12;
        __n128 result = (*(uint64_t (**)(void))(*(void *)a4 + 16))();
        if ((result & 1) == 0)
        {
          while ((uint64_t *)v23 != v10)
          {
            __n128 result = (*(uint64_t (**)(void))(*(void *)a4 + 16))();
            if (result)
            {
              int v43 = *(_DWORD *)(v23 + 8);
              uint64_t v36 = *(void *)v23;
              uint64_t v24 = *v10;
              *(_DWORD *)(v23 + 8) = *(_DWORD *)(v5 - 4);
              *(void *)uint64_t v23 = v24;
              v23 += 12;
              *(_DWORD *)(v5 - 4) = v43;
              *uint64_t v10 = v36;
              goto LABEL_44;
            }
            v23 += 12;
          }
          return result;
        }
LABEL_44:
        if ((uint64_t *)v23 == v10) {
          return result;
        }
        while (1)
        {
          unint64_t v18 = v23 - 12;
          do
            v18 += 12;
          while (!(*(unsigned int (**)(void))(*(void *)a4 + 16))());
          uint64_t v23 = v18 + 12;
          do
          {
            uint64_t v10 = (uint64_t *)((char *)v10 - 12);
            __n128 result = (*(uint64_t (**)(void))(*(void *)a4 + 16))();
          }
          while ((result & 1) != 0);
          if (v18 >= (unint64_t)v10) {
            break;
          }
          int v44 = *(_DWORD *)(v18 + 8);
          uint64_t v37 = *(void *)v18;
          uint64_t v25 = *v10;
          *(_DWORD *)(v18 + 8) = *((_DWORD *)v10 + 2);
          *(void *)unint64_t v18 = v25;
          *((_DWORD *)v10 + 2) = v44;
          *uint64_t v10 = v37;
        }
        if (v18 > a2) {
          return result;
        }
      }
      uint64_t v7 = v18;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t sub_1019EB064(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  char v8 = (*(uint64_t (**)(void))(*(void *)a4 + 16))();
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a4 + 16))();
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    int v13 = *((_DWORD *)a2 + 2);
    uint64_t v14 = *a2;
    int v15 = *((_DWORD *)a3 + 2);
    *a2 = *a3;
    *((_DWORD *)a2 + 2) = v15;
    *a3 = v14;
    *((_DWORD *)a3 + 2) = v13;
    if (!(*(unsigned int (**)(void))(*(void *)a4 + 16))()) {
      return 1;
    }
    int v16 = *((_DWORD *)a1 + 2);
    uint64_t v17 = *a1;
    int v18 = *((_DWORD *)a2 + 2);
    *a1 = *a2;
    *((_DWORD *)a1 + 2) = v18;
    *a2 = v17;
    *((_DWORD *)a2 + 2) = v16;
    return 2;
  }
  if (!result)
  {
    int v19 = *((_DWORD *)a1 + 2);
    uint64_t v20 = *a1;
    int v21 = *((_DWORD *)a2 + 2);
    *a1 = *a2;
    *((_DWORD *)a1 + 2) = v21;
    *a2 = v20;
    *((_DWORD *)a2 + 2) = v19;
    if (!(*(unsigned int (**)(void))(*(void *)a4 + 16))()) {
      return 1;
    }
    int v22 = *((_DWORD *)a2 + 2);
    uint64_t v23 = *a2;
    int v24 = *((_DWORD *)a3 + 2);
    *a2 = *a3;
    *((_DWORD *)a2 + 2) = v24;
    *a3 = v23;
    *((_DWORD *)a3 + 2) = v22;
    return 2;
  }
  int v10 = *((_DWORD *)a1 + 2);
  uint64_t v11 = *a1;
  int v12 = *((_DWORD *)a3 + 2);
  *a1 = *a3;
  *((_DWORD *)a1 + 2) = v12;
  *a3 = v11;
  *((_DWORD *)a3 + 2) = v10;
  return 1;
}

void *sub_1019EB1D0(unint64_t a1)
{
  if (a1 >= 0x1555555555555556) {
    sub_1001D7FA0();
  }
  return operator new(12 * a1);
}

uint64_t sub_1019EB218(uint64_t a1)
{
  id v2 = *(void ***)(a1 + 8);
  unint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 4sub_1019DB7E0(qword_10248D888, 0) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = *(void ***)(a1 + 16);
      id v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 1024;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

id sub_1019EB2E0(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_1019EBA0C((uint64_t)&v10, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_10234C6C8);
    }
    uint64_t v6 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v18 = v2;
      __int16 v19 = 2048;
      uint64_t v20 = 0;
      __int16 v21 = 2080;
      uint64_t v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_10234C6C8);
  }
  unint64_t v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 134218498;
    id v18 = v2;
    __int16 v19 = 2048;
    uint64_t v20 = 0;
    __int16 v21 = 2080;
    uint64_t v22 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_10234C6C8);
LABEL_18:
  int v11 = 134218498;
  id v12 = v2;
  __int16 v13 = 2048;
  uint64_t v14 = 0;
  __int16 v15 = 2080;
  uint64_t v16 = v8;
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = char, Callbacuint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v9);
  if (v9 != (char *)buf) {
    free(v9);
  }
  return 0;
}

id sub_1019EB65C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10234C6C8);
      }
      unint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v10 = v2;
        __int16 v11 = 2048;
        uint64_t v12 = 0;
        __int16 v13 = 2080;
        uint64_t v14 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = char, Callbacuint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10234C6C8);
      }
      uint64_t v6 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v10 = v2;
        __int16 v11 = 2048;
        uint64_t v12 = 0;
        __int16 v13 = 2080;
        uint64_t v14 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_10234C6C8);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_1019EBA0C(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1023954B0))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)1)
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10234C6C8);
      }
      uint64_t v4 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 68289539;
        int v8 = 0;
        __int16 v9 = 2082;
        id v10 = "";
        __int16 v11 = 2082;
        uint64_t v12 = "assert";
        __int16 v13 = 2081;
        uint64_t v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_102418F90 != -1) {
          dispatch_once(&qword_102418F90, &stru_10234C6C8);
        }
      }
      unint64_t v5 = qword_102418F98;
      if (os_signpost_enabled((os_log_t)qword_102418F98))
      {
        *(_DWORD *)uint64_t buf = 68289539;
        int v8 = 0;
        __int16 v9 = 2082;
        id v10 = "";
        __int16 v11 = 2082;
        uint64_t v12 = "assert";
        __int16 v13 = 2081;
        uint64_t v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_102418F90 != -1) {
          dispatch_once(&qword_102418F90, &stru_10234C6C8);
        }
      }
      uint64_t v6 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 68289539;
        int v8 = 0;
        __int16 v9 = 2082;
        id v10 = "";
        __int16 v11 = 2082;
        uint64_t v12 = "assert";
        __int16 v13 = 2081;
        uint64_t v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }
      abort_report_np();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_1019EBCD0()
{
}

uint64_t sub_1019EBD84(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

void sub_1019EBEE4()
{
}

id sub_1019EBF08(uint64_t a1, void *a2)
{
  return _[a2 onAveragedALSData:a1];
}

void sub_1019EC078(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void *sub_1019EC180(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_10234BF80;
  id v9 = a5;
  *a1 = off_10234C748;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  int v14[2] = 0x2020000000;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1019EC308;
  aBlock[3] = &unk_1022B6BE8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  _OWORD v12[2] = sub_1001725F0;
  void v12[3] = &unk_1022B6C10;
  void v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_1019EC2E0(_Unwind_Exception *a1)
{
  sub_1019D78CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1019EC308(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

void sub_1019EC320(uint64_t a1)
{
  sub_1019EC358(a1);

  operator delete();
}

uint64_t sub_1019EC358(uint64_t a1)
{
  *(void *)a1 = off_10234C748;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1019D78CC(a1);
}

void sub_1019EC3D4(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1019EC4B4(id a1)
{
  qword_102489760 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLNearbydInterfaceManagerSilo"];
}

void sub_1019EC764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C7C0);
    }
    uint64_t v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#NearbydIfMgr IDS service failed to initialize\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10234C7C0);
      }
    }
    unint64_t v5 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#NearbydIfMgr IDS service failed to initialize", "{\"msg%{public}.0s\":\"#NearbydIfMgr IDS service failed to initialize\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
    }
  }
  else
  {
    [*(id *)(a1 + 32) setService:a2];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C7C0);
    }
    uint64_t v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 68289026;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#NearbydIfMgr,IDS became available so resuming silo\"}", (uint8_t *)&v8, 0x12u);
    }
    [*(id *)(a1 + 40) resume];
  }
}

void sub_1019ED2BC()
{
  sub_1019EF9C8(v2);
  uint64_t v5 = *(void *)(v0 + 120);
  *(void *)(v0 + 12sub_1019DB7E0(qword_10248D888, 0) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(v0 + 112);
  *(void *)(v0 + 112) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *v4;
  uint64_t *v4 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  sub_100589514(*v3);
  sub_1019EF920(v1);
  operator delete();
}

uint64_t *sub_1019ED4D4(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {

    sub_1019EF9C8(v2 + 136);
    uint64_t v3 = *(void *)(v2 + 120);
    *(void *)(v2 + 12sub_1019DB7E0(qword_10248D888, 0) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *(void *)(v2 + 112);
    *(void *)(v2 + 112) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *(void *)(v2 + 104);
    *(void *)(v2 + 104) = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    sub_100589514(*(void **)(v2 + 80));
    sub_1019EF920(v2 + 8);
    operator delete();
  }
  return result;
}

void sub_1019EE810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1019EEBAC(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 56), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10234C7E0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNearbydInterfaceManager::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10234C7E0);
    }
    int v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v19 = 0;
      __int16 v20 = 2082;
      __int16 v21 = "";
      __int16 v22 = 2082;
      uint64_t v23 = "activity";
      __int16 v24 = 2050;
      uint64_t v25 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNearbydInterfaceManager::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  if (*a2 == 8)
  {
    int v9 = *a3;
    *(unsigned char *)(a4 + 96) = v9;
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C7C0);
    }
    __int16 v10 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = *(unsigned __int8 *)(a4 + 96);
      *(_DWORD *)uint64_t buf = 67240192;
      int v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#NearbydIfMgr,#processAirplaneModeChange,airplaneMode=%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10234C7C0);
      }
      int v12 = *(unsigned __int8 *)(a4 + 96);
      int v16 = 67240192;
      int v17 = v12;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::processAirplaneModeChange(const BOOL)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    if (v9)
    {
      sub_1000C9478(a4, 0, 0);
      sub_1000C9478(a4, 1, 0);
    }
  }
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_1019EEEE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13)
{
  if (a13) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1019EEF08(uint64_t a1)
{
  id v2 = [objc_alloc((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
  id v3 = objc_alloc((Class)CLLocation);
  long long v4 = *(_OWORD *)(a1 + 288);
  v11[6] = *(_OWORD *)(a1 + 272);
  v11[7] = v4;
  v12[0] = *(_OWORD *)(a1 + 304);
  *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)(a1 + 316);
  long long v5 = *(_OWORD *)(a1 + 224);
  v11[2] = *(_OWORD *)(a1 + 208);
  void v11[3] = v5;
  long long v6 = *(_OWORD *)(a1 + 256);
  void v11[4] = *(_OWORD *)(a1 + 240);
  v11[5] = v6;
  long long v7 = *(_OWORD *)(a1 + 192);
  v11[0] = *(_OWORD *)(a1 + 176);
  v11[1] = v7;
  [v2 encodeObject:[v3 initWithClientLocation:v11] forKey:@"kCLLocationStreamingMessageLocationKey"];
  id v8 = objc_alloc_init((Class)NSMutableDictionary);
  [v8 setObject:objc_msgSend(v2, "encodedData") forKeyedSubscript:@"kCLLocationStreamingMessageLocationKey"];
  uint64_t v14 = 0;
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_10234C7C0);
  }
  int v9 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#assistancerelay,send location to watch", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C7C0);
    }
    __int16 v13 = 0;
    __int16 v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::relayLocationToWatch(NSMutableDictionary *)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  [*(id *)(a1 + 64) sendMessageToWatch:v8 identifier:&v14];
  *(double *)(a1 + 48) = sub_10016C458();
}

uint64_t sub_1019EF168(uint64_t a1)
{
  id v3 = (void **)(a1 + 32);
  sub_1000A7B4C(&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1019EF1B4(uint64_t a1, uint64_t a2)
{
  int v38 = a2;
  uint64_t v4 = a1 + 8;
  long long v5 = sub_1000C9530((void *)(a1 + 8), a2);
  if (v5)
  {
    if (*((char *)v5 + 47) < 0)
    {
      sub_1000DC48C(__dst, (void *)v5[3], v5[4]);
    }
    else
    {
      *(_OWORD *)uint64_t __dst = *(_OWORD *)(v5 + 3);
      uint64_t v37 = v5[5];
    }
    v50[0] = @"SimInstance";
    long long v6 = +[NSNumber numberWithInt:a2];
    v50[1] = @"ISO";
    v51[0] = v6;
    if (v37 >= 0) {
      long long v7 = __dst;
    }
    else {
      long long v7 = (void **)__dst[0];
    }
    v51[1] = +[NSString stringWithUTF8String:v7];
    id v35 = 0;
    unsigned int v8 = [[*(id *)(a1 + 64) sendMessageToWatch:identifier:](NSDictionary dictionaryWithObjects:forKeys:count:, v51, v50, 2), &v35];
    if (v35) {
      unsigned int v9 = v8;
    }
    else {
      unsigned int v9 = 0;
    }
    if (v9 == 1)
    {
      __int16 v10 = sub_1019EFA90(v4, a2, &v38);
      sub_100134750(__p, (char *)[v35 UTF8String]);
      unint64_t v11 = v10[9];
      unint64_t v12 = v10[8];
      if (v12 >= v11)
      {
        uint64_t v14 = v10[7];
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v14) >> 3);
        unint64_t v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_1001D7FD4();
        }
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v14) >> 3);
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x555555555555555) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v16;
        }
        BOOL v49 = (void **)(v10 + 9);
        if (v18) {
          int v19 = (char *)sub_1000DA5D8((uint64_t)(v10 + 9), v18);
        }
        else {
          int v19 = 0;
        }
        __int16 v20 = &v19[24 * v15];
        *(void *)uint64_t buf = v19;
        uint64_t v46 = (uint64_t)v20;
        __int16 v48 = &v19[24 * v18];
        long long v21 = *(_OWORD *)__p;
        *((void *)v20 + 2) = v40;
        *(_OWORD *)__int16 v20 = v21;
        __p[1] = 0;
        id v40 = 0;
        __p[0] = 0;
        id v47 = v20 + 24;
        sub_1001D7FEC(v10 + 7, buf);
        uint64_t v22 = v10[8];
        sub_1001D8184((uint64_t)buf);
        int v23 = SHIBYTE(v40);
        v10[8] = v22;
        if (v23 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v13 = *(_OWORD *)__p;
        *(void *)(v12 + 16) = v40;
        *(_OWORD *)unint64_t v12 = v13;
        v10[8] = v12 + 24;
      }
      __int16 v24 = sub_1019EFA90(v4, a2, &v38);
      if (0xAAAAAAAAAAAAAAABLL * ((v24[8] - v24[7]) >> 3) >= 0x15)
      {
        uint64_t v25 = sub_1019EFA90(v4, a2, &v38)[7];
        uint64_t v26 = sub_1019EFA90(v4, a2, &v38);
        sub_101279BFC((uint64_t)(v26 + 7), v25, (long long *)(v25 + 24));
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10234C7C0);
      }
      __n128 v27 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v28 = sub_1019EFA90(v4, a2, &v38);
        int v29 = -1431655765 * ((unint64_t)(v28[8] - v28[7]) >> 3);
        uint64_t v30 = __dst;
        if (v37 < 0) {
          uint64_t v30 = (void **)__dst[0];
        }
        *(_DWORD *)uint64_t buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v29;
        uint64_t v46 = 0x840000000010400;
        id v47 = v35;
        LOWORD(v48) = 1024;
        *(_DWORD *)((char *)&v48 + 2) = a2;
        HIWORD(v48) = 2080;
        BOOL v49 = v30;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#NearbydIfMgr,#sendIsoCountryToWatch,savedMsgIdentifiers.size()=%d,sent=%d,identifier:%@,SimInstance:%d,ISO:%s", buf, 0x28u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_10234C7C0);
        }
        __n128 v31 = sub_1019EFA90(v4, a2, &v38);
        int v32 = -1431655765 * ((unint64_t)(v31[8] - v31[7]) >> 3);
        uint64_t v33 = __dst;
        if (v37 < 0) {
          uint64_t v33 = (void **)__dst[0];
        }
        LODWORD(__p[0]) = 67110146;
        HIDWORD(__p[0]) = v32;
        LOWORD(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 2) = 1;
        HIWORD(__p[1]) = 2112;
        id v40 = v35;
        __int16 v41 = 1024;
        int v42 = a2;
        __int16 v43 = 2080;
        int v44 = v33;
        uint64_t v34 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::sendIsoCountryToWatch(SimInstance)", "%s\n", v34);
        if (v34 != (char *)buf) {
          free(v34);
        }
      }
    }
    if (SHIBYTE(v37) < 0) {
      operator delete(__dst[0]);
    }
  }
}

void sub_1019EF6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1019EF718(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1019EF748(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1019EF778(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_1019EF7A8(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unsigned int v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_100314FE8((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_1000DA584((void *)a1, v11);
    unint64_t v12 = sub_1001D8604(v8, (long long *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    long long v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    sub_10020E510(__str, v13, v9);
    unint64_t v12 = sub_1001D8604(v8, (long long *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_10020E510(__str, (std::string *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0) {
        operator delete(*(void **)(v16 - 24));
      }
      v16 -= 24;
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1019EF910(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1019EF918(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1019EF920(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      id v3 = (void *)*v2;
      sub_1019EF980((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_1019EF980(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 40);
  sub_1000A7B4C(&v2);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

uint64_t sub_1019EF9C8(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      id v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0) {
        operator delete(v2[3]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_1019EFA30(char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 47) < 0) {
      operator delete(__p[3]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t *sub_1019EFA90(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unsigned int v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v12 = (void *)(a1 + 16);
  long long v13 = (char *)operator new(0x58uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = v6;
  *((_DWORD *)v13 + 4) = *a3;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 4sub_1019DB7E0(qword_10248D888, 0) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  char v36 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            sub_1001D7FA0();
          }
          __int16 v20 = operator new(8 * *(void *)&prime);
          long long v21 = *(void **)a1;
          *(void *)a1 = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          int v23 = (void *)*v12;
          if (*v12)
          {
            unint64_t v24 = v23[1];
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v24) = v12;
            int v29 = (void *)*v23;
            if (*v23)
            {
              do
              {
                unint64_t v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(void *)&prime) {
                    v30 %= *(void *)&prime;
                  }
                }
                else
                {
                  v30 &= *(void *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v30))
                  {
                    *(void *)(*(void *)a1 + 8 * v3sub_1019DB7E0(qword_10248D888, 0) = v23;
                    goto LABEL_55;
                  }
                  void *v23 = *v29;
                  *int v29 = **(void **)(*(void *)a1 + 8 * v30);
                  **(void **)(*(void *)a1 + 8 * v3sub_1019DB7E0(qword_10248D888, 0) = v29;
                  int v29 = v23;
                }
                unint64_t v30 = v24;
LABEL_55:
                int v23 = v29;
                int v29 = (void *)*v29;
                unint64_t v24 = v30;
              }
              while (v29);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v34 = *(void **)a1;
        *(void *)a1 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v7 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  __n128 v31 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t i = (uint64_t *)v35[0];
  if (v31)
  {
    *(void *)v35[0] = *v31;
LABEL_72:
    *__n128 v31 = i;
    goto LABEL_73;
  }
  *(void *)v35[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v12;
  if (*i)
  {
    unint64_t v32 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    __n128 v31 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(void *)(a1 + 24);
  sub_1019EFEB8((uint64_t)v35);
  return i;
}

void sub_1019EFEA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019EFEB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1019EFEB8(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1019EF980((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

long long *sub_1019EFF10(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  long long v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      long long v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      a4 += 24;
      *((unsigned char *)v5 + 23) = 0;
      *(unsigned char *)long long v5 = 0;
      long long v5 = (long long *)((char *)v5 + 24);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_1019EFF84()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101E54234;
      v0[3] = unk_101E54244;
      v0[4] = xmmword_101E54254;
      v0[0] = xmmword_101E54214;
      v0[1] = unk_101E54224;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_1019F0064(_Unwind_Exception *a1)
{
}

float sub_1019F007C()
{
  uint64_t v0 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");
  uint64_t v1 = [+[NSCalendar currentCalendar] components:252 fromDate:v0];
  id v2 = [(NSDateComponents *)v1 copy];
  [v2 setDay:1];
  [v2 setMonth:1];
  id v3 = [objc_alloc((Class)NSCalendar) initWithCalendarIdentifier:NSCalendarIdentifierGregorian];
  id v4 = [v3 components:16 fromDate:[v3 dateFromComponents:v2] toDate:v0 options:0];
  double v5 = (double)[(NSDateComponents *)v1 year];
  double v6 = fabs((double)((uint64_t)[v4 day] + 1));
  return v6 / dbl_101E54270[([(NSDateComponents *)v1 year] & 3) == 0] + v5;
}

void sub_1019F0180(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v30 = 0;
  double v6 = +[NSFileManager defaultManager];
  if (*((char *)a1 + 23) >= 0) {
    long long v7 = a1;
  }
  else {
    long long v7 = (uint64_t *)*a1;
  }
  uint8x8_t v8 = [(NSFileManager *)v6 contentsOfDirectoryAtURL:+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", +[NSString stringWithUTF8String:v7]) includingPropertiesForKeys:0 options:4 error:&v30];
  if (v30)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234C820);
    }
    unsigned int v9 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a1 + 23) >= 0) {
        unint64_t v10 = a1;
      }
      else {
        unint64_t v10 = (uint64_t *)*a1;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      *(void *)&uint8_t buf[4] = v10;
      __int16 v37 = 2114;
      uint64_t v38 = v30;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Unable to list files at path: %{public}s, error, %{public}@", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10234C820);
      }
      if (*((char *)a1 + 23) >= 0) {
        unint64_t v11 = a1;
      }
      else {
        unint64_t v11 = (uint64_t *)*a1;
      }
      int v32 = 136446466;
      uint64_t v33 = v11;
      __int16 v34 = 2114;
      uint64_t v35 = v30;
      unint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static std::vector<std::string> CLLegacyFileManager::listFilesWithExt(const std::string &, const std::string &)", "%s\n", v12);
      if (v12 != buf) {
        free(v12);
      }
    }
  }
  else
  {
    long long v13 = v8;
    if (*((char *)a2 + 23) >= 0) {
      float v14 = a2;
    }
    else {
      float v14 = (uint64_t *)*a2;
    }
    float v15 = +[NSString stringWithUTF8String:v14];
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v16 = [(NSArray *)v13 countByEnumeratingWithState:&v26 objects:v31 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v27;
      do
      {
        for (uint64_t i = 0; i != v16; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v27 != v17) {
            objc_enumerationMutation(v13);
          }
          int v19 = *(void **)(*((void *)&v26 + 1) + 8 * i);
          if (!objc_msgSend(objc_msgSend(v19, "pathExtension"), "compare:options:", v15, 1))
          {
            __int16 v20 = (char *)[v19 fileSystemRepresentation];
            *(void *)uint64_t buf = v20;
            unint64_t v21 = a3[1];
            if (v21 >= a3[2])
            {
              uint64_t v22 = sub_101763BAC(a3, (char **)buf);
            }
            else
            {
              sub_100134750((void *)a3[1], v20);
              uint64_t v22 = v21 + 24;
              a3[1] = v21 + 24;
            }
            a3[1] = v22;
          }
        }
        id v16 = [(NSArray *)v13 countByEnumeratingWithState:&v26 objects:v31 count:16];
      }
      while (v16);
    }
    int v23 = (long long *)a3[1];
    unint64_t v24 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v23 - *a3) >> 3));
    if (v23 == (long long *)*a3) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = v24;
    }
    sub_101763CB4(*a3, v23, (uint64_t)&v32, v25, 1);
  }
}

void sub_1019F0518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void **a41)
{
}

void sub_1019F0554(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1019F0860(id a1)
{
  qword_102489778 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLInternalServiceSilo"];
}

void sub_1019F0C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1019F0E30(id a1)
{
  qword_102489788 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___CLLocationInternalServiceProtocol];
  uint64_t v1 = objc_opt_class();
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  long long v7 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v1, v2, v3, v4, v5, v6, objc_opt_class(), 0);
  uint8x8_t v8 = (void *)qword_102489788;

  [v8 setClasses:v7 forSelector:"notifyPassKitPayment:transaction:info:" argumentIndex:2 ofReply:0];
}

void sub_1019F0F44(uint64_t a1)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10234CA70);
  }
  uint64_t v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 32);
    v4[0] = 68289282;
    v4[1] = 0;
    __int16 v5 = 2082;
    uint64_t v6 = "";
    __int16 v7 = 1026;
    int v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Spi, Connection interrupted for process\", \"process\":%{public}d}", (uint8_t *)v4, 0x18u);
  }
}

void sub_1019F1030(uint64_t a1)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10234CA70);
  }
  uint64_t v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 32);
    v4[0] = 68289282;
    v4[1] = 0;
    __int16 v5 = 2082;
    uint64_t v6 = "";
    __int16 v7 = 1026;
    int v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Spi, Connection invalidated for process\", \"process\":%{public}d}", (uint8_t *)v4, 0x18u);
  }
}

void sub_1019F1160(id a1)
{
  qword_102489798 = objc_alloc_init(CLIntersiloDelegate);
}

void sub_1019F11CC(id a1)
{
  qword_1024897A8 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"MIGResponseSilo"];
}

void sub_1019F1588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019F1954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019F1D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019F1D4C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v3 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    v3();
  }
  else
  {
    id v4 = [objc_alloc((Class)NSError) initWithDomain:@"com.apple.locationd.internalservice.errorDomain" code:0 userInfo:0];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_1019F2310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
  if (__p) {
    operator delete(__p);
  }
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019F2844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019F2D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019F31D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019F3BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019F4070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019F48DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,os_activity_scope_state_s state,char a50)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_1000064D0((uint64_t)&a50);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

id sub_1019F4968(uint64_t a1)
{
  id v1 = [+[NSXPCConnection currentConnection] valueForEntitlement:a1];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return [v2 BOOLValue];
}

void sub_1019F4E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,os_activity_scope_state_s state,char a23)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019F5114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1019F53C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1019F5858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019F5C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019F6380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,os_activity_scope_state_s state,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019F6564(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

void sub_1019F6BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, os_activity_scope_state_s state,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019F6DA0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

void sub_1019F7368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,os_activity_scope_state_s state,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019F7BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019F8240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019F8B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019F94F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1000064D0((uint64_t)&a41);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019F98D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019F9AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, uint64_t a12, uint64_t a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

void sub_1019F9DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_1000064D0((uint64_t)&a22);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019FA140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, os_activity_scope_state_s state,char a21)
{
  sub_1000064D0((uint64_t)&a21);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019FA548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,os_activity_scope_state_s state)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  sub_1000064D0(v49 - 256);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

uint64_t sub_1019FA5B8(uint64_t a1, int a2)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10234CA70);
  }
  id v4 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    __int16 v7 = 2082;
    int v8 = "";
    __int16 v9 = 1026;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#UsageWin, setting incidentalUseMode\", \"to\":%{public}d}", (uint8_t *)v6, 0x18u);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1019FB064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,os_activity_scope_state_s state,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

uint64_t sub_1019FB118(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1019FBAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,os_activity_scope_state_s state,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

uint64_t sub_1019FBB5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1019FC4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,os_activity_scope_state_s state,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

uint64_t sub_1019FC598(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1019FCF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,os_activity_scope_state_s state,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

uint64_t sub_1019FCFCC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1019FD3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,os_activity_scope_state_s state,char a26)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019FD428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = sub_1000D3D90(a3 - a2);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10234CA70);
  }
  __int16 v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(void **)(a1 + 32);
    if (v8) {
      [v8 currentToken];
    }
    else {
      memset(v10, 0, sizeof(v10));
    }
    sub_10001BEC0(v10, (uint64_t)buf);
    sub_1000372B8((uint64_t)buf, &v11);
    if (v30 < 0) {
      operator delete(__p);
    }
    if (v28 < 0) {
      operator delete(v27);
    }
    if (v26 < 0) {
      operator delete(v25);
    }
    if (v24 < 0) {
      operator delete(v23);
    }
    if (v22 < 0) {
      operator delete(*(void **)v19);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(*(void **)&v16[4]);
    }
    if ((v16[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    __int16 v9 = &v11;
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v9 = (std::string *)v11.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)uint64_t buf = 68290306;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v13 = 2082;
    float v14 = "";
    __int16 v15 = 2082;
    *(void *)id v16 = "elapsed";
    *(_WORD *)&v16[8] = 2050;
    *(void *)&v16[10] = a2;
    __int16 v17 = 2050;
    uint64_t v18 = a3;
    *(_WORD *)int v19 = 2050;
    *(double *)&v19[2] = v6;
    __int16 v20 = 2082;
    unint64_t v21 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Spi, triggered migration\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"clientName\":%{public, location:escape_only}s}", buf, 0x44u);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1019FD62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1019FD648(uint64_t a1)
{
  sub_1019DB7E0(qword_10248D888, 1);
  uint64_t v2 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1019FD6D8;
  void v4[3] = &unk_1022CEBF8;
  long long v5 = *(_OWORD *)(a1 + 40);
  return [v2 performMigrationWithReply:v4];
}

uint64_t sub_1019FD6D8(uint64_t a1)
{
  [*(id *)(a1 + 32) notifyMigrationPerformed];
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CLDaemonStartedNotification, 0, 0, 1u);
  int v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_1019FDA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_1000064D0((uint64_t)&a22);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019FDD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_1000064D0((uint64_t)&a22);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019FE18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, os_activity_scope_state_s state,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019FE4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_1000064D0((uint64_t)&a22);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019FF0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,os_activity_scope_state_s state,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  a39 = &a25;
  sub_10008DF5C((void ***)&a39);
  sub_1000064D0((uint64_t)&a63);
  sub_10013F3C4(&a32);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1019FF8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,os_activity_scope_state_s state,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Unwind_Resume(a1);
}

void sub_101A00470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if (STACK[0x6D0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x6D0]);
  }
  sub_1000064D0((uint64_t)&STACK[0x2C0]);
  _Block_object_dispose(&STACK[0x380], 8);
  os_activity_scope_leave((os_activity_scope_state_t)&STACK[0x450]);

  _Unwind_Resume(a1);
}

void sub_101A00550(uint64_t a1, int a2, uint64_t a3)
{
  (*(void (**)(void *__return_ptr, uint64_t))(a3 + 16))(v26, a3);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10234CA70);
  }
  long long v5 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
  {
    uint64_t buf = 68289795;
    __int16 v28 = 2082;
    long long v29 = "";
    __int16 v30 = 1026;
    *(_DWORD *)__n128 v31 = a2;
    *(_WORD *)&v31[4] = 1040;
    *(_DWORD *)&v31[6] = 156;
    __int16 v32 = 2097;
    uint64_t v33 = v26;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SPI getLocation #cclp\", \"gotLocation\":%{public}hhd, \"location\":%{private, location:CLClientLocation}.*P}", (uint8_t *)&buf, 0x28u);
  }
  if (a2 && *(double *)((char *)&v26[2] + 4) > 0.0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10234CA50);
    }
    double v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      sub_1000A7FBC(a1 + 48, (uint64_t)__p);
      __int16 v7 = v25 >= 0 ? __p : (void **)__p[0];
      uint64_t buf = 68289282;
      __int16 v28 = 2082;
      long long v29 = "";
      __int16 v30 = 2082;
      *(void *)__n128 v31 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"markReceivingLocationInformation\", \"Client\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
    }
    int v8 = *(void **)(a1 + 32);
    sub_100089AE0((char *)v10, (long long *)(a1 + 48));
    [v8 markReceivingLocationInformation:sub_1000376D4((long long *)v10)];
    if (v23 < 0) {
      operator delete(v22);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    if (v19 < 0) {
      operator delete(v18);
    }
    if (v17 < 0) {
      operator delete(v16);
    }
    if (v15 < 0) {
      operator delete(v14);
    }
    if (v13 < 0) {
      operator delete(v12);
    }
    if (v11 < 0) {
      operator delete(v10[0]);
    }
    +[NSData dataWithBytes:v26 length:156];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v9 = [objc_alloc((Class)NSError) initWithDomain:@"com.apple.locationd.internalservice.errorDomain" code:0 userInfo:0];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_101A00858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_101A00874(uint64_t a1, uint64_t a2)
{
  return sub_100089AE0((char *)(a1 + 48), (long long *)(a2 + 48));
}

uint64_t sub_101A00880(uint64_t a1)
{
  return sub_1000064D0(a1 + 48);
}

__n128 sub_101A00888(uint64_t a1, void *a2)
{
  if (a2)
  {
    [a2 clientLocation];
  }
  else
  {
    long long v12 = 0u;
    memset(v13, 0, 28);
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    long long v5 = 0u;
  }
  int v3 = *(_OWORD **)(*(void *)(a1 + 40) + 8);
  void v3[5] = v7;
  v3[10] = v12;
  v3[11] = v13[0];
  *(_OWORD *)((char *)v3 + 188) = *(_OWORD *)((char *)v13 + 12);
  v3[6] = v8;
  v3[7] = v9;
  v3[8] = v10;
  v3[9] = v11;
  v3[3] = v5;
  v3[4] = v6;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  return result;
}

void sub_101A010D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  if (STACK[0x640]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x640]);
  }
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&STACK[0x230], 8);
  sub_1000064D0((uint64_t)&STACK[0x2C0]);
  os_activity_scope_leave((os_activity_scope_state_t)&STACK[0x380]);

  _Unwind_Resume(a1);
}

void sub_101A011A0(uint64_t a1, uint64_t a2)
{
}

void sub_101A011B0(uint64_t a1)
{
}

void *sub_101A011BC(void *result, uint64_t a2, void *a3)
{
  *(void *)(*(void *)(result[4] + 8) + 4sub_1019DB7E0(qword_10248D888, 0) = a2;
  if (!a2) {
    return [a3 getBytes:*(void *)(result[5] + 8) + 48 length:156];
  }
  return result;
}

void sub_101A016A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101A01BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101A02094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101A028A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,os_activity_scope_state_s state)
{
  if (__p) {
    operator delete(__p);
  }
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101A02EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101A032F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

uint64_t sub_101A03334(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_101A036E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

uint64_t sub_101A03728(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_101A03ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

uint64_t sub_101A03B1C(uint64_t a1, void *a2)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10234CA70);
  }
  id v4 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134349056;
    id v8 = [a2 count];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "getOdometryBatchedLocationsWithReplyBlock received data count,%{public}lu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10234CA70);
    }
    [a2 count];
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLInternalService getOdometryBatchedLocationsWithReplyBlock:]_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_101A0563C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,os_activity_scope_state_s state)
{
  _Unwind_Resume(a1);
}

void sub_101A05700(uint64_t a1)
{
  uint64_t v9 = 0;
  if ([*(id *)(a1 + 32) removeItemAtPath:*(void *)(a1 + 40) error:&v9])
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10234CA70);
    }
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v15 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "getPipelinedCacheWithReply %@ deleted", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10234CA70);
      }
      uint64_t v4 = *(void *)(a1 + 40);
      int v10 = 138412290;
      uint64_t v11 = v4;
      long long v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLInternalService getPipelinedCacheWithReply:]_block_invoke", "%s\n");
LABEL_19:
      if (v5 != buf) {
        free(v5);
      }
    }
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10234CA70);
    }
    long long v6 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)uint64_t buf = 138412546;
      uint64_t v15 = v7;
      __int16 v16 = 2112;
      uint64_t v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "getPipelinedCacheWithReply removal of %@ FAILED with error %@", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10234CA70);
      }
      uint64_t v8 = *(void *)(a1 + 40);
      int v10 = 138412546;
      uint64_t v11 = v8;
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      long long v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLInternalService getPipelinedCacheWithReply:]_block_invoke", "%s\n");
      goto LABEL_19;
    }
  }
}

void sub_101A064C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,os_activity_scope_state_s state,char a60)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101A06DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,os_activity_scope_state_s state,char a50)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101A0768C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,os_activity_scope_state_s state,char a50)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101A078C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

void sub_101A078D4(uint64_t a1, int a2, uint64_t a3)
{
  if (a2)
  {
    id v4 = [objc_alloc((Class)NSData) initWithBytes:a3 length:320];
    long long v5 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    id v7 = v4;
  }
  else
  {
    id v6 = [objc_alloc((Class)NSError) initWithDomain:@"com.apple.locationd.internalservice.errorDomain" code:0 userInfo:0];
    long long v5 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    id v7 = v6;
  }
  v5();
}

void sub_101A07E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101A08AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_101A08FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state, os_activity_scope_state_s a14)
{
  os_activity_scope_leave(&state);
  os_activity_scope_leave(&a14);

  _Unwind_Resume(a1);
}

void sub_101A0934C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
}

void sub_101A09BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101A0A524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101A0A944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101A0B2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101A0B70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101A0B74C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10234CA70);
    }
    id v7 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134218240;
      uint64_t v13 = a3;
      __int16 v14 = 2048;
      uint64_t v15 = a4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "TimeSyncWithReplyBlock received TimeSync machTimestamp,%llu,oscarTimestamp,%llu", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10234CA70);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLInternalService getOscarTimeSyncWithReplyBlock:]_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10234CA70);
    }
    uint64_t v8 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "TimeSyncWithReplyBlock error getting TimeSync", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10234CA70);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLInternalService getOscarTimeSyncWithReplyBlock:]_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    id v9 = [objc_alloc((Class)NSError) initWithDomain:@"com.apple.locationd.internalservice.errorDomain" code:0 userInfo:0];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  _Block_release(*(const void **)(a1 + 40));
}

void sub_101A0BD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);

  _Unwind_Resume(a1);
}

void sub_101A0BEB4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

void sub_101A0C050(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

void sub_101A0C230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

void sub_101A0C260(uint64_t a1, void *a2)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10234CA70);
  }
  id v4 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 138477827;
    id v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Spi,copyNearbyAssetSettings,returning dict,%{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10234CA70);
    }
    long long v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLInternalService copyNearbyAssetSettings:]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_101A0C5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

void sub_101A0C618(uint64_t a1, void *a2)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10234CA70);
  }
  id v4 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 138477827;
    id v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Spi,copyNearbyAssetSettingsOfAccessoryFileWithReply,returning dict,%{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10234CA70);
    }
    long long v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLInternalService copyNearbyAssetSettingsOfAccessoryFile:withReply:]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_101A0C990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

void sub_101A0C9C0(uint64_t a1, void *a2, int a3, int a4)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10234CA70);
  }
  uint64_t v8 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 138478339;
    uint64_t v11 = a2;
    __int16 v12 = 1026;
    int v13 = a3;
    __int16 v14 = 1026;
    int v15 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Spi,copyRoutineAssetSettings,returning dict,%{private}@,compVersion,%{public}d,contVersion,%{public}d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10234CA70);
    }
    id v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLInternalService copyRoutineAssetSettings:]_block_invoke", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_101A0CD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

uint64_t sub_101A0CDA8(uint64_t a1, int a2)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10234CA70);
  }
  id v4 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    long long v5 = "disable";
    if (a2) {
      long long v5 = "enable";
    }
    *(_DWORD *)uint64_t buf = 136446210;
    id v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Spi,shouldDisplayEEDUI,returning %{public}s EED UI", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10234CA70);
    }
    id v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLInternalService shouldDisplayEEDUI:]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_101A0D310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

uint64_t sub_101A0D34C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10234CA70);
    }
    id v4 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 138477827;
      uint64_t v9 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Spi,getEEDCloakingKeyWithReply,returning error,%{private}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 == -1)
      {
LABEL_16:
        id v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "-[CLInternalService getEEDCloakingKeyWithReply:]_block_invoke", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
        return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
      }
LABEL_18:
      dispatch_once(&qword_102419520, &stru_10234CA70);
      goto LABEL_16;
    }
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10234CA70);
    }
    long long v5 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Spi,getEEDCloakingKeyWithReply,successfully returned cloaking key", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 == -1) {
        goto LABEL_16;
      }
      goto LABEL_18;
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_101A0D960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

uint64_t sub_101A0D99C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10234CA70);
    }
    id v4 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 138477827;
      uint64_t v9 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Spi,getEEDEmergencyContactNamesWithReply,returning error,%{private}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 == -1)
      {
LABEL_16:
        id v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "-[CLInternalService getEEDEmergencyContactNamesWithReply:]_block_invoke", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
        return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
      }
LABEL_18:
      dispatch_once(&qword_102419520, &stru_10234CA70);
      goto LABEL_16;
    }
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10234CA70);
    }
    long long v5 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Spi,getEEDEmergencyContactNamesWithReply,successfully returned emergency contact names", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 == -1) {
        goto LABEL_16;
      }
      goto LABEL_18;
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_101A0E054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101A0E280(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

void sub_101A0E4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

void sub_101A0E84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101A0EC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101A0F1F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101A0F240(uint64_t a1, char a2)
{
  if (a2)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10234CA70);
    }
    uint64_t v3 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "#Spi, Unable to send configuration to Oscar", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10234CA70);
      }
      long long v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLInternalService configure:replyBlock:]_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    id v4 = [objc_alloc((Class)NSError) initWithDomain:@"com.apple.locationd.internalservice.errorDomain" code:0 userInfo:0];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  _Block_release(*(const void **)(a1 + 32));
}

void sub_101A0F710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101A0F9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101A0FBA0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

void sub_101A10010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101A109A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101A10A4C(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_101A10A7C(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_101A10AAC(id a1)
{
  qword_102418FB8 = (uint64_t)os_log_create("com.apple.locationd.Position", "TrackRun");
}

void sub_101A10AE0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_101A10B60()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_101A10BF0(_Unwind_Exception *a1)
{
}

void sub_101A10C08()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101E542C0;
      v0[3] = unk_101E542D0;
      v0[4] = xmmword_101E542E0;
      v0[0] = xmmword_101E542A0;
      v0[1] = unk_101E542B0;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_101A10CE8(_Unwind_Exception *a1)
{
}

uint64_t sub_101A10D00(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_101A2EFFC((unsigned __int8 *)a1, a2);
  *(void *)uint64_t v3 = off_10234CAE0;
  uint64_t v4 = (uint64_t)(v3 + 256);
  sub_1011A11DC((uint64_t)(v3 + 256));
  *(_WORD *)(a1 + 344) = 0;
  BOOL v12 = 0;
  int v5 = sub_100601900(a1 + 112, "GyroCalibration", (uint64_t)"1475");
  uint64_t v6 = sub_1000D3E78();
  sub_10006B564(v6, buf);
  int v7 = sub_1000D2988(*(uint64_t *)buf, "SensorReplayMode", &v12) ^ 1;
  if (v12) {
    int v8 = v7;
  }
  else {
    int v8 = 1;
  }
  if (v14) {
    sub_1000DB0A0(v14);
  }
  if (sub_1005F7B0C(a1 + 112, "GyroCalibration", (const char **)&off_10234CC58, 0, v8))
  {
    sub_101A12CC4(v4);
    sub_101A10FE4(a1);
    sub_1011A1194(v4);
  }
  else if (v5)
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234CD78);
    }
    uint64_t v9 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Removing outliers from database.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234CD78);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLGyroCalibrationDatabaseLocal::CLGyroCalibrationDatabaseLocal(id<CLIntersiloUniverse>)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    sub_101A117C0(a1);
  }
  return a1;
}

void sub_101A10FA4(_Unwind_Exception *a1)
{
  sub_1011A11FC(v2);
  sub_1019E2510(v1);
  _Unwind_Resume(a1);
}

void sub_101A10FE4(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 288))
  {
    sub_10002B640(a1 + 112);
    sub_10010F274((uint64_t)buf);
    uint64_t v2 = sub_100132EFC(&v9, (uint64_t)"DELETE FROM ", 12);
    sub_100132EFC(v2, (uint64_t)"GyroCalibration", 15);
    std::stringbuf::str();
    if (v7 >= 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    sub_10014D518(a1 + 112, (uint64_t)v3);
  }
  if ((sub_1000A16E8() & 0x80000) != 0)
  {
    *(unsigned char *)(a1 + 344) = 1;
  }
  else
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234CD78);
    }
    uint64_t v4 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Attempting to write zero entries to Gyro database.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234CD78);
      }
      LOWORD(__p[0]) = 0;
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGyroCalibrationDatabaseLocal::writeCacheToDatabase()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    *(unsigned char *)(a1 + 344) = 0;
  }
}

void sub_101A116CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a32) {
    operator delete();
  }
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_101A117C0(uint64_t a1)
{
  if (*(int *)(a1 + 288) >= 1)
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234CD78);
    }
    uint64_t v2 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Reading database into non-empty cache.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234CD78);
      }
      *(_WORD *)char v26 = 0;
      char v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGyroCalibrationDatabaseLocal::cacheAllEntries(CLGyroCalibrationCache &)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
  }
  sub_10010F274((uint64_t)buf);
  uint64_t v3 = sub_100132EFC(&v25, (uint64_t)"SELECT ", 7);
  uint64_t v4 = sub_100132EFC(v3, (uint64_t)"Temperature", 11);
  int v5 = sub_100132EFC(v4, (uint64_t)", ", 2);
  uint64_t v6 = sub_100132EFC(v5, (uint64_t)"Time", 4);
  char v7 = sub_100132EFC(v6, (uint64_t)", ", 2);
  int v8 = sub_100132EFC(v7, (uint64_t)"BiasX", 5);
  uint64_t v9 = sub_100132EFC(v8, (uint64_t)", ", 2);
  int v10 = sub_100132EFC(v9, (uint64_t)"BiasY", 5);
  uint64_t v11 = sub_100132EFC(v10, (uint64_t)", ", 2);
  BOOL v12 = sub_100132EFC(v11, (uint64_t)"BiasZ", 5);
  int v13 = sub_100132EFC(v12, (uint64_t)" FROM ", 6);
  __int16 v14 = sub_100132EFC(v13, (uint64_t)"GyroCalibration", 15);
  int v15 = sub_100132EFC(v14, (uint64_t)" WHERE ", 7);
  __int16 v16 = sub_100132EFC(v15, (uint64_t)"Temperature", 11);
  uint64_t v17 = sub_100132EFC(v16, (uint64_t)">=? AND ", 8);
  uint64_t v18 = sub_100132EFC(v17, (uint64_t)"Temperature", 11);
  char v19 = sub_100132EFC(v18, (uint64_t)"<=? ORDER BY ", 13);
  __int16 v20 = sub_100132EFC(v19, (uint64_t)"Temperature", 11);
  char v21 = sub_100132EFC(v20, (uint64_t)",", 1);
  sub_100132EFC(v21, (uint64_t)"Time", 4);
  std::stringbuf::str();
  if (v27 >= 0) {
    char v22 = v26;
  }
  else {
    char v22 = *(uint8_t **)v26;
  }
  sub_10014D518(a1 + 112, (uint64_t)v22);
}

void sub_101A11EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101A11F3C(uint64_t a1, float32x2_t *a2, double a3, int32x4_t a4)
{
  float v4 = *(float *)&a3;
  if (!*(unsigned char *)(a1 + 344))
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234CD78);
    }
    char v7 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Insert into uncached database.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234CD78);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGyroCalibrationDatabaseLocal::insert(const CLMotionTypeRotationRate &, const CLMotionTypeVector3 &, float, CFAbsoluteTime)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  if (fabsf(a2->f32[0]) > 75.0) {
    return 0;
  }
  if (fabsf(a2->f32[1]) > 75.0) {
    return 0;
  }
  a4.i32[0] = 1117126656;
  if (fabsf(a2[1].f32[0]) > 75.0) {
    return 0;
  }
  *(float *)&a3 = v4;
  sub_1011A1248(a1 + 256, a2, a3, a4);
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10234CD78);
  }
  uint64_t v9 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEFAULT))
  {
    double v10 = a2->f32[0];
    double v11 = a2->f32[1];
    double v12 = a2[1].f32[0];
    *(_DWORD *)uint64_t buf = 134349824;
    double v16 = v10;
    __int16 v17 = 2050;
    double v18 = v11;
    __int16 v19 = 2050;
    double v20 = v12;
    __int16 v21 = 2050;
    double v22 = v4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLGyroCalibrationDatabaseLocal insert x,%{public}f,y,%{public}f,z,%{public}f,temperature,%{public}f", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234CD78);
    }
    __int16 v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyroCalibrationDatabaseLocal::insert(const CLMotionTypeRotationRate &, float)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  if (*(unsigned char *)(a1 + 345)) {
    sub_101A10FE4(a1);
  }
  sub_101A1230C(a1);
  return 1;
}

uint64_t sub_101A1230C(uint64_t a1)
{
  int v4 = 1;
  unint64_t v5 = 0xFFEFFFFFFFFFFFFFLL;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t result = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 216))(a1, &v4);
  if (result)
  {
    int v3 = 0;
    return (*(uint64_t (**)(uint64_t, int *, int *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v3, &v4, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

BOOL sub_101A123E8(uint64_t a1, _DWORD *a2)
{
  if (!*(unsigned char *)(a1 + 344)) {
    sub_101A117C0(a1);
  }
  uint64_t v2 = a1 + 256;

  return sub_1011A1560(v2, a2);
}

uint64_t sub_101A12438(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 344)) {
    *(unsigned char *)(a1 + 344) = 1;
  }
  sub_1011A1194(a1 + 256);
  return 1;
}

uint64_t sub_101A12468(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 344)) {
    sub_101A117C0(a1);
  }
  uint64_t v1 = a1 + 256;

  return sub_10026DE08(v1);
}

uint64_t sub_101A124B0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 344)) {
    sub_101A10FE4(a1);
  }

  return sub_1005D7534(a1);
}

uint64_t sub_101A124F4(uint64_t a1)
{
  *(unsigned char *)(a1 + 345) = 1;
  if (!*(unsigned char *)(a1 + 344)) {
    sub_101A117C0(a1);
  }
  return a1;
}

uint64_t sub_101A12510(uint64_t a1, _DWORD *a2)
{
  if (!*a2)
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234CD78);
    }
    int v3 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Client registered, caching database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234CD78);
      }
      unint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGyroCalibrationDatabaseLocal::registerForNotificationInternal(const CLGyroCalibrationDatabase_Type::Notification &)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    if (!*(unsigned char *)(a1 + 344)) {
      sub_101A117C0(a1);
    }
  }
  return 1;
}

uint64_t sub_101A126C4(uint64_t a1, _DWORD *a2)
{
  if (!*a2)
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234CD78);
    }
    int v3 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "No more clients, flushing cache to database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234CD78);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGyroCalibrationDatabaseLocal::unregisterForNotificationInternal(const CLGyroCalibrationDatabase_Type::Notification &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    if (!*(unsigned char *)(a1 + 344))
    {
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234CD78);
      }
      int v4 = off_1024190B8;
      if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Database should be cached", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190B0 != -1) {
          dispatch_once(&qword_1024190B0, &stru_10234CD78);
        }
        char v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGyroCalibrationDatabaseLocal::unregisterForNotificationInternal(const CLGyroCalibrationDatabase_Type::Notification &)", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      sub_101A10FE4(a1);
      sub_1011A1194(a1 + 256);
      *(unsigned char *)(a1 + 344) = 0;
    }
  }
  return 1;
}

uint64_t sub_101A129A8(uint64_t a1)
{
  *(void *)(a1 + 16) = v3;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return a1;
}

uint64_t sub_101A12AE0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (!result) {
    operator new();
  }
  return result;
}

void *sub_101A12B68(void *a1)
{
  uint64_t v2 = (void *)a1[2];
  uint64_t v3 = a1[3] + 12;
  a1[3] = v3;
  if (v3 - *v2 == 4092)
  {
    a1[2] = v2 + 1;
    uint64_t v3 = v2[1];
    a1[3] = v3;
  }
  int v4 = (void *)*a1;
  uint64_t v5 = *(void *)(*a1 + 48);
  if (*(void *)(*a1 + 56) == v5)
  {
    unint64_t v7 = 0;
  }
  else
  {
    unint64_t v6 = v4[10] + v4[9];
    unint64_t v7 = *(void *)(v5 + 8 * (v6 / 0x155)) + 12 * (v6 % 0x155);
  }
  if (v3 == v7)
  {
    int v8 = (void *)v4[1];
    if (v8)
    {
      do
      {
        uint64_t v9 = v8;
        int v8 = (void *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        uint64_t v9 = (void *)v4[2];
        BOOL v10 = *v9 == (void)v4;
        int v4 = v9;
      }
      while (!v10);
    }
    *a1 = v9;
    if (v9 != (void *)a1[1])
    {
      unint64_t v11 = v9[9];
      uint64_t v12 = v9[6];
      uint64_t v13 = (void *)(v12 + 8 * (v11 / 0x155));
      if (v9[7] == v12) {
        unint64_t v14 = 0;
      }
      else {
        unint64_t v14 = *v13 + 12 * (v11 % 0x155);
      }
      a1[2] = v13;
      a1[3] = v14;
    }
  }
  uint64_t v15 = a1[4];
  a1[4] = 0;
  if (v15) {
    operator delete();
  }
  return a1;
}

void sub_101A12CC4(uint64_t a1)
{
  int v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_10096239C((void **)&v8);
  int v4 = v8;
  uint64_t v5 = v9;
  if (v8 != v9)
  {
    do
    {
      int v7 = *v4;
      unint64_t v6 = (float32x2_t *)(v4 + 1);
      LODWORD(v2) = v7;
      sub_1011A1248(a1, v6, v2, v3);
      int v4 = (_DWORD *)&v6[1] + 1;
    }
    while (v4 != v5);
    int v4 = v8;
  }
  if (v4)
  {
    uint64_t v9 = v4;
    operator delete(v4);
  }
}

void sub_101A12D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101A12D60(uint64_t a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4, char a5)
{
  if ((a5 & 1) == 0) {
    operator new();
  }
  uint64_t v8 = a1 + 256;
  if (!sub_1011A1560(a1 + 256, v17)) {
    return 0;
  }
  *a3 = v18;
  a3[1].f32[0] = v19;
  HIDWORD(v9) = v18.i32[1];
  __asm { FMOV            V2.2S, #25.0 }
  *a2 = vmla_f32(v20, _D2, v18);
  *(float *)&double v9 = v21 + (float)(v19 * 25.0);
  a2[1].i32[0] = LODWORD(v9);
  return sub_1011A2974(v8, a4, v9);
}

void sub_101A12E98()
{
}

uint64_t sub_101A12ED0(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_1011A11FC(result);
    operator delete();
  }
  return result;
}

uint64_t sub_101A12F20(uint64_t a1)
{
  uint64_t v1 = a1 + 256;
  sub_1011A2284(a1 + 256, &v13);
  sub_1011A2304(v1, v11);
  uint64_t v2 = 0x80000000;
  while (v13 != v11[0] || v14 != v11[1] || v13 != v14 && v15 != v11[3])
  {
    int32x4_t v3 = (float *)sub_101A12AE0((uint64_t)&v13);
    float v4 = modff(fabsf(v3[1] * 256.0), &v17);
    float v5 = modff(fabsf(v3[2] * 256.0), &v17);
    float v6 = modff(fabsf(v3[3] * 256.0), &v17);
    if (v4 >= 0.001 && v4 <= 0.999 || v5 >= 0.001 && v5 <= 0.999 || v6 >= 0.001 && v6 <= 0.999)
    {
      int v7 = (int)*(float *)sub_101A12AE0((uint64_t)&v13);
      if ((int)v2 <= v7) {
        uint64_t v2 = v7;
      }
      else {
        uint64_t v2 = v2;
      }
    }
    sub_101A12B68(&v13);
  }
  uint64_t v8 = v12;
  uint64_t v12 = 0;
  if (v8) {
    operator delete();
  }
  uint64_t v9 = v16;
  uint64_t v16 = 0;
  if (v9) {
    operator delete();
  }
  return v2;
}

void sub_101A130BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101A13114(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101A131AC;
  block[3] = &unk_10229FED8;
  void block[4] = a1;
  if (qword_10248A0D8 != -1) {
    dispatch_once(&qword_10248A0D8, block);
  }
  return qword_10248A0D0;
}

void sub_101A131AC()
{
  uint64_t v0 = sub_1000D3E78();
  sub_10006B564(v0, &v10);
  BOOL v9 = 0;
  char v1 = sub_1000D2988(v10, "EnableGyroLinearCalibration", &v9);
  BOOL v8 = 0;
  sub_100103240();
  int v2 = sub_10073E258();
  if ((sub_1000D2988(v10, "EnableGyroNonlinearCalibration", &v8) & 1) == 0) {
    BOOL v8 = v2 ^ 1;
  }
  BOOL v7 = 0;
  if ((sub_1000D2988(v10, "EnableGyroMultiRunCalibration", &v7) & 1) == 0) {
    BOOL v7 = v2 ^ 1;
  }
  unsigned int v3 = sub_1000A16E8();
  unsigned int v4 = v3;
  if ((v1 & 1) == 0) {
    BOOL v9 = BYTE2(v3) & 1 & ~(_BYTE)v2;
  }
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10234CD78);
  }
  float v5 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67241472;
    int v24 = v2;
    __int16 v25 = 1026;
    BOOL v26 = v8;
    __int16 v27 = 1026;
    BOOL v28 = v9;
    __int16 v29 = 1026;
    BOOL v30 = v7;
    __int16 v31 = 1026;
    int v32 = (v4 >> 17) & 1;
    __int16 v33 = 1026;
    int v34 = (v4 >> 14) & 1;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Creating GyroCalibrationDatabaseLocal with isNonUI,%{public}u, enableGyroNonlinearCalibration,%{public}u, enableGyroLinearCalibration,%{public}u,enableGyroMultiRunCalibration,%{public}u, gyroNonlinearity,%{public}u, gyroMultiRunCalibration,%{public}u", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234CD78);
    }
    int v11 = 67241472;
    int v12 = v2;
    __int16 v13 = 1026;
    BOOL v14 = v8;
    __int16 v15 = 1026;
    BOOL v16 = v9;
    __int16 v17 = 1026;
    BOOL v18 = v7;
    __int16 v19 = 1026;
    int v20 = (v4 >> 17) & 1;
    __int16 v21 = 1026;
    int v22 = (v4 >> 14) & 1;
    float v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static CLGyroCalibrationDatabase *CLGyroCalibrationDatabase::createInUniverse(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if ((v4 & 0x20000) != 0 && v8) {
    operator new();
  }
  if (v9) {
    operator new();
  }
  if ((v4 & 0x4000) != 0 && v7) {
    operator new();
  }
  operator new();
}

void sub_101A13558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_101A135E8(void *a1)
{
  sub_101A13668(a1);

  operator delete();
}

uint64_t sub_101A13620()
{
  return 0;
}

uint64_t sub_101A13628()
{
  return 0;
}

uint64_t sub_101A13630()
{
  return 0;
}

void sub_101A13638(id a1)
{
  off_1024190B8 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

uint64_t sub_101A13668(void *a1)
{
  *a1 = off_10234CAE0;
  sub_1011A11FC((uint64_t)(a1 + 32));
  *a1 = off_10234D708;
  sub_1005F5850(a1 + 14);

  return sub_1005D7428(a1);
}

void sub_101A13E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_101A13E6C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  int v2 = *(void **)(a1 + 32);
  if (v2)
  {
    [v2 getStartLocation];
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)((char *)a2 + 14sub_1019DB7E0(qword_10248D888, 0) = 0u;
    a2[7] = 0u;
    a2[8] = 0u;
    a2[5] = 0u;
    a2[6] = 0u;
    a2[3] = 0u;
    a2[4] = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
  }
  return result;
}

void sub_101A14674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  std::__shared_weak_count::~__shared_weak_count(v44);
  operator delete(v46);
  sub_100997A28((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_101A1485C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_101A153B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  a24 = &a19;
  sub_1000A7B4C((void ***)&a24);
  _Unwind_Resume(a1);
}

void sub_101A15B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_101A161D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_101A16BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_101A16D18(id a1)
{
  qword_102419198 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void sub_101A16D48(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10234CDF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101A16D68(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10234CDF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_101A16DBC(uint64_t a1)
{
  return sub_1016F7F90(a1 + 24);
}

uint64_t sub_101A16DC8()
{
  sub_100134750(qword_1024897B8, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024897B8, (void *)&_mh_execute_header);
}

void sub_101A17010()
{
}

id sub_101A17034(uint64_t a1, void *a2)
{
  return _[a2 onFaceCovered:a1];
}

void sub_101A17328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_101A1775C(id a1)
{
  qword_1024191E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void *sub_101A1778C(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_10234BF80;
  id v9 = a5;
  *a1 = off_10234CE60;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  int v14[2] = 0x2020000000;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_101A17914;
  aBlock[3] = &unk_1022B6BE8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  _OWORD v12[2] = sub_101A17928;
  void v12[3] = &unk_1022B6C10;
  void v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_101A178EC(_Unwind_Exception *a1)
{
  sub_1019D78CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101A17914(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_101A17928(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_101A17944(uint64_t a1)
{
  sub_101A17C2C(a1);

  operator delete();
}

id sub_101A1797C(void *a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0x18) {
    size_t v8 = 24;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x19)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10234CE88);
    }
    id v9 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 136315906;
      unint64_t v31 = (unint64_t)"N23CLWaterSubmersion_Types11FaceCoveredE" & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v32 = 2048;
      uint64_t v33 = 24;
      __int16 v34 = 2048;
      unint64_t v35 = a4;
      __int16 v36 = 1024;
      int v37 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234CE88);
      }
      int v22 = 136315906;
      unint64_t v23 = (unint64_t)"N23CLWaterSubmersion_Types11FaceCoveredE" & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v24 = 2048;
      uint64_t v25 = 24;
      __int16 v26 = 2048;
      unint64_t v27 = a4;
      __int16 v28 = 1024;
      int v29 = a2;
      char v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLWaterSubmersion_Types::FaceCovered>::dispatchData(int, const void *, size_t) [T = CLWaterSubmersion_Types::FaceCovered]", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  __int16 v13 = (void *)a1[4];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_101A17CA8;
  v16[3] = &unk_1022EE9C0;
  void v16[4] = v12;
  v16[5] = v11;
  long long v17 = __dst;
  uint64_t v18 = v21;
  uint64_t v19 = v10;
  return [v13 async:v16];
}

uint64_t sub_101A17C2C(uint64_t a1)
{
  *(void *)a1 = off_10234CE60;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1019D78CC(a1);
}

uint64_t sub_101A17CA8(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1[4] + 16))();
  if (result)
  {
    unsigned int v3 = (uint64_t (*)(void *, uint64_t))a1[5];
    uint64_t v4 = a1[9];
    return v3(a1 + 6, v4);
  }
  return result;
}

void sub_101A17D04(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_101A17D34()
{
  sub_100134750(qword_1024897D0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024897D0, (void *)&_mh_execute_header);
}

id sub_101A18144(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onElevationmetryNotification:a2 data:a3];
}

void sub_101A182B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_101A183B8(id a1)
{
  qword_102419198 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

id sub_101A186A0(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) setIsCyclingWorkout:a2];
}

id sub_101A189C0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onFitnessMachineNotification:a2 data:a3];
}

void sub_101A18CC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_101A18E84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_101A190B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_101A1926C(id a1)
{
  qword_102419198 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void sub_101A19750()
{
  if (*(char *)(v0 + 47) < 0) {
    operator delete(*v1);
  }
  operator delete[]();
}

id sub_101A197D4(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 onAccessoryDeviceMotionData:a1 buffersize:a2];
}

id sub_101A197E8(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 onAccessoryDeviceMotionConfig:a1 buffersize:a2];
}

void sub_101A19F24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_101A1A0E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_101A1A418(id a1)
{
  qword_102419198 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void sub_101A1A448(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = off_10234BF80;
  *a1 = off_10234CF18;
  a1[1] = 0;
  id v8 = a2;
  a1[5] = 0;
  a1[2] = v8;
  a1[3] = a3;
  a1[4] = a5;
  a1[6] = 0;
  operator new[]();
}

void sub_101A1A604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  sub_1019D78CC(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_101A1A62C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_101A1A640(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_101A1A65C(uint64_t a1)
{
  sub_101A1A7C4(a1);

  operator delete();
}

__n128 sub_101A1A694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = (_OWORD *)(*(void *)(a1 + 56) + 144 * *(unsigned int *)(a1 + 64));
  long long v4 = *(_OWORD *)(a3 + 64);
  long long v6 = *(_OWORD *)(a3 + 16);
  long long v5 = *(_OWORD *)(a3 + 32);
  v3[3] = *(_OWORD *)(a3 + 48);
  v3[4] = v4;
  v3[1] = v6;
  v3[2] = v5;
  long long v7 = *(_OWORD *)(a3 + 128);
  long long v9 = *(_OWORD *)(a3 + 80);
  long long v8 = *(_OWORD *)(a3 + 96);
  v3[7] = *(_OWORD *)(a3 + 112);
  v3[8] = v7;
  void v3[5] = v9;
  v3[6] = v8;
  __n128 result = *(__n128 *)a3;
  _OWORD *v3 = *(_OWORD *)a3;
  unsigned int v11 = *(_DWORD *)(a1 + 68);
  unsigned int v12 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v12;
  if (v12 >= v11)
  {
    uint64_t v14 = *(void *)(a1 + 24);
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v16 = *(void *)(a1 + 56);
    long long v17 = *(void **)(a1 + 16);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_101A1A85C;
    v18[3] = &unk_1022CCC40;
    v18[4] = v15;
    _DWORD v18[5] = v14;
    unsigned int v19 = v12;
    v18[6] = v16;
    v18[7] = v13;
    [v17 async:v18];
    operator new[]();
  }
  return result;
}

uint64_t sub_101A1A7BC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 68);
}

uint64_t sub_101A1A7C4(uint64_t a1)
{
  *(void *)a1 = off_10234CF18;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  if (*(void *)(a1 + 56)) {
    operator delete[]();
  }

  return sub_1019D78CC(a1);
}

uint64_t sub_101A1A85C(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16))()) {
    (*(void (**)(void, void, void))(a1 + 40))(*(void *)(a1 + 48), *(unsigned int *)(a1 + 64), *(void *)(a1 + 56));
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    operator delete[]();
  }
  return result;
}

uint64_t sub_101A1A8D4(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_101A1A918(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_101A1A92C(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_101A1A948(uint64_t a1)
{
  sub_101A1AB54(a1);

  operator delete();
}

__n128 sub_101A1A980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = (_OWORD *)(*(void *)(a1 + 56) + 96 * *(unsigned int *)(a1 + 64));
  long long v4 = *(_OWORD *)(a3 + 80);
  long long v6 = *(_OWORD *)(a3 + 32);
  long long v5 = *(_OWORD *)(a3 + 48);
  v3[4] = *(_OWORD *)(a3 + 64);
  void v3[5] = v4;
  v3[2] = v6;
  v3[3] = v5;
  __n128 result = *(__n128 *)a3;
  long long v8 = *(_OWORD *)(a3 + 16);
  _OWORD *v3 = *(_OWORD *)a3;
  v3[1] = v8;
  unsigned int v9 = *(_DWORD *)(a1 + 68);
  unsigned int v10 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v10;
  if (v10 >= v9)
  {
    uint64_t v12 = *(void *)(a1 + 24);
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 48);
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v15 = *(void **)(a1 + 16);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_101A1AC44;
    v16[3] = &unk_1022CCC40;
    void v16[4] = v13;
    v16[5] = v12;
    unsigned int v17 = v10;
    void v16[6] = v14;
    v16[7] = v11;
    [v15 async:v16];
    operator new[]();
  }
  return result;
}

void sub_101A1AAF4()
{
  if (*(char *)(v0 + v1 + 47) < 0) {
    operator delete(*(void **)(v0 + v1 + 24));
  }
  for (; v1; v1 -= 96)
    sub_101A1A8D4(v0 - 80 + v1);
  operator delete[]();
}

uint64_t sub_101A1AB4C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 68);
}

uint64_t sub_101A1AB54(uint64_t a1)
{
  *(void *)a1 = off_10234CF50;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 - 8);
    if (v3)
    {
      uint64_t v4 = 96 * v3;
      do
      {
        uint64_t v5 = v2 + v4;
        if (*(char *)(v2 + v4 - 41) < 0) {
          operator delete(*(void **)(v5 - 64));
        }
        if (*(char *)(v5 - 65) < 0) {
          operator delete(*(void **)(v2 + v4 - 88));
        }
        v4 -= 96;
      }
      while (v4);
    }
    operator delete[]();
  }

  return sub_1019D78CC(a1);
}

uint64_t sub_101A1AC44(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (result) {
    uint64_t result = (*(uint64_t (**)(void, void, void))(a1 + 40))(*(void *)(a1 + 48), *(unsigned int *)(a1 + 64), *(void *)(a1 + 56));
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 - 8);
    if (v4)
    {
      uint64_t v5 = 96 * v4;
      do
      {
        uint64_t v6 = v3 + v5;
        if (*(char *)(v3 + v5 - 41) < 0) {
          operator delete(*(void **)(v6 - 64));
        }
        if (*(char *)(v6 - 65) < 0) {
          operator delete(*(void **)(v3 + v5 - 88));
        }
        v5 -= 96;
      }
      while (v5);
    }
    operator delete[]();
  }
  return result;
}

uint64_t sub_101A1AD10(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_101A2EFFC((unsigned __int8 *)a1, a2);
  *(void *)uint64_t v3 = off_10234CFA0;
  *(_DWORD *)(v3 + 254) = 0;
  *(void *)(a1 + 264) = [*((id *)v3 + 5) newTimer];
  *(void *)(a1 + 272) = [*(id *)(a1 + 40) newTimer];
  *(_OWORD *)(a1 + 28sub_1019DB7E0(qword_10248D888, 0) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  uint64_t v4 = operator new(0x20uLL);
  v4[1] = 0;
  _DWORD v4[2] = 0;
  void *v4 = off_10234D310;
  void v4[3] = &off_1022F3588;
  *(void *)(a1 + 312) = v4 + 3;
  *(void *)(a1 + 32sub_1019DB7E0(qword_10248D888, 0) = v4;
  *(void *)uint64_t v25 = 0x40CC200000000000;
  sub_101A1F180((unsigned __int8 *)(a1 + 328), "GyroNonlinearTargetExpirationAge", v25, 0);
  *(void *)uint64_t v25 = 0x411FA40000000000;
  sub_101A1F180((unsigned __int8 *)(a1 + 352), "GyroNonlinearMaxExpirationAge", v25, 0);
  *(void *)uint64_t v25 = 0x410FA40000000000;
  sub_101A1F180((unsigned __int8 *)(a1 + 376), "GyroNonlinearFactoryDataAge", v25, 0);
  *(void *)uint64_t v25 = 0x4082C00000000000;
  sub_101A1F180((unsigned __int8 *)(a1 + 400), "GyroNonlinearFlushTimeout", v25, 0);
  *(void *)uint64_t v25 = 0x405E000000000000;
  sub_101A1F180((unsigned __int8 *)(a1 + 424), "GyroNonlinearFirstPruneTimeout", v25, 0);
  *(void *)uint64_t v25 = 0x40AC200000000000;
  sub_101A1F180((unsigned __int8 *)(a1 + 448), "GyroNonlinearPruneTimeout", v25, 0);
  v25[0] = 0;
  sub_10006ACBC((unsigned __int8 *)(a1 + 472), "LogGyroNonFactoryCalOnStartup", v25, 0);
  *(void *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 48sub_1019DB7E0(qword_10248D888, 0) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(void *)(a1 + 52sub_1019DB7E0(qword_10248D888, 0) = 0x8000007F7FFFFFLL;
  *(void *)(a1 + 528) = 0;
  sub_100F03BA0((void *)(a1 + 536), 0, 0);
  sub_100103240();
  *(unsigned char *)(a1 + 255) = sub_10074372C();
  uint64_t v5 = sub_1000D3E78();
  sub_10006B564(v5, v25);
  sub_1000D2988(*(uint64_t *)v25, "EnableGyroFitRMSError", (BOOL *)(a1 + 255));
  if (*(void *)&v25[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&v25[8]);
  }
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_101A1BBCC;
  v19[3] = &unk_1022A3020;
  void v19[4] = a1;
  [*(id *)(a1 + 264) setHandler:v19];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_101A1CAA8;
  v18[3] = &unk_1022A3020;
  v18[4] = a1;
  [*(id *)(a1 + 272) setHandler:v18];
  sub_1019E5C34(a1 + 112);
  if (sub_1005F93E4(a1 + 112, "GyroNonlinearCalibration"))
  {
    if (!sub_1005F93E4(a1 + 112, "GyroPointCalibration"))
    {
      sub_10002B640(a1 + 112);
      sub_10010F274((uint64_t)v25);
      uint64_t v6 = sub_100132EFC(&v25[16], (uint64_t)"ALTER TABLE GyroNonlinearCalibration", 36);
      long long v7 = sub_100132EFC(v6, (uint64_t)" RENAME TO ", 11);
      long long v8 = sub_100132EFC(v7, (uint64_t)"GyroPointCalibration", 20);
      sub_100132EFC(v8, (uint64_t)";", 1);
      std::stringbuf::str();
      if ((SBYTE7(v21) & 0x80u) == 0) {
        unsigned int v9 = __p;
      }
      else {
        unsigned int v9 = (void **)__p[0];
      }
      sub_10014D518(a1 + 112, (uint64_t)v9);
    }
    sub_100603138(a1 + 112, "GyroNonlinearCalibration");
  }
  *(_OWORD *)std::string __p = *(_OWORD *)off_10234D0F0;
  long long v21 = *(_OWORD *)off_10234D100;
  long long v22 = *(_OWORD *)off_10234D110;
  uint64_t v23 = 0;
  if (!sub_1005F7B0C(a1 + 112, "GyroPointCalibration", (const char **)&off_10234D140, 0, 1))
  {
    *(void *)(a1 + 536) = sub_10060343C(a1 + 112, "GyroPointCalibration", (const char **)__p, 0);
    *(void *)(a1 + 544) = v12;
    if (sub_1005F93E4(a1 + 112, "GyroPointCalibration"))
    {
      memset(v25, 0, 24);
      sub_101A1DD1C(a1);
    }
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234D2C0);
    }
    uint64_t v14 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t v25 = 68289539;
      *(_DWORD *)&void v25[4] = 0;
      *(_WORD *)&v25[8] = 2082;
      *(void *)&v25[10] = "";
      *(_WORD *)&v25[18] = 2082;
      *(void *)&v25[20] = "assert";
      *(_WORD *)&v25[28] = 2081;
      *(void *)&v25[30] = "fDb.tableExists(\"GyroPointCalibration\")";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"db doesn't exist\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v25, 0x26u);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234D2C0);
      }
    }
    uint64_t v15 = off_1024190B8;
    if (os_signpost_enabled((os_log_t)off_1024190B8))
    {
      *(_DWORD *)uint64_t v25 = 68289539;
      *(_DWORD *)&void v25[4] = 0;
      *(_WORD *)&v25[8] = 2082;
      *(void *)&v25[10] = "";
      *(_WORD *)&v25[18] = 2082;
      *(void *)&v25[20] = "assert";
      *(_WORD *)&v25[28] = 2081;
      *(void *)&v25[30] = "fDb.tableExists(\"GyroPointCalibration\")";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "db doesn't exist", "{\"msg%{public}.0s\":\"db doesn't exist\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v25, 0x26u);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234D2C0);
      }
    }
    uint64_t v16 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t v25 = 68289539;
      *(_DWORD *)&void v25[4] = 0;
      *(_WORD *)&v25[8] = 2082;
      *(void *)&v25[10] = "";
      *(_WORD *)&v25[18] = 2082;
      *(void *)&v25[20] = "assert";
      *(_WORD *)&v25[28] = 2081;
      *(void *)&v25[30] = "fDb.tableExists(\"GyroPointCalibration\")";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"db doesn't exist\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v25, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  *(void *)(a1 + 536) = sub_10060343C(a1 + 112, "GyroPointCalibration", (const char **)__p, 0);
  *(void *)(a1 + 544) = v10;
  sub_101A1D3F0(a1);
  *(unsigned char *)(a1 + 254) = 1;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v26 = 0u;
  memset(v25, 0, sizeof(v25));
  v25[0] = 1;
  *(_DWORD *)uint64_t buf = 1;
  (*(void (**)(uint64_t, uint8_t *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, buf, v25, 1, 0xFFFFFFFFLL, 0);
  *(unsigned char *)(a1 + 257) = 1;
  id v11 = [*(id *)(a1 + 40) newTimer];
  *(void *)(a1 + 48sub_1019DB7E0(qword_10248D888, 0) = v11;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_101A1D66C;
  v17[3] = &unk_1022A3020;
  void v17[4] = a1;
  [v11 setHandler:v17];
  [*(id *)(a1 + 480) setNextFireDelay:1800.0];
  [*(id *)(a1 + 272) setNextFireDelay:*(double *)(a1 + 432)];
  return a1;
}

void sub_101A1BA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  if (v48) {
    (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
  }
  uint64_t v50 = *v47;
  if (*v47)
  {
    v45[63] = v50;
    operator delete(v50);
  }
  uint64_t v51 = v45[61];
  v45[61] = 0;
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
  }
  uint64_t v52 = (std::__shared_weak_count *)v45[40];
  if (v52) {
    sub_1000DB0A0(v52);
  }
  __n128 v53 = *v46;
  if (*v46)
  {
    v45[37] = v53;
    operator delete(v53);
  }
  sub_1019E2510(v45);
  _Unwind_Resume(a1);
}

uint64_t sub_101A1BBCC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_101A1BC38(v1);
  (*(void (**)(uint64_t))(*(void *)v1 + 304))(v1);

  return sub_101A1C9D8(v1);
}

void sub_101A1BC38(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  double v3 = *(double *)(a1 + 528);
  unint64_t v4 = vcvtps_u32_f32((float)(*(float *)(a1 + 524) - *(float *)(a1 + 520)) * 0.5);
  buf.__r_.__value_.__r.__words[0] = 0;
  sub_1001F3CF0(&__p, v4, &buf);
  uint64_t v5 = *(float **)(a1 + 288);
  uint64_t v6 = *(float **)(a1 + 296);
  if (v5 != v6)
  {
    float v7 = *(float *)(a1 + 520);
    long long v8 = __p;
    do
    {
      uint64_t v9 = (int)(float)((float)(*v5 - v7) * 0.5);
      if ((v9 & 0x80000000) == 0 && v4 > v9) {
        ++v8[v9];
      }
      v5 += 8;
    }
    while (v5 != v6);
  }
  buf.__r_.__value_.__r.__words[0] = 0;
  sub_1001F3CF0(&v88, v4, &buf);
  uint64_t v10 = *(float **)(a1 + 288);
  id v11 = *(float **)(a1 + 296);
  if (v10 != v11)
  {
    float v12 = *(float *)(a1 + 520);
    std::string::size_type v13 = v88.__r_.__value_.__r.__words[0];
    do
    {
      uint64_t v14 = (int)(float)((float)(*v10 - v12) * 0.5);
      if ((v14 & 0x80000000) == 0 && v4 > v14) {
        ++*(void *)(v13 + 8 * v14);
      }
      v10 += 8;
    }
    while (v10 != v11);
  }
  double v15 = vabdd_f64(Current, v3);
  if (*(double *)(a1 + 456) < v15) {
    double v15 = *(double *)(a1 + 456);
  }
  unsigned int v17 = *(float **)(a1 + 496);
  uint64_t v16 = *(float **)(a1 + 504);
  if (v17 == v16) {
    goto LABEL_33;
  }
  float v18 = v15 / *(double *)(a1 + 336) * 30.0;
  unsigned int v19 = *(float **)(a1 + 504);
  while (1)
  {
    uint64_t v20 = (int)(float)((float)(*v17 - *(float *)(a1 + 520)) * 0.5);
    if ((v20 & 0x80000000) != 0) {
      break;
    }
    if (v4 <= v20) {
      break;
    }
    if (*((void *)__p + v20) >= 6uLL)
    {
      unint64_t v21 = *(void *)(v88.__r_.__value_.__r.__words[0] + 8 * v20);
      if ((float)((float)(v18 / (float)v21) * 4295000000.0) < (float)(*(unsigned int (**)(void))(**(void **)(a1 + 312) + 8))(*(void *)(a1 + 312))) {
        break;
      }
    }
    v17 += 8;
    if (v17 == v16) {
      goto LABEL_34;
    }
  }
  if (v17 != v16)
  {
    long long v22 = v17 + 8;
    if (v17 + 8 != v16)
    {
      unsigned int v19 = v17;
      do
      {
        uint64_t v23 = (int)(float)((float)(*v22 - *(float *)(a1 + 520)) * 0.5);
        if ((v23 & 0x80000000) == 0 && v4 > v23)
        {
          if (*((void *)__p + v23) < 6uLL
            || (unint64_t v24 = *(void *)(v88.__r_.__value_.__r.__words[0] + 8 * v23),
                (float)((float)(v18 / (float)v24) * 4295000000.0) >= (float)(*(unsigned int (**)(void))(**(void **)(a1 + 312) + 8))(*(void *)(a1 + 312))))
          {
            long long v25 = *((_OWORD *)v22 + 1);
            *(_OWORD *)unsigned int v19 = *(_OWORD *)v22;
            *((_OWORD *)v19 + 1) = v25;
            v19 += 8;
          }
        }
        v22 += 8;
      }
      while (v22 != v16);
      goto LABEL_34;
    }
LABEL_33:
    unsigned int v19 = v17;
  }
LABEL_34:
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10234D2C0);
  }
  long long v26 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v27 = *(void *)(a1 + 496);
    uint64_t v28 = (*(void *)(a1 + 504) - v27) >> 5;
    LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v28;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = ((uint64_t)v19 - v27) >> 5;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Point gyro pending samples thinned.  %zu samples reduced to %zu.", (uint8_t *)&buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234D2C0);
    }
    uint64_t v56 = *(void *)(a1 + 496);
    uint64_t v57 = (*(void *)(a1 + 504) - v56) >> 5;
    int v83 = 134218240;
    uint64_t v84 = v57;
    __int16 v85 = 2048;
    uint64_t v86 = ((uint64_t)v19 - v56) >> 5;
    int64_t v58 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyroCalibrationDatabaseLocalShared::thinPendingSamples(CFTimeInterval)", "%s\n", (const char *)v58);
    if (v58 != &buf) {
      free(v58);
    }
  }
  (*(void (**)(uint64_t, const __CFString *, uint64_t))(*(void *)a1 + 320))(a1, @"Thinned", (uint64_t)(*(void *)(a1 + 504) - (void)v19) >> 5);
  (*(void (**)(uint64_t, const __CFString *, uint64_t))(*(void *)a1 + 320))(a1, @"Inserted", ((uint64_t)v19 - *(void *)(a1 + 496)) >> 5);
  if (v19 != *(float **)(a1 + 504)) {
    *(void *)(a1 + 504) = v19;
  }
  if (v88.__r_.__value_.__r.__words[0])
  {
    v88.__r_.__value_.__l.__size_ = v88.__r_.__value_.__r.__words[0];
    operator delete(v88.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    *(void *)&long long v63 = __p;
    operator delete(__p);
  }
  if (*(void *)(a1 + 496) != *(void *)(a1 + 504))
  {
    *(double *)(a1 + 528) = Current;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v79 = 0u;
    uint64_t v82 = 0;
    long long v78 = 0u;
    long long v77 = 0u;
    long long v76 = 0u;
    long long v75 = 0u;
    long long v74 = 0u;
    long long v73 = 0u;
    long long v72 = 0u;
    long long v71 = 0u;
    long long v70 = 0u;
    long long v69 = 0u;
    long long v68 = 0u;
    long long v67 = 0u;
    long long v66 = 0u;
    long long v65 = 0u;
    long long v64 = 0u;
    long long v63 = 0u;
    std::string __p = *(void **)&Current;
    LODWORD(buf.__r_.__value_.__l.__data_) = 2;
    (*(void (**)(uint64_t, std::string *, void **, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &buf, &__p, 1, 0xFFFFFFFFLL, 0);
    sub_10002B640(a1 + 112);
    sub_100082068((void *)(a1 + 536), &v61);
    uint64_t v30 = *(void *)(a1 + 496);
    for (uint64_t i = *(void *)(a1 + 504); v30 != i; v30 += 32)
    {
      if (sub_101A1E910(v61, 1, *(double *)(v30 + 16), *(float *)v30, *(float *)(v30 + 4), *(float *)(v30 + 8), *(float *)(v30 + 12)))
      {
        long long v31 = (sqlite3_stmt *)sub_10014D19C(v61);
        sub_10001FEB0(a1 + 112, v31);
        *(void *)(v30 + 24) = sub_1006037D0(a1 + 112);
        long long v32 = *(_OWORD **)(a1 + 296);
        unint64_t v33 = *(void *)(a1 + 304);
        if ((unint64_t)v32 >= v33)
        {
          uint64_t v40 = *(void *)(a1 + 288);
          uint64_t v41 = ((uint64_t)v32 - v40) >> 5;
          unint64_t v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) >> 59) {
            sub_1001D7FD4();
          }
          uint64_t v43 = v33 - v40;
          if (v43 >> 4 > v42) {
            unint64_t v42 = v43 >> 4;
          }
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v44 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v42;
          }
          if (v44) {
            unint64_t v44 = (unint64_t)sub_10017EAB8(v44);
          }
          else {
            uint64_t v45 = 0;
          }
          uint64_t v46 = (_OWORD *)(v44 + 32 * v41);
          long long v47 = *(_OWORD *)(v30 + 16);
          *uint64_t v46 = *(_OWORD *)v30;
          v46[1] = v47;
          uint64_t v49 = *(char **)(a1 + 288);
          uint64_t v48 = *(char **)(a1 + 296);
          uint64_t v50 = v46;
          if (v48 != v49)
          {
            do
            {
              long long v51 = *((_OWORD *)v48 - 1);
              *(v50 - 2) = *((_OWORD *)v48 - 2);
              *(v50 - 1) = v51;
              v50 -= 2;
              v48 -= 32;
            }
            while (v48 != v49);
            uint64_t v48 = *(char **)(a1 + 288);
          }
          long long v35 = v46 + 2;
          *(void *)(a1 + 288) = v50;
          *(void *)(a1 + 296) = v46 + 2;
          *(void *)(a1 + 304) = v44 + 32 * v45;
          if (v48) {
            operator delete(v48);
          }
        }
        else
        {
          long long v34 = *(_OWORD *)(v30 + 16);
          *long long v32 = *(_OWORD *)v30;
          v32[1] = v34;
          long long v35 = v32 + 2;
        }
        *(void *)(a1 + 296) = v35;
      }
      else
      {
        if (qword_1024190B0 != -1) {
          dispatch_once(&qword_1024190B0, &stru_10234D2C0);
        }
        long long v36 = off_1024190B8;
        if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
        {
          sub_100605A40(a1 + 112, &buf);
          long long v37 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v88.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 4) = (std::string::size_type)v37;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "flushPendingError: %{public}s", (uint8_t *)&v88, 0xCu);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1024190B0 != -1) {
            dispatch_once(&qword_1024190B0, &stru_10234D2C0);
          }
          sub_100605A40(a1 + 112, &v88);
          long long v38 = &v88;
          if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            long long v38 = (std::string *)v88.__r_.__value_.__r.__words[0];
          }
          int v83 = 136446210;
          uint64_t v84 = (uint64_t)v38;
          long long v39 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v88.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLGyroCalibrationDatabaseLocalShared::flushPendingSamples()", "%s\n", (const char *)v39);
          if (v39 != &buf) {
            free(v39);
          }
        }
      }
    }
    sub_100028FB4(a1 + 112);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234D2C0);
    }
    uint64_t v52 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v53 = (uint64_t)(*(void *)(a1 + 504) - *(void *)(a1 + 496)) >> 5;
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v53;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "Point gyro database flushed, %zu samples added.", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234D2C0);
      }
      uint64_t v59 = (uint64_t)(*(void *)(a1 + 504) - *(void *)(a1 + 496)) >> 5;
      LODWORD(v88.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 4) = v59;
      int64_t v60 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyroCalibrationDatabaseLocalShared::flushPendingSamples()", "%s\n", (const char *)v60);
      if (v60 != &buf) {
        free(v60);
      }
    }
    *(void *)(a1 + 504) = *(void *)(a1 + 496);
    sub_101A1D7B4((char **)(a1 + 496));
    [*(id *)(a1 + 272) nextFireDelay];
    if (v54 == 1.79769313e308) {
      [*(id *)(a1 + 272) setNextFireDelay:*(double *)(a1 + 456)];
    }
    uint64_t v55 = v61;
    uint64_t v61 = 0;
    if (v55) {
      (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
    }
  }
}

void sub_101A1C934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101A1C9D8(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 216))(a1, __src);
  if (result)
  {
    memcpy(__dst, __src, sizeof(__dst));
    int v3 = 0;
    return (*(uint64_t (**)(uint64_t, int *, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v3, __dst, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_101A1CAA8(uint64_t a1)
{
}

void sub_101A1CAB0(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  unint64_t v3 = *(void *)(a1 + 288);
  unint64_t v4 = *(double **)(a1 + 296);
  unint64_t v5 = 126 - 2 * __clz((uint64_t)((uint64_t)v4 - v3) >> 5);
  *(double *)std::string buf = Current;
  if (v4 == (double *)v3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  sub_101A1FA58(v3, v4, (double *)buf, v6, 1);
  unint64_t v7 = vcvtps_u32_f32((float)(*(float *)(a1 + 524) - *(float *)(a1 + 520)) * 0.5);
  *(void *)std::string buf = 0;
  sub_1001F3CF0(&v48, v7, buf);
  uint64_t v9 = *(void *)(a1 + 288);
  uint64_t v10 = *(void *)(a1 + 296);
  if (v9 != v10)
  {
LABEL_5:
    float v11 = *(float *)(a1 + 520);
    float v12 = v48;
    unint64_t v13 = (v49 - (unsigned char *)v48) >> 3;
    while (1)
    {
      uint64_t v14 = (int)(float)((float)(*(float *)v9 - v11) * 0.5);
      if ((v14 & 0x80000000) != 0 || v13 <= v14) {
        goto LABEL_18;
      }
      double v15 = vabdd_f64(Current, *(double *)(v9 + 16));
      if (v15 > *(double *)(a1 + 360)) {
        break;
      }
      unint64_t v16 = v12[v14];
      if (v16 > 0x50)
      {
        CFStringRef v17 = @"Overpopulated";
        goto LABEL_17;
      }
      if (v16 >= 6 && v15 > *(double *)(a1 + 336))
      {
        CFStringRef v17 = @"NormalAgeOut";
        goto LABEL_17;
      }
      v12[v14] = v16 + 1;
      v9 += 32;
      if (v9 == v10)
      {
        uint64_t v9 = v10;
        goto LABEL_29;
      }
    }
    CFStringRef v17 = @"MaxAgeOut";
LABEL_17:
    (*(void (**)(uint64_t, const __CFString *, uint64_t))(*(void *)a1 + 320))(a1, v17, 1);
LABEL_18:
    v10 -= 32;
    if (v9 == v10) {
      goto LABEL_29;
    }
    do
    {
      unint64_t v18 = (int)(float)((float)(*(float *)v10 - *(float *)(a1 + 520)) * 0.5);
      if ((v18 & 0x80000000) == 0 && v18 < (v49 - (unsigned char *)v48) >> 3)
      {
        double v19 = vabdd_f64(Current, *(double *)(v10 + 16));
        CFStringRef v20 = @"MaxAgeOut";
        if (v19 <= *(double *)(a1 + 360))
        {
          unint64_t v21 = *((void *)v48 + v18);
          CFStringRef v20 = @"Overpopulated";
          if (v21 <= 0x50)
          {
            if (v21 < 6 || (CFStringRef v20 = @"NormalAgeOut", v19 <= *(double *)(a1 + 336)))
            {
              *((void *)v48 + v18) = v21 + 1;
              long long v22 = *(_OWORD *)(v9 + 16);
              *(_OWORD *)std::string buf = *(_OWORD *)v9;
              *(_OWORD *)&uint8_t buf[16] = v22;
              long long v23 = *(_OWORD *)(v10 + 16);
              *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
              *(_OWORD *)(v9 + 16) = v23;
              v9 += 32;
              v8.n128_u64[1] = *(void *)&buf[8];
              long long v24 = *(_OWORD *)&buf[16];
              *(_OWORD *)uint64_t v10 = *(_OWORD *)buf;
              *(_OWORD *)(v10 + 16) = v24;
              if (v10 == v9) {
                break;
              }
              goto LABEL_5;
            }
          }
        }
        (*(void (**)(uint64_t, const __CFString *, uint64_t))(*(void *)a1 + 320))(a1, v20, 1);
      }
      v10 -= 32;
    }
    while (v10 != v9);
  }
LABEL_29:
  long long v26 = *(float **)(a1 + 288);
  long long v25 = *(float **)(a1 + 296);
  if (v26 == v25)
  {
    v8.n128_u64[0] = 0;
  }
  else
  {
    uint64_t v27 = v26 + 8;
    if (v26 + 8 == v25)
    {
      long long v29 = *(float **)(a1 + 288);
      uint64_t v27 = v29;
    }
    else
    {
      float v28 = v26[8];
      if (v28 >= *v26) {
        long long v29 = *(float **)(a1 + 288);
      }
      else {
        long long v29 = v26 + 8;
      }
      if (v28 < *v26) {
        uint64_t v27 = *(float **)(a1 + 288);
      }
      uint64_t v30 = v26 + 16;
      if (v26 + 16 != v25)
      {
        if (v28 >= *v26) {
          float v28 = *v26;
        }
        while (1)
        {
          long long v31 = v30;
          long long v32 = v30 + 8;
          if (v32 == v25) {
            break;
          }
          float v33 = v31[8];
          float v34 = *v31;
          if (v33 >= *v31)
          {
            long long v35 = v26 + 24;
            if (v34 < v28)
            {
              float v28 = *v31;
              long long v29 = v31;
            }
            if (v33 >= *v27) {
              uint64_t v27 = v35;
            }
          }
          else
          {
            float v28 = *v29;
            if (v33 < *v29)
            {
              float v28 = v31[8];
              long long v29 = v32;
            }
            if (v34 >= *v27) {
              uint64_t v27 = v31;
            }
          }
          uint64_t v30 = v31 + 16;
          long long v26 = v31;
          if (v31 + 16 == v25) {
            goto LABEL_58;
          }
        }
        if (*v31 >= *v29)
        {
          if (*v31 >= *v27) {
            uint64_t v27 = v31;
          }
        }
        else
        {
          long long v29 = v31;
        }
      }
    }
LABEL_58:
    v8.n128_f64[0] = (float)(*v27 - *v29);
  }
  (*(void (**)(uint64_t, const __CFString *, __n128))(*(void *)a1 + 328))(a1, @"TemperatureSpan", v8);
  uint64_t v36 = *(void *)(a1 + 296);
  uint64_t v37 = (v36 - v9) >> 5;
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10234D2C0);
  }
  long long v38 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v39 = ((uint64_t)(*(void *)(a1 + 296) - *(void *)(a1 + 288)) >> 5) - v37;
    *(_DWORD *)std::string buf = 134218240;
    *(void *)&uint8_t buf[4] = (v36 - v9) >> 5;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&unsigned char buf[14] = v39;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Point gyro database prune, deleted %zu samples, %zu remain.", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234D2C0);
    }
    uint64_t v46 = ((uint64_t)(*(void *)(a1 + 296) - *(void *)(a1 + 288)) >> 5) - v37;
    *(_DWORD *)std::string __p = 134218240;
    *(void *)&__p[4] = (v36 - v9) >> 5;
    __int16 v51 = 2048;
    uint64_t v52 = v46;
    long long v47 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyroCalibrationDatabaseLocalShared::prune()", "%s\n", v47);
    if (v47 != buf) {
      free(v47);
    }
  }
  if (v36 != v9)
  {
    sub_10010F274((uint64_t)buf);
    uint64_t v40 = sub_100132EFC(&buf[16], (uint64_t)"UPDATE ", 7);
    uint64_t v41 = sub_100132EFC(v40, (uint64_t)"GyroPointCalibration", 20);
    sub_100132EFC(v41, (uint64_t)" SET Active = ", 14);
    unint64_t v42 = (void *)std::ostream::operator<<();
    uint64_t v43 = sub_100132EFC(v42, (uint64_t)" WHERE ", 7);
    unint64_t v44 = sub_100132EFC(v43, (uint64_t)"Id", 2);
    sub_100132EFC(v44, (uint64_t)" = ?", 4);
    if (*(unsigned char *)(a1 + 249))
    {
      std::stringbuf::str();
      if (v53 >= 0) {
        uint64_t v45 = __p;
      }
      else {
        uint64_t v45 = *(unsigned char **)__p;
      }
      sub_10014D518(a1 + 112, (uint64_t)v45);
    }
    sub_10014D518(a1 + 112, (uint64_t)"DELETE FROM GyroPointCalibration WHERE Id = ?");
  }
  if (v48)
  {
    uint64_t v49 = v48;
    operator delete(v48);
  }
}

void sub_101A1D350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101A1D3F0(uint64_t a1)
{
  if (*(void *)(a1 + 496) != *(void *)(a1 + 504))
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234D2C0);
    }
    uint64_t v1 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v5 = 0;
      __int16 v6 = 2082;
      unint64_t v7 = "";
      __int16 v8 = 2082;
      uint64_t v9 = "assert";
      __int16 v10 = 2081;
      float v11 = "fPendingSamples.empty()";
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"initialization function expected with no pending samples\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234D2C0);
      }
    }
    uint64_t v2 = off_1024190B8;
    if (os_signpost_enabled((os_log_t)off_1024190B8))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v5 = 0;
      __int16 v6 = 2082;
      unint64_t v7 = "";
      __int16 v8 = 2082;
      uint64_t v9 = "assert";
      __int16 v10 = 2081;
      float v11 = "fPendingSamples.empty()";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "initialization function expected with no pending samples", "{\"msg%{public}.0s\":\"initialization function expected with no pending samples\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234D2C0);
      }
    }
    unint64_t v3 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289539;
      int v5 = 0;
      __int16 v6 = 2082;
      unint64_t v7 = "";
      __int16 v8 = 2082;
      uint64_t v9 = "assert";
      __int16 v10 = 2081;
      float v11 = "fPendingSamples.empty()";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"initialization function expected with no pending samples\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
  }

  sub_101A1E334(a1, (void **)(a1 + 496));
}

uint64_t sub_101A1D66C(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 32);
  v1[257] = 0;
  return (*(uint64_t (**)(void))(*(void *)v1 + 312))();
}

void sub_101A1D6A0(uint64_t a1)
{
  *(void *)(a1 + 296) = *(void *)(a1 + 288);
  sub_101A1D7B4((char **)(a1 + 288));
  *(void *)(a1 + 504) = *(void *)(a1 + 496);
  sub_101A1D7B4((char **)(a1 + 496));
  *(unsigned char *)(a1 + 256) = 0;
  sub_10014D518(a1 + 112, (uint64_t)"DELETE FROM GyroPointCalibration");
}

void sub_101A1D77C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_101A1D7B4(char **a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = (v4 - v3) >> 5;
  if (v5 >= (v2 - v3) >> 5) {
    return;
  }
  if (v4 == v3)
  {
    __int16 v10 = 0;
    uint64_t v8 = 32 * v5;
    goto LABEL_8;
  }
  __int16 v6 = (char *)sub_10017EAB8((v4 - v3) >> 5);
  unint64_t v7 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v8 = (uint64_t)&v6[32 * v5];
  __int16 v10 = &v6[32 * v9];
  if (v3 == *a1)
  {
LABEL_8:
    uint64_t v11 = v8;
    goto LABEL_9;
  }
  uint64_t v11 = v8;
  do
  {
    long long v12 = *((_OWORD *)v3 - 1);
    *(_OWORD *)(v11 - 32) = *((_OWORD *)v3 - 2);
    *(_OWORD *)(v11 - 16) = v12;
    v11 -= 32;
    v3 -= 32;
  }
  while (v3 != v7);
  unint64_t v3 = *a1;
LABEL_9:
  *a1 = (char *)v11;
  a1[1] = (char *)v8;
  a1[2] = v10;
  if (v3)
  {
    operator delete(v3);
  }
}

uint64_t sub_101A1D880(uint64_t a1)
{
  unint64_t v7 = 0;
  uint64_t v8 = 0;
  __int16 v6 = (uint64_t *)&v7;
  uint64_t v1 = *(float **)(a1 + 288);
  uint64_t v2 = *(float **)(a1 + 296);
  if (v1 == v2)
  {
    unint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  else
  {
    do
    {
      sub_1019E9BF0(&v6, v1, v1);
      v1 += 8;
    }
    while (v1 != v2);
    uint64_t v3 = v8;
    unint64_t v4 = v7;
  }
  sub_1000F5BB0((uint64_t)&v6, v4);
  return v3;
}

void sub_101A1D8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

unint64_t sub_101A1D914()
{
  return ((unint64_t)sub_1000A16E8() >> 13) & 1;
}

uint64_t sub_101A1D930(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 488);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  [*(id *)(a1 + 264) invalidate];
  [*(id *)(a1 + 272) invalidate];
  [*(id *)(a1 + 480) invalidate];
  sub_101A1BC38(a1);

  return sub_1005D7534(a1);
}

void sub_101A1D9B0()
{
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10234D2C0);
  }
  uint64_t v0 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Start factory GYTT", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234D2C0);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGyroCalibrationDatabaseLocalShared::startFactoryGYTT()", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
  operator new();
}

void sub_101A1DBC4()
{
}

uint64_t sub_101A1DBF0(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 280);
  return 1;
}

void sub_101A1DC00(uint64_t a1)
{
  char v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 280))(a1);
  uint64_t v2 = sub_1000D3E78();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_101A1DCA8;
  v3[3] = &unk_1022BBE00;
  char v4 = v1;
  sub_1009E8F7C(v2, (uint64_t)v3);
}

uint64_t sub_101A1DCA8()
{
  uint64_t result = sub_1000D2E34(0);
  if (result)
  {
    char v1 = *(uint64_t (**)(void))(*(void *)sub_1000D2E34(0) + 152);
    return v1();
  }
  return result;
}

void sub_101A1DD1C(uint64_t a1)
{
  sub_10014D518(a1 + 112, (uint64_t)"SELECT Id, Timestamp, Temperature, BiasX, BiasY, BiasZ FROM GyroPointCalibration WHERE Active = ?");
}

void sub_101A1E2CC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_101A1E334(uint64_t a1, void **a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  double v5 = *(double *)(a1 + 384);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  sub_10096239C(&v39);
  __int16 v6 = (int *)v39;
  unint64_t v7 = v40;
  if (v39 != v40)
  {
    double v8 = Current - v5;
    uint64_t v9 = (char *)a2[1];
    do
    {
      int v11 = *v6;
      int v10 = v6[1];
      int v13 = v6[2];
      int v12 = v6[3];
      uint64_t v14 = (char *)a2[2];
      if (v9 >= v14)
      {
        uint64_t v15 = (v9 - (unsigned char *)*a2) >> 5;
        if ((unint64_t)(v15 + 1) >> 59) {
          sub_1001D7FD4();
        }
        uint64_t v16 = v14 - (unsigned char *)*a2;
        uint64_t v17 = v16 >> 4;
        if (v16 >> 4 <= (unint64_t)(v15 + 1)) {
          uint64_t v17 = v15 + 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18) {
          unint64_t v18 = (unint64_t)sub_10017EAB8(v18);
        }
        else {
          uint64_t v19 = 0;
        }
        unint64_t v20 = v18 + 32 * v15;
        *(_DWORD *)unint64_t v20 = v11;
        *(_DWORD *)(v20 + 4) = v10;
        *(_DWORD *)(v20 + 8) = v13;
        *(_DWORD *)(v20 + 12) = v12;
        *(double *)(v20 + 16) = v8;
        *(void *)(v20 + 24) = 0;
        long long v22 = (char *)*a2;
        unint64_t v21 = (char *)a2[1];
        long long v23 = (char *)v20;
        if (v21 != *a2)
        {
          do
          {
            long long v24 = *((_OWORD *)v21 - 1);
            *((_OWORD *)v23 - 2) = *((_OWORD *)v21 - 2);
            *((_OWORD *)v23 - 1) = v24;
            v23 -= 32;
            v21 -= 32;
          }
          while (v21 != v22);
          unint64_t v21 = (char *)*a2;
        }
        uint64_t v9 = (char *)(v20 + 32);
        *a2 = v23;
        a2[1] = (void *)(v20 + 32);
        a2[2] = (void *)(v18 + 32 * v19);
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v9 = v11;
        *((_DWORD *)v9 + 1) = v10;
        *((_DWORD *)v9 + 2) = v13;
        *((_DWORD *)v9 + 3) = v12;
        *((double *)v9 + 2) = v8;
        *((void *)v9 + 3) = 0;
        v9 += 32;
      }
      a2[1] = v9;
      v6 += 4;
    }
    while (v6 != v7);
  }
  uint64_t v25 = a1 + 112;
  sub_10002B640(a1 + 112);
  sub_100082068((void *)(a1 + 536), &v38);
  long long v26 = (char *)*a2;
  uint64_t v27 = (char *)a2[1];
  if (*a2 != v27)
  {
    do
    {
      if (sub_101A1E910(v38, -1, *((double *)v26 + 2), *(float *)v26, *((float *)v26 + 1), *((float *)v26 + 2), *((float *)v26 + 3)))
      {
        float v28 = (sqlite3_stmt *)sub_10014D19C(v38);
        sub_10001FEB0(v25, v28);
      }
      else
      {
        if (qword_1024190B0 != -1) {
          dispatch_once(&qword_1024190B0, &stru_10234D2C0);
        }
        long long v29 = off_1024190B8;
        if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
        {
          sub_100605A40(v25, __p);
          uint64_t v30 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? __p
              : (std::string *)__p[0].__r_.__value_.__r.__words[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "flushPendingError: %{public}s", (uint8_t *)&buf, 0xCu);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1024190B0 != -1) {
            dispatch_once(&qword_1024190B0, &stru_10234D2C0);
          }
          sub_100605A40(v25, &buf);
          p_std::string buf = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          int v43 = 136446210;
          unint64_t v44 = p_buf;
          long long v32 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLGyroCalibrationDatabaseLocalShared::persistFactoryPointsInDatabase(std::vector<Sample> &)", "%s\n", (const char *)v32);
          if (v32 != __p) {
            free(v32);
          }
        }
      }
      v26 += 32;
    }
    while (v26 != v27);
  }
  sub_100028FB4(v25);
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10234D2C0);
  }
  float v33 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v34 = ((unsigned char *)a2[1] - (unsigned char *)*a2) >> 5;
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = v34;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Factory data persisted in gyro database, %zu samples added.", (uint8_t *)__p, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234D2C0);
    }
    uint64_t v36 = ((unsigned char *)a2[1] - (unsigned char *)*a2) >> 5;
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v36;
    uint64_t v37 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGyroCalibrationDatabaseLocalShared::persistFactoryPointsInDatabase(std::vector<Sample> &)", "%s\n", (const char *)v37);
    if (v37 != __p) {
      free(v37);
    }
  }
  uint64_t v35 = v38;
  uint64_t v38 = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  if (v39)
  {
    uint64_t v40 = (int *)v39;
    operator delete(v39);
  }
}

void sub_101A1E89C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_101A1E910(uint64_t a1, int a2, double a3, float a4, float a5, float a6, float a7)
{
  int v13 = (sqlite3_stmt *)sub_10014D19C(a1);
  if (!sub_10014D1A4(v13, 1, a2)
    || !sub_100055D58(v13, 2, a3)
    || !sub_100055D58(v13, 3, a4)
    || !sub_100055D58(v13, 4, a5)
    || !sub_100055D58(v13, 5, a6))
  {
    return 0;
  }

  return sub_100055D58(v13, 6, a7);
}

uint64_t sub_101A1E9FC(uint64_t a1)
{
  *(void *)a1 = off_10234CFA0;

  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;

  *(void *)(a1 + 48sub_1019DB7E0(qword_10248D888, 0) = 0;
  uint64_t v2 = *(void **)(a1 + 496);
  if (v2)
  {
    *(void *)(a1 + 504) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void *)(a1 + 488);
  *(void *)(a1 + 488) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v4 = *(std::__shared_weak_count **)(a1 + 320);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  double v5 = *(void **)(a1 + 288);
  if (v5)
  {
    *(void *)(a1 + 296) = v5;
    operator delete(v5);
  }
  *(void *)a1 = off_10234D708;
  sub_1005F5850(a1 + 112);

  return sub_1005D7428(a1);
}

void sub_101A1EAFC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 473))
  {
    float v2 = *(float *)(a1 + 524);
    float v3 = *(float *)(a1 + 520);
    BOOL v4 = v3 == 3.4028e38 || v2 == 1.1755e-38;
    if (v4 || (float v6 = v2 - v3, v6 <= 0.0))
    {
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234D2C0);
      }
      double v5 = off_1024190B8;
      if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to log gyro non factory cal from db because the temperature range is either uninitialized or invalid.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190B0 != -1) {
          dispatch_once(&qword_1024190B0, &stru_10234D2C0);
        }
        LOWORD(v27[0]) = 0;
        int v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGyroCalibrationDatabaseLocalShared::logGyroNonFactoryCalIfNecessary()", "%s\n", v11);
        goto LABEL_33;
      }
    }
    else
    {
      unint64_t v7 = 30 * vcvtps_u32_f32(v6 * 0.5);
      if (v7 >= (uint64_t)(*(void *)(a1 + 296) - *(void *)(a1 + 288)) >> 5)
      {
        sub_10170140C(buf);
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        v26 |= 1u;
        CFAbsoluteTime v25 = Current;
        sub_101724B78((uint64_t)buf);
        int v13 = *(long long **)(a1 + 288);
        if (v13 != *(long long **)(a1 + 296))
        {
          long long v16 = *v13;
          uint64_t v14 = *((void *)v13 + 2);
          sub_101664B34((uint64_t)v17);
          v20 |= 1u;
          uint64_t v19 = v14;
          sub_101665048((uint64_t)v17);
          uint64_t v15 = v18;
          *(unsigned char *)(v18 + 24) |= 0xFu;
          *(_OWORD *)(v15 + 8) = v16;
          operator new();
        }
        if (qword_10248AF88 != -1) {
          dispatch_once(&qword_10248AF88, &stru_10234D2E0);
        }
        if (qword_10248AF90) {
          sub_1019E5150(qword_10248AF90, (uint64_t)buf);
        }
        sub_101706914((PB::Base *)buf);
      }
      else
      {
        if (qword_1024190B0 != -1) {
          dispatch_once(&qword_1024190B0, &stru_10234D2C0);
        }
        double v8 = off_1024190B8;
        if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v9 = (uint64_t)(*(void *)(a1 + 296) - *(void *)(a1 + 288)) >> 5;
          *(_DWORD *)std::string buf = 134218240;
          uint64_t v22 = v9;
          __int16 v23 = 2048;
          unint64_t v24 = v7;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to log gyro non factory cal because the number of samples (%zu) exceeds the max limit (%zu).", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190B0 != -1) {
            dispatch_once(&qword_1024190B0, &stru_10234D2C0);
          }
          uint64_t v10 = (uint64_t)(*(void *)(a1 + 296) - *(void *)(a1 + 288)) >> 5;
          v27[0] = 134218240;
          *(void *)&v27[1] = v10;
          __int16 v28 = 2048;
          unint64_t v29 = v7;
          int v11 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLGyroCalibrationDatabaseLocalShared::logGyroNonFactoryCalIfNecessary()", "%s\n", v11);
LABEL_33:
          if (v11 != (char *)buf) {
            free(v11);
          }
        }
      }
    }
  }
}

void sub_101A1F020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101A1F094()
{
  return 1;
}

uint64_t sub_101A1F09C()
{
  return 1;
}

void sub_101A1F0B0(id a1)
{
  off_1024190B8 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_101A1F0E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10234D310;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101A1F104(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10234D310;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_101A1F158(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

unsigned __int8 *sub_101A1F180(unsigned __int8 *a1, const char *a2, void *a3, unsigned __int8 a4)
{
  *a1 = 0;
  *((void *)a1 + 1) = *a3;
  float v6 = a1 + 8;
  a1[16] = a4;
  uint64_t v7 = sub_1000D3E78();
  sub_10006B564(v7, buf);
  *a1 = sub_1000A699C(*(uint64_t *)buf, a2, v6);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10010F274((uint64_t)v28);
  std::ostream::operator<<();
  if (!a1[16])
  {
    if (*a1)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234D350);
      }
      uint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *a1;
        std::stringbuf::str();
        int v12 = SBYTE3(v34) >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v11;
        __int16 v36 = 2080;
        uint64_t v37 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v34) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_47;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234D350);
      }
      int v13 = *a1;
      std::stringbuf::str();
      if (v27 >= 0) {
        uint64_t v14 = v26;
      }
      else {
        uint64_t v14 = (void **)v26[0];
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = a2;
      __int16 v31 = 1024;
      int v32 = v13;
      __int16 v33 = 2080;
      uint64_t v34 = v14;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0) {
        operator delete(v26[0]);
      }
    }
    else
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234D350);
      }
      uint64_t v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        int v20 = *a1;
        std::stringbuf::str();
        unint64_t v21 = SBYTE3(v34) >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v20;
        __int16 v36 = 2080;
        uint64_t v37 = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v34) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_47;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234D350);
      }
      int v24 = *a1;
      std::stringbuf::str();
      if (v27 >= 0) {
        CFAbsoluteTime v25 = v26;
      }
      else {
        CFAbsoluteTime v25 = (void **)v26[0];
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = a2;
      __int16 v31 = 1024;
      int v32 = v24;
      __int16 v33 = 2080;
      uint64_t v34 = v25;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0) {
        operator delete(v26[0]);
      }
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionDefaultsWrite<double>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = double]", "%s\n", v15);
    if (v15 == buf) {
      goto LABEL_47;
    }
    goto LABEL_58;
  }
  if (*a1)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10234D350);
    }
    double v8 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *a1;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1)
      {
LABEL_36:
        int v18 = *a1;
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = a2;
        __int16 v31 = 1024;
        int v32 = v18;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionDefaultsWrite<double>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = double]", "%s\n", v15);
        if (v15 == buf) {
          goto LABEL_47;
        }
LABEL_58:
        free(v15);
        goto LABEL_47;
      }
LABEL_59:
      dispatch_once(&qword_102418FD0, &stru_10234D350);
      goto LABEL_36;
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10234D350);
    }
    long long v16 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      int v17 = *a1;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1) {
        goto LABEL_36;
      }
      goto LABEL_59;
    }
  }
LABEL_47:
  *(void *)((char *)v28
  v28[2] = v22;
  if (v29 < 0) {
    operator delete((void *)v28[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return a1;
}

void sub_101A1F9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101A1FA28(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_101A1FA58(unint64_t a1, double *a2, double *a3, uint64_t a4, char a5)
{
  while (2)
  {
    int v12 = (double *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = ((char *)a2 - (char *)v12) >> 5;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (vabdd_f64(*a3, *(a2 - 2)) < vabdd_f64(*a3, v12[2]))
                {
                  long long v122 = *(_OWORD *)v12;
                  long long v131 = *((_OWORD *)v12 + 1);
                  long long v54 = *((_OWORD *)a2 - 1);
                  *(_OWORD *)int v12 = *((_OWORD *)a2 - 2);
                  *((_OWORD *)v12 + 1) = v54;
                  *((_OWORD *)a2 - 2) = v122;
                  *((_OWORD *)a2 - 1) = v131;
                }
                break;
              case 3uLL:
                sub_101A20380(v12, v12 + 4, a2 - 4, a3);
                break;
              case 4uLL:
                sub_101A206F8(v12, v12 + 4, v12 + 8, (uint64_t)(a2 - 4), a3);
                break;
              case 5uLL:
                uint64_t v55 = (long long *)(v12 + 4);
                uint64_t v56 = (long long *)(v12 + 8);
                uint64_t v57 = (long long *)(v12 + 12);
                sub_101A206F8(v12, v12 + 4, v12 + 8, (uint64_t)(v12 + 12), a3);
                if (vabdd_f64(*a3, *(a2 - 2)) < vabdd_f64(*a3, v12[14]))
                {
                  long long v58 = *v57;
                  long long v132 = *((_OWORD *)v12 + 7);
                  long long v59 = *((_OWORD *)a2 - 1);
                  *uint64_t v57 = *((_OWORD *)a2 - 2);
                  *((_OWORD *)v12 + 7) = v59;
                  *((_OWORD *)a2 - 2) = v58;
                  *((_OWORD *)a2 - 1) = v132;
                  if (vabdd_f64(*a3, v12[14]) < vabdd_f64(*a3, v12[10]))
                  {
                    long long v61 = *v56;
                    long long v60 = *((_OWORD *)v12 + 5);
                    long long v62 = *((_OWORD *)v12 + 7);
                    *uint64_t v56 = *v57;
                    *((_OWORD *)v12 + 5) = v62;
                    *uint64_t v57 = v61;
                    *((_OWORD *)v12 + 7) = v60;
                    if (vabdd_f64(*a3, v12[10]) < vabdd_f64(*a3, v12[6]))
                    {
                      long long v64 = *v55;
                      long long v63 = *((_OWORD *)v12 + 3);
                      long long v65 = *((_OWORD *)v12 + 5);
                      *uint64_t v55 = *v56;
                      *((_OWORD *)v12 + 3) = v65;
                      *uint64_t v56 = v64;
                      *((_OWORD *)v12 + 5) = v63;
                      if (vabdd_f64(*a3, v12[6]) < vabdd_f64(*a3, v12[2]))
                      {
                        long long v123 = *(_OWORD *)v12;
                        long long v133 = *((_OWORD *)v12 + 1);
                        long long v66 = *((_OWORD *)v12 + 3);
                        *(_OWORD *)int v12 = *v55;
                        *((_OWORD *)v12 + 1) = v66;
                        *uint64_t v55 = v123;
                        *((_OWORD *)v12 + 3) = v133;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 767)
          {
            long long v67 = v12 + 4;
            BOOL v69 = v12 == a2 || v67 == a2;
            if (a5)
            {
              if (!v69)
              {
                uint64_t v70 = 0;
                double v71 = *a3;
                long long v72 = v12;
                do
                {
                  long long v73 = v67;
                  double v74 = v72[6];
                  if (vabdd_f64(v71, v74) < vabdd_f64(v71, v72[2]))
                  {
                    long long v124 = *(_OWORD *)v67;
                    uint64_t v75 = *((void *)v72 + 7);
                    uint64_t v76 = v70;
                    while (1)
                    {
                      long long v77 = (char *)v12 + v76;
                      long long v78 = *(_OWORD *)((char *)v12 + v76 + 16);
                      *((_OWORD *)v77 + 2) = *(_OWORD *)((char *)v12 + v76);
                      *((_OWORD *)v77 + 3) = v78;
                      if (!v76) {
                        break;
                      }
                      v76 -= 32;
                      if (vabdd_f64(*a3, v74) >= vabdd_f64(*a3, *((double *)v77 - 2)))
                      {
                        uint64_t v79 = (uint64_t)v12 + v76 + 32;
                        goto LABEL_84;
                      }
                    }
                    uint64_t v79 = (uint64_t)v12;
LABEL_84:
                    *(_OWORD *)uint64_t v79 = v124;
                    *(double *)(v79 + 16) = v74;
                    *(void *)(v79 + 24) = v75;
                    double v71 = *a3;
                  }
                  long long v67 = v73 + 4;
                  v70 += 32;
                  long long v72 = v73;
                }
                while (v73 + 4 != a2);
              }
            }
            else if (!v69)
            {
              double v110 = *a3;
              do
              {
                unint64_t v111 = (unint64_t)v67;
                double v112 = *(double *)(a1 + 48);
                if (vabdd_f64(v110, v112) < vabdd_f64(v110, *(double *)(a1 + 16)))
                {
                  long long v127 = *(_OWORD *)v67;
                  uint64_t v113 = *(void *)(a1 + 56);
                  do
                  {
                    long long v114 = *((_OWORD *)v67 - 1);
                    *(_OWORD *)long long v67 = *((_OWORD *)v67 - 2);
                    *((_OWORD *)v67 + 1) = v114;
                    double v115 = *(v67 - 6);
                    v67 -= 4;
                  }
                  while (vabdd_f64(*a3, v112) < vabdd_f64(*a3, v115));
                  *(_OWORD *)long long v67 = v127;
                  v67[2] = v112;
                  *((void *)v67 + 3) = v113;
                  double v110 = *a3;
                }
                long long v67 = (double *)(v111 + 32);
                a1 = v111;
              }
              while ((double *)(v111 + 32) != a2);
            }
            return;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v80 = (v14 - 2) >> 1;
              int64_t v81 = v80;
              do
              {
                int64_t v82 = v81;
                if (v80 >= v81)
                {
                  uint64_t v83 = (2 * v81) | 1;
                  uint64_t v84 = &v12[4 * v83];
                  double v85 = *a3;
                  if (2 * v82 + 2 < (uint64_t)v14 && vabdd_f64(v85, v84[2]) < vabdd_f64(v85, v84[6]))
                  {
                    v84 += 4;
                    uint64_t v83 = 2 * v82 + 2;
                  }
                  uint64_t v86 = &v12[4 * v82];
                  double v87 = v86[2];
                  if (vabdd_f64(v85, v84[2]) >= vabdd_f64(v85, v87))
                  {
                    long long v125 = *(_OWORD *)v86;
                    uint64_t v88 = *((void *)v86 + 3);
                    do
                    {
                      uint64_t v89 = v86;
                      uint64_t v86 = v84;
                      long long v90 = *((_OWORD *)v84 + 1);
                      *(_OWORD *)uint64_t v89 = *(_OWORD *)v84;
                      *((_OWORD *)v89 + 1) = v90;
                      if (v80 < v83) {
                        break;
                      }
                      uint64_t v91 = 2 * v83;
                      uint64_t v83 = (2 * v83) | 1;
                      uint64_t v84 = &v12[4 * v83];
                      uint64_t v92 = v91 + 2;
                      double v93 = *a3;
                      if (v92 < (uint64_t)v14 && vabdd_f64(v93, v84[2]) < vabdd_f64(v93, v84[6]))
                      {
                        v84 += 4;
                        uint64_t v83 = v92;
                      }
                    }
                    while (vabdd_f64(v93, v84[2]) >= vabdd_f64(v93, v87));
                    *(_OWORD *)uint64_t v86 = v125;
                    v86[2] = v87;
                    *((void *)v86 + 3) = v88;
                  }
                }
                int64_t v81 = v82 - 1;
              }
              while (v82);
              uint64_t v94 = (unint64_t)v13 >> 5;
              do
              {
                uint64_t v95 = 0;
                long long v126 = *(_OWORD *)v12;
                long long v134 = *((_OWORD *)v12 + 1);
                __n128 v96 = v12;
                do
                {
                  uint64_t v97 = v96;
                  v96 += 4 * v95 + 4;
                  uint64_t v98 = 2 * v95;
                  uint64_t v95 = (2 * v95) | 1;
                  uint64_t v99 = v98 + 2;
                  if (v99 < v94 && vabdd_f64(*a3, v96[2]) < vabdd_f64(*a3, v96[6]))
                  {
                    v96 += 4;
                    uint64_t v95 = v99;
                  }
                  long long v100 = *((_OWORD *)v96 + 1);
                  *(_OWORD *)uint64_t v97 = *(_OWORD *)v96;
                  *((_OWORD *)v97 + 1) = v100;
                }
                while (v95 <= (uint64_t)((unint64_t)(v94 - 2) >> 1));
                a2 -= 4;
                if (v96 == a2)
                {
                  *(_OWORD *)__n128 v96 = v126;
                  *((_OWORD *)v96 + 1) = v134;
                }
                else
                {
                  long long v101 = *((_OWORD *)a2 + 1);
                  *(_OWORD *)__n128 v96 = *(_OWORD *)a2;
                  *((_OWORD *)v96 + 1) = v101;
                  *(_OWORD *)a2 = v126;
                  *((_OWORD *)a2 + 1) = v134;
                  uint64_t v102 = (char *)v96 - (char *)v12 + 32;
                  if (v102 >= 33)
                  {
                    unint64_t v103 = (((unint64_t)v102 >> 5) - 2) >> 1;
                    __n128 v104 = &v12[4 * v103];
                    double v105 = v96[2];
                    if (vabdd_f64(*a3, v104[2]) < vabdd_f64(*a3, v105))
                    {
                      long long v118 = *(_OWORD *)v96;
                      uint64_t v106 = *((void *)v96 + 3);
                      do
                      {
                        uint64_t v107 = v96;
                        __n128 v96 = v104;
                        long long v108 = *((_OWORD *)v104 + 1);
                        *(_OWORD *)uint64_t v107 = *(_OWORD *)v104;
                        *((_OWORD *)v107 + 1) = v108;
                        if (!v103) {
                          break;
                        }
                        unint64_t v103 = (v103 - 1) >> 1;
                        __n128 v104 = &v12[4 * v103];
                      }
                      while (vabdd_f64(*a3, v104[2]) < vabdd_f64(*a3, v105));
                      *(_OWORD *)__n128 v96 = v118;
                      v96[2] = v105;
                      *((void *)v96 + 3) = v106;
                    }
                  }
                }
              }
              while (v94-- > 2);
            }
            return;
          }
          unint64_t v15 = v14 >> 1;
          long long v16 = &v12[4 * (v14 >> 1)];
          if ((unint64_t)v13 > 0x1000)
          {
            sub_101A20380((double *)a1, (double *)(a1 + 32 * (v14 >> 1)), a2 - 4, a3);
            sub_101A20380((double *)(a1 + 32), v16 - 4, a2 - 8, a3);
            sub_101A20380((double *)(a1 + 64), (double *)(a1 + 32 + 32 * v15), a2 - 12, a3);
            sub_101A20380(v16 - 4, v16, (double *)(a1 + 32 + 32 * v15), a3);
            long long v119 = *(_OWORD *)a1;
            long long v128 = *(_OWORD *)(a1 + 16);
            long long v17 = *((_OWORD *)v16 + 1);
            *(_OWORD *)a1 = *(_OWORD *)v16;
            *(_OWORD *)(a1 + 16) = v17;
            *(_OWORD *)long long v16 = v119;
            *((_OWORD *)v16 + 1) = v128;
          }
          else
          {
            sub_101A20380((double *)(a1 + 32 * (v14 >> 1)), (double *)a1, a2 - 4, a3);
          }
          --a4;
          if (a5) {
            break;
          }
          double v19 = *a3;
          double v18 = *(double *)(a1 + 16);
          double v20 = vabdd_f64(*a3, v18);
          if (vabdd_f64(*a3, *(double *)(a1 - 16)) < v20) {
            goto LABEL_12;
          }
          long long v117 = *(_OWORD *)a1;
          if (v20 >= vabdd_f64(v19, *(a2 - 2)))
          {
            uint64_t v41 = (double *)(a1 + 32);
            do
            {
              int v12 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = vabdd_f64(v19, v41[2]);
              v41 += 4;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              int v12 = (double *)(v39 + 32);
              double v40 = vabdd_f64(v19, *(double *)(v39 + 48));
              v39 += 32;
            }
            while (v20 >= v40);
          }
          int v43 = a2;
          if (v12 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              int v43 = v44 - 4;
              double v45 = vabdd_f64(v19, *(v44 - 2));
              v44 -= 4;
            }
            while (v20 < v45);
          }
          uint64_t v46 = *(void *)(a1 + 24);
          while (v12 < v43)
          {
            long long v121 = *(_OWORD *)v12;
            long long v130 = *((_OWORD *)v12 + 1);
            long long v47 = *((_OWORD *)v43 + 1);
            *(_OWORD *)int v12 = *(_OWORD *)v43;
            *((_OWORD *)v12 + 1) = v47;
            *(_OWORD *)int v43 = v121;
            *((_OWORD *)v43 + 1) = v130;
            double v48 = *a3;
            double v49 = vabdd_f64(*a3, v18);
            do
            {
              double v50 = v12[6];
              v12 += 4;
            }
            while (v49 >= vabdd_f64(v48, v50));
            do
            {
              double v51 = *(v43 - 2);
              v43 -= 4;
            }
            while (v49 < vabdd_f64(v48, v51));
          }
          uint64_t v52 = v12 - 4;
          BOOL v5 = (unint64_t)(v12 - 4) >= a1;
          BOOL v6 = v12 - 4 == (double *)a1;
          if (v12 - 4 != (double *)a1)
          {
            long long v53 = *((_OWORD *)v12 - 1);
            *(_OWORD *)a1 = *(_OWORD *)v52;
            *(_OWORD *)(a1 + 16) = v53;
          }
          a5 = 0;
          *(_OWORD *)uint64_t v52 = v117;
          *(v12 - 2) = v18;
          *((void *)v12 - 1) = v46;
        }
        double v18 = *(double *)(a1 + 16);
        double v19 = *a3;
        double v20 = vabdd_f64(*a3, v18);
LABEL_12:
        uint64_t v21 = 0;
        long long v116 = *(_OWORD *)a1;
        uint64_t v22 = *(void *)(a1 + 24);
        do
        {
          double v23 = vabdd_f64(v19, *(double *)(a1 + v21 + 48));
          v21 += 32;
        }
        while (v23 < v20);
        int v24 = (double *)(a1 + v21);
        CFAbsoluteTime v25 = a2;
        if (v21 == 32)
        {
          __int16 v28 = a2;
          while (v24 < v28)
          {
            char v26 = v28 - 4;
            double v29 = vabdd_f64(v19, *(v28 - 2));
            v28 -= 4;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          char v26 = v28;
        }
        else
        {
          do
          {
            char v26 = v25 - 4;
            double v27 = vabdd_f64(v19, *(v25 - 2));
            v25 -= 4;
          }
          while (v27 >= v20);
        }
LABEL_22:
        int v12 = v24;
        if (v24 < v26)
        {
          uint64_t v30 = v26;
          do
          {
            long long v120 = *(_OWORD *)v12;
            long long v129 = *((_OWORD *)v12 + 1);
            long long v31 = *((_OWORD *)v30 + 1);
            *(_OWORD *)int v12 = *(_OWORD *)v30;
            *((_OWORD *)v12 + 1) = v31;
            *(_OWORD *)uint64_t v30 = v120;
            *((_OWORD *)v30 + 1) = v129;
            double v32 = *a3;
            double v33 = vabdd_f64(*a3, v18);
            do
            {
              double v34 = v12[6];
              v12 += 4;
            }
            while (vabdd_f64(v32, v34) < v33);
            do
            {
              double v35 = *(v30 - 2);
              v30 -= 4;
            }
            while (vabdd_f64(v32, v35) >= v33);
          }
          while (v12 < v30);
        }
        __int16 v36 = v12 - 4;
        if (v12 - 4 != (double *)a1)
        {
          long long v37 = *((_OWORD *)v12 - 1);
          *(_OWORD *)a1 = *(_OWORD *)v36;
          *(_OWORD *)(a1 + 16) = v37;
        }
        *(_OWORD *)__int16 v36 = v116;
        *(v12 - 2) = v18;
        *((void *)v12 - 1) = v22;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        sub_101A1FA58(a1, v12 - 4, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v38 = sub_101A2044C((double *)a1, v12 - 4, a3);
      if (sub_101A2044C(v12, a2, a3)) {
        break;
      }
      if (!v38) {
        goto LABEL_33;
      }
    }
    a2 = v12 - 4;
    if (!v38) {
      continue;
    }
    break;
  }
}

double *sub_101A20380(double *result, double *a2, double *a3, double *a4)
{
  double v4 = vabdd_f64(*a4, a2[2]);
  double v5 = vabdd_f64(*a4, a3[2]);
  if (v4 >= vabdd_f64(*a4, result[2]))
  {
    if (v5 < v4)
    {
      long long v10 = *(_OWORD *)a2;
      long long v9 = *((_OWORD *)a2 + 1);
      long long v11 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v11;
      *(_OWORD *)a3 = v10;
      *((_OWORD *)a3 + 1) = v9;
      if (vabdd_f64(*a4, a2[2]) < vabdd_f64(*a4, result[2]))
      {
        long long v13 = *(_OWORD *)result;
        long long v12 = *((_OWORD *)result + 1);
        long long v14 = *((_OWORD *)a2 + 1);
        *(_OWORD *)uint64_t result = *(_OWORD *)a2;
        *((_OWORD *)result + 1) = v14;
        *(_OWORD *)a2 = v13;
        *((_OWORD *)a2 + 1) = v12;
      }
    }
  }
  else
  {
    if (v5 >= v4)
    {
      long long v16 = *(_OWORD *)result;
      long long v15 = *((_OWORD *)result + 1);
      long long v17 = *((_OWORD *)a2 + 1);
      *(_OWORD *)uint64_t result = *(_OWORD *)a2;
      *((_OWORD *)result + 1) = v17;
      *(_OWORD *)a2 = v16;
      *((_OWORD *)a2 + 1) = v15;
      if (vabdd_f64(*a4, a3[2]) >= vabdd_f64(*a4, a2[2])) {
        return result;
      }
      long long v7 = *(_OWORD *)a2;
      long long v6 = *((_OWORD *)a2 + 1);
      long long v18 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v18;
    }
    else
    {
      long long v7 = *(_OWORD *)result;
      long long v6 = *((_OWORD *)result + 1);
      long long v8 = *((_OWORD *)a3 + 1);
      *(_OWORD *)uint64_t result = *(_OWORD *)a3;
      *((_OWORD *)result + 1) = v8;
    }
    *(_OWORD *)a3 = v7;
    *((_OWORD *)a3 + 1) = v6;
  }
  return result;
}

BOOL sub_101A2044C(double *a1, double *a2, double *a3)
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (vabdd_f64(*a3, *(a2 - 2)) < vabdd_f64(*a3, a1[2]))
      {
        long long v9 = *(_OWORD *)a1;
        long long v8 = *((_OWORD *)a1 + 1);
        long long v10 = *((_OWORD *)a2 - 1);
        *(_OWORD *)a1 = *((_OWORD *)a2 - 2);
        *((_OWORD *)a1 + 1) = v10;
        *((_OWORD *)a2 - 2) = v9;
        *((_OWORD *)a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_101A20380(a1, a1 + 4, a2 - 4, a3);
      return 1;
    case 4:
      sub_101A206F8(a1, a1 + 4, a1 + 8, (uint64_t)(a2 - 4), a3);
      return 1;
    case 5:
      uint64_t v22 = (long long *)(a1 + 4);
      double v23 = (long long *)(a1 + 8);
      int v24 = (long long *)(a1 + 12);
      sub_101A206F8(a1, a1 + 4, a1 + 8, (uint64_t)(a1 + 12), a3);
      if (vabdd_f64(*a3, *(a2 - 2)) < vabdd_f64(*a3, a1[14]))
      {
        long long v26 = *v24;
        long long v25 = *((_OWORD *)a1 + 7);
        long long v27 = *((_OWORD *)a2 - 1);
        long long *v24 = *((_OWORD *)a2 - 2);
        *((_OWORD *)a1 + 7) = v27;
        *((_OWORD *)a2 - 2) = v26;
        *((_OWORD *)a2 - 1) = v25;
        if (vabdd_f64(*a3, a1[14]) < vabdd_f64(*a3, a1[10]))
        {
          long long v29 = *v23;
          long long v28 = *((_OWORD *)a1 + 5);
          long long v30 = *((_OWORD *)a1 + 7);
          long long *v23 = *v24;
          *((_OWORD *)a1 + 5) = v30;
          long long *v24 = v29;
          *((_OWORD *)a1 + 7) = v28;
          if (vabdd_f64(*a3, a1[10]) < vabdd_f64(*a3, a1[6]))
          {
            long long v32 = *v22;
            long long v31 = *((_OWORD *)a1 + 3);
            long long v33 = *((_OWORD *)a1 + 5);
            *uint64_t v22 = *v23;
            *((_OWORD *)a1 + 3) = v33;
            long long *v23 = v32;
            *((_OWORD *)a1 + 5) = v31;
            if (vabdd_f64(*a3, a1[6]) < vabdd_f64(*a3, a1[2]))
            {
              long long v35 = *(_OWORD *)a1;
              long long v34 = *((_OWORD *)a1 + 1);
              long long v36 = *((_OWORD *)a1 + 3);
              *(_OWORD *)a1 = *v22;
              *((_OWORD *)a1 + 1) = v36;
              *uint64_t v22 = v35;
              *((_OWORD *)a1 + 3) = v34;
            }
          }
        }
      }
      return 1;
    default:
      long long v11 = a1 + 8;
      sub_101A20380(a1, a1 + 4, a1 + 8, a3);
      long long v12 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      double v15 = *a3;
      break;
  }
  while (1)
  {
    double v16 = v12[2];
    if (vabdd_f64(v15, v16) < vabdd_f64(v15, v11[2])) {
      break;
    }
LABEL_15:
    long long v11 = v12;
    v13 += 32;
    v12 += 4;
    if (v12 == a2) {
      return 1;
    }
  }
  long long v37 = *(_OWORD *)v12;
  uint64_t v17 = *((void *)v12 + 3);
  uint64_t v18 = v13;
  while (1)
  {
    double v19 = (char *)a1 + v18;
    long long v20 = *(_OWORD *)((char *)a1 + v18 + 80);
    *((_OWORD *)v19 + 6) = *(_OWORD *)((char *)a1 + v18 + 64);
    *((_OWORD *)v19 + 7) = v20;
    if (v18 == -64) {
      break;
    }
    v18 -= 32;
    if (vabdd_f64(*a3, v16) >= vabdd_f64(*a3, *((double *)v19 + 6)))
    {
      uint64_t v21 = (uint64_t)a1 + v18 + 96;
      goto LABEL_13;
    }
  }
  uint64_t v21 = (uint64_t)a1;
LABEL_13:
  *(_OWORD *)uint64_t v21 = v37;
  *(double *)(v21 + 16) = v16;
  *(void *)(v21 + 24) = v17;
  if (++v14 != 8)
  {
    double v15 = *a3;
    goto LABEL_15;
  }
  return v12 + 4 == a2;
}

__n128 sub_101A206F8(double *a1, double *a2, double *a3, uint64_t a4, double *a5)
{
  sub_101A20380(a1, a2, a3, a5);
  result.n128_f64[0] = vabdd_f64(*a5, a3[2]);
  if (vabdd_f64(*a5, *(double *)(a4 + 16)) < result.n128_f64[0])
  {
    long long v11 = *(_OWORD *)a3;
    __n128 result = *(__n128 *)(a3 + 2);
    long long v12 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *((_OWORD *)a3 + 1) = v12;
    *(_OWORD *)a4 = v11;
    *(__n128 *)(a4 + 16) = result;
    result.n128_f64[0] = vabdd_f64(*a5, a2[2]);
    if (vabdd_f64(*a5, a3[2]) < result.n128_f64[0])
    {
      long long v13 = *(_OWORD *)a2;
      __n128 result = *(__n128 *)(a2 + 2);
      long long v14 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v14;
      *(_OWORD *)a3 = v13;
      *((__n128 *)a3 + 1) = result;
      result.n128_f64[0] = vabdd_f64(*a5, a1[2]);
      if (vabdd_f64(*a5, a2[2]) < result.n128_f64[0])
      {
        long long v15 = *(_OWORD *)a1;
        __n128 result = *(__n128 *)(a1 + 2);
        long long v16 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v16;
        *(_OWORD *)a2 = v15;
        *((__n128 *)a2 + 1) = result;
      }
    }
  }
  return result;
}

void sub_101A207CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if ((MGGetBoolAnswer() & 1) == 0 && (MGGetBoolAnswer() & 1) == 0)
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10234D3D0);
    }
    uint64_t v18 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v24 = 0;
      __int16 v25 = 2082;
      long long v26 = "";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Simulator, Not supported HW\"}", buf, 0x12u);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10234D3D0);
      }
    }
    uint64_t v17 = qword_102419108;
    if (!os_signpost_enabled((os_log_t)qword_102419108)) {
      return;
    }
    *(_DWORD *)std::string buf = 68289026;
    int v24 = 0;
    __int16 v25 = 2082;
    long long v26 = "";
    long long v12 = "Simulator, Not supported HW";
    long long v13 = "{\"msg%{public}.0s\":\"Simulator, Not supported HW\"}";
LABEL_29:
    long long v14 = v17;
    uint32_t v15 = 18;
    goto LABEL_30;
  }
  BOOL v22 = 0;
  sub_1000D29FC(*(void *)(v1 + 24), @"EnableSimulateVehicularCrash", &v22);
  if (!v22)
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10234D3D0);
    }
    long long v16 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v24 = 0;
      __int16 v25 = 2082;
      long long v26 = "";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Simulator, Not enabled\"}", buf, 0x12u);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_10234D3D0);
      }
    }
    uint64_t v17 = qword_102419108;
    if (!os_signpost_enabled((os_log_t)qword_102419108)) {
      return;
    }
    *(_DWORD *)std::string buf = 68289026;
    int v24 = 0;
    __int16 v25 = 2082;
    long long v26 = "";
    long long v12 = "Simulator, Not enabled";
    long long v13 = "{\"msg%{public}.0s\":\"Simulator, Not enabled\"}";
    goto LABEL_29;
  }
  float v2 = *(void **)(v1 + 8);
  if (!v2)
  {
LABEL_33:
    *(void *)(v1 + 8) = objc_alloc_init((Class)NSDate);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10234D3D0);
    }
    long long v20 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = *(void *)(v1 + 8);
      *(_DWORD *)std::string buf = 68289282;
      int v24 = 0;
      __int16 v25 = 2082;
      long long v26 = "";
      __int16 v27 = 2114;
      uint64_t v28 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Simulator, triggered\", \"at\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    [+[SOSKappaManager sharedInstance] triggerKappaWithCompletion:&stru_10234D3B0];
    return;
  }
  [v2 timeIntervalSinceNow];
  double v4 = v3;
  [*(id *)(v1 + 8) timeIntervalSinceNow];
  if (v4 < 0.0) {
    double v5 = -v5;
  }
  if (v5 >= 30.0)
  {
    double v19 = *(void **)(v1 + 8);
    if (v19)
    {

      *(void *)(v1 + 8) = 0;
    }
    goto LABEL_33;
  }
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10234D3D0);
  }
  uint64_t v6 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = *(void *)(v1 + 8);
    long long v8 = +[NSDate now];
    *(_DWORD *)std::string buf = 68289538;
    int v24 = 0;
    __int16 v25 = 2082;
    long long v26 = "";
    __int16 v27 = 2114;
    uint64_t v28 = v7;
    __int16 v29 = 2114;
    long long v30 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Simulator, Too frequent trigger\", \"Previous at\":%{public, location:escape_only}@, \"Current at\":%{public, location:escape_only}@}", buf, 0x26u);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_10234D3D0);
    }
  }
  uint64_t v9 = qword_102419108;
  if (os_signpost_enabled((os_log_t)qword_102419108))
  {
    uint64_t v10 = *(void *)(v1 + 8);
    long long v11 = +[NSDate now];
    *(_DWORD *)std::string buf = 68289538;
    int v24 = 0;
    __int16 v25 = 2082;
    long long v26 = "";
    __int16 v27 = 2114;
    uint64_t v28 = v10;
    __int16 v29 = 2114;
    long long v30 = v11;
    long long v12 = "Simulator, Too frequent trigger";
    long long v13 = "{\"msg%{public}.0s\":\"Simulator, Too frequent trigger\", \"Previous at\":%{public, location:escape_only}@, \""
          "Current at\":%{public, location:escape_only}@}";
    long long v14 = v9;
    uint32_t v15 = 38;
LABEL_30:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v12, v13, buf, v15);
  }
}

uint64_t sub_101A20CE8()
{
  if (qword_1024897F0 != -1) {
    dispatch_once(&qword_1024897F0, &stru_10234D370);
  }
  return qword_1024897E8;
}

void sub_101A20D2C(id a1)
{
  if (sub_1007414F8())
  {
    sub_100103240();
    if ((sub_1000A16E8() & 0x2000000000000) != 0)
    {
      if (amfi_developer_mode_status())
      {
        +[CLIntersiloUniverse newSharedVendorUniverseWithSilo:sub_1009E8E44()];
        operator new();
      }
    }
  }
  qword_1024897E8 = 0;
}

void sub_101A20E7C()
{
}

void sub_101A20ED4(id a1, int64_t a2, NSUUID *a3)
{
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_10234D3D0);
  }
  double v4 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    __int16 v6 = 2082;
    uint64_t v7 = "";
    __int16 v8 = 2050;
    int64_t v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Simulator, trigger\", \"response\":%{public}ld}", (uint8_t *)v5, 0x1Cu);
  }
}

void sub_101A20FBC(id a1)
{
  qword_102419108 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Kappa");
}

void sub_101A20FEC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_101A21054(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_101A21090(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_101A210C8(uint64_t a1)
{
  uint64_t v2 = sub_1000A6958();
  double v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  unsigned int v5 = 0;
  if (sub_10006EF84(v2, v3, &v5)) {
    return v5;
  }
  else {
    return 1;
  }
}

uint64_t sub_101A21144(uint64_t a1, unsigned int a2)
{
  unsigned int v7 = a2;
  uint64_t v3 = sub_1000A6958();
  double v4 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  sub_1004D2BC4(v3, v4, &v7);
  uint64_t v5 = *(void *)sub_1000A6958();
  return (*(uint64_t (**)(void))(v5 + 944))();
}

uint64_t sub_101A211EC(uint64_t *a1)
{
  sub_100103240();
  int v2 = sub_10073E30C();
  uint64_t v3 = *a1;
  if (v2) {
    int v4 = (*(uint64_t (**)(uint64_t *))(v3 + 96))(a1);
  }
  else {
    int v4 = (*(uint64_t (**)(uint64_t *))(v3 + 88))(a1);
  }
  int v9 = v4;
  uint64_t v5 = (const char *)(*(uint64_t (**)(uint64_t *))(*a1 + 80))(a1);
  sub_101A21DA8(v7, v5, &v9, 0);
  return v8;
}

uint64_t sub_101A212B8(uint64_t a1)
{
  int v2 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
  sub_101A21DA8(v5, v2, &v4, 0);
  return v6;
}

uint64_t sub_101A2134C(uint64_t a1)
{
  int v2 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  sub_101A21DA8(v5, v2, &v4, 0);
  return v6;
}

uint64_t sub_101A213E0(uint64_t a1)
{
  int v2 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 168))(a1);
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  sub_101A21DA8(v5, v2, &v4, 0);
  return v6;
}

uint64_t sub_101A21474(uint64_t a1)
{
  int v2 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  unsigned __int8 v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  sub_10006ACBC(v5, v2, &v4, 0);
  return v5[1];
}

uint64_t sub_101A21508(uint64_t a1)
{
  int v2 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  unsigned __int8 v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
  sub_10006ACBC(v5, v2, &v4, 0);
  return v5[1];
}

double sub_101A2159C(uint64_t a1)
{
  double v8 = (*(double (**)(uint64_t))(*(void *)a1 + 184))(a1);
  uint64_t v2 = sub_1000A6958();
  uint64_t v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  sub_1000A699C(v2, v3, &v8);
  if (qword_102419190 != -1) {
    dispatch_once(&qword_102419190, &stru_10234D550);
  }
  unsigned __int8 v4 = qword_102419198;
  if (os_log_type_enabled((os_log_t)qword_102419198, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 134217984;
    v12[0] = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLRecordingSettings: Getting server Sampling Rate in CLDaemonCache: %f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419190 != -1) {
      dispatch_once(&qword_102419190, &stru_10234D550);
    }
    int v9 = 134217984;
    double v10 = v8;
    unsigned int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "double CLRecordingSettings::getRecordingRateLimitingSamplingRate()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  uint64_t v5 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  sub_101A1F180(buf, v5, &v8, 0);
  return *(double *)((char *)v12 + 4);
}

uint64_t sub_101A217FC(uint64_t a1, double a2)
{
  double v10 = a2;
  if (qword_102419190 != -1) {
    dispatch_once(&qword_102419190, &stru_10234D550);
  }
  unsigned __int8 v4 = qword_102419198;
  if (os_log_type_enabled((os_log_t)qword_102419198, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 134217984;
    double v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLRecordingSettings: Setting Sampling Rate in CLDaemonCache to: %f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419190 != -1) {
      dispatch_once(&qword_102419190, &stru_10234D550);
    }
    int v11 = 134217984;
    double v12 = a2;
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRecordingSettings::setSamplingRate(double)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  uint64_t v5 = sub_1000A6958();
  unsigned int v6 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  sub_10016332C(v5, v6, &v10);
  uint64_t v7 = *(void *)sub_1000A6958();
  return (*(uint64_t (**)(void))(v7 + 944))();
}

uint64_t sub_101A21A34(uint64_t a1)
{
  uint64_t v2 = sub_1000A6958();
  uint64_t v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  sub_1004CF7DC(v2, v3, 0xFFFFFFFFLL);
  unsigned __int8 v4 = *(uint64_t (**)(void))(*(void *)sub_1000A6958() + 944);

  return v4();
}

uint64_t sub_101A21ADC(uint64_t a1)
{
  uint64_t v2 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 208))(a1);
  unsigned __int8 v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
  sub_10006ACBC(v5, v2, &v4, 0);
  return v5[1];
}

uint64_t sub_101A21B70(uint64_t a1)
{
  uint64_t v2 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 224))(a1);
  unsigned __int8 v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 232))(a1);
  sub_10006ACBC(v5, v2, &v4, 0);
  return v5[1];
}

unint64_t sub_101A21C04()
{
  int v1 = 1119092736;
  sub_101A22680(v2, "WorkoutRecorderPowerAssertionDuration", &v1, 0);
  return v3 | (unint64_t)&_mh_execute_header;
}

void sub_101A21C4C()
{
}

CFStringRef sub_101A21C60()
{
  return @"com.apple.locationd.CLWorkoutRecorderPublisher";
}

CFStringRef sub_101A21C6C()
{
  return @"CLWorkoutRecorderPublisherSubjectUUID";
}

CFStringRef sub_101A21C78()
{
  return @"CLWorkoutRecorderPublisherSubjectToken";
}

void *sub_101A21C84@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "WorkoutRecording");
}

CFStringRef sub_101A21C94()
{
  return @"CLWorkoutRecorderPublishedCount";
}

const char *sub_101A21CA0()
{
  return "WorkoutRecorderRateLimitingSampling";
}

const char *sub_101A21CAC()
{
  return "WorkoutRecorderIntervalCount";
}

const char *sub_101A21CB8()
{
  return "WorkoutRecorderPublisherMaxPerUUID";
}

uint64_t sub_101A21CC4()
{
  return 10;
}

uint64_t sub_101A21CCC()
{
  return 30;
}

const char *sub_101A21CD4()
{
  return "WorkoutRecorderRateLimitingDisable";
}

uint64_t sub_101A21CE0()
{
  return 0;
}

const char *sub_101A21CE8()
{
  return "WorkoutRecorderRateLimitingDisableInternalInstallBypass";
}

uint64_t sub_101A21CF4()
{
  return 0;
}

const char *sub_101A21CFC()
{
  return "WorkoutRecorderSamplingInterval";
}

uint64_t sub_101A21D08()
{
  return 3;
}

const char *sub_101A21D10()
{
  return "WorkoutRecorderNumSamplesPerInterval";
}

uint64_t sub_101A21D1C()
{
  return 2;
}

const char *sub_101A21D24()
{
  return "WorkoutRecorderRecordingFileCountMax";
}

uint64_t sub_101A21D30()
{
  return 9;
}

double sub_101A21D38()
{
  return 0.0;
}

double sub_101A21D40()
{
  return 1.0;
}

double sub_101A21D48()
{
  return 0.0;
}

const char *sub_101A21D50()
{
  return "WorkoutRecorderListenersHeartRateDisable";
}

uint64_t sub_101A21D5C()
{
  return 0;
}

const char *sub_101A21D64()
{
  return "WorkoutRecorderListenersForceActiveDisable";
}

uint64_t sub_101A21D70()
{
  return 1;
}

void sub_101A21D78(id a1)
{
  qword_102419198 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

unsigned __int8 *sub_101A21DA8(unsigned __int8 *a1, const char *a2, _DWORD *a3, unsigned __int8 a4)
{
  *a1 = 0;
  *((_DWORD *)a1 + 1) = *a3;
  unsigned int v6 = a1 + 4;
  a1[8] = a4;
  uint64_t v7 = sub_1000D3E78();
  sub_10006B564(v7, buf);
  *a1 = sub_1004D0870(*(uint64_t *)buf, a2, v6);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10010F274((uint64_t)v28);
  std::ostream::operator<<();
  if (!a1[8])
  {
    if (*a1)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234D570);
      }
      double v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *a1;
        std::stringbuf::str();
        double v12 = SBYTE3(v34) >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v11;
        __int16 v36 = 2080;
        long long v37 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v34) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_47;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234D570);
      }
      int v13 = *a1;
      std::stringbuf::str();
      if (v27 >= 0) {
        double v14 = v26;
      }
      else {
        double v14 = (void **)v26[0];
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = a2;
      __int16 v31 = 1024;
      int v32 = v13;
      __int16 v33 = 2080;
      long long v34 = v14;
      uint32_t v15 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0) {
        operator delete(v26[0]);
      }
    }
    else
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234D570);
      }
      double v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        int v20 = *a1;
        std::stringbuf::str();
        uint64_t v21 = SBYTE3(v34) >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v20;
        __int16 v36 = 2080;
        long long v37 = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v34) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_47;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234D570);
      }
      int v24 = *a1;
      std::stringbuf::str();
      if (v27 >= 0) {
        __int16 v25 = v26;
      }
      else {
        __int16 v25 = (void **)v26[0];
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = a2;
      __int16 v31 = 1024;
      int v32 = v24;
      __int16 v33 = 2080;
      long long v34 = v25;
      uint32_t v15 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0) {
        operator delete(v26[0]);
      }
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionDefaultsWrite<unsigned int>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = unsigned int]", "%s\n", v15);
    if (v15 == buf) {
      goto LABEL_47;
    }
    goto LABEL_58;
  }
  if (*a1)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10234D570);
    }
    double v8 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *a1;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1)
      {
LABEL_36:
        int v18 = *a1;
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = a2;
        __int16 v31 = 1024;
        int v32 = v18;
        uint32_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionDefaultsWrite<unsigned int>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = unsigned int]", "%s\n", v15);
        if (v15 == buf) {
          goto LABEL_47;
        }
LABEL_58:
        free(v15);
        goto LABEL_47;
      }
LABEL_59:
      dispatch_once(&qword_102418FD0, &stru_10234D570);
      goto LABEL_36;
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10234D570);
    }
    long long v16 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      int v17 = *a1;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1) {
        goto LABEL_36;
      }
      goto LABEL_59;
    }
  }
LABEL_47:
  *(void *)((char *)v28
  v28[2] = v22;
  if (v29 < 0) {
    operator delete((void *)v28[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return a1;
}

void sub_101A22600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101A22650(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

unsigned __int8 *sub_101A22680(unsigned __int8 *a1, const char *a2, _DWORD *a3, unsigned __int8 a4)
{
  *a1 = 0;
  *((_DWORD *)a1 + 1) = *a3;
  unsigned int v6 = (float *)(a1 + 4);
  a1[8] = a4;
  uint64_t v7 = sub_1000D3E78();
  sub_10006B564(v7, buf);
  *a1 = sub_1004D11B0(*(uint64_t *)buf, a2, v6);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10010F274((uint64_t)v28);
  std::ostream::operator<<();
  if (!a1[8])
  {
    if (*a1)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234D570);
      }
      double v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *a1;
        std::stringbuf::str();
        double v12 = SBYTE3(v34) >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v11;
        __int16 v36 = 2080;
        long long v37 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v34) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_47;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234D570);
      }
      int v13 = *a1;
      std::stringbuf::str();
      if (v27 >= 0) {
        double v14 = v26;
      }
      else {
        double v14 = (void **)v26[0];
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = a2;
      __int16 v31 = 1024;
      int v32 = v13;
      __int16 v33 = 2080;
      long long v34 = v14;
      uint32_t v15 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0) {
        operator delete(v26[0]);
      }
    }
    else
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234D570);
      }
      double v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        int v20 = *a1;
        std::stringbuf::str();
        uint64_t v21 = SBYTE3(v34) >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v20;
        __int16 v36 = 2080;
        long long v37 = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v34) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_47;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234D570);
      }
      int v24 = *a1;
      std::stringbuf::str();
      if (v27 >= 0) {
        __int16 v25 = v26;
      }
      else {
        __int16 v25 = (void **)v26[0];
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = a2;
      __int16 v31 = 1024;
      int v32 = v24;
      __int16 v33 = 2080;
      long long v34 = v25;
      uint32_t v15 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0) {
        operator delete(v26[0]);
      }
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionDefaultsWrite<float>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = float]", "%s\n", v15);
    if (v15 == buf) {
      goto LABEL_47;
    }
    goto LABEL_58;
  }
  if (*a1)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10234D570);
    }
    double v8 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *a1;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1)
      {
LABEL_36:
        int v18 = *a1;
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = a2;
        __int16 v31 = 1024;
        int v32 = v18;
        uint32_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionDefaultsWrite<float>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = float]", "%s\n", v15);
        if (v15 == buf) {
          goto LABEL_47;
        }
LABEL_58:
        free(v15);
        goto LABEL_47;
      }
LABEL_59:
      dispatch_once(&qword_102418FD0, &stru_10234D570);
      goto LABEL_36;
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10234D570);
    }
    long long v16 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      int v17 = *a1;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1) {
        goto LABEL_36;
      }
      goto LABEL_59;
    }
  }
LABEL_47:
  *(void *)((char *)v28
  v28[2] = v22;
  if (v29 < 0) {
    operator delete((void *)v28[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return a1;
}

void sub_101A22ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101A23454(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_101A23B64(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x7D7]) < 0) {
    operator delete((void *)STACK[0x7C0]);
  }
  _Unwind_Resume(a1);
}

void *sub_101A24054(void *result)
{
  if (result[4] == *(void *)(result[5] + 24)) {
    return (void *)(*(uint64_t (**)(void))(result[6] + 16))();
  }
  return result;
}

void sub_101A254B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_101A25564(uint64_t a1)
{
  [*(id *)(a1 + 32) releasePowerAssertion:@"schedule release power"];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 cancelDeferredStopTimer];
}

void sub_101A2564C(id a1)
{
  qword_102419198 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void sub_101A258E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

id sub_101A25E4C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (qword_102419190 != -1) {
    dispatch_once(&qword_102419190, &stru_10234D5D8);
  }
  uint64_t v7 = qword_102419198;
  if (os_log_type_enabled((os_log_t)qword_102419198, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLWorkoutRecorderTrigger: onMotionStateObserverNotification_bounce:", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419190 != -1) {
      dispatch_once(&qword_102419190, &stru_10234D5D8);
    }
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void onMotionStateObserverNotification_bounce(int, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &, void *)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  return [a4 onMotionStateObserverNotification:a2 data:a3];
}

void sub_101A27318(_Unwind_Exception *a1)
{
  sub_101A27420(v1 - 208);
  _Unwind_Resume(a1);
}

id sub_101A27354(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 280);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 281);
  long long v4 = *(_OWORD *)(a1 + 216);
  long long v5 = *(_OWORD *)(a1 + 248);
  v12[12] = *(_OWORD *)(a1 + 232);
  v12[13] = v5;
  uint64_t v13 = *(void *)(a1 + 264);
  long long v6 = *(_OWORD *)(a1 + 152);
  long long v7 = *(_OWORD *)(a1 + 184);
  v12[8] = *(_OWORD *)(a1 + 168);
  v12[9] = v7;
  v12[10] = *(_OWORD *)(a1 + 200);
  v12[11] = v4;
  long long v8 = *(_OWORD *)(a1 + 88);
  long long v9 = *(_OWORD *)(a1 + 120);
  void v12[4] = *(_OWORD *)(a1 + 104);
  void v12[5] = v9;
  v12[6] = *(_OWORD *)(a1 + 136);
  v12[7] = v6;
  long long v10 = *(_OWORD *)(a1 + 56);
  v12[0] = *(_OWORD *)(a1 + 40);
  v12[1] = v10;
  _OWORD v12[2] = *(_OWORD *)(a1 + 72);
  void v12[3] = v8;
  return [v1 onDeferredStopTimerShouldPublish:1 recordSubsequentSession:v2 isMultiSportSession:v3 withEvent:v12 triggerDelay:*(double *)(a1 + 272)];
}

uint64_t sub_101A27420(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

id sub_101A2745C(uint64_t a1)
{
  return [*(id *)(a1 + 32) onDeferredStopTimerShouldPublish:1];
}

void sub_101A275D0(id a1)
{
  qword_102419198 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

uint64_t sub_101A27600()
{
  sub_100134750(qword_1024897F8, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1024897F8, (void *)&_mh_execute_header);
}

void sub_101A27710(id a1)
{
  qword_102489828 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLWorkoutRecorderSilo"];
}

void sub_101A280F8()
{
}

id sub_101A28124(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onDataProtectionNotification:a2 data:a3];
}

void sub_101A29E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_101A2A660(id a1)
{
  qword_102419198 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void sub_101A2A690(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

BOOL *sub_101A2A6C0(BOOL *a1, const char *a2, long long *a3, unsigned __int8 a4)
{
  *a1 = 0;
  long long v7 = (std::string *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C(a1 + 8, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *((void *)a1 + 3) = *((void *)a3 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  a1[32] = a4;
  uint64_t v9 = sub_1000D3E78();
  sub_10006B564(v9, buf);
  *a1 = sub_1004D1284(*(uint64_t *)buf, a2, v7);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10010F274((uint64_t)v33);
  int v10 = a1[31];
  if (v10 >= 0) {
    uint64_t v11 = (uint64_t)v7;
  }
  else {
    uint64_t v11 = *((void *)a1 + 1);
  }
  if (v10 >= 0) {
    uint64_t v12 = a1[31];
  }
  else {
    uint64_t v12 = *((void *)a1 + 2);
  }
  sub_100132EFC(v34, v11, v12);
  if (!a1[32])
  {
    if (*a1)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234D638);
      }
      uint32_t v15 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v16 = *a1;
        std::stringbuf::str();
        int v17 = SBYTE3(v40) >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v16;
        __int16 v42 = 2080;
        int v43 = v17;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v40) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_56;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234D638);
      }
      BOOL v18 = *a1;
      std::stringbuf::str();
      if (v32 >= 0) {
        double v19 = v31;
      }
      else {
        double v19 = (void **)v31[0];
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = a2;
      __int16 v37 = 1024;
      BOOL v38 = v18;
      __int16 v39 = 2080;
      double v40 = v19;
      int v20 = (char *)_os_log_send_and_compose_impl();
      if (v32 < 0) {
        operator delete(v31[0]);
      }
    }
    else
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234D638);
      }
      int v24 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        BOOL v25 = *a1;
        std::stringbuf::str();
        long long v26 = SBYTE3(v40) >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v25;
        __int16 v42 = 2080;
        int v43 = v26;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v40) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_56;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234D638);
      }
      BOOL v29 = *a1;
      std::stringbuf::str();
      if (v32 >= 0) {
        long long v30 = v31;
      }
      else {
        long long v30 = (void **)v31[0];
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = a2;
      __int16 v37 = 1024;
      BOOL v38 = v29;
      __int16 v39 = 2080;
      double v40 = v30;
      int v20 = (char *)_os_log_send_and_compose_impl();
      if (v32 < 0) {
        operator delete(v31[0]);
      }
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionDefaultsWrite<std::string>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = std::string]", "%s\n", v20);
    if (v20 == buf) {
      goto LABEL_56;
    }
    goto LABEL_67;
  }
  if (*a1)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10234D638);
    }
    uint64_t v13 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v14 = *a1;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1)
      {
LABEL_45:
        BOOL v23 = *a1;
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = a2;
        __int16 v37 = 1024;
        BOOL v38 = v23;
        int v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionDefaultsWrite<std::string>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = std::string]", "%s\n", v20);
        if (v20 == buf) {
          goto LABEL_56;
        }
LABEL_67:
        free(v20);
        goto LABEL_56;
      }
LABEL_68:
      dispatch_once(&qword_102418FD0, &stru_10234D638);
      goto LABEL_45;
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10234D638);
    }
    uint64_t v21 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      BOOL v22 = *a1;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1) {
        goto LABEL_45;
      }
      goto LABEL_68;
    }
  }
LABEL_56:
  *(void *)((char *)v33
  v34[0] = v27;
  if (v35 < 0) {
    operator delete((void *)v34[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return a1;
}

void sub_101A2AF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_101A129A8((uint64_t)va);
  if (*(char *)(v6 + 31) < 0) {
    operator delete(*v7);
  }
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_101A2AFB4(unsigned __int8 *a1, const char *a2, void *a3, unsigned __int8 a4)
{
  *a1 = 0;
  *((void *)a1 + 1) = *a3;
  uint64_t v6 = a1 + 8;
  a1[16] = a4;
  uint64_t v7 = sub_1000D3E78();
  sub_10006B564(v7, buf);
  *a1 = sub_1004D0B90(*(uint64_t *)buf, a2, v6);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10010F274((uint64_t)v28);
  std::ostream::operator<<();
  if (!a1[16])
  {
    if (*a1)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234D638);
      }
      int v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *a1;
        std::stringbuf::str();
        uint64_t v12 = SBYTE3(v34) >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v11;
        __int16 v36 = 2080;
        __int16 v37 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v34) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_47;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234D638);
      }
      int v13 = *a1;
      std::stringbuf::str();
      if (v27 >= 0) {
        BOOL v14 = v26;
      }
      else {
        BOOL v14 = (void **)v26[0];
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = a2;
      __int16 v31 = 1024;
      int v32 = v13;
      __int16 v33 = 2080;
      long long v34 = v14;
      uint32_t v15 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0) {
        operator delete(v26[0]);
      }
    }
    else
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234D638);
      }
      double v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        int v20 = *a1;
        std::stringbuf::str();
        uint64_t v21 = SBYTE3(v34) >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v20;
        __int16 v36 = 2080;
        __int16 v37 = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v34) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_47;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234D638);
      }
      int v24 = *a1;
      std::stringbuf::str();
      if (v27 >= 0) {
        BOOL v25 = v26;
      }
      else {
        BOOL v25 = (void **)v26[0];
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = a2;
      __int16 v31 = 1024;
      int v32 = v24;
      __int16 v33 = 2080;
      long long v34 = v25;
      uint32_t v15 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0) {
        operator delete(v26[0]);
      }
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionDefaultsWrite<long long>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = long long]", "%s\n", v15);
    if (v15 == buf) {
      goto LABEL_47;
    }
    goto LABEL_58;
  }
  if (*a1)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10234D638);
    }
    long long v8 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *a1;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1)
      {
LABEL_36:
        int v18 = *a1;
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = a2;
        __int16 v31 = 1024;
        int v32 = v18;
        uint32_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionDefaultsWrite<long long>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = long long]", "%s\n", v15);
        if (v15 == buf) {
          goto LABEL_47;
        }
LABEL_58:
        free(v15);
        goto LABEL_47;
      }
LABEL_59:
      dispatch_once(&qword_102418FD0, &stru_10234D638);
      goto LABEL_36;
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10234D638);
    }
    BOOL v16 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      int v17 = *a1;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1) {
        goto LABEL_36;
      }
      goto LABEL_59;
    }
  }
LABEL_47:
  *(void *)((char *)v28
  v28[2] = v22;
  if (v29 < 0) {
    operator delete((void *)v28[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return a1;
}

void sub_101A2B80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101A2B85C()
{
  sub_100134750(qword_102489810, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102489810, (void *)&_mh_execute_header);
}

id sub_101A2BC78(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onOdometerNotification:a2 data:a3];
}

void sub_101A2BF50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_101A2C254(id a1)
{
  qword_102419198 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

id sub_101A2C698(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onCalorimetryNotification:a2 data:a3];
}

void sub_101A2C8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101A2CAC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_101A2CBC8(id a1)
{
  qword_102419198 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

BOOL sub_101A2CBF8(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
      && *(float *)(a1 + 8) == *(float *)(a2 + 8)
      && *(float *)(a1 + 12) == *(float *)(a2 + 12)
      && *(float *)(a1 + 16) == *(float *)(a2 + 16)
      && *(float *)(a1 + 20) == *(float *)(a2 + 20)
      && *(float *)(a1 + 24) == *(float *)(a2 + 24)
      && *(float *)(a1 + 28) == *(float *)(a2 + 28)
      && *(float *)(a1 + 32) == *(float *)(a2 + 32)
      && *(float *)(a1 + 36) == *(float *)(a2 + 36)
      && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
      && *(float *)(a1 + 44) == *(float *)(a2 + 44)
      && *(float *)(a1 + 52) == *(float *)(a2 + 52)
      && *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48)
      && *(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56)
      && *(unsigned __int8 *)(a1 + 57) == *(unsigned __int8 *)(a2 + 57)
      && *(unsigned __int8 *)(a1 + 58) == *(unsigned __int8 *)(a2 + 58);
}

uint64_t sub_101A2CD14()
{
  sub_100134750(qword_102489838, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102489838, (void *)&_mh_execute_header);
}

void sub_101A2CE24(id a1)
{
  qword_102489868 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLPrivacyManagerSilo"];
}

void sub_101A2D188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101A2D1C8(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *a2;
  sub_100089AE0((char *)v7, (long long *)a3);
  uint64_t v21 = *(void *)(a3 + 184);
  [a4 onClientManagerNotification:v6 data:v7];
  if (v20 < 0) {
    operator delete(__p);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
}

void sub_101A2D294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_101A2D818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

id sub_101A2D830(uint64_t a1)
{
  dispatch_source_cancel(*(dispatch_source_t *)(*(void *)(a1 + 32) + 16));

  *(void *)(*(void *)(a1 + 32) + 16) = 0;
  uint64_t v2 = *(void **)(a1 + 32);

  return _[v2 vacuumAll];
}

BOOL sub_101A2D9EC(void *a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_10234D6B8);
  }
  uint64_t v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 68289282;
    int v16 = 0;
    __int16 v17 = 2082;
    char v18 = "";
    __int16 v19 = 2114;
    char v20 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Vacuuming database\", \"class\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  if ([a1 isEqualToString:@"B"])
  {
    sub_100134750(v8, "");
    uint64_t v10 = 0x100000002;
    __int16 v11 = 0;
    if (SHIBYTE(v9) < 0)
    {
      sub_1000DC48C(&__p, v8[0], (unint64_t)v8[1]);
    }
    else
    {
      long long __p = *(_OWORD *)v8;
      uint64_t v13 = v9;
    }
    uint64_t v14 = 0;
    sub_1005F54CC(buf, &v10);
    if (SHIBYTE(v13) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8[0]);
    }
  }
  else if ([a1 isEqualToString:@"C"])
  {
    sub_100134750(v8, "");
    uint64_t v10 = 0x100000003;
    __int16 v11 = 0;
    if (SHIBYTE(v9) < 0)
    {
      sub_1000DC48C(&__p, v8[0], (unint64_t)v8[1]);
    }
    else
    {
      long long __p = *(_OWORD *)v8;
      uint64_t v13 = v9;
    }
    uint64_t v14 = 0;
    sub_1005F54CC(buf, &v10);
    if (SHIBYTE(v13) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8[0]);
    }
  }
  else
  {
    if (![a1 isEqualToString:@"D"])
    {
      if (qword_102419530 != -1) {
        goto LABEL_42;
      }
      while (1)
      {
        long long v5 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)std::string buf = 68289795;
          int v16 = 0;
          __int16 v17 = 2082;
          char v18 = "";
          __int16 v19 = 2114;
          char v20 = a1;
          __int16 v21 = 2082;
          uint64_t v22 = "assert";
          __int16 v23 = 2081;
          int v24 = "0";
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unexpected encryption class\", \"class\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_10234D6B8);
          }
        }
        uint64_t v6 = qword_102419538;
        if (os_signpost_enabled((os_log_t)qword_102419538))
        {
          *(_DWORD *)std::string buf = 68289795;
          int v16 = 0;
          __int16 v17 = 2082;
          char v18 = "";
          __int16 v19 = 2114;
          char v20 = a1;
          __int16 v21 = 2082;
          uint64_t v22 = "assert";
          __int16 v23 = 2081;
          int v24 = "0";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unexpected encryption class", "{\"msg%{public}.0s\":\"Unexpected encryption class\", \"class\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_10234D6B8);
          }
        }
        uint64_t v7 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 68289795;
          int v16 = 0;
          __int16 v17 = 2082;
          char v18 = "";
          __int16 v19 = 2114;
          char v20 = a1;
          __int16 v21 = 2082;
          uint64_t v22 = "assert";
          __int16 v23 = 2081;
          int v24 = "0";
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Unexpected encryption class\", \"class\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
        }
        abort_report_np();
        __break(1u);
LABEL_42:
        dispatch_once(&qword_102419530, &stru_10234D6B8);
      }
    }
    sub_100134750(v8, "");
    uint64_t v10 = 0x200000000;
    __int16 v11 = 0;
    if (SHIBYTE(v9) < 0)
    {
      sub_1000DC48C(&__p, v8[0], (unint64_t)v8[1]);
    }
    else
    {
      long long __p = *(_OWORD *)v8;
      uint64_t v13 = v9;
    }
    uint64_t v14 = 0;
    sub_1005F54CC(buf, &v10);
    if (SHIBYTE(v13) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8[0]);
    }
  }
  BOOL v3 = sub_100603930((uint64_t)buf);
  sub_1005F5850(buf);
  return v3;
}

void sub_101A2DEF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_101A2DF54(uint64_t a1)
{
  id result = (id)sub_101A2D9EC(@"D");
  if ((result & 1) == 0)
  {
    BOOL v3 = *(void **)(a1 + 32);
    return [v3 retryActivityForEncryptionClass:@"D" reason:1];
  }
  return result;
}

id sub_101A2E040(uint64_t a1, uint64_t a2)
{
  id v4 = [[objc_msgSend(*(id *)(a1 + 32), "universe") silo];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_101A2E0D0;
  void v7[3] = &unk_10229FF28;
  uint64_t v5 = *(void *)(a1 + 40);
  unsigned __int8 v7[4] = *(void *)(a1 + 32);
  v7[5] = a2;
  v7[6] = v5;
  return [v4 sync:v7];
}

id sub_101A2E0D0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) onActivity:*(void *)(a1 + 40) withIdentifier:*(void *)(a1 + 48)];
}

void sub_101A2ED60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
}

void sub_101A2EDE4(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_101A2EE14(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_101A2EE44()
{
}

void sub_101A2EF14()
{
}

uint64_t sub_101A2EF38(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  return result;
}

uint64_t sub_101A2EF9C()
{
  sub_100134750(qword_102489850, "PrivacyManager");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102489850, (void *)&_mh_execute_header);
}

unsigned __int8 *sub_101A2EFFC(unsigned __int8 *a1, void *a2)
{
  BOOL v3 = sub_1005D733C((uint64_t)a1, a2);
  void *v3 = off_10234D708;
  id v4 = v3 + 14;
  sub_101A2F100((uint64_t)v6);
  sub_1005F54CC(v4, v6);
  if (v8 < 0) {
    operator delete(__p);
  }
  v6[0] = 0;
  sub_10006ACBC(a1 + 248, "KeepAllSensorCalibrationRoundsInDb", v6, 0);
  v6[0] = 0;
  sub_10006ACBC(a1 + 251, "LogGyroFactoryCalOnStartup", v6, 0);
  if (a1[252]) {
    sub_101A2F514();
  }
  return a1;
}

void sub_101A2F0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_1005F5850(v17);
  sub_1005D7428(v16);
  _Unwind_Resume(a1);
}

void sub_101A2F100(uint64_t a1@<X8>)
{
  sub_100134750(__p, "");
  *(void *)a1 = 0x400000000;
  *(_WORD *)(a1 + 8) = 0;
  if (SHIBYTE(v14) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 16), __p[0], (unint64_t)__p[1]);
    int v2 = SHIBYTE(v14);
    *(void *)(a1 + 4sub_1019DB7E0(qword_10248D888, 0) = 0;
    if (v2 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__p;
    *(void *)(a1 + 32) = v14;
    *(void *)(a1 + 4sub_1019DB7E0(qword_10248D888, 0) = 0;
  }
  memset(&__str, 0, sizeof(__str));
  uint64_t v3 = sub_1000D3E78();
  sub_10006B564(v3, __p);
  BOOL v4 = sub_1004D1284((uint64_t)__p[0], "GyroCalDbFile", &__str);
  if (__p[1]) {
    sub_1000DB0A0((std::__shared_weak_count *)__p[1]);
  }
  if (v4)
  {
    std::string::operator=((std::string *)(a1 + 16), &__str);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234D850);
    }
    uint64_t v5 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 39) >= 0) {
        uint64_t v6 = (void *)(a1 + 16);
      }
      else {
        uint64_t v6 = *(void **)(a1 + 16);
      }
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Using gyroCal database file: %s.", (uint8_t *)__p, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234D850);
      }
      if (*(char *)(a1 + 39) >= 0) {
        uint64_t v7 = a1 + 16;
      }
      else {
        uint64_t v7 = *(void *)(a1 + 16);
      }
      int v11 = 136315138;
      uint64_t v12 = v7;
      char v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static const CLSqliteDatabase::SqliteProperties CLGyroCalibrationDatabaseLocalBase::getSqlProperties()", "%s\n", v8);
LABEL_33:
      if (v8 != (char *)__p) {
        free(v8);
      }
    }
  }
  else
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234D850);
    }
    uint64_t v9 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "No gyroCal database file set in preferences. Using the default database.", (uint8_t *)__p, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_10234D850);
      }
      LOWORD(v11) = 0;
      char v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static const CLSqliteDatabase::SqliteProperties CLGyroCalibrationDatabaseLocalBase::getSqlProperties()", "%s\n", v8);
      goto LABEL_33;
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_101A2F4AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v25 + 39) < 0) {
    operator delete(*v26);
  }
  _Unwind_Resume(exception_object);
}

void sub_101A2F514()
{
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_10096239C((void **)&v8);
  sub_10170140C(v6);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v7 |= 1u;
  *(CFAbsoluteTime *)&v6[77] = Current;
  sub_101724C08((uint64_t)v6);
  uint64_t v1 = v8;
  if (v8 != v9)
  {
    sub_101664654((uint64_t)v3);
    long long v2 = *v1;
    v5 |= 0xFu;
    long long v4 = v2;
    operator new();
  }
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_10234D870);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v6);
  }
  sub_101706914((PB::Base *)v6);
  if (v8)
  {
    uint64_t v9 = v8;
    operator delete(v8);
  }
}

void sub_101A2F6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_101706914((PB::Base *)va);
  char v8 = *(void **)(v6 - 144);
  if (v8)
  {
    *(void *)(v6 - 136) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

NSString *sub_101A2F780(uint64_t a1, uint64_t a2)
{
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10234D850);
  }
  long long v4 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Dumping gyro calibration database", (uint8_t *)buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234D850);
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual NSString *CLGyroCalibrationDatabaseLocalBase::dumpDatabase(NSString *)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  sub_101A2F100((uint64_t)buf);
  sub_1005F7250(buf, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  uint64_t v6 = +[NSString stringWithUTF8String:p_p];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  char v7 = +[NSString stringWithFormat:@"%@-%@.db", [(NSString *)v6 stringByDeletingPathExtension], a2];
  if (sub_10060006C(a1 + 112, [(NSString *)v7 UTF8String])) {
    return v7;
  }
  else {
    return 0;
  }
}

void sub_101A2F9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_101A2F9F4(id a1)
{
  off_1024190B8 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

id sub_101A2FFE4(int8x16_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = [*(id *)(a1[2].i64[0] + 40) silo];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _OWORD v10[2] = sub_101A3009C;
  void v10[3] = &unk_1022B30A8;
  void v10[4] = a4;
  void v10[5] = a2;
  v10[6] = a3;
  int8x16_t v11 = vextq_s8(a1[2], a1[2], 8uLL);
  uint64_t v12 = a1[3].i64[0];
  return [v8 async:v10];
}

void sub_101A3009C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_102419190 != -1) {
      dispatch_once(&qword_102419190, &stru_10234D930);
    }
    long long v2 = qword_102419198;
    if (os_log_type_enabled((os_log_t)qword_102419198, OS_LOG_TYPE_ERROR))
    {
      id v3 = [*(id *)(a1 + 40) objectType];
      uint64_t v4 = *(void *)(a1 + 32);
      *(_DWORD *)std::string buf = 138543618;
      id v24 = v3;
      __int16 v25 = 2114;
      uint64_t v26 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Failed to query HealthKit for: %{public}@, error: %{public}@", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419190 != -1) {
      dispatch_once(&qword_102419190, &stru_10234D930);
    }
    [*(id *)(a1 + 40) objectType];
    char v5 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CLWMHealthKit setupHealthKitQueries]_block_invoke", "%s\n");
LABEL_53:
    if (v5 != buf) {
LABEL_54:
    }
      free(v5);
    return;
  }
  if (![*(id *)(a1 + 48) count] || *(void *)(a1 + 32))
  {
    if (qword_102419190 != -1) {
      dispatch_once(&qword_102419190, &stru_10234D930);
    }
    uint64_t v6 = qword_102419198;
    if (os_log_type_enabled((os_log_t)qword_102419198, OS_LOG_TYPE_DEBUG))
    {
      id v7 = [*(id *)(a1 + 40) objectType];
      *(_DWORD *)std::string buf = 138543362;
      id v24 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Unable to find HealthKit results for: %{public}@", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419190 != -1) {
      dispatch_once(&qword_102419190, &stru_10234D930);
    }
    [*(id *)(a1 + 40) objectType];
    char v5 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLWMHealthKit setupHealthKitQueries]_block_invoke", "%s\n");
    goto LABEL_53;
  }
  id v8 = [*(id *)(a1 + 48) firstObject];
  if (qword_102419190 != -1) {
    dispatch_once(&qword_102419190, &stru_10234D930);
  }
  uint64_t v9 = qword_102419198;
  if (os_log_type_enabled((os_log_t)qword_102419198, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 138477827;
    id v24 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Found HK Sample: %{private}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419190 == -1) {
      goto LABEL_56;
    }
    goto LABEL_59;
  }
  while (1)
  {
    if ([v8 sampleType] == *(id *)(a1 + 56))
    {
      uint64_t v14 = *(void *)(a1 + 64) + 64;
      [objc_msgSend(v8, "quantity") _beatsPerMinute];
      *(unsigned char *)(v14 + 28) |= 1u;
      *(void *)(v14 + 8) = v15;
      if (qword_102419190 != -1) {
        dispatch_once(&qword_102419190, &stru_10234D930);
      }
      uint64_t v16 = qword_102419198;
      if (os_log_type_enabled((os_log_t)qword_102419198, OS_LOG_TYPE_DEBUG))
      {
        [objc_msgSend(v8, "quantity") _beatsPerMinute];
        *(_DWORD *)std::string buf = 134217984;
        id v24 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Resting hr sample %f", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419190 == -1) {
        goto LABEL_47;
      }
LABEL_60:
      dispatch_once(&qword_102419190, &stru_10234D930);
LABEL_47:
      [objc_msgSend(v8, "quantity") _beatsPerMinute];
      goto LABEL_48;
    }
    if ([v8 sampleType] == *(id *)(a1 + 72))
    {
      uint64_t v18 = *(void *)(a1 + 64) + 64;
      [objc_msgSend(v8, "quantity") _beatsPerMinute];
      *(unsigned char *)(v18 + 28) |= 2u;
      *(void *)(v18 + 16) = v19;
      if (qword_102419190 != -1) {
        dispatch_once(&qword_102419190, &stru_10234D930);
      }
      char v20 = qword_102419198;
      if (os_log_type_enabled((os_log_t)qword_102419198, OS_LOG_TYPE_DEBUG))
      {
        [objc_msgSend(v8, "quantity") _beatsPerMinute];
        *(_DWORD *)std::string buf = 134217984;
        id v24 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Walking HR sample %f", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419190 == -1) {
        goto LABEL_47;
      }
      goto LABEL_60;
    }
    if ([objc_msgSend(objc_msgSend(v8, "sampleType"), "isEqual:", +[HKSampleType workoutType](HKSampleType, "workoutType"))] == 1)break; {
    abort_report_np();
    }
LABEL_59:
    dispatch_once(&qword_102419190, &stru_10234D930);
LABEL_56:
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLWMHealthKit setupHealthKitQueries]_block_invoke", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  [*(id *)(*(void *)(a1 + 64) + 56) setValue:[+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v8, "workoutActivityType")) forKey:@"WorkoutActivityTypeHK"];
  uint64_t v10 = *(void *)(a1 + 64) + 64;
  unsigned int v11 = [v8 workoutActivityType];
  *(unsigned char *)(v10 + 28) |= 4u;
  *(_DWORD *)(v10 + 24) = v11;
  if (qword_102419190 != -1) {
    dispatch_once(&qword_102419190, &stru_10234D930);
  }
  uint64_t v12 = qword_102419198;
  if (os_log_type_enabled((os_log_t)qword_102419198, OS_LOG_TYPE_DEBUG))
  {
    id v13 = [v8 workoutActivityType];
    *(_DWORD *)std::string buf = 134217984;
    id v24 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Recieved HK Workout for activity type %lu", buf, 0xCu);
  }
  if (!sub_10013D1A0(115, 2)) {
    return;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102419190 != -1) {
    dispatch_once(&qword_102419190, &stru_10234D930);
  }
  [v8 workoutActivityType];
LABEL_48:
  char v5 = (uint8_t *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 2, "-[CLWMHealthKit setupHealthKitQueries]_block_invoke", "%s\n", (const char *)v5);
  if (v5 != buf) {
    goto LABEL_54;
  }
}

void sub_101A30AAC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  if (a5)
  {
    if (qword_102419190 != -1) {
      dispatch_once(&qword_102419190, &stru_10234D930);
    }
    uint64_t v6 = qword_102419198;
    if (os_log_type_enabled((os_log_t)qword_102419198, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134349056;
      id v36 = [a5 code];
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLWMHealthKit, HKWorkoutEffortRelationshipQuery encountered error,%{public}ld", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419190 != -1) {
      dispatch_once(&qword_102419190, &stru_10234D930);
    }
    *(_DWORD *)out = 134349056;
    *(void *)&out[4] = [a5 code];
    id v24 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CLWMHealthKit queryUserEffortResponse:workoutEndTime:]_block_invoke", "%s\n");
LABEL_71:
    if (v24 != buf) {
      free(v24);
    }
    return;
  }
  if ([a3 count])
  {
    id v10 = +[HKQuantityType quantityTypeForIdentifier:HKQuantityTypeIdentifierWorkoutEffortScore];
    id v11 = [[[a3 firstObject] samples] firstObject];
    if (v11)
    {
      uint64_t v12 = v11;
      if (objc_msgSend(objc_msgSend(v11, "sampleType"), "isEqual:", v10))
      {
        id v13 = [objc_msgSend(a3, "firstObject") workout];
        if (v13)
        {
          uint64_t v14 = v13;
          id v15 = [v13 metadata];
          uint64_t v16 = _HKPrivateMetadataKeySessionUUID;
          if ([v15 objectForKey:_HKPrivateMetadataKeySessionUUID])
          {
            id v17 = [objc_msgSend(v14, "metadata") objectForKeyedSubscript:v16];
            memset(out, 0, 37);
            uuid_unparse((const unsigned __int8 *)(*(void *)(a1 + 32) + 116), out);
            memset(uu, 0, sizeof(uu));
            uuid_parse((const char *)[v17 UTF8String], uu);
            if (uuid_compare(uu, (const unsigned __int8 *)(*(void *)(a1 + 32) + 116)))
            {
              if (qword_102419190 != -1) {
                dispatch_once(&qword_102419190, &stru_10234D930);
              }
              uint64_t v18 = qword_102419198;
              if (os_log_type_enabled((os_log_t)qword_102419198, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)std::string buf = 138412546;
                id v36 = v17;
                __int16 v37 = 2080;
                BOOL v38 = out;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLWMHealthKit, HKWorkoutEffortRelationshipQuery overviewId mismatch, _HKPrivateMetadataKeySessionUUID,%@, CMSessionID,%s", buf, 0x16u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419190 != -1) {
                  dispatch_once(&qword_102419190, &stru_10234D930);
                }
LABEL_61:
                id v24 = (uint8_t *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "-[CLWMHealthKit queryUserEffortResponse:workoutEndTime:]_block_invoke", "%s\n");
                goto LABEL_71;
              }
            }
            else
            {
              __int16 v25 = *(void **)(*(void *)(a1 + 32) + 56);
              [objc_msgSend(v12, "startDate") timeIntervalSinceReferenceDate];
              [v25 setValue:[NSNumber numberWithDouble:] forKey:@"UserEffortResponseStartDate"];
              uint64_t v26 = *(void **)(*(void *)(a1 + 32) + 56);
              [objc_msgSend(v12, "endDate") timeIntervalSinceReferenceDate];
              [v26 setValue:[NSNumber numberWithDouble:] forKey:@"UserEffortResponseEndDate"];
              char v27 = *(void **)(*(void *)(a1 + 32) + 56);
              [objc_msgSend(v12, "quantity") doubleValueForUnit:+[HKUnit appleEffortScoreUnit](HKUnit, "appleEffortScoreUnit")];
              [v27 setValue:[NSNumber numberWithDouble:UserEffortResponse] forKey:@"UserEffortResponse"];
              if (qword_102419190 != -1) {
                dispatch_once(&qword_102419190, &stru_10234D930);
              }
              uint64_t v28 = qword_102419198;
              if (os_log_type_enabled((os_log_t)qword_102419198, OS_LOG_TYPE_DEBUG))
              {
                id v29 = [v12 startDate];
                long long v30 = (char *)[v12 endDate];
                [objc_msgSend(objc_msgSend(v12, "quantity"), "doubleValueForUnit:", +[HKUnit appleEffortScoreUnit](HKUnit, "appleEffortScoreUnit"));
                *(_DWORD *)std::string buf = 138412802;
                id v36 = v29;
                __int16 v37 = 2112;
                BOOL v38 = v30;
                __int16 v39 = 2048;
                uint64_t v40 = v31;
                _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "CLWMHealthKit,HKWorkoutEffortRelationshipQuery completed found user entered sample from %@, end %@, value %f", buf, 0x20u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419190 != -1) {
                  dispatch_once(&qword_102419190, &stru_10234D930);
                }
                [v12 startDate];
                [v12 endDate];
                [objc_msgSend(objc_msgSend(v12, "quantity"), "doubleValueForUnit:", +[HKUnit appleEffortScoreUnit](HKUnit, "appleEffortScoreUnit"));
                int v32 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "-[CLWMHealthKit queryUserEffortResponse:workoutEndTime:]_block_invoke", "%s\n", v32);
                if (v32 != (char *)buf) {
                  free(v32);
                }
              }
              [*(id *)(*(void *)(a1 + 32) + 96) stopQuery:a2];
            }
          }
          else
          {
            if (qword_102419190 != -1) {
              dispatch_once(&qword_102419190, &stru_10234D930);
            }
            __int16 v23 = qword_102419198;
            if (os_log_type_enabled((os_log_t)qword_102419198, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLWMHealthKit, HKWorkoutEffortRelationshipQuery,_HKPrivateMetadataKeySessionUUID is nil, returning", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419190 != -1) {
                dispatch_once(&qword_102419190, &stru_10234D930);
              }
              *(_WORD *)out = 0;
              goto LABEL_61;
            }
          }
        }
        else
        {
          if (qword_102419190 != -1) {
            dispatch_once(&qword_102419190, &stru_10234D930);
          }
          uint64_t v22 = qword_102419198;
          if (os_log_type_enabled((os_log_t)qword_102419198, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "CLWMHealthKit, HKWorkoutEffortRelationshipQuery,workout object is nil,association not completed, returning", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419190 != -1) {
              dispatch_once(&qword_102419190, &stru_10234D930);
            }
            *(_WORD *)out = 0;
            goto LABEL_61;
          }
        }
      }
      else
      {
        if (qword_102419190 != -1) {
          dispatch_once(&qword_102419190, &stru_10234D930);
        }
        __int16 v21 = qword_102419198;
        if (os_log_type_enabled((os_log_t)qword_102419198, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 138412290;
          id v36 = [v12 sampleType];
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLWMHealthKit, HKWorkoutEffortRelationshipQuery, did not receive user response, received sampleType %@", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419190 != -1) {
            dispatch_once(&qword_102419190, &stru_10234D930);
          }
          *(_DWORD *)out = 138412290;
          *(void *)&out[4] = [v12 sampleType];
          goto LABEL_61;
        }
      }
    }
    else
    {
      if (qword_102419190 != -1) {
        dispatch_once(&qword_102419190, &stru_10234D930);
      }
      char v20 = qword_102419198;
      if (os_log_type_enabled((os_log_t)qword_102419198, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "CLWMHealthKit, HKWorkoutEffortRelationshipQuery, sample Array is nil", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419190 != -1) {
          dispatch_once(&qword_102419190, &stru_10234D930);
        }
        *(_WORD *)out = 0;
        goto LABEL_61;
      }
    }
  }
  else
  {
    if (qword_102419190 != -1) {
      dispatch_once(&qword_102419190, &stru_10234D930);
    }
    uint64_t v19 = qword_102419198;
    if (os_log_type_enabled((os_log_t)qword_102419198, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "CLWMHealthKit, HKWorkoutEffortRelationshipQuery returned empty", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419190 != -1) {
        dispatch_once(&qword_102419190, &stru_10234D930);
      }
      *(_WORD *)out = 0;
      goto LABEL_61;
    }
  }
}

void sub_101A31830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

id sub_101A31AD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = [*(id *)(*(void *)(a1 + 32) + 40) silo];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _OWORD v10[2] = sub_101A31B90;
  void v10[3] = &unk_10234D8E8;
  void v10[4] = a4;
  void v10[5] = a3;
  long long v11 = *(_OWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 72);
  long long v13 = *(_OWORD *)(a1 + 56);
  long long v14 = v8;
  long long v15 = *(_OWORD *)(a1 + 88);
  return [v7 async:v10];
}

void sub_101A31B90(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_102419190 != -1) {
      dispatch_once(&qword_102419190, &stru_10234D930);
    }
    long long v2 = qword_102419198;
    if (os_log_type_enabled((os_log_t)qword_102419198, OS_LOG_TYPE_ERROR))
    {
      id v3 = *(void **)(a1 + 32);
      *(_DWORD *)std::string buf = 138543362;
      id v46 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "CLWMHealthKit,HRSourceQuery returned with error,%{public}@", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419190 != -1) {
      dispatch_once(&qword_102419190, &stru_10234D930);
    }
    int v32 = *(void **)(a1 + 32);
    int v38 = 138543362;
    id v39 = v32;
LABEL_56:
    __int16 v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CLWMHealthKit queryHRSource:workoutEndTime:]_block_invoke", "%s\n", v33);
    if (v33 != (char *)buf) {
      free(v33);
    }
    return;
  }
  if ([*(id *)(a1 + 40) count])
  {
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    uint64_t v4 = *(void **)(a1 + 40);
    id v5 = [v4 countByEnumeratingWithState:&v34 objects:v44 count:16];
    if (!v5) {
      return;
    }
    id v6 = v5;
    id v7 = &OBJC_IVAR___CLAvengerScannerClientController__centralManager;
    long long v8 = &qword_102419000;
    uint64_t v9 = *(void *)v35;
    while (1)
    {
      id v10 = 0;
      do
      {
        if (*(void *)v35 != v9) {
          objc_enumerationMutation(v4);
        }
        long long v11 = *(void **)(*((void *)&v34 + 1) + 8 * (void)v10);
        if (objc_msgSend(objc_msgSend(v11, "sampleType"), "isEqual:", *(void *)(a1 + 48)))
        {
          if (objc_msgSend(objc_msgSend(objc_msgSend(v11, "device"), "name"), "containsString:", *(void *)(a1 + 56))&& (uint64_t v12 = v7[161], objc_msgSend(objc_msgSend(*(id *)(*(void *)(a1 + 64) + v12), "objectForKeyedSubscript:", *(void *)(a1 + 72)), "isEqualToString:", *(void *)(a1 + 80))))
          {
            if (v8[50] != -1) {
              dispatch_once(&qword_102419190, &stru_10234D930);
            }
            long long v13 = qword_102419198;
            if (os_log_type_enabled((os_log_t)qword_102419198, OS_LOG_TYPE_DEBUG))
            {
              id v14 = [objc_msgSend(v11, "device") name];
              id v15 = [[objc_msgSend(v11, "device") model];
              id v16 = [objc_msgSend(v11, "device") firmwareVersion];
              *(_DWORD *)std::string buf = 138412802;
              id v46 = v14;
              long long v8 = &qword_102419000;
              __int16 v47 = 2112;
              id v48 = v15;
              id v7 = &OBJC_IVAR___CLAvengerScannerClientController__centralManager;
              __int16 v49 = 2112;
              id v50 = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLWMHealthKIt, HRSourceQuery, source name: %@,  source model : %@, source fw : %@", buf, 0x20u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (v8[50] != -1) {
                dispatch_once(&qword_102419190, &stru_10234D930);
              }
              id v26 = [[objc_msgSend(v11, "device") name];
              id v27 = [objc_msgSend(v11, "device") model];
              id v28 = [objc_msgSend(v11, "device") firmwareVersion];
              int v38 = 138412802;
              id v39 = v26;
              __int16 v40 = 2112;
              id v41 = v27;
              __int16 v42 = 2112;
              id v43 = v28;
              id v29 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "-[CLWMHealthKit queryHRSource:workoutEndTime:]_block_invoke", "%s\n", v29);
              if (v29 != (char *)buf) {
                free(v29);
              }
              id v7 = &OBJC_IVAR___CLAvengerScannerClientController__centralManager;
              long long v8 = &qword_102419000;
            }
            [*(id *)(*(void *)(a1 + 64) + v12) setObject:objc_msgSend(objc_msgSend(v11, "device"), "name") forKeyedSubscript:*(void *)(a1 + 72)];
            [*(id *)(*(void *)(a1 + 64) + v12) setObject:[objc_msgSend(objc_msgSend(v11, "device"), "model")] forKeyedSubscript:*(void *)(a1 + 88)];
            [*(id *)(*(void *)(a1 + 64) + v12) setObject:objc_msgSend(objc_msgSend(v11, "device"), "firmwareVersion") forKeyedSubscript:*(void *)(a1 + 96)];
            id v17 = [objc_msgSend(v11, "device") hardwareVersion];
          }
          else
          {
            if ([objc_msgSend(objc_msgSend(objc_msgSend(v11, "device"), "name"), "containsString:", *(void *)(a1 + 56))])goto LABEL_31; {
            if (v8[50] != -1)
            }
              dispatch_once(&qword_102419190, &stru_10234D930);
            uint64_t v18 = qword_102419198;
            if (os_log_type_enabled((os_log_t)qword_102419198, OS_LOG_TYPE_DEBUG))
            {
              id v19 = [objc_msgSend(v11, "device") name];
              id v20 = [[objc_msgSend(v11, "device") model];
              id v21 = [objc_msgSend(v11, "device") firmwareVersion];
              *(_DWORD *)std::string buf = 138412802;
              id v46 = v19;
              id v7 = &OBJC_IVAR___CLAvengerScannerClientController__centralManager;
              __int16 v47 = 2112;
              id v48 = v20;
              long long v8 = &qword_102419000;
              __int16 v49 = 2112;
              id v50 = v21;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLWMHealthKit, 3rd party data HRSourceQuery, source name: %@,  source model : %@, source fw : %@", buf, 0x20u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (v8[50] != -1) {
                dispatch_once(&qword_102419190, &stru_10234D930);
              }
              id v22 = [[[v11 device] name];
              id v23 = [objc_msgSend(v11, "device") model];
              id v24 = [objc_msgSend(v11, "device") firmwareVersion];
              int v38 = 138412802;
              id v39 = v22;
              __int16 v40 = 2112;
              id v41 = v23;
              __int16 v42 = 2112;
              id v43 = v24;
              __int16 v25 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "-[CLWMHealthKit queryHRSource:workoutEndTime:]_block_invoke", "%s\n", v25);
              if (v25 != (char *)buf) {
                free(v25);
              }
              id v7 = &OBJC_IVAR___CLAvengerScannerClientController__centralManager;
              long long v8 = &qword_102419000;
            }
            uint64_t v12 = v7[161];
            [*(id *)(*(void *)(a1 + 64) + v12) setObject:*(void *)(a1 + 112) forKeyedSubscript:*(void *)(a1 + 72)];
            [*(id *)(*(void *)(a1 + 64) + v12) setObject:*(void *)(a1 + 112) forKeyedSubscript:*(void *)(a1 + 88)];
            [*(id *)(*(void *)(a1 + 64) + v12) setObject:*(void *)(a1 + 112) forKeyedSubscript:*(void *)(a1 + 96)];
            id v17 = *(id *)(a1 + 112);
          }
          [*(id *)(*(void *)(a1 + 64) + v12) setObject:v17 forKeyedSubscript:*(void *)(a1 + 104)];
        }
LABEL_31:
        id v10 = (char *)v10 + 1;
      }
      while (v6 != v10);
      id v30 = [v4 countByEnumeratingWithState:&v34 objects:v44 count:16];
      id v6 = v30;
      if (!v30) {
        return;
      }
    }
  }
  if (qword_102419190 != -1) {
    dispatch_once(&qword_102419190, &stru_10234D930);
  }
  uint64_t v31 = qword_102419198;
  if (os_log_type_enabled((os_log_t)qword_102419198, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "CLWMHealthKit,HRSourceQuery HR returned empty", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419190 != -1) {
      dispatch_once(&qword_102419190, &stru_10234D930);
    }
    LOWORD(v38) = 0;
    goto LABEL_56;
  }
}

void sub_101A326B8(id a1)
{
  qword_102419198 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void sub_101A326E8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = sub_1012AD420();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_101A32780;
  void v9[3] = &unk_10234D980;
  void v9[4] = a2;
  void v9[5] = a4;
  sub_1012AE2B0(v8, a1, a3, (uint64_t)v9);
}

uint64_t sub_101A32780(uint64_t a1, uint64_t a2)
{
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10234D9B8);
  }
  uint64_t v4 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "GyroBias received by DeviceMotion in daemon", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234D9B8);
    }
    id v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGyroBiasEstimatorClientLocal::registerWithGyroBiasEstimatorPrivate(CLGyroBiasEstimatorClientCallback, BOOL, void *)_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return (*(uint64_t (**)(uint64_t, void))(a1 + 32))(a2, *(void *)(a1 + 40));
}

void sub_101A32924(uint64_t a1)
{
  uint64_t v2 = sub_1012AD420();

  sub_1012AE2B0(v2, a1, 0, 0);
}

uint64_t sub_101A32964()
{
  uint64_t result = sub_100A08A84();
  if (result) {
    operator new();
  }
  return result;
}

void sub_101A329D0()
{
}

void sub_101A329F8(uint64_t a1, uint64_t a2)
{
  nullsub_41(a1, a2);

  operator delete();
}

void sub_101A32A30(id a1)
{
  off_1024190B8 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

id sub_101A32B9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = [*(id *)(*(void *)(a1 + 32) + 40) silo];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_101A32C40;
  void v8[3] = &unk_10229FF28;
  void v8[4] = *(void *)(a1 + 32);
  void v8[5] = a2;
  v8[6] = a3;
  return [v6 async:v8];
}

id sub_101A32C40(uint64_t a1)
{
  return _[*(id *)(a1 + 32) handleBrightnessClientNotification:*(void *)(a1 + 40) withValue:*(void *)(a1 + 48)];
}

void sub_101A32D68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

id sub_101A3322C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onWatchOrientationNotification:a2 data:a3];
}

void sub_101A333B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_101A33534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_101A3363C(id a1)
{
  qword_102419198 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

id sub_101A3377C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) recordWorkoutSessionEvent:a2];
}

void sub_101A341FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_101A346E4(id a1)
{
  qword_102419198 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

uint64_t sub_101A34714(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = (void *)*v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return 0;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = operator new(0x18uLL);
  *uint64_t v12 = 0;
  v12[1] = v5;
  _OWORD v12[2] = a3;
  float v13 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v14 = a1[8];
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }
  BOOL v15 = 1;
  if (v7 >= 3) {
    BOOL v15 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v7);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    int8x8_t prime = (int8x8_t)v17;
  }
  else {
    int8x8_t prime = (int8x8_t)v16;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v25 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      unint64_t v25 = std::__next_prime(v25);
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        unint64_t v25 = v27;
      }
    }
    if (*(void *)&prime <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *((void *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      long long v34 = *(void **)a1;
      *(void *)a1 = 0;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v7 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    sub_1001D7FA0();
  }
  id v19 = operator new(8 * *(void *)&prime);
  id v20 = *(void **)a1;
  *(void *)a1 = v19;
  if (v20) {
    operator delete(v20);
  }
  uint64_t v21 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v21++) = 0;
  while (*(void *)&prime != v21);
  id v22 = (void *)*((void *)a1 + 2);
  if (v22)
  {
    unint64_t v23 = v22[1];
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(void *)&prime) {
        v23 %= *(void *)&prime;
      }
    }
    else
    {
      v23 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v23) = a1 + 4;
    id v28 = (void *)*v22;
    if (*v22)
    {
      do
      {
        unint64_t v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(void *)&prime) {
            v29 %= *(void *)&prime;
          }
        }
        else
        {
          v29 &= *(void *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(void *)(*(void *)a1 + 8 * v29))
          {
            *(void *)(*(void *)a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *id v22 = *v28;
          void *v28 = **(void **)(*(void *)a1 + 8 * v29);
          **(void **)(*(void *)a1 + 8 * v29) = v28;
          id v28 = v22;
        }
        unint64_t v29 = v23;
LABEL_56:
        id v22 = v28;
        id v28 = (void *)*v28;
        unint64_t v23 = v29;
      }
      while (v28);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  id v30 = *(void **)a1;
  uint64_t v31 = *(void **)(*(void *)a1 + 8 * v5);
  if (v31)
  {
    *uint64_t v12 = *v31;
LABEL_72:
    *uint64_t v31 = v12;
    goto LABEL_73;
  }
  *uint64_t v12 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v12;
  v30[v5] = a1 + 4;
  if (*v12)
  {
    unint64_t v32 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    uint64_t v31 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return 1;
}

void sub_101A34AF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_101A34DD8()
{
  sub_1019D78CC(v0);
  operator delete();
}

id sub_101A34E20(uint64_t a1, void *a2)
{
  return _[a2 onCompassCalibrationData:a1];
}

void sub_101A35454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_101A35614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_101A3571C(id a1)
{
  qword_102419198 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void sub_101A3574C(id a1)
{
  qword_1024190A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

uint64_t sub_101A3577C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_101A35790(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_101A357AC(uint64_t a1)
{
  sub_101A35AC0(a1);

  operator delete();
}

id sub_101A357E4(uint64_t a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0x59) {
    size_t v8 = 89;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(__dst, __src, v8);
  if (a4 >= 0x5A)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10234DB20);
    }
    uint64_t v9 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315906;
      unint64_t v32 = (unint64_t)"N24CMMotionCoprocessorReply18CompassCalibrationE" & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v33 = 2048;
      uint64_t v34 = 89;
      __int16 v35 = 2048;
      unint64_t v36 = a4;
      __int16 v37 = 1024;
      int v38 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234DB20);
      }
      int v23 = 136315906;
      unint64_t v24 = (unint64_t)"N24CMMotionCoprocessorReply18CompassCalibrationE" & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v25 = 2048;
      uint64_t v26 = 89;
      __int16 v27 = 2048;
      unint64_t v28 = a4;
      __int16 v29 = 1024;
      int v30 = a2;
      float v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CMMotionCoprocessorReply::CompassCalibration>::dispatchData(int, const void *, size_t) [T = CMMotionCoprocessorReply::CompassCalibration]", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  uint64_t v10 = *(void *)(a1 + 48);
  unint64_t v11 = *(void **)(a1 + 32);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  int v14[2] = sub_101A35B3C;
  void v14[3] = &unk_10234DB00;
  void v14[4] = v10;
  long long v18 = __dst[2];
  long long v19 = __dst[3];
  *(_OWORD *)id v20 = *(_OWORD *)v22;
  *(_OWORD *)&v20[9] = *(_OWORD *)&v22[9];
  long long v16 = __dst[0];
  long long v17 = __dst[1];
  long long v15 = *(_OWORD *)(a1 + 16);
  return [v11 async:v14];
}

uint64_t sub_101A35AC0(uint64_t a1)
{
  *(void *)a1 = off_10234DAB8;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1019D78CC(a1);
}

uint64_t sub_101A35B3C(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1[4] + 16))();
  if (result)
  {
    uint64_t v4 = (uint64_t (*)(void *, uint64_t))a1[5];
    uint64_t v3 = a1[6];
    return v4(a1 + 7, v3);
  }
  return result;
}

void sub_101A35B94(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_101A35D40()
{
}

id sub_101A35D64(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 onAccelerometer800Data:a1 count:a2];
}

void sub_101A36168(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_101A36270(id a1)
{
  qword_102419198 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void sub_101A362A0(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = off_10234BF80;
  *a1 = &off_10234DB70;
  a1[1] = 0;
  id v8 = a2;
  a1[5] = 0;
  a1[2] = v8;
  a1[3] = a3;
  a1[4] = a5;
  a1[6] = 0;
  operator new[]();
}

void sub_101A3642C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  sub_1019D78CC(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_101A36454(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_101A36468(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_101A36484(uint64_t a1)
{
  sub_101A365D4(a1);

  operator delete();
}

__n128 sub_101A364BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (_OWORD *)(*(void *)(a1 + 56) + 224 * *(unsigned int *)(a1 + 64));
  long long v4 = *(_OWORD *)(a3 + 80);
  long long v6 = *(_OWORD *)(a3 + 32);
  long long v5 = *(_OWORD *)(a3 + 48);
  void v3[4] = *(_OWORD *)(a3 + 64);
  void v3[5] = v4;
  v3[2] = v6;
  v3[3] = v5;
  long long v7 = *(_OWORD *)(a3 + 144);
  long long v9 = *(_OWORD *)(a3 + 96);
  long long v8 = *(_OWORD *)(a3 + 112);
  unsigned char v3[8] = *(_OWORD *)(a3 + 128);
  v3[9] = v7;
  v3[6] = v9;
  v3[7] = v8;
  long long v10 = *(_OWORD *)(a3 + 208);
  long long v12 = *(_OWORD *)(a3 + 160);
  long long v11 = *(_OWORD *)(a3 + 176);
  v3[12] = *(_OWORD *)(a3 + 192);
  v3[13] = v10;
  v3[10] = v12;
  v3[11] = v11;
  __n128 result = *(__n128 *)a3;
  long long v14 = *(_OWORD *)(a3 + 16);
  _OWORD *v3 = *(_OWORD *)a3;
  v3[1] = v14;
  unsigned int v15 = *(_DWORD *)(a1 + 68);
  unsigned int v16 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v16;
  if (v16 >= v15)
  {
    uint64_t v18 = *(void *)(a1 + 24);
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v19 = *(void *)(a1 + 48);
    uint64_t v20 = *(void *)(a1 + 56);
    uint64_t v21 = *(void **)(a1 + 16);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_101A3666C;
    v22[3] = &unk_1022CCC40;
    v22[4] = v19;
    _OWORD v22[5] = v18;
    unsigned int v23 = v16;
    v22[6] = v20;
    v22[7] = v17;
    [v21 async:v22];
    operator new[]();
  }
  return result;
}

uint64_t sub_101A365CC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 68);
}

uint64_t sub_101A365D4(uint64_t a1)
{
  *(void *)a1 = &off_10234DB70;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  if (*(void *)(a1 + 56)) {
    operator delete[]();
  }

  return sub_1019D78CC(a1);
}

uint64_t sub_101A3666C(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16))()) {
    (*(void (**)(void, void, void))(a1 + 40))(*(void *)(a1 + 48), *(unsigned int *)(a1 + 64), *(void *)(a1 + 56));
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    operator delete[]();
  }
  return result;
}

void sub_101A36B18()
{
}

id sub_101A36B44(uint64_t a1, void *a2)
{
  return _[a2 onAccelerometerData:a1];
}

void sub_101A36E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

id sub_101A36E44(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = +[NSNumber numberWithBool:(*(void *)(a2 + 7824) & 0xFF0000FF00) != 0];
  long long v4 = *(void **)(*(void *)(a1 + 32) + 72);

  return [v4 setObject:v3 forKeyedSubscript:@"SensorRecordingActiveAndEnabled"];
}

void sub_101A36F9C(id a1)
{
  qword_102419198 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void *sub_101A36FCC(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_10234BF80;
  id v9 = a5;
  *a1 = off_10234DBC8;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  int v14[2] = 0x2020000000;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_101A37154;
  aBlock[3] = &unk_1022B6BE8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  _OWORD v12[2] = sub_101A37168;
  void v12[3] = &unk_1022B6C10;
  void v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_101A3712C(_Unwind_Exception *a1)
{
  sub_1019D78CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101A37154(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_101A37168(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_101A37184(uint64_t a1)
{
  sub_101A3746C(a1);

  operator delete();
}

id sub_101A371BC(void *a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0x18) {
    size_t v8 = 24;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x19)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10234DBF0);
    }
    id v9 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315906;
      unint64_t v31 = (unint64_t)"N15CLAccelerometer6SampleE" & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v32 = 2048;
      uint64_t v33 = 24;
      __int16 v34 = 2048;
      unint64_t v35 = a4;
      __int16 v36 = 1024;
      int v37 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234DBF0);
      }
      int v22 = 136315906;
      unint64_t v23 = (unint64_t)"N15CLAccelerometer6SampleE" & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v24 = 2048;
      uint64_t v25 = 24;
      __int16 v26 = 2048;
      unint64_t v27 = a4;
      __int16 v28 = 1024;
      int v29 = a2;
      char v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLAccelerometer::Sample>::dispatchData(int, const void *, size_t) [T = CLAccelerometer::Sample]", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  float v13 = (void *)a1[4];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_101A374E8;
  v16[3] = &unk_1022EE9C0;
  void v16[4] = v12;
  v16[5] = v11;
  long long v17 = __dst;
  uint64_t v18 = v21;
  uint64_t v19 = v10;
  return [v13 async:v16];
}

uint64_t sub_101A3746C(uint64_t a1)
{
  *(void *)a1 = off_10234DBC8;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1019D78CC(a1);
}

uint64_t sub_101A374E8(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1[4] + 16))();
  if (result)
  {
    uint64_t v3 = (uint64_t (*)(void *, uint64_t))a1[5];
    uint64_t v4 = a1[9];
    return v3(a1 + 6, v4);
  }
  return result;
}

void sub_101A37544(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_101A37574()
{
  sub_100134750(qword_102489878, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102489878, (void *)&_mh_execute_header);
}

void sub_101A37714()
{
}

id sub_101A37738(uint64_t a1, void *a2)
{
  return _[a2 onSpectatorALSData:a1];
}

void sub_101A378A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_101A379B0(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(a4[4], "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10234DD10);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v14 = 1;
    long long v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGeomagneticModelProviderDaemon::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10234DD10);
    }
    long long v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v16 = 0;
      __int16 v17 = 2082;
      uint64_t v18 = "";
      __int16 v19 = 2082;
      uint64_t v20 = "activity";
      __int16 v21 = 2050;
      int v22 = a4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGeomagneticModelProviderDaemon::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v14 = 0;
  }
  if (*a2 == 2)
  {
    *(_DWORD *)std::string buf = 0;
    (*((void (**)(id *, uint8_t *))*a4 + 22))(a4, buf);
  }
  else if (*a2 == 3 && !*((unsigned char *)a4 + 108))
  {
    size_t v8 = (char *)a4[8];
    if (v8)
    {
      id v9 = (int *)(a4 + 8);
      do
      {
        int v10 = *((_DWORD *)v8 + 8);
        BOOL v11 = v10 < 0;
        if (v10 >= 0) {
          uint64_t v12 = (id *)v8;
        }
        else {
          uint64_t v12 = (id *)(v8 + 8);
        }
        if (!v11) {
          id v9 = (int *)v8;
        }
        size_t v8 = (char *)*v12;
      }
      while (*v12);
      if (v9 != (int *)(a4 + 8) && v9[8] <= 0 && v9[14])
      {
        *(_DWORD *)std::string buf = 0;
        (*((void (**)(id *, uint8_t *))*a4 + 21))(a4, buf);
      }
    }
  }
  if (v14) {
    os_activity_scope_leave(&state);
  }
}

void sub_101A37C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101A37C40(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10234DD10);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v12 = 1;
    long long v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGeomagneticModelProviderDaemon::onClientNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10234DD10);
    }
    size_t v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v15 = 0;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 2082;
      __int16 v19 = "activity";
      __int16 v20 = 2050;
      uint64_t v21 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGeomagneticModelProviderDaemon::onClientNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  if (*a2 == 4 && *(_DWORD *)(a3 + 188) != 1)
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_10234DD30);
    }
    id v9 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "location services is now disabled; invalidating geomagnetic field data",
        buf,
        2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_10234DD30);
      }
      __int16 v13 = 0;
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    sub_101A39238(a4);
  }
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_101A37F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13)
{
  if (a13) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101A37F64(uint64_t a1)
{
}

void sub_101A37F6C(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  double v3 = *(double *)(a1 + 416);
  double v4 = v3 * 0.5;
  double v5 = *(double *)(a1 + 168);
  if (v5 >= 0.0 && Current - v5 < v4)
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_10234DD30);
    }
    int v10 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = *(void *)(a1 + 168);
      *(_DWORD *)std::string buf = 134218240;
      uint64_t v16 = v11;
      __int16 v17 = 2048;
      double v18 = v4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "current location is still fresh, not requesting coarse location for computing geomagnetic data, gmmTimestamp %.1f gmmFreshnessDuration %.1f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 == -1) {
        goto LABEL_19;
      }
      goto LABEL_34;
    }
  }
  else
  {
    double v7 = v3 * 0.4;
    if (Current - *(double *)(a1 + 424) >= v3 * 0.4)
    {
      if (!*(unsigned char *)(a1 + 408) && *(void *)(a1 + 400))
      {
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_10234DD30);
        }
        __int16 v13 = qword_1024190A8;
        if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "requesting coarse location for computing geomagnetic data", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190A0 != -1) {
            dispatch_once(&qword_1024190A0, &stru_10234DD30);
          }
          char v14 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::startCoarseLocationUpdates()", "%s\n", v14);
          if (v14 != (char *)buf) {
            free(v14);
          }
        }
        [*(id *)(*(void *)(a1 + 400) + 16) register:*(void *)(*(void *)(a1 + 400) + 8) forNotification:2 registrationInfo:0];
        *(unsigned char *)(a1 + 408) = 1;
        *(double *)(a1 + 424) = Current;
        [*(id *)(a1 + 376) setNextFireDelay:20.0];
      }
    }
    else
    {
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_10234DD30);
      }
      size_t v8 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 424);
        *(_DWORD *)std::string buf = 134218240;
        uint64_t v16 = v9;
        __int16 v17 = 2048;
        double v18 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "avoiding frequent coarse location request for computing geomagnetic data, fLastCoarseLocationRequestTimestamp %.1f minimumLocationRequestInterval %.1f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 == -1)
        {
LABEL_19:
          char v12 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::startCoarseLocationUpdates()", "%s\n", v12);
          if (v12 != (char *)buf) {
            free(v12);
          }
          return;
        }
LABEL_34:
        dispatch_once(&qword_1024190A0, &stru_10234DD30);
        goto LABEL_19;
      }
    }
  }
}

id sub_101A38414(uint64_t a1)
{
  return sub_10012777C(*(void *)(a1 + 32));
}

uint64_t sub_101A3841C(void *a1)
{
  *a1 = off_10234DC20;
  sub_101A38548((uint64_t)a1);
  uint64_t v2 = a1[50];
  a1[50] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[49];
  a1[49] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[48];
  a1[48] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_100C0AB60((uint64_t)(a1 + 22));

  return sub_100DE36E8(a1);
}

void sub_101A38510(void *a1)
{
  sub_101A3841C(a1);

  operator delete();
}

void sub_101A38548(uint64_t a1)
{
  sub_100DE35F0(a1);
  uint64_t v2 = *(void *)(a1 + 400);
  *(void *)(a1 + 40sub_1019DB7E0(qword_10248D888, 0) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 392);
  *(void *)(a1 + 392) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 384);
  *(void *)(a1 + 384) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  double v5 = *(void **)(a1 + 376);
}

__n128 sub_101A38618@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 144);
  long long v4 = *(_OWORD *)(a1 + 160);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v4;
  return result;
}

id sub_101A3862C(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 128);
  v6[0] = *(_OWORD *)(a1 + 112);
  v6[1] = v2;
  long long v3 = *(_OWORD *)(a1 + 160);
  _DWORD v6[2] = *(_OWORD *)(a1 + 144);
  void v6[3] = v3;
  int v5 = 0;
  (*(void (**)(uint64_t, int *, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v5, v6, 1, 0xFFFFFFFFLL, 0);
  return [*(id *)(a1 + 368) setNextFireDelay:*(double *)(a1 + 416)];
}

void sub_101A386AC(uint64_t a1)
{
  if (*(double *)(a1 + 168) >= 0.0)
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_10234DD30);
    }
    long long v4 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "loadGeomagneticDataFromCache already loaded", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_10234DD30);
      }
      LOWORD(v22) = 0;
      goto LABEL_19;
    }
  }
  else
  {
    int v2 = sub_100170B44(a1 + 176);
    if ((v2 - 1) > 1)
    {
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_10234DD30);
      }
      long long v6 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67240192;
        LODWORD(v25) = v2;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "loadGeomagneticDataFromCache loading with authorization status %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_10234DD30);
        }
        int v22 = 67240192;
        LODWORD(v23) = v2;
        __int16 v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::loadGeomagneticDataFromCache()", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      uint64_t v21 = 0;
      uint64_t v7 = sub_1000A6958();
      if (sub_1004D1D1C(v7, @"GeomagneticModel", (CFTypeRef *)&v21) && [v21 count] == (id)4)
      {
        [objc_msgSend(v21, "objectAtIndexedSubscript:", 0) doubleValue];
        uint64_t v9 = v8;
        [v21[1] doubleValue];
        double v11 = v10;
        [v21[2] doubleValue];
        double v13 = v12;
        [v21[3] doubleValue];
        double v15 = v14;
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_10234DD30);
        }
        uint64_t v16 = qword_1024190A8;
        if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 134349056;
          uint64_t v25 = v9;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "recovered geomagnetic information @ %{public}.3f", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190A0 != -1) {
            dispatch_once(&qword_1024190A0, &stru_10234DD30);
          }
          int v22 = 134349056;
          uint64_t v23 = v9;
          __int16 v20 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::loadGeomagneticDataFromCache()", "%s\n", v20);
          if (v20 != (char *)buf) {
            free(v20);
          }
        }
        *(double *)(a1 + 16sub_1019DB7E0(qword_10248D888, 0) = v15;
        *(void *)(a1 + 168) = v9;
        *(double *)(a1 + 136) = v11;
        *(double *)(a1 + 152) = v13;
        __double2 v17 = __sincos_stret(v15 * 0.0174532924);
        *(double *)(a1 + 144) = v11 * v17.__cosval;
        __double2 v18 = __sincos_stret(v13 * 0.0174532924);
        *(double *)(a1 + 112) = v18.__cosval * (v11 * v17.__cosval);
        *(double *)(a1 + 12sub_1019DB7E0(qword_10248D888, 0) = v18.__sinval * (v11 * v17.__cosval);
        *(double *)(a1 + 128) = v11 * v17.__sinval;
        sub_101A3862C(a1);
      }
    }
    else
    {
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_10234DD30);
      }
      long long v3 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67240192;
        LODWORD(v25) = v2;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "loadGeomagneticDataFromCache not loading because deauthorized (%{public}d)", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_10234DD30);
        }
        int v22 = 67240192;
        LODWORD(v23) = v2;
LABEL_19:
        int v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::loadGeomagneticDataFromCache()", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
    }
  }
}

uint64_t sub_101A38CB0(uint64_t a1, int *a2)
{
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_10234DD30);
  }
  long long v4 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a2;
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Client requested notification %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_10234DD30);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGeomagneticModelProviderDaemon::registerForNotificationInternal(const CLGeomagneticModelProvider_Type::Notification &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (!*(void *)(a1 + 400)) {
    sub_100ECEB9C();
  }
  if (!*a2)
  {
    sub_101A386AC(a1);
    sub_101A37F6C(a1);
    [*(id *)(*(void *)(a1 + 400) + 16) register:*(void *)(*(void *)(a1 + 400) + 8) forNotification:4 registrationInfo:0];
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_10234DD30);
    }
    long long v6 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "registered as location spectator to compute geomagnetic data", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_10234DD30);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGeomagneticModelProviderDaemon::registerForNotificationInternal(const CLGeomagneticModelProvider_Type::Notification &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  return 1;
}

uint64_t sub_101A39070(uint64_t a1, _DWORD *a2)
{
  if (!*a2)
  {
    sub_10012777C(a1);
    uint64_t v3 = *(void *)(a1 + 400);
    if (v3)
    {
      [*(id *)(v3 + 16) unregister:*(void *)(v3 + 8) forNotification:4];
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_10234DD30);
      }
      long long v4 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "unregistered as location spectator to compute geomagnetic data", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_10234DD30);
        }
        long long v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGeomagneticModelProviderDaemon::unregisterForNotificationInternal(const CLGeomagneticModelProvider_Type::Notification &)", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
    }
    [*(id *)(a1 + 368) setNextFireDelay:1.79769313e308];
  }
  return 1;
}

void sub_101A39238(uint64_t a1)
{
  *(void *)(a1 + 424) = 0;
  if (*(double *)(a1 + 168) >= 0.0)
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_10234DD30);
    }
    long long v4 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "invalidateGeomagneticField invalidating", buf, 2u);
    }
    int v5 = (_OWORD *)(a1 + 112);
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_10234DD30);
      }
      LOWORD(v12[0]) = 0;
      double v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::invalidateGeomagneticField()", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    [*(id *)(a1 + 368) setNextFireDelay:1.79769313e308];
    *(void *)(a1 + 16sub_1019DB7E0(qword_10248D888, 0) = 0;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *int v5 = 0u;
    *(void *)(a1 + 168) = 0xBFF0000000000000;
    long long v6 = *(_OWORD *)(a1 + 128);
    v12[0] = *v5;
    v12[1] = v6;
    long long v7 = *(_OWORD *)(a1 + 160);
    _OWORD v12[2] = *(_OWORD *)(a1 + 144);
    long long v13 = v7;
    uint64_t v8 = sub_1000A6958();
    sub_1004CF870(v8);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_10234DD30);
    }
    uint64_t v9 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134217984;
      uint64_t v17 = *((void *)&v13 + 1);
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Geomagnetic model data invalidated. Sending notification with timestamp %f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_10234DD30);
      }
      int v14 = 134217984;
      uint64_t v15 = *((void *)&v13 + 1);
      double v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::invalidateGeomagneticField()", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    *(_DWORD *)std::string buf = 0;
    (*(void (**)(uint64_t, uint8_t *, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, buf, v12, 1, 0xFFFFFFFFLL, 0);
  }
  else
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_10234DD30);
    }
    uint64_t v1 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "invalidateGeomagneticField already invalid", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_10234DD30);
      }
      LOWORD(v12[0]) = 0;
      int v2 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::invalidateGeomagneticField()", "%s\n", v2);
      if (v2 != (char *)buf) {
        free(v2);
      }
    }
  }
}

uint64_t sub_101A396E4(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101A39778;
  block[3] = &unk_10229FED8;
  void block[4] = a1;
  if (qword_102489890 != -1) {
    dispatch_once(&qword_102489890, block);
  }
  return qword_10248AC20;
}

void sub_101A39778()
{
}

void sub_101A39B18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  uint64_t v33 = *(void *)(v30 + 400);
  *(void *)(v30 + 40sub_1019DB7E0(qword_10248D888, 0) = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  uint64_t v34 = *(void *)(v30 + 392);
  *(void *)(v30 + 392) = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  uint64_t v35 = *v32;
  *__int16 v32 = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  sub_100C0AB60(v31);
  sub_100DE36E8(v30);
  operator delete();
}

uint64_t sub_101A39C68(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 108)) {
    return 0xFFFFFFFFLL;
  }
  long long v7 = (int *)v8;
  v8[0] = 0;
  v8[1] = 0;
  uint64_t v9 = a2;
  uint64_t v3 = (unsigned int *)(a1 + 104);
  ++*(_DWORD *)(a1 + 104);
  double v10 = (_DWORD *)(a1 + 104);
  long long v4 = sub_10008A098((uint64_t **)(a1 + 80), (int *)(a1 + 104), (uint64_t)&unk_101D0B290, &v10);
  if (v4 + 5 != (uint64_t **)&v7) {
    sub_1000F5C04(v4 + 5, v7, (int *)v8);
  }
  int v5 = (void *)v8[0];
  v4[8] = v9;
  uint64_t v2 = *v3;
  sub_1000F5BB0((uint64_t)&v7, v5);
  return v2;
}

void sub_101A39D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_101A39D34(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        uint64_t v9 = (uint64_t *)v4;
      }
      else {
        uint64_t v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10234DD10);
      }
      double v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        double v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          double v11 = (void *)*v11;
        }
        *(_DWORD *)std::string buf = 136446466;
        __int16 v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_10234DD10);
        }
        double v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          double v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        uint64_t v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        long long v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData>::removeClient(int) [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_101A39FC4(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_101A3A078(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_101A3A0C0(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_101A3A108(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_101A3A150(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (!result)
  {
    int v3 = objc_alloc_init(CLNotifierServiceAdapter);
    *(void *)(a1 + 48) = v3;
    [(CLNotifierServiceAdapter *)v3 setValid:1];
    [*(id *)(a1 + 48) setAdaptedNotifier:a1];
    return *(void *)(a1 + 48);
  }
  return result;
}

uint64_t sub_101A3A1A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_1024747E0);
}

uint64_t sub_101A3A1CC(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        long long v13 = (uint64_t *)v7;
      }
      else {
        long long v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)__int16 v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          __int16 v24 = (uint64_t *)v18;
        }
        else {
          __int16 v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          int v29 = (uint64_t *)v25;
        }
        else {
          int v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)std::string buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        long long v46 = 0u;
        long long v47 = 0u;
        memset(buf, 0, sizeof(buf));
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, uint8_t *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_101A3CBE0();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_1024747E1;
        int v39 = v17;
        *(void *)std::string buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 8sub_1019DB7E0(qword_10248D888, 0) = v30;
        int v39 = *a3;
        *(void *)std::string buf = &v39;
        uint64_t v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        __int16 v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)std::string buf = &v39;
        uint64_t v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)std::string buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)std::string buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10234DD10);
  }
  int v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v15 = (void *)*v15;
    }
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10234DD10);
    }
    int v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v37 = (void *)*v37;
    }
    *(_DWORD *)__int16 v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    int v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_101A3A674(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10234DD10);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)std::string buf = 136446466;
      __int16 v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10234DD10);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_101A3A8F8(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        long long v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            long long v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10234DD10);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_10234DD10);
                }
                int v29 = a1 + 8;
                if (a1[31] < 0) {
                  int v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                int v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                uint64_t v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

void sub_101A3ACCC(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v2 = a1 + 64;
  uint64_t v3 = v4;
  if (v4)
  {
    int v5 = *a2;
    uint64_t v6 = v2;
    do
    {
      int v7 = *(_DWORD *)(v3 + 32);
      BOOL v8 = v7 < v5;
      if (v7 >= v5) {
        int v9 = (uint64_t *)v3;
      }
      else {
        int v9 = (uint64_t *)(v3 + 8);
      }
      if (!v8) {
        uint64_t v6 = v3;
      }
      uint64_t v3 = *v9;
    }
    while (*v9);
    if (v6 != v2 && v5 >= *(_DWORD *)(v6 + 32))
    {
      BOOL v10 = *(std::__shared_weak_count **)(v6 + 72);
      *(void *)(v6 + 64) = 0;
      *(void *)(v6 + 72) = 0;
      if (v10) {
        sub_1000DB0A0(v10);
      }
    }
  }
}

uint64_t sub_101A3AD20(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  int v11 = *(long long **)(v7 + 64);
  if (!v11) {
    return 0;
  }
  long long v12 = *v11;
  long long v13 = v11[1];
  long long v14 = v11[3];
  a3[2] = v11[2];
  a3[3] = v14;
  *a3 = v12;
  a3[1] = v13;
  return 1;
}

uint64_t sub_101A3AD88(uint64_t a1, int *a2, _OWORD *a3)
{
  int v6 = (char *)operator new(0x58uLL);
  long long v7 = a3[1];
  *(_OWORD *)(v6 + 24) = *a3;
  *(_OWORD *)(v6 + 4sub_1019DB7E0(qword_10248D888, 0) = v7;
  long long v8 = a3[3];
  *(_OWORD *)(v6 + 56) = a3[2];
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = off_10234DD60;
  *(_OWORD *)(v6 + 72) = v8;
  int v12 = *a2;
  long long v13 = &v12;
  BOOL v9 = sub_10044715C((uint64_t **)(a1 + 56), &v12, (uint64_t)&unk_101D0B290, &v13);
  BOOL v10 = (std::__shared_weak_count *)v9[9];
  v9[8] = (uint64_t *)(v6 + 24);
  v9[9] = (uint64_t *)v6;
  if (v10) {
    sub_1000DB0A0(v10);
  }
  return 1;
}

void sub_101A3AE4C(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101A3AE60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_101A3AEBC(uint64_t a1, unsigned int *a2, _OWORD *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  long long v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10234DD10);
  }
  BOOL v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    BOOL v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      BOOL v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)std::string buf = 68289794;
    int v24 = 0;
    __int16 v25 = 2082;
    *(void *)int v26 = "";
    *(_WORD *)&uint8_t v26[8] = 2082;
    *(void *)&unsigned char v26[10] = "activity";
    __int16 v27 = 2082;
    BOOL v28 = v10;
    __int16 v29 = 2050;
    char v30 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  long long v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      long long v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    uint64_t v31 = v32;
    memset(v32, 0, sizeof(v32));
    char v33 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v31);
    long long v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v30) {
      sub_1000DB0A0(v30);
    }
    sub_1000F5BB0((uint64_t)&v25, *(void **)&v26[6]);
    if (v33) {
      sub_1000DB0A0(v33);
    }
    sub_1000F5BB0((uint64_t)&v31, v32[0]);
  }
  if (a4)
  {
    BOOL v18 = (char *)operator new(0x58uLL);
    long long v19 = a3[1];
    *(_OWORD *)(v18 + 24) = *a3;
    *(_OWORD *)(v18 + 4sub_1019DB7E0(qword_10248D888, 0) = v19;
    long long v20 = a3[3];
    *(_OWORD *)(v18 + 56) = a3[2];
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = 0;
    *(void *)BOOL v18 = off_10234DD60;
    *(_OWORD *)(v18 + 72) = v20;
    int v21 = (std::__shared_weak_count *)v14[9];
    char v14[8] = (uint64_t *)(v18 + 24);
    v14[9] = (uint64_t *)v18;
    if (!v21) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v21 = (std::__shared_weak_count *)v14[9];
  char v14[8] = 0;
  v14[9] = 0;
  if (v21) {
LABEL_27:
  }
    sub_1000DB0A0(v21);
LABEL_28:
  if (v14[7]) {
    sub_101A3BB14();
  }
  os_activity_scope_leave(&state);
}

void sub_101A3B4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

uint64_t sub_101A3B500()
{
  return 1;
}

void sub_101A3B508(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10234DD10);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)std::string buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10234DD10);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData>::listClients() [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10234DD10);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10234DD10);
      }
      long long v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData>::listClients() [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    long long v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        BOOL v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_10234DD10);
            }
            BOOL v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)std::string buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10234DD10);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData>::listClients() [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            long long v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                long long v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                BOOL v9 = v15;
              }
              while (!v16);
            }
            BOOL v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            long long v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            long long v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            long long v8 = v19;
          }
          while (!v16);
        }
        long long v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_101A3BAB4(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101A3BAE4(id a1)
{
  qword_1024190A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_101A3BB14()
{
}

void sub_101A3BBC8(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      BOOL v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          BOOL v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        __int16 v49 = v9;
        id v13 = sub_101A3C144(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        long long v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            long long v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                long long v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              id v48 = v19;
              sub_101A3BFB8(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              __int16 v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  __int16 v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              __int16 v49 = v29;
              uint64_t v34 = v29[6];
              long long v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      long long v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      long long v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      long long v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              id v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10234DD10);
              }
              int v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::string buf = 136446466;
                uint64_t v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_10234DD10);
                }
                double v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  double v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                double v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                long long v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_101A3BFB8(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_101A3C144(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    long long v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    BOOL result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

void sub_101A3C0B0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10234DD60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101A3C0D0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10234DD60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_101A3C124(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_101A3C144(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_101A3C1E0(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_101A3C54C(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_101A3C1E0(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_101A3C8EC((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_10234DD88);
    }
    uint64_t v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = (unint64_t)"N31CLGeomagneticModelProvider_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_10234DD88);
  }
  uint64_t v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = (unint64_t)"N31CLGeomagneticModelProvider_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_10234DD88);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = (unint64_t)"N31CLGeomagneticModelProvider_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
  int v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLGeomagneticModelProvider_Type::NotificationData, Callbacuint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_101A3C54C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10234DD88);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = (unint64_t)"N31CLGeomagneticModelProvider_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLGeomagneticModelProvider_Type::NotificationData, Callbacuint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10234DD88);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = (unint64_t)"N31CLGeomagneticModelProvider_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_10234DD88);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_101A3C8EC(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1023954E0))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)64)
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10234DD88);
      }
      uint64_t v4 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 68289539;
        int v8 = 0;
        __int16 v9 = 2082;
        uint64_t v10 = "";
        __int16 v11 = 2082;
        unint64_t v12 = "assert";
        __int16 v13 = 2081;
        long long v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_102418F90 != -1) {
          dispatch_once(&qword_102418F90, &stru_10234DD88);
        }
      }
      uint64_t v5 = qword_102418F98;
      if (os_signpost_enabled((os_log_t)qword_102418F98))
      {
        *(_DWORD *)std::string buf = 68289539;
        int v8 = 0;
        __int16 v9 = 2082;
        uint64_t v10 = "";
        __int16 v11 = 2082;
        unint64_t v12 = "assert";
        __int16 v13 = 2081;
        long long v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_102418F90 != -1) {
          dispatch_once(&qword_102418F90, &stru_10234DD88);
        }
      }
      int v6 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 68289539;
        int v8 = 0;
        __int16 v9 = 2082;
        uint64_t v10 = "";
        __int16 v11 = 2082;
        unint64_t v12 = "assert";
        __int16 v13 = 2081;
        long long v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }
      abort_report_np();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes")]];
  }

  return [a2 cppObjectPtr];
}

void sub_101A3CBB0(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_101A3CBE0()
{
}

uint64_t sub_101A3CC94(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

void sub_101A3CCB4(void *a1)
{
}

void sub_101A3CDA8(_Unwind_Exception *a1)
{
  sub_101A1E9FC(v2);
  sub_1012D0524(v1);
  _Unwind_Resume(a1);
}

BOOL sub_101A3CDDC(uint64_t a1, void *__dst)
{
  int v2 = *(unsigned __int8 *)(a1 + 272);
  if (*(unsigned char *)(a1 + 272)) {
    memcpy(__dst, (const void *)(a1 + 584), 0x140uLL);
  }
  return v2 != 0;
}

BOOL sub_101A3CE1C(uint64_t a1, void *__dst)
{
  int v2 = *(unsigned __int8 *)(a1 + 256);
  if (*(unsigned char *)(a1 + 256)) {
    memcpy(__dst, (const void *)(a1 + 568), 0x140uLL);
  }
  return v2 != 0;
}

void sub_101A3CE5C(uint64_t a1, int a2)
{
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10234DFC0);
  }
  uint64_t v4 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Starting gyro calibration, user initiated, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234DFC0);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGyroCalibrationDatabaseLocalNonlinear::startCalibration(BOOL)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (!*(void *)(a1 + 576))
  {
    [[CLDeviceMotionProperties alloc] initWithMode:19];
    operator new();
  }
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10234DFC0);
  }
  int v6 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)std::string buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unint64_t v12 = "";
    __int16 v13 = 2082;
    long long v14 = "assert";
    __int16 v15 = 2081;
    __int16 v16 = "!fDeviceMotionDispatcher";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234DFC0);
    }
  }
  char v7 = off_1024190B8;
  if (os_signpost_enabled((os_log_t)off_1024190B8))
  {
    *(_DWORD *)std::string buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unint64_t v12 = "";
    __int16 v13 = 2082;
    long long v14 = "assert";
    __int16 v15 = 2081;
    __int16 v16 = "!fDeviceMotionDispatcher";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234DFC0);
    }
  }
  int v8 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 68289539;
    int v10 = 0;
    __int16 v11 = 2082;
    unint64_t v12 = "";
    __int16 v13 = 2082;
    long long v14 = "assert";
    __int16 v15 = 2081;
    __int16 v16 = "!fDeviceMotionDispatcher";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }
  abort_report_np();
  __break(1u);
}

void sub_101A3D2EC()
{
}

void sub_101A3D31C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = sub_10125D0BC();
  uint64_t v3 = *(void *)(v1 + 576);

  sub_10125DACC(v2, v3, 1.0);
}

void sub_101A3D358(uint64_t a1)
{
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10234DFC0);
  }
  uint64_t v2 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stopped gyro calibration", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234DFC0);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGyroCalibrationDatabaseLocalNonlinear::teardown()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (*(void *)(a1 + 576))
  {
    uint64_t v3 = sub_10125D0BC();
    sub_10125DDA0(v3, *(void *)(a1 + 576));
    uint64_t v4 = *(void *)(a1 + 576);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    *(void *)(a1 + 576) = 0;
  }
}

uint64_t sub_101A3D534(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

id sub_101A3D558(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  sub_101A1BC38(a1 + 16);
  sub_101A1CAB0(v2);
  [*(id *)(a1 + 280) setNextFireDelay:1.79769313e308];
  uint64_t v3 = *(void **)(a1 + 288);

  return [v3 setNextFireDelay:1.79769313e308];
}

uint64_t sub_101A3D5C0(uint64_t a1, double a2)
{
  uint64_t v3 = a1 + 16;
  uint64_t v2 = *(void *)(a1 + 16);
  *(double *)(a1 + 296) = a2;
  (*(void (**)(uint64_t, uint64_t))(v2 + 288))(a1 + 16, a1 + 592);

  return sub_101A1C9D8(v3);
}

void sub_101A3D62C(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v3 = *(void *)(a1 + 304);
  uint64_t v4 = *(void *)(a1 + 312);
  int v5 = *(unsigned __int8 *)(a1 + 271);
  int v6 = *(uint64_t (****)(void))(a1 + 328);
  char v7 = *(std::__shared_weak_count **)(a1 + 336);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    memset(__src, 0, 282);
    int v22 = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    memset(__src, 0, 282);
    int v22 = 0;
  }
  BOOL v21 = v6;
  sub_101A3DCD0(v3, v4, &v21, (uint64_t)&__p);
  sub_1013F6B40((float **)&__p, v5 != 0, (uint64_t)__src);
  if (__p)
  {
    int v24 = (char *)__p;
    operator delete(__p);
  }
  if (v22) {
    sub_1000DB0A0(v22);
  }
  std::string __p = 0;
  int v24 = 0;
  uint64_t v25 = 0;
  if (v4 != v3)
  {
    sub_1000DA584(&__p, (v4 - v3) >> 5);
    uint64_t v8 = 0;
    __int16 v9 = v24;
    do
    {
      int v10 = &v9[v8];
      long long v11 = *(_OWORD *)v3;
      *((void *)v10 + 2) = *(void *)(v3 + 16);
      *(_OWORD *)int v10 = v11;
      v3 += 32;
      v8 += 24;
    }
    while (v3 != v4);
    int v24 = &v9[v8];
  }
  sub_1013F6EE4((uint64_t)__src, (uint64_t *)&__p, v5 != 0, Current);
  if (__p)
  {
    int v24 = (char *)__p;
    operator delete(__p);
  }
  if (v7) {
    sub_1000DB0A0(v7);
  }
  *(_DWORD *)(a1 + 584) = 2;
  *(void *)(a1 + 592) = *(void *)(a1 + 296);
  *(double *)(a1 + 60sub_1019DB7E0(qword_10248D888, 0) = Current;
  unint64_t v12 = *(float **)(a1 + 304);
  __int16 v13 = *(float **)(a1 + 312);
  if (v12 == v13)
  {
    float v15 = 3.4028e38;
    float v14 = 1.1755e-38;
  }
  else
  {
    float v14 = 1.1755e-38;
    float v15 = 3.4028e38;
    do
    {
      float v16 = *v12;
      v12 += 8;
      float v17 = v16;
      if (v16 < v15) {
        float v15 = v17;
      }
      if (v17 > v14) {
        float v14 = v17;
      }
    }
    while (v12 != v13);
  }
  *(float *)(a1 + 608) = v15;
  *(float *)(a1 + 612) = v14;
  *(unsigned char *)(a1 + 616) = *(unsigned char *)(a1 + 273);
  memcpy((void *)(a1 + 617), __src, 0x11AuLL);
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_10234DFC0);
  }
  __int16 v18 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Nonlinear gyro database computed fit.", (uint8_t *)&__p, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_10234DFC0);
    }
    LOWORD(v21) = 0;
    unint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGyroCalibrationDatabaseLocalNonlinear::computeFit()", "%s\n", v19);
    if (v19 != (char *)&__p) {
      free(v19);
    }
  }
  *(unsigned char *)(a1 + 272) = 1;
}

void sub_101A3D9B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50)
{
  if (__p) {
    operator delete(__p);
  }
  if (v50) {
    sub_1000DB0A0(v50);
  }
  _Unwind_Resume(exception_object);
}

void sub_101A3DA18(uint64_t a1)
{
}

unsigned char *sub_101A3DA20(unsigned char *result)
{
  if (result[272])
  {
    result[616] = result[273];
    return (unsigned char *)sub_101A1C9D8((uint64_t)(result + 16));
  }
  return result;
}

uint64_t sub_101A3DA40(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 256))
  {
    *(unsigned char *)(a1 + 60sub_1019DB7E0(qword_10248D888, 0) = *(unsigned char *)(a1 + 257);
    return sub_101A1C9D8(a1);
  }
  return a1;
}

void sub_101A3DA58(uint64_t a1, uint64_t a2)
{
}

void sub_101A3DA60(uint64_t a1, uint64_t a2)
{
}

void sub_101A3DA68(uint64_t a1, uint64_t a2)
{
}

void sub_101A3DA70(uint64_t a1, uint64_t a2)
{
}

void *sub_101A3DA78(void *a1)
{
  *a1 = off_10234DDB8;
  uint64_t v2 = (uint64_t)(a1 + 2);
  a1[2] = off_10234DE38;
  sub_1007795E8(a1 + 71);
  sub_101A1E9FC(v2);

  return sub_1012D0524(a1);
}

void sub_101A3DAF8(void *a1)
{
  *a1 = off_10234DDB8;
  uint64_t v2 = (uint64_t)(a1 + 2);
  a1[2] = off_10234DE38;
  sub_1007795E8(a1 + 71);
  sub_101A1E9FC(v2);
  sub_1012D0524(a1);

  operator delete();
}

void *sub_101A3DB8C(void *a1)
{
  uint64_t v2 = a1 - 2;
  *(a1 - 2) = off_10234DDB8;
  *a1 = off_10234DE38;
  sub_1007795E8(a1 + 69);
  sub_101A1E9FC((uint64_t)a1);

  return sub_1012D0524(v2);
}

void sub_101A3DC0C(void *a1)
{
  uint64_t v2 = a1 - 2;
  *(a1 - 2) = off_10234DDB8;
  *a1 = off_10234DE38;
  sub_1007795E8(a1 + 69);
  sub_101A1E9FC((uint64_t)a1);
  sub_1012D0524(v2);

  operator delete();
}

void sub_101A3DCA0(id a1)
{
  off_1024190B8 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

uint64_t sub_101A3DCD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (****a3)(void)@<X2>, uint64_t a4@<X8>)
{
  memset(v25, 0, 140);
  sub_101A3E1E0((void *)a4, 0xAFuLL);
  for (; a1 != a2; a1 += 32)
  {
    unsigned int v8 = (int)(float)(*(float *)a1 * 0.5);
    if (v8 <= 0x22)
    {
      unsigned int v9 = *((_DWORD *)v25 + v8);
      *((_DWORD *)v25 + v8) = v9 + 1;
      if (v9 < 5 || (unsigned int v9 = (***a3)(), v9 <= 4))
      {
        unint64_t v10 = v9 + 5 * v8;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3) <= v10)
        {
          if (qword_1024190B0 != -1) {
            goto LABEL_19;
          }
          while (1)
          {
            float v14 = off_1024190B8;
            if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)std::string buf = 68289539;
              int v18 = 0;
              __int16 v19 = 2082;
              int v20 = "";
              __int16 v21 = 2082;
              int v22 = "assert";
              __int16 v23 = 2081;
              int v24 = "targetStratum * kStrataSize + target < samples.size()";
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
              if (qword_1024190B0 != -1) {
                dispatch_once(&qword_1024190B0, &stru_10234DFC0);
              }
            }
            float v15 = off_1024190B8;
            if (os_signpost_enabled((os_log_t)off_1024190B8))
            {
              *(_DWORD *)std::string buf = 68289539;
              int v18 = 0;
              __int16 v19 = 2082;
              int v20 = "";
              __int16 v21 = 2082;
              int v22 = "assert";
              __int16 v23 = 2081;
              int v24 = "targetStratum * kStrataSize + target < samples.size()";
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
              if (qword_1024190B0 != -1) {
                dispatch_once(&qword_1024190B0, &stru_10234DFC0);
              }
            }
            float v16 = off_1024190B8;
            if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)std::string buf = 68289539;
              int v18 = 0;
              __int16 v19 = 2082;
              int v20 = "";
              __int16 v21 = 2082;
              int v22 = "assert";
              __int16 v23 = 2081;
              int v24 = "targetStratum * kStrataSize + target < samples.size()";
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
            }
            abort_report_np();
            __break(1u);
LABEL_19:
            dispatch_once(&qword_1024190B0, &stru_10234DFC0);
          }
        }
        uint64_t v11 = *(void *)a4 + 24 * v10;
        *(_DWORD *)uint64_t v11 = *(_DWORD *)a1;
        *(_DWORD *)(v11 + 4) = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(v11 + 8) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(v11 + 12) = *(_DWORD *)(a1 + 12);
        *(void *)(v11 + 16) = *(void *)(a1 + 16);
      }
    }
  }
  *(_DWORD *)std::string buf = 0;
  unint64_t v12 = sub_101A3E0C4(*(long long **)a4, *(long long **)(a4 + 8), (unsigned int *)buf, (uint64_t)v25);
  return sub_101A3E178(a4, (uint64_t)v12, *(void *)(a4 + 8));
}

void sub_101A3E09C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_101A3E0C4(long long *result, long long *a2, unsigned int *a3, uint64_t a4)
{
  if (result != a2)
  {
    for (unsigned int i = *a3; ; ++i)
    {
      *a3 = i + 1;
      if (i % 5 >= *(_DWORD *)(a4 + 4 * (i / 5uLL))) {
        break;
      }
      uint64_t result = (long long *)((char *)result + 24);
      if (result == a2) {
        return a2;
      }
    }
  }
  if (result != a2)
  {
    for (uint64_t j = (long long *)((char *)result + 24); j != a2; uint64_t j = (long long *)((char *)j + 24))
    {
      unint64_t v6 = *a3 / 5uLL;
      unsigned int v7 = *a3 % 5;
      ++*a3;
      if (v7 < *(_DWORD *)(a4 + 4 * v6))
      {
        long long v8 = *j;
        *((void *)result + 2) = *((void *)j + 2);
        *uint64_t result = v8;
        uint64_t result = (long long *)((char *)result + 24);
      }
    }
  }
  return result;
}

uint64_t sub_101A3E178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = a2;
    if (a3 != v3)
    {
      uint64_t v5 = 8 * ((a3 - a2) >> 3);
      uint64_t v4 = a2;
      do
      {
        long long v6 = *(_OWORD *)(v4 + v5);
        *(void *)(v4 + 16) = *(void *)(v4 + v5 + 16);
        *(_OWORD *)uint64_t v4 = v6;
        v4 += 24;
      }
      while (v4 + v5 != v3);
    }
    *(void *)(a1 + 8) = v4;
  }
  return a2;
}

void *sub_101A3E1E0(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1000DA584(a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_101A3E260(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_101A3E280(void *a1)
{
  sub_100E66B5C(a1);

  operator delete();
}

BOOL sub_101A3E2B8(uint64_t a1, uint64_t *a2)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_10234E048);
  }
  uint64_t v3 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *a2;
    *(_DWORD *)std::string buf = 136315394;
    unsigned int v9 = "PreviousCoverOpenTimestamp";
    __int16 v10 = 2048;
    uint64_t v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Setting property %s to %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10234E048);
    }
    unsigned int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCoverStateDaemon::setLastCoverStateChangeTimestamp(const CFAbsoluteTime &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  uint64_t v5 = sub_1000A6958();
  return sub_10016332C(v5, "PreviousCoverOpenTimestamp", a2);
}

double sub_101A3E4A8()
{
  double v4 = 0.0;
  uint64_t v0 = sub_1000A6958();
  if ((sub_1000A699C(v0, "PreviousCoverOpenTimestamp", &v4) & 1) == 0) {
    double v4 = -1.0;
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_10234E048);
  }
  uint64_t v1 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 134217984;
    double v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Last cover open timestamp = %f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10234E048);
    }
    int v5 = 134217984;
    double v6 = v4;
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFAbsoluteTime CLCoverStateDaemon::getLastCoverStateChangeTimestamp()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  return v4;
}

void sub_101A3E67C()
{
}

void sub_101A3E6E0()
{
}

double sub_101A3E704()
{
  return -1.0;
}

double sub_101A3E70C()
{
  return -1.0;
}

void sub_101A3E718(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_101A3F4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_101A3FF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

void sub_101A4097C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v6 = [a4 countByEnumeratingWithState:&v19 objects:v24 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v20;
LABEL_3:
    uint64_t v9 = 0;
    while (1)
    {
      if (*(void *)v20 != v8) {
        objc_enumerationMutation(a4);
      }
      __int16 v10 = *(void **)(*((void *)&v19 + 1) + 8 * v9);
      float v17 = 0;
      v18[0] = 0;
      sub_101A40D64([v10 taskDescription], v18, &v17);
      if ([v18[0] isEqualToString:@"registration"]) {
        break;
      }
      if (v7 == (id)++v9)
      {
        id v7 = [a4 countByEnumeratingWithState:&v19 objects:v24 count:16];
        if (v7) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
    if (qword_1024191A0 != -1) {
      dispatch_once(&qword_1024191A0, &stru_10234E090);
    }
    float v15 = qword_1024191A8;
    if (os_log_type_enabled((os_log_t)qword_1024191A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Registration request already in progress.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191A0 != -1) {
        dispatch_once(&qword_1024191A0, &stru_10234E090);
      }
      goto LABEL_27;
    }
  }
  else
  {
LABEL_9:
    uint64_t v11 = +[NSMutableURLRequest requestWithURL:*(void *)(*(void *)(a1 + 32) + 104)];
    [(NSMutableURLRequest *)v11 setAllowsCellularAccess:0];
    [(NSMutableURLRequest *)v11 setHTTPMethod:@"POST"];
    uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 80);
    if (v12) {
      [(NSMutableURLRequest *)v11 setValue:v12 forHTTPHeaderField:@"Authorization"];
    }
    [(NSMutableURLRequest *)v11 setValue:@"application/octet-stream" forHTTPHeaderField:@"Content-Type"];
    [(NSMutableURLRequest *)v11 setValue:@"application/json" forHTTPHeaderField:@"Accept"];
    id v13 = [*(id *)(*(void *)(a1 + 32) + 16) downloadTaskWithRequest:v11];
    [v13 setTaskDescription:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@::%@", @"registration", &stru_10234F018)];
    [v13 resume];
    if (qword_1024191A0 != -1) {
      dispatch_once(&qword_1024191A0, &stru_10234E090);
    }
    float v14 = qword_1024191A8;
    if (os_log_type_enabled((os_log_t)qword_1024191A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Created request for registration.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191A0 != -1) {
        dispatch_once(&qword_1024191A0, &stru_10234E090);
      }
      LOWORD(v18[0]) = 0;
LABEL_27:
      float v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLWorkoutRecorderPublisher sendRegisterRequest]_block_invoke", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
  }
}

NSURL *sub_101A40D64(void *a1, void *a2, NSURL **a3)
{
  if (a2)
  {
    if (a3) {
      goto LABEL_3;
    }
  }
  else
  {
    [+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler") handleFailureInFunction:+[NSString stringWithUTF8String:"void parseTaskDescription(NSString *, NSString **, NSURL **)"], @"CLWorkoutRecorderPublisher.mm", 558, @"Invalid parameter not satisfying: %@", @"requestType" file lineNumber description];
    if (a3) {
      goto LABEL_3;
    }
  }
  [+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler") handleFailureInFunction:+[NSString stringWithUTF8String:"void parseTaskDescription(NSString *, NSString **, NSURL **)"], @"CLWorkoutRecorderPublisher.mm", 559, @"Invalid parameter not satisfying: %@", @"requestURL" file lineNumber description];
LABEL_3:
  id v6 = [a1 componentsSeparatedByString:@"::"];
  if ([v6 count] == (id)2)
  {
    *a2 = [v6 objectAtIndexedSubscript:0];
    uint64_t result = +[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", [v6 objectAtIndexedSubscript:1]);
  }
  else
  {
    uint64_t result = 0;
    *a2 = 0;
  }
  *a3 = result;
  return result;
}

void sub_101A40F20(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v6 = [a4 countByEnumeratingWithState:&v20 objects:v25 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v21;
LABEL_3:
    uint64_t v9 = 0;
    while (1)
    {
      if (*(void *)v21 != v8) {
        objc_enumerationMutation(a4);
      }
      __int16 v10 = *(void **)(*((void *)&v20 + 1) + 8 * v9);
      int v18 = 0;
      v19[0] = 0;
      sub_101A40D64([v10 taskDescription], v19, &v18);
      if ([v19[0] isEqualToString:@"configuration"]) {
        break;
      }
      if (v7 == (id)++v9)
      {
        id v7 = [a4 countByEnumeratingWithState:&v20 objects:v25 count:16];
        if (v7) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
    if (qword_1024191A0 != -1) {
      dispatch_once(&qword_1024191A0, &stru_10234E090);
    }
    float v16 = qword_1024191A8;
    if (os_log_type_enabled((os_log_t)qword_1024191A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Request for configuration already in progress.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191A0 != -1) {
        dispatch_once(&qword_1024191A0, &stru_10234E090);
      }
      goto LABEL_27;
    }
  }
  else
  {
LABEL_9:
    uint64_t v11 = +[NSMutableURLRequest requestWithURL:*(void *)(*(void *)(a1 + 32) + 120)];
    [(NSMutableURLRequest *)v11 setAllowsCellularAccess:0];
    [(NSMutableURLRequest *)v11 setHTTPMethod:@"GET"];
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(v12 + 80);
    if (v13)
    {
      [(NSMutableURLRequest *)v11 setValue:v13 forHTTPHeaderField:@"Authorization"];
      uint64_t v12 = *(void *)(a1 + 32);
    }
    id v14 = [*(id *)(v12 + 16) downloadTaskWithRequest:v11];
    [v14 setTaskDescription:+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@::%@", @"configuration", &stru_10234F018)];
    [v14 resume];
    if (qword_1024191A0 != -1) {
      dispatch_once(&qword_1024191A0, &stru_10234E090);
    }
    float v15 = qword_1024191A8;
    if (os_log_type_enabled((os_log_t)qword_1024191A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Created request for configuration.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191A0 != -1) {
        dispatch_once(&qword_1024191A0, &stru_10234E090);
      }
      LOWORD(v19[0]) = 0;
LABEL_27:
      float v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLWorkoutRecorderPublisher sendConfigurationRequest]_block_invoke", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
}

id sub_101A41558(uint64_t a1)
{
  return _[*(id *)(a1 + 32) sendRegisterRequest];
}

id sub_101A41650(uint64_t a1)
{
  return _[*(id *)(a1 + 32) sendConfigurationRequest];
}

void sub_101A42B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_101A42BBC(void *a1)
{
  id v1 = [[objc_msgSend(a1, "lastPathComponent") lowercaseString];
  return !v1
      || [v1 isEqualToString:[+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "53681040-29d2-4420-988a-adbdf2f02905") lowercaseString]];
}

void sub_101A44924(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_101A44978(id a1)
{
  qword_1024191A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorderPublisher");
}

void sub_101A449A8(id a1)
{
  qword_102419618 = (uint64_t)os_log_create("com.apple.locationd.Utility", "QA");
}

uint64_t sub_101A449D8(uint64_t a1)
{
  return a1;
}

uint64_t sub_101A44A04(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_101A452E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_101A455A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a53 < 0) {
    operator delete(*v53);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_101A459E4(_DWORD *result, _DWORD *a2, _DWORD *a3)
{
  if (result == a2)
  {
LABEL_4:
    uint64_t result = a2;
  }
  else
  {
    while (*result != *a3)
    {
      if (++result == a2) {
        goto LABEL_4;
      }
    }
  }
  if (result != a2)
  {
    for (unsigned int i = result + 1; i != a2; ++i)
    {
      if (*i != *a3) {
        *result++ = *i;
      }
    }
  }
  return result;
}

void sub_101A45A9C(id a1)
{
  qword_102419198 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

uint64_t *sub_101A45ACC(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = a1;
  *a2 = a3;
  if (*(void *)qword_102489898)
  {
    qword_102489898 = *(void *)qword_102489898;
    a3 = *a2;
  }
  uint64_t result = sub_1000EDFE8((uint64_t *)qword_1024898A0, a3);
  ++qword_1024898A8;
  return result;
}

void *sub_101A45B2C(void *result, char *__src, char *a3, unint64_t a4)
{
  id v6 = __src;
  id v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *id v7 = 0;
      v7[1] = 0;
      _DWORD v7[2] = 0;
    }
    if (a4 >> 62) {
      goto LABEL_23;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    unint64_t v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 62) {
LABEL_23:
    }
      sub_1001D7FD4();
    uint64_t result = operator new(4 * v11);
    uint64_t v9 = (char *)result;
    *id v7 = result;
    v7[1] = result;
    _DWORD v7[2] = (char *)result + 4 * v11;
    size_t v12 = a3 - v6;
    if (v12) {
      uint64_t result = memcpy(result, v6, v12);
    }
    uint64_t v13 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  uint64_t v13 = (void **)(result + 1);
  id v14 = (unsigned char *)result[1];
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
  {
    size_t v12 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    float v17 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v17, __src, v12);
    goto LABEL_22;
  }
  float v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v14 - v9);
    uint64_t v9 = (char *)*v13;
  }
  size_t v12 = a3 - v16;
  if (v12)
  {
    float v17 = v9;
    uint64_t __src = v16;
    goto LABEL_21;
  }
LABEL_22:
  *uint64_t v13 = &v9[v12];
  return result;
}

uint64_t sub_101A45C6C()
{
  v16[0] = 0;
  uint64_t v17 = objc_opt_class();
  int v18 = 1;
  uint64_t v19 = objc_opt_class();
  int v20 = 2;
  uint64_t v21 = objc_opt_class();
  int v22 = 3;
  uint64_t v23 = objc_opt_class();
  int v24 = 4;
  uint64_t v25 = objc_opt_class();
  int v26 = 5;
  uint64_t v27 = objc_opt_class();
  int v28 = 6;
  uint64_t v29 = objc_opt_class();
  int v30 = 7;
  uint64_t v31 = objc_opt_class();
  int v32 = 8;
  uint64_t v33 = objc_opt_class();
  int v34 = 9;
  uint64_t v35 = objc_opt_class();
  int v36 = 10;
  uint64_t v37 = objc_opt_class();
  int v38 = 11;
  uint64_t v39 = objc_opt_class();
  int v40 = 12;
  uint64_t v41 = objc_opt_class();
  int v42 = 13;
  uint64_t v43 = objc_opt_class();
  int v44 = 14;
  uint64_t v45 = objc_opt_class();
  int v46 = 15;
  uint64_t v47 = objc_opt_class();
  int v48 = 16;
  uint64_t v49 = objc_opt_class();
  int v50 = 17;
  uint64_t v51 = objc_opt_class();
  int v52 = 18;
  uint64_t v53 = objc_opt_class();
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  int v54 = 19;
  uint64_t v55 = objc_opt_class();
  qword_1024898A8 = 0;
  qword_1024898A0 = 0;
  uint64_t v2 = &qword_1024898A0;
  qword_102489898 = (uint64_t)&qword_1024898A0;
  while (1)
  {
    uint64_t v3 = &v16[4 * v1];
    if (v2 == &qword_1024898A0)
    {
      int v5 = &qword_1024898A0;
LABEL_10:
      if (v0)
      {
        uint64_t v9 = (uint64_t **)(v5 + 1);
        if (v5[1]) {
          goto LABEL_23;
        }
      }
      else
      {
LABEL_21:
        uint64_t v9 = (uint64_t **)&qword_1024898A0;
        int v5 = &qword_1024898A0;
      }
LABEL_22:
      size_t v12 = (uint64_t *)operator new(0x30uLL);
      *((_OWORD *)v12 + 2) = *v3;
      sub_101A45ACC((uint64_t)v5, v9, v12);
      goto LABEL_23;
    }
    double v4 = (uint64_t *)v0;
    if (v0)
    {
      do
      {
        int v5 = v4;
        double v4 = (uint64_t *)v4[1];
      }
      while (v4);
    }
    else
    {
      id v6 = &qword_1024898A0;
      do
      {
        int v5 = (uint64_t *)v6[2];
        BOOL v7 = *v5 == (void)v6;
        id v6 = v5;
      }
      while (v7);
    }
    int v8 = *(_DWORD *)v3;
    if (*((_DWORD *)v5 + 8) < *(_DWORD *)v3) {
      goto LABEL_10;
    }
    if (!v0) {
      goto LABEL_21;
    }
    uint64_t v10 = v0;
    while (1)
    {
      while (1)
      {
        int v5 = (uint64_t *)v10;
        int v11 = *(_DWORD *)(v10 + 32);
        if (v11 <= v8) {
          break;
        }
        uint64_t v10 = *v5;
        uint64_t v9 = (uint64_t **)v5;
        if (!*v5) {
          goto LABEL_22;
        }
      }
      if (v11 >= v8) {
        break;
      }
      uint64_t v10 = v5[1];
      if (!v10)
      {
        uint64_t v9 = (uint64_t **)(v5 + 1);
        goto LABEL_22;
      }
    }
LABEL_23:
    if (++v1 == 20) {
      break;
    }
    uint64_t v2 = (uint64_t *)qword_102489898;
    uint64_t v0 = qword_1024898A0;
  }
  __cxa_atexit((void (*)(void *))sub_101A449D8, &qword_102489898, (void *)&_mh_execute_header);
  qword_1024898B8 = 0;
  unk_1024898C0 = 0;
  qword_1024898B0 = 0;
  uint64_t v13 = operator new(0x4CuLL);
  qword_1024898B0 = (uint64_t)v13;
  _OWORD v13[2] = xmmword_101E54658;
  void v13[3] = unk_101E54668;
  *(_OWORD *)((char *)v13 + 6sub_1019DB7E0(qword_10248D888, 0) = unk_101E54674;
  *uint64_t v13 = xmmword_101E54638;
  v13[1] = unk_101E54648;
  qword_1024898B8 = (uint64_t)v13 + 76;
  unk_1024898C0 = (char *)v13 + 76;
  __cxa_atexit((void (*)(void *))sub_101A44A04, &qword_1024898B0, (void *)&_mh_execute_header);
  qword_1024898D0 = 0;
  unk_1024898D8 = 0;
  qword_1024898C8 = 0;
  id v14 = operator new(0x40uLL);
  qword_1024898C8 = (uint64_t)v14;
  *id v14 = xmmword_101E54684;
  v14[1] = unk_101E54694;
  int v14[2] = xmmword_101E546A4;
  void v14[3] = unk_101E546B4;
  qword_1024898D0 = (uint64_t)(v14 + 4);
  unk_1024898D8 = v14 + 4;
  __cxa_atexit((void (*)(void *))sub_101A44A04, &qword_1024898C8, (void *)&_mh_execute_header);
  qword_1024898E0 = 0;
  qword_1024898E8 = 0;
  unk_1024898F0 = 0;

  return __cxa_atexit((void (*)(void *))sub_101A44A04, &qword_1024898E0, (void *)&_mh_execute_header);
}

void sub_101A460B4(_Unwind_Exception *a1)
{
  sub_100589514(v1);
  _Unwind_Resume(a1);
}

void sub_101A46178(id a1)
{
  qword_102489908 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLMotionHintLoggerSilo"];
}

void sub_101A46678(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  double v4 = v3;
  id v6 = v5;
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(v2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10234E220);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v30 = 1;
    BOOL v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionHintLogger::onDaemonStatus", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10234E220);
    }
    int v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t buf = 68289538;
      __int16 v46 = 2082;
      uint64_t v47 = "";
      __int16 v48 = 2082;
      uint64_t v49 = "activity";
      __int16 v50 = 2050;
      uint64_t v51 = v2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionHintLogger::onDaemonStatus\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", (uint8_t *)&buf, 0x26u);
    }
  }
  else
  {
    char v30 = 0;
  }
  int v32 = off_1022E7820;
  uint64_t v9 = mach_absolute_time();
  double v34 = sub_1000D3D90(v9);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  sub_10170140C(&buf);
  sub_1017273F8((uint64_t)&buf);
  double v10 = v34;
  CFAbsoluteTime v52 = Current;
  v54 |= 1u;
  uint64_t v11 = v53;
  *(unsigned char *)(v53 + 24) |= 1u;
  *(double *)(v11 + 8) = v10;
  size_t v31 = 0;
  switch(*v6)
  {
    case 2:
      __int16 v35 = 4;
      uint64_t v12 = v53;
      *(unsigned char *)(v53 + 24) |= 2u;
      *(_DWORD *)(v12 + 16) = 4;
      uint64_t v13 = v53;
      *(unsigned char *)(v53 + 24) |= 4u;
      *(_DWORD *)(v13 + 2sub_1019DB7E0(qword_10248D888, 0) = 0;
      goto LABEL_39;
    case 3:
      int v20 = sysctlbyname("kern.wakereason", __s1, &v31, 0, 0);
      HIBYTE(v35) = 1;
      uint64_t v21 = v53;
      *(unsigned char *)(v53 + 24) |= 4u;
      *(_DWORD *)(v21 + 2sub_1019DB7E0(qword_10248D888, 0) = 1;
      if (v20 < 0) {
        goto LABEL_38;
      }
      if (strstr(__s1, "hold"))
      {
        int v22 = 2;
      }
      else if (strstr(__s1, "menu"))
      {
        int v22 = 3;
      }
      else if (strstr(__s1, "rtc"))
      {
        int v22 = 4;
      }
      else if (strstr(__s1, "wlan"))
      {
        int v22 = 5;
      }
      else
      {
        if (!strstr(__s1, "baseband")) {
          goto LABEL_38;
        }
        int v22 = 6;
      }
      HIBYTE(v35) = v22;
      uint64_t v26 = v53;
      *(unsigned char *)(v53 + 24) |= 4u;
      *(_DWORD *)(v26 + 2sub_1019DB7E0(qword_10248D888, 0) = v22;
LABEL_38:
      LOBYTE(v35) = 4;
      uint64_t v27 = v53;
      *(unsigned char *)(v53 + 24) |= 2u;
      *(_DWORD *)(v27 + 16) = 4;
LABEL_39:
      uint64_t v28 = sub_101282D9C();
      sub_10128431C(v28, (uint64_t)&v32);
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_10234E260);
      }
      if (qword_10248AF90) {
        sub_1019E5150(qword_10248AF90, (uint64_t)&buf);
      }
LABEL_43:
      sub_101706914((PB::Base *)&buf);
      if (v30) {
        os_activity_scope_leave(&state);
      }
      return;
    case 7:
      if (*((_DWORD *)v4 + 3) == 4) {
        int v14 = 13;
      }
      else {
        int v14 = 3;
      }
      LOBYTE(v35) = v14;
      uint64_t v15 = v53;
      *(unsigned char *)(v53 + 24) |= 2u;
      *(_DWORD *)(v15 + 16) = v14;
      HIBYTE(v35) = v4[9];
      int v16 = HIBYTE(v35);
      uint64_t v17 = v53;
      *(unsigned char *)(v53 + 24) |= 4u;
      *(_DWORD *)(v17 + 2sub_1019DB7E0(qword_10248D888, 0) = v16;
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234E240);
      }
      int v18 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int v40 = 67240448;
        int v41 = v35;
        __int16 v42 = 1026;
        int v43 = HIBYTE(v35);
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#Notice gesture charging type %{public}d value %{public}d", v40, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(v40, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_10234E240);
        }
        int v36 = 67240448;
        int v37 = v35;
        __int16 v38 = 1026;
        int v39 = HIBYTE(v35);
        uint64_t v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionHintLogger::onDaemonStatus(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v19);
        if (v19 != (char *)v40) {
          free(v19);
        }
      }
      goto LABEL_39;
    case 0xA:
      int v23 = 6;
      goto LABEL_28;
    case 0xB:
      int v23 = 7;
LABEL_28:
      LOBYTE(v35) = v23;
      HIBYTE(v35) = *v4;
      uint64_t v24 = v53;
      *(unsigned char *)(v53 + 24) |= 2u;
      *(_DWORD *)(v24 + 16) = v23;
      uint64_t v25 = v53;
      LODWORD(v24) = *v4;
      *(unsigned char *)(v53 + 24) |= 4u;
      *(_DWORD *)(v25 + 2sub_1019DB7E0(qword_10248D888, 0) = v24;
      goto LABEL_39;
    default:
      goto LABEL_43;
  }
}

void sub_101A46C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13)
{
  if (a13) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

void sub_101A46CD8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (uint64_t *)sub_100A26784();
  uint64_t v5 = 0x10000000BLL;
  char v6 = 0;
  sub_101A46D60(v2, (uint64_t)&v5, (uint64_t *)&v7);
  long long v3 = v7;
  long long v7 = 0uLL;
  double v4 = *(std::__shared_weak_count **)(v1 + 160);
  *(_OWORD *)(v1 + 152) = v3;
  if (v4)
  {
    sub_1000DB0A0(v4);
    if (*((void *)&v7 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v7 + 1));
    }
  }
  sub_100A2932C(*(uint64_t **)(v1 + 152), (uint64_t)sub_101A46DF8, v1);
}

void sub_101A46D60(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v8 = a1;
  sub_1003A74A0((int *)a2, (int *)(a2 + 4), (char *)(a2 + 8), (uint64_t *)&v8, a3);
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v6 = *a3;
  long long v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100A26C18(a1, &v6);
  if (v7) {
    sub_1000DB0A0(v7);
  }
}

void sub_101A46DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (v12) {
    sub_1000DB0A0(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101A46DF8()
{
  uint64_t result = IOHIDEventGetType();
  if (result == 3)
  {
    int IntegerValue = IOHIDEventGetIntegerValue();
    uint64_t result = IOHIDEventGetIntegerValue();
    if (IntegerValue == 12)
    {
      int v2 = result;
      uint64_t v3 = IOHIDEventGetIntegerValue();
      unint64_t TimeStamp = IOHIDEventGetTimeStamp();
      double v5 = sub_1000D3D90(TimeStamp);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234E240);
      }
      uint64_t v6 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 67240448;
        HIDWORD(buf) = v2;
        __int16 v14 = 1026;
        BOOL v15 = v3 == 1;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Notice gesture button %{public}d down %{public}d", (uint8_t *)&buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_10234E240);
        }
        LODWORD(v19) = 67240448;
        HIDWORD(v19) = v2;
        LOWORD(Current) = 1026;
        *(_DWORD *)((char *)&Current + 2) = v3 == 1;
        uint64_t v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionHintLogger::onButton(int, BOOL, const CFTimeInterval)", "%s\n", v12);
        if (v12 != (char *)&buf) {
          free(v12);
        }
      }
      uint64_t v19 = off_1022E7820;
      double v21 = v5;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      BOOL v23 = v3 == 1;
      sub_10170140C(&buf);
      sub_1017273F8((uint64_t)&buf);
      v18 |= 1u;
      CFAbsoluteTime v16 = Current;
      uint64_t v7 = v17;
      *(unsigned char *)(v17 + 24) |= 1u;
      *(double *)(v7 + 8) = v5;
      uint64_t v8 = v17;
      *(unsigned char *)(v17 + 24) |= 4u;
      *(_DWORD *)(v8 + 2sub_1019DB7E0(qword_10248D888, 0) = v3 == 1;
      if (v2 == 48) {
        int v9 = 2;
      }
      else {
        int v9 = v2 == 64;
      }
      char v22 = v9;
      uint64_t v10 = v17;
      *(unsigned char *)(v17 + 24) |= 2u;
      *(_DWORD *)(v10 + 16) = v9;
      uint64_t v11 = sub_101282D9C();
      sub_10128431C(v11, (uint64_t)&v19);
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_10234E260);
      }
      if (qword_10248AF90) {
        sub_1019E5150(qword_10248AF90, (uint64_t)&buf);
      }
      return sub_101706914((PB::Base *)&buf);
    }
  }
  return result;
}

void sub_101A47160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_101A47180(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  double v4 = v3;
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(v2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10234E220);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v21 = 1;
    double v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionHintLogger::onTelephonyNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10234E220);
    }
    uint64_t v6 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t buf = 68289538;
      __int16 v31 = 2082;
      int v32 = "";
      __int16 v33 = 2082;
      double v34 = "activity";
      __int16 v35 = 2050;
      uint64_t v36 = v2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionHintLogger::onTelephonyNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", (uint8_t *)&buf, 0x26u);
    }
  }
  else
  {
    char v21 = 0;
  }
  uint64_t v7 = (const void *)sub_1000FA17C(v4);
  if (CFEqual(v7, kCTCallStatusChangeNotification))
  {
    char v28 = 1;
    unsigned int v8 = [[[objc_msgSend(*(id *)(v2 + 32), "vendor") proxyForService:@"CLTelephonyService"] syncgetActiveCall:&v28];
    BOOL v23 = off_1022E7820;
    uint64_t v9 = mach_absolute_time();
    double v25 = sub_1000D3D90(v9);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    char v26 = 5;
    sub_10170140C(&buf);
    sub_1017273F8((uint64_t)&buf);
    double v10 = v25;
    CFAbsoluteTime v37 = Current;
    v39 |= 1u;
    uint64_t v11 = v38;
    *(unsigned char *)(v38 + 24) |= 1u;
    *(double *)(v11 + 8) = v10;
    uint64_t v12 = v38;
    *(unsigned char *)(v38 + 24) |= 2u;
    *(_DWORD *)(v12 + 16) = 5;
    if (v28) {
      unsigned int v13 = v8;
    }
    else {
      unsigned int v13 = 0;
    }
    if (v13 == 1)
    {
      char v27 = 1;
      uint64_t v14 = v38;
      *(unsigned char *)(v38 + 24) |= 4u;
      *(_DWORD *)(v14 + 2sub_1019DB7E0(qword_10248D888, 0) = 1;
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234E240);
      }
      BOOL v15 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Notice gesture IN CALL", v29, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_26;
      }
      bzero(v29, 0x65CuLL);
      if (qword_102418FD0 == -1)
      {
LABEL_35:
        __int16 v22 = 0;
        uint64_t v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionHintLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v19);
        if (v19 != (char *)v29) {
          free(v19);
        }
LABEL_26:
        uint64_t v18 = sub_101282D9C();
        sub_10128431C(v18, (uint64_t)&v23);
        if (qword_10248AF88 != -1) {
          dispatch_once(&qword_10248AF88, &stru_10234E260);
        }
        if (qword_10248AF90) {
          sub_1019E5150(qword_10248AF90, (uint64_t)&buf);
        }
        sub_101706914((PB::Base *)&buf);
        goto LABEL_31;
      }
    }
    else
    {
      char v27 = 0;
      uint64_t v16 = v38;
      *(unsigned char *)(v38 + 24) |= 4u;
      *(_DWORD *)(v16 + 2sub_1019DB7E0(qword_10248D888, 0) = 0;
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10234E240);
      }
      uint64_t v17 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Notice gesture OUT OF CALL", v29, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_26;
      }
      bzero(v29, 0x65CuLL);
      if (qword_102418FD0 == -1) {
        goto LABEL_35;
      }
    }
    dispatch_once(&qword_102418FD0, &stru_10234E240);
    goto LABEL_35;
  }
LABEL_31:
  if (v21) {
    os_activity_scope_leave(&state);
  }
}

void sub_101A47708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13)
{
  if (a13) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_101A47744(uint64_t *a1)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_10234E240);
  }
  uint64_t v2 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((_DWORD *)a1 + 2);
    *(_DWORD *)uint64_t buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Notice proximity detection mask %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10234E240);
    }
    int v10 = *((_DWORD *)a1 + 2);
    LODWORD(v16) = 67240192;
    HIDWORD(v16) = v10;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionHintLogger::onProximity(const CLProximityNotifier::Sample *)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  uint64_t v16 = off_1022E6A88;
  uint64_t v18 = *a1;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  int v19 = *((_DWORD *)a1 + 2);
  uint64_t v4 = sub_101282D9C();
  sub_10128431C(v4, (uint64_t)&v16);
  sub_10170140C(buf);
  sub_101727008((uint64_t)buf);
  v15 |= 1u;
  CFAbsoluteTime v13 = Current;
  uint64_t v5 = v14;
  uint64_t v6 = *a1;
  *(unsigned char *)(v14 + 20) |= 1u;
  *(void *)(v5 + 8) = v6;
  uint64_t v7 = v14;
  int v8 = *((_DWORD *)a1 + 2);
  *(unsigned char *)(v14 + 20) |= 2u;
  *(_DWORD *)(v7 + 16) = v8;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_10234E260);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)buf);
  }
  return sub_101706914((PB::Base *)buf);
}

void sub_101A479DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101A479FC()
{
  int v10 = off_1022E7820;
  uint64_t v0 = mach_absolute_time();
  double v12 = sub_1000D3D90(v0);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  __int16 v13 = 8;
  uint64_t v1 = sub_101282D9C();
  sub_10128431C(v1, (uint64_t)&v10);
  sub_10170140C(v7);
  sub_1017273F8((uint64_t)v7);
  double v2 = v12;
  *(CFAbsoluteTime *)&v7[77] = Current;
  v9 |= 1u;
  uint64_t v3 = v8;
  *(unsigned char *)(v8 + 24) |= 1u;
  *(double *)(v3 + 8) = v2;
  uint64_t v4 = v8;
  *(unsigned char *)(v8 + 24) |= 2u;
  *(_DWORD *)(v4 + 16) = 8;
  uint64_t v5 = v8;
  *(unsigned char *)(v8 + 24) |= 4u;
  *(_DWORD *)(v5 + 2sub_1019DB7E0(qword_10248D888, 0) = 0;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_10234E260);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v7);
  }
  return sub_101706914((PB::Base *)v7);
}

void sub_101A47B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_101A47B30(unsigned __int8 *a1)
{
  int v1 = *a1;
  sub_10170140C(v9);
  sub_1017273F8((uint64_t)v9);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v11 |= 1u;
  *(CFAbsoluteTime *)&v9[77] = Current;
  uint64_t v3 = v10;
  uint64_t v4 = mach_absolute_time();
  double v5 = sub_1000D3D90(v4);
  *(unsigned char *)(v3 + 24) |= 1u;
  *(double *)(v3 + 8) = v5;
  uint64_t v6 = v10;
  if (v1) {
    int v7 = 9;
  }
  else {
    int v7 = 10;
  }
  *(unsigned char *)(v10 + 24) |= 2u;
  *(_DWORD *)(v6 + 16) = v7;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_10234E260);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v9);
  }
  return sub_101706914((PB::Base *)v9);
}

void sub_101A47C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101A47C24(unsigned __int8 *a1)
{
  int v1 = *a1;
  sub_10170140C(v9);
  sub_1017273F8((uint64_t)v9);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v11 |= 1u;
  *(CFAbsoluteTime *)&v9[77] = Current;
  uint64_t v3 = v10;
  uint64_t v4 = mach_absolute_time();
  double v5 = sub_1000D3D90(v4);
  *(unsigned char *)(v3 + 24) |= 1u;
  *(double *)(v3 + 8) = v5;
  uint64_t v6 = v10;
  if (v1) {
    int v7 = 11;
  }
  else {
    int v7 = 12;
  }
  *(unsigned char *)(v10 + 24) |= 2u;
  *(_DWORD *)(v6 + 16) = v7;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_10234E260);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v9);
  }
  return sub_101706914((PB::Base *)v9);
}

void sub_101A47D00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101A47D18(uint64_t a1)
{
  *(void *)a1 = off_10234E290;
  [*(id *)(a1 + 48) invalidate];

  sub_101A4ACE0(*(void **)(a1 + 88));
  sub_101A4AD38(*(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_101A47D94(void *a1)
{
  *a1 = off_10234E120;
  if (*((unsigned char *)a1 + 109))
  {
    [*(id *)(a1[14] + 16) unregister:*(void *)(a1[14] + 8) forNotification:7];
    [*(id *)(a1[14] + 16) unregister:*(void *)(a1[14] + 8) forNotification:2];
    [*(id *)(a1[14] + 16) unregister:*(void *)(a1[14] + 8) forNotification:3];
    [*(id *)(a1[14] + 16) unregister:*(void *)(a1[14] + 8) forNotification:10];
    [*(id *)(a1[14] + 16) unregister:*(void *)(a1[14] + 8) forNotification:11];
    double v2 = (std::__shared_weak_count *)a1[20];
    a1[19] = 0;
    a1[20] = 0;
    if (v2) {
      sub_1000DB0A0(v2);
    }
    uint64_t v3 = a1[15];
    sub_1000B0164(&v15, kCTCallStatusChangeNotification);
    [*(id *)(v3 + 16) unregister:*(void *)(v3 + 8) forNotification:sub_1000F1244(&v15)];
    uint64_t v4 = sub_100B49A6C();
    sub_1009D26C4(v4, 0, a1[16]);
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, @"com.apple.CoreMotion.PocketState.queryStart", 0);
    uint64_t v6 = sub_100E66ACC();
    sub_1009D26C4(v6, 0, a1[17]);
    sub_100103240();
    if (sub_100742984())
    {
      uint64_t v7 = sub_100D559B0();
      sub_1009D26C4(v7, 0, a1[18]);
    }
  }
  uint64_t v8 = (std::__shared_weak_count *)a1[20];
  if (v8) {
    sub_1000DB0A0(v8);
  }
  uint64_t v9 = a1[18];
  a1[18] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = a1[17];
  a1[17] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = a1[16];
  a1[16] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = a1[15];
  a1[15] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = a1[14];
  a1[14] = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  return sub_101A47D18((uint64_t)a1);
}

void sub_101A47FDC(void *a1)
{
  sub_101A47D94(a1);

  operator delete();
}

void sub_101A48014()
{
}

void sub_101A4864C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_101706914((PB::Base *)va);
  uint64_t v7 = (std::__shared_weak_count *)v5[20];
  if (v7) {
    sub_1000DB0A0(v7);
  }
  uint64_t v8 = v5[18];
  v5[18] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = v5[17];
  v5[17] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = v5[16];
  v5[16] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = v5[15];
  v5[15] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *v6;
  uint64_t *v6 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  sub_101A47D18((uint64_t)v5);
  operator delete();
}

void *sub_101A48818@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_101A48894()
{
  return 1;
}

uint64_t sub_101A4889C()
{
  return 1;
}

uint64_t sub_101A488A4(uint64_t result)
{
  *(unsigned char *)(result + 108) = 1;
  return result;
}

uint64_t sub_101A488B0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 108)) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v15 = (int *)v16;
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v17 = a2;
  double v5 = (uint64_t **)(a1 + 88);
  uint64_t v4 = *(uint64_t **)(a1 + 88);
  int v6 = *(_DWORD *)(a1 + 104);
  int v7 = v6 + 1;
  *(_DWORD *)(a1 + 104) = v6 + 1;
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v4;
        int v9 = *((_DWORD *)v4 + 8);
        if (v9 <= v7) {
          break;
        }
        uint64_t v4 = *v8;
        double v5 = v8;
        if (!*v8) {
          goto LABEL_11;
        }
      }
      if (v9 > v6) {
        break;
      }
      uint64_t v4 = v8[1];
      if (!v4)
      {
        double v5 = v8 + 1;
        goto LABEL_11;
      }
    }
    uint64_t v10 = (char *)v8;
  }
  else
  {
    uint64_t v8 = (uint64_t **)(a1 + 88);
LABEL_11:
    uint64_t v10 = (char *)operator new(0x48uLL);
    *((_DWORD *)v10 + 8) = v7;
    *((void *)v10 + 7) = 0;
    *((void *)v10 + 8) = 0;
    *((void *)v10 + 6) = 0;
    *((void *)v10 + 5) = v10 + 48;
    *(void *)uint64_t v10 = 0;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = v8;
    *double v5 = (uint64_t *)v10;
    uint64_t v11 = **(void **)(a1 + 80);
    uint64_t v12 = (uint64_t *)v10;
    if (v11)
    {
      *(void *)(a1 + 8sub_1019DB7E0(qword_10248D888, 0) = v11;
      uint64_t v12 = *v5;
    }
    sub_1000EDFE8(*(uint64_t **)(a1 + 88), v12);
    ++*(void *)(a1 + 96);
  }
  if (v10 + 40 != (char *)&v15) {
    sub_1000F5C04((uint64_t **)v10 + 5, v15, (int *)v16);
  }
  uint64_t v13 = (void *)v16[0];
  *((void *)v10 + 8) = v17;
  uint64_t v2 = *(unsigned int *)(a1 + 104);
  sub_1000F5BB0((uint64_t)&v15, v13);
  return v2;
}

void sub_101A489F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_101A48A0C(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 108))
  {
    double v5 = (uint64_t **)(a1 + 88);
    uint64_t v4 = *(uint64_t **)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    int v6 = v5;
    int v7 = v4;
    do
    {
      int v8 = *((_DWORD *)v7 + 8);
      BOOL v9 = v8 < (int)a2;
      if (v8 >= (int)a2) {
        uint64_t v10 = (uint64_t **)v7;
      }
      else {
        uint64_t v10 = (uint64_t **)(v7 + 1);
      }
      if (!v9) {
        int v6 = (uint64_t **)v7;
      }
      int v7 = *v10;
    }
    while (*v10);
    if (v6 != v5 && *((_DWORD *)v6 + 8) <= (int)a2)
    {
      if (v6[7])
      {
        do
        {
          *(_DWORD *)uint64_t buf = *((_DWORD *)v6[5] + 7);
          (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
        }
        while (v6[7]);
        uint64_t v4 = *v5;
      }
      if (v4)
      {
        uint64_t v13 = v5;
        uint64_t v14 = v4;
        do
        {
          int v15 = *((_DWORD *)v14 + 8);
          BOOL v16 = v15 < (int)a2;
          if (v15 >= (int)a2) {
            uint64_t v17 = (uint64_t **)v14;
          }
          else {
            uint64_t v17 = (uint64_t **)(v14 + 1);
          }
          if (!v16) {
            uint64_t v13 = (uint64_t **)v14;
          }
          uint64_t v14 = *v17;
        }
        while (*v17);
        if (v13 != v5 && *((_DWORD *)v13 + 8) <= (int)a2)
        {
          uint64_t v18 = v13[1];
          if (v18)
          {
            do
            {
              int v19 = v18;
              uint64_t v18 = (uint64_t *)*v18;
            }
            while (v18);
          }
          else
          {
            int v20 = v13;
            do
            {
              int v19 = v20[2];
              BOOL v21 = *v19 == (void)v20;
              int v20 = (uint64_t **)v19;
            }
            while (!v21);
          }
          if (*(uint64_t ***)(a1 + 80) == v13) {
            *(void *)(a1 + 8sub_1019DB7E0(qword_10248D888, 0) = v19;
          }
          --*(void *)(a1 + 96);
          sub_1000F0AA4(v4, (uint64_t *)v13);
          sub_1000F5BB0((uint64_t)(v13 + 5), v13[6]);
          operator delete(v13);
        }
      }
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10234E220);
      }
      uint64_t v11 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        uint64_t v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v12 = (void *)*v12;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        uint64_t v24 = v12;
        __int16 v25 = 1026;
        int v26 = a2;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_10234E220);
        }
        __int16 v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData>::removeClient(int) [Notification_T = CLMotionHintLogger_Type::Notification, NotificationData_T = CLMotionHintLogger_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
    }
  }
}