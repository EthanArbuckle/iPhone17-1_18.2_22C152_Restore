id sub_1004FE96C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3;
  void *v4;
  void v6[6];
  long long v7;

  v6[0] = _NSConcreteStackBlock;
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(void **)(*(void *)(a1 + 32) + 8);
  v6[1] = 3221225472;
  v6[2] = sub_1004FE9E8;
  v6[3] = &unk_1022B7C98;
  v6[4] = a3;
  v6[5] = a2;
  v7 = v3;
  return [v4 async:v6];
}

id sub_1004FE9E8(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B7CE0);
    }
    v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      id v3 = [[objc_msgSend(*(id *)(a1 + 32), "description") UTF8String];
      *(_DWORD *)buf = 136446210;
      id v17 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "MESCAL: could not load store URL bag: %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B7CE0);
      }
      id v10 = [[objc_msgSend(*(id *)(a1 + 32), "description") UTF8String];
      int v14 = 136446210;
      id v15 = v10;
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLMescalSigner _initializeMescalWithCompletion:]_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    id v5 = [*(id *)(a1 + 40) objectForKey:@"loc-sign-sap-version"];
    if (!v5) {
      id v5 = [*(id *)(a1 + 40) objectForKey:@"sign-sap-version"];
    }
    *(void *)(*(void *)(a1 + 48) + 64) = [v5 copy];
    id v6 = [*(id *)(a1 + 40) objectForKey:@"loc-sign-sap-setup-cert"];
    if (!v6) {
      id v6 = [*(id *)(a1 + 40) objectForKey:@"sign-sap-setup-cert"];
    }
    *(void *)(*(void *)(a1 + 48) + 72) = [v6 copy];
    id v7 = [*(id *)(a1 + 40) objectForKey:@"loc-sign-sap-setup"];
    if (!v7) {
      id v7 = [*(id *)(a1 + 40) objectForKey:@"sign-sap-setup"];
    }
    *(void *)(*(void *)(a1 + 48) + 80) = [v7 copy];
    v8 = +[NSURLRequest requestWithURL:](NSURLRequest, "requestWithURL:", +[NSURL URLWithString:*(void *)(*(void *)(a1 + 48) + 72)]);
    id v9 = [*(id *)(a1 + 48) _mescalSignerNSURLSession];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1004FECFC;
    v12[3] = &unk_1022B7C70;
    long long v13 = *(_OWORD *)(a1 + 48);
    [objc_msgSend(v9, "dataTaskWithRequest:completionHandler:", v8, v12) resume];
    return [v9 finishTasksAndInvalidate];
  }
}

id sub_1004FECFC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B7CE0);
    }
    id v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      id v17 = (const char *)[a4 description];
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning MESCAL: signer cert download did fail, dude: %{public}s", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B7CE0);
    }
    [objc_msgSend(a4, "description") UTF8String];
    id v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMescalSigner _initializeMescalWithCompletion:]_block_invoke", "%s\n", v15);
    if (v15 == (char *)buf) {
      return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    goto LABEL_26;
  }
  id v8 = +[NSPropertyListSerialization propertyListWithData:a2 options:0 format:0 error:0];
  id v9 = [v8 objectForKey:@"sign-sap-setup-cert"];
  if (!v9)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B7CE0);
    }
    long long v13 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v14 = "Y";
      if (!v8) {
        int v14 = "N";
      }
      *(_DWORD *)buf = 136446210;
      id v17 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "MESCAL: could not extract data from cert download (dict:%{public}s)", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B7CE0);
    }
    id v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CLMescalSigner _initializeMescalWithCompletion:]_block_invoke", "%s\n", v15);
    if (v15 == (char *)buf) {
      return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
    }
LABEL_26:
    free(v15);
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  id v10 = v9;
  v11 = *(void **)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);

  return _[v11 _churnMescalExchangeData:v10 withCompletion:v12];
}

id sub_1004FF54C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B7CE0);
    }
    id v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      id v17 = (const char *)[a4 description];
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning MESCAL: exchange data up/download did fail, dude: %{public}s", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B7CE0);
    }
    [objc_msgSend(a4, "description") UTF8String];
    id v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLMescalSigner _churnMescalExchangeData:withCompletion:]_block_invoke", "%s\n", v15);
    if (v15 == (char *)buf) {
      return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    goto LABEL_26;
  }
  id v8 = +[NSPropertyListSerialization propertyListWithData:a2 options:0 format:0 error:0];
  id v9 = [v8 objectForKey:@"sign-sap-setup-buffer"];
  if (!v9)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B7CE0);
    }
    long long v13 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v14 = "Y";
      if (!v8) {
        int v14 = "N";
      }
      *(_DWORD *)buf = 136446210;
      id v17 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "MESCAL: could not extract data from exchange download (dict:%{public}s)", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B7CE0);
    }
    id v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CLMescalSigner _churnMescalExchangeData:withCompletion:]_block_invoke", "%s\n", v15);
    if (v15 == (char *)buf) {
      return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
    }
LABEL_26:
    free(v15);
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  id v10 = v9;
  v11 = *(void **)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);

  return _[v11 _churnMescalExchangeData:v10 withCompletion:v12];
}

void sub_1004FF928(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

BOOL sub_1004FF958()
{
  v2 = *(NSObject **)(v0 + 1592);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

BOOL sub_1004FF974()
{
  v2 = *(NSObject **)(v0 + 1592);
  return os_signpost_enabled(v2);
}

uint64_t sub_1004FF9A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)a1 = off_1022B7D10;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0x4034000000000000;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022B7D50);
  }
  v4 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)long long v13 = 2082;
    *(void *)&v13[2] = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,CLGNSSStateQueryAssertion,init\"}", buf, 0x12u);
  }
  sub_1000C7F88(buf);
  double v5 = *(double *)(a1 + 80);
  double v11 = 0.0;
  int v6 = sub_1000A699C(*(uint64_t *)buf, "CLGNSSStateQueryAssertionPeriodicity_s", &v11);
  double v7 = v11;
  if (!v6) {
    double v7 = v5;
  }
  *(double *)(a1 + 80) = v7;
  if (*(void *)v13) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v13);
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022B7D50);
  }
  id v8 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 80);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)long long v13 = 2082;
    *(void *)&v13[2] = "";
    __int16 v14 = 2050;
    uint64_t v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,CLGNSSStateQueryAssertion,init\", \"fResponsePeriodicity\":\"%{public}0.3f\"}", buf, 0x1Cu);
  }
  return a1;
}

void sub_1004FFBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  uint64_t v14 = v12[9];
  v12[9] = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  sub_100426880(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_1004FFBFC(uint64_t a1)
{
  *(void *)a1 = off_1022B7D10;
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022B7D50);
  }
  v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    __int16 v7 = 2082;
    id v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,CLGNSSStateQueryAssertion,Deinit\"}", (uint8_t *)v6, 0x12u);
  }
  id v3 = *(void **)(a1 + 96);
  if (v3)
  {
    [v3 invalidate];

    *(void *)(a1 + 96) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_100426880((void *)a1);
  return a1;
}

void sub_1004FFD48(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1004FFD58(uint64_t a1)
{
  sub_1004FFBFC(a1);

  operator delete();
}

void sub_1004FFD90(double *a1, uint64_t a2)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022B7D50);
  }
  uint64_t v4 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    LODWORD(v19[0]) = 0;
    WORD2(v19[0]) = 2082;
    *(void *)((char *)v19 + 6) = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGNSSStateQueryAssertion,handleMessage\"}", buf, 0x12u);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022B7D50);
    }
  }
  double v5 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    if (*(char *)(v6 + 23) >= 0) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = *(void *)v6;
    }
    *(_DWORD *)buf = 136380675;
    v19[0] = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#CLGNSSStateQueryAssertion,daemon,message,%{private}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022B7D50);
    }
    uint64_t v12 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    if (*(char *)(v12 + 23) >= 0) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = *(void *)v12;
    }
    int v16 = 136380675;
    uint64_t v17 = v13;
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGNSSStateQueryAssertion::handleMessage(std::shared_ptr<CLConnectionMessage>)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  id v8 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  int v9 = *((char *)v8 + 23);
  if (v9 < 0)
  {
    if (v8[1] != 37) {
      return;
    }
    id v8 = (void *)*v8;
  }
  else if (v9 != 37)
  {
    return;
  }
  if (!memcmp(v8, "kCLConnectionMessageBBGnssStatusQuery", 0x25uLL))
  {
    id v10 = *(CLConnectionMessage **)a2;
    uint64_t v11 = *(void *)(a2 + 8);
    v15[0] = v10;
    v15[1] = (CLConnectionMessage *)v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    sub_100500084(a1, v15);
    if (v11) {
      sub_1000DB0A0((std::__shared_weak_count *)v11);
    }
  }
}

void sub_100500064(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100500084(double *a1, CLConnectionMessage **a2)
{
  sub_100134750(buf, "com.apple.locationd.bbgnssStatusResponse_callback");
  char isEntitled = CLConnection::isEntitled();
  char v5 = isEntitled;
  if (SBYTE3(v39) < 0)
  {
    operator delete(*(void **)buf);
    if (v5)
    {
LABEL_3:
      if (sub_100743B88())
      {
        Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
        id v7 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessagePurposeKey"];
        id v8 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageBundleIdentifierKey"];
        id v9 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessageBundlePathKey"];
        if (v8)
        {
          id v10 = v9;
          if (v9)
          {
            if (v7)
            {
              if ([v7 length])
              {
                if ([v8 length] || objc_msgSend(v10, "length"))
                {
                  if (qword_102419520 != -1) {
                    dispatch_once(&qword_102419520, &stru_1022B7D50);
                  }
                  uint64_t v11 = qword_102419528;
                  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
                  {
                    (*(void (**)(void **__return_ptr, double *))(*(void *)a1 + 24))(__p, a1);
                    int v12 = v34;
                    uint64_t v13 = (void **)__p[0];
                    uint64_t v14 = (const char *)[v7 UTF8String];
                    uint64_t v15 = __p;
                    *(_DWORD *)buf = 68289538;
                    if (v12 < 0) {
                      uint64_t v15 = v13;
                    }
                    *(_DWORD *)&uint8_t buf[4] = 0;
                    __int16 v36 = 2082;
                    v37 = "";
                    __int16 v38 = 2082;
                    v39 = v15;
                    __int16 v40 = 2082;
                    v41 = v14;
                    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,subscribed to status report\", \"requested by\":%{public, location:escape_only}s, \"reason\":%{public, location:escape_only}s}", buf, 0x26u);
                    if (v34 < 0) {
                      operator delete(__p[0]);
                    }
                  }
                  sub_100E92BC0();
                }
                if (qword_102419520 != -1) {
                  dispatch_once(&qword_102419520, &stru_1022B7D50);
                }
                v28 = qword_102419528;
                if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
                {
                  (*(void (**)(void **__return_ptr, double *))(*(void *)a1 + 24))(__p, a1);
                  int v29 = v34;
                  v30 = (void **)__p[0];
                  v31 = (const char *)[v7 UTF8String];
                  v32 = __p;
                  *(_DWORD *)buf = 68289538;
                  if (v29 < 0) {
                    v32 = v30;
                  }
                  *(_DWORD *)&uint8_t buf[4] = 0;
                  __int16 v36 = 2082;
                  v37 = "";
                  __int16 v38 = 2082;
                  v39 = v32;
                  __int16 v40 = 2082;
                  v41 = v31;
                  _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,#warning,daemon,no beneficiary,request denied\", \"requested by\":%{public, location:escape_only}s, \"reason\":%{public, location:escape_only}s}", buf, 0x26u);
                  if (v34 < 0) {
                    operator delete(__p[0]);
                  }
                }
              }
              else
              {
                if (qword_102419520 != -1) {
                  dispatch_once(&qword_102419520, &stru_1022B7D50);
                }
                v26 = qword_102419528;
                if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
                {
                  (*(void (**)(void **__return_ptr, double *))(*(void *)a1 + 24))(__p, a1);
                  v27 = v34 >= 0 ? __p : (void **)__p[0];
                  *(_DWORD *)buf = 68289282;
                  *(_DWORD *)&uint8_t buf[4] = 0;
                  __int16 v36 = 2082;
                  v37 = "";
                  __int16 v38 = 2082;
                  v39 = v27;
                  _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,#warning,daemon,empty reason,request denied\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
                  if (v34 < 0) {
                    operator delete(__p[0]);
                  }
                }
              }
            }
            else
            {
              if (qword_102419520 != -1) {
                dispatch_once(&qword_102419520, &stru_1022B7D50);
              }
              v24 = qword_102419528;
              if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
              {
                (*(void (**)(void **__return_ptr, double *))(*(void *)a1 + 24))(__p, a1);
                v25 = v34 >= 0 ? __p : (void **)__p[0];
                *(_DWORD *)buf = 68289282;
                *(_DWORD *)&uint8_t buf[4] = 0;
                __int16 v36 = 2082;
                v37 = "";
                __int16 v38 = 2082;
                v39 = v25;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,#warning,daemon,missing reason,request denied\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
                if (v34 < 0) {
                  operator delete(__p[0]);
                }
              }
            }
          }
          else
          {
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022B7D50);
            }
            v22 = qword_102419528;
            if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
            {
              (*(void (**)(void **__return_ptr, double *))(*(void *)a1 + 24))(__p, a1);
              v23 = v34 >= 0 ? __p : (void **)__p[0];
              *(_DWORD *)buf = 68289282;
              *(_DWORD *)&uint8_t buf[4] = 0;
              __int16 v36 = 2082;
              v37 = "";
              __int16 v38 = 2082;
              v39 = v23;
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,#warning,daemon,missing bundlePath,request denied\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
              if (v34 < 0) {
                operator delete(__p[0]);
              }
            }
          }
        }
        else
        {
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022B7D50);
          }
          v20 = qword_102419528;
          if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
          {
            (*(void (**)(void **__return_ptr, double *))(*(void *)a1 + 24))(__p, a1);
            v21 = v34 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)buf = 68289282;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v36 = 2082;
            v37 = "";
            __int16 v38 = 2082;
            v39 = v21;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,#warning,daemon,missing bundleID,request denied\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
            if (v34 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
      else
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022B7D50);
        }
        v18 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
        {
          (*(void (**)(void **__return_ptr, double *))(*(void *)a1 + 24))(__p, a1);
          v19 = v34 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v36 = 2082;
          v37 = "";
          __int16 v38 = 2082;
          v39 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,#warning,feature not supported\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
          if (v34 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      goto LABEL_72;
    }
  }
  else if (isEntitled)
  {
    goto LABEL_3;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022B7D50);
  }
  int v16 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    (*(void (**)(void **__return_ptr, double *))(*(void *)a1 + 24))(__p, a1);
    uint64_t v17 = v34 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v36 = 2082;
    v37 = "";
    __int16 v38 = 2082;
    v39 = v17;
    __int16 v40 = 2082;
    v41 = "com.apple.locationd.bbgnssStatusResponse_callback";
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,#warning,invalid entitlement\", \"requested by\":%{public, location:escape_only}s, \"entitlement\":%{public, location:escape_only}s}", buf, 0x26u);
    if (v34 < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_72:
  sub_100500C58((uint64_t)a1, a1 + 3);
}

void sub_100500C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100500C58(uint64_t a1, double *a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  double v5 = sub_10016C458();
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022B7D50);
  }
  double v6 = Current - v5;
  id v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    double v8 = *a2;
    uint64_t v9 = *((void *)a2 + 1);
    uint64_t v10 = *((void *)a2 + 2);
    double v11 = CFAbsoluteTimeGetCurrent();
    double v12 = a2[1];
    double v13 = -0.0;
    if (*a2 <= 0.0) {
      double v14 = -0.0;
    }
    else {
      double v14 = v6;
    }
    double v15 = *a2 + v14;
    if (v12 <= 0.0) {
      double v16 = -0.0;
    }
    else {
      double v16 = v6;
    }
    double v17 = v12 + v16;
    int buf = 134285057;
    double v18 = a2[2];
    *(double *)buf_4 = v8;
    if (v18 > 0.0) {
      double v13 = v6;
    }
    *(_WORD *)&buf_4[8] = 2049;
    *(void *)&buf_4[10] = v9;
    *(_WORD *)&buf_4[18] = 2049;
    *(void *)&buf_4[20] = v10;
    *(_WORD *)&buf_4[28] = 2049;
    double v66 = v11;
    *(_WORD *)v67 = 2049;
    *(double *)&v67[2] = v15;
    __int16 v68 = 2049;
    *(double *)v69 = v17;
    *(_WORD *)&v69[8] = 2049;
    double v70 = v18 + v13;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#CLGNSSStateQueryAssertion,daemon,sendGnssStatusUpdateToClient,gnssStart,%{private}.3lf,gnssStop,%{private}.3lf,gnssYield,%{private}.3lf,absoluteTime,%{private}.3lf,AbsoluteTimeOfGnssStart,%{private}.3lf,AbsoluteTimeOfGnssStop,%{private}.3lf,AbsoluteTimeOfYieldStop,%{private}.3lf", (uint8_t *)&buf, 0x48u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022B7D50);
    }
    double v33 = *a2;
    char v34 = a2 + 1;
    uint64_t v35 = *((void *)a2 + 1);
    v37 = a2 + 2;
    uint64_t v36 = *((void *)a2 + 2);
    double v38 = CFAbsoluteTimeGetCurrent();
    double v39 = -0.0;
    if (*a2 <= 0.0) {
      double v40 = -0.0;
    }
    else {
      double v40 = v6;
    }
    double v41 = *a2 + v40;
    if (*v34 <= 0.0) {
      double v42 = -0.0;
    }
    else {
      double v42 = v6;
    }
    double v43 = *v34 + v42;
    *(_DWORD *)v51 = 134285057;
    double v44 = *v37;
    if (*v37 > 0.0) {
      double v39 = v6;
    }
    *(double *)&v51[4] = v33;
    __int16 v52 = 2049;
    uint64_t v53 = v35;
    __int16 v54 = 2049;
    uint64_t v55 = v36;
    __int16 v56 = 2049;
    double v57 = v38;
    __int16 v58 = 2049;
    double v59 = v41;
    __int16 v60 = 2049;
    double v61 = v43;
    __int16 v62 = 2049;
    double v63 = v44 + v39;
    v45 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGNSSStateQueryAssertion::sendGnssStatusUpdateToClient(const CLLocationProvider_Type::CLGNSSStateQueryAssertionReportData &)", "%s\n", v45);
    if (v45 != (char *)&buf) {
      free(v45);
    }
  }
  if (!*(void *)(a1 + 8))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022B7D50);
    }
    v23 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#CLGNSSStateQueryAssertion,daemon,sendGnssStatusUpdateToClient invalid connection", (uint8_t *)&buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_102419520 == -1)
    {
LABEL_64:
      *(_WORD *)v51 = 0;
      v47 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGNSSStateQueryAssertion::sendGnssStatusUpdateToClient(const CLLocationProvider_Type::CLGNSSStateQueryAssertionReportData &)", "%s\n", v47);
      if (v47 != (char *)&buf) {
        free(v47);
      }
      return;
    }
LABEL_66:
    dispatch_once(&qword_102419520, &stru_1022B7D50);
    goto LABEL_64;
  }
  double v19 = sub_10016C458();
  double v20 = *(double *)(a1 + 88);
  double v21 = v19 - v20;
  BOOL v22 = v20 == 0.0 || v21 > *(double *)(a1 + 80) + -3.0;
  double v25 = *a2;
  double v24 = a2[1];
  double v26 = a2[2];
  double v27 = *(double *)(a1 + 48);
  double v28 = *(double *)(a1 + 64);
  int v29 = (v26 > *a2) ^ (v28 > v27);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022B7D50);
  }
  v30 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    int buf = 68290818;
    *(_DWORD *)buf_4 = 0;
    *(_WORD *)&buf_4[4] = 2082;
    *(void *)&buf_4[6] = "";
    *(_WORD *)&buf_4[14] = 2050;
    *(double *)&buf_4[16] = v21;
    *(_WORD *)&buf_4[24] = 1026;
    *(_DWORD *)&buf_4[26] = v22;
    LOWORD(v66) = 1026;
    *(_DWORD *)((char *)&v66 + 2) = v24 > v25;
    HIWORD(v66) = 1026;
    *(_DWORD *)v67 = v26 > v25;
    *(_WORD *)&v67[4] = 1026;
    *(_DWORD *)&v67[6] = v28 > v27;
    __int16 v68 = 1026;
    *(_DWORD *)v69 = v29;
    *(_WORD *)&v69[4] = 1026;
    *(_DWORD *)&v69[6] = v22 | v29;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,daemon,sendGnssStatusUpdateToClient\", \"timeSinceLastUpdate\":\"%{public}0.3f\", \"isMinTimeLapsedBetween2UpdatesToClient\":%{public}d, \"isLastSessionStopped\":%{public}d, \"didLastSessionYield\":%{public}d, \"didSessionYieldDuringLastUpdateToClient\":%{public}d, \"isStatusChangedFromPreviousUpdateToClient\":%{public}d, \"sendUpdateToCLient\":%{public}d}", (uint8_t *)&buf, 0x40u);
  }
  if ((v22 | v29))
  {
    v49[0] = @"kCLGNSSStateQueryAssertion_ResponseKey_LastGNSSStartKey";
    v50[0] = +[NSNumber numberWithDouble:*a2];
    v49[1] = @"kCLGNSSStateQueryAssertion_ResponseKey_LastGNSSStopKey";
    v50[1] = +[NSNumber numberWithDouble:a2[1]];
    v49[2] = @"kCLGNSSStateQueryAssertion_ResponseKey_LastGNSSYieldKey";
    v50[2] = +[NSNumber numberWithDouble:a2[2]];
    v49[3] = @"kCLGNSSStateQueryAssertion_ResponseKey_PeriodicityKey";
    v50[3] = +[NSNumber numberWithDouble:*(double *)(a1 + 80)];
    *(void *)v51 = +[NSDictionary dictionaryWithObjects:v50 forKeys:v49 count:4];
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022B7D50);
    }
    v31 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#CLGNSSStateQueryAssertion,daemon,sendGnssStatusUpdateToClient sent to client", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022B7D50);
      }
      v46 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGNSSStateQueryAssertion::sendGnssStatusUpdateToClient(const CLLocationProvider_Type::CLGNSSStateQueryAssertionReportData &)", "%s\n", v46);
      if (v46 != (char *)&buf) {
        free(v46);
      }
    }
    *(double *)(a1 + 88) = sub_10016C458();
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a1 + 24);
    *(void *)(a1 + 64) = *(void *)(a1 + 40);
    [*(id *)(a1 + 96) setNextFireDelay:*(double *)(a1 + 80) interval:*(double *)(a1 + 80)];
    sub_100501C94("kCLConnectionMessageCLGNSSStateQueryAssertionResponse", &buf);
    v48 = *(std::__shared_weak_count **)&buf_4[4];
    if (*(void *)&buf_4[4]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf_4[4] + 8), 1uLL, memory_order_relaxed);
    }
    CLConnection::sendMessage();
    if (v48) {
      sub_1000DB0A0(v48);
    }
    if (*(void *)&buf_4[4]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf_4[4]);
    }
    return;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022B7D50);
  }
  v32 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#CLGNSSStateQueryAssertion,daemon,sendGnssStatusUpdateToClient recently update sent to client", (uint8_t *)&buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419520 == -1) {
      goto LABEL_64;
    }
    goto LABEL_66;
  }
}

void sub_100501510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  if (a36) {
    sub_1000DB0A0(a36);
  }
  _Unwind_Resume(exception_object);
}

void sub_10050153C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 16), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B7D70);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    double v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGNSSStateQueryAssertion::handleGnssStatusUpdateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B7D70);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      double v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGNSSStateQueryAssertion::handleGnssStatusUpdateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1005018C0(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1005016F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100501718(uint64_t a1)
{
}

void sub_100501720(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022B7D90);
  }
  v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#CLGNSSStateQueryAssertion,bbGnssStatusQueryReportingTimeout", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022B7D90);
    }
    id v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGNSSStateQueryAssertion::bbGnssStatusQueryReportingTimeout()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_100500C58(a1, (double *)(a1 + 24));
}

void sub_1005018C0(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 45)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a4 + 1488);
    double v5 = (double *)(a1 + 24);
    *(void *)(a1 + 40) = *(void *)(a4 + 1504);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022B7D50);
    }
    double v6 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 24);
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)int buf = 134284033;
      uint64_t v14 = v7;
      __int16 v15 = 2049;
      uint64_t v16 = v8;
      __int16 v17 = 2049;
      uint64_t v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#CLGNSSStateQueryAssertion,daemon,handleGnssStatusUpdateNotification,gnssStart,%{private}.3lf,gnssStop,%{private}.3lf,gnssYield,%{private}.3lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022B7D50);
      }
      char v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGNSSStateQueryAssertion::handleGnssStatusUpdateNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    sub_100500C58(a1, v5);
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022B7D50);
    }
    uint64_t v10 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#CLGNSSStateQueryAssertion,daemon,not handleGnssStatusUpdateNotification", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022B7D50);
      }
      double v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGNSSStateQueryAssertion::handleGnssStatusUpdateNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
}

void sub_100501C04(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100501C34(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100501C64(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void *sub_100501C94@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x70uLL);
  result = sub_10017E9C0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100501CE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1005037CC(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_1005037FC(uint64_t a1, long long *a2)
{
  *(void *)a1 = &off_1022B7DE0;
  long long v4 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v4;
  if (*((char *)a2 + 47) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 32), *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 48) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 32) = v5;
  }
  *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 12);
  *(unsigned char *)(a1 + 64) = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247B198, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247B198))
  {
    unsigned __int8 v7 = 0;
    sub_10006ACBC((unsigned __int8 *)&unk_10247B190, "ResumeRemindersModelDebugLogging", &v7, 0);
    __cxa_guard_release(&qword_10247B198);
  }
  *(unsigned char *)(a1 + 64) = byte_10247B191;
  return a1;
}

void sub_1005038F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10247B198);
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void sub_100503920(uint64_t a1, double *a2)
{
  long long v4 = operator new(4uLL);
  __p = v4;
  _DWORD *v4 = 5;
  uint64_t v14 = v4 + 1;
  __int16 v15 = v4 + 1;
  __int16 v38 = 0;
  *(_OWORD *)v37 = xmmword_101D1E250;
  memset(&v37[2], 0, 135);
  long long v39 = xmmword_101D1E250;
  uint64_t v40 = 0;
  int v41 = 0;
  v43[0] = 0;
  uint64_t v42 = 0;
  *(void *)((char *)v43 + 5) = 0;
  *(void *)((char *)&v43[1] + 6) = 0;
  char v44 = 0;
  memset(&v43[3], 0, 24);
  long long v45 = xmmword_101D1E250;
  uint64_t v46 = 0;
  int v47 = 0;
  unint64_t v48 = 0xFFEFFFFFFFFFFFFFLL;
  int v59 = 0;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  int v54 = 0;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  memset(v58, 0, sizeof(v58));
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  unint64_t v62 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v63 = 0;
  int v64 = 0;
  uint64_t v70 = 0;
  __int16 v71 = 0;
  int v76 = 0;
  int v69 = 0;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v73 = 0u;
  long long v72 = 0u;
  char v74 = 0;
  memset(v75, 0, sizeof(v75));
  unint64_t v77 = 0xFFEFFFFFFFFFFFFFLL;
  long long v96 = 0u;
  long long v95 = 0u;
  long long v94 = 0u;
  long long v93 = 0u;
  long long v92 = 0u;
  long long v91 = 0u;
  long long v90 = 0u;
  long long v89 = 0u;
  long long v88 = 0u;
  long long v87 = 0u;
  long long v86 = 0u;
  long long v85 = 0u;
  long long v84 = 0u;
  long long v83 = 0u;
  long long v82 = 0u;
  long long v81 = 0u;
  long long v80 = 0u;
  long long v79 = 0u;
  long long v78 = 0u;
  uint64_t v97 = 0;
  *(void *)v98 = 0xFFEFFFFFFFFFFFFFLL;
  memset(&v98[8], 0, 64);
  unint64_t v99 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v100 = 0;
  int v101 = 0;
  uint64_t v102 = 0;
  char v103 = 0;
  unint64_t v104 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v106 = 0;
  uint64_t v105 = 0;
  uint64_t v107 = 0x80000000800000;
  uint64_t v109 = 0;
  uint64_t v108 = 0;
  long long v110 = xmmword_101D1E260;
  uint64_t v111 = 0x80000000800000;
  long long v112 = 0u;
  long long v113 = 0u;
  uint64_t v114 = 0;
  unint64_t v115 = 0xFFEFFFFFFFFFFFFFLL;
  long long v116 = 0u;
  long long v117 = 0u;
  long long v118 = 0u;
  long long v119 = 0u;
  long long v120 = 0u;
  long long v121 = 0u;
  int v122 = 0;
  unint64_t v123 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v124 = 0;
  int v125 = 0;
  unint64_t v126 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v127 = 7;
  unint64_t v128 = 0xFFEFFFFFFFFFFFFFLL;
  char v129 = 0;
  uint64_t v131 = 0;
  uint64_t v130 = 0;
  uint64_t v132 = 0;
  if (sub_100174478(a2, &__p, (uint64_t)v37))
  {
    long long v32 = *(_OWORD *)v98;
    long long v33 = *(_OWORD *)&v98[16];
    long long v34 = *(_OWORD *)&v98[32];
    long long v35 = *(_OWORD *)&v98[48];
    uint64_t v36 = *(void *)&v98[64];
    if (*(double *)v98 > *(double *)(a1 + 24))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247B1B0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_10247B1B0))
      {
        *(_DWORD *)int buf = 0;
        sub_10044FD20((unsigned __int8 *)&byte_10247B1A0, "ResumeRemindersClassificationOverride", buf, 0);
        __cxa_guard_release(&qword_10247B1B0);
      }
      if (byte_10247B1A0) {
        *(void *)&long long v33 = dword_10247B1A4;
      }
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022B7F08);
      }
      long long v5 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
      {
        double v6 = (void *)(a1 + 32);
        if (*(char *)(a1 + 55) < 0) {
          double v6 = (void *)*v6;
        }
        *(_DWORD *)int buf = 136315906;
        double v25 = v6;
        __int16 v26 = 2048;
        uint64_t v27 = v32;
        __int16 v28 = 2048;
        uint64_t v29 = v33;
        __int16 v30 = 2048;
        double v31 = *((float *)&v33 + 2);
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[resume reminders] model %s, adding tier2 entry,startTime,%f,type,%zu,confidence,%f", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1022B7F08);
        }
        char v11 = (void *)(a1 + 32);
        if (*(char *)(a1 + 55) < 0) {
          char v11 = (void *)*v11;
        }
        int v16 = 136315906;
        __int16 v17 = v11;
        __int16 v18 = 2048;
        uint64_t v19 = v32;
        __int16 v20 = 2048;
        uint64_t v21 = v33;
        __int16 v22 = 2048;
        double v23 = *((float *)&v33 + 2);
        double v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLWorkoutResumeReminders::DefaultActivityModel::update(const CLWorkoutPredictorInputs &)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
      sub_100503FB8((void *)(a1 + 72), (uint64_t)&v32);
    }
  }
  else
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022B7F08);
    }
    unsigned __int8 v7 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v8 = (void *)*v8;
      }
      *(_DWORD *)int buf = 136315138;
      double v25 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[resume reminders] model %s, failed to get tier2 source", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022B7F08);
      }
      uint64_t v9 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v9 = (void *)*v9;
      }
      LODWORD(v32) = 136315138;
      *(void *)((char *)&v32 + 4) = v9;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLWorkoutResumeReminders::DefaultActivityModel::update(const CLWorkoutPredictorInputs &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
}

void sub_100503F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100503FB8(void *a1, uint64_t a2)
{
  sub_1005076CC(a1, a2);
  unint64_t v3 = a1[5];
  if (v3 >= 0x78)
  {
    ++a1[4];
    a1[5] = v3 - 1;
    sub_100507AAC((uint64_t)a1, 1);
  }
}

uint64_t sub_10050401C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (void *)(a1 + 72);
  v46[0] = off_1022B7F38;
  v46[1] = a1;
  v46[3] = v46;
  sub_100504688((void *)(a1 + 72), (uint64_t)&unk_101D22278, (uint64_t)v46, v27);
  sub_100507E30(v46);
  v45[0] = off_1022B7F38;
  v45[1] = a1;
  v45[3] = v45;
  sub_100504688(v4, (uint64_t)&unk_101D22290, (uint64_t)v45, v26);
  sub_100507E30(v45);
  v44[0] = off_1022B7F38;
  v44[1] = a1;
  v44[3] = v44;
  sub_100504688(v4, (uint64_t)&unk_101D222A8, (uint64_t)v44, v25);
  sub_100507E30(v44);
  if (*(unsigned char *)(a1 + 64))
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022B7F08);
    }
    long long v5 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
    {
      double v6 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        double v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 8);
      sub_100134750(&v24, "ActivityTentative");
      sub_10050473C((const void **)&v24.__r_.__value_.__l.__data_, (uint64_t)v27 + 8, &v28);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v8 = &v28;
      }
      else {
        uint64_t v8 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      sub_100134750(&v22, "ActivityConfident");
      uint64_t v9 = &v23;
      sub_10050473C((const void **)&v22.__r_.__value_.__l.__data_, (uint64_t)v26 + 8, &v23);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v9 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      sub_100134750(&v20, "ActivityRetraction");
      sub_10050473C((const void **)&v20.__r_.__value_.__l.__data_, (uint64_t)v25 + 8, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int buf = 136316162;
      long long v35 = v6;
      __int16 v36 = 2048;
      uint64_t v37 = v7;
      __int16 v38 = 2080;
      long long v39 = v8;
      __int16 v40 = 2080;
      int v41 = v9;
      __int16 v42 = 2080;
      double v43 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[resume reminders] model,%s,workout,%zu,%s,%s,%s", buf, 0x34u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022B7F08);
      }
      double v12 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        double v12 = (void *)*v12;
      }
      std::string::size_type v13 = *(void *)(a1 + 8);
      sub_100134750(&v23, "ActivityTentative");
      uint64_t v14 = &v24;
      sub_10050473C((const void **)&v23.__r_.__value_.__l.__data_, (uint64_t)v27 + 8, &v24);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v14 = (std::string *)v24.__r_.__value_.__r.__words[0];
      }
      sub_100134750(&__p, "ActivityConfident");
      __int16 v15 = &v22;
      sub_10050473C((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)v26 + 8, &v22);
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        __int16 v15 = (std::string *)v22.__r_.__value_.__r.__words[0];
      }
      sub_100134750(v18, "ActivityRetraction");
      sub_10050473C((const void **)v18, (uint64_t)v25 + 8, &v20);
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v16 = &v20;
      }
      else {
        int v16 = (std::string *)v20.__r_.__value_.__r.__words[0];
      }
      LODWORD(v28.__r_.__value_.__l.__data_) = 136316162;
      *(std::string::size_type *)((char *)v28.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
      WORD2(v28.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v28.__r_.__value_.__r.__words[1] + 6) = v13;
      HIWORD(v28.__r_.__value_.__r.__words[2]) = 2080;
      uint64_t v29 = v14;
      __int16 v30 = 2080;
      double v31 = v15;
      __int16 v32 = 2080;
      long long v33 = v16;
      __int16 v17 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      if (v19 < 0) {
        operator delete(v18[0]);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual Result CLWorkoutResumeReminders::DefaultActivityModel::run() const", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
  return sub_100504E60(a1, v4, v27, v26, v25, a2);
}

void sub_100504568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

void *sub_100504688@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  *a4 = *(_DWORD *)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_100507CA8((uint64_t)v9, a3);
  sub_100507B0C(a1, v6, v7, (uint64_t)v9, (uint64_t)(a4 + 2));
  return sub_100507E30(v9);
}

void sub_100504720(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100507E30((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10050473C(const void **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v6 = (size_t)a1[1];
  }
  unint64_t v7 = &v59;
  sub_1001110E4((uint64_t)&v59, v6 + 2);
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v7 = (std::string *)v59.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = *a1;
    }
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, "M,");
  std::to_string(&v58, *(void *)(a2 + 16));
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v9 = &v58;
  }
  else {
    uint64_t v9 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v58.__r_.__value_.__l.__size_;
  }
  char v11 = std::string::append(&v59, (const std::string::value_type *)v9, size);
  std::string v60 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (*((char *)a1 + 23) >= 0) {
    size_t v12 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v12 = (size_t)a1[1];
  }
  std::string::size_type v13 = &v58;
  sub_1001110E4((uint64_t)&v58, v12 + 2);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v13 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  if (v12)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v14 = a1;
    }
    else {
      uint64_t v14 = *a1;
    }
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, "N,");
  std::to_string(&v57, *(void *)(a2 + 24));
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v15 = &v57;
  }
  else {
    __int16 v15 = (std::string *)v57.__r_.__value_.__r.__words[0];
  }
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v16 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v16 = v57.__r_.__value_.__l.__size_;
  }
  __int16 v17 = std::string::append(&v58, (const std::string::value_type *)v15, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (*((char *)a1 + 23) >= 0) {
    size_t v19 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v19 = (size_t)a1[1];
  }
  std::string v20 = &v57;
  sub_1001110E4((uint64_t)&v57, v19 + 5);
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string v20 = (std::string *)v57.__r_.__value_.__r.__words[0];
  }
  if (v19)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v21 = a1;
    }
    else {
      uint64_t v21 = *a1;
    }
    memmove(v20, v21, v19);
  }
  strcpy((char *)v20 + v19, "Time,");
  std::to_string(&v56, *(double *)a2);
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v22 = &v56;
  }
  else {
    std::string v22 = (std::string *)v56.__r_.__value_.__r.__words[0];
  }
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v23 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v23 = v56.__r_.__value_.__l.__size_;
  }
  std::string v24 = std::string::append(&v57, (const std::string::value_type *)v22, v23);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (*((char *)a1 + 23) >= 0) {
    size_t v26 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v26 = (size_t)a1[1];
  }
  uint64_t v27 = &v56;
  sub_1001110E4((uint64_t)&v56, v26 + 8);
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v27 = (std::string *)v56.__r_.__value_.__r.__words[0];
  }
  if (v26)
  {
    if (*((char *)a1 + 23) >= 0) {
      std::string v28 = a1;
    }
    else {
      std::string v28 = *a1;
    }
    memmove(v27, v28, v26);
  }
  strcpy((char *)v27 + v26, "Matches,");
  std::to_string(&v55, *(_DWORD *)(a2 + 8));
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v29 = &v55;
  }
  else {
    uint64_t v29 = (std::string *)v55.__r_.__value_.__r.__words[0];
  }
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v30 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v30 = v55.__r_.__value_.__l.__size_;
  }
  double v31 = std::string::append(&v56, (const std::string::value_type *)v29, v30);
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  int v33 = SHIBYTE(v60.__r_.__value_.__r.__words[2]);
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v34 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v34 = v60.__r_.__value_.__l.__size_;
  }
  long long v35 = &v52;
  sub_1001110E4((uint64_t)&v52, v34 + 1);
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v35 = (std::string *)v52.__r_.__value_.__r.__words[0];
  }
  if (v34)
  {
    if (v33 >= 0) {
      __int16 v36 = &v60;
    }
    else {
      __int16 v36 = (std::string *)v60.__r_.__value_.__r.__words[0];
    }
    memmove(v35, v36, v34);
  }
  *(_WORD *)((char *)&v35->__r_.__value_.__l.__data_ + v34) = 44;
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v37 = &v59;
  }
  else {
    uint64_t v37 = (std::string *)v59.__r_.__value_.__r.__words[0];
  }
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v38 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v38 = v59.__r_.__value_.__l.__size_;
  }
  long long v39 = std::string::append(&v52, (const std::string::value_type *)v37, v38);
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  int v41 = std::string::append(&v53, ",");
  long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v43 = &v58;
  }
  else {
    double v43 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v44 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v44 = v58.__r_.__value_.__l.__size_;
  }
  long long v45 = std::string::append(&v54, (const std::string::value_type *)v43, v44);
  long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v46;
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  int v47 = std::string::append(&v55, ",");
  long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v49 = &v57;
  }
  else {
    long long v49 = (std::string *)v57.__r_.__value_.__r.__words[0];
  }
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v50 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v50 = v57.__r_.__value_.__l.__size_;
  }
  long long v51 = std::string::append(&v56, (const std::string::value_type *)v49, v50);
  *a3 = *v51;
  v51->__r_.__value_.__l.__size_ = 0;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v33 & 0x80000000) == 0) {
      return;
    }
LABEL_127:
    operator delete(v60.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v59.__r_.__value_.__l.__data_);
  if (v33 < 0) {
    goto LABEL_127;
  }
}

void sub_100504CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  if (*(char *)(v49 - 137) < 0) {
    operator delete(*(void **)(v49 - 160));
  }
  if (*(char *)(v49 - 105) < 0) {
    operator delete(*(void **)(v49 - 128));
  }
  if (*(char *)(v49 - 73) < 0) {
    operator delete(*(void **)(v49 - 96));
  }
  _Unwind_Resume(exception_object);
}

void sub_100504DCC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    JUMPOUT(0x100504DA0);
  }
  JUMPOUT(0x100504DA4);
}

void sub_100504DF8()
{
}

void sub_100504E00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v34 - 137) < 0) {
    JUMPOUT(0x100504DB0);
  }
  JUMPOUT(0x100504DB4);
}

void sub_100504E2C()
{
}

void sub_100504E34()
{
  if (*(char *)(v0 - 137) < 0) {
    operator delete(*(void **)(v0 - 160));
  }
  if (*(char *)(v0 - 105) < 0) {
    JUMPOUT(0x100504DC0);
  }
  JUMPOUT(0x100504DC4);
}

uint64_t sub_100504E60@<X0>(uint64_t result@<X0>, void *a2@<X1>, long long *a3@<X2>, long long *a4@<X3>, _OWORD *a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = 0;
  *(_DWORD *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0xBFF0000000000000;
  *(_DWORD *)(a6 + 24) = 0;
  uint64_t v7 = a2[5];
  if (v7)
  {
    uint64_t v8 = result;
    int v9 = *(_DWORD *)(result + 56);
    if (v9 == 1)
    {
      uint64_t v17 = *(void *)(*(void *)(a2[1] + 8 * ((v7 + a2[4] - 1) / 0x38uLL)) + 72 * ((v7 + a2[4] - 1) % 0x38uLL));
      uint64_t v18 = *(void *)(result + 8);
      size_t v12 = operator new(0x30uLL);
      long long v19 = a5[1];
      *size_t v12 = *a5;
      v12[1] = v19;
      v12[2] = a5[2];
      if (*((double *)v12 + 1) == -1.0)
      {
        int v20 = 0;
        uint64_t v18 = 0;
      }
      else
      {
        int v20 = *(_DWORD *)v12;
        uint64_t v17 = *((void *)v12 + 1);
      }
      *(void *)a6 = v18;
      *(_DWORD *)(a6 + 8) = v20;
      *(void *)(a6 + 16) = v17;
    }
    else
    {
      if (v9)
      {
LABEL_15:
        result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
        *(_DWORD *)(a6 + 24) = result;
        return result;
      }
      double v10 = *(double *)(*(void *)(a2[1] + 8 * ((v7 + a2[4] - 1) / 0x38uLL)) + 72 * ((v7 + a2[4] - 1) % 0x38uLL));
      uint64_t v11 = *(void *)(result + 8);
      long long v21 = *a4;
      long long v22 = a4[1];
      long long v23 = a4[2];
      long long v24 = *a3;
      long long v25 = a3[1];
      long long v26 = a3[2];
      size_t v12 = operator new(0x60uLL);
      uint64_t v13 = 0;
      v12[2] = v23;
      v12[3] = v24;
      void v12[4] = v25;
      v12[5] = v26;
      *size_t v12 = v21;
      v12[1] = v22;
      while (1)
      {
        double v14 = *((double *)&v12[v13] + 1);
        if (v14 != -1.0) {
          break;
        }
        v13 += 3;
        if (v13 == 6)
        {
          uint64_t v11 = 0;
          int v15 = 0;
          double v14 = v10;
          goto LABEL_11;
        }
      }
      int v15 = v12[v13];
LABEL_11:
      *(void *)a6 = v11;
      *(_DWORD *)(a6 + 8) = v15;
      *(double *)(a6 + 16) = v14;
    }
    *(_DWORD *)(a6 + 24) = 0;
    operator delete(v12);
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_100505080@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (void *)(a1 + 72);
  v46[0] = off_1022B7FC8;
  v46[3] = v46;
  sub_100504688((void *)(a1 + 72), (uint64_t)&unk_101D222C0, (uint64_t)v46, v27);
  sub_100507E30(v46);
  v45[0] = off_1022B7FC8;
  v45[3] = v45;
  sub_100504688(v4, (uint64_t)&unk_101D222D8, (uint64_t)v45, v26);
  sub_100507E30(v45);
  v44[0] = off_1022B7FC8;
  v44[3] = v44;
  sub_100504688(v4, (uint64_t)&unk_101D222A8, (uint64_t)v44, v25);
  sub_100507E30(v44);
  if (*(unsigned char *)(a1 + 64))
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022B7F08);
    }
    long long v5 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
    {
      size_t v6 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        size_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 16);
      sub_100134750(&v24, "WalkingTentative");
      sub_10050473C((const void **)&v24.__r_.__value_.__l.__data_, (uint64_t)v27 + 8, &v28);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v8 = &v28;
      }
      else {
        uint64_t v8 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      sub_100134750(&v22, "WalkingConfident");
      int v9 = &v23;
      sub_10050473C((const void **)&v22.__r_.__value_.__l.__data_, (uint64_t)v26 + 8, &v23);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v9 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      sub_100134750(&v20, "WalkingRetraction");
      sub_10050473C((const void **)&v20.__r_.__value_.__l.__data_, (uint64_t)v25 + 8, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int buf = 136316162;
      long long v35 = v6;
      __int16 v36 = 2048;
      uint64_t v37 = v7;
      __int16 v38 = 2080;
      long long v39 = v8;
      __int16 v40 = 2080;
      int v41 = v9;
      __int16 v42 = 2080;
      double v43 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[resume reminders] model,%s,workout,%zu,%s,%s,%s", buf, 0x34u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022B7F08);
      }
      size_t v12 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        size_t v12 = (void *)*v12;
      }
      std::string::size_type v13 = *(void *)(a1 + 16);
      sub_100134750(&v23, "WalkingTentative");
      double v14 = &v24;
      sub_10050473C((const void **)&v23.__r_.__value_.__l.__data_, (uint64_t)v27 + 8, &v24);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        double v14 = (std::string *)v24.__r_.__value_.__r.__words[0];
      }
      sub_100134750(&__p, "WalkingConfident");
      int v15 = &v22;
      sub_10050473C((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)v26 + 8, &v22);
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v15 = (std::string *)v22.__r_.__value_.__r.__words[0];
      }
      sub_100134750(v18, "WalkingRetraction");
      sub_10050473C((const void **)v18, (uint64_t)v25 + 8, &v20);
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v16 = &v20;
      }
      else {
        std::string::size_type v16 = (std::string *)v20.__r_.__value_.__r.__words[0];
      }
      LODWORD(v28.__r_.__value_.__l.__data_) = 136316162;
      *(std::string::size_type *)((char *)v28.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
      WORD2(v28.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&v28.__r_.__value_.__r.__words[1] + 6) = v13;
      HIWORD(v28.__r_.__value_.__r.__words[2]) = 2080;
      uint64_t v29 = v14;
      __int16 v30 = 2080;
      double v31 = v15;
      __int16 v32 = 2080;
      int v33 = v16;
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      if (v19 < 0) {
        operator delete(v18[0]);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual Result CLWorkoutResumeReminders::WalkModel::run() const", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
  return sub_100504E60(a1, v4, v27, v26, v25, a2);
}

void sub_1005055CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

void sub_1005056EC(uint64_t a1, uint64_t a2)
{
  long long v4 = operator new(4uLL);
  std::string __p = v4;
  _DWORD *v4 = 3;
  uint64_t v17 = v4 + 1;
  uint64_t v18 = v4 + 1;
  __int16 v36 = 0;
  *(_OWORD *)long long v35 = xmmword_101D1E250;
  memset(&v35[2], 0, 135);
  long long v37 = xmmword_101D1E250;
  uint64_t v38 = 0;
  int v39 = 0;
  v41[0] = 0;
  uint64_t v40 = 0;
  *(void *)((char *)v41 + 5) = 0;
  *(void *)((char *)&v41[1] + 6) = 0;
  uint64_t v44 = 0;
  char v45 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  long long v46 = xmmword_101D1E250;
  uint64_t v47 = 0;
  int v48 = 0;
  unint64_t v49 = 0xFFEFFFFFFFFFFFFFLL;
  int v60 = 0;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  int v55 = 0;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  memset(v59, 0, sizeof(v59));
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  unint64_t v63 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v64 = 0;
  int v65 = 0;
  uint64_t v71 = 0;
  __int16 v72 = 0;
  int v77 = 0;
  int v70 = 0;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v74 = 0u;
  long long v73 = 0u;
  char v75 = 0;
  memset(v76, 0, sizeof(v76));
  unint64_t v78 = 0xFFEFFFFFFFFFFFFFLL;
  long long v97 = 0u;
  long long v96 = 0u;
  long long v95 = 0u;
  long long v94 = 0u;
  long long v93 = 0u;
  long long v92 = 0u;
  long long v91 = 0u;
  long long v90 = 0u;
  long long v89 = 0u;
  long long v88 = 0u;
  long long v87 = 0u;
  long long v86 = 0u;
  long long v85 = 0u;
  long long v84 = 0u;
  long long v83 = 0u;
  long long v82 = 0u;
  long long v81 = 0u;
  long long v80 = 0u;
  long long v79 = 0u;
  uint64_t v98 = 0;
  unint64_t v99 = 0xFFEFFFFFFFFFFFFFLL;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  unint64_t v104 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v105 = 0;
  int v106 = 0;
  uint64_t v107 = 0;
  char v108 = 0;
  unint64_t v109 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v111 = 0;
  uint64_t v110 = 0;
  uint64_t v112 = 0x80000000800000;
  uint64_t v114 = 0;
  uint64_t v113 = 0;
  long long v115 = xmmword_101D1E260;
  uint64_t v116 = 0x80000000800000;
  long long v117 = 0u;
  long long v118 = 0u;
  uint64_t v119 = 0;
  unint64_t v120 = 0xFFEFFFFFFFFFFFFFLL;
  long long v121 = 0u;
  long long v122 = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  int v127 = 0;
  unint64_t v128 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v129 = 0;
  int v130 = 0;
  unint64_t v131 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v132 = 7;
  unint64_t v133 = 0xFFEFFFFFFFFFFFFFLL;
  char v134 = 0;
  uint64_t v136 = 0;
  uint64_t v135 = 0;
  uint64_t v137 = 0;
  if (sub_100174478((double *)a2, &__p, (uint64_t)v35))
  {
    if (*((double *)&v46 + 1) <= *(double *)(a1 + 24)) {
      goto LABEL_19;
    }
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022B7F08);
    }
    long long v5 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
    {
      size_t v6 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        size_t v6 = (void *)*v6;
      }
      *(_DWORD *)int buf = 136315906;
      std::string v28 = v6;
      __int16 v29 = 2048;
      uint64_t v30 = *((void *)&v46 + 1);
      __int16 v31 = 2048;
      uint64_t v32 = v43;
      __int16 v33 = 2048;
      uint64_t v34 = v44;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[resume reminders] model %s, adding hr entry,startTime,%f,bpm,%f,confidence,%f", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022B7F08);
      }
      double v14 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        double v14 = (void *)*v14;
      }
      int v19 = 136315906;
      std::string v20 = v14;
      __int16 v21 = 2048;
      uint64_t v22 = *((void *)&v46 + 1);
      __int16 v23 = 2048;
      uint64_t v24 = v43;
      __int16 v25 = 2048;
      uint64_t v26 = v44;
      int v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLWorkoutResumeReminders::HRModel::update(const CLWorkoutPredictorInputs &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    sub_100505D08((void *)(a1 + 72), (uint64_t)&v42);
  }
  else
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022B7F08);
    }
    uint64_t v7 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v8 = (void *)*v8;
      }
      *(_DWORD *)int buf = 136315138;
      std::string v28 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[resume reminders] model %s, failed to get hr source", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022B7F08);
      }
      size_t v12 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        size_t v12 = (void *)*v12;
      }
      int v19 = 136315138;
      std::string v20 = v12;
      std::string::size_type v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLWorkoutResumeReminders::HRModel::update(const CLWorkoutPredictorInputs &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  long long v9 = *(_OWORD *)(a2 + 328);
  long long v10 = *(_OWORD *)(a2 + 344);
  long long v11 = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 164) = *(_OWORD *)(a2 + 372);
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 120) = v9;
LABEL_19:
  if (__p)
  {
    uint64_t v17 = __p;
    operator delete(__p);
  }
}

void sub_100505CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100505D08(void *a1, uint64_t a2)
{
  sub_100507F8C(a1, a2);
  unint64_t v3 = a1[5];
  if (v3 >= 0x78)
  {
    ++a1[4];
    a1[5] = v3 - 1;
    sub_10017E0A8((uint64_t)a1, 1);
  }
}

uint64_t sub_100505D6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (void *)(a1 + 72);
  v28[0] = off_1022B8048;
  v28[1] = a1;
  v28[3] = v28;
  sub_100506140((void *)(a1 + 72), (uint64_t)&unk_101D22330, (uint64_t)v28, v18);
  sub_10050867C(v28);
  v27[0] = off_1022B8048;
  v27[1] = a1;
  long long v27[3] = v27;
  sub_100506140(v4, (uint64_t)&unk_101D222A8, (uint64_t)v27, v17);
  sub_10050867C(v27);
  if (*(unsigned char *)(a1 + 64))
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022B7F08);
    }
    long long v5 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
    {
      size_t v6 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        size_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 8);
      sub_100134750(&v16, "HRConfident");
      sub_10050473C((const void **)&v16.__r_.__value_.__l.__data_, (uint64_t)v18 + 8, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int buf = 136315650;
      uint64_t v22 = v6;
      __int16 v23 = 2048;
      uint64_t v24 = v7;
      __int16 v25 = 2080;
      uint64_t v26 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[resume reminders] model,%s,workout,%zu,%s", buf, 0x20u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022B7F08);
      }
      long long v10 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        long long v10 = (void *)*v10;
      }
      std::string::size_type v11 = *(void *)(a1 + 8);
      sub_100134750(v14, "HRConfident");
      sub_10050473C((const void **)v14, (uint64_t)v18 + 8, &v16);
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v12 = &v16;
      }
      else {
        size_t v12 = (std::string *)v16.__r_.__value_.__r.__words[0];
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v11;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 2080;
      std::string v20 = v12;
      std::string::size_type v13 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual Result CLWorkoutResumeReminders::HRModel::run() const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return sub_1005061F4(a1, v4, v18, v18, v17, a2);
}

void sub_1005060EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100506140@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  *a4 = *(_DWORD *)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_1005084AC((uint64_t)v9, a3);
  sub_10050833C(a1, v6, v7, (uint64_t)v9, (uint64_t)(a4 + 2));
  return sub_10050867C(v9);
}

void sub_1005061D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10050867C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005061F4@<X0>(uint64_t result@<X0>, void *a2@<X1>, long long *a3@<X2>, long long *a4@<X3>, _OWORD *a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = 0;
  *(_DWORD *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0xBFF0000000000000;
  *(_DWORD *)(a6 + 24) = 0;
  uint64_t v7 = a2[5];
  if (v7)
  {
    uint64_t v8 = result;
    int v9 = *(_DWORD *)(result + 56);
    if (v9 == 1)
    {
      uint64_t v17 = *(void *)(*(void *)(a2[1] + (((unint64_t)(v7 + a2[4] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8))
                      + (((v7 + a2[4] - 1) & 0x3F) << 6)
                      + 40);
      uint64_t v18 = *(void *)(result + 8);
      size_t v12 = operator new(0x30uLL);
      long long v19 = a5[1];
      *size_t v12 = *a5;
      v12[1] = v19;
      v12[2] = a5[2];
      if (*((double *)v12 + 1) == -1.0)
      {
        int v20 = 0;
        uint64_t v18 = 0;
      }
      else
      {
        int v20 = *(_DWORD *)v12;
        uint64_t v17 = *((void *)v12 + 1);
      }
      *(void *)a6 = v18;
      *(_DWORD *)(a6 + 8) = v20;
      *(void *)(a6 + 16) = v17;
    }
    else
    {
      if (v9)
      {
LABEL_15:
        result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
        *(_DWORD *)(a6 + 24) = result;
        return result;
      }
      double v10 = *(double *)(*(void *)(a2[1] + (((unint64_t)(v7 + a2[4] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8))
                      + (((v7 + a2[4] - 1) & 0x3F) << 6)
                      + 40);
      uint64_t v11 = *(void *)(result + 8);
      long long v21 = *a4;
      long long v22 = a4[1];
      long long v23 = a4[2];
      long long v24 = *a3;
      long long v25 = a3[1];
      long long v26 = a3[2];
      size_t v12 = operator new(0x60uLL);
      uint64_t v13 = 0;
      v12[2] = v23;
      v12[3] = v24;
      void v12[4] = v25;
      v12[5] = v26;
      *size_t v12 = v21;
      v12[1] = v22;
      while (1)
      {
        double v14 = *((double *)&v12[v13] + 1);
        if (v14 != -1.0) {
          break;
        }
        v13 += 3;
        if (v13 == 6)
        {
          uint64_t v11 = 0;
          int v15 = 0;
          double v14 = v10;
          goto LABEL_11;
        }
      }
      int v15 = v12[v13];
LABEL_11:
      *(void *)a6 = v11;
      *(_DWORD *)(a6 + 8) = v15;
      *(double *)(a6 + 16) = v14;
    }
    *(_DWORD *)(a6 + 24) = 0;
    operator delete(v12);
    goto LABEL_15;
  }
  return result;
}

void *sub_1005063E4(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = a2;
  a1[4] = 66;
  a1[5] = 0x7FEFFFFFFFFFFFFFLL;
  sub_100506444(a1, a3, a4);
  return a1;
}

void sub_10050642C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100508700((void ***)va);
  _Unwind_Resume(a1);
}

void sub_100506444(void *a1, uint64_t a2, double a3)
{
  if (a1[4] == a2)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022B7F08);
    }
    long long v4 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 134217984;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[resume reminders] already selected workout %ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022B7F08);
      }
      int v11 = 134217984;
      uint64_t v12 = a2;
      long long v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Detector::createModelsForWorkout(CMWorkoutType, CFAbsoluteTime)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  else
  {
    a1[4] = a2;
    sub_100508754(a1);
    switch(a2)
    {
      case 1:
      case 2:
      case 15:
      case 16:
      case 17:
      case 18:
      case 24:
        *(void *)int buf = a2;
        *(void *)&uint8_t buf[8] = 1;
        double v8 = a3;
        sub_100134750(__p, "WalkModel");
        int v10 = 0;
        operator new();
      case 3:
      case 4:
        *(void *)int buf = a2;
        *(void *)&uint8_t buf[8] = 4;
        double v8 = a3;
        sub_100134750(__p, "DefaultActivityModel");
        int v10 = 0;
        sub_1005072A8();
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
      case 11:
      case 13:
      case 14:
      case 20:
      case 21:
      case 22:
      case 23:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
        *(void *)int buf = a2;
        *(void *)&uint8_t buf[8] = 0;
        double v8 = a3;
        sub_100134750(__p, "HRModel");
        int v10 = 0;
        operator new();
      case 9:
        *(int64x2_t *)int buf = vdupq_n_s64(9uLL);
        double v8 = a3;
        sub_100134750(__p, "DefaultActivityModel");
        int v10 = 0;
        sub_1005072A8();
      case 12:
        *(int64x2_t *)int buf = vdupq_n_s64(0xCuLL);
        double v8 = a3;
        sub_100134750(__p, "DefaultActivityModel");
        int v10 = 0;
        sub_1005072A8();
      case 19:
        *(int64x2_t *)int buf = vdupq_n_s64(0x13uLL);
        double v8 = a3;
        sub_100134750(__p, "DefaultActivityModel");
        int v10 = 0;
        sub_1005072A8();
      default:
        return;
    }
  }
}

void sub_100506B70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v22 = a12;
  a12 = 0;
  if (v22) {
    sub_101A63DC0();
  }
  sub_101A63D70(&a11);
  long long v23 = *(_Unwind_Exception **)(v21 - 112);
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(v23);
}

uint64_t **sub_100506E28(uint64_t **a1)
{
  v2 = *a1;
  unint64_t v3 = a1[1];
  while (v2 != v3)
  {
    uint64_t v4 = *v2;
    uint64_t *v2 = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
    }
    ++v2;
  }
  unint64_t v6 = (void **)a1;
  sub_100508700(&v6);
  return a1;
}

double *sub_100506EB0@<X0>(double *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0xBFF0000000000000;
  *(_DWORD *)(a2 + 24) = 0;
  unint64_t v3 = *(void **)result;
  uint64_t v4 = (void *)*((void *)result + 1);
  if (*(void **)result != v4)
  {
    long long v5 = result;
    int v6 = 0;
    do
    {
      (**(void (***)(void, void))*v3)(*v3, *((void *)v5 + 3));
      result = (double *)(*(void *(**)(unsigned char *__return_ptr))(*(void *)*v3 + 8))(v9);
      if (*(int *)&v9[8] >= v6)
      {
        *(_OWORD *)a2 = *(_OWORD *)v9;
        *(_OWORD *)(a2 + 12) = *(_OWORD *)&v9[12];
        int v6 = *(_DWORD *)(a2 + 8);
      }
      if ((v6 - 1) <= 1)
      {
        double v7 = *(double *)(a2 + 16);
        if (v7 >= v5[5]) {
          double v7 = v5[5];
        }
        v5[5] = v7;
      }
      ++v3;
    }
    while (v3 != v4);
    if (v6)
    {
      double v8 = v5[5];
    }
    else
    {
      v5[5] = 1.79769313e308;
      double v8 = 1.79769313e308;
    }
    if (v8 == 1.79769313e308) {
      double v8 = *(double *)(a2 + 16);
    }
    *(double *)(a2 + 16) = v8;
  }
  return result;
}

void sub_100506FE4(uint64_t **a1, int a2)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022B7F08);
  }
  uint64_t v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109120;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[resume reminders] setting detection mode to %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022B7F08);
    }
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutResumeReminders::Detector::setMode(DetectionMode)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  long long v5 = *a1;
  int v6 = a1[1];
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    *(_DWORD *)(v7 + 56) = a2;
  }
}

void **sub_1005071AC(uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      sub_1001D7FD4();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    v17[4] = result;
    if (v13) {
      double v14 = (char *)sub_1000DA54C((uint64_t)result, v13);
    }
    else {
      double v14 = 0;
    }
    int v15 = &v14[8 * v10];
    v17[0] = v14;
    v17[1] = v15;
    _OWORD v17[3] = &v14[8 * v13];
    uint64_t v16 = *a2;
    *a2 = 0;
    *(void *)int v15 = v16;
    v17[2] = v15 + 8;
    sub_1005087C0(a1, v17);
    int v9 = (void *)a1[1];
    result = sub_100508970(v17);
  }
  else
  {
    uint64_t v8 = *a2;
    *a2 = 0;
    *uint64_t v7 = v8;
    int v9 = v7 + 1;
    a1[1] = (uint64_t)v9;
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_100507294(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100508970((void **)va);
  _Unwind_Resume(a1);
}

void sub_1005072A8()
{
}

void sub_100507328()
{
}

uint64_t sub_10050734C(uint64_t a1)
{
  *(void *)a1 = off_1022B7E18;
  sub_10050757C((void *)(a1 + 72));
  *(void *)a1 = &off_1022B7DE0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void sub_1005073BC(uint64_t a1)
{
  *(void *)a1 = off_1022B7E18;
  sub_10050757C((void *)(a1 + 72));
  *(void *)a1 = &off_1022B7DE0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }

  operator delete();
}

uint64_t sub_10050744C(uint64_t a1)
{
  *(void *)a1 = off_1022B7E88;
  sub_100507624((void *)(a1 + 72));
  *(void *)a1 = &off_1022B7DE0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void sub_1005074BC(uint64_t a1)
{
  *(void *)a1 = off_1022B7E88;
  sub_100507624((void *)(a1 + 72));
  *(void *)a1 = &off_1022B7DE0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }

  operator delete();
}

void sub_10050754C(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

uint64_t sub_10050757C(void *a1)
{
  v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 28;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 56;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

uint64_t sub_100507624(void *a1)
{
  v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 32;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 64;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

__n128 sub_1005076CC(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 56 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100507794(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x38)) + 72 * (v7 % 0x38);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v10 = *(_OWORD *)(a2 + 32);
  long long v11 = *(_OWORD *)(a2 + 48);
  *(void *)(v8 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)(v8 + 48) = v11;
  *(__n128 *)(v8 + 16) = result;
  ++a1[5];
  return result;
}

void sub_100507794(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x38;
  unint64_t v4 = v2 - 56;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    int v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      long long v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    long long v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      int v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    int v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      long long v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0xFC0uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  __int16 v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100507A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100507AAC(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x38) {
    a2 = 1;
  }
  if (v2 < 0x70) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 56;
  }
  return v4 ^ 1u;
}

double sub_100507B0C@<D0>(void *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0xBFF0000000000000;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t v10 = a1[4];
  unint64_t v9 = a1[5];
  *(unsigned char *)(a5 + 32) = v9 >= a3;
  *(void *)(a5 + 16) = a2;
  *(void *)(a5 + 24) = a3;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = (v10 + v9) / 0x38;
  uint64_t v13 = a1[1];
  uint64_t v14 = a1[2];
  uint64_t v15 = (void *)(v13 + 8 * v12);
  if (v14 == v13) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = *v15 + 72 * (v11 - 56 * v12);
  }
  if (a3 <= 1) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = a3;
  }
  for (uint64_t i = v17 - 1; ; --i)
  {
    unint64_t v19 = v14 == v13 ? 0 : *(void *)(v13 + 8 * (a1[4] / 0x38uLL)) + 72 * (a1[4] % 0x38uLL);
    if (v16 == v19) {
      break;
    }
    uint64_t v20 = v16;
    if (v16 == *v15) {
      uint64_t v20 = *(v15 - 1) + 4032;
    }
    uint64_t v21 = *(void *)(a4 + 24);
    if (!v21) {
      sub_10015E48C();
    }
    unint64_t v22 = *(int *)(a5 + 8)
        + (unint64_t)(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v21 + 48))(v21, v20 - 72);
    *(_DWORD *)(a5 + 8) = v22;
    if (a2 <= v22)
    {
      if (v16 == *v15) {
        uint64_t v16 = *(v15 - 1) + 4032;
      }
      double result = *(double *)(v16 - 72);
      *(double *)a5 = result;
      return result;
    }
    if (!i) {
      return result;
    }
    if (v16 == *v15)
    {
      uint64_t v24 = *--v15;
      uint64_t v16 = v24 + 4032;
    }
    v16 -= 72;
    uint64_t v13 = a1[1];
    uint64_t v14 = a1[2];
  }
  return result;
}

uint64_t sub_100507CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_100507D44()
{
}

void *sub_100507D58(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022B7F38;
  result[1] = v3;
  return result;
}

uint64_t sub_100507DA0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022B7F38;
  a2[1] = v2;
  return result;
}

BOOL sub_100507DCC(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a1 + 8) + 16) == *(void *)(a2 + 16);
}

uint64_t sub_100507DE4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100507E24()
{
}

void *sub_100507E30(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100507EB8()
{
}

void *sub_100507ECC()
{
  double result = operator new(0x10uLL);
  void *result = off_1022B7FC8;
  return result;
}

void sub_100507F04(uint64_t a1, void *a2)
{
  *a2 = off_1022B7FC8;
}

BOOL sub_100507F2C(uint64_t a1, uint64_t a2)
{
  return (unint64_t)(*(void *)(a2 + 16) - 1) < 2;
}

uint64_t sub_100507F40(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100507F80()
{
}

__n128 sub_100507F8C(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 8 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100508024(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v7 & 0x3F) << 6);
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 48) = v11;
  *(__n128 *)unint64_t v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++a1[5];
  return result;
}

void sub_100508024(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x40;
  unint64_t v4 = v2 - 64;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      long long v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      long long v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  __int16 v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1005082F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sub_10050833C@<D0>(void *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0xBFF0000000000000;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t v10 = a1[4];
  unint64_t v9 = a1[5];
  *(unsigned char *)(a5 + 32) = v9 >= a3;
  *(void *)(a5 + 16) = a2;
  *(void *)(a5 + 24) = a3;
  char v11 = v10 + v9;
  unint64_t v12 = (v10 + v9) >> 6;
  uint64_t v13 = a1[1];
  uint64_t v14 = a1[2];
  uint64_t v15 = (void *)(v13 + 8 * v12);
  if (v14 == v13) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = *v15 + ((unint64_t)(v11 & 0x3F) << 6);
  }
  if (a3 <= 1) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = a3;
  }
  for (uint64_t i = v17 - 1; ; --i)
  {
    uint64_t v19 = v14 == v13 ? 0 : *(void *)(v13 + ((a1[4] >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((a1[4] & 0x3FLL) << 6);
    if (v16 == v19) {
      break;
    }
    uint64_t v20 = v16;
    if (v16 == *v15) {
      uint64_t v20 = *(v15 - 1) + 4096;
    }
    uint64_t v21 = *(void *)(a4 + 24);
    if (!v21) {
      sub_10015E48C();
    }
    unint64_t v22 = *(int *)(a5 + 8)
        + (unint64_t)(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v21 + 48))(v21, v20 - 64);
    *(_DWORD *)(a5 + 8) = v22;
    if (a2 <= v22)
    {
      if (v16 == *v15) {
        uint64_t v16 = *(v15 - 1) + 4096;
      }
      double result = *(double *)(v16 - 24);
      *(double *)a5 = result;
      return result;
    }
    if (!i) {
      return result;
    }
    if (v16 == *v15)
    {
      uint64_t v24 = *--v15;
      uint64_t v16 = v24 + 4096;
    }
    v16 -= 64;
    uint64_t v13 = a1[1];
    uint64_t v14 = a1[2];
  }
  return result;
}

uint64_t sub_1005084AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_100508548()
{
}

void *sub_10050855C(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022B8048;
  result[1] = v3;
  return result;
}

uint64_t sub_1005085A4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022B8048;
  a2[1] = v2;
  return result;
}

BOOL sub_1005085D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(float **)(a1 + 8);
  float v3 = (v2[37] - *(double *)(a2 + 8)) / (v2[37] - v2[36]);
  return (float)(sub_101141BD8(v3, v2[35]) * v2[34]) > 4.4021;
}

uint64_t sub_100508630(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100508670()
{
}

void *sub_10050867C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100508700(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100508754(v2);
    float v3 = **a1;
    operator delete(v3);
  }
}

void *sub_100508754(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  float v3 = (void *)result[1];
  while (v3 != v2)
  {
    unint64_t v4 = (void *)*--v3;
    double result = v4;
    *float v3 = 0;
    if (v4) {
      double result = (void *)(*(uint64_t (**)(void *))(*result + 32))(result);
    }
  }
  v1[1] = v2;
  return result;
}

uint64_t sub_1005087C0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100508838((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100508838(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1005088D0((uint64_t)v13);
  return v11;
}

uint64_t sub_1005088D0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100508908((void *)a1);
  }
  return a1;
}

void *sub_100508908(void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *uint64_t v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 32))(result);
    }
    ++v1;
  }
  return result;
}

void **sub_100508970(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *sub_1005089A8(void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    unint64_t v4 = result;
    do
    {
      v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 32))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t sub_100508A1C(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  return result;
}

void sub_100508A38()
{
  *(void *)uint64_t v0 = v2;
  *(_DWORD *)(v0 + 8) = v1;
}

void sub_100508F10(uint64_t a1)
{
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022B8110);
  }
  uint64_t v2 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGLS,GNSSLocationService,invalidation handler", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022B8110);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGnssLocationXPCServiceManager getConnection]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  uint64_t v3 = *(void *)(a1 + 32);
  unint64_t v4 = *(void **)(v3 + 32);
  if (v4)
  {

    uint64_t v3 = *(void *)(a1 + 32);
  }
  *(void *)(v3 + 32) = 0;
}

void sub_1005090BC(uint64_t a1)
{
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022B8110);
  }
  uint64_t v2 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGLS,GNSSLocationService,interruption handler", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022B8110);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGnssLocationXPCServiceManager getConnection]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 9) = 1;
  uint64_t v3 = *(void *)(a1 + 32);
  unint64_t v4 = *(void **)(v3 + 32);
  if (v4)
  {
    [v4 invalidate];

    uint64_t v3 = *(void *)(a1 + 32);
  }
  *(void *)(v3 + 32) = 0;
}

void sub_100509678(uint64_t a1, int a2)
{
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022B8110);
  }
  unint64_t v4 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67240192;
    int v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLGLS,reconfigureRavenIfNeeded,completed,success,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022B8110);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGnssLocationXPCServiceManager reconfigureRavenIfNeeded]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 9) = 0;
}

void sub_100509860(id a1, NSError *a2)
{
  if (a2)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022B8110);
    }
    uint64_t v3 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 138543362;
      uint64_t v6 = [(NSError *)a2 localizedDescription];
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "CLGLS,getSynchronousRemoteObjectProxy error %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022B8110);
      }
      [(NSError *)a2 localizedDescription];
      unint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLGnssLocationXPCServiceManager getSynchronousRemoteObjectProxy]_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

uint64_t sub_100509DEC(uint64_t a1)
{
  [*(id *)(a1 + 32) reset];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

uint64_t sub_10050A058(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10050A260(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10050A624(id a1)
{
  qword_102419408 = (uint64_t)os_log_create("com.apple.locationd.Position", "Raven");
}

void sub_10050A654()
{
}

void sub_10050A6B0()
{
}

void sub_10050A6D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_1022B8140;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 56) = a3;
  sub_10060F068();
}

void sub_10050AAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = v15[5];
  v15[5] = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = v15[4];
  v15[4] = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = v15[3];
  v15[3] = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = v15[2];
  v15[2] = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = *v16;
  *long long v16 = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  _Unwind_Resume(exception_object);
}

void sub_10050ABEC(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B8198);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B8198);
    }
    unint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1006F7D34(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10050ADB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10050ADD8(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(a4[4], "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B8198);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B8198);
    }
    unint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1006F8154(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10050AFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10050AFC4(uint64_t a1, int *a2, unsigned __int8 *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B8198);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B8198);
    }
    unint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1006F87A8(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10050B190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10050B1B0(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B8198);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B8198);
    }
    unint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1006F8DB0(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10050B37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10050B39C(uint64_t a1, int *a2, void **a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022B8198);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onTelephonyNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022B8198);
    }
    unint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onTelephonyNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1006F8E18(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10050B568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_10050B588(uint64_t a1)
{
  id v1 = [[objc_msgSend(*(id *)(a1 + 56), "vendor") proxyForService:@"CLDaemonStatus"];

  return [v1 syncgetReachability];
}

BOOL sub_10050B5C0(uint64_t a1)
{
  return [[[[*(id *)(a1 + 56) vendor] proxyForService:@"CLDataProtectionManager"] syncgetDataAvailability] != 1;
}

id sub_10050B5F8(uint64_t a1)
{
  id v1 = [[objc_msgSend(*(id *)(a1 + 56), "vendor") proxyForService:@"CLClientManager"];
  if (byte_10247B1CF >= 0) {
    uint64_t v2 = &qword_10247B1B8;
  }
  else {
    uint64_t v2 = (uint64_t *)qword_10247B1B8;
  }
  uint64_t v3 = +[NSString stringWithUTF8String:v2];

  return [v1 resetNotificationConsumedForIdentifier:v3];
}

void *sub_10050B668(void *a1)
{
  *a1 = off_1022B8140;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[3];
  a1[3] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = a1[1];
  a1[1] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return a1;
}

void sub_10050B798(void *a1)
{
  *a1 = off_1022B8140;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[3];
  a1[3] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[2];
  a1[2] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = a1[1];
  a1[1] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }

  operator delete();
}

void sub_10050B8E8(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10050B918()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_10050B998()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_10050BA28(_Unwind_Exception *a1)
{
}

uint64_t sub_10050BA40()
{
  sub_100134750(&qword_10247B1B8, "NetworkLocationProvider");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247B1B8, (void *)&_mh_execute_header);
}

uint64_t sub_10050BAA0(uint64_t a1)
{
  return a1;
}

void sub_10050BADC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 5020;
  sub_1000DF354((_DWORD *)a2, a1);
  if (*(unsigned char *)(v4 + 1356)
    && (*(int *)(a1 + 6400) > 0 || *(int *)(a1 + 6404) > 0 || *(int *)(a1 + 6408) > 0)
    && *(unsigned char *)(a1 + 810))
  {
    if (sub_1000E6DB4(a1 + 4944))
    {
      long long v5 = *(_OWORD *)(a1 + 4992);
      long long v40 = *(_OWORD *)(a1 + 4976);
      v41[0] = v5;
      *(_OWORD *)((char *)v41 + 12) = *(_OWORD *)(a1 + 5004);
      long long v6 = *(_OWORD *)(a1 + 4960);
      long long v38 = *(_OWORD *)(a1 + 4944);
      long long v39 = v6;
      long long v7 = *(_OWORD *)(a1 + 5044);
      long long v8 = *(_OWORD *)(a1 + 5076);
      long long v35 = *(_OWORD *)(a1 + 5060);
      long long v36 = v8;
      uint64_t v37 = *(void *)(a1 + 5092);
      long long v33 = *(_OWORD *)(a1 + 5028);
      long long v34 = v7;
      unint64_t v9 = *(const char **)(a1 + 6384);
      sub_100C398D8(a1 + 4944, (uint64_t)__src);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B83D0);
      }
      uint64_t v10 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        char v11 = *(const char **)v4;
        *(_DWORD *)int buf = 134349312;
        *(void *)&uint8_t buf[4] = v9;
        *(_WORD *)&buf[12] = 2050;
        *(void *)&buf[14] = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "@WifiFlow, reissue, time, %{public}.1f, last, %{public}.1f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022B83D0);
        }
        uint64_t v19 = *(const char **)v4;
        int v42 = 134349312;
        uint64_t v43 = v9;
        __int16 v44 = 2050;
        uint64_t v45 = v19;
        uint64_t v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::NotifyClients::HandleEvent::operator()(const Events::Client::UpdateTimer &) const", "%s\n", v20);
        if (v20 != buf) {
          free(v20);
        }
      }
      long long v47 = v40;
      *(_OWORD *)int v48 = v41[0];
      *(_OWORD *)&v48[12] = *(_OWORD *)((char *)v41 + 12);
      *(_OWORD *)int buf = v38;
      *(_OWORD *)&uint8_t buf[16] = v39;
      uint64_t v49 = v9;
      long long v51 = v34;
      long long v52 = v35;
      long long v53 = v36;
      uint64_t v54 = v37;
      long long v50 = v33;
      memcpy(v55, __src, sizeof(v55));
      uint64_t v56 = v25;
      long long v57 = v26;
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v62 = v31;
      v63[0] = *(_OWORD *)v32;
      *(void *)((char *)v63 + 13) = *(void *)&v32[13];
      long long v58 = v27;
      long long v59 = v28;
      long long v60 = v29;
      long long v61 = v30;
      sub_10050C174(a2 + 1992, (uint64_t)buf);
      if (v57) {
        sub_1000DB0A0(v57);
      }
      ++*(_DWORD *)(*(void *)(a2 + 6424) + 244);
      unint64_t v12 = (int *)(a2 + 6444);
      *(void *)(a2 + 6456) = sub_100AC304C(a2 + 6444);
      *(unsigned char *)(a2 + 6464) = v13;
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B83D0);
      }
      __int16 v14 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
      {
        long long v15 = sub_100AC2F94(*(_DWORD *)(a2 + 6456));
        __int16 v16 = sub_100AC2F94(*v12);
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = v15;
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "@WifiFlow, inter-locreq state update per update timer event, staging, %{public}s, current, %{public}s", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022B83D0);
        }
        uint64_t v21 = sub_100AC2F94(*(_DWORD *)(a2 + 6456));
        uint64_t v22 = sub_100AC2F94(*v12);
        int v42 = 136446466;
        uint64_t v43 = v21;
        __int16 v44 = 2082;
        uint64_t v45 = v22;
        uint64_t v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::NotifyClients::HandleEvent::operator()(const Events::Client::UpdateTimer &) const", "%s\n", v23);
        if (v23 != buf) {
          free(v23);
        }
      }
      if (v26) {
        sub_1000DB0A0(v26);
      }
    }
    else
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B83D0);
      }
      uint64_t v17 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "@WifiFlow, reissue, invalid location, #CloneMe", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022B83D0);
        }
        __src[0] = 0;
        __int16 v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::NotifyClients::HandleEvent::operator()(const Events::Client::UpdateTimer &) const", "%s\n", v18);
        if (v18 != buf) {
          free(v18);
        }
      }
    }
  }
}

void sub_10050C11C(_Unwind_Exception *a1)
{
  if (STACK[0x220]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x220]);
  }
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10050C174(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 800);
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v7;
  long long v10 = *(_OWORD *)(a2 + 112);
  long long v9 = *(_OWORD *)(a2 + 128);
  long long v11 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 96) = v11;
  memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x201uLL);
  unint64_t v12 = (void *)(a2 + 680);
  uint64_t v13 = *(void *)(a2 + 680);
  if (v4)
  {
    uint64_t v14 = *(void *)(a2 + 688);
    *unint64_t v12 = 0;
    *(void *)(a2 + 688) = 0;
    *(void *)(a1 + 680) = v13;
    long long v15 = *(std::__shared_weak_count **)(a1 + 688);
    *(void *)(a1 + 688) = v14;
    if (v15) {
      sub_1000DB0A0(v15);
    }
    long long v16 = *(_OWORD *)(a2 + 696);
    long long v17 = *(_OWORD *)(a2 + 728);
    *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
    *(_OWORD *)(a1 + 728) = v17;
    *(_OWORD *)(a1 + 696) = v16;
    long long v18 = *(_OWORD *)(a2 + 744);
    long long v19 = *(_OWORD *)(a2 + 760);
    long long v20 = *(_OWORD *)(a2 + 776);
    *(void *)(a1 + 789) = *(void *)(a2 + 789);
    *(_OWORD *)(a1 + 760) = v19;
    *(_OWORD *)(a1 + 776) = v20;
    *(_OWORD *)(a1 + 744) = v18;
  }
  else
  {
    *(void *)(a1 + 680) = v13;
    *(void *)(a1 + 688) = *(void *)(a2 + 688);
    *unint64_t v12 = 0;
    *(void *)(a2 + 688) = 0;
    long long v21 = *(_OWORD *)(a2 + 696);
    long long v22 = *(_OWORD *)(a2 + 728);
    *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
    *(_OWORD *)(a1 + 728) = v22;
    *(_OWORD *)(a1 + 696) = v21;
    long long v23 = *(_OWORD *)(a2 + 744);
    long long v24 = *(_OWORD *)(a2 + 760);
    long long v25 = *(_OWORD *)(a2 + 776);
    *(void *)(a1 + 789) = *(void *)(a2 + 789);
    *(_OWORD *)(a1 + 760) = v24;
    *(_OWORD *)(a1 + 776) = v25;
    *(_OWORD *)(a1 + 744) = v23;
    *(unsigned char *)(a1 + 800) = 1;
  }
  return a1;
}

void sub_10050C28C(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = (uint64_t)v5;
  sub_1000DF354(v5, v3);
  if (*(unsigned char *)(v4 + 6376)
    && (*(int *)(v4 + 6400) > 0 || *(int *)(v4 + 6404) > 0 || *(int *)(v4 + 6408) >= 1)
    && *(unsigned char *)(v4 + 808))
  {
    sub_10050C530(v4, 1, (uint64_t)&v16);
    sub_1000D76D0(v6, (uint64_t)&v16);
    sub_1000D846C(v6 + 808, (uint64_t)v20);
    sub_1000D9488(v6 + 3016, (uint64_t)v21);
    sub_1000D7DCC((uint64_t)v21);
    sub_1000D7C60((uint64_t)v20);
    sub_1000D7B80((uint64_t)&v16);
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(v4 + 6472) + 24))(&v16);
    unsigned __int8 v7 = v16;
    if (!v19) {
      unsigned __int8 v7 = 0;
    }
    sub_10050CAF0(*(char *)(v2 + 48), v7 | (v19 << 8));
    uint64_t v8 = *(void *)(v2 + 24);
    uint64_t v9 = *(void *)(v6 + 6424);
    if (v8)
    {
      if (SHIBYTE(v14) < 0)
      {
        sub_1000DC48C(__p, v13[0], (unint64_t)v13[1]);
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)v13;
        uint64_t v12 = v14;
      }
      sub_100F91EC4(v9, (long long *)__p, *(_DWORD *)(v6 + 1564));
      if (SHIBYTE(v12) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v15 = v13;
      long long v10 = sub_100510C30((uint64_t **)(v9 + 176), (const void **)v13, (uint64_t)&unk_101D0B290, (long long **)&v15);
      ++*((_DWORD *)v10 + 14);
    }
    if (SHIBYTE(v14) < 0) {
      operator delete(v13[0]);
    }
    if (v19)
    {
      if (v17)
      {
        long long v18 = v17;
        operator delete(v17);
      }
    }
  }
}

void sub_10050C4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,void *a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a27)
  {
    if (a24) {
      operator delete(a24);
    }
  }
  sub_10050BAA0(v27);
  _Unwind_Resume(a1);
}

uint64_t sub_10050C530@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  sub_1000DF354((_DWORD *)a3, a1);
  if (*(_DWORD *)(a1 + 1564) && *(double *)(a1 + 1428) > 0.0)
  {
    long long v6 = *(_OWORD *)(a1 + 1520);
    long long v38 = *(_OWORD *)(a1 + 1504);
    long long v39 = v6;
    v40[0] = *(_OWORD *)(a1 + 1536);
    *(_OWORD *)((char *)v40 + 12) = *(_OWORD *)(a1 + 1548);
    long long v7 = *(_OWORD *)(a1 + 1456);
    long long v34 = *(_OWORD *)(a1 + 1440);
    long long v35 = v7;
    long long v8 = *(_OWORD *)(a1 + 1488);
    long long v36 = *(_OWORD *)(a1 + 1472);
    long long v37 = v8;
    long long v9 = *(_OWORD *)(a1 + 1424);
    long long v32 = *(_OWORD *)(a1 + 1408);
    long long v33 = v9;
    sub_100C398D8(a1 + 1408, (uint64_t)__src);
    long long v50 = v38;
    long long v51 = v39;
    v52[0] = v40[0];
    *(_OWORD *)((char *)v52 + 12) = *(_OWORD *)((char *)v40 + 12);
    long long v46 = v34;
    long long v47 = v35;
    long long v48 = v36;
    long long v49 = v37;
    *(_OWORD *)int buf = v32;
    *(_OWORD *)&uint8_t buf[16] = v33;
    memcpy(v53, __src, sizeof(v53));
    uint64_t v54 = v24;
    long long v55 = v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v60 = v30;
    v61[0] = *(_OWORD *)v31;
    *(void *)((char *)v61 + 13) = *(void *)&v31[13];
    long long v56 = v26;
    long long v57 = v27;
    long long v58 = v28;
    long long v59 = v29;
    sub_10050C174(a3 + 1992, (uint64_t)buf);
    if (v55) {
      sub_1000DB0A0(v55);
    }
    ++*(_DWORD *)(*(void *)(a3 + 6424) + 244);
    long long v10 = (int *)(a3 + 6444);
    *(void *)(a3 + 6456) = sub_100AC304C(a3 + 6444);
    *(unsigned char *)(a3 + 6464) = v11;
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B83D0);
    }
    uint64_t v12 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = sub_100AC2F94(*(_DWORD *)(a3 + 6456));
      uint64_t v14 = sub_100AC2F94(*v10);
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = v13;
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "@WifiFlow, inter-locreq state update, staging, %{public}s, current, %{public}s", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B83D0);
      }
      unsigned __int8 v19 = sub_100AC2F94(*(_DWORD *)(a3 + 6456));
      long long v20 = sub_100AC2F94(*v10);
      int v41 = 136446466;
      int v42 = v19;
      __int16 v43 = 2082;
      __int16 v44 = v20;
      long long v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static Output CL::Wifi1::Policies::NotifyClients::HandleEvent::processLocationComputation(const Input &, BOOL)", "%s\n", v21);
      if (v21 != buf) {
        free(v21);
      }
    }
    if (v25) {
      sub_1000DB0A0(v25);
    }
  }
  else if (a2)
  {
    if (!*(unsigned char *)(a3 + 1987)) {
      *(unsigned char *)(a3 + 1987) = 1;
    }
    uint64_t v15 = *(void *)(a3 + 6424);
    ++*(_DWORD *)(v15 + 248);
    if (*(unsigned char *)(a3 + 1616))
    {
      *(void *)int buf = a3 + 1592;
      uint64_t v16 = sub_100510C30((uint64_t **)(v15 + 264), (const void **)(a3 + 1592), (uint64_t)&unk_101D0B290, (long long **)buf);
      ++*((_DWORD *)v16 + 14);
    }
    else
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B83D0);
      }
      long long v17 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "WifiCalc, did we forget to set failureReason?", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022B83D0);
        }
        LOWORD(__src[0]) = 0;
        long long v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static Output CL::Wifi1::Policies::NotifyClients::HandleEvent::processLocationComputation(const Input &, BOOL)", "%s\n", v22);
        if (v22 != buf) {
          free(v22);
        }
      }
    }
  }
  uint64_t result = sub_1000FC450();
  if (result)
  {
    sub_1000E9354(buf);
    __src[0] = sub_1006D40B0((unsigned int *)(a1 + 5968));
    sub_1000EA838((uint64_t)buf, "wifiLocType", __src);
    sub_1004D2BC4((uint64_t)buf, "apsInSolution", (unsigned int *)(a1 + 1564));
    sub_10016332C((uint64_t)buf, "hAcc", (const void *)(a1 + 1428));
    sub_1000FC45C((uint64_t)buf, (uint64_t)"locationd");
    return sub_10013F3C4(buf);
  }
  return result;
}

void sub_10050CA84(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10050CAF0(unsigned int a1, __int16 a2)
{
  sub_10010F274((uint64_t)v11);
  uint64_t v4 = sub_100D54EB0(a1);
  size_t v5 = strlen(v4);
  sub_100132EFC(v12, (uint64_t)v4, v5);
  if ((a2 & 0xFF00) != 0)
  {
    long long v6 = sub_100132EFC(v12, (uint64_t)"-", 1);
    long long v7 = sub_1010A88C8((char)a2);
    size_t v8 = strlen(v7);
    sub_100132EFC(v6, (uint64_t)v7, v8);
  }
  std::stringbuf::str();
  *(void *)((char *)v11
  v12[0] = v9;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10050CCBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10050CCD0(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = (unsigned char *)v1;
  uint64_t v4 = v3;
  sub_1000DF354(v5, v1);
  if (v2[6376] && v2[809]) {
    sub_10050C530((uint64_t)v2, v2[1657], v4);
  }
  else {
    sub_1000DF9A4(v4, (uint64_t)v5);
  }
  sub_1000D7DCC((uint64_t)&v7);
  sub_1000D7C60((uint64_t)&v6);
  sub_1000D7B80((uint64_t)v5);
}

void sub_10050CDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10050CDC4(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_1000DF354(v5, v1);
  if (*(unsigned char *)(v2 + 6376) && (*(int *)(v2 + 6400) > 0 || *(int *)(v2 + 6404) > 0 || *(int *)(v2 + 6408) > 0)) {
    sub_10050C530(v2, 1, v4);
  }
  else {
    sub_1000DF9A4(v4, (uint64_t)v5);
  }
  sub_1000D7DCC((uint64_t)&v7);
  sub_1000D7C60((uint64_t)&v6);
  sub_1000D7B80((uint64_t)v5);
}

void sub_10050CEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10050CED4(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_1000DF354(a2, a1);
  if (*(unsigned char *)(a1 + 6376))
  {
    if (*(int *)(a1 + 6412) >= 1)
    {
      std::string __p = 0;
      long long v55 = 0uLL;
      uint64_t v4 = *(void *)(a1 + 1632);
      uint64_t v5 = *(void *)(a1 + 1640);
      if (v4 != v5)
      {
        uint64_t v53 = a1;
        uint64_t v6 = 0;
        do
        {
          if (*(double *)(v4 + 20) >= 0.0)
          {
            if ((unint64_t)v6 >= *((void *)&v55 + 1))
            {
              uint64_t v14 = __p;
              uint64_t v15 = 0x6F96F96F96F96F97 * ((v6 - __p) >> 2);
              unint64_t v16 = v15 + 1;
              if ((unint64_t)(v15 + 1) > 0x1A41A41A41A41A4) {
                sub_1001D7FD4();
              }
              if (0xDF2DF2DF2DF2DF2ELL * ((uint64_t)(*((void *)&v55 + 1) - (void)__p) >> 2) > v16) {
                unint64_t v16 = 0xDF2DF2DF2DF2DF2ELL * ((uint64_t)(*((void *)&v55 + 1) - (void)__p) >> 2);
              }
              if ((unint64_t)(0x6F96F96F96F96F97 * ((uint64_t)(*((void *)&v55 + 1) - (void)__p) >> 2)) >= 0xD20D20D20D20D2) {
                unint64_t v17 = 0x1A41A41A41A41A4;
              }
              else {
                unint64_t v17 = v16;
              }
              if (v17)
              {
                long long v18 = (char *)sub_10050FC98((uint64_t)&v55 + 8, v17);
                uint64_t v14 = __p;
                uint64_t v6 = (char *)v55;
              }
              else
              {
                long long v18 = 0;
              }
              unsigned __int8 v19 = &v18[156 * v15];
              long long v20 = *(_OWORD *)(v4 + 16);
              *(_OWORD *)unsigned __int8 v19 = *(_OWORD *)v4;
              *((_OWORD *)v19 + 1) = v20;
              long long v21 = *(_OWORD *)(v4 + 32);
              long long v22 = *(_OWORD *)(v4 + 48);
              long long v23 = *(_OWORD *)(v4 + 80);
              *((_OWORD *)v19 + 4) = *(_OWORD *)(v4 + 64);
              *((_OWORD *)v19 + 5) = v23;
              *((_OWORD *)v19 + 2) = v21;
              *((_OWORD *)v19 + 3) = v22;
              long long v24 = *(_OWORD *)(v4 + 96);
              long long v25 = *(_OWORD *)(v4 + 112);
              long long v26 = *(_OWORD *)(v4 + 128);
              *(_OWORD *)(v19 + 140) = *(_OWORD *)(v4 + 140);
              *((_OWORD *)v19 + 7) = v25;
              *((_OWORD *)v19 + 8) = v26;
              *((_OWORD *)v19 + 6) = v24;
              if (v6 == v14)
              {
                long long v35 = &v18[156 * v15];
              }
              else
              {
                long long v27 = &v18[156 * v15];
                do
                {
                  long long v28 = *(_OWORD *)(v6 - 156);
                  *(_OWORD *)(v27 - 140) = *(_OWORD *)(v6 - 140);
                  *(_OWORD *)(v27 - 156) = v28;
                  long long v29 = *(_OWORD *)(v6 - 124);
                  long long v30 = *(_OWORD *)(v6 - 108);
                  long long v31 = *(_OWORD *)(v6 - 92);
                  *(_OWORD *)(v27 - 76) = *(_OWORD *)(v6 - 76);
                  *(_OWORD *)(v27 - 92) = v31;
                  *(_OWORD *)(v27 - 108) = v30;
                  *(_OWORD *)(v27 - 124) = v29;
                  long long v32 = *(_OWORD *)(v6 - 60);
                  long long v33 = *(_OWORD *)(v6 - 44);
                  long long v34 = *(_OWORD *)(v6 - 28);
                  long long v35 = v27 - 156;
                  *((_OWORD *)v27 - 1) = *((_OWORD *)v6 - 1);
                  *(_OWORD *)(v27 - 28) = v34;
                  *(_OWORD *)(v27 - 44) = v33;
                  *(_OWORD *)(v27 - 60) = v32;
                  v6 -= 156;
                  v27 -= 156;
                }
                while (v6 != v14);
              }
              uint64_t v6 = v19 + 156;
              std::string __p = v35;
              *((void *)&v55 + 1) = &v18[156 * v17];
              if (v14) {
                operator delete(v14);
              }
            }
            else
            {
              long long v7 = *(_OWORD *)(v4 + 16);
              *(_OWORD *)uint64_t v6 = *(_OWORD *)v4;
              *((_OWORD *)v6 + 1) = v7;
              long long v8 = *(_OWORD *)(v4 + 32);
              long long v9 = *(_OWORD *)(v4 + 48);
              long long v10 = *(_OWORD *)(v4 + 80);
              *((_OWORD *)v6 + 4) = *(_OWORD *)(v4 + 64);
              *((_OWORD *)v6 + 5) = v10;
              *((_OWORD *)v6 + 2) = v8;
              *((_OWORD *)v6 + 3) = v9;
              long long v11 = *(_OWORD *)(v4 + 96);
              long long v12 = *(_OWORD *)(v4 + 112);
              long long v13 = *(_OWORD *)(v4 + 128);
              *(_OWORD *)(v6 + 140) = *(_OWORD *)(v4 + 140);
              *((_OWORD *)v6 + 7) = v12;
              *((_OWORD *)v6 + 8) = v13;
              *((_OWORD *)v6 + 6) = v11;
              v6 += 156;
            }
            *(void *)&long long v55 = v6;
          }
          v4 += 184;
        }
        while (v4 != v5);
        long long v36 = __p;
        if (__p != v6)
        {
          long long v52 = a2;
          double v37 = *(double *)(__p + 76);
          long long v38 = __p;
          do
          {
            double v39 = v37;
            if (!sub_1000EF68C(*(double *)(v38 + 4), *(double *)(v38 + 12)))
            {
              if (qword_1024193B0 != -1) {
                dispatch_once(&qword_1024193B0, &stru_1022B83D0);
              }
              long long v40 = qword_1024193B8;
              if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)int buf = 68289539;
                *(_DWORD *)&uint8_t buf[4] = 0;
                *(_WORD *)&uint8_t buf[8] = 2082;
                *(void *)&buf[10] = "";
                *(_WORD *)&buf[18] = 1040;
                *(_DWORD *)&buf[20] = 156;
                *(_WORD *)&buf[24] = 2097;
                *(void *)&buf[26] = v36;
                _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid batched location\", \"location\":%{private, location:CLClientLocation}.*P}", buf, 0x22u);
                if (qword_1024193B0 != -1) {
                  dispatch_once(&qword_1024193B0, &stru_1022B83D0);
                }
              }
              int v41 = qword_1024193B8;
              if (os_signpost_enabled((os_log_t)qword_1024193B8))
              {
                *(_DWORD *)int buf = 68289539;
                *(_DWORD *)&uint8_t buf[4] = 0;
                *(_WORD *)&uint8_t buf[8] = 2082;
                *(void *)&buf[10] = "";
                *(_WORD *)&buf[18] = 1040;
                *(_DWORD *)&buf[20] = 156;
                *(_WORD *)&buf[24] = 2097;
                *(void *)&buf[26] = v36;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v41, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid batched location", "{\"msg%{public}.0s\":\"Invalid batched location\", \"location\":%{private, location:CLClientLocation}.*P}", buf, 0x22u);
              }
            }
            double v37 = *(double *)(v38 + 76);
            if (v39 > v37)
            {
              if (qword_1024193B0 != -1) {
                dispatch_once(&qword_1024193B0, &stru_1022B83D0);
              }
              int v42 = qword_1024193B8;
              if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)int buf = 68289539;
                *(_DWORD *)&uint8_t buf[4] = 0;
                *(_WORD *)&uint8_t buf[8] = 2082;
                *(void *)&buf[10] = "";
                *(_WORD *)&buf[18] = 2049;
                *(double *)&buf[20] = v39;
                *(_WORD *)&buf[28] = 2049;
                *(double *)&buf[30] = v37;
                _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Batched locations are supposed to be ordered from oldest to more recent\", \"t0\":\"%{private}f\", \"t1\":\"%{private}f\"}", buf, 0x26u);
                if (qword_1024193B0 != -1) {
                  dispatch_once(&qword_1024193B0, &stru_1022B83D0);
                }
              }
              __int16 v43 = qword_1024193B8;
              if (os_signpost_enabled((os_log_t)qword_1024193B8))
              {
                *(_DWORD *)int buf = 68289539;
                *(_DWORD *)&uint8_t buf[4] = 0;
                *(_WORD *)&uint8_t buf[8] = 2082;
                *(void *)&buf[10] = "";
                *(_WORD *)&buf[18] = 2049;
                *(double *)&buf[20] = v39;
                *(_WORD *)&buf[28] = 2049;
                *(double *)&buf[30] = v37;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v43, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Batched locations are supposed to be ordered from oldest to more recent", "{\"msg%{public}.0s\":\"Batched locations are supposed to be ordered from oldest to more recent\", \"t0\":\"%{private}f\", \"t1\":\"%{private}f\"}", buf, 0x26u);
              }
            }
            v38 += 156;
            v36 += 156;
          }
          while (v38 != v6);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022B83D0);
          }
          __int16 v44 = v52;
          uint64_t v45 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
          {
            unint64_t v46 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(void *)(v53 + 1640) - *(void *)(v53 + 1632)) >> 3);
            *(_DWORD *)int buf = 134349312;
            *(void *)&uint8_t buf[4] = 0x6F96F96F96F96F97 * ((uint64_t)(v55 - (void)__p) >> 2);
            *(_WORD *)&buf[12] = 2050;
            *(void *)&buf[14] = v46;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "WsbCalc, filter, live, %{public}lu, groups, %{public}lu", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1022B83D0);
            }
            unint64_t v50 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(void *)(v53 + 1640) - *(void *)(v53 + 1632)) >> 3);
            int v56 = 134349312;
            uint64_t v57 = 0x6F96F96F96F96F97 * ((uint64_t)(v55 - (void)__p) >> 2);
            __int16 v58 = 2050;
            unint64_t v59 = v50;
            long long v51 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::NotifyClients::HandleEvent::operator()(const Events::Wifi::Wsb &) const", "%s\n", v51);
            if (v51 != buf) {
              free(v51);
            }
            __int16 v44 = v52;
          }
          uint64_t v47 = *((void *)v44 + 803);
          int v48 = *(_DWORD *)(v47 + 252);
          int v49 = *(_DWORD *)(v47 + 256);
          *(_OWORD *)&uint8_t buf[8] = v55;
          *(_DWORD *)(v47 + 252) = v48 + 1;
          *(_DWORD *)(v47 + 256) = v49 - 1762037865 * (((void)v55 - (void)__p) >> 2);
          long long v55 = 0uLL;
          *(void *)int buf = __p;
          sub_1001E052C((uint64_t)(v44 + 700), (__n128 *)buf);
          if (*(void *)buf)
          {
            *(void *)&uint8_t buf[8] = *(void *)buf;
            operator delete(*(void **)buf);
          }
          uint64_t v6 = 0;
        }
        if (v6) {
          operator delete(v6);
        }
      }
    }
  }
}

void sub_10050D664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10050BAA0(a11);
  _Unwind_Resume(a1);
}

void sub_10050D6B4(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = sub_1000DF354(a2, a1);
  uint64_t v4 = *(void *)(a1 + 1632);
  uint64_t v5 = *(void *)(a1 + 1640);
  if (v4 != v5)
  {
    __int16 v43 = v3;
    std::string __p = 0;
    uint64_t v6 = 0;
    long long v45 = 0uLL;
    do
    {
      if (*(double *)(v4 + 20) >= 0.0)
      {
        if ((unint64_t)v6 >= *((void *)&v45 + 1))
        {
          uint64_t v14 = __p;
          uint64_t v15 = 0x6F96F96F96F96F97 * ((v6 - __p) >> 2);
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) > 0x1A41A41A41A41A4) {
            sub_1001D7FD4();
          }
          if (0xDF2DF2DF2DF2DF2ELL * ((uint64_t)(*((void *)&v45 + 1) - (void)__p) >> 2) > v16) {
            unint64_t v16 = 0xDF2DF2DF2DF2DF2ELL * ((uint64_t)(*((void *)&v45 + 1) - (void)__p) >> 2);
          }
          if ((unint64_t)(0x6F96F96F96F96F97 * ((uint64_t)(*((void *)&v45 + 1) - (void)__p) >> 2)) >= 0xD20D20D20D20D2) {
            unint64_t v17 = 0x1A41A41A41A41A4;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            long long v18 = (char *)sub_10050FC98((uint64_t)&v45 + 8, v17);
            uint64_t v14 = __p;
            uint64_t v6 = (char *)v45;
          }
          else
          {
            long long v18 = 0;
          }
          unsigned __int8 v19 = &v18[156 * v15];
          long long v20 = *(_OWORD *)(v4 + 16);
          *(_OWORD *)unsigned __int8 v19 = *(_OWORD *)v4;
          *((_OWORD *)v19 + 1) = v20;
          long long v21 = *(_OWORD *)(v4 + 32);
          long long v22 = *(_OWORD *)(v4 + 48);
          long long v23 = *(_OWORD *)(v4 + 80);
          *((_OWORD *)v19 + 4) = *(_OWORD *)(v4 + 64);
          *((_OWORD *)v19 + 5) = v23;
          *((_OWORD *)v19 + 2) = v21;
          *((_OWORD *)v19 + 3) = v22;
          long long v24 = *(_OWORD *)(v4 + 96);
          long long v25 = *(_OWORD *)(v4 + 112);
          long long v26 = *(_OWORD *)(v4 + 128);
          *(_OWORD *)(v19 + 140) = *(_OWORD *)(v4 + 140);
          *((_OWORD *)v19 + 7) = v25;
          *((_OWORD *)v19 + 8) = v26;
          *((_OWORD *)v19 + 6) = v24;
          if (v6 == v14)
          {
            long long v35 = &v18[156 * v15];
          }
          else
          {
            long long v27 = &v18[156 * v15];
            do
            {
              long long v28 = *(_OWORD *)(v6 - 156);
              *(_OWORD *)(v27 - 140) = *(_OWORD *)(v6 - 140);
              *(_OWORD *)(v27 - 156) = v28;
              long long v29 = *(_OWORD *)(v6 - 124);
              long long v30 = *(_OWORD *)(v6 - 108);
              long long v31 = *(_OWORD *)(v6 - 92);
              *(_OWORD *)(v27 - 76) = *(_OWORD *)(v6 - 76);
              *(_OWORD *)(v27 - 92) = v31;
              *(_OWORD *)(v27 - 108) = v30;
              *(_OWORD *)(v27 - 124) = v29;
              long long v32 = *(_OWORD *)(v6 - 60);
              long long v33 = *(_OWORD *)(v6 - 44);
              long long v34 = *(_OWORD *)(v6 - 28);
              long long v35 = v27 - 156;
              *((_OWORD *)v27 - 1) = *((_OWORD *)v6 - 1);
              *(_OWORD *)(v27 - 28) = v34;
              *(_OWORD *)(v27 - 44) = v33;
              *(_OWORD *)(v27 - 60) = v32;
              v6 -= 156;
              v27 -= 156;
            }
            while (v6 != v14);
          }
          uint64_t v6 = v19 + 156;
          std::string __p = v35;
          *((void *)&v45 + 1) = &v18[156 * v17];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          long long v7 = *(_OWORD *)(v4 + 16);
          *(_OWORD *)uint64_t v6 = *(_OWORD *)v4;
          *((_OWORD *)v6 + 1) = v7;
          long long v8 = *(_OWORD *)(v4 + 32);
          long long v9 = *(_OWORD *)(v4 + 48);
          long long v10 = *(_OWORD *)(v4 + 80);
          *((_OWORD *)v6 + 4) = *(_OWORD *)(v4 + 64);
          *((_OWORD *)v6 + 5) = v10;
          *((_OWORD *)v6 + 2) = v8;
          *((_OWORD *)v6 + 3) = v9;
          long long v11 = *(_OWORD *)(v4 + 96);
          long long v12 = *(_OWORD *)(v4 + 112);
          long long v13 = *(_OWORD *)(v4 + 128);
          *(_OWORD *)(v6 + 140) = *(_OWORD *)(v4 + 140);
          *((_OWORD *)v6 + 7) = v12;
          *((_OWORD *)v6 + 8) = v13;
          *((_OWORD *)v6 + 6) = v11;
          v6 += 156;
        }
        *(void *)&long long v45 = v6;
      }
      v4 += 184;
    }
    while (v4 != v5);
    if (__p != v6)
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022B83D0);
      }
      long long v36 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v37 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(void *)(a1 + 1640) - *(void *)(a1 + 1632)) >> 3);
        *(_DWORD *)int buf = 134349312;
        *(void *)&uint8_t buf[4] = 0x6F96F96F96F96F97 * ((uint64_t)(v45 - (void)__p) >> 2);
        *(_WORD *)&buf[12] = 2050;
        *(void *)&buf[14] = v37;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "WsbCalc, filter, reproc, %{public}lu, groups, %{public}lu", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022B83D0);
        }
        unint64_t v41 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(void *)(a1 + 1640) - *(void *)(a1 + 1632)) >> 3);
        int v46 = 134349312;
        uint64_t v47 = 0x6F96F96F96F96F97 * ((uint64_t)(v45 - (void)__p) >> 2);
        __int16 v48 = 2050;
        unint64_t v49 = v41;
        int v42 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::NotifyClients::HandleEvent::operator()(const Events::ReprocessWifiScanBuffer &) const", "%s\n", v42);
        if (v42 != buf) {
          free(v42);
        }
      }
      uint64_t v38 = *((void *)v43 + 803);
      int v39 = *(_DWORD *)(v38 + 252);
      int v40 = *(_DWORD *)(v38 + 256);
      *(_OWORD *)&uint8_t buf[8] = v45;
      *(_DWORD *)(v38 + 252) = v39 + 1;
      *(_DWORD *)(v38 + 256) = v40 - 1762037865 * (((void)v45 - (void)__p) >> 2);
      long long v45 = 0uLL;
      *(void *)int buf = __p;
      sub_1001E052C((uint64_t)(v43 + 700), (__n128 *)buf);
      if (*(void *)buf)
      {
        *(void *)&uint8_t buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
      uint64_t v6 = 0;
    }
    if (v6) {
      operator delete(v6);
    }
  }
}

void sub_10050DB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10050BAA0(a11);
  _Unwind_Resume(a1);
}

void sub_10050DBC4(_DWORD *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000DF354((_DWORD *)a3, (uint64_t)a1);
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022B83D0);
  }
  uint64_t v6 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *a2;
    *(_DWORD *)int buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "@WifiFlow, alsreply, aps, error, tag, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022B83D0);
    }
    int v10 = *a2;
    LODWORD(v14) = 67240192;
    HIDWORD(v14) = v10;
    long long v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::NotifyClients::HandleEvent::operator()(const Events::Network::AlsError &) const", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  if (((int)a1[1600] > 0 || (int)a1[1601] > 0 || (int)a1[1602] >= 1) && sub_100054BBC(a1 + 1492))
  {
    if (!*(unsigned char *)(a3 + 1987)) {
      *(unsigned char *)(a3 + 1987) = 1;
    }
    uint64_t v8 = *(void *)(a3 + 6424);
    ++*(_DWORD *)(v8 + 248);
    sub_100134750(buf, "alsError");
    uint64_t v14 = buf;
    long long v9 = sub_100510D70((uint64_t **)(v8 + 264), (const void **)buf, (uint64_t)&unk_101D0B290, (_OWORD **)&v14);
    ++*((_DWORD *)v9 + 14);
    if (v13 < 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_10050DE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_10050BAA0(v16);
  _Unwind_Resume(a1);
}

void sub_10050DE70(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000DF354((_DWORD *)a3, a1);
  if (*(int *)(a1 + 6400) >= 1 && *a2 != 0)
  {
    if (!*(unsigned char *)(a3 + 1987)) {
      *(unsigned char *)(a3 + 1987) = 1;
    }
    uint64_t v7 = *(void *)(a3 + 6424);
    ++*(_DWORD *)(v7 + 248);
    sub_100134750(__p, "wifiPoweredOff");
    long long v11 = __p;
    uint64_t v8 = sub_100510D70((uint64_t **)(v7 + 264), (const void **)__p, (uint64_t)&unk_101D0B290, (_OWORD **)&v11);
    ++*((_DWORD *)v8 + 14);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_10050DF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10050BAA0(v15);
  _Unwind_Resume(a1);
}

void sub_10050DF64(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000DF354((_DWORD *)a2, a1);
  if (!*(unsigned char *)(a1 + 6379))
  {
    if (!*(unsigned char *)(a2 + 1987)) {
      *(unsigned char *)(a2 + 1987) = 1;
    }
    uint64_t v4 = *(void *)(a2 + 6424);
    ++*(_DWORD *)(v4 + 248);
    sub_100134750(__p, "wifiPoweredOff");
    uint64_t v8 = __p;
    uint64_t v5 = sub_100510D70((uint64_t **)(v4 + 264), (const void **)__p, (uint64_t)&unk_101D0B290, (_OWORD **)&v8);
    ++*((_DWORD *)v5 + 14);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_10050E020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10050BAA0(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_10050E04C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 6480);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  sub_1000D7DCC(a1 + 3016);
  sub_1000D7C60(a1 + 808);
  sub_1000D7B80(a1);
  return a1;
}

void sub_10050E1D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 != a2)
  {
    *(_DWORD *)(a2 + 32) = *(_DWORD *)(v3 + 32);
    sub_10050E240((void *)a2, *(uint64_t **)(v3 + 16), 0);
  }
  *(void *)(a2 + 40) = *(void *)(v3 + 40);
  *(unsigned char *)(a2 + 48) = *(unsigned char *)(v3 + 48);

  sub_1000D9D94(a2 + 56, v3 + 56);
}

void sub_10050E240(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = (const std::string *)a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v8 = (void **)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      char v10 = v8;
    }
    else
    {
      do
      {
        v8[2] = (void *)v4->__r_.__value_.__r.__words[2];
        std::string::operator=((std::string *)v8 + 1, v4 + 1);
        long long v11 = *(_OWORD *)&v4[2].__r_.__value_.__l.__data_;
        long long v12 = *(_OWORD *)&v4[2].__r_.__value_.__r.__words[2];
        long long v13 = *(_OWORD *)&v4[3].__r_.__value_.__r.__words[1];
        v8[12] = v4[4].__r_.__value_.__l.__data_;
        *((_OWORD *)v8 + 4) = v12;
        *((_OWORD *)v8 + 5) = v13;
        *((_OWORD *)v8 + 3) = v11;
        char v10 = (void **)*v8;
        sub_10050E35C(a1, v8);
        uint64_t v4 = (const std::string *)v4->__r_.__value_.__r.__words[0];
        if (!v10) {
          break;
        }
        uint64_t v8 = v10;
      }
      while (v4 != (const std::string *)a3);
    }
    sub_1000DB150((int)a1, v10);
  }
  while (v4 != (const std::string *)a3)
  {
    sub_10050E838(a1, (uint64_t *)&v4->__r_.__value_.__r.__words[2]);
    uint64_t v4 = (const std::string *)v4->__r_.__value_.__r.__words[0];
  }
}

void sub_10050E32C(void *a1)
{
  __cxa_begin_catch(a1);
  sub_1000DB150(v1, v2);
  __cxa_rethrow();
}

void sub_10050E348(_Unwind_Exception *a1)
{
}

void *sub_10050E35C(void *a1, void *a2)
{
  uint64_t v4 = a2 + 2;
  uint64_t v8 = a2[2];
  unint64_t v5 = sub_1000D8908((uint64_t)&v8);
  a2[1] = v5;
  uint64_t v6 = sub_10050E3CC((uint64_t)a1, v5, v4);
  sub_1000D8A74(a1, a2, v6);
  return a2;
}

void *sub_10050E3CC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      size_t v12 = v11;
    }
    else {
      size_t v12 = v10;
    }
    sub_10050E560(a1, v12);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v13.i16[0] = vaddlv_u8(v13);
  unint64_t v14 = v13.u32[0];
  if (v13.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  uint64_t v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (v16)
  {
    unint64_t v17 = (void *)*v16;
    if (*v16)
    {
      int v18 = 0;
      do
      {
        unint64_t v19 = v17[1];
        if (v14 > 1)
        {
          unint64_t v20 = v17[1];
          if (v19 >= v6) {
            unint64_t v20 = v19 % v6;
          }
        }
        else
        {
          unint64_t v20 = v19 & (v6 - 1);
        }
        if (v20 != v15) {
          break;
        }
        if (v19 == a2)
        {
          uint64_t v25 = v17[2];
          uint64_t v21 = sub_1000D8908((uint64_t)&v25);
          uint64_t v24 = *a3;
          BOOL v22 = v21 == sub_1000D8908((uint64_t)&v24);
        }
        else
        {
          BOOL v22 = 0;
        }
        if (v18 & !v22) {
          break;
        }
        v18 |= v22;
        uint64_t v16 = (void *)*v16;
        unint64_t v17 = (void *)*v16;
      }
      while (*v16);
    }
  }
  return v16;
}

void sub_10050E560(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_10050E650(a1, prime);
    }
  }
}

void sub_10050E650(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_1001D7FA0();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = *v7; *v7; uint64_t i = *v7)
      {
        unint64_t v13 = i[1];
        if (v10 > 1)
        {
          if (v13 >= a2) {
            v13 %= a2;
          }
        }
        else
        {
          v13 &= a2 - 1;
        }
        if (v13 == v8)
        {
          uint64_t v7 = (uint64_t **)i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          uint64_t v14 = *i;
          unint64_t v15 = i;
          if (*i)
          {
            while (1)
            {
              uint64_t v21 = i[2];
              uint64_t v16 = sub_1000D8908((uint64_t)&v21);
              uint64_t v20 = *(void *)(v14 + 16);
              uint64_t v17 = sub_1000D8908((uint64_t)&v20);
              int v18 = (uint64_t *)*v15;
              if (v16 != v17) {
                break;
              }
              uint64_t v14 = *v18;
              unint64_t v15 = (uint64_t *)*v15;
              if (!*v18)
              {
                unint64_t v19 = 0;
                goto LABEL_30;
              }
            }
            unint64_t v19 = (uint64_t *)*v15;
            int v18 = v15;
          }
          else
          {
            unint64_t v19 = 0;
            int v18 = i;
          }
LABEL_30:
          *uint64_t v7 = v19;
          uint64_t *v18 = **(void **)(*(void *)a1 + 8 * v13);
          **(void **)(*(void *)a1 + 8 * v13) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          uint64_t v7 = (uint64_t **)i;
          unint64_t v8 = v13;
        }
      }
    }
  }
  else
  {
    unint64_t v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *sub_10050E838(void *a1, uint64_t *a2)
{
  sub_10050E898((uint64_t)a1, a2, (uint64_t)&v4);
  return sub_10050E35C(a1, v4);
}

void sub_10050E874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_10050E97C((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10050E898@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (char *)operator new(0x68uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  uint64_t v7 = *a2;
  *((void *)v6 + 2) = *a2;
  unint64_t v8 = v6 + 24;
  if (*((char *)a2 + 31) < 0)
  {
    sub_1000DC48C(v8, (void *)a2[1], a2[2]);
    uint64_t v7 = *((void *)v6 + 2);
  }
  else
  {
    *(_OWORD *)unint64_t v8 = *(_OWORD *)(a2 + 1);
    *((void *)v6 + 5) = a2[3];
  }
  long long v9 = *((_OWORD *)a2 + 3);
  *((_OWORD *)v6 + 3) = *((_OWORD *)a2 + 2);
  *((_OWORD *)v6 + 4) = v9;
  *((_OWORD *)v6 + 5) = *((_OWORD *)a2 + 4);
  *((void *)v6 + 12) = a2[10];
  *(unsigned char *)(a3 + 16) = 1;
  uint64_t v11 = v7;
  uint64_t result = sub_1000D8908((uint64_t)&v11);
  *((void *)v6 + 1) = result;
  return result;
}

void sub_10050E960(_Unwind_Exception *a1)
{
  *int v1 = 0;
  sub_10050E97C(v3, v2);
  _Unwind_Resume(a1);
}

void sub_10050E97C(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 47) < 0) {
      operator delete(__p[3]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_10050E9DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 != a2) {
    sub_1000DAC8C((uint64_t *)a2, *(void *)v3, *(void *)(v3 + 8), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 3));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(v3 + 24);

  sub_1000D9D94(a2 + 32, v3 + 32);
}

void sub_10050EA50(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 57) < 0) {
      operator delete(*(void **)(v1 - 80));
    }
    v1 -= 88;
  }
}

void sub_10050EA98()
{
  __assert_rtn("forced_return", "forced_return.hpp", 38, "false");
}

uint64_t sub_10050EB3C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 144) && *(char *)(a2 + 87) < 0) {
    operator delete(*(void **)(a2 + 64));
  }

  return sub_1000DB114(a2);
}

void sub_10050EB88(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 120) && *(char *)(a2 + 63) < 0) {
    operator delete(*(void **)(a2 + 40));
  }
  uint64_t v3 = (void **)a2;
  sub_1000D7F78(&v3);
}

void sub_10050EBD4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 143) < 0) {
    operator delete(*(void **)(a2 + 120));
  }
  if (*(char *)(a2 + 39) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 16);
    operator delete(v3);
  }
}

uint64_t sub_10050EC2C(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_10050EC70(uint64_t a1, uint64_t a2)
{
  sub_1000E23EC(&v9, a2);
  sub_1000D7B80(*(void *)a1);
  uint64_t v3 = *(void *)a1;
  *(unsigned char *)(v3 + 8) = 0;
  *(unsigned char *)(v3 + 96) = 0;
  if (v16)
  {
    *(void *)(v3 + 8) = v9;
    uint64_t v4 = v11;
    *(_OWORD *)(v3 + 16) = *(_OWORD *)__p;
    *(void *)(v3 + 32) = v4;
    __p[1] = 0;
    uint64_t v11 = 0;
    __p[0] = 0;
    uint64_t v5 = v15;
    long long v6 = v12;
    long long v7 = v13;
    *(_OWORD *)(v3 + 72) = v14;
    *(_OWORD *)(v3 + 56) = v7;
    *(_OWORD *)(v3 + 40) = v6;
    *(void *)(v3 + 88) = v5;
    *(unsigned char *)(v3 + 96) = 1;
    int v8 = v16;
    **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
    if (v8)
    {
      if (SHIBYTE(v11) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  }
}

uint64_t sub_10050ED34(uint64_t a1, uint64_t a2)
{
  sub_10050EE58((uint64_t)v10, a2);
  uint64_t v11 = *(void *)(a2 + 40);
  char v12 = *(unsigned char *)(a2 + 48);
  sub_1000E23EC(&v13, a2 + 56);
  sub_1000D7B80(*(void *)a1);
  uint64_t v4 = *(void *)a1;
  sub_1000E2908(*(void *)a1 + 8, v10);
  *(void *)(v4 + 48) = v11;
  *(unsigned char *)(v4 + 56) = v12;
  *(unsigned char *)(v4 + 64) = 0;
  *(unsigned char *)(v4 + 152) = 0;
  if (v20)
  {
    *(void *)(v4 + 64) = v13;
    uint64_t v5 = v15;
    *(_OWORD *)(v4 + 72) = *(_OWORD *)__p;
    *(void *)(v4 + 88) = v5;
    __p[1] = 0;
    uint64_t v15 = 0;
    __p[0] = 0;
    uint64_t v6 = v19;
    long long v7 = v16;
    long long v8 = v18;
    *(_OWORD *)(v4 + 112) = v17;
    *(_OWORD *)(v4 + 128) = v8;
    *(_OWORD *)(v4 + 96) = v7;
    *(void *)(v4 + 144) = v6;
    *(unsigned char *)(v4 + 152) = 1;
    LODWORD(v6) = v20;
    **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
    if (v6 && SHIBYTE(v15) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  }
  return sub_1000DB114((uint64_t)v10);
}

void sub_10050EE44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000DB114((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10050EE58(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100100330(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_10050EED0(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_10050EEB8(_Unwind_Exception *a1)
{
  sub_1000DB114(v1);
  _Unwind_Resume(a1);
}

void *sub_10050EED0(uint64_t a1, void *a2, uint64_t a3)
{
  v25[0] = *a2;
  unint64_t v7 = sub_1000D8908((uint64_t)v25);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    char v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            v25[0] = v13[2];
            uint64_t v15 = sub_1000D8908((uint64_t)v25);
            uint64_t v26 = *a2;
            if (v15 == sub_1000D8908((uint64_t)&v26)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  sub_10050F160(a1, v8, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  BOOL v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9) {
          v23 %= v9;
        }
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t v13 = (void *)v25[0];
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_10050F13C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, uint64_t a10)
{
  if (__p) {
    sub_10050E97C((uint64_t)&a10, __p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10050F160@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (__n128 *)operator new(0x68uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  v8->n128_u64[0] = 0;
  v8->n128_u64[1] = a2;
  v8[1].n128_u64[0] = *(void *)a3;
  unint64_t v9 = &v8[1].n128_u8[8];
  if (*(char *)(a3 + 31) < 0)
  {
    sub_1000DC48C(v9, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    *(_OWORD *)unint64_t v9 = *(_OWORD *)(a3 + 8);
    v8[2].n128_u64[1] = *(void *)(a3 + 24);
  }
  __n128 v10 = *(__n128 *)(a3 + 48);
  v8[3] = *(__n128 *)(a3 + 32);
  v8[4] = v10;
  __n128 result = *(__n128 *)(a3 + 64);
  v8[5] = result;
  v8[6].n128_u64[0] = *(void *)(a3 + 80);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_10050F210(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_10050E97C(v3, v2);
  _Unwind_Resume(a1);
}

void sub_10050F22C(uint64_t a1, uint64_t a2)
{
  long long v10 = 0uLL;
  uint64_t v11 = 0;
  sub_1000DA6E8(&v10, *(void *)a2, *(void *)(a2 + 8), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  int v12 = *(_DWORD *)(a2 + 24);
  sub_1000E23EC(&v13, a2 + 32);
  sub_1000D7B80(*(void *)a1);
  uint64_t v4 = *(void *)a1;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  *(_OWORD *)(v4 + 8) = v10;
  *(void *)(v4 + 24) = v11;
  long long v10 = 0uLL;
  uint64_t v11 = 0;
  *(_DWORD *)(v4 + 32) = v12;
  *(unsigned char *)(v4 + 40) = 0;
  *(unsigned char *)(v4 + 128) = 0;
  if (v20)
  {
    *(void *)(v4 + 40) = v13;
    uint64_t v5 = v15;
    *(_OWORD *)(v4 + 48) = *(_OWORD *)__p;
    *(void *)(v4 + 64) = v5;
    __p[1] = 0;
    uint64_t v15 = 0;
    __p[0] = 0;
    uint64_t v6 = v19;
    long long v7 = v16;
    long long v8 = v17;
    *(_OWORD *)(v4 + 104) = v18;
    *(_OWORD *)(v4 + 88) = v8;
    *(_OWORD *)(v4 + 72) = v7;
    *(void *)(v4 + 120) = v6;
    *(unsigned char *)(v4 + 128) = 1;
    int v9 = v20;
    **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
    if (v9 && SHIBYTE(v15) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  }
  size_t v21 = (void **)&v10;
  sub_1000D7F78(&v21);
}

void sub_10050F374(_Unwind_Exception *a1)
{
  *(void *)(v2 - 40) = v1;
  sub_1000D7F78((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10050F38C(uint64_t a1, uint64_t *a2)
{
  uint64_t v10 = *a2;
  char v11 = *((unsigned char *)a2 + 8);
  if (*((char *)a2 + 39) < 0)
  {
    sub_1000DC48C(&v12, (void *)a2[2], a2[3]);
  }
  else
  {
    long long v12 = *((_OWORD *)a2 + 1);
    uint64_t v13 = a2[4];
  }
  long long v15 = *(_OWORD *)(a2 + 7);
  long long v16 = *(_OWORD *)(a2 + 9);
  v17[0] = *(_OWORD *)(a2 + 11);
  *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)((char *)a2 + 100);
  long long v14 = *(_OWORD *)(a2 + 5);
  if (*((char *)a2 + 143) < 0)
  {
    sub_1000DC48C(&__p, (void *)a2[15], a2[16]);
  }
  else
  {
    long long __p = *(_OWORD *)(a2 + 15);
    uint64_t v19 = a2[17];
  }
  sub_1000D7B80(*(void *)a1);
  uint64_t v4 = *(void *)a1;
  *(unsigned char *)(v4 + 16) = v11;
  *(void *)(v4 + 8) = v10;
  uint64_t v5 = v13;
  *(_OWORD *)(v4 + 24) = v12;
  *(void *)(v4 + 40) = v5;
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  *(_OWORD *)(v4 + 48) = v14;
  long long v7 = v16;
  long long v6 = v17[0];
  long long v8 = v15;
  *(_OWORD *)(v4 + 108) = *(_OWORD *)((char *)v17 + 12);
  *(_OWORD *)(v4 + 80) = v7;
  *(_OWORD *)(v4 + 96) = v6;
  *(_OWORD *)(v4 + 64) = v8;
  uint64_t v9 = v19;
  *(_OWORD *)(v4 + 128) = __p;
  *(void *)(v4 + 144) = v9;
  long long __p = 0uLL;
  uint64_t v19 = 0;
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete((void *)v12);
  }
}

void sub_10050F504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10050F520(uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    uint64_t v3 = v1;
    sub_1000D7F78(&v3);
  }
}

void *sub_10050F56C(void *a1, uint64_t a2)
{
  sub_10050F5CC((uint64_t)a1, a2, (uint64_t)&v4);
  return sub_1000D88A8(a1, v4);
}

void sub_10050F5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_1001F7F34((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10050F5CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  long long v6 = operator new(0x70uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *long long v6 = 0;
  v6[1] = 0;
  uint64_t v7 = sub_10050F65C((uint64_t)(v6 + 2), a2);
  *(unsigned char *)(a3 + 16) = 1;
  uint64_t result = sub_1000D8908(v7);
  v6[1] = result;
  return result;
}

void sub_10050F640(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_1001F7F34(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10050F65C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = a1 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_1000DC48C((unsigned char *)v4, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(v4 + 16) = *(void *)(a2 + 32);
    *(_OWORD *)uint64_t v4 = v5;
  }
  long long v6 = *(_OWORD *)(a2 + 40);
  long long v7 = *(_OWORD *)(a2 + 56);
  long long v8 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 40) = v6;
  return a1;
}

void *sub_10050F6E0(void *a1, uint64_t a2)
{
  sub_10050F738((uint64_t)a1, a2, (uint64_t)&v4);
  return sub_1000D88A8(a1, v4);
}

void sub_10050F71C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10050F738@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  long long v6 = operator new(0x78uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *long long v6 = 0;
  v6[1] = 0;
  long long v7 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v6 + 5) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v6 + 6) = v7;
  v6[14] = *(void *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 1) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 2) = v8;
  long long v9 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v6 + 3) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v6 + 4) = v9;
  *(unsigned char *)(a3 + 16) = 1;
  uint64_t result = sub_1000D8908((uint64_t)(v6 + 2));
  v6[1] = result;
  return result;
}

void sub_10050F7B0(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

char *sub_10050F7C8(void *a1, unint64_t a2)
{
  if (a2 >= 0x1642C8590B21643) {
    sub_1001D7FD4();
  }
  uint64_t result = (char *)sub_10050F820((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[184 * v4];
  return result;
}

void *sub_10050F820(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1642C8590B21643) {
    sub_1001D7FA0();
  }
  return operator new(184 * a2);
}

void sub_10050F86C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    if (*(unsigned char *)(a1 + 80))
    {
      uint64_t v2 = *(void **)(a1 + 56);
      if (v2)
      {
        *(void *)(a1 + 64) = v2;
        operator delete(v2);
      }
    }
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    *(unsigned char *)(a1 + 88) = 0;
  }
}

void sub_10050F8C0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(unsigned char *)(a1 + 32))
    {
      sub_10050F960((unsigned char *)a1, a2);
    }
  }
  else if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(void **)(a1 + 8);
    if (v3)
    {
      *(void *)(a1 + 16) = v3;
      operator delete(v3);
    }
    *(unsigned char *)(a1 + 32) = 0;
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 8) = 0;
    sub_10010F834((void *)(a1 + 8), *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
    *(unsigned char *)(a1 + 32) = 1;
  }
}

unsigned char *sub_10050F960(unsigned char *a1, uint64_t a2)
{
  *a1 = *(unsigned char *)a2;
  if (a1 != (unsigned char *)a2) {
    sub_1000FB43C(a1 + 8, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  return a1;
}

uint64_t sub_10050F9AC(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 13) = *(void *)((char *)a2 + 13);
  *(_OWORD *)a1 = v4;
  if (*((char *)a2 + 47) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 24), *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v5;
  }
  sub_10050FA44(a1 + 48, (uint64_t)(a2 + 3));
  return a1;
}

void sub_10050FA28(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10050FA44(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
  sub_10050FA90((void *)a1, a2);
  return a1;
}

void sub_10050FA74(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 32)) {
    sub_101A63DF4(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10050FA90(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 32))
  {
    uint64_t v2 = result;
    *(unsigned char *)uint64_t result = *(unsigned char *)a2;
    result[2] = 0;
    result[3] = 0;
    result[1] = 0;
    uint64_t result = sub_10010F834(result + 1, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
    *((unsigned char *)v2 + 32) = 1;
  }
  return result;
}

char *sub_10050FAE4(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  long long v7 = result;
  uint64_t v8 = *((void *)result + 2);
  long long v9 = *(char **)result;
  if (0x6F96F96F96F96F97 * ((v8 - *(void *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *long long v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x1A41A41A41A41A4) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0x6F96F96F96F96F97 * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0xD20D20D20D20D2) {
      unint64_t v12 = 0x1A41A41A41A41A4;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = sub_10050FC40(v7, v12);
    long long v14 = (char *)v7[1];
    uint64_t v13 = (void **)(v7 + 1);
    long long v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      long long v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v13 = (void **)(result + 8);
  long long v15 = (unsigned char *)*((void *)result + 1);
  if (0x6F96F96F96F96F97 * ((v15 - v9) >> 2) >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    long long v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    long long v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v13 = &v9[v17];
  return result;
}

char *sub_10050FC40(void *a1, unint64_t a2)
{
  if (a2 >= 0x1A41A41A41A41A5) {
    sub_1001D7FD4();
  }
  uint64_t result = (char *)sub_10050FC98((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[156 * v4];
  return result;
}

void *sub_10050FC98(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1A41A41A41A41A5) {
    sub_1001D7FA0();
  }
  return operator new(156 * a2);
}

void *sub_10050FCE4(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    uint64_t result = sub_10050FC40(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10050FD44(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10050FD60(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 144))
  {
    if (*(char *)(a1 + 143) < 0) {
      operator delete(*(void **)(a1 + 120));
    }
    if (*(char *)(a1 + 39) < 0) {
      operator delete(*(void **)(a1 + 16));
    }
    *(unsigned char *)(a1 + 144) = 0;
  }
}

uint64_t sub_10050FDAC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  if (*((char *)a2 + 39) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 16), (void *)a2[2], a2[3]);
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 1);
    *(void *)(a1 + 32) = a2[4];
    *(_OWORD *)(a1 + 16) = v5;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  long long v6 = *(_OWORD *)(a2 + 7);
  long long v7 = *(_OWORD *)(a2 + 9);
  long long v8 = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(a1 + 100) = *(_OWORD *)((char *)a2 + 100);
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  long long v9 = (unsigned char *)(a1 + 120);
  if (*((char *)a2 + 143) < 0)
  {
    sub_1000DC48C(v9, (void *)a2[15], a2[16]);
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 15);
    *(void *)(a1 + 136) = a2[17];
    *(_OWORD *)long long v9 = v10;
  }
  return a1;
}

void sub_10050FE70(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void **sub_10050FE8C(void **a1)
{
  sub_1000D7D80((uint64_t)(a1 + 3));
  uint64_t v3 = a1;
  sub_1000D7F04(&v3);
  return a1;
}

void sub_10050FECC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B81C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10050FEEC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B81C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10050FF40(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B8218;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10050FF60(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B8218;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10050FFB4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B8268;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10050FFD4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B8268;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100510028(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_100510050(void *a1)
{
  *a1 = off_1022B82B8;
  sub_1000D80C4(a1 + 1);
  return a1;
}

void sub_100510094(void *a1)
{
  *a1 = off_1022B82B8;
  sub_1000D80C4(a1 + 1);

  operator delete();
}

BOOL sub_1005100F8(void *a1, double *a2)
{
  uint64_t v2 = a1[2];
  if (a1[3] == v2) {
    return 0;
  }
  unint64_t v3 = a1[5];
  uint64_t v4 = (void *)(v2 + 8 * (v3 >> 8));
  long long v5 = (double *)(*v4 + 16 * v3);
  uint64_t v6 = *(void *)(v2 + (((a1[6] + v3) >> 5) & 0x7FFFFFFFFFFFFF8))
     + 16 * (*((unsigned char *)a1 + 48) + v3);
  if (v5 == (double *)v6) {
    return 0;
  }
  double v7 = 1.79769313e308;
  double v8 = -1.79769313e308;
  do
  {
    double v9 = v5[1];
    if (v9 >= *a2 + -30.0 && v9 <= *a2)
    {
      if (*v5 > v8) {
        double v8 = *v5;
      }
      if (*v5 < v7) {
        double v7 = *v5;
      }
    }
    v5 += 2;
    if ((double *)((char *)v5 - *v4) == (double *)4096)
    {
      uint64_t v11 = (double *)v4[1];
      ++v4;
      long long v5 = v11;
    }
  }
  while (v5 != (double *)v6);
  return v8 != -1.79769313e308 && v7 != 1.79769313e308 && vabdd_f64(v8, v7) < 2.5;
}

void sub_1005101CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B82F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1005101EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B82F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100510240(uint64_t a1)
{
  return sub_1000D816C((void *)(a1 + 24));
}

void *sub_10051024C@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x58uLL);
  uint64_t result = sub_1005102A8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100510294(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1005102A8(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B8340;
  sub_1000DBFAC((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1005102F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100510304(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B8340;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100510324(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B8340;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100510378(uint64_t a1)
{
  return sub_1000D801C((void *)(a1 + 32));
}

void sub_100510384(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B8390;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1005103A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B8390;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1005103F8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void sub_100510450(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

unsigned char *sub_100510520(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  sub_10050EE58(*a1, a2);
  *(void *)(v3 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(v3 + 48) = *(unsigned char *)(a2 + 48);
  return sub_1000E23EC((unsigned char *)(v3 + 56), a2 + 56);
}

void sub_100510568(_Unwind_Exception *a1)
{
  sub_1000DB114(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_10051057C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  sub_1000DA6E8((void *)v3, *(void *)a2, *(void *)(a2 + 8), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(a2 + 24);
  return sub_1000E23EC((unsigned char *)(v3 + 32), a2 + 32);
}

void sub_1005105F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000D7F78((void ***)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_100510608(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  *(unsigned char *)(v3 + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t v3 = v4;
  if (*((char *)a2 + 39) < 0)
  {
    sub_1000DC48C((unsigned char *)(v3 + 16), (void *)a2[2], a2[3]);
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 1);
    *(void *)(v3 + 32) = a2[4];
    *(_OWORD *)(v3 + 16) = v5;
  }
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a2 + 5);
  long long v6 = *(_OWORD *)(a2 + 7);
  long long v7 = *(_OWORD *)(a2 + 9);
  long long v8 = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(v3 + 100) = *(_OWORD *)((char *)a2 + 100);
  *(_OWORD *)(v3 + 88) = v8;
  *(_OWORD *)(v3 + 72) = v7;
  *(_OWORD *)(v3 + 56) = v6;
  uint64_t result = (unsigned char *)(v3 + 120);
  if (*((char *)a2 + 143) < 0) {
    return sub_1000DC48C(result, (void *)a2[15], a2[16]);
  }
  long long v10 = *(_OWORD *)(a2 + 15);
  *(void *)(v3 + 136) = a2[17];
  *(_OWORD *)uint64_t result = v10;
  return result;
}

void sub_1005106C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1005106E4(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v7 = sub_1000D8908((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            if (sub_100B39178(v13 + 2, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  sub_100510950(a1, v8, a3, (uint64_t)&v24);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100100330(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  size_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    void *v24 = *v21;
    *size_t v21 = v24;
  }
  else
  {
    void *v24 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v24)
    {
      unint64_t v22 = *(void *)(*v24 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9) {
          v22 %= v9;
        }
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24;
    }
  }
  uint64_t v13 = v24;
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_10051092C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_1001F7F34((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100510950@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x70uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  uint64_t result = sub_10050F65C((uint64_t)(v8 + 2), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1005109C0(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_1001F7F34(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_1005109DC(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v7 = sub_1000D8908((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            if (sub_100B39178(v13 + 2, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v13 = operator new(0x78uLL);
  *uint64_t v13 = 0;
  v13[1] = v8;
  long long v15 = *(_OWORD *)(a3 + 80);
  *((_OWORD *)v13 + 5) = *(_OWORD *)(a3 + 64);
  *((_OWORD *)v13 + 6) = v15;
  v13[14] = *(void *)(a3 + 96);
  long long v16 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v13 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v13 + 2) = v16;
  long long v17 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v13 + 3) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v13 + 4) = v17;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_100100330(a1, v23);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *uint64_t v13 = *v25;
LABEL_38:
    *uint64_t v25 = v13;
    goto LABEL_39;
  }
  *uint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v24 + 8 * v3) = a1 + 16;
  if (*v13)
  {
    unint64_t v26 = *(void *)(*v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9) {
        v26 %= v9;
      }
    }
    else
    {
      v26 &= v9 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_100510C1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100510C30(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  long long v6 = (uint64_t **)sub_1001070AC((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_100510CC8((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000EDF90(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

unsigned char *sub_100510CC8@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 32;
  unint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_1000DC48C(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  *((_DWORD *)v6 + 14) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100510D54(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_1001F7F34(v3, v2);
  _Unwind_Resume(a1);
}

_OWORD *sub_100510D70(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  long long v6 = (void **)sub_1001070AC((uint64_t)a1, &v12, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x40uLL);
    long long v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *long long v9 = 0;
    *((_DWORD *)v7 + 14) = 0;
    sub_1000EDF90(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_100510EAC(void **a1)
{
}

void sub_100510EB4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_100510F6C(_Unwind_Exception *a1)
{
}

void sub_100510F84()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *uint64_t v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_10051102C(_Unwind_Exception *a1)
{
}

void sub_1005110F4(id a1)
{
  qword_10247B1D0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLContextMetricsServiceSilo"];
}

id sub_100511558(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onWifiNotification:a2 data:a3];
}

id sub_100511568(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onStatusNotification:a2 data:a3];
}

id sub_100511578(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4 = *a2;
  long long v5 = a3[7];
  v11[6] = a3[6];
  v11[7] = v5;
  long long v6 = a3[9];
  v11[8] = a3[8];
  v11[9] = v6;
  long long v7 = a3[3];
  void v11[2] = a3[2];
  v11[3] = v7;
  long long v8 = a3[5];
  v11[4] = a3[4];
  v11[5] = v8;
  long long v9 = a3[1];
  v11[0] = *a3;
  v11[1] = v9;
  return [a4 onMotionStateNotification:v4 data:v11];
}

id sub_100511B10(uint64_t a1, uint64_t a2, double a3)
{
  if (a2) {
    uint64_t v3 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v3 = (int)(a3 * 100.0);
  }
  return [*(id *)(*(void *)(a1 + 32) + 24) visitEvent:*(void *)(a1 + 40) withFamiliarityIndex:v3];
}

void sub_100511DC8(id a1, NSArray *a2, NSError *a3)
{
  uint64_t v3 = &qword_102419000;
  if (a3)
  {
    if (qword_102419550 != -1) {
      dispatch_once(&qword_102419550, &stru_1022B8498);
    }
    long long v5 = qword_102419558;
    if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289282;
      int v28 = 0;
      __int16 v29 = 2082;
      long long v30 = "";
      __int16 v31 = 1026;
      LODWORD(v32) = [(NSError *)a3 code];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#cms mode query motion\", \"error\":%{public}d}", buf, 0x18u);
    }
  }
  else
  {
    if (qword_102419550 != -1) {
      dispatch_once(&qword_102419550, &stru_1022B8498);
    }
    long long v7 = &qword_102419000;
    long long v8 = qword_102419558;
    if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 68289282;
      int v28 = 0;
      __int16 v29 = 2082;
      long long v30 = "";
      __int16 v31 = 1026;
      LODWORD(v32) = [(NSArray *)a2 count];
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cms mode query motion\", \"count\":%{public}d}", buf, 0x18u);
    }
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    id v9 = [(NSArray *)a2 countByEnumeratingWithState:&v23 objects:v39 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v24;
      do
      {
        for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v24 != v11) {
            objc_enumerationMutation(a2);
          }
          uint64_t v13 = *(void **)(*((void *)&v23 + 1) + 8 * i);
          if (v3[170] != -1) {
            dispatch_once(&qword_102419550, &stru_1022B8498);
          }
          unint64_t v14 = v7[171];
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            id v22 = [v13 startDate];
            id v15 = [v13 endDate];
            uint64_t v16 = v11;
            long long v17 = v7;
            float v18 = v3;
            float v19 = a2;
            unsigned int v20 = [v13 automotive];
            unsigned int v21 = [v13 confidence];
            *(_DWORD *)int buf = 68290050;
            int v28 = 0;
            __int16 v29 = 2082;
            long long v30 = "";
            __int16 v31 = 2114;
            id v32 = v22;
            __int16 v33 = 2114;
            id v34 = v15;
            __int16 v35 = 1026;
            unsigned int v36 = v20;
            a2 = v19;
            uint64_t v3 = v18;
            long long v7 = v17;
            uint64_t v11 = v16;
            __int16 v37 = 1026;
            unsigned int v38 = v21;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cms mode query motion\", \"start\":%{public, location:escape_only}@, \"end\":%{public, location:escape_only}@, \"automotive\":%{public}hhd, \"confidence\":%{public}d}", buf, 0x32u);
          }
        }
        id v10 = [(NSArray *)a2 countByEnumeratingWithState:&v23 objects:v39 count:16];
      }
      while (v10);
    }
  }
}

void sub_1005120F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100512174;
  v4[3] = &unk_10229FEB0;
  v4[4] = a3;
  v4[5] = a2;
  dispatch_async(v3, v4);
}

void sub_100512174(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022B84B8);
    }
    uint64_t v2 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = *(void **)(a1 + 32);
      *(_DWORD *)int buf = 68289282;
      int v31 = 0;
      __int16 v32 = 2082;
      __int16 v33 = "";
      __int16 v34 = 2114;
      id v35 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#cms mode query visit\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1022B84B8);
      }
    }
    uint64_t v4 = qword_102419398;
    if (os_signpost_enabled((os_log_t)qword_102419398))
    {
      long long v5 = *(void **)(a1 + 32);
      *(_DWORD *)int buf = 68289282;
      int v31 = 0;
      __int16 v32 = 2082;
      __int16 v33 = "";
      __int16 v34 = 2114;
      id v35 = v5;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#cms mode query visit", "{\"msg%{public}.0s\":\"#cms mode query visit\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  else
  {
    long long v6 = &qword_102419000;
    if (qword_102419550 != -1) {
      dispatch_once(&qword_102419550, &stru_1022B8498);
    }
    long long v7 = &qword_102419000;
    long long v8 = qword_102419558;
    if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v9 = [*(id *)(a1 + 40) count];
      *(_DWORD *)int buf = 68289282;
      int v31 = 0;
      __int16 v32 = 2082;
      __int16 v33 = "";
      __int16 v34 = 1026;
      LODWORD(v35) = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cms mode query visit\", \"count\":%{public}d}", buf, 0x18u);
    }
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id obj = *(id *)(a1 + 40);
    id v10 = [obj countByEnumeratingWithState:&v26 objects:v42 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v27;
      uint64_t v13 = CKSyncEngine_ptr;
      do
      {
        for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v27 != v12) {
            objc_enumerationMutation(obj);
          }
          id v15 = [objc_alloc((Class)v13[164]) initWithVisit:*(void *)(*((void *)&v26 + 1) + 8 * i)];
          if (v6[170] != -1) {
            dispatch_once(&qword_102419550, &stru_1022B8498);
          }
          uint64_t v16 = v7[171];
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            id v25 = [v15 arrivalDate];
            id v17 = [v15 departureDate];
            uint64_t v18 = v12;
            float v19 = v13;
            unsigned int v20 = v7;
            unsigned int v21 = v6;
            id v22 = [v15 detectionDate];
            unsigned int v23 = [v15 hasDepartureDate];
            *(_DWORD *)int buf = 68290050;
            int v31 = 0;
            __int16 v32 = 2082;
            __int16 v33 = "";
            __int16 v34 = 2114;
            id v35 = v25;
            __int16 v36 = 2114;
            id v37 = v17;
            __int16 v38 = 2114;
            id v39 = v22;
            long long v6 = v21;
            long long v7 = v20;
            uint64_t v13 = v19;
            uint64_t v12 = v18;
            __int16 v40 = 1026;
            int v41 = v23 ^ 1;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#cms mode query visit\", \"arrive\":%{public, location:escape_only}@, \"end\":%{public, location:escape_only}@, \"detect\":%{public, location:escape_only}@, \"entry\":%{public}hhd}", buf, 0x36u);
          }
        }
        id v11 = [obj countByEnumeratingWithState:&v26 objects:v42 count:16];
      }
      while (v11);
    }
  }
}

void sub_100512770(id a1, NSArray *a2, NSError *a3)
{
  if (a3)
  {
    if (qword_102419550 != -1) {
      dispatch_once(&qword_102419550, &stru_1022B8498);
    }
    uint64_t v4 = qword_102419558;
    if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 68289282;
      int v13 = 0;
      __int16 v14 = 2082;
      id v15 = "";
      __int16 v16 = 1026;
      LODWORD(v17) = [(NSError *)a3 code];
      long long v5 = "{\"msg%{public}.0s\":\"#cms mode init motion\", \"error\":%{public}d}";
LABEL_6:
      long long v6 = v4;
      uint32_t v7 = 24;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v12, v7);
    }
  }
  else
  {
    unsigned int v9 = [(NSArray *)a2 count];
    if (v9)
    {
      id v10 = [(NSArray *)a2 lastObject];
      if (qword_102419550 != -1) {
        dispatch_once(&qword_102419550, &stru_1022B8498);
      }
      uint64_t v11 = qword_102419558;
      if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = 68290306;
        int v13 = 0;
        __int16 v14 = 2082;
        id v15 = "";
        __int16 v16 = 2114;
        id v17 = [v10 startDate];
        __int16 v18 = 2114;
        id v19 = [v10 endDate];
        __int16 v20 = 1026;
        unsigned int v21 = [v10 automotive];
        __int16 v22 = 1026;
        unsigned int v23 = [v10 confidence];
        __int16 v24 = 1026;
        unsigned int v25 = v9;
        long long v5 = "{\"msg%{public}.0s\":\"#cms mode init motion (skip)\", \"start\":%{public, location:escape_only}@, \"end\":"
             "%{public, location:escape_only}@, \"automotive\":%{public}hhd, \"confidence\":%{public}d, \"count\":%{public}d}";
        long long v6 = v11;
        uint32_t v7 = 56;
        goto LABEL_12;
      }
    }
    else
    {
      if (qword_102419550 != -1) {
        dispatch_once(&qword_102419550, &stru_1022B8498);
      }
      uint64_t v4 = qword_102419558;
      if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = 68289282;
        int v13 = 0;
        __int16 v14 = 2082;
        id v15 = "";
        __int16 v16 = 1026;
        LODWORD(v17) = 0;
        long long v5 = "{\"msg%{public}.0s\":\"#cms mode init motion\", \"count\":%{public}d}";
        goto LABEL_6;
      }
    }
  }
}

void sub_1005129FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(NSObject **)(v3 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100512A7C;
  block[3] = &unk_10229FF28;
  block[4] = a3;
  block[5] = a2;
  block[6] = v3;
  dispatch_async(v4, block);
}

void sub_100512A7C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022B84B8);
    }
    uint64_t v2 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      *(_DWORD *)int buf = 68289282;
      int v13 = 0;
      __int16 v14 = 2082;
      id v15 = "";
      __int16 v16 = 2114;
      v17[0] = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#cms mode init visit\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1022B84B8);
      }
    }
    uint64_t v4 = qword_102419398;
    if (os_signpost_enabled((os_log_t)qword_102419398))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)int buf = 68289282;
      int v13 = 0;
      __int16 v14 = 2082;
      id v15 = "";
      __int16 v16 = 2114;
      v17[0] = v5;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#cms mode init visit", "{\"msg%{public}.0s\":\"#cms mode init visit\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  else
  {
    id v6 = [objc_alloc((Class)CLVisit) initWithVisit:[*(id *)(a1 + 40) firstObject]];
    if (qword_102419550 != -1) {
      dispatch_once(&qword_102419550, &stru_1022B8498);
    }
    uint32_t v7 = qword_102419558;
    if (os_log_type_enabled((os_log_t)qword_102419558, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 68289539;
      int v13 = 0;
      __int16 v14 = 2082;
      id v15 = "";
      __int16 v16 = 1026;
      LODWORD(v17[0]) = [v6 hasDepartureDate] ^ 1;
      WORD2(v17[0]) = 2113;
      *(void *)((char *)v17 + 6) = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cms mode init visit\", \"entry\":%{public}hhd, \"visit\":%{private, location:escape_only}@}", buf, 0x22u);
    }
    unsigned int v8 = [v6 hasDepartureDate];
    uint64_t v9 = *(void *)(a1 + 48);
    if (v8)
    {
      [*(id *)(v9 + 24) visitEvent:v6 withFamiliarityIndex:0];
    }
    else
    {
      id v10 = *(void **)(v9 + 64);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      void v11[2] = sub_100512D7C;
      v11[3] = &unk_1022B8418;
      v11[4] = v9;
      v11[5] = v6;
      [v10 getFamiliarityIndexForVisit:v6 withReply:v11];
    }
  }
}

id sub_100512D7C(uint64_t a1, uint64_t a2, double a3)
{
  if (a2) {
    uint64_t v3 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v3 = (int)(a3 * 100.0);
  }
  return [*(id *)(*(void *)(a1 + 32) + 24) visitEvent:*(void *)(a1 + 40) withFamiliarityIndex:v3];
}

void sub_100512EB0(id a1)
{
  qword_102419558 = (uint64_t)os_log_create("com.apple.locationd.Core", "Routine");
}

void sub_100512EE0(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

uint64_t sub_100512F10(uint64_t result)
{
  byte_10247B1E0 = result;
  return result;
}

void sub_100512F1C(void *a1)
{
  *a1 = off_1022B84E8;
  operator new();
}

uint64_t sub_100513078(uint64_t a1)
{
  *(void *)a1 = off_1022B84E8;
  pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 8));
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void **)(v2 + 104);
  if (v3)
  {
    free(v3);
    uint64_t v2 = *(void *)(a1 + 8);
    *(void *)(v2 + 104) = 0;
  }
  [*(id *)(v2 + 64) assertInside];

  if (*(void *)(a1 + 8)) {
    operator delete();
  }
  return a1;
}

void sub_100513110(uint64_t a1)
{
  sub_100513078(a1);

  operator delete();
}

BOOL sub_100513148(uint64_t a1, int a2)
{
  return *(_DWORD *)(*(void *)(a1 + 8) + 72) == a2;
}

BOOL sub_100513188(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 8) + 64) assertInside];
  pthread_t v2 = *(pthread_t *)(*(void *)(a1 + 8) + 80);
  return v2 != pthread_self();
}

uint64_t sub_1005131C8(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

pthread_cond_t **sub_1005131D0(pthread_cond_t **a1)
{
  pthread_t v2 = (pthread_cond_t *)malloc_type_malloc(0x30uLL, 0x1000040EED21634uLL);
  *a1 = v2;
  pthread_cond_init(v2, 0);
  return a1;
}

pthread_cond_t **sub_100513218(pthread_cond_t **a1)
{
  return a1;
}

void sub_100513254(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100513284(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 6152) = 0;
  *(void *)(a1 + 12304) = 0;
  *(void *)(a1 + 12344) = 0;
  *(void *)(a1 + 12336) = 0;
  *(void *)(a1 + 12392) = 0;
  *(void *)(a1 + 12384) = 0;
  *(unsigned char *)(a1 + 12408) = 1;
}

void sub_1005132D0(uint64_t a1)
{
  if (*(void *)(a1 + 12344) <= *(void *)(a1 + 12392)) {
    unint64_t v2 = *(void *)(a1 + 12392);
  }
  else {
    unint64_t v2 = *(void *)(a1 + 12344);
  }
  uint64_t v3 = (unsigned char *)(a1 + 12408);
  if (*(unsigned char *)(a1 + 12408)) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = 5;
  }
  if (v2 > v4)
  {
    do
      sub_100513358((void *)a1, v4++);
    while (v2 != v4);
  }
  *(void *)(a1 + 12344) = 0;
  *(void *)(a1 + 12336) = 0;
  *(void *)(a1 + 12392) = 0;
  *(void *)(a1 + 12384) = 0;
  *uint64_t v3 = 1;
}

void sub_100513358(void *a1, signed int a2)
{
  BOOL v4 = 0;
  float v26 = 0.0;
  float v27 = 0.0;
  unint64_t v5 = (unint64_t)(a1[1542] + a2) % a1[1544];
  uint64_t v6 = a1[1539];
  uint32_t v7 = (float *)(v6 + 48 * v5);
  float v8 = v7[2];
  float v9 = v7[9];
  if (v8 > v7[3] && v7[8] > 8.0 && v9 > 12.0 && v7[10] > 12.0) {
    BOOL v4 = (float)(*(float *)(v6 + 48 * v5 + 28) * 0.013486) < 0.001;
  }
  if (v4
    && (float v13 = *(float *)(v6 + 48 * v5 + 20),
        double v14 = (float)(sqrtf(v8 * 0.013486) * 980.0) / ((float)(v13 * v13) * 3.14159265 * 3.14159265),
        v14 > 0.00800000038)
    && (uint64_t v15 = sub_1005145E4((uint64_t)a1, (uint64_t)(a1 + 1539), a2), (int)v15 >= 2))
  {
    int v25 = 1;
    uint64_t v24 = *(void *)v7;
    unint64_t v16 = (unint64_t)(a1[1548] + a2) % a1[1550];
    uint64_t v17 = a1[1545];
    if (*(float *)(v17 + 48 * v16 + 8) > *(float *)(v17 + 48 * v16 + 12)
      && (float v18 = *(float *)(v17 + 48 * v16 + 36), v18 > 4.0)
      && (int)sub_1005145E4(v15, (uint64_t)(a1 + 1545), a2) >= 2
      && (float v19 = log10f(v9) + -0.565,
          float v20 = log10f(v18) + -0.325,
          (float)((float)((float)((float)(v19 * -7.8237) * v20) + (float)((float)(v19 * 9.8052) * v19))
                + (float)((float)(v20 * 4.529) * v20)) >= 3.36))
    {
      float v23 = v14;
      float v26 = v23;
      float v27 = v13;
    }
    else
    {
      int v25 = -2;
    }
  }
  else
  {
    if ((float)(*(float *)(v6 + 48 * v5 + 16) * 0.013486) <= 0.0001) {
      int v21 = 0;
    }
    else {
      int v21 = -1;
    }
    int v25 = v21;
    uint64_t v24 = *(void *)v7;
  }
  __int16 v22 = (void (*)(uint64_t *, void))a1[1552];
  if (v22) {
    v22(&v24, a1[1553]);
  }
}

void sub_1005135BC(unsigned __int16 *a1, uint64_t *a2, double a3)
{
  if (a3 > 0.0)
  {
    uint64_t v13 = v6;
    uint64_t v14 = v5;
    uint64_t v15 = v3;
    uint64_t v16 = v4;
    sub_10051362C(a1, a3);
    uint64_t v10 = *a2;
    *(double *)&long long v11 = a3;
    *((void *)&v11 + 1) = v10;
    int v12 = *((_DWORD *)a2 + 2);
    sub_1001886E4(a1, &v11);
    sub_100513A6C((uint64_t)a1, a3);
  }
}

void sub_10051362C(unsigned __int16 *a1, double a2)
{
  if (a1[1])
  {
    uint64_t v4 = a1 + 4;
    unint64_t v5 = a1[1] + (unint64_t)*a1 - 1;
    unint64_t v6 = *((unsigned int *)a1 + 1);
    if (v5 < v6) {
      unint64_t v6 = 0;
    }
    if (*(double *)&v4[12 * (v5 - v6)] + 1.0 < a2)
    {
      if (qword_102419350 != -1) {
        dispatch_once(&qword_102419350, &stru_1022B85C0);
      }
      uint32_t v7 = off_102419358;
      if (os_log_type_enabled((os_log_t)off_102419358, OS_LOG_TYPE_INFO))
      {
        unint64_t v8 = *a1 + (unint64_t)a1[1] - 1;
        unint64_t v9 = *((unsigned int *)a1 + 1);
        if (v8 < v9) {
          unint64_t v9 = 0;
        }
        float v10 = a2 - *(double *)&v4[12 * (v8 - v9)];
        *(_DWORD *)int buf = 134217984;
        double v20 = v10;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Resetting detector, %.1f seconds without an accel sample", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_25;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419350 == -1)
      {
LABEL_28:
        float v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CMTremorDetection::checkForGap(CFAbsoluteTime)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
LABEL_25:
        sub_1005132D0((uint64_t)a1);
        *(_DWORD *)a1 = 0;
        *((_DWORD *)a1 + 1538) = 0;
        *((void *)a1 + 1538) = 0;
        *((void *)a1 + 1543) = 0;
        *((void *)a1 + 1542) = 0;
        *((void *)a1 + 1549) = 0;
        *((void *)a1 + 1548) = 0;
        *((unsigned char *)a1 + 12408) = 1;
        return;
      }
LABEL_30:
      dispatch_once(&qword_102419350, &stru_1022B85C0);
      goto LABEL_28;
    }
  }
  if (a1[3077])
  {
    long long v11 = a1 + 3080;
    unint64_t v12 = a1[3077] + (unint64_t)a1[3076] - 1;
    unint64_t v13 = *((unsigned int *)a1 + 1539);
    if (v12 < v13) {
      unint64_t v13 = 0;
    }
    if (*(double *)&v11[12 * (v12 - v13)] + 1.0 < a2)
    {
      if (qword_102419350 != -1) {
        dispatch_once(&qword_102419350, &stru_1022B85C0);
      }
      uint64_t v14 = off_102419358;
      if (os_log_type_enabled((os_log_t)off_102419358, OS_LOG_TYPE_INFO))
      {
        unint64_t v15 = a1[3076] + (unint64_t)a1[3077] - 1;
        unint64_t v16 = *((unsigned int *)a1 + 1539);
        if (v15 < v16) {
          unint64_t v16 = 0;
        }
        float v17 = a2 - *(double *)&v11[12 * (v15 - v16)];
        *(_DWORD *)int buf = 134217984;
        double v20 = v17;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Resetting detector, %.1f seconds without a gyro sample", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_25;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419350 == -1) {
        goto LABEL_28;
      }
      goto LABEL_30;
    }
  }
}

void sub_100513A6C(uint64_t a1, double a2)
{
  if (!*(void *)(a1 + 12304)) {
    *(void *)(a1 + 12304) = 1280 * (1000 * (uint64_t)a2 / 1280) + 1280;
  }
  if (*(_DWORD *)(a1 + 4) == *(unsigned __int16 *)(a1 + 2))
  {
    uint64_t v3 = (double *)sub_100514198((unsigned __int16 *)a1, 0x80uLL);
    uint64_t v4 = *(void *)(a1 + 12304);
    if (v4 >= 1)
    {
      double v5 = (double)v4 / 1000.0;
      if (*v3 >= v5)
      {
        if (*v3 < (double)(v4 + 640) / 1000.0)
        {
          sub_100513B78(a1, v5);
          uint64_t v4 = *(void *)(a1 + 12304);
        }
        *(void *)(a1 + 12304) = v4 + 1280;
      }
    }
  }
}

unsigned __int16 *sub_100513B30(unsigned __int16 *result, uint64_t *a2, double a3)
{
  if (a3 > 0.0)
  {
    uint64_t v8 = v3;
    uint64_t v9 = v4;
    uint64_t v5 = *a2;
    *(double *)&long long v6 = a3;
    *((void *)&v6 + 1) = v5;
    int v7 = *((_DWORD *)a2 + 2);
    return sub_1001886E4(result + 3076, &v6);
  }
  return result;
}

void sub_100513B78(uint64_t a1, double a2)
{
  if (*(_DWORD *)(a1 + 6156) == *(unsigned __int16 *)(a1 + 6154)
    && *(_DWORD *)(a1 + 4) == *(unsigned __int16 *)(a1 + 2))
  {
    sub_100513CF4(a1, (unsigned __int16 *)a1, 273, (uint64_t)v6, a2);
    sub_100513C84((void *)(a1 + 12312), v6);
    sub_100513CF4(a1, (unsigned __int16 *)(a1 + 6152), 1, (uint64_t)v6, a2);
    sub_100513C84((void *)(a1 + 12360), v6);
    unint64_t v4 = *(void *)(a1 + 12344);
    if (v4 <= *(void *)(a1 + 12392)) {
      unint64_t v4 = *(void *)(a1 + 12392);
    }
    if (v4 >= 9)
    {
      if (*(unsigned char *)(a1 + 12408))
      {
        for (signed int i = 0; i != 4; ++i)
          sub_100513358((void *)a1, i);
        *(unsigned char *)(a1 + 12408) = 0;
      }
      sub_100513358((void *)a1, 4);
    }
  }
}

uint64_t sub_100513C84(void *a1, long long *a2)
{
  unint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v3 = (_OWORD *)(*a1 + 48 * ((a1[3] + a1[4]) % v2));
    long long v4 = *a2;
    long long v5 = a2[1];
    *(_OWORD *)((char *)v3 + 28) = *(long long *)((char *)a2 + 28);
    *uint64_t v3 = v4;
    v3[1] = v5;
    unint64_t v6 = a1[4];
    if (v6 == a1[5])
    {
      unint64_t v2 = 0;
      a1[3] = (a1[3] + 1) % v6;
    }
    else
    {
      a1[4] = v6 + 1;
      return 1;
    }
  }
  return v2;
}

void sub_100513CF4(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  sub_10051448C(a1, v52, a2, a3);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(double *)a4 = a5;
  int v7 = dword_10247B204;
  uint64_t v8 = dword_10247B204;
  int v9 = dword_10247B204 + 1;
  if (dword_10247B204 + 1 < dword_10247B208)
  {
    float v10 = (float *)v52 + dword_10247B204 + 1;
    do
    {
      float v11 = *v10++;
      if (v11 >= *((float *)v52 + v7)) {
        int v7 = v9;
      }
      ++v9;
    }
    while (dword_10247B208 != v9);
  }
  if (v7 >= 0) {
    int v12 = v7;
  }
  else {
    int v12 = v7 + 1;
  }
  double v13 = (double)(v12 >> 1);
  int v14 = (int)(v13 + -0.001);
  if (v14 <= 1) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = v14;
  }
  double v16 = v13 + 0.001;
  do
  {
    if ((int)v15 <= (int)v16 + 1)
    {
      int v17 = 0;
      uint64_t v18 = v15;
      do
      {
        if (!v17 || *((float *)v52 + v18) >= *((float *)v52 + v17)) {
          int v17 = v18;
        }
        BOOL v23 = v18++ <= (int)v16;
      }
      while (v23);
    }
    else
    {
      int v17 = 0;
    }
  }
  while (!v17);
  uint64_t v19 = (2 * v7) | 1;
  float v20 = *((float *)v52 + v19);
  float v21 = *((float *)v52 + 2 * v7);
  uint64_t v22 = 2 * v7 - 1;
  if (v20 <= v21 || v21 <= *((float *)v52 + v22))
  {
    BOOL v23 = *((float *)v52 + v22) <= v21 || v21 <= v20;
    if (v23) {
      LODWORD(v19) = 2 * v7;
    }
    else {
      LODWORD(v19) = 2 * v7 - 1;
    }
  }
  int v24 = 3 * v7;
  float v25 = *((float *)v52 + 3 * v7 + 1);
  uint64_t v26 = 3 * v7;
  float v27 = *((float *)v52 + v26);
  uint64_t v28 = v26 - 1;
  if (v25 <= v27 || v27 <= *((float *)v52 + v28))
  {
    float v29 = *((float *)v52 + v28);
    if (v27 > v25 && v29 > v27)
    {
      uint64_t v31 = v26 - 2;
      if (*((float *)v52 + v31) <= v29) {
        int v24 = v28;
      }
      else {
        int v24 = v31;
      }
    }
  }
  else if (*((float *)v52 + v26 + 2) <= v25)
  {
    int v24 = 3 * v7 + 1;
  }
  else
  {
    int v24 = v26 + 2;
  }
  uint64_t v32 = dword_10247B20C;
  uint64_t v33 = dword_10247B210;
  float v34 = *(float *)&dword_10247B214;
  if (dword_10247B20C >= dword_10247B210)
  {
    int v36 = 0;
    int v35 = 0;
    float v43 = 0.0;
    float v42 = 0.0;
  }
  else
  {
    int v35 = 0;
    int v36 = 0;
    int v37 = -v24;
    int v38 = -(int)v19;
    float v39 = 0.0;
    float v40 = 0.0;
    float v41 = 0.0;
    float v42 = 0.0;
    float v43 = 0.0;
    do
    {
      unsigned int v44 = v32 - v7;
      if ((int)v32 - v7 < 0) {
        unsigned int v44 = v7 - v32;
      }
      if (v44 >= 2)
      {
        unsigned int v45 = v38 + v32;
        if (v38 + (int)v32 < 0) {
          unsigned int v45 = -v45;
        }
        if (v45 >= 2)
        {
          unsigned int v46 = v37 + v32;
          if (v37 + (int)v32 < 0) {
            unsigned int v46 = -v46;
          }
          if (v46 >= 2)
          {
            float v47 = *((float *)v52 + v32);
            if (v47 >= v41)
            {
              *(float *)(a4 + 12) = v47;
              float v41 = v47;
            }
            float v43 = v43 + v47;
            ++v36;
            if (v32 < v8)
            {
              if (v47 >= v40)
              {
                *(float *)(a4 + 28) = v47;
                float v40 = v47;
              }
              float v42 = v42 + v47;
              ++v35;
            }
          }
        }
      }
      float v48 = *((float *)v52 + v32);
      if (v48 > v39)
      {
        *(float *)(a4 + 16) = v48;
        *(float *)(a4 + 24) = v34 * (float)(int)v32;
        float v39 = v48;
      }
      ++v32;
    }
    while (v33 != v32);
  }
  float v49 = *((float *)v52 + v7);
  *(float *)(a4 + 8) = v49;
  *(float *)(a4 + 20) = v34 * (float)v7;
  float v50 = v49 / (float)(v43 / (float)v36);
  float v51 = *((float *)v52 + v17);
  *(float *)(a4 + 32) = v50;
  *(float *)(a4 + 36) = v49 / (float)(v42 / (float)v35);
  *(float *)(a4 + 40) = v49 / v51;
}

void sub_100514030(uint64_t a1, _DWORD *a2, unsigned __int16 *a3, int a4)
{
  *(void *)double v16 = 0x10000000000;
  sub_1014F0838(v15);
  int v7 = 0;
  unint64_t v8 = 0;
  for (unint64_t i = 0; i != 256; ++i)
  {
    if (a4 == 256)
    {
      int v10 = *(_DWORD *)(sub_100514198(a3, i) + 16);
    }
    else if (a4 == 16)
    {
      int v10 = *(_DWORD *)(sub_100514198(a3, i) + 12);
    }
    else
    {
      int v10 = 0;
      if (a4 == 1) {
        int v10 = *(_DWORD *)(sub_100514198(a3, i) + 8);
      }
    }
    unint64_t v11 = v8 + (unsigned __int16)v7;
    if (v11 >= 0x100) {
      uint64_t v12 = -256;
    }
    else {
      uint64_t v12 = 0;
    }
    *(_DWORD *)&v16[2 * v12 + 4 + 2 * v11] = v10;
    if (v8 > 0xFF)
    {
      if ((unsigned __int16)v7 >= 0xFFu) {
        int v13 = -256;
      }
      else {
        int v13 = 0;
      }
      int v14 = v7 + v13;
      int v7 = v14 + 1;
      v16[0] = v14 + 1;
    }
    else
    {
      v16[1] = ++v8;
    }
  }
  sub_100514398(v16);
  sub_1014F083C((uint64_t)v15, a2, v16);
}

uint64_t sub_100514198(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B8600);
    }
    int v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)int buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B8600);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const T &CMQueue<CMTremorDetection::SensorSample>::operator[](const size_t) const [T = CMTremorDetection::SensorSample]", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[12 * (v4 - v5) + 4];
}

float *sub_100514398(unsigned __int16 *a1)
{
  unint64_t v2 = 0;
  unint64_t v3 = 255;
  do
  {
    float v4 = (float)(cosf((float)(int)v2 * 0.02464) * -0.46) + 0.54;
    float v5 = v4 * *(float *)sub_1004182C4(a1, v2);
    *(float *)sub_1004182C4(a1, v2) = v5;
    float v6 = v4 * *(float *)sub_1004182C4(a1, v3);
    *(float *)sub_1004182C4(a1, v3) = v6;
    ++v2;
    --v3;
  }
  while (v2 != 128);
  float v7 = *(float *)sub_1004182C4(a1, 0x80uLL) * 0.99997;
  uint64_t result = (float *)sub_1004182C4(a1, 0x80uLL);
  float *result = v7;
  return result;
}

float32x4_t sub_10051448C(uint64_t a1, _OWORD *a2, unsigned __int16 *a3, __int16 a4)
{
  result.i64[0] = 0;
  a2[30] = 0u;
  a2[31] = 0u;
  a2[28] = 0u;
  a2[29] = 0u;
  a2[26] = 0u;
  a2[27] = 0u;
  a2[24] = 0u;
  a2[25] = 0u;
  a2[22] = 0u;
  a2[23] = 0u;
  a2[20] = 0u;
  a2[21] = 0u;
  a2[18] = 0u;
  a2[19] = 0u;
  a2[16] = 0u;
  a2[17] = 0u;
  a2[14] = 0u;
  a2[15] = 0u;
  a2[12] = 0u;
  a2[13] = 0u;
  a2[10] = 0u;
  a2[11] = 0u;
  a2[8] = 0u;
  a2[9] = 0u;
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  if (a4)
  {
    sub_100514030(a1, v11, a3, 1);
    for (unint64_t i = 0; i != 512; i += 16)
    {
      float32x4_t result = vmlaq_f32((float32x4_t)a2[i / 0x10], *(float32x4_t *)&v11[i / 4], *(float32x4_t *)&v11[i / 4]);
      a2[i / 0x10] = result;
    }
  }
  if ((a4 & 0x10) != 0)
  {
    sub_100514030(a1, v11, a3, 16);
    for (unint64_t j = 0; j != 512; j += 16)
    {
      float32x4_t result = vmlaq_f32((float32x4_t)a2[j / 0x10], *(float32x4_t *)&v11[j / 4], *(float32x4_t *)&v11[j / 4]);
      a2[j / 0x10] = result;
    }
  }
  if ((a4 & 0x100) != 0)
  {
    sub_100514030(a1, v11, a3, 256);
    for (unint64_t k = 0; k != 512; k += 16)
    {
      float32x4_t result = vmlaq_f32((float32x4_t)a2[k / 0x10], *(float32x4_t *)&v11[k / 4], *(float32x4_t *)&v11[k / 4]);
      a2[k / 0x10] = result;
    }
  }
  return result;
}

uint64_t sub_1005145E4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3 = a3 - 4;
  int v4 = *(_DWORD *)(a2 + 32);
  if (v4 - 9 < (int)(a3 - 4)) {
    int v3 = v4 - 9;
  }
  uint64_t v5 = v3 & ~(v3 >> 31);
  int v6 = v4 - 1;
  if (v6 >= (int)v5 + 8) {
    int v7 = v5 + 8;
  }
  else {
    int v7 = v6;
  }
  if ((int)v5 > v7) {
    return 1;
  }
  uint64_t v9 = *(void *)(a2 + 24);
  unint64_t v10 = *(void *)(a2 + 40);
  float v11 = *(float *)(*(void *)a2 + 48 * ((v9 + (int)a3) % v10) + 24);
  uint64_t v12 = (v7 + 1);
  unint64_t v13 = a3 - (unint64_t)v5;
  unint64_t v14 = v9 + v5;
  uint64_t v15 = v5 - v12;
  uint64_t result = 1;
  do
  {
    if (v13)
    {
      if (vabds_f32(*(float *)(*(void *)a2 + 48 * (v14 % v10) + 24), v11) < 0.5) {
        uint64_t result = (result + 1);
      }
    }
    --v13;
    ++v14;
  }
  while (!__CFADD__(v15++, 1));
  return result;
}

void sub_100514698(id a1)
{
  off_102419358 = os_log_create("com.apple.locationd.Motion", "MovementDisorder");
}

void sub_1005146C8(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1005146F8()
{
  float v0 = sub_100D6A9FC(100, 0x80uLL, 3.0);
  dword_10247B204 = sub_100D6A824(v0);
  float v1 = sub_100D6A9FC(100, 0x80uLL, 7.25);
  dword_10247B208 = sub_100D6A824(v1);
  float v2 = sub_100D6A9FC(100, 0x80uLL, 0.75);
  dword_10247B20C = sub_100D6A824(v2);
  float v3 = sub_100D6A9FC(100, 0x80uLL, 10.0);
  dword_10247B210 = sub_100D6A824(v3);
  dword_10247B214 = sub_100D6AA2C(100, 0x80uLL);
}

uint64_t sub_100514790()
{
  if (qword_10247B218 != -1) {
    dispatch_once(&qword_10247B218, &stru_1022B8620);
  }
  return qword_102489F88;
}

void sub_1005147D4(id a1)
{
}

void sub_100514818()
{
}

uint64_t sub_10051483C(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_100134750((void *)(a1 + 40), "");
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 1065353216;
  sub_100514928(a1);
  return a1;
}

void sub_1005148EC(_Unwind_Exception *a1)
{
  sub_1000D7D80(v5);
  sub_1000D7D80(v6);
  sub_1000D7D80(v4);
  sub_1000D7D80(v3);
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void sub_100514928(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  if (*(void *)(a1 + 8))
  {
    BTAccessoryManagerDeregisterCustomMessageClient();
    BTAccessoryManagerRemoveCallbacks();
    *(void *)(a1 + 8) = 0;
  }
  *(void *)a1 = 0;
  int v2 = BTSessionAttachWithQueue();
  if (v2)
  {
    int v3 = v2;
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    uint64_t v4 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 67240192;
      int v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] Failed to register BT session callback. Error: %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::attachBTSession()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

void sub_100514B3C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(void *)__str = 0;
    uint64_t v9 = 0;
    __int16 v10 = 0;
    snprintf(__str, 0x12uLL, "%02x:%02x:%02x:%02x:%02x:%02x", a2, BYTE1(a2), BYTE2(a2), BYTE3(a2), BYTE4(a2), BYTE5(a2));
    std::string::assign((std::string *)(a1 + 40), __str);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    int v3 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = a1 + 40;
      if (*(char *)(a1 + 63) < 0) {
        uint64_t v4 = *(void *)(a1 + 40);
      }
      *(_DWORD *)int buf = 136380675;
      uint64_t v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] BT address of the current device is %{private}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::setBTAddress(uint64_t)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    sub_100514EB8(a1);
  }
  else
  {
    std::string::assign((std::string *)(a1 + 40), "");
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    uint64_t v5 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] clear the BT address", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      }
      *(_WORD *)__str = 0;
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::setBTAddress(uint64_t)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }

    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
  }
}

void sub_100514EB8(uint64_t a1)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current != (CFRunLoopRef)sub_1001BEA14())
  {
    uint64_t v3 = sub_1000D3E78();
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_10051567C;
    v24[3] = &unk_1022A3020;
    v24[4] = a1;
    sub_1009E8E94(v3, (uint64_t)v24);
    return;
  }
  if (!*(void *)a1)
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    uint64_t v6 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] refresh device handle - invalid BT session", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      }
      LOWORD(v25) = 0;
      goto LABEL_39;
    }
    return;
  }
  uint64_t v4 = (void *)(a1 + 40);
  int v5 = *(char *)(a1 + 63);
  if (v5 < 0)
  {
    if (*(void *)(a1 + 48) == 17) {
      goto LABEL_17;
    }
  }
  else if (v5 == 17)
  {
LABEL_17:
    int v7 = BTDeviceAddressFromString();
    if (v7)
    {
      int v8 = v7;
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      }
      uint64_t v9 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
      {
        __int16 v10 = (void *)(a1 + 40);
        if (*(char *)(a1 + 63) < 0) {
          __int16 v10 = (void *)*v4;
        }
        *(_DWORD *)int buf = 136380931;
        long long v30 = v10;
        __int16 v31 = 1026;
        int v32 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] refresh device handle - Failed to convert %{private}s into a valid BT address. Error: %{public}d", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022B86A0);
        }
        if (*(char *)(a1 + 63) < 0) {
          uint64_t v4 = (void *)*v4;
        }
        int v25 = 136380931;
        uint64_t v26 = v4;
        __int16 v27 = 1026;
        int v28 = v8;
        uint64_t v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::refreshBTDevice()", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      if (v8 == 1) {
        sub_100514928(a1);
      }
      return;
    }
    int v14 = BTDeviceFromAddress();
    if (v14)
    {
      int v15 = v14;
      *(void *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      }
      double v16 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = a1 + 40;
        if (*(char *)(a1 + 63) < 0) {
          uint64_t v17 = *v4;
        }
        *(_DWORD *)int buf = 136380931;
        long long v30 = (void *)v17;
        __int16 v31 = 1026;
        int v32 = v15;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] refresh device handle - Failed to get the device handle with BT address %{private}s. Error: %{public}d", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022B86A0);
        }
        if (*(char *)(a1 + 63) < 0) {
          uint64_t v4 = (void *)*v4;
        }
        int v25 = 136380931;
        uint64_t v26 = v4;
        __int16 v27 = 1026;
        int v28 = v15;
LABEL_39:
        unint64_t v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::refreshBTDevice()", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
        return;
      }
    }
    else
    {
      int DeviceId = BTDeviceGetDeviceId();
      if (DeviceId)
      {
        int v19 = DeviceId;
        *(_DWORD *)(a1 + 24) = 0;
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022B86A0);
        }
        float v20 = qword_1024190E8;
        if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 67240192;
          LODWORD(v30) = v19;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] refresh device handle - Failed to get the product ID. Error: %{public}d", buf, 8u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190E0 != -1) {
            dispatch_once(&qword_1024190E0, &stru_1022B86A0);
          }
          int v25 = 67240192;
          LODWORD(v26) = v19;
          BOOL v23 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::refreshBTDevice()", "%s\n", v23);
          if (v23 != (char *)buf) {
            free(v23);
          }
        }
      }
      sub_100515684(a1);
      for (unint64_t i = *(uint64_t ***)(a1 + 160); i; unint64_t i = (uint64_t **)*i)
        ((void (*)(void, uint64_t *))i[3])(0, i[2]);
    }
    return;
  }
  if (qword_1024190E0 != -1) {
    dispatch_once(&qword_1024190E0, &stru_1022B86A0);
  }
  float v11 = qword_1024190E8;
  if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v12 = a1 + 40;
    if (*(char *)(a1 + 63) < 0) {
      uint64_t v12 = *v4;
    }
    *(_DWORD *)int buf = 136380675;
    long long v30 = (void *)v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] refresh device handle - invalid BT address %{private}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    if (*(char *)(a1 + 63) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    int v25 = 136380675;
    uint64_t v26 = v4;
    goto LABEL_39;
  }
}

uint64_t sub_10051567C(uint64_t a1)
{
  return sub_100514EB8(*(void *)(a1 + 32));
}

void sub_100515684(uint64_t a1)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current != (CFRunLoopRef)sub_1001BEA14())
  {
    uint64_t v3 = sub_1000D3E78();
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_100516460;
    long long v26[3] = &unk_1022A3020;
    v26[4] = a1;
    sub_1009E8E94(v3, (uint64_t)v26);
    return;
  }
  if (*(void *)(a1 + 16))
  {
    if (*(char *)(a1 + 63) < 0) {
      uint64_t v4 = *(void *)(a1 + 48);
    }
    else {
      uint64_t v4 = *(unsigned __int8 *)(a1 + 63);
    }
    if (v4 == 17)
    {
      uint64_t v6 = *(void *)(a1 + 88);
      uint64_t v7 = *(void *)(a1 + 128);
      int v8 = BTAccessoryManagerRemoteTimeSyncEnable();
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      }
      uint64_t v9 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v10 = "disable";
        if (v6) {
          __int16 v10 = "enable";
        }
        *(_DWORD *)int buf = 136446722;
        float v34 = v10;
        if (v8) {
          float v11 = "failed";
        }
        else {
          float v11 = "succeeded";
        }
        __int16 v35 = 2082;
        int v36 = v11;
        __int16 v37 = 1026;
        int v38 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] %{public}s high precision TimeSync %{public}s. Status: %{public}d", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022B86A0);
        }
        float v20 = "disable";
        if (v6) {
          float v20 = "enable";
        }
        int v27 = 136446722;
        int v28 = v20;
        if (v8) {
          float v21 = "failed";
        }
        else {
          float v21 = "succeeded";
        }
        __int16 v29 = 2082;
        long long v30 = v21;
        __int16 v31 = 1026;
        int v32 = v8;
        uint64_t v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::updateTimeSync()", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      if (!v6)
      {
        int v12 = BTAccessoryManagerSensorStreamTimeSyncEnable();
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022B86A0);
        }
        unint64_t v13 = qword_1024190E8;
        if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
        {
          int v14 = "disable";
          if (v7) {
            int v14 = "enable";
          }
          *(_DWORD *)int buf = 136446722;
          float v34 = v14;
          if (v12) {
            int v15 = "failed";
          }
          else {
            int v15 = "succeeded";
          }
          __int16 v35 = 2082;
          int v36 = v15;
          __int16 v37 = 1026;
          int v38 = v12;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] %{public}s low precision TimeSync %{public}s. Status: %{public}d", buf, 0x1Cu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190E0 != -1) {
            dispatch_once(&qword_1024190E0, &stru_1022B86A0);
          }
          BOOL v23 = "disable";
          if (v7) {
            BOOL v23 = "enable";
          }
          int v27 = 136446722;
          int v28 = v23;
          if (v12) {
            int v24 = "failed";
          }
          else {
            int v24 = "succeeded";
          }
          __int16 v29 = 2082;
          long long v30 = v24;
          __int16 v31 = 1026;
          int v32 = v12;
          int v25 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::updateTimeSync()", "%s\n", v25);
          if (v25 != (char *)buf) {
            free(v25);
          }
        }
        if (!v7)
        {

          *(void *)(a1 + 32) = 0;
        }
      }
      return;
    }
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    double v16 = (const char *)(a1 + 40);
    uint64_t v17 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = (const char *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        uint64_t v18 = *(const char **)v16;
      }
      *(_DWORD *)int buf = 136380675;
      float v34 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] update TimeSync failed due to invalid BT address %{private}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      }
      if (*(char *)(a1 + 63) < 0) {
        double v16 = *(const char **)v16;
      }
      int v27 = 136380675;
      int v28 = v16;
LABEL_52:
      int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::updateTimeSync()", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
  }
  else
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    int v5 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] update TimeSync failed due to invalid BT device", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      }
      LOWORD(v27) = 0;
      goto LABEL_52;
    }
  }
}

uint64_t sub_100515DAC(void *a1, uint64_t a2)
{
  if (!*a1) {
    return 1;
  }
  *(void *)__str = 0;
  uint64_t v12 = 0;
  __int16 v13 = 0;
  snprintf(__str, 0x12uLL, "%02x:%02x:%02x:%02x:%02x:%02x", a2, BYTE1(a2), BYTE2(a2), BYTE3(a2), BYTE4(a2), BYTE5(a2));
  if (BTDeviceAddressFromString())
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    int v2 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136380675;
      __int16 v10 = __str;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] isSpatialAudioSupported - Failed to convert %{private}s into a valid BT address", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 == -1) {
      goto LABEL_28;
    }
LABEL_30:
    dispatch_once(&qword_1024190E0, &stru_1022B86A0);
LABEL_28:
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLAudioAccessoryInterface::isSpatialAudioSupported(uint64_t) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
    return 1;
  }
  if (BTDeviceFromAddress())
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    uint64_t v3 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136380675;
      __int16 v10 = __str;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] isSpatialAudioSupported - Failed to get the device handle with BT address %{private}s", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 == -1) {
      goto LABEL_28;
    }
    goto LABEL_30;
  }
  BTAccessoryManagerGetSpatialAudioPlatformSupport();
  uint64_t v4 = 0;
  if (qword_1024190E0 != -1) {
    dispatch_once(&qword_1024190E0, &stru_1022B86A0);
  }
  uint64_t v6 = qword_1024190E8;
  if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 136380675;
    __int16 v10 = __str;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] isSpatialAudioSupported - not supported for device %{private}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAudioAccessoryInterface::isSpatialAudioSupported(uint64_t) const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return v4;
}

void sub_100516248(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v11 = a2;
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current == (CFRunLoopRef)sub_1001BEA14())
  {
    if (a3)
    {
      sub_10017F3C0((void *)(a1 + 104), &v11);
      uint64_t v8 = a1 + 64;
    }
    else
    {
      sub_10017F3C0((void *)(a1 + 64), &v11);
      uint64_t v8 = a1 + 104;
    }
    sub_100028960(v8, &v11, &v11);
    sub_100515684(a1);
  }
  else
  {
    uint64_t v7 = sub_1000D3E78();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100516334;
    v9[3] = &unk_1022B8640;
    void v9[4] = a1;
    v9[5] = a2;
    char v10 = a3;
    sub_1009E8E94(v7, (uint64_t)v9);
  }
}

uint64_t sub_100516334(uint64_t a1)
{
  return sub_100516248(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

void sub_100516344(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current == (CFRunLoopRef)sub_1001BEA14())
  {
    sub_10017F3C0((void *)(a1 + 64), &v7);
    sub_10017F3C0((void *)(a1 + 104), &v7);
    sub_100515684(a1);
  }
  else
  {
    uint64_t v5 = sub_1000D3E78();
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    _DWORD v6[2] = sub_10051640C;
    long long v6[3] = &unk_1022B8660;
    v6[4] = a1;
    v6[5] = a2;
    sub_1009E8E94(v5, (uint64_t)v6);
  }
}

uint64_t sub_10051640C(uint64_t a1)
{
  return sub_100516344(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_100516418(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
}

void sub_10051642C(uint64_t a1, uint64_t a2, int a3, unsigned char *a4, unint64_t a5, uint64_t a6)
{
  if (a3 == 1024) {
    sub_1005185A0(a6, a2, a4, a5);
  }
}

void sub_100516448(uint64_t a1, int a2, int a3, void *a4)
{
}

uint64_t sub_100516460(uint64_t a1)
{
  return sub_100515684(*(void *)(a1 + 32));
}

id sub_100516468(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3 && [v3 lockState] == 2)
  {
    *(_DWORD *)int buf = 0;
    return [*(id *)(a1 + 32) convertFromDomainToMachAbsoluteTime:a2 withFlags:buf];
  }
  double v6 = sub_10016C458();
  if (v6 - *(double *)&qword_10247B220 <= 1.0) {
    return 0;
  }
  if (!*(void *)(a1 + 32))
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    uint64_t v8 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] TimeSync error! No TimeSync clock", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_19;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 == -1) {
      goto LABEL_21;
    }
    goto LABEL_23;
  }
  if (qword_1024190E0 != -1) {
    dispatch_once(&qword_1024190E0, &stru_1022B86A0);
  }
  uint64_t v7 = qword_1024190E8;
  if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] TimeSync error! Clock not locked", buf, 2u);
  }
  if (!sub_10013D1A0(115, 0)) {
    goto LABEL_19;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1024190E0 != -1) {
LABEL_23:
  }
    dispatch_once(&qword_1024190E0, &stru_1022B86A0);
LABEL_21:
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "uint64_t CLAudioAccessoryInterface::convertTimeSyncTimestamp(uint64_t) const", "%s\n", v9);
  if (v9 != (char *)buf) {
    free(v9);
  }
LABEL_19:
  id result = 0;
  qword_10247B220 = *(void *)&v6;
  return result;
}

void sub_100516734(uint64_t a1, int *a2, int *a3)
{
  *a3 = 3;
  *a2 = 3;
  if (*(void *)(a1 + 16))
  {
    if (*(char *)(a1 + 63) < 0) {
      uint64_t v6 = *(void *)(a1 + 48);
    }
    else {
      uint64_t v6 = *(unsigned __int8 *)(a1 + 63);
    }
    if (v6 == 17)
    {
      int v8 = BTAccessoryManagerGetInEarDetectionEnable();
      if (v8)
      {
        int v9 = v8;
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022B86A0);
        }
        char v10 = qword_1024190E8;
        if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 67240192;
          LODWORD(v26) = v9;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] in ear status - failed to get IED setting. Error: %{public}d", buf, 8u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190E0 == -1)
          {
LABEL_52:
            uint64_t v22 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::getInEarStatus(BTAccessoryInEarStatus &, BTAccessoryInEarStatus &) const", "%s\n", v22);
            if (v22 != (char *)buf) {
              free(v22);
            }
            return;
          }
LABEL_62:
          dispatch_once(&qword_1024190E0, &stru_1022B86A0);
          goto LABEL_52;
        }
      }
      else
      {
        int v13 = BTAccessoryManagerGetInEarStatus();
        if (v13)
        {
          int v14 = v13;
          if (qword_1024190E0 != -1) {
            dispatch_once(&qword_1024190E0, &stru_1022B86A0);
          }
          int v15 = qword_1024190E8;
          if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 67240192;
            LODWORD(v26) = v14;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] in ear status - failed to get inear status. Error: %{public}d", buf, 8u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190E0 != -1) {
              dispatch_once(&qword_1024190E0, &stru_1022B86A0);
            }
            BOOL v23 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::getInEarStatus(BTAccessoryInEarStatus &, BTAccessoryInEarStatus &) const", "%s\n", v23);
            if (v23 != (char *)buf) {
              free(v23);
            }
          }
          *a3 = 3;
          *a2 = 3;
        }
        else
        {
          if (qword_1024190E0 != -1) {
            dispatch_once(&qword_1024190E0, &stru_1022B86A0);
          }
          double v16 = qword_1024190E8;
          if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v17 = *a2;
            if (v17 > 3) {
              CFStringRef v18 = @"?";
            }
            else {
              CFStringRef v18 = *(&off_1022B86C0 + v17);
            }
            uint64_t v19 = *a3;
            if (v19 > 3) {
              CFStringRef v20 = @"?";
            }
            else {
              CFStringRef v20 = *(&off_1022B86C0 + v19);
            }
            *(_DWORD *)int buf = 138543618;
            CFStringRef v26 = v18;
            __int16 v27 = 2114;
            CFStringRef v28 = v20;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] in ear status - Primary:%{public}@, Secondary:%{public}@", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190E0 != -1) {
              dispatch_once(&qword_1024190E0, &stru_1022B86A0);
            }
            int v24 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::getInEarStatus(BTAccessoryInEarStatus &, BTAccessoryInEarStatus &) const", "%s\n", v24);
            if (v24 != (char *)buf) {
              free(v24);
            }
          }
          if (!*a2)
          {
            unsigned int v21 = *(_DWORD *)(a1 + 24) - 8202;
            if (v21 <= 0x15 && ((1 << v21) & 0x202001) != 0) {
              *a3 = 0;
            }
          }
        }
      }
    }
    else
    {
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      }
      uint64_t v11 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v12 = (const __CFString *)(a1 + 40);
        if (*(char *)(a1 + 63) < 0) {
          CFStringRef v12 = *(const __CFString **)(a1 + 40);
        }
        *(_DWORD *)int buf = 136380675;
        CFStringRef v26 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] in ear status - invalid BT address %{private}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 == -1) {
          goto LABEL_52;
        }
        goto LABEL_62;
      }
    }
  }
  else
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    uint64_t v7 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] in ear status - invalid BT device", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 == -1) {
        goto LABEL_52;
      }
      goto LABEL_62;
    }
  }
}

BOOL sub_100516FEC()
{
  if (qword_10247B218 != -1) {
    dispatch_once(&qword_10247B218, &stru_1022B8620);
  }
  int v2 = 0;
  int v1 = 0;
  sub_100516734(qword_102489F88, &v2, &v1);
  return v2 == 0;
}

void *sub_100517058(uint64_t a1, uint64_t (*a2)(void, uint64_t), uint64_t a3)
{
  uint64_t v6 = a3;
  uint64_t v7 = &v6;
  id result = sub_10051B628(a1 + 144, &v6, (uint64_t)&unk_101D0B290, &v7);
  result[3] = a2;
  if (*(void *)(a1 + 16)) {
    return (void *)a2(0, v6);
  }
  return result;
}

void *sub_1005170C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = &v5;
  id result = sub_10051B628(a1 + 184, &v5, (uint64_t)&unk_101D0B290, &v6);
  result[3] = a2;
  return result;
}

uint64_t *sub_100517118(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  sub_10017F3C0((void *)(a1 + 184), &v4);
  return sub_10017F3C0((void *)(a1 + 144), &v4);
}

uint64_t sub_10051715C(uint64_t result, uint64_t a2, uint64_t a3)
{
  for (unint64_t i = *(uint64_t ***)(result + 200); i; unint64_t i = (uint64_t **)*i)
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    uint64_t v6 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = i[2];
      *(_DWORD *)int buf = 67109378;
      int v10 = a2;
      __int16 v11 = 2112;
      CFStringRef v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[HeadphoneUsage] notifyClientsWithData,event %d,client %@", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      }
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::notifyClientsWithData(Event, NSDictionary *)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    id result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t *))i[3])(a2, a3, i[2]);
  }
  return result;
}

void sub_100517364(void *a1, uint64_t a2, int a3, int a4)
{
  dispatch_assert_queue_V2((dispatch_queue_t)&_dispatch_main_q);
  if ((a3 & 0xFFFFFFFD) != 0) {
    return;
  }
  if (a3 == 2 || !a3 && a4)
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    int v8 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = "attaching BT session failed";
      if (a4 == 2) {
        int v9 = "BT session terminated";
      }
      *(_DWORD *)int buf = 136446210;
      int v25 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] %{public}s. Re-attaching......", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      }
      unsigned int v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::btSessionEventHandler(BTSession, BTSessionEvent, BTResult)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    sub_100514928((uint64_t)a1);
    return;
  }
  *a1 = a2;
  if (qword_1024190E0 != -1) {
    dispatch_once(&qword_1024190E0, &stru_1022B86A0);
  }
  int v10 = qword_1024190E8;
  if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] BT session attached", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::btSessionEventHandler(BTSession, BTSessionEvent, BTResult)", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  int Default = BTAccessoryManagerGetDefault();
  if (Default)
  {
    int v12 = Default;
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    int v13 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 67240192;
      LODWORD(v25) = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] Accessory Mananger unavailable. Status %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 == -1)
      {
LABEL_40:
        CFStringRef v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::btSessionEventHandler(BTSession, BTSessionEvent, BTResult)", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
        return;
      }
LABEL_55:
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      goto LABEL_40;
    }
  }
  else
  {
    sub_100515684((uint64_t)a1);
    int v14 = BTAccessoryManagerAddCallbacks();
    if (v14)
    {
      int v15 = v14;
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      }
      double v16 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 67240192;
        LODWORD(v25) = v15;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] Failed to register BT accessory callback.  Status %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022B86A0);
        }
        BOOL v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::btSessionEventHandler(BTSession, BTSessionEvent, BTResult)", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
    }
    int v17 = BTAccessoryManagerRegisterCustomMessageClient();
    if (!v17)
    {
      sub_100514EB8((uint64_t)a1);
      return;
    }
    int v18 = v17;
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    uint64_t v19 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 67240192;
      LODWORD(v25) = v18;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] Failed to register for custom callback. BTResult: %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 == -1) {
        goto LABEL_40;
      }
      goto LABEL_55;
    }
  }
}

void sub_100517A74(uint64_t a1, uint64_t a2, int a3, int a4)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current != (CFRunLoopRef)sub_1001BEA14())
  {
    uint64_t v9 = sub_1000D3E78();
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_100518590;
    v31[3] = &unk_1022B8680;
    v31[4] = a1;
    v31[5] = a2;
    int v32 = a3;
    int v33 = a4;
    sub_1009E8E94(v9, (uint64_t)v31);
    return;
  }
  switch(a3)
  {
    case 5:
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      }
      int v10 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 134283521;
        uint64_t v41 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] BT_ACCESSORY_SETTINGS_CHANGED device:%{private}p", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022B86A0);
        }
        int v34 = 134283521;
        uint64_t v35 = a2;
        __int16 v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::accessoryEventHandler(BTDevice, BTAccessoryEvent, BTAccessoryState)", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
      }
      for (unint64_t i = *(uint64_t ***)(a1 + 160); i; unint64_t i = (uint64_t **)*i)
        ((void (*)(void, uint64_t *))i[3])(0, i[2]);
      return;
    case 6:
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      }
      double v16 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 134283521;
        uint64_t v41 = a2;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] BT_ACCESSORY_IN_EAR_STATUS_CHANGED device:%{private}p", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022B86A0);
        }
        int v34 = 134283521;
        uint64_t v35 = a2;
        __int16 v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::accessoryEventHandler(BTDevice, BTAccessoryEvent, BTAccessoryState)", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
      }
      for (unint64_t j = *(uint64_t ***)(a1 + 160); j; unint64_t j = (uint64_t **)*j)
        ((void (*)(void, uint64_t *))j[3])(0, j[2]);
      return;
    case 7:
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      }
      int v12 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 134283521;
        uint64_t v41 = a2;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] TIMESYNC_AVAILABLE device:%{private}p", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022B86A0);
        }
        int v34 = 134283521;
        uint64_t v35 = a2;
        CFStringRef v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::accessoryEventHandler(BTDevice, BTAccessoryEvent, BTAccessoryState)", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      if (+[TSClockManager sharedClockManager])
      {
        int TimeSyncId = BTAccessoryManagerGetTimeSyncId();
        if (TimeSyncId)
        {
          int v14 = TimeSyncId;
          if (qword_1024190E0 != -1) {
            dispatch_once(&qword_1024190E0, &stru_1022B86A0);
          }
          int v15 = qword_1024190E8;
          if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 67240192;
            LODWORD(v41) = v14;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] Get TimeSync ID failed result:%{public}d", buf, 8u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190E0 != -1) {
              dispatch_once(&qword_1024190E0, &stru_1022B86A0);
            }
            int v34 = 67240192;
            LODWORD(v35) = v14;
LABEL_51:
            unsigned int v21 = (uint8_t *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::accessoryEventHandler(BTDevice, BTAccessoryEvent, BTAccessoryState)", "%s\n");
LABEL_52:
            if (v21 != buf) {
              free(v21);
            }
          }
        }
        else
        {

          id v22 = [[+[TSClockManager sharedClockManager](TSClockManager, "sharedClockManager") clockWithClockIdentifier:0];
          *(void *)(a1 + 32) = v22;
          if (v22)
          {
            if (qword_1024190E0 != -1) {
              dispatch_once(&qword_1024190E0, &stru_1022B86A0);
            }
            BOOL v23 = qword_1024190E8;
            if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v24 = *(void *)(a1 + 32);
              *(_DWORD *)int buf = 134284033;
              uint64_t v41 = a2;
              __int16 v42 = 2049;
              uint64_t v43 = 0;
              __int16 v44 = 2049;
              uint64_t v45 = v24;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "[CLAudioAccessoryInterface] Got TimeSync ID device:%{private}p tsID:0x%{private}llx clock:%{private}p", buf, 0x20u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024190E0 != -1) {
                dispatch_once(&qword_1024190E0, &stru_1022B86A0);
              }
              uint64_t v25 = *(void *)(a1 + 32);
              int v34 = 134284033;
              uint64_t v35 = a2;
              __int16 v36 = 2049;
              uint64_t v37 = 0;
              __int16 v38 = 2049;
              uint64_t v39 = v25;
              unsigned int v21 = (uint8_t *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::accessoryEventHandler(BTDevice, BTAccessoryEvent, BTAccessoryState)", "%s\n");
              goto LABEL_52;
            }
          }
          else
          {
            if (qword_1024190E0 != -1) {
              dispatch_once(&qword_1024190E0, &stru_1022B86A0);
            }
            CFStringRef v26 = qword_1024190E8;
            if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)int buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "[CLAuDioAccessoryInterface] Failed to get the TimeSync clock", buf, 2u);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024190E0 != -1) {
                dispatch_once(&qword_1024190E0, &stru_1022B86A0);
              }
              LOWORD(v34) = 0;
              goto LABEL_51;
            }
          }
        }
      }
      else
      {
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022B86A0);
        }
        CFStringRef v20 = qword_1024190E8;
        if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] Failed to get the TimeSync clock manager", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190E0 != -1) {
            dispatch_once(&qword_1024190E0, &stru_1022B86A0);
          }
          LOWORD(v34) = 0;
          goto LABEL_51;
        }
      }
      return;
    case 8:
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      }
      int v18 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 134283521;
        uint64_t v41 = a2;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "[CLAudioAccessoryInterface] TIMESYNC_NOT_AVAILABLE device:%{private}p", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022B86A0);
        }
        int v34 = 134283521;
        uint64_t v35 = a2;
        long long v30 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::accessoryEventHandler(BTDevice, BTAccessoryEvent, BTAccessoryState)", "%s\n", v30);
        if (v30 != (char *)buf) {
          free(v30);
        }
      }
      uint64_t v19 = *(void **)(a1 + 32);
      if (v19)
      {

        *(void *)(a1 + 32) = 0;
      }
      return;
    default:
      return;
  }
}

uint64_t sub_100518590(uint64_t a1)
{
  return sub_100517A74(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52));
}

void sub_1005185A0(uint64_t a1, uint64_t a2, unsigned char *a3, unint64_t a4)
{
  __int16 v4 = a4;
  if (sub_100518B2C(a3, a4))
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    int v8 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[HeadphoneUsage] Interface: Bluetooth daily usage event received. Parsing data.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      }
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::dailyUsageEventHandler(BTDevice, BTData, size_t)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    uint64_t v9 = sub_1005192AC((uint64_t)a3, v4);
    if (v9)
    {
      uint64_t v10 = (uint64_t)v9;
      if (!sub_10051AA68(*(void *)(a1 + 8), a2))
      {
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022B86A0);
        }
        __int16 v11 = qword_1024190E8;
        if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] Error retrieving serial numbers, will omit from message.", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190E0 != -1) {
            dispatch_once(&qword_1024190E0, &stru_1022B86A0);
          }
          int v17 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::dailyUsageEventHandler(BTDevice, BTData, size_t)", "%s\n", v17);
          if (v17 != (char *)buf) {
            free(v17);
          }
        }
      }
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      }
      int v12 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 138477827;
        uint64_t v19 = v10;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "[HeadphoneUsage] Interface: Parsed metrics: %{private}@", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022B86A0);
        }
        int v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLAudioAccessoryInterface::dailyUsageEventHandler(BTDevice, BTData, size_t)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      sub_10051715C(a1, 1, v10);
    }
    else
    {
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      }
      int v13 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] Error forming metric dictionary, aborting.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_1022B86A0);
        }
        double v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLAudioAccessoryInterface::dailyUsageEventHandler(BTDevice, BTData, size_t)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
    }
  }
}

BOOL sub_100518B2C(unsigned char *a1, unint64_t a2)
{
  if (a2 <= 5)
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    int v2 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] isValidDailyUsageMessage: Invalid header size", buf, 2u);
    }
    BOOL v3 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v3)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 == -1)
      {
LABEL_8:
        uint64_t v5 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL BT::CLAudioAccessoryHelper::isValidDailyUsageMessage(BTData _Nonnull, size_t)", "%s\n");
LABEL_33:
        if (v5 != buf) {
          free(v5);
        }
        return 0;
      }
LABEL_55:
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      goto LABEL_8;
    }
    return result;
  }
  if (*a1 != 4)
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    __int16 v11 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[HeadphoneUsage] Ignoring, not an AACP Log Message ", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 != -1) {
      goto LABEL_56;
    }
    goto LABEL_32;
  }
  int v6 = a1[3] & 0x3F;
  if (v6 != 1)
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    int v12 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 67109120;
      int v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "[HeadphoneUsage] isValidDailyUsageMessage: Ignoring message type (%d) that is not DailyUsage", buf, 8u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 != -1) {
      goto LABEL_56;
    }
LABEL_32:
    uint64_t v5 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL BT::CLAudioAccessoryHelper::isValidDailyUsageMessage(BTData _Nonnull, size_t)", "%s\n");
    goto LABEL_33;
  }
  int v7 = a1[5];
  if ((v7 - 7) > 1)
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    int v13 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 67109120;
      int v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "[HeadphoneUsage] Unexpected AWD version %d", buf, 8u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 == -1) {
      goto LABEL_32;
    }
LABEL_56:
    dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    goto LABEL_32;
  }
  int v8 = word_101D227C8[15 * a1[5] + 1];
  int v9 = (unsigned __int16)(a2 - 4);
  if (v9 == v8)
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    uint64_t v10 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[HeadphoneUsage] Bluetooth message passed sanity checks.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      }
      double v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL BT::CLAudioAccessoryHelper::isValidDailyUsageMessage(BTData _Nonnull, size_t)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    return 1;
  }
  else
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    int v14 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 67109888;
      int v18 = v7;
      __int16 v19 = 1024;
      int v20 = 1;
      __int16 v21 = 1024;
      int v22 = v8;
      __int16 v23 = 1024;
      int v24 = v9;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "[HeadphoneUsage] Unexpected AWD data length for AWDVersion %d: type %d expected len %d actual %d. Header mismatch with Bluetooth likely.", buf, 0x1Au);
    }
    BOOL v15 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v15)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 == -1) {
        goto LABEL_8;
      }
      goto LABEL_55;
    }
  }
  return result;
}

NSMutableDictionary *sub_1005192AC(uint64_t a1, __int16 a2)
{
  unsigned __int16 v2 = a2 - 4;
  BOOL v3 = (const void *)(a1 + 4);
  size_t v4 = (unsigned __int16)(a2 - 4);
  if (v4 <= 0x2D4) {
    size_t v5 = 725 - (unsigned __int16)(a2 - 4);
  }
  else {
    size_t v5 = 0;
  }
  bzero(&__dst[v2], v5);
  memcpy(__dst, v3, v4);
  v183[0] = @"bud_type";
  v184[0] = +[NSNumber numberWithUnsignedChar:__dst[0]];
  v183[1] = @"awd_length";
  v184[1] = +[NSNumber numberWithUnsignedShort:v12];
  v183[2] = @"awd_version";
  v184[2] = +[NSNumber numberWithUnsignedChar:__dst[1]];
  v183[3] = @"status";
  v184[3] = +[NSNumber numberWithUnsignedChar:__dst[2]];
  v183[4] = @"signature";
  v184[4] = +[NSNumber numberWithUnsignedShort:v13];
  v183[5] = @"product_id";
  v184[5] = +[NSNumber numberWithUnsignedShort:v14];
  v183[6] = @"sw_version";
  v184[6] = +[NSNumber numberWithUnsignedShort:v15];
  v183[7] = @"case_hw_version";
  v184[7] = +[NSNumber numberWithUnsignedShort:v16];
  v183[8] = @"case_sw_version";
  v184[8] = +[NSNumber numberWithUnsignedShort:v17];
  v183[9] = @"a2dp_time_mode_off_l";
  v184[9] = +[NSNumber numberWithUnsignedShort:v18];
  v183[10] = @"a2dp_time_mode_anc_l";
  v184[10] = +[NSNumber numberWithUnsignedShort:v19];
  v183[11] = @"a2dp_time_mode_trcy_l";
  v184[11] = +[NSNumber numberWithUnsignedShort:v20];
  v183[12] = @"a2dp_time_mode_unused_l";
  v184[12] = +[NSNumber numberWithUnsignedShort:v21];
  v183[13] = @"hfp_time_off_l";
  v184[13] = +[NSNumber numberWithUnsignedShort:v22];
  v183[14] = @"hfp_time_anc_l";
  v184[14] = +[NSNumber numberWithUnsignedShort:v23];
  v183[15] = @"hfp_time_trcy_l";
  v184[15] = +[NSNumber numberWithUnsignedShort:v24];
  v183[16] = @"hfp_time_unused_l";
  v184[16] = +[NSNumber numberWithUnsignedShort:v25];
  v183[17] = @"idle_time_off_l";
  v184[17] = +[NSNumber numberWithUnsignedShort:v26];
  v183[18] = @"idle_time_anc_l";
  v184[18] = +[NSNumber numberWithUnsignedShort:v27];
  v183[19] = @"idle_time_trcy_l";
  v184[19] = +[NSNumber numberWithUnsignedShort:v28];
  v183[20] = @"idle_time_unused_l";
  v184[20] = +[NSNumber numberWithUnsignedShort:v29];
  v183[21] = @"a2dp_battery_usage_l";
  v184[21] = +[NSNumber numberWithUnsignedChar:v30];
  v183[22] = @"hfp_battery_usage_l";
  v184[22] = +[NSNumber numberWithUnsignedChar:v31];
  v183[23] = @"idle_battery_usage_l";
  v184[23] = +[NSNumber numberWithUnsignedChar:v32];
  v183[24] = @"a2dp_bud_temp_max_l";
  v184[24] = +[NSNumber numberWithChar:v33];
  v183[25] = @"hfp_bud_temp_max_l";
  v184[25] = +[NSNumber numberWithChar:v34];
  v183[26] = @"a2dp_bud_temp_avg_l";
  v184[26] = +[NSNumber numberWithChar:v35];
  v183[27] = @"hfp_bud_temp_avg_l";
  v184[27] = +[NSNumber numberWithChar:v36];
  v183[28] = @"time_out_of_ear_idle_l";
  v184[28] = +[NSNumber numberWithUnsignedInt:v37];
  v183[29] = @"time_out_of_ear_incase_l";
  v184[29] = +[NSNumber numberWithUnsignedInt:v38];
  v183[30] = @"ied_activated_count_l";
  v184[30] = +[NSNumber numberWithUnsignedShort:v39];
  v183[31] = @"fw_update_retry_count_l";
  v184[31] = +[NSNumber numberWithUnsignedChar:v40];
  v183[32] = @"bud_charging_cycle_l";
  v184[32] = +[NSNumber numberWithUnsignedInt:v41];
  v183[33] = @"a2dp_time_mode_off_r";
  v184[33] = +[NSNumber numberWithUnsignedShort:v42];
  v183[34] = @"a2dp_time_mode_anc_r";
  v184[34] = +[NSNumber numberWithUnsignedShort:v43];
  v183[35] = @"a2dp_time_mode_trcy_r";
  v184[35] = +[NSNumber numberWithUnsignedShort:v44];
  v183[36] = @"a2dp_time_mode_unused_r";
  v184[36] = +[NSNumber numberWithUnsignedShort:v45];
  v183[37] = @"hfp_time_off_r";
  v184[37] = +[NSNumber numberWithUnsignedShort:v46];
  v183[38] = @"hfp_time_anc_r";
  v184[38] = +[NSNumber numberWithUnsignedShort:v47];
  v183[39] = @"hfp_time_trcy_r";
  v184[39] = +[NSNumber numberWithUnsignedShort:v48];
  v183[40] = @"hfp_time_unused_r";
  v184[40] = +[NSNumber numberWithUnsignedShort:v49];
  v183[41] = @"idle_time_off_r";
  v184[41] = +[NSNumber numberWithUnsignedShort:v50];
  v183[42] = @"idle_time_anc_r";
  v184[42] = +[NSNumber numberWithUnsignedShort:v51];
  v183[43] = @"idle_time_trcy_r";
  v184[43] = +[NSNumber numberWithUnsignedShort:v52];
  v183[44] = @"idle_time_unused_r";
  v184[44] = +[NSNumber numberWithUnsignedShort:v53];
  v183[45] = @"a2dp_battery_usage_r";
  v184[45] = +[NSNumber numberWithUnsignedChar:v54];
  v183[46] = @"hfp_battery_usage_r";
  v184[46] = +[NSNumber numberWithUnsignedChar:v55];
  v183[47] = @"idle_battery_usage_r";
  v184[47] = +[NSNumber numberWithUnsignedChar:v56];
  v183[48] = @"a2dp_bud_temp_max_r";
  v184[48] = +[NSNumber numberWithChar:v57];
  v183[49] = @"hfp_bud_temp_max_r";
  v184[49] = +[NSNumber numberWithChar:v58];
  v183[50] = @"a2dp_bud_temp_avg_r";
  v184[50] = +[NSNumber numberWithChar:v59];
  v183[51] = @"hfp_bud_temp_avg_r";
  v184[51] = +[NSNumber numberWithChar:v60];
  v183[52] = @"time_out_of_ear_idle_r";
  v184[52] = +[NSNumber numberWithUnsignedInt:v61];
  v183[53] = @"time_out_of_ear_incase_r";
  v184[53] = +[NSNumber numberWithUnsignedInt:v62];
  v183[54] = @"ied_activated_count_r";
  v184[54] = +[NSNumber numberWithUnsignedShort:v63];
  v183[55] = @"fw_update_retry_count_r";
  v184[55] = +[NSNumber numberWithUnsignedChar:v64];
  v183[56] = @"bud_charging_cycle_r";
  v184[56] = +[NSNumber numberWithUnsignedInt:v65];
  v183[57] = @"a2dp_time_both_in_ear_off";
  v184[57] = +[NSNumber numberWithUnsignedShort:v66];
  v183[58] = @"a2dp_time_both_in_ear_anc";
  v184[58] = +[NSNumber numberWithUnsignedShort:v67];
  v183[59] = @"a2dp_time_both_in_ear_trcy";
  v184[59] = +[NSNumber numberWithUnsignedShort:v68];
  v183[60] = @"a2dp_time_both_in_ear_unused";
  v184[60] = +[NSNumber numberWithUnsignedShort:v69];
  v183[61] = @"hfp_time_both_in_ear_off";
  v184[61] = +[NSNumber numberWithUnsignedShort:v70];
  v183[62] = @"hfp_time_both_in_ear_anc";
  v184[62] = +[NSNumber numberWithUnsignedShort:v71];
  v183[63] = @"hfp_time_both_in_ear_trcy";
  v184[63] = +[NSNumber numberWithUnsignedShort:v72];
  v183[64] = @"hfp_time_both_in_ear_unused";
  v184[64] = +[NSNumber numberWithUnsignedShort:v73];
  v183[65] = @"idle_time_both_in_ear_off";
  v184[65] = +[NSNumber numberWithUnsignedShort:v74];
  v183[66] = @"idle_time_both_in_ear_anc";
  v184[66] = +[NSNumber numberWithUnsignedShort:v75];
  v183[67] = @"idle_time_both_in_ear_trcy";
  v184[67] = +[NSNumber numberWithUnsignedShort:v76];
  v183[68] = @"idle_time_both_in_ear_unused";
  v184[68] = +[NSNumber numberWithUnsignedShort:v77];
  v183[69] = @"time_both_out_of_ear_idle";
  v184[69] = +[NSNumber numberWithUnsignedShort:v78];
  v183[70] = @"time_out_of_ear_both_incase";
  v184[70] = +[NSNumber numberWithUnsignedShort:v79];
  v183[71] = @"hs_on_acc_cnt";
  v184[71] = +[NSNumber numberWithUnsignedShort:v80];
  v183[72] = @"siri_on_source_cnt";
  v184[72] = +[NSNumber numberWithUnsignedShort:v81];
  v183[73] = @"siri_on_accessory_cnt";
  v184[73] = +[NSNumber numberWithUnsignedShort:v82];
  v183[74] = @"total_time_in_connect_session";
  v184[74] = +[NSNumber numberWithUnsignedInt:v83];
  v183[75] = @"bud_swap_count";
  v184[75] = +[NSNumber numberWithUnsignedShort:v84];
  v183[76] = @"bud_daily_charging_soc_delta_l";
  v184[76] = +[NSNumber numberWithUnsignedShort:v86];
  v183[77] = @"bud_daily_charging_soc_delta_r";
  v184[77] = +[NSNumber numberWithUnsignedShort:v87];
  v183[78] = @"bud_max_daily_temp_during_chr_l";
  v184[78] = +[NSNumber numberWithChar:v88];
  v183[79] = @"bud_max_daily_temp_during_chr_r";
  v184[79] = +[NSNumber numberWithChar:v89];
  v183[80] = @"bud_avg_daily_temp_during_chr_l";
  v184[80] = +[NSNumber numberWithChar:v90];
  v183[81] = @"bud_avg_daily_temp_during_chr_r";
  v184[81] = +[NSNumber numberWithChar:v91];
  v183[82] = @"case_soc_delta_bud_chr";
  v184[82] = +[NSNumber numberWithUnsignedShort:v92];
  v183[83] = @"case_temp_max_while_discharging";
  v184[83] = +[NSNumber numberWithChar:v93];
  v183[84] = @"case_temp_avg_daily";
  v184[84] = +[NSNumber numberWithChar:v94];
  v183[85] = @"case_at_maxchr_time_in_day";
  v184[85] = +[NSNumber numberWithUnsignedInt:v95];
  v183[86] = @"case_charging_cycle";
  v184[86] = +[NSNumber numberWithUnsignedShort:v96];
  v183[87] = @"source_conn_productid_1";
  v184[87] = +[NSNumber numberWithUnsignedShort:v97];
  v183[88] = @"source_conn_productid_2";
  v184[88] = +[NSNumber numberWithUnsignedShort:v98];
  v183[89] = @"source_conn_productid_3";
  v184[89] = +[NSNumber numberWithUnsignedShort:v99];
  v183[90] = @"source_conn_productid_4";
  v184[90] = +[NSNumber numberWithUnsignedShort:v100];
  v183[91] = @"source_conn_productid_5";
  v184[91] = +[NSNumber numberWithUnsignedShort:v101];
  v183[92] = @"source_conn_time_1";
  v184[92] = +[NSNumber numberWithUnsignedShort:v102];
  v183[93] = @"source_conn_time_2";
  v184[93] = +[NSNumber numberWithUnsignedShort:v103];
  v183[94] = @"source_conn_time_3";
  v184[94] = +[NSNumber numberWithUnsignedShort:v104];
  v183[95] = @"source_conn_time_4";
  v184[95] = +[NSNumber numberWithUnsignedShort:v105];
  v183[96] = @"source_conn_time_5";
  v184[96] = +[NSNumber numberWithUnsignedShort:v106];
  v183[97] = @"sw_version_ext";
  v184[97] = +[NSNumber numberWithUnsignedInt:v107[5]];
  v183[98] = @"triangle_conn_time";
  v184[98] = +[NSNumber numberWithUnsignedShort:v108];
  v183[99] = @"hw_version";
  v184[99] = +[NSNumber numberWithUnsignedShort:v109];
  v183[100] = @"double_tap_cnt_l";
  v184[100] = +[NSNumber numberWithUnsignedShort:v110];
  v183[101] = @"single_tap_cnt_l";
  v184[101] = +[NSNumber numberWithUnsignedShort:v111];
  v183[102] = @"press_hold_l";
  v184[102] = +[NSNumber numberWithUnsignedShort:v112];
  v183[103] = @"ied_detect_l";
  v184[103] = +[NSNumber numberWithUnsignedShort:v113];
  v183[104] = @"crash_cnt_l";
  v184[104] = +[NSNumber numberWithUnsignedShort:v114[2]];
  v183[105] = @"bud_mileage_l";
  v184[105] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)&v122[14]];
  v183[106] = @"first_time_use_l";
  v184[106] = +[NSNumber numberWithUnsignedInt:v123];
  v183[107] = @"double_tap_cnt_r";
  v184[107] = +[NSNumber numberWithUnsignedShort:v124];
  v183[108] = @"single_tap_cnt_r";
  v184[108] = +[NSNumber numberWithUnsignedShort:v125];
  v183[109] = @"press_hold_r";
  v184[109] = +[NSNumber numberWithUnsignedShort:v126];
  v183[110] = @"ied_detect_r";
  v184[110] = +[NSNumber numberWithUnsignedShort:v127];
  v183[111] = @"crash_cnt_r";
  v184[111] = +[NSNumber numberWithUnsignedShort:v128[2]];
  v183[112] = @"bud_mileage_r";
  v184[112] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)&v136[14]];
  v183[113] = @"first_time_use_r";
  v184[113] = +[NSNumber numberWithUnsignedInt:v137];
  v183[114] = @"scp_active_time";
  v184[114] = +[NSNumber numberWithUnsignedInt:v138];
  v183[115] = @"scp_ohd_time";
  v184[115] = +[NSNumber numberWithUnsignedInt:v139];
  v183[116] = @"scp_fwup_time";
  v184[116] = +[NSNumber numberWithUnsignedInt:v140];
  v183[117] = @"scp_idle_time";
  v184[117] = +[NSNumber numberWithUnsignedInt:v141];
  v183[118] = @"scp_ttop_time";
  v184[118] = +[NSNumber numberWithUnsignedInt:v142];
  v183[119] = @"scp_prioff_time";
  v184[119] = +[NSNumber numberWithUnsignedInt:v143];
  v183[120] = @"scp_up_to_active";
  v184[120] = +[NSNumber numberWithUnsignedShort:v144];
  v183[121] = @"scp_up_to_ohd";
  v184[121] = +[NSNumber numberWithUnsignedShort:v145];
  v183[122] = @"scp_up_to_fwup";
  v184[122] = +[NSNumber numberWithUnsignedShort:v146];
  v183[123] = @"scp_up_to_idle";
  v184[123] = +[NSNumber numberWithUnsignedShort:v147];
  v183[124] = @"scp_up_to_ttop";
  v184[124] = +[NSNumber numberWithUnsignedShort:v148];
  v183[125] = @"scp_down_to_ohd";
  v184[125] = +[NSNumber numberWithUnsignedShort:v149];
  v183[126] = @"scp_down_to_fwup";
  v184[126] = +[NSNumber numberWithUnsignedShort:v150];
  v183[127] = @"scp_down_to_idle";
  v184[127] = +[NSNumber numberWithUnsignedShort:v151];
  v183[128] = @"scp_down_to_ttop";
  v184[128] = +[NSNumber numberWithUnsignedShort:v152];
  v183[129] = @"scp_down_to_prioff";
  v184[129] = +[NSNumber numberWithUnsignedShort:v153];
  v183[130] = @"scp_bt_disc";
  v184[130] = +[NSNumber numberWithUnsignedShort:v154];
  v183[131] = @"scp_bt_conn";
  v184[131] = +[NSNumber numberWithUnsignedShort:v155];
  v183[132] = @"scp_bt_a2dp";
  v184[132] = +[NSNumber numberWithUnsignedShort:v156];
  v183[133] = @"scp_bt_call";
  v184[133] = +[NSNumber numberWithUnsignedShort:v157];
  v183[134] = @"scp_scp_b2p_timeout";
  v184[134] = +[NSNumber numberWithUnsignedInt:v158];
  v183[135] = @"scp_scp_b2p_tx_retry";
  v184[135] = +[NSNumber numberWithUnsignedInt:v159];
  v183[136] = @"scp_scp_b2p_rx_error";
  v184[136] = +[NSNumber numberWithUnsignedInt:v160];
  v183[137] = @"scp_scp_b2p_tx_raw";
  v184[137] = +[NSNumber numberWithUnsignedInt:v161];
  v183[138] = @"scp_scp_b2p_rx_raw";
  v184[138] = +[NSNumber numberWithUnsignedInt:v162];
  v183[139] = @"scp_pri_b2p_timeout";
  v184[139] = +[NSNumber numberWithUnsignedInt:v163];
  v183[140] = @"scp_pri_b2p_tx_retry";
  v184[140] = +[NSNumber numberWithUnsignedInt:v164];
  v183[141] = @"scp_pri_b2p_rx_error";
  v184[141] = +[NSNumber numberWithUnsignedInt:v165];
  v183[142] = @"scp_pri_b2p_tx_raw";
  v184[142] = +[NSNumber numberWithUnsignedInt:v166];
  v183[143] = @"scp_pri_b2p_rx_raw";
  v184[143] = +[NSNumber numberWithUnsignedInt:v167];
  v183[144] = @"scp_chun_tx_error";
  v184[144] = +[NSNumber numberWithUnsignedInt:v168];
  v183[145] = @"scp_chun_rx_error";
  v184[145] = +[NSNumber numberWithUnsignedInt:v169];
  v183[146] = @"scp_chun_unlock";
  v184[146] = +[NSNumber numberWithUnsignedInt:v170];
  v183[147] = @"scp_chun_missed_frame";
  v184[147] = +[NSNumber numberWithUnsignedInt:v171];
  v183[148] = @"appleID_paired_count";
  v184[148] = +[NSNumber numberWithUnsignedChar:v172];
  v183[149] = @"uvlo_count_l";
  v184[149] = +[NSNumber numberWithUnsignedChar:v173];
  v183[150] = @"time_since_last_uvlo_l";
  v184[150] = +[NSNumber numberWithUnsignedInt:v174];
  v183[151] = @"low_batt_signal_count_l";
  v184[151] = +[NSNumber numberWithUnsignedChar:v175];
  v183[152] = @"num_sessions_l";
  v184[152] = +[NSNumber numberWithUnsignedChar:v176];
  v183[153] = @"flash_pe_count_l";
  v184[153] = +[NSNumber numberWithUnsignedChar:v177];
  v183[154] = @"bud_color_l";
  v184[154] = +[NSNumber numberWithUnsignedChar:v178];
  v183[155] = @"uvlo_count_r";
  v184[155] = +[NSNumber numberWithUnsignedChar:v179];
  v183[156] = @"time_since_last_uvlo_r";
  v184[156] = +[NSNumber numberWithUnsignedInt:v180];
  v183[157] = @"low_batt_signal_count_r";
  v184[157] = +[NSNumber numberWithUnsignedChar:v181];
  v183[158] = @"num_sessions_r";
  v184[158] = +[NSNumber numberWithUnsignedChar:v182[58]];
  v183[159] = @"flash_pe_count_r";
  v184[159] = +[NSNumber numberWithUnsignedChar:v182[59]];
  v183[160] = @"bud_color_r";
  v184[160] = +[NSNumber numberWithUnsignedChar:v182[60]];
  v183[161] = @"case_charge_event_count";
  v184[161] = +[NSNumber numberWithUnsignedChar:v85];
  v183[162] = @"system_color";
  v184[162] = +[NSNumber numberWithUnsignedChar:v182[61]];
  int v6 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", +[NSDictionary dictionaryWithObjects:v184 forKeys:v183 count:163]);
  sub_10051B1E4(@"array_rfu", 5, 4u, (uint64_t)v107, v6, 0);
  sub_10051B1E4(@"ied_histogram_l", 2, 2u, (uint64_t)v114, v6, 0);
  sub_10051B1E4(@"a2dp_time_ext_l", 4, 2u, (uint64_t)&v115, v6, 0);
  sub_10051B1E4(@"hfp_time_ext_l", 4, 2u, (uint64_t)&v116, v6, 0);
  sub_10051B1E4(@"idle_time_ext_l", 4, 2u, (uint64_t)&v117, v6, 0);
  sub_10051B1E4(@"a2dp_battery_usage_ext_l", 8, 2u, (uint64_t)&v118, v6, 0);
  sub_10051B1E4(@"hfp_battery_usage_ext_l", 8, 2u, (uint64_t)&v119, v6, 0);
  sub_10051B1E4(@"idle_battery_usage_ext_l", 8, 2u, (uint64_t)&v120, v6, 0);
  sub_10051B1E4(@"array_rfu_l", 5, 4u, (uint64_t)&v121, v6, 0);
  sub_10051B1E4(@"volume_his_l", 7, 2u, (uint64_t)v122, v6, 0);
  sub_10051B1E4(@"ied_histogram_r", 2, 2u, (uint64_t)v128, v6, 0);
  sub_10051B1E4(@"a2dp_time_ext_r", 4, 2u, (uint64_t)&v129, v6, 0);
  sub_10051B1E4(@"hfp_time_ext_r", 4, 2u, (uint64_t)&v130, v6, 0);
  sub_10051B1E4(@"idle_time_ext_r", 4, 2u, (uint64_t)&v131, v6, 0);
  sub_10051B1E4(@"a2dp_battery_usage_ext_r", 8, 2u, (uint64_t)&v132, v6, 0);
  sub_10051B1E4(@"hfp_battery_usage_ext_r", 8, 2u, (uint64_t)&v133, v6, 0);
  sub_10051B1E4(@"idle_battery_usage_ext_r", 8, 2u, (uint64_t)&v134, v6, 0);
  sub_10051B1E4(@"array_rfu_r", 5, 4u, (uint64_t)&v135, v6, 0);
  sub_10051B1E4(@"volume_his_r", 7, 2u, (uint64_t)v136, v6, 0);
  uint64_t v7 = 0;
  int v8 = (unsigned __int16 *)v182;
  do
  {
    [(NSMutableDictionary *)v6 setObject:+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)v8 - 71)) forKeyedSubscript:+[NSString stringWithFormat:@"bud_start_soc_at_undock_l_%u", v7]];
    [(NSMutableDictionary *)v6 setObject:+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)v8 - 70)) forKeyedSubscript:+[NSString stringWithFormat:@"bud_end_soc_at_dock_l_%u", v7]];
    [(NSMutableDictionary *)v6 setObject:+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)((char *)v8 - 69)) forKeyedSubscript:+[NSString stringWithFormat:@"length_of_session_l_%u", v7]];
    [(NSMutableDictionary *)v6 setObject:+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)v8 - 2)) forKeyedSubscript:+[NSString stringWithFormat:@"bud_start_soc_at_undock_r_%u", v7]];
    [(NSMutableDictionary *)v6 setObject:+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)v8 - 1)) forKeyedSubscript:+[NSString stringWithFormat:@"bud_end_soc_at_dock_r_%u", v7]];
    unsigned int v9 = *v8;
    v8 += 2;
    [(NSMutableDictionary *)v6 setObject:+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v9) forKeyedSubscript:+[NSString stringWithFormat:@"length_of_session_r_%u", v7++]];
  }
  while (v7 != 15);
  [(NSMutableDictionary *)v6 setObject:+[NSNumber numberWithUnsignedChar:v182[62]] forKeyedSubscript:@"case_hw_version_maj"];
  [(NSMutableDictionary *)v6 setObject:+[NSNumber numberWithUnsignedChar:v182[63]] forKeyedSubscript:@"case_hw_version_min"];
  [(NSMutableDictionary *)v6 setObject:+[NSNumber numberWithUnsignedChar:v182[64]] forKeyedSubscript:@"case_hw_version_rev"];
  [(NSMutableDictionary *)v6 setObject:+[NSNumber numberWithUnsignedChar:v182[65]] forKeyedSubscript:@"case_sw_version_maj"];
  [(NSMutableDictionary *)v6 setObject:+[NSNumber numberWithUnsignedChar:v182[66]] forKeyedSubscript:@"case_sw_version_min"];
  [(NSMutableDictionary *)v6 setObject:+[NSNumber numberWithUnsignedChar:v182[67]] forKeyedSubscript:@"case_sw_version_rev"];
  [(NSMutableDictionary *)v6 setObject:+[NSNumber numberWithUnsignedChar:v182[68]] forKeyedSubscript:@"appleID_hijack_cnt"];
  return v6;
}

BOOL sub_10051AA68(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = [objc_alloc((Class)NSMutableData) initWithLength:1000];
    [v3 mutableBytes];
    [v3 length];
    int AccessoryInfo = BTAccessoryManagerGetAccessoryInfo();

    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    size_t v5 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 67109376;
      LODWORD(v11[0]) = AccessoryInfo;
      WORD2(v11[0]) = 2048;
      *(void *)((char *)v11 + 6) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] Error: Unable to retrieve data,status:%d,infoLen:%zu", buf, 0x12u);
    }
    BOOL v6 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v6)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      }
      unsigned int v9 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL BT::CLAudioAccessoryHelper::addSerialNumbersToDict(BTAccessoryManager _Nonnull, BTDevice _Nonnull, NSMutableDictionary * _Nonnull)", "%s\n");
LABEL_19:
      if (v9 != buf) {
        free(v9);
      }
      return 0;
    }
  }
  else
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    int v8 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 138412290;
      v11[0] = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[HeadphoneUsage] BT Accessory Manager no longer exists, cannot retrieve serial numbers,device:%@", buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      }
      unsigned int v9 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL BT::CLAudioAccessoryHelper::addSerialNumbersToDict(BTAccessoryManager _Nonnull, BTDevice _Nonnull, NSMutableDictionary * _Nonnull)", "%s\n");
      goto LABEL_19;
    }
  }
  return result;
}

void sub_10051B1B4(id a1)
{
  qword_1024190E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

void sub_10051B1E4(uint64_t a1, int a2, unsigned int a3, uint64_t a4, void *a5, int a6)
{
  if (a3 - 9 > 0xFFFFFFF7)
  {
    if (a1 && a4 && a5)
    {
      unsigned int v11 = a3 * a2;
      if (a3 * a2)
      {
        unsigned int v13 = 0;
        int v14 = a3 - 1;
        do
        {
          switch(v14)
          {
            case 0:
              unint64_t v15 = *(unsigned __int8 *)(a4 + v13);
              break;
            case 1:
              unint64_t v15 = *(unsigned __int16 *)(a4 + v13);
              break;
            case 2:
              unint64_t v15 = *(unsigned __int16 *)(a4 + v13) | ((unint64_t)*(unsigned __int8 *)(a4 + v13 + 2) << 16);
              break;
            case 3:
              unint64_t v15 = *(unsigned int *)(a4 + v13);
              break;
            case 4:
              unint64_t v15 = *(unsigned int *)(a4 + v13) | ((unint64_t)*(unsigned __int8 *)(a4 + v13 + 4) << 32);
              break;
            case 5:
              unint64_t v15 = *(unsigned int *)(a4 + v13) | ((unint64_t)*(unsigned __int8 *)(a4 + v13 + 4) << 32) | ((unint64_t)*(unsigned __int8 *)(a4 + v13 + 5) << 40);
              break;
            case 6:
              unint64_t v15 = *(unsigned int *)(a4 + v13) | ((unint64_t)*(unsigned __int8 *)(a4 + v13 + 4) << 32) | ((unint64_t)*(unsigned __int8 *)(a4 + v13 + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(a4 + v13 + 6) << 48);
              break;
            case 7:
              unint64_t v15 = *(void *)(a4 + v13);
              break;
            default:
              unint64_t v15 = 0;
              break;
          }
          if (a6) {
            unsigned __int16 v16 = +[NSNumber numberWithLongLong:v15];
          }
          else {
            unsigned __int16 v16 = +[NSNumber numberWithUnsignedLongLong:v15];
          }
          [a5 setObject:v16, +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@_%u", a1, v13 / a3) forKey];
          v13 += a3;
        }
        while (v13 < v11);
      }
    }
    else
    {
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      }
      unsigned __int16 v17 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 138412802;
        uint64_t v20 = a1;
        __int16 v21 = 2048;
        uint64_t v22 = a4;
        __int16 v23 = 2112;
        unsigned __int16 v24 = a5;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] addExpandedArrayToDictionary: Invalid parameters. arrayName: %@, array: %p, dict: %@", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 == -1) {
          goto LABEL_36;
        }
        goto LABEL_38;
      }
    }
  }
  else
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
    }
    uint64_t v7 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 67109120;
      LODWORD(v20) = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] addExpandedArrayToDictionary: Invalid value for bytesPerEntry: %u", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 == -1)
      {
LABEL_36:
        unsigned __int16 v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static void BT::CLAudioAccessoryHelper::addExpandedArrayToDictionary(NSString * _Nonnull, uint32_t, uint8_t, uint8_t * _Nonnull, NSMutableDictionary * _Nonnull, BOOL)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
        return;
      }
LABEL_38:
      dispatch_once(&qword_1024190E0, &stru_1022B86A0);
      goto LABEL_36;
    }
  }
}

void *sub_10051B628(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    unsigned __int16 v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (unint64_t i = *v12; i; unint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = operator new(0x20uLL);
  *unint64_t i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100100330(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *unint64_t i = *v22;
LABEL_38:
    void *v22 = i;
    goto LABEL_39;
  }
  *unint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_10051B86C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10051B9E8(id a1)
{
  qword_10247B228 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLLocationStreamingConnectionManagerSilo"];
}

void sub_10051BA60(id a1)
{
  if (objc_opt_class())
  {
    sub_100103240();
    if (sub_100106424() || (sub_100103240(), sub_10010145C())) {
      byte_10247B238 = 1;
    }
  }
}

id sub_10051BC7C(uint64_t a1, void *a2)
{
  return _[a2 pairedDeviceIsNearby:*(unsigned __int8 *)(*(void *)(a1 + 32) + 9)];
}

id sub_10051BEBC(uint64_t a1, void *a2)
{
  return _[a2 pairedDeviceIsNearby:*(unsigned __int8 *)(*(void *)(a1 + 32) + 9)];
}

void sub_10051C0A8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B88B0);
    }
    id v3 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 68289282;
      v4[1] = 0;
      __int16 v5 = 2082;
      BOOL v6 = "";
      __int16 v7 = 2114;
      uint64_t v8 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"failed to activate #Rapport link\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)v4, 0x1Cu);
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(a1 + 32) + 8) = 1;
  }
}

id sub_10051C1AC(uint64_t a1, void *a2)
{
  if ([a2 model]) {
    unint64_t v4 = (const char *)[[[a2 model] UTF8String];
  }
  else {
    unint64_t v4 = "Unknown Model";
  }
  if ([a2 name]) {
    __int16 v5 = (const char *)[a2 name];
  }
  else {
    __int16 v5 = "Unknown Name";
  }
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_1022B88B0);
  }
  BOOL v6 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 68289795;
    v8[1] = 0;
    __int16 v9 = 2082;
    unint64_t v10 = "";
    __int16 v11 = 2082;
    unsigned __int16 v12 = v4;
    __int16 v13 = 2081;
    unint64_t v14 = v5;
    __int16 v15 = 2082;
    id v16 = [[objc_msgSend(a2, "effectiveIdentifier") UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Rapport discovered nearby device\", \"model\":%{public, location:escape_only}s, \"name\":%{private, location:escape_only}s, \"effectiveID\":%{public, location:escape_only}s}", (uint8_t *)v8, 0x30u);
  }
  return [*(id *)(a1 + 32) updateNearbyStatusWithCompanionLinkDevice:a2 didConnect:1];
}

id sub_10051C324(uint64_t a1, void *a2)
{
  if ([a2 model]) {
    unint64_t v4 = (const char *)[[[a2 model] UTF8String]];
  }
  else {
    unint64_t v4 = "Unknown Model";
  }
  if ([a2 name]) {
    __int16 v5 = (const char *)[a2 name];
  }
  else {
    __int16 v5 = "Unknown Name";
  }
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_1022B88B0);
  }
  BOOL v6 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 68289795;
    v8[1] = 0;
    __int16 v9 = 2082;
    unint64_t v10 = "";
    __int16 v11 = 2082;
    unsigned __int16 v12 = v4;
    __int16 v13 = 2081;
    unint64_t v14 = v5;
    __int16 v15 = 2082;
    id v16 = [[objc_msgSend(a2, "effectiveIdentifier") UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Rapport lost nearby device\", \"model\":%{public, location:escape_only}s, \"name\":%{private, location:escape_only}s, \"effectiveID\":%{public, location:escape_only}s}", (uint8_t *)v8, 0x30u);
  }
  return [*(id *)(a1 + 32) updateNearbyStatusWithCompanionLinkDevice:a2 didConnect:0];
}

void sub_10051C49C(uint64_t a1, void *a2)
{
  id v4 = [a2 objectForKeyedSubscript:@"kCLLocationStreamingMessageKeyPayload"];
  id v5 = [a2 objectForKeyedSubscript:@"kCLLocationStreamingMessageKeyType"];
  if (v5)
  {
    BOOL v6 = v5;
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B88B0);
    }
    __int16 v7 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v19 = 2082;
      size_t v20 = "";
      __int16 v21 = 2082;
      id v22 = [v6 UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Rapport Got message\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    signed int v8 = [[a2 objectForKeyedSubscript:@"kCLLocationStreamingMessageKeyVersion"] intValue];
    sub_10051C8A0();
    sub_100134750(buf, (char *)[v6 UTF8String]);
    uint64_t v9 = sub_10012FFE0((uint64_t)&qword_10247B248, (const void **)buf);
    if (SBYTE3(v22) < 0) {
      operator delete(*(void **)buf);
    }
    if ((uint64_t *)v9 == &qword_10247B250)
    {
      int v10 = -1;
      int v11 = -1;
    }
    else
    {
      int v11 = *(_DWORD *)(v9 + 56);
      int v10 = *(_DWORD *)(v9 + 60);
      if (v8 >= v11 && v8 <= v10)
      {
        unsigned __int16 v12 = *(void **)(a1 + 32);
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472;
        void v17[2] = sub_10051C950;
        _OWORD v17[3] = &unk_1022B87A0;
        v17[4] = v6;
        v17[5] = v4;
        [v12 withClients:v17];
        return;
      }
    }
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B88B0);
    }
    __int16 v15 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = [v6 UTF8String];
      *(_DWORD *)int buf = 68290050;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v19 = 2082;
      size_t v20 = "";
      __int16 v21 = 2082;
      id v22 = v16;
      __int16 v23 = 1026;
      signed int v24 = v8;
      __int16 v25 = 1026;
      int v26 = v11;
      __int16 v27 = 1026;
      int v28 = v10;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received message of unsupported version\", \"type\":%{public, location:escape_only}s, \"declared version\":%{public}d, \"minimum version\":%{public}d, \"maximum version\":%{public}d}", buf, 0x2Eu);
    }
  }
  else
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B88B0);
    }
    __int16 v13 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 68289283;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v19 = 2082;
      size_t v20 = "";
      __int16 v21 = 2113;
      id v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Rapport Missing message type\", \"message\":%{private, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B88B0);
      }
    }
    unint64_t v14 = qword_102419548;
    if (os_signpost_enabled((os_log_t)qword_102419548))
    {
      *(_DWORD *)int buf = 68289283;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v19 = 2082;
      size_t v20 = "";
      __int16 v21 = 2113;
      id v22 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Rapport Missing message type", "{\"msg%{public}.0s\":\"#Rapport Missing message type\", \"message\":%{private, location:escape_only}@}", buf, 0x1Cu);
    }
  }
}

void sub_10051C87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10051C8A0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247B260, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247B260))
  {
    qword_10247B258 = 0;
    qword_10247B250 = 0;
    qword_10247B248 = (uint64_t)&qword_10247B250;
    __cxa_atexit((void (*)(void *))sub_10051E83C, &qword_10247B248, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10247B260);
  }
  if (qword_10247B268 != -1)
  {
    dispatch_once(&qword_10247B268, &stru_1022B88D0);
  }
}

id sub_10051C950(uint64_t a1, void *a2)
{
  return _[a2 receivedMessageOfType:*(void *)(a1 + 32) withPayload:*(void *)(a1 + 40)];
}

void sub_10051CB50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B88B0);
    }
    id v4 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_ERROR))
    {
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      int v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"IDS service failed to initialize\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
      if (qword_102419540 != -1) {
        dispatch_once(&qword_102419540, &stru_1022B88B0);
      }
    }
    id v5 = qword_102419548;
    if (os_signpost_enabled((os_log_t)qword_102419548))
    {
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      int v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "IDS service failed to initialize", "{\"msg%{public}.0s\":\"IDS service failed to initialize\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
    }
  }
  else
  {
    [*(id *)(a1 + 32) setService:a2];
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B88B0);
    }
    __int16 v7 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 68289026;
      int v9 = 0;
      __int16 v10 = 2082;
      int v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"IDS became available so resuming silo\"}", (uint8_t *)&v8, 0x12u);
    }
    [*(id *)(a1 + 40) resume];
  }
}

id sub_10051D4BC(uint64_t a1, void *a2)
{
  return _[a2 failedToSendMessage:*(void *)(a1 + 32) withError:*(void *)(a1 + 40) isFatal:*(unsigned char *)(a1 + 48) == 0];
}

void sub_10051D8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 160), 8);
  _Unwind_Resume(a1);
}

id sub_10051D8D4(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = a2;
  if (a2) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B88B0);
    }
    id v3 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
    {
      id v4 = [[objc_msgSend(*(id *)(a1 + 32), "messageType") UTF8String];
      *(_DWORD *)int buf = 68289282;
      int v16 = 0;
      __int16 v17 = 2082;
      unint64_t v18 = "";
      __int16 v19 = 2082;
      *(void *)size_t v20 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Rapport Send success\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10051DB78;
    void v13[3] = &unk_1022B8728;
    id v5 = *(void **)(a1 + 40);
    v13[4] = *(void *)(a1 + 32);
    BOOL v6 = v13;
  }
  else
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022B88B0);
    }
    __int16 v7 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      id v10 = [[objc_msgSend(*(id *)(a1 + 32), "messageType") UTF8String];
      *(_DWORD *)int buf = 68289794;
      int v16 = 0;
      __int16 v17 = 2082;
      unint64_t v18 = "";
      __int16 v19 = 1026;
      *(_DWORD *)size_t v20 = v8;
      *(_WORD *)&v20[4] = 2114;
      *(void *)&v20[6] = v9;
      __int16 v21 = 2082;
      id v22 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning #Rapport failed to send event\", \"writtenToNetworkStack\":%{public}d, \"error\":%{public, location:escape_only}@, \"type\":%{public, location:escape_only}s}", buf, 0x2Cu);
    }
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10051DB60;
    v14[3] = &unk_1022B8840;
    id v5 = *(void **)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 48);
    v14[4] = *(void *)(a1 + 32);
    v14[5] = v11;
    BOOL v6 = v14;
  }
  return [v5 withClients:v6];
}

id sub_10051DB60(uint64_t a1, void *a2)
{
  return _[a2 failedToSendMessage:*(void *)(a1 + 32) withError:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) isFatal:0];
}

id sub_10051DB78(uint64_t a1, void *a2)
{
  return _[a2 successfullySentMessage:*(void *)(a1 + 32)];
}

id sub_10051DB84(void *a1, void *a2)
{
  return _[a2 failedToSendMessage:a1[4] withError:*(void *)(*(void *)(a1[5] + 8) + 40) isFatal:*(unsigned char *)(*(void *)(a1[6] + 8) + 24) == 0];
}

void sub_10051E224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_10051E248(uint64_t a1, void *a2)
{
  return _[a2 receivedMessageOfType:*(void *)(a1 + 32) withPayload:*(void *)(a1 + 40)];
}

id sub_10051E6FC(uint64_t a1, void *a2)
{
  return _[a2 failedToSendMessage:*(void *)(a1 + 32) withError:*(void *)(a1 + 40) isFatal:0];
}

id sub_10051E70C(uint64_t a1, void *a2)
{
  return _[a2 successfullySentMessage:*(void *)(a1 + 32)];
}

void sub_10051E80C(id a1)
{
  qword_102419548 = (uint64_t)os_log_create("com.apple.locationd.Core", "Streaming");
}

uint64_t sub_10051E83C(uint64_t a1)
{
  return a1;
}

void sub_10051E868(id a1)
{
  sub_100103240();
  if (sub_100106424())
  {
    sub_100134750(__p, (char *)[@"kCLLocationStreamingMessageTypeRequestLocation" UTF8String]);
    id v3 = __p;
    *((void *)sub_1002A196C((uint64_t **)&qword_10247B248, (const void **)__p, (uint64_t)&unk_101D0B290, (_OWORD **)&v3)
    + 7) = 0;
    if (v2 < 0) {
      operator delete(__p[0]);
    }
    sub_100134750(__p, (char *)[@"kCLLocationStreamingMessageTypeSetMotionAlarm" UTF8String]);
    id v3 = __p;
    *((void *)sub_1002A196C((uint64_t **)&qword_10247B248, (const void **)__p, (uint64_t)&unk_101D0B290, (_OWORD **)&v3)
    + 7) = 0;
    if (v2 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100103240();
  if (sub_10010145C())
  {
    sub_100134750(__p, (char *)[@"kCLLocationStreamingMessageTypeLocation" UTF8String]);
    id v3 = __p;
    *((void *)sub_1002A196C((uint64_t **)&qword_10247B248, (const void **)__p, (uint64_t)&unk_101D0B290, (_OWORD **)&v3)
    + 7) = 0;
    if (v2 < 0) {
      operator delete(__p[0]);
    }
    sub_100134750(__p, (char *)[@"kCLLocationStreamingMessageTypeAliveAgain" UTF8String]);
    id v3 = __p;
    *((void *)sub_1002A196C((uint64_t **)&qword_10247B248, (const void **)__p, (uint64_t)&unk_101D0B290, (_OWORD **)&v3)
    + 7) = 0;
    if (v2 < 0) {
      operator delete(__p[0]);
    }
    sub_100134750(__p, (char *)[@"kCLLocationStreamingMessageTypeMotionAlarmUpdate" UTF8String]);
    id v3 = __p;
    *((void *)sub_1002A196C((uint64_t **)&qword_10247B248, (const void **)__p, (uint64_t)&unk_101D0B290, (_OWORD **)&v3)
    + 7) = 0;
    if (v2 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_10051EA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

Class sub_10051EA88()
{
  if (qword_10247B278 != -1) {
    dispatch_once(&qword_10247B278, &stru_1022B88F0);
  }
  Class result = objc_getClass("NRPairedDeviceRegistry");
  qword_10247B270 = (uint64_t)result;
  off_10241C208 = sub_10051EAEC;
  return result;
}

uint64_t sub_10051EAEC()
{
  return qword_10247B270;
}

void sub_10051EAF8(id a1)
{
  qword_10247B280 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry", 2);
}

uint64_t sub_10051EB24()
{
  if (qword_10247B278 != -1) {
    dispatch_once(&qword_10247B278, &stru_1022B88F0);
  }
  float v0 = (uint64_t *)dlsym((void *)qword_10247B280, "NRDevicePropertySystemVersion");
  if (v0)
  {
    uint64_t result = *v0;
    qword_10247B288 = result;
  }
  else
  {
    uint64_t result = qword_10247B288;
  }
  off_10241C210 = sub_10051EBA4;
  return result;
}

uint64_t sub_10051EBA4()
{
  return qword_10247B288;
}

void sub_10051EBB0(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10051EBE0()
{
}

void sub_10051ECEC(void *a1)
{
}

void sub_10051ECF8(_Unwind_Exception *a1)
{
}

uint64_t sub_10051ED2C(void *a1)
{
  *a1 = off_1022B8940;
  char v2 = (std::__shared_weak_count *)a1[18];
  if (v2) {
    sub_1000DB0A0(v2);
  }

  return sub_100AFED44(a1);
}

void sub_10051ED8C(void *a1)
{
  sub_10051ED2C(a1);

  operator delete();
}

void sub_10051EDC8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10051EE04(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

uint64_t sub_10051EE48(uint64_t a1, const __CFString *a2, char a3, uint64_t a4)
{
  int v8 = sub_1000E9174((void *)a1);
  void *v8 = off_1022B8D80;
  *((unsigned char *)v8 + 16) = 0;
  *(_OWORD *)(v8 + 3) = 0u;
  uint64_t v9 = (void **)(v8 + 3);
  *(_OWORD *)(v8 + 5) = 0u;
  *(_OWORD *)(v8 + 7) = 0u;
  v8[10] = a4;
  v8[11] = -1;
  *((unsigned char *)v8 + 96) = a3;
  sub_1000E9174(v8 + 13);
  *(void *)(a1 + 104) = off_1022B9148;
  sub_1000E9174((void *)(a1 + 120));
  *(void *)(a1 + 120) = off_1022B9148;
  *(void *)(a1 + 72) = a2;
  CFRetain(a2);
  CFRetain(*(CFTypeRef *)(a1 + 80));
  sub_1000FECE0(*(const __CFString **)(a1 + 80), (uint64_t)&v57);
  if (v58 >= 0) {
    id v10 = (const char *)&v57;
  }
  else {
    id v10 = (const char *)v57;
  }
  uint64_t v11 = getpwnam(v10);
  if (v11)
  {
    *(void *)(a1 + 88) = *(void *)&v11->pw_uid;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B9520);
    }
    __int16 v12 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      uint64_t v13 = &v57;
      if (v58 < 0) {
        uint64_t v13 = (long long *)v57;
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "could not read user %{public}s uid/gid", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B9520);
      }
      unsigned __int16 v44 = &v57;
      if (v58 < 0) {
        unsigned __int16 v44 = (long long *)v57;
      }
      LODWORD(v59.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v44;
      unsigned __int16 v45 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLPreferences::CLPreferences(CFStringRef, BOOL, CFStringRef)", "%s\n", (const char *)v45);
      if (v45 != buf) {
        free(v45);
      }
    }
  }
  if (SHIBYTE(v58) < 0)
  {
    sub_1000DC48C(__dst, (void *)v57, *((unint64_t *)&v57 + 1));
  }
  else
  {
    *(_OWORD *)__dst = v57;
    uint64_t v55 = v58;
  }
  sub_10053B3A0((uint64_t *)__dst, &v56);
  unint64_t v14 = std::string::append(&v56, "/Library/Preferences/");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  sub_1000FECE0(a2, (uint64_t)&v51);
  if ((v53 & 0x80u) == 0) {
    int v16 = (const std::string::value_type *)&v51;
  }
  else {
    int v16 = (const std::string::value_type *)v51;
  }
  if ((v53 & 0x80u) == 0) {
    std::string::size_type v17 = v53;
  }
  else {
    std::string::size_type v17 = v52;
  }
  unint64_t v18 = std::string::append(&v59, v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  sub_100134750(&__p, ".plist");
  if ((v50 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v50 & 0x80u) == 0) {
    std::string::size_type v21 = v50;
  }
  else {
    std::string::size_type v21 = v49;
  }
  id v22 = std::string::append(buf, p_p, v21);
  std::string::size_type v23 = v22->__r_.__value_.__r.__words[0];
  v60[0] = v22->__r_.__value_.__l.__size_;
  *(void *)((char *)v60 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
  char v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v9);
  }
  uint64_t v25 = v60[0];
  *(void *)(a1 + 24) = v23;
  *(void *)(a1 + 32) = v25;
  *(void *)(a1 + 39) = *(void *)((char *)v60 + 7);
  *(unsigned char *)(a1 + 47) = v24;
  if ((char)v50 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  if ((char)v53 < 0) {
    operator delete(v51);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v55) < 0) {
    operator delete(__dst[0]);
  }
  if (SHIBYTE(v58) < 0)
  {
    sub_1000DC48C(v46, (void *)v57, *((unint64_t *)&v57 + 1));
  }
  else
  {
    *(_OWORD *)unsigned __int16 v46 = v57;
    uint64_t v47 = v58;
  }
  sub_10053B534((uint64_t)v46, &v56);
  int v26 = std::string::append(&v56, "/");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  sub_1000FECE0(a2, (uint64_t)&v51);
  if ((v53 & 0x80u) == 0) {
    int v28 = (const std::string::value_type *)&v51;
  }
  else {
    int v28 = (const std::string::value_type *)v51;
  }
  if ((v53 & 0x80u) == 0) {
    std::string::size_type v29 = v53;
  }
  else {
    std::string::size_type v29 = v52;
  }
  unsigned __int8 v30 = std::string::append(&v59, v28, v29);
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  sub_100134750(&__p, ".plist");
  if ((v50 & 0x80u) == 0) {
    unsigned __int8 v32 = (const std::string::value_type *)&__p;
  }
  else {
    unsigned __int8 v32 = (const std::string::value_type *)__p;
  }
  if ((v50 & 0x80u) == 0) {
    std::string::size_type v33 = v50;
  }
  else {
    std::string::size_type v33 = v49;
  }
  char v34 = std::string::append(buf, v32, v33);
  std::string::size_type v35 = v34->__r_.__value_.__r.__words[0];
  v60[0] = v34->__r_.__value_.__l.__size_;
  *(void *)((char *)v60 + 7) = *(std::string::size_type *)((char *)&v34->__r_.__value_.__r.__words[1] + 7);
  char v36 = HIBYTE(v34->__r_.__value_.__r.__words[2]);
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v37 = v60[0];
  *(void *)(a1 + 48) = v35;
  *(void *)(a1 + 56) = v37;
  *(void *)(a1 + 63) = *(void *)((char *)v60 + 7);
  *(unsigned char *)(a1 + 71) = v36;
  if ((char)v50 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  if ((char)v53 < 0) {
    operator delete(v51);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete(v46[0]);
  }
  unsigned int v38 = getpwnam("root");
  BOOL v42 = 0;
  if (v38)
  {
    unsigned __int16 v39 = v38;
    uid_t pw_uid = v38->pw_uid;
    if (pw_uid == getuid())
    {
      gid_t pw_gid = v39->pw_gid;
      if (pw_gid == getgid()) {
        BOOL v42 = 1;
      }
    }
  }
  *(unsigned char *)(a1 + 16) = v42;
  sub_10051F604(a1);
  if (SHIBYTE(v58) < 0) {
    operator delete((void *)v57);
  }
  return a1;
}

void sub_10051F46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  sub_10013F374(v65);
  sub_10013F374(v64);
  if (*(char *)(v63 + 71) < 0) {
    operator delete(*(void **)(v63 + 48));
  }
  if (*(char *)(v63 + 47) < 0) {
    operator delete(*v66);
  }
  sub_10013F374((void *)v63);
  _Unwind_Resume(a1);
}

BOOL sub_10051F604(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)&unk_10247B290);
  char v2 = (void *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    char v2 = (void *)*v2;
  }
  sub_1004CEA84(a1 + 120, (uint64_t)v2);
  int v3 = CFPreferencesSynchronize(*(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), kCFPreferencesAnyHost);
  if (*(unsigned char *)(a1 + 16)) {
    sub_10051F77C(a1, 0);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_10247B290);
  return v3 != 0;
}

void sub_10051F68C(_Unwind_Exception *a1)
{
}

void *sub_10051F6AC(uint64_t a1)
{
  *(void *)a1 = off_1022B8D80;
  CFRelease(*(CFTypeRef *)(a1 + 72));
  CFRelease(*(CFTypeRef *)(a1 + 80));
  sub_10013F374((void *)(a1 + 120));
  sub_10013F374((void *)(a1 + 104));
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  return sub_10013F374((void *)a1);
}

void sub_10051F744(uint64_t a1)
{
  sub_10051F6AC(a1);

  operator delete();
}

void sub_10051F77C(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 96)) {
    return;
  }
  if (a2)
  {
    int v3 = (const char **)(a1 + 24);
    int v4 = *(char *)(a1 + 47);
    id v5 = (const char *)(a1 + 24);
    if (v4 < 0) {
      id v5 = *v3;
    }
    if (stat(v5, &v45))
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B9520);
      }
      BOOL v6 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v7 = v3;
        if (*(char *)(a1 + 47) < 0) {
          __int16 v7 = (void *)*v3;
        }
        int v8 = *__error();
        buf[0].st_dev = 136315394;
        *(void *)&buf[0].int st_mode = v7;
        WORD2(buf[0].st_ino) = 1024;
        *(_DWORD *)((char *)&buf[0].st_ino + 6) = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning could not check %s (errno %d)", (uint8_t *)buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B9520);
        }
        if (*(char *)(a1 + 47) < 0) {
          int v3 = (const char **)*v3;
        }
        int v9 = *__error();
        int v46 = 136315394;
        uint64_t v47 = v3;
        __int16 v48 = 1024;
        uid_t st_uid = v9;
        id v10 = (stat *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLPreferences::setFileAttributes(BOOL)", "%s\n");
LABEL_68:
        if (v10 != buf) {
          free(v10);
        }
        return;
      }
      return;
    }
    if (v45.st_uid == *(_DWORD *)(a1 + 88) && v45.st_gid == *(_DWORD *)(a1 + 92) && (~v45.st_mode & 0x1B6) == 0) {
      return;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B9520);
    }
    uint64_t v11 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v12 = (const char *)(a1 + 24);
      if (*(char *)(a1 + 47) < 0) {
        __int16 v12 = *v3;
      }
      gid_t v13 = *(_DWORD *)(a1 + 88);
      int v14 = *(_DWORD *)(a1 + 92);
      buf[0].st_dev = 136316674;
      *(void *)&buf[0].int st_mode = v12;
      WORD2(buf[0].st_ino) = 1024;
      *(_DWORD *)((char *)&buf[0].st_ino + 6) = v45.st_uid;
      HIWORD(buf[0].st_uid) = 1024;
      buf[0].st_gid = v13;
      LOWORD(buf[0].st_rdev) = 1024;
      *(dev_t *)((char *)&buf[0].st_rdev + 2) = v45.st_gid;
      *((_WORD *)&buf[0].st_rdev + 3) = 1024;
      LODWORD(buf[0].st_atimespec.tv_sec) = v14;
      WORD2(buf[0].st_atimespec.tv_sec) = 1024;
      *(_DWORD *)((char *)&buf[0].st_atimespec.tv_sec + 6) = v45.st_mode;
      WORD1(buf[0].st_atimespec.tv_nsec) = 1024;
      HIDWORD(buf[0].st_atimespec.tv_nsec) = 438;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning %s attributes incorrect (uid %d vs %d, gid %d vs %d, mode 0x%x vs 0x%x, resetting", (uint8_t *)buf, 0x30u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B9520);
      }
      if (*(char *)(a1 + 47) < 0) {
        int v3 = (const char **)*v3;
      }
      int v37 = *(_DWORD *)(a1 + 88);
      int v38 = *(_DWORD *)(a1 + 92);
      int v46 = 136316674;
      uint64_t v47 = v3;
      __int16 v48 = 1024;
      uid_t st_uid = v45.st_uid;
      __int16 v50 = 1024;
      *(_DWORD *)unsigned __int16 v51 = v37;
      *(_WORD *)&v51[4] = 1024;
      *(_DWORD *)&v51[6] = v45.st_gid;
      __int16 v52 = 1024;
      int v53 = v38;
      __int16 v54 = 1024;
      int st_mode = v45.st_mode;
      __int16 v56 = 1024;
      int v57 = 438;
      unsigned __int16 v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPreferences::setFileAttributes(BOOL)", "%s\n", v39);
      if (v39 != (char *)buf) {
        free(v39);
      }
    }
  }
  long long v15 = (char **)(a1 + 24);
  int v16 = (char *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    int v16 = *v15;
  }
  std::string::size_type v17 = (__CFString *)sub_1000B73E0(v16);
  if (v17)
  {
    unint64_t v18 = v17;
    long long v19 = (char *)[[-[__CFString pathComponents](v17, "pathComponents") count] - 1;
    if ((unint64_t)v19 >= 2)
    {
      size_t v20 = v18;
      do
      {
        size_t v20 = (__CFString *)[(__CFString *)v20 stringByDeletingLastPathComponent];
        if (([(__CFString *)v20 isEqualToString:@"/var"] & 1) == 0
          && ([(__CFString *)v20 isEqualToString:@"/tmp"] & 1) == 0
          && !lstat((const char *)[(__CFString *)v20 fileSystemRepresentation], buf)
          && (buf[0].st_mode & 0xF000) == 0xA000)
        {
          sub_101A646E0();
        }
        --v19;
      }
      while ((unint64_t)v19 > 1);
    }
    CFRelease(v18);
  }
  std::string::size_type v21 = (const char *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    std::string::size_type v21 = *v15;
  }
  if (!lstat(v21, &v45))
  {
    id v22 = (const char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0) {
      id v22 = *v15;
    }
    if (lchmod(v22, 0x1B6u))
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B9520);
      }
      std::string::size_type v23 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        char v24 = (char *)(a1 + 24);
        if (*(char *)(a1 + 47) < 0) {
          char v24 = *v15;
        }
        int v25 = *__error();
        int v26 = __error();
        long long v27 = strerror(*v26);
        buf[0].st_dev = 136446722;
        *(void *)&buf[0].int st_mode = v24;
        WORD2(buf[0].st_ino) = 1026;
        *(_DWORD *)((char *)&buf[0].st_ino + 6) = v25;
        HIWORD(buf[0].st_uid) = 2082;
        *(void *)&buf[0].st_gid = v27;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "could not lchmod %{public}s errno %{public}d (%{public}s)", (uint8_t *)buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B9520);
        }
        unsigned __int8 v40 = (char *)(a1 + 24);
        if (*(char *)(a1 + 47) < 0) {
          unsigned __int8 v40 = *v15;
        }
        int v41 = *__error();
        BOOL v42 = __error();
        unsigned __int16 v43 = strerror(*v42);
        int v46 = 136446722;
        uint64_t v47 = v40;
        __int16 v48 = 1026;
        uid_t st_uid = v41;
        __int16 v50 = 2082;
        *(void *)unsigned __int16 v51 = v43;
        unsigned __int16 v44 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLPreferences::setFileAttributes(BOOL)", "%s\n", v44);
        if (v44 != (char *)buf) {
          free(v44);
        }
      }
    }
    int v28 = (const char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0) {
      int v28 = *v15;
    }
    if (lchown(v28, *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92)))
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B9520);
      }
      std::string::size_type v29 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        unsigned __int8 v30 = (char *)(a1 + 24);
        if (*(char *)(a1 + 47) < 0) {
          unsigned __int8 v30 = *v15;
        }
        int v31 = *__error();
        unsigned __int8 v32 = __error();
        std::string::size_type v33 = strerror(*v32);
        buf[0].st_dev = 136446722;
        *(void *)&buf[0].int st_mode = v30;
        WORD2(buf[0].st_ino) = 1026;
        *(_DWORD *)((char *)&buf[0].st_ino + 6) = v31;
        HIWORD(buf[0].st_uid) = 2082;
        *(void *)&buf[0].st_gid = v33;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "could not lchown %{public}s errno %{public}d (%{public}s)", (uint8_t *)buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B9520);
        }
        if (*(char *)(a1 + 47) < 0) {
          long long v15 = (char **)*v15;
        }
        int v34 = *__error();
        std::string::size_type v35 = __error();
        char v36 = strerror(*v35);
        int v46 = 136446722;
        uint64_t v47 = v15;
        __int16 v48 = 1026;
        uid_t st_uid = v34;
        __int16 v50 = 2082;
        *(void *)unsigned __int16 v51 = v36;
        id v10 = (stat *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLPreferences::setFileAttributes(BOOL)", "%s\n");
        goto LABEL_68;
      }
    }
  }
}

uint64_t sub_100520038(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

CFArrayRef sub_100520040(CFStringRef *a1)
{
  CFArrayRef result = CFPreferencesCopyKeyList(a1[9], a1[10], kCFPreferencesCurrentHost);
  if (result)
  {
    CFArrayRef v3 = result;
    CFPreferencesSetMultiple(0, result, a1[9], a1[10], kCFPreferencesCurrentHost);
    CFRelease(v3);
    data = (*a1)[26].data;
    return (const __CFArray *)((uint64_t (*)(CFStringRef *))data)(a1);
  }
  return result;
}

uint64_t sub_100520100(CFStringRef *a1, CFStringRef key)
{
  CFPreferencesSetValue(key, 0, a1[9], a1[10], kCFPreferencesCurrentHost);
  data = (*a1)[26].data;

  return ((uint64_t (*)(CFStringRef *))data)(a1);
}

CFIndex sub_100520184(uint64_t a1)
{
  CFArrayRef v1 = CFPreferencesCopyKeyList(*(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), kCFPreferencesCurrentHost);
  if (!v1) {
    return 0;
  }
  CFArrayRef v2 = v1;
  CFIndex Count = CFArrayGetCount(v1);
  CFRelease(v2);
  return Count;
}

CFIndex sub_1005201DC(uint64_t a1, CFStringRef key)
{
  CFArrayRef v2 = (const __CFArray *)CFPreferencesCopyValue(key, *(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), kCFPreferencesCurrentHost);
  if (!v2) {
    return 0;
  }
  CFArrayRef v3 = v2;
  CFTypeID v4 = CFGetTypeID(v2);
  if (v4 == CFArrayGetTypeID()) {
    CFIndex Count = CFArrayGetCount(v3);
  }
  else {
    CFIndex Count = 1;
  }
  CFRelease(v3);
  return Count;
}

uint64_t sub_100520258()
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022B9520);
  }
  float v0 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B9520);
    }
    CFArrayRef v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLPreferences::serialize(CFDataRef *) const", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 0;
}

uint64_t sub_1005203E4()
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022B9520);
  }
  float v0 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B9520);
    }
    CFArrayRef v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLPreferences::serializeBinary(CFDataRef *) const", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 0;
}

uint64_t sub_100520570()
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022B9520);
  }
  float v0 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B9520);
    }
    CFArrayRef v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLPreferences::deserialize(const CFDataRef)", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 0;
}

void sub_1005206FC(const __CFString *a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  if ((*(unsigned int (**)(uint64_t, const __CFString *, CFTypeRef *))(*(void *)a2 + 912))(a2, a1, &cf))
  {
    sub_1004D6F54(a1, (const __CFString *)cf);
    CFRelease(cf);
  }
}

void sub_10052077C(CFStringRef *a1)
{
  if (qword_102419640 != -1) {
    dispatch_once(&qword_102419640, &stru_1022B9540);
  }
  if (os_log_type_enabled((os_log_t)qword_102419648, OS_LOG_TYPE_DEBUG))
  {
    if (!sub_1004D5EE4((uint64_t)(a1 + 15))) {
      sub_1004D68E0((uint64_t)(a1 + 15));
    }
    CFArrayRef v2 = CFPreferencesCopyKeyList(a1[9], a1[10], kCFPreferencesCurrentHost);
    CFArrayRef v3 = v2;
    if (v2 && CFArrayGetCount(v2))
    {
      v8.length = CFArrayGetCount(v3);
      v8.location = 0;
      CFArrayApplyFunction(v3, v8, (CFArrayApplierFunction)sub_1005206FC, a1);
      CFRelease(v3);
      if (!sub_1004D5EE4((uint64_t)(a1 + 13)))
      {
        sub_1004D68E0((uint64_t)(a1 + 13));
      }
    }
    else
    {
      if (qword_102419640 != -1) {
        dispatch_once(&qword_102419640, &stru_1022B9540);
      }
      CFTypeID v4 = qword_102419648;
      if (os_log_type_enabled((os_log_t)qword_102419648, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "\t<empty>", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419640 != -1) {
          dispatch_once(&qword_102419640, &stru_1022B9540);
        }
        id v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPreferences::print() const", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
      if (v3) {
        CFRelease(v3);
      }
    }
  }
}

id sub_100520A18(uint64_t a1)
{
  id v2 = [(id)sub_1000E9358(a1 + 104) mutableCopy];
  CFDictionaryRef v3 = CFPreferencesCopyMultiple(0, *(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), kCFPreferencesCurrentHost);
  [v2 addEntriesFromDictionary:v3];
  CFRelease(v3);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_10247B290);
  [v2 addEntriesFromDictionary:sub_1000E9358(a1 + 120)];
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_10247B290);
  return v2;
}

void sub_100520AB0(_Unwind_Exception *a1)
{
}

void sub_100520AC8()
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022B9520);
  }
  float v0 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B9520);
    }
    CFArrayRef v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLPreferences::merge(const CLPreferences &, BOOL)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

uint64_t sub_100520C50()
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022B9520);
  }
  float v0 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B9520);
    }
    id v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLPreferences::loadFromFile(const char *)", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 0;
}

uint64_t sub_100520DDC()
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022B9520);
  }
  float v0 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B9520);
    }
    id v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLPreferences::saveToFile(const char *) const", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 0;
}

uint64_t sub_100520F68()
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022B9520);
  }
  float v0 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B9520);
    }
    id v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLPreferences::saveToBinaryFile(const char *) const", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 0;
}

void sub_1005210F4(uint64_t a1, CFStringRef key, CFPropertyListRef value)
{
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B9520);
    }
    id v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      BOOL v6 = v24;
      sub_1000FECE0(key, (uint64_t)v24);
      if (v27 < 0) {
        BOOL v6 = *(unsigned char **)v24;
      }
      sub_1000FECE0(*(const __CFString **)(a1 + 72), (uint64_t)v22);
      int v7 = v23;
      CFRange v8 = (void **)v22[0];
      sub_1000FECE0(*(const __CFString **)(a1 + 80), (uint64_t)__p);
      int v9 = v22;
      if (v7 < 0) {
        int v9 = v8;
      }
      if (v21 >= 0) {
        id v10 = __p;
      }
      else {
        id v10 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136446722;
      unsigned __int8 v30 = v6;
      __int16 v31 = 2082;
      unsigned __int8 v32 = v9;
      __int16 v33 = 2082;
      int v34 = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Attempt to set key %{public}s for read-only preferences %{public}s/%{public}s!", buf, 0x20u);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
      if (SHIBYTE(v27) < 0) {
        operator delete(*(void **)v24);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B9520);
      }
      sub_1000FECE0(key, (uint64_t)v22);
      if (v23 >= 0) {
        __int16 v12 = v22;
      }
      else {
        __int16 v12 = (void **)v22[0];
      }
      sub_1000FECE0(*(const __CFString **)(a1 + 72), (uint64_t)__p);
      int v13 = v21;
      int v14 = (void **)__p[0];
      sub_1000FECE0(*(const __CFString **)(a1 + 80), (uint64_t)v18);
      long long v15 = __p;
      if (v13 < 0) {
        long long v15 = v14;
      }
      if (v19 >= 0) {
        int v16 = v18;
      }
      else {
        int v16 = (void **)v18[0];
      }
      *(_DWORD *)char v24 = 136446722;
      *(void *)&v24[4] = v12;
      __int16 v25 = 2082;
      int v26 = v15;
      __int16 v27 = 2082;
      int v28 = v16;
      std::string::size_type v17 = (char *)_os_log_send_and_compose_impl();
      if (v19 < 0) {
        operator delete(v18[0]);
      }
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLPreferences::setInternal(const CFStringRef, const CFTypeRef)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
  else
  {
    CFPreferencesSetValue(key, value, *(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), kCFPreferencesCurrentHost);
    uint64_t v11 = *(void (**)(uint64_t))(*(void *)a1 + 848);
    v11(a1);
  }
}

void sub_1005214A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_100521514()
{
  if (qword_102419630 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    float v0 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      BOOL v6 = "";
      __int16 v7 = 2082;
      CFRange v8 = "assert";
      __int16 v9 = 2081;
      id v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B9520);
      }
    }
    CFArrayRef v1 = qword_102419638;
    if (os_signpost_enabled((os_log_t)qword_102419638))
    {
      *(_DWORD *)int buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      BOOL v6 = "";
      __int16 v7 = 2082;
      CFRange v8 = "assert";
      __int16 v9 = 2081;
      id v10 = "0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B9520);
      }
    }
    id v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      BOOL v6 = "";
      __int16 v7 = 2082;
      CFRange v8 = "assert";
      __int16 v9 = 2081;
      id v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419630, &stru_1022B9520);
  }
}

CFStringRef sub_100521738()
{
  return @"OtherPref";
}

void sub_100521744(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100521774(id a1)
{
  qword_102419648 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Direct_deprecated");
}

void sub_1005217A4()
{
}

void sub_1005217E8()
{
}

void sub_10052180C(uint64_t a1)
{
}

uint64_t sub_100521898()
{
  if (qword_10247B298 != -1) {
    dispatch_once(&qword_10247B298, &stru_1022B9560);
  }
  return qword_102489FA0;
}

void *sub_1005218E0(void *a1)
{
  *a1 = off_1022B9590;
  sub_10052583C(a1 + 13);
  sub_10052583C(a1 + 7);
  id v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    sub_1000DB0A0(v2);
  }

  return sub_1009D1DE4(a1);
}

void sub_10052194C(void *a1)
{
  sub_1005218E0(a1);

  operator delete();
}

BOOL sub_100521984()
{
  CFDictionaryRef v0 = IOServiceMatching("AppleEmbeddedBluetoothSensors");
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v0);
  io_service_t v2 = MatchingService;
  if (MatchingService) {
    IOObjectRelease(MatchingService);
  }
  return v2 != 0;
}

void sub_1005219DC(uint64_t a1, int a2)
{
  if (sub_100521984())
  {
    if (!*(void *)(a1 + 40))
    {
      uint64_t v4 = sub_1000D3E78();
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3321888768;
      v16[2] = sub_100521E48;
      v16[3] = &unk_1022B95C0;
      v16[4] = a1;
      v16[5] = 0x100000FF00;
      char v17 = 0;
      sub_1009E8E94(v4, (uint64_t)v16);
    }
    BOOL v15 = 0;
    uint64_t v5 = sub_1000D3E78();
    sub_10006B564(v5, buf);
    sub_1000D2988(*(uint64_t *)buf, "DeviceMotionLiteForceDebug", &v15);
    if (v21) {
      sub_1000DB0A0(v21);
    }
    if (*(unsigned char *)(a1 + 170) && v15 && a2)
    {
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022B9608);
      }
      BOOL v6 = qword_102419088;
      if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Forcing debug mode", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022B9608);
        }
        LOWORD(v18) = 0;
        int v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::configureDeviceMotionLite(CLMotionTypeDeviceMotionLiteConfigure)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      __int16 v7 = &off_102392600;
    }
    else
    {
      CFRange v8 = &off_1023925E8;
      if (a2 == 1) {
        CFRange v8 = &off_102392618;
      }
      if (a2 == 2) {
        __int16 v7 = &off_102392600;
      }
      else {
        __int16 v7 = v8;
      }
    }
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9608);
    }
    __int16 v9 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
    {
      unsigned int v10 = [v7 intValue];
      *(_DWORD *)int buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Setting DeviceMotionLite ReportInterval to %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022B9608);
      }
      unsigned int v12 = [v7 intValue];
      int v18 = 67240192;
      unsigned int v19 = v12;
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::configureDeviceMotionLite(CLMotionTypeDeviceMotionLiteConfigure)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    (*(void (**)(void, const __CFString *, _UNKNOWN **))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), @"ReportInterval", v7);
    uint64_t v11 = *(uint64_t **)(a1 + 40);
    if (a2) {
      sub_100A2932C(v11, (uint64_t)sub_100521EF4, a1);
    }
    else {
      sub_100A2932C(v11, 0, 0);
    }
  }
}

void sub_100521E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    sub_1000DB0A0(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_100521E48(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  io_service_t v2 = *(uint64_t **)(v1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  int v6 = *(_DWORD *)(a1 + 48);
  sub_101A46D60(v2, (uint64_t)&v5, (uint64_t *)&v7);
  long long v3 = v7;
  long long v7 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 48);
  *(_OWORD *)(v1 + 40) = v3;
  if (v4)
  {
    sub_1000DB0A0(v4);
    if (*((void *)&v7 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v7 + 1));
    }
  }
  sub_100A2932C(*(uint64_t **)(v1 + 40), (uint64_t)sub_100521EF4, v1);
  sub_100A29A24(*(void *)(v1 + 40), (uint64_t)sub_100521EF8, v1);
  sub_100521F74(v1);
}

void sub_100521EF8(uint64_t a1)
{
  uint64_t v2 = sub_1000D3E78();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100522198;
  v3[3] = &unk_1022A3020;
  v3[4] = a1;
  sub_1009E8E94(v2, (uint64_t)v3);
}

void sub_100521F74(uint64_t a1)
{
  *(unsigned char *)(a1 + 170) = [[*(uint64_t (**)(void, const __CFString *))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), @"UsesCompass") boolValue];
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022B9608);
  }
  uint64_t v2 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 170)) {
      long long v3 = "is";
    }
    else {
      long long v3 = "is not";
    }
    *(_DWORD *)int buf = 136446210;
    int v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "DeviceMotionLite %{public}s using compass", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9608);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::refreshUsingCompass()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

void sub_100522198(uint64_t a1)
{
}

uint64_t sub_1005221A0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned __int8 v6 = *(unsigned char *)(a3 + 1) - *(unsigned char *)(a1 + 153);
  if (v6 >= 2u)
  {
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9608);
    }
    long long v7 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(unsigned __int8 *)(a1 + 153);
      int v9 = *(unsigned __int8 *)(a3 + 1);
      LODWORD(buf) = 67240448;
      DWORD1(buf) = v8;
      WORD4(buf) = 1026;
      *(_DWORD *)((char *)&buf + 10) = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Jump in message sequence number: last=%{public}d, this=%{public}d", (uint8_t *)&buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022B9608);
      }
      int v23 = *(unsigned __int8 *)(a1 + 153);
      int v24 = *(unsigned __int8 *)(a3 + 1);
      LODWORD(v26) = 67240448;
      HIDWORD(v26) = v23;
      LOWORD(v27) = 1026;
      *(_DWORD *)((char *)&v27 + 2) = v24;
      __int16 v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleRawSensorV2Msg(uint64_t, RawSensorV2Msg &)", "%s\n", v25);
      if (v25 != (char *)&buf) {
        free(v25);
      }
    }
  }
  *(unsigned char *)(a1 + 153) = *(unsigned char *)(a3 + 1);
  uint64_t v29 = 0;
  uint64_t v26 = *(void *)(a1 + 160);
  unint64_t v27 = a2;
  v10.i32[0] = *(__int16 *)(a3 + 6);
  v10.i32[1] = *(__int16 *)(a3 + 8);
  float32x2_t v11 = (float32x2_t)vdup_n_s32(0x37800000u);
  float32x2_t v28 = vmul_f32(vmul_f32(vcvt_f32_s32(v10), (float32x2_t)0x4200000042000000), v11);
  *(float *)&uint64_t v29 = (float)((float)*(__int16 *)(a3 + 10) * 32.0) * 0.000015259;
  *(double *)&long long buf = (double)a2;
  sub_1000E7BA0(a1, 4, (uint64_t)&v26, 32);
  uint64_t v12 = 0;
  char v13 = 1;
  float32x2_t v14 = (float32x2_t)vdup_n_s32(0x457A0000u);
  do
  {
    char v15 = v13;
    *(void *)&long long buf = *(void *)(a1 + 160) + 5000 * v12;
    *((void *)&buf + 1) = a2;
    float v31 = (float)*(__int16 *)(a3 + 24) / 100.0;
    int v16 = (__int16 *)(a3 + 6 * v12);
    v17.i32[0] = v16[6];
    v17.i32[1] = v16[7];
    *(float32x2_t *)unsigned __int8 v32 = vmul_f32(vmul_f32(vcvt_f32_s32(v17), v14), v11);
    *(float *)&v32[8] = (float)((float)v16[8] * 4000.0) * 0.000015259;
    sub_1000E7BA0(a1, 5, (uint64_t)&buf, 32);
    char v13 = 0;
    uint64_t v12 = 1;
  }
  while ((v15 & 1) != 0);
  *(void *)(a1 + 160) += 10000 * v6;
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022B9608);
  }
  int v18 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v19 = *(void *)(a1 + 160);
    LODWORD(buf) = 134349056;
    *(void *)((char *)&buf + 4) = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Updating mag timestamp to %{public}llu", (uint8_t *)&buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9608);
    }
    id v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleRawSensorV2Msg(uint64_t, RawSensorV2Msg &)", "%s\n", v22);
    if (v22 != (char *)&buf) {
      free(v22);
    }
  }
  *(void *)&v32[4] = 0;
  *(void *)&long long buf = *(void *)(a1 + 160);
  *((void *)&buf + 1) = a2;
  float v20 = (float)*(__int16 *)(a3 + 28) * 0.075;
  float v31 = (float)*(__int16 *)(a3 + 26) * 0.075;
  *(float *)unsigned __int8 v32 = v20;
  *(float *)&v32[4] = (float)*(__int16 *)(a3 + 30) * 0.075;
  return sub_1000E7BA0(a1, 6, (uint64_t)&buf, 32);
}

float sub_100522694@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  float v4 = *(float *)(a3 + 4);
  float v5 = *(float *)(a3 + 8);
  float v6 = sqrtf(fmaxf((float)((float)(1.0 - (float)(*(float *)a3 * *(float *)a3)) - (float)(v4 * v4)) - (float)(v5 * v5), 0.0));
  double v7 = *(float *)a3;
  float v8 = (float)*(__int16 *)(a3 + 20) / 1000.0;
  int v9 = *(__int16 *)(a3 + 22);
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(double *)a4 = v6;
  *(double *)(a4 + 8) = v7;
  *(double *)(a4 + 16) = v4;
  *(double *)(a4 + 24) = v5;
  *(float32x4_t *)(a4 + 32) = vdivq_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)(a3 + 12))), (float32x4_t)vdupq_n_s32(0x447A0000u));
  float result = (float)v9 / 1000.0;
  *(float *)(a4 + 48) = v8;
  *(float *)(a4 + 52) = result;
  *(void *)(a4 + 56) = 0;
  *(void *)(a4 + 64) = 0;
  *(void *)(a4 + 72) = 0;
  *(void *)(a4 + 80) = a2;
  *(unsigned char *)(a4 + 88) = *(unsigned char *)(a1 + 170);
  *(void *)(a4 + 100) = 0;
  *(void *)(a4 + 92) = 0;
  *(void *)(a4 + 107) = 0;
  return result;
}

void sub_100522738(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v6 = *(unsigned char *)(a3 + 24) & 0xC0;
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022B9608);
  }
  double v7 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *(unsigned __int8 *)(a3 + 24);
    *(_DWORD *)long long buf = 67240448;
    int v11 = v6;
    __int16 v12 = 1026;
    int v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "FusedWithStatus msgType,%{public}u,infoByte,%{public}u", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9608);
    }
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleFusedSizedStruct(uint64_t, FusedStructWithStatus &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (v6 == 64) {
    sub_10052293C(a1, a2, a3);
  }
  else {
    sub_1005232B0(a1, a2, a3);
  }
}

void sub_10052293C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v6 = *(unsigned __int8 *)(a3 + 25);
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022B9608);
  }
  double v7 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
  {
    int v8 = *(unsigned __int8 *)(a1 + 168);
    uint64_t v9 = *(void *)(a1 + 144);
    *(_DWORD *)long long buf = 67240704;
    *(_DWORD *)&uint8_t buf[4] = v6;
    *(_WORD *)&uint8_t buf[8] = 1026;
    *(_DWORD *)&buf[10] = v8;
    __int16 v52 = 2050;
    uint64_t v53 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "On-start data from remote seqNo,%{public}u,fLastOnStartDebugSeqNo,%{public}u,bufferSize,%{public}zu", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9608);
    }
    int v37 = *(unsigned __int8 *)(a1 + 168);
    uint64_t v38 = *(void *)(a1 + 144);
    *(_DWORD *)__str = 67240704;
    *(_DWORD *)uint64_t v47 = v6;
    *(_WORD *)&v47[4] = 1026;
    *(_DWORD *)&v47[6] = v37;
    __int16 v48 = 2050;
    uint64_t v49 = v38;
    unsigned __int16 v39 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleOnStartFragment(uint64_t, FusedStructWithStatus &)", "%s\n", v39);
    if (v39 != buf) {
      free(v39);
    }
  }
  int32x2_t v10 = *(void ***)(a1 + 112);
  if (v6)
  {
    int v11 = *(void ***)(a1 + 120);
    goto LABEL_16;
  }
  int v11 = *(void ***)(a1 + 120);
  *(void *)(a1 + 144) = 0;
  unint64_t v12 = (char *)v11 - (char *)v10;
  if ((unint64_t)((char *)v11 - (char *)v10) >= 0x11)
  {
    do
    {
      operator delete(*v10);
      int v11 = *(void ***)(a1 + 120);
      int32x2_t v10 = (void **)(*(void *)(a1 + 112) + 8);
      *(void *)(a1 + 112) = v10;
      unint64_t v12 = (char *)v11 - (char *)v10;
    }
    while ((unint64_t)((char *)v11 - (char *)v10) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 2048;
    goto LABEL_14;
  }
  if (v13 == 2)
  {
    uint64_t v14 = 4096;
LABEL_14:
    *(void *)(a1 + 136) = v14;
  }
  *(unsigned char *)(a1 + 168) = 0;
LABEL_16:
  unint64_t v15 = *(void *)(a1 + 136) + *(void *)(a1 + 144);
  int v16 = (char *)&v10[v15 >> 12];
  if (v11 == v10) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = *(void *)v16 + (v15 & 0xFFF);
  }
  sub_1005258E4((int64x2_t *)(a1 + 104), v16, v17, (char *)a3, (char *)(a3 + 24), 0x18uLL);
  if ((v6 - *(unsigned char *)(a1 + 168)) >= 2u)
  {
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9608);
    }
    int v18 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = *(unsigned __int8 *)(a1 + 168);
      *(_DWORD *)long long buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Jump in on-start sequence numbers last,%{public}u,this,%{public}u", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022B9608);
      }
      int v40 = *(unsigned __int8 *)(a1 + 168);
      *(_DWORD *)__str = 67240448;
      *(_DWORD *)uint64_t v47 = v6;
      *(_WORD *)&v47[4] = 1026;
      *(_DWORD *)&v47[6] = v40;
      int v41 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleOnStartFragment(uint64_t, FusedStructWithStatus &)", "%s\n", v41);
      if (v41 != buf) {
        free(v41);
      }
    }
    float v20 = *(void ***)(a1 + 112);
    uint64_t v21 = *(void *)(a1 + 120);
    *(void *)(a1 + 144) = 0;
    unint64_t v22 = v21 - (void)v20;
    if (v22 >= 0x11)
    {
      do
      {
        operator delete(*v20);
        uint64_t v23 = *(void *)(a1 + 120);
        float v20 = (void **)(*(void *)(a1 + 112) + 8);
        *(void *)(a1 + 112) = v20;
        unint64_t v22 = v23 - (void)v20;
      }
      while (v22 > 0x10);
    }
    goto LABEL_46;
  }
  if (*(void *)(a1 + 144) >= 0xF0uLL)
  {
    for (uint64_t i = 0; i != 240; ++i)
    {
      int64x2_t v25 = vaddq_s64(*(int64x2_t *)(a1 + 136), (int64x2_t)xmmword_101D0A740);
      v50[i] = *(unsigned char *)(*(void *)(*(void *)(a1 + 112) + ((*(void *)(a1 + 136) >> 9) & 0x7FFFFFFFFFFFF8))
                        + (*(void *)(a1 + 136) & 0xFFFLL));
      *(int64x2_t *)(a1 + 136) = v25;
      sub_100526B90(a1 + 104, 1);
    }
    *(double *)long long buf = (double)a2;
    sub_1000E7BA0(a1, 9, (uint64_t)v50, 240);
    uint64_t v26 = 0;
    unint64_t v27 = __str;
    do
    {
      snprintf(v27, 3uLL, "%02hhX", v50[v26++]);
      v27 += 2;
    }
    while (v26 != 240);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9608);
    }
    float32x2_t v28 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = __str;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "OnStartMsg: %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022B9608);
      }
      unsigned __int16 v44 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleOnStartFragment(uint64_t, FusedStructWithStatus &)", "%s\n", v44);
      if (v44 != buf) {
        free(v44);
      }
    }
    if (!*(void *)(a1 + 144)) {
      goto LABEL_57;
    }
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9608);
    }
    uint64_t v29 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
    {
      uint64_t v30 = *(void *)(a1 + 144);
      *(_DWORD *)long long buf = 134349056;
      *(void *)&uint8_t buf[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "Discarding %{public}zu bytes from onstart packet", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022B9608);
      }
      stat v45 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleOnStartFragment(uint64_t, FusedStructWithStatus &)", "%s\n", v45);
      if (v45 != buf) {
        free(v45);
      }
    }
    float v31 = *(void ***)(a1 + 112);
    uint64_t v32 = *(void *)(a1 + 120);
    *(void *)(a1 + 144) = 0;
    unint64_t v22 = v32 - (void)v31;
    if (v22 >= 0x11)
    {
      do
      {
        operator delete(*v31);
        uint64_t v33 = *(void *)(a1 + 120);
        float v31 = (void **)(*(void *)(a1 + 112) + 8);
        *(void *)(a1 + 112) = v31;
        unint64_t v22 = v33 - (void)v31;
      }
      while (v22 > 0x10);
    }
LABEL_46:
    if (v22 >> 3 == 1)
    {
      uint64_t v34 = 2048;
    }
    else
    {
      if (v22 >> 3 != 2)
      {
LABEL_57:
        *(unsigned char *)(a1 + 168) = 0;
        return;
      }
      uint64_t v34 = 4096;
    }
    *(void *)(a1 + 136) = v34;
    goto LABEL_57;
  }
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022B9608);
  }
  std::string::size_type v35 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v36 = *(void *)(a1 + 144);
    *(_DWORD *)long long buf = 134349056;
    *(void *)&uint8_t buf[4] = v36;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "Accumulated %{public}zu bytes for onstart packet", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9608);
    }
    uint64_t v42 = *(void *)(a1 + 144);
    *(_DWORD *)__str = 134349056;
    *(void *)uint64_t v47 = v42;
    unsigned __int16 v43 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleOnStartFragment(uint64_t, FusedStructWithStatus &)", "%s\n", v43);
    if (v43 != buf) {
      free(v43);
    }
  }
  *(unsigned char *)(a1 + 168) = v6;
}

uint64_t sub_1005232B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v25 = 0u;
  sub_100522694(a1, a2, a3, (uint64_t)&v25);
  __int16 v7 = *(_WORD *)(a3 + 24);
  int v6 = (unsigned __int8 *)(a3 + 24);
  LOWORD(v32) = v7;
  BYTE2(v32) = v6[2];
  unsigned int v8 = *v6;
  int v9 = (v8 >> 4) & 3;
  int v10 = v8 & 0xF;
  LOWORD(v8) = ((v8 >> 4) & 3) - *(unsigned __int8 *)(a1 + 169) + 4;
  if ((v8 - ((v8 + ((unsigned __int16)(v8 & 0xC000) >> 14)) & 0xFC)) == 1)
  {
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9608);
    }
    int v11 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
    {
      int v12 = *(unsigned __int8 *)(a1 + 169);
      int v13 = *v6;
      *(_DWORD *)long long buf = 67240960;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v9;
      LOWORD(v72) = 1026;
      *(_DWORD *)((char *)&v72 + 2) = v10;
      HIWORD(v72) = 1026;
      *(_DWORD *)unsigned __int16 v73 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "handleFusedStruct(WithStatus) fLastFusedSeqNo,%{public}u,seqNo,%{public}u,rtc,%{public}u,byte,%{public}u", buf, 0x1Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 == -1)
      {
LABEL_25:
        int v22 = *(unsigned __int8 *)(a1 + 169);
        int v23 = *v6;
        int v33 = 67240960;
        *(_DWORD *)uint64_t v34 = v22;
        *(_WORD *)&v34[4] = 1026;
        *(_DWORD *)&v34[6] = v9;
        LOWORD(v35) = 1026;
        *(_DWORD *)((char *)&v35 + 2) = v10;
        HIWORD(v35) = 1026;
        *(_DWORD *)uint64_t v36 = v23;
        int v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleFusedStruct(uint64_t, FusedStructWithStatus &)", "%s\n", v24);
        if (v24 != buf) {
          free(v24);
        }
        goto LABEL_14;
      }
LABEL_27:
      dispatch_once(&qword_102419080, &stru_1022B9608);
      goto LABEL_25;
    }
  }
  else
  {
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9608);
    }
    uint64_t v14 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = *(unsigned __int8 *)(a1 + 169);
      int v16 = *v6;
      *(_DWORD *)long long buf = 67240960;
      *(_DWORD *)&uint8_t buf[4] = v15;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v9;
      LOWORD(v72) = 1026;
      *(_DWORD *)((char *)&v72 + 2) = v10;
      HIWORD(v72) = 1026;
      *(_DWORD *)unsigned __int16 v73 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Jump in fused packet sequence number last,%{public}u,this,%{public}u,rtc,%{public}u,byte,%{public}u", buf, 0x1Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 == -1) {
        goto LABEL_25;
      }
      goto LABEL_27;
    }
  }
LABEL_14:
  *(unsigned char *)(a1 + 169) = v9;
  unsigned int v17 = BYTE2(v32);
  unsigned int v18 = BYTE1(v32);
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022B9608);
  }
  int v19 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134222848;
    *(void *)&uint8_t buf[4] = *((void *)&v25 + 1);
    *(_WORD *)&buf[12] = 2048;
    uint64_t v72 = v26;
    *(_WORD *)unsigned __int16 v73 = 2048;
    *(void *)&v73[2] = *((void *)&v26 + 1);
    __int16 v74 = 2048;
    uint64_t v75 = v25;
    __int16 v76 = 2048;
    double v77 = *(float *)&v27;
    __int16 v78 = 2048;
    double v79 = *((float *)&v27 + 1);
    __int16 v80 = 2048;
    double v81 = *((float *)&v27 + 2);
    __int16 v82 = 2048;
    double v83 = *((float *)&v27 + 3);
    __int16 v84 = 2048;
    double v85 = *(float *)&v28;
    __int16 v86 = 2048;
    double v87 = *((float *)&v28 + 1);
    __int16 v88 = 1024;
    int v89 = (v18 >> 4) & 1;
    __int16 v90 = 1024;
    int v91 = (v18 >> 3) & 1;
    __int16 v92 = 1024;
    int v93 = (v18 >> 2) & 1;
    __int16 v94 = 1024;
    int v95 = v17 & 1;
    __int16 v96 = 1024;
    int v97 = (v18 >> 1) & 1;
    __int16 v98 = 1024;
    int v99 = v18 & 1;
    __int16 v100 = 1024;
    int v101 = (v17 >> 2) & 1;
    __int16 v102 = 1024;
    int v103 = (v17 >> 1) & 1;
    __int16 v104 = 1024;
    int v105 = v9;
    __int16 v106 = 2048;
    uint64_t v107 = a2;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "[CLDeviceMotionLiteService] q.x,%.10f,q.y,%.10f,q.z,%.10f,q.w,%.10f,userAccel.x,%.10f,userAccel.y,%.10f,userAccel.z,%.10f,rotationRate.x,%.10f,rotationRate.y,%.10f,rotationRate.z,%.10f,biasEstimation,%d,yawCorrection,%d,gravityCorrection,%d,initialized,%d,accelSaturated,%d,gyroSaturated,%d,compassCalibration,%d,gyroCalibration,%d,seqNo,%d,timestamp,%llu", buf, 0xA6u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9608);
    }
    int v33 = 134222848;
    *(void *)uint64_t v34 = *((void *)&v25 + 1);
    *(_WORD *)&v34[8] = 2048;
    uint64_t v35 = v26;
    *(_WORD *)uint64_t v36 = 2048;
    *(void *)&v36[2] = *((void *)&v26 + 1);
    __int16 v37 = 2048;
    uint64_t v38 = v25;
    __int16 v39 = 2048;
    double v40 = *(float *)&v27;
    __int16 v41 = 2048;
    double v42 = *((float *)&v27 + 1);
    __int16 v43 = 2048;
    double v44 = *((float *)&v27 + 2);
    __int16 v45 = 2048;
    double v46 = *((float *)&v27 + 3);
    __int16 v47 = 2048;
    double v48 = *(float *)&v28;
    __int16 v49 = 2048;
    double v50 = *((float *)&v28 + 1);
    __int16 v51 = 1024;
    int v52 = (v18 >> 4) & 1;
    __int16 v53 = 1024;
    int v54 = (v18 >> 3) & 1;
    __int16 v55 = 1024;
    int v56 = (v18 >> 2) & 1;
    __int16 v57 = 1024;
    int v58 = v17 & 1;
    __int16 v59 = 1024;
    int v60 = (v18 >> 1) & 1;
    __int16 v61 = 1024;
    int v62 = v18 & 1;
    __int16 v63 = 1024;
    int v64 = (v17 >> 2) & 1;
    __int16 v65 = 1024;
    int v66 = (v17 >> 1) & 1;
    __int16 v67 = 1024;
    int v68 = v9;
    __int16 v69 = 2048;
    uint64_t v70 = a2;
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleFusedStruct(uint64_t, FusedStructWithStatus &)", "%s\n", v21);
    if (v21 != buf) {
      free(v21);
    }
  }
  *(double *)long long buf = (double)(unint64_t)a2;
  return sub_1000E7BA0(a1, 0, (uint64_t)&v25, 120);
}

uint64_t sub_1005239AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = 0;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v8 = 0u;
  sub_100522694(a1, a2, a3, (uint64_t)&v8);
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022B9608);
  }
  float v5 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134220544;
    *(void *)&uint8_t buf[4] = *((void *)&v8 + 1);
    __int16 v39 = 2048;
    uint64_t v40 = v9;
    __int16 v41 = 2048;
    uint64_t v42 = *((void *)&v9 + 1);
    __int16 v43 = 2048;
    uint64_t v44 = v8;
    __int16 v45 = 2048;
    double v46 = *(float *)&v10;
    __int16 v47 = 2048;
    double v48 = *((float *)&v10 + 1);
    __int16 v49 = 2048;
    double v50 = *((float *)&v10 + 2);
    __int16 v51 = 2048;
    double v52 = *((float *)&v10 + 3);
    __int16 v53 = 2048;
    double v54 = *(float *)&v11;
    __int16 v55 = 2048;
    double v56 = *((float *)&v11 + 1);
    __int16 v57 = 2048;
    uint64_t v58 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "q.x,%.10f,q.y,%.10f,q.z,%.10f,q.w,%.10f,userAccel.x,%.10f,userAccel.y,%.10f,userAccel.z,%.10f,rotationRate.x,%.10f,rotationRate.y,%.10f,rotationRate.z,%.10f,timestamp,%llu", buf, 0x70u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9608);
    }
    int v16 = 134220544;
    uint64_t v17 = *((void *)&v8 + 1);
    __int16 v18 = 2048;
    uint64_t v19 = v9;
    __int16 v20 = 2048;
    uint64_t v21 = *((void *)&v9 + 1);
    __int16 v22 = 2048;
    uint64_t v23 = v8;
    __int16 v24 = 2048;
    double v25 = *(float *)&v10;
    __int16 v26 = 2048;
    double v27 = *((float *)&v10 + 1);
    __int16 v28 = 2048;
    double v29 = *((float *)&v10 + 2);
    __int16 v30 = 2048;
    double v31 = *((float *)&v10 + 3);
    __int16 v32 = 2048;
    double v33 = *(float *)&v11;
    __int16 v34 = 2048;
    double v35 = *((float *)&v11 + 1);
    __int16 v36 = 2048;
    uint64_t v37 = a2;
    __int16 v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleFusedStruct(uint64_t, FusedStruct &)", "%s\n", v7);
    if (v7 != buf) {
      free(v7);
    }
  }
  *(double *)long long buf = (double)(unint64_t)a2;
  return sub_1000E7BA0(a1, 0, (uint64_t)&v8, 120);
}

uint64_t sub_100523CA8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022B9608);
  }
  int v6 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sysdiagnose packet. Write out the data!", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9608);
    }
    long long v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleSysdiagnoseMsg(uint64_t, SysDiagnoseMsg &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  *(double *)long long buf = (double)a2;
  return sub_1000E7BA0(a1, 7, a3, 1);
}

uint64_t sub_100523E6C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022B9608);
  }
  int v6 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Session metrics packet. Push it to the right place", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9608);
    }
    long long v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleSessionMetricsMsg(uint64_t, SessionMetricsMsg &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  *(double *)long long buf = (double)a2;
  return sub_1000E7BA0(a1, 8, a3, 1);
}

void sub_100524030()
{
  IOHIDEventGetTimeStamp();
  IOHIDEventGetVendorDefinedData();
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022B9608);
  }
  CFDictionaryRef v0 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Empty payload, returning", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9608);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::onDeviceMotionLiteEvent(void *, void *, IOHIDEventRef)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_1005241FC(uint64_t a1, unint64_t a2, float32x2_t *a3, unint64_t a4)
{
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022B9608);
  }
  long long v8 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134349056;
    *(void *)&uint8_t buf[4] = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "DeviceMotionLite,VendorData,size,%{public}ld", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9608);
    }
    *(_DWORD *)int v91 = 134349056;
    *(void *)&v91[4] = a4;
    __int16 v78 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v78);
    if (v78 != buf) {
      free(v78);
    }
  }
  switch(a4)
  {
    case 0x30uLL:
      float v9 = a3[1].f32[0];
      float v10 = a3[1].f32[1];
      int v11 = a3[2].i16[0];
      int v12 = a3[2].i16[1];
      int v13 = a3[2].i16[2];
      v14.i16[0] = a3[2].i16[3];
      int v15 = a3[3].i16[2];
      int v16 = a3[3].i16[3];
      int v17 = a3[4].i16[0];
      int v18 = a3[4].i16[2];
      v14.i16[1] = a3[3].i16[0];
      v14.i16[2] = a3[3].i16[1];
      int v19 = a3[4].i16[3];
      v14.i16[3] = a3[4].i16[1];
      memset(v105, 0, sizeof(v105));
      *(double *)long long buf = v10;
      *(float64x2_t *)&uint8_t buf[8] = vcvtq_f64_f32(*a3);
      *(double *)int v95 = v9;
      *(float32x4_t *)&v95[8] = vdivq_f32(vcvtq_f32_s32(vmovl_s16(v14)), (float32x4_t)vdupq_n_s32(0x447A0000u));
      float v96 = (float)v18 / 1000.0;
      float v97 = (float)v19 / 1000.0;
      float v98 = (float)v11;
      float v99 = (float)v12;
      float v100 = (float)v13;
      float v101 = (float)v15;
      float v102 = (float)v16;
      float v103 = (float)v17;
      unint64_t v104 = a2;
      *(void *)&v105[1] = 0;
      *(void *)&v105[3] = 0;
      *(void *)((char *)&v105[4] + 3) = 0;
      *(double *)int v91 = (double)a2;
      sub_1000E7BA0(a1, 1, (uint64_t)buf, 120);
      return;
    case 0x1BuLL:
      sub_100522738(a1, a2, (uint64_t)a3);
      return;
    case 0x18uLL:
      sub_1005239AC(a1, a2, (uint64_t)a3);
      return;
  }
  if (a4 < 0x3D)
  {
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9608);
    }
    __int16 v32 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 134349056;
      *(void *)&uint8_t buf[4] = a4;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "DeviceMotionLite: unhandled size %{public}ld", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9608);
    }
    *(_DWORD *)int v91 = 134349056;
    *(void *)&v91[4] = a4;
    double v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v33);
LABEL_158:
    if (v33 != buf) {
      free(v33);
    }
    return;
  }
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022B9608);
  }
  __int16 v20 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
  {
    int v21 = a3->u8[0];
    int v22 = a3->u8[1];
    uint64_t v23 = *(void *)(a1 + 96);
    *(_DWORD *)long long buf = 134218752;
    *(void *)&uint8_t buf[4] = a4;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = v21;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v22;
    *(_WORD *)int v95 = 2048;
    *(void *)&v95[2] = v23;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "DeviceMotionLite debug fragment, paylaodSize=%lu, fLength=%d, fSequence=%d, fragBufferLen=%lu", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9608);
    }
    int v79 = a3->u8[0];
    int v80 = a3->u8[1];
    uint64_t v81 = *(void *)(a1 + 96);
    *(_DWORD *)int v91 = 134218752;
    *(void *)&v91[4] = a4;
    *(_WORD *)&v91[12] = 1024;
    *(_DWORD *)&v91[14] = v79;
    *(_WORD *)&v91[18] = 1024;
    *(_DWORD *)&v91[20] = v80;
    __int16 v92 = 2048;
    uint64_t v93 = v81;
    __int16 v82 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v82);
    if (v82 != buf) {
      free(v82);
    }
  }
  uint64_t v24 = a3->u8[0];
  if (a4 - 29 == v24)
  {
    if (*(void *)(a1 + 96))
    {
      if (v24 != 64 && v24 != 32)
      {
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022B9608);
        }
        __int16 v36 = qword_102419088;
        if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v37 = *(void *)(a1 + 96);
          *(_DWORD *)long long buf = 134217984;
          *(void *)&uint8_t buf[4] = v37;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "Not dropping %lu bytes in fragment buffer", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419080 != -1) {
            dispatch_once(&qword_102419080, &stru_1022B9608);
          }
          uint64_t v38 = *(void *)(a1 + 96);
          *(_DWORD *)int v91 = 134217984;
          *(void *)&v91[4] = v38;
          __int16 v39 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v39);
          if (v39 != buf) {
            free(v39);
          }
        }
        goto LABEL_57;
      }
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022B9608);
      }
      double v25 = qword_102419088;
      if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v26 = *(void *)(a1 + 96);
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Dropping remaining %lu bytes in fragment buffer", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022B9608);
        }
        uint64_t v87 = *(void *)(a1 + 96);
        *(_DWORD *)int v91 = 134217984;
        *(void *)&v91[4] = v87;
        __int16 v88 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v88);
        if (v88 != buf) {
          free(v88);
        }
      }
      double v27 = *(void ***)(a1 + 64);
      uint64_t v28 = *(void *)(a1 + 72);
      *(void *)(a1 + 96) = 0;
      unint64_t v29 = v28 - (void)v27;
      if (v29 >= 0x11)
      {
        do
        {
          operator delete(*v27);
          uint64_t v30 = *(void *)(a1 + 72);
          double v27 = (void **)(*(void *)(a1 + 64) + 8);
          *(void *)(a1 + 64) = v27;
          unint64_t v29 = v30 - (void)v27;
        }
        while (v29 > 0x10);
      }
      if (v29 >> 3 == 1)
      {
        uint64_t v31 = 2048;
        goto LABEL_56;
      }
      if (v29 >> 3 == 2)
      {
        uint64_t v31 = 4096;
LABEL_56:
        *(void *)(a1 + 88) = v31;
      }
    }
LABEL_57:
    if ((a3->i8[1] - *(unsigned char *)(a1 + 152)) >= 2u)
    {
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022B9608);
      }
      uint64_t v40 = qword_102419088;
      if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEFAULT))
      {
        int v41 = *(unsigned __int8 *)(a1 + 153);
        int v42 = a3->u8[1];
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v41;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v42;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Jump in packet sequence number: last=%d, this=%d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022B9608);
        }
        int v84 = *(unsigned __int8 *)(a1 + 153);
        int v85 = a3->u8[1];
        *(_DWORD *)int v91 = 67109376;
        *(_DWORD *)&v91[4] = v84;
        *(_WORD *)&v91[8] = 1024;
        *(_DWORD *)&v91[10] = v85;
        __int16 v86 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v86);
        if (v86 != buf) {
          free(v86);
        }
      }
    }
    *(unsigned char *)(a1 + 152) = a3->i8[1];
    sub_100522738(a1, a2, (uint64_t)a3 + 2);
    unint64_t v43 = *(void *)(a1 + 88) + *(void *)(a1 + 96);
    uint64_t v44 = *(void *)(a1 + 64);
    __int16 v45 = (char *)(v44 + 8 * (v43 >> 12));
    if (*(void *)(a1 + 72) == v44) {
      uint64_t v46 = 0;
    }
    else {
      uint64_t v46 = *(void *)v45 + (v43 & 0xFFF);
    }
    sub_1005258E4((int64x2_t *)(a1 + 56), v45, v46, (char *)&a3[3] + 5, (char *)&a3[3] + a3->u8[0] + 5, a3->u8[0]);
    while (1)
    {
      unint64_t v47 = *(void *)(a1 + 96);
      if (!v47) {
        return;
      }
      unint64_t v48 = *(void *)(a1 + 88);
      int v49 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + ((v48 >> 9) & 0x7FFFFFFFFFFFF8)) + (v48 & 0xFFF));
      switch(v49)
      {
        case 2:
          LOBYTE(v89) = 2;
          *(void *)(a1 + 88) = v48 + 1;
          *(void *)(a1 + 96) = v47 - 1;
          sub_100526B90(a1 + 56, 1);
          if (qword_102419080 != -1) {
            dispatch_once(&qword_102419080, &stru_1022B9608);
          }
          __int16 v53 = qword_102419088;
          if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v54 = *(void *)(a1 + 96);
            *(_DWORD *)long long buf = 134217984;
            *(void *)&uint8_t buf[4] = v54;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "called event handler function, remaining bytes: %lu", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419080 != -1) {
              dispatch_once(&qword_102419080, &stru_1022B9608);
            }
            uint64_t v68 = *(void *)(a1 + 96);
            *(_DWORD *)int v91 = 134217984;
            *(void *)&v91[4] = v68;
            __int16 v69 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v69);
            if (v69 != buf) {
              free(v69);
            }
          }
          sub_100523CA8(a1, a2, (uint64_t)&v89);
          break;
        case 3:
          LOBYTE(v89) = 3;
          *(void *)(a1 + 88) = v48 + 1;
          *(void *)(a1 + 96) = v47 - 1;
          sub_100526B90(a1 + 56, 1);
          if (qword_102419080 != -1) {
            dispatch_once(&qword_102419080, &stru_1022B9608);
          }
          __int16 v55 = qword_102419088;
          if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v56 = *(void *)(a1 + 96);
            *(_DWORD *)long long buf = 134217984;
            *(void *)&uint8_t buf[4] = v56;
            _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "called event handler function, remaining bytes: %lu", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419080 != -1) {
              dispatch_once(&qword_102419080, &stru_1022B9608);
            }
            uint64_t v70 = *(void *)(a1 + 96);
            *(_DWORD *)int v91 = 134217984;
            *(void *)&v91[4] = v70;
            unsigned __int16 v71 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v71);
            if (v71 != buf) {
              free(v71);
            }
          }
          sub_100523E6C(a1, a2, (uint64_t)&v89);
          break;
        case 5:
          if (v47 <= 0x1F)
          {
            if (qword_102419080 != -1) {
              dispatch_once(&qword_102419080, &stru_1022B9608);
            }
            double v50 = qword_102419088;
            if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v51 = *(void *)(a1 + 96);
              *(_DWORD *)long long buf = 134218240;
              *(void *)&uint8_t buf[4] = v51;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&unsigned char buf[14] = 32;
              _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "Skipping, buffer size %lu < packet size %lu", buf, 0x16u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419080 != -1) {
                dispatch_once(&qword_102419080, &stru_1022B9608);
              }
              uint64_t v73 = *(void *)(a1 + 96);
              *(_DWORD *)int v91 = 134218240;
              *(void *)&v91[4] = v73;
              *(_WORD *)&v91[12] = 2048;
              *(void *)&v91[14] = 32;
              __int16 v74 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v74);
              if (v74 != buf) {
                free(v74);
              }
            }
            char v52 = 0;
            goto LABEL_112;
          }
          uint64_t v58 = 0;
          while (1)
          {
            uint64_t v59 = *(void *)(a1 + 96);
            if (!v59) {
              break;
            }
            unint64_t v60 = *(void *)(a1 + 88);
            v91[v58] = *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + ((v60 >> 9) & 0x7FFFFFFFFFFFF8)) + (v60 & 0xFFF));
            *(void *)(a1 + 88) = v60 + 1;
            *(void *)(a1 + 96) = v59 - 1;
            sub_100526B90(a1 + 56, 1);
            if (++v58 == 32) {
              goto LABEL_105;
            }
          }
          if (qword_102419080 != -1) {
            dispatch_once(&qword_102419080, &stru_1022B9608);
          }
          __int16 v61 = qword_102419088;
          if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "Zero size struct, or somehow ring buffer size ran out", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419080 != -1) {
              dispatch_once(&qword_102419080, &stru_1022B9608);
            }
            LOWORD(v89) = 0;
            double v77 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v77);
            if (v77 != buf) {
              free(v77);
            }
          }
LABEL_105:
          if (qword_102419080 != -1) {
            dispatch_once(&qword_102419080, &stru_1022B9608);
          }
          int v62 = qword_102419088;
          if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v63 = *(void *)(a1 + 96);
            *(_DWORD *)long long buf = 134217984;
            *(void *)&uint8_t buf[4] = v63;
            _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "called event handler function, remaining bytes: %lu", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419080 != -1) {
              dispatch_once(&qword_102419080, &stru_1022B9608);
            }
            uint64_t v75 = *(void *)(a1 + 96);
            int v89 = 134217984;
            uint64_t v90 = v75;
            __int16 v76 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v76);
            if (v76 != buf) {
              free(v76);
            }
          }
          sub_1005221A0(a1, a2, (uint64_t)v91);
          break;
        default:
          if (qword_102419080 != -1) {
            dispatch_once(&qword_102419080, &stru_1022B9608);
          }
          __int16 v57 = qword_102419088;
          if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v49;
            _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "Unknown msgType: %d", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419080 != -1) {
              dispatch_once(&qword_102419080, &stru_1022B9608);
            }
            *(_DWORD *)int v91 = 67109120;
            *(_DWORD *)&v91[4] = v49;
            uint64_t v72 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v72);
            if (v72 != buf) {
              free(v72);
            }
          }
          *(int64x2_t *)(a1 + 88) = vaddq_s64(*(int64x2_t *)(a1 + 88), (int64x2_t)xmmword_101D0A740);
          sub_100526B90(a1 + 56, 1);
          break;
      }
      char v52 = 1;
LABEL_112:
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022B9608);
      }
      int v64 = qword_102419088;
      if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v65 = *(void *)(a1 + 96);
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v49;
        *(_WORD *)&uint8_t buf[8] = 2048;
        *(void *)&buf[10] = v65;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "msgType=%d, fragBufferLength=%lu\n", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022B9608);
        }
        uint64_t v66 = *(void *)(a1 + 96);
        *(_DWORD *)int v91 = 67109376;
        *(_DWORD *)&v91[4] = v49;
        *(_WORD *)&v91[8] = 2048;
        *(void *)&v91[10] = v66;
        __int16 v67 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v67);
        if (v67 != buf) {
          free(v67);
        }
      }
      if ((v52 & 1) == 0) {
        return;
      }
    }
  }
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022B9608);
  }
  __int16 v34 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEFAULT))
  {
    int v35 = a3->u8[0];
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v35;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Received invalid payload length %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9608);
    }
    int v83 = a3->u8[0];
    *(_DWORD *)int v91 = 67109120;
    *(_DWORD *)&v91[4] = v83;
    double v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDeviceMotionLiteService::handleDeviceMotionLiteEvent(uint64_t, uint8_t *, size_t)", "%s\n", v33);
    goto LABEL_158;
  }
}

void sub_10052580C(id a1)
{
  qword_102419088 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

uint64_t sub_10052583C(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  long long v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      long long v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 2048;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 4096;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    __int16 v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

void *sub_1005258E4(int64x2_t *a1, char *a2, uint64_t a3, char *a4, char *a5, unint64_t a6)
{
  unint64_t v6 = a6;
  unint64_t v10 = a1[2].u64[0];
  unint64_t v11 = v10 >> 12;
  uint64_t v12 = a1->i64[1];
  uint64_t v13 = a1[1].i64[0];
  int16x4_t v14 = (char *)(v12 + 8 * (v10 >> 12));
  if (v13 == v12) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = *(void *)v14 + (a1[2].i64[0] & 0xFFF);
  }
  if (a3 == v15) {
    unint64_t v16 = 0;
  }
  else {
    unint64_t v16 = a3 + ((a2 - v14) << 9) - (v15 + *(void *)a2) + *(void *)v14;
  }
  uint64_t v17 = a1[2].i64[1];
  if (v16 >= v17 - v16)
  {
    uint64_t v20 = ((v13 - v12) << 9) - 1;
    if (v13 == v12) {
      uint64_t v20 = 0;
    }
    unint64_t v21 = v10 + v17;
    unint64_t v22 = v20 - v21;
    if (a6 > v22)
    {
      sub_10052627C(a1, a6 - v22);
      uint64_t v17 = a1[2].i64[1];
      uint64_t v12 = a1->i64[1];
      uint64_t v13 = a1[1].i64[0];
      unint64_t v21 = a1[2].i64[0] + v17;
    }
    uint64_t v23 = (void *)(v12 + 8 * (v21 >> 12));
    if (v13 == v12) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = (char *)(*v23 + (v21 & 0xFFF));
    }
    *(void *)&long long v68 = v12 + 8 * (v21 >> 12);
    *((void *)&v68 + 1) = v24;
    unint64_t v45 = v17 - v16;
    if (v17 - v16 < v6)
    {
      uint64_t v46 = &a5[v17 - v16 - v6];
      if (v45 < v6 >> 1) {
        uint64_t v46 = &a4[v45];
      }
      if (v46 != a5)
      {
        unint64_t v47 = v46;
        do
        {
          *v24++ = *v47;
          if (&v24[-*v23] == (char *)4096)
          {
            unint64_t v48 = (char *)v23[1];
            ++v23;
            uint64_t v24 = v48;
          }
          ++v47;
          ++a1[2].i64[1];
        }
        while (v47 != a5);
        a5 = v46;
      }
      unint64_t v6 = v17 - v16;
    }
    if (v6)
    {
      int v49 = (const void **)sub_100526808((uint64_t)&v68, v6);
      uint64_t v51 = v49;
      char v52 = v50;
      uint64_t v53 = *((void *)&v68 + 1);
      if (*((char **)&v68 + 1) != v50)
      {
        uint64_t v54 = v49;
        __int16 v55 = v50;
        do
        {
          *v24++ = *v55;
          if (&v24[-*v23] == (char *)4096)
          {
            uint64_t v56 = (char *)v23[1];
            ++v23;
            uint64_t v24 = v56;
          }
          if (&(++v55)[-*v54] == (char *)4096)
          {
            __int16 v57 = (char *)v54[1];
            ++v54;
            __int16 v55 = v57;
          }
          ++a1[2].i64[1];
          uint64_t v53 = *((void *)&v68 + 1);
        }
        while (v55 != *((char **)&v68 + 1));
      }
      if (v6 < v45)
      {
        uint64_t v58 = (const void **)sub_100526808((uint64_t)&v68, v45);
        sub_10052699C(v58, v59, v51, v52, (const void **)v68, *((char **)&v68 + 1), (const void ***)&v69);
        uint64_t v53 = *((void *)&v70 + 1);
        long long v68 = v70;
      }
      if (a5 != a4)
      {
        __int16 v61 = (uint64_t *)(v68 - 8);
        uint64_t v60 = *(void *)v68;
        while (1)
        {
          int64_t v62 = v53 - v60;
          if (a5 - a4 >= v62) {
            size_t v63 = v62;
          }
          else {
            size_t v63 = a5 - a4;
          }
          a5 -= v63;
          if (v63) {
            memmove((void *)(v53 - v63), a5, v63);
          }
          if (a5 == a4) {
            break;
          }
          uint64_t v64 = *v61--;
          uint64_t v60 = v64;
          uint64_t v53 = v64 + 4096;
        }
      }
    }
  }
  else
  {
    if (a6 > v10)
    {
      sub_100525D4C((void **)a1, a6 - v10);
      unint64_t v10 = a1[2].u64[0];
      uint64_t v12 = a1->i64[1];
      uint64_t v13 = a1[1].i64[0];
      unint64_t v11 = v10 >> 12;
    }
    int v18 = (void *)(v12 + 8 * v11);
    if (v13 == v12) {
      unint64_t v19 = 0;
    }
    else {
      unint64_t v19 = *v18 + (v10 & 0xFFF);
    }
    *(void *)&long long v68 = v12 + 8 * v11;
    *((void *)&v68 + 1) = v19;
    if (v6 > v16)
    {
      double v25 = &a4[v6 - v16];
      if (v16 < v6 >> 1) {
        double v25 = &a5[-v16];
      }
      if (v25 != a4)
      {
        uint64_t v26 = v25;
        do
        {
          if (v19 == *v18)
          {
            uint64_t v27 = *--v18;
            unint64_t v19 = v27 + 4096;
          }
          char v28 = *--v26;
          *(unsigned char *)--unint64_t v19 = v28;
          a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101D1F270);
        }
        while (v26 != a4);
        a4 = v25;
      }
      unint64_t v6 = v16;
    }
    if (v6)
    {
      uint64_t v30 = sub_100526218((uint64_t)&v68, v6);
      uint64_t v31 = v29;
      __int16 v32 = (unsigned char *)*((void *)&v68 + 1);
      if (*((unsigned char **)&v68 + 1) != v29)
      {
        double v33 = v30;
        __int16 v34 = v29;
        do
        {
          if (v19 == *v18)
          {
            uint64_t v35 = *--v18;
            unint64_t v19 = v35 + 4096;
          }
          if (v34 == (unsigned char *)*v33)
          {
            uint64_t v36 = *--v33;
            __int16 v34 = (unsigned char *)(v36 + 4096);
          }
          char v37 = *--v34;
          *(unsigned char *)--unint64_t v19 = v37;
          a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101D1F270);
          __int16 v32 = (unsigned char *)*((void *)&v68 + 1);
        }
        while (v34 != *((unsigned char **)&v68 + 1));
      }
      if (v6 < v16)
      {
        uint64_t v38 = sub_100526218((uint64_t)&v68, v16);
        long long v69 = v68;
        sub_10052686C(v30, v31, (unsigned char **)v38, v39, (void ***)&v69);
        __int16 v32 = (unsigned char *)*((void *)&v69 + 1);
        long long v68 = v69;
      }
      if (a4 != a5)
      {
        int v41 = (void **)(v68 + 8);
        uint64_t v40 = *(unsigned char **)v68;
        while (1)
        {
          uint64_t v42 = v40 - v32 + 4096;
          if (a5 - a4 >= v42) {
            size_t v43 = v42;
          }
          else {
            size_t v43 = a5 - a4;
          }
          if (v43) {
            memmove(v32, a4, v43);
          }
          a4 += v43;
          if (a4 == a5) {
            break;
          }
          uint64_t v44 = *v41++;
          uint64_t v40 = v44;
          __int16 v32 = v44;
        }
      }
    }
  }
  uint64_t v65 = a1->i64[1];
  if (a1[1].i64[0] == v65) {
    uint64_t v66 = 0;
  }
  else {
    uint64_t v66 = *(void *)(v65 + 8 * ((unint64_t)a1[2].i64[0] >> 12)) + (a1[2].i64[0] & 0xFFF);
  }
  *(void *)&long long v69 = v65 + 8 * ((unint64_t)a1[2].i64[0] >> 12);
  *((void *)&v69 + 1) = v66;
  return sub_100526218((uint64_t)&v69, v16);
}

void sub_100525D4C(void **a1, unint64_t a2)
{
  long long v3 = a1[1];
  unint64_t v4 = a1[2];
  uint64_t v5 = v4 - v3;
  if (v4 == v3) {
    unint64_t v6 = a2 + 1;
  }
  else {
    unint64_t v6 = a2;
  }
  if (v4 == v3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v4 - v3) << 9) - 1;
  }
  if ((v6 & 0xFFF) != 0) {
    unint64_t v8 = (v6 >> 12) + 1;
  }
  else {
    unint64_t v8 = v6 >> 12;
  }
  uint64_t v9 = (uint64_t)a1[4];
  unint64_t v10 = v7 - ((void)a1[5] + v9);
  if (v8 >= v10 >> 12) {
    unint64_t v11 = v10 >> 12;
  }
  else {
    unint64_t v11 = v8;
  }
  if (v8 <= v10 >> 12)
  {
    for (a1[4] = (void *)(v9 + (v11 << 12)); v11; --v11)
    {
      unint64_t v19 = (void **)a1[2];
      __p[0] = *(v19 - 1);
      a1[2] = v19 - 1;
      sub_1002D02D8((uint64_t)a1, __p);
    }
  }
  else
  {
    uint64_t v12 = (uint64_t)(a1 + 3);
    unint64_t v13 = v8 - v11;
    uint64_t v14 = (unsigned char *)a1[3] - (unsigned char *)*a1;
    if (v8 - v11 <= (v14 >> 3) - (v5 >> 3))
    {
      if (v13)
      {
        if (v3 == *a1)
        {
LABEL_30:
          unint64_t v22 = v13;
          do
          {
            __p[0] = operator new(0x1000uLL);
            sub_10017F0B4(a1, __p);
            --v22;
          }
          while (v22);
          v11 += v13;
          uint64_t v9 = (uint64_t)a1[4];
        }
        else
        {
          while (1)
          {
            __p[0] = operator new(0x1000uLL);
            sub_1002D02D8((uint64_t)a1, __p);
            uint64_t v20 = a1[1];
            uint64_t v21 = (unsigned char *)a1[2] - v20 == 8 ? 4095 : 4096;
            uint64_t v9 = (uint64_t)a1[4] + v21;
            a1[4] = (void *)v9;
            if (!--v13) {
              break;
            }
            if (v20 == *a1) {
              goto LABEL_30;
            }
          }
        }
      }
      for (a1[4] = (void *)(v9 + (v11 << 12)); v11; --v11)
      {
        uint64_t v23 = (void **)a1[2];
        __p[0] = *(v23 - 1);
        a1[2] = v23 - 1;
        sub_1002D02D8((uint64_t)a1, __p);
      }
    }
    else
    {
      BOOL v15 = v4 == v3;
      unint64_t v16 = v8 << 12;
      if (v14 >> 2 <= v13 + (v5 >> 3)) {
        unint64_t v17 = v13 + (v5 >> 3);
      }
      else {
        unint64_t v17 = v14 >> 2;
      }
      long long v70 = a1 + 3;
      if (v17) {
        int v18 = (char *)sub_1000DA54C(v12, v17);
      }
      else {
        int v18 = 0;
      }
      unint64_t v24 = v16 - v15;
      __p[0] = v18;
      __p[1] = v18;
      long long v68 = v18;
      long long v69 = &v18[8 * v17];
      do
      {
        uint64_t v66 = operator new(0x1000uLL);
        sub_1000DA434(__p, &v66);
        --v13;
      }
      while (v13);
      double v25 = (char *)a1[2];
      for (uint64_t i = v68; v11; --v11)
      {
        if (i == v69)
        {
          int64_t v27 = (char *)__p[1] - (char *)__p[0];
          if (__p[1] <= __p[0])
          {
            if (i == __p[0]) {
              unint64_t v35 = 1;
            }
            else {
              unint64_t v35 = (i - (char *)__p[0]) >> 2;
            }
            uint64_t v36 = (char *)sub_1000DA54C((uint64_t)v70, v35);
            uint64_t v38 = (uint64_t *)__p[1];
            uint64_t i = &v36[8 * (v35 >> 2)];
            uint64_t v39 = v68 - (char *)__p[1];
            if (v68 != __p[1])
            {
              uint64_t i = &v36[8 * (v35 >> 2) + (v39 & 0xFFFFFFFFFFFFFFF8)];
              uint64_t v40 = 8 * (v39 >> 3);
              int v41 = &v36[8 * (v35 >> 2)];
              do
              {
                uint64_t v42 = *v38++;
                *(void *)int v41 = v42;
                v41 += 8;
                v40 -= 8;
              }
              while (v40);
            }
            size_t v43 = __p[0];
            __p[0] = v36;
            __p[1] = &v36[8 * (v35 >> 2)];
            long long v68 = i;
            long long v69 = &v36[8 * v37];
            if (v43)
            {
              operator delete(v43);
              uint64_t i = v68;
            }
          }
          else
          {
            uint64_t v28 = v27 >> 3;
            BOOL v29 = v27 >> 3 < -1;
            uint64_t v30 = (v27 >> 3) + 2;
            if (v29) {
              uint64_t v31 = v30;
            }
            else {
              uint64_t v31 = v28 + 1;
            }
            __int16 v32 = (char *)__p[1] - 8 * (v31 >> 1);
            int64_t v33 = i - (char *)__p[1];
            if (i != __p[1])
            {
              memmove((char *)__p[1] - 8 * (v31 >> 1), __p[1], i - (char *)__p[1]);
              uint64_t i = (char *)__p[1];
            }
            __int16 v34 = &i[-8 * (v31 >> 1)];
            uint64_t i = &v32[v33];
            __p[1] = v34;
            long long v68 = &v32[v33];
          }
        }
        *(void *)uint64_t i = *((void *)v25 - 1);
        uint64_t i = v68 + 8;
        v68 += 8;
        double v25 = (char *)a1[2] - 8;
        a1[2] = v25;
      }
      uint64_t v44 = (char *)a1[1];
      if (v44 == v25)
      {
        uint64_t v44 = v25;
      }
      else
      {
        do
        {
          if (i == v69)
          {
            int64_t v45 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (i == __p[0]) {
                unint64_t v52 = 1;
              }
              else {
                unint64_t v52 = (i - (char *)__p[0]) >> 2;
              }
              uint64_t v53 = (char *)sub_1000DA54C((uint64_t)v70, v52);
              __int16 v55 = (uint64_t *)__p[1];
              uint64_t i = &v53[8 * (v52 >> 2)];
              uint64_t v56 = v68 - (char *)__p[1];
              if (v68 != __p[1])
              {
                uint64_t i = &v53[8 * (v52 >> 2) + (v56 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v57 = 8 * (v56 >> 3);
                uint64_t v58 = &v53[8 * (v52 >> 2)];
                do
                {
                  uint64_t v59 = *v55++;
                  *(void *)uint64_t v58 = v59;
                  v58 += 8;
                  v57 -= 8;
                }
                while (v57);
              }
              uint64_t v60 = __p[0];
              __p[0] = v53;
              __p[1] = &v53[8 * (v52 >> 2)];
              long long v68 = i;
              long long v69 = &v53[8 * v54];
              if (v60)
              {
                operator delete(v60);
                uint64_t i = v68;
              }
            }
            else
            {
              uint64_t v46 = v45 >> 3;
              BOOL v29 = v45 >> 3 < -1;
              uint64_t v47 = (v45 >> 3) + 2;
              if (v29) {
                uint64_t v48 = v47;
              }
              else {
                uint64_t v48 = v46 + 1;
              }
              int v49 = (char *)__p[1] - 8 * (v48 >> 1);
              int64_t v50 = i - (char *)__p[1];
              if (i != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v48 >> 1), __p[1], i - (char *)__p[1]);
                uint64_t i = (char *)__p[1];
              }
              uint64_t v51 = &i[-8 * (v48 >> 1)];
              uint64_t i = &v49[v50];
              __p[1] = v51;
              long long v68 = &v49[v50];
            }
          }
          uint64_t v61 = *(void *)v44;
          v44 += 8;
          *(void *)uint64_t i = v61;
          uint64_t i = v68 + 8;
          v68 += 8;
        }
        while (v44 != a1[2]);
        double v25 = (char *)a1[1];
      }
      int64_t v62 = v69;
      size_t v63 = (char *)a1[3];
      uint64_t v64 = (char *)a1[4];
      a1[2] = i;
      a1[3] = v62;
      uint64_t v65 = *a1;
      *(_OWORD *)a1 = *(_OWORD *)__p;
      __p[0] = v65;
      __p[1] = v25;
      long long v68 = v44;
      long long v69 = v63;
      a1[4] = &v64[v24];
      if (v44 != v25) {
        long long v68 = &v44[(v25 - v44 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v65) {
        operator delete(v65);
      }
    }
  }
}

void sub_1005261A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100526218(uint64_t a1, uint64_t a2)
{
  float result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 8) - *result + a2;
    if (v4 < 1) {
      result -= (unint64_t)(4095 - v4) >> 12;
    }
    else {
      result += (unint64_t)v4 >> 12;
    }
  }
  return result;
}

void sub_10052627C(void *a1, unint64_t a2)
{
  long long v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0xFFF) != 0) {
    unint64_t v6 = (v5 >> 12) + 1;
  }
  else {
    unint64_t v6 = v5 >> 12;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 12) {
    unint64_t v8 = v7 >> 12;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 12)
  {
    for (a1[4] = v7 - (v8 << 12); v8; --v8)
    {
      unint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      unint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          BOOL v29 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v28);
          uint64_t v31 = &v29[8 * (v28 >> 2)];
          __int16 v32 = (uint64_t *)a1[1];
          long long v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            long long v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            unint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)unint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          uint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            long long v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          double v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            long long v3 = (char *)a1[1];
          }
          int64_t v27 = &v3[-8 * (v24 >> 1)];
          long long v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)long long v3 = v18;
      long long v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_10017F0B4(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_1002D02D8((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 4095;
          }
          else {
            uint64_t v64 = 4096;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 12);
      if (v8)
      {
        uint64_t v66 = (char *)a1[2];
        do
        {
          __int16 v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          long long v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              int v79 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v78);
              uint64_t v81 = &v79[8 * (v78 >> 2)];
              __int16 v82 = (uint64_t *)a1[1];
              uint64_t v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                uint64_t v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                int v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)int v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              uint64_t v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                uint64_t v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              uint64_t v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                uint64_t v66 = (char *)a1[1];
              }
              double v77 = &v66[-8 * (v74 >> 1)];
              uint64_t v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)uint64_t v66 = v69;
          uint64_t v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      int v91 = a1 + 3;
      if (v13) {
        BOOL v15 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v13);
      }
      else {
        BOOL v15 = 0;
      }
      uint64_t v38 = v8 << 12;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        __int16 v88 = operator new(0x1000uLL);
        sub_1000DA434(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              int v49 = (char *)sub_1000DA54C((uint64_t)v91, v48);
              uint64_t v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                uint64_t v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)uint64_t v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              uint64_t v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              int64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }
              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      uint64_t v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1002D03F8((uint64_t)__p, v57);
      }
      uint64_t v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_100526794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100526808(uint64_t a1, uint64_t a2)
{
  float result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 8) - a2 - *result;
    if (v4 < 1) {
      result -= (unint64_t)(4095 - v4) >> 12;
    }
    else {
      result += (unint64_t)v4 >> 12;
    }
  }
  return result;
}

void ****sub_10052686C(void *a1, unsigned char *a2, unsigned char **a3, unsigned char *a4, void ***a5)
{
  uint64_t v11 = a5;
  if (a1 != a3)
  {
    unint64_t v7 = a1 + 1;
    for (uint64_t i = (unsigned char *)(*a1 + 4096); ; uint64_t i = v9 + 4096)
    {
      sub_1005268E4(&v11, a2, i);
      if (v7 == a3) {
        break;
      }
      unint64_t v9 = (unsigned char *)*v7++;
      a2 = v9;
    }
    a2 = *a3;
  }
  return sub_1005268E4(&v11, a2, a4);
}

void ****sub_1005268E4(void ****result, unsigned char *__src, unsigned char *a3)
{
  long long v3 = *result;
  unint64_t v5 = **result;
  uint64_t v4 = (*result)[1];
  if (__src != a3)
  {
    unint64_t v7 = __src;
    unint64_t v8 = result;
    uint64_t v10 = (char *)*v5++;
    unint64_t v9 = (void **)v10;
    while (1)
    {
      uint64_t v11 = (char *)v9 - (char *)v4 + 4096;
      if (a3 - v7 >= v11) {
        size_t v12 = v11;
      }
      else {
        size_t v12 = a3 - v7;
      }
      if (v12) {
        float result = (void ****)memmove(v4, v7, v12);
      }
      v7 += v12;
      if (v7 == a3) {
        break;
      }
      unint64_t v13 = (void **)*v5++;
      unint64_t v9 = v13;
      uint64_t v4 = v13;
    }
    uint64_t v4 = (void **)((char *)v4 + v12);
    if ((char *)*(v5 - 1) + 4096 == (char *)v4) {
      uint64_t v4 = (void **)*v5;
    }
    else {
      --v5;
    }
    long long v3 = *v8;
  }
  *long long v3 = v5;
  v3[1] = v4;
  return result;
}

void *sub_10052699C@<X0>(const void **a1@<X1>, char *a2@<X2>, const void **a3@<X3>, char *a4@<X4>, const void **a5@<X5>, char *a6@<X6>, const void ***a7@<X8>)
{
  unint64_t v8 = a5;
  if (a1 == a3)
  {
    if (a2 == a4) {
      goto LABEL_46;
    }
    uint64_t v35 = (uint64_t)*a5;
    uint64_t v36 = a4;
    while (1)
    {
      uint64_t v37 = &a6[-v35];
      if (v36 - a2 >= (uint64_t)v37) {
        size_t v38 = (size_t)v37;
      }
      else {
        size_t v38 = v36 - a2;
      }
      v36 -= v38;
      a6 -= v38;
      if (v38) {
        float result = memmove(a6, v36, v38);
      }
      if (v36 == a2) {
        break;
      }
      uint64_t v39 = (uint64_t)*--v8;
      uint64_t v35 = v39;
      a6 = (char *)(v39 + 4096);
    }
    goto LABEL_44;
  }
  unint64_t v14 = *a3;
  if (*a3 != a4)
  {
    uint64_t v15 = (uint64_t)*a5;
    unint64_t v16 = a4;
    while (1)
    {
      unint64_t v17 = &a6[-v15];
      if (v16 - v14 >= (uint64_t)v17) {
        size_t v18 = (size_t)v17;
      }
      else {
        size_t v18 = v16 - v14;
      }
      v16 -= v18;
      a6 -= v18;
      if (v18) {
        float result = memmove(a6, v16, v18);
      }
      if (v16 == v14) {
        break;
      }
      uint64_t v20 = (uint64_t)*--v8;
      uint64_t v15 = v20;
      a6 = (char *)(v20 + 4096);
    }
    if ((char *)*v8 + 4096 == a6)
    {
      uint64_t v21 = (char *)v8[1];
      ++v8;
      a6 = v21;
    }
  }
  BOOL v22 = a3 - 1;
  if (a3 - 1 != a1)
  {
    uint64_t v23 = (char *)*v8;
    do
    {
      uint64_t v24 = *v22;
      double v25 = (char *)*v22 + 4096;
      while (1)
      {
        int64_t v26 = (char *)(a6 - v23);
        if (v25 - v24 >= (uint64_t)v26) {
          size_t v27 = (size_t)v26;
        }
        else {
          size_t v27 = v25 - v24;
        }
        v25 -= v27;
        a6 -= v27;
        if (v27) {
          float result = memmove(a6, v25, v27);
        }
        if (v25 == v24) {
          break;
        }
        unint64_t v28 = (char *)*--v8;
        uint64_t v23 = v28;
        a6 = v28 + 4096;
      }
      uint64_t v23 = (char *)*v8;
      if ((char *)*v8 + 4096 == a6)
      {
        BOOL v29 = (char *)v8[1];
        ++v8;
        uint64_t v23 = v29;
        a6 = v29;
      }
      --v22;
    }
    while (v22 != a1);
  }
  uint64_t v30 = (char *)*a1 + 4096;
  if (v30 != a2)
  {
    uint64_t v31 = (uint64_t)*v8;
    while (1)
    {
      __int16 v32 = &a6[-v31];
      if (v30 - a2 >= (uint64_t)v32) {
        size_t v33 = (size_t)v32;
      }
      else {
        size_t v33 = v30 - a2;
      }
      v30 -= v33;
      a6 -= v33;
      if (v33) {
        float result = memmove(a6, v30, v33);
      }
      if (v30 == a2) {
        break;
      }
      uint64_t v34 = (uint64_t)*--v8;
      uint64_t v31 = v34;
      a6 = (char *)(v34 + 4096);
    }
LABEL_44:
    if ((char *)*v8 + 4096 == a6)
    {
      uint64_t v40 = (char *)v8[1];
      ++v8;
      a6 = v40;
    }
  }
LABEL_46:
  *a7 = a3;
  a7[1] = (const void **)a4;
  a7[2] = v8;
  a7[3] = (const void **)a6;
  return result;
}

uint64_t sub_100526B90(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x1000) {
    a2 = 1;
  }
  if (v2 < 0x2000) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 4096;
  }
  return v4 ^ 1u;
}

id sub_100526BF0(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4 = *a2;
  long long v5 = a3[9];
  v12[8] = a3[8];
  v12[9] = v5;
  long long v6 = a3[11];
  v12[10] = a3[10];
  void v12[11] = v6;
  long long v7 = a3[5];
  void v12[4] = a3[4];
  v12[5] = v7;
  long long v8 = a3[7];
  v12[6] = a3[6];
  v12[7] = v8;
  long long v9 = a3[1];
  v12[0] = *a3;
  v12[1] = v9;
  long long v10 = a3[3];
  v12[2] = a3[2];
  v12[3] = v10;
  return [a4 onCompanionNotification:v4 data:v12];
}

void sub_1005270D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_1000DB0A0(v10);
  _Unwind_Resume(a1);
}

void sub_10052715C(id a1)
{
  qword_1024191E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_10052718C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B9658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1005271AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B9658;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100527208(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B96A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100527228(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B96A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100527284(id a1)
{
}

void sub_100527334()
{
}

void sub_100527358()
{
  if (qword_102489FA8)
  {
    *(void *)long long buf = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(void *)qword_102489FA8 + 968))(qword_102489FA8, buf);
    if (((*(uint64_t (**)(void))(*(void *)qword_102489FA8 + 944))() & 1) == 0)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B9B00);
      }
      CFDictionaryRef v0 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "could not store cached data ", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022B9B00);
        }
        uint64_t v1 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static void CLDaemonCache::shutdownInstance()", "%s\n", v1);
        if (v1 != (char *)buf) {
          free(v1);
        }
      }
    }
  }
}

uint64_t sub_100527560(uint64_t a1, uint64_t a2)
{
  long long v3 = (void *)sub_10053C0A8(a1, a2, "cache", 1, 0, 2);
  *long long v3 = off_1022B9718;
  sub_100513074(v3 + 16, "CLDaemonCache", 1, 1);
  BOOL v9 = 0;
  sub_1000C7F88(buf);
  int v4 = sub_1000D2988(*(uint64_t *)buf, "ClearLocationCache", &v9);
  if (v9) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v11) {
    sub_1000DB0A0(v11);
  }
  if (v5)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022B9B00);
    }
    long long v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning clearing location cache", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022B9B00);
      }
      long long v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLDaemonCache::CLDaemonCache(id<CLIntersiloUniverse>)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    sub_1004CEFA0(a1);
  }
  return a1;
}

void sub_100527790(_Unwind_Exception *a1)
{
  sub_10051310C(v2);
  sub_10053C884(v1);
  _Unwind_Resume(a1);
}

void *sub_1005277D0(void *a1)
{
  *a1 = off_1022B9718;
  sub_10051310C(a1 + 16);

  return sub_10053C884((uint64_t)a1);
}

void sub_100527824(void *a1)
{
  *a1 = off_1022B9718;
  sub_10051310C(a1 + 16);
  sub_10053C884((uint64_t)a1);

  operator delete();
}

uint64_t sub_10052788C()
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022B9B20);
  }
  CFDictionaryRef v0 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "*** CLDaemonCache::refresh not supported ***", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022B9B20);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLDaemonCache::refresh()", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 0;
}

uint64_t sub_100527A18(uint64_t a1)
{
  uint64_t v2 = a1 + 128;
  (*(void (**)(uint64_t))(*(void *)(a1 + 128) + 16))(a1 + 128);
  uint64_t v3 = sub_10053CD58(a1);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

void sub_100527AB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100527AC8(uint64_t a1, const void *a2)
{
  uint64_t v4 = a1 + 128;
  (*(void (**)(uint64_t))(*(void *)(a1 + 128) + 16))(a1 + 128);
  sub_1004CFED0((CFMutableDictionaryRef *)a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_100527B6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100527B80(uint64_t a1, const void *a2)
{
  uint64_t v4 = a1 + 128;
  (*(void (**)(uint64_t))(*(void *)(a1 + 128) + 16))(a1 + 128);
  BOOL v5 = sub_1004D2568(a1, a2);
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return v5;
}

void sub_100527C2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100527C40(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6 = a1 + 128;
  (*(void (**)(uint64_t))(*(void *)(a1 + 128) + 16))(a1 + 128);
  sub_1004D5C00(a1, a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
}

void sub_100527CEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100527D00(uint64_t a1, double *a2)
{
  uint64_t v5 = a1 + 128;
  uint64_t v4 = *(void *)(a1 + 128);
  v7[5] = a1 + 128;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 128);
  __int16 v8 = 256;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100527E04;
  v7[3] = &unk_1022A3020;
  v7[4] = a1;
  sub_10053D348(a1, a2, (uint64_t)v7);
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
}

void sub_100527DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100527E04(uint64_t a1)
{
  return sub_100527E0C(*(void *)(a1 + 32));
}

uint64_t sub_100527E0C(uint64_t a1)
{
  uint64_t v2 = a1 + 128;
  (*(void (**)(uint64_t))(*(void *)(a1 + 128) + 16))(a1 + 128);
  sub_10053D700((double *)a1);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

void sub_100527EA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100527EB4(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100527EE4(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100527F14(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  if (*(unsigned char *)(a2 + 352))
  {
    BOOL v8 = sub_100528438((unsigned char *)a1, a2);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022B9B90);
    }
    BOOL v9 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      double v10 = *(float *)a3;
      double v11 = *(float *)(a3 + 4);
      double v12 = *(float *)(a3 + 12);
      double v13 = *(float *)(a3 + 20);
      int v14 = *(_DWORD *)(a3 + 24);
      double v15 = *(float *)(a3 + 28);
      int v16 = *(_DWORD *)(a3 + 32);
      int v17 = *(_DWORD *)(a3 + 36);
      uint64_t v18 = *(void *)(a2 + 344);
      int v19 = *(_DWORD *)(a2 + 288);
      BOOL v20 = *(double *)(a2 + 616) > 0.0;
      uint64_t v21 = *(void *)(a2 + 656);
      double v22 = *(float *)(a2 + 296);
      float v23 = *(double *)(a2 + 560);
      int v24 = *(_DWORD *)(a2 + 400);
      uint64_t v25 = *(void *)(a2 + 408);
      int v26 = *(unsigned __int8 *)(a1 + 88);
      int v27 = *(unsigned __int8 *)(a1 + 89);
      int v28 = *(unsigned __int8 *)(a1 + 90);
      double v29 = *(float *)(a1 + 92);
      *(_DWORD *)long long buf = 134223360;
      double v33 = v10;
      __int16 v34 = 2048;
      double v35 = v11;
      __int16 v36 = 2048;
      double v37 = v12;
      __int16 v38 = 2048;
      double v39 = v13;
      __int16 v40 = 1024;
      int v41 = v14;
      __int16 v42 = 2048;
      double v43 = v15;
      __int16 v44 = 1024;
      int v45 = v16;
      __int16 v46 = 1024;
      int v47 = v17;
      __int16 v48 = 2048;
      uint64_t v49 = v18;
      __int16 v50 = 1024;
      int v51 = v19;
      __int16 v52 = 1024;
      BOOL v53 = v20;
      __int16 v54 = 2048;
      uint64_t v55 = v21;
      __int16 v56 = 2048;
      double v57 = v22;
      __int16 v58 = 2048;
      double v59 = v23;
      __int16 v60 = 2048;
      double v61 = a4;
      __int16 v62 = 1024;
      int v63 = v24;
      __int16 v64 = 2048;
      uint64_t v65 = v25;
      __int16 v66 = 1024;
      BOOL v67 = v8;
      __int16 v68 = 1024;
      int v69 = v26;
      __int16 v70 = 1024;
      int v71 = v27;
      __int16 v72 = 1024;
      int v73 = v28;
      __int16 v74 = 2048;
      double v75 = v29;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "GenericWorkoutCalorieModel,metHR,%f,metsWR,%f,metsPE,%f,userMets,%f,userMetsSource,%d,truthMets,%f,truthMetsSource,%d,PEType,%d,workout,%lu,actNoOverride,%d,gpsAvail,%d,rawGpsSpeed,%f,vm,%f,hr,%f,fhr,%f,steps,%d,pedDistance,%f,useFloor,%d,usePed,%d,gpsFloor,%d,motionFloor,%d,floor,%f", buf, 0xB6u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 == -1)
      {
LABEL_16:
        uint64_t v31 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCalorieGenericWorkoutModel::logResults(const CLNatalieModelInput &, const CLMetsInfo &, float) const", "%s\n", v31);
        if (v31 != (char *)buf) {
          free(v31);
        }
        return;
      }
LABEL_18:
      dispatch_once(&qword_102418FF0, &stru_1022B9B90);
      goto LABEL_16;
    }
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022B9B90);
    }
    uint64_t v30 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "Generic Calorie Workout Model is running out of session?", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 == -1) {
        goto LABEL_16;
      }
      goto LABEL_18;
    }
  }
}

BOOL sub_100528438(unsigned char *a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 232);
  long long v5 = *(_OWORD *)(a2 + 248);
  uint64_t v15 = *(void *)(a2 + 280);
  long long v6 = *(_OWORD *)(a2 + 168);
  long long v7 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)&v11.isStanding = *(_OWORD *)(a2 + 184);
  *(_OWORD *)&v11.isVehicleConnected = v7;
  *(_OWORD *)&v11.vehicleType = *(_OWORD *)(a2 + 216);
  long long v12 = v4;
  *(_OWORD *)&v11.type = *(_OWORD *)(a2 + 152);
  *(_OWORD *)&v11.mountedConfidence = v6;
  long long v8 = *(_OWORD *)(a2 + 264);
  long long v13 = v5;
  long long v14 = v8;
  if (CLMotionActivity::isInVehicle(&v11)) {
    return 0;
  }
  if (a1[90] && *(float *)(a2 + 296) > 1.0) {
    return 1;
  }
  if (!a1[89]) {
    return *(double *)(a2 + 408) > 0.0 && a1[91] != 0;
  }
  BOOL result = 1;
  if (*(double *)(a2 + 656) <= 0.447039992 && *(double *)(a2 + 616) > 0.0) {
    return *(double *)(a2 + 408) > 0.0 && a1[91] != 0;
  }
  return result;
}

void sub_100528514(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1005286D4(a1, a2, a3);
  float v6 = *(float *)(a2 + 1368);
  float v7 = *(float *)(a2 + 1372);
  float v8 = *(double *)(a2 + 560);
  float v9 = (*(float *)(a2 + 1380) - v8) / (*(float *)(a2 + 1380) - *(float *)(a2 + 1376));
  if sub_1001860C8(a2) && (sub_1001860C8(a2))
  {
    double v10 = *(double *)(a2 + 600);
    double v11 = *(double *)a2;
    BOOL v12 = sub_100528438((unsigned char *)a1, a2);
    if (v10 < v11)
    {
      float v13 = v6 * sub_101141BD8(v9, v7);
      char v14 = 1;
      goto LABEL_7;
    }
  }
  else
  {
    BOOL v12 = sub_100528438((unsigned char *)a1, a2);
  }
  char v14 = 0;
  float v13 = 0.0;
LABEL_7:
  if ((float)(1.0 - v9) <= 0.3 || v13 <= *(float *)(a3 + 4))
  {
    float v17 = *(float *)(a3 + 20);
    int v16 = *(_DWORD *)(a3 + 24);
    float v18 = *(float *)(a3 + 28);
    int v19 = *(_DWORD *)(a3 + 32);
  }
  else
  {
    int v16 = 1;
    float v17 = v13;
    float v18 = v13;
    int v19 = 1;
  }
  *(float *)a3 = v13;
  *(_DWORD *)(a3 + 24) = v16;
  *(_DWORD *)(a3 + 32) = v19;
  if (v12)
  {
    float v20 = *(float *)(a1 + 92);
    if (v20 > v17)
    {
      *(_DWORD *)(a3 + 24) = 3;
      float v17 = v20;
    }
  }
  *(float *)&int v21 = 2.1;
  if (v17 <= 2.1)
  {
    if ((v14 & 1) == 0) {
      int v21 = *(int *)(a1 + 92);
    }
    *(_DWORD *)(a3 + 24) = 3;
    float v17 = *(float *)&v21;
  }
  if (v17 < 2.1) {
    float v17 = 2.1;
  }
  *(float *)(a3 + 20) = v17;
  if (v18 < 2.1) {
    float v18 = 2.1;
  }
  *(float *)(a3 + 28) = v18;
  float v22 = *(float *)(a3 + 12);
  if (v22 < 2.1) {
    float v22 = 2.1;
  }
  *(float *)(a3 + 12) = v22;

  sub_100527F14(a1, a2, a3, 1.0 - v9);
}

double sub_1005286D4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 3;
  *(void *)(a3 + 32) = 3;
  if (*(unsigned char *)(a1 + 88))
  {
    sub_100528954(a1, a2, (uint64_t)v7);
    double result = *(double *)v7;
    long long v5 = v7[1];
    *(_OWORD *)a3 = v7[0];
    *(_OWORD *)(a3 + 16) = v5;
    *(void *)(a3 + 32) = v8;
  }
  else
  {
    sub_10068D230();
    *(_DWORD *)(a3 + 4) = v6;
    *(_DWORD *)(a3 + 12) = v6;
    *(_DWORD *)(a3 + 20) = v6;
    *(_DWORD *)(a3 + 28) = v6;
    *(_DWORD *)(a3 + 24) = 0;
    double result = COERCE_DOUBLE(&_mh_execute_header);
    *(void *)(a3 + 32) = &_mh_execute_header;
  }
  return result;
}

uint64_t sub_100528764(uint64_t a1, uint64_t a2, double a3)
{
  if (sub_10007E0D4(a1 + 48, a3)) {
    int v6 = sub_1014EFF6C(a1 + 8, a2);
  }
  else {
    int v6 = 0;
  }
  if (*(unsigned char *)(a1 + 89)) {
    int v7 = (*(uint64_t (**)(void, double))(**(void **)(a2 + 16) + 48))(*(void *)(a2 + 16), a3);
  }
  else {
    int v7 = 1;
  }
  unsigned int v8 = (*(uint64_t (**)(void, double))(**(void **)(a2 + 8) + 48))(*(void *)(a2 + 8), a3);
  if (v6) {
    return v7 & v8;
  }
  else {
    return 0;
  }
}

uint64_t sub_100528840(uint64_t a1, uint64_t a2, double a3)
{
  sub_10003B0C0(a1 + 48, a2, a3);
  nullsub_1536(a1 + 8, a2, a3);
  if (!(*(unsigned int (**)(void, double))(**(void **)(a2 + 48) + 48))(*(void *)(a2 + 48), a3)
    || ((result = (*(uint64_t (**)(void, unsigned char *, double))(**(void **)(a2 + 48) + 24))(*(void *)(a2 + 48), v8, a3), result)? (BOOL v7 = v8[208] == 0): (BOOL v7 = 0), !v7))
  {
    uint64_t result = sub_10046B90C(*(void *)(a2 + 8), *(double *)(*(void *)(a2 + 8) + 104), *(double *)(*(void *)(a2 + 8) + 112));
    if (*(unsigned char *)(a1 + 89)) {
      return sub_100528B3C(*(void *)(a2 + 16), *(double *)(*(void *)(a2 + 16) + 104), *(double *)(*(void *)(a2 + 16) + 112));
    }
  }
  return result;
}

float sub_100528954@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_10019F278(a1 + 48, a2);
  sub_1014EFF94(a1 + 8, a2, (uint64_t)v9);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 3;
  *(void *)(a3 + 32) = 3;
  if (sub_100038F68(*(_DWORD *)(a2 + 288)) && v11 > v9[1]) {
    int v6 = (float *)&v10;
  }
  else {
    int v6 = v9;
  }
  long long v7 = *((_OWORD *)v6 + 1);
  *(_OWORD *)a3 = *(_OWORD *)v6;
  *(_OWORD *)(a3 + 16) = v7;
  *(void *)(a3 + 32) = *((void *)v6 + 4);
  float result = *(float *)(a3 + 4);
  *(float *)(a3 + 20) = result;
  *(float *)(a3 + 28) = result;
  *(_DWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  return result;
}

void *sub_100528A0C(void *a1)
{
  *a1 = off_1022B9B50;
  sub_100528AE4(a1 + 6);
  return a1;
}

void sub_100528A50(void *a1)
{
  *a1 = off_1022B9B50;
  sub_100528AE4(a1 + 6);

  operator delete();
}

void sub_100528AB4(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void *sub_100528AE4(void *a1)
{
  *a1 = off_102302070;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  return a1;
}

BOOL sub_100528B3C(uint64_t a1, double a2, double a3)
{
  if (*(unsigned char *)(a1 + 80))
  {
    BOOL result = 1;
  }
  else if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1))
  {
    *(double *)(a1 + 72) = a2;
    BOOL result = 1;
    *(unsigned char *)(a1 + 80) = 1;
    *(unsigned char *)(a1 + 120) = 0;
  }
  else
  {
    BOOL result = *(unsigned char *)(a1 + 80) != 0;
  }
  double v7 = a2 + a3;
  if (*(double *)(a1 + 88) >= a2 + a3) {
    double v7 = *(double *)(a1 + 88);
  }
  *(double *)(a1 + 88) = v7;
  return result;
}

uint64_t sub_100528BDC(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  sub_100528C2C((uint64_t **)a1);
  return a1;
}

void sub_100528C14(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100528C2C(uint64_t **a1)
{
  sub_100134750(__p, "WifiCentroidOverrides");
  sub_1005290E4(a1, (std::string::size_type)__p);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  int v2 = 1;
  do
  {
    std::to_string(&v8, v2);
    uint64_t v3 = std::string::insert(&v8, 0, "WifiCentroidOverrides");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    std::string::size_type v10 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    BOOL v5 = sub_1005290E4(a1, (std::string::size_type)__p);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[0]);
    }
  }
  while (v2++ != 100 && v5);
}

void sub_100528D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100528D40(uint64_t **a1, std::string::size_type a2, uint64_t a3)
{
  memset(&v24, 0, sizeof(v24));
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v21 = 0;
  if (sub_1004D1284(a3, "mac", &v24)
    && sub_1000A699C(a3, "lat", &v23)
    && sub_1000A699C(a3, "lon", &v22)
    && sub_1000A699C(a3, "acc", &v21))
  {
    uint64_t v20 = sub_100B38F04((uint64_t)&v24);
    sub_10106EB84(v20, (uint64_t)&v17);
    *((void *)&v17 + 1) = v23;
    uint64_t v18 = v22;
    uint64_t v19 = v21;
    sub_10052952C(a1, &v20, &v20, &v17);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022B9BB0);
    }
    int v6 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(char *)(a2 + 23);
      std::string::size_type v8 = *(void *)a2;
      sub_100B39278(&__p);
      std::string::size_type v9 = v7 >= 0 ? a2 : v8;
      std::string::size_type v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)long long buf = 136381699;
      std::string::size_type v32 = v9;
      __int16 v33 = 2081;
      __int16 v34 = v10;
      __int16 v35 = 2049;
      uint64_t v36 = v23;
      __int16 v37 = 2049;
      uint64_t v38 = v22;
      __int16 v39 = 2049;
      uint64_t v40 = v21;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning, WifiCentroidOverrides, found defaults write %{private}s: %{private}s, latlon %{private}.7f, %{private}.7f, acc %{private}.1f", buf, 0x34u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022B9BB0);
      }
      int v11 = *(char *)(a2 + 23);
      std::string::size_type v12 = *(void *)a2;
      sub_100B39278(&v16);
      if (v11 >= 0) {
        std::string::size_type v13 = a2;
      }
      else {
        std::string::size_type v13 = v12;
      }
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v14 = &v16;
      }
      else {
        char v14 = (std::string *)v16.__r_.__value_.__r.__words[0];
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136381699;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v13;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2081;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v14;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 2049;
      uint64_t v26 = v23;
      __int16 v27 = 2049;
      uint64_t v28 = v22;
      __int16 v29 = 2049;
      uint64_t v30 = v21;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiCentroidDefaultsWriteOverrides::processWifiCentroidOverrideNameValuePair(const std::string &, const CLNameValuePair &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_1005290B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1005290E4(uint64_t **a1, std::string::size_type a2)
{
  sub_1000E9354(v9);
  sub_1000C7F88(&v7);
  if (*(char *)(a2 + 23) >= 0) {
    long long v4 = (const char *)a2;
  }
  else {
    long long v4 = *(const char **)a2;
  }
  BOOL v5 = sub_100012960(v7, v4, v9);
  if (v8) {
    sub_1000DB0A0(v8);
  }
  if (v5) {
    sub_100528D40(a1, a2, (uint64_t)v9);
  }
  sub_10013F3C4(v9);
  return v5;
}

void sub_100529178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_1005291A4(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 16))
  {
    int v2 = a2 + 1;
    uint64_t v3 = (void *)*a2;
    if ((void *)*a2 != a2 + 1)
    {
      BOOL v5 = (void *)(a1 + 8);
      do
      {
        if (v5 != sub_100529674(a1, v3 + 4))
        {
          int v6 = (void *)sub_1005294BC(a1, v3 + 4);
          uint64_t v8 = v6[1];
          uint64_t v7 = v6[2];
          uint64_t v9 = v6[4];
          v3[6] = v8;
          v3[7] = v7;
          v3[9] = v9;
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022B9BB0);
          }
          std::string::size_type v10 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v11 = *(void *)(a1 + 16);
            sub_100B39278(&__p);
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)long long buf = 134219011;
            uint64_t v27 = v11;
            __int16 v28 = 2081;
            __int16 v29 = p_p;
            __int16 v30 = 2049;
            uint64_t v31 = v8;
            __int16 v32 = 2049;
            uint64_t v33 = v7;
            __int16 v34 = 2049;
            uint64_t v35 = v9;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning, WifiCentroidOverrides (size %lu), overrode %{private}s centroid with latlon %{private}.7f, %{private}.7f, acc %{private}.1f", buf, 0x34u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1022B9BB0);
            }
            std::string::size_type v16 = *(void *)(a1 + 16);
            sub_100B39278(&v19);
            long long v17 = &v19;
            if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              long long v17 = (std::string *)v19.__r_.__value_.__r.__words[0];
            }
            LODWORD(__p.__r_.__value_.__l.__data_) = 134219011;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v16;
            WORD2(__p.__r_.__value_.__r.__words[1]) = 2081;
            *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v17;
            HIWORD(__p.__r_.__value_.__r.__words[2]) = 2049;
            uint64_t v21 = v8;
            __int16 v22 = 2049;
            uint64_t v23 = v7;
            __int16 v24 = 2049;
            uint64_t v25 = v9;
            uint64_t v18 = (char *)_os_log_send_and_compose_impl();
            if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v19.__r_.__value_.__l.__data_);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiCentroidDefaultsWriteOverrides::overrideMacCentroidsIfPossible(std::map<CLMacAddress, CLWifiAPLocation> &)", "%s\n", v18);
            if (v18 != (char *)buf) {
              free(v18);
            }
          }
        }
        std::string::size_type v13 = (void *)v3[1];
        if (v13)
        {
          do
          {
            char v14 = v13;
            std::string::size_type v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            char v14 = (void *)v3[2];
            BOOL v15 = *v14 == (void)v3;
            uint64_t v3 = v14;
          }
          while (!v15);
        }
        uint64_t v3 = v14;
      }
      while (v14 != v2);
    }
  }
}

uint64_t sub_1005294BC(uint64_t a1, void *a2)
{
  uint64_t v2 = *sub_1005295E0(a1, &v4, a2);
  if (!v2) {
    sub_10000EDDC("map::at:  key not found");
  }
  return v2 + 40;
}

void sub_1005294FC(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

char *sub_10052952C(uint64_t **a1, void *a2, void *a3, _OWORD *a4)
{
  uint64_t v7 = (void **)sub_1005295E0((uint64_t)a1, &v14, a2);
  uint64_t v8 = (char *)*v7;
  if (!*v7)
  {
    uint64_t v9 = (uint64_t **)v7;
    uint64_t v8 = (char *)operator new(0x88uLL);
    long long v10 = a4[3];
    *(_OWORD *)(v8 + 72) = a4[2];
    *(_OWORD *)(v8 + 88) = v10;
    long long v11 = a4[5];
    *(_OWORD *)(v8 + 104) = a4[4];
    *(_OWORD *)(v8 + 120) = v11;
    long long v12 = a4[1];
    *(_OWORD *)(v8 + 40) = *a4;
    *((void *)v8 + 4) = *a3;
    *(_OWORD *)(v8 + 56) = v12;
    sub_1000EDF90(a1, v14, v9, (uint64_t *)v8);
  }
  return v8;
}

void *sub_1005295E0(uint64_t a1, void *a2, void *a3)
{
  BOOL v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = v4 + 4;
        if (!sub_100B391A0(a3, v4 + 4)) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        BOOL v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!sub_100B391A0(v8, a3)) {
        break;
      }
      BOOL v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void *sub_100529674(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  BOOL v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = sub_100B391A0(v3 + 4, a2);
    uint64_t v7 = v3 + 1;
    if (!v6)
    {
      uint64_t v7 = v3;
      BOOL v5 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_100B391A0(a2, v5 + 4)) {
    return v2;
  }
  return v5;
}

uint64_t sub_1005296F0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  sub_100529748((_OWORD *)a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_100529730(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_100529748(_OWORD *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    BOOL v5 = (uint64_t **)result;
    BOOL v6 = (void *)result + 1;
    do
    {
      BOOL result = sub_1005297D4(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_OWORD *sub_1005297D4(uint64_t **a1, void *a2, void *a3, uint64_t a4)
{
  BOOL v6 = sub_100529874(a1, a2, &v14, &v13, a3);
  uint64_t v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x88uLL);
    long long v9 = *(_OWORD *)(a4 + 80);
    v7[6] = *(_OWORD *)(a4 + 64);
    void v7[7] = v9;
    *((void *)v7 + 16) = *(void *)(a4 + 96);
    long long v10 = *(_OWORD *)(a4 + 16);
    _OWORD v7[2] = *(_OWORD *)a4;
    v7[3] = v10;
    long long v11 = *(_OWORD *)(a4 + 48);
    v7[4] = *(_OWORD *)(a4 + 32);
    v7[5] = v11;
    sub_1000EDF90(a1, v14, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_100529874(void *a1, void *a2, void *a3, uint64_t *a4, void *a5)
{
  long long v9 = a1 + 1;
  if (a1 + 1 != a2 && !sub_100B391A0(a5, a2 + 4))
  {
    if (!sub_100B391A0(a2 + 4, a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      uint64_t v14 = (void *)a2[1];
      do
      {
        BOOL v15 = v14;
        uint64_t v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = a2;
      do
      {
        BOOL v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_100B391A0(a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    long long v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  long long v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      long long v12 = v11;
      long long v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    std::string::size_type v16 = a2;
    do
    {
      long long v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      std::string::size_type v16 = v12;
    }
    while (v17);
  }
  if (sub_100B391A0(v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return sub_1005295E0((uint64_t)a1, a3, a5);
}

void sub_100529ABC(id a1)
{
  qword_10247B2C0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLVO2MaxServiceSilo"];
}

void sub_100529FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_10052A244(id a1)
{
  if (sub_10016CCBC()) {
    byte_10247B2D0 = 1;
  }
}

void sub_10052AAE4()
{
}

id sub_10052AB64(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onUserInfoUpdate:a2 data:a3];
}

id sub_10052AB74(uint64_t a1, void *a2)
{
  return _[a2 forceClearHistoryDatabase];
}

id sub_10052AB7C(uint64_t a1, void *a2)
{
  return [a2 updateBypassParameters];
}

void sub_10052B1B0(_Unwind_Exception *a1)
{
}

NSDictionary *sub_10052B1D0(uint64_t a1)
{
  v10[0] = @"age_bin";
  float v2 = *(float *)(*(void *)(a1 + 32) + 172);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  sub_10010F834(&__p, (const void *)qword_10247B2E0, unk_10247B2E8, (unk_10247B2E8 - qword_10247B2E0) >> 2);
  if (v8 == __p)
  {
    unint64_t v3 = 0;
  }
  else
  {
    unint64_t v3 = 0;
    unint64_t v4 = (v8 - (unsigned char *)__p) >> 2;
    if (v4 <= 1) {
      unint64_t v4 = 1;
    }
    while (*((float *)__p + v3) < v2)
    {
      if (v4 == ++v3)
      {
        unint64_t v3 = v4;
        break;
      }
    }
  }
  v11[0] = +[NSNumber numberWithInt:v3];
  v10[1] = @"biologicalSex";
  v11[1] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 156)];
  void v11[2] = &off_102392630;
  v10[2] = @"currentAlgVersion";
  v10[3] = @"reasonIneligible";
  v11[3] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 176)];
  v10[4] = @"status";
  v11[4] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 60)];
  uint64_t v10[5] = @"estimateAverageDelta";
  v11[5] = +[NSNumber numberWithDouble:*(double *)(a1 + 120)];
  v10[6] = @"estimateVariabilityDelta";
  void v11[6] = +[NSNumber numberWithDouble:*(double *)(a1 + 168)];
  v10[7] = @"highPercentileEstimateDelta";
  v11[7] = +[NSNumber numberWithDouble:*(double *)(a1 + 160)];
  v10[8] = @"meanPercentileDelta";
  v11[8] = +[NSNumber numberWithDouble:*(double *)(a1 + 128)];
  v10[9] = @"newEstimateN";
  v11[9] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 140)];
  v10[10] = @"numUpdatedEstimatesTotal";
  _OWORD v11[10] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 136)];
  v10[11] = @"removeEstimateN";
  v11[11] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 144)];
  BOOL v5 = +[NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:12];
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_10052B434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
}

void sub_10052B8CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    sub_1000DB0A0(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_10052B8FC(uint64_t a1, xpc_activity_t activity)
{
  if (xpc_activity_get_state(activity))
  {
    [*(id *)(a1 + 32) onRetrocomputePreprocessingActivity:activity];
    if (xpc_activity_get_state(activity) == 2 && !xpc_activity_set_state(activity, 4))
    {
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B9D18);
      }
      unint64_t v4 = qword_102419228;
      if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 134349056;
        os_activity_scope_state_s state = (const char *)xpc_activity_get_state(activity);
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Failed to mark VO2MaxRetrocomputePreProcessing activity as Continue. Current state is %{public}ld", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419220 != -1) {
          dispatch_once(&qword_102419220, &stru_1022B9D18);
        }
        xpc_activity_get_state(activity);
        BOOL v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "-[CLVO2MaxService scheduleRetrocomputePreprocessing]_block_invoke", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
    }
  }
  else
  {
    xpc_object_t v6 = xpc_activity_copy_criteria(activity);
    if (!v6) {
      xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    }
    int64_t int64 = xpc_dictionary_get_int64(v6, XPC_ACTIVITY_DELAY);
    if (int64 == *(void *)(a1 + 40))
    {
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B9D18);
      }
      uint64_t v8 = qword_102419228;
      if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(const char **)(a1 + 40);
        *(_DWORD *)long long buf = 134349056;
        os_activity_scope_state_s state = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "XPC_CHECK_IN: VO2MaxRetrocomputePreProcessing already scheduled with a delay of %{public}lld seconds", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419220 != -1) {
          dispatch_once(&qword_102419220, &stru_1022B9D18);
        }
        long long v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "-[CLVO2MaxService scheduleRetrocomputePreprocessing]_block_invoke", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
    }
    else
    {
      int64_t v11 = int64;
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B9D18);
      }
      long long v12 = qword_102419228;
      if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 136446722;
        os_activity_scope_state_s state = "com.apple.locationd.VO2Max.RetrocomputePreprocessing";
        __int16 v17 = 2050;
        int64_t v18 = v11;
        __int16 v19 = 2050;
        uint64_t v20 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "XPC_CHECK_IN: %{public}s: Overwriting previous delay (%{public}lld) with a new delay of %{public}lld seconds", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419220 != -1) {
          dispatch_once(&qword_102419220, &stru_1022B9D18);
        }
        uint64_t v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "-[CLVO2MaxService scheduleRetrocomputePreprocessing]_block_invoke", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      xpc_dictionary_set_int64(v6, XPC_ACTIVITY_DELAY, *(void *)(a1 + 40));
      xpc_dictionary_set_int64(v6, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_1_HOUR);
      xpc_dictionary_set_string(v6, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
      xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_REQUIRES_CLASS_B, 1);
      xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_ALLOW_BATTERY, 1);
      xpc_activity_set_criteria(activity, v6);
    }
    xpc_release(v6);
  }
}

void sub_10052C0E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_1000DB0A0(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_10052D7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46)
{
  if (a46) {
    sub_1000DB0A0(a46);
  }
  _Unwind_Resume(a1);
}

__n128 sub_10052D870(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_10052D894(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  sub_100536F84(&v1);
}

void sub_10052D8C0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4)
  {
    if ([a4 code] == (id)6)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B9D18);
      }
      BOOL v5 = qword_102419228;
      if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "HealthKit VO2Max query failed due to device lock", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_57;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B9D18);
      }
      *(_WORD *)__int16 v39 = 0;
      xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLVO2MaxService executeRetrocomputePreprocessing:]_block_invoke", "%s\n", v6);
      if (v6 == buf) {
        goto LABEL_57;
      }
LABEL_61:
      free(v6);
      goto LABEL_57;
    }
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022B9D18);
    }
    __int16 v32 = qword_102419228;
    if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      *(void *)&uint8_t buf[4] = [a4 code];
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "HealthKit VO2Max query encountered error,%{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B9D18);
      }
      *(_DWORD *)__int16 v39 = 134349056;
      *(void *)&v39[4] = [a4 code];
      xpc_object_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLVO2MaxService executeRetrocomputePreprocessing:]_block_invoke", "%s\n", v6);
      if (v6 != buf) {
        goto LABEL_61;
      }
    }
  }
  else
  {
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id v7 = [a3 countByEnumeratingWithState:&v35 objects:v45 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v36;
      do
      {
        uint64_t v9 = 0;
        do
        {
          if (*(void *)v36 != v8) {
            objc_enumerationMutation(a3);
          }
          long long v10 = *(void **)(*((void *)&v35 + 1) + 8 * (void)v9);
          [objc_msgSend(v10, "quantity") doubleValueForUnit:+[HKUnit unitFromString:](HKUnit, "unitFromString:", @"ml/(kg*min)")]
          uint64_t v12 = v11;
          if (qword_102419220 != -1) {
            dispatch_once(&qword_102419220, &stru_1022B9D18);
          }
          uint64_t v13 = qword_102419228;
          if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEFAULT))
          {
            id v14 = [[[v10 startDate] description];
            id v15 = [[objc_msgSend(v10, "endDate") description];
            id v16 = [objc_msgSend(v10, "metadata") description];
            id v17 = [objc_msgSend(v10, "sourceRevision") description];
            *(_DWORD *)long long buf = 134284547;
            *(void *)&uint8_t buf[4] = v12;
            *(_WORD *)&unsigned char buf[12] = 2113;
            *(void *)&unsigned char buf[14] = v14;
            *(_WORD *)&buf[22] = 2113;
            id v47 = v15;
            *(_WORD *)__int16 v48 = 2113;
            *(void *)&v48[2] = v16;
            *(_WORD *)&v48[10] = 2113;
            *(void *)uint64_t v49 = v17;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Retrieved sample... VO2Max: %{private}f, startTime: %{private}@, endTime: %{private}@, metadata: %{private}@, sourceRevision: %{private}@", buf, 0x34u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419220 != -1) {
              dispatch_once(&qword_102419220, &stru_1022B9D18);
            }
            id v25 = [[[v10 startDate] description];
            id v26 = [[objc_msgSend(v10, "endDate") description];
            id v27 = [[objc_msgSend(v10, "metadata") description];
            id v28 = [[objc_msgSend(v10, "sourceRevision") description];
            *(_DWORD *)__int16 v39 = 134284547;
            *(void *)&v39[4] = v12;
            *(_WORD *)&v39[12] = 2113;
            *(void *)&v39[14] = v25;
            *(_WORD *)&v39[22] = 2113;
            id v40 = v26;
            __int16 v41 = 2113;
            id v42 = v27;
            __int16 v43 = 2113;
            id v44 = v28;
            __int16 v29 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "-[CLVO2MaxService executeRetrocomputePreprocessing:]_block_invoke", "%s\n", v29);
            if (v29 != buf) {
              free(v29);
            }
          }
          if ([v10 metadata]
            && objc_msgSend(objc_msgSend(v10, "metadata"), "objectForKeyedSubscript:", HKMetadataKeySyncIdentifier)
            && objc_msgSend(objc_msgSend(v10, "metadata"), "objectForKeyedSubscript:", HKMetadataKeySyncVersion))
          {
            [objc_msgSend(v10, "startDate") timeIntervalSinceReferenceDate];
            *(void *)long long buf = v18;
            [objc_msgSend(v10, "endDate") timeIntervalSinceReferenceDate];
            *(void *)&uint8_t buf[8] = v19;
            *(void *)&uint8_t buf[16] = v12;
            id v47 = 0;
            *(void *)__int16 v48 = 0;
            v48[8] = [[[v10 metadata] objectForKeyedSubscript:HKMetadataKeySyncVersion] intValue];
            *(_DWORD *)&v48[8] = v48[8];
            sub_100134750(&v49[4], "");
            if ([v10 sourceRevision] && objc_msgSend(objc_msgSend(v10, "sourceRevision"), "source"))
            {
              sub_100134750(v39, (char *)[[[[v10 sourceRevision] source] bundleIdentifier] UTF8String]);
              if (SHIBYTE(v50) < 0) {
                operator delete(*(void **)&v49[4]);
              }
              *(_OWORD *)&void v49[4] = *(_OWORD *)v39;
              uint64_t v50 = *(void *)&v39[16];
            }
            [objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", objc_msgSend(objc_msgSend(v10, "metadata"), "objectForKeyedSubscript:", HKMetadataKeySyncIdentifier)) getUUIDBytes:&v47];
            uint64_t v20 = *(uint64_t **)(*(void *)(a1 + 48) + 8);
            uint64_t v21 = v20 + 6;
            unint64_t v22 = v20[7];
            if (v22 >= v20[8])
            {
              uint64_t v23 = sub_10053709C(v21, (long long *)buf);
            }
            else
            {
              sub_100537028((uint64_t)v21, (long long *)buf);
              uint64_t v23 = v22 + 72;
            }
            v20[7] = v23;
            if (SHIBYTE(v50) < 0) {
              operator delete(*(void **)&v49[4]);
            }
          }
          else
          {
            if (qword_102419220 != -1) {
              dispatch_once(&qword_102419220, &stru_1022B9D18);
            }
            __int16 v24 = qword_102419228;
            if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Will not attempt to retrocompute sample due to missing metadata", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419220 != -1) {
                dispatch_once(&qword_102419220, &stru_1022B9D18);
              }
              *(_WORD *)__int16 v39 = 0;
              __int16 v30 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "-[CLVO2MaxService executeRetrocomputePreprocessing:]_block_invoke", "%s\n", v30);
              if (v30 != buf) {
                free(v30);
              }
            }
          }
          uint64_t v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        id v31 = [a3 countByEnumeratingWithState:&v35 objects:v45 count:16];
        id v7 = v31;
      }
      while (v31);
    }
  }
LABEL_57:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10052E198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a64 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id sub_10052E1C8(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  if (!xpc_activity_should_defer(*(xpc_activity_t *)(a1 + 40)))
  {
LABEL_13:
    uint64_t v6 = *(void *)(a1 + 56);
    if (!*(unsigned char *)(*(void *)(v6 + 8) + 24))
    {
      unsigned __int8 v7 = [*(id *)(a1 + 48) retrocomputeForSamples:*(void *)(*(void *)(a1 + 64) + 8) + 48 withRetrocomputeHistory:*(void *)(*(void *)(a1 + 72) + 8) + 48];
      uint64_t v6 = *(void *)(a1 + 56);
      if ((v7 & 2) != 0)
      {
        *(unsigned char *)(*(void *)(v6 + 8) + 24) = 1;
        uint64_t v6 = *(void *)(a1 + 56);
      }
    }
    if (*(unsigned char *)(*(void *)(v6 + 8) + 24)) {
      uint64_t v8 = &XPC_ACTIVITY_INTERVAL_30_MIN;
    }
    else {
      uint64_t v8 = &XPC_ACTIVITY_INTERVAL_1_DAY;
    }
    id result = [*(id *)(a1 + 48) resetRetrocomputePreProcessingActivity:*(void *)(a1 + 40) withDelay:*v8];
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)) {
      return [*(id *)(a1 + 48) sendRetroComputeAnalytics];
    }
    return result;
  }
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_1022B9D18);
  }
  float v2 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Attempting to defer VO2MaxRetrocomputePreProcessing activity", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022B9D18);
    }
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLVO2MaxService executeRetrocomputePreprocessing:]_block_invoke", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  id result = (id)xpc_activity_set_state(*(xpc_activity_t *)(a1 + 40), 3);
  if ((result & 1) == 0)
  {
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022B9D18);
    }
    unint64_t v4 = qword_102419228;
    if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_FAULT))
    {
      xpc_activity_state_t state = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 40));
      *(_DWORD *)long long buf = 134349056;
      xpc_activity_state_t v12 = state;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Failed to mark VO2MaxRetrocomputePreProcessing activity as deferred. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B9D18);
      }
      xpc_activity_get_state(*(xpc_activity_t *)(a1 + 40));
      long long v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLVO2MaxService executeRetrocomputePreprocessing:]_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_10052E55C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 88);
  *(void *)(result + 80) = *(void *)(a2 + 80);
  *(void *)(result + 8_Block_object_dispose(&STACK[0x850], 8) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10052E578(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 88);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

void sub_10052EF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100530698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }
  if (a26)
  {
    a27 = (uint64_t)a26;
    operator delete(a26);
  }
  sub_100530928((uint64_t)&STACK[0x300]);
  _Unwind_Resume(a1);
}

uint64_t sub_100530800(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_OWORD *)(a1 + 9) = *(long long *)((char *)a2 + 9);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = 0;
  sub_1000E39FC((void *)(a1 + 32), *((const void **)a2 + 4), *((void *)a2 + 5), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3));
  *(_OWORD *)(a1 + 56) = *(long long *)((char *)a2 + 56);
  long long v5 = *(long long *)((char *)a2 + 72);
  long long v6 = *(long long *)((char *)a2 + 88);
  long long v7 = *(long long *)((char *)a2 + 104);
  *(_OWORD *)(a1 + 120) = *(long long *)((char *)a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 8_Block_object_dispose(&STACK[0x850], 8) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  long long v8 = *(long long *)((char *)a2 + 136);
  long long v9 = *(long long *)((char *)a2 + 152);
  long long v10 = *(long long *)((char *)a2 + 168);
  *(_OWORD *)(a1 + 184) = *(long long *)((char *)a2 + 184);
  *(_OWORD *)(a1 + 16_Block_object_dispose(&STACK[0x850], 8) = v10;
  *(_OWORD *)(a1 + 152) = v9;
  *(_OWORD *)(a1 + 136) = v8;
  long long v11 = *(long long *)((char *)a2 + 200);
  long long v12 = *(long long *)((char *)a2 + 216);
  *(_OWORD *)(a1 + 22_Block_object_dispose(&STACK[0x850], 8) = *(long long *)((char *)a2 + 228);
  *(_OWORD *)(a1 + 216) = v12;
  *(_OWORD *)(a1 + 200) = v11;
  uint64_t v13 = (unsigned char *)(a1 + 248);
  if (*((char *)a2 + 271) < 0)
  {
    sub_1000DC48C(v13, *((void **)a2 + 31), *((void *)a2 + 32));
  }
  else
  {
    long long v14 = *(long long *)((char *)a2 + 248);
    *(void *)(a1 + 264) = *((void *)a2 + 33);
    *(_OWORD *)uint64_t v13 = v14;
  }
  *(_DWORD *)(a1 + 272) = *((_DWORD *)a2 + 68);
  return a1;
}

void sub_10053090C(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100530928(uint64_t a1)
{
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100530BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100531AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (__p) {
    operator delete(__p);
  }
  a39 = (uint64_t)&a21;
  sub_100538BA4((void ***)&a39);
  a39 = (uint64_t)&a24;
  sub_100538BA4((void ***)&a39);
  _Unwind_Resume(a1);
}

uint64_t sub_100531B4C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  long long v7 = *(_OWORD *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 96);
  long long v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x850], 8) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = v8;
  uint64_t v10 = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 144) = v10;
  uint64_t v11 = a1 + 160;
  if (*(char *)(a2 + 183) < 0)
  {
    sub_1000DC48C((unsigned char *)v11, *(void **)(a2 + 160), *(void *)(a2 + 168));
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 160);
    *(void *)(v11 + 16) = *(void *)(a2 + 176);
    *(_OWORD *)uint64_t v11 = v12;
  }
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  return a1;
}

void sub_10053218C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
}

id sub_100532684(uint64_t a1, char a2, uint64_t a3)
{
  if (a2)
  {
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022B9D18);
    }
    long long v4 = qword_102419228;
    if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Retrocomputed VO2Max sample successfully pushed to HKHealthStore", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B9D18);
      }
      long long v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLVO2MaxService saveStagingOutputToHealthKit:activity:]_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    return [*(id *)(a1 + 32) onRetrocomputeHealthKitSampleSavedWithStartTime:*(void *)(a1 + 40) activity:*(double *)(a1 + 48)];
  }
  else
  {
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022B9D18);
    }
    long long v7 = qword_102419228;
    if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      uint64_t v11 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Retrocomputed VO2Max sample failed to push to HKHealthStore, %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B9D18);
      }
      long long v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLVO2MaxService saveStagingOutputToHealthKit:activity:]_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    return [*(id *)(a1 + 32) onRetrocomputeHealthKitSampleFailed:*(void *)(a1 + 40)];
  }
}

id sub_100532978(uint64_t a1, char a2, uint64_t a3)
{
  if (a2)
  {
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022B9D18);
    }
    long long v4 = qword_102419228;
    if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Retrocomputed VO2Max sample successfully pushed to HKHealthStore", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B9D18);
      }
      long long v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLVO2MaxService saveStagingOutputToHealthKit:activity:]_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    return [*(id *)(a1 + 32) onRetrocomputeHealthKitSampleSavedWithStartTime:*(void *)(a1 + 40) activity:*(double *)(a1 + 48)];
  }
  else
  {
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022B9D18);
    }
    long long v7 = qword_102419228;
    if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138543362;
      uint64_t v11 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Retrocomputed VO2Max sample failed to push to HKHealthStore, %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B9D18);
      }
      long long v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLVO2MaxService saveStagingOutputToHealthKit:activity:]_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    return [*(id *)(a1 + 32) onRetrocomputeHealthKitSampleFailed:*(void *)(a1 + 40)];
  }
}

void sub_100533124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005336B4(uint64_t a1, _xpc_activity_s *a2)
{
  [*(id *)(a1 + 32) onRetryTriggerRetrocompute:a2];
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4))
  {
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022B9D18);
    }
    unint64_t v3 = qword_102419228;
    if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136446466;
      long long v6 = "com.apple.locationd.VO2Max.RetrocomputeRetryTrigger";
      __int16 v7 = 2050;
      xpc_activity_state_t state = xpc_activity_get_state(a2);
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Failed to mark %{public}s activity as Continue. Current state is %{public}ld", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B9D18);
      }
      xpc_activity_get_state(a2);
      long long v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLVO2MaxService retryTriggerRetrocompute]_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_100534564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
}

void sub_100534A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100534D14(uint64_t a1, _xpc_activity_s *a2)
{
  [*(id *)(a1 + 32) onRetryHealthKitDeleteSamples:a2];
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4))
  {
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022B9D18);
    }
    unint64_t v3 = qword_102419228;
    if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 134349056;
      xpc_activity_state_t state = xpc_activity_get_state(a2);
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Failed to mark activity as Continue. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B9D18);
      }
      xpc_activity_get_state(a2);
      long long v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLVO2MaxService retryHealthKitDeleteSamples]_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_10053521C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

void sub_100535A7C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_1022B9D18);
  }
  long long v8 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109634;
    int v13 = a2;
    __int16 v14 = 2048;
    uint64_t v15 = a3;
    __int16 v16 = 2112;
    uint64_t v17 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Delete HK Sessions,success,%d,deletedObjectCount,%lu,error,%@", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022B9D18);
    }
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLVO2MaxService deleteSessionsFromHealthKit:withRetry:]_block_invoke", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (a2)
  {
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022B9D18);
    }
    long long v9 = qword_102419228;
    if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Successfully deleted samples from HKHealthStore", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_1022B9D18);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLVO2MaxService deleteSessionsFromHealthKit:withRetry:]_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 124) = 1;
  }
  else if (*(unsigned char *)(a1 + 48))
  {
    [*(id *)(a1 + 40) retryHealthKitDeleteSamples];
  }
}

void sub_100536970(id a1)
{
  qword_102419228 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

Class sub_1005369A0()
{
  if (qword_10247B308 != -1) {
    dispatch_once(&qword_10247B308, &stru_1022B9D38);
  }
  Class result = objc_getClass("NRPairedDeviceRegistry");
  qword_10247B300 = (uint64_t)result;
  off_10241C338 = sub_100536A04;
  return result;
}

uint64_t sub_100536A04()
{
  return qword_10247B300;
}

void sub_100536A10(id a1)
{
  qword_10247B310 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry", 2);
}

void *sub_100536A3C@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  long long v4 = operator new(0x1C0uLL);
  Class result = sub_100536A98(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100536A84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100536A98(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B9D68;
  sub_10150219C(a1 + 3, *a2);
  return a1;
}

void sub_100536AE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100536AF8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B9D68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100536B18(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B9D68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100536B6C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void *sub_100536B94@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  long long v4 = operator new(0x1E0uLL);
  Class result = sub_100536BF0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100536BDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100536BF0(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B9DB8;
  sub_1006527E4(a1 + 3, *a2);
  return a1;
}

void sub_100536C3C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100536C50(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B9DB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100536C70(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B9DB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100536CC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void *sub_100536CEC@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  long long v4 = operator new(0x208uLL);
  Class result = sub_100536D48(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100536D34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100536D48(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B9E08;
  sub_1012B9F7C(a1 + 3, *a2);
  return a1;
}

void sub_100536D94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100536DA8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B9E08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100536DC8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B9E08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100536E1C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void *sub_100536E44@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  long long v4 = operator new(0x28uLL);
  Class result = sub_100536EA0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100536E8C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100536EA0(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B9E58;
  sub_1000E1294(a1 + 3, *a2, 0);
  return a1;
}

void sub_100536EF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100536F04(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022B9E58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100536F24(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022B9E58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

id *sub_100536F78(uint64_t a1)
{
  return sub_1000E1098((id *)(a1 + 24));
}

void sub_100536F84(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100536FD8((uint64_t *)v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_100536FD8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 72)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

unsigned char *sub_100537028(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  long long v4 = *a2;
  long long v5 = a2[1];
  *(_OWORD *)(v3 + 2_Block_object_dispose(&STACK[0x850], 8) = *(long long *)((char *)a2 + 28);
  *(_OWORD *)uint64_t v3 = v4;
  *(_OWORD *)(v3 + 16) = v5;
  Class result = (unsigned char *)(v3 + 48);
  if (*((char *)a2 + 71) < 0)
  {
    Class result = sub_1000DC48C(result, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = a2[3];
    *(void *)(v3 + 64) = *((void *)a2 + 8);
    *(_OWORD *)Class result = v7;
  }
  *(void *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = v3 + 72;
  return result;
}

void sub_100537094(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&STACK[0x850], 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10053709C(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1C71C71C71C71C7) {
    unint64_t v9 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v21 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_10021D4B8(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[72 * v4];
  v18[0] = v10;
  v18[1] = v11;
  uint64_t v19 = v11;
  uint64_t v20 = &v10[72 * v9];
  long long v12 = *a2;
  long long v13 = a2[1];
  *(_OWORD *)(v11 + 2_Block_object_dispose(&STACK[0x850], 8) = *(long long *)((char *)a2 + 28);
  *(_OWORD *)uint64_t v11 = v12;
  *((_OWORD *)v11 + 1) = v13;
  __int16 v14 = v11 + 48;
  if (*((char *)a2 + 71) < 0)
  {
    sub_1000DC48C(v14, *((void **)a2 + 6), *((void *)a2 + 7));
    uint64_t v11 = v19;
  }
  else
  {
    long long v15 = a2[3];
    *((void *)v11 + _Block_object_dispose(&STACK[0x850], 8) = *((void *)a2 + 8);
    *(_OWORD *)__int16 v14 = v15;
  }
  uint64_t v19 = v11 + 72;
  sub_1005371EC(a1, v18);
  uint64_t v16 = a1[1];
  sub_10053739C((uint64_t)v18);
  return v16;
}

void sub_1005371D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10053739C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005371EC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100537264((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100537264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 72);
      long long v11 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v9 - 44) = *(_OWORD *)(a3 - 44);
      *(_OWORD *)(v9 - 56) = v11;
      *(_OWORD *)(v9 - 72) = v10;
      long long v12 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - _Block_object_dispose(&STACK[0x850], 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v12;
      v9 -= 72;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - _Block_object_dispose(&STACK[0x850], 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    *((void *)&v17 + 1) = v9;
  }
  char v15 = 1;
  sub_10053731C((uint64_t)v14);
  return a6;
}

uint64_t sub_10053731C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100537354(a1);
  }
  return a1;
}

void sub_100537354(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 71) < 0) {
      operator delete(*(void **)(v1 + 48));
    }
    v1 += 72;
  }
}

uint64_t sub_10053739C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1005373D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 72;
      *(void *)(a1 + 16) = v2 - 72;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_10053742C(unint64_t a1, double *a2, uint64_t a3, char a4)
{
__n128 sub_100537F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  result.n128_u64[0] = *(void *)(a2 + 8);
  double v4 = *(double *)(a3 + 8);
  if (result.n128_f64[0] >= *(double *)(a1 + 8))
  {
    if (v4 < result.n128_f64[0])
    {
      long long v29 = *(_OWORD *)(a2 + 32);
      long long v33 = *(_OWORD *)(a2 + 48);
      long long v37 = *(_OWORD *)(a2 + 64);
      __n128 v21 = *(__n128 *)a2;
      long long v25 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      long long v8 = *(_OWORD *)(a3 + 64);
      long long v10 = *(_OWORD *)(a3 + 16);
      long long v9 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = v8;
      *(_OWORD *)(a2 + 16) = v10;
      *(_OWORD *)(a2 + 32) = v9;
      *(_OWORD *)(a3 + 4_Block_object_dispose(&STACK[0x850], 8) = v33;
      *(_OWORD *)(a3 + 64) = v37;
      result.n128_u64[1] = v21.n128_u64[1];
      *(__n128 *)a3 = v21;
      *(_OWORD *)(a3 + 16) = v25;
      *(_OWORD *)(a3 + 32) = v29;
      result.n128_u64[0] = *(void *)(a2 + 8);
      if (result.n128_f64[0] < *(double *)(a1 + 8))
      {
        long long v30 = *(_OWORD *)(a1 + 32);
        long long v34 = *(_OWORD *)(a1 + 48);
        long long v38 = *(_OWORD *)(a1 + 64);
        __n128 v22 = *(__n128 *)a1;
        long long v26 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        long long v11 = *(_OWORD *)(a2 + 64);
        long long v13 = *(_OWORD *)(a2 + 16);
        long long v12 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 64) = v11;
        *(_OWORD *)(a1 + 16) = v13;
        *(_OWORD *)(a1 + 32) = v12;
        *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x850], 8) = v34;
        *(_OWORD *)(a2 + 64) = v38;
        __n128 result = v22;
        *(__n128 *)a2 = v22;
        *(_OWORD *)(a2 + 16) = v26;
        *(_OWORD *)(a2 + 32) = v30;
      }
    }
  }
  else
  {
    if (v4 >= result.n128_f64[0])
    {
      long long v31 = *(_OWORD *)(a1 + 32);
      long long v35 = *(_OWORD *)(a1 + 48);
      long long v39 = *(_OWORD *)(a1 + 64);
      __n128 v23 = *(__n128 *)a1;
      long long v27 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      long long v14 = *(_OWORD *)(a2 + 64);
      long long v16 = *(_OWORD *)(a2 + 16);
      long long v15 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v14;
      *(_OWORD *)(a1 + 16) = v16;
      *(_OWORD *)(a1 + 32) = v15;
      *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x850], 8) = v35;
      *(_OWORD *)(a2 + 64) = v39;
      result.n128_u64[1] = v23.n128_u64[1];
      *(__n128 *)a2 = v23;
      *(_OWORD *)(a2 + 16) = v27;
      *(_OWORD *)(a2 + 32) = v31;
      result.n128_u64[0] = *(void *)(a3 + 8);
      if (result.n128_f64[0] >= *(double *)(a2 + 8)) {
        return result;
      }
      long long v28 = *(_OWORD *)(a2 + 32);
      long long v32 = *(_OWORD *)(a2 + 48);
      long long v36 = *(_OWORD *)(a2 + 64);
      __n128 v20 = *(__n128 *)a2;
      long long v24 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      long long v17 = *(_OWORD *)(a3 + 64);
      long long v19 = *(_OWORD *)(a3 + 16);
      long long v18 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = v17;
      *(_OWORD *)(a2 + 16) = v19;
      *(_OWORD *)(a2 + 32) = v18;
    }
    else
    {
      long long v28 = *(_OWORD *)(a1 + 32);
      long long v32 = *(_OWORD *)(a1 + 48);
      long long v36 = *(_OWORD *)(a1 + 64);
      __n128 v20 = *(__n128 *)a1;
      long long v24 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      long long v5 = *(_OWORD *)(a3 + 64);
      long long v7 = *(_OWORD *)(a3 + 16);
      long long v6 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a1 + 64) = v5;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 32) = v6;
    }
    *(_OWORD *)(a3 + 4_Block_object_dispose(&STACK[0x850], 8) = v32;
    *(_OWORD *)(a3 + 64) = v36;
    __n128 result = v20;
    *(__n128 *)a3 = v20;
    *(_OWORD *)(a3 + 16) = v24;
    *(_OWORD *)(a3 + 32) = v28;
  }
  return result;
}

BOOL sub_10053813C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 72) < *(double *)(a1 + 8))
      {
        long long v48 = *(_OWORD *)(a1 + 32);
        long long v54 = *(_OWORD *)(a1 + 48);
        long long v60 = *(_OWORD *)(a1 + 64);
        long long v36 = *(_OWORD *)a1;
        long long v42 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 80);
        long long v6 = *(_OWORD *)(a2 - 16);
        long long v8 = *(_OWORD *)(a2 - 64);
        long long v7 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 64) = v6;
        *(_OWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a1 + 32) = v7;
        *(_OWORD *)(a2 - 32) = v54;
        *(_OWORD *)(a2 - 16) = v60;
        *(_OWORD *)(a2 - 80) = v36;
        *(_OWORD *)(a2 - 64) = v42;
        *(_OWORD *)(a2 - 4_Block_object_dispose(&STACK[0x850], 8) = v48;
      }
      return result;
    case 3uLL:
      sub_100537F58(a1, a1 + 80, a2 - 80);
      return 1;
    case 4uLL:
      sub_1005384F4(a1, a1 + 80, a1 + 160, a2 - 80);
      return 1;
    case 5uLL:
      __n128 v20 = (long long *)(a1 + 80);
      __n128 v21 = (long long *)(a1 + 160);
      __n128 v22 = (long long *)(a1 + 240);
      sub_1005384F4(a1, a1 + 80, a1 + 160, a1 + 240);
      if (*(double *)(a2 - 72) >= *(double *)(a1 + 248)) {
        return 1;
      }
      long long v50 = *(_OWORD *)(a1 + 272);
      long long v56 = *(_OWORD *)(a1 + 288);
      long long v61 = *(_OWORD *)(a1 + 304);
      long long v38 = *v22;
      long long v44 = *(_OWORD *)(a1 + 256);
      long long *v22 = *(_OWORD *)(a2 - 80);
      long long v23 = *(_OWORD *)(a2 - 16);
      long long v25 = *(_OWORD *)(a2 - 64);
      long long v24 = *(_OWORD *)(a2 - 48);
      *(_OWORD *)(a1 + 28_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 304) = v23;
      *(_OWORD *)(a1 + 256) = v25;
      *(_OWORD *)(a1 + 272) = v24;
      *(_OWORD *)(a2 - 32) = v56;
      *(_OWORD *)(a2 - 16) = v61;
      *(_OWORD *)(a2 - 80) = v38;
      *(_OWORD *)(a2 - 64) = v44;
      *(_OWORD *)(a2 - 4_Block_object_dispose(&STACK[0x850], 8) = v50;
      if (*(double *)(a1 + 248) >= *(double *)(a1 + 168)) {
        return 1;
      }
      long long v51 = *(_OWORD *)(a1 + 192);
      long long v57 = *(_OWORD *)(a1 + 208);
      long long v62 = *(_OWORD *)(a1 + 224);
      long long v39 = *v21;
      long long v45 = *(_OWORD *)(a1 + 176);
      long long v26 = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 20_Block_object_dispose(&STACK[0x850], 8) = v26;
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 304);
      long long v27 = *(_OWORD *)(a1 + 256);
      *__n128 v21 = *v22;
      *(_OWORD *)(a1 + 176) = v27;
      *(_OWORD *)(a1 + 28_Block_object_dispose(&STACK[0x850], 8) = v57;
      *(_OWORD *)(a1 + 304) = v62;
      *(_OWORD *)(a1 + 256) = v45;
      *(_OWORD *)(a1 + 272) = v51;
      double v28 = *(double *)(a1 + 168);
      double v29 = *(double *)(a1 + 88);
      long long *v22 = v39;
      if (v28 >= v29) {
        return 1;
      }
      long long v52 = *(_OWORD *)(a1 + 112);
      long long v58 = *(_OWORD *)(a1 + 128);
      long long v63 = *(_OWORD *)(a1 + 144);
      long long v40 = *v20;
      long long v46 = *(_OWORD *)(a1 + 96);
      long long v30 = *(_OWORD *)(a1 + 208);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 192);
      *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x850], 8) = v30;
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a1 + 224);
      long long v31 = *(_OWORD *)(a1 + 176);
      long long *v20 = *v21;
      *(_OWORD *)(a1 + 96) = v31;
      *(_OWORD *)(a1 + 20_Block_object_dispose(&STACK[0x850], 8) = v58;
      *(_OWORD *)(a1 + 224) = v63;
      *(_OWORD *)(a1 + 176) = v46;
      *(_OWORD *)(a1 + 192) = v52;
      double v32 = *(double *)(a1 + 88);
      double v33 = *(double *)(a1 + 8);
      *__n128 v21 = v40;
      if (v32 >= v33) {
        return 1;
      }
      long long v53 = *(_OWORD *)(a1 + 32);
      long long v59 = *(_OWORD *)(a1 + 48);
      long long v64 = *(_OWORD *)(a1 + 64);
      long long v41 = *(_OWORD *)a1;
      long long v47 = *(_OWORD *)(a1 + 16);
      long long v34 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = v34;
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 144);
      long long v35 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)a1 = *v20;
      *(_OWORD *)(a1 + 16) = v35;
      *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x850], 8) = v59;
      *(_OWORD *)(a1 + 144) = v64;
      *(_OWORD *)(a1 + 96) = v47;
      *(_OWORD *)(a1 + 112) = v53;
      BOOL result = 1;
      long long *v20 = v41;
      return result;
    default:
      uint64_t v9 = a1 + 160;
      sub_100537F58(a1, a1 + 80, a1 + 160);
      uint64_t v10 = a1 + 240;
      if (a1 + 240 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      long long v37 = *(_OWORD *)(v10 + 16);
      long long v43 = *(_OWORD *)(v10 + 32);
      long long v49 = *(_OWORD *)(v10 + 48);
      long long v55 = *(_OWORD *)(v10 + 64);
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        long long v17 = *(_OWORD *)(a1 + v15 + 208);
        *(_OWORD *)(v16 + 272) = *(_OWORD *)(a1 + v15 + 192);
        *(_OWORD *)(v16 + 28_Block_object_dispose(&STACK[0x850], 8) = v17;
        *(_OWORD *)(v16 + 304) = *(_OWORD *)(a1 + v15 + 224);
        long long v18 = *(_OWORD *)(a1 + v15 + 176);
        *(_OWORD *)(v16 + 240) = *(_OWORD *)(a1 + v15 + 160);
        *(_OWORD *)(v16 + 256) = v18;
        if (v15 == -160) {
          break;
        }
        v15 -= 80;
        if (v13 >= *(double *)(v16 + 88))
        {
          uint64_t v19 = a1 + v15 + 240;
          goto LABEL_12;
        }
      }
      uint64_t v19 = a1;
LABEL_12:
      *(void *)uint64_t v19 = v14;
      *(double *)(v19 + _Block_object_dispose(&STACK[0x850], 8) = v13;
      *(_OWORD *)(v19 + 16) = v37;
      *(_OWORD *)(v19 + 32) = v43;
      *(_OWORD *)(v19 + 4_Block_object_dispose(&STACK[0x850], 8) = v49;
      *(_OWORD *)(v19 + 64) = v55;
      if (++v12 == 8) {
        return v10 + 80 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 80;
    v10 += 80;
    if (v10 == a2) {
      return 1;
    }
  }
}

__n128 sub_1005384F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100537F58(a1, a2, a3);
  result.n128_u64[0] = *(void *)(a4 + 8);
  if (result.n128_f64[0] < *(double *)(a3 + 8))
  {
    long long v24 = *(_OWORD *)(a3 + 32);
    long long v27 = *(_OWORD *)(a3 + 48);
    long long v30 = *(_OWORD *)(a3 + 64);
    long long v18 = *(_OWORD *)a3;
    long long v21 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    long long v9 = *(_OWORD *)(a4 + 64);
    long long v11 = *(_OWORD *)(a4 + 16);
    long long v10 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a3 + 4_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 64) = v9;
    *(_OWORD *)(a3 + 16) = v11;
    *(_OWORD *)(a3 + 32) = v10;
    *(_OWORD *)(a4 + 4_Block_object_dispose(&STACK[0x850], 8) = v27;
    *(_OWORD *)(a4 + 64) = v30;
    result.n128_u64[1] = *((void *)&v18 + 1);
    *(_OWORD *)a4 = v18;
    *(_OWORD *)(a4 + 16) = v21;
    *(_OWORD *)(a4 + 32) = v24;
    result.n128_u64[0] = *(void *)(a3 + 8);
    if (result.n128_f64[0] < *(double *)(a2 + 8))
    {
      long long v25 = *(_OWORD *)(a2 + 32);
      long long v28 = *(_OWORD *)(a2 + 48);
      long long v31 = *(_OWORD *)(a2 + 64);
      long long v19 = *(_OWORD *)a2;
      long long v22 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      long long v12 = *(_OWORD *)(a3 + 64);
      long long v14 = *(_OWORD *)(a3 + 16);
      long long v13 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 64) = v12;
      *(_OWORD *)(a2 + 16) = v14;
      *(_OWORD *)(a2 + 32) = v13;
      *(_OWORD *)(a3 + 4_Block_object_dispose(&STACK[0x850], 8) = v28;
      *(_OWORD *)(a3 + 64) = v31;
      result.n128_u64[1] = *((void *)&v19 + 1);
      *(_OWORD *)a3 = v19;
      *(_OWORD *)(a3 + 16) = v22;
      *(_OWORD *)(a3 + 32) = v25;
      result.n128_u64[0] = *(void *)(a2 + 8);
      if (result.n128_f64[0] < *(double *)(a1 + 8))
      {
        long long v26 = *(_OWORD *)(a1 + 32);
        long long v29 = *(_OWORD *)(a1 + 48);
        long long v32 = *(_OWORD *)(a1 + 64);
        __n128 v20 = *(__n128 *)a1;
        long long v23 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        long long v15 = *(_OWORD *)(a2 + 64);
        long long v17 = *(_OWORD *)(a2 + 16);
        long long v16 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 64) = v15;
        *(_OWORD *)(a1 + 16) = v17;
        *(_OWORD *)(a1 + 32) = v16;
        *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x850], 8) = v29;
        *(_OWORD *)(a2 + 64) = v32;
        __n128 result = v20;
        *(__n128 *)a2 = v20;
        *(_OWORD *)(a2 + 16) = v23;
        *(_OWORD *)(a2 + 32) = v26;
      }
    }
  }
  return result;
}

char *sub_100538668(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  long long v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  long long v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if ((uint64_t)(0xD37A6F4DE9BD37A7 * ((uint64_t)(v11 - v12) >> 3)) < a5)
  {
    long long v13 = *(void **)a1;
    unint64_t v14 = a5 - 0x2C8590B21642C859 * ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 > 0x1642C8590B21642) {
      sub_1001D7FD4();
    }
    unint64_t v15 = 0xD37A6F4DE9BD37A7 * ((__dst - (uint64_t)v13) >> 3);
    unint64_t v16 = 0xD37A6F4DE9BD37A7 * ((v10 - (uint64_t)v13) >> 3);
    uint64_t v17 = 2 * v16;
    if (2 * v16 <= v14) {
      uint64_t v17 = v14;
    }
    if (v16 >= 0xB21642C8590B21) {
      unint64_t v18 = 0x1642C8590B21642;
    }
    else {
      unint64_t v18 = v17;
    }
    uint64_t v53 = v9;
    if (v18) {
      long long v19 = (char *)sub_10050F820(v9, v18);
    }
    else {
      long long v19 = 0;
    }
    long long v36 = &v19[184 * v15];
    std::string __p = v19;
    long long v50 = v36;
    long long v52 = &v19[184 * v18];
    uint64_t v37 = 184 * a5;
    long long v38 = &v36[184 * a5];
    do
    {
      long long v39 = *(_OWORD *)v7;
      long long v40 = *((_OWORD *)v7 + 1);
      long long v41 = *((_OWORD *)v7 + 3);
      *((_OWORD *)v36 + 2) = *((_OWORD *)v7 + 2);
      *((_OWORD *)v36 + 3) = v41;
      *(_OWORD *)long long v36 = v39;
      *((_OWORD *)v36 + 1) = v40;
      long long v42 = *((_OWORD *)v7 + 4);
      long long v43 = *((_OWORD *)v7 + 5);
      long long v44 = *((_OWORD *)v7 + 7);
      *((_OWORD *)v36 + 6) = *((_OWORD *)v7 + 6);
      *((_OWORD *)v36 + 7) = v44;
      *((_OWORD *)v36 + 4) = v42;
      *((_OWORD *)v36 + 5) = v43;
      long long v45 = *((_OWORD *)v7 + 8);
      long long v46 = *((_OWORD *)v7 + 9);
      long long v47 = *((_OWORD *)v7 + 10);
      *((void *)v36 + 22) = *((void *)v7 + 22);
      *((_OWORD *)v36 + 9) = v46;
      *((_OWORD *)v36 + 10) = v47;
      *((_OWORD *)v36 + _Block_object_dispose(&STACK[0x850], 8) = v45;
      v36 += 184;
      v7 += 184;
      v37 -= 184;
    }
    while (v37);
    long long v51 = v38;
    long long v5 = (char *)sub_10053899C((void **)a1, (uint64_t)&__p, v5);
    if (v51 != v50) {
      long long v51 = &v50[(v51 - v50 - 184) % 0xB8uLL];
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v20 = v12 - __dst;
  if ((uint64_t)(0xD37A6F4DE9BD37A7 * ((uint64_t)(v12 - __dst) >> 3)) >= a5)
  {
    long long v21 = &__src[184 * a5];
    long long v23 = *(char **)(v9 - 8);
LABEL_17:
    long long v24 = &v5[184 * a5];
    long long v25 = &v23[-184 * a5];
    long long v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      long long v26 = v23;
      do
      {
        long long v27 = *(_OWORD *)v25;
        long long v28 = *((_OWORD *)v25 + 1);
        long long v29 = *((_OWORD *)v25 + 3);
        *((_OWORD *)v26 + 2) = *((_OWORD *)v25 + 2);
        *((_OWORD *)v26 + 3) = v29;
        *(_OWORD *)long long v26 = v27;
        *((_OWORD *)v26 + 1) = v28;
        long long v30 = *((_OWORD *)v25 + 4);
        long long v31 = *((_OWORD *)v25 + 5);
        long long v32 = *((_OWORD *)v25 + 7);
        *((_OWORD *)v26 + 6) = *((_OWORD *)v25 + 6);
        *((_OWORD *)v26 + 7) = v32;
        *((_OWORD *)v26 + 4) = v30;
        *((_OWORD *)v26 + 5) = v31;
        long long v33 = *((_OWORD *)v25 + 8);
        long long v34 = *((_OWORD *)v25 + 9);
        long long v35 = *((_OWORD *)v25 + 10);
        *((void *)v26 + 22) = *((void *)v25 + 22);
        *((_OWORD *)v26 + 9) = v34;
        *((_OWORD *)v26 + 10) = v35;
        *((_OWORD *)v26 + _Block_object_dispose(&STACK[0x850], 8) = v33;
        v25 += 184;
        v26 += 184;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = v26;
    if (v23 != v24) {
      memmove(&v5[184 * a5], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  long long v21 = &__src[8 * ((uint64_t)(v12 - __dst) >> 3)];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * ((uint64_t)(v12 - __dst) >> 3)], a4 - v21);
  }
  long long v23 = (char *)(v12 + v22);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = v12 + v22;
  if (v20 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_100538944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10053899C(void **a1, uint64_t a2, char *__src)
{
  long long v5 = *(void **)(a2 + 8);
  long long v6 = (char *)*a1;
  long long v7 = v5;
  if (*a1 != __src)
  {
    long long v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      long long v10 = *(_OWORD *)(v8 - 184);
      long long v11 = *(_OWORD *)(v8 - 168);
      long long v12 = *(_OWORD *)(v8 - 152);
      *(_OWORD *)(v9 - 136) = *(_OWORD *)(v8 - 136);
      *(_OWORD *)(v9 - 152) = v12;
      *(_OWORD *)(v9 - 16_Block_object_dispose(&STACK[0x850], 8) = v11;
      *(_OWORD *)(v9 - 184) = v10;
      long long v13 = *(_OWORD *)(v8 - 120);
      long long v14 = *(_OWORD *)(v8 - 104);
      long long v15 = *(_OWORD *)(v8 - 88);
      *(_OWORD *)(v9 - 72) = *(_OWORD *)(v8 - 72);
      *(_OWORD *)(v9 - 8_Block_object_dispose(&STACK[0x850], 8) = v15;
      *(_OWORD *)(v9 - 104) = v14;
      *(_OWORD *)(v9 - 120) = v13;
      long long v16 = *(_OWORD *)(v8 - 56);
      long long v17 = *(_OWORD *)(v8 - 40);
      long long v18 = *(_OWORD *)(v8 - 24);
      long long v7 = (void *)(v9 - 184);
      *(void *)(v9 - _Block_object_dispose(&STACK[0x850], 8) = *((void *)v8 - 1);
      *(_OWORD *)(v9 - 24) = v18;
      *(_OWORD *)(v9 - 40) = v17;
      *(_OWORD *)(v9 - 56) = v16;
      v8 -= 184;
      v9 -= 184;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + _Block_object_dispose(&STACK[0x850], 8) = v7;
  long long v19 = a1[1];
  uint64_t v20 = *(void *)(a2 + 16);
  int64_t v21 = v19 - __src;
  if (v19 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v19 - __src);
    long long v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v20 + v21;
  int64_t v22 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + _Block_object_dispose(&STACK[0x850], 8) = v22;
  long long v23 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v23;
  long long v24 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v24;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void *sub_100538ACC(void **a1, void *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100538B1C(result);
    operator delete();
  }
  return result;
}

void *sub_100538B1C(void *a1)
{
  uint64_t v2 = (void *)a1[156];
  if (v2)
  {
    a1[157] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[155];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1004B3E28(a1 + 148);
  uint64_t v4 = (std::__shared_weak_count *)a1[144];
  if (v4) {
    sub_1000DB0A0(v4);
  }
  long long v5 = (void *)a1[133];
  if (v5)
  {
    a1[134] = v5;
    operator delete(v5);
  }
  long long v6 = (void *)a1[130];
  if (v6)
  {
    a1[131] = v6;
    operator delete(v6);
  }
  sub_1015776E4(a1 + 17);
  sub_1002CDF4C(a1 + 9);
  return a1;
}

void sub_100538BA4(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100538BF8((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_100538BF8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 192)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  a1[1] = v2;
}

uint64_t sub_100538C48()
{
  sub_100134750(qword_10247B2A8, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247B2A8, (void *)&_mh_execute_header);
}

uint64_t sub_100538CA8(uint64_t a1, int a2)
{
  *(void *)a1 = off_1022B9EA8;
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = 0;
  uint64_t v3 = (BOOL *)(a1 + 8);
  *(_DWORD *)(a1 + 12) = a2;
  *(_OWORD *)(a1 + 16) = xmmword_101D22E10;
  uint64_t v4 = (uint64_t *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = xmmword_101D22E10;
  long long v5 = (void *)(a1 + 32);
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(void *)(a1 + 96) = 0xBFF0000000000000;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = 0;
  sub_100B9BEAC((float32x4_t *)(a1 + 104), (float32x4_t)0);
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 156) = xmmword_101D1F280;
  *(void *)(a1 + 172) = 0x1FF00000000;
  *(_DWORD *)(a1 + 180) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022B9F20);
  }
  long long v6 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)long long buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Starting device motion service %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9F20);
    }
    int v29 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)long long v40 = 67240192;
    *(_DWORD *)&v40[4] = v29;
    long long v30 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLSensorFusionService::CLSensorFusionService(int)", "%s\n", v30);
    if (v30 != buf) {
      free(v30);
    }
  }
  uint64_t v8 = sub_1000D3E78();
  sub_10006B564(v8, buf);
  char v9 = sub_1000D2988(*(uint64_t *)buf, "LogDeviceMotion", v3);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if ((v9 & 1) == 0) {
    *uint64_t v3 = 0;
  }
  sub_1000D3E78();
  BOOL v35 = sub_1009E90AC();
  uint64_t v10 = sub_1000D3E78();
  sub_10006B564(v10, buf);
  sub_1000D2988(*(uint64_t *)buf, "DeviceMotionUseThrottledInterval", &v35);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v11 = sub_1000D3E78();
  sub_10006B564(v11, buf);
  char v12 = sub_1000A699C(*(uint64_t *)buf, "DeviceMotionAccelerometerUpdateInterval", v4);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if ((v12 & 1) == 0) {
    uint64_t *v4 = qword_101D22E20[!v35];
  }
  uint64_t v13 = sub_1000D3E78();
  sub_10006B564(v13, buf);
  char v14 = sub_1000A699C(*(uint64_t *)buf, "DeviceMotionGyroUpdateInterval", (void *)(a1 + 24));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if ((v14 & 1) == 0) {
    *(void *)(a1 + 24) = qword_101D22E30[!v35];
  }
  uint64_t v15 = sub_1000D3E78();
  sub_10006B564(v15, buf);
  char v16 = sub_1000A699C(*(uint64_t *)buf, "DeviceMotionCompassUpdateInterval", v5);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if ((v16 & 1) == 0) {
    *long long v5 = 0x3F847AE147AE147BLL;
  }
  uint64_t v17 = sub_100A08A84();
  double v18 = sub_100A09AFC(v17, (double *)(a1 + 24));
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022B9F20);
  }
  long long v19 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v20 = *v4;
    *(_DWORD *)long long buf = 134349312;
    *(double *)&uint8_t buf[4] = v18;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(void *)&unsigned char buf[14] = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "GyroUpdateInterval,%{public}.4f,AccelerometerUpdateInterval,%{public}.4f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9F20);
    }
    uint64_t v31 = *v4;
    *(_DWORD *)long long v40 = 134349312;
    *(double *)&v40[4] = v18;
    *(_WORD *)&v40[12] = 2050;
    *(void *)&v40[14] = v31;
    long long v32 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLSensorFusionService::CLSensorFusionService(int)", "%s\n", v32);
    if (v32 != buf) {
      free(v32);
    }
  }
  if (*v3)
  {
    *(void *)long long v40 = off_1022E6878;
    *(void *)&v40[8] = CFAbsoluteTimeGetCurrent();
    float v21 = v18;
    *(float *)&v40[20] = v21;
    uint64_t v22 = sub_101282D9C();
    sub_10128431C(v22, (uint64_t)v40);
    sub_10170140C(buf);
    sub_101726D38((uint64_t)buf);
    v39 |= 1u;
    uint64_t v37 = *(void *)&v40[8];
    uint64_t v23 = v38;
    *(unsigned char *)(v38 + 12) |= 1u;
    *(float *)(v23 + _Block_object_dispose(&STACK[0x850], 8) = v21;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022B9F40);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)buf);
    }
    sub_101706914((PB::Base *)buf);
  }
  sub_1000D3E78();
  if (sub_1009E90AC())
  {
    uint64_t v24 = sub_1000D3E78();
    sub_10006B564(v24, buf);
    v40[0] = 0;
    int v25 = sub_1000D2988(*(uint64_t *)buf, "DumpGyroCalibrationDatabaseOnDeviceMotionStart", v40);
    if (v40[0]) {
      int v26 = v25;
    }
    else {
      int v26 = 0;
    }
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
    if (v26)
    {
      [+[NSDate date] timeIntervalSinceReferenceDate];
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472;
      v33[2] = sub_1005393EC;
      v33[3] = &unk_1022B9EF0;
      long long v34 = +[NSString stringWithFormat:@"%.0f", v27];
      [objc_msgSend(objc_msgSend(objc_msgSend((id)sub_1000D5BCC(), "vendor"), "proxyForService:", @"CLGyroCalibrationDatabase"), "dumpDatabase:onCompletion:", v34, v33];
    }
  }
  return a1;
}

void sub_1005393A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1005393EC(uint64_t a1)
{
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022B9F20);
  }
  uint64_t v2 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Dumped gyro cal database with id %@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9F20);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLSensorFusionService::CLSensorFusionService(int)_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

uint64_t sub_1005395A0(uint64_t a1)
{
  *(void *)a1 = off_1022B9EA8;
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022B9F20);
  }
  uint64_t v2 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)long long buf = 67240192;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Stopping device motion service %{public}#x", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9F20);
    }
    long long v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLSensorFusionService::~CLSensorFusionService()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return a1;
}

void sub_100539774(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

double sub_100539788(uint64_t a1, double *a2)
{
  double result = *a2;
  *(double *)(a1 + 40) = *a2;
  return result;
}

void sub_100539794(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 88);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 88));
  *(void *)a2 = *(void *)(a1 + 96);
  if (a1 + 96 != a2) {
    *(_OWORD *)(a2 + _Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a1 + 104);
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(a2 + 2_Block_object_dispose(&STACK[0x850], 8) = *(_DWORD *)(a1 + 124);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 128);
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 132);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 136);
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(a1 + 140);
  *(_DWORD *)(a2 + 4_Block_object_dispose(&STACK[0x850], 8) = *(_DWORD *)(a1 + 144);
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 148);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 152);
  *(void *)(a2 + 60) = *(void *)(a1 + 156);
  *(_DWORD *)(a2 + 6_Block_object_dispose(&STACK[0x850], 8) = *(_DWORD *)(a1 + 164);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 168);
  *(_DWORD *)(a2 + 76) = *(_DWORD *)(a1 + 172);
  *(_DWORD *)(a2 + 80) = *(_DWORD *)(a1 + 176);
  long long v5 = *(_OWORD *)(a1 + 180);
  *(_DWORD *)(a2 + 100) = *(_DWORD *)(a1 + 196);
  *(_OWORD *)(a2 + 84) = v5;

  os_unfair_lock_unlock(v4);
}

void sub_10053987C(uint64_t a1, uint64_t a2)
{
  sub_100539980(a1, a2);
  uint64_t v4 = *(void (**)(uint64_t, void, void))(a1 + 56);
  if (v4) {
    v4(a2, *(unsigned int *)(a1 + 12), *(void *)(a1 + 64));
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 88));
  *(void *)(a1 + 96) = *(void *)a2;
  if (a1 + 96 != a2) {
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 8);
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 12_Block_object_dispose(&STACK[0x850], 8) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 14_Block_object_dispose(&STACK[0x850], 8) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 156) = *(void *)(a2 + 60);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 16_Block_object_dispose(&STACK[0x850], 8) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 100);
  *(_OWORD *)(a1 + 180) = v5;

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 88));
}

void sub_100539980(uint64_t a1, uint64_t a2)
{
  if (*(double *)(a1 + 96) <= 0.0)
  {
    os_log_type_t v4 = OS_LOG_TYPE_DEFAULT;
  }
  else if (((*(unsigned __int16 *)(a1 + 178) ^ *(unsigned __int16 *)(a2 + 82)) >> 8))
  {
    os_log_type_t v4 = OS_LOG_TYPE_DEFAULT;
  }
  else
  {
    os_log_type_t v4 = OS_LOG_TYPE_DEBUG;
  }
  double v5 = sub_1000D3E50();
  double v6 = *(double *)a2;
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022B9F20);
  }
  double v7 = v5 - v6;
  uint64_t v8 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, v4))
  {
    double v9 = *(float *)(a2 + 8);
    double v10 = *(float *)(a2 + 12);
    double v11 = *(float *)(a2 + 16);
    double v12 = *(float *)(a2 + 20);
    double v13 = *(float *)(a2 + 24);
    double v14 = *(float *)(a2 + 28);
    double v15 = *(float *)(a2 + 32);
    double v16 = (float)(*(float *)(a2 + 36) * 57.296);
    double v17 = (float)(*(float *)(a2 + 40) * 57.296);
    double v18 = (float)(*(float *)(a2 + 44) * 57.296);
    double v19 = *(float *)(a2 + 48);
    double v20 = *(float *)(a2 + 52);
    double v21 = *(float *)(a2 + 56);
    double v22 = *(float *)(a2 + 68);
    double v23 = *(float *)(a2 + 72);
    double v24 = *(float *)(a2 + 76);
    double v25 = *(float *)(a2 + 60);
    double v26 = *(float *)(a2 + 64);
    int v27 = *(char *)(a2 + 80);
    int v28 = *(_DWORD *)(a2 + 84);
    int v29 = *(unsigned __int8 *)(a2 + 81);
    int v30 = *(unsigned __int16 *)(a2 + 82);
    uint64_t v31 = *(void *)(a2 + 96);
    double v32 = *(double *)a2;
    *(_DWORD *)long long buf = 134224384;
    double v92 = v9;
    __int16 v93 = 2048;
    double v94 = v10;
    __int16 v95 = 2048;
    double v96 = v11;
    __int16 v97 = 2048;
    double v98 = v12;
    __int16 v99 = 2048;
    double v100 = v13;
    __int16 v101 = 2048;
    double v102 = v14;
    __int16 v103 = 2048;
    double v104 = v15;
    __int16 v105 = 2048;
    double v106 = v16;
    __int16 v107 = 2048;
    double v108 = v17;
    __int16 v109 = 2048;
    double v110 = v18;
    __int16 v111 = 2048;
    double v112 = v19;
    __int16 v113 = 2048;
    double v114 = v20;
    __int16 v115 = 2048;
    double v116 = v21;
    __int16 v117 = 2048;
    double v118 = v22;
    __int16 v119 = 2048;
    double v120 = v23;
    __int16 v121 = 2048;
    double v122 = v24;
    __int16 v123 = 2048;
    double v124 = v25;
    __int16 v125 = 2048;
    double v126 = v26;
    __int16 v127 = 1026;
    int v128 = v27;
    __int16 v129 = 1026;
    int v130 = v28;
    __int16 v131 = 1026;
    int v132 = v29;
    __int16 v133 = 1026;
    int v134 = v30;
    __int16 v135 = 2050;
    uint64_t v136 = v31;
    __int16 v137 = 2050;
    double v138 = v32;
    __int16 v139 = 2050;
    double v140 = v5;
    __int16 v141 = 2050;
    double v142 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, v4, "[CLSensorFusionService] q.x,%10.10f,q.y,%10.10f,q.z,%10.10f,q.w,%10.10f,userAccel.x,%10.10f,userAccel.y,%10.10f,userAccel.z,%10.10f,rotationRate.x,%10.10f,rotationRate.y,%10.10f,rotationRate.z,%10.10f,magneticField.x,%10.10f,magneticField.y,%10.10f,magneticField.z,%10.10f,magBiasEstVar.x,%10.10f,magBiasEstVar.y,%10.10f,magBiasEstVar.z,%10.10f,heading,%.3f,accuracy,%.3f,level,%{public}d,variant,%{public}d,mode,%{public}d,status,%{public}#02x,clientID,%{public}llu,timestamp,%{public}lf,now,%{public}lf,latency,%{public}lf", buf, 0xF6u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9F20);
    }
    double v66 = *(float *)(a2 + 8);
    double v67 = *(float *)(a2 + 12);
    double v68 = *(float *)(a2 + 16);
    double v69 = *(float *)(a2 + 20);
    double v70 = *(float *)(a2 + 24);
    double v71 = *(float *)(a2 + 28);
    double v72 = *(float *)(a2 + 32);
    double v73 = (float)(*(float *)(a2 + 36) * 57.296);
    double v74 = (float)(*(float *)(a2 + 40) * 57.296);
    double v75 = (float)(*(float *)(a2 + 44) * 57.296);
    double v76 = *(float *)(a2 + 48);
    double v77 = *(float *)(a2 + 52);
    double v78 = *(float *)(a2 + 56);
    double v79 = *(float *)(a2 + 68);
    double v80 = *(float *)(a2 + 72);
    double v81 = *(float *)(a2 + 76);
    double v82 = *(float *)(a2 + 60);
    double v83 = *(float *)(a2 + 64);
    int v84 = *(char *)(a2 + 80);
    int v85 = *(_DWORD *)(a2 + 84);
    int v86 = *(unsigned __int8 *)(a2 + 81);
    int v87 = *(unsigned __int16 *)(a2 + 82);
    uint64_t v88 = *(void *)(a2 + 96);
    double v89 = *(double *)a2;
    *(_DWORD *)long long v146 = 134224384;
    *(double *)&v146[4] = v66;
    *(_WORD *)&v146[12] = 2048;
    *(double *)&v146[14] = v67;
    __int16 v147 = 2048;
    double v148 = v68;
    *(_WORD *)long long v149 = 2048;
    *(double *)&v149[2] = v69;
    *(_WORD *)&v149[10] = 2048;
    *(double *)&v149[12] = v70;
    *(_WORD *)&v149[20] = 2048;
    *(double *)&v149[22] = v71;
    *(_WORD *)&v149[30] = 2048;
    *(double *)&v149[32] = v72;
    *(_WORD *)long long v150 = 2048;
    *(double *)&v150[2] = v73;
    *(_WORD *)&v150[10] = 2048;
    double v151 = v74;
    __int16 v152 = 2048;
    *(double *)long long v153 = v75;
    *(_WORD *)&v153[8] = 2048;
    double v154 = v76;
    __int16 v155 = 2048;
    double v156 = v77;
    __int16 v157 = 2048;
    double v158 = v78;
    __int16 v159 = 2048;
    double v160 = v79;
    __int16 v161 = 2048;
    double v162 = v80;
    __int16 v163 = 2048;
    double v164 = v81;
    __int16 v165 = 2048;
    double v166 = v82;
    __int16 v167 = 2048;
    double v168 = v83;
    __int16 v169 = 1026;
    int v170 = v84;
    __int16 v171 = 1026;
    int v172 = v85;
    __int16 v173 = 1026;
    int v174 = v86;
    __int16 v175 = 1026;
    int v176 = v87;
    __int16 v177 = 2050;
    uint64_t v178 = v88;
    __int16 v179 = 2050;
    double v180 = v89;
    __int16 v181 = 2050;
    double v182 = v5;
    __int16 v183 = 2050;
    double v184 = v7;
    int64_t v90 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorFusionService::logSample(const CLSensorFusionService::Sample *)", "%s\n", v90);
    if (v90 != (char *)buf) {
      free(v90);
    }
  }
  if (*(unsigned char *)(a1 + 8))
  {
    *(void *)long long v146 = off_1022E6B38;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    double v34 = *(double *)a2;
    *(CFAbsoluteTime *)&v146[8] = Current;
    double v148 = v34;
    *(_OWORD *)long long v149 = *(_OWORD *)(a2 + 8);
    *(void *)&v149[16] = *(void *)(a2 + 24);
    LODWORD(Current) = *(_DWORD *)(a2 + 32);
    *(float32x2_t *)&v149[28] = vmul_f32(*(float32x2_t *)(a2 + 36), (float32x2_t)vdup_n_s32(0x42652EE1u));
    *(float *)&double v34 = *(float *)(a2 + 44) * 57.296;
    *(_DWORD *)&v149[24] = LODWORD(Current);
    *(_DWORD *)&v149[36] = LODWORD(v34);
    *(void *)long long v150 = *(void *)(a2 + 48);
    LODWORD(v34) = *(_DWORD *)(a2 + 60);
    *(_DWORD *)&v150[8] = *(_DWORD *)(a2 + 56);
    LOBYTE(v151) = *(unsigned char *)(a2 + 80);
    LODWORD(Current) = *(_DWORD *)(a2 + 64);
    HIDWORD(v151) = LODWORD(v34);
    *(_DWORD *)&v153[2] = LODWORD(Current);
    int v35 = *(unsigned __int8 *)(a2 + 81);
    *(_DWORD *)&v153[6] = *(_DWORD *)(a2 + 84);
    LODWORD(v154) = v35;
    HIDWORD(v154) = *(void *)(a2 + 96);
    __int16 v155 = *(_WORD *)(a2 + 82);
    uint64_t v36 = sub_101282D9C();
    sub_10128431C(v36, (uint64_t)v146);
    sub_10170140C(buf);
    sub_101727128((uint64_t)buf);
    v145 |= 1u;
    uint64_t v143 = *(void *)&v146[8];
    uint64_t v37 = v144;
    double v38 = *(double *)a2;
    *(_DWORD *)(v144 + 124) |= 0x10u;
    *(double *)(v37 + 40) = v38;
    uint64_t v39 = v144;
    double v40 = *(float *)(a2 + 8);
    *(_DWORD *)(v144 + 124) |= 2u;
    *(double *)(v39 + 16) = v40;
    uint64_t v41 = v144;
    double v42 = *(float *)(a2 + 12);
    *(_DWORD *)(v144 + 124) |= 4u;
    *(double *)(v41 + 24) = v42;
    uint64_t v43 = v144;
    double v44 = *(float *)(a2 + 16);
    *(_DWORD *)(v144 + 124) |= 8u;
    *(double *)(v43 + 32) = v44;
    uint64_t v45 = v144;
    double v46 = *(float *)(a2 + 20);
    *(_DWORD *)(v144 + 124) |= 1u;
    *(double *)(v45 + _Block_object_dispose(&STACK[0x850], 8) = v46;
    uint64_t v47 = v144;
    LODWORD(v46) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(v144 + 124) |= 0x40000u;
    *(_DWORD *)(v47 + 100) = LODWORD(v46);
    uint64_t v48 = v144;
    LODWORD(v46) = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(v144 + 124) |= 0x80000u;
    *(_DWORD *)(v48 + 104) = LODWORD(v46);
    uint64_t v49 = v144;
    LODWORD(v46) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(v144 + 124) |= 0x100000u;
    *(_DWORD *)(v49 + 10_Block_object_dispose(&STACK[0x850], 8) = LODWORD(v46);
    uint64_t v50 = v144;
    *(float *)&double v46 = *(float *)(a2 + 36) * 57.296;
    *(_DWORD *)(v144 + 124) |= 0x2000u;
    *(_DWORD *)(v50 + 80) = LODWORD(v46);
    uint64_t v51 = v144;
    *(float *)&double v46 = *(float *)(a2 + 40) * 57.296;
    *(_DWORD *)(v144 + 124) |= 0x4000u;
    *(_DWORD *)(v51 + 84) = LODWORD(v46);
    uint64_t v52 = v144;
    *(float *)&double v46 = *(float *)(a2 + 44) * 57.296;
    *(_DWORD *)(v144 + 124) |= 0x8000u;
    *(_DWORD *)(v52 + 8_Block_object_dispose(&STACK[0x850], 8) = LODWORD(v46);
    uint64_t v53 = v144;
    LODWORD(v46) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(v144 + 124) |= 0x100u;
    *(_DWORD *)(v53 + 60) = LODWORD(v46);
    uint64_t v54 = v144;
    LODWORD(v46) = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(v144 + 124) |= 0x200u;
    *(_DWORD *)(v54 + 64) = LODWORD(v46);
    uint64_t v55 = v144;
    LODWORD(v46) = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(v144 + 124) |= 0x400u;
    *(_DWORD *)(v55 + 6_Block_object_dispose(&STACK[0x850], 8) = LODWORD(v46);
    uint64_t v56 = v144;
    int v57 = *(char *)(a2 + 80);
    *(_DWORD *)(v144 + 124) |= 0x80u;
    *(_DWORD *)(v56 + 56) = v57;
    uint64_t v58 = v144;
    LODWORD(v46) = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(v144 + 124) |= 0x800u;
    *(_DWORD *)(v58 + 72) = LODWORD(v46);
    uint64_t v59 = v144;
    LODWORD(v46) = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(v144 + 124) |= 0x20u;
    *(_DWORD *)(v59 + 4_Block_object_dispose(&STACK[0x850], 8) = LODWORD(v46);
    uint64_t v60 = v144;
    int v61 = *(unsigned __int8 *)(a2 + 81);
    *(_DWORD *)(v144 + 124) |= 0x1000u;
    *(_DWORD *)(v60 + 76) = v61;
    uint64_t v62 = v144;
    uint64_t v63 = *(void *)(a2 + 96);
    *(_DWORD *)(v144 + 124) |= 0x40u;
    *(_DWORD *)(v62 + 52) = v63;
    uint64_t v64 = v144;
    LODWORD(v63) = *(unsigned __int16 *)(a2 + 82);
    *(_DWORD *)(v144 + 124) |= 0x10000u;
    *(_DWORD *)(v64 + 92) = v63;
    uint64_t v65 = v144;
    LODWORD(v63) = *(_DWORD *)(a2 + 84);
    *(_DWORD *)(v144 + 124) |= 0x200000u;
    *(_DWORD *)(v65 + 112) = v63;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022B9F40);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)buf);
    }
    sub_101706914((PB::Base *)buf);
  }
}

void sub_10053A1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10053A1D0(uint64_t result, void *a2)
{
  *(void *)(result + 4_Block_object_dispose(&STACK[0x850], 8) = *a2;
  uint64_t v2 = (uint64_t *)(result + 48);
  if (*(void *)(result + 72))
  {
    uint64_t v3 = result;
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022B9F20);
    }
    os_log_type_t v4 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *v2;
      *(_DWORD *)long long buf = 134349056;
      uint64_t v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Set device motion sensor status %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022B9F20);
      }
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorFusionService::updateSensorStatus(const SensorStatus &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    return (*(uint64_t (**)(uint64_t *, void))(v3 + 72))(v2, *(void *)(v3 + 80));
  }
  return result;
}

void sub_10053A3A4(id a1)
{
  qword_102419088 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

uint64_t sub_10053A3D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = a2;
  if (!*(unsigned char *)(a3 + 352)) {
    return a2;
  }
  uint64_t v5 = sub_100779764(a2, 2u);
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022B9FB8);
  }
  double v6 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a3 + 120);
    *(_DWORD *)long long buf = 134218496;
    uint64_t v11 = v7;
    __int16 v12 = 1026;
    int v13 = v3;
    __int16 v14 = 1026;
    int v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Overriding youth type for generic workout, beginTime, %f, before, %{public}d, after, %{public}d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022B9FB8);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMotionActivity::TypeYouth CLFitnessYouthGenericWorkoutOverride::doOverride(CLMotionActivity::TypeYouth, const CLNatalieModelInput &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return v5;
}

void sub_10053A5E0(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_10053A610(uint64_t a1, uint64_t a2, int a3)
{
  __int16 v29 = 0;
  sub_1013E5BA0(a2, (BOOL *)&v29 + 1, &v29);
  double v28 = -1.0;
  double v6 = -1.0;
  if (HIBYTE(v29)) {
    _ZF = v29 == 0;
  }
  else {
    _ZF = 1;
  }
  if (!_ZF)
  {
    double v6 = *(double *)(a2 + 192) + 1.414;
    double v28 = v6;
  }
  if (*(double *)(a2 + 200) > 0.0 && (v8 = *(double *)(a2 + 208), v8 > 0.0) && (double v9 = *(double *)(a2 + 216), v9 >= 0.0))
  {
    *(void *)int v30 = *(void *)(a2 + 200);
    double v26 = v9;
    double v27 = v8;
    sub_10053A828(a1, (double *)v30, &v27, &v26, &v28);
    double v16 = *(double *)a1;
    double v12 = *(double *)(a1 + 8);
  }
  else
  {
    double v10 = *(double *)(a2 + 80);
    memset(&v30[7], 0, 32);
    long long v11 = *(_OWORD *)&v30[16];
    *(_OWORD *)(a1 + 41) = *(_OWORD *)v30;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 57) = v11;
    *(void *)(a1 + 72) = *(void *)&v30[31];
    double v12 = v10 * v10 * 0.5;
    *(double *)a1 = v12;
    *(double *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = v12;
    double v13 = v6 * v6;
    BOOL v14 = v6 <= 0.0;
    double v15 = -1.0;
    if (!v14) {
      double v15 = v13;
    }
    *(double *)(a1 + 24) = v15;
    double v16 = v12;
  }
  double v17 = *(double *)(a2 + 96);
  if (v17 > 19.4444444 && v16 + v12 < 25.0)
  {
    __asm { FMOV            V1.2D, #25.0 }
    *(_OWORD *)a1 = _Q1;
    *(void *)(a1 + 16) = 0;
    double v12 = 25.0;
    double v16 = 25.0;
  }
  if (v16 + v12 < 156.25)
  {
    *(int64x2_t *)a1 = vdupq_n_s64(0x4063880000000000uLL);
    *(void *)(a1 + 16) = 0;
  }
  double v22 = *(double *)(a1 + 24);
  if (a3 && v22 > 0.0)
  {
    double v23 = 3.0;
    if (*(unsigned char *)(a2 + 228)) {
      double v23 = 15.0;
    }
    if (v17 == 0.0) {
      double v24 = 15.0;
    }
    else {
      double v24 = v23;
    }
    double v25 = sqrt(v22) + v24;
    double v22 = v25 * v25;
    *(double *)(a1 + 24) = v25 * v25;
  }
  if (v22 > 0.0 && v22 < 42.25) {
    *(void *)(a1 + 24) = 0x4045200000000000;
  }
  sub_10053AB70(a1);
}

void sub_10053A828(uint64_t a1, double *a2, double *a3, double *a4, double *a5)
{
  memset(&buf[7], 0, 32);
  *(_OWORD *)(a1 + 24) = xmmword_101D1C320;
  long long v5 = *(_OWORD *)&buf[16];
  *(_OWORD *)(a1 + 41) = *(_OWORD *)buf;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 57) = v5;
  *(void *)(a1 + 72) = *(void *)&buf[31];
  if (*a2 > 0.0 && *a3 > 0.0 && (double v6 = *a4, *a4 >= 0.0))
  {
    double v10 = *a2 / 2.45;
    double v11 = *a3 / 2.45;
    if (v6 > 0.0)
    {
      long double v12 = tan(v6 * -2.0 * 0.0174532925);
      double v13 = sqrt((v10 * v10 - v11 * v11) * (v10 * v10 - v11 * v11) * 0.25 * (v12 * v12) / (v12 * v12 + 1.0));
      *(double *)(a1 + 16) = v13;
      double v14 = v10 * v10 + v11 * v11;
      long double v15 = (v13 + v13) / v12;
      double v11 = (v14 + v15) * 0.5;
      double v10 = (v14 - v15) * 0.5;
    }
    *(double *)a1 = v11;
    *(double *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = v10;
    double v16 = -1.0;
    if (*a5 > 0.0) {
      double v16 = *a5 * *a5;
    }
    *(double *)(a1 + 24) = v16;
  }
  else
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022B9FF8);
    }
    uint64_t v7 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "invalid inputs", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022B9FF8);
      }
      double v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMapDataUtil::CovarInvDet::init(const double &, const double &, const double &, const double &)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
}

uint64_t sub_10053AAC0(uint64_t result, double *a2, double *a3)
{
  memset(&v5[7], 0, 32);
  *(void *)(result + _Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = 0;
  *(_OWORD *)(result + 24) = xmmword_101D1C320;
  *(unsigned char *)(result + 40) = 0;
  *(_OWORD *)(result + 41) = *(_OWORD *)v5;
  *(_OWORD *)(result + 57) = *(_OWORD *)&v5[16];
  *(void *)(result + 72) = 0;
  double v3 = *a2 * *a2 * 0.5;
  *(double *)double result = v3;
  *(double *)(result + _Block_object_dispose(&STACK[0x850], 8) = v3;
  double v4 = -1.0;
  if (*a3 > 0.0) {
    double v4 = *a3 * *a3;
  }
  *(double *)(result + 24) = v4;
  return result;
}

void sub_10053AB70(uint64_t a1)
{
  double v1 = *(double *)a1;
  if (*(double *)a1 <= 0.0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022B9FF8);
    }
    long long v5 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "fVarEast <= 0.0", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      goto LABEL_47;
    }
    goto LABEL_45;
  }
  double v2 = *(double *)(a1 + 8);
  if (v2 <= 0.0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022B9FF8);
    }
    double v6 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "fVarNorth <= 0.0", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_45;
      }
      goto LABEL_47;
    }
    return;
  }
  double v3 = *(double *)(a1 + 16);
  if (v3 >= 0.0)
  {
    double v7 = *(double *)(a1 + 24);
    if (v7 <= 0.0 || v7 >= 32400.0)
    {
      *(void *)(a1 + 24) = 0xBFF0000000000000;
      *(unsigned char *)(a1 + 40) = 0;
      double v14 = -v3;
      double v15 = v1 * v2 - v3 * v3;
      *(double *)(a1 + 32) = v15;
      *(double *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = v2;
      *(double *)(a1 + 56) = v14;
      *(double *)(a1 + 64) = v1;
      if (v15 != 0.0)
      {
        *(double *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = v2 / v15;
        *(double *)(a1 + 56) = v14 / v15;
        *(double *)(a1 + 64) = v1 / v15;
        return;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022B9FF8);
      }
      double v16 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "CLMM, Unexpected determinant of 0", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        goto LABEL_47;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 40) = 1;
      double v8 = v2 * v7;
      double v9 = -(v7 * v3);
      *(double *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = v2 * v7;
      *(double *)(a1 + 56) = v9;
      double v10 = v1 * v7;
      double v11 = v1 * v2 - v3 * v3;
      *(double *)(a1 + 64) = v10;
      *(double *)(a1 + 72) = v11;
      double v12 = v11 * v7;
      *(double *)(a1 + 32) = v11 * v7;
      if (v11 * v7 != 0.0)
      {
        *(double *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = v8 / v12;
        *(double *)(a1 + 56) = v9 / v12;
        *(double *)(a1 + 64) = v10 / v12;
        *(double *)(a1 + 72) = v11 / v12;
        return;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022B9FF8);
      }
      double v13 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "CLMM, Unexpected determinant of 0", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        goto LABEL_47;
      }
    }
LABEL_45:
    double v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLMapDataUtil::CovarInvDet::calcInvAndDet()", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
    return;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1022B9FF8);
  }
  double v4 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "fVarEastNorth < 0.0", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_45;
    }
LABEL_47:
    dispatch_once(&qword_102419430, &stru_1022B9FF8);
    goto LABEL_45;
  }
}

void sub_10053B11C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  double v2 = *(double *)(a1 + 32);
  if (v2 <= 0.0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022B9FF8);
    }
    double v10 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "determinant <= 0.0", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022B9FF8);
      }
      double v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMapDataUtil::CovarInvDet::calculateScoreAndVarFactor(MapMatcherScore &) const", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  else
  {
    double v4 = *(double *)(a1 + 48);
    double v5 = *(double *)(a1 + 56);
    double v6 = *(double *)(a1 + 64);
    if (*(unsigned char *)(a1 + 40))
    {
      double v7 = v5 * ((*(double *)(a2 + 32) + *(double *)(a2 + 32)) * *(double *)(a2 + 40))
         + *(double *)(a2 + 32) * *(double *)(a2 + 32) * v4
         + *(double *)(a2 + 40) * *(double *)(a2 + 40) * v6
         + *(double *)(a2 + 56) * *(double *)(a2 + 56) * *(double *)(a1 + 72);
      double v8 = v7 / 3.0;
      double v9 = 248.050213;
    }
    else
    {
      double v7 = v5 * ((*(double *)(a2 + 32) + *(double *)(a2 + 32)) * *(double *)(a2 + 40))
         + *(double *)(a2 + 32) * *(double *)(a2 + 32) * v4
         + *(double *)(a2 + 40) * *(double *)(a2 + 40) * v6;
      double v8 = v7 * 0.5;
      double v9 = 39.4784176;
    }
    long double v12 = exp(v7 * -0.5);
    *(double *)(a2 + 16) = v8;
    *(long double *)a2 = v12 / sqrt(v2 * v9);
  }
}

void sub_10053B370(id a1)
{
  qword_102419438 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_10053B3A0(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
    {
LABEL_7:
      uint64_t v3 = CFCopyUserName();
      goto LABEL_8;
    }
    a1 = (uint64_t *)*a1;
  }
  else if (!*((unsigned char *)a1 + 23))
  {
    goto LABEL_7;
  }
  uint64_t v3 = (uint64_t)sub_1000B73E0((char *)a1);
LABEL_8:
  double v4 = (const void *)v3;
  sub_100103240();
  if (sub_10073E30C() && (double v5 = getenv("_SET_CLPERSISTENTSTORE_TEST_PATH")) != 0)
  {
    v12[0] = +[NSString stringWithUTF8String:v5];
    v12[1] = v4;
    sub_100134750(&v10, (char *)[+[NSString pathWithComponents:](NSString, "pathWithComponents:", +[NSArray arrayWithObjects:v12 count:2]) UTF8String]);
    *(_OWORD *)a2 = v10;
    a2[2] = v11;
  }
  else if (v4)
  {
    CFURLRef v6 = (const __CFURL *)CFCopyHomeDirectoryURLForUser();
    CFURLRef v7 = v6;
    if (v6)
    {
      CFStringRef v8 = CFURLCopyFileSystemPath(v6, kCFURLPOSIXPathStyle);
      CFStringRef v9 = v8;
      if (v8)
      {
        sub_1000FECE0(v8, (uint64_t)&v10);
        *(_OWORD *)a2 = v10;
        a2[2] = v11;
        CFRelease(v9);
      }
      CFRelease(v7);
    }
    CFRelease(v4);
  }
}

void sub_10053B504(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10053B534(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a2;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  LODWORD(a2) = *(char *)(a1 + 23);
  if ((a2 & 0x80000000) != 0)
  {
    if (*(void *)(a1 + 8))
    {
LABEL_3:
      if ((a2 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((_BYTE)a2)
  {
    goto LABEL_3;
  }
  CFStringRef v4 = (const __CFString *)CFGetUserName();
  sub_1000FECE0(v4, (uint64_t)&v15);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
  unint64_t v5 = v15.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 16) = *((void *)&v15.__r_.__value_.__l + 2);
  a2 = (void *)HIBYTE(v5);
  if ((a2 & 0x80) == 0)
  {
LABEL_4:
    if (!(_BYTE)a2) {
      return;
    }
    goto LABEL_11;
  }
LABEL_10:
  if (!*(void *)(a1 + 8)) {
    return;
  }
LABEL_11:
  sub_10053B690(&v14);
  CFURLRef v6 = std::string::append(&v14, "/private/var/Managed Preferences/");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  int v8 = *(char *)(a1 + 23);
  if (v8 >= 0) {
    CFStringRef v9 = (const std::string::value_type *)a1;
  }
  else {
    CFStringRef v9 = *(const std::string::value_type **)a1;
  }
  if (v8 >= 0) {
    std::string::size_type v10 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v10 = *(void *)(a1 + 8);
  }
  uint64_t v11 = std::string::append(&v15, v9, v10);
  std::string::size_type size = v11->__r_.__value_.__l.__size_;
  *uint64_t v3 = v11->__r_.__value_.__r.__words[0];
  v3[1] = size;
  *(void *)((char *)v3 + 15) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  LOBYTE(size) = *((unsigned char *)&v11->__r_.__value_.__s + 23);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  int v13 = SHIBYTE(v15.__r_.__value_.__r.__words[2]);
  *((unsigned char *)v3 + 23) = size;
  if (v13 < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_10053B65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

double sub_10053B690@<D0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (qword_10247B320 != -1) {
    dispatch_once(&qword_10247B320, &stru_1022BA018);
  }
  if (qword_10247B318)
  {
    sub_1000FECE0((const __CFString *)qword_10247B318, (uint64_t)&v3);
    double result = *(double *)&v3;
    *(_OWORD *)a1 = v3;
    a1[2] = v4;
  }
  return result;
}

void sub_10053B70C(int a1@<W0>, std::string *a2@<X8>)
{
  if (a1 == 2)
  {
    sub_100134750(v11, "mobile");
    sub_10053B3A0(v11, &v18);
    long long v7 = std::string::append(&v18, "/Library/locationd/ColdStorage/");
    *a2 = *v7;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (v12 < 0)
    {
      CFURLRef v6 = (void *)v11[0];
      goto LABEL_19;
    }
  }
  else if (a1 == 1)
  {
    sub_100134750(v13, "mobile");
    sub_10053B3A0(v13, &v17);
    long long v3 = std::string::append(&v17, "/Library/locationd/ColdStorage/");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    unint64_t v5 = std::string::append(&v18, "cold_encryptedB.db");
    *a2 = *v5;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    if (v14 < 0)
    {
      CFURLRef v6 = (void *)v13[0];
LABEL_19:
      operator delete(v6);
    }
  }
  else
  {
    sub_100134750(__p, "root");
    sub_10053B3A0((uint64_t *)__p, &v17);
    int v8 = std::string::append(&v17, "/Library/Caches/locationd/");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v10 = std::string::append(&v18, "cold_encryptedB.db");
    *a2 = *v10;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    if (v16 < 0)
    {
      CFURLRef v6 = __p[0];
      goto LABEL_19;
    }
  }
}

void sub_10053B8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v32 - 25) < 0) {
    operator delete(*(void **)(v32 - 48));
  }
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_10053B99C(int a1@<W0>, std::string *a2@<X8>)
{
  if (a1 == 3)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BA448);
    }
    int v8 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      v18.__r_.__value_.__r.__words[0] = 0x304020100;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "no mutable store path for type, %{public}d", (uint8_t *)&v18, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_29;
    }
    bzero(&v18, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BA448);
    }
    uint64_t v19 = 0x304020100;
    long long v9 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static std::string CLPersistentStore::getMutableStorePath(CLPersistentStoreType)", "%s\n", (const char *)v9);
    goto LABEL_47;
  }
  if (a1)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BA448);
    }
    std::string::size_type v10 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v18.__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(v18.__r_.__value_.__r.__words[0]) = a1;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "could not get mutable store path for type, %{public}d", (uint8_t *)&v18, 8u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_29;
    }
    bzero(&v18, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BA448);
    }
    LODWORD(v19) = 67240192;
    HIDWORD(v19) = a1;
    long long v9 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static std::string CLPersistentStore::getMutableStorePath(CLPersistentStoreType)", "%s\n", (const char *)v9);
LABEL_47:
    if (v9 != &v18) {
      free(v9);
    }
LABEL_29:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  if (sub_10074056C())
  {
    sub_100134750(v16, "mobile");
    sub_10053B3A0(v16, &v18);
    sub_100134750(&v19, "/Library/Caches/locationd/");
    if ((v21 & 0x80u) == 0) {
      long long v4 = (const std::string::value_type *)&v19;
    }
    else {
      long long v4 = (const std::string::value_type *)v19;
    }
    if ((v21 & 0x80u) == 0) {
      std::string::size_type v5 = v21;
    }
    else {
      std::string::size_type v5 = v20;
    }
    CFURLRef v6 = std::string::append(&v18, v4, v5);
    *a2 = *v6;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if ((char)v21 < 0) {
      operator delete((void *)v19);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (v17 < 0)
    {
      long long v7 = (void *)v16[0];
LABEL_43:
      operator delete(v7);
    }
  }
  else
  {
    sub_100134750(__p, "root");
    sub_10053B3A0((uint64_t *)__p, &v18);
    sub_100134750(&v19, "/Library/Caches/locationd/");
    if ((v21 & 0x80u) == 0) {
      uint64_t v11 = (const std::string::value_type *)&v19;
    }
    else {
      uint64_t v11 = (const std::string::value_type *)v19;
    }
    if ((v21 & 0x80u) == 0) {
      std::string::size_type v12 = v21;
    }
    else {
      std::string::size_type v12 = v20;
    }
    int v13 = std::string::append(&v18, v11, v12);
    *a2 = *v13;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if ((char)v21 < 0) {
      operator delete((void *)v19);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (v15 < 0)
    {
      long long v7 = __p[0];
      goto LABEL_43;
    }
  }
}

void sub_10053BDDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 57) < 0) {
    operator delete(*(void **)(v28 - 80));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10053BE74(std::string *a1@<X8>)
{
  sub_10053B690(&v3);
  double v2 = std::string::append(&v3, "/System/Library/Frameworks/CoreLocation.framework/Support/");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_10053BEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10053BEF8(std::string *a1@<X8>)
{
  sub_10053B690(&v3);
  double v2 = std::string::append(&v3, "/System/Library/Frameworks/CoreLocation.framework");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_10053BF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10053BF7C(id a1)
{
  qword_10247B318 = @"/";
}

void sub_10053BF90(std::string *a1@<X8>)
{
  sub_100134750(__p, "mobile");
  sub_10053B3A0((uint64_t *)__p, &v5);
  double v2 = std::string::append(&v5, "/Library/locationd/");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10053C01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10053C050@<X0>(void *a1@<X8>)
{
  double v2 = [[(NSString *)[+[NSFileManager defaultManager] currentDirectoryPath] stringByAppendingString:@"/"] UTF8String];

  return sub_100134750(a1, v2);
}

uint64_t sub_10053C0A8(uint64_t a1, uint64_t a2, char *a3, int a4, int a5, int a6)
{
  std::string::size_type v12 = sub_1000E9174((void *)a1);
  *std::string::size_type v12 = off_1022BA048;
  void v12[2] = a2;
  *((unsigned char *)v12 + 24) = 0;
  *((_DWORD *)v12 + 7) = a4;
  void v12[4] = 0xBFF0000000000000;
  v12[5] = 0;
  uint64_t v41 = (const void **)(v12 + 6);
  sub_100134750(v12 + 6, a3);
  *(_OWORD *)(a1 + 72) = 0u;
  int v13 = (void **)(a1 + 72);
  char v14 = (void **)(a1 + 96);
  *(_OWORD *)(a1 + 8_Block_object_dispose(&STACK[0x850], 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  [*(id *)(a1 + 16) silo];
  switch(a4)
  {
    case 0:
      sub_10053BE74((std::string *)buf);
      goto LABEL_14;
    case 1:
      sub_10053B99C(a5, (std::string *)buf);
      goto LABEL_14;
    case 2:
      sub_10053BF90((std::string *)buf);
      goto LABEL_14;
    case 3:
      sub_10053C050(buf);
      goto LABEL_14;
    case 4:
      sub_10053B70C(2, (std::string *)buf);
LABEL_14:
      if (*(char *)(a1 + 95) < 0) {
        operator delete(*v13);
      }
      *(_OWORD *)int v13 = *(_OWORD *)buf;
      *(void *)(a1 + 8_Block_object_dispose(&STACK[0x850], 8) = *(void *)&buf[16];
      break;
    default:
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022BA468);
      }
      char v15 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = a4;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unknown persistent domain\", \"domain\":%{public}d}", buf, 0x18u);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022BA468);
        }
      }
      char v16 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        *(_DWORD *)long long buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = a4;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unknown persistent domain", "{\"msg%{public}.0s\":\"Unknown persistent domain\", \"domain\":%{public}d}", buf, 0x18u);
      }
      break;
  }
  if (*(char *)(a1 + 95) < 0)
  {
    if (!*(void *)(a1 + 80)) {
      goto LABEL_70;
    }
    char v17 = *v13;
  }
  else
  {
    char v17 = (unsigned char *)(a1 + 72);
    if (!*(unsigned char *)(a1 + 95)) {
      goto LABEL_70;
    }
  }
  uid_t v18 = getuid();
  gid_t v19 = getgid();
  if (!sub_1004BB250(v17, v18, v19))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022BA468);
    }
    std::string::size_type v20 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      unsigned __int8 v21 = (void *)(a1 + 72);
      if (*(char *)(a1 + 95) < 0) {
        unsigned __int8 v21 = *v13;
      }
      *(_DWORD *)long long buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"could not create path\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022BA468);
      }
    }
    double v22 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      double v23 = (void *)(a1 + 72);
      if (*(char *)(a1 + 95) < 0) {
        double v23 = *v13;
      }
      *(_DWORD *)long long buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v23;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "could not create path", "{\"msg%{public}.0s\":\"could not create path\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
  }
  sub_1002F0A00((const void **)(a1 + 72), v41, (uint64_t)buf);
  sub_100134750(__p, ".plist");
  if ((v43 & 0x80u) == 0) {
    double v24 = __p;
  }
  else {
    double v24 = (void **)__p[0];
  }
  if ((v43 & 0x80u) == 0) {
    std::string::size_type v25 = v43;
  }
  else {
    std::string::size_type v25 = (std::string::size_type)__p[1];
  }
  double v26 = std::string::append((std::string *)buf, (const std::string::value_type *)v24, v25);
  std::string::size_type v27 = v26->__r_.__value_.__r.__words[0];
  v44[0] = v26->__r_.__value_.__l.__size_;
  *(void *)((char *)v44 + 7) = *(std::string::size_type *)((char *)&v26->__r_.__value_.__r.__words[1] + 7);
  char v28 = HIBYTE(v26->__r_.__value_.__r.__words[2]);
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v14);
  }
  uint64_t v29 = v44[0];
  *(void *)(a1 + 96) = v27;
  *(void *)(a1 + 104) = v29;
  *(void *)(a1 + 111) = *(void *)((char *)v44 + 7);
  *(unsigned char *)(a1 + 119) = v28;
  if ((char)v43 < 0) {
    operator delete(__p[0]);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022BA468);
  }
  int v30 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
  {
    uint64_t v31 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      uint64_t v31 = *v14;
    }
    *(_DWORD *)long long buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = v31;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"accessing data\", \"file\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v32 = (void *)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    uint64_t v32 = *v14;
  }
  if (((*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 816))(a1, v32) & 1) == 0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022BA468);
    }
    long long v33 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      double v34 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        double v34 = *v14;
      }
      *(_DWORD *)long long buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v34;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"file does not exist (or cannot be accessed), starting fresh\", \"file\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022BA468);
      }
    }
    int v35 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v36 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v36 = *v14;
      }
      *(_DWORD *)long long buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v36;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "file does not exist (or cannot be accessed), starting fresh", "{\"msg%{public}.0s\":\"file does not exist (or cannot be accessed), starting fresh\", \"file\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
  }
  if (a4 == 2)
  {
    uint64_t v37 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      uint64_t v37 = (const char *)*v13;
    }
    uid_t v38 = getuid();
    gid_t v39 = getgid();
    sub_1004BB34C(v37, v38, v39, 0x1EDu);
  }
LABEL_70:
  *(unsigned char *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 120) = a6;
  return a1;
}

void sub_10053C7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v23 + 119) < 0) {
    operator delete(*v25);
  }
  if (*(char *)(v23 + 95) < 0) {
    operator delete(*v24);
  }
  if (*(char *)(v23 + 71) < 0) {
    operator delete(*a9);
  }
  sub_10013F374((void *)v23);
  _Unwind_Resume(a1);
}

void *sub_10053C884(uint64_t a1)
{
  double v2 = off_1022BA048;
  *(void *)a1 = off_1022BA048;
  if ((*(_DWORD *)(a1 + 28) - 1) <= 3)
  {
    sub_10053CD58(a1);
    double v2 = *(uint64_t (***)())a1;
  }
  ((void (*)(uint64_t))v2[120])(a1);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }

  return sub_10013F374((void *)a1);
}

void sub_10053C954(uint64_t a1)
{
  sub_10053C884(a1);

  operator delete();
}

NSString *sub_10053C98C(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    uint64_t v1 = (void *)*v1;
  }
  return +[NSString stringWithUTF8String:v1];
}

uint64_t sub_10053C9B0(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
  {
    if (*(void *)(a1 + 80)) {
      goto LABEL_3;
    }
  }
  else if (*(unsigned char *)(a1 + 95))
  {
LABEL_3:
    double v2 = (unsigned char *)(a1 + 24);
    if (*(unsigned char *)(a1 + 24))
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BA448);
      }
      std::string v3 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        char v4 = (void *)(a1 + 48);
        if (*(char *)(a1 + 71) < 0) {
          char v4 = (void *)*v4;
        }
        *(_DWORD *)long long buf = 136315138;
        std::string::size_type v12 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning persistent store %s has been modified - refreshing will lose changes", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BA448);
        }
        long long v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLPersistentStore::refresh()", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
    }
    std::string v5 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      std::string v5 = (void *)*v5;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 816))(a1, v5);
    goto LABEL_23;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BA448);
  }
  long long v7 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = (void *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      int v8 = (void *)*v8;
    }
    *(_DWORD *)long long buf = 136315138;
    std::string::size_type v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Store %s is configured for in-memory mode - not refreshing and marking the store as unmodified", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BA448);
    }
    std::string::size_type v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLPersistentStore::refresh()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  double v2 = (unsigned char *)(a1 + 24);
  uint64_t result = 1;
LABEL_23:
  unsigned char *v2 = 0;
  return result;
}

uint64_t sub_10053CD58(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 28) - 1) >= 4)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BA448);
    }
    std::string v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      CFURLRef v6 = (void *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0) {
        CFURLRef v6 = (void *)*v6;
      }
      *(_DWORD *)long long buf = 136315138;
      char v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning data set %s is not changeable - not storing", buf, 0xCu);
    }
    uint64_t result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BA448);
      }
      long long v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLPersistentStore::store()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
      return 0;
    }
    return result;
  }
  if (!*(unsigned char *)(a1 + 24)) {
    return 1;
  }
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 95)) {
      goto LABEL_5;
    }
LABEL_23:
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BA448);
    }
    int v8 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      long long v9 = (void *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0) {
        long long v9 = (void *)*v9;
      }
      *(_DWORD *)long long buf = 136315138;
      char v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Store %s is configured for in-memory mode - not storing and marking the store as unmodified", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_48;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 == -1) {
      goto LABEL_52;
    }
    goto LABEL_54;
  }
  if (!*(void *)(a1 + 80)) {
    goto LABEL_23;
  }
LABEL_5:
  int v2 = *(_DWORD *)(a1 + 120);
  if (v2)
  {
    std::string v3 = (void *)(a1 + 96);
    if (v2 == 1)
    {
      if (*(char *)(a1 + 119) < 0) {
        std::string v3 = (void *)*v3;
      }
      if (((*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 832))(a1, v3, 1) & 1) == 0) {
        return 0;
      }
LABEL_39:
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BA448);
      }
      std::string::size_type v12 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        int v13 = (void *)(a1 + 48);
        if (*(char *)(a1 + 71) < 0) {
          int v13 = (void *)*v13;
        }
        char v14 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          char v14 = (void *)*v14;
        }
        *(_DWORD *)long long buf = 136315394;
        char v17 = v13;
        __int16 v18 = 2080;
        gid_t v19 = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%s stored to disk %s", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_48;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1)
      {
LABEL_52:
        char v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLPersistentStore::store()", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
LABEL_48:
        *(unsigned char *)(a1 + 24) = 0;
        return 1;
      }
LABEL_54:
      dispatch_once(&qword_102419630, &stru_1022BA448);
      goto LABEL_52;
    }
    if (*(char *)(a1 + 119) < 0) {
      std::string v3 = (void *)*v3;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 832))(a1, v3, 2);
    if (result) {
      goto LABEL_39;
    }
  }
  else
  {
    std::string::size_type v10 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      std::string::size_type v10 = (void *)*v10;
    }
    char v11 = (*(uint64_t (**)(uint64_t, void *, void))(*(void *)a1 + 832))(a1, v10, 0);
    uint64_t result = 0;
    if (v11) {
      goto LABEL_39;
    }
  }
  return result;
}

void sub_10053D318(uint64_t a1)
{
  uint64_t v1 = 0;
  sub_10053D348(a1, (double *)&v1, (uint64_t)&stru_1022BA410);
}

void sub_10053D348(uint64_t a1, double *a2, uint64_t a3)
{
  double v4 = *a2;
  *(double *)(a1 + 32) = *a2;
  if (v4 <= 0.0)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BA448);
    }
    std::string::size_type v10 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      char v11 = (void *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0) {
        char v11 = (void *)*v11;
      }
      *(_DWORD *)long long buf = 136315138;
      char v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "disabling auto-store for %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BA448);
      }
      std::string::size_type v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPersistentStore::setStoreInterval(const CFTimeInterval &, CLSiloBlock)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    [*(id *)(a1 + 40) invalidate];

    *(void *)(a1 + 40) = 0;
  }
  else
  {
    if (!a3) {
      sub_101A648F4();
    }
    if (!*(void *)(a1 + 40))
    {
      id v6 = [[objc_msgSend(*(id *)(a1 + 16), "silo") newTimer];
      *(void *)(a1 + 40) = v6;
      [v6 setHandler:a3];
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BA448);
    }
    long long v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v8 = (void *)(a1 + 48);
      if (*(char *)(a1 + 71) < 0) {
        int v8 = (void *)*v8;
      }
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 136315394;
      char v15 = v8;
      __int16 v16 = 2048;
      uint64_t v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "scheduling to auto-store %s every %.3fs", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BA448);
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPersistentStore::setStoreInterval(const CFTimeInterval &, CLSiloBlock)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    [*(id *)(a1 + 40) setNextFireDelay:*(double *)(a1 + 32)];
  }
}

id sub_10053D700(double *a1)
{
  (*(void (**)(double *))(*(void *)a1 + 944))(a1);
  double v2 = a1[4];
  std::string v3 = (void *)*((void *)a1 + 5);

  return [v3 setNextFireDelay:v2];
}

void sub_10053D764(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10053D794(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_10053D874(id a1)
{
  qword_10247B328 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLHomeKitProviderSilo"];
}

uint64_t sub_10053D934(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10053F150;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_10247B340 != -1) {
    dispatch_once(&qword_10247B340, block);
  }
  return qword_10247B348;
}

void sub_10053DC1C(uint64_t a1, char a2)
{
  v3[8] = 0;
  v3[64] = 0;
  std::string v5 = 0;
  uint64_t v6 = 0;
  std::string __p = 0;
  v3[0] = a2;
  int v2 = 0;
  (*(void (**)(uint64_t, int *, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v2, v3, 1, 0xFFFFFFFFLL, 0);
  if (__p)
  {
    std::string v5 = __p;
    operator delete(__p);
  }
}

void sub_10053DCA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10053DD64(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  if (a1 == 1) {
    return 2;
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022BA5D8);
  }
  std::string v3 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Unknown WPHomeKitType %ld", buf, 0xCu);
  }
  BOOL v4 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v4)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BA5D8);
    }
    std::string v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLHomeKitProvider_Type::HomeKitType (anonymous namespace)::getHomeKitType(WPHomeKitType)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 0;
  }
  return result;
}

void sub_10053DF38(uint64_t a1, void *a2, int a3, void *a4, int a5, int a6, double a7)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022BA5D8);
  }
  char v14 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 138478595;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)[a2 UUIDString];
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2113;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)[a4 description];
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 1025;
    LODWORD(v63) = a5;
    WORD2(v63) = 1025;
    *(_DWORD *)((char *)&v63 + 6) = a6;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "found device %{private}@, data: %{private}@, rssi: %{private}d, type: %{private}d", (uint8_t *)&buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BA5D8);
    }
    LODWORD(v56.__r_.__value_.__l.__data_) = 138478595;
    *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 4) = (std::string::size_type)[a2 UUIDString];
    WORD2(v56.__r_.__value_.__r.__words[1]) = 2113;
    *(std::string::size_type *)((char *)&v56.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)[a4 description];
    HIWORD(v56.__r_.__value_.__r.__words[2]) = 1025;
    int v57 = a5;
    __int16 v58 = 1025;
    int v59 = a6;
    uint64_t v50 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLHomeKitProvider::onHomeKitDeviceFound(NSUUID *, CLHomeKitProvider_Type::HAPVersion, NSData *, int, cl::chrono::CFAbsoluteTimeClock::time_point, CLHomeKitProvider_Type::HomeKitType)", "%s\n", (const char *)v50);
    if (v50 != &buf) {
      free(v50);
    }
  }
  if (!a4)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BA5D8);
    }
    uint64_t v17 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning Got a device notification but not device data", (uint8_t *)&buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BA5D8);
    }
    LOWORD(v56.__r_.__value_.__l.__data_) = 0;
    __int16 v16 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLHomeKitProvider::onHomeKitDeviceFound(NSUUID *, CLHomeKitProvider_Type::HAPVersion, NSData *, int, cl::chrono::CFAbsoluteTimeClock::time_point, CLHomeKitProvider_Type::HomeKitType)", "%s\n", (const char *)v16);
    goto LABEL_35;
  }
  if (a3 == 2)
  {
    if ((unint64_t)[a4 length] <= 0x10)
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BA5D8);
      }
      __int16 v18 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning Found invalid HomeKit device. Data length was invalid", (uint8_t *)&buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BA5D8);
      }
      LOWORD(v56.__r_.__value_.__l.__data_) = 0;
      __int16 v16 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL (anonymous namespace)::addToScanCache(std::vector<CLHomeKitProvider_Type::HomeKitDevice> &, NSUUID *, NSData *, int, cl::chrono::CFAbsoluteTimeClock::time_point, CLHomeKitProvider_Type::HomeKitType) [HomeKitType = (anonymous namespace)::HomeKitManufacturerData]", "%s\n", (const char *)v16);
      goto LABEL_35;
    }
    std::string::size_type v25 = (char *)[a4 bytes];
    int v26 = sub_10053F63C((uint64_t)v25);
    if (v26 != 9)
    {
      int v41 = v26;
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BA5D8);
      }
      double v42 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        sub_10053F6FC((unsigned __int16 *)v25, v41, 1, &buf);
        unsigned __int8 v43 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &buf
            : (std::string *)buf.__r_.__value_.__r.__words[0];
        LODWORD(v56.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 4) = (std::string::size_type)v43;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#Warning Found invalid HomeKit device: %{private}s", (uint8_t *)&v56, 0xCu);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BA5D8);
      }
      sub_10053F6FC((unsigned __int16 *)v25, v41, 1, &v56);
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v44 = &v56;
      }
      else {
        double v44 = (std::string *)v56.__r_.__value_.__r.__words[0];
      }
      int v60 = 136380675;
      int v61 = v44;
      __int16 v16 = (std::string *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL (anonymous namespace)::addToScanCache(std::vector<CLHomeKitProvider_Type::HomeKitDevice> &, NSUUID *, NSData *, int, cl::chrono::CFAbsoluteTimeClock::time_point, CLHomeKitProvider_Type::HomeKitType) [HomeKitType = (anonymous namespace)::HomeKitManufacturerData]", "%s\n", (const char *)v16);
      goto LABEL_81;
    }
    int v27 = 0;
    *(double *)&buf.__r_.__value_.__l.__data_ = a7;
    int v60 = a5;
    int v55 = a6;
    __int16 v54 = 0;
    if ((((v25[3] + 115) >> 5) | (8 * (v25[3] + 115))) <= 7u) {
      int v27 = dword_101D23008[(char)(((v25[3] + 115) >> 5) | (8 * (v25[3] + 115)))];
    }
    char v28 = v25 + 2;
    int v53 = v27;
    char v29 = v25[4] & 1;
    char v52 = v29;
    uint64_t v30 = *(unsigned __int16 *)(v25 + 9);
    uint64_t v31 = *(unsigned int *)(v25 + 5);
    LODWORD(v56.__r_.__value_.__l.__data_) = *(_DWORD *)(v25 + 5);
    WORD2(v56.__r_.__value_.__r.__words[0]) = v30;
    if (*(unsigned __int16 *)(v25 + 11) >= 0x10u) {
      __int16 v32 = 16;
    }
    else {
      __int16 v32 = *(_WORD *)(v25 + 11);
    }
    __int16 v51 = v32;
    long long v33 = (__int16 *)(v25 + 13);
    unint64_t v34 = *(void *)(a1 + 136);
    if (v34 >= *(void *)(a1 + 144))
    {
      double v40 = sub_100543428((void **)(a1 + 128), &v54, v28, &v53, &v52, (int *)&v56, &v51, v33, v25 + 15, v25 + 16, (uint64_t *)&buf, &v60, &v55);
    }
    else
    {
      char v35 = *v28;
      __int16 v36 = *v33;
      uint64_t v37 = v31 | (v30 << 32);
      char v38 = v25[15];
      char v39 = v25[16];
      *(unsigned char *)unint64_t v34 = 2;
      *(_DWORD *)(v34 + 1) = v37;
      *(_WORD *)(v34 + 5) = WORD2(v37);
      *(_WORD *)(v34 + _Block_object_dispose(&STACK[0x850], 8) = v32;
      *(double *)(v34 + 16) = a7;
      *(_DWORD *)(v34 + 24) = a5;
      *(_WORD *)(v34 + 2_Block_object_dispose(&STACK[0x850], 8) = 0;
      *(unsigned char *)(v34 + 30) = v35;
      *(_DWORD *)(v34 + 32) = v27;
      *(unsigned char *)(v34 + 36) = v29;
      *(_WORD *)(v34 + 3_Block_object_dispose(&STACK[0x850], 8) = v36;
      *(unsigned char *)(v34 + 40) = v38;
      *(unsigned char *)(v34 + 41) = v39;
      *(unsigned char *)(v34 + 44) = 1;
      *(_DWORD *)(v34 + 4_Block_object_dispose(&STACK[0x850], 8) = a6;
      double v40 = (char *)(v34 + 56);
      *(unsigned char *)(v34 + 52) = 1;
    }
    *(void *)(a1 + 136) = v40;
    goto LABEL_89;
  }
  if (a3 != 1) {
    return;
  }
  if ((unint64_t)[a4 length] > 8)
  {
    gid_t v19 = [a4 bytes];
    uint64_t v20 = (uint64_t)v19;
    if (v19[8])
    {
      int v21 = 0;
LABEL_39:
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BA5D8);
      }
      double v22 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        sub_100542DC8(v20, v21, &buf);
        uint64_t v23 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &buf
            : (std::string *)buf.__r_.__value_.__r.__words[0];
        LODWORD(v56.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#Warning Found invalid HomeKit device: %{private}s", (uint8_t *)&v56, 0xCu);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BA5D8);
      }
      sub_100542DC8(v20, v21, &v56);
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v24 = &v56;
      }
      else {
        double v24 = (std::string *)v56.__r_.__value_.__r.__words[0];
      }
      int v60 = 136380675;
      int v61 = v24;
      __int16 v16 = (std::string *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL (anonymous namespace)::addToScanCache(std::vector<CLHomeKitProvider_Type::HomeKitDevice> &, NSUUID *, NSData *, int, cl::chrono::CFAbsoluteTimeClock::time_point, CLHomeKitProvider_Type::HomeKitType) [HomeKitType = (anonymous namespace)::HomeKitServiceData]", "%s\n", (const char *)v16);
LABEL_81:
      if (v16 != &buf) {
        goto LABEL_36;
      }
      return;
    }
    unsigned int v45 = *((unsigned __int16 *)v19 + 3);
    if (!*((_WORD *)v19 + 3))
    {
      int v21 = 1;
      goto LABEL_39;
    }
    *(double *)&buf.__r_.__value_.__l.__data_ = a7;
    int v60 = a5;
    int v46 = *(_DWORD *)v19;
    WORD2(v56.__r_.__value_.__r.__words[0]) = *((_WORD *)v19 + 2);
    LODWORD(v56.__r_.__value_.__l.__data_) = v46;
    if (v45 >= 0x10) {
      LOWORD(v45) = 16;
    }
    LOWORD(v55) = v45;
    sub_10054326C((void **)(a1 + 128), (int *)&v56, (__int16 *)&v55, (uint64_t *)&buf, &v60);
    double v40 = *(char **)(a1 + 136);
LABEL_89:
    buf.__r_.__value_.__s.__data_[8] = 0;
    char v66 = 0;
    double v68 = 0;
    uint64_t v69 = 0;
    std::string __p = 0;
    long long v47 = *(_OWORD *)(v40 - 56);
    long long v48 = *(_OWORD *)(v40 - 40);
    long long v49 = *(_OWORD *)(v40 - 24);
    uint64_t v65 = *((void *)v40 - 1);
    long long v64 = v49;
    long long v63 = v48;
    *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = v47;
    char v66 = 1;
    LODWORD(v56.__r_.__value_.__l.__data_) = 1;
    (*(void (**)(uint64_t, std::string *, std::string *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v56, &buf, 1, 0xFFFFFFFFLL, 0);
    if (__p)
    {
      double v68 = __p;
      operator delete(__p);
    }
    return;
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022BA5D8);
  }
  char v15 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning Found invalid HomeKit device. Data length was invalid", (uint8_t *)&buf, 2u);
  }
  if (!sub_10013D1A0(115, 2)) {
    return;
  }
  bzero(&buf, 0x65CuLL);
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022BA5D8);
  }
  LOWORD(v56.__r_.__value_.__l.__data_) = 0;
  __int16 v16 = (std::string *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 2, "BOOL (anonymous namespace)::addToScanCache(std::vector<CLHomeKitProvider_Type::HomeKitDevice> &, NSUUID *, NSData *, int, cl::chrono::CFAbsoluteTimeClock::time_point, CLHomeKitProvider_Type::HomeKitType) [HomeKitType = (anonymous namespace)::HomeKitServiceData]", "%s\n", (const char *)v16);
LABEL_35:
  if (v16 != &buf) {
LABEL_36:
  }
    free(v16);
}

void sub_10053EA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10053EE50(uint64_t a1, void *a2, int a3)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022BA5D8);
  }
  std::string v5 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)std::string buf = 138543618;
    id v8 = [a2 description];
    __int16 v9 = 1024;
    int v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "HomeKit error: %{public}@ for type: %d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BA5D8);
    }
    [a2 description];
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLHomeKitProvider::onHomeKitScanningError(NSError *, CLHomeKitProvider_Type::HomeKitType)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_10053F150()
{
}

void sub_10053F19C()
{
}

uint64_t sub_10053F1C0(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_10053F338(a1, "CLHomeKitProvider", a2);
  *(void *)uint64_t v3 = off_1022BA4B8;
  *(void *)(v3 + 12_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)(v3 + 136) = 0;
  *(void *)(v3 + 144) = 0;
  *(void *)(a1 + 160) = [*(id *)(v3 + 40) newTimer];
  BOOL v4 = *(void **)(a1 + 40);
  *(void *)(a1 + 112) = [[CLHomeKitDelegate alloc] initWithProvider:a1];
  *(void *)(a1 + 120) = [objc_alloc((Class)WPHomeKit) initWithDelegate:*(void *)(a1 + 112) queue:objc_msgSend(v4, "queue")];
  *(void *)(a1 + 152) = [objc_alloc((Class)CBCentralManager) initWithDelegate:*(void *)(a1 + 112) queue:objc_msgSend(v4, "queue")];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10053F3E4;
  long long v6[3] = &unk_1022A3020;
  v6[4] = a1;
  [*(id *)(a1 + 160) setHandler:v6];
  return a1;
}

void sub_10053F310(_Unwind_Exception *a1)
{
  BOOL v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 136) = v4;
    operator delete(v4);
  }
  sub_10053F4F8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10053F338(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1022BA608;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 10_Block_object_dispose(&STACK[0x850], 8) = 0;
  return a1;
}

void sub_10053F3C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

id sub_10053F3E4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  sub_10053F440(v1);
  double v2 = (*(double *)&qword_10247B338 + j__CFAbsoluteTimeGetCurrent_5() * 1000.0) / 1000.0;
  uint64_t v3 = (void *)v1[20];

  return [v3 setNextFireTime:v2];
}

void sub_10053F440(void *a1)
{
  uint64_t v1 = (void *)a1[16];
  double v2 = (void *)a1[17];
  if (v1 != v2)
  {
    v4[8] = 0;
    v4[64] = 0;
    std::string __p = v1;
    uint64_t v6 = v2;
    a1[16] = 0;
    a1[17] = 0;
    uint64_t v7 = a1[18];
    a1[18] = 0;
    int v3 = 2;
    (*(void (**)(void *, int *, unsigned char *, uint64_t, uint64_t, void))(*a1 + 152))(a1, &v3, v4, 1, 0xFFFFFFFFLL, 0);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
}

void sub_10053F4DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10053F4F8(uint64_t a1)
{
  *(void *)a1 = off_1022BA608;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_10053F57C(void *a1)
{
  *a1 = off_1022BA4B8;
  double v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }

  return sub_10053F4F8((uint64_t)a1);
}

void sub_10053F5DC(id *a1)
{
  a1[20] = 0;
  [a1[15] invalidate];

  a1[15] = 0;
  a1[14] = 0;

  a1[19] = 0;
}

uint64_t sub_10053F63C(uint64_t a1)
{
  if (*(_WORD *)a1 == 76)
  {
    if (*(unsigned char *)(a1 + 2) == 6)
    {
      char v1 = *(unsigned char *)(a1 + 3);
      if ((v1 & 0x1F) == 0xD)
      {
        unsigned int v2 = (((v1 + 115) >> 5) | (8 * (v1 + 115)));
        if (v2 > 7 || v2 == 4)
        {
          return 3;
        }
        else if (*(unsigned __int8 *)(a1 + 4) > 1u)
        {
          return 4;
        }
        else if (*(_WORD *)(a1 + 11))
        {
          if (*(_WORD *)(a1 + 13))
          {
            if (*(unsigned char *)(a1 + 15))
            {
              if (*(unsigned char *)(a1 + 16) == 2) {
                return 9;
              }
              else {
                return 8;
              }
            }
            else
            {
              return 7;
            }
          }
          else
          {
            return 6;
          }
        }
        else
        {
          return 5;
        }
      }
      else
      {
        return 2;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
}

double sub_10053F6FC@<D0>(unsigned __int16 *a1@<X0>, int a2@<W1>, int a3@<W2>, std::string *a4@<X8>)
{
  memset(&v108, 0, sizeof(v108));
  switch(a2)
  {
    case 0:
      std::string::assign(&v108, "Invalid Company Identifier");
      if (!a3) {
        goto LABEL_166;
      }
      std::to_string(&v103, *a1);
      uint64_t v7 = std::string::insert(&v103, 0, " got: ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      __int16 v9 = std::string::append(&v104, " expected: ");
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v102, 76);
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v11 = &v102;
      }
      else {
        char v11 = (std::string *)v102.__r_.__value_.__r.__words[0];
      }
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v102.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v102.__r_.__value_.__l.__size_;
      }
      int v13 = std::string::append(&v105, (const std::string::value_type *)v11, size);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      int64_t v107 = v13->__r_.__value_.__r.__words[2];
      long long v106 = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      if (v107 >= 0) {
        char v15 = (const std::string::value_type *)&v106;
      }
      else {
        char v15 = (const std::string::value_type *)v106;
      }
      if (v107 >= 0) {
        std::string::size_type v16 = HIBYTE(v107);
      }
      else {
        std::string::size_type v16 = *((void *)&v106 + 1);
      }
      goto LABEL_155;
    case 1:
      std::string::assign(&v108, "Invalid Type");
      if (!a3) {
        goto LABEL_166;
      }
      std::to_string(&v103, *((unsigned __int8 *)a1 + 2));
      char v39 = std::string::insert(&v103, 0, " got: ");
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      int v41 = std::string::append(&v104, " exptected: ");
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v102, 6);
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned __int8 v43 = &v102;
      }
      else {
        unsigned __int8 v43 = (std::string *)v102.__r_.__value_.__r.__words[0];
      }
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v44 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v44 = v102.__r_.__value_.__l.__size_;
      }
      unsigned int v45 = std::string::append(&v105, (const std::string::value_type *)v43, v44);
      long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      int64_t v107 = v45->__r_.__value_.__r.__words[2];
      long long v106 = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      if (v107 >= 0) {
        char v15 = (const std::string::value_type *)&v106;
      }
      else {
        char v15 = (const std::string::value_type *)v106;
      }
      if (v107 >= 0) {
        std::string::size_type v16 = HIBYTE(v107);
      }
      else {
        std::string::size_type v16 = *((void *)&v106 + 1);
      }
      goto LABEL_155;
    case 2:
      std::string::assign(&v108, "Invalid Remaining Length");
      if (!a3) {
        goto LABEL_166;
      }
      std::to_string(&v103, *((unsigned char *)a1 + 3) & 0x1F);
      uint64_t v17 = std::string::insert(&v103, 0, " got: ");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      gid_t v19 = std::string::append(&v104, " expected: ");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v102, 13);
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v21 = &v102;
      }
      else {
        int v21 = (std::string *)v102.__r_.__value_.__r.__words[0];
      }
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v22 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v22 = v102.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v105, (const std::string::value_type *)v21, v22);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      int64_t v107 = v23->__r_.__value_.__r.__words[2];
      long long v106 = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      if (v107 >= 0) {
        char v15 = (const std::string::value_type *)&v106;
      }
      else {
        char v15 = (const std::string::value_type *)v106;
      }
      if (v107 >= 0) {
        std::string::size_type v16 = HIBYTE(v107);
      }
      else {
        std::string::size_type v16 = *((void *)&v106 + 1);
      }
      goto LABEL_155;
    case 3:
      std::string::assign(&v108, "Invalid Advertising Interval and Length");
      if (!a3) {
        goto LABEL_166;
      }
      std::to_string(&v105, *((unsigned __int8 *)a1 + 3));
      std::string::size_type v25 = std::string::insert(&v105, 0, ": ");
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      int64_t v107 = v25->__r_.__value_.__r.__words[2];
      long long v106 = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      if (v107 >= 0) {
        int v27 = (const std::string::value_type *)&v106;
      }
      else {
        int v27 = (const std::string::value_type *)v106;
      }
      if (v107 >= 0) {
        std::string::size_type v28 = HIBYTE(v107);
      }
      else {
        std::string::size_type v28 = *((void *)&v106 + 1);
      }
      std::string::append(&v108, v27, v28);
      if (SHIBYTE(v107) < 0) {
        operator delete((void *)v106);
      }
      if ((SHIBYTE(v105.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_166;
      }
      char v29 = (void *)v105.__r_.__value_.__r.__words[0];
      break;
    case 4:
      std::string::assign(&v108, "Invalid Status Flags");
      if (!a3) {
        goto LABEL_166;
      }
      std::to_string(&v103, *((unsigned __int8 *)a1 + 4) >> 1);
      uint64_t v30 = std::string::insert(&v103, 0, " got: ");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      __int16 v32 = std::string::append(&v104, " expected: ");
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v102, 0);
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v34 = &v102;
      }
      else {
        unint64_t v34 = (std::string *)v102.__r_.__value_.__r.__words[0];
      }
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v102.__r_.__value_.__l.__size_;
      }
      __int16 v36 = std::string::append(&v105, (const std::string::value_type *)v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      int64_t v107 = v36->__r_.__value_.__r.__words[2];
      long long v106 = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      if (v107 >= 0) {
        char v15 = (const std::string::value_type *)&v106;
      }
      else {
        char v15 = (const std::string::value_type *)v106;
      }
      if (v107 >= 0) {
        std::string::size_type v16 = HIBYTE(v107);
      }
      else {
        std::string::size_type v16 = *((void *)&v106 + 1);
      }
      goto LABEL_155;
    case 5:
      std::string::assign(&v108, "Invalid Accessory Category Identifier");
      if (!a3) {
        goto LABEL_166;
      }
      std::to_string(&v101, 1);
      long long v47 = std::string::insert(&v101, 0, " (out of range [");
      long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v102.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      long long v49 = std::string::append(&v102, " - ");
      long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v103.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v100, 0xFFFF);
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v51 = &v100;
      }
      else {
        __int16 v51 = (std::string *)v100.__r_.__value_.__r.__words[0];
      }
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v52 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v52 = v100.__r_.__value_.__l.__size_;
      }
      int v53 = std::string::append(&v103, (const std::string::value_type *)v51, v52);
      long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      int v55 = std::string::append(&v104, "]): ");
      long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v56;
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v99, *(unsigned __int16 *)((char *)a1 + 11));
      if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v57 = &v99;
      }
      else {
        int v57 = (std::string *)v99.__r_.__value_.__r.__words[0];
      }
      if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v58 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v58 = v99.__r_.__value_.__l.__size_;
      }
      int v59 = std::string::append(&v105, (const std::string::value_type *)v57, v58);
      long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      int64_t v107 = v59->__r_.__value_.__r.__words[2];
      long long v106 = v60;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      if (v107 >= 0) {
        int v61 = (const std::string::value_type *)&v106;
      }
      else {
        int v61 = (const std::string::value_type *)v106;
      }
      if (v107 >= 0) {
        std::string::size_type v62 = HIBYTE(v107);
      }
      else {
        std::string::size_type v62 = *((void *)&v106 + 1);
      }
      goto LABEL_126;
    case 6:
      std::string::assign(&v108, "Invalid Global State Number");
      if (!a3) {
        goto LABEL_166;
      }
      std::to_string(&v101, 1);
      long long v63 = std::string::insert(&v101, 0, " (out of range [");
      long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      v102.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      uint64_t v65 = std::string::append(&v102, " - ");
      long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      v103.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v66;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v100, 0xFFFF);
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v67 = &v100;
      }
      else {
        double v67 = (std::string *)v100.__r_.__value_.__r.__words[0];
      }
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v68 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v68 = v100.__r_.__value_.__l.__size_;
      }
      uint64_t v69 = std::string::append(&v103, (const std::string::value_type *)v67, v68);
      long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v70;
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      double v71 = std::string::append(&v104, "]): ");
      long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v99, *(unsigned __int16 *)((char *)a1 + 13));
      if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v73 = &v99;
      }
      else {
        double v73 = (std::string *)v99.__r_.__value_.__r.__words[0];
      }
      if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v74 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v74 = v99.__r_.__value_.__l.__size_;
      }
      double v75 = std::string::append(&v105, (const std::string::value_type *)v73, v74);
      long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      int64_t v107 = v75->__r_.__value_.__r.__words[2];
      long long v106 = v76;
      v75->__r_.__value_.__l.__size_ = 0;
      v75->__r_.__value_.__r.__words[2] = 0;
      v75->__r_.__value_.__r.__words[0] = 0;
      if (v107 >= 0) {
        int v61 = (const std::string::value_type *)&v106;
      }
      else {
        int v61 = (const std::string::value_type *)v106;
      }
      if (v107 >= 0) {
        std::string::size_type v62 = HIBYTE(v107);
      }
      else {
        std::string::size_type v62 = *((void *)&v106 + 1);
      }
      goto LABEL_126;
    case 7:
      std::string::assign(&v108, "Invalid Configuration Number");
      if (!a3) {
        goto LABEL_166;
      }
      std::to_string(&v101, 1);
      double v77 = std::string::insert(&v101, 0, " (out of range [");
      long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
      v102.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v78;
      v77->__r_.__value_.__l.__size_ = 0;
      v77->__r_.__value_.__r.__words[2] = 0;
      v77->__r_.__value_.__r.__words[0] = 0;
      double v79 = std::string::append(&v102, " - ");
      long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      v103.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v80;
      v79->__r_.__value_.__l.__size_ = 0;
      v79->__r_.__value_.__r.__words[2] = 0;
      v79->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v100, 255);
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v81 = &v100;
      }
      else {
        double v81 = (std::string *)v100.__r_.__value_.__r.__words[0];
      }
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v82 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v82 = v100.__r_.__value_.__l.__size_;
      }
      double v83 = std::string::append(&v103, (const std::string::value_type *)v81, v82);
      long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v84;
      v83->__r_.__value_.__l.__size_ = 0;
      v83->__r_.__value_.__r.__words[2] = 0;
      v83->__r_.__value_.__r.__words[0] = 0;
      int v85 = std::string::append(&v104, "]): ");
      long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v86;
      v85->__r_.__value_.__l.__size_ = 0;
      v85->__r_.__value_.__r.__words[2] = 0;
      v85->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v99, *((unsigned __int8 *)a1 + 15));
      if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v87 = &v99;
      }
      else {
        int v87 = (std::string *)v99.__r_.__value_.__r.__words[0];
      }
      if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v88 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v88 = v99.__r_.__value_.__l.__size_;
      }
      double v89 = std::string::append(&v105, (const std::string::value_type *)v87, v88);
      long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
      int64_t v107 = v89->__r_.__value_.__r.__words[2];
      long long v106 = v90;
      v89->__r_.__value_.__l.__size_ = 0;
      v89->__r_.__value_.__r.__words[2] = 0;
      v89->__r_.__value_.__r.__words[0] = 0;
      if (v107 >= 0) {
        int v61 = (const std::string::value_type *)&v106;
      }
      else {
        int v61 = (const std::string::value_type *)v106;
      }
      if (v107 >= 0) {
        std::string::size_type v62 = HIBYTE(v107);
      }
      else {
        std::string::size_type v62 = *((void *)&v106 + 1);
      }
LABEL_126:
      std::string::append(&v108, v61, v62);
      if (SHIBYTE(v107) < 0) {
        operator delete((void *)v106);
      }
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v105.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v104.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v100.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v103.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v102.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_166;
      }
      char v29 = (void *)v101.__r_.__value_.__r.__words[0];
      break;
    case 8:
      std::string::assign(&v108, "Invalid Compatible Version");
      if (!a3) {
        goto LABEL_166;
      }
      std::to_string(&v103, *((unsigned __int8 *)a1 + 16));
      int64_t v91 = std::string::insert(&v103, 0, " got ");
      long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
      v104.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v92;
      v91->__r_.__value_.__l.__size_ = 0;
      v91->__r_.__value_.__r.__words[2] = 0;
      v91->__r_.__value_.__r.__words[0] = 0;
      __int16 v93 = std::string::append(&v104, " expected ");
      long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
      v105.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v94;
      v93->__r_.__value_.__l.__size_ = 0;
      v93->__r_.__value_.__r.__words[2] = 0;
      v93->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v102, 2);
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v95 = &v102;
      }
      else {
        __int16 v95 = (std::string *)v102.__r_.__value_.__r.__words[0];
      }
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v96 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v96 = v102.__r_.__value_.__l.__size_;
      }
      __int16 v97 = std::string::append(&v105, (const std::string::value_type *)v95, v96);
      long long v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
      int64_t v107 = v97->__r_.__value_.__r.__words[2];
      long long v106 = v98;
      v97->__r_.__value_.__l.__size_ = 0;
      v97->__r_.__value_.__r.__words[2] = 0;
      v97->__r_.__value_.__r.__words[0] = 0;
      if (v107 >= 0) {
        char v15 = (const std::string::value_type *)&v106;
      }
      else {
        char v15 = (const std::string::value_type *)v106;
      }
      if (v107 >= 0) {
        std::string::size_type v16 = HIBYTE(v107);
      }
      else {
        std::string::size_type v16 = *((void *)&v106 + 1);
      }
LABEL_155:
      std::string::append(&v108, v15, v16);
      if (SHIBYTE(v107) < 0) {
        operator delete((void *)v106);
      }
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v102.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v105.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v104.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_166;
      }
      char v29 = (void *)v103.__r_.__value_.__r.__words[0];
      break;
    case 9:
      sub_100134750(a4, "Valid");
      if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v108.__r_.__value_.__l.__data_);
      }
      return result;
    default:
      goto LABEL_166;
  }
  operator delete(v29);
LABEL_166:
  double result = *(double *)&v108.__r_.__value_.__l.__data_;
  *a4 = v108;
  return result;
}

void sub_100540198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v47 - 73) < 0) {
    operator delete(*(void **)(v47 - 96));
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v47 - 105) < 0) {
    operator delete(*(void **)(v47 - 128));
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (*(char *)(v47 - 49) < 0) {
    operator delete(*(void **)(v47 - 72));
  }
  _Unwind_Resume(exception_object);
}

void *sub_1005403F0@<X0>(int *a1@<X1>, void *a2@<X8>)
{
  return sub_100134750(a2, (&off_1022BA748)[*a1]);
}

uint64_t sub_100540408()
{
  return 1;
}

uint64_t sub_100540410(id *a1)
{
  uint64_t v3 = 0x100000002;
  if ((int)sub_1001072EC((uint64_t)a1, (int *)&v3, 2) <= 0)
  {
    [a1[15] stopScanningForType:1];
    [a1[15] stopScanningForType:0];
    [a1[19] stopScan];
    [a1[20] setNextFireDelay:1.79769313e308];
  }
  return 1;
}

void sub_1005404B8(void *a1)
{
  *a1 = off_1022BA4B8;
  unsigned int v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  sub_10053F4F8((uint64_t)a1);

  operator delete();
}

void sub_10054052C(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        __int16 v9 = (uint64_t *)v4;
      }
      else {
        __int16 v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BA5B8);
      }
      long long v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        char v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          char v11 = (void *)*v11;
        }
        *(_DWORD *)std::string buf = 136446466;
        gid_t v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022BA5B8);
        }
        std::string::size_type v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          std::string::size_type v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        char v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_1005407BC(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_100540870(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_1005408B8(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_100540900(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_100540948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_10241C4C0);
}

BOOL sub_100540974(uint64_t a1, int a2, int *a3, char *a4)
{
  int v40 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        int v13 = (uint64_t *)v7;
      }
      else {
        int v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v39 = v10;
      int v16 = *a3;
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          uint64_t v23 = (uint64_t *)v17;
        }
        else {
          uint64_t v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (!v24) {
        goto LABEL_42;
      }
      uint64_t v25 = a1 + 64;
      do
      {
        int v26 = *(_DWORD *)(v24 + 32);
        BOOL v27 = v26 < v16;
        if (v26 >= v16) {
          std::string::size_type v28 = (uint64_t *)v24;
        }
        else {
          std::string::size_type v28 = (uint64_t *)(v24 + 8);
        }
        if (!v27) {
          uint64_t v25 = v24;
        }
        uint64_t v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(void *)int v41 = v25;
        uint64_t v34 = *(void *)(v25 + 56);
        char v35 = *a4;
        *(void *)std::string buf = &v40;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v35;
        buf[0] = 0;
        uint8_t buf[8] = 0;
        char v47 = 0;
        std::string __p = 0;
        long long v49 = 0;
        uint64_t v50 = 0;
        if (v20 == v18)
        {
          if ((*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf)) {
            sub_100543604();
          }
          if (__p)
          {
            long long v49 = __p;
            operator delete(__p);
          }
        }
        if (v34) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        *(void *)int v41 = a1 + 64;
        char v29 = byte_10241C4C1;
        int v38 = v16;
        *(void *)std::string buf = &v38;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v29;
        int v38 = *a3;
        *(void *)std::string buf = &v38;
        uint64_t v30 = sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        long long v31 = (std::__shared_weak_count *)v30[9];
        v30[8] = 0;
        v30[9] = 0;
        if (v31) {
          sub_1000DB0A0(v31);
        }
        char v32 = *a4;
        int v38 = *a3;
        *(void *)std::string buf = &v38;
        long long v33 = sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)std::string buf = &v40;
        *((unsigned char *)sub_1000EB1B8(v33 + 5, &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v20 == v18)
      {
        *(_DWORD *)std::string buf = *a3;
        sub_1000EDED4((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BA5B8);
  }
  long long v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    char v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      char v15 = (void *)*v15;
    }
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v45 = 1026;
    int v46 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BA5B8);
    }
    __int16 v36 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      __int16 v36 = (void *)*v36;
    }
    *(_DWORD *)int v41 = 136446466;
    *(void *)&v41[4] = v36;
    __int16 v42 = 1026;
    int v43 = a2;
    long long v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v37 != buf) {
      free(v37);
    }
    return 0;
  }
  return result;
}

void sub_100540E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p)
{
  if (__p)
  {
    *(void *)(v26 + 80) = __p;
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100540E64(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        int v21 = (uint64_t *)v15;
      }
      else {
        int v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BA5B8);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BA5B8);
      }
      BOOL v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1005410E8(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        int v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            int v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            BOOL v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                BOOL v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022BA5B8);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                BOOL v27 = a1 + 8;
                if (a1[31] < 0) {
                  BOOL v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  std::string::size_type v28 = __p;
                }
                else {
                  std::string::size_type v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                char v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022BA5B8);
                }
                char v29 = a1 + 8;
                if (a1[31] < 0) {
                  char v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  uint64_t v30 = buf;
                }
                else {
                  uint64_t v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                int v38 = v29;
                __int16 v39 = 2082;
                int v40 = v30;
                long long v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1005414BC(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  uint64_t v11 = *(void *)(v7 + 64);
  if (!v11) {
    return 0;
  }
  *(_OWORD *)a3 = *(_OWORD *)v11;
  long long v12 = *(_OWORD *)(v11 + 16);
  long long v13 = *(_OWORD *)(v11 + 32);
  long long v14 = *(_OWORD *)(v11 + 48);
  *(unsigned char *)(a3 + 64) = *(unsigned char *)(v11 + 64);
  *(_OWORD *)(a3 + 32) = v13;
  *(_OWORD *)(a3 + 4_Block_object_dispose(&STACK[0x850], 8) = v14;
  *(_OWORD *)(a3 + 16) = v12;
  if (v11 != a3) {
    sub_100543778((char *)(a3 + 72), *(char **)(v11 + 72), *(void *)(v11 + 80), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v11 + 80) - *(void *)(v11 + 72)) >> 3));
  }
  return 1;
}

uint64_t sub_100541574(uint64_t a1, int *a2, long long *a3)
{
  sub_1005428D8(a3, &v10);
  int v9 = *a2;
  uint64_t v11 = &v9;
  uint64_t v5 = sub_10044715C((uint64_t **)(a1 + 56), &v9, (uint64_t)&unk_101D0B290, &v11);
  long long v6 = v10;
  long long v10 = 0uLL;
  uint64_t v7 = (std::__shared_weak_count *)v5[9];
  *((_OWORD *)v5 + 4) = v6;
  if (v7)
  {
    sub_1000DB0A0(v7);
    if (*((void *)&v10 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  return 1;
}

void sub_100541608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100541620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = 0;
  v4[8] = 0;
  v4[64] = 0;
  long long v6 = 0;
  uint64_t v7 = 0;
  std::string __p = 0;
  (*(void (**)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v4, a3, a4, 0);
  if (__p)
  {
    long long v6 = __p;
    operator delete(__p);
  }
}

void sub_10054169C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005416B8(uint64_t a1, unsigned int *a2, long long *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BA5B8);
  }
  int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    long long v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v10 = (void *)*v10;
    }
    uint64_t v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)std::string buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    __int16 v23 = 2082;
    BOOL v24 = v10;
    __int16 v25 = 2050;
    int v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  long long v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      long long v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    BOOL v27 = v28;
    memset(v28, 0, sizeof(v28));
    char v29 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v27);
    long long v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v26) {
      sub_1000DB0A0(v26);
    }
    sub_1000F5BB0((uint64_t)&buf[8], *(void **)&buf[16]);
    if (v29) {
      sub_1000DB0A0(v29);
    }
    sub_1000F5BB0((uint64_t)&v27, v28[0]);
  }
  if (!a4)
  {
    uint64_t v20 = (std::__shared_weak_count *)v14[9];
    v14[8] = 0;
    v14[9] = 0;
    if (!v20) {
      goto LABEL_29;
    }
LABEL_28:
    sub_1000DB0A0(v20);
    goto LABEL_29;
  }
  sub_1005428D8(a3, buf);
  long long v18 = *(_OWORD *)buf;
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  int v19 = (std::__shared_weak_count *)v14[9];
  *((_OWORD *)v14 + 4) = v18;
  if (v19)
  {
    sub_1000DB0A0(v19);
    uint64_t v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      goto LABEL_28;
    }
  }
LABEL_29:
  if (v14[7]) {
    sub_1005422E0();
  }
  os_activity_scope_leave(&state);
}

void sub_100541C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100541CD4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BA5B8);
    }
    unsigned int v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)std::string buf = 136315138;
      BOOL v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BA5B8);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::listClients() [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BA5B8);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      long long v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        long long v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      BOOL v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BA5B8);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::listClients() [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    int v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022BA5B8);
            }
            long long v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                uint64_t v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)std::string buf = 136315650;
              BOOL v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022BA5B8);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::listClients() [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            long long v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                long long v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        long long v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            long long v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            int v8 = v19;
          }
          while (!v16);
        }
        int v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_100542280(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1005422B0(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

void sub_1005422E0()
{
}

void sub_1005423CC()
{
}

void sub_1005423F0(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      int v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          int v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        long long v49 = v9;
        id v13 = sub_100542B50(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        long long v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                BOOL v22 = (uint64_t *)v17;
              }
              else {
                BOOL v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              long long v48 = v19;
              sub_1005427E0(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              char v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  char v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              long long v49 = v29;
              uint64_t v34 = v29[6];
              long long v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                char v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    char v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      long long v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  int v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      long long v14 = v43;
                      int v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      long long v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      char v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              long long v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022BA5B8);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::string buf = 136446466;
                int v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022BA5B8);
                }
                __int16 v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                __int16 v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                char v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_1005427E0(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_100542B50(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    long long v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    BOOL result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

uint64_t sub_1005428D8@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x78uLL);
  uint64_t result = sub_100542934((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_100542920(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100542934(uint64_t a1, long long *a2)
{
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = 0u;
  *(void *)a1 = off_1022BA6E8;
  long long v3 = a2[2];
  long long v4 = a2[3];
  char v5 = *((unsigned char *)a2 + 64);
  long long v7 = *a2;
  long long v6 = a2[1];
  *(void *)(a1 + 96) = 0;
  uint64_t v8 = a1 + 96;
  *(_OWORD *)(v8 - 72) = v7;
  *(unsigned char *)(v8 - _Block_object_dispose(&STACK[0x850], 8) = v5;
  *(_OWORD *)(v8 - 24) = v4;
  *(_OWORD *)(v8 - 40) = v3;
  *(_OWORD *)(v8 - 56) = v6;
  *(_OWORD *)(v8 + _Block_object_dispose(&STACK[0x850], 8) = 0u;
  sub_100542A70((void *)v8, *((const void **)a2 + 9), *((void *)a2 + 10), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 3));
  return a1;
}

void sub_1005429CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1005429E0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022BA6E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100542A00(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022BA6E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100542A54(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
}

void *sub_100542A70(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    uint64_t result = sub_1002F41E0(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100542AD0(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x850], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100542AEC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    unsigned int v2 = *(void **)(v1 + 72);
    if (v2)
    {
      *(void *)(v1 + 80) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

id sub_100542B50(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_100542BB0(a1);
}

id sub_100542BB0(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BA728);
      }
      uint64_t v3 = qword_102418F98;
      if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      int v8 = 134218498;
      id v9 = v2;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      __int16 v12 = 2080;
      unint64_t v13 = 0x8000000101D22FD8 & 0x7FFFFFFFFFFFFFFFLL;
      long long v4 = v3;
      os_log_type_t v5 = OS_LOG_TYPE_ERROR;
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BA728);
      }
      uint64_t v7 = qword_102418F98;
      if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT)) {
        return 0;
      }
      int v8 = 134218498;
      id v9 = v2;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      __int16 v12 = 2080;
      unint64_t v13 = 0x8000000101D22FD8 & 0x7FFFFFFFFFFFFFFFLL;
      long long v4 = v7;
      os_log_type_t v5 = OS_LOG_TYPE_FAULT;
    }
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", (uint8_t *)&v8, 0x20u);
    return 0;
  }

  return [a1 cppObjectPtr];
}

void sub_100542D98(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_100542DC8(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (a2)
  {
    if (a2 == 1)
    {
      std::string::assign(a3, "Invalid Accessory Category Identifier");
      std::to_string(&v34, 1);
      os_log_type_t v5 = std::string::insert(&v34, 0, " (out of range [");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      uint64_t v7 = std::string::append(&v35, " - ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v36.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v33, 0xFFFF);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        id v9 = &v33;
      }
      else {
        id v9 = (std::string *)v33.__r_.__value_.__r.__words[0];
      }
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v33.__r_.__value_.__l.__size_;
      }
      uint64_t v11 = std::string::append(&v36, (const std::string::value_type *)v9, size);
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v37.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      unint64_t v13 = std::string::append(&v37, "]): ");
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v38.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v32, *(unsigned __int16 *)(a1 + 6));
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v15 = &v32;
      }
      else {
        int v15 = (std::string *)v32.__r_.__value_.__r.__words[0];
      }
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v16 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v16 = v32.__r_.__value_.__l.__size_;
      }
      uint64_t v17 = std::string::append(&v38, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      int64_t v40 = v17->__r_.__value_.__r.__words[2];
      long long v39 = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (v40 >= 0) {
        int v19 = (const std::string::value_type *)&v39;
      }
      else {
        int v19 = (const std::string::value_type *)v39;
      }
      if (v40 >= 0) {
        std::string::size_type v20 = HIBYTE(v40);
      }
      else {
        std::string::size_type v20 = *((void *)&v39 + 1);
      }
      std::string::append(a3, v19, v20);
      if (SHIBYTE(v40) < 0) {
        operator delete((void *)v39);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      {
        BOOL v21 = (void *)v34.__r_.__value_.__r.__words[0];
LABEL_59:
        operator delete(v21);
      }
    }
  }
  else
  {
    std::string::assign(a3, "Invalid Status Flags");
    std::to_string(&v36, *(unsigned __int8 *)(a1 + 8));
    BOOL v22 = std::string::insert(&v36, 0, " got: ");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    BOOL v24 = std::string::append(&v37, " expected: ");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v35, 0);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v26 = &v35;
    }
    else {
      int v26 = (std::string *)v35.__r_.__value_.__r.__words[0];
    }
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v27 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v27 = v35.__r_.__value_.__l.__size_;
    }
    int v28 = std::string::append(&v38, (const std::string::value_type *)v26, v27);
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    int64_t v40 = v28->__r_.__value_.__r.__words[2];
    long long v39 = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0) {
      int v30 = (const std::string::value_type *)&v39;
    }
    else {
      int v30 = (const std::string::value_type *)v39;
    }
    if (v40 >= 0) {
      std::string::size_type v31 = HIBYTE(v40);
    }
    else {
      std::string::size_type v31 = *((void *)&v39 + 1);
    }
    std::string::append(a3, v30, v31);
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      BOOL v21 = (void *)v36.__r_.__value_.__r.__words[0];
      goto LABEL_59;
    }
  }
}

void sub_100543114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v48 - 57) < 0) {
    operator delete(*(void **)(v48 - 80));
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v48 - 89) < 0) {
    operator delete(*(void **)(v48 - 112));
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (*(char *)(v47 + 23) < 0) {
    operator delete(*(void **)v47);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10054326C(void **a1, int *a2, __int16 *a3, uint64_t *a4, int *a5)
{
  long long v12 = a1[2];
  uint64_t v10 = (uint64_t)(a1 + 2);
  uint64_t v11 = v12;
  unint64_t v13 = *(void *)(v10 - 8);
  if (v13 >= (unint64_t)v12)
  {
    uint64_t v20 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v13 - (void)*a1) >> 3);
    unint64_t v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) > 0x492492492492492) {
      sub_1001D7FD4();
    }
    unint64_t v22 = 0x6DB6DB6DB6DB6DB7 * ((v11 - (unsigned char *)*a1) >> 3);
    if (2 * v22 > v21) {
      unint64_t v21 = 2 * v22;
    }
    if (v22 >= 0x249249249249249) {
      unint64_t v23 = 0x492492492492492;
    }
    else {
      unint64_t v23 = v21;
    }
    BOOL v24 = (char *)sub_10017EA6C(v10, v23);
    long long v25 = &v24[56 * v20];
    uint64_t v26 = *a4;
    __int16 v27 = *((_WORD *)a2 + 2);
    int v28 = *a2;
    __int16 v29 = *a3;
    std::string::size_type v31 = &v24[56 * v30];
    int v32 = *a5;
    *long long v25 = 1;
    *(_DWORD *)(v25 + 1) = v28;
    *(_WORD *)(v25 + 5) = v27;
    *((_WORD *)v25 + 4) = v29;
    *((void *)v25 + 2) = v26;
    *((_DWORD *)v25 + 6) = v32;
    v25[28] = 0;
    v25[44] = 0;
    v25[48] = 0;
    v25[52] = 0;
    int v19 = v25 + 56;
    std::string v34 = (char *)*a1;
    std::string v33 = (char *)a1[1];
    if (v33 != *a1)
    {
      do
      {
        long long v35 = *(_OWORD *)(v33 - 56);
        long long v36 = *(_OWORD *)(v33 - 40);
        long long v37 = *(_OWORD *)(v33 - 24);
        *((void *)v25 - 1) = *((void *)v33 - 1);
        *(_OWORD *)(v25 - 24) = v37;
        *(_OWORD *)(v25 - 40) = v36;
        *(_OWORD *)(v25 - 56) = v35;
        v25 -= 56;
        v33 -= 56;
      }
      while (v33 != v34);
      std::string v33 = (char *)*a1;
    }
    *a1 = v25;
    a1[1] = v19;
    a1[2] = v31;
    if (v33) {
      operator delete(v33);
    }
  }
  else
  {
    __int16 v14 = *((_WORD *)a2 + 2);
    int v15 = *a2;
    __int16 v16 = *a3;
    uint64_t v17 = *a4;
    int v18 = *a5;
    *(unsigned char *)unint64_t v13 = 1;
    *(_DWORD *)(v13 + 1) = v15;
    *(_WORD *)(v13 + 5) = v14;
    *(_WORD *)(v13 + _Block_object_dispose(&STACK[0x850], 8) = v16;
    *(void *)(v13 + 16) = v17;
    *(_DWORD *)(v13 + 24) = v18;
    *(unsigned char *)(v13 + 2_Block_object_dispose(&STACK[0x850], 8) = 0;
    *(unsigned char *)(v13 + 44) = 0;
    *(unsigned char *)(v13 + 4_Block_object_dispose(&STACK[0x850], 8) = 0;
    int v19 = (char *)(v13 + 56);
    *(unsigned char *)(v13 + 52) = 0;
  }
  a1[1] = v19;
  return v19 - 56;
}

char *sub_100543428(void **a1, __int16 *a2, char *a3, int *a4, unsigned char *a5, int *a6, __int16 *a7, __int16 *a8, unsigned char *a9, unsigned char *a10, uint64_t *a11, int *a12, int *a13)
{
  __int16 v14 = (char *)*a1;
  uint64_t v15 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v16 = v15 + 1;
  if ((unint64_t)(v15 + 1) > 0x492492492492492) {
    sub_1001D7FD4();
  }
  uint64_t v20 = (uint64_t)(a1 + 2);
  unint64_t v21 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - v14) >> 3);
  if (2 * v21 > v16) {
    unint64_t v16 = 2 * v21;
  }
  if (v21 >= 0x249249249249249) {
    unint64_t v22 = 0x492492492492492;
  }
  else {
    unint64_t v22 = v16;
  }
  unint64_t v23 = (char *)sub_10017EA6C(v20, v22);
  __int16 v24 = *a2;
  char v25 = *a3;
  uint64_t v26 = &v23[56 * v15];
  int v27 = *a4;
  __int16 v29 = &v23[56 * v28];
  BOOL v30 = *a5 != 0;
  __int16 v31 = *((_WORD *)a6 + 2);
  int v32 = *a6;
  __int16 v33 = *a7;
  __int16 v34 = *a8;
  LOBYTE(v23) = *a9;
  LOBYTE(v2_Block_object_dispose(&STACK[0x850], 8) = *a10;
  uint64_t v35 = *a11;
  int v36 = *a12;
  int v37 = *a13;
  char *v26 = 2;
  *(_DWORD *)(v26 + 1) = v32;
  *(_WORD *)(v26 + 5) = v31;
  *((_WORD *)v26 + 4) = v33;
  *((void *)v26 + 2) = v35;
  *((_DWORD *)v26 + 6) = v36;
  *((_WORD *)v26 + 14) = v24;
  v26[30] = v25;
  *((_DWORD *)v26 + _Block_object_dispose(&STACK[0x850], 8) = v27;
  v26[36] = v30;
  *((_WORD *)v26 + 19) = v34;
  v26[40] = (char)v23;
  v26[41] = v28;
  v26[44] = 1;
  *((_DWORD *)v26 + 12) = v37;
  v26[52] = 1;
  std::string v38 = v26 + 56;
  int64_t v40 = (char *)*a1;
  long long v39 = (char *)a1[1];
  if (v39 != *a1)
  {
    do
    {
      long long v41 = *(_OWORD *)(v39 - 56);
      long long v42 = *(_OWORD *)(v39 - 40);
      long long v43 = *(_OWORD *)(v39 - 24);
      *((void *)v26 - 1) = *((void *)v39 - 1);
      *(_OWORD *)(v26 - 24) = v43;
      *(_OWORD *)(v26 - 40) = v42;
      *(_OWORD *)(v26 - 56) = v41;
      v26 -= 56;
      v39 -= 56;
    }
    while (v39 != v40);
    long long v39 = (char *)*a1;
  }
  *a1 = v26;
  a1[1] = v38;
  a1[2] = v29;
  if (v39) {
    operator delete(v39);
  }
  return v38;
}

void sub_100543604()
{
}

void sub_1005436F0()
{
}

uint64_t sub_100543714(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    id v2 = *(void **)(v1 + 72);
    if (v2)
    {
      *(void *)(v1 + 80) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

char *sub_100543778(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  id v9 = *(char **)result;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      _OWORD v7[2] = 0;
    }
    if (a4 > 0x492492492492492) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x249249249249249) {
      unint64_t v12 = 0x492492492492492;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = sub_1002F41E0(v7, v12);
    __int16 v14 = (char *)v7[1];
    unint64_t v13 = (void **)(v7 + 1);
    id v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int v18 = v9;
      int v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v13 = (void **)(result + 8);
  uint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0x6DB6DB6DB6DB6DB7 * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    id v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int v18 = v9;
    int v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v13 = &v9[v17];
  return result;
}

double sub_1005438D4()
{
  double v0 = (double)(int)[&off_102392660 intValue] * 0.625;
  double result = v0 + (double)(int)[&off_102392678 intValue] * 0.625;
  *(double *)&qword_10247B338 = result;
  return result;
}

double sub_100543928(uint64_t a1)
{
  double v2 = sub_10016C458();

  return sub_100543960(a1, v2);
}

double sub_100543960(uint64_t a1, double a2)
{
  uint64_t v3 = (_OWORD *)(a1 + 160);
  if (*(unsigned char *)(a1 + 160))
  {
    int v5 = *(_DWORD *)(a1 + 240);
    long long v6 = *(_OWORD *)(a1 + 208);
    *(_OWORD *)(a1 + 88_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a1 + 192);
    *(_OWORD *)(a1 + 904) = v6;
    *(_OWORD *)(a1 + 916) = *(_OWORD *)(a1 + 220);
    long long v7 = *(_OWORD *)(a1 + 176);
    *(_OWORD *)(a1 + 856) = *v3;
    *(_OWORD *)(a1 + 872) = v7;
    *(_DWORD *)(a1 + 936) = v5;
    sub_1000FB43C((char *)(a1 + 944), *(char **)(a1 + 248), *(void *)(a1 + 256), (uint64_t)(*(void *)(a1 + 256) - *(void *)(a1 + 248)) >> 2);
    long long v8 = *(_OWORD *)(a1 + 448);
    *(_OWORD *)(a1 + 112_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a1 + 432);
    *(_OWORD *)(a1 + 1144) = v8;
    *(_OWORD *)(a1 + 1156) = *(_OWORD *)(a1 + 460);
    long long v9 = *(_OWORD *)(a1 + 384);
    *(_OWORD *)(a1 + 1064) = *(_OWORD *)(a1 + 368);
    *(_OWORD *)(a1 + 1080) = v9;
    long long v10 = *(_OWORD *)(a1 + 416);
    *(_OWORD *)(a1 + 1096) = *(_OWORD *)(a1 + 400);
    *(_OWORD *)(a1 + 1112) = v10;
    long long v11 = *(_OWORD *)(a1 + 320);
    *(_OWORD *)(a1 + 1000) = *(_OWORD *)(a1 + 304);
    *(_OWORD *)(a1 + 1016) = v11;
    long long v12 = *(_OWORD *)(a1 + 352);
    *(_OWORD *)(a1 + 1032) = *(_OWORD *)(a1 + 336);
    *(_OWORD *)(a1 + 104_Block_object_dispose(&STACK[0x850], 8) = v12;
    long long v13 = *(_OWORD *)(a1 + 288);
    *(_OWORD *)(a1 + 96_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a1 + 272);
    *(_OWORD *)(a1 + 984) = v13;
    std::string::operator=((std::string *)(a1 + 1176), (const std::string *)(a1 + 480));
    long long v14 = *(_OWORD *)(a1 + 600);
    *(_OWORD *)(a1 + 1312) = *(_OWORD *)(a1 + 616);
    long long v15 = *(_OWORD *)(a1 + 648);
    *(_OWORD *)(a1 + 132_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a1 + 632);
    *(_OWORD *)(a1 + 1344) = v15;
    long long v17 = *(_OWORD *)(a1 + 568);
    long long v16 = *(_OWORD *)(a1 + 584);
    *(_DWORD *)(a1 + 1360) = *(_DWORD *)(a1 + 664);
    *(_OWORD *)(a1 + 1280) = v16;
    *(_OWORD *)(a1 + 1296) = v14;
    long long v18 = *(_OWORD *)(a1 + 520);
    *(_OWORD *)(a1 + 1200) = *(_OWORD *)(a1 + 504);
    *(_OWORD *)(a1 + 1216) = v18;
    long long v19 = *(_OWORD *)(a1 + 536);
    *(_OWORD *)(a1 + 124_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a1 + 552);
    *(_OWORD *)(a1 + 1264) = v17;
    *(_OWORD *)(a1 + 1232) = v19;
    long long v20 = *(_OWORD *)(a1 + 816);
    *(_OWORD *)(a1 + 1496) = *(_OWORD *)(a1 + 800);
    *(_OWORD *)(a1 + 1512) = v20;
    *(_OWORD *)(a1 + 152_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a1 + 832);
    *(_DWORD *)(a1 + 1544) = *(_DWORD *)(a1 + 848);
    long long v21 = *(_OWORD *)(a1 + 752);
    *(_OWORD *)(a1 + 1432) = *(_OWORD *)(a1 + 736);
    *(_OWORD *)(a1 + 144_Block_object_dispose(&STACK[0x850], 8) = v21;
    long long v22 = *(_OWORD *)(a1 + 784);
    *(_OWORD *)(a1 + 1464) = *(_OWORD *)(a1 + 768);
    *(_OWORD *)(a1 + 1480) = v22;
    long long v23 = *(_OWORD *)(a1 + 688);
    *(_OWORD *)(a1 + 136_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a1 + 672);
    *(_OWORD *)(a1 + 1384) = v23;
    long long v24 = *(_OWORD *)(a1 + 720);
    *(_OWORD *)(a1 + 1400) = *(_OWORD *)(a1 + 704);
    *(_OWORD *)(a1 + 1416) = v24;
    *(double *)(a1 + 224_Block_object_dispose(&STACK[0x850], 8) = a2;
  }
  *(_DWORD *)a1 = 0xFFFF;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 4) = 0;
  *(_OWORD *)(a1 + 20) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 36) = _Q0;
  *(_OWORD *)(a1 + 52) = _Q0;
  *(_OWORD *)(a1 + 6_Block_object_dispose(&STACK[0x850], 8) = _Q0;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x850], 8) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(unsigned char *)(a1 + 152) = 0;

  return sub_100543B14((uint64_t)v3);
}

double sub_100543B14(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  sub_10013FA84((uint64_t)__p);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)__p;
  double v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  uint64_t v3 = 0;
  *(_OWORD *)(a1 + 8_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)&__p[8];
  *(void *)(a1 + 104) = v19;
  *(void *)&__p[16] = 0;
  uint64_t v19 = 0;
  *(void *)&__p[8] = 0;
  long long v4 = v31[0];
  *(_OWORD *)(a1 + 272) = v30;
  *(_OWORD *)(a1 + 28_Block_object_dispose(&STACK[0x850], 8) = v4;
  long long v5 = v27;
  *(_OWORD *)(a1 + 20_Block_object_dispose(&STACK[0x850], 8) = v26;
  *(_OWORD *)(a1 + 224) = v5;
  long long v6 = v29;
  *(_OWORD *)(a1 + 240) = v28;
  *(_OWORD *)(a1 + 256) = v6;
  long long v7 = v23;
  *(_OWORD *)(a1 + 144) = v22;
  *(_OWORD *)(a1 + 160) = v7;
  long long v8 = v25;
  *(_OWORD *)(a1 + 176) = v24;
  *(_OWORD *)(a1 + 192) = v8;
  long long v9 = v21;
  *(_OWORD *)(a1 + 112) = v20;
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x850], 8) = v9;
  *(_OWORD *)(a1 + 300) = *(_OWORD *)((char *)v31 + 12);
  long long v10 = (void **)(a1 + 320);
  if (*(char *)(a1 + 343) < 0)
  {
    operator delete(*v10);
    uint64_t v3 = *(void **)&__p[8];
  }
  *(_OWORD *)long long v10 = v32;
  *(void *)(a1 + 336) = v33;
  HIBYTE(v33) = 0;
  LOBYTE(v32) = 0;
  *(_DWORD *)(a1 + 504) = v44;
  long long v11 = v43;
  *(_OWORD *)(a1 + 472) = v42;
  *(_OWORD *)(a1 + 48_Block_object_dispose(&STACK[0x850], 8) = v11;
  long long v12 = v39;
  *(_OWORD *)(a1 + 40_Block_object_dispose(&STACK[0x850], 8) = v38;
  *(_OWORD *)(a1 + 424) = v12;
  long long v13 = v41;
  *(_OWORD *)(a1 + 440) = v40;
  *(_OWORD *)(a1 + 456) = v13;
  long long v14 = v35;
  *(_OWORD *)(a1 + 344) = v34;
  *(_OWORD *)(a1 + 360) = v14;
  long long v15 = v37;
  *(_OWORD *)(a1 + 376) = v36;
  *(_OWORD *)(a1 + 392) = v15;
  if (v3)
  {
    *(void *)&__p[16] = v3;
    operator delete(v3);
  }
  *(void *)&long long v16 = -1;
  *((void *)&v16 + 1) = -1;
  *(_OWORD *)(a1 + 2_Block_object_dispose(&STACK[0x850], 8) = v16;
  *(_OWORD *)(a1 + 12) = v16;
  *(_OWORD *)&__p[4] = 0uLL;
  *(void *)(a1 + 512) = -1;
  *(void *)(a1 + 520) = -1;
  *(void *)(a1 + 52_Block_object_dispose(&STACK[0x850], 8) = -1;
  *(_DWORD *)(a1 + 536) = -1;
  *(_OWORD *)(a1 + 540) = *(_OWORD *)__p;
  *(_DWORD *)(a1 + 556) = *(_DWORD *)&__p[16];
  *(void *)(a1 + 560) = -1;
  *(void *)(a1 + 56_Block_object_dispose(&STACK[0x850], 8) = -1;
  *(_DWORD *)(a1 + 576) = -1;
  *(_OWORD *)(a1 + 580) = xmmword_101D23030;
  *(_OWORD *)(a1 + 60) = v16;
  *(_OWORD *)(a1 + 44) = v16;
  *(void *)&__p[12] = 0;
  *(void *)&__p[4] = 0;
  *(void *)(a1 + 600) = -1;
  *(_DWORD *)(a1 + 60_Block_object_dispose(&STACK[0x850], 8) = -1;
  *(void *)(a1 + 616) = -1;
  *(void *)(a1 + 624) = -1;
  *(_DWORD *)(a1 + 632) = -1;
  *(_OWORD *)(a1 + 636) = *(_OWORD *)__p;
  *(_DWORD *)(a1 + 652) = *(_DWORD *)&__p[16];
  *(void *)(a1 + 656) = -1;
  *(void *)(a1 + 664) = -1;
  *(void *)(a1 + 672) = -1;
  double result = NAN;
  *(void *)(a1 + 680) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 68_Block_object_dispose(&STACK[0x850], 8) = -1;
  return result;
}

uint64_t sub_100543CE8(uint64_t a1)
{
  return a1 + 160;
}

uint64_t sub_100543CF0(uint64_t result)
{
  *(unsigned char *)(result + 2281) = 0;
  return result;
}

void sub_100543CF8(uint64_t a1, int a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BA760);
  }
  long long v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67240192;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLCellLocationRefresh::setAirplaneMode(%{public}d)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BA760);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellLocationRefresh::setAirplaneMode(BOOL)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  double v5 = sub_10016C458();
  sub_100543EB8(a1, v5, a2);
}

void sub_100543EB8(uint64_t a1, double a2, int a3)
{
  if (*(unsigned __int8 *)(a1 + 2256) != a3)
  {
    *(unsigned char *)(a1 + 2256) = a3;
    if (a3) {
      sub_100543ED8(a1, a2);
    }
    else {
      sub_10054434C(a1, a2);
    }
  }
}

void sub_100543ED8(uint64_t a1, double a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BA760);
  }
  long long v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLCellLocationRefresh::enableAirplaneMode", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BA760);
    }
    long long v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellLocationRefresh::enableAirplaneModeContext(CFTimeInterval)", "%s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
  }
  *(void *)(a1 + 2272) = 0;
  sub_1005456F4(a1, (uint64_t)buf, a2);
  long long v5 = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 156_Block_object_dispose(&STACK[0x850], 8) = v30;
  long long v6 = v32[0];
  *(_OWORD *)(a1 + 1584) = v31;
  *(_OWORD *)(a1 + 1600) = v6;
  *(_OWORD *)(a1 + 1552) = v5;
  *(_OWORD *)(a1 + 1612) = *(_OWORD *)((char *)v32 + 12);
  *(_DWORD *)(a1 + 1632) = v33;
  long long v7 = *(void **)(a1 + 1640);
  if (v7)
  {
    *(void *)(a1 + 164_Block_object_dispose(&STACK[0x850], 8) = v7;
    operator delete(v7);
  }
  int v8 = 0;
  *(_OWORD *)(a1 + 1640) = *(_OWORD *)__p;
  long long v9 = v44;
  *(_OWORD *)(a1 + 180_Block_object_dispose(&STACK[0x850], 8) = v45;
  long long v10 = v47[0];
  *(_OWORD *)(a1 + 1824) = v46;
  *(_OWORD *)(a1 + 1840) = v10;
  long long v11 = v40;
  *(_OWORD *)(a1 + 1744) = v41;
  long long v12 = v43;
  *(_OWORD *)(a1 + 1760) = v42;
  *(_OWORD *)(a1 + 1776) = v12;
  *(_OWORD *)(a1 + 1792) = v9;
  long long v13 = v36;
  *(_OWORD *)(a1 + 1680) = v37;
  long long v14 = v39;
  *(_OWORD *)(a1 + 1696) = v38;
  *(_OWORD *)(a1 + 1712) = v14;
  *(_OWORD *)(a1 + 172_Block_object_dispose(&STACK[0x850], 8) = v11;
  *(void *)(a1 + 1656) = v35;
  __p[1] = 0;
  uint64_t v35 = 0;
  __p[0] = 0;
  *(_OWORD *)(a1 + 1664) = v13;
  *(_OWORD *)(a1 + 1852) = *(_OWORD *)((char *)v47 + 12);
  long long v15 = (void **)(a1 + 1872);
  if (*(char *)(a1 + 1895) < 0)
  {
    operator delete(*v15);
    int v8 = __p[0];
  }
  *(_OWORD *)long long v15 = v48;
  long long v16 = v59;
  *(_OWORD *)(a1 + 2024) = v58;
  *(_OWORD *)(a1 + 2040) = v16;
  long long v17 = v55;
  *(_OWORD *)(a1 + 1960) = v54;
  *(_OWORD *)(a1 + 1976) = v17;
  long long v18 = v57;
  *(_OWORD *)(a1 + 1992) = v56;
  *(_OWORD *)(a1 + 200_Block_object_dispose(&STACK[0x850], 8) = v18;
  long long v19 = v51;
  *(_OWORD *)(a1 + 1896) = v50;
  *(_OWORD *)(a1 + 1912) = v19;
  long long v20 = v53;
  *(_OWORD *)(a1 + 192_Block_object_dispose(&STACK[0x850], 8) = v52;
  *(_OWORD *)(a1 + 1944) = v20;
  long long v21 = v70;
  *(_OWORD *)(a1 + 2192) = v69;
  *(_OWORD *)(a1 + 220_Block_object_dispose(&STACK[0x850], 8) = v21;
  *(_OWORD *)(a1 + 2224) = v71;
  long long v22 = v66;
  *(_OWORD *)(a1 + 212_Block_object_dispose(&STACK[0x850], 8) = v65;
  *(_OWORD *)(a1 + 2144) = v22;
  long long v23 = v68;
  *(_OWORD *)(a1 + 2160) = v67;
  *(_OWORD *)(a1 + 2176) = v23;
  long long v24 = v62;
  *(_OWORD *)(a1 + 2064) = v61;
  *(_OWORD *)(a1 + 2080) = v24;
  long long v25 = v64;
  *(_OWORD *)(a1 + 2096) = v63;
  *(void *)(a1 + 188_Block_object_dispose(&STACK[0x850], 8) = v49;
  HIBYTE(v49) = 0;
  LOBYTE(v4_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(_DWORD *)(a1 + 2056) = v60;
  *(_DWORD *)(a1 + 2240) = v72;
  *(_OWORD *)(a1 + 2112) = v25;
  if (v8)
  {
    __p[1] = v8;
    operator delete(v8);
  }
  if (*(unsigned char *)(a1 + 1552))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BA760);
    }
    long long v26 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CLCellLocationRefresh::enableAirplaneMode: marking the mach continuous time.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BA760);
      }
      long long v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellLocationRefresh::enableAirplaneModeContext(CFTimeInterval)", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    *(double *)(a1 + 2272) = a2;
  }
}

void sub_10054434C(uint64_t a1, double a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BA760);
  }
  long long v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLCellLocationRefresh::disableAirplaneMode", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BA760);
    }
    long long v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellLocationRefresh::disableAirplaneModeContext(CFTimeInterval)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (*(unsigned char *)(a1 + 1552))
  {
    double v5 = *(double *)(a1 + 2272);
    if (v5 > 0.0 && v5 < a2)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BA760);
      }
      double v7 = a2 - v5;
      int v8 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 134349056;
        double v14 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLCellLocationRefresh::disableAirplaneMode: airplane mode duration %{public}f secs", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BA760);
        }
        long long v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellLocationRefresh::disableAirplaneModeContext(CFTimeInterval)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      if (v7 >= 1200.0)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BA760);
        }
        long long v9 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLCellLocationRefresh::disableAirplaneMode: ignoring previous cell location before airplane mode.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BA760);
          }
          long long v12 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLCellLocationRefresh::disableAirplaneModeContext(CFTimeInterval)", "%s\n", v12);
          if (v12 != (char *)buf) {
            free(v12);
          }
        }
        *(unsigned char *)(a1 + 2280) = 1;
        *(double *)(a1 + 2264) = a2;
      }
    }
  }
}

void sub_10054478C(uint64_t a1)
{
  bzero(v2, 0x8F0uLL);
  sub_100544834((uint64_t)v2);
  sub_100544934(a1, (uint64_t)v2);
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v11)
  {
    long long v12 = v11;
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v7)
  {
    int v8 = v7;
    operator delete(v7);
  }
  if (v6 < 0) {
    operator delete(v5);
  }
  if (v3)
  {
    long long v4 = v3;
    operator delete(v3);
  }
}

uint64_t sub_100544834(uint64_t a1)
{
  *(_DWORD *)a1 = 0xFFFF;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 4) = 0;
  *(_OWORD *)(a1 + 20) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 36) = _Q0;
  *(_OWORD *)(a1 + 52) = _Q0;
  *(_OWORD *)(a1 + 6_Block_object_dispose(&STACK[0x850], 8) = _Q0;
  *(_DWORD *)(a1 + 84) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x850], 8) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  sub_10142E1B8(a1 + 160);
  sub_10142E1B8(a1 + 856);
  sub_10142E1B8(a1 + 1552);
  *(void *)(a1 + 224_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(unsigned char *)(a1 + 2256) = 0;
  *(_WORD *)(a1 + 2280) = 0;
  *(_OWORD *)(a1 + 2264) = 0u;
  return a1;
}

void sub_1005448E0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 1199) < 0) {
    operator delete(*(void **)(v1 + 1176));
  }
  uint64_t v3 = *(void **)(v1 + 944);
  if (v3)
  {
    *(void *)(v1 + 952) = v3;
    operator delete(v3);
  }
  if (*(char *)(v1 + 503) < 0) {
    operator delete(*(void **)(v1 + 480));
  }
  long long v4 = *(void **)(v1 + 248);
  if (v4)
  {
    *(void *)(v1 + 256) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100544934(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = v6;
  long long v8 = *(_OWORD *)(a2 + 96);
  long long v9 = *(_OWORD *)(a2 + 112);
  long long v10 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x850], 8) = v10;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  long long v11 = *(_OWORD *)(a2 + 176);
  long long v12 = *(_OWORD *)(a2 + 192);
  long long v13 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 220) = *(_OWORD *)(a2 + 220);
  *(_OWORD *)(a1 + 192) = v12;
  *(_OWORD *)(a1 + 20_Block_object_dispose(&STACK[0x850], 8) = v13;
  *(_OWORD *)(a1 + 176) = v11;
  char v14 = (_OWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  uint64_t v15 = a1 + 240;
  sub_1000F4EBC(a1 + 248, (__n128 *)(a2 + 248));
  *(_OWORD *)(v15 + 32) = v14[2];
  long long v16 = v14[3];
  long long v17 = v14[4];
  long long v18 = v14[6];
  *(_OWORD *)(v15 + 80) = v14[5];
  *(_OWORD *)(v15 + 96) = v18;
  *(_OWORD *)(v15 + 4_Block_object_dispose(&STACK[0x850], 8) = v16;
  *(_OWORD *)(v15 + 64) = v17;
  long long v19 = v14[7];
  long long v20 = v14[8];
  long long v21 = v14[10];
  *(_OWORD *)(v15 + 144) = v14[9];
  *(_OWORD *)(v15 + 160) = v21;
  *(_OWORD *)(v15 + 112) = v19;
  *(_OWORD *)(v15 + 12_Block_object_dispose(&STACK[0x850], 8) = v20;
  long long v22 = v14[11];
  long long v23 = v14[12];
  long long v24 = v14[13];
  *(_OWORD *)(v15 + 220) = *(_OWORD *)((char *)v14 + 220);
  *(_OWORD *)(v15 + 192) = v23;
  *(_OWORD *)(v15 + 20_Block_object_dispose(&STACK[0x850], 8) = v24;
  *(_OWORD *)(v15 + 176) = v22;
  long long v25 = (void **)(v15 + 240);
  if (*(char *)(v15 + 263) < 0) {
    operator delete(*v25);
  }
  long long v26 = *(_OWORD *)(a2 + 480);
  *(void *)(v15 + 256) = *(void *)(a2 + 496);
  *(_OWORD *)long long v25 = v26;
  *(unsigned char *)(a2 + 503) = 0;
  *(unsigned char *)(a2 + 480) = 0;
  long long v28 = *(_OWORD *)(a2 + 584);
  long long v27 = *(_OWORD *)(a2 + 600);
  long long v29 = *(_OWORD *)(a2 + 568);
  *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
  *(_OWORD *)(a1 + 56_Block_object_dispose(&STACK[0x850], 8) = v29;
  *(_OWORD *)(a1 + 584) = v28;
  *(_OWORD *)(a1 + 600) = v27;
  long long v31 = *(_OWORD *)(a2 + 520);
  long long v30 = *(_OWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 520) = v31;
  *(_OWORD *)(a1 + 536) = v30;
  long long v32 = *(_OWORD *)(a2 + 616);
  long long v33 = *(_OWORD *)(a2 + 632);
  long long v34 = *(_OWORD *)(a2 + 648);
  *(_DWORD *)(a1 + 664) = *(_DWORD *)(a2 + 664);
  *(_OWORD *)(a1 + 632) = v33;
  *(_OWORD *)(a1 + 64_Block_object_dispose(&STACK[0x850], 8) = v34;
  *(_OWORD *)(a1 + 616) = v32;
  long long v35 = *(_OWORD *)(a2 + 672);
  long long v36 = *(_OWORD *)(a2 + 688);
  long long v37 = *(_OWORD *)(a2 + 720);
  *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
  *(_OWORD *)(a1 + 720) = v37;
  *(_OWORD *)(a1 + 672) = v35;
  *(_OWORD *)(a1 + 68_Block_object_dispose(&STACK[0x850], 8) = v36;
  long long v38 = *(_OWORD *)(a2 + 736);
  long long v39 = *(_OWORD *)(a2 + 752);
  long long v40 = *(_OWORD *)(a2 + 784);
  *(_OWORD *)(a1 + 76_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a2 + 768);
  *(_OWORD *)(a1 + 784) = v40;
  *(_OWORD *)(a1 + 736) = v38;
  *(_OWORD *)(a1 + 752) = v39;
  long long v41 = *(_OWORD *)(a2 + 800);
  long long v42 = *(_OWORD *)(a2 + 816);
  long long v43 = *(_OWORD *)(a2 + 832);
  *(_DWORD *)(a1 + 84_Block_object_dispose(&STACK[0x850], 8) = *(_DWORD *)(a2 + 848);
  *(_OWORD *)(a1 + 816) = v42;
  *(_OWORD *)(a1 + 832) = v43;
  *(_OWORD *)(a1 + 800) = v41;
  *(_OWORD *)(a1 + 856) = *(_OWORD *)(a2 + 856);
  long long v44 = *(_OWORD *)(a2 + 872);
  long long v45 = *(_OWORD *)(a2 + 888);
  long long v46 = *(_OWORD *)(a2 + 904);
  *(_OWORD *)(a1 + 916) = *(_OWORD *)(a2 + 916);
  *(_OWORD *)(a1 + 88_Block_object_dispose(&STACK[0x850], 8) = v45;
  *(_OWORD *)(a1 + 904) = v46;
  *(_OWORD *)(a1 + 872) = v44;
  *(_DWORD *)(a1 + 936) = *(_DWORD *)(a2 + 936);
  sub_1000F4EBC(a1 + 944, (__n128 *)(a2 + 944));
  *(_OWORD *)(a1 + 96_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a2 + 968);
  long long v47 = *(_OWORD *)(a2 + 984);
  long long v48 = *(_OWORD *)(a2 + 1000);
  long long v49 = *(_OWORD *)(a2 + 1032);
  *(_OWORD *)(a1 + 1016) = *(_OWORD *)(a2 + 1016);
  *(_OWORD *)(a1 + 1032) = v49;
  *(_OWORD *)(a1 + 984) = v47;
  *(_OWORD *)(a1 + 1000) = v48;
  long long v50 = *(_OWORD *)(a2 + 1048);
  long long v51 = *(_OWORD *)(a2 + 1064);
  long long v52 = *(_OWORD *)(a2 + 1096);
  *(_OWORD *)(a1 + 1080) = *(_OWORD *)(a2 + 1080);
  *(_OWORD *)(a1 + 1096) = v52;
  *(_OWORD *)(a1 + 104_Block_object_dispose(&STACK[0x850], 8) = v50;
  *(_OWORD *)(a1 + 1064) = v51;
  long long v53 = *(_OWORD *)(a2 + 1112);
  long long v54 = *(_OWORD *)(a2 + 1128);
  long long v55 = *(_OWORD *)(a2 + 1144);
  *(_OWORD *)(a1 + 1156) = *(_OWORD *)(a2 + 1156);
  *(_OWORD *)(a1 + 112_Block_object_dispose(&STACK[0x850], 8) = v54;
  *(_OWORD *)(a1 + 1144) = v55;
  *(_OWORD *)(a1 + 1112) = v53;
  long long v56 = (void **)(a1 + 1176);
  if (*(char *)(a1 + 1199) < 0) {
    operator delete(*v56);
  }
  long long v57 = *(_OWORD *)(a2 + 1176);
  *(void *)(a1 + 1192) = *(void *)(a2 + 1192);
  *(_OWORD *)long long v56 = v57;
  *(unsigned char *)(a2 + 1199) = 0;
  *(unsigned char *)(a2 + 1176) = 0;
  long long v58 = *(_OWORD *)(a2 + 1296);
  long long v59 = *(_OWORD *)(a2 + 1280);
  long long v60 = *(_OWORD *)(a2 + 1264);
  *(_OWORD *)(a1 + 124_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a2 + 1248);
  *(_OWORD *)(a1 + 1264) = v60;
  *(_OWORD *)(a1 + 1280) = v59;
  *(_OWORD *)(a1 + 1296) = v58;
  long long v61 = *(_OWORD *)(a2 + 1232);
  long long v62 = *(_OWORD *)(a2 + 1216);
  *(_OWORD *)(a1 + 1200) = *(_OWORD *)(a2 + 1200);
  *(_OWORD *)(a1 + 1216) = v62;
  *(_OWORD *)(a1 + 1232) = v61;
  long long v63 = *(_OWORD *)(a2 + 1312);
  long long v64 = *(_OWORD *)(a2 + 1328);
  long long v65 = *(_OWORD *)(a2 + 1344);
  *(_DWORD *)(a1 + 1360) = *(_DWORD *)(a2 + 1360);
  *(_OWORD *)(a1 + 1344) = v65;
  *(_OWORD *)(a1 + 132_Block_object_dispose(&STACK[0x850], 8) = v64;
  *(_OWORD *)(a1 + 1312) = v63;
  long long v66 = *(_OWORD *)(a2 + 1368);
  long long v67 = *(_OWORD *)(a2 + 1384);
  long long v68 = *(_OWORD *)(a2 + 1416);
  *(_OWORD *)(a1 + 1400) = *(_OWORD *)(a2 + 1400);
  *(_OWORD *)(a1 + 1416) = v68;
  *(_OWORD *)(a1 + 136_Block_object_dispose(&STACK[0x850], 8) = v66;
  *(_OWORD *)(a1 + 1384) = v67;
  long long v69 = *(_OWORD *)(a2 + 1432);
  long long v70 = *(_OWORD *)(a2 + 1448);
  long long v71 = *(_OWORD *)(a2 + 1480);
  *(_OWORD *)(a1 + 1464) = *(_OWORD *)(a2 + 1464);
  *(_OWORD *)(a1 + 1480) = v71;
  *(_OWORD *)(a1 + 1432) = v69;
  *(_OWORD *)(a1 + 144_Block_object_dispose(&STACK[0x850], 8) = v70;
  long long v72 = *(_OWORD *)(a2 + 1496);
  long long v73 = *(_OWORD *)(a2 + 1512);
  long long v74 = *(_OWORD *)(a2 + 1528);
  *(_DWORD *)(a1 + 1544) = *(_DWORD *)(a2 + 1544);
  *(_OWORD *)(a1 + 1512) = v73;
  *(_OWORD *)(a1 + 152_Block_object_dispose(&STACK[0x850], 8) = v74;
  *(_OWORD *)(a1 + 1496) = v72;
  *(_OWORD *)(a1 + 1552) = *(_OWORD *)(a2 + 1552);
  long long v75 = *(_OWORD *)(a2 + 1568);
  long long v76 = *(_OWORD *)(a2 + 1584);
  long long v77 = *(_OWORD *)(a2 + 1600);
  *(_OWORD *)(a1 + 1612) = *(_OWORD *)(a2 + 1612);
  *(_OWORD *)(a1 + 1600) = v77;
  *(_OWORD *)(a1 + 1584) = v76;
  *(_OWORD *)(a1 + 156_Block_object_dispose(&STACK[0x850], 8) = v75;
  *(_DWORD *)(a1 + 1632) = *(_DWORD *)(a2 + 1632);
  sub_1000F4EBC(a1 + 1640, (__n128 *)(a2 + 1640));
  *(_OWORD *)(a1 + 1664) = *(_OWORD *)(a2 + 1664);
  long long v78 = *(_OWORD *)(a2 + 1680);
  long long v79 = *(_OWORD *)(a2 + 1696);
  long long v80 = *(_OWORD *)(a2 + 1712);
  *(_OWORD *)(a1 + 172_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a2 + 1728);
  *(_OWORD *)(a1 + 1712) = v80;
  *(_OWORD *)(a1 + 1696) = v79;
  *(_OWORD *)(a1 + 1680) = v78;
  long long v81 = *(_OWORD *)(a2 + 1744);
  long long v82 = *(_OWORD *)(a2 + 1760);
  long long v83 = *(_OWORD *)(a2 + 1776);
  *(_OWORD *)(a1 + 1792) = *(_OWORD *)(a2 + 1792);
  *(_OWORD *)(a1 + 1776) = v83;
  *(_OWORD *)(a1 + 1760) = v82;
  *(_OWORD *)(a1 + 1744) = v81;
  long long v84 = *(_OWORD *)(a2 + 1808);
  long long v85 = *(_OWORD *)(a2 + 1824);
  long long v86 = *(_OWORD *)(a2 + 1840);
  *(_OWORD *)(a1 + 1852) = *(_OWORD *)(a2 + 1852);
  *(_OWORD *)(a1 + 1840) = v86;
  *(_OWORD *)(a1 + 1824) = v85;
  *(_OWORD *)(a1 + 180_Block_object_dispose(&STACK[0x850], 8) = v84;
  int v87 = (void **)(a1 + 1872);
  if (*(char *)(a1 + 1895) < 0) {
    operator delete(*v87);
  }
  long long v88 = *(_OWORD *)(a2 + 1872);
  *(void *)(a1 + 188_Block_object_dispose(&STACK[0x850], 8) = *(void *)(a2 + 1888);
  *(_OWORD *)int v87 = v88;
  *(unsigned char *)(a2 + 1895) = 0;
  *(unsigned char *)(a2 + 1872) = 0;
  long long v90 = *(_OWORD *)(a2 + 1976);
  long long v89 = *(_OWORD *)(a2 + 1992);
  long long v91 = *(_OWORD *)(a2 + 1960);
  *(_OWORD *)(a1 + 1944) = *(_OWORD *)(a2 + 1944);
  *(_OWORD *)(a1 + 1960) = v91;
  *(_OWORD *)(a1 + 1976) = v90;
  *(_OWORD *)(a1 + 1992) = v89;
  long long v93 = *(_OWORD *)(a2 + 1912);
  long long v92 = *(_OWORD *)(a2 + 1928);
  *(_OWORD *)(a1 + 1896) = *(_OWORD *)(a2 + 1896);
  *(_OWORD *)(a1 + 1912) = v93;
  *(_OWORD *)(a1 + 192_Block_object_dispose(&STACK[0x850], 8) = v92;
  long long v94 = *(_OWORD *)(a2 + 2008);
  long long v95 = *(_OWORD *)(a2 + 2024);
  long long v96 = *(_OWORD *)(a2 + 2040);
  *(_DWORD *)(a1 + 2056) = *(_DWORD *)(a2 + 2056);
  *(_OWORD *)(a1 + 2024) = v95;
  *(_OWORD *)(a1 + 2040) = v96;
  *(_OWORD *)(a1 + 200_Block_object_dispose(&STACK[0x850], 8) = v94;
  long long v97 = *(_OWORD *)(a2 + 2064);
  long long v98 = *(_OWORD *)(a2 + 2080);
  long long v99 = *(_OWORD *)(a2 + 2096);
  *(_OWORD *)(a1 + 2112) = *(_OWORD *)(a2 + 2112);
  *(_OWORD *)(a1 + 2096) = v99;
  *(_OWORD *)(a1 + 2080) = v98;
  *(_OWORD *)(a1 + 2064) = v97;
  long long v100 = *(_OWORD *)(a2 + 2128);
  long long v101 = *(_OWORD *)(a2 + 2144);
  long long v102 = *(_OWORD *)(a2 + 2160);
  *(_OWORD *)(a1 + 2176) = *(_OWORD *)(a2 + 2176);
  *(_OWORD *)(a1 + 2160) = v102;
  *(_OWORD *)(a1 + 2144) = v101;
  *(_OWORD *)(a1 + 212_Block_object_dispose(&STACK[0x850], 8) = v100;
  long long v103 = *(_OWORD *)(a2 + 2192);
  long long v104 = *(_OWORD *)(a2 + 2208);
  long long v105 = *(_OWORD *)(a2 + 2224);
  *(_DWORD *)(a1 + 2240) = *(_DWORD *)(a2 + 2240);
  *(_OWORD *)(a1 + 2224) = v105;
  *(_OWORD *)(a1 + 220_Block_object_dispose(&STACK[0x850], 8) = v104;
  *(_OWORD *)(a1 + 2192) = v103;
  long long v106 = *(_OWORD *)(a2 + 2248);
  long long v107 = *(_OWORD *)(a2 + 2264);
  *(_WORD *)(a1 + 2280) = *(_WORD *)(a2 + 2280);
  *(_OWORD *)(a1 + 224_Block_object_dispose(&STACK[0x850], 8) = v106;
  *(_OWORD *)(a1 + 2264) = v107;
  return a1;
}

uint64_t sub_100544D94(uint64_t a1, uint64_t a2, _OWORD *a3, double a4)
{
  double v7 = a4 - *(double *)(a1 + 2264);
  if (!*(unsigned char *)(a1 + 2280) || (v7 > 0.0 ? (BOOL v8 = v7 < 2.0) : (BOOL v8 = 0), !v8))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BA760);
    }
    long long v10 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      int v11 = *(unsigned __int8 *)(a1 + 2280);
      *(_DWORD *)std::string buf = 67240448;
      LODWORD(v61) = v11;
      WORD2(v61) = 2050;
      *(double *)((char *)&v61 + 6) = v7;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CellFlow, updateCellRefreshResults, fWaitForNewCellAfterAirplaneMode, %{public}d, airplaneModeDisableAgeSecs, %{public}f", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BA760);
      }
      long long v57 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellLocationRefresh::updateCellRefreshResults(const CLCell &, const CLDaemonLocation &, CFTimeInterval)", "%s\n", v57);
      if (v57 != (char *)buf) {
        free(v57);
      }
    }
LABEL_19:
    if (*(unsigned char *)(a1 + 2281))
    {
      BOOL v12 = sub_10011FF34(a2, a1 + 160);
      if (v12) {
        BOOL v12 = sub_100124E04((uint64_t)a3, a1);
      }
      *(unsigned char *)(a1 + 2281) = v12;
      uint64_t v13 = !v12;
    }
    else
    {
      uint64_t v13 = 1;
      *(unsigned char *)(a1 + 2281) = 1;
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BA760);
    }
    char v14 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      int v15 = *(unsigned __int8 *)(a1 + 2281);
      BOOL v16 = sub_10011FF34(a2, a1 + 160);
      BOOL v17 = sub_100545650((uint64_t)a3, a1);
      *(_DWORD *)std::string buf = 67240960;
      LODWORD(v61) = v15;
      WORD2(v61) = 1026;
      *(_DWORD *)((char *)&v61 + 6) = v13;
      WORD5(v61) = 1026;
      HIDWORD(v61) = v16;
      __int16 v62 = 1026;
      BOOL v63 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CellFlow, skipnotify, %{public}d, retval, %{public}d, cell, %{public}d, latlon, %{public}d,", buf, 0x1Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BA760);
      }
      sub_10011FF34(a2, a1 + 160);
      sub_100545650((uint64_t)a3, a1);
      long long v56 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellLocationRefresh::updateCellRefreshResults(const CLCell &, const CLDaemonLocation &, CFTimeInterval)", "%s\n", v56);
      if (v56 != (char *)buf) {
        free(v56);
      }
    }
    *(_OWORD *)(a1 + 160) = *(_OWORD *)a2;
    long long v18 = *(_OWORD *)(a2 + 16);
    long long v19 = *(_OWORD *)(a2 + 32);
    long long v20 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 220) = *(_OWORD *)(a2 + 60);
    *(_OWORD *)(a1 + 192) = v19;
    *(_OWORD *)(a1 + 20_Block_object_dispose(&STACK[0x850], 8) = v20;
    *(_OWORD *)(a1 + 176) = v18;
    *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 80);
    if (a1 + 160 != a2) {
      sub_1000FB43C((char *)(a1 + 248), *(char **)(a2 + 88), *(void *)(a2 + 96), (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 2);
    }
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 112);
    long long v21 = *(_OWORD *)(a2 + 128);
    long long v22 = *(_OWORD *)(a2 + 144);
    long long v23 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 336) = v23;
    *(_OWORD *)(a1 + 28_Block_object_dispose(&STACK[0x850], 8) = v21;
    *(_OWORD *)(a1 + 304) = v22;
    long long v24 = *(_OWORD *)(a2 + 192);
    long long v25 = *(_OWORD *)(a2 + 208);
    long long v26 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 400) = v26;
    *(_OWORD *)(a1 + 352) = v24;
    *(_OWORD *)(a1 + 36_Block_object_dispose(&STACK[0x850], 8) = v25;
    long long v27 = *(_OWORD *)(a2 + 256);
    long long v28 = *(_OWORD *)(a2 + 272);
    long long v29 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 460) = *(_OWORD *)(a2 + 300);
    *(_OWORD *)(a1 + 432) = v28;
    *(_OWORD *)(a1 + 44_Block_object_dispose(&STACK[0x850], 8) = v29;
    *(_OWORD *)(a1 + 416) = v27;
    std::string::operator=((std::string *)(a1 + 480), (const std::string *)(a2 + 320));
    long long v31 = *(_OWORD *)(a2 + 360);
    long long v30 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 520) = v31;
    *(_OWORD *)(a1 + 536) = v30;
    long long v32 = *(_OWORD *)(a2 + 440);
    long long v34 = *(_OWORD *)(a2 + 392);
    long long v33 = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 424);
    *(_OWORD *)(a1 + 600) = v32;
    *(_OWORD *)(a1 + 552) = v34;
    *(_OWORD *)(a1 + 56_Block_object_dispose(&STACK[0x850], 8) = v33;
    long long v36 = *(_OWORD *)(a2 + 472);
    long long v35 = *(_OWORD *)(a2 + 488);
    long long v37 = *(_OWORD *)(a2 + 456);
    *(_DWORD *)(a1 + 664) = *(_DWORD *)(a2 + 504);
    *(_OWORD *)(a1 + 632) = v36;
    *(_OWORD *)(a1 + 64_Block_object_dispose(&STACK[0x850], 8) = v35;
    *(_OWORD *)(a1 + 616) = v37;
    long long v38 = *(_OWORD *)(a2 + 640);
    long long v39 = *(_OWORD *)(a2 + 656);
    long long v40 = *(_OWORD *)(a2 + 672);
    *(_DWORD *)(a1 + 84_Block_object_dispose(&STACK[0x850], 8) = *(_DWORD *)(a2 + 688);
    *(_OWORD *)(a1 + 816) = v39;
    *(_OWORD *)(a1 + 832) = v40;
    *(_OWORD *)(a1 + 800) = v38;
    long long v41 = *(_OWORD *)(a2 + 576);
    long long v42 = *(_OWORD *)(a2 + 592);
    long long v43 = *(_OWORD *)(a2 + 624);
    *(_OWORD *)(a1 + 76_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a2 + 608);
    *(_OWORD *)(a1 + 784) = v43;
    *(_OWORD *)(a1 + 736) = v41;
    *(_OWORD *)(a1 + 752) = v42;
    long long v44 = *(_OWORD *)(a2 + 512);
    long long v45 = *(_OWORD *)(a2 + 528);
    long long v46 = *(_OWORD *)(a2 + 560);
    *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 720) = v46;
    *(_OWORD *)(a1 + 672) = v44;
    *(_OWORD *)(a1 + 68_Block_object_dispose(&STACK[0x850], 8) = v45;
    long long v47 = a3[1];
    *(_OWORD *)a1 = *a3;
    *(_OWORD *)(a1 + 16) = v47;
    long long v48 = a3[2];
    long long v49 = a3[3];
    long long v50 = a3[5];
    *(_OWORD *)(a1 + 64) = a3[4];
    *(_OWORD *)(a1 + 80) = v50;
    *(_OWORD *)(a1 + 32) = v48;
    *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = v49;
    long long v51 = a3[6];
    long long v52 = a3[7];
    long long v53 = a3[8];
    *(_OWORD *)(a1 + 140) = *(_OWORD *)((char *)a3 + 140);
    *(_OWORD *)(a1 + 112) = v52;
    *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x850], 8) = v53;
    *(_OWORD *)(a1 + 96) = v51;
    return v13;
  }
  if (sub_10142E1E8(a2, a1 + 1552))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BA760);
    }
    long long v9 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134349056;
      *(double *)&long long v61 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CellFlow, updateCellRefreshResults, using new cell after airplane mode, %{public}f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BA760);
      }
      long long v58 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellLocationRefresh::updateCellRefreshResults(const CLCell &, const CLDaemonLocation &, CFTimeInterval)", "%s\n", v58);
      if (v58 != (char *)buf) {
        free(v58);
      }
    }
    *(unsigned char *)(a1 + 2280) = 0;
    goto LABEL_19;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BA760);
  }
  long long v54 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 134349056;
    *(double *)&long long v61 = v7;
    _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "CellFlow, updateCellRefreshResults, ignoring cell from before airplane mode, %{public}f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BA760);
    }
    long long v59 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLCellLocationRefresh::updateCellRefreshResults(const CLCell &, const CLDaemonLocation &, CFTimeInterval)", "%s\n", v59);
    if (v59 != (char *)buf) {
      free(v59);
    }
  }
  AnalyticsSendEventLazy();
  return 0;
}

NSDictionary *sub_1005455CC(uint64_t a1)
{
  CFStringRef v2 = @"skipPreviousCellAfterAirplaneModeDisableAgeSecs";
  uint64_t v3 = +[NSNumber numberWithDouble:*(double *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:&v3 forKeys:&v2 count:1];
}

BOOL sub_100545650(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 4) == *(double *)(a2 + 4)
      && *(double *)(a1 + 28) == *(double *)(a2 + 28)
      && *(double *)(a1 + 20) == *(double *)(a2 + 20)
      && *(double *)(a1 + 36) == *(double *)(a2 + 36);
}

uint64_t sub_1005456A4(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  double v6 = sub_10016C458();

  return sub_100544D94(a1, a2, a3, v6);
}

unsigned char *sub_1005456F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  if (*(unsigned char *)(a1 + 160))
  {
    long long v5 = *(_OWORD *)(a1 + 208);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 192);
    *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x850], 8) = v5;
    *(_OWORD *)(a2 + 60) = *(_OWORD *)(a1 + 220);
    long long v6 = *(_OWORD *)(a1 + 176);
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 160);
    *(_OWORD *)(a2 + 16) = v6;
    *(_DWORD *)(a2 + 80) = *(_DWORD *)(a1 + 240);
    *(void *)(a2 + 8_Block_object_dispose(&STACK[0x850], 8) = 0;
    double v7 = *(const void **)(a1 + 248);
    uint64_t v8 = *(void *)(a1 + 256);
    *(void *)(a2 + 96) = 0;
    *(void *)(a2 + 104) = 0;
    sub_10010F834((void *)(a2 + 88), v7, v8, (v8 - (uint64_t)v7) >> 2);
    long long v9 = *(_OWORD *)(a1 + 448);
    *(_OWORD *)(a2 + 272) = *(_OWORD *)(a1 + 432);
    *(_OWORD *)(a2 + 28_Block_object_dispose(&STACK[0x850], 8) = v9;
    *(_OWORD *)(a2 + 300) = *(_OWORD *)(a1 + 460);
    long long v10 = *(_OWORD *)(a1 + 384);
    *(_OWORD *)(a2 + 20_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a1 + 368);
    *(_OWORD *)(a2 + 224) = v10;
    long long v11 = *(_OWORD *)(a1 + 416);
    *(_OWORD *)(a2 + 240) = *(_OWORD *)(a1 + 400);
    *(_OWORD *)(a2 + 256) = v11;
    long long v12 = *(_OWORD *)(a1 + 320);
    *(_OWORD *)(a2 + 144) = *(_OWORD *)(a1 + 304);
    *(_OWORD *)(a2 + 160) = v12;
    long long v13 = *(_OWORD *)(a1 + 352);
    *(_OWORD *)(a2 + 176) = *(_OWORD *)(a1 + 336);
    *(_OWORD *)(a2 + 192) = v13;
    long long v14 = *(_OWORD *)(a1 + 288);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 272);
    *(_OWORD *)(a2 + 12_Block_object_dispose(&STACK[0x850], 8) = v14;
    double result = (unsigned char *)(a2 + 320);
    if (*(char *)(a1 + 503) < 0)
    {
      double result = sub_1000DC48C(result, *(void **)(a1 + 480), *(void *)(a1 + 488));
    }
    else
    {
      *(_OWORD *)double result = *(_OWORD *)(a1 + 480);
      *(void *)(a2 + 336) = *(void *)(a1 + 496);
    }
    *(_DWORD *)(a2 + 504) = *(_DWORD *)(a1 + 664);
    long long v19 = *(_OWORD *)(a1 + 648);
    *(_OWORD *)(a2 + 472) = *(_OWORD *)(a1 + 632);
    *(_OWORD *)(a2 + 48_Block_object_dispose(&STACK[0x850], 8) = v19;
    long long v20 = *(_OWORD *)(a1 + 584);
    *(_OWORD *)(a2 + 40_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a1 + 568);
    *(_OWORD *)(a2 + 424) = v20;
    long long v21 = *(_OWORD *)(a1 + 616);
    *(_OWORD *)(a2 + 440) = *(_OWORD *)(a1 + 600);
    *(_OWORD *)(a2 + 456) = v21;
    long long v22 = *(_OWORD *)(a1 + 520);
    *(_OWORD *)(a2 + 344) = *(_OWORD *)(a1 + 504);
    *(_OWORD *)(a2 + 360) = v22;
    long long v23 = *(_OWORD *)(a1 + 552);
    *(_OWORD *)(a2 + 376) = *(_OWORD *)(a1 + 536);
    *(_OWORD *)(a2 + 392) = v23;
    long long v24 = *(_OWORD *)(a1 + 816);
    *(_OWORD *)(a2 + 640) = *(_OWORD *)(a1 + 800);
    *(_OWORD *)(a2 + 656) = v24;
    *(_OWORD *)(a2 + 672) = *(_OWORD *)(a1 + 832);
    *(_DWORD *)(a2 + 68_Block_object_dispose(&STACK[0x850], 8) = *(_DWORD *)(a1 + 848);
    long long v25 = *(_OWORD *)(a1 + 752);
    *(_OWORD *)(a2 + 576) = *(_OWORD *)(a1 + 736);
    *(_OWORD *)(a2 + 592) = v25;
    long long v26 = *(_OWORD *)(a1 + 784);
    *(_OWORD *)(a2 + 60_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a1 + 768);
    *(_OWORD *)(a2 + 624) = v26;
    long long v27 = *(_OWORD *)(a1 + 688);
    *(_OWORD *)(a2 + 512) = *(_OWORD *)(a1 + 672);
    *(_OWORD *)(a2 + 52_Block_object_dispose(&STACK[0x850], 8) = v27;
    long long v28 = *(_OWORD *)(a1 + 704);
    long long v29 = *(_OWORD *)(a1 + 720);
LABEL_16:
    *(_OWORD *)(a2 + 544) = v28;
    *(_OWORD *)(a2 + 560) = v29;
    return result;
  }
  if (*(unsigned char *)(a1 + 856))
  {
    if (a3 >= 0.0)
    {
      double v16 = *(double *)(a1 + 2248);
      if (v16 >= 0.0)
      {
        double v17 = a3 - v16;
        if (v17 >= 0.0 && v17 <= 60.0)
        {
          long long v30 = *(_OWORD *)(a1 + 904);
          *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 888);
          *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x850], 8) = v30;
          *(_OWORD *)(a2 + 60) = *(_OWORD *)(a1 + 916);
          long long v31 = *(_OWORD *)(a1 + 872);
          *(_OWORD *)a2 = *(_OWORD *)(a1 + 856);
          *(_OWORD *)(a2 + 16) = v31;
          *(_DWORD *)(a2 + 80) = *(_DWORD *)(a1 + 936);
          *(void *)(a2 + 8_Block_object_dispose(&STACK[0x850], 8) = 0;
          long long v32 = *(const void **)(a1 + 944);
          uint64_t v33 = *(void *)(a1 + 952);
          *(void *)(a2 + 96) = 0;
          *(void *)(a2 + 104) = 0;
          sub_10010F834((void *)(a2 + 88), v32, v33, (v33 - (uint64_t)v32) >> 2);
          long long v34 = *(_OWORD *)(a1 + 1144);
          *(_OWORD *)(a2 + 272) = *(_OWORD *)(a1 + 1128);
          *(_OWORD *)(a2 + 28_Block_object_dispose(&STACK[0x850], 8) = v34;
          *(_OWORD *)(a2 + 300) = *(_OWORD *)(a1 + 1156);
          long long v35 = *(_OWORD *)(a1 + 1080);
          *(_OWORD *)(a2 + 20_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a1 + 1064);
          *(_OWORD *)(a2 + 224) = v35;
          long long v36 = *(_OWORD *)(a1 + 1112);
          *(_OWORD *)(a2 + 240) = *(_OWORD *)(a1 + 1096);
          *(_OWORD *)(a2 + 256) = v36;
          long long v37 = *(_OWORD *)(a1 + 1016);
          *(_OWORD *)(a2 + 144) = *(_OWORD *)(a1 + 1000);
          *(_OWORD *)(a2 + 160) = v37;
          long long v38 = *(_OWORD *)(a1 + 1048);
          *(_OWORD *)(a2 + 176) = *(_OWORD *)(a1 + 1032);
          *(_OWORD *)(a2 + 192) = v38;
          long long v39 = *(_OWORD *)(a1 + 984);
          *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 968);
          *(_OWORD *)(a2 + 12_Block_object_dispose(&STACK[0x850], 8) = v39;
          double result = (unsigned char *)(a2 + 320);
          if (*(char *)(a1 + 1199) < 0)
          {
            double result = sub_1000DC48C(result, *(void **)(a1 + 1176), *(void *)(a1 + 1184));
          }
          else
          {
            *(_OWORD *)double result = *(_OWORD *)(a1 + 1176);
            *(void *)(a2 + 336) = *(void *)(a1 + 1192);
          }
          long long v40 = *(_OWORD *)(a1 + 1312);
          long long v41 = *(_OWORD *)(a1 + 1344);
          *(_OWORD *)(a2 + 472) = *(_OWORD *)(a1 + 1328);
          *(_OWORD *)(a2 + 48_Block_object_dispose(&STACK[0x850], 8) = v41;
          *(_DWORD *)(a2 + 504) = *(_DWORD *)(a1 + 1360);
          long long v42 = *(_OWORD *)(a1 + 1248);
          long long v43 = *(_OWORD *)(a1 + 1280);
          *(_OWORD *)(a2 + 40_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a1 + 1264);
          *(_OWORD *)(a2 + 424) = v43;
          *(_OWORD *)(a2 + 440) = *(_OWORD *)(a1 + 1296);
          *(_OWORD *)(a2 + 456) = v40;
          long long v44 = *(_OWORD *)(a1 + 1216);
          *(_OWORD *)(a2 + 344) = *(_OWORD *)(a1 + 1200);
          *(_OWORD *)(a2 + 360) = v44;
          *(_OWORD *)(a2 + 376) = *(_OWORD *)(a1 + 1232);
          *(_OWORD *)(a2 + 392) = v42;
          long long v45 = *(_OWORD *)(a1 + 1512);
          *(_OWORD *)(a2 + 640) = *(_OWORD *)(a1 + 1496);
          *(_OWORD *)(a2 + 656) = v45;
          *(_OWORD *)(a2 + 672) = *(_OWORD *)(a1 + 1528);
          *(_DWORD *)(a2 + 68_Block_object_dispose(&STACK[0x850], 8) = *(_DWORD *)(a1 + 1544);
          long long v46 = *(_OWORD *)(a1 + 1448);
          *(_OWORD *)(a2 + 576) = *(_OWORD *)(a1 + 1432);
          *(_OWORD *)(a2 + 592) = v46;
          long long v47 = *(_OWORD *)(a1 + 1480);
          *(_OWORD *)(a2 + 60_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a1 + 1464);
          *(_OWORD *)(a2 + 624) = v47;
          long long v48 = *(_OWORD *)(a1 + 1384);
          *(_OWORD *)(a2 + 512) = *(_OWORD *)(a1 + 1368);
          *(_OWORD *)(a2 + 52_Block_object_dispose(&STACK[0x850], 8) = v48;
          long long v28 = *(_OWORD *)(a1 + 1400);
          long long v29 = *(_OWORD *)(a1 + 1416);
          goto LABEL_16;
        }
      }
    }
  }

  return (unsigned char *)sub_10142E1B8(a2);
}

void sub_1005459EC(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 96) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_100545A0C(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

unsigned char *sub_100545A3C(unsigned char *__dst, unsigned char *a2, size_t a3)
{
  if (a3 && ((*a2 - 1) > 3u ? (uint64_t v4 = 0) : (uint64_t v4 = qword_101D23048[(char)(*a2 - 1)]), v4 == a3)) {
    memcpy(__dst, a2, a3);
  }
  else {
    *__dst = -1;
  }
  return __dst;
}

unsigned char *sub_100545AAC(unsigned char *result, uint64_t a2)
{
  switch(*result)
  {
    case 1:
      double result = (unsigned char *)(*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a2 + 16))(a2, result);
      break;
    case 2:
      double result = (unsigned char *)(*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a2 + 24))(a2, result);
      break;
    case 3:
      double result = (unsigned char *)(*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a2 + 32))(a2, result);
      break;
    case 4:
      double result = (unsigned char *)(*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a2 + 40))(a2, result);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100545BA4(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = off_1022BA790;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = off_1022BA928;
  *(void *)(a1 + 16) = off_1022BA968;
  *(void *)(a1 + 24) = off_1022BA998;
  *(void *)(a1 + 32) = off_1022BA9D0;
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = *a3;
  uint64_t v4 = a3[1];
  *(void *)(a1 + 56) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 64) = a1 + 72;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = a1 + 120;
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 16_Block_object_dispose(&STACK[0x850], 8) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_WORD *)(a1 + 18_Block_object_dispose(&STACK[0x850], 8) = 257;
  *(void *)(a1 + 192) = 0x4FFFFFFFFLL;
  *(_DWORD *)(a1 + 200) = 2;
  long long v5 = (int *)(a1 + 200);
  *(void *)(a1 + 20_Block_object_dispose(&STACK[0x850], 8) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 220) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 22_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 236) = 25;
  long long v6 = (int *)(a1 + 236);
  *(void *)(a1 + 24_Block_object_dispose(&STACK[0x850], 8) = 0x40EFA40000000000;
  double v7 = (uint64_t *)(a1 + 248);
  *(_WORD *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  sub_1005467B0(a1, a1 + 272);
  Init = (CLMotionActivity *)CLMotionActivity::getInit((uint64_t *)(a1 + 392), v8);
  long long v10 = (CLMotionActivity *)CLMotionActivity::getInit((uint64_t *)(a1 + 528), Init);
  CLMotionActivity::getInit((uint64_t *)(a1 + 664), v10);
  *(_WORD *)(a1 + 800) = 257;
  *(unsigned char *)(a1 + 802) = 0;
  *(void *)(a1 + 80_Block_object_dispose(&STACK[0x850], 8) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 816) = 0xFFFF;
  *(void *)(a1 + 82_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)(a1 + 820) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 836) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 852) = _Q1;
  *(_OWORD *)(a1 + 86_Block_object_dispose(&STACK[0x850], 8) = _Q1;
  *(_OWORD *)(a1 + 884) = _Q1;
  *(_DWORD *)(a1 + 900) = 0;
  *(void *)(a1 + 904) = 0xBFF0000000000000;
  *(void *)(a1 + 920) = 0;
  *(void *)(a1 + 912) = 0;
  *(_DWORD *)(a1 + 92_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)(a1 + 932) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 940) = 0x7FFFFFFF;
  *(void *)(a1 + 952) = 0;
  *(void *)(a1 + 944) = 0;
  *(unsigned char *)(a1 + 96_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)(a1 + 960) = 0;
  *(_WORD *)(a1 + 972) = 0;
  *(unsigned char *)(a1 + 974) = 0;
  *(int64x2_t *)(a1 + 976) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 992) = 0;
  *(double *)(a1 + 100_Block_object_dispose(&STACK[0x850], 8) = (*(double (**)(uint64_t))(*(void *)a1 + 64))(a1);
  *(void *)(a1 + 1032) = 0;
  *(void *)(a1 + 1024) = 0;
  *(void *)(a1 + 1016) = a1 + 1024;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(unsigned char *)(a1 + 1072) = 0;
  sub_1004CD168(a1 + 1080, a1);
  *(_WORD *)(a1 + 120_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(unsigned char *)(a1 + 1210) = 0;
  memset(buf, 0, sizeof(buf));
  int v51 = 1065353216;
  sub_10054E1A4(out_token, 0xAuLL, (uint64_t)buf);
  double v16 = (int *)(a1 + 196);
  sub_10054E31C((void **)(a1 + 88));
  *(_OWORD *)(a1 + 8_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)out_token;
  *(void *)(a1 + 104) = v48;
  uint64_t v48 = 0;
  memset(out_token, 0, sizeof(out_token));
  long long v49 = (void **)out_token;
  sub_10054E120(&v49);
  sub_1000D7D80((uint64_t)buf);
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 120))(*(void *)(a1 + 48), a1 + 196) & 1) == 0) {
    *double v16 = 4;
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 128))(*(void *)(a1 + 48), a1 + 200) & 1) == 0) {
    *long long v5 = 2;
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 152))(*(void *)(a1 + 48), a1 + 236) & 1) == 0) {
    *long long v6 = 25;
  }
  double v17 = (unsigned char *)(a1 + 1072);
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 144))(*(void *)(a1 + 48), a1 + 248) & 1) == 0) {
    *double v7 = 0x40EFA40000000000;
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 136))(*(void *)(a1 + 48), a1 + 1072) & 1) == 0) {
    *double v17 = 0;
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 160))(*(void *)(a1 + 48), a1 + 240) & 1) == 0) {
    *(_DWORD *)(a1 + 240) = 300;
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 168))(*(void *)(a1 + 48), a1 + 1000) & 1) == 0) {
    *(void *)(a1 + 1000) = 0x40D5180000000000;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022BABA0);
  }
  long long v18 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    int v19 = *v17;
    int v20 = *v16;
    int v21 = *v5;
    uint64_t v22 = *v7;
    int v23 = *v6;
    *(_DWORD *)std::string buf = 68290307;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 1025;
    *(_DWORD *)&buf[20] = v19;
    *(_WORD *)&unsigned char buf[24] = 1025;
    *(_DWORD *)&buf[26] = v20;
    *(_WORD *)&buf[30] = 1025;
    int v51 = v21;
    __int16 v52 = 2049;
    uint64_t v53 = v22;
    __int16 v54 = 1025;
    int v55 = v23;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"HarvestController-Contruct\", \"isHarvestAllLocations\":%{private}hhd, \"highThermalThreshold\":%{private}d, \"lowThermalThreshold\":%{private}d, \"maxHarvestAge_s\":\"%{private}.09f\", \"maxHarvestPointsPer\":%{private}d}", buf, 0x34u);
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), a1);
  (*(void (**)(void, void))(**(void **)(a1 + 48) + 200))(*(void *)(a1 + 48), 0);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 184))(*(void *)(a1 + 48), 13);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 184))(*(void *)(a1 + 48), 15);
  uint64_t v24 = *(void *)(a1 + 48);
  sub_1000B0164(buf, kCTCallStatusChangeNotification);
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v24 + 272))(v24, buf);
  uint64_t v25 = sub_1000A6958();
  sub_1000D29FC(v25, @"PrivateMode", (BOOL *)(a1 + 185));
  double v26 = (*(double (**)(uint64_t))(*(void *)a1 + 64))(a1);
  uint64_t v27 = sub_1000A6958();
  long long v28 = (double *)(a1 + 992);
  if (!sub_1000A6A10(v27, @"LastPrune", (void *)(a1 + 992)) || (double v29 = *v28, *v28 < 1.0))
  {
    double *v28 = v26;
    double v29 = v26;
  }
  double v30 = *(double *)(a1 + 248) - vabdd_f64(v26, v29);
  if (v30 >= 3.0) {
    double v31 = v30;
  }
  else {
    double v31 = 3.0;
  }
  uint64_t v32 = *(void *)(a1 + 48);
  sub_100134750(buf, "HarvestPruneTimer");
  (*(void (**)(int *__return_ptr, uint64_t, uint8_t *, void (*)(uint64_t, uint64_t), uint64_t, id, double, double))(*(void *)v32 + 264))(out_token, v32, buf, sub_100546848, a1, [*(id *)(a1 + 40) silo], v26 + v31, *(double *)(a1 + 248));
  long long v33 = *(_OWORD *)out_token;
  memset(out_token, 0, sizeof(out_token));
  long long v34 = *(std::__shared_weak_count **)(a1 + 1048);
  *(_OWORD *)(a1 + 1040) = v33;
  if (v34)
  {
    sub_1000DB0A0(v34);
    if (*(void *)&out_token[2]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&out_token[2]);
    }
  }
  if ((char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v35 = *(void *)(a1 + 48);
  sub_100134750(buf, "HarvestUnlockTimer");
  (*(void (**)(int *__return_ptr, uint64_t, uint8_t *, void (*)(uint64_t, uint64_t), uint64_t, id, double))(*(void *)v35 + 264))(out_token, v35, buf, sub_100546A0C, a1, [*(id *)(a1 + 40) silo], v26 + *(double *)(a1 + 1000));
  long long v36 = *(_OWORD *)out_token;
  memset(out_token, 0, sizeof(out_token));
  long long v37 = *(std::__shared_weak_count **)(a1 + 1064);
  *(_OWORD *)(a1 + 1056) = v36;
  if (v37)
  {
    sub_1000DB0A0(v37);
    if (*(void *)&out_token[2]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&out_token[2]);
    }
  }
  if ((char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022BABA0);
  }
  long long v38 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 68289283;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2049;
    *(double *)&buf[20] = v31;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#pruneTimer\", \"nextPruneTime_s\":\"%{private}.09f\"}", buf, 0x1Cu);
  }
  *(void *)(a1 + 20_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(_WORD *)(a1 + 216) = 0;
  sub_100103240();
  if (sub_10073E30C())
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    long long v39 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"registering for internal notifications\"}", buf, 0x12u);
    }
    *(_DWORD *)std::string buf = 0;
    long long v40 = [objc_msgSend(*(id *)(a1 + 40), "silo") queue];
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100546BD0;
    handler[3] = &unk_1022BA9F0;
    handler[4] = a1;
    notify_register_dispatch("CLHarvestController-upload", (int *)buf, v40, handler);
    out_token[0] = 0;
    long long v41 = [[*(id *)(a1 + 40) silo] queue];
    v45[0] = _NSConcreteStackBlock;
    v45[1] = 3221225472;
    v45[2] = sub_100546DB8;
    v45[3] = &unk_1022BA9F0;
    void v45[4] = a1;
    notify_register_dispatch("CLHarvestController-prune", out_token, v41, v45);
  }
  *(double *)(a1 + 384) = v26;
  sub_100546EEC((unsigned __int8 *)a1);
  uint64_t v43 = qword_10247B350;
  uint64_t v42 = qword_10247B358;
  while (v43 != v42)
  {
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 56))(*(void *)(a1 + 48), v43);
    v43 += 24;
  }
  sub_100546FCC(a1);
  return a1;
}

void sub_1005466A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char **a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  long long v36 = *(void **)(v34 + 1184);
  if (v36)
  {
    *(void *)(v34 + 1192) = v36;
    operator delete(v36);
  }
  long long v37 = *(std::__shared_weak_count **)(v34 + 1064);
  if (v37) {
    sub_1000DB0A0(v37);
  }
  long long v38 = *(std::__shared_weak_count **)(v34 + 1048);
  if (v38) {
    sub_1000DB0A0(v38);
  }
  sub_1000DB264(v34 + 1016, *a10);
  sub_1005471B8(a11);
  long long v39 = *(std::__shared_weak_count **)(v34 + 176);
  if (v39) {
    sub_1000DB0A0(v39);
  }
  long long v40 = *(std::__shared_weak_count **)(v34 + 160);
  if (v40) {
    sub_1000DB0A0(v40);
  }
  long long v41 = *(std::__shared_weak_count **)(v34 + 144);
  if (v41) {
    sub_1000DB0A0(v41);
  }
  sub_1000F5BB0(a13, *(void **)(v34 + 120));
  std::string __p = a12;
  sub_10054E120((void ***)&__p);
  sub_10054E0C0(a14, *(void **)(v34 + 72));
  uint64_t v42 = *(std::__shared_weak_count **)(v34 + 56);
  if (v42) {
    sub_1000DB0A0(v42);
  }
  _Unwind_Resume(a1);
}

double sub_1005467B0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + _Block_object_dispose(&STACK[0x850], 8) = 0xBFF0000000000000;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x850], 8) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 76) = 0u;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(unsigned char *)a2 = 1;
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 16))(&v4);
  double result = *(double *)&v4;
  *(_OWORD *)(a2 + 40) = v4;
  *(void *)(a2 + 56) = v5;
  return result;
}

void sub_100546834(_Unwind_Exception *a1)
{
  sub_1005471B8(v1);
  _Unwind_Resume(a1);
}

void sub_100546848(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 40), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BABC0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v6 = 1;
    uint64_t v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHarvestController::onPruneTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BABC0);
    }
    long long v4 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v8 = 0;
      __int16 v9 = 2082;
      long long v10 = "";
      __int16 v11 = 2082;
      long long v12 = "activity";
      __int16 v13 = 2050;
      uint64_t v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHarvestController::onPruneTimer\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v6 = 0;
  }
  sub_10054C7D8((double *)a2);
  if (v6) {
    os_activity_scope_leave(&state);
  }
}

void sub_1005469EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100546A0C(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 40), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BABC0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v6 = 1;
    uint64_t v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHarvestController::onUploadTimer", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BABC0);
    }
    long long v4 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v8 = 0;
      __int16 v9 = 2082;
      long long v10 = "";
      __int16 v11 = 2082;
      long long v12 = "activity";
      __int16 v13 = 2050;
      uint64_t v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHarvestController::onUploadTimer\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v6 = 0;
  }
  sub_10054C94C(a2);
  if (v6) {
    os_activity_scope_leave(&state);
  }
}

void sub_100546BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100546BD0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022BABA0);
  }
  CFStringRef v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    __int16 v4 = 2082;
    uint64_t v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLHarvestController-upload\"}", (uint8_t *)v3, 0x12u);
  }
  sub_100546CB4(v1);
}

void sub_100546CB4(uint64_t a1)
{
  *(double *)(a1 + 100_Block_object_dispose(&STACK[0x850], 8) = (*(double (**)(uint64_t))(*(void *)a1 + 64))(a1);
  CFStringRef v2 = *(void **)(a1 + 64);
  uint64_t v3 = (void *)(a1 + 72);
  if (v2 != (void *)(a1 + 72))
  {
    do
    {
      sub_100D6B764(v2[5]);
      uint64_t v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          char v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          char v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          CFStringRef v2 = v6;
        }
        while (!v7);
      }
      CFStringRef v2 = v6;
    }
    while (v6 != v3);
  }
  sub_10054C3B4(a1);
  int v8 = *(void **)(a1 + 64);
  if (v8 != v3)
  {
    do
    {
      sub_100D6C2CC(v8[5]);
      __int16 v9 = (void *)v8[1];
      if (v9)
      {
        do
        {
          long long v10 = v9;
          __int16 v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          long long v10 = (void *)v8[2];
          BOOL v7 = *v10 == (void)v8;
          int v8 = v10;
        }
        while (!v7);
      }
      int v8 = v10;
    }
    while (v10 != v3);
  }
}

void sub_100546DB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022BABA0);
  }
  CFStringRef v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 68289026;
    v7[1] = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLHarvestController-prune\"}", (uint8_t *)v7, 0x12u);
  }
  uint64_t v3 = *(void **)(v1 + 64);
  if (v3 != (void *)(v1 + 72))
  {
    do
    {
      sub_100D6BFDC((unsigned int *)v3[5]);
      __int16 v4 = (void *)v3[1];
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          __int16 v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (void *)v3[2];
          BOOL v6 = *v5 == (void)v3;
          uint64_t v3 = v5;
        }
        while (!v6);
      }
      uint64_t v3 = v5;
    }
    while (v5 != (void *)(v1 + 72));
  }
}

void sub_100546EEC(unsigned __int8 *a1)
{
  int v2 = a1[257];
  int v3 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)a1 + 104))(a1);
  a1[257] = v3;
  if (v2 != v3)
  {
    (*(void (**)(unsigned __int8 *))(*(void *)a1 + 64))(a1);
    uint64_t v5 = 368;
    if (!v2) {
      uint64_t v5 = 376;
    }
    *(double *)&a1[v5] = v4 - *((double *)a1 + 48) + *(double *)&a1[v5];
    *((double *)a1 + 4_Block_object_dispose(&STACK[0x850], 8) = v4;
    if (a1[257]) {
      double v6 = sub_10054C1A0((uint64_t)a1);
    }
    else {
      double v6 = 1.79769313e308;
    }
    sub_10054BD6C((uint64_t)a1, v6);
  }
}

void sub_100546FCC(uint64_t a1)
{
  if (objc_opt_class())
  {
    id v2 = +[MCProfileConnection sharedConnection];
    unsigned int v3 = [v2 effectiveBoolValueForSetting:MCFeatureDiagnosticsSubmissionAllowed];
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    double v4 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 67109120;
      unsigned int v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "MCProfile DiagnosticsSubmissionAllowed: %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLHarvestController::fetchManagedConfigurationDiagnosticsSubmissionAllowed()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    *(unsigned char *)(a1 + 1210) = v3 == 1;
  }
  else
  {
    *(unsigned char *)(a1 + 1210) = 0;
  }
}

uint64_t sub_1005471B8(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_100547200(uint64_t a1)
{
  *(void *)a1 = off_1022BA790;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = off_1022BA928;
  *(void *)(a1 + 16) = off_1022BA968;
  *(void *)(a1 + 24) = off_1022BA998;
  *(void *)(a1 + 32) = off_1022BA9D0;
  sub_10054737C(a1);
  id v2 = *(void **)(a1 + 1184);
  if (v2)
  {
    *(void *)(a1 + 1192) = v2;
    operator delete(v2);
  }
  unsigned int v3 = *(std::__shared_weak_count **)(a1 + 1064);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  double v4 = *(std::__shared_weak_count **)(a1 + 1048);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  sub_1000DB264(a1 + 1016, *(char **)(a1 + 1024));
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  if (*(char *)(a1 + 311) < 0) {
    operator delete(*(void **)(a1 + 288));
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 176);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  double v6 = *(std::__shared_weak_count **)(a1 + 160);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  unsigned int v7 = *(std::__shared_weak_count **)(a1 + 144);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  sub_1000F5BB0(a1 + 112, *(void **)(a1 + 120));
  long long v10 = (void **)(a1 + 88);
  sub_10054E120(&v10);
  sub_10054E0C0(a1 + 64, *(void **)(a1 + 72));
  __int16 v8 = *(std::__shared_weak_count **)(a1 + 56);
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return a1;
}

void sub_10054737C(uint64_t a1)
{
  sub_100547C3C(a1, 0);
  id v2 = *(void **)(a1 + 64);
  if (v2 != (void *)(a1 + 72))
  {
    do
    {
      (*(void (**)(void))(*(void *)v2[5] + 80))(v2[5]);
      unsigned int v3 = (void *)v2[1];
      if (v3)
      {
        do
        {
          double v4 = v3;
          unsigned int v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          double v4 = (void *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          id v2 = v4;
        }
        while (!v5);
      }
      id v2 = v4;
    }
    while (v4 != (void *)(a1 + 72));
  }
  (*(void (**)(void))(**(void **)(a1 + 168) + 16))(*(void *)(a1 + 168));
  (*(void (**)(void))(**(void **)(a1 + 136) + 16))(*(void *)(a1 + 136));
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 192))(*(void *)(a1 + 48), 13);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 192))(*(void *)(a1 + 48), 15);
  uint64_t v6 = *(void *)(a1 + 48);
  sub_1000B0164(v8, kCTCallStatusChangeNotification);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v6 + 288))(v6, v8);
  *(unsigned char *)(a1 + 972) = 0;
  (*(void (**)(void, void))(**(void **)(a1 + 48) + 208))(*(void *)(a1 + 48), 0);
  (*(void (**)(void))(**(void **)(a1 + 48) + 48))(*(void *)(a1 + 48));
  (*(void (**)(void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48));
  uint64_t v7 = sub_1000A6958();
  sub_100163398(v7, @"LastPrune", (const void *)(a1 + 992));

  *(void *)(a1 + 264) = 0;
}

uint64_t sub_1005475C8(uint64_t a1)
{
  return sub_100547200(a1 - 8);
}

uint64_t sub_1005475D0(uint64_t a1)
{
  return sub_100547200(a1 - 16);
}

uint64_t sub_1005475D8(uint64_t a1)
{
  return sub_100547200(a1 - 24);
}

uint64_t sub_1005475E0(uint64_t a1)
{
  return sub_100547200(a1 - 32);
}

void sub_1005475E8(uint64_t a1)
{
  sub_100547200(a1);

  operator delete();
}

void sub_100547620(uint64_t a1)
{
  sub_100547200(a1 - 8);

  operator delete();
}

void sub_10054765C(uint64_t a1)
{
  sub_100547200(a1 - 16);

  operator delete();
}

void sub_100547698(uint64_t a1)
{
  sub_100547200(a1 - 24);

  operator delete();
}

void sub_1005476D4(uint64_t a1)
{
  sub_100547200(a1 - 32);

  operator delete();
}

void sub_100547710(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t v10 = *a2;
  uint64_t v9 = a2[1];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v11 = (std::__shared_weak_count *)a1[22];
  a1[21] = v10;
  a1[22] = v9;
  if (v11) {
    sub_1000DB0A0(v11);
  }
  uint64_t v13 = *a3;
  uint64_t v12 = a3[1];
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = (std::__shared_weak_count *)a1[18];
  a1[17] = v13;
  a1[18] = v12;
  if (v14) {
    sub_1000DB0A0(v14);
  }
  uint64_t v16 = *a4;
  uint64_t v15 = a4[1];
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  double v17 = (std::__shared_weak_count *)a1[20];
  a1[19] = v16;
  a1[20] = v15;
  if (v17) {
    sub_1000DB0A0(v17);
  }
  long long v18 = *a5;
  int v19 = a5[1];
  if (*a5 != v19)
  {
    do
    {
      int v20 = (std::__shared_weak_count *)v18[1];
      v23[0] = *v18;
      v23[1] = (uint64_t)v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1005479B4((uint64_t)a1, v23);
      if (v20) {
        sub_1000DB0A0(v20);
      }
      v18 += 2;
    }
    while (v18 != v19);
  }
  (*(void (**)(void *))(*a1 + 48))(a1);
  if ((*(uint64_t (**)(void))(*(void *)a1[21] + 40))(a1[21]))
  {
    (*(void (**)(void))(*(void *)a1[21] + 72))(a1[21]);
    int v21 = *(void (**)(void))(*(void *)a1[17] + 72);
    v21();
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    uint64_t v22 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v25 = 0;
      __int16 v26 = 2082;
      uint64_t v27 = "";
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"gps harvesting is not supported\"}", buf, 0x12u);
    }
  }
}

void sub_10054799C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_1005479B4(uint64_t a1, uint64_t *a2)
{
  int v9 = sub_10012FD50(*a2);
  uint64_t v10 = &v9;
  double v4 = sub_1000C5658((uint64_t **)(a1 + 64), &v9, (uint64_t)&unk_101D0B290, &v10);
  uint64_t v6 = *a2;
  BOOL v5 = (uint64_t *)a2[1];
  if (v5) {
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[6];
  v4[5] = (uint64_t *)v6;
  void v4[6] = v5;
  if (v7) {
    sub_1000DB0A0(v7);
  }
  uint64_t v10 = &v9;
  double result = sub_1000FEE0C((uint64_t **)(a1 + 112), &v9, (uint64_t)&unk_101D0B290, &v10);
  result[5] = (uint64_t *)0x7FEFFFFFFFFFFFFFLL;
  return result;
}

void sub_100547A64(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 168) + 88))(*(void *)(a1 + 168));

  sub_1004CE088(a1 + 1080);
}

void sub_100547AC0(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 152) + 88))(*(void *)(a1 + 152));

  sub_1004CE088(a1 + 1064);
}

double sub_100547B1C(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 168) + 96))(*(void *)(a1 + 168));

  return sub_1004CE0C8((double *)(a1 + 1080));
}

double sub_100547B78(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 152) + 96))(*(void *)(a1 + 152));

  return sub_1004CE0C8((double *)(a1 + 1064));
}

double sub_100547BD4(uint64_t a1)
{
  return *(double *)(a1 + 248);
}

double sub_100547BDC(uint64_t a1)
{
  return *(double *)(a1 + 224);
}

uint64_t sub_100547BE4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 236);
}

uint64_t sub_100547BEC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 212);
}

uint64_t sub_100547BF4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 240);
}

uint64_t sub_100547BFC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 216);
}

uint64_t sub_100547C04(uint64_t a1)
{
  return a1 + 208;
}

uint64_t sub_100547C0C(uint64_t a1)
{
  return a1 + 200;
}

uint64_t sub_100547C14(uint64_t a1)
{
  return *(unsigned int *)(a1 + 232);
}

uint64_t sub_100547C1C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 224);
}

uint64_t sub_100547C24(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 188);
}

uint64_t sub_100547C2C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 189);
}

uint64_t sub_100547C34(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 181);
}

uint64_t sub_100547C3C(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 187) != a2)
  {
    id v2 = (void **)result;
    *(unsigned char *)(result + 187) = a2;
    uint64_t v3 = **(void **)(result + 48);
    if (a2)
    {
      (*(void (**)(void))(v3 + 80))();
      (*(void (**)(void *, uint64_t))(*v2[6] + 80))(v2[6], 4);
      (*(void (**)(void *, void))(*v2[6] + 80))(v2[6], 0);
    }
    else
    {
      (*(void (**)(void))(v3 + 88))();
      (*(void (**)(void *, uint64_t))(*v2[6] + 88))(v2[6], 4);
      (*(void (**)(void *, void))(*v2[6] + 88))(v2[6], 0);
    }
    double v4 = (uint64_t (*)(void **))(*v2)[5];
    return v4(v2);
  }
  return result;
}

uint64_t sub_100547DB8(uint64_t result, int a2)
{
  uint64_t v2 = result;
  switch(a2)
  {
    case 1:
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      uint64_t v3 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        int v21 = 68289026;
        int v22 = 0;
        __int16 v23 = 2082;
        uint64_t v24 = "";
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvester registering for location leech notifications\"}", (uint8_t *)&v21, 0x12u);
      }
      (*(void (**)(void, uint64_t))(**(void **)(v2 + 48) + 232))(*(void *)(v2 + 48), 5);
      (*(void (**)(void, uint64_t))(**(void **)(v2 + 48) + 232))(*(void *)(v2 + 48), 13);
      double result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 48) + 232))(*(void *)(v2 + 48), 46);
      break;
    case 4:
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      double v4 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        int v21 = 68289026;
        int v22 = 0;
        __int16 v23 = 2082;
        uint64_t v24 = "";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvester #msim registering for telephony notifications\"}", (uint8_t *)&v21, 0x12u);
      }
      uint64_t v5 = *(void *)(v2 + 48);
      sub_1000B0164(&v21, @"kCellInfoNotification");
      (*(void (**)(uint64_t, int *))(*(void *)v5 + 272))(v5, &v21);
      uint64_t v6 = *(void *)(v2 + 48);
      sub_1000B0164(&v21, @"kSimInfoChangedNotification");
      (*(void (**)(uint64_t, int *))(*(void *)v6 + 272))(v6, &v21);
      uint64_t v7 = *(void *)(v2 + 48);
      sub_1000B0164(&v21, @"kServingCellChangedNotification");
      (*(void (**)(uint64_t, int *))(*(void *)v7 + 272))(v7, &v21);
      uint64_t v8 = *(void *)(v2 + 48);
      sub_1000B0164(&v21, @"kServingNetworkChangedNotification");
      (*(void (**)(uint64_t, int *))(*(void *)v8 + 272))(v8, &v21);
      uint64_t v9 = *(void *)(v2 + 48);
      sub_1000B0164(&v21, @"kSubscriptionsInUseNotification");
      (*(void (**)(uint64_t, int *))(*(void *)v9 + 272))(v9, &v21);
      uint64_t v10 = *(void *)(v2 + 48);
      sub_1000B0164(&v21, @"kRegistrationDisplayStatusNotification");
      (*(void (**)(uint64_t, int *))(*(void *)v10 + 272))(v10, &v21);
      goto LABEL_17;
    case 5:
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      __int16 v11 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        int v21 = 68289026;
        int v22 = 0;
        __int16 v23 = 2082;
        uint64_t v24 = "";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvester registering for #legacy telephony notifications\"}", (uint8_t *)&v21, 0x12u);
      }
      uint64_t v12 = *(void *)(v2 + 48);
      sub_1000B0164(&v21, kCTCellMonitorUpdateNotification);
      (*(void (**)(uint64_t, int *))(*(void *)v12 + 280))(v12, &v21);
      uint64_t v13 = *(void *)(v2 + 48);
      sub_1000B0164(&v21, kCTRegistrationCellChangedNotification);
      (*(void (**)(uint64_t, int *))(*(void *)v13 + 280))(v13, &v21);
      uint64_t v14 = *(void *)(v2 + 48);
      sub_1000B0164(&v21, kCTRegistrationNewServingNetworkNotification);
      (*(void (**)(uint64_t, int *))(*(void *)v14 + 280))(v14, &v21);
      uint64_t v15 = *(void *)(v2 + 48);
      sub_1000B0164(&v21, @"kSubscriptionsInUseNotification");
      (*(void (**)(uint64_t, int *))(*(void *)v15 + 280))(v15, &v21);
LABEL_17:
      uint64_t v16 = *(void *)(v2 + 48);
      sub_1000B0164(&v21, @"kTimingAdvanceInfoNotification");
      double result = (*(uint64_t (**)(uint64_t, int *))(*(void *)v16 + 272))(v16, &v21);
      break;
    case 6:
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      double v17 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        int v21 = 68289026;
        int v22 = 0;
        __int16 v23 = 2082;
        uint64_t v24 = "";
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvester registering for PassKit notifications\"}", (uint8_t *)&v21, 0x12u);
      }
      (*(void (**)(void, void))(**(void **)(v2 + 48) + 368))(*(void *)(v2 + 48), 0);
      double result = (*(uint64_t (**)(void))(**(void **)(v2 + 48) + 368))();
      break;
    case 7:
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      long long v18 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        int v21 = 68289026;
        int v22 = 0;
        __int16 v23 = 2082;
        uint64_t v24 = "";
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvester registering for leech visit notifications\"}", (uint8_t *)&v21, 0x12u);
      }
      double result = (*(uint64_t (**)(void))(**(void **)(v2 + 48) + 392))(*(void *)(v2 + 48));
      break;
    case 8:
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      int v19 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        int v21 = 68289026;
        int v22 = 0;
        __int16 v23 = 2082;
        uint64_t v24 = "";
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvester registering for wifi notificatons\"}", (uint8_t *)&v21, 0x12u);
      }
      uint64_t v20 = *(void *)(v2 + 48);
      int v21 = 3;
      double result = (*(uint64_t (**)(uint64_t, int *))(*(void *)v20 + 328))(v20, &v21);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1005486C8(uint64_t result, int a2)
{
  uint64_t v2 = result;
  switch(a2)
  {
    case 1:
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      uint64_t v3 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        int v21 = 68289026;
        int v22 = 0;
        __int16 v23 = 2082;
        uint64_t v24 = "";
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvester unregistering for location notifications\"}", (uint8_t *)&v21, 0x12u);
      }
      (*(void (**)(void, uint64_t))(**(void **)(v2 + 48) + 240))(*(void *)(v2 + 48), 5);
      (*(void (**)(void, uint64_t))(**(void **)(v2 + 48) + 240))(*(void *)(v2 + 48), 13);
      double result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 48) + 240))(*(void *)(v2 + 48), 46);
      break;
    case 4:
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      double v4 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        int v21 = 68289026;
        int v22 = 0;
        __int16 v23 = 2082;
        uint64_t v24 = "";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvester unregistering for telephony notifications\"}", (uint8_t *)&v21, 0x12u);
      }
      uint64_t v5 = *(void *)(v2 + 48);
      sub_1000B0164(&v21, @"kCellInfoNotification");
      (*(void (**)(uint64_t, int *))(*(void *)v5 + 288))(v5, &v21);
      uint64_t v6 = *(void *)(v2 + 48);
      sub_1000B0164(&v21, @"kSimInfoChangedNotification");
      (*(void (**)(uint64_t, int *))(*(void *)v6 + 288))(v6, &v21);
      uint64_t v7 = *(void *)(v2 + 48);
      sub_1000B0164(&v21, @"kServingCellChangedNotification");
      (*(void (**)(uint64_t, int *))(*(void *)v7 + 288))(v7, &v21);
      uint64_t v8 = *(void *)(v2 + 48);
      sub_1000B0164(&v21, @"kServingNetworkChangedNotification");
      (*(void (**)(uint64_t, int *))(*(void *)v8 + 288))(v8, &v21);
      uint64_t v9 = *(void *)(v2 + 48);
      sub_1000B0164(&v21, @"kSubscriptionsInUseNotification");
      (*(void (**)(uint64_t, int *))(*(void *)v9 + 288))(v9, &v21);
      uint64_t v10 = *(void *)(v2 + 48);
      sub_1000B0164(&v21, @"kRegistrationDisplayStatusNotification");
      (*(void (**)(uint64_t, int *))(*(void *)v10 + 288))(v10, &v21);
      uint64_t v11 = *(void *)(v2 + 48);
      sub_1000B0164(&v21, @"kTimingAdvanceInfoNotification");
      double result = (*(uint64_t (**)(uint64_t, int *))(*(void *)v11 + 288))(v11, &v21);
      break;
    case 5:
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      uint64_t v12 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        int v21 = 68289026;
        int v22 = 0;
        __int16 v23 = 2082;
        uint64_t v24 = "";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvester unregistering for #legacy telephony notifications\"}", (uint8_t *)&v21, 0x12u);
      }
      uint64_t v13 = *(void *)(v2 + 48);
      sub_1000B0164(&v21, kCTCellMonitorUpdateNotification);
      (*(void (**)(uint64_t, int *))(*(void *)v13 + 296))(v13, &v21);
      uint64_t v14 = *(void *)(v2 + 48);
      sub_1000B0164(&v21, kCTRegistrationCellChangedNotification);
      (*(void (**)(uint64_t, int *))(*(void *)v14 + 296))(v14, &v21);
      uint64_t v15 = *(void *)(v2 + 48);
      sub_1000B0164(&v21, kCTRegistrationNewServingNetworkNotification);
      (*(void (**)(uint64_t, int *))(*(void *)v15 + 296))(v15, &v21);
      uint64_t v16 = *(void *)(v2 + 48);
      sub_1000B0164(&v21, @"kSubscriptionsInUseNotification");
      double result = (*(uint64_t (**)(uint64_t, int *))(*(void *)v16 + 296))(v16, &v21);
      break;
    case 6:
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      double v17 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        int v21 = 68289026;
        int v22 = 0;
        __int16 v23 = 2082;
        uint64_t v24 = "";
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvester unregistering for PassKit notifications\"}", (uint8_t *)&v21, 0x12u);
      }
      (*(void (**)(void, void))(**(void **)(v2 + 48) + 376))(*(void *)(v2 + 48), 0);
      double result = (*(uint64_t (**)(void))(**(void **)(v2 + 48) + 376))();
      break;
    case 7:
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      long long v18 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        int v21 = 68289026;
        int v22 = 0;
        __int16 v23 = 2082;
        uint64_t v24 = "";
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvester unregistering for leech visit notifications\"}", (uint8_t *)&v21, 0x12u);
      }
      double result = (*(uint64_t (**)(void))(**(void **)(v2 + 48) + 400))(*(void *)(v2 + 48));
      break;
    case 8:
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      int v19 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        int v21 = 68289026;
        int v22 = 0;
        __int16 v23 = 2082;
        uint64_t v24 = "";
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvester unregistering for wifi notificatons\"}", (uint8_t *)&v21, 0x12u);
      }
      uint64_t v20 = *(void *)(v2 + 48);
      int v21 = 3;
      double result = (*(uint64_t (**)(uint64_t, int *))(*(void *)v20 + 336))(v20, &v21);
      break;
    default:
      return result;
  }
  return result;
}

void sub_100548FD8(uint64_t a1, signed int a2, unsigned int a3)
{
  signed int v31 = a2;
  uint64_t v5 = *(void *)(a1 + 72);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v7 = a1 + 72;
  do
  {
    signed int v8 = *(_DWORD *)(v5 + 32);
    BOOL v9 = v8 < a2;
    if (v8 >= a2) {
      uint64_t v10 = (uint64_t *)v5;
    }
    else {
      uint64_t v10 = (uint64_t *)(v5 + 8);
    }
    if (!v9) {
      uint64_t v7 = v5;
    }
    uint64_t v5 = *v10;
  }
  while (*v10);
  if (v7 != a1 + 72 && *(_DWORD *)(v7 + 32) <= a2)
  {
    if (sub_1001EF6E0((void *)(*(void *)(a1 + 88) + 40 * a3), (unsigned int *)&v31))
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      long long v18 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
      {
        uint64_t v19 = v31;
        sub_100CA0B34(a3, __p);
        if (v30 >= 0) {
          uint64_t v20 = __p;
        }
        else {
          uint64_t v20 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 68289539;
        int v33 = 0;
        __int16 v34 = 2082;
        uint64_t v35 = "";
        __int16 v36 = 2050;
        uint64_t v37 = v19;
        __int16 v38 = 2081;
        long long v39 = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"SubHarvester re-registered for notification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"harvestNotificationType\":%{private, location:escape_only}s}", buf, 0x26u);
        if (v30 < 0) {
          operator delete(__p[0]);
        }
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022BABA0);
        }
      }
      uint64_t v21 = qword_102419568;
      if (os_signpost_enabled((os_log_t)qword_102419568))
      {
        uint64_t v22 = v31;
        sub_100CA0B34(a3, __p);
        if (v30 >= 0) {
          __int16 v23 = __p;
        }
        else {
          __int16 v23 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 68289539;
        int v33 = 0;
        __int16 v34 = 2082;
        uint64_t v35 = "";
        __int16 v36 = 2050;
        uint64_t v37 = v22;
        __int16 v38 = 2081;
        long long v39 = v23;
        uint64_t v15 = "SubHarvester re-registered for notification";
        uint64_t v16 = "{\"msg%{public}.0s\":\"SubHarvester re-registered for notification\", \"subHarvester\":%{public, location:"
              "CLSubHarvesterIdentifier}lld, \"harvestNotificationType\":%{private, location:escape_only}s}";
        double v17 = v21;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v24 = *(void *)(a1 + 88) + 40 * a3;
      uint64_t v25 = *(void *)(v24 + 24);
      sub_1001F0928(v24, (unsigned int *)&v31, &v31);
      if (!v25) {
        sub_100547DB8(a1, a3);
      }
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      __int16 v26 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
      {
        uint64_t v27 = v31;
        sub_100CA0B34(a3, __p);
        if (v30 >= 0) {
          long long v28 = __p;
        }
        else {
          long long v28 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 68289539;
        int v33 = 0;
        __int16 v34 = 2082;
        uint64_t v35 = "";
        __int16 v36 = 2050;
        uint64_t v37 = v27;
        __int16 v38 = 2081;
        long long v39 = v28;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"subharvester registered for notification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"harvestNotificationType\":%{private, location:escape_only}s}", buf, 0x26u);
        goto LABEL_27;
      }
    }
  }
  else
  {
LABEL_11:
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    uint64_t v11 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
    {
      sub_100CA0B34(a3, __p);
      if (v30 >= 0) {
        uint64_t v12 = __p;
      }
      else {
        uint64_t v12 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 68289539;
      int v33 = 0;
      __int16 v34 = 2082;
      uint64_t v35 = "";
      __int16 v36 = 2050;
      uint64_t v37 = a2;
      __int16 v38 = 2081;
      long long v39 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unknown SubHarvester registering for notification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"harvestNotificationType\":%{private, location:escape_only}s}", buf, 0x26u);
      if (v30 < 0) {
        operator delete(__p[0]);
      }
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
    }
    uint64_t v13 = qword_102419568;
    if (os_signpost_enabled((os_log_t)qword_102419568))
    {
      sub_100CA0B34(a3, __p);
      if (v30 >= 0) {
        uint64_t v14 = __p;
      }
      else {
        uint64_t v14 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 68289539;
      int v33 = 0;
      __int16 v34 = 2082;
      uint64_t v35 = "";
      __int16 v36 = 2050;
      uint64_t v37 = a2;
      __int16 v38 = 2081;
      long long v39 = v14;
      uint64_t v15 = "Unknown SubHarvester registering for notification";
      uint64_t v16 = "{\"msg%{public}.0s\":\"Unknown SubHarvester registering for notification\", \"subHarvester\":%{public, locat"
            "ion:CLSubHarvesterIdentifier}lld, \"harvestNotificationType\":%{private, location:escape_only}s}";
      double v17 = v13;
LABEL_26:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v15, v16, buf, 0x26u);
LABEL_27:
      if (v30 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1005494DC(uint64_t a1, signed int a2, unsigned int a3)
{
  signed int v20 = a2;
  uint64_t v5 = *(void *)(a1 + 72);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v7 = a1 + 72;
  do
  {
    signed int v8 = *(_DWORD *)(v5 + 32);
    BOOL v9 = v8 < a2;
    if (v8 >= a2) {
      uint64_t v10 = (uint64_t *)v5;
    }
    else {
      uint64_t v10 = (uint64_t *)(v5 + 8);
    }
    if (!v9) {
      uint64_t v7 = v5;
    }
    uint64_t v5 = *v10;
  }
  while (*v10);
  if (v7 != a1 + 72 && *(_DWORD *)(v7 + 32) <= a2)
  {
    if (sub_1001EF6E0((void *)(*(void *)(a1 + 88) + 40 * a3), (unsigned int *)&v20))
    {
      sub_10054E37C((void *)(*(void *)(a1 + 88) + 40 * a3), (unsigned int *)&v20);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      uint64_t v15 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
      {
        uint64_t v16 = v20;
        sub_100CA0B34(a3, __p);
        double v17 = v19 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 68289539;
        int v22 = 0;
        __int16 v23 = 2082;
        uint64_t v24 = "";
        __int16 v25 = 2050;
        uint64_t v26 = v16;
        __int16 v27 = 2081;
        long long v28 = v17;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"subharvester unregistered for notification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"harvestNotificationType\":%{private, location:escape_only}s}", buf, 0x26u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }
      if (!*(void *)(*(void *)(a1 + 88) + 40 * a3 + 24)) {
        sub_1005486C8(a1, a3);
      }
    }
  }
  else
  {
LABEL_11:
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    uint64_t v11 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
    {
      sub_100CA0B34(a3, __p);
      if (v19 >= 0) {
        uint64_t v12 = __p;
      }
      else {
        uint64_t v12 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 68289539;
      int v22 = 0;
      __int16 v23 = 2082;
      uint64_t v24 = "";
      __int16 v25 = 2050;
      uint64_t v26 = a2;
      __int16 v27 = 2081;
      long long v28 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unknown SubHarvester unregistering for notification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"harvestNotificationType\":%{private, location:escape_only}s}", buf, 0x26u);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
    }
    uint64_t v13 = qword_102419568;
    if (os_signpost_enabled((os_log_t)qword_102419568))
    {
      sub_100CA0B34(a3, __p);
      if (v19 >= 0) {
        uint64_t v14 = __p;
      }
      else {
        uint64_t v14 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 68289539;
      int v22 = 0;
      __int16 v23 = 2082;
      uint64_t v24 = "";
      __int16 v25 = 2050;
      uint64_t v26 = a2;
      __int16 v27 = 2081;
      long long v28 = v14;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unknown SubHarvester unregistering for notification", "{\"msg%{public}.0s\":\"Unknown SubHarvester unregistering for notification\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"harvestNotificationType\":%{private, location:escape_only}s}", buf, 0x26u);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

uint64_t sub_100549868(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void **)(result + 64);
  uint64_t v3 = (void *)(result + 72);
  if (v2 != (void *)(result + 72))
  {
    do
    {
      double result = (*(uint64_t (**)(void, uint64_t))(*(void *)v2[5] + 88))(v2[5], a2);
      uint64_t v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
    }
    while (v6 != v3);
  }
  return result;
}

uint64_t sub_100549904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000E9354(v24);
  sub_1000E9354(v23);
  int v6 = sub_1004D5D9C(a2, "Locations");
  int v7 = v6;
  BOOL v8 = *(double *)(a3 + 20) < 0.0 || v6 < 1;
  if (v8) {
    goto LABEL_37;
  }
  char v9 = 0;
  int v10 = 1;
  do
  {
    double v21 = 0.0;
    double v22 = 0.0;
    double v19 = 0.0;
    double v20 = 0.0;
    sub_100012960(a2, "Locations", v24);
    if (sub_1000A699C((uint64_t)v24, "LatitudeMin", &v22)
      && sub_1000A699C((uint64_t)v24, "LatitudeMax", &v21)
      && sub_1000A699C((uint64_t)v24, "LongitudeMin", &v20)
      && sub_1000A699C((uint64_t)v24, "LongitudeMax", &v19)
      && sub_100012960((uint64_t)v24, "Rules", v23))
    {
      double v11 = *(double *)(a3 + 4);
      if (v22 <= v11 && v21 >= v11)
      {
        double v12 = *(double *)(a3 + 12);
        if (v20 <= v12 && v19 >= v12)
        {
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_1022BABA0);
          }
          uint64_t v13 = qword_102419568;
          if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v14 = *(void *)(a3 + 4);
            uint64_t v15 = *(void *)(a3 + 12);
            *(_DWORD *)std::string buf = 68290563;
            int v26 = 0;
            __int16 v27 = 2082;
            long long v28 = "";
            __int16 v29 = 2049;
            uint64_t v30 = v14;
            __int16 v31 = 2049;
            uint64_t v32 = v15;
            __int16 v33 = 2049;
            double v34 = v22;
            __int16 v35 = 2049;
            double v36 = v20;
            __int16 v37 = 2049;
            double v38 = v21;
            __int16 v39 = 2049;
            double v40 = v19;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"applying bounding-box-specific overrides\", \"lat\":\"%{private}f\", \"lon\":\"%{private}f\", \"latMin\":\"%{private}f\", \"lonMin\":\"%{private}f\", \"latMax\":\"%{private}f\", \"lonMax\":\"%{private}f\"}", buf, 0x4Eu);
          }
          char v9 = 1;
        }
      }
    }
    else
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      uint64_t v16 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 68289283;
        int v26 = 0;
        __int16 v27 = 2082;
        long long v28 = "";
        __int16 v29 = 1025;
        LODWORD(v30) = v10 - 1;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"location-specific entry is incomplete\", \"incompleteEntry\":%{private}d}", buf, 0x18u);
      }
    }
    if (v9) {
      break;
    }
    if (*(double *)(a3 + 20) < 0.0) {
      break;
    }
    BOOL v8 = v10++ < v7;
  }
  while (v8);
  if ((v9 & 1) == 0)
  {
LABEL_37:
    if (sub_100012960(a2, "Default", v23))
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      double v17 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v26 = 0;
        __int16 v27 = 2082;
        long long v28 = "";
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"applying overrides\"}", buf, 0x12u);
      }
    }
    else
    {
      sub_1004CE798((uint64_t)v23, a2);
    }
  }
  sub_100549868(a1, (uint64_t)v23);
  sub_10013F3C4(v23);
  return sub_10013F3C4(v24);
}

void sub_100549D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100549D48(uint64_t a1)
{
  sub_1000E9354(v6);
  if ((*(unsigned int (**)(void, unsigned char *))(**(void **)(a1 + 48) + 112))(*(void *)(a1 + 48), v6))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    uint64_t v2 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      uint64_t v3 = "{\"msg%{public}.0s\":\"found default overrides - applying\"}";
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, v3, buf, 0x12u);
    }
  }
  else if ((*(unsigned int (**)(void, unsigned char *))(**(void **)(a1 + 48) + 360))(*(void *)(a1 + 48), v6))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    uint64_t v2 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      uint64_t v3 = "{\"msg%{public}.0s\":\"found network overrides - applying\"}";
      goto LABEL_15;
    }
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    uint64_t v2 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v8 = 0;
      __int16 v9 = 2082;
      int v10 = "";
      uint64_t v3 = "{\"msg%{public}.0s\":\"no overrides found in daemon settings or network settings\"}";
      goto LABEL_15;
    }
  }
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 56))(*(void *)(a1 + 168));
  sub_100549904(a1, (uint64_t)v6, v4);
  return sub_10013F3C4(v6);
}

void sub_100549FB8(_Unwind_Exception *exception_object)
{
}

unsigned char *sub_100549FD4(unsigned char *result, int a2)
{
  if (result[185] != a2)
  {
    result[185] = a2;
    return (unsigned char *)(*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t sub_10054A010()
{
  BOOL v27 = 0;
  sub_1000C7F88(buf);
  sub_1000D2988(*(uint64_t *)buf, "EnableHarvestingForLocationSimulation", &v27);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v27)
  {
    sub_100134750(__p, "http://localhost:8008");
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    id v0 = [&off_1023979C8 countByEnumeratingWithState:&v21 objects:v32 count:16];
    if (v0)
    {
      uint64_t v1 = *(void *)v22;
      while (2)
      {
        for (uint64_t i = 0; i != v0; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v22 != v1) {
            objc_enumerationMutation(&off_1023979C8);
          }
          uint64_t v3 = *(void **)(*((void *)&v21 + 1) + 8 * i);
          memset(&__s1, 0, sizeof(__s1));
          sub_1000C7F88(buf);
          sub_1000A7CF8(*(uint64_t *)buf, (uint64_t)v3, &__s1);
          if (*(void *)&buf[8]) {
            sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
          }
          uint64_t v4 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __s1.__r_.__value_.__l.__size_;
          }
          unint64_t v6 = v26;
          if ((v26 & 0x80u) != 0) {
            unint64_t v6 = (unint64_t)__p[1];
          }
          if (size != v6) {
            goto LABEL_31;
          }
          if ((v26 & 0x80u) == 0) {
            int v7 = __p;
          }
          else {
            int v7 = (void **)__p[0];
          }
          if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            __int16 v9 = (void *)__s1.__r_.__value_.__r.__words[0];
            if (memcmp(__s1.__r_.__value_.__l.__data_, v7, __s1.__r_.__value_.__l.__size_)) {
              goto LABEL_31;
            }
            operator delete(v9);
          }
          else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
          {
            p_s1 = &__s1;
            while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v7)
            {
              p_s1 = (std::string *)((char *)p_s1 + 1);
              int v7 = (void **)((char *)v7 + 1);
              if (!--v4) {
                goto LABEL_28;
              }
            }
LABEL_31:
            if (qword_102419560 != -1) {
              dispatch_once(&qword_102419560, &stru_1022BABA0);
            }
            double v11 = qword_102419568;
            if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
            {
              id v12 = [v3 UTF8String];
              uint64_t v13 = &__s1;
              if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                uint64_t v13 = (std::string *)__s1.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)std::string buf = 136315394;
              *(void *)&uint8_t buf[4] = v12;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&unsigned char buf[14] = v13;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Collection endpoint for: %s  set to : %s. Should be localhost:8008", buf, 0x16u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419560 != -1) {
                dispatch_once(&qword_102419560, &stru_1022BABA0);
              }
              id v16 = [v3 UTF8String];
              double v17 = &__s1;
              if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                double v17 = (std::string *)__s1.__r_.__value_.__r.__words[0];
              }
              int v28 = 136315394;
              id v29 = v16;
              __int16 v30 = 2080;
              __int16 v31 = v17;
              long long v18 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLHarvestController::isHarvestingAllowedForLocationSimulation() const", "%s\n", v18);
              if (v18 != buf) {
                free(v18);
              }
            }
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__s1.__r_.__value_.__l.__data_);
            }
            uint64_t v10 = 0;
            goto LABEL_48;
          }
LABEL_28:
          ;
        }
        id v0 = [&off_1023979C8 countByEnumeratingWithState:&v21 objects:v32 count:16];
        uint64_t v10 = 1;
        if (v0) {
          continue;
        }
        break;
      }
    }
    else
    {
      uint64_t v10 = 1;
    }
LABEL_48:
    if ((char)v26 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    uint64_t v14 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "EnableHarvestingForLocationSimulation not set to True.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      LOWORD(__p[0]) = 0;
      double v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLHarvestController::isHarvestingAllowedForLocationSimulation() const", "%s\n", v19);
      if (v19 != buf) {
        free(v19);
      }
    }
    return 0;
  }
  return v10;
}

void sub_10054A518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10054A594(uint64_t a1)
{
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 48) + 224))(*(void *)(a1 + 48)) & 1) != 0
    || ((*(uint64_t (**)(void))(**(void **)(a1 + 48) + 216))(*(void *)(a1 + 48)) & 1) != 0)
  {
    return 1;
  }
  uint64_t v3 = *(uint64_t (**)(void))(**(void **)(a1 + 168) + 80);

  return v3();
}

uint64_t sub_10054A650(uint64_t a1, int a2)
{
  uint64_t result = sub_1000A16E8();
  if ((result & 0x400000) != 0 && *(unsigned __int8 *)(a1 + 1209) != a2)
  {
    if (a2)
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      uint64_t v5 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v14 = 0;
        __int16 v15 = 2082;
        id v16 = "";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"starting motion activity monitoring\"}", buf, 0x12u);
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 248))(*(void *)(a1 + 48), 2);
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 248))(*(void *)(a1 + 48), 3);
      uint64_t v6 = *(void *)(a1 + 48);
      int v8 = _NSConcreteStackBlock;
      uint64_t v9 = 3221225472;
      uint64_t v10 = sub_10054A94C;
      double v11 = &unk_1022BAA10;
      uint64_t v12 = a1;
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v6 + 352))();
    }
    else
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      int v7 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v14 = 0;
        __int16 v15 = 2082;
        id v16 = "";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"stopping motion activity monitoring\"}", buf, 0x12u);
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 256))(*(void *)(a1 + 48), 2);
      (*(void (**)(void))(**(void **)(a1 + 48) + 256))();
      CLMotionActivity::init((CLMotionActivity *)(a1 + 392));
      CLMotionActivity::init((CLMotionActivity *)(a1 + 528));
      uint64_t result = CLMotionActivity::init((CLMotionActivity *)(a1 + 664));
      *(unsigned char *)(a1 + 802) = 0;
      *(void *)(a1 + 80_Block_object_dispose(&STACK[0x850], 8) = 0xBFF0000000000000;
    }
    *(unsigned char *)(a1 + 1209) = a2;
  }
  return result;
}

void sub_10054A94C(uint64_t a1, double *a2)
{
  int v3 = *a2 > 0.0 && a2[1] < 0.0;
  uint64_t v4 = *(void *)(a1 + 32);
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022BABA0);
  }
  uint64_t v5 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    double v6 = *a2;
    uint64_t v7 = *((void *)a2 + 1);
    v8[0] = 68289795;
    v8[1] = 0;
    __int16 v9 = 2082;
    uint64_t v10 = "";
    __int16 v11 = 2049;
    double v12 = v6;
    __int16 v13 = 2049;
    uint64_t v14 = v7;
    __int16 v15 = 1025;
    int v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"fetched most recent connection\", \"startTime\":\"%{private}f\", \"endTime\":\"%{private}f\", \"vehicleConnected\":%{private}hhd}", (uint8_t *)v8, 0x2Cu);
  }
  sub_10054AA84(v4, v3);
}

void sub_10054AA84(uint64_t a1, int a2)
{
  if (*(double *)(a1 + 808) >= 0.0)
  {
    if (*(unsigned __int8 *)(a1 + 802) == a2) {
      return;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    double v6 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      int v7 = *(unsigned __int8 *)(a1 + 802);
      int v8 = 68289539;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 1025;
      int v13 = v7;
      __int16 v14 = 1025;
      int v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"vehicle connected state changed\", \"oldVehicleConnectionState\":%{private}d, \"newVehicleConnectionState\":%{private}d}", (uint8_t *)&v8, 0x1Eu);
    }
    *(unsigned char *)(a1 + 802) = a2;
    double v5 = (*(double (**)(uint64_t))(*(void *)a1 + 64))(a1);
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    uint64_t v4 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      int v8 = 68289283;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 1025;
      int v13 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"vehicle connected state changed, was unknown\", \"newVehicleConnectionState\":%{private}d}", (uint8_t *)&v8, 0x18u);
    }
    *(unsigned char *)(a1 + 802) = a2;
    double v5 = (*(double (**)(uint64_t))(*(void *)a1 + 64))(a1) + -60.0;
  }
  *(double *)(a1 + 80_Block_object_dispose(&STACK[0x850], 8) = v5;
}

uint64_t sub_10054AC9C(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 1208) != a2)
  {
    char v2 = a2;
    uint64_t v3 = result;
    if (a2)
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      uint64_t v4 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
      {
        int v6 = 68289026;
        int v7 = 0;
        __int16 v8 = 2082;
        int v9 = "";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"starting battery monitoring\"}", (uint8_t *)&v6, 0x12u);
      }
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 48) + 184))(*(void *)(v3 + 48), 7);
    }
    else
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      double v5 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
      {
        int v6 = 68289026;
        int v7 = 0;
        __int16 v8 = 2082;
        int v9 = "";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"stopping battery monitoring\"}", (uint8_t *)&v6, 0x12u);
      }
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 48) + 192))(*(void *)(v3 + 48), 7);
    }
    *(unsigned char *)(v3 + 120_Block_object_dispose(&STACK[0x850], 8) = v2;
  }
  return result;
}

void sub_10054AE70(uint64_t a1, _DWORD *a2)
{
  ++*(_DWORD *)(a1 + 336);
  LODWORD(v3) = *(_DWORD *)(a1 + 232);
  if (v3 != *a2)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    double v5 = qword_102419568;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO);
    uint64_t v3 = *a2;
    if (v6)
    {
      uint64_t v7 = *(unsigned int *)(a1 + 232);
      v8[0] = 68289539;
      v8[1] = 0;
      __int16 v9 = 2082;
      __int16 v10 = "";
      __int16 v11 = 2049;
      uint64_t v12 = v7;
      __int16 v13 = 2049;
      uint64_t v14 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Reachability changed state\", \"oldReachability\":%{private, location:CLDaemonStatus_Type::Reachability}lld, \"newReachability\":%{private, location:CLDaemonStatus_Type::Reachability}lld}", (uint8_t *)v8, 0x26u);
      LODWORD(v3) = *a2;
    }
  }
  *(_DWORD *)(a1 + 232) = v3;
}

BOOL sub_10054AF98(uint64_t a1)
{
  double v2 = (*(double (**)(uint64_t))(*(void *)a1 + 64))(a1);
  uint64_t v3 = sub_101069FAC();
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 168) + 104))(*(void *)(a1 + 168)) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1) & 1) != 0
    || v3[1] && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1) & 1) != 0)
  {
    return 1;
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1)) {
    return 1;
  }
  LOBYTE(v4) = *(unsigned char *)(a1 + 800);
  if (v2 - (double)v4 < 60.0 || ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1) & 1) != 0) {
    return 1;
  }
  LOBYTE(v5) = *(unsigned char *)(a1 + 801);
  return v2 - (double)v5 < 60.0;
}

uint64_t sub_10054B114(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 972);
}

uint64_t sub_10054B11C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 320))();
}

uint64_t sub_10054B14C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 344))();
}

void sub_10054B17C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 64);
  double v2 = (void *)(a1 + 72);
  if (v1 != (void *)(a1 + 72))
  {
    do
    {
      sub_100D6C16C((unsigned int *)v1[5]);
      uint64_t v3 = (void *)v1[1];
      if (v3)
      {
        do
        {
          unint64_t v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          unint64_t v4 = (void *)v1[2];
          BOOL v5 = *v4 == (void)v1;
          uint64_t v1 = v4;
        }
        while (!v5);
      }
      uint64_t v1 = v4;
    }
    while (v4 != v2);
  }
}

uint64_t sub_10054B1E8(uint64_t **a1, uint64_t a2, int a3)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022BABA0);
  }
  BOOL v6 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v7 = (unsigned __int8 *)a2;
    }
    else {
      uint64_t v7 = *(unsigned __int8 **)a2;
    }
    *(_DWORD *)std::string buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v10 = 2082;
    __int16 v11 = "";
    __int16 v12 = 2082;
    __int16 v13 = v7;
    __int16 v14 = 1026;
    int v15 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"update authorization\", \"clientKey\":%{public, location:escape_only}s, \"isAuthorized\":%{public}hhd}", buf, 0x22u);
  }
  if (sub_1000A7C40(qword_10247B350, qword_10247B358, (unsigned __int8 **)a2) == qword_10247B358) {
    sub_101A64C58();
  }
  *(void *)std::string buf = a2;
  *((unsigned char *)sub_10054E3B4(a1 + 127, (const void **)a2, (uint64_t)&unk_101D0B290, (long long **)buf) + 56) = a3;
  return ((uint64_t (*)(uint64_t **))(*a1)[5])(a1);
}

uint64_t sub_10054B378(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1210);
}

__n128 sub_10054B380(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 352);
  (*(void (**)(void))(**(void **)(a1 + 136) + 80))(*(void *)(a1 + 136));
  if (sub_1004CD1A8(a1 + 1080))
  {
    double v4 = *(double *)(a2 + 76) - *(double *)(a1 + 892);
    if (v4 < 3.0) {
      sub_1004CE06C(a1 + 1080, v4);
    }
    if ((sub_10046FF8C(a1 + 1080) & 1) == 0
      && (*(unsigned int (**)(void))(**(void **)(a1 + 48) + 96))(*(void *)(a1 + 48)))
    {
      sub_1004CE11C(a1 + 1080);
    }
  }
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 816) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 832) = v5;
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 880) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 896) = v8;
  *(_OWORD *)(a1 + 84_Block_object_dispose(&STACK[0x850], 8) = v6;
  *(_OWORD *)(a1 + 864) = v7;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v10 = *(_OWORD *)(a2 + 112);
  long long v11 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 956) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 92_Block_object_dispose(&STACK[0x850], 8) = v10;
  *(_OWORD *)(a1 + 944) = v11;
  *(__n128 *)(a1 + 912) = result;
  return result;
}

double sub_10054B488(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = sub_10054B380(a1 - 32, a2).n128_u64[0];
  return result;
}

void sub_10054B490(uint64_t a1, int a2, int a3, uint64_t a4)
{
  ++*(_DWORD *)(a1 + 356);
  sub_1000C52B4(a1);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 152) + 88))(*(void *)(a1 + 152), a4);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_10054B56C;
  v8[3] = &unk_1022BAA30;
  int v9 = a2;
  int v10 = a3;
  unsigned char v8[4] = a1;
  v8[5] = a4;
  sub_1000C5414(a1, 2u, (uint64_t)v8);
  sub_1000C509C(a1);
}

uint64_t sub_10054B56C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = sub_10012FD50(*a2);
  sub_1000D30A4(v3, v4);
  long long v5 = *(uint64_t (**)(void))(*(void *)*a2 + 16);

  return v5();
}

void sub_10054B5EC(uint64_t a1, int a2, int a3, uint64_t a4)
{
}

uint64_t sub_10054B5F4(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 340);
  if (*(unsigned __int8 *)(a1 + 217) != *(unsigned __int8 *)(a2 + 9))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    int v4 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      long long v5 = "Connected";
      int v6 = *(unsigned __int8 *)(a1 + 217);
      if (*(unsigned char *)(a2 + 9)) {
        long long v7 = "Connected";
      }
      else {
        long long v7 = "Disconnected";
      }
      v11[0] = 68289539;
      if (!v6) {
        long long v5 = "Disconnected";
      }
      v11[1] = 0;
      __int16 v12 = 2082;
      __int16 v13 = "";
      __int16 v14 = 2081;
      int v15 = v7;
      __int16 v16 = 2081;
      double v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Battery changed state\", \"oldBatteryState\":%{private, location:escape_only}s, \"newBatteryState\":%{private, location:escape_only}s}", (uint8_t *)v11, 0x26u);
    }
  }
  uint64_t v8 = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 20_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)a2;
  *(void *)(a1 + 224) = v8;
  float v9 = *(double *)(a1 + 208);
  sub_1004CE128(a1 + 1080, *(unsigned __int8 *)(a1 + 217), v9);
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 136) + 88))(*(void *)(a1 + 136), a1 + 208);
}

void sub_10054B788(uint64_t a1, int a2)
{
  ++*(_DWORD *)(a1 + 344);
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022BABA0);
  }
  int v4 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    int v13 = 68289282;
    int v14 = 0;
    __int16 v15 = 2082;
    __int16 v16 = "";
    __int16 v17 = 1026;
    int v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onThermalStatusNotification\", \"thermalLevel\":%{public}d}", (uint8_t *)&v13, 0x18u);
  }
  int v5 = *(unsigned __int8 *)(a1 + 188);
  int v6 = *(unsigned __int8 *)(a1 + 189);
  *(_DWORD *)(a1 + 192) = a2;
  int v7 = *(_DWORD *)(a1 + 196);
  if (v7 <= a2)
  {
    int v8 = 0;
    *(unsigned char *)(a1 + 189) = 0;
    if (v7 >= a2) {
      goto LABEL_11;
    }
    int v8 = 0;
    *(unsigned char *)(a1 + 18_Block_object_dispose(&STACK[0x850], 8) = 0;
  }
  else
  {
    if (*(_DWORD *)(a1 + 200) < a2) {
      return;
    }
    *(_WORD *)(a1 + 18_Block_object_dispose(&STACK[0x850], 8) = 257;
    int v8 = 1;
  }
  if (v5 != v8)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    float v9 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      int v10 = *(unsigned __int8 *)(a1 + 188);
      int v13 = 68289283;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 1025;
      int v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"thermal (low cpu tasks) transition\", \"acceptable\":%{private}hhd}", (uint8_t *)&v13, 0x18u);
    }
    if (v6 == *(unsigned __int8 *)(a1 + 189)) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }
LABEL_11:
  if (v6 != v8)
  {
LABEL_18:
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    long long v11 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      int v12 = *(unsigned __int8 *)(a1 + 189);
      int v13 = 68289283;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 1025;
      int v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"thermal (high cpu tasks) transition\", \"acceptable\":%{private}hhd}", (uint8_t *)&v13, 0x18u);
    }
LABEL_22:
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  }
}

uint64_t sub_10054BA44(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 184);
}

uint64_t sub_10054BA4C(uint64_t a1)
{
  if (*(int *)(a1 + 192) >= 10)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    uint64_t v2 = qword_102419568;
    uint64_t result = os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO);
    if (result)
    {
      int v4 = *(_DWORD *)(a1 + 192);
      int v14 = 68289283;
      int v15 = 0;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 1025;
      int v19 = v4;
      int v5 = "{\"msg%{public}.0s\":\"thermal level is too high - no network request\", \"thermalLevel\":%{private}d}";
      int v6 = v2;
      os_log_type_t v7 = OS_LOG_TYPE_INFO;
      uint32_t v8 = 24;
LABEL_23:
      _os_log_impl((void *)&_mh_execute_header, v6, v7, v5, (uint8_t *)&v14, v8);
      return 0;
    }
    return result;
  }
  int v9 = *(_DWORD *)(a1 + 232);
  if (v9 == 1)
  {
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224))(a1);
    if (v11)
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      int v12 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
      {
        int v14 = 68289026;
        int v15 = 0;
        __int16 v16 = 2082;
        __int16 v17 = "";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"currently have active or held calls - no network requests over cellular\"}", (uint8_t *)&v14, 0x12u);
      }
    }
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 48) + 312))(*(void *)(a1 + 48)) != 5) {
      return v11 ^ 1u;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    uint64_t v13 = qword_102419568;
    uint64_t result = os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO);
    if (result)
    {
      int v14 = 68289026;
      int v15 = 0;
      __int16 v16 = 2082;
      __int16 v17 = "";
      int v5 = "{\"msg%{public}.0s\":\"currently roaming - no network requests over cellular\"}";
      int v6 = v13;
      os_log_type_t v7 = OS_LOG_TYPE_INFO;
      goto LABEL_22;
    }
  }
  else
  {
    if (v9) {
      return 1;
    }
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    uint64_t v10 = qword_102419568;
    uint64_t result = os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG);
    if (result)
    {
      int v14 = 68289026;
      int v15 = 0;
      __int16 v16 = 2082;
      __int16 v17 = "";
      int v5 = "{\"msg%{public}.0s\":\"no data available - no network requests\"}";
      int v6 = v10;
      os_log_type_t v7 = OS_LOG_TYPE_DEBUG;
LABEL_22:
      uint32_t v8 = 18;
      goto LABEL_23;
    }
  }
  return result;
}

void sub_10054BD6C(uint64_t a1, double a2)
{
  double v2 = a2;
  if (*(double *)(a1 + 976) == a2)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    uint64_t v3 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      int v14 = 68289283;
      int v15 = 0;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 2049;
      double v19 = v2;
      int v4 = "{\"msg%{public}.0s\":\"#uploadTimer already set to this time\", \"uploadTimerFireTime_s\":\"%{private}.09f\"}";
LABEL_11:
      int v6 = v3;
      os_log_type_t v7 = OS_LOG_TYPE_DEBUG;
LABEL_12:
      uint32_t v8 = 28;
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v6, v7, v4, (uint8_t *)&v14, v8);
    }
  }
  else if (*(unsigned char *)(a1 + 973))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    uint64_t v3 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      int v14 = 68289283;
      int v15 = 0;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 2049;
      double v19 = v2;
      int v4 = "{\"msg%{public}.0s\":\"#uploadTimer locked, ignoring timer update request\", \"uploadTimerFireTime_s\":\"%{private}.09f\"}";
      goto LABEL_11;
    }
  }
  else if (*(unsigned char *)(a1 + 257))
  {
    double v9 = *(double *)(a1 + 984);
    if (v9 != 1.79769313e308 && v9 + 3.0 > v2)
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      int v11 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        int v14 = 68289539;
        int v15 = 0;
        __int16 v16 = 2082;
        __int16 v17 = "";
        __int16 v18 = 2049;
        double v19 = v2;
        __int16 v20 = 2049;
        uint64_t v21 = 0x4008000000000000;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#uploadTimer fired twice quickly, adding delay\", \"uploadTimerFireTime_s\":\"%{private}.09f\", \"uploadDelay_s\":\"%{private}.09f\"}", (uint8_t *)&v14, 0x26u);
      }
      double v2 = *(double *)(a1 + 984) + 3.0;
    }
    (*(void (**)(void, double))(**(void **)(a1 + 1056) + 24))(*(void *)(a1 + 1056), v2);
    *(double *)(a1 + 976) = v2;
    if (v2 == 1.79769313e308)
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      uint64_t v12 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 68289026;
        int v15 = 0;
        __int16 v16 = 2082;
        __int16 v17 = "";
        int v4 = "{\"msg%{public}.0s\":\"#uploadTimer disabled\"}";
        int v6 = v12;
        os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
        uint32_t v8 = 18;
        goto LABEL_13;
      }
    }
    else
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      uint64_t v13 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 68289283;
        int v15 = 0;
        __int16 v16 = 2082;
        __int16 v17 = "";
        __int16 v18 = 2049;
        double v19 = v2;
        int v4 = "{\"msg%{public}.0s\":\"#uploadTimer fire date set\", \"uploadTimerFireTime_s\":\"%{private}.09f\"}";
        int v6 = v13;
        os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_12;
      }
    }
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    uint64_t v3 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      int v14 = 68289283;
      int v15 = 0;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 2049;
      double v19 = v2;
      int v4 = "{\"msg%{public}.0s\":\"Upload requirements not met, ignoring #uploadTimer update request\", \"uploadTimerFire"
           "Time_s\":\"%{private}.09f\"}";
      goto LABEL_11;
    }
  }
}

double sub_10054C1A0(uint64_t a1)
{
  uint64_t v1 = *(double **)(a1 + 112);
  if (v1 == (double *)(a1 + 120))
  {
    double v2 = 1.79769313e308;
  }
  else
  {
    double v2 = 1.79769313e308;
    do
    {
      if (v1[5] < v2) {
        double v2 = v1[5];
      }
      uint64_t v3 = (double *)*((void *)v1 + 1);
      if (v3)
      {
        do
        {
          int v4 = v3;
          uint64_t v3 = *(double **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          int v4 = (double *)*((void *)v1 + 2);
          BOOL v5 = *(void *)v4 == (void)v1;
          uint64_t v1 = v4;
        }
        while (!v5);
      }
      uint64_t v1 = v4;
    }
    while (v4 != (double *)(a1 + 120));
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022BABA0);
  }
  int v6 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 134217984;
    double v10 = v2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "getNextUploadTime: min time: %f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    uint32_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CFAbsoluteTime CLHarvestController::getNextUploadTime()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return v2;
}

void sub_10054C3B4(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 257);
  (*(void (**)(uint64_t))(*(void *)a1 + 64))(a1);
  uint64_t v4 = 368;
  if (!v2) {
    uint64_t v4 = 376;
  }
  *(double *)(a1 + v4) = v3 - *(double *)(a1 + 384) + *(double *)(a1 + v4);
  *(double *)(a1 + 384) = v3;
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022BABA0);
  }
  BOOL v5 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(a1 + 336);
    int v7 = *(_DWORD *)(a1 + 340);
    int v8 = *(_DWORD *)(a1 + 344);
    int v9 = *(_DWORD *)(a1 + 348);
    int v10 = *(_DWORD *)(a1 + 352);
    int v11 = *(_DWORD *)(a1 + 356);
    int v12 = *(_DWORD *)(a1 + 360);
    uint64_t v13 = *(void *)(a1 + 368);
    uint64_t v14 = *(void *)(a1 + 376);
    *(void *)__int16 v20 = 68291331;
    *(_WORD *)&v20[8] = 2082;
    *(void *)&v20[10] = "";
    *(_WORD *)&v20[18] = 1025;
    *(_DWORD *)&v20[20] = v6;
    *(_WORD *)&v20[24] = 1025;
    *(_DWORD *)&v20[26] = v7;
    *(_WORD *)&v20[30] = 1025;
    *(_DWORD *)uint64_t v21 = v8;
    *(_WORD *)&v21[4] = 1025;
    *(_DWORD *)&v21[6] = v9;
    *(_WORD *)&v21[10] = 1025;
    *(_DWORD *)&v21[12] = v10;
    *(_WORD *)&v21[16] = 1025;
    *(_DWORD *)&v21[18] = v11;
    *(_WORD *)&v21[22] = 1025;
    *(_DWORD *)long long v22 = v12;
    *(_WORD *)&v22[4] = 2049;
    *(void *)&v22[6] = v13;
    *(_WORD *)&v22[14] = 2049;
    *(void *)&v22[16] = v14;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MainHarvesterMetrics\", \"reachabilityNotifications\":%{private}d, \"batteryNotifications\":%{private}d, \"thermalNotifications\":%{private}d, \"locationNotifications\":%{private}d, \"rawsGpsNotifications\":%{private}d, \"validatedGpsNotifications\":%{private}d, \"managerNotifications\":%{private}d, \"durationMinimumUploadRequirementsMet\":\"%{private}f\", \"durationMinimumUploadRequirementsNotMet\":\"%{private}f\"}", v20, 0x50u);
  }
  *(double *)(a1 + 280) = (*(double (**)(uint64_t))(*(void *)a1 + 64))(a1);
  sub_1005467B0(a1, (uint64_t)v20);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)v20;
  int v15 = (void **)(a1 + 288);
  if (*(char *)(a1 + 311) < 0) {
    operator delete(*v15);
  }
  *(_OWORD *)int v15 = *(_OWORD *)&v20[16];
  *(void *)(a1 + 304) = *(void *)v21;
  v21[7] = 0;
  v20[16] = 0;
  __int16 v16 = (_OWORD *)(a1 + 312);
  if (*(char *)(a1 + 335) < 0)
  {
    operator delete(*(void **)(a1 + 312));
    int v18 = v21[7];
    *__int16 v16 = *(_OWORD *)&v21[8];
    *(void *)(a1 + 32_Block_object_dispose(&STACK[0x850], 8) = *(void *)v22;
    v22[7] = 0;
    v21[8] = 0;
    long long v19 = v23;
    *(_OWORD *)(a1 + 336) = *(_OWORD *)&v22[8];
    *(_OWORD *)(a1 + 352) = v19;
    *(_OWORD *)(a1 + 36_Block_object_dispose(&STACK[0x850], 8) = v24;
    if (v18 < 0) {
      operator delete(*(void **)&v20[16]);
    }
  }
  else
  {
    *__int16 v16 = *(_OWORD *)&v21[8];
    *(void *)(a1 + 32_Block_object_dispose(&STACK[0x850], 8) = *(void *)v22;
    long long v17 = v23;
    *(_OWORD *)(a1 + 336) = *(_OWORD *)&v22[8];
    *(_OWORD *)(a1 + 352) = v17;
    *(_OWORD *)(a1 + 36_Block_object_dispose(&STACK[0x850], 8) = v24;
  }
}

double sub_10054C634(uint64_t a1)
{
  uint64_t v2 = a1 + 836;
  double v3 = *(void **)(a1 + 64);
  uint64_t v4 = (void *)(a1 + 72);
  if (v3 != (void *)(a1 + 72))
  {
    do
    {
      sub_100D6C16C((unsigned int *)v3[5]);
      BOOL v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          int v6 = v5;
          BOOL v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          int v6 = (void *)v3[2];
          _ZF = *v6 == (void)v3;
          double v3 = v6;
        }
        while (!_ZF);
      }
      double v3 = v6;
    }
    while (v6 != v4);
  }
  (*(void (**)(void))(**(void **)(a1 + 152) + 64))(*(void *)(a1 + 152));
  *(_DWORD *)(a1 + 816) = 0xFFFF;
  *(void *)(a1 + 82_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)(a1 + 820) = 0;
  double result = -1.0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)uint64_t v2 = xmmword_101D1C320;
  *(_OWORD *)(v2 + 16) = _Q1;
  *(_OWORD *)(v2 + 32) = _Q1;
  *(_OWORD *)(v2 + 4_Block_object_dispose(&STACK[0x850], 8) = _Q1;
  *(_DWORD *)(a1 + 900) = 0;
  *(void *)(a1 + 904) = 0xBFF0000000000000;
  *(void *)(a1 + 920) = 0;
  *(void *)(a1 + 912) = 0;
  *(_DWORD *)(a1 + 92_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)(v2 + 96) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 940) = 0x7FFFFFFF;
  *(void *)(a1 + 944) = 0;
  *(void *)(a1 + 960) = 0;
  *(void *)(a1 + 952) = 0;
  *(unsigned char *)(a1 + 96_Block_object_dispose(&STACK[0x850], 8) = 0;
  return result;
}

BOOL sub_10054C734(uint64_t a1)
{
  return *(_DWORD *)(a1 + 664) == 6;
}

BOOL sub_10054C744(uint64_t a1)
{
  return *(_DWORD *)(a1 + 664) == 8;
}

BOOL sub_10054C754(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 664);
  return v1 == 4 || v1 == 41;
}

BOOL sub_10054C76C(double *a1)
{
  BOOL v1 = a1[101] > 0.0;
  return (*(double (**)(double *))(*(void *)a1 + 64))(a1) - a1[101] <= 30.0 && v1;
}

uint64_t sub_10054C7D0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 802);
}

void sub_10054C7D8(double *a1)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022BABA0);
  }
  uint64_t v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)a1 + 124);
    uint64_t v4 = *((void *)a1 + 31);
    v10[0] = 68289539;
    v10[1] = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2049;
    uint64_t v14 = v3;
    __int16 v15 = 2049;
    uint64_t v16 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pruneTimer fired\", \"lastPruneTime_s\":\"%{private}.09f\", \"maxHarvestAge_s\":\"%{private}.09f\"}", (uint8_t *)v10, 0x26u);
  }
  a1[124] = (*(double (**)(double *))(*(void *)a1 + 64))(a1);
  BOOL v5 = (void *)*((void *)a1 + 8);
  int v6 = a1 + 9;
  if (v5 != v6)
  {
    do
    {
      sub_100D6BFDC((unsigned int *)v5[5]);
      int v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          int v8 = v7;
          int v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          BOOL v5 = v8;
        }
        while (!v9);
      }
      BOOL v5 = v8;
    }
    while (v8 != v6);
  }
}

void sub_10054C94C(uint64_t a1)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022BABA0);
  }
  uint64_t v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 68289026;
    int v5 = 0;
    __int16 v6 = 2082;
    int v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#uploadTimer fired\"}", (uint8_t *)&v4, 0x12u);
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1))
  {
    sub_100546CB4(a1);
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    uint64_t v3 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 68289026;
      int v5 = 0;
      __int16 v6 = 2082;
      int v7 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#uploadTimer upload requirements not met, skipping upload\"}", (uint8_t *)&v4, 0x12u);
    }
  }
}

void sub_10054CAE8(uint64_t a1, signed int a2, double a3)
{
  unsigned int v21 = a2;
  uint64_t v3 = *(void *)(a1 + 72);
  if (!v3) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 72;
  do
  {
    signed int v7 = *(_DWORD *)(v3 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      BOOL v9 = (uint64_t *)v3;
    }
    else {
      BOOL v9 = (uint64_t *)(v3 + 8);
    }
    if (!v8) {
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v9;
  }
  while (*v9);
  if (v6 == a1 + 72 || *(_DWORD *)(v6 + 32) > a2)
  {
LABEL_11:
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    int v10 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v23 = 2082;
      long long v24 = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unknown SubHarvester notifying of #uploadTimer fire date.\"}", buf, 0x12u);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
    }
    __int16 v11 = qword_102419568;
    if (os_signpost_enabled((os_log_t)qword_102419568))
    {
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v23 = 2082;
      long long v24 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unknown SubHarvester notifying of #uploadTimer fire date.", "{\"msg%{public}.0s\":\"Unknown SubHarvester notifying of #uploadTimer fire date.\"}", buf, 0x12u);
    }
    return;
  }
  *(void *)std::string buf = &v21;
  if (*((double *)sub_1000FEE0C((uint64_t **)(a1 + 112), (int *)&v21, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 5) != a3)
  {
    *(void *)std::string buf = &v21;
    *((double *)sub_1000FEE0C((uint64_t **)(a1 + 112), (int *)&v21, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 5) = a3;
    if (a3 == 1.79769313e308)
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      uint64_t v13 = qword_102419568;
      if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v23 = 2082;
      long long v24 = "";
      __int16 v25 = 2050;
      uint64_t v26 = v21;
      uint64_t v14 = "{\"msg%{public}.0s\":\"#uploadTimer invalid time reported\", \"subHarvester\":%{public, location:CLSubHarves"
            "terIdentifier}lld}";
      __int16 v15 = v13;
      uint32_t v16 = 28;
    }
    else
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      uint64_t v17 = qword_102419568;
      if (!os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      uint64_t v18 = v21;
      double v19 = (*(double (**)(uint64_t))(*(void *)a1 + 64))(a1);
      *(_DWORD *)std::string buf = 68289795;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v23 = 2082;
      long long v24 = "";
      __int16 v25 = 2050;
      uint64_t v26 = v18;
      __int16 v27 = 2049;
      double v28 = a3;
      __int16 v29 = 2049;
      double v30 = a3 - v19;
      uint64_t v14 = "{\"msg%{public}.0s\":\"#uploadTimer upload time set\", \"subHarvester\":%{public, location:CLSubHarvesterIde"
            "ntifier}lld, \"notifiedAttemptTime_s\":\"%{private}.09f\", \"timeUntilAttempt_s\":\"%{private}.09f\"}";
      __int16 v15 = v17;
      uint32_t v16 = 48;
    }
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v14, buf, v16);
LABEL_34:
    if (*(unsigned char *)(a1 + 973))
    {
      *(unsigned char *)(a1 + 974) = 1;
    }
    else
    {
      double v20 = sub_10054C1A0(a1);
      sub_10054BD6C(a1, v20);
    }
    return;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022BABA0);
  }
  int v12 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v23 = 2082;
    long long v24 = "";
    __int16 v25 = 2050;
    uint64_t v26 = v21;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"next attempt time is equal to existing attempt time\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", buf, 0x1Cu);
  }
}

void *sub_10054CF3C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (!*(void *)(a1 + 264))
  {
    int v4 = [[CLKeychainItemWrapper alloc] initWithIdentifier:@"HarvesterMetricsUUID" keyType:kSecAttrAccount];
    int v5 = [(CLKeychainItemWrapper *)v4 objectForKey:kSecValueData];
    if (!v5)
    {
      int v5 = [+[NSUUID UUID] UUIDString];
      [(CLKeychainItemWrapper *)v4 setObject:&__kCFBooleanTrue forKey:kSecAttrIsInvisible];
      [(CLKeychainItemWrapper *)v4 setObject:kSecAttrAccessibleAlwaysThisDeviceOnly forKey:kSecAttrAccessible];
      [(CLKeychainItemWrapper *)v4 setObject:v5 forKey:kSecValueData];
    }
    *(void *)(a1 + 264) = v5;
  }
  uint64_t v6 = [+[NSCalendar currentCalendar](NSCalendar, "currentCalendar") components:12 fromDate:+[NSDate date]];
  [(NSDateComponents *)v6 setMonth:[(NSDateComponents *)v6 month] > 6];
  id v7 = [objc_alloc((Class)NSString) initWithFormat:@"%@%ld%ld", *(void *)(a1 + 264), -[NSDateComponents year](v6, "year"), -[NSDateComponents month](v6, "month")];
  id v8 = [v7 dataUsingEncoding:4];

  CC_SHA1([v8 bytes], (CC_LONG)[v8 length], md);
  id v9 = +[NSMutableString string];
  for (uint64_t i = 0; i != 20; ++i)
    [v9 appendFormat:@"%02x", md[i]];
  return sub_100134750(a2, (char *)[v9 UTF8String]);
}

void sub_10054D16C(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  if (*a4) {
    return;
  }
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022BABA0);
  }
  id v8 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289026;
    int v16 = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"data protection is becoming re-enabled\"}", buf, 0x12u);
  }
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_10054D4DC;
  v12[3] = &unk_1022BAA50;
  int v13 = a2;
  int v14 = a3;
  void v12[4] = a4;
  sub_1000C5414(a1, 9u, (uint64_t)v12);
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1))
  {
    (*(void (**)(void))(**(void **)(a1 + 1056) + 16))(*(void *)(a1 + 1056));
    if ((*(double (**)(uint64_t))(*(void *)a1 + 64))(a1) - *(double *)(a1 + 1008) >= *(double *)(a1 + 1000))
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      __int16 v11 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v16 = 0;
        __int16 v17 = 2082;
        uint64_t v18 = "";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"starting DataProtection-initiated upload\"}", buf, 0x12u);
      }
      sub_100546CB4(a1);
    }
    else
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      id v9 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 68289026;
        int v16 = 0;
        __int16 v17 = 2082;
        uint64_t v18 = "";
        int v10 = "{\"msg%{public}.0s\":\"uploaded too recently, skipping DataProtection-initiated upload\"}";
LABEL_17:
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, v10, buf, 0x12u);
      }
    }
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    id v9 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v16 = 0;
      __int16 v17 = 2082;
      uint64_t v18 = "";
      int v10 = "{\"msg%{public}.0s\":\"upload requirements not met, skipping DataProtection-initiated upload\"}";
      goto LABEL_17;
    }
  }
}

uint64_t sub_10054D4DC(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)*a2 + 48))(*a2, *(unsigned int *)(a1 + 40), a1 + 44, *(void *)(a1 + 32));
}

void sub_10054D514(unsigned char *a1, int a2, int a3, uint64_t a4)
{
  if (a3 == 2)
  {
    sub_10054AA84((uint64_t)a1, *(unsigned __int8 *)(a4 + 48));
    uint64_t v20 = (uint64_t)(a1 + 1080);
    if (a1[802]) {
      sub_1004CDCF8(v20);
    }
    else {
      sub_1004CDEA8(v20);
    }
    *(_OWORD *)(a1 + 392) = *(_OWORD *)a4;
    long long v21 = *(_OWORD *)(a4 + 16);
    long long v22 = *(_OWORD *)(a4 + 32);
    long long v23 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a1 + 456) = v23;
    *(_OWORD *)(a1 + 40_Block_object_dispose(&STACK[0x850], 8) = v21;
    *(_OWORD *)(a1 + 424) = v22;
    long long v24 = *(_OWORD *)(a4 + 80);
    long long v25 = *(_OWORD *)(a4 + 96);
    long long v26 = *(_OWORD *)(a4 + 112);
    *((void *)a1 + 65) = *(void *)(a4 + 128);
    *(_OWORD *)(a1 + 48_Block_object_dispose(&STACK[0x850], 8) = v25;
    *(_OWORD *)(a1 + 504) = v26;
    *(_OWORD *)(a1 + 472) = v24;
    *((void *)a1 + 49) = *((void *)a1 + 60);
    long long v27 = *(_OWORD *)(a4 + 80);
    long long v28 = *(_OWORD *)(a4 + 96);
    long long v29 = *(_OWORD *)(a4 + 112);
    *((void *)a1 + 82) = *(void *)(a4 + 128);
    *((_OWORD *)a1 + 39) = v28;
    *((_OWORD *)a1 + 40) = v29;
    *((_OWORD *)a1 + 3_Block_object_dispose(&STACK[0x850], 8) = v27;
    long long v30 = *(_OWORD *)(a4 + 16);
    long long v31 = *(_OWORD *)(a4 + 32);
    long long v32 = *(_OWORD *)(a4 + 64);
    *((_OWORD *)a1 + 36) = *(_OWORD *)(a4 + 48);
    *((_OWORD *)a1 + 37) = v32;
    *((_OWORD *)a1 + 34) = v30;
    *((_OWORD *)a1 + 35) = v31;
    *((_OWORD *)a1 + 33) = *(_OWORD *)a4;
    goto LABEL_26;
  }
  if (a3 == 3)
  {
    if (*((_DWORD *)a1 + 166) == *(_DWORD *)a4) {
      return;
    }
    id v8 = a1 + 664;
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022BABA0);
    }
    id v9 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68290051;
      int v40 = 0;
      __int16 v41 = 2082;
      uint64_t v42 = "";
      __int16 v43 = 1040;
      int v44 = 136;
      __int16 v45 = 2097;
      long long v46 = a1 + 664;
      __int16 v47 = 1040;
      int v48 = 136;
      __int16 v49 = 2097;
      uint64_t v50 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"dominant motion activity changed\", \"oldDominantActivity\":%{private, location:CLMotionActivity}.*P, \"newDominantActivity\":%{private, location:CLMotionActivity}.*P}", buf, 0x32u);
    }
    int v10 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 136))(a1);
    int v11 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 144))(a1);
    _OWORD *v8 = *(_OWORD *)a4;
    long long v12 = *(_OWORD *)(a4 + 64);
    long long v14 = *(_OWORD *)(a4 + 16);
    long long v13 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a1 + 712) = *(_OWORD *)(a4 + 48);
    *(_OWORD *)(a1 + 72_Block_object_dispose(&STACK[0x850], 8) = v12;
    *(_OWORD *)(a1 + 680) = v14;
    *(_OWORD *)(a1 + 696) = v13;
    long long v16 = *(_OWORD *)(a4 + 96);
    long long v15 = *(_OWORD *)(a4 + 112);
    long long v17 = *(_OWORD *)(a4 + 80);
    *((void *)a1 + 99) = *(void *)(a4 + 128);
    *(_OWORD *)(a1 + 760) = v16;
    *(_OWORD *)(a1 + 776) = v15;
    *(_OWORD *)(a1 + 744) = v17;
    double v18 = (*(double (**)(unsigned char *))(*(void *)a1 + 64))(a1);
    if ((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 136))(a1))
    {
      BOOL v19 = 1;
    }
    else
    {
      if (!v10) {
        goto LABEL_17;
      }
      BOOL v19 = v18 != 0.0;
    }
    a1[800] = v19;
LABEL_17:
    if ((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 144))(a1))
    {
      BOOL v33 = 1;
    }
    else
    {
      if (!v11)
      {
LABEL_22:
        int v34 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 128))(a1);
        uint64_t v35 = (uint64_t)(a1 + 1080);
        if (v34) {
          sub_1004CD984(v35);
        }
        else {
          sub_1004CDB34(v35);
        }
        (*(void (**)(unsigned char *))(*(void *)a1 + 40))(a1);
        goto LABEL_26;
      }
      BOOL v33 = v18 != 0.0;
    }
    a1[801] = v33;
    goto LABEL_22;
  }
LABEL_26:
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472;
  v36[2] = sub_10054D900;
  v36[3] = &unk_1022BAA50;
  int v37 = a2;
  int v38 = a3;
  v36[4] = a4;
  sub_1000C5414((uint64_t)a1, 3u, (uint64_t)v36);
}

uint64_t sub_10054D900(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)*a2 + 32))(*a2, *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), *(void *)(a1 + 32));
}

void sub_10054D934(unsigned __int8 *a1, int a2, int a3, int *a4)
{
  switch(a3)
  {
    case 6:
      sub_10054AE70((uint64_t)a1, a4 + 1);
      break;
    case 7:
      sub_10054B5F4((uint64_t)a1, (uint64_t)a4);
      break;
    case 8:
      a1[184] = *(unsigned char *)a4;
      break;
    case 13:
      sub_10054B788((uint64_t)a1, *a4);
      break;
    case 15:
      a1[256] = *(unsigned char *)a4;
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022BABA0);
      }
      id v8 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
      {
        int v9 = a1[256];
        *(_DWORD *)std::string buf = 68289283;
        int v14 = 0;
        __int16 v15 = 2082;
        long long v16 = "";
        __int16 v17 = 1025;
        int v18 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"battery save mode state update\", \"batterySaverEnabled\":%{private}hhd}", buf, 0x18u);
      }
      (*(void (**)(unsigned __int8 *))(*(void *)a1 + 40))(a1);
      break;
    default:
      break;
  }
  sub_100546EEC(a1);
  sub_1000C52B4((uint64_t)a1);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  _DWORD v10[2] = sub_10054DB70;
  v10[3] = &unk_1022BAA50;
  int v11 = a2;
  int v12 = a3;
  v10[4] = a4;
  sub_1000C5414((uint64_t)a1, 0, (uint64_t)v10);
  sub_1000C509C((uint64_t)a1);
}

uint64_t sub_10054DB70(uint64_t a1, uint64_t *a2)
{
  return sub_100D6B284(*a2, *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), *(void *)(a1 + 32));
}

void sub_10054DB84(uint64_t a1, uint64_t a2, void *a3)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022BABA0);
  }
  uint64_t v6 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    [a3 type];
    *(_DWORD *)std::string buf = 68289539;
    int v9 = 0;
    __int16 v10 = 2082;
    int v11 = "";
    __int16 v12 = 1025;
    BOOL v13 = a3 != 0;
    __int16 v14 = 2049;
    id v15 = [a3 type];
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onVisit\", \"validLocationOfInterest\":%{private}hhd, \"locationOfInterestType\":%{private, location:RTLocationOfInterestType}lld}", buf, 0x22u);
  }
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10054DD04;
  v7[3] = &unk_1022BAA98;
  v7[5] = a3;
  v7[6] = a1;
  v7[4] = a2;
  sub_1000C5414(a1, 7u, (uint64_t)v7);
}

uint64_t sub_10054DD04(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  int v4 = sub_10012FD50(*a2);
  sub_1000D30A4(v3, v4);
  int v5 = *(uint64_t (**)(void))(*(void *)*a2 + 64);

  return v5();
}

void sub_10054DD80(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_10054DDF4;
  v4[3] = &unk_1022BAA70;
  int v5 = a2;
  v4[4] = a3;
  v4[5] = a4;
  sub_1000C5414(a1, 8u, (uint64_t)v4);
}

uint64_t sub_10054DDF4(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)*a2 + 72))(*a2, *(unsigned int *)(a1 + 48), **(unsigned int **)(a1 + 32), *(void *)(a1 + 40));
}

void sub_10054DE2C(uint64_t a1, int a2, void *a3)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3321888768;
  _DWORD v4[2] = sub_10054DEE0;
  v4[3] = &unk_1022BAAB8;
  int v6 = a2;
  uint64_t v3 = (std::__shared_weak_count *)a3[1];
  v4[4] = *a3;
  int v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1000C5414(a1, 6u, (uint64_t)v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_10054DEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1000DB0A0(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10054DEE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  int v5 = *(std::__shared_weak_count **)(a1 + 40);
  uint64_t v7 = v6;
  id v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 56))(v3, v4, &v7);
  if (v8) {
    sub_1000DB0A0(v8);
  }
}

void sub_10054DF5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10054DF74(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10054DF90(uint64_t a1)
{
  BOOL v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

uint64_t sub_10054DFA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 408))();
}

uint64_t sub_10054DFD0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 104))();
}

uint64_t sub_10054DFF8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 188);
}

uint64_t sub_10054E000(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 256);
}

uint64_t sub_10054E008(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 72))();
}

void sub_10054E030(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_10054E060(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10054E090(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_10054E0C0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10054E0C0(a1, *a2);
    sub_10054E0C0(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[6];
    if (v4) {
      sub_1000DB0A0(v4);
    }
    operator delete(a2);
  }
}

void sub_10054E120(void ***a1)
{
  BOOL v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_1000D7D80(v4 - 40);
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_10054E1A4(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10054E250(a1, a2);
    uint64_t v6 = a1[1];
    uint64_t v7 = 5 * a2;
    unint64_t v8 = v6 + 40 * a2;
    uint64_t v9 = 8 * v7;
    do
    {
      sub_10054E2A4(v6, a3);
      v6 += 40;
      v9 -= 40;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_10054E230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *sub_10054E250(void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    sub_1001D7FD4();
  }
  double result = (char *)sub_1002E5328((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

uint64_t sub_10054E2A4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100100330(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned int **)(a2 + 16); i; uint64_t i = *(unsigned int **)i)
    sub_1001F0928(a1, i + 4, i + 4);
  return a1;
}

void sub_10054E304(_Unwind_Exception *a1)
{
  sub_1000D7D80(v1);
  _Unwind_Resume(a1);
}

void sub_10054E31C(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        uint64_t v3 = sub_1000D7D80(v3 - 40);
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *sub_10054E37C(void *a1, unsigned int *a2)
{
  double result = sub_1001EF6E0(a1, a2);
  if (result)
  {
    sub_10017FB70(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t *sub_10054E3B4(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_1001070AC((uint64_t)a1, &v9, a2);
  double result = *v6;
  if (!*v6)
  {
    sub_10054E44C((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000EDF90(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

unsigned char *sub_10054E44C@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x850], 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  double result = v6 + 32;
  unint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    double result = sub_1000DC48C(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)double result = v9;
  }
  v6[56] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_10054E4D8(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_1001F7F34(v3, v2);
  _Unwind_Resume(a1);
}

void sub_10054E528()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D23098;
      v0[3] = unk_101D230A8;
      v0[4] = xmmword_101D230B8;
      v0[0] = xmmword_101D23078;
      v0[1] = unk_101D23088;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_10054E608(_Unwind_Exception *a1)
{
}

uint64_t sub_10054E620()
{
  sub_100134750(&v2, "com.apple.locationd.bundle-/System/Library/LocationBundles/AppGenius.bundle");
  sub_100134750(v3, "com.apple.locationd.bundle-/System/Library/LocationBundles/Traffic.bundle");
  sub_100134750(v4, "com.apple.locationd.bundle-/System/Library/LocationBundles/AltimeterHarvest.bundle");
  sub_100134750(v5, "com.apple.locationd.bundle-/System/Library/LocationBundles/TraceHarvest.bundle");
  sub_100134750(v6, "com.apple.locationd.bundle-/System/Library/LocationBundles/IonosphereHarvest.bundle");
  qword_10247B350 = 0;
  qword_10247B358 = 0;
  qword_10247B360 = 0;
  qword_10247B350 = (uint64_t)operator new(0x78uLL);
  qword_10247B358 = qword_10247B350;
  qword_10247B360 = qword_10247B350 + 120;
  uint64_t v0 = 0;
  qword_10247B358 = (uint64_t)sub_1000DC3CC((uint64_t)&qword_10247B360, &v2, &v7, (char *)qword_10247B350);
  do
  {
    if (SHIBYTE(v6[v0 + 2]) < 0) {
      operator delete((void *)v6[v0]);
    }
    v0 -= 3;
  }
  while (v0 != -15);
  return __cxa_atexit((void (*)(void *))sub_1004BEADC, &qword_10247B350, (void *)&_mh_execute_header);
}

void sub_10054E77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  qword_10247B358 = v11;
  sub_1000A7B4C(&a9);
  uint64_t v13 = 0;
  while (1)
  {
    if (*(&a11 + v13 + 119) < 0) {
      operator delete(*(void **)(&a11 + v13 + 96));
    }
    v13 -= 24;
    if (v13 == -120) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_10054E7F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v8 = *(_OWORD *)a3;
  uint64_t v9 = *(void *)(a3 + 16);
  if (a2 && !sub_100DF39C4(a1))
  {
    if (qword_1024192A0 != -1) {
      dispatch_once(&qword_1024192A0, &stru_1022BAD00);
    }
    uint64_t v5 = qword_1024192A8;
    if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Minimum distance not reached, overriding notification with kCMWorkoutLocationTypeIndoor", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192A0 != -1) {
        dispatch_once(&qword_1024192A0, &stru_1022BAD00);
      }
      long long v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLIndoorOutdoorDetectorPhone::notifyIndoorOutdoorState(BOOL, const CLIndoorOutdoorProtocol::IndoorOutdoorResult &) const", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    *(void *)&long long v8 = 1;
  }
  return sub_100DF3A68(a1, a2, &v8);
}

void sub_10054E9CC(uint64_t a1)
{
  sub_10054EA3C(a1);

  operator delete();
}

float *sub_10054EA04(uint64_t a1, float a2, float a3)
{
  return sub_1007636BC(a1 + 440, a2, a3);
}

void sub_10054EA0C(id a1)
{
  qword_1024192A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "IndoorOutdoor");
}

uint64_t sub_10054EA3C(uint64_t a1)
{
  *(void *)a1 = off_1022F9400;
  if (*(char *)(a1 + 639) < 0) {
    operator delete(*(void **)(a1 + 616));
  }
  sub_10054EAC4(a1 + 512);
  long long v2 = *(void **)(a1 + 464);
  if (v2)
  {
    *(void *)(a1 + 472) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 463) < 0) {
    operator delete(*(void **)(a1 + 440));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_10054EAC4(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }
  uint64_t v5 = (void **)(a1 + 24);
  sub_10005D798(&v5);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10054EB30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 32);
  if (v3)
  {
    *(void *)(a2 + 40) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + _Block_object_dispose(&STACK[0x850], 8) = v4;
    operator delete(v4);
  }
}

double sub_10054EB88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)a1 = &off_1022BAD30;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  return result;
}

void *sub_10054EBC0(void *a1)
{
  *a1 = &off_1022BAD30;
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022BADB0);
  }
  long long v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, void *))(*a1 + 24))(__p, a1);
    uint64_t v3 = (void **)__p[0];
    if (v11 >= 0) {
      uint64_t v3 = __p;
    }
    uint64_t v4 = a1 + 3;
    if (*((char *)a1 + 47) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    *(_DWORD *)std::string buf = 68289538;
    int v13 = 0;
    __int16 v14 = 2082;
    id v15 = "";
    __int16 v16 = 2082;
    __int16 v17 = v3;
    __int16 v18 = 2082;
    BOOL v19 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGnssExtensions,releasing assertion\", \"client\":%{public, location:escape_only}s, \"reason\":%{public, location:escape_only}s}", buf, 0x26u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  if (a1[10])
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022BADB0);
    }
    uint64_t v5 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#wigo,off,CLGnssExtensions", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022BADB0);
      }
      LOWORD(__p[0]) = 0;
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLDaemonGnssExtensionsClient::~CLDaemonGnssExtensionsClient()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    AnalyticsSendEventLazy();
    [*(id *)(a1[10] + 16) unregister:*(void *)(a1[10] + 8) forNotification:0];
    uint64_t v6 = a1[10];
    a1[10] = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  else
  {
    a1[10] = 0;
  }
  uint64_t v7 = a1[9];
  a1[9] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (*((char *)a1 + 71) < 0) {
    operator delete((void *)a1[6]);
  }
  if (*((char *)a1 + 47) < 0) {
    operator delete((void *)a1[3]);
  }
  sub_100426880(a1);
  return a1;
}

void sub_10054EF20(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

NSDictionary *__cdecl sub_10054EF2C(id a1)
{
  return (NSDictionary *)&off_1023970B8;
}

void sub_10054EF3C(void *a1)
{
  sub_10054EBC0(a1);

  operator delete();
}

void sub_10054EF74(uint64_t a1, uint64_t a2)
{
  __int16 v10 = &off_1023926A8;
  uint64_t v11 = a2;
  long long v8 = +[NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
  sub_100550A78("kCLConnectionMessageGnssExtensionsClientError", &v6);
  if (*(void *)(a1 + 8))
  {
    uint64_t v5 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CLConnection::sendMessage();
    if (v5) {
      sub_1000DB0A0(v5);
    }
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022BADB0);
    }
    uint64_t v3 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "fConnection invalid", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022BADB0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonGnssExtensionsClient::sendErrorMessage(const NSString *) const", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  if (v7) {
    sub_1000DB0A0(v7);
  }
}

void sub_10054F184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1000DB0A0(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10054F1BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
  int v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 40)
    {
LABEL_7:
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022BADB0);
      }
      uint64_t v6 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
        if (*(char *)(v7 + 23) >= 0) {
          long long v8 = (const char *)v7;
        }
        else {
          long long v8 = *(const char **)v7;
        }
        *(_DWORD *)std::string buf = 68289282;
        int v14 = 0;
        __int16 v15 = 2082;
        __int16 v16 = "";
        __int16 v17 = 2082;
        __int16 v18 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,CLGnssExtensions,unrecognized message\", \"message\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      return;
    }
    uint64_t v4 = (void *)*v4;
  }
  else if (v5 != 40)
  {
    goto LABEL_7;
  }
  if (memcmp(v4, "kCLConnectionMessageGnssExtensionsClient", 0x28uLL)) {
    goto LABEL_7;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022BADB0);
  }
  uint64_t v9 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 68289538;
    int v14 = 0;
    __int16 v15 = 2082;
    __int16 v16 = "";
    __int16 v17 = 2082;
    __int16 v18 = "kCLConnectionMessageGnssExtensionsClient";
    __int16 v19 = 2050;
    uint64_t v20 = a1;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGnssExtensions\", \"message\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
  }
  __int16 v10 = *(CLConnectionMessage **)a2;
  uint64_t v11 = *(void *)(a2 + 8);
  v12[0] = v10;
  v12[1] = (CLConnectionMessage *)v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10054F3F0(a1, v12);
  if (v11) {
    sub_1000DB0A0((std::__shared_weak_count *)v11);
  }
}

void sub_10054F3D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10054F3F0(uint64_t a1, CLConnectionMessage **a2)
{
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(void *)(a1 + 32)) {
      goto LABEL_3;
    }
  }
  else if (*(unsigned char *)(a1 + 47))
  {
LABEL_3:
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022BADB0);
    }
    uint64_t v4 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
      if (v32 >= 0) {
        int v5 = __p;
      }
      else {
        int v5 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v35 = 2082;
      double v36 = "";
      __int16 v37 = 2082;
      int v38 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLGnssExtensions\", \"assertion already taken by\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (SHIBYTE(v32) < 0) {
        operator delete(__p[0]);
      }
    }
    sub_10054EF74(a1, @"Assertion already taken");
    return;
  }
  sub_100134750(buf, "com.apple.locationd.gnss-extensions");
  char v6 = sub_100550148(a1, (uint64_t *)buf);
  char v7 = v6;
  if ((SBYTE3(v38) & 0x80000000) == 0)
  {
    if (v6) {
      goto LABEL_15;
    }
LABEL_23:
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022BADB0);
    }
    __int16 v16 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
      __int16 v17 = v32 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v35 = 2082;
      double v36 = "";
      __int16 v37 = 2082;
      int v38 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLGnssExtensions,not entitled,ignoring\", \"client\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (SHIBYTE(v32) < 0) {
        operator delete(__p[0]);
      }
    }
    sub_10054EF74(a1, @"missing entitlement: com.apple.locationd.gnss-extensions");
    return;
  }
  operator delete(*(void **)buf);
  if ((v7 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_15:
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  uint64_t v9 = Dictionary;
  if (Dictionary)
  {
    id v10 = [Dictionary objectForKeyedSubscript:@"kCLConnectionMessagePurposeKey"];
    id v11 = [v9 objectForKeyedSubscript:@"kCLConnectionMessageBundleIdentifierKey"];
    id v12 = [v9 objectForKeyedSubscript:@"kCLConnectionMessageBundlePathKey"];
    if (v11)
    {
      int v13 = v12;
      if (v12)
      {
        if (v10)
        {
          if ([v10 length])
          {
            int v14 = (const std::string::value_type *)[v10 UTF8String];
            __int16 v15 = (void *)(a1 + 24);
            std::string::assign((std::string *)(a1 + 24), v14);
            if ([v11 length])
            {
              sub_100134750(&__str, (char *)[v11 UTF8String]);
              sub_1000B7144(&__str, (uint64_t)buf);
              sub_1000A7FBC((uint64_t)buf, (uint64_t)__p);
              goto LABEL_79;
            }
            if ([v13 length])
            {
              sub_100134750(&__str, (char *)[v13 UTF8String]);
              sub_1000B6F5C(&__str, (uint64_t)buf);
              sub_1000A7FBC((uint64_t)buf, (uint64_t)__p);
LABEL_79:
              long long v28 = (void **)(a1 + 48);
              if (*(char *)(a1 + 71) < 0) {
                operator delete(*v28);
              }
              *(_OWORD *)long long v28 = *(_OWORD *)__p;
              *(void *)(a1 + 64) = v32;
              HIBYTE(v32) = 0;
              LOBYTE(__p[0]) = 0;
              sub_1000064D0((uint64_t)buf);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              sub_100E92BC0();
            }
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022BADB0);
            }
            long long v29 = qword_102419528;
            if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
            {
              (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
              if (v32 >= 0) {
                long long v30 = __p;
              }
              else {
                long long v30 = (void **)__p[0];
              }
              if (*(char *)(a1 + 47) < 0) {
                __int16 v15 = (void *)*v15;
              }
              *(_DWORD *)std::string buf = 68289538;
              *(_DWORD *)&uint8_t buf[4] = 0;
              __int16 v35 = 2082;
              double v36 = "";
              __int16 v37 = 2082;
              int v38 = v30;
              __int16 v39 = 2082;
              int v40 = v15;
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLGnssExtensions,no beneficiary,request denined\", \"requested by\":%{public, location:escape_only}s, \"reason\":%{public, location:escape_only}s}", buf, 0x26u);
              if (SHIBYTE(v32) < 0) {
                operator delete(__p[0]);
              }
            }
            sub_10054EF74(a1, @"null beneficiary client key");
            if (*(char *)(a1 + 47) < 0)
            {
              **(unsigned char **)(a1 + 24) = 0;
              *(void *)(a1 + 32) = 0;
            }
            else
            {
              *(unsigned char *)(a1 + 24) = 0;
              *(unsigned char *)(a1 + 47) = 0;
            }
          }
          else
          {
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022BADB0);
            }
            long long v26 = qword_102419528;
            if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
            {
              (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
              long long v27 = v32 >= 0 ? __p : (void **)__p[0];
              *(_DWORD *)std::string buf = 68289282;
              *(_DWORD *)&uint8_t buf[4] = 0;
              __int16 v35 = 2082;
              double v36 = "";
              __int16 v37 = 2082;
              int v38 = v27;
              _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLGnssExtensions,empty reason,request denined\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
              if (SHIBYTE(v32) < 0) {
                operator delete(__p[0]);
              }
            }
            sub_10054EF74(a1, @"empty reason");
          }
        }
        else
        {
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022BADB0);
          }
          long long v24 = qword_102419528;
          if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
          {
            (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
            long long v25 = v32 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)std::string buf = 68289282;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v35 = 2082;
            double v36 = "";
            __int16 v37 = 2082;
            int v38 = v25;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLGnssExtensions,missing reason,request denined\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
            if (SHIBYTE(v32) < 0) {
              operator delete(__p[0]);
            }
          }
          sub_10054EF74(a1, @"missing reason");
        }
      }
      else
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022BADB0);
        }
        long long v22 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
        {
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
          long long v23 = v32 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)std::string buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v35 = 2082;
          double v36 = "";
          __int16 v37 = 2082;
          int v38 = v23;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLGnssExtensions,missing bundlePath,request denined\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
          if (SHIBYTE(v32) < 0) {
            operator delete(__p[0]);
          }
        }
        sub_10054EF74(a1, @"missing bundlePath");
      }
    }
    else
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022BADB0);
      }
      uint64_t v20 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
        long long v21 = v32 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v35 = 2082;
        double v36 = "";
        __int16 v37 = 2082;
        int v38 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLGnssExtensions,missing bundleID,request denined\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (SHIBYTE(v32) < 0) {
          operator delete(__p[0]);
        }
      }
      sub_10054EF74(a1, @"missing bundleID");
    }
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022BADB0);
    }
    __int16 v18 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "GnssExtension dictionary empty", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022BADB0);
      }
      LOWORD(__p[0]) = 0;
      __int16 v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonGnssExtensionsClient::handleMessageGnssExtensionAssertion(std::shared_ptr<CLConnectionMessage>)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
  }
}

void sub_1005500F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100550148(uint64_t a1, uint64_t *a2)
{
  uint64_t isEntitled = CLConnection::isEntitled();
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022BADB0);
  }
  int v5 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(__p, a1);
    if (v10 >= 0) {
      char v6 = __p;
    }
    else {
      char v6 = (void **)__p[0];
    }
    if (*((char *)a2 + 23) >= 0) {
      char v7 = a2;
    }
    else {
      char v7 = (uint64_t *)*a2;
    }
    *(_DWORD *)std::string buf = 68289794;
    int v12 = 0;
    __int16 v13 = 2082;
    int v14 = "";
    __int16 v15 = 2082;
    __int16 v16 = v6;
    __int16 v17 = 2082;
    __int16 v18 = v7;
    __int16 v19 = 1026;
    int v20 = isEntitled;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLGnssExtensions\", \"requested by\":%{public, location:escape_only}s, \"entitlement\":%{public, location:escape_only}s, \"entitled\":%{public}hhd}", buf, 0x2Cu);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  return isEntitled;
}

void sub_1005502C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 16), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BADD0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    long long v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonGnssExtensionsClient::onGnssLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BADD0);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonGnssExtensionsClient::onGnssLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1005505EC(a4, v6, v7, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10055047C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *__cdecl sub_10055049C(id a1)
{
  return (NSDictionary *)&off_1023970E0;
}

NSDictionary *sub_1005504A8(unsigned int *a1)
{
  uint64_t v2 = *a1;
  if (v2 < 6) {
    uint64_t v3 = v2 + 1;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = +[NSNumber numberWithLong:v3];
  int v5 = +[NSNumber numberWithInt:a1[1]];
  LODWORD(v6) = a1[2];
  uint64_t v7 = +[NSNumber numberWithFloat:v6];
  LODWORD(v_Block_object_dispose(&STACK[0x850], 8) = a1[3];
  uint64_t v9 = +[NSNumber numberWithFloat:v8];
  LODWORD(v10) = a1[4];
  char v11 = +[NSNumber numberWithFloat:v10];
  LODWORD(v12) = a1[5];
  return +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", v4, @"satSystem", v5, @"satId", v7, @"elevationDeg", v9, @"azimuthDeg", v11, @"l1Cn0", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v12), @"l5Cn0", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)a1 + 24)), @"isTracked", +[NSNumber numberWithBool:*((unsigned __int8 *)a1 + 25)], @"isPhaseTracked", 0);
}

void sub_1005505EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 680);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022BADB0);
  }
  uint64_t v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67240192;
    BOOL v22 = v6 != 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLGnssExtensions, onGnssLocationNotification, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022BADB0);
    }
    LODWORD(v17) = 67240192;
    HIDWORD(v17) = v6 != 0;
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDaemonGnssExtensionsClient::onGnssLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  if (v6)
  {
    id v8 = +[NSMutableArray array];
    uint64_t v9 = *(void *)(a4 + 680);
    double v10 = *(_OWORD **)v9;
    char v11 = *(_OWORD **)(v9 + 8);
    while (v10 != v11)
    {
      *(_OWORD *)__int16 v16 = *v10;
      *(_OWORD *)&v16[3] = *(_OWORD *)((char *)v10 + 12);
      [v8 addObject:sub_1005504A8(v16)];
      double v10 = (_OWORD *)((char *)v10 + 28);
    }
    v19[0] = @"type";
    v19[1] = @"version";
    v20[0] = &off_1023926C0;
    v20[1] = &off_1023926D8;
    v19[2] = @"data";
    v20[2] = v8;
    +[NSDictionary dictionaryWithObjects:v20 forKeys:v19 count:3];
    sub_100550ADC("kCLConnectionMessageGnssExtensionsData", &v17);
    if (*(void *)(a1 + 8))
    {
      __int16 v15 = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      CLConnection::sendMessage();
      if (v15) {
        sub_1000DB0A0(v15);
      }
    }
    else
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022BADB0);
      }
      double v12 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "fConnection invalid", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022BADB0);
        }
        __int16 v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLDaemonGnssExtensionsClient::onGnssLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
    }
    if (v18) {
      sub_1000DB0A0(v18);
    }
  }
}

void sub_1005509E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    sub_1000DB0A0(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_100550A18(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100550A48(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void *sub_100550A78@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x70uLL);
  double result = sub_10017E9C0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100550AC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100550ADC@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x70uLL);
  double result = sub_10017E9C0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100550B2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100550B40()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_100550BC0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_100550C50(_Unwind_Exception *a1)
{
}

void sub_100550CF8(id a1)
{
  qword_10247B368 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLTelephonyServiceSilo"];
}

uint64_t sub_100550DB8(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100557E84;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_10247B378 != -1) {
    dispatch_once(&qword_10247B378, block);
  }
  return qword_102489FB0;
}

BOOL sub_100550FC8(uint64_t a1, unsigned char *a2)
{
  if (!*(unsigned char *)(a1 + 160))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    uint64_t v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)std::string buf = 68289282;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 1026;
      int v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  if (*(void *)(a1 + 144))
  {
    int v6 = _CTServerConnectionIsAnyCallActiveOrHeld();
    BOOL v7 = v6 == 0;
    if (v6)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      id v8 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "_CTServerConnectionIsAnyCallActiveOrHeld failed", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BB328);
        }
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTelephonyService::getActiveCall(BOOL &)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
    }
    else
    {
      *a2 = 0;
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    double v10 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      double v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTelephonyService::getActiveCall(BOOL &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    return 0;
  }
  return v7;
}

uint64_t sub_1005514B0(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247B398, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247B398))
  {
    uint64_t v12 = sub_100103240();
    byte_10247B390 = sub_10073D584(v12);
    __cxa_guard_release(&qword_10247B398);
  }
  if (!byte_10247B390) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 160))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v3 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)std::string buf = 68289282;
      int v15 = 0;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 1026;
      int v19 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  if (!*(void *)(a1 + 144))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    id v8 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    LOWORD(v13[0]) = 0;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTelephonyService::getCampOnlyState()", "%s\n", v9);
    goto LABEL_32;
  }
  CFDictionaryRef v4 = (const __CFDictionary *)sub_100551F04(a1);
  if (!v4)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    double v10 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Can't get camp only state", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    LOWORD(v13[0]) = 0;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTelephonyService::getCampOnlyState()", "%s\n", v9);
LABEL_32:
    if (v9 != (char *)buf) {
      free(v9);
    }
    return 0;
  }
  sub_10013FA80((int)buf, v4);
  v13[0] = 0;
  unsigned int v5 = sub_10013E418((uint64_t)buf, @"kCTCampOnly", v13);
  int v6 = v13[0];
  CFRelease(v4);
  if (v6 == 1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0;
  }
  sub_10013F3C4(buf);
  return v7;
}

void sub_1005518B0(_Unwind_Exception *a1)
{
}

void sub_100551924(uint64_t a1, uint64_t a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BB3A8);
  }
  CFDictionaryRef v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a2 + 24);
    unsigned int v6 = *(_DWORD *)a2;
    int v7 = *(_DWORD *)(a2 + 4);
    int v8 = *(unsigned __int8 *)(a2 + 32);
    int v9 = *(_DWORD *)(a2 + 8);
    int v10 = *(_DWORD *)(a2 + 12);
    int v11 = *(_DWORD *)(a2 + 16);
    int v12 = *(unsigned __int8 *)(a2 + 33);
    *(_DWORD *)std::string buf = 134285313;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = v6;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v7;
    *(_WORD *)&unsigned char buf[24] = 1026;
    *(_DWORD *)&buf[26] = v8;
    *(_WORD *)&buf[30] = 1026;
    *(_DWORD *)int v38 = v9;
    *(_WORD *)&v38[4] = 1026;
    *(_DWORD *)&v38[6] = v10;
    __int16 v39 = 1026;
    int v40 = v11;
    __int16 v41 = 1026;
    int v42 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#timingadvance,currentTimeStamp,%{private}f,lte_ta_val,%{public}d,lte_connection_state,%{public}d,isLte,%{public}d,nr5g_ta_val,%{public}d,nr5g_connection_state,%{public}d,nr5g_ta_offset,%{public}d,isNr,%{public}d", buf, 0x36u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BB3A8);
    }
    uint64_t v21 = *(void *)(a2 + 24);
    unsigned int v22 = *(_DWORD *)a2;
    int v23 = *(_DWORD *)(a2 + 4);
    int v24 = *(unsigned __int8 *)(a2 + 32);
    int v25 = *(_DWORD *)(a2 + 8);
    int v26 = *(_DWORD *)(a2 + 12);
    int v27 = *(_DWORD *)(a2 + 16);
    int v28 = *(unsigned __int8 *)(a2 + 33);
    *(_DWORD *)values = 134285313;
    *(void *)&values[4] = v21;
    *(_WORD *)&values[12] = 1026;
    *(_DWORD *)&values[14] = v22;
    *(_WORD *)&values[18] = 1026;
    *(_DWORD *)&values[20] = v23;
    LOWORD(v31) = 1026;
    *(_DWORD *)((char *)&v31 + 2) = v24;
    HIWORD(v31) = 1026;
    *(_DWORD *)uint64_t v32 = v25;
    *(_WORD *)&v32[4] = 1026;
    *(_DWORD *)&v32[6] = v26;
    __int16 v33 = 1026;
    int v34 = v27;
    __int16 v35 = 1026;
    int v36 = v28;
    long long v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTelephonyService::updateTAInfo(CLEurekaCommon_Type::TAData_t)", "%s\n", v29);
    if (v29 != buf) {
      free(v29);
    }
  }
  CFNumberRef v13 = sub_1004D3BC0((unsigned int *)a2);
  CFNumberRef v14 = sub_1004D3BFC((void *)(a2 + 24));
  CFNumberRef v15 = sub_1004D3BC0((unsigned int *)(a2 + 8));
  CFTypeRef v16 = sub_100007264((unsigned char *)(a2 + 32));
  CFTypeRef v17 = sub_100007264((unsigned char *)(a2 + 33));
  __int16 v18 = v17;
  if (v13 && v14 && v15 && v16 && v17)
  {
    *(_OWORD *)std::string buf = *(_OWORD *)off_1022BB1B8;
    *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)off_1022BB1C8;
    *(void *)int v38 = @"kTimingAdvanceisNRKey";
    *(void *)values = v13;
    *(void *)&values[8] = v15;
    *(void *)&values[16] = v14;
    CFTypeRef v31 = v16;
    *(void *)uint64_t v32 = v17;
    CFDictionaryRef v19 = CFDictionaryCreate(0, (const void **)buf, (const void **)values, 5, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionaryRef v20 = v19;
    (*(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(void *)a1 + 256))(a1, @"kTimingAdvanceInfoNotification", v19);
  }
  else if (!v13)
  {
    goto LABEL_14;
  }
  CFRelease(v13);
LABEL_14:
  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v18) {
    CFRelease(v18);
  }
}

void sub_100551CEC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (*(void *)(a1 + 152))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    unsigned int v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v8 = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      int v11 = "";
      __int16 v12 = 1026;
      unsigned int v13 = a2;
      __int16 v14 = 1026;
      unsigned int v15 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTelephonyService assertCommCenter\", \"client\":%{public}d, \"level\":%{public}d}", (uint8_t *)&v8, 0x1Eu);
    }
    sub_1010EB920(*(void *)(a1 + 152), a2, a3);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    int v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v8 = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      int v11 = "";
      __int16 v12 = 1026;
      unsigned int v13 = a2;
      __int16 v14 = 1026;
      unsigned int v15 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTelephonyService assert skipped\", \"client\":%{public}d, \"level\":%{public}d}", (uint8_t *)&v8, 0x1Eu);
    }
  }
}

uint64_t sub_100551F04(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 144);
  if (result)
  {
    unint64_t v2 = _CTServerConnectionCopyRegistrationInfo();
    int v3 = v2;
    unint64_t v4 = HIDWORD(v2);
    if (v2)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      uint64_t v5 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 67240448;
        int v8 = v3;
        __int16 v9 = 1026;
        int v10 = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Registration dictionary copy returned: %{public}d %{public}d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BB328);
        }
        unsigned int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CFDictionaryRef CLTelephonyService::copyRegistrationInfoDictionary()", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
    }
    return 0;
  }
  return result;
}

id sub_1005521A4(uint64_t a1, uint64_t a2)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BB328);
  }
  unint64_t v4 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    __int16 v7 = 2082;
    int v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#irat CLTelephonyService fetching Irat-StreamingInfo\"}", (uint8_t *)v6, 0x12u);
  }
  return sub_1010EBE24(*(void ***)(a1 + 152), a2);
}

uint64_t sub_1005522D0(uint64_t a1, uint64_t *a2)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BB328);
  }
  unint64_t v4 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CELL_LOC: getting detected cells", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    *(_WORD *)long long v59 = 0;
    __int16 v43 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)", "%s\n", v43);
    if (v43 != buf) {
      free(v43);
    }
  }
  CFArrayRef theArray = 0;
  unsigned __int8 v53 = 0;
  uint64_t v50 = 0;
  int v51 = 0;
  uint64_t v52 = 0;
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5 != *a2)
  {
    do
    {
      v5 -= 696;
      sub_1000FA860((uint64_t)(a2 + 2), v5);
    }
    while (v5 != v6);
  }
  a2[1] = v6;
  if (!*(unsigned char *)(a1 + 160))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    __int16 v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  if (*(void *)(a1 + 144))
  {
    uint64_t v9 = _CTServerConnectionCellMonitorCopyCellInfo();
    if (v9) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = v53 == 0;
    }
    BOOL v11 = v10 || theArray == 0;
    int v12 = !v11;
    unsigned int v48 = v12;
    if (v11)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      __int16 v33 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109888;
        *(_DWORD *)&uint8_t buf[4] = v9;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = HIDWORD(v9);
        *(_WORD *)&unsigned char buf[14] = 2048;
        *(void *)&uint8_t buf[16] = theArray;
        __int16 v69 = 1024;
        int v70 = v53;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#Warning CELL_LOC: _CTServerConnectionCellMonitorCopyCellInfo failed err(%d,%d) cellsArray(%p) valid(%d)", buf, 0x1Eu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BB328);
        }
        *(_DWORD *)long long v59 = 67109888;
        *(_DWORD *)&v59[4] = v9;
        *(_WORD *)&v59[8] = 1024;
        *(_DWORD *)&v59[10] = HIDWORD(v9);
        __int16 v60 = 2048;
        CFArrayRef v61 = theArray;
        __int16 v62 = 1024;
        int v63 = v53;
        int v34 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)", "%s\n", v34);
        if (v34 != buf) {
          free(v34);
        }
      }
    }
    else
    {
      CFIndex Count = CFArrayGetCount(theArray);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      __int16 v14 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = Count;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CELL_LOC: processing %d dictionaries (detected)", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BB328);
        }
        *(_DWORD *)long long v59 = 67109120;
        *(_DWORD *)&v59[4] = Count;
        __int16 v47 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)", "%s\n", v47);
        if (v47 != buf) {
          free(v47);
        }
      }
      if (Count >= 1)
      {
        CFIndex v15 = 0;
        CFTypeRef v16 = (const void *)kCTCellMonitorDerivedMCC;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v15);
          CFTypeID v18 = CFGetTypeID(ValueAtIndex);
          if (v18 == CFDictionaryGetTypeID())
          {
            CFDictionaryRef v49 = (CFDictionaryRef)ValueAtIndex;
            if (CFDictionaryContainsKey((CFDictionaryRef)ValueAtIndex, v16))
            {
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_1022BB328);
              }
              CFDictionaryRef v19 = qword_102419638;
              if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "CELL_LOC: derivedMCC dictionary", buf, 2u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419630 != -1) {
                  dispatch_once(&qword_102419630, &stru_1022BB328);
                }
                *(_WORD *)long long v59 = 0;
                int v28 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)", "%s\n", v28);
                if (v28 != buf) {
                  free(v28);
                }
              }
              sub_10055C374(&v49, (uint64_t)&v50);
            }
            else
            {
              sub_10010FE14(v59, &v49);
              if (*(_DWORD *)&v59[4] == 2)
              {
                unint64_t v22 = a2[1];
                if (v22 >= a2[2])
                {
                  uint64_t v23 = sub_1005630D0(a2, (uint64_t)v59);
                }
                else
                {
                  sub_1000FC2C4((uint64_t)(a2 + 2), a2[1], (uint64_t)v59);
                  uint64_t v23 = v22 + 696;
                  a2[1] = v22 + 696;
                }
                a2[1] = v23;
              }
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_1022BB328);
              }
              int v24 = qword_102419638;
              if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
              {
                sub_10142D00C((uint64_t)v59);
                int v25 = buf;
                if (buf[23] < 0) {
                  int v25 = *(unsigned char **)buf;
                }
                *(_DWORD *)int v55 = 136315138;
                *(void *)&v55[4] = v25;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CELL_LOC: Adding cell, %s", v55, 0xCu);
                if ((buf[23] & 0x80000000) != 0) {
                  operator delete(*(void **)buf);
                }
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419630 != -1) {
                  dispatch_once(&qword_102419630, &stru_1022BB328);
                }
                sub_10142D00C((uint64_t)v59);
                long long v29 = v55;
                if (v56 < 0) {
                  long long v29 = *(unsigned char **)v55;
                }
                int v57 = 136315138;
                long long v58 = v29;
                long long v30 = (char *)_os_log_send_and_compose_impl();
                if (v56 < 0) {
                  operator delete(*(void **)v55);
                }
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)", "%s\n", v30);
                if (v30 != buf) {
                  free(v30);
                }
              }
              if (v67 < 0) {
                operator delete(__p);
              }
              if (v64)
              {
                long long v65 = v64;
                operator delete(v64);
              }
            }
          }
          else
          {
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_1022BB328);
            }
            CFDictionaryRef v20 = qword_102419638;
            if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
            {
              CFTypeID TypeID = CFDictionaryGetTypeID();
              *(_DWORD *)std::string buf = 134349056;
              *(void *)&uint8_t buf[4] = TypeID;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "CELL_LOC: Invalid dictionary %{public}ld", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_1022BB328);
              }
              CFTypeID v26 = CFDictionaryGetTypeID();
              *(_DWORD *)long long v59 = 134349056;
              *(void *)&v59[4] = v26;
              int v27 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)", "%s\n", v27);
              if (v27 != buf) {
                free(v27);
              }
            }
          }
          ++v15;
        }
        while (Count != v15);
      }
      if (v51 != v50)
      {
        for (uint64_t i = *a2; i != a2[1]; i += 696)
        {
          if ((*(_DWORD *)(i + 8) - 3) <= 2)
          {
            sub_10142E204(i, (uint64_t)&v50);
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_1022BB328);
            }
            int v36 = qword_102419638;
            if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
            {
              sub_10142D00C(i);
              __int16 v37 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
              *(_DWORD *)long long v59 = 136315138;
              *(void *)&v59[4] = v37;
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "CELL_LOC: Updating Cell, %s", v59, 0xCu);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_1022BB328);
              }
              sub_10142D00C(i);
              int v38 = v59;
              if (SHIBYTE(v61) < 0) {
                int v38 = *(unsigned char **)v59;
              }
              *(_DWORD *)int v55 = 136315138;
              *(void *)&v55[4] = v38;
              __int16 v39 = (char *)_os_log_send_and_compose_impl();
              if (SHIBYTE(v61) < 0) {
                operator delete(*(void **)v59);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)", "%s\n", v39);
              if (v39 != buf) {
                free(v39);
              }
            }
          }
        }
      }
    }
    if (theArray) {
      CFRelease(theArray);
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    int v40 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v41 = 0x66FD0EB66FD0EB67 * ((a2[1] - *a2) >> 3);
      *(_DWORD *)std::string buf = 134217984;
      *(void *)&uint8_t buf[4] = v41;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "CELL_LOC: detected cells,%lu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      uint64_t v44 = 0x66FD0EB66FD0EB67 * ((a2[1] - *a2) >> 3);
      *(_DWORD *)long long v59 = 134217984;
      *(void *)&v59[4] = v44;
      __int16 v45 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)", "%s\n", v45);
      if (v45 != buf) {
        free(v45);
      }
    }
    uint64_t v32 = v48;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    CFTypeRef v31 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      *(_WORD *)long long v59 = 0;
      long long v46 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTelephonyService::getDetectedCells(std::vector<CLCell> &)", "%s\n", v46);
      if (v46 != buf) {
        free(v46);
      }
    }
    uint64_t v32 = 0;
  }
  if (v50)
  {
    int v51 = v50;
    operator delete(v50);
  }
  return v32;
}

void sub_10055322C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10055332C(uint64_t a1)
{
  BOOL v1 = sub_10055B43C(a1);
  if (v1) {
    return sub_10055B0D4(v1, 0);
  }
  else {
    return 11;
  }
}

uint64_t sub_1005533A0(uint64_t a1, int a2)
{
  unint64_t v2 = (__CFString *)sub_10097DC8C(a1 + 176, a2);
  id v3 = [(__CFString *)v2 length];
  if (!v3) {
    return 11;
  }

  return sub_10055B0D4((int)v3, v2);
}

uint64_t sub_100553454(uint64_t a1, int a2)
{
  id v3 = sub_10097DC7C(a1 + 176, a2);
  uint64_t v4 = sub_10005ED78(v3);
  uint64_t v5 = v4;
  if (v4 <= 3 && v4 != 2)
  {
    if (sub_1005514B0(a1)) {
      return 7;
    }
    else {
      return v5;
    }
  }
  return v5;
}

void sub_100553580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10055359C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 160))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    unint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v3 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)std::string buf = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      int v12 = "";
      __int16 v13 = 1026;
      int v14 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  if (*(void *)(a1 + 144))
  {
    if (_CTServerConnectionCopyOperatorName())
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      uint64_t v4 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "_CTServerConnectionCopyOperatorName failed", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BB328);
        }
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTelephonyService::getServingOperator(std::string &)", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    uint64_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTelephonyService::getServingOperator(std::string &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  return 0;
}

void sub_100553A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100553A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100553AB4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 160))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    unint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v3 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)std::string buf = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      int v12 = "";
      __int16 v13 = 1026;
      int v14 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  if (*(void *)(a1 + 144))
  {
    if (_CTServerConnectionCopyProviderNameUsingCarrierBundle())
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      uint64_t v4 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "_CTServerConnectionCopyProviderNameUsingCarrierBundle failed", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BB328);
        }
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTelephonyService::getServingProviderFromCarrierBundle(std::string &)", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    uint64_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTelephonyService::getServingProviderFromCarrierBundle(std::string &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  return 0;
}

BOOL sub_100553ED4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 160))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    unint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v3 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)std::string buf = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      int v14 = "";
      __int16 v15 = 1026;
      int v16 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  if (*(void *)(a1 + 144))
  {
    int SignalStrength = _CTServerConnectionGetSignalStrength();
    BOOL v5 = SignalStrength == 0;
    if (SignalStrength)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      uint64_t v6 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "_CTServerConnectionGetSignalStrength failed", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BB328);
        }
        __int16 v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTelephonyService::getSignalStrength(int &)", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    int v8 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTelephonyService::getSignalStrength(int &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    return 0;
  }
  return v5;
}

BOOL sub_100554480(uint64_t a1, char *cStr)
{
  if (!*(unsigned char *)(a1 + 160))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    uint64_t v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)std::string buf = 68289282;
      int v15 = 0;
      __int16 v16 = 2082;
      CFTypeRef v17 = "";
      __int16 v18 = 1026;
      int v19 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  if (*(void *)(a1 + 144))
  {
    CFStringRef v6 = sub_1000B73E0(cStr);
    uint64_t v7 = _CTServerConnectionResetModemWithCrashLogs();
    BOOL v8 = v7 == 0;
    if (v7)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      uint64_t v9 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "_CTServerConnectionResetModemWithCrashLogs failed", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BB328);
        }
        int v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTelephonyService::resetModem(const char *)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
    }
    if (v6) {
      CFRelease(v6);
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    int v10 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      __int16 v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTelephonyService::resetModem(const char *)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    return 0;
  }
  return v8;
}

BOOL sub_100554878(uint64_t a1, char *cStr)
{
  if (!*(unsigned char *)(a1 + 160))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    uint64_t v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)std::string buf = 68289282;
      int v15 = 0;
      __int16 v16 = 2082;
      CFTypeRef v17 = "";
      __int16 v18 = 1026;
      int v19 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  if (*(void *)(a1 + 144))
  {
    CFStringRef v6 = sub_1000B73E0(cStr);
    uint64_t v7 = _CTServerConnectionDumpBasebandState();
    BOOL v8 = v7 == 0;
    if (v7)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      uint64_t v9 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "_CTServerConnectionDumpBasebandState failed", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BB328);
        }
        int v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTelephonyService::dumpLog(const char *)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
    }
    if (v6) {
      CFRelease(v6);
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    int v10 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      __int16 v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTelephonyService::dumpLog(const char *)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    return 0;
  }
  return v8;
}

BOOL sub_100554C64(uint64_t a1, uint64_t *a2, int a3)
{
  if (!sub_10055C83C(a1, a2, a3) || a2[1] != *a2) {
    return 1;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BB328);
  }
  int v5 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning CELL_LOC: can't figure out the serving cell", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    CFStringRef v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTelephonyService::getServingCells(std::vector<CLCell> &, BOOL)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    return 0;
  }
  return result;
}

uint64_t sub_100554E44(uint64_t a1, uint64_t a2)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 224))(a1)
    || !(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 232))(a1, a2 + 4))
  {
    return 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 240);

  return v4(a1, a2 + 8, a2 + 12);
}

uint64_t sub_100554F14(unsigned int a1)
{
  char v2 = sub_1000FFBA8();
  unsigned int v3 = a1 != 0;
  if (a1 > 1) {
    unsigned int v3 = 255;
  }
  if (a1) {
    unsigned int v4 = 255;
  }
  else {
    unsigned int v4 = 0;
  }
  if (v2) {
    return v3;
  }
  else {
    return v4;
  }
}

BOOL sub_100554F5C(unsigned int a1)
{
  char v2 = sub_1000FFBA8();
  uint64_t v3 = 1;
  if (a1) {
    uint64_t v3 = 2;
  }
  if (a1 > 1) {
    uint64_t v3 = 0;
  }
  if (v2) {
    return v3;
  }
  else {
    return a1 == 0;
  }
}

uint64_t sub_100554FA4(uint64_t a1)
{
  if (a1 == 2) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 255;
  }
  if (a1 == 1) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_100554FBC(int a1)
{
  uint64_t v1 = 1;
  if (a1 == 1) {
    uint64_t v1 = 2;
  }
  if (a1 == 255) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_100554FD4(int a1)
{
  if (a1 == 255) {
    unsigned int v1 = 255;
  }
  else {
    unsigned int v1 = 0;
  }
  if ((a1 - 2) >= 2) {
    return v1;
  }
  else {
    return 1;
  }
}

uint64_t sub_100554FF4(uint64_t result)
{
  if (result != 1)
  {
    if (result == 255) {
      return result;
    }
    if (result != 3) {
      return 0;
    }
  }
  return 1;
}

int *sub_10055501C(int *a1, int a2, long long *a3, long long *a4, uint64_t a5)
{
  *a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)a1 + 8, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *((void *)a1 + 3) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 2) = v8;
  }
  *((unsigned char *)a1 + 32) = 1;
  if (*((char *)a4 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)a1 + 40, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v9 = *a4;
    *((void *)a1 + 7) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 10) = v9;
  }
  *((unsigned char *)a1 + 64) = 1;
  sub_1000E9354(a1 + 18);
  *((unsigned char *)a1 + 8_Block_object_dispose(&STACK[0x850], 8) = 1;
  sub_1000E9354(a1 + 24);
  *((unsigned char *)a1 + 112) = 1;
  sub_1000E9354(a1 + 30);
  *((unsigned char *)a1 + 136) = 1;
  if (!sub_100186344(a5, @"Location", (void *)a1 + 9))
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    int v10 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = *a1;
      *(_DWORD *)std::string buf = 67240192;
      int v21 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#BundleInfo,constructor,unable to get location dict,descriptor,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BB348);
      }
      CFTypeRef v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLTelephonyService_Type::BundleInfo::BundleInfo(BundleDescriptor, const std::string &, const std::string &, const CLNameValuePair &)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
  if (!sub_100186344(a5, @"SUPL", (void *)a1 + 12))
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    int v12 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *a1;
      *(_DWORD *)std::string buf = 67240192;
      int v21 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#BundleInfo,constructor,unable to get SUPL dict,descriptor,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BB348);
      }
      __int16 v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLTelephonyService_Type::BundleInfo::BundleInfo(BundleDescriptor, const std::string &, const std::string &, const CLNameValuePair &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
  if (!sub_100186344(a5, @"LocationSecondaryOverlay", (void *)a1 + 15))
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    int v14 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = *a1;
      *(_DWORD *)std::string buf = 67240192;
      int v21 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#BundleInfo,constructor,unable to get secondary settings dict,descriptor,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BB348);
      }
      int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLTelephonyService_Type::BundleInfo::BundleInfo(BundleDescriptor, const std::string &, const std::string &, const CLNameValuePair &)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
  }
  return a1;
}

void sub_100555580(_Unwind_Exception *a1)
{
  sub_10013F3C4(v6);
  sub_10013F3C4(v5);
  sub_10013F3C4(v4);
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

CFStringRef sub_1005555F4(_DWORD *a1)
{
  if ((*a1 - 2) < 2) {
    return @"kSlotTwo";
  }
  if (*a1 != 255) {
    return @"kSlotOne";
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022BB348);
  }
  uint64_t v3 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
  {
    if (*a1 == 255) {
      int v4 = 255;
    }
    else {
      int v4 = 0;
    }
    if ((*a1 - 2) < 2) {
      int v4 = 1;
    }
    *(_DWORD *)std::string buf = 67240192;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#BundleInfo,getKeyForSim,unexpected sim,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CFStringRef CLTelephonyService_Type::BundleInfo::getKeyForSim() const", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return 0;
}

CFStringRef sub_100555818(int *a1)
{
  int v1 = *a1;
  if (*a1 == 1 || v1 == 3) {
    return @"Operator";
  }
  if (v1 != 255) {
    return @"Carrier";
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022BB348);
  }
  uint64_t v5 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
  {
    int v6 = *a1;
    if (*a1 != 1)
    {
      if (v6 == 255)
      {
LABEL_17:
        *(_DWORD *)std::string buf = 67240192;
        int v9 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#BundleInfo,getKeyForBundleType,unexpected bundle type,%{public}d", buf, 8u);
        goto LABEL_18;
      }
      if (v6 != 3)
      {
        int v6 = 0;
        goto LABEL_17;
      }
    }
    int v6 = 1;
    goto LABEL_17;
  }
LABEL_18:
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CFStringRef CLTelephonyService_Type::BundleInfo::getKeyForBundleType() const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return 0;
}

void sub_100555A48(int *a1, CFTypeRef cf1, const __CFDictionary *a3)
{
  if (CFEqual(cf1, @"Location"))
  {
    sub_100555D30((uint64_t)a1, a3);
  }
  else if (CFEqual(cf1, @"SUPL"))
  {
    sub_100555D90((uint64_t)a1, a3);
  }
  else if (CFEqual(cf1, @"LocationSecondaryOverlay"))
  {
    sub_100555DF0((uint64_t)a1, a3);
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    int v6 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      int v7 = *a1;
      *(_DWORD *)std::string buf = 138478083;
      CFTypeRef v10 = cf1;
      __int16 v11 = 1026;
      int v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#BundleInfo,setDict,called with unexpected dictName,%{private}@,descriptor,%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BB348);
      }
      long long v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLTelephonyService_Type::BundleInfo::setDict(CFStringRef, NSDictionary *)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

uint64_t sub_100555D30(uint64_t a1, const __CFDictionary *a2)
{
  *(unsigned char *)(a1 + 8_Block_object_dispose(&STACK[0x850], 8) = 1;
  sub_10013FA80((int)v4, a2);
  sub_1004CE798(a1 + 72, (uint64_t)v4);
  return sub_10013F3C4(v4);
}

void sub_100555D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100555D90(uint64_t a1, const __CFDictionary *a2)
{
  *(unsigned char *)(a1 + 112) = 1;
  sub_10013FA80((int)v4, a2);
  sub_1004CE798(a1 + 96, (uint64_t)v4);
  return sub_10013F3C4(v4);
}

void sub_100555DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100555DF0(uint64_t a1, const __CFDictionary *a2)
{
  *(unsigned char *)(a1 + 136) = 1;
  sub_10013FA80((int)v4, a2);
  sub_1004CE798(a1 + 120, (uint64_t)v4);
  return sub_10013F3C4(v4);
}

void sub_100555E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

CFStringRef sub_100555E50(int *a1, void *a2)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022BB348);
  }
  int v4 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a1;
    *(_DWORD *)std::string buf = 67240192;
    int v27 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#BundleInfo,writeToDict,descriptor,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    int v20 = *a1;
    int v24 = 67240192;
    int v25 = v20;
    int v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTelephonyService_Type::BundleInfo::writeToDict(NSMutableDictionary *) const", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
  CFStringRef result = sub_1005555F4(a1);
  if (result)
  {
    CFStringRef v7 = result;
    CFStringRef result = sub_100555818(a1);
    if (result)
    {
      CFStringRef v8 = result;
      int v9 = a1 + 2;
      if (*((char *)a1 + 31) < 0) {
        int v9 = (void *)*v9;
      }
      CFTypeRef v10 = +[NSString stringWithUTF8String:v9];
      __int16 v11 = a1 + 10;
      if (*((char *)a1 + 63) < 0) {
        __int16 v11 = (void *)*v11;
      }
      int v12 = +[NSString stringWithUTF8String:v11];
      int v13 = (const void *)sub_1000E9358((uint64_t)(a1 + 18));
      CFPropertyListRef v14 = (id)CFPropertyListCreateDeepCopy(kCFAllocatorDefault, v13, 1uLL);
      int v15 = (const void *)sub_1000E9358((uint64_t)(a1 + 24));
      CFPropertyListRef v16 = (id)CFPropertyListCreateDeepCopy(kCFAllocatorDefault, v15, 1uLL);
      CFTypeRef v17 = (const void *)sub_1000E9358((uint64_t)(a1 + 30));
      v22[0] = @"kBundleIDKey";
      v22[1] = @"kBundleVersionKey";
      v23[0] = v10;
      v23[1] = v12;
      v22[2] = @"Location";
      v22[3] = @"SUPL";
      void v23[2] = v14;
      v23[3] = v16;
      v22[4] = @"LocationSecondaryOverlay";
      v23[4] = (id)CFPropertyListCreateDeepCopy(kCFAllocatorDefault, v17, 1uLL);
      __int16 v18 = +[NSDictionary dictionaryWithObjects:v23 forKeys:v22 count:5];
      id v19 = [a2 objectForKey:v7];
      if (!v19)
      {
        id v19 = objc_alloc_init((Class)NSMutableDictionary);
        [a2 setObject:v19 forKey:v7];
      }
      return (const __CFString *)[v19 setObject:v18 forKey:v8];
    }
  }
  return result;
}

void sub_100556180(uint64_t a1, void *a2)
{
  sub_1005571A8(a1);
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022BB348);
  }
  int v4 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)a1;
    LODWORD(buf) = 67240192;
    HIDWORD(buf) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#BundleInfo,readFromDict,descriptor,%{public}d", (uint8_t *)&buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    __int16 v43 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTelephonyService_Type::BundleInfo::readFromDict(NSDictionary *)", "%s\n", v43);
    if (v43 != (char *)&buf) {
      free(v43);
    }
  }
  CFStringRef v6 = sub_1005555F4((_DWORD *)a1);
  if (v6)
  {
    CFStringRef v7 = sub_100555818((int *)a1);
    if (v7)
    {
      id v8 = [a2 objectForKey:v6];
      if (v8)
      {
        id v9 = [v8 objectForKey:v7];
        CFTypeRef v10 = v9;
        if (v9)
        {
          id v11 = [v9 objectForKey:@"kBundleIDKey"];
          if (v11)
          {
            std::string::assign((std::string *)(a1 + 8), (const std::string::value_type *)[v11 UTF8String]);
            id v12 = [v10 objectForKey:@"Location"];
            if (v12)
            {
              CFPropertyListRef DeepCopy = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, v12, 1uLL);
              sub_1004CE540(&buf, DeepCopy);
              sub_1004CE798(a1 + 72, (uint64_t)&buf);
              sub_10013F3C4(&buf);
              CFRelease(DeepCopy);
              id v14 = [v10 objectForKey:@"SUPL"];
              if (v14)
              {
                CFPropertyListRef v15 = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, v14, 1uLL);
                sub_1004CE540(&buf, v15);
                sub_1004CE798(a1 + 96, (uint64_t)&buf);
                sub_10013F3C4(&buf);
                CFRelease(v15);
                id v16 = [v10 objectForKey:@"LocationSecondaryOverlay"];
                if (v16)
                {
                  CFPropertyListRef v17 = CFPropertyListCreateDeepCopy(kCFAllocatorDefault, v16, 1uLL);
                  sub_1004CE540(&buf, v17);
                  sub_1004CE798(a1 + 120, (uint64_t)&buf);
                  sub_10013F3C4(&buf);
                  CFRelease(v17);
                  id v18 = [v10 objectForKey:@"kBundleVersionKey"];
                  if (v18)
                  {
                    std::string::assign((std::string *)(a1 + 40), (const std::string::value_type *)[v18 UTF8String]);
                    return;
                  }
                  if (qword_102419600 != -1) {
                    dispatch_once(&qword_102419600, &stru_1022BB348);
                  }
                  __int16 v37 = qword_102419608;
                  if (!os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
                  {
LABEL_125:
                    if (!sub_10013D1A0(115, 0)) {
                      return;
                    }
                    bzero(&buf, 0x65CuLL);
                    if (qword_102419600 == -1) {
                      goto LABEL_133;
                    }
                    goto LABEL_132;
                  }
                  int v38 = *(_DWORD *)a1;
                  if ((*(_DWORD *)a1 - 2) >= 2)
                  {
                    int v39 = *(_DWORD *)a1;
                    if (v38 == 255) {
                      goto LABEL_116;
                    }
                    int v39 = 0;
                  }
                  else
                  {
                    int v39 = 1;
                  }
                  if (v38 == 1)
                  {
LABEL_109:
                    int v42 = 1;
LABEL_124:
                    LODWORD(buf) = 67240448;
                    HIDWORD(buf) = v39;
                    __int16 v46 = 1026;
                    int v47 = v42;
                    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "#BundleInfo,readFromDict,no entry for bundle Version,sim,%{public}d,bundle type,%{public}d", (uint8_t *)&buf, 0xEu);
                    goto LABEL_125;
                  }
                  if (v38 != 255)
                  {
                    if (v38 != 3)
                    {
                      int v42 = 0;
                      goto LABEL_124;
                    }
                    goto LABEL_109;
                  }
LABEL_116:
                  int v42 = 255;
                  goto LABEL_124;
                }
                if (qword_102419600 != -1) {
                  dispatch_once(&qword_102419600, &stru_1022BB348);
                }
                __int16 v33 = qword_102419608;
                if (!os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
                {
LABEL_119:
                  if (!sub_10013D1A0(115, 0)) {
                    return;
                  }
                  bzero(&buf, 0x65CuLL);
                  if (qword_102419600 != -1) {
                    dispatch_once(&qword_102419600, &stru_1022BB348);
                  }
                  goto LABEL_133;
                }
                int v34 = *(_DWORD *)a1;
                if ((*(_DWORD *)a1 - 2) >= 2)
                {
                  int v35 = *(_DWORD *)a1;
                  if (v34 == 255) {
                    goto LABEL_103;
                  }
                  int v35 = 0;
                }
                else
                {
                  int v35 = 1;
                }
                if (v34 == 1)
                {
LABEL_96:
                  int v41 = 1;
LABEL_118:
                  LODWORD(buf) = 67240448;
                  HIDWORD(buf) = v35;
                  __int16 v46 = 1026;
                  int v47 = v41;
                  _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "#BundleInfo,readFromDict,no entry for secondary settings dict,sim,%{public}d,bundle type,%{public}d", (uint8_t *)&buf, 0xEu);
                  goto LABEL_119;
                }
                if (v34 != 255)
                {
                  if (v34 != 3)
                  {
                    int v41 = 0;
                    goto LABEL_118;
                  }
                  goto LABEL_96;
                }
LABEL_103:
                int v41 = 255;
                goto LABEL_118;
              }
              if (qword_102419600 != -1) {
                dispatch_once(&qword_102419600, &stru_1022BB348);
              }
              long long v29 = qword_102419608;
              if (!os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
              {
LABEL_112:
                if (!sub_10013D1A0(115, 0)) {
                  return;
                }
                bzero(&buf, 0x65CuLL);
                if (qword_102419600 != -1) {
                  dispatch_once(&qword_102419600, &stru_1022BB348);
                }
                goto LABEL_133;
              }
              int v30 = *(_DWORD *)a1;
              if ((*(_DWORD *)a1 - 2) >= 2)
              {
                int v31 = *(_DWORD *)a1;
                if (v30 == 255) {
                  goto LABEL_90;
                }
                int v31 = 0;
              }
              else
              {
                int v31 = 1;
              }
              if (v30 == 1)
              {
LABEL_83:
                int v40 = 1;
LABEL_111:
                LODWORD(buf) = 67240448;
                HIDWORD(buf) = v31;
                __int16 v46 = 1026;
                int v47 = v40;
                _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "#BundleInfo,readFromDict,no entry for SUPL dict,sim,%{public}d,bundle type,%{public}d", (uint8_t *)&buf, 0xEu);
                goto LABEL_112;
              }
              if (v30 != 255)
              {
                if (v30 != 3)
                {
                  int v40 = 0;
                  goto LABEL_111;
                }
                goto LABEL_83;
              }
LABEL_90:
              int v40 = 255;
              goto LABEL_111;
            }
            if (qword_102419600 != -1) {
              dispatch_once(&qword_102419600, &stru_1022BB348);
            }
            CFTypeID v26 = qword_102419608;
            if (!os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
            {
LABEL_99:
              if (!sub_10013D1A0(115, 0)) {
                return;
              }
              bzero(&buf, 0x65CuLL);
              if (qword_102419600 != -1) {
                dispatch_once(&qword_102419600, &stru_1022BB348);
              }
              goto LABEL_133;
            }
            int v27 = *(_DWORD *)a1;
            if ((*(_DWORD *)a1 - 2) >= 2)
            {
              int v28 = *(_DWORD *)a1;
              if (v27 == 255) {
                goto LABEL_77;
              }
              int v28 = 0;
            }
            else
            {
              int v28 = 1;
            }
            if (v27 == 1)
            {
LABEL_71:
              int v36 = 1;
LABEL_98:
              LODWORD(buf) = 67240448;
              HIDWORD(buf) = v28;
              __int16 v46 = 1026;
              int v47 = v36;
              _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#BundleInfo,readFromDict,no entry for location dict,sim,%{public}d,bundle type,%{public}d", (uint8_t *)&buf, 0xEu);
              goto LABEL_99;
            }
            if (v27 != 255)
            {
              if (v27 != 3)
              {
                int v36 = 0;
                goto LABEL_98;
              }
              goto LABEL_71;
            }
LABEL_77:
            int v36 = 255;
            goto LABEL_98;
          }
          if (qword_102419600 != -1) {
            dispatch_once(&qword_102419600, &stru_1022BB348);
          }
          uint64_t v23 = qword_102419608;
          if (!os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
          {
LABEL_86:
            if (!sub_10013D1A0(115, 0)) {
              return;
            }
            bzero(&buf, 0x65CuLL);
            if (qword_102419600 != -1) {
              dispatch_once(&qword_102419600, &stru_1022BB348);
            }
            goto LABEL_133;
          }
          int v24 = *(_DWORD *)a1;
          if ((*(_DWORD *)a1 - 2) >= 2)
          {
            int v25 = *(_DWORD *)a1;
            if (v24 == 255) {
              goto LABEL_60;
            }
            int v25 = 0;
          }
          else
          {
            int v25 = 1;
          }
          if (v24 == 1)
          {
LABEL_54:
            int v32 = 1;
LABEL_85:
            LODWORD(buf) = 67240448;
            HIDWORD(buf) = v25;
            __int16 v46 = 1026;
            int v47 = v32;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#BundleInfo,readFromDict,no entry for bundle ID,sim,%{public}d,bundle type,%{public}d", (uint8_t *)&buf, 0xEu);
            goto LABEL_86;
          }
          if (v24 != 255)
          {
            if (v24 != 3)
            {
              int v32 = 0;
              goto LABEL_85;
            }
            goto LABEL_54;
          }
LABEL_60:
          int v32 = 255;
          goto LABEL_85;
        }
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BB348);
        }
        int v21 = qword_102419608;
        if (!os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
        {
LABEL_63:
          if (!sub_10013D1A0(115, 0)) {
            return;
          }
          bzero(&buf, 0x65CuLL);
          if (qword_102419600 == -1) {
            goto LABEL_133;
          }
          goto LABEL_132;
        }
        int v22 = *(_DWORD *)a1;
        if (*(_DWORD *)a1 != 1)
        {
          if (v22 == 255)
          {
LABEL_62:
            LODWORD(buf) = 67240192;
            HIDWORD(buf) = v22;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#BundleInfo,readFromDict,no entry for this bundle type,%{public}d", (uint8_t *)&buf, 8u);
            goto LABEL_63;
          }
          if (v22 != 3)
          {
            int v22 = 0;
            goto LABEL_62;
          }
        }
        int v22 = 1;
        goto LABEL_62;
      }
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BB348);
      }
      id v19 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        int v20 = *(_DWORD *)a1;
        if ((*(_DWORD *)a1 - 2) >= 2)
        {
          if (v20 != 255) {
            int v20 = 0;
          }
        }
        else
        {
          int v20 = 1;
        }
        LODWORD(buf) = 67240192;
        HIDWORD(buf) = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#BundleInfo,readFromDict,no entry for this sim,%{public}d", (uint8_t *)&buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419600 == -1)
        {
LABEL_133:
          uint64_t v44 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLTelephonyService_Type::BundleInfo::readFromDict(NSDictionary *)", "%s\n", v44);
          if (v44 != (char *)&buf) {
            free(v44);
          }
          return;
        }
LABEL_132:
        dispatch_once(&qword_102419600, &stru_1022BB348);
        goto LABEL_133;
      }
    }
  }
}

void sub_100557184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005571A8(uint64_t a1)
{
  sub_100562B88((uint64_t)&v3, *(_DWORD *)a1);
  *(_DWORD *)a1 = v3;
  std::string::operator=((std::string *)(a1 + 8), &v4);
  *(unsigned char *)(a1 + 32) = v5;
  std::string::operator=((std::string *)(a1 + 40), &v6);
  *(unsigned char *)(a1 + 64) = v7;
  sub_1004CE798(a1 + 72, (uint64_t)v8);
  *(unsigned char *)(a1 + 8_Block_object_dispose(&STACK[0x850], 8) = v8[16];
  sub_1004CE798(a1 + 96, (uint64_t)v9);
  *(unsigned char *)(a1 + 112) = v9[16];
  sub_1004CE798(a1 + 120, (uint64_t)v10);
  *(unsigned char *)(a1 + 136) = v10[16];
  return sub_100562C84((uint64_t)&v3);
}

void sub_10055725C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100557E84()
{
}

void sub_100557ED0()
{
}

void sub_100557EF4(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100558398(a1, "CLTelephonyService", a2);
  *(void *)uint64_t v4 = off_1022BB060;
  *(void *)(v4 + 112) = 0;
  char v5 = (id *)(v4 + 112);
  *(void *)(v4 + 120) = 0;
  *(void *)(v4 + 12_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(_DWORD *)(v4 + 136) = -1;
  *(void *)(v4 + 144) = 0;
  std::string v6 = (void *)(v4 + 144);
  *(void *)(v4 + 152) = 0;
  *(_WORD *)(v4 + 160) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(void *)(v4 + 164) = _D0;
  sub_10096E988(v4 + 176, a2);
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  sub_100558444((CFRunLoopSourceRef *)a1);
  id v12 = [*(id *)(a1 + 40) newTimer];
  *(void *)(a1 + 112) = v12;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  void v18[2] = sub_100558A30;
  long long v18[3] = &unk_1022A3020;
  v18[4] = a1;
  [v12 setHandler:v18];
  if (!*v6 && !sub_10055901C(a1)) {
    [*v5 setNextFireDelay:1.0];
  }
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, (const void *)a1, (CFNotificationCallback)sub_100558A88, @"com.apple.locationd.DumpDiagnostics", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  sub_100103240();
  *(_DWORD *)(a1 + 172) = sub_1000B5AD4();
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BB328);
  }
  id v14 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v15 = *(_DWORD *)(a1 + 172);
    *(_DWORD *)uint64_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CELL_LOC: fHardwareType, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    int v16 = *(_DWORD *)(a1 + 172);
    int v19 = 67109120;
    int v20 = v16;
    CFPropertyListRef v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTelephonyService::CLTelephonyService(id<CLIntersiloUniverse>)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  operator new();
}

void sub_1005582FC(_Unwind_Exception *a1)
{
  uint64_t v6 = *(void *)(v1 + 720);
  *(void *)(v1 + 720) = 0;
  if (v6) {
    operator delete();
  }
  uint64_t v7 = *v4;
  uint64_t *v4 = 0;
  if (v7) {
    operator delete();
  }
  sub_10096EBD0(v3);
  sub_100562DD4(v2, 0);
  sub_100558CC4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100558398(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1022BB3F8;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 10_Block_object_dispose(&STACK[0x850], 8) = 0;
  return a1;
}

void sub_100558428(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100558444(CFRunLoopSourceRef *a1)
{
  kern_return_t v5;
  kern_return_t v6;
  NSObject *v7;
  NSObject *v8;
  IONotificationPort *v9;
  IONotificationPort *v10;
  kern_return_t v11;
  kern_return_t v12;
  NSObject *v13;
  NSObject *v14;
  CFRunLoopSourceRef RunLoopSource;
  __CFRunLoop *v16;
  NSObject *v17;
  char *v18;
  io_connect_t connect[2];
  int v20;
  const char *v21;
  uint8_t buf[4];
  const char *v23;

  *(void *)connect = 0;
  CFDictionaryRef v2 = IOServiceMatching("AppleBaseband");
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v2);
  if (MatchingService)
  {
    io_service_t v4 = MatchingService;
    char v5 = IOServiceOpen(MatchingService, mach_task_self_, 0, &connect[1]);
    if (v5)
    {
      uint64_t v6 = v5;
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      uint64_t v7 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 67109120;
        LODWORD(v23) = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Could not open service (%#x)", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BB328);
        }
        int v20 = 67109120;
        LODWORD(v21) = v6;
LABEL_48:
        id v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTelephonyService::registerBasebandNotifications()", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
    }
    else
    {
      id v9 = IONotificationPortCreate(kIOMainPortDefault);
      if (v9)
      {
        CFTypeRef v10 = v9;
        id v11 = IOServiceAddInterestNotification(v9, v4, "IOGeneralInterest", (IOServiceInterestCallback)sub_10055CBE0, a1, connect);
        if (v11)
        {
          id v12 = v11;
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022BB328);
          }
          int v13 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t buf = 67109120;
            LODWORD(v23) = v12;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Could not add interest notification on service: %#x", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_1022BB328);
            }
            int v20 = 67109120;
            LODWORD(v21) = v12;
            goto LABEL_48;
          }
        }
        else
        {
          RunLoopSource = IONotificationPortGetRunLoopSource(v10);
          a1[15] = RunLoopSource;
          if (RunLoopSource)
          {
            int v16 = (__CFRunLoop *)sub_1001C2710();
            CFRunLoopAddSource(v16, a1[15], kCFRunLoopCommonModes);
            return;
          }
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022BB328);
          }
          CFPropertyListRef v17 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Could not create run loop source", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_1022BB328);
            }
            LOWORD(v20) = 0;
            goto LABEL_48;
          }
        }
      }
      else
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BB328);
        }
        id v14 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Could not create notification port", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022BB328);
          }
          LOWORD(v20) = 0;
          goto LABEL_48;
        }
      }
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    id v8 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 136315138;
      uint64_t v23 = "AppleBaseband";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Could not find %s service", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      int v20 = 136315138;
      int v21 = "AppleBaseband";
      goto LABEL_48;
    }
  }
}

id sub_100558A30(id result)
{
  uint64_t v1 = *((void *)result + 4);
  if (!*(void *)(v1 + 144))
  {
    CFStringRef result = (id)sub_10055901C(*((void *)result + 4));
    if ((result & 1) == 0)
    {
      CFDictionaryRef v2 = *(void **)(v1 + 112);
      return [v2 setNextFireDelay:1.0];
    }
  }
  return result;
}

void sub_100558A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BB268);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    CFTypeRef v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTelephonyService::onDumpDiagnostics", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BB268);
    }
    id v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      int v19 = "";
      __int16 v20 = 2082;
      int v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTelephonyService::onDumpDiagnostics\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  uint64_t v13[2] = sub_100562CE0;
  void v13[3] = &unk_1022ACFE0;
  _DWORD v13[4] = a2;
  void v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_100558CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100558CC4(uint64_t a1)
{
  *(void *)a1 = off_1022BB3F8;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_100558D48(void *a1)
{
  *a1 = off_1022BB060;
  uint64_t v2 = a1[90];
  a1[90] = 0;
  if (v2) {
    operator delete();
  }
  uint64_t v3 = a1[88];
  a1[88] = 0;
  if (v3) {
    operator delete();
  }
  sub_10096EBD0(a1 + 22);
  sub_100562DD4(a1 + 19, 0);

  return sub_100558CC4((uint64_t)a1);
}

void sub_100558DE8(void *a1)
{
  sub_100558D48(a1);

  operator delete();
}

uint64_t sub_100558E20(uint64_t a1)
{
  if (*(void *)(a1 + 120))
  {
    uint64_t v2 = (__CFRunLoop *)sub_1001C2710();
    CFRunLoopRemoveSource(v2, *(CFRunLoopSourceRef *)(a1 + 120), kCFRunLoopCommonModes);
    *(void *)(a1 + 120) = 0;
  }
  [*(id *)(a1 + 112) invalidate];

  *(void *)(a1 + 112) = 0;
  uint64_t v3 = *(void **)(a1 + 712);
  if (v3)
  {
    [v3 shutdown];
    uint64_t v4 = *(void *)(a1 + 704);
    *(void *)(a1 + 704) = 0;
    if (v4) {
      operator delete();
    }

    *(void *)(a1 + 712) = 0;
  }
  char v5 = *(void **)(a1 + 728);
  if (v5)
  {
    [v5 shutdown];
    uint64_t v6 = *(void *)(a1 + 720);
    *(void *)(a1 + 720) = 0;
    if (v6) {
      operator delete();
    }

    *(void *)(a1 + 72_Block_object_dispose(&STACK[0x850], 8) = 0;
  }

  return sub_100558EF4(a1);
}

uint64_t sub_100558EF4(uint64_t a1)
{
  *(_DWORD *)(a1 + 136) = -1;
  uint64_t v2 = *(const void **)(a1 + 128);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 12_Block_object_dispose(&STACK[0x850], 8) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 144);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 144) = 0;
  }
  return 1;
}

const void **sub_100558F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[0] = @"kCLTelephonyServiceResetNotification";
  v7[1] = @"kCLTelephonyServiceConnectedNotification";
  _DWORD v7[2] = @"kCLTelephonyServiceDisconnectedNotification";
  v7[3] = @"kCallStatusChangeNotification";
  v7[4] = @"kAtLeastOneVoiceCallInProgress";
  v7[5] = @"kNoVoiceCallInProgress";
  if (![+[NSArray arrayWithObjects:v7 count:6] containsObject:a2])sub_101A651B8(); {
  if (a3)
  }
    sub_101A6518C();
  return sub_1000AF11C(a1, a2, 0);
}

BOOL sub_10055901C(uint64_t a1)
{
  uint64_t v10 = 0;
  uint64_t v11 = a1;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  uint64_t v2 = _CTServerConnectionCreate();
  *(void *)(a1 + 144) = v2;
  if (v2)
  {
    sub_1001C2710();
    _CTServerConnectionAddToRunLoop();
    _CTServerConnectionRegisterForNotification();
    _CTServerConnectionRegisterForNotification();
    _CTServerConnectionRegisterForNotification();
    _CTServerConnectionRegisterForNotification();
    _CTServerConnectionRegisterForNotification();
    _CTServerConnectionRegisterForNotification();
    _CTServerConnectionRegisterForNotification();
    if (sub_100743894() || sub_1000FEF64() || sub_1000FEED0()) {
      _CTServerConnectionRegisterForNotification();
    }
    sub_1005593D0(a1);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG) || sub_10013D1A0(115, 2))
    {
      CFTypeRef cf = 0;
      sub_100134750(&__p, "unknown");
      _CTServerConnectionCopyFirmwareVersion();
      if (cf)
      {
        sub_10013D274((const __CFString *)cf, &__p);
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      uint64_t v3 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t buf = 136315138;
        __int16 v18 = p_p;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CT Version: %s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BB328);
        }
        uint64_t v6 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        int v15 = 136315138;
        int v16 = v6;
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTelephonyService::setupTelephony()", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  return v2 != 0;
}

void sub_1005593A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005593D0(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BB328);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_1000FECE0(@"kCLTelephonyServiceConnectedNotification", (uint64_t)__p);
    uint64_t v3 = v12 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uint64_t buf = 136315138;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "sending notification for %s", buf, 0xCu);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    sub_1000FECE0(@"kCLTelephonyServiceConnectedNotification", (uint64_t)buf);
    if (v8 >= 0) {
      char v5 = buf;
    }
    else {
      char v5 = *(unsigned char **)buf;
    }
    int v9 = 136315138;
    uint64_t v10 = v5;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    if (v8 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTelephonyService::onTelephonyReady()", "%s\n", v6);
    if (v6 != (char *)__p) {
      free(v6);
    }
  }
  (*(void (**)(uint64_t, const __CFString *, void))(*(void *)a1 + 264))(a1, @"kCLTelephonyServiceConnectedNotification", 0);
  sub_1001AEF88(a1);
  sub_10055963C(a1);
  return 1;
}

void sub_10055963C(uint64_t a1)
{
  *(unsigned char *)(a1 + 161) = 0;
  if (*(void *)(a1 + 144))
  {
    uint64_t v2 = _CTServerConnectionIsInHomeCountry();
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BB2A8);
    }
    uint64_t v3 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "refreshInHomeCountry, inHC, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BB2A8);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTelephonyService::refreshInHomeCountry()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    if (!v2)
    {
      *(unsigned char *)(a1 + 161) = 0;
      goto LABEL_27;
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BB2A8);
    }
    uint64_t v4 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67240448;
      int v9 = v2;
      __int16 v10 = 1026;
      int v11 = HIDWORD(v2);
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "_CTServerConnectionIsInHomeCountry failed (%{public}d, %{public}d)", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BB2A8);
      }
      char v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLTelephonyService::refreshInHomeCountry()", "%s\n");
LABEL_24:
      if (v5 != buf) {
        free(v5);
      }
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BB2A8);
    }
    uint64_t v6 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "no server connection available", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BB2A8);
      }
      char v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTelephonyService::refreshInHomeCountry()", "%s\n");
      goto LABEL_24;
    }
  }
LABEL_27:
  sub_10000D3AC((unsigned char *)a1);
}

uint64_t sub_100559AA8(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 136) = -1;
  uint64_t v4 = *(const void **)(a1 + 128);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 12_Block_object_dispose(&STACK[0x850], 8) = 0;
  }
  if (a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    char v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      sub_1000FECE0(@"kCLTelephonyServiceDisconnectedNotification", (uint64_t)__p);
      uint64_t v6 = v15 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "sending notification for %s", buf, 0xCu);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      sub_1000FECE0(@"kCLTelephonyServiceDisconnectedNotification", (uint64_t)buf);
      if (v11 >= 0) {
        char v8 = buf;
      }
      else {
        char v8 = *(unsigned char **)buf;
      }
      int v12 = 136315138;
      uint64_t v13 = v8;
      int v9 = (char *)_os_log_send_and_compose_impl();
      if (v11 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTelephonyService::onTelephonyInvalid(BOOL)", "%s\n", v9);
      if (v9 != (char *)__p) {
        free(v9);
      }
    }
    (*(void (**)(uint64_t, const __CFString *, void))(*(void *)a1 + 264))(a1, @"kCLTelephonyServiceDisconnectedNotification", 0);
  }
  return 1;
}

void sub_100559D24(uint64_t a1, float a2, float a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022BB388);
  }
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#imd,handleUplinkFreqBwUpdate", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022BB388);
    }
    LOWORD(values[0]) = 0;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTelephonyService::handleUplinkFreqBwUpdate(float, float)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  char v14 = 1;
  *(double *)uint64_t buf = a2;
  CFNumberRef v7 = sub_1004D3BFC(buf);
  *(double *)uint64_t buf = a3;
  CFNumberRef v8 = sub_1004D3BFC(buf);
  CFTypeRef v9 = sub_100007264(&v14);
  __int16 v10 = v9;
  if (v7 && v8 && v9)
  {
    *(_OWORD *)uint64_t buf = *(_OWORD *)off_1022BB178;
    CFStringRef v17 = @"kUplinkBwKey";
    values[0] = (void *)v9;
    values[1] = v7;
    values[2] = v8;
    CFDictionaryRef v11 = CFDictionaryCreate(0, (const void **)buf, (const void **)values, 3, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionaryRef v12 = v11;
    (*(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(void *)a1 + 256))(a1, @"kUplinkFreqBwNotification", v11);
  }
  else if (!v7)
  {
    goto LABEL_12;
  }
  CFRelease(v7);
LABEL_12:
  if (v8) {
    CFRelease(v8);
  }
  if (v10) {
    CFRelease(v10);
  }
}

uint64_t sub_100559FCC(uint64_t a1, const __CFDictionary *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022BB388);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 138543362;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#cts,notification,%{public}@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022BB388);
    }
    *(_DWORD *)int v28 = 138543362;
    *(void *)&void v28[4] = a2;
    __int16 v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTelephonyService::notifyCellularTransmiteState(CFDictionaryRef)", "%s\n", v18);
    if (v18 != buf) {
      free(v18);
    }
  }
  sub_10013FA80((int)v26, a2);
  CFTypeRef cf1 = 0;
  int v5 = sub_10013F3C8((uint64_t)v26, kKeyCTCellularTransmitState, &cf1);
  if (cf1) {
    int v6 = v5;
  }
  else {
    int v6 = 0;
  }
  if (v6 == 1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022BB388);
    }
    CFNumberRef v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000FECE0((const __CFString *)cf1, (uint64_t)buf);
      CFNumberRef v8 = v32 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)int v28 = 136446210;
      *(void *)&void v28[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#cts,state,%{public}s", v28, 0xCu);
      if (v32 < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022BB388);
      }
      sub_1000FECE0((const __CFString *)cf1, (uint64_t)v28);
      if (v29 >= 0) {
        int v19 = v28;
      }
      else {
        int v19 = *(unsigned char **)v28;
      }
      LODWORD(values[0]) = 136446210;
      *(const void **)((char *)values + 4) = v19;
      __int16 v20 = (char *)_os_log_send_and_compose_impl();
      if (v29 < 0) {
        operator delete(*(void **)v28);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTelephonyService::notifyCellularTransmiteState(CFDictionaryRef)", "%s\n", v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    values[0] = 0;
    keys = @"kCLCellularTransmitStateNotification";
    if (CFEqual(cf1, kCTCellularTransmitStateConnected))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022BB388);
      }
      CFTypeRef v9 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#cts,state,connected", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022BB388);
        }
        *(_WORD *)int v28 = 0;
        int v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTelephonyService::notifyCellularTransmiteState(CFDictionaryRef)", "%s\n", v21);
        if (v21 != buf) {
          free(v21);
        }
      }
      buf[0] = 1;
      CFTypeRef v10 = sub_100007264(buf);
    }
    else
    {
      if (!CFEqual(cf1, kCTCellularTransmitStateIdle))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022BB388);
        }
        int v16 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#cts,state,unknown", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022BB388);
          }
          *(_WORD *)int v28 = 0;
          int v24 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTelephonyService::notifyCellularTransmiteState(CFDictionaryRef)", "%s\n", v24);
          if (v24 != buf) {
            free(v24);
          }
        }
        goto LABEL_54;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022BB388);
      }
      uint64_t v13 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#cts,state,idle", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022BB388);
        }
        *(_WORD *)int v28 = 0;
        uint64_t v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTelephonyService::notifyCellularTransmiteState(CFDictionaryRef)", "%s\n", v23);
        if (v23 != buf) {
          free(v23);
        }
      }
      buf[0] = 0;
      CFTypeRef v10 = sub_100007264(buf);
    }
    values[0] = v10;
    CFDictionaryRef v14 = CFDictionaryCreate(0, (const void **)&keys, values, 1, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (v14)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022BB388);
      }
      char v15 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 138543362;
        *(void *)&uint8_t buf[4] = v14;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#cts,state,notify,%{public}@", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022BB388);
        }
        *(_DWORD *)int v28 = 138543362;
        *(void *)&void v28[4] = v14;
        __int16 v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTelephonyService::notifyCellularTransmiteState(CFDictionaryRef)", "%s\n", v22);
        if (v22 != buf) {
          free(v22);
        }
      }
      (*(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(void *)a1 + 256))(a1, @"kCLCellularTransmitStateNotification", v14);
      CFRelease(v14);
    }
LABEL_54:
    if (values[0]) {
      CFRelease(values[0]);
    }
    return sub_10013F3C4(v26);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022BB388);
  }
  CFDictionaryRef v11 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,#cts,state,keyNotPresent", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022BB388);
    }
    *(_WORD *)int v28 = 0;
    CFDictionaryRef v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTelephonyService::notifyCellularTransmiteState(CFDictionaryRef)", "%s\n", v12);
    if (v12 != buf) {
      free(v12);
    }
  }
  return sub_10013F3C4(v26);
}

void sub_10055AA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10055AA70(void *a1, int *a2)
{
  if (a1[18])
  {
    sub_1000FA17C(a2);
    _CTServerConnectionRegisterForNotification();
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BB2A8);
    }
    uint64_t v4 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v5 = (const __CFString *)sub_1000FA17C(a2);
      sub_1000FECE0(v5, (uint64_t)__p);
      int v6 = v19 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLTelephonyService,registerForNotificationInternal,%s", buf, 0xCu);
      if (SHIBYTE(v19) < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BB2A8);
      }
      CFStringRef v9 = (const __CFString *)sub_1000FA17C(a2);
      sub_1000FECE0(v9, (uint64_t)buf);
      if (v15 >= 0) {
        CFTypeRef v10 = buf;
      }
      else {
        CFTypeRef v10 = *(unsigned char **)buf;
      }
      int v16 = 136315138;
      CFStringRef v17 = v10;
      CFDictionaryRef v11 = (char *)_os_log_send_and_compose_impl();
      if (v15 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLTelephonyService::registerForNotificationInternal(const CLTelephonyService_Type::Notification &)", "%s\n", v11);
      if (v11 != (char *)__p) {
        free(v11);
      }
    }
    CFNumberRef v7 = (const void *)sub_1000FA17C(a2);
    if (CFEqual(v7, @"kInHomeCountryLegacyNotification")) {
      sub_10055963C((uint64_t)a1);
    }
    (*(void (**)(void **__return_ptr, void *, int *))(*a1 + 160))(__p, a1, a2);
    if (SHIBYTE(v19) < 0)
    {
      sub_1000DC48C(__dst, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)__p;
      uint64_t v13 = v19;
    }
    sub_10097C4D0((uint64_t)(a1 + 22), (uint64_t)__dst);
    if (SHIBYTE(v13) < 0) {
      operator delete(__dst[0]);
    }
    if (SHIBYTE(v19) < 0) {
      operator delete(__p[0]);
    }
  }
  return 1;
}

void sub_10055AD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10055AD94(void *a1, int *a2)
{
  if (a1[18])
  {
    sub_1000FA17C(a2);
    _CTServerConnectionUnregisterForNotification();
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BB2A8);
    }
    uint64_t v4 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      CFStringRef v5 = (const __CFString *)sub_1000FA17C(a2);
      sub_1000FECE0(v5, (uint64_t)__p);
      int v6 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLTelephonyService,unregisterForNotificationInternal,%s", buf, 0xCu);
      if (SHIBYTE(v18) < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BB2A8);
      }
      CFStringRef v8 = (const __CFString *)sub_1000FA17C(a2);
      sub_1000FECE0(v8, (uint64_t)buf);
      if (v14 >= 0) {
        CFStringRef v9 = buf;
      }
      else {
        CFStringRef v9 = *(unsigned char **)buf;
      }
      int v15 = 136315138;
      int v16 = v9;
      CFTypeRef v10 = (char *)_os_log_send_and_compose_impl();
      if (v14 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLTelephonyService::unregisterForNotificationInternal(const CLTelephonyService_Type::Notification &)", "%s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
    (*(void (**)(void **__return_ptr, void *, int *))(*a1 + 160))(__p, a1, a2);
    if (SHIBYTE(v18) < 0)
    {
      sub_1000DC48C(__dst, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)__p;
      uint64_t v12 = v18;
    }
    sub_10097C6F0((uint64_t)(a1 + 22), (unsigned __int8 *)__dst);
    if (SHIBYTE(v12) < 0) {
      operator delete(__dst[0]);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
  }
  return 1;
}

void sub_10055B05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10055B098@<W0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  CFStringRef v3 = (const __CFString *)sub_1000FA17C(a1);

  return sub_1000FECE0(v3, a2);
}

uint64_t sub_10055B0D4(int a1, const __CFString *cf1)
{
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyGSM)) {
    return 0;
  }
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyUTRAN2)) {
    return 9;
  }
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyGSMCompact)) {
    return 1;
  }
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyUTRAN)) {
    return 2;
  }
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyCDMA1x)) {
    return 3;
  }
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyCDMAEVDO)) {
    return 4;
  }
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyCDMAHybrid)
    || CFEqual(cf1, kCTRegistrationRadioAccessTechnologyeHRPD))
  {
    return 5;
  }
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyLTE)) {
    return 6;
  }
  if (CFEqual(cf1, kCTRegistrationRadioAccessTechnologyNR)) {
    return 10;
  }
  if (!CFEqual(cf1, kCTRegistrationRadioAccessTechnologyUnknown))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    uint64_t v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      sub_1000FECE0(cf1, (uint64_t)__p);
      CFStringRef v5 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)uint64_t buf = 136446210;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "CELL_LOC: unknown registration technology, %{public}s", buf, 0xCu);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      sub_1000FECE0(cf1, (uint64_t)buf);
      if (v9 >= 0) {
        int v6 = buf;
      }
      else {
        int v6 = *(unsigned char **)buf;
      }
      int v10 = 136446210;
      CFDictionaryRef v11 = v6;
      CFNumberRef v7 = (char *)_os_log_send_and_compose_impl();
      if (v9 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "RadioAccessTechnology CLTelephonyService::fromRadioAccessTechnology(CFStringRef)", "%s\n", v7);
      if (v7 != (char *)__p) {
        free(v7);
      }
    }
  }
  return 11;
}

BOOL sub_10055B43C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 160))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v3 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)uint64_t buf = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 1026;
      int v14 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  if (*(void *)(a1 + 144))
  {
    if (!_CTServerConnectionGetRadioAccessTechnology()) {
      return 1;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    uint64_t v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "_CTServerConnectionGetRadioAccessTechnology failed", buf, 2u);
    }
    BOOL v5 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      CFNumberRef v7 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTelephonyService::getRadioAccessTechnology(CFStringRef &)", "%s\n");
LABEL_24:
      if (v7 != buf) {
        free(v7);
      }
      return 0;
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    CFStringRef v8 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      CFNumberRef v7 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTelephonyService::getRadioAccessTechnology(CFStringRef &)", "%s\n");
      goto LABEL_24;
    }
  }
  return result;
}

BOOL sub_10055B7AC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 160))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v3 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)uint64_t buf = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      int v14 = "";
      __int16 v15 = 1026;
      int v16 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  if (!*(void *)(a1 + 144))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    CFStringRef v8 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLTelephonyService::getServingMcc(int &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    return 0;
  }
  uint64_t v4 = _CTServerConnectionCopyCountryCode();
  BOOL v5 = v4 == 0;
  if (!v4) {
    return 0;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BB328);
  }
  int v6 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "_CTServerConnectionCopyCountryCode failed", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    CFNumberRef v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLTelephonyService::getServingMcc(int &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return v5;
}

BOOL sub_10055BB5C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 160))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v3 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)uint64_t buf = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      int v14 = "";
      __int16 v15 = 1026;
      int v16 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  if (!*(void *)(a1 + 144))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    CFStringRef v8 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLTelephonyService::getServingMnc(int &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    return 0;
  }
  uint64_t v4 = _CTServerConnectionCopyNetworkCode();
  BOOL v5 = v4 == 0;
  if (!v4) {
    return 0;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BB328);
  }
  int v6 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "_CTServerConnectionCopyNetworkCode failed", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    CFNumberRef v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLTelephonyService::getServingMnc(int &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return v5;
}

BOOL sub_10055BF0C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 160))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v3 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)uint64_t buf = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      int v14 = "";
      __int16 v15 = 1026;
      int v16 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  if (*(void *)(a1 + 144))
  {
    if (_CTServerConnectionGetLocationAreaCode())
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      uint64_t v4 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "_CTServerConnectionGetLocationAreaCode failed", buf, 2u);
      }
      BOOL v5 = sub_10013D1A0(115, 0);
      BOOL result = 0;
      if (v5)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 == -1) {
          goto LABEL_30;
        }
        goto LABEL_36;
      }
    }
    else
    {
      if (!_CTServerConnectionGetCellID()) {
        return 1;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      char v9 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "_CTServerConnectionGetCellID failed", buf, 2u);
      }
      BOOL v10 = sub_10013D1A0(115, 0);
      BOOL result = 0;
      if (v10)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 == -1)
        {
LABEL_30:
          CFStringRef v8 = (uint8_t *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLTelephonyService::getServingCellLacCi(int &, int &)", "%s\n");
LABEL_31:
          if (v8 != buf) {
            free(v8);
          }
          return 0;
        }
LABEL_36:
        dispatch_once(&qword_102419630, &stru_1022BB328);
        goto LABEL_30;
      }
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    CFNumberRef v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BB328);
      }
      CFStringRef v8 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLTelephonyService::getServingCellLacCi(int &, int &)", "%s\n");
      goto LABEL_31;
    }
  }
  return result;
}

uint64_t sub_10055C374(CFDictionaryRef *a1, uint64_t a2)
{
  int v23 = 0;
  sub_10013FA80((int)v22, *a1);
  uint64_t v3 = kCTCellMonitorDerivedMCC;
  int v4 = sub_1004D5E1C((uint64_t)v22);
  if (v4 >= 1)
  {
    for (int i = 0; i != v4; ++i)
    {
      if (sub_10013E418((uint64_t)v22, v3, &v23))
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BB328);
        }
        int v6 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 67109632;
          int v31 = i;
          __int16 v32 = 1024;
          int v33 = v4;
          __int16 v34 = 1024;
          int v35 = v23;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CELL_LOC: Adding MCC %d / %d : %d", buf, 0x14u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022BB328);
          }
          int v24 = 67109632;
          int v25 = i;
          __int16 v26 = 1024;
          int v27 = v4;
          __int16 v28 = 1024;
          int v29 = v23;
          __int16 v20 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static void CLTelephonyService::derivedMccFromMonitorDict(const CFDictionaryRef &, DerivedMccVector &)", "%s\n", v20);
          if (v20 != (char *)buf) {
            free(v20);
          }
        }
        CFStringRef v8 = *(_DWORD **)(a2 + 8);
        unint64_t v7 = *(void *)(a2 + 16);
        if ((unint64_t)v8 >= v7)
        {
          int v12 = *(_DWORD **)a2;
          uint64_t v13 = ((uint64_t)v8 - *(void *)a2) >> 2;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 62) {
            sub_1001D7FD4();
          }
          uint64_t v15 = v7 - (void)v12;
          if (v15 >> 1 > v14) {
            unint64_t v14 = v15 >> 1;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            CFStringRef v17 = (char *)sub_10017EA34(a2 + 16, v16);
            int v12 = *(_DWORD **)a2;
            CFStringRef v8 = *(_DWORD **)(a2 + 8);
          }
          else
          {
            CFStringRef v17 = 0;
          }
          uint64_t v18 = &v17[4 * v13];
          *(_DWORD *)uint64_t v18 = v23;
          char v9 = v18 + 4;
          while (v8 != v12)
          {
            int v19 = *--v8;
            *((_DWORD *)v18 - 1) = v19;
            v18 -= 4;
          }
          *(void *)a2 = v18;
          *(void *)(a2 + _Block_object_dispose(&STACK[0x850], 8) = v9;
          *(void *)(a2 + 16) = &v17[4 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          _DWORD *v8 = v23;
          char v9 = v8 + 1;
        }
        *(void *)(a2 + _Block_object_dispose(&STACK[0x850], 8) = v9;
      }
      else
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BB328);
        }
        BOOL v10 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)uint64_t buf = 67240448;
          int v31 = i;
          __int16 v32 = 1026;
          int v33 = v4;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "CELL_LOC: can't get MCC %{public}d / %{public}d", buf, 0xEu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022BB328);
          }
          int v24 = 67240448;
          int v25 = i;
          __int16 v26 = 1026;
          int v27 = v4;
          __int16 v11 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "static void CLTelephonyService::derivedMccFromMonitorDict(const CFDictionaryRef &, DerivedMccVector &)", "%s\n", v11);
          if (v11 != (char *)buf) {
            free(v11);
          }
        }
      }
    }
  }
  return sub_10013F3C4(v22);
}

void sub_10055C7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10055C7F8(uint64_t a1)
{
  if (*(char *)(a1 + 343) < 0) {
    operator delete(*(void **)(a1 + 320));
  }
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  return a1;
}

BOOL sub_10055C83C(uint64_t a1, uint64_t *a2, int a3)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BB328);
  }
  int v6 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CELL_LOC: getting current serving cell", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    LOWORD(v17) = 0;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTelephonyService::extractServingCellsFromDictionary(std::vector<CLCell> &, BOOL)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  CFTypeRef cf = 0;
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  if (v7 != *a2)
  {
    do
    {
      v7 -= 696;
      sub_1000FA860((uint64_t)(a2 + 2), v7);
    }
    while (v7 != v8);
  }
  a2[1] = v8;
  if (sub_1000B0644(a1, &cf)) {
    BOOL v9 = sub_10010DBC8(a2, (CFArrayRef)cf, a3);
  }
  else {
    BOOL v9 = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BB328);
  }
  BOOL v10 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v11 = 0x66FD0EB66FD0EB67 * ((a2[1] - *a2) >> 3);
    *(_DWORD *)uint64_t buf = 134217984;
    uint64_t v20 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CELL_LOC: getting current serving cells %lu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BB328);
    }
    uint64_t v14 = 0x66FD0EB66FD0EB67 * ((a2[1] - *a2) >> 3);
    int v17 = 134217984;
    uint64_t v18 = v14;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTelephonyService::extractServingCellsFromDictionary(std::vector<CLCell> &, BOOL)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  return v9;
}

uint64_t sub_10055CBD8()
{
  return 0;
}

void sub_10055CBE0(uint64_t a1, int a2, int a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a1 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BB268);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTelephonyService::basebandDetectCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BB268);
    }
    BOOL v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      int v19 = "";
      __int16 v20 = 2082;
      int v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a1;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTelephonyService::basebandDetectCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v10 = [*(id *)(a1 + 32) silo];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  _DWORD v11[2] = sub_100562D50;
  v11[3] = &unk_1022B8680;
  int v12 = a2;
  int v13 = a3;
  v11[4] = a1;
  v11[5] = a4;
  [v10 sync:v11];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_10055CDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10055CE14(uint64_t a1, void *a2, void *a3)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 4) = 0x400000000;
  *(_WORD *)(a1 + 12) = 256;
  *(unsigned char *)(a1 + 14) = 0;
  *(_DWORD *)(a1 + 16) = 255;
  if (a3)
  {
    if (a2)
    {
      if ([a2 slotID] != (id)1 && objc_msgSend(a2, "slotID") != (id)2 && objc_msgSend(a2, "slotID"))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022BB3C8);
        }
        int v6 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 67109120;
          unsigned int v28 = [a2 slotID];
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,CLCTEmergencyMode,InvalidSubscriptionSlot,slot,%d", buf, 8u);
        }
        if (!sub_10013D1A0(115, 0)) {
          return a1;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 == -1) {
          goto LABEL_28;
        }
        goto LABEL_115;
      }
      if ((sub_1000FFBA8() & 1) == 0 && [a2 slotID] == (id)2)
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022BB3C8);
        }
        uint64_t v8 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 67109120;
          unsigned int v28 = [a2 slotID];
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,CLCTEmergencyMode,Unexpected CTSubscriptionSlot Info received %d", buf, 8u);
        }
        if (!sub_10013D1A0(115, 0)) {
          return a1;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 == -1) {
          goto LABEL_28;
        }
LABEL_115:
        dispatch_once(&qword_1024193E0, &stru_1022BB3C8);
LABEL_28:
        [a2 slotID];
        goto LABEL_29;
      }
      id v10 = (char *)[a2 slotID];
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022BB3C8);
      }
      uint64_t v11 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,CLCTEmergencyMode,context,nil", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_1022BB3C8);
        }
        __int16 v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLTelephonyService_Type::CLCTEmergencyMode::CLCTEmergencyMode(CTXPCServiceSubscriptionContext *, CTEmergencyMode *)", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      id v10 = 0;
    }
    if (![a3 type]
      || [a3 type] == (id)1
      || [a3 type] == (id)2
      || [a3 type] == (id)3
      || [a3 type] == (id)4
      || [a3 type] == (id)5)
    {
      if (![a3 state]
        || [a3 state] == (id)1
        || [a3 state] == (id)2
        || [a3 state] == (id)3
        || [a3 state] == (id)5
        || [a3 state] == (id)4)
      {
        *(unsigned char *)a1 = [a3 enabled];
        if ([a3 isEmergencyText]) {
          unsigned __int8 v12 = 1;
        }
        else {
          unsigned __int8 v12 = [a3 isStewieActive];
        }
        *(unsigned char *)(a1 + 12) = v12;
        *(unsigned char *)(a1 + 13) = [a3 isEmergencySetup];
        *(unsigned char *)(a1 + 14) = [a3 isStewieActive];
        if (sub_1000FFBA8())
        {
          if ((unint64_t)(v10 - 1) > 1) {
            int v13 = 255;
          }
          else {
            int v13 = v10 != (char *)1;
          }
        }
        else if (v10 == (char *)1)
        {
          int v13 = 0;
        }
        else
        {
          int v13 = 255;
        }
        *(_DWORD *)(a1 + 16) = v13;
        switch((unint64_t)[a3 type])
        {
          case 0uLL:
            *(_DWORD *)(a1 + 4) = 0;
            break;
          case 1uLL:
            int v14 = 1;
            goto LABEL_76;
          case 2uLL:
            int v14 = 2;
            goto LABEL_76;
          case 3uLL:
            int v14 = 3;
            goto LABEL_76;
          case 4uLL:
            int v14 = 4;
            goto LABEL_76;
          case 5uLL:
            int v14 = 5;
LABEL_76:
            *(_DWORD *)(a1 + 4) = v14;
            break;
          default:
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022BB3C8);
            }
            char v15 = qword_1024193E8;
            if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
            {
              unsigned int v16 = [a3 type];
              *(_DWORD *)uint64_t buf = 67109120;
              unsigned int v28 = v16;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,CLCTEmergencyMode,InvalidEmergencyModeType,%d", buf, 8u);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193E0 != -1) {
                dispatch_once(&qword_1024193E0, &stru_1022BB3C8);
              }
              [a3 type];
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTEmergencyMode::CLCTEmergencyMode(CTXPCServiceSubscriptionContext *, CTEmergencyMode *)", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            break;
        }
        switch((unint64_t)[a3 state])
        {
          case 0uLL:
            *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = 0;
            return a1;
          case 1uLL:
            int v18 = 1;
            goto LABEL_93;
          case 2uLL:
            int v18 = 2;
            goto LABEL_93;
          case 3uLL:
            int v18 = 3;
            goto LABEL_93;
          case 4uLL:
            int v18 = 5;
            goto LABEL_93;
          case 5uLL:
            int v18 = 4;
LABEL_93:
            *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = v18;
            return a1;
          default:
            if (qword_1024193E0 != -1) {
              dispatch_once(&qword_1024193E0, &stru_1022BB3C8);
            }
            int v19 = qword_1024193E8;
            if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
            {
              unsigned int v20 = [a3 state];
              *(_DWORD *)uint64_t buf = 67109120;
              unsigned int v28 = v20;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,CLCTEmergencyMode,InvalidEmergencyModeState,%d", buf, 8u);
            }
            if (!sub_10013D1A0(115, 0)) {
              return a1;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1024193E0 == -1) {
              goto LABEL_89;
            }
            goto LABEL_116;
        }
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022BB3C8);
      }
      int v24 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        unsigned int v25 = [a3 state];
        *(_DWORD *)uint64_t buf = 67109120;
        unsigned int v28 = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,CLCTEmergencyMode,InvalidEmergencyModeState,state,%d", buf, 8u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return a1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
LABEL_116:
      }
        dispatch_once(&qword_1024193E0, &stru_1022BB3C8);
LABEL_89:
      [a3 state];
    }
    else
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022BB3C8);
      }
      __int16 v22 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
      {
        unsigned int v23 = [a3 type];
        *(_DWORD *)uint64_t buf = 67109120;
        unsigned int v28 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,CLCTEmergencyMode,InvalidEmergencyMode,emergencyMode,%d", buf, 8u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return a1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022BB3C8);
      }
      [a3 type];
    }
    BOOL v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTEmergencyMode::CLCTEmergencyMode(CTXPCServiceSubscriptionContext *, CTEmergencyMode *)", "%s\n", v9);
    if (v9 == (char *)buf) {
      return a1;
    }
    goto LABEL_30;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022BB3C8);
  }
  uint64_t v7 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,CLCTEmergencyMode,mode,nil", buf, 2u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return a1;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022BB3C8);
  }
LABEL_29:
  BOOL v9 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTEmergencyMode::CLCTEmergencyMode(CTXPCServiceSubscriptionContext *, CTEmergencyMode *)", "%s\n", v9);
  if (v9 != (char *)buf) {
LABEL_30:
  }
    free(v9);
  return a1;
}

uint64_t sub_10055DA50(uint64_t a1, const __CFDictionary *a2)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 4) = 0x400000000;
  *(_WORD *)(a1 + 12) = 256;
  *(unsigned char *)(a1 + 14) = 0;
  *(_DWORD *)(a1 + 16) = 255;
  sub_10013FA80((int)v15, a2);
  uint64_t v14 = 0;
  unsigned int v13 = 0;
  __int16 v12 = 0;
  __int16 v11 = 0;
  if (sub_1000D29FC((uint64_t)v15, @"kEmergencyModeEnabledKey", (BOOL *)&v12 + 1)
    && sub_1000D29FC((uint64_t)v15, @"kEmergencyTextKey", (BOOL *)&v12)
    && sub_10013E418((uint64_t)v15, @"kSimInstanceKey", &v14)
    && sub_10013E418((uint64_t)v15, @"kEmergencyModeKey", (_DWORD *)&v14 + 1)
    && sub_10013E418((uint64_t)v15, @"kEmergencyModeStateKey", &v13)
    && sub_1000D29FC((uint64_t)v15, @"kIsStewieActiveKey", (BOOL *)&v11)
    && (sub_1000D29FC((uint64_t)v15, @"kEmergencySetupKey", (BOOL *)&v11 + 1) & 1) != 0)
  {
    int v3 = v14;
    if (v14 < 2 || v14 == 255)
    {
      if (HIDWORD(v14) < 6)
      {
        unsigned int v8 = v13;
        if (v13 < 6)
        {
          *(_DWORD *)(a1 + 4) = HIDWORD(v14);
          *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = v8;
          *(unsigned char *)a1 = HIBYTE(v12);
          *(unsigned char *)(a1 + 12) = v12;
          *(_DWORD *)(a1 + 16) = v3;
          *(unsigned char *)(a1 + 13) = HIBYTE(v11);
          *(unsigned char *)(a1 + 14) = v11;
          goto LABEL_24;
        }
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BB348);
        }
        BOOL v9 = qword_102419608;
        if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 67109120;
          unsigned int v19 = v13;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#clct,CLCTEmergencyMode, Unexpected CLCTEmergencyModeState received %d", buf, 8u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419600 != -1) {
            dispatch_once(&qword_102419600, &stru_1022BB348);
          }
          int v16 = 67109120;
          unsigned int v17 = v13;
          BOOL v5 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTEmergencyMode::CLCTEmergencyMode(CFDictionaryRef)", "%s\n", v5);
          goto LABEL_46;
        }
      }
      else
      {
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BB348);
        }
        int v4 = qword_102419608;
        if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 67109120;
          unsigned int v19 = HIDWORD(v14);
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#clct,CLCTEmergencyMode, Unexpected CLCTEmergencyModeType received %d", buf, 8u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419600 != -1) {
            dispatch_once(&qword_102419600, &stru_1022BB348);
          }
          int v16 = 67109120;
          unsigned int v17 = HIDWORD(v14);
          BOOL v5 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTEmergencyMode::CLCTEmergencyMode(CFDictionaryRef)", "%s\n", v5);
LABEL_46:
          if (v5 != (char *)buf) {
            free(v5);
          }
        }
      }
    }
    else
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BB348);
      }
      id v10 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 67109120;
        unsigned int v19 = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#clct,CLCTEmergencyMode,InvalidSim,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BB348);
        }
        int v16 = 67109120;
        unsigned int v17 = v14;
        BOOL v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTEmergencyMode::CLCTEmergencyMode(CFDictionaryRef)", "%s\n", v5);
        goto LABEL_46;
      }
    }
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    int v6 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#clct,CLCTEmergencyMode, couldn't get value for  sim or  CLCTEmergencyMode", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BB348);
      }
      LOWORD(v16) = 0;
      BOOL v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTEmergencyMode::CLCTEmergencyMode(CFDictionaryRef)", "%s\n", v5);
      goto LABEL_46;
    }
  }
LABEL_24:
  sub_10013F3C4(v15);
  return a1;
}

void sub_10055E108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

NSDictionary *sub_10055E144(unsigned __int8 *a1)
{
  v3[0] = @"kEmergencyModeEnabledKey";
  v4[0] = +[NSNumber numberWithBool:*a1];
  v3[1] = @"kEmergencyTextKey";
  v4[1] = +[NSNumber numberWithBool:a1[12]];
  _DWORD v3[2] = @"kSimInstanceKey";
  _DWORD v4[2] = +[NSNumber numberWithInt:*((unsigned int *)a1 + 4)];
  void v3[3] = @"kEmergencyModeKey";
  void v4[3] = +[NSNumber numberWithInt:*((unsigned int *)a1 + 1)];
  v3[4] = @"kEmergencyModeStateKey";
  v4[4] = +[NSNumber numberWithInt:*((unsigned int *)a1 + 2)];
  void v3[5] = @"kIsStewieActiveKey";
  void v4[5] = +[NSNumber numberWithBool:a1[14]];
  v3[6] = @"kEmergencySetupKey";
  void v4[6] = +[NSNumber numberWithBool:a1[13]];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:7];
}

void *sub_10055E278@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(int *)(a1 + 4);
  if (v4 > 5) {
    BOOL v5 = "UnknownMode";
  }
  else {
    BOOL v5 = (&off_1022BB560)[v4];
  }
  return sub_100134750(a2, v5);
}

void *sub_10055E2A8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(int *)(a1 + 8);
  if (v4 > 5) {
    BOOL v5 = "UnknownModeState";
  }
  else {
    BOOL v5 = (&off_1022BB590)[v4];
  }
  return sub_100134750(a2, v5);
}

uint64_t sub_10055E2D8(uint64_t a1, unsigned int a2, void *a3, void *a4)
{
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (a3) {
    std::string::assign((std::string *)a1, (const std::string::value_type *)[a3 UTF8String]);
  }
  if (a4) {
    std::string::assign((std::string *)(a1 + 24), (const std::string::value_type *)[a4 UTF8String]);
  }
  if (a2 != 255)
  {
    id v7 = objc_alloc((Class)CTXPCServiceSubscriptionContext);
    char v8 = sub_1000FFBA8();
    uint64_t v9 = 1;
    if (a2) {
      uint64_t v9 = 2;
    }
    if (a2 > 1) {
      uint64_t v9 = 0;
    }
    if (v8) {
      BOOL v10 = v9;
    }
    else {
      BOOL v10 = a2 == 0;
    }
    id v11 = [v7 initWithSlot:v10];
    std::string::assign((std::string *)(a1 + 48), (const std::string::value_type *)[([[v11 uuid] UUIDString] UTF8String]);
  }
  return a1;
}

void sub_10055E3B4(_Unwind_Exception *a1)
{
  sub_10055E3CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10055E3CC(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10055E420(uint64_t a1, const __CFDictionary *a2)
{
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = 0u;
  int v3 = (std::string *)(a1 + 48);
  *(void *)(a1 + 64) = 0;
  uint64_t v4 = (std::string *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  sub_10013FA80((int)v10, a2);
  if (sub_1000A7CF8((uint64_t)v10, @"kImsiKey", (std::string *)a1))
  {
    if (sub_1000A7CF8((uint64_t)v10, @"kImeiKey", v4))
    {
      if (!sub_1000A7CF8((uint64_t)v10, @"kUuidKey", v3))
      {
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BB348);
        }
        BOOL v5 = qword_102419608;
        if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#clct,CLCTMobileEquipmentInfo, couldn't get value for uuid", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419600 == -1) {
            goto LABEL_25;
          }
          goto LABEL_27;
        }
      }
    }
    else
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BB348);
      }
      id v7 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#clct,CLCTMobileEquipmentInfo, couldn't get value for imei", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 == -1) {
          goto LABEL_25;
        }
        goto LABEL_27;
      }
    }
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    int v6 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#clct,CLCTMobileEquipmentInfo, couldn't get value for imsi", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 == -1)
      {
LABEL_25:
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTMobileEquipmentInfo::CLCTMobileEquipmentInfo(CFDictionaryRef)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
        goto LABEL_23;
      }
LABEL_27:
      dispatch_once(&qword_102419600, &stru_1022BB348);
      goto LABEL_25;
    }
  }
LABEL_23:
  sub_10013F3C4(v10);
  return a1;
}

void sub_10055E880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  if (*(char *)(v5 + 71) < 0) {
    operator delete(*v7);
  }
  if (*(char *)(v5 + 47) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v5 + 23) < 0) {
    operator delete(*(void **)v5);
  }
  _Unwind_Resume(a1);
}

NSDictionary *sub_10055E8DC(uint64_t *a1)
{
  v6[0] = @"kImeiKey";
  uint64_t v2 = a1 + 3;
  if (*((char *)a1 + 47) < 0) {
    uint64_t v2 = (void *)*v2;
  }
  v7[0] = +[NSString stringWithUTF8String:v2];
  v6[1] = @"kImsiKey";
  int v3 = a1;
  if (*((char *)a1 + 23) < 0) {
    int v3 = (uint64_t *)*a1;
  }
  v7[1] = +[NSString stringWithUTF8String:v3];
  _DWORD v6[2] = @"kUuidKey";
  uint64_t v4 = a1 + 6;
  if (*((char *)a1 + 71) < 0) {
    uint64_t v4 = (void *)*v4;
  }
  _DWORD v7[2] = +[NSString stringWithUTF8String:v4];
  return +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:3];
}

std::string *sub_10055E9C4(std::string *a1, void *a2)
{
  *((_DWORD *)sub_100134750(a1, "") + 6) = 0;
  if (a2)
  {
    if ([a2 registrationDisplayStatus]) {
      std::string::assign(a1, (const std::string::value_type *)[objc_msgSend(objc_msgSend(a2, "registrationDisplayStatus"), "UTF8String")]);
    }
    a1[1].__r_.__value_.__s.__data_[0] = [a2 isInHomeCountry];
    a1[1].__r_.__value_.__s.__data_[1] = [a2 changedDueToSimRemoval];
    a1[1].__r_.__value_.__s.__data_[2] = [a2 isRegistrationForcedHome];
    a1[1].__r_.__value_.__s.__data_[3] = [a2 isSatelliteSystem];
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    uint64_t v4 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#clct,CLCTRegistrationDisplayStatus, status is null", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BB348);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTRegistrationDisplayStatus::CLCTRegistrationDisplayStatus(CTRegistrationDisplayStatus *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return a1;
}

void sub_10055EBCC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10055EBEC(std::string *a1, const __CFDictionary *a2)
{
  uint64_t v4 = sub_100134750(a1, "");
  *((_DWORD *)v4 + 6) = 0;
  uint64_t v5 = (BOOL *)(v4 + 3);
  sub_10013FA80((int)v13, a2);
  if (!sub_1000A7CF8((uint64_t)v13, @"kRegistrationStatusKey", a1))
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    id v7 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#clct,CLCTRegistrationDisplayStatus, couldn't get value for registrationDisplayStatus", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_39;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      goto LABEL_43;
    }
LABEL_41:
    __int16 v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTRegistrationDisplayStatus::CLCTRegistrationDisplayStatus(CFDictionaryRef)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
    goto LABEL_39;
  }
  if ((sub_1000D29FC((uint64_t)v13, @"kRegistrationInHomeCountryKey", v5) & 1) == 0)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    char v8 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#clct,CLCTRegistrationDisplayStatus, couldn't get value for isInHomeCountry", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_39;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      goto LABEL_43;
    }
    goto LABEL_41;
  }
  if ((sub_1000D29FC((uint64_t)v13, @"kRegistrationChangedDueToSimRemovalKey", v5 + 1) & 1) == 0)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    uint64_t v9 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#clct,CLCTRegistrationDisplayStatus, couldn't get value for changedDueToSimRemoval", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_39;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      goto LABEL_43;
    }
    goto LABEL_41;
  }
  if (sub_1000D29FC((uint64_t)v13, @"kRegistrationIsForcedRegisteredHomeKey", v5 + 2))
  {
    if ((sub_1000D29FC((uint64_t)v13, @"kRegsitrationOnSatelliteSystemKey", v5 + 3) & 1) == 0)
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BB348);
      }
      int v6 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#clct,CLCTRegistrationDisplayStatus, couldn't get value for isSatelliteSystem", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 == -1) {
          goto LABEL_41;
        }
LABEL_43:
        dispatch_once(&qword_102419600, &stru_1022BB348);
        goto LABEL_41;
      }
    }
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    BOOL v10 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#clct,CLCTRegistrationDisplayStatus, couldn't get value for isRegistrationForcedHome", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 == -1) {
        goto LABEL_41;
      }
      goto LABEL_43;
    }
  }
LABEL_39:
  sub_10013F3C4(v13);
  return a1;
}

void sub_10055F2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  if (*(char *)(v5 + 23) < 0) {
    operator delete(*(void **)v5);
  }
  _Unwind_Resume(a1);
}

NSDictionary *sub_10055F300(uint64_t *a1)
{
  v4[0] = @"kRegistrationStatusKey";
  uint64_t v2 = a1;
  if (*((char *)a1 + 23) < 0) {
    uint64_t v2 = (uint64_t *)*a1;
  }
  v5[0] = +[NSString stringWithUTF8String:v2];
  v4[1] = @"kRegistrationInHomeCountryKey";
  v5[1] = +[NSNumber numberWithBool:*((unsigned __int8 *)a1 + 24)];
  _DWORD v4[2] = @"kRegistrationChangedDueToSimRemovalKey";
  v5[2] = +[NSNumber numberWithBool:*((unsigned __int8 *)a1 + 25)];
  void v4[3] = @"kRegistrationIsForcedRegisteredHomeKey";
  void v5[3] = +[NSNumber numberWithBool:*((unsigned __int8 *)a1 + 26)];
  v4[4] = @"kRegsitrationOnSatelliteSystemKey";
  v5[4] = +[NSNumber numberWithBool:*((unsigned __int8 *)a1 + 27)];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:5];
}

uint64_t sub_10055F40C(uint64_t a1, int a2)
{
  int v2 = a2 + 2;
  if (a2 + 2) < 0xD && ((0x1EF7u >> v2)) {
    return dword_101D23390[v2];
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022BB348);
  }
  int v3 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#clct,CLCTDataStatus, invalid value for CTWirelessAccessTechnology", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLCTWirelessAccessTechnology CLTelephonyService_Type::CLCTDataStatus::getWirelessAccessTechnology(CTWirelessAccessTechnology)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return 4294967294;
}

uint64_t sub_10055F5C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a2 >= 0x12)
  {
    if (a2 == 18) {
      uint64_t v2 = 18;
    }
    else {
      uint64_t v2 = 0;
    }
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    uint64_t v4 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#clct,CLCTDataStatus, invalid value for CTDataIndicatorStatus", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BB348);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLCTDataIndicatorStatus CLTelephonyService_Type::CLCTDataStatus::getDataIndicatorStatus(CTDataIndicatorStatus)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return v2;
}

uint64_t sub_10055F768(uint64_t a1, void *a2)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = -2;
  *(_WORD *)(a1 + 20) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  if (a2)
  {
    *(unsigned char *)a1 = [a2 attached];
    *(unsigned char *)(a1 + 12) = [a2 roamAllowed];
    *(unsigned char *)(a1 + 20) = [a2 dataPlanSignalingReductionOverride];
    *(unsigned char *)(a1 + 21) = [a2 cellularDataPossible];
    *(_DWORD *)(a1 + 24) = [a2 activeContexts];
    *(_DWORD *)(a1 + 2_Block_object_dispose(&STACK[0x850], 8) = [a2 totalActiveContexts];
    *(unsigned char *)(a1 + 32) = [a2 inHomeCountry];
    id v4 = [a2 radioTechnology];
    *(_DWORD *)(a1 + 16) = sub_10055F40C((uint64_t)v4, (int)v4);
    id v5 = [a2 indicator];
    *(_DWORD *)(a1 + 4) = sub_10055F5C0((uint64_t)v5, (uint64_t)v5);
    id v6 = [a2 indicatorOverride];
    *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = sub_10055F5C0((uint64_t)v6, (uint64_t)v6);
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    id v7 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#clct,CLCTDataStatus, status is null", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BB348);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTDataStatus::CLCTDataStatus(CTDataStatus *)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  return a1;
}

uint64_t sub_10055F9BC(uint64_t a1, const __CFDictionary *a2)
{
  *(void *)(a1 + 4) = 0;
  int v3 = (_DWORD *)(a1 + 4);
  *(unsigned char *)(a1 + 12) = 0;
  id v4 = (BOOL *)(a1 + 12);
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 16) = -2;
  *(_WORD *)(a1 + 20) = 0;
  id v5 = (BOOL *)(a1 + 20);
  *(void *)(a1 + 24) = 0;
  id v6 = (_DWORD *)(a1 + 24);
  *(unsigned char *)(a1 + 32) = 0;
  id v7 = (BOOL *)(a1 + 32);
  sub_10013FA80((int)v23, a2);
  if ((sub_1000D29FC((uint64_t)v23, @"kDataAttachedKey", (BOOL *)a1) & 1) == 0)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    uint64_t v9 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#clct,CLCTDataStatus, couldn't get value for attached", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BB348);
      }
      LOWORD(v22[0]) = 0;
      BOOL v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTDataStatus::CLCTDataStatus(CFDictionaryRef)", "%s\n", v10);
      goto LABEL_84;
    }
    goto LABEL_81;
  }
  v22[0] = 0;
  if ((sub_10013E418((uint64_t)v23, @"kDataIndicatorKey", v22) & 1) == 0)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    id v11 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#clct,CLCTDataStatus, couldn't get value for indicatorType", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BB348);
      }
      LOWORD(v21[0]) = 0;
      BOOL v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTDataStatus::CLCTDataStatus(CFDictionaryRef)", "%s\n", v10);
      goto LABEL_84;
    }
    goto LABEL_81;
  }
  *int v3 = v22[0];
  v21[0] = 0;
  if ((sub_10013E418((uint64_t)v23, @"kDataIndicatorOverrideKey", v21) & 1) == 0)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    __int16 v12 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#clct,CLCTDataStatus, couldn't get value for indicatorOverrideType", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_81;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 == -1)
    {
LABEL_40:
      LOWORD(v20[0]) = 0;
      BOOL v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTDataStatus::CLCTDataStatus(CFDictionaryRef)", "%s\n", v10);
      goto LABEL_84;
    }
LABEL_86:
    dispatch_once(&qword_102419600, &stru_1022BB348);
    goto LABEL_40;
  }
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = v21[0];
  if ((sub_1000D29FC((uint64_t)v23, @"kDataRoamAllowedKey", v4) & 1) == 0)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    unsigned int v13 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#clct,CLCTDataStatus, couldn't get value for roamAllowed", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_81;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 == -1) {
      goto LABEL_40;
    }
    goto LABEL_86;
  }
  v20[0] = 0;
  if ((sub_10013E418((uint64_t)v23, @"kDataRadioAccessTechnologyKey", v20) & 1) == 0)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    uint64_t v14 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#clct,CLCTDataStatus, couldn't get value for radioTechnologyType", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_81;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 == -1) {
      goto LABEL_83;
    }
LABEL_88:
    dispatch_once(&qword_102419600, &stru_1022BB348);
    goto LABEL_83;
  }
  *(_DWORD *)(a1 + 16) = v20[0];
  if ((sub_1000D29FC((uint64_t)v23, @"kDataPlanSignalingReductionOverrideKey", v5) & 1) == 0)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    char v15 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#clct,CLCTDataStatus, couldn't get value for dataPlanSignalingReductionOverride", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_81;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 == -1) {
      goto LABEL_83;
    }
    goto LABEL_88;
  }
  if ((sub_1000D29FC((uint64_t)v23, @"kDataCellularDataPossibleKey", (BOOL *)(a1 + 21)) & 1) == 0)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    int v16 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#clct,CLCTDataStatus, couldn't get value for cellularDataPossible", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_81;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 == -1) {
      goto LABEL_83;
    }
    goto LABEL_88;
  }
  if ((sub_1004D08E4((uint64_t)v23, @"kDataActiveContextsKey", v6) & 1) == 0)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    unsigned int v17 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#clct,CLCTDataStatus, couldn't get value for activeContexts", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_81;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 == -1) {
      goto LABEL_83;
    }
    goto LABEL_88;
  }
  if ((sub_1004D08E4((uint64_t)v23, @"kDataTotalActiveContextsKey", (_DWORD *)(a1 + 28)) & 1) == 0)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    int v18 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#clct,CLCTDataStatus, couldn't get value for totalActiveContexts", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_81;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 == -1)
    {
LABEL_83:
      BOOL v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTDataStatus::CLCTDataStatus(CFDictionaryRef)", "%s\n", v10);
LABEL_84:
      if (v10 != (char *)buf) {
        free(v10);
      }
      goto LABEL_81;
    }
    goto LABEL_88;
  }
  if ((sub_1000D29FC((uint64_t)v23, @"kDataInHomeCountryKey", v7) & 1) == 0)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    char v8 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#clct,CLCTDataStatus, couldn't get value for totalActiveContexts", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 == -1) {
        goto LABEL_83;
      }
      goto LABEL_88;
    }
  }
LABEL_81:
  sub_10013F3C4(v23);
  return a1;
}

void sub_1005606FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100560750(unsigned __int8 *a1)
{
  v3[0] = @"kDataAttachedKey";
  v4[0] = +[NSNumber numberWithBool:*a1];
  v3[1] = @"kDataIndicatorKey";
  v4[1] = +[NSNumber numberWithInt:*((unsigned int *)a1 + 1)];
  _DWORD v3[2] = @"kDataIndicatorOverrideKey";
  _DWORD v4[2] = +[NSNumber numberWithInt:*((unsigned int *)a1 + 2)];
  void v3[3] = @"kDataRoamAllowedKey";
  void v4[3] = +[NSNumber numberWithBool:a1[12]];
  v3[4] = @"kDataRadioAccessTechnologyKey";
  v4[4] = +[NSNumber numberWithInt:*((unsigned int *)a1 + 4)];
  void v3[5] = @"kDataPlanSignalingReductionOverrideKey";
  void v4[5] = +[NSNumber numberWithBool:a1[20]];
  v3[6] = @"kDataCellularDataPossibleKey";
  void v4[6] = +[NSNumber numberWithBool:a1[21]];
  void v3[7] = @"kDataActiveContextsKey";
  void v4[7] = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a1 + 6)];
  v3[8] = @"kDataTotalActiveContextsKey";
  v4[8] = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a1 + 7)];
  v3[9] = @"kDataInHomeCountryKey";
  v4[9] = +[NSNumber numberWithBool:a1[32]];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:10];
}

uint64_t sub_1005608D8(uint64_t a1, void *a2)
{
  *(_WORD *)a1 = 0;
  if (a2)
  {
    *(unsigned char *)a1 = [a2 isRegisteredForSMS];
    *(unsigned char *)(a1 + 1) = [a2 isRegisteredForVoice];
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    id v4 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#clct,CLCTImsRegStatus, status is null", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BB348);
      }
      id v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTImsRegStatus::CLCTImsRegStatus(CTIMSRegistrationStatus *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return a1;
}

BOOL *sub_100560A98(BOOL *a1, const __CFDictionary *a2)
{
  *(_WORD *)a1 = 0;
  int v3 = a1 + 1;
  sub_10013FA80((int)v8, a2);
  if (sub_1000D29FC((uint64_t)v8, @"kIsRegisteredForSmsOverImsKey", a1))
  {
    if ((sub_1000D29FC((uint64_t)v8, @"kIsRegisteredForVoiceOverImsKey", v3) & 1) == 0)
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BB348);
      }
      id v4 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#clct,CLCTImsRegStatus, couldn't get value for RegisteredForVoiceOverIms", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 == -1)
        {
LABEL_17:
          id v7 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTImsRegStatus::CLCTImsRegStatus(CFDictionaryRef)", "%s\n", v7);
          if (v7 != (char *)buf) {
            free(v7);
          }
          goto LABEL_15;
        }
LABEL_19:
        dispatch_once(&qword_102419600, &stru_1022BB348);
        goto LABEL_17;
      }
    }
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    id v5 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#clct,CLCTImsRegStatus, couldn't get value for RegisteredForSmsOverIms", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 == -1) {
        goto LABEL_17;
      }
      goto LABEL_19;
    }
  }
LABEL_15:
  sub_10013F3C4(v8);
  return a1;
}

void sub_100560DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100560DC8(unsigned __int8 *a1)
{
  v4[0] = @"kIsRegisteredForSmsOverImsKey";
  uint64_t v2 = +[NSNumber numberWithBool:*a1];
  v4[1] = @"kIsRegisteredForVoiceOverImsKey";
  v5[0] = v2;
  v5[1] = +[NSNumber numberWithBool:a1[1]];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];
}

uint64_t sub_100560E6C(uint64_t a1, void *a2)
{
  *(_WORD *)a1 = 0;
  *(unsigned char *)(a1 + 2) = 0;
  if (a2)
  {
    *(unsigned char *)a1 = [objc_msgSend(objc_msgSend(a2, "userDataPreferred"), "BOOLValue")];
    *(unsigned char *)(a1 + 1) = [(objc_msgSend(objc_msgSend(a2, "userDefaultVoice"), "BOOLValue")) ? 1 : 0];
    *(unsigned char *)(a1 + 2) = [a2 isSimPresent];
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    id v4 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#clct,CLCTXPCServiceSubscriptionContext, context is null", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BB348);
      }
      id v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTXPCServiceSubscriptionContext::CLCTXPCServiceSubscriptionContext(CTXPCServiceSubscriptionContext *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return a1;
}

BOOL *sub_100561044(BOOL *a1, const __CFDictionary *a2)
{
  *(_WORD *)a1 = 0;
  int v3 = a1 + 1;
  a1[2] = 0;
  id v4 = a1 + 2;
  sub_10013FA80((int)v10, a2);
  if (sub_1000D29FC((uint64_t)v10, @"kUserDataPreferredKey", a1))
  {
    if (sub_1000D29FC((uint64_t)v10, @"kUserDefaultVoiceKey", v3))
    {
      if ((sub_1000D29FC((uint64_t)v10, @"kSimPresentKey", v4) & 1) == 0)
      {
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022BB348);
        }
        id v5 = qword_102419608;
        if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#clct,CLCTXPCServiceSubscriptionContext, couldn't get value for isSimPresent", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419600 == -1) {
            goto LABEL_25;
          }
          goto LABEL_27;
        }
      }
    }
    else
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022BB348);
      }
      id v7 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#clct,CLCTXPCServiceSubscriptionContext, couldn't get value for userDefaultVoice", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 == -1) {
          goto LABEL_25;
        }
        goto LABEL_27;
      }
    }
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022BB348);
    }
    id v6 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#clct,CLCTXPCServiceSubscriptionContext, couldn't get value for userDataPreferred", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 == -1)
      {
LABEL_25:
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLTelephonyService_Type::CLCTXPCServiceSubscriptionContext::CLCTXPCServiceSubscriptionContext(CFDictionaryRef)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
        goto LABEL_23;
      }
LABEL_27:
      dispatch_once(&qword_102419600, &stru_1022BB348);
      goto LABEL_25;
    }
  }
LABEL_23:
  sub_10013F3C4(v10);
  return a1;
}

void sub_100561490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

NSDictionary *sub_1005614BC(unsigned __int8 *a1)
{
  v3[0] = @"kUserDataPreferredKey";
  v4[0] = +[NSNumber numberWithBool:*a1];
  v3[1] = @"kUserDefaultVoiceKey";
  v4[1] = +[NSNumber numberWithBool:a1[1]];
  _DWORD v3[2] = @"kSimPresentKey";
  void v4[2] = +[NSNumber numberWithBool:a1[2]];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:3];
}

void sub_100561580()
{
}

void sub_1005616CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_100561744(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_1022BB548;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    __int16 v12 = a3;
  }
  else {
    __int16 v12 = (uint64_t *)*a3;
  }
  id v13 = [[[a4 vendor] proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)]
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:[a4 silo]];
  return a1;
}

void sub_100561828(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        uint64_t v9 = (uint64_t *)v4;
      }
      else {
        uint64_t v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)uint64_t buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BB268);
      }
      BOOL v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        id v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          id v11 = (void *)*v11;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        unsigned int v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022BB268);
        }
        __int16 v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          __int16 v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        char v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_100561AB8(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_100561B00(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_100561B48(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

BOOL sub_100561B90(uint64_t a1, int a2, unsigned int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      uint64_t v9 = (uint64_t *)v5;
    }
    else {
      uint64_t v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    int v14 = sub_1000F1244(a3);
    uint64_t v17 = *(void *)(v6 + 48);
    uint64_t v16 = v6 + 48;
    uint64_t v15 = v17;
    if (!v17) {
      goto LABEL_29;
    }
    uint64_t v18 = v16;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v14;
      if (v19 >= v14) {
        int v21 = (uint64_t *)v15;
      }
      else {
        int v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v16 || v14 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v16;
    return v18 != v16;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BB268);
    }
    BOOL v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      id v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        id v11 = (void *)*v11;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      int v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BB268);
      }
      __int16 v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_100561E18(char *a1, int a2, unsigned int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          id v11 = (uint64_t *)v6;
        }
        else {
          id v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        int v12 = sub_1000F1244(a3);
        uint64_t v15 = (char *)*((void *)v8 + 6);
        int v14 = v8 + 48;
        id v13 = v15;
        if (v15)
        {
          uint64_t v16 = v14;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v12;
            if (v17 >= v12) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v14 && v12 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = sub_1000F1244(a3);
            sub_1000ED9F4((uint64_t)(v14 - 8), (int *)__p);
            int v20 = sub_1000F1244(a3);
            uint64_t v21 = *((void *)a1 + 8);
            if (!v21) {
              goto LABEL_33;
            }
            __int16 v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v21 + 32);
              BOOL v24 = v23 < v20;
              if (v23 >= v20) {
                __int16 v25 = (uint64_t *)v21;
              }
              else {
                __int16 v25 = (uint64_t *)(v21 + 8);
              }
              if (!v24) {
                __int16 v22 = (char *)v21;
              }
              uint64_t v21 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v20 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, unsigned int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022BB268);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, unsigned int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  unsigned int v28 = __p;
                }
                else {
                  unsigned int v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                int v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022BB268);
                }
                int v29 = a1 + 8;
                if (a1[31] < 0) {
                  int v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, unsigned int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  int v30 = buf;
                }
                else {
                  int v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                int v38 = v29;
                __int16 v39 = 2082;
                int v40 = v30;
                int v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

void sub_100562200(uint64_t a1, unsigned int *a2)
{
  int v3 = sub_1000F1244(a2);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v5 = a1 + 64;
  uint64_t v4 = v6;
  if (v6)
  {
    uint64_t v7 = v5;
    do
    {
      int v8 = *(_DWORD *)(v4 + 32);
      BOOL v9 = v8 < v3;
      if (v8 >= v3) {
        BOOL v10 = (uint64_t *)v4;
      }
      else {
        BOOL v10 = (uint64_t *)(v4 + 8);
      }
      if (!v9) {
        uint64_t v7 = v4;
      }
      uint64_t v4 = *v10;
    }
    while (*v10);
    if (v7 != v5 && v3 >= *(_DWORD *)(v7 + 32))
    {
      id v11 = *(std::__shared_weak_count **)(v7 + 72);
      *(void *)(v7 + 64) = 0;
      *(void *)(v7 + 72) = 0;
      if (v11)
      {
        sub_1000DB0A0(v11);
      }
    }
  }
}

uint64_t sub_10056228C(uint64_t a1, unsigned int *a2, const void **a3)
{
  int v5 = sub_1000F1244(a2);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v7 = a1 + 64;
  uint64_t v6 = v8;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = v7;
  do
  {
    int v10 = *(_DWORD *)(v6 + 32);
    BOOL v11 = v10 < v5;
    if (v10 >= v5) {
      int v12 = (uint64_t *)v6;
    }
    else {
      int v12 = (uint64_t *)(v6 + 8);
    }
    if (!v11) {
      uint64_t v9 = v6;
    }
    uint64_t v6 = *v12;
  }
  while (*v12);
  if (v9 == v7) {
    return 0;
  }
  if (v5 < *(_DWORD *)(v9 + 32)) {
    return 0;
  }
  id v13 = *(CFTypeRef **)(v9 + 64);
  if (!v13) {
    return 0;
  }
  CFTypeRef v14 = *v13;
  if (*v13) {
    CFRetain(*v13);
  }
  uint64_t v15 = *a3;
  *a3 = v14;
  int v17 = v15;
  sub_1000DC024(&v17);
  return 1;
}

uint64_t sub_100562334(uint64_t a1, unsigned int *a2, const void **a3)
{
  sub_1000AFBB0(a3, &v10);
  int v9 = sub_1000F1244(a2);
  BOOL v11 = &v9;
  int v5 = sub_10044715C((uint64_t **)(a1 + 56), &v9, (uint64_t)&unk_101D0B290, &v11);
  long long v6 = v10;
  long long v10 = 0uLL;
  uint64_t v7 = (std::__shared_weak_count *)v5[9];
  *((_OWORD *)v5 + 4) = v6;
  if (v7)
  {
    sub_1000DB0A0(v7);
    if (*((void *)&v10 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  return 1;
}

void sub_1005623D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_1005623E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5 = 0;
  (*(void (**)(uint64_t, uint64_t, const void **, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, &v5, a3, a4, 0);
  return sub_1000DC024(&v5);
}

void sub_10056244C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000DC024((const void **)va);
  _Unwind_Resume(a1);
}

void sub_100562460(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BB268);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v3 = (void *)*v3;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      __int16 v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BB268);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::listClients() [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BB268);
    }
    int v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      long long v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        long long v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 136315394;
      __int16 v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BB268);
      }
      int v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::listClients() [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    uint64_t v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022BB268);
            }
            long long v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              BOOL v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                BOOL v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)uint64_t buf = 136315650;
              __int16 v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022BB268);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::listClients() [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            CFTypeRef v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                uint64_t v15 = v14;
                CFTypeRef v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                uint64_t v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            uint64_t v8 = v19;
          }
          while (!v16);
        }
        uint64_t v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_100562A10(uint64_t a1)
{
  sub_1005631F8(a1);

  operator delete();
}

void sub_100562A48(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100562A78(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100562AA8(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100562AD8(id a1)
{
}

void sub_100562B28(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100562B58(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

uint64_t sub_100562B88(uint64_t a1, int a2)
{
  *(_DWORD *)a1 = a2;
  sub_100134750((void *)(a1 + 8), (char *)[@"kBundleIDUnavailable" UTF8String]);
  *(unsigned char *)(a1 + 32) = 0;
  sub_100134750((void *)(a1 + 40), (char *)[@"kBundleVersionUnavailable" UTF8String]);
  *(unsigned char *)(a1 + 64) = 0;
  sub_1000E9354(a1 + 72);
  *(unsigned char *)(a1 + 8_Block_object_dispose(&STACK[0x850], 8) = 0;
  sub_1000E9354(a1 + 96);
  *(unsigned char *)(a1 + 112) = 0;
  sub_1000E9354(a1 + 120);
  *(unsigned char *)(a1 + 136) = 0;
  return a1;
}

void sub_100562C2C(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;
  sub_10013F3C4(v6);
  sub_10013F3C4(v5);
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100562C84(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

BOOL sub_100562CE0(uint64_t a1)
{
  return sub_100554878(*(void *)(a1 + 32), "CoreLocation debugging");
}

void sub_100562CF0(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100562D20(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_100562D50(uint64_t result)
{
  if (*(_DWORD *)(result + 52) == -469794816) {
    return (*(uint64_t (**)(void, const __CFString *, void))(**(void **)(result + 32) + 264))(*(void *)(result + 32), @"kCLTelephonyServiceResetNotification", 0);
  }
  return result;
}

void sub_100562DA4(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t *sub_100562DD4(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    sub_1000F5BB0(v2 + 16, *(void **)(v2 + 24));
    operator delete();
  }
  return result;
}

uint64_t *sub_100562E38(uint64_t a1, uint64_t a2)
{
  sub_100562EEC(a1, a2, (uint64_t)v9);
  int v3 = (uint64_t **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    int v5 = *((_DWORD *)v9[0] + 8);
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t *)v4;
        int v7 = *(_DWORD *)(v4 + 32);
        if (v5 >= v7) {
          break;
        }
        uint64_t v4 = *v6;
        int v3 = (uint64_t **)v6;
        if (!*v6) {
          goto LABEL_10;
        }
      }
      if (v7 >= v5) {
        break;
      }
      uint64_t v4 = v6[1];
      if (!v4)
      {
        int v3 = (uint64_t **)(v6 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
LABEL_10:
    sub_1000EDF90((uint64_t **)a1, (uint64_t)v6, v3, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
  }
  sub_10044725C((uint64_t)v9, 0);
  return v6;
}

uint64_t sub_100562EEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x850], 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_100562F58((uint64_t)v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100562F40(_Unwind_Exception *a1)
{
  sub_10044725C(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100562F58(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = sub_1000F1244((unsigned int *)a2);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = *(void *)(a2 + 8);
  uint64_t v4 = (void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a1 + 16;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v7;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    *(void *)(a2 + _Block_object_dispose(&STACK[0x850], 8) = v4;
    void *v4 = 0;
    *(void *)(a2 + 24) = 0;
  }
  else
  {
    *(void *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = v6;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = *(unsigned char *)(a2 + 48);
  return a1;
}

void sub_100562FD8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022BB4D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100562FF8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022BB4D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10056304C(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_10056307C(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_1000FA860(v3, v1);
      v1 += 696;
    }
    while (v1 != v2);
  }
}

uint64_t sub_1005630D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x66FD0EB66FD0EB67 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x5E293205E29320) {
    sub_1001D7FD4();
  }
  if (0xCDFA1D6CDFA1D6CELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xCDFA1D6CDFA1D6CELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x66FD0EB66FD0EB67 * ((a1[2] - *a1) >> 3)) >= 0x2F149902F14990) {
    unint64_t v6 = 0x5E293205E29320;
  }
  else {
    unint64_t v6 = v4;
  }
  CFTypeRef v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)sub_10010FAD4((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  long long v10 = v7;
  BOOL v11 = &v7[696 * v3];
  int v13 = &v7[696 * v6];
  sub_1000FC2C4((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  int v12 = v11 + 696;
  sub_10010FB20(a1, &v10);
  uint64_t v8 = a1[1];
  sub_10010FD98(&v10);
  return v8;
}

void sub_1005631E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10010FD98((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005631F8(uint64_t a1)
{
  *(void *)a1 = off_1022BB548;
  uint64_t v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_100563268()
{
}

void sub_100563320()
{
}

const void **sub_100563344(uint64_t a1)
{
  uint64_t result = *(const void ***)(a1 + 32);
  if (result)
  {
    sub_1000DC024(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10056338C(uint64_t result)
{
  *(unsigned char *)(result + 4_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)uint64_t result = 0;
  *(void *)(result + _Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)(result + 16) = 0xBFF0000000000000;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 36) = -1;
  *(_WORD *)(result + 40) = 0;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_1005633B0(uint64_t a1, uint64_t a2)
{
  switch(*(void *)(a2 + 16))
  {
    case 0xDLL:
      *(void *)a1 = 0;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = 0;
      *(void *)(a1 + 16) = 0xBFF0000000000000;
      *(void *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 36) = -1;
      *(_WORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 44) = 0;
      *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = 1;
      *(void *)a1 = *(void *)a2;
      long long v4 = *(_OWORD *)(a2 + 208);
      v20[12] = *(_OWORD *)(a2 + 192);
      v20[13] = v4;
      uint64_t v21 = *(void *)(a2 + 224);
      long long v5 = *(_OWORD *)(a2 + 144);
      v20[8] = *(_OWORD *)(a2 + 128);
      v20[9] = v5;
      long long v6 = *(_OWORD *)(a2 + 160);
      v20[11] = *(_OWORD *)(a2 + 176);
      v20[10] = v6;
      long long v7 = *(_OWORD *)(a2 + 80);
      _DWORD v20[4] = *(_OWORD *)(a2 + 64);
      v20[5] = v7;
      long long v8 = *(_OWORD *)(a2 + 96);
      v20[7] = *(_OWORD *)(a2 + 112);
      v20[6] = v8;
      long long v9 = *(_OWORD *)(a2 + 16);
      v20[0] = *(_OWORD *)a2;
      v20[1] = v9;
      long long v10 = *(_OWORD *)(a2 + 32);
      void v20[3] = *(_OWORD *)(a2 + 48);
      v20[2] = v10;
      int v11 = sub_100F8418C((uint64_t)v20);
      *(_DWORD *)(a1 + 36) = v11;
      sub_100F841A8(v11, (uint64_t)buf);
      *(unsigned char *)(a1 + 41) = buf[0];
      break;
    case 0xFLL:
      if (*(unsigned char *)(a1 + 48))
      {
        *(void *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = *(void *)(a2 + 8);
        sub_1005636C4(a1);
      }
      *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = 0;
      *(void *)(a1 + 16) = 0xBFF0000000000000;
      *(void *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 36) = -1;
      *(_WORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 44) = 0;
      break;
    case 0x10:
      *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = 0;
      break;
    case 0x11:
      *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = 1;
      break;
    default:
      break;
  }
  if (qword_102419340 != -1) {
    dispatch_once(&qword_102419340, &stru_1022BB5C0);
  }
  int v12 = qword_102419348;
  if (os_log_type_enabled((os_log_t)qword_102419348, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = *(void *)(a2 + 16);
    int v14 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)uint64_t buf = 67109376;
    int v17 = v13;
    __int16 v18 = 1024;
    int v19 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "[CLNoMovement] analytics: eventType,%d,isCollectingSessionMetrics,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419340 != -1) {
      dispatch_once(&qword_102419340, &stru_1022BB5C0);
    }
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNoMovementAnalytics::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
}

void sub_1005636C4(uint64_t a1)
{
  if (objc_opt_class()
    && (objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed") & 1) != 0)
  {
    v14[0] = @"sessionDuration";
    int v2 = llround((*(double *)(a1 + 8) - *(double *)a1) / 60.0);
    if (v2 >= 180) {
      uint64_t v3 = 180;
    }
    else {
      uint64_t v3 = v2;
    }
    v15[0] = +[NSNumber numberWithInt:v3];
    v14[1] = @"timeToTriggerNoMovement";
    int v4 = llround(*(double *)(a1 + 16) / 60.0);
    if (v4 >= 180) {
      uint64_t v5 = 180;
    }
    else {
      uint64_t v5 = v4;
    }
    v15[1] = +[NSNumber numberWithInt:v5];
    int v14[2] = @"averagePercentEpochsInNonTriggerWindows";
    int v6 = (int)((float)(*(float *)(a1 + 28) / (float)*(int *)(a1 + 24)) * 100.0);
    if (v6 >= 100) {
      uint64_t v7 = 100;
    }
    else {
      uint64_t v7 = v6;
    }
    v15[2] = +[NSNumber numberWithInt:v7];
    void v14[3] = @"averagePercentEpochsInTriggerWindows";
    int v8 = (int)((float)(*(float *)(a1 + 32) / (float)*(int *)(a1 + 24)) * 100.0);
    if (v8 >= 100) {
      uint64_t v9 = 100;
    }
    else {
      uint64_t v9 = v8;
    }
    v15[3] = +[NSNumber numberWithInt:v9];
    v14[4] = @"hkWorkoutActivityType";
    v15[4] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 36)];
    v14[5] = @"enteredNoMovementState";
    v15[5] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 40)];
    void v14[6] = @"shouldServeDetectionToClients";
    v15[6] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 41)];
    v14[7] = @"numClients";
    v15[7] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 44)];
    long long v10 = +[NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:8];
    AnalyticsSendEventLazy();
    if (qword_102419340 != -1) {
      dispatch_once(&qword_102419340, &stru_1022BB5C0);
    }
    int v11 = qword_102419348;
    if (os_log_type_enabled((os_log_t)qword_102419348, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 138543362;
      int v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[CLNoMovement] analytics: uploaded session metrics %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419340 != -1) {
        dispatch_once(&qword_102419340, &stru_1022BB5C0);
      }
LABEL_30:
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLNoMovementAnalytics::uploadSessionMetrics() const", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  else
  {
    if (qword_102419340 != -1) {
      dispatch_once(&qword_102419340, &stru_1022BB5C0);
    }
    int v12 = qword_102419348;
    if (os_log_type_enabled((os_log_t)qword_102419348, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "[CLNoMovement] analytics: no IHA authorization", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419340 != -1) {
        dispatch_once(&qword_102419340, &stru_1022BB5C0);
      }
      goto LABEL_30;
    }
  }
}

float sub_100563B54(uint64_t a1, void *a2, int a3, float result)
{
  if (*(unsigned char *)(a1 + 48))
  {
    ++*(_DWORD *)(a1 + 24);
    if ([a2 state] == (id)2 && !*(unsigned char *)(a1 + 40))
    {
      *(unsigned char *)(a1 + 40) = 1;
      [a2 startTime];
      *(double *)(a1 + 16) = v7 - *(double *)a1;
    }
    float v8 = (float)a3;
    if (*(unsigned char *)(a1 + 40))
    {
      uint64_t result = *(float *)(a1 + 32) + v8;
      *(float *)(a1 + 32) = result;
    }
    else
    {
      uint64_t result = *(float *)(a1 + 28) + v8;
      *(float *)(a1 + 2_Block_object_dispose(&STACK[0x850], 8) = result;
    }
  }
  return result;
}

uint64_t sub_100563BF4(uint64_t result, int a2)
{
  if (*(unsigned char *)(result + 48))
  {
    int v2 = *(_DWORD *)(result + 44);
    if (v2 <= a2) {
      int v2 = a2;
    }
    *(_DWORD *)(result + 44) = v2;
  }
  return result;
}

uint64_t sub_100563C10(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_100563C18(id a1)
{
  qword_102419348 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CheckIn");
}

float sub_100563C48(float **a1, int a2)
{
  if (a2 <= 1) {
    int v2 = 1;
  }
  else {
    int v2 = a2;
  }
  uint64_t v3 = a1[1];
  if (*a1 == v3)
  {
    float v5 = 0.0;
    float v4 = 0.0;
  }
  else
  {
    float v4 = 0.0;
    float v5 = 0.0;
    int v6 = *a1;
    do
    {
      float v8 = *v6;
      float v7 = v6[1];
      v6 += 2;
      float v4 = v4 + (float)(v7 * v8);
      float v5 = v5 + (float)(v8 * v8);
    }
    while (v6 != v3);
  }
  int v9 = 0;
  float result = v4 / fmaxf(v5, 0.0001);
  do
  {
    if (*a1 == v3)
    {
      float v12 = 0.0;
      float v11 = 0.0;
    }
    else
    {
      float v11 = 0.0;
      float v12 = 0.0;
      uint64_t v13 = *a1;
      do
      {
        float v15 = *v13;
        float v14 = v13[1];
        v13 += 2;
        float v16 = fabsf(v14 - (float)(v15 * result));
        if (v16 <= 0.0001) {
          float v17 = 10000.0;
        }
        else {
          float v17 = 1.0 / v16;
        }
        float v11 = v11 + (float)((float)(v14 * v17) * v15);
        float v12 = v12 + (float)((float)(v15 * v17) * v15);
      }
      while (v13 != v3);
    }
    ++v9;
    float result = v11 / fmaxf(v12, 0.0001);
  }
  while (v9 != v2);
  return result;
}

uint64_t sub_100563D10(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_100564A2C(v2, a2);
}

double sub_100563D20(uint64_t a1)
{
  uint64_t v1 = a1 - 8;
  if (!a1) {
    uint64_t v1 = 0;
  }
  double result = 0.0;
  *(void *)(v1 + 896) = 0;
  *(_DWORD *)(v1 + 904) = 0;
  return result;
}

int *sub_100563D40(int *result)
{
  if (result) {
    uint64_t v1 = result - 2;
  }
  else {
    uint64_t v1 = 0;
  }
  *((void *)v1 + 112) = 0;
  v1[226] = 0;
  if (*((_WORD *)v1 + 23))
  {
    double result = (int *)sub_1004182C4((unsigned __int16 *)v1 + 22, 0);
    int v2 = *result;
  }
  else
  {
    int v2 = 0;
  }
  v1[229] = v2;
  v1[230] = 0;
  return result;
}

uint64_t sub_100563D9C(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_100564B08(v2, a2);
}

double sub_100563DAC(uint64_t a1)
{
  uint64_t v1 = a1 - 8;
  if (!a1) {
    uint64_t v1 = 0;
  }
  double result = 0.0;
  *(void *)(v1 + 896) = 0;
  *(_DWORD *)(v1 + 904) = 0;
  return result;
}

uint64_t sub_100563DC8(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_100564DA8(v2, a2);
}

double sub_100563DD8(uint64_t a1)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = &unk_1022BB5E0;
  *(void *)(a1 + 16) = 13;
  *(_WORD *)(a1 + 24) = 512;
  *(void *)a1 = off_1022BB728;
  *(unsigned char *)(a1 + 2_Block_object_dispose(&STACK[0x850], 8) = 1;
  *(void *)(a1 + 44) = 0xC00000000;
  *(_DWORD *)(a1 + 40) = 1031798784;
  *(unsigned char *)(a1 + 100) = 1;
  *(_DWORD *)(a1 + 120) = 6;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 14_Block_object_dispose(&STACK[0x850], 8) = 1;
  *(_DWORD *)(a1 + 16_Block_object_dispose(&STACK[0x850], 8) = 6;
  *(void *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 196) = 1;
  *(_DWORD *)(a1 + 216) = 47;
  *(void *)(a1 + 20_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(unsigned char *)(a1 + 40_Block_object_dispose(&STACK[0x850], 8) = 1;
  *(void *)(a1 + 424) = 0x400000000;
  *(_DWORD *)(a1 + 420) = 0;
  *(void *)(a1 + 44_Block_object_dispose(&STACK[0x850], 8) = off_1022D4E20;
  *(void *)(a1 + 456) = 0x4039000000000000;
  *(_OWORD *)(a1 + 464) = xmmword_101D233E0;
  *(_DWORD *)(a1 + 480) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 48_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(unsigned char *)(a1 + 512) = 1;
  *(void *)(a1 + 52_Block_object_dispose(&STACK[0x850], 8) = 0x4B00000000;
  *(_DWORD *)(a1 + 524) = 0;
  *(void *)(a1 + 840) = 0;
  *(void *)(a1 + 84_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)(a1 + 856) = 0xC08F380000000000;
  *(void *)(a1 + 864) = 0xC08F380000000000;
  *(unsigned char *)(a1 + 872) = 0;
  *(void *)(a1 + 880) = 0;
  *(unsigned char *)(a1 + 88_Block_object_dispose(&STACK[0x850], 8) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 896) = xmmword_101D233F0;
  *(_DWORD *)(a1 + 912) = 0;
  *(void *)(a1 + 916) = 0;
  return result;
}

uint64_t sub_100563F04(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v4 = *(_DWORD *)(a1 + 908);
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 == v5)
  {
    uint64_t result = 0;
    *(_DWORD *)(a1 + 90_Block_object_dispose(&STACK[0x850], 8) = v6;
    return result;
  }
  uint64_t v8 = *(unsigned __int16 *)(a1 + 214);
  if (*(_DWORD *)(a1 + 216) != v8) {
    return 0;
  }
  if (*(_WORD *)(a1 + 214))
  {
    unint64_t v11 = 0;
    LODWORD(v12) = 0;
    do
      uint64_t v12 = *(int *)sub_1000C0E4C((unsigned __int16 *)(a1 + 212), v11++) + (uint64_t)(int)v12;
    while (v8 != v11);
    unsigned int v13 = *(_DWORD *)(a1 + 216);
    unint64_t v14 = 100 * v12;
  }
  else
  {
    unsigned int v13 = 0;
    unint64_t v14 = 0;
  }
  unint64_t v15 = v14 / v13;
  if ((int)v15 <= 19)
  {
    uint64_t result = 0;
    *(_DWORD *)(a1 + 912) = 0;
    return result;
  }
  int v16 = *(_DWORD *)(a1 + 912);
  *(_DWORD *)(a1 + 912) = v16 + 1;
  if (v15 < 0x4C) {
    return 0;
  }
  uint64_t result = 0;
  if (v16 >= 46 && !*(_DWORD *)(a2 + 20) && !*(unsigned char *)(a2 + 80) && *(int *)(a2 + 16) >= 5)
  {
    *a3 = v16 + 1 + (int)(float)((float)v13 * 0.2);
    return 1;
  }
  return result;
}

uint64_t sub_100564034(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int16 *)(a1 + 18);
  if (!*(_WORD *)(a1 + 18)) {
    return 0;
  }
  unint64_t v2 = 0;
  LODWORD(v3) = 0;
  int v4 = (unsigned __int16 *)(a1 + 16);
  do
    uint64_t v3 = (*(_DWORD *)sub_1000C0E4C(v4, v2++) + v3);
  while (v1 != v2);
  return v3;
}

uint64_t sub_100564098(uint64_t a1, double *a2)
{
  int v4 = operator new(0xCuLL);
  long long v58 = v4 + 3;
  long long v59 = (char *)(v4 + 3);
  *(void *)int v4 = 7;
  void v4[2] = 8;
  std::string __p = v4;
  sub_1009660E4(a1 + 448, (uint64_t)a2);
  v115[0] = xmmword_101D1E250;
  __int16 v118 = 0;
  memset(&v115[1], 0, 96);
  long long v116 = 0u;
  memset(v117, 0, sizeof(v117));
  long long v119 = xmmword_101D1E250;
  uint64_t v120 = 0;
  int v121 = 0;
  uint64_t v122 = 0;
  v123[0] = 0;
  *(void *)((char *)v123 + 5) = 0;
  *(void *)((char *)&v123[1] + 6) = 0;
  char v124 = 0;
  memset(&v123[3], 0, 24);
  long long v125 = xmmword_101D1E250;
  uint64_t v126 = 0;
  int v127 = 0;
  unint64_t v128 = 0xFFEFFFFFFFFFFFFFLL;
  int v139 = 0;
  long long v129 = 0u;
  long long v130 = 0u;
  long long v131 = 0u;
  long long v132 = 0u;
  long long v133 = 0u;
  int v134 = 0;
  long long v135 = 0u;
  long long v136 = 0u;
  long long v137 = 0u;
  memset(v138, 0, sizeof(v138));
  uint64_t v140 = 0;
  uint64_t v141 = 0;
  unint64_t v142 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v143 = 0;
  int v144 = 0;
  uint64_t v150 = 0;
  __int16 v151 = 0;
  int v156 = 0;
  int v149 = 0;
  long long v147 = 0u;
  long long v148 = 0u;
  long long v145 = 0u;
  long long v146 = 0u;
  long long v153 = 0u;
  long long v152 = 0u;
  char v154 = 0;
  memset(v155, 0, sizeof(v155));
  unint64_t v157 = 0xFFEFFFFFFFFFFFFFLL;
  long long v176 = 0u;
  long long v175 = 0u;
  long long v174 = 0u;
  long long v173 = 0u;
  long long v172 = 0u;
  long long v171 = 0u;
  long long v170 = 0u;
  long long v169 = 0u;
  long long v168 = 0u;
  long long v167 = 0u;
  long long v166 = 0u;
  long long v165 = 0u;
  long long v164 = 0u;
  long long v163 = 0u;
  long long v162 = 0u;
  long long v161 = 0u;
  long long v160 = 0u;
  long long v159 = 0u;
  long long v158 = 0u;
  uint64_t v177 = 0;
  unint64_t v178 = 0xFFEFFFFFFFFFFFFFLL;
  long long v179 = 0u;
  long long v180 = 0u;
  long long v181 = 0u;
  long long v182 = 0u;
  unint64_t v183 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v184 = 0;
  int v185 = 0;
  uint64_t v186 = 0;
  char v187 = 0;
  unint64_t v188 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v190 = 0;
  uint64_t v189 = 0;
  uint64_t v191 = 0x80000000800000;
  uint64_t v193 = 0;
  uint64_t v192 = 0;
  long long v194 = xmmword_101D1E260;
  uint64_t v195 = 0x80000000800000;
  long long v196 = 0u;
  long long v197 = 0u;
  uint64_t v198 = 0;
  unint64_t v199 = 0xFFEFFFFFFFFFFFFFLL;
  long long v200 = 0u;
  long long v201 = 0u;
  long long v202 = 0u;
  long long v203 = 0u;
  long long v204 = 0u;
  long long v205 = 0u;
  int v206 = 0;
  unint64_t v207 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v208 = 0;
  int v209 = 0;
  unint64_t v210 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v211 = 7;
  unint64_t v212 = 0xFFEFFFFFFFFFFFFFLL;
  char v213 = 0;
  uint64_t v215 = 0;
  uint64_t v214 = 0;
  uint64_t v216 = 0;
  if (sub_100174478(a2, &__p, (uint64_t)v115))
  {
    if (*(float *)&v192 >= *(float *)&v189) {
      float v5 = *(float *)&v189;
    }
    else {
      float v5 = *(float *)&v192;
    }
    int v46 = BYTE8(v167) & 0xFD;
    BOOL v6 = v171 < 2 && v46 != 1;
    LODWORD(buf) = v6;
    sub_1000C0D88((unsigned __int16 *)(a1 + 116), &buf);
    *(unsigned char *)(a1 + 100) = 1;
    LODWORD(buf) = v171 < 2;
    sub_1000C0D88((unsigned __int16 *)(a1 + 164), &buf);
    *(unsigned char *)(a1 + 14_Block_object_dispose(&STACK[0x850], 8) = 1;
    if (v171) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = v46 != 1;
    }
    LODWORD(buf) = v7;
    sub_1000C0D88((unsigned __int16 *)(a1 + 212), &buf);
    float v8 = v5 * 57.296;
    uint64_t v9 = *(unsigned __int16 *)(a1 + 44);
    *(unsigned char *)(a1 + 196) = 1;
    uint64_t v10 = *(unsigned __int16 *)(a1 + 46);
    unint64_t v11 = *(unsigned int *)(a1 + 48);
    if (v9 + v10 >= v11) {
      uint64_t v12 = *(unsigned int *)(a1 + 48);
    }
    else {
      uint64_t v12 = 0;
    }
    *(float *)(a1 + 44 + 4 * (v9 + v10 - v12) + _Block_object_dispose(&STACK[0x850], 8) = *((float *)&v189 + 1) * 57.296;
    if (v11 <= v10)
    {
      unint64_t v13 = v9 + 1;
      if (v13 < v11) {
        LOWORD(v11) = 0;
      }
      *(_WORD *)(a1 + 44) = v13 - v11;
    }
    else
    {
      *(_WORD *)(a1 + 46) = v10 + 1;
    }
    *(unsigned char *)(a1 + 2_Block_object_dispose(&STACK[0x850], 8) = 1;
    LODWORD(buf) = v8 > 10.0;
    sub_1000C0D88((unsigned __int16 *)(a1 + 424), &buf);
    *(unsigned char *)(a1 + 40_Block_object_dispose(&STACK[0x850], 8) = 1;
    unsigned int v14 = *(unsigned __int16 *)(a1 + 118);
    if (*(_DWORD *)(a1 + 120) == v14
      && *(_DWORD *)(a1 + 48) == *(unsigned __int16 *)(a1 + 46)
      && *(_DWORD *)(a1 + 428) == *(unsigned __int16 *)(a1 + 426))
    {
      double v48 = 0.0;
      double v49 = 0.0;
      float v51 = 0.0;
      uint64_t v50 = 0;
      long long v52 = xmmword_101D23400;
      *(void *)unsigned __int8 v53 = 0xC08F380000000000;
      v53[8] = 0;
      *(void *)&v53[16] = 0;
      v53[24] = 0;
      BOOL v54 = 0;
      int v55 = 0;
      int v56 = 0;
      if (*(unsigned char *)(a1 + 28))
      {
        sub_1004184F0(a1 + 28);
        unsigned int v14 = *(unsigned __int16 *)(a1 + 118);
      }
      float v15 = *(float *)(a1 + 36);
      BOOL v54 = v46 == 1;
      double v16 = sqrt(v15);
      BOOL v17 = v15 <= 0.0;
      double v18 = 0.0;
      if (!v17) {
        double v18 = v16;
      }
      double v48 = v8;
      double v49 = v18;
      HIDWORD(v50) = v171;
      float v51 = *((float *)&v116 + 1);
      if (v14)
      {
        unint64_t v19 = 0;
        int v20 = 0;
        uint64_t v21 = v14;
        do
          v20 += *(_DWORD *)sub_1000C0E4C((unsigned __int16 *)(a1 + 116), v19++);
        while (v21 != v19);
      }
      else
      {
        int v20 = 0;
      }
      LODWORD(v50) = v20;
      long long v22 = *(_OWORD *)(a1 + 864);
      long long v52 = *(_OWORD *)(a1 + 848);
      *(_OWORD *)unsigned __int8 v53 = v22;
      *(_OWORD *)&v53[9] = *(_OWORD *)(a1 + 873);
      uint64_t v23 = *(unsigned __int16 *)(a1 + 166);
      if (*(_WORD *)(a1 + 166))
      {
        unint64_t v24 = 0;
        int v25 = 0;
        do
          v25 += *(_DWORD *)sub_1000C0E4C((unsigned __int16 *)(a1 + 164), v24++);
        while (v23 != v24);
      }
      else
      {
        int v25 = 0;
      }
      int v55 = v25;
      uint64_t v26 = *(unsigned __int16 *)(a1 + 426);
      if (*(_WORD *)(a1 + 426))
      {
        unint64_t v27 = 0;
        int v28 = 0;
        do
          v28 += *(_DWORD *)sub_1000C0E4C((unsigned __int16 *)(a1 + 424), v27++);
        while (v26 != v27);
      }
      else
      {
        int v28 = 0;
      }
      int v56 = v28;
      sub_1001A34E0(a1 + 8, 0, (uint64_t)&v48);
      int v47 = 0;
      if (sub_100563F04(a1, (uint64_t)&v48, &v47))
      {
        *(_DWORD *)(a1 + 904) = v47;
        sub_1001A34E0(a1 + 8, 4, (uint64_t)&buf);
      }
      int v45 = *(unsigned __int8 *)(a1 + 24);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022BB780);
      }
      int v29 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
      {
        int v30 = *(_DWORD *)(a1 + 896);
        int v31 = *(_DWORD *)(a1 + 900);
        uint64_t v32 = *(unsigned __int16 *)(a1 + 214);
        if (*(_WORD *)(a1 + 214))
        {
          unint64_t v33 = 0;
          int v34 = 0;
          do
            v34 += *(_DWORD *)sub_1000C0E4C((unsigned __int16 *)(a1 + 212), v33++);
          while (v32 != v33);
        }
        else
        {
          int v34 = 0;
        }
        int v35 = *(_DWORD *)(a1 + 904);
        double v36 = *(float *)(a1 + 920);
        LODWORD(buf) = 67112448;
        HIDWORD(buf) = v45;
        __int16 v89 = 1024;
        int v90 = v30;
        __int16 v91 = 1024;
        int v92 = v31;
        __int16 v93 = 1024;
        int v94 = v34;
        __int16 v95 = 1024;
        int v96 = v35;
        __int16 v97 = 2048;
        double v98 = v49;
        __int16 v99 = 2048;
        double v100 = v48;
        __int16 v101 = 1024;
        BOOL v102 = v46 == 1;
        __int16 v103 = 1024;
        int v104 = HIDWORD(v50);
        __int16 v105 = 2048;
        double v106 = v51;
        __int16 v107 = 1024;
        int v108 = v50;
        __int16 v109 = 2048;
        uint64_t v110 = *(void *)v53;
        __int16 v111 = 1024;
        int v112 = v53[8];
        __int16 v113 = 2048;
        double v114 = v36;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "IndoorPedStop,state,%d,headingCnt,%d,stepCount,%d,zeroStepCount,%d,likelyExitCount,%d,longStd,%f,shortStd,%f,rails,%d,currentSteps,%d,vm,%f,recentZeroSteps,%d,exertionDelta,%f,exertionIsLow,%d,headingDelta,%f", (uint8_t *)&buf, 0x6Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1022BB780);
        }
        int v39 = *(_DWORD *)(a1 + 896);
        int v40 = *(_DWORD *)(a1 + 900);
        int v41 = sub_100564034(a1 + 196);
        int v42 = *(_DWORD *)(a1 + 904);
        double v43 = *(float *)(a1 + 920);
        int v60 = 67112448;
        int v61 = v45;
        __int16 v62 = 1024;
        int v63 = v39;
        __int16 v64 = 1024;
        int v65 = v40;
        __int16 v66 = 1024;
        int v67 = v41;
        __int16 v68 = 1024;
        int v69 = v42;
        __int16 v70 = 2048;
        double v71 = v49;
        __int16 v72 = 2048;
        double v73 = v48;
        __int16 v74 = 1024;
        BOOL v75 = v46 == 1;
        __int16 v76 = 1024;
        int v77 = HIDWORD(v50);
        __int16 v78 = 2048;
        double v79 = v51;
        __int16 v80 = 1024;
        int v81 = v50;
        __int16 v82 = 2048;
        uint64_t v83 = *(void *)v53;
        __int16 v84 = 1024;
        int v85 = v53[8];
        __int16 v86 = 2048;
        double v87 = v43;
        uint64_t v44 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLWorkoutPredictor_Type::WorkoutStopDetectionEvent CLTreadmillWorkoutStopModel::update(const CLWorkoutPredictorInputs &)", "%s\n", v44);
        if (v44 != (char *)&buf) {
          free(v44);
        }
      }
      if (*(unsigned char *)(a1 + 24) == 4)
      {
        uint64_t v37 = 1;
        goto LABEL_58;
      }
    }
  }
  else
  {
    sub_100134750(&buf, "TreadmillStop");
    sub_10111B644(a2, (uint64_t *)&buf, (uint64_t)&__p);
    if (SBYTE1(v94) < 0) {
      operator delete(buf);
    }
  }
  uint64_t v37 = 0;
LABEL_58:
  if (__p)
  {
    long long v58 = __p;
    operator delete(__p);
  }
  return v37;
}

void sub_1005649B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100564A2C(uint64_t result, uint64_t a2)
{
  if (*(double *)(a2 + 8) <= 30.0)
  {
    int v2 = *(_DWORD *)(result + 896);
    *(_DWORD *)(result + 896) = v2 + 1;
    int v3 = *(_DWORD *)(result + 900) + *(_DWORD *)(a2 + 20);
    *(_DWORD *)(result + 900) = v3;
    if (v2 >= 70 && v3 >= 181) {
      return sub_1001A34E0(result + 8, 1, (uint64_t)&v4);
    }
  }
  else
  {
    *(void *)(result + 896) = 0;
  }
  return result;
}

uint64_t sub_100564AA0(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 16);
  if (v2 < 5 || (double v3 = *(double *)(a2 + 40), v3 == -999.0))
  {
    BOOL v5 = 0;
  }
  else
  {
    double v4 = *(double *)(a2 + 48);
    BOOL v5 = v4 == -999.0;
    double v6 = v4 - v3;
    if (v6 < -10.0) {
      BOOL v5 = 1;
    }
    if (v4 == -999.0) {
      BOOL v5 = 0;
    }
    if (v6 == -999.0) {
      BOOL v5 = 0;
    }
  }
  return *(int *)(a2 + 88) > 0 && v2 > 0 || v5;
}

uint64_t sub_100564B08(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 904);
  float v4 = *(float *)(a1 + 916);
  if (*(_WORD *)(a1 + 46)) {
    float v5 = *(float *)sub_1004182C4((unsigned __int16 *)(a1 + 44), *(unsigned __int16 *)(a1 + 46) - 1);
  }
  else {
    float v5 = 0.0;
  }
  float v6 = vabds_f32(v4, v5);
  if (*(float *)(a1 + 920) >= v6) {
    float v6 = *(float *)(a1 + 920);
  }
  *(float *)(a1 + 920) = v6;
  BOOL v7 = *(double *)(a2 + 8) > 30.0 && *(double *)a2 > 5.0;
  BOOL v8 = *(double *)(a2 + 32) <= -1.0 || *(unsigned char *)(a2 + 56) != 0;
  if (*(_DWORD *)(a2 + 20)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = *(unsigned char *)(a2 + 80) == 0;
  }
  if (v7 || v8 || (*(float *)(a2 + 24) >= 1.5 ? (BOOL v10 = !v9) : (BOOL v10 = 0), !v10)) {
    ++*(_DWORD *)(a1 + 896);
  }
  if (v6 <= 0.0)
  {
    float v12 = 40.0;
  }
  else
  {
    float v11 = 180.0 / v6;
    if (v11 <= 1.0) {
      float v12 = 40.0;
    }
    else {
      float v12 = v11 * 40.0;
    }
  }
  uint64_t result = sub_100564CAC(a1, a2);
  if (result)
  {
    uint64_t v14 = a1 + 8;
    float v15 = &v19;
    int v16 = 2;
    return sub_1001A34E0(v14, v16, (uint64_t)v15);
  }
  float v17 = v12 / 2.56;
  if (v12 >= 70.0) {
    float v17 = 27.344;
  }
  if (v17 < (float)*(int *)(a1 + 896))
  {
    uint64_t v14 = a1 + 8;
    float v15 = &v18;
    int v16 = 3;
    return sub_1001A34E0(v14, v16, (uint64_t)v15);
  }
  return result;
}

uint64_t sub_100564CAC(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a2 + 40);
  double v3 = -999.0;
  if (v2 == -999.0)
  {
    BOOL v6 = 0;
  }
  else
  {
    double v4 = *(double *)(a2 + 48);
    double v3 = v4 - v2;
    if (v4 == -999.0) {
      double v5 = -999.0;
    }
    else {
      double v5 = v4 - v2;
    }
    BOOL v6 = v5 != -999.0;
    if (v4 == -999.0) {
      double v3 = -999.0;
    }
  }
  if (*(double *)a2 >= 10.0) {
    int v7 = 0;
  }
  else {
    int v7 = *(_DWORD *)(a2 + 20) + *(_DWORD *)(a1 + 900);
  }
  BOOL v8 = 0;
  *(_DWORD *)(a1 + 900) = v7;
  if (v3 > -40.0 && *(int *)(a1 + 904) >= 71 && v6) {
    BOOL v8 = *(float *)(a1 + 920) < 180.0 && *(unsigned __int8 *)(a1 + 24) != 3;
  }
  BOOL v9 = v3 < 0.0;
  double v10 = v3 * v3 * 0.05 + 60.0;
  if (v10 <= 60.0) {
    BOOL v9 = 0;
  }
  if (!v6 || !v9) {
    double v10 = 60.0;
  }
  return v10 < (double)v7 || v8;
}

uint64_t sub_100564DA8(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 904);
  uint64_t result = sub_100564CAC(a1, a2);
  if (result)
  {
    uint64_t v5 = a1 + 8;
    BOOL v6 = &v12;
    int v7 = 2;
    return sub_1001A34E0(v5, v7, (uint64_t)v6);
  }
  BOOL v8 = *(int *)(a2 + 20) >= 1 && *(double *)a2 > 10.0;
  int v9 = *(int *)(a2 + 84) > 0 || v8;
  if (*(int *)(a1 + 904) >= 59 && v9 != 0)
  {
    uint64_t v5 = a1 + 8;
    BOOL v6 = &v11;
    int v7 = 5;
    return sub_1001A34E0(v5, v7, (uint64_t)v6);
  }
  return result;
}

void *sub_100564E48(void *a1)
{
  *a1 = off_1022BB728;
  a1[56] = off_1022D4E20;
  double v2 = (void *)a1[61];
  if (v2)
  {
    a1[62] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100564EB8(void *a1)
{
  *a1 = off_1022BB728;
  a1[56] = off_1022D4E20;
  double v2 = (void *)a1[61];
  if (v2)
  {
    a1[62] = v2;
    operator delete(v2);
  }

  operator delete();
}

void sub_100564F48(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100564F78(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100565058(id a1)
{
  qword_10247B3B0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLWifiServiceSilo"];
}

#error "100565114: call analysis failed (funcsize=17)"

BOOL sub_10056535C(uint64_t a1)
{
  uint64_t v2 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  uint64_t v3 = *(void *)(a1 + 312);
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 24))(v2);
  return v3 != 0;
}

void sub_1005654C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v14 - 40) = v13;
  sub_1000D7F78((void ***)(v14 - 40));
  a10 = (void **)&a13;
  sub_1000D7F78(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1005654F4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 824;
  v15[3] = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  __int16 v16 = 256;
  if (*(unsigned char *)(a1 + 246)) {
    sub_1005719B4(a1, 0);
  }
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v9 = 0x2E8BA2E8BA2E8BA3 * ((v8 - *a2) >> 3);
  memset(v15, 0, 24);
  sub_10058A304(v15, v7, v8, v9);
  uint64_t v10 = *a3;
  uint64_t v11 = a3[1];
  unint64_t v12 = 0x2E8BA2E8BA2E8BA3 * ((v11 - *a3) >> 3);
  memset(v14, 0, sizeof(v14));
  sub_10058A304(v14, v10, v11, v12);
  sub_10057275C(a1, v15, (uint64_t *)v14);
  *(void *)(a1 + 24_Block_object_dispose(&STACK[0x850], 8) = 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3) + 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3);
  if (*(unsigned char *)(a1 + 244)) {
    sub_1005719B4(a1, 1);
  }
  float v17 = v14;
  sub_1000D7F78((void ***)&v17);
  v14[0] = (void **)v15;
  sub_1000D7F78(v14);
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
}

void sub_100565674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100565770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000D7F78((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100565794(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  uint64_t v5 = *(const void **)(a1 + 528);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 52_Block_object_dispose(&STACK[0x850], 8) = 0;
  }
  if (sub_100583528(a1, a2, (CFTypeRef *)(a1 + 528), 0)) {
    sub_10057E1FC(a1);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_100565860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100565874(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  uint64_t v5 = *(const void **)(a1 + 520);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 520) = 0;
  }
  if (sub_100583528(a1, a2, (CFTypeRef *)(a1 + 520), 1)) {
    sub_10057E1FC(a1);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_100565940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005659BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000D7F78((void ***)va);
  _Unwind_Resume(a1);
}

void sub_100565A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000D7F78((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100565AEC(uint64_t a1, _OWORD *a2, int a3)
{
  uint64_t v6 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  long long v7 = *(_OWORD *)(a1 + 756);
  long long v8 = *(_OWORD *)(a1 + 772);
  long long v9 = *(_OWORD *)(a1 + 804);
  a2[2] = *(_OWORD *)(a1 + 788);
  a2[3] = v9;
  *a2 = v7;
  a2[1] = v8;
  if (a3)
  {
    *(_OWORD *)(a1 + 78_Block_object_dispose(&STACK[0x850], 8) = 0u;
    *(_OWORD *)(a1 + 804) = 0u;
    *(_OWORD *)(a1 + 756) = 0u;
    *(_OWORD *)(a1 + 772) = 0u;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
}

void sub_100565C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(void *)(v15 - 40) = v14;
  sub_1000D7F78((void ***)(v15 - 40));
  *(void *)(v15 - 40) = &a14;
  sub_1000D7F78((void ***)(v15 - 40));
  _Unwind_Resume(a1);
}

id sub_100565CA0(void *a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768;
  _DWORD v3[2] = sub_100588278;
  void v3[3] = &unk_1022BBBD8;
  v3[4] = *a1;
  memset(v4, 0, sizeof(v4));
  sub_1000DA6E8(v4, a1[1], a1[2], 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a1[2] - a1[1]) >> 3));
  id v1 = [v3 copy];
  uint64_t v5 = (void **)v4;
  sub_1000D7F78(&v5);
  return v1;
}

void sub_100565D64(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1;
  sub_1000D7F78((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100565E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(void *)(v15 - 40) = v14;
  sub_1000D7F78((void ***)(v15 - 40));
  *(void *)(v15 - 40) = &a14;
  sub_1000D7F78((void ***)(v15 - 40));
  _Unwind_Resume(a1);
}

void sub_100565F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(void *)(v15 - 40) = v14;
  sub_1000D7F78((void ***)(v15 - 40));
  *(void *)(v15 - 40) = &a14;
  sub_1000D7F78((void ***)(v15 - 40));
  _Unwind_Resume(a1);
}

void sub_100566030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a23)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100566054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 824;
  uint64_t v15 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  __int16 v16 = 256;
  uint64_t v8 = qword_10248AB78;
  if (byte_10248AB80[23] < 0)
  {
    sub_1000DC48C(&__p, *(void **)byte_10248AB80, *(unint64_t *)&byte_10248AB80[8]);
  }
  else
  {
    long long __p = *(_OWORD *)byte_10248AB80;
    uint64_t v10 = *(void *)&byte_10248AB80[16];
  }
  long long v11 = xmmword_10248AB98;
  long long v12 = xmmword_10248ABA8;
  long long v13 = xmmword_10248ABB8;
  uint64_t v14 = qword_10248ABC8;
  if (sub_1005755A8(a1, &v8))
  {
    *(void *)a2 = v8;
    *(_OWORD *)(a2 + _Block_object_dispose(&STACK[0x850], 8) = __p;
    *(void *)(a2 + 24) = v10;
    long long __p = 0uLL;
    uint64_t v10 = 0;
    long long v5 = v12;
    *(_OWORD *)(a2 + 32) = v11;
    *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x850], 8) = v5;
    *(_OWORD *)(a2 + 64) = v13;
    *(void *)(a2 + 80) = v14;
    *(unsigned char *)(a2 + 8_Block_object_dispose(&STACK[0x850], 8) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    int v6 = SHIBYTE(v10);
    *(unsigned char *)(a2 + 8_Block_object_dispose(&STACK[0x850], 8) = 0;
    if (v6 < 0) {
      operator delete((void *)__p);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_1005661BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_1019DB560(v15 - 72);
  _Unwind_Resume(a1);
}

void sub_10056625C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a17)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100566280@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 103;
  __int16 v16 = a1 + 103;
  (*(void (**)(void *))(a1[103] + 16))(a1 + 103);
  __int16 v17 = 256;
  uint64_t v9 = qword_10248AB78;
  if (byte_10248AB80[23] < 0)
  {
    sub_1000DC48C(&__p, *(void **)byte_10248AB80, *(unint64_t *)&byte_10248AB80[8]);
  }
  else
  {
    long long __p = *(_OWORD *)byte_10248AB80;
    uint64_t v11 = *(void *)&byte_10248AB80[16];
  }
  long long v12 = xmmword_10248AB98;
  long long v13 = xmmword_10248ABA8;
  long long v14 = xmmword_10248ABB8;
  uint64_t v15 = qword_10248ABC8;
  if (sub_100580C40(a1, (uint64_t)&v9))
  {
    sub_100D5546C((uint64_t)&v9, (uint64_t)&v6);
    *(_OWORD *)a2 = v6;
    *(void *)(a2 + 16) = v7;
    *(_OWORD *)(a2 + 24) = v8;
    *(unsigned char *)(a2 + 40) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 40) = 0;
  }
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)__p);
  }
  return (*(uint64_t (**)(void *))(*v4 + 24))(v4);
}

void sub_1005663C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_1019DB560(v21 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_10056642C(uint64_t a1, int a2)
{
  uint64_t v4 = a1 + 824;
  void v7[3] = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  __int16 v8 = 256;
  memset(v7, 0, 24);
  memset(v6, 0, sizeof(v6));
  sub_10057275C(a1, v7, (uint64_t *)v6);
  if (a2) {
    *(void *)(a1 + 24_Block_object_dispose(&STACK[0x850], 8) = 0;
  }
  uint64_t v9 = v6;
  sub_1000D7F78((void ***)&v9);
  v6[0] = (void **)v7;
  sub_1000D7F78(v6);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_10056651C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  *(void *)(v16 - 56) = v15;
  sub_1000D7F78((void ***)(v16 - 56));
  sub_1000D7F78(&a9);
  sub_1019DB560((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_10056662C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a13) {
    sub_101A6536C((uint64_t)&a10);
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10056672C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005667C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1005667D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 824;
  uint64_t v47 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  __int16 v48 = 256;
  if (!*(void *)(a1 + 312))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    long long v13 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "WifiScan, skip, null device, #KvCheck", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_35;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1) {
      goto LABEL_22;
    }
    goto LABEL_92;
  }
  if (!*(void *)(a1 + 296))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    uint64_t v15 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "WifiScan, skip, null dpc, #KvCheck", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_35;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1) {
      goto LABEL_22;
    }
LABEL_92:
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
LABEL_22:
    *(_WORD *)long long __p = 0;
    long long v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::startScan(CLWifiService_Type::ScanParameters)", "%s\n", v14);
    goto LABEL_69;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  double v6 = Current - *(double *)(a1 + 744);
  if (v6 < 10.0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    uint64_t v16 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      int v17 = sub_100F7E9EC((uint64_t)a2);
      int v18 = *(_DWORD *)(a1 + 752);
      *(_DWORD *)uint64_t buf = 67240704;
      *(_DWORD *)int v56 = v17;
      *(_WORD *)&v56[4] = 2050;
      *(double *)&v56[6] = v6;
      *(_WORD *)&v56[14] = 1026;
      *(_DWORD *)&v56[16] = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "WifiScan, skip, cooloff, type, %{public}d, since, %{public}.1lf, error, %{public}d", buf, 0x18u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_35;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v33 = sub_100F7E9EC((uint64_t)a2);
    int v34 = *(_DWORD *)(a1 + 752);
    *(_DWORD *)long long __p = 67240704;
    *(_DWORD *)&__p[4] = v33;
    *(_WORD *)&__p[8] = 2050;
    *(double *)&__p[10] = v6;
    *(_WORD *)&__p[18] = 1026;
    *(_DWORD *)&__p[20] = v34;
    long long v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::startScan(CLWifiService_Type::ScanParameters)", "%s\n", v14);
LABEL_69:
    if (v14 != (char *)buf) {
      free(v14);
    }
LABEL_35:
    uint64_t v19 = 0;
    goto LABEL_36;
  }
  buf[0] = sub_100F7E9EC((uint64_t)a2);
  sub_100579238(a1 + 756, (char *)buf);
  if (sub_1000FC450())
  {
    sub_1000E9354(buf);
    unsigned int v7 = sub_100F7E9EC((uint64_t)a2);
    __int16 v8 = (char *)sub_100D54EB0(v7);
    sub_1004D34AC((uint64_t)buf, "scan", v8);
    __p[0] = sub_100778804((uint64_t)a2);
    sub_1000EA238((uint64_t)buf, "low_priority", __p);
    __p[0] = sub_100D33CE4((uint64_t)a2);
    sub_1000EA238((uint64_t)buf, "passive", __p);
    sub_1000FC45C((uint64_t)buf, (uint64_t)"locationd");
    sub_10013F3C4(buf);
  }
  if (*(void *)(a1 + 368) < 7uLL)
  {
    if (*(unsigned char *)(a1 + 232))
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BBB78);
      }
      uint64_t v21 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "override scan, passive scans only...", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BBB78);
        }
        *(_WORD *)long long __p = 0;
        uint64_t v44 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::startScan(CLWifiService_Type::ScanParameters)", "%s\n", v44);
        if (v44 != (char *)buf) {
          free(v44);
        }
      }
      sub_100F7E9F4((uint64_t)a2, 2);
    }
    sub_100582D2C((void *)(a1 + 328), a2);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    long long v22 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100F7E9FC((char *)a2, (uint64_t)__p);
      uint64_t v23 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
      unsigned int v24 = sub_100F7E9EC((uint64_t)a2);
      int v25 = sub_100D54EB0(v24);
      int v26 = sub_100778804((uint64_t)a2);
      BOOL v27 = sub_100D33CE4((uint64_t)a2);
      uint64_t v28 = *(void *)(a1 + 368);
      *(_DWORD *)uint64_t buf = 136447234;
      *(void *)int v56 = v23;
      *(_WORD *)&v56[8] = 2082;
      *(void *)&v56[10] = v25;
      *(_WORD *)&v56[18] = 1026;
      int v57 = v26;
      __int16 v58 = 1026;
      BOOL v59 = v27;
      __int16 v60 = 2050;
      uint64_t v61 = v28;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "WifiScan, enqueue, %{public}s, %{public}s, lowpri, %{public}d, passive, %{public}d, pending, %{public}lu", buf, 0x2Cu);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_53;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    sub_100F7E9FC((char *)a2, (uint64_t)v45);
    if (v46 >= 0) {
      int v38 = v45;
    }
    else {
      int v38 = (void **)v45[0];
    }
    unsigned int v39 = sub_100F7E9EC((uint64_t)a2);
    int v40 = sub_100D54EB0(v39);
    int v41 = sub_100778804((uint64_t)a2);
    BOOL v42 = sub_100D33CE4((uint64_t)a2);
    uint64_t v43 = *(void *)(a1 + 368);
    *(_DWORD *)long long __p = 136447234;
    *(void *)&__p[4] = v38;
    *(_WORD *)&__p[12] = 2082;
    *(void *)&__p[14] = v40;
    *(_WORD *)&__p[22] = 1026;
    int v50 = v41;
    __int16 v51 = 1026;
    BOOL v52 = v42;
    __int16 v53 = 2050;
    uint64_t v54 = v43;
    long long v12 = (char *)_os_log_send_and_compose_impl();
    if (v46 < 0) {
      operator delete(v45[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::startScan(CLWifiService_Type::ScanParameters)", "%s\n", v12);
    if (v12 == (char *)buf) {
      goto LABEL_53;
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    uint64_t v9 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)(a1 + 368);
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)int v56 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "WifiScan, skip, maxed, %{public}ld", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_53;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    uint64_t v11 = *(void *)(a1 + 368);
    *(_DWORD *)long long __p = 134349056;
    *(void *)&__p[4] = v11;
    long long v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::startScan(CLWifiService_Type::ScanParameters)", "%s\n", v12);
    if (v12 == (char *)buf) {
      goto LABEL_53;
    }
  }
  free(v12);
LABEL_53:
  if (Current - *(double *)(a1 + 408) <= 3.0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v31 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v32 = *(void *)(a1 + 408);
      *(_DWORD *)uint64_t buf = 134349312;
      *(void *)int v56 = v32;
      *(_WORD *)&v56[8] = 2050;
      *(void *)&v56[10] = 0x4008000000000000;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "WifiScan, misc, inprogress, last, %{public}.1f, interval, %{public}.1f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      uint64_t v35 = *(void *)(a1 + 408);
      *(_DWORD *)long long __p = 134349312;
      *(void *)&__p[4] = v35;
      *(_WORD *)&__p[12] = 2050;
      *(void *)&__p[14] = 0x4008000000000000;
      double v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::startScan(CLWifiService_Type::ScanParameters)", "%s\n", v36);
      if (v36 != (char *)buf) {
        free(v36);
      }
    }
  }
  else
  {
    WiFiDeviceClientRegisterScanUpdateCallback();
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v29 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "WifiDpc, signal", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      *(_WORD *)long long __p = 0;
      uint64_t v37 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::startScan(CLWifiService_Type::ScanParameters)", "%s\n", v37);
      if (v37 != (char *)buf) {
        free(v37);
      }
    }
    CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 296));
    int v30 = (__CFRunLoop *)sub_1001C2710();
    CFRunLoopWakeUp(v30);
  }
  uint64_t v19 = 1;
LABEL_36:
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return v19;
}

void sub_100567548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_100567628(void *a1, int a2)
{
  uint64_t v4 = a1 + 103;
  long long v13 = a1 + 103;
  (*(void (**)(void *))(a1[103] + 16))(a1 + 103);
  __int16 v14 = 256;
  if (a1[37] && a1[92])
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
    long long v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v18 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "IMD: quiesceWifi, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BBB78);
      }
      int v15 = 67109120;
      int v16 = a2;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::quiesceWifi(BOOL)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    double v6 = a1[92];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100586460;
    block[3] = &unk_1022BBA18;
    block[4] = a1;
    char v12 = a2;
    dispatch_async(v6, block);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
    unsigned int v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning IMD: ignore quiesceWifi configuration, shutdown", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BBB78);
      }
      LOWORD(v15) = 0;
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::quiesceWifi(BOOL)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  return (*(uint64_t (**)(void *))(*v4 + 24))(v4);
}

void sub_1005679DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100567A50(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int valuePtr = 27;
  uint64_t v6 = a1 + 824;
  uint64_t v46 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  __int16 v47 = 256;
  CFNumberRef cf = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  CFArrayRef v7 = (const __CFArray *)WiFiDeviceClientCopyProperty();
  CFIndex Count = CFArrayGetCount(v7);
  if (Count >= 1)
  {
    CFIndex v9 = 0;
    uint64_t v41 = a2 + 16;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v7, v9);
      if ((const void *)CFDictionaryGetTypeID() == ValueAtIndex)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        uint64_t v11 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "WifiMgr, WiFiDeviceClientCopyProperty, invalid object in APPLE80211_IOC_SUPPORTED_CHANNELS", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BBB18);
          }
          LOWORD(v49) = 0;
          uint64_t v37 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::getSupportedChannels(std::vector<int> &, BOOL, BOOL)", "%s\n", v37);
          if (v37 != (char *)buf) {
            free(v37);
          }
        }
        CFShow(ValueAtIndex);
      }
      else
      {
        sub_10013FA80((int)v45, (CFDictionaryRef)ValueAtIndex);
        int v44 = -1;
        if (sub_10013E418((uint64_t)v45, @"SUP_CHANNEL", &v44))
        {
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022BBB78);
          }
          char v12 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t buf = 134218496;
            CFIndex v56 = v9;
            __int16 v57 = 2048;
            CFIndex v58 = Count;
            __int16 v59 = 1024;
            int v60 = v44;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "WIFI: index, %ld, %ld, channel, %d", buf, 0x1Cu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_1022BBB78);
            }
            int v49 = 134218496;
            CFIndex v50 = v9;
            __int16 v51 = 2048;
            CFIndex v52 = Count;
            __int16 v53 = 1024;
            int v54 = v44;
            int v38 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::getSupportedChannels(std::vector<int> &, BOOL, BOOL)", "%s\n", v38);
            if (v38 != (char *)buf) {
              free(v38);
            }
          }
          int v13 = v44;
          if (a3 && v44 <= 14)
          {
            int v15 = *(int **)(a2 + 8);
            unint64_t v14 = *(void *)(a2 + 16);
            if ((unint64_t)v15 >= v14)
            {
              int v18 = *(int **)a2;
              uint64_t v19 = ((uint64_t)v15 - *(void *)a2) >> 2;
              unint64_t v20 = v19 + 1;
              if ((unint64_t)(v19 + 1) >> 62) {
                goto LABEL_80;
              }
              uint64_t v21 = v14 - (void)v18;
              if (v21 >> 1 > v20) {
                unint64_t v20 = v21 >> 1;
              }
              if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v22 = v20;
              }
              if (v22)
              {
                uint64_t v23 = (char *)sub_10017EA34(v41, v22);
                int v18 = *(int **)a2;
                int v15 = *(int **)(a2 + 8);
                int v13 = v44;
              }
              else
              {
                uint64_t v23 = 0;
              }
              unsigned int v24 = (int *)&v23[4 * v19];
              int *v24 = v13;
              int v16 = v24 + 1;
              while (v15 != v18)
              {
                int v25 = *--v15;
                *--unsigned int v24 = v25;
              }
              *(void *)a2 = v24;
              *(void *)(a2 + _Block_object_dispose(&STACK[0x850], 8) = v16;
              *(void *)(a2 + 16) = &v23[4 * v22];
              if (v18) {
                operator delete(v18);
              }
            }
            else
            {
              *int v15 = v44;
              int v16 = v15 + 1;
            }
            *(void *)(a2 + _Block_object_dispose(&STACK[0x850], 8) = v16;
            int v13 = v44;
          }
          if (a4 && v13 >= 15)
          {
            BOOL v27 = *(int **)(a2 + 8);
            unint64_t v26 = *(void *)(a2 + 16);
            if ((unint64_t)v27 >= v26)
            {
              int v29 = *(int **)a2;
              uint64_t v30 = ((uint64_t)v27 - *(void *)a2) >> 2;
              unint64_t v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 62) {
LABEL_80:
              }
                sub_1001D7FD4();
              uint64_t v32 = v26 - (void)v29;
              if (v32 >> 1 > v31) {
                unint64_t v31 = v32 >> 1;
              }
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v33 = v31;
              }
              if (v33)
              {
                int v34 = (char *)sub_10017EA34(v41, v33);
                int v29 = *(int **)a2;
                BOOL v27 = *(int **)(a2 + 8);
                int v13 = v44;
              }
              else
              {
                int v34 = 0;
              }
              uint64_t v35 = (int *)&v34[4 * v30];
              *uint64_t v35 = v13;
              uint64_t v28 = v35 + 1;
              while (v27 != v29)
              {
                int v36 = *--v27;
                *--uint64_t v35 = v36;
              }
              *(void *)a2 = v35;
              *(void *)(a2 + _Block_object_dispose(&STACK[0x850], 8) = v28;
              *(void *)(a2 + 16) = &v34[4 * v33];
              if (v29) {
                operator delete(v29);
              }
            }
            else
            {
              *BOOL v27 = v13;
              uint64_t v28 = v27 + 1;
            }
            *(void *)(a2 + _Block_object_dispose(&STACK[0x850], 8) = v28;
          }
        }
        else
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BBB18);
          }
          int v17 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "WifiManager, WiFiDeviceClientCopyProperty, invalid APPLE80211KEY_SUP_CHANNEL", buf, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1022BBB18);
            }
            LOWORD(v49) = 0;
            unsigned int v39 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::getSupportedChannels(std::vector<int> &, BOOL, BOOL)", "%s\n", v39);
            if (v39 != (char *)buf) {
              free(v39);
            }
          }
          CFShow(ValueAtIndex);
        }
        sub_10013F3C4(v45);
      }
      ++v9;
    }
    while (v9 != Count);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v7) {
    CFRelease(v7);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
}

void sub_10056817C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_10013F3C4((uint64_t *)va);
  sub_1019DB560((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100568208(uint64_t a1, int a2)
{
  uint64_t v4 = a1 + 824;
  uint64_t v13 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  __int16 v14 = 256;
  BOOL v12 = 0;
  WiFiManagerClientSetPower();
  if (sub_1005744A4(a1, &v12))
  {
    BOOL v5 = v12;
    if (v12 == a2)
    {
      int v6 = 1;
      goto LABEL_10;
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    CFArrayRef v7 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67240448;
      int v20 = a2;
      __int16 v21 = 1026;
      int v22 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "WifiMgr, WiFiManagerClientSetPower, fail, request, %{public}d, query, %{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      int v15 = 67240448;
      int v16 = a2;
      __int16 v17 = 1026;
      int v18 = v5;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWifiService::setPower(BOOL)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  int v6 = 0;
LABEL_10:
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  __int16 v8 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 67240448;
    int v20 = a2;
    __int16 v21 = 1026;
    int v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "WifiMgr, WiFiManagerClientSetPower, request, %{public}d, %{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v15 = 67240448;
    int v16 = a2;
    __int16 v17 = 1026;
    int v18 = v6;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::setPower(BOOL)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return 1;
}

void sub_1005685CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100568634(uint64_t a1, int a2)
{
  v8[0] = a2;
  uint64_t v4 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BBB78);
  }
  BOOL v5 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "setBackgroundExitScanCount, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
    v8[1] = 67109120;
    _DWORD v8[2] = a2;
    CFArrayRef v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::setBackgroundExitScanCount(int)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (*(void *)(a1 + 312))
  {
    sub_1000E9354(buf);
    sub_1000EA2A4((uint64_t)buf, @"IO80211InterfaceBGScanLostNetTO", v8);
    sub_1000E9358((uint64_t)buf);
    WiFiDeviceClientSetProperty();
    sub_10013F3C4(buf);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_10056889C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100568910(uint64_t a1, int a2)
{
  uint64_t v4 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  uint64_t v5 = *(void *)(a1 + 304);
  if (v5)
  {
    if (a2) {
      WiFiManagerClientEnable();
    }
    else {
      WiFiManagerClientDisable();
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
    int v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning no wifi interface available", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BBB78);
      }
      CFArrayRef v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::setAutoJoin(BOOL)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return v5 != 0;
}

void sub_100568B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100568B58(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = sub_1010E90D4(a1, (uint64_t)"CLWifiService", a2);
  *uint64_t v5 = off_1022BB7F0;
  *((_OWORD *)v5 + 7) = 0u;
  *((_OWORD *)v5 + _Block_object_dispose(&STACK[0x850], 8) = 0u;
  *((_OWORD *)v5 + 9) = 0u;
  *((_OWORD *)v5 + 10) = 0u;
  *((_OWORD *)v5 + 11) = 0u;
  *((_OWORD *)v5 + 12) = 0u;
  *((_OWORD *)v5 + 13) = 0u;
  *(_OWORD *)((char *)v5 + 217) = 0u;
  *(_WORD *)((char *)v5 + 233) = 255;
  *(void *)((char *)v5 + 236) = 0xE1000000000;
  *((_WORD *)v5 + 122) = 0;
  *((unsigned char *)v5 + 246) = 0;
  v5[31] = 0;
  sub_100134750(&buf, "60:c5:47:4f:51:1d");
  *(void *)(a1 + 256) = sub_100B38F04((uint64_t)&buf);
  sub_100134750(&context, "60:c5:47:4d:cd:6f");
  *(void *)(a1 + 264) = sub_100B38F04((uint64_t)&context);
  sub_100134750(&__p, "60:c5:47:4f:51:1c");
  *(void *)(a1 + 272) = sub_100B38F04((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(context.retain) < 0) {
    operator delete((void *)context.version);
  }
  if (v36 < 0) {
    operator delete((void *)buf);
  }
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 28_Block_object_dispose(&STACK[0x850], 8) = 0xBFF0000000000000;
  int v6 = (CFRunLoopSourceRef *)(a1 + 296);
  *(unsigned char *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 32_Block_object_dispose(&STACK[0x850], 8) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 384) = xmmword_101D234D0;
  *(_OWORD *)(a1 + 400) = xmmword_101D1C320;
  *(unsigned char *)(a1 + 416) = -1;
  *(unsigned char *)(a1 + 544) = 0;
  *(unsigned char *)(a1 + 632) = 0;
  *(void *)(a1 + 640) = 0;
  *(unsigned char *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 48_Block_object_dispose(&STACK[0x850], 8) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(unsigned char *)(a1 + 64_Block_object_dispose(&STACK[0x850], 8) = 1;
  *(void *)(a1 + 712) = 0;
  *(void *)(a1 + 704) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(void *)(a1 + 68_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)(a1 + 696) = a1 + 704;
  *(_DWORD *)(a1 + 732) = 0;
  *(void *)(a1 + 736) = 0;
  *(void *)(a1 + 720) = 0;
  *(unsigned char *)(a1 + 72_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(const CFTimeInterval *)(a1 + 744) = -kCFAbsoluteTimeIntervalSince1970;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 76_Block_object_dispose(&STACK[0x850], 8) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_DWORD *)(a1 + 816) = 0;
  sub_100513074(a1 + 824, "CLWifiService internal state", 1, 1);
  uint64_t v7 = *a3;
  *a3 = 0;
  *(void *)(a1 + 840) = v7;
  memset(&__p, 0, sizeof(__p));
  sub_1000C7F88(&buf);
  uint64_t v8 = sub_1004D1284(buf, "WifiExcludedAp", &__p);
  if (*((void *)&buf + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
  }
  if (v8)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    uint64_t v8 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = p_p;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v8, OS_LOG_TYPE_DEFAULT, "WifiService, gExcludedAP, %{public}s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      BOOL v27 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        BOOL v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(context.version) = 136446210;
      *(CFIndex *)((char *)&context.version + 4) = (CFIndex)v27;
      uint64_t v8 = _os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiService::CLWifiService(id<CLIntersiloUniverse>, std::unique_ptr<IExternal>)", "%s\n", (const char *)v8);
      if ((long long *)v8 != &buf) {
        free((void *)v8);
      }
    }
    uint64_t v10 = sub_100B38F04((uint64_t)&__p);
    if (!byte_10247B3E8) {
      byte_10247B3E8 = 1;
    }
    qword_10247B3E0 = v10;
  }
  dispatch_queue_t v11 = dispatch_queue_create("CLWifiService scanning", 0);
  *(void *)(a1 + 736) = v11;
  if (!v11)
  {
    sub_101A65394();
    abort_report_np();
    __break(1u);
LABEL_60:
    dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    goto LABEL_46;
  }
  context.version = 0;
  context.info = (void *)a1;
  memset(&context.retain, 0, 56);
  context.perform = (void (__cdecl *)(void *))sub_1005698CC;
  CFRunLoopSourceRef v12 = CFRunLoopSourceCreate(kCFAllocatorDefault, 0, &context);
  *int v6 = v12;
  if (!v12)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    uint64_t v13 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "WifiService, ctor, fDpcSource is NULL", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      LOWORD(v32) = 0;
      int v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLWifiService::CLWifiService(id<CLIntersiloUniverse>, std::unique_ptr<IExternal>)", "%s\n", v29);
      if (v29 != (char *)&buf) {
        free(v29);
      }
    }
  }
  __int16 v14 = (__CFRunLoop *)sub_1001C2710();
  CFRunLoopAddSource(v14, *v6, kCFRunLoopCommonModes);
  sub_1000C7F88(&buf);
  char v15 = sub_1000A699C(buf, "WifiMaxAge", (void *)(a1 + 384));
  if (*((void *)&buf + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
  }
  if ((v15 & 1) == 0) {
    *(void *)(a1 + 384) = 0x4014000000000000;
  }
  sub_1000C7F88(&buf);
  int v16 = (unsigned char *)(a1 + 232);
  char v17 = sub_1000D2988(buf, "WifiPassiveScansOnly", (BOOL *)(a1 + 232));
  if (*((void *)&buf + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
  }
  if (v17)
  {
    if (*v16)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      int v18 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "WifiService, passive scans only", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        LOWORD(v32) = 0;
        uint64_t v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiService::CLWifiService(id<CLIntersiloUniverse>, std::unique_ptr<IExternal>)", "%s\n", v19);
        if (v19 != (char *)&buf) {
          free(v19);
        }
      }
    }
  }
  else
  {
    *int v16 = 0;
  }
  sub_100569AE0(a1);
  sub_10056B1FC(a1);
  id v20 = [*(id *)(a1 + 40) newTimer];
  *(void *)(a1 + 640) = v20;
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_10056BDF0;
  v30[3] = &unk_1022A3020;
  v30[4] = a1;
  [v20 setHandler:v30];
  [*(id *)(a1 + 640) setNextFireDelay:90.0];
  uint64_t v8 = (uint64_t)&qword_102419000;
  if (qword_1024193B0 != -1) {
    goto LABEL_60;
  }
LABEL_46:
  __int16 v21 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf) = 134349056;
    *(void *)((char *)&buf + 4) = 0x4056800000000000;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "WsbClients, timer, %{public}0.f", (uint8_t *)&buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (*(void *)(v8 + 944) != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    int v32 = 134349056;
    uint64_t v33 = 0x4056800000000000;
    unint64_t v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiService::CLWifiService(id<CLIntersiloUniverse>, std::unique_ptr<IExternal>)", "%s\n", v26);
    if (v26 != (char *)&buf) {
      free(v26);
    }
  }
  int v22 = [[CLMetricEventBins alloc] initWithInternalName:@"scanW" binPeriod:5 aggregationPeriod:3600 atCurrentTime:1 andSubmit:CFAbsoluteTimeGetCurrent()];
  *(void *)(a1 + 656) = v22;
  sub_100103240();
  [(CLMetricEventBins *)v22 setDimensionInt:sub_100737DF0()];
  uint64_t v23 = [[CLMetricEventBins alloc] initWithInternalName:@"scanA" binPeriod:5 aggregationPeriod:3600 atCurrentTime:1 andSubmit:CFAbsoluteTimeGetCurrent()];
  *(void *)(a1 + 664) = v23;
  sub_100103240();
  [(CLMetricEventBins *)v23 setDimensionInt:sub_100737DF0()];
  if (sub_1011189EC())
  {
    sub_10056C320(a1);
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    unsigned int v24 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "AONSense, not registering for aonsensed scans as it is not enabled", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      LOWORD(v32) = 0;
      uint64_t v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiService::CLWifiService(id<CLIntersiloUniverse>, std::unique_ptr<IExternal>)", "%s\n", v28);
      if (v28 != (char *)&buf) {
        free(v28);
      }
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1005696A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  uint64_t v47 = *(void *)(v44 + 840);
  *(void *)(v44 + 840) = 0;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  sub_10051310C(v45);
  sub_1000F5BB0(v44 + 696, *(void **)(v44 + 704));
  if (*(unsigned char *)(v44 + 632))
  {
    if (*(char *)(v44 + 575) < 0) {
      operator delete(*(void **)(v44 + 552));
    }
  }
  a39 = (void *)(v44 + 496);
  sub_1000D7F78((void ***)&a39);
  a39 = (void *)(v44 + 464);
  sub_1000D7F78((void ***)&a39);
  a39 = (void *)(v44 + 432);
  sub_1000D7F78((void ***)&a39);
  sub_100588314((void *)(v44 + 328));
  sub_1010E91BC((void *)v44);
  _Unwind_Resume(a1);
}

void sub_100569810()
{
}

void sub_1005698B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A6551C(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005698CC(uint64_t a1)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a1 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BBAF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v2 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onDpcSource", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BBAF8);
    }
    uint64_t v3 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      dispatch_queue_t v11 = "";
      __int16 v12 = 2082;
      uint64_t v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onDpcSource\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  id v4 = [*(id *)(a1 + 32) silo];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100587F80;
  void v5[3] = &unk_1022A3020;
  v5[4] = a1;
  [v4 sync:v5];
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_100569AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state, char a15)
{
  if (a15) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100569AE0(uint64_t a1)
{
  int v2 = sub_100580EFC();
  uint64_t v3 = sub_100580F78();
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BBB78);
  }
  int valuePtr = 0;
  id v4 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v2;
    __int16 v94 = 2048;
    uint64_t v95 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "wifi scan iterations %d dwell time is %lldms", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
    *(_DWORD *)__int16 v89 = 67109376;
    *(_DWORD *)&v89[4] = v2;
    *(_WORD *)&v89[8] = 2048;
    *(void *)&v89[10] = v3;
    uint64_t v41 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::createScanOptions()", "%s\n", v41);
    if (v41 != (char *)buf) {
      free(v41);
    }
  }
  int valuePtr = 2;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  *(void *)(a1 + 112) = v5;
  if (!v5)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v6 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "failed to initialize fScanTypePassive", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      *(_WORD *)__int16 v89 = 0;
      BOOL v42 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v42);
      if (v42 != (char *)buf) {
        free(v42);
      }
    }
  }
  int valuePtr = 1;
  CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  *(void *)(a1 + 120) = v7;
  if (!v7)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    uint64_t v8 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "failed to initialize fScanTypeActive", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      *(_WORD *)__int16 v89 = 0;
      uint64_t v43 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v43);
      if (v43 != (char *)buf) {
        free(v43);
      }
    }
  }
  v86[0] = xmmword_101D234E0;
  v86[1] = unk_101D234F0;
  *(void *)long long buf = v86;
  *(void *)__int16 v89 = &v87;
  int v9 = sub_100580FF8(a1, v2, 1, 30, (_DWORD **)buf, v89, 50, 2, 1);
  *(void *)(a1 + 152) = v9;
  if (!v9)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    __int16 v10 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "failed to initialize fScanOptionsHarvest5GhzSet1", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      *(_WORD *)__int16 v89 = 0;
      uint64_t v44 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v44);
      if (v44 != (char *)buf) {
        free(v44);
      }
    }
  }
  *(_OWORD *)__int16 v84 = xmmword_101D23500;
  *(_OWORD *)&v84[12] = *(long long *)((char *)&xmmword_101D23500 + 12);
  *(void *)long long buf = v84;
  *(void *)__int16 v89 = &v85;
  dispatch_queue_t v11 = sub_100580FF8(a1, v2, 1, 30, (_DWORD **)buf, v89, 50, 2, 1);
  *(void *)(a1 + 160) = v11;
  if (!v11)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    __int16 v12 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "failed to initialize fScanOptionsHarvest5GhzSet2", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      *(_WORD *)__int16 v89 = 0;
      uint64_t v45 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v45);
      if (v45 != (char *)buf) {
        free(v45);
      }
    }
  }
  int v82 = 165;
  v81[0] = xmmword_101D2351C;
  v81[1] = unk_101D2352C;
  *(void *)long long buf = v81;
  *(void *)__int16 v89 = &v83;
  uint64_t v13 = sub_100580FF8(a1, v2, 1, 30, (_DWORD **)buf, v89, 50, 2, 1);
  *(void *)(a1 + 16_Block_object_dispose(&STACK[0x850], 8) = v13;
  if (!v13)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    __int16 v14 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "failed to initialize fScanOptionsHarvest5GhzSet3", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      *(_WORD *)__int16 v89 = 0;
      uint64_t v46 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v46);
      if (v46 != (char *)buf) {
        free(v46);
      }
    }
  }
  int v79 = 11;
  uint64_t v78 = 0x600000001;
  *(void *)long long buf = &v78;
  *(void *)__int16 v89 = &v80;
  uint64_t v15 = sub_100580FF8(a1, v2, 1, 14, (_DWORD **)buf, v89, v3, 0, 0);
  *(void *)(a1 + 136) = v15;
  if (!v15)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v16 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "failed to initialize fScanOptionsHarvest2GhzSet1", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      *(_WORD *)__int16 v89 = 0;
      uint64_t v47 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v47);
      if (v47 != (char *)buf) {
        free(v47);
      }
    }
  }
  uint64_t v76 = 0xD0000000CLL;
  v75[0] = xmmword_101D23540;
  v75[1] = unk_101D23550;
  *(void *)long long buf = v75;
  *(void *)__int16 v89 = &v77;
  char v17 = sub_100580FF8(a1, v2, 1, 14, (_DWORD **)buf, v89, v3, 0, 0);
  *(void *)(a1 + 144) = v17;
  if (!v17)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v18 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "failed to initialize fScanOptionsHarvest2GhzSet2", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      *(_WORD *)__int16 v89 = 0;
      __int16 v48 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v48);
      if (v48 != (char *)buf) {
        free(v48);
      }
    }
  }
  int v73 = 11;
  uint64_t v72 = 0x600000001;
  *(void *)long long buf = &v72;
  *(void *)__int16 v89 = &v74;
  uint64_t v19 = sub_100580FF8(a1, v2, 1, 14, (_DWORD **)buf, v89, 50, 0, 0);
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x850], 8) = v19;
  if (!v19)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    id v20 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "failed to initialize fScanOptionsFast", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      *(_WORD *)__int16 v89 = 0;
      int v49 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v49);
      if (v49 != (char *)buf) {
        free(v49);
      }
    }
  }
  int v70 = 11;
  uint64_t v69 = 0x600000001;
  *(void *)long long buf = &v69;
  *(void *)__int16 v89 = &v71;
  __int16 v21 = sub_100580FF8(a1, v2, 1, 14, (_DWORD **)buf, v89, v3, 0, 0);
  *(void *)(a1 + 176) = v21;
  if (!v21)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v22 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "failed to initialize fScanOptionsStage1", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      *(_WORD *)__int16 v89 = 0;
      CFIndex v50 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v50);
      if (v50 != (char *)buf) {
        free(v50);
      }
    }
  }
  uint64_t v67 = 0xD0000000CLL;
  v66[0] = xmmword_101D23540;
  v66[1] = unk_101D23550;
  *(void *)long long buf = v66;
  *(void *)__int16 v89 = &v68;
  uint64_t v23 = sub_100580FF8(a1, v2, 1, 14, (_DWORD **)buf, v89, v3, 0, 0);
  *(void *)(a1 + 184) = v23;
  if (!v23)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    unsigned int v24 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "failed to initialize fScanOptionsStage2", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      *(_WORD *)__int16 v89 = 0;
      __int16 v51 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v51);
      if (v51 != (char *)buf) {
        free(v51);
      }
    }
  }
  uint64_t v64 = 0xA10000009DLL;
  v63[0] = xmmword_101D23568;
  v63[1] = unk_101D23578;
  *(void *)long long buf = v63;
  *(void *)__int16 v89 = &v65;
  int v25 = sub_100580FF8(a1, v2, 1, 30, (_DWORD **)buf, v89, v3, 0, 0);
  *(void *)(a1 + 192) = v25;
  if (!v25)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    unint64_t v26 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "failed to initialize fScanOptions5GhzStage1", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      *(_WORD *)__int16 v89 = 0;
      CFIndex v52 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v52);
      if (v52 != (char *)buf) {
        free(v52);
      }
    }
  }
  int v91 = 13;
  *(_OWORD *)__int16 v89 = xmmword_101D23590;
  *(_OWORD *)&v89[16] = unk_101D235A0;
  long long v90 = xmmword_101D235B0;
  *(void *)long long buf = v89;
  *(void *)&v60[0] = &v92;
  BOOL v27 = sub_100580FF8(a1, v2, 1, 14, (_DWORD **)buf, v60, v3, 0, 0);
  long long v29 = xmmword_101D235B0;
  long long v28 = unk_101D235A0;
  long long v30 = xmmword_101D23590;
  *(void *)(a1 + 200) = v27;
  if (!v27)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    unint64_t v31 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "failed to initialize fScanOptionsNormal", buf, 2u);
    }
    BOOL v32 = sub_10013D1A0(115, 0);
    long long v28 = unk_101D235A0;
    long long v30 = xmmword_101D23590;
    long long v29 = xmmword_101D235B0;
    if (v32)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      LOWORD(v60[0]) = 0;
      __int16 v53 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v53);
      if (v53 != (char *)buf) {
        free(v53);
      }
      long long v28 = unk_101D235A0;
      long long v30 = xmmword_101D23590;
      long long v29 = xmmword_101D235B0;
    }
  }
  int v61 = 13;
  v60[0] = v30;
  v60[1] = v28;
  void v60[2] = v29;
  *(void *)long long buf = v60;
  *(void *)&v57[0] = &v62;
  uint64_t v33 = sub_100580FF8(a1, 3, 1, 14, (_DWORD **)buf, v57, v3, 0, 0);
  long long v35 = xmmword_101D235B0;
  long long v34 = unk_101D235A0;
  long long v36 = xmmword_101D23590;
  *(void *)(a1 + 20_Block_object_dispose(&STACK[0x850], 8) = v33;
  if (!v33)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    uint64_t v37 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "failed to initialize fScanOptionsThorough", buf, 2u);
    }
    BOOL v38 = sub_10013D1A0(115, 0);
    long long v34 = unk_101D235A0;
    long long v36 = xmmword_101D23590;
    long long v35 = xmmword_101D235B0;
    if (v38)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      LOWORD(v57[0]) = 0;
      int v54 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v54);
      if (v54 != (char *)buf) {
        free(v54);
      }
      long long v34 = unk_101D235A0;
      long long v36 = xmmword_101D23590;
      long long v35 = xmmword_101D235B0;
    }
  }
  int v58 = 13;
  v57[0] = v36;
  v57[1] = v34;
  v57[2] = v35;
  *(void *)long long buf = v57;
  CFIndex v56 = &v59;
  unsigned int v39 = sub_100580FF8(a1, v2, 1, 14, (_DWORD **)buf, &v56, v3, (uint64_t)*(double *)(a1 + 384), 0);
  *(void *)(a1 + 216) = v39;
  if (!v39)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v40 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "failed to initialize fScanOptionsCached", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      LOWORD(v56) = 0;
      int v55 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::createScanOptions()", "%s\n", v55);
      if (v55 != (char *)buf) {
        free(v55);
      }
    }
  }
  *(void *)(a1 + 224) = 0;
}

uint64_t sub_10056B1FC(uint64_t a1)
{
  uint64_t v2 = a1 + 824;
  uint64_t v37 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  __int16 v38 = 256;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  uint64_t v3 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 68289026;
    int v49 = 0;
    __int16 v50 = 2082;
    *(void *)__int16 v51 = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"WifiMgr, allocateWifiArtifacts\"}", buf, 0x12u);
  }
  *(unsigned char *)(a1 + 246) = 0;
  id v4 = *(const void **)(a1 + 320);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 320) = 0;
  }
  if (*(void *)(a1 + 312))
  {
    WiFiDeviceClientRegisterPowerCallback();
    WiFiDeviceClientRegisterResumeScanCallback();
    WiFiDeviceClientRegisterExtendedLinkCallback();
    WiFiDeviceClientRegisterBssidChangeCallback();
    WiFiDeviceClientRegisterBgScanSuspendResumeCallback();
    WiFiDeviceClientRegisterScanUpdateCallback();
    WiFiDeviceClientRegisterLQMCallback();
    WiFiDeviceClientRegister24GHzNetworkInCriticalStateCallback();
    CFRelease(*(CFTypeRef *)(a1 + 312));
    *(void *)(a1 + 312) = 0;
  }
  if (*(void *)(a1 + 304)) {
    goto LABEL_12;
  }
  uint64_t v5 = WiFiManagerClientCreate();
  *(void *)(a1 + 304) = v5;
  if (v5)
  {
    sub_1001C2710();
    WiFiManagerClientScheduleWithRunLoop();
    WiFiManagerClientRegisterServerRestartCallback();
    WiFiManagerClientRegisterWowStateChangedCallback();
    WiFiManagerClientRegisterDeviceAttachmentCallback();
    WiFiManagerClientRegisterBackgroundScanCallback();
LABEL_12:
    CFArrayRef v6 = (const __CFArray *)WiFiManagerClientCopyDevices();
    CFArrayRef v7 = v6;
    if (v6)
    {
      if (!CFArrayGetCount(v6))
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        uint64_t v8 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 68289026;
          int v49 = 0;
          __int16 v50 = 2082;
          *(void *)__int16 v51 = "";
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"WifiMgr, wifi zero devices\"}", buf, 0x12u);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BBB18);
          }
        }
        int v9 = qword_1024193A8;
        if (os_signpost_enabled((os_log_t)qword_1024193A8))
        {
          *(_DWORD *)long long buf = 68289026;
          int v49 = 0;
          __int16 v50 = 2082;
          *(void *)__int16 v51 = "";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "WifiMgr, wifi zero devices", "{\"msg%{public}.0s\":\"WifiMgr, wifi zero devices\"}", buf, 0x12u);
        }
        sub_10056C7C4(a1, (uint64_t)"DevicesZero");
      }
      ValueAtIndex = CFArrayGetValueAtIndex(v7, 0);
      *(void *)(a1 + 312) = ValueAtIndex;
      if (ValueAtIndex && (CFTypeID v11 = CFGetTypeID(ValueAtIndex), v11 == WiFiDeviceClientGetTypeID()))
      {
        CFRetain(*(CFTypeRef *)(a1 + 312));
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        __int16 v12 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          CFStringRef InterfaceName = (const __CFString *)WiFiDeviceClientGetInterfaceName();
          sub_1000FECE0(InterfaceName, (uint64_t)&__p);
          __int16 v14 = v31 >= 0 ? &__p : (void **)__p;
          *(_DWORD *)long long buf = 68289282;
          int v49 = 0;
          __int16 v50 = 2082;
          *(void *)__int16 v51 = "";
          *(_WORD *)&v51[8] = 2082;
          *(void *)&unsigned char v51[10] = v14;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"WifiMgr, allocation \", \"wifi interface\":%{public, location:escape_only}s}", buf, 0x1Cu);
          if (SHIBYTE(v31) < 0) {
            operator delete(__p);
          }
        }
        WiFiDeviceClientRegisterPowerCallback();
        WiFiDeviceClientRegisterResumeScanCallback();
        WiFiDeviceClientRegisterExtendedLinkCallback();
        WiFiDeviceClientRegisterBssidChangeCallback();
        WiFiDeviceClientRegisterBgScanSuspendResumeCallback();
        WiFiDeviceClientRegisterScanUpdateCallback();
        WiFiDeviceClientRegisterLQMCallback();
        WiFiDeviceClientRegister24GHzNetworkInCriticalStateCallback();
        *(void *)(a1 + 320) = WiFiDeviceClientCopyCurrentNetwork();
        std::string __p = (void *)qword_10248AB78;
        if (byte_10248AB80[23] < 0)
        {
          sub_1000DC48C(&v31, *(void **)byte_10248AB80, *(unint64_t *)&byte_10248AB80[8]);
        }
        else
        {
          long long v31 = *(_OWORD *)byte_10248AB80;
          uint64_t v32 = *(void *)&byte_10248AB80[16];
        }
        long long v33 = xmmword_10248AB98;
        long long v34 = xmmword_10248ABA8;
        long long v35 = xmmword_10248ABB8;
        uint64_t v36 = qword_10248ABC8;
        sub_10056F668(a1, (uint64_t)&__p);
        *(_WORD *)long long buf = -256;
        LOBYTE(v50) = 0;
        unsigned __int8 v54 = 0;
        memset(v55, 0, sizeof(v55));
        uint64_t v56 = 0;
        sub_100588040((uint64_t)&v50, (uint64_t)&__p);
        BYTE2(v56) = 0;
        uint64_t v21 = v53;
        *(_DWORD *)unsigned int v39 = 6;
        (*(void (**)(uint64_t, uint8_t *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, v39, buf, 1, 0xFFFFFFFFLL, 0);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        int v22 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          int v23 = v54;
          int v24 = v53;
          sub_10006DE8C(&v29);
          BOOL v25 = !v23 || v24 <= 0;
          BOOL v26 = !v25;
          BOOL v27 = (v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v29
              : (std::string *)v29.__r_.__value_.__r.__words[0];
          *(_DWORD *)unsigned int v39 = 68289795;
          *(_DWORD *)&v39[4] = 0;
          __int16 v40 = 2082;
          uint64_t v41 = "";
          __int16 v42 = 1026;
          BOOL v43 = v26;
          __int16 v44 = 2081;
          uint64_t v45 = v27;
          __int16 v46 = 2049;
          uint64_t v47 = v21;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"@ClxLink, associate \", \"isAssociated\":%{public}hhd, \"mac\":%{private, location:escape_only}s, \"channel\":%{private}ld}", v39, 0x2Cu);
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v29.__r_.__value_.__l.__data_);
          }
        }
        WiFiManagerClientGetWoWState();
        sub_10056FE60((void *)a1);
        sub_100570248(a1);
        *(const CFTimeInterval *)(a1 + 744) = -kCFAbsoluteTimeIntervalSince1970;
        *(_DWORD *)(a1 + 752) = 0;
        CFRelease(v7);
        sub_100570468(a1);
        *(void *)unsigned int v39 = &v55[8];
        sub_1000D7F78((void ***)v39);
        if (v54 && v52 < 0) {
          operator delete(*(void **)&v51[6]);
        }
        if (SHIBYTE(v32) < 0) {
          operator delete((void *)v31);
        }
      }
      else
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        uint64_t v15 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 68289026;
          int v49 = 0;
          __int16 v50 = 2082;
          *(void *)__int16 v51 = "";
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"WifiMgr, wifi device failure\"}", buf, 0x12u);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BBB18);
          }
        }
        int v16 = qword_1024193A8;
        if (os_signpost_enabled((os_log_t)qword_1024193A8))
        {
          *(_DWORD *)long long buf = 68289026;
          int v49 = 0;
          __int16 v50 = 2082;
          *(void *)__int16 v51 = "";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "WifiMgr, wifi device failure", "{\"msg%{public}.0s\":\"WifiMgr, wifi device failure\"}", buf, 0x12u);
        }
        sub_10056C7C4(a1, (uint64_t)"DeviceFail");
        *(void *)(a1 + 312) = 0;
        CFRelease(v7);
      }
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      char v17 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 68289026;
        int v49 = 0;
        __int16 v50 = 2082;
        *(void *)__int16 v51 = "";
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"WifiMgr, wifi devices failure\"}", buf, 0x12u);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
      }
      int v18 = qword_1024193A8;
      if (os_signpost_enabled((os_log_t)qword_1024193A8))
      {
        *(_DWORD *)long long buf = 68289026;
        int v49 = 0;
        __int16 v50 = 2082;
        *(void *)__int16 v51 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "WifiMgr, wifi devices failure", "{\"msg%{public}.0s\":\"WifiMgr, wifi devices failure\"}", buf, 0x12u);
      }
      sub_10056C7C4(a1, (uint64_t)"DevicesNull");
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  uint64_t v19 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 68289026;
    int v49 = 0;
    __int16 v50 = 2082;
    *(void *)__int16 v51 = "";
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"WifiMgr, WiFiManagerClientCreate failed\"}", buf, 0x12u);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
  }
  id v20 = qword_1024193A8;
  if (os_signpost_enabled((os_log_t)qword_1024193A8))
  {
    *(_DWORD *)long long buf = 68289026;
    int v49 = 0;
    __int16 v50 = 2082;
    *(void *)__int16 v51 = "";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "WifiMgr, WiFiManagerClientCreate failed", "{\"msg%{public}.0s\":\"WifiMgr, WiFiManagerClientCreate failed\"}", buf, 0x12u);
  }
  sub_10056C7C4(a1, (uint64_t)"ManagerNull");
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

void sub_10056BD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

uint64_t sub_10056BDF0(uint64_t a1)
{
  return sub_10056BDF8(*(void *)(a1 + 32));
}

uint64_t sub_10056BDF8(uint64_t a1)
{
  uint64_t v2 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  id v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(unsigned __int8 *)(a1 + 648);
    *(_DWORD *)long long buf = 67240192;
    LODWORD(v13) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "WsbTimer, first, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWsbAnalyticsTimer()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  [*(id *)(a1 + 640) setNextFireDelay:14400.0];
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022BBB38);
  }
  CFArrayRef v6 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134349056;
    uint64_t v13 = 0x40CC200000000000;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "WsbClients, timer, %{public}0.f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    __int16 v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWsbAnalyticsTimer()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (*(unsigned char *)(a1 + 648))
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    CFArrayRef v7 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "WsbClients, status, start", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022BBB38);
      }
      CFTypeID v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWsbAnalyticsTimer()", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    *(CFAbsoluteTime *)(a1 + 680) = Current;
    *(CFAbsoluteTime *)(a1 + 68_Block_object_dispose(&STACK[0x850], 8) = Current;
  }
  else
  {
    sub_10057F178(a1, 0, 0, 1);
  }
  *(unsigned char *)(a1 + 64_Block_object_dispose(&STACK[0x850], 8) = 0;
  sub_100005CB4(a1, (uint64_t)"timer");
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

void sub_10056C2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10056C320(uint64_t a1)
{
  if ([+[CLAONSenseWiFiService shared] isAvailable])
  {
    uint64_t v2 = +[CLAONSenseWiFiService shared];
    id v14 = 0;
    id v3 = [*(id *)(a1 + 40) queue];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    uint64_t v13[2] = sub_100582E54;
    void v13[3] = &unk_1022BB9F8;
    _DWORD v13[4] = a1;
    BOOL v4 = [(CLAONSenseWiFiService *)v2 registerForWifiScanResultsWithQueue:v3 error:&v14 callback:v13];
    if (v4)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      int v5 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "AONSense, successfully registered for aonsensed scans", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        LOWORD(v15) = 0;
        CFArrayRef v6 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::startAONScanRequest()", "%s\n");
LABEL_30:
        if (v6 != buf) {
          free(v6);
        }
      }
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      int v9 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        id v10 = [[objc_msgSend(v14, "localizedDescription") UTF8String];
        *(_DWORD *)long long buf = 136446210;
        id v18 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Error registering for AON scan results: %{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        id v12 = [[objc_msgSend(v14, "localizedDescription") UTF8String];
        int v15 = 136446210;
        id v16 = v12;
        CFArrayRef v6 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWifiService::startAONScanRequest()", "%s\n");
        goto LABEL_30;
      }
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    CFArrayRef v7 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "AONSense is unavailable, unable to register for scans", buf, 2u);
    }
    BOOL v4 = 0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      LOWORD(v15) = 0;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWifiService::startAONScanRequest()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
      return 0;
    }
  }
  return v4;
}

uint64_t sub_10056C7C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 824;
  void block[5] = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  __int16 v9 = 256;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  int v5 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136446210;
    uint64_t v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "WifiService, re-schedule allocate, %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v10 = 136446210;
    uint64_t v11 = a2;
    CFArrayRef v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::scheduleWifiArtifactsAllocation(const char *)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10056CA70;
  block[3] = &unk_1022A3020;
  block[4] = a1;
  if (qword_10247B3C0 != -1) {
    dispatch_once(&qword_10247B3C0, block);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_10056CA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_10056CA70(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_10056CAE8;
  void v4[3] = &unk_1022A3020;
  v4[4] = v1;
  return [v2 afterInterval:v4 async:5.0];
}

void sub_10056CAE8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 312))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    uint64_t v2 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "WifiService, device, previously retrieved", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      id v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::scheduleWifiArtifactsAllocation(const char *)_block_invoke", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    uint64_t v4 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "WifiService, device, timer retrieve", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::scheduleWifiArtifactsAllocation(const char *)_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    sub_10056B1FC(v1);
    sub_10056CDC0(v1, 1, 1);
  }
}

void sub_10056CDC0(uint64_t a1, int a2, int a3)
{
  uint64_t v88 = a1 + 824;
  (*(void (**)(void))(*(void *)(a1 + 824) + 16))();
  int v5 = 0;
  uint64_t v6 = 0;
  __int16 v90 = 256;
  __int16 v86 = 0;
  uint64_t v87 = 0;
  int v85 = &v86;
  CFArrayRef v7 = &v86;
  while (1)
  {
    uint64_t v8 = (int *)((char *)&unk_1022BB8F8 + 16 * v6);
    __int16 v9 = &v86;
    if (v7 == &v86) {
      goto LABEL_8;
    }
    int v10 = v5;
    uint64_t v11 = &v86;
    if (v5)
    {
      do
      {
        __int16 v9 = (uint64_t **)v10;
        int v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      do
      {
        __int16 v9 = (uint64_t **)v11[2];
        BOOL v60 = *v9 == (uint64_t *)v11;
        uint64_t v11 = v9;
      }
      while (v60);
    }
    int v12 = *v8;
    if (*((_DWORD *)v9 + 8) < *v8)
    {
LABEL_8:
      if (v5) {
        uint64_t v13 = v9;
      }
      else {
        uint64_t v13 = &v86;
      }
      if (v5)
      {
        id v14 = v9 + 1;
      }
      else
      {
        __int16 v9 = (uint64_t **)&v85;
        id v14 = &v86;
      }
      if (v9[1]) {
        goto LABEL_27;
      }
LABEL_24:
      char v17 = operator new(0x30uLL);
      void v17[2] = *(_OWORD *)v8;
      *(void *)char v17 = 0;
      *((void *)v17 + 1) = 0;
      *((void *)v17 + 2) = v13;
      *id v14 = (uint64_t *)v17;
      if (*v85)
      {
        int v85 = (uint64_t **)*v85;
        char v17 = *v14;
      }
      sub_1000EDFE8(v86, (uint64_t *)v17);
      ++v87;
      goto LABEL_27;
    }
    id v14 = &v86;
    uint64_t v13 = &v86;
    if (!v5) {
      goto LABEL_24;
    }
    int v15 = v5;
    while (1)
    {
      while (1)
      {
        uint64_t v13 = (uint64_t **)v15;
        int v16 = *((_DWORD *)v15 + 8);
        if (v12 >= v16) {
          break;
        }
        int v15 = *v13;
        id v14 = v13;
        if (!*v13) {
          goto LABEL_24;
        }
      }
      if (v16 >= v12) {
        break;
      }
      int v15 = v13[1];
      if (!v15)
      {
        id v14 = v13 + 1;
        goto LABEL_24;
      }
    }
LABEL_27:
    if (++v6 == 6) {
      break;
    }
    CFArrayRef v7 = v85;
    int v5 = v86;
  }
  if (!*(void *)(a1 + 304) || !*(void *)(a1 + 312))
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    uint64_t v19 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "@WsbReg, No wifi interface available, #CloneMe", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_168;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    LOWORD(v91) = 0;
    id v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::registerWsb(BOOL, BOOL)", "%s\n", v20);
LABEL_176:
    if (v20 != (char *)buf) {
      free(v20);
    }
    goto LABEL_168;
  }
  if (a2) {
    int v18 = *(_DWORD *)(a1 + 240);
  }
  else {
    int v18 = 3600;
  }
  int v84 = 0;
  int v22 = (uint64_t *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 64);
  uint64_t v23 = a1 + 64;
  if (!v21) {
    goto LABEL_92;
  }
  uint64_t v24 = a1 + 64;
  do
  {
    int v25 = *(_DWORD *)(v21 + 32);
    BOOL v26 = v25 < 12;
    if (v25 >= 12) {
      BOOL v27 = (uint64_t *)v21;
    }
    else {
      BOOL v27 = (uint64_t *)(v21 + 8);
    }
    if (!v26) {
      uint64_t v24 = v21;
    }
    uint64_t v21 = *v27;
  }
  while (*v27);
  uint64_t v23 = a1 + 64;
  if ((uint64_t *)v24 == v22 || (uint64_t v23 = a1 + 64, *(int *)(v24 + 32) > 12))
  {
LABEL_92:
    if (*(_DWORD *)(a1 + 236))
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022BBB38);
      }
      __int16 v40 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 67240192;
        *(_DWORD *)uint64_t v110 = a2;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "@WsbReg, None, %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022BBB38);
        }
        int v91 = 67240192;
        *(_DWORD *)int v92 = a2;
        int v79 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::registerWsb(BOOL, BOOL)", "%s\n", v79);
        if (v79 != (char *)buf) {
          free(v79);
        }
      }
      sub_100570E20(a1);
      int v82 = 0;
      int v29 = 1;
      uint64_t v24 = v23;
      uint64_t v41 = "off";
      goto LABEL_99;
    }
    goto LABEL_168;
  }
  if (!*(void *)(v24 + 56))
  {
    uint64_t v23 = v24;
    goto LABEL_92;
  }
  sub_100571260(a1);
  long long v28 = *(void **)(v24 + 40);
  int v29 = 1;
  if (v28 != (void *)(v24 + 48))
  {
    do
    {
      int v30 = *((_DWORD *)v28 + 10);
      if ((v30 - 3600) <= 0xFFFFF1F0)
      {
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022BBB38);
        }
        long long v31 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 67240448;
          *(_DWORD *)uint64_t v110 = v30;
          *(_WORD *)&v110[4] = 1026;
          *(_DWORD *)&v110[6] = 3600;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "@WsbRate, iter, %{public}d, to, %{public}d", buf, 0xEu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022BBB38);
          }
          int v91 = 67240448;
          *(_DWORD *)int v92 = v30;
          *(_WORD *)&v92[4] = 1026;
          *(_DWORD *)&v92[6] = 3600;
          uint64_t v36 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::registerWsb(BOOL, BOOL)", "%s\n", v36);
          if (v36 != (char *)buf) {
            free(v36);
          }
        }
        int v30 = 3600;
      }
      if (v30 < v18)
      {
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022BBB38);
        }
        uint64_t v32 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 67240448;
          *(_DWORD *)uint64_t v110 = v30;
          *(_WORD *)&v110[4] = 1026;
          *(_DWORD *)&v110[6] = v18;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "@WsbRate, iter, %{public}d, to, %{public}d", buf, 0xEu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022BBB38);
          }
          int v91 = 67240448;
          *(_DWORD *)int v92 = v30;
          *(_WORD *)&v92[4] = 1026;
          *(_DWORD *)&v92[6] = v18;
          uint64_t v37 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::registerWsb(BOOL, BOOL)", "%s\n", v37);
          if (v37 != (char *)buf) {
            free(v37);
          }
        }
        int v18 = v30;
      }
      BOOL v33 = *((unsigned char *)v28 + 45) != 0;
      long long v34 = (void *)v28[1];
      if (v34)
      {
        do
        {
          long long v35 = v34;
          long long v34 = (void *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          long long v35 = (void *)v28[2];
          BOOL v60 = *v35 == (void)v28;
          long long v28 = v35;
        }
        while (!v60);
      }
      v29 &= v33;
      long long v28 = v35;
    }
    while (v35 != (void *)(v24 + 48));
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022BBB38);
  }
  __int16 v38 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67240448;
    *(_DWORD *)uint64_t v110 = v18;
    *(_WORD *)&v110[4] = 1026;
    *(_DWORD *)&v110[6] = v29;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "@WsbRate, postIter, rate, %{public}d, rollover, %{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    int v91 = 67240448;
    *(_DWORD *)int v92 = v18;
    *(_WORD *)&v92[4] = 1026;
    *(_DWORD *)&v92[6] = v29;
    int v81 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::registerWsb(BOOL, BOOL)", "%s\n", v81);
    if (v81 != (char *)buf) {
      free(v81);
    }
  }
  int v39 = *(_DWORD *)(a1 + 240);
  if (v18 == 3600)
  {
    if (v39 <= 3599)
    {
      int v82 = 0;
      int v84 = 1;
      goto LABEL_142;
    }
    if (*(unsigned __int8 *)(a1 + 245) == v29)
    {
      int v82 = 0;
      int v84 = 2;
      uint64_t v41 = "skip";
    }
    else
    {
      int v84 = 4;
      sub_1005714D8(a1, v29, 1);
      int v82 = 0;
      uint64_t v41 = "standard";
    }
  }
  else
  {
    int v82 = v18;
    BOOL v60 = v18 == v39;
    if (v18 == v39) {
      int v61 = 3;
    }
    else {
      int v61 = 5;
    }
    int v84 = v61;
    if (v60)
    {
      uint64_t v41 = "skip";
      int v82 = v18;
    }
    else
    {
LABEL_142:
      sub_1005714D8(a1, v29, v18 == 3600);
      id v62 = +[NSMutableDictionary dictionary];
      int v63 = +[NSNumber numberWithInteger:v82];
      uint64_t v64 = +[NSNumber numberWithInteger:v82];
      uint64_t v65 = +[NSNumber numberWithUnsignedShort:64800];
      [v62 setObject:v63 forKey:@"IO80211InterfaceBGScanDynamicProfileStartTime"];
      [v62 setObject:v64 forKey:@"IO80211InterfaceBGScanDynamicProfileScanFreq"];
      [v62 setObject:v65 forKey:@"IO80211InterfaceBGScanDynamicProfileDuration"];
      WiFiDeviceClientSetProperty();
      uint64_t v41 = "dynamic";
    }
  }
  *(_DWORD *)(a1 + 240) = v18;
  *(unsigned char *)(a1 + 245) = v29;
LABEL_99:
  int v42 = *(unsigned __int8 *)(a1 + 244);
  if (v42 == a2 && !a3)
  {
LABEL_133:
    int v58 = 0;
    char v49 = 0;
    uint64_t v44 = v24;
    if ((a2 & 1) == 0) {
      goto LABEL_154;
    }
    goto LABEL_134;
  }
  uint64_t v43 = *v22;
  if (!*v22) {
    goto LABEL_132;
  }
  uint64_t v44 = a1 + 64;
  do
  {
    int v45 = *(_DWORD *)(v43 + 32);
    BOOL v46 = v45 < 12;
    if (v45 >= 12) {
      uint64_t v47 = (uint64_t *)v43;
    }
    else {
      uint64_t v47 = (uint64_t *)(v43 + 8);
    }
    if (!v46) {
      uint64_t v44 = v43;
    }
    uint64_t v43 = *v47;
  }
  while (*v47);
  if ((uint64_t *)v44 == v22)
  {
LABEL_132:
    uint64_t v24 = a1 + 64;
    goto LABEL_133;
  }
  uint64_t v24 = a1 + 64;
  if (*(int *)(v44 + 32) > 12) {
    goto LABEL_133;
  }
  if (!*(void *)(v44 + 56))
  {
    uint64_t v24 = v44;
    goto LABEL_133;
  }
  __int16 v48 = *(void **)(v44 + 40);
  if (v48 == (void *)(v44 + 48))
  {
    int v58 = 0;
    char v49 = 0;
    if ((a2 & 1) == 0) {
      goto LABEL_153;
    }
    char v49 = 0;
LABEL_134:
    if (!a3) {
      goto LABEL_156;
    }
    char v59 = v49;
    goto LABEL_162;
  }
  char v49 = 0;
  do
  {
    if (a3)
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022BBB38);
      }
      __int16 v50 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v51 = v48[6];
        int v52 = *((unsigned __int8 *)v48 + 44);
        *(_DWORD *)long long buf = 136446466;
        *(void *)uint64_t v110 = v51;
        *(_WORD *)&v110[8] = 1026;
        *(_DWORD *)__int16 v111 = v52;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "@WsbActive, recheck, %{public}s, %{public}d", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022BBB38);
        }
        uint64_t v55 = v48[6];
        int v56 = *((unsigned __int8 *)v48 + 44);
        int v91 = 136446466;
        *(void *)int v92 = v55;
        *(_WORD *)&v92[8] = 1026;
        *(_DWORD *)__int16 v93 = v56;
        __int16 v57 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::registerWsb(BOOL, BOOL)", "%s\n", v57);
        if (v57 != (char *)buf) {
          free(v57);
        }
      }
    }
    if (*((unsigned char *)v48 + 44))
    {
      int v58 = 1;
      char v49 = 1;
      if ((a2 & 1) == 0) {
        goto LABEL_134;
      }
      goto LABEL_153;
    }
    int v53 = (void *)v48[1];
    if (v53)
    {
      do
      {
        unsigned __int8 v54 = v53;
        int v53 = (void *)*v53;
      }
      while (v53);
    }
    else
    {
      do
      {
        unsigned __int8 v54 = (void *)v48[2];
        BOOL v60 = *v54 == (void)v48;
        __int16 v48 = v54;
      }
      while (!v60);
    }
    __int16 v48 = v54;
  }
  while (v54 != (void *)(v44 + 48));
  int v58 = 0;
  if (a2) {
    goto LABEL_134;
  }
LABEL_153:
  int v42 = *(unsigned __int8 *)(a1 + 244);
LABEL_154:
  char v59 = v49;
  if (v42 != (v49 & 1) || (a3 & 1) != 0)
  {
LABEL_162:
    *(unsigned char *)(a1 + 244) = v59;
    sub_1005719B4(a1, v49 & 1);
    int v67 = 1;
    goto LABEL_163;
  }
LABEL_156:
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022BBB38);
  }
  __int16 v66 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67240704;
    *(_DWORD *)uint64_t v110 = a2;
    *(_WORD *)&v110[4] = 1026;
    *(_DWORD *)&v110[6] = v58;
    *(_WORD *)__int16 v111 = 1026;
    *(_DWORD *)&v111[2] = 0;
    _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "@WsbActive, Same, isReg, %{public}d, active, %{public}d, recheck, %{public}d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    int v91 = 67240704;
    *(_DWORD *)int v92 = a2;
    *(_WORD *)&v92[4] = 1026;
    *(_DWORD *)&v92[6] = v58;
    *(_WORD *)__int16 v93 = 1026;
    *(_DWORD *)&v93[2] = 0;
    int v80 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::registerWsb(BOOL, BOOL)", "%s\n", v80);
    if (v80 != (char *)buf) {
      free(v80);
    }
  }
  int v67 = 0;
LABEL_163:
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022BBB38);
  }
  uint64_t v68 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v69 = *sub_1005725F0((uint64_t **)&v85, &v84);
    int v70 = *(_DWORD *)(a1 + 240);
    int v71 = *(unsigned __int8 *)(a1 + 244);
    int v72 = *(unsigned __int8 *)(a1 + 246);
    uint64_t v73 = *(void *)(v44 + 56);
    *(_DWORD *)long long buf = 136448514;
    *(void *)uint64_t v110 = v41;
    *(_WORD *)&v110[8] = 1026;
    *(_DWORD *)__int16 v111 = a2;
    *(_WORD *)&v111[4] = 2082;
    int v112 = v69;
    __int16 v113 = 1026;
    int v114 = v70;
    __int16 v115 = 1026;
    int v116 = v82;
    __int16 v117 = 1026;
    int v118 = v29;
    __int16 v119 = 1026;
    int v120 = v71;
    __int16 v121 = 1026;
    int v122 = v67;
    __int16 v123 = 1026;
    int v124 = v72;
    __int16 v125 = 2050;
    uint64_t v126 = v73;
    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "@WsbReg, codepath, %{public}s, isReg, %{public}d, mode, %{public}s, rate, %{public}d, dynRate, %{public}d, rollover, %{public}d, active, %{public}d, %{public}d, sample, %{public}d, clients, %{public}lu", buf, 0x4Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    int v74 = *sub_1005725F0((uint64_t **)&v85, &v84);
    int v75 = *(_DWORD *)(a1 + 240);
    int v76 = *(unsigned __int8 *)(a1 + 244);
    int v77 = *(unsigned __int8 *)(a1 + 246);
    uint64_t v78 = *(void *)(v44 + 56);
    int v91 = 136448514;
    *(void *)int v92 = v41;
    *(_WORD *)&v92[8] = 1026;
    *(_DWORD *)__int16 v93 = a2;
    *(_WORD *)&v93[4] = 2082;
    __int16 v94 = v74;
    __int16 v95 = 1026;
    int v96 = v75;
    __int16 v97 = 1026;
    int v98 = v82;
    __int16 v99 = 1026;
    int v100 = v29;
    __int16 v101 = 1026;
    int v102 = v76;
    __int16 v103 = 1026;
    int v104 = v67;
    __int16 v105 = 1026;
    int v106 = v77;
    __int16 v107 = 2050;
    uint64_t v108 = v78;
    id v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::registerWsb(BOOL, BOOL)", "%s\n", v20);
    goto LABEL_176;
  }
LABEL_168:
  sub_100589514(v86);
  if (HIBYTE(v90))
  {
    if ((_BYTE)v90) {
      pthread_mutex_unlock(v89);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v88 + 24))(v88);
    }
  }
}

void sub_10056DFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_100589514(a11);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10056E034(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BBAF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onWiFiManagerRestartCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BBAF8);
    }
    int v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2082;
      int v15 = "activity";
      __int16 v16 = 2050;
      uint64_t v17 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onWiFiManagerRestartCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v9 = 0;
  }
  id v6 = [*(id *)(a2 + 32) silo];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_100587FB8;
  void v7[3] = &unk_1022B8660;
  v7[4] = a2;
  uint64_t v7[5] = a1;
  [v6 sync:v7];
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_10056E234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10056E254(uint64_t a1, char a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BBAF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v12 = 1;
    id v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onWiFiManagerClientWowStateChangedCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BBAF8);
    }
    CFArrayRef v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      int v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onWiFiManagerClientWowStateChangedCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  id v8 = [*(id *)(a3 + 32) silo];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_100587FC0;
  v9[3] = &unk_1022B8640;
  void v9[4] = a3;
  v9[5] = a1;
  char v10 = a2;
  [v8 sync:v9];
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_10056E45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_10056E47C(const void *a1, const void *a2, uint64_t a3)
{
  CFRetain(a1);
  CFRetain(a2);
  id v6 = *(void **)(a3 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_1005739B0;
  v8[3] = &unk_1022B8680;
  unsigned char v8[4] = a3;
  _DWORD v8[5] = a1;
  void v8[6] = a2;
  return [v6 async:v8];
}

void sub_10056E518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BBAF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v13 = 1;
    id v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onWiFiManagerBackgroundScanCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BBAF8);
    }
    char v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v15 = 0;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 2082;
      __int16 v19 = "activity";
      __int16 v20 = 2050;
      uint64_t v21 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onWiFiManagerBackgroundScanCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v13 = 0;
  }
  id v10 = [*(id *)(a4 + 32) silo];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  _DWORD v11[2] = sub_100587FCC;
  v11[3] = &unk_1022BB368;
  v11[4] = a4;
  v11[5] = a1;
  void v11[6] = a2;
  v11[7] = a3;
  [v10 sync:v11];
  if (v13) {
    os_activity_scope_leave(&state);
  }
}

void sub_10056E72C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10056E74C(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BBAF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onWiFiDeviceClientPowerCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BBAF8);
    }
    int v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      char v13 = "";
      __int16 v14 = 2082;
      int v15 = "activity";
      __int16 v16 = 2050;
      uint64_t v17 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onWiFiDeviceClientPowerCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v9 = 0;
  }
  id v6 = [*(id *)(a2 + 32) silo];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_100587FDC;
  void v7[3] = &unk_1022B8660;
  v7[4] = a2;
  uint64_t v7[5] = a1;
  [v6 sync:v7];
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_10056E94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10056E96C(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BBAF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onWiFiDeviceClientResumeScanCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BBAF8);
    }
    int v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      char v13 = "";
      __int16 v14 = 2082;
      int v15 = "activity";
      __int16 v16 = 2050;
      uint64_t v17 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onWiFiDeviceClientResumeScanCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v9 = 0;
  }
  id v6 = [*(id *)(a2 + 32) silo];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_100587FE4;
  void v7[3] = &unk_1022B8660;
  v7[4] = a2;
  uint64_t v7[5] = a1;
  [v6 sync:v7];
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_10056EB6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10056EB8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BBAF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onWiFiDeviceClientLinkExtendedCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BBAF8);
    }
    CFArrayRef v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onWiFiDeviceClientLinkExtendedCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  id v8 = [*(id *)(a3 + 32) silo];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_100587FEC;
  v9[3] = &unk_1022B8680;
  void v9[4] = a3;
  v9[5] = a1;
  void v9[6] = a2;
  [v8 sync:v9];
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10056ED94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10056EDB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BBAF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onWiFiDeviceClientBssidChangeCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BBAF8);
    }
    CFArrayRef v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onWiFiDeviceClientBssidChangeCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  id v8 = [*(id *)(a3 + 32) silo];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_100587FFC;
  v9[3] = &unk_1022B8680;
  void v9[4] = a3;
  v9[5] = a1;
  void v9[6] = a2;
  [v8 sync:v9];
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10056EFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10056EFDC(uint64_t a1, char a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BBAF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v12 = 1;
    id v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onWiFiDeviceClientBgScanSuspendResumeCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BBAF8);
    }
    CFArrayRef v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onWiFiDeviceClientBgScanSuspendResumeCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  id v8 = [*(id *)(a3 + 32) silo];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_10058800C;
  v9[3] = &unk_1022B8640;
  void v9[4] = a3;
  v9[5] = a1;
  char v10 = a2;
  [v8 sync:v9];
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_10056F1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10056F204(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a5 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BBAF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v16 = 1;
    char v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onWiFiDeviceClientScanCacheCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BBAF8);
    }
    char v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v18 = 0;
      __int16 v19 = 2082;
      uint64_t v20 = "";
      __int16 v21 = 2082;
      int v22 = "activity";
      __int16 v23 = 2050;
      uint64_t v24 = a5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onWiFiDeviceClientScanCacheCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v16 = 0;
  }
  id v12 = [*(id *)(a5 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  uint64_t v13[2] = sub_10058801C;
  void v13[3] = &unk_1022BBB58;
  _DWORD v13[4] = a5;
  void v13[5] = a1;
  v13[6] = a2;
  v13[7] = a3;
  int v14 = a4;
  [v12 sync:v13];
  if (v16) {
    os_activity_scope_leave(&state);
  }
}

void sub_10056F420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10056F440(uint64_t a1, char a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BBAF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v12 = 1;
    id v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onWiFiDeviceClient24GHzNetworkInCriticalStateCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BBAF8);
    }
    CFArrayRef v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      char v16 = "";
      __int16 v17 = 2082;
      int v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onWiFiDeviceClient24GHzNetworkInCriticalStateCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  id v8 = [*(id *)(a3 + 32) silo];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_100588030;
  v9[3] = &unk_1022B8640;
  void v9[4] = a3;
  v9[5] = a1;
  char v10 = a2;
  [v8 sync:v9];
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_10056F648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10056F668(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 824;
  uint64_t v35 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  __int16 v36 = 256;
  *(void *)a2 = qword_10248AB78;
  std::string::operator=((std::string *)(a2 + 8), (const std::string *)byte_10248AB80);
  long long v5 = xmmword_10248AB98;
  long long v6 = xmmword_10248ABA8;
  long long v7 = xmmword_10248ABB8;
  *(void *)(a2 + 80) = qword_10248ABC8;
  *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x850], 8) = v6;
  *(_OWORD *)(a2 + 64) = v7;
  *(_OWORD *)(a2 + 32) = v5;
  sub_1000D9D94(a1 + 544, (uint64_t)&byte_10248AB18);
  if (*(void *)(a1 + 312))
  {
    uint64_t v9 = *(void *)(a1 + 320);
    if (v9)
    {
      BOOL v10 = sub_100576660(v8, v9, a2, 0);
      if (v10)
      {
        sub_100588040(a1 + 544, a2);
        *(void *)(a1 + 592) = 0;
        char v11 = (const void *)WiFiDeviceClientCopyCurrentNetwork();
        if (v11)
        {
          Property = (const void *)WiFiNetworkGetProperty();
          if (Property) {
            BOOL v13 = CFEqual(Property, kCFBooleanTrue) != 0;
          }
          else {
            BOOL v13 = 1;
          }
          *(unsigned char *)(a1 + 609) = v13;
          CFRelease(v11);
LABEL_33:
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BBB18);
          }
          uint64_t v20 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
          {
            v34.__r_.__value_.__r.__words[0] = *(void *)a2;
            sub_10006DE8C(&__p);
            __int16 v21 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__p
                : (std::string *)__p.__r_.__value_.__r.__words[0];
            int v22 = *(_DWORD *)(a2 + 40);
            int v23 = *(_DWORD *)(a2 + 32);
            int v24 = *(unsigned __int8 *)(a2 + 65);
            *(_DWORD *)long long buf = 67241219;
            BOOL v43 = v10;
            __int16 v44 = 2081;
            int v45 = v21;
            __int16 v46 = 1026;
            int v47 = v22;
            __int16 v48 = 1026;
            int v49 = v23;
            __int16 v50 = 1026;
            int v51 = v24;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "WifiMgr, queryAssoc, %{public}d, mac, %{private}s, channel, %{public}d, rssi, %{public}d, isMoving, %{public}d", buf, 0x24u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1022BBB18);
            }
            sub_10006DE8C(&v34);
            if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v29 = &v34;
            }
            else {
              int v29 = (std::string *)v34.__r_.__value_.__r.__words[0];
            }
            int v30 = *(_DWORD *)(a2 + 40);
            int v31 = *(_DWORD *)(a2 + 32);
            int v32 = *(unsigned __int8 *)(a2 + 65);
            LODWORD(__p.__r_.__value_.__l.__data_) = 67241219;
            HIDWORD(__p.__r_.__value_.__r.__words[0]) = v10;
            LOWORD(__p.__r_.__value_.__r.__words[1]) = 2081;
            *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v29;
            WORD1(__p.__r_.__value_.__r.__words[2]) = 1026;
            HIDWORD(__p.__r_.__value_.__r.__words[2]) = v30;
            __int16 v38 = 1026;
            int v39 = v31;
            __int16 v40 = 1026;
            int v41 = v32;
            BOOL v33 = (char *)_os_log_send_and_compose_impl();
            if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v34.__r_.__value_.__l.__data_);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::queryAssociatedNetwork(CLWifiService_Type::AccessPoint &)", "%s\n", v33);
            if (v33 != (char *)buf) {
              free(v33);
            }
          }
          goto LABEL_42;
        }
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        __int16 v19 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "WifiMgr, queryAssoc, Unable to copy current network", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_33;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        int v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWifiService::queryAssociatedNetwork(CLWifiService_Type::AccessPoint &)", "%s\n", v18);
      }
      else
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        __int16 v17 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67240192;
          BOOL v43 = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "WifiMgr, queryAssoc, fail, ap, %{public}d", buf, 8u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_33;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        __p.__r_.__value_.__r.__words[0] = 67240192;
        int v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::queryAssociatedNetwork(CLWifiService_Type::AccessPoint &)", "%s\n", v18);
      }
      if (v18 != (char *)buf) {
        free(v18);
      }
      goto LABEL_33;
    }
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  int v14 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v15 = *(void *)(a1 + 312) == 0;
    BOOL v16 = *(void *)(a1 + 320) == 0;
    *(_DWORD *)long long buf = 67240448;
    BOOL v43 = v15;
    __int16 v44 = 1026;
    LODWORD(v45) = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "WifiMgr, queryAssoc, fail, device, %{public}d, network, %{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    BOOL v26 = *(void *)(a1 + 312) == 0;
    BOOL v27 = *(void *)(a1 + 320) == 0;
    LODWORD(__p.__r_.__value_.__l.__data_) = 67240448;
    HIDWORD(__p.__r_.__value_.__r.__words[0]) = v26;
    LOWORD(__p.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = v27;
    long long v28 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::queryAssociatedNetwork(CLWifiService_Type::AccessPoint &)", "%s\n", v28);
    if (v28 != (char *)buf) {
      free(v28);
    }
  }
  BOOL v10 = 0;
LABEL_42:
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return v10;
}

void sub_10056FE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10056FE60(void *a1)
{
  uint64_t v2 = a1 + 103;
  BOOL v10 = a1 + 103;
  (*(void (**)(void *))(a1[103] + 16))(a1 + 103);
  __int16 v11 = 256;
  id v3 = _os_activity_create((void *)&_mh_execute_header, "CL: onWiFiManagerClientWowStateChangedCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v3, &state);

  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  uint64_t v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 68289282;
    int v16 = 0;
    __int16 v17 = 2082;
    *(void *)std::string __p = "";
    *(_WORD *)&__p[8] = 2082;
    *(void *)&__p[10] = "activity";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWiFiManagerClientWowStateChangedCallback\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  int WoWState = WiFiManagerClientGetWoWState();
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BBB78);
  }
  long long v6 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109376;
    int v16 = WoWState;
    __int16 v17 = 2048;
    *(void *)std::string __p = a1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Got onWiFiManagerClientWowStateChangedCallback callback, isEnabled, %d, refcon, %p", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
    LODWORD(v12) = 67109376;
    HIDWORD(v12) = WoWState;
    __int16 v13 = 2048;
    int v14 = a1;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerClientWowStateChangedCallback(WiFiManagerClientRef, Boolean)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  *(_WORD *)long long buf = -256;
  LOBYTE(v17) = 0;
  char v20 = 0;
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  *(_DWORD *)((char *)&v22 + 1) = WoWState != 0;
  LODWORD(v12) = 11;
  (*(void (**)(void *, void ***, uint8_t *, uint64_t, uint64_t, void))(*a1 + 152))(a1, &v12, buf, 1, 0xFFFFFFFFLL, 0);
  char v12 = (void **)&v21[8];
  sub_1000D7F78(&v12);
  if (v20 && v19 < 0) {
    operator delete(*(void **)&__p[6]);
  }
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(void *))(*v2 + 24))(v2);
}

void sub_100570208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_100570248(uint64_t a1)
{
  uint64_t v2 = a1 + 824;
  uint64_t v17 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  __int16 v18 = 256;
  uint64_t v10 = qword_10248AB78;
  if (byte_10248AB80[23] < 0)
  {
    sub_1000DC48C(&v11, *(void **)byte_10248AB80, *(unint64_t *)&byte_10248AB80[8]);
  }
  else
  {
    long long v11 = *(_OWORD *)byte_10248AB80;
    uint64_t v12 = *(void *)&byte_10248AB80[16];
  }
  long long v13 = xmmword_10248AB98;
  long long v14 = xmmword_10248ABA8;
  long long v15 = xmmword_10248ABB8;
  uint64_t v16 = qword_10248ABC8;
  sub_10056F668(a1, (uint64_t)&v10);
  id v3 = *(const void **)(a1 + 224);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 224) = 0;
  }
  if (sub_1005755A8(a1, &v10))
  {
    if (DWORD2(v13) == -1)
    {
      sub_101A65540();
      uint64_t result = abort_report_np();
      __break(1u);
      return result;
    }
    int v9 = DWORD2(v13);
    v5[0] = &v9;
    uint64_t v8 = &v10;
    *(void *)(a1 + 224) = sub_10058156C(a1, 1, 1, 14, v5, &v8, 110, 0, 0);
    sub_100588040(a1 + 544, (uint64_t)&v10);
  }
  else
  {
    sub_1005880F4((uint64_t)v5, (uint64_t)&qword_10248AB78);
    sub_1000E2DB0(a1 + 544, (uint64_t)v5);
    if (v7 && v6 < 0) {
      operator delete(v5[1]);
    }
  }
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)v11);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

void sub_100570428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  sub_1019DB560(v33 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_100570468(uint64_t a1)
{
  uint64_t v2 = a1 + 824;
  uint64_t v18 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  __int16 v19 = 256;
  int v3 = byte_10247B3D8;
  if ((byte_10247B3D8 & 1) == 0)
  {
    sub_100103240();
    byte_10247B3D9 = (sub_1001073D0() & 0x8000) != 0;
    byte_10247B3D8 = 1;
  }
  BOOL v17 = 0;
  sub_1005744A4(a1, &v17);
  int v4 = *(unsigned __int8 *)(a1 + 376);
  *(unsigned char *)(a1 + 376) = byte_10247B3D9;
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BBB78);
  }
  long long v5 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v6 = *(unsigned __int8 *)(a1 + 376);
    int v7 = *(unsigned __int8 *)(a1 + 536);
    *(_DWORD *)long long buf = 67109888;
    *(_DWORD *)BOOL v26 = v6;
    *(_WORD *)&v26[4] = 1024;
    *(_DWORD *)&v26[6] = v4;
    __int16 v27 = 1024;
    LODWORD(__p[0]) = byte_10247B3D9;
    WORD2(__p[0]) = 1024;
    *(_DWORD *)((char *)__p + 6) = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "WiFi tracking available now %d (was %d) (%d %d)", buf, 0x1Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
    int v12 = *(unsigned __int8 *)(a1 + 376);
    int v13 = *(unsigned __int8 *)(a1 + 536);
    *(_DWORD *)char v20 = 67109888;
    *(_DWORD *)&_DWORD v20[4] = v12;
    *(_WORD *)&v20[8] = 1024;
    *(_DWORD *)&v20[10] = v4;
    __int16 v21 = 1024;
    int v22 = byte_10247B3D9;
    __int16 v23 = 1024;
    int v24 = v13;
    long long v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::processTrackingAndPower()", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  if (v3)
  {
    int v8 = *(unsigned __int8 *)(a1 + 376);
    if (v4 != v8)
    {
      *(_WORD *)long long buf = -256;
      v26[4] = 0;
      char v30 = 0;
      uint64_t v33 = 0;
      long long v31 = 0u;
      long long v32 = 0u;
      BYTE1(v33) = v8;
      *(_DWORD *)char v20 = 10;
      (*(void (**)(uint64_t, unsigned char *, uint8_t *, void, uint64_t, void))(*(void *)a1 + 152))(a1, v20, buf, 0, 0xFFFFFFFFLL, 0);
      *(void *)char v20 = (char *)&v31 + 8;
      sub_1000D7F78((void ***)v20);
      if (v30)
      {
        if (v29 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022BBB38);
  }
  int v9 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 536)) {
      uint64_t v10 = "On";
    }
    else {
      uint64_t v10 = "Off";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)BOOL v26 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "WifiNotify, Power, %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    if (*(unsigned char *)(a1 + 536)) {
      long long v15 = "On";
    }
    else {
      long long v15 = "Off";
    }
    *(_DWORD *)char v20 = 136315138;
    *(void *)&_DWORD v20[4] = v15;
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::processTrackingAndPower()", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  buf[1] = -1;
  v26[4] = 0;
  char v30 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v33 = 0;
  buf[0] = *(unsigned char *)(a1 + 536);
  *(_DWORD *)char v20 = 1;
  (*(void (**)(uint64_t, unsigned char *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, v20, buf, 1, 0xFFFFFFFFLL, 0);
  *(void *)char v20 = (char *)&v31 + 8;
  sub_1000D7F78((void ***)v20);
  if (v30 && v29 < 0) {
    operator delete(__p[0]);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

void sub_1005709D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100570A18(uint64_t a1)
{
  int v3 = (void **)(a1 + 112);
  sub_1000D7F78(&v3);
  if (*(unsigned char *)(a1 + 96) && *(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_100570A6C(uint64_t a1)
{
  *(void *)a1 = off_1022BB7F0;
  sub_100570B90(a1);
  uint64_t v2 = *(void *)(a1 + 840);
  *(void *)(a1 + 840) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_10051310C(a1 + 824);
  sub_1000F5BB0(a1 + 696, *(void **)(a1 + 704));
  if (*(unsigned char *)(a1 + 632) && *(char *)(a1 + 575) < 0) {
    operator delete(*(void **)(a1 + 552));
  }
  int v4 = (void **)(a1 + 496);
  sub_1000D7F78(&v4);
  int v4 = (void **)(a1 + 464);
  sub_1000D7F78(&v4);
  int v4 = (void **)(a1 + 432);
  sub_1000D7F78(&v4);
  sub_100588314((void *)(a1 + 328));
  return sub_1010E91BC((void *)a1);
}

void sub_100570B58(uint64_t a1)
{
  sub_100570A6C(a1);

  operator delete();
}

uint64_t sub_100570B90(uint64_t a1)
{
  uint64_t v2 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  *(unsigned char *)(a1 + 10_Block_object_dispose(&STACK[0x850], 8) = 1;
  int v3 = *(__CFRunLoopSource **)(a1 + 296);
  if (v3)
  {
    CFRunLoopSourceInvalidate(v3);
    int v4 = *(const void **)(a1 + 296);
    *(void *)(a1 + 296) = 0;
    CFRelease(v4);
  }
  long long v5 = *(const void **)(a1 + 320);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 320) = 0;
  }
  if (*(void *)(a1 + 312))
  {
    WiFiDeviceClientSetRangeable();
    WiFiDeviceClientRegisterRangingReportCallback();
    CFRelease(*(CFTypeRef *)(a1 + 312));
    *(void *)(a1 + 312) = 0;
  }
  if (*(void *)(a1 + 304))
  {
    sub_1001C2710();
    WiFiManagerClientUnscheduleFromRunLoop();
    CFRelease(*(CFTypeRef *)(a1 + 304));
    *(void *)(a1 + 304) = 0;
  }

  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 664) = 0;

  *(void *)(a1 + 672) = 0;
  int v6 = *(const void **)(a1 + 520);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 520) = 0;
  }
  int v7 = *(const void **)(a1 + 528);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 52_Block_object_dispose(&STACK[0x850], 8) = 0;
  }
  int v8 = *(const void **)(a1 + 112);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 112) = 0;
  }
  int v9 = *(const void **)(a1 + 120);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 120) = 0;
  }
  uint64_t v10 = *(const void **)(a1 + 128);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 12_Block_object_dispose(&STACK[0x850], 8) = 0;
  }
  long long v11 = *(const void **)(a1 + 176);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 176) = 0;
  }
  int v12 = *(const void **)(a1 + 184);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 184) = 0;
  }
  int v13 = *(const void **)(a1 + 192);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 192) = 0;
  }
  long long v14 = *(const void **)(a1 + 200);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(a1 + 200) = 0;
  }
  long long v15 = *(const void **)(a1 + 208);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a1 + 20_Block_object_dispose(&STACK[0x850], 8) = 0;
  }
  uint64_t v16 = *(const void **)(a1 + 216);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(a1 + 216) = 0;
  }
  BOOL v17 = *(const void **)(a1 + 224);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(a1 + 224) = 0;
  }
  uint64_t v18 = *(const void **)(a1 + 136);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(a1 + 136) = 0;
  }
  __int16 v19 = *(const void **)(a1 + 144);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(a1 + 144) = 0;
  }
  char v20 = *(const void **)(a1 + 152);
  if (v20)
  {
    CFRelease(v20);
    *(void *)(a1 + 152) = 0;
  }
  __int16 v21 = *(const void **)(a1 + 160);
  if (v21)
  {
    CFRelease(v21);
    *(void *)(a1 + 160) = 0;
  }
  int v22 = *(const void **)(a1 + 168);
  if (v22)
  {
    CFRelease(v22);
    *(void *)(a1 + 16_Block_object_dispose(&STACK[0x850], 8) = 0;
  }
  __int16 v23 = *(NSObject **)(a1 + 736);
  if (v23)
  {
    dispatch_release(v23);
    *(void *)(a1 + 736) = 0;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

void sub_100570DF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100570E10(int a1)
{
  return (a1 - 1) < 0xFFFFFF7F;
}

uint64_t sub_100570E20(uint64_t a1)
{
  uint64_t v2 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  if (*(void *)(a1 + 304) && *(void *)(a1 + 312))
  {
    Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionaryAddValue(Mutable, @"BGSCAN_CACHE", kCFBooleanFalse);
    CFDictionaryAddValue(Mutable, @"BGSCAN_CACHE_WSB_ROLLOVER", kCFBooleanFalse);
    id v4 = +[NSMutableArray array];
    long long v5 = +[NSNumber numberWithInteger:1];
    id v6 = +[NSMutableDictionary dictionary];
    [v6 setObject:v5 forKey:@"CHANNEL"];
    [v4 addObject:v6];
    CFDictionarySetValue(Mutable, @"SCAN_CHANNELS", v4);
    WiFiManagerClientSetBGScanCacheState();
    CFRelease(Mutable);
    *(void *)(a1 + 236) = 0xE1000000000;
    *(_WORD *)(a1 + 244) = 0;
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    int v7 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "@WsbReg, disabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 == -1)
      {
LABEL_17:
        uint64_t v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::turnOffWsb()", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
        return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
      }
LABEL_19:
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
      goto LABEL_17;
    }
  }
  else
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    int v8 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "@Wsb, No wifi interface available, WARNING", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 == -1) {
        goto LABEL_17;
      }
      goto LABEL_19;
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

void sub_100571224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100571260(uint64_t a1)
{
  uint64_t v2 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  if (*(void *)(a1 + 304) && *(void *)(a1 + 312))
  {
    if (*(_DWORD *)(a1 + 236) != 2 || *(int *)(a1 + 284) <= 0)
    {
      WiFiManagerClientRegisterBackgroundScanCacheCallback();
      sub_1005714D8(a1, 0, 1);
      *(_DWORD *)(a1 + 236) = 2;
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v3 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "@WsbWarn, No wifi interface available, #CloneMe", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      long long v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::turnOnWsb()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

void sub_1005714B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005714D8(uint64_t a1, int a2, int a3)
{
  theDict = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(theDict, @"BGSCAN_CACHE", kCFBooleanTrue);
  if (a3) {
    CFIndex v4 = 3;
  }
  else {
    CFIndex v4 = 13;
  }
  Mutable = CFArrayCreateMutable(0, v4, &kCFTypeArrayCallBacks);
  int v6 = 0;
  int valuePtr = 1;
  int v7 = 1;
  do
  {
    if (!a3 || v7 <= 0xB && ((1 << v7) & 0x842) != 0)
    {
      int v8 = CFDictionaryCreateMutable(kCFAllocatorDefault, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFNumberRef v9 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      CFNumberRef v10 = v9;
      if (v8) {
        BOOL v11 = v9 == 0;
      }
      else {
        BOOL v11 = 1;
      }
      if (v11)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        int v12 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67240704;
          int v28 = valuePtr;
          __int16 v29 = 2050;
          char v30 = v8;
          __int16 v31 = 2050;
          CFNumberRef v32 = v10;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "@WsbWarn, channel fail, %{public}d channelDict, %{public}p, channelNumber, %{public}p, #CloneMe", buf, 0x1Cu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BBB18);
          }
          int v21 = 67240704;
          int v22 = valuePtr;
          __int16 v23 = 2050;
          int v24 = v8;
          __int16 v25 = 2050;
          CFNumberRef v26 = v10;
          int v13 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::enableDefaultWsbProfile(BOOL, BOOL)", "%s\n", v13);
          if (v13 != (char *)buf) {
            free(v13);
          }
        }
      }
      else
      {
        CFDictionaryAddValue(v8, @"CHANNEL", v9);
        CFArrayAppendValue(Mutable, v8);
      }
      CFRelease(v8);
      CFRelease(v10);
      ++v6;
      int v7 = valuePtr;
    }
    int valuePtr = v7 + 1;
  }
  while (v7++ < 13);
  CFDictionarySetValue(theDict, @"SCAN_CHANNELS", Mutable);
  if (a2) {
    CFBooleanRef v15 = kCFBooleanTrue;
  }
  else {
    CFBooleanRef v15 = kCFBooleanFalse;
  }
  CFDictionaryAddValue(theDict, @"BGSCAN_CACHE_WSB_ROLLOVER", v15);
  WiFiManagerClientSetBGScanCacheState();
  CFRelease(Mutable);
  CFRelease(theDict);
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022BBB38);
  }
  uint64_t v16 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67240192;
    int v28 = v6;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "@WsbReg, enable, chs, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    int v21 = 67240192;
    int v22 = v6;
    BOOL v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::enableDefaultWsbProfile(BOOL, BOOL)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
}

void sub_1005719B4(uint64_t a1, int a2)
{
  BOOL v4 = sub_10014DB48(a1 + 824);
  if (!v4) {
    sub_101A656BC(v4, v5, v6, v7, v8, v9, v10, v11, v74, v75, v76, v77, v78, (uint64_t)v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_, v82.__r_.__value_.__r.__words[2], (uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2],
  }
      (uint64_t)v84.__r_.__value_.__l.__data_,
      v84.__r_.__value_.__l.__size_,
      v84.__r_.__value_.__r.__words[2],
      v85,
      v86,
      v87,
      v88,
      v89,
      v90);
  if (*(void *)(a1 + 248) || *(unsigned __int8 *)(a1 + 246) == a2)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    int v12 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      std::string::size_type v13 = *(void *)(a1 + 248);
      int v14 = *(unsigned __int8 *)(a1 + 246);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v13;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a2;
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1026;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "@WsbActive, Skip, networks, %{public}lu, turnOn, %{public}d, isSampleScan, %{public}d", (uint8_t *)&buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022BBB38);
      }
      std::string::size_type v63 = *(void *)(a1 + 248);
      int v64 = *(unsigned __int8 *)(a1 + 246);
      LODWORD(__dst.__r_.__value_.__l.__data_) = 134349568;
      *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = v63;
      WORD2(__dst.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = a2;
      WORD1(__dst.__r_.__value_.__r.__words[2]) = 1026;
      HIDWORD(__dst.__r_.__value_.__r.__words[2]) = v64;
      uint64_t v65 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::programSampleNetworks(BOOL)", "%s\n", (const char *)v65);
      if (v65 != &buf) {
        free(v65);
      }
    }
  }
  else
  {
    *(unsigned char *)(a1 + 246) = a2;
    if (*(double *)(a1 + 680) != 0.0 && *(void *)(a1 + 712))
    {
      double Current = CFAbsoluteTimeGetCurrent();
      double v16 = (Current - *(double *)(a1 + 688)) / 60.0;
      if (v16 >= 1.0)
      {
        BOOL v17 = "active:off";
        int v18 = *(_DWORD *)(a1 + 720);
        if (v18 == 1) {
          BOOL v17 = "active:fences";
        }
        if (v18 == 2) {
          __int16 v19 = "active:fake";
        }
        else {
          __int16 v19 = v17;
        }
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022BBB38);
        }
        char v20 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
          *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v16;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "WsbMetric, regmode, %{public}s, duration, %{public}.1f", (uint8_t *)&buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022BBB38);
          }
          LODWORD(__dst.__r_.__value_.__l.__data_) = 136446466;
          *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
          WORD2(__dst.__r_.__value_.__r.__words[1]) = 2050;
          *(double *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = v16;
          uint64_t v73 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::programSampleNetworks(BOOL)", "%s\n", (const char *)v73);
          if (v73 != &buf) {
            free(v73);
          }
        }
        int v91 = _NSConcreteStackBlock;
        uint64_t v92 = 3221225472;
        __int16 v93 = sub_10057269C;
        __int16 v94 = &unk_1022AE8E0;
        __int16 v95 = v19;
        double v96 = v16;
        AnalyticsSendEventLazy();
      }
      if (a2) {
        int v21 = 2;
      }
      else {
        int v21 = 1;
      }
      *(_DWORD *)(a1 + 720) = v21;
      *(double *)(a1 + 68_Block_object_dispose(&STACK[0x850], 8) = Current;
    }
    if (a2)
    {
      uint64_t v88 = 0;
      unint64_t v89 = 0;
      unint64_t v90 = 0;
      uint64_t v85 = 0;
      uint64_t v86 = 0;
      uint64_t v87 = 0;
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022BBB38);
      }
      int v22 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
      {
        p_dst = &__dst;
        sub_10006DE8C(&__dst);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        sub_10006DE8C(&v84);
        int v24 = SHIBYTE(v84.__r_.__value_.__r.__words[2]);
        std::string::size_type v25 = v84.__r_.__value_.__r.__words[0];
        sub_10006DE8C(&__p);
        CFNumberRef v26 = &v84;
        if (v24 < 0) {
          CFNumberRef v26 = (std::string *)v25;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136381187;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_dst;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2081;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v26;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2081;
        int v100 = p_p;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "@WsbActive, Create, %{private}s, %{private}s, %{private}s", (uint8_t *)&buf, 0x20u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v84.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022BBB38);
        }
        int v67 = &v84;
        sub_10006DE8C(&v84);
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v67 = (std::string *)v84.__r_.__value_.__r.__words[0];
        }
        sub_10006DE8C(&__p);
        int v68 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        std::string::size_type v69 = __p.__r_.__value_.__r.__words[0];
        sub_10006DE8C(&v82);
        int v70 = &__p;
        if (v68 < 0) {
          int v70 = (std::string *)v69;
        }
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v71 = &v82;
        }
        else {
          int v71 = (std::string *)v82.__r_.__value_.__r.__words[0];
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136381187;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v67;
        WORD2(__dst.__r_.__value_.__r.__words[1]) = 2081;
        *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v70;
        HIWORD(__dst.__r_.__value_.__r.__words[2]) = 2081;
        int v98 = v71;
        int v72 = (std::string *)_os_log_send_and_compose_impl();
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v82.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v84.__r_.__value_.__l.__data_);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::programSampleNetworks(BOOL)", "%s\n", (const char *)v72);
        if (v72 != &buf) {
          free(v72);
        }
      }
      if (byte_10248AB80[23] < 0) {
        sub_1000DC48C(&__dst, *(void **)byte_10248AB80, *(unint64_t *)&byte_10248AB80[8]);
      }
      else {
        std::string __dst = *(std::string *)byte_10248AB80;
      }
      int data = xmmword_10248AB98;
      int v30 = DWORD1(xmmword_10248AB98);
      int v81 = DWORD1(xmmword_10248AB98);
      LODWORD(v82.__r_.__value_.__l.__data_) = xmmword_10248AB98;
      std::string::size_type v31 = *((void *)&xmmword_10248ABA8 + 1);
      __p.__r_.__value_.__r.__words[0] = *((void *)&xmmword_10248ABA8 + 1);
      std::string::size_type v32 = xmmword_10248ABA8;
      v84.__r_.__value_.__r.__words[0] = xmmword_10248ABA8;
      char v33 = xmmword_10248ABB8;
      char v80 = xmmword_10248ABB8;
      char v34 = BYTE1(xmmword_10248ABB8);
      char v79 = BYTE1(xmmword_10248ABB8);
      int v35 = DWORD1(xmmword_10248ABB8);
      __int16 v36 = (uint64_t *)(a1 + 256);
      LODWORD(v77) = 1;
      HIDWORD(v77) = DWORD1(xmmword_10248ABB8);
      unint64_t v37 = v89;
      if (v89 >= v90)
      {
        unint64_t v39 = sub_100589560(&v88, v36, (long long *)&__dst, (int *)&v82, &v81, (int *)&v77, (double *)&v84, (uint64_t *)&__p, &v80, &v79, (int *)&v77 + 1);
      }
      else
      {
        uint64_t v38 = *v36;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_1000DC48C(&buf, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
          int v30 = v81;
          int data = (int)v82.__r_.__value_.__l.__data_;
          std::string::size_type v32 = v84.__r_.__value_.__r.__words[0];
          std::string::size_type v31 = __p.__r_.__value_.__r.__words[0];
          char v33 = v80;
          char v34 = v79;
          int v35 = HIDWORD(v77);
        }
        else
        {
          std::string buf = __dst;
        }
        *(void *)unint64_t v37 = v38;
        long long v40 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        *(void *)(v37 + 24) = *((void *)&buf.__r_.__value_.__l + 2);
        *(_OWORD *)(v37 + _Block_object_dispose(&STACK[0x850], 8) = v40;
        *(_DWORD *)(v37 + 32) = data;
        *(_DWORD *)(v37 + 36) = v30;
        *(_DWORD *)(v37 + 40) = 1;
        *(void *)(v37 + 4_Block_object_dispose(&STACK[0x850], 8) = v32;
        *(void *)(v37 + 56) = v31;
        *(unsigned char *)(v37 + 64) = v33;
        *(unsigned char *)(v37 + 65) = v34;
        *(_DWORD *)(v37 + 6_Block_object_dispose(&STACK[0x850], 8) = v35;
        *(unsigned char *)(v37 + 72) = 0;
        unint64_t v39 = v37 + 88;
        *(void *)(v37 + 80) = 0;
      }
      unint64_t v89 = v39;
      int v41 = (uint64_t *)(a1 + 264);
      LODWORD(v77) = 6;
      if (v39 >= v90)
      {
        unint64_t v43 = sub_100589560(&v88, v41, (long long *)&__dst, (int *)&v82, &v81, (int *)&v77, (double *)&v84, (uint64_t *)&__p, &v80, &v79, (int *)&v77 + 1);
      }
      else
      {
        uint64_t v42 = *v41;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_1000DC48C(&buf, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string buf = __dst;
        }
        int v45 = v81;
        int v44 = (int)v82.__r_.__value_.__l.__data_;
        std::string::size_type v46 = v84.__r_.__value_.__r.__words[0];
        std::string::size_type v47 = __p.__r_.__value_.__r.__words[0];
        char v48 = v80;
        char v49 = v79;
        int v50 = HIDWORD(v77);
        *(void *)unint64_t v39 = v42;
        std::string::size_type v51 = buf.__r_.__value_.__r.__words[2];
        *(_OWORD *)(v39 + _Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        *(void *)(v39 + 24) = v51;
        *(_DWORD *)(v39 + 32) = v44;
        *(_DWORD *)(v39 + 36) = v45;
        *(_DWORD *)(v39 + 40) = 6;
        *(void *)(v39 + 4_Block_object_dispose(&STACK[0x850], 8) = v46;
        *(void *)(v39 + 56) = v47;
        *(unsigned char *)(v39 + 64) = v48;
        *(unsigned char *)(v39 + 65) = v49;
        *(_DWORD *)(v39 + 6_Block_object_dispose(&STACK[0x850], 8) = v50;
        *(unsigned char *)(v39 + 72) = 0;
        unint64_t v43 = v39 + 88;
        *(void *)(v39 + 80) = 0;
      }
      unint64_t v89 = v43;
      int v52 = (uint64_t *)(a1 + 272);
      LODWORD(v77) = 11;
      if (v43 >= v90)
      {
        uint64_t v54 = sub_100589560(&v88, v52, (long long *)&__dst, (int *)&v82, &v81, (int *)&v77, (double *)&v84, (uint64_t *)&__p, &v80, &v79, (int *)&v77 + 1);
      }
      else
      {
        uint64_t v53 = *v52;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          sub_1000DC48C(&buf, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string buf = __dst;
        }
        int v56 = v81;
        int v55 = (int)v82.__r_.__value_.__l.__data_;
        std::string::size_type v57 = v84.__r_.__value_.__r.__words[0];
        std::string::size_type v58 = __p.__r_.__value_.__r.__words[0];
        char v59 = v80;
        char v60 = v79;
        int v61 = HIDWORD(v77);
        *(void *)unint64_t v43 = v53;
        std::string::size_type v62 = buf.__r_.__value_.__r.__words[2];
        *(_OWORD *)(v43 + _Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        *(void *)(v43 + 24) = v62;
        *(_DWORD *)(v43 + 32) = v55;
        *(_DWORD *)(v43 + 36) = v56;
        *(_DWORD *)(v43 + 40) = 11;
        *(void *)(v43 + 4_Block_object_dispose(&STACK[0x850], 8) = v57;
        *(void *)(v43 + 56) = v58;
        *(unsigned char *)(v43 + 64) = v59;
        *(unsigned char *)(v43 + 65) = v60;
        *(_DWORD *)(v43 + 6_Block_object_dispose(&STACK[0x850], 8) = v61;
        *(unsigned char *)(v43 + 72) = 0;
        uint64_t v54 = v43 + 88;
        *(void *)(v43 + 80) = 0;
      }
      unint64_t v89 = v54;
      sub_10057275C(a1, &v88, &v85);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
      sub_1000D7F78((void ***)&buf);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
      sub_1000D7F78((void ***)&buf);
    }
    else
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022BBB38);
      }
      int v28 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "@WsbActive, Clear", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022BBB38);
        }
        LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
        __int16 v66 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::programSampleNetworks(BOOL)", "%s\n", (const char *)v66);
        if (v66 != &buf) {
          free(v66);
        }
      }
      sub_10056642C(a1, 0);
    }
  }
}

void sub_100572524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char **a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char *a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  a23 = &a29;
  sub_1000D7F78((void ***)&a23);
  a29 = &a32;
  sub_1000D7F78((void ***)&a29);
  _Unwind_Resume(a1);
}

uint64_t **sub_1005725F0(uint64_t **a1, int *a2)
{
  BOOL v4 = a1 + 1;
  int v3 = a1[1];
  int v5 = *a2;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v3;
        int v7 = *((_DWORD *)v3 + 8);
        if (v5 >= v7) {
          break;
        }
        int v3 = *v6;
        BOOL v4 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (v7 >= v5) {
        break;
      }
      int v3 = v6[1];
      if (!v3)
      {
        BOOL v4 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v6 = a1 + 1;
LABEL_9:
    uint64_t v8 = operator new(0x30uLL);
    v8[8] = v5;
    *((void *)v8 + 5) = 0;
    sub_1000EDF90(a1, (uint64_t)v6, v4, (uint64_t *)v8);
    uint64_t v6 = (uint64_t **)v8;
  }
  return v6 + 5;
}

NSDictionary *sub_10057269C(uint64_t a1)
{
  v4[0] = @"active";
  v3[0] = @"mode";
  v3[1] = @"submode";
  v4[1] = +[NSString stringWithUTF8String:*(void *)(a1 + 32)];
  _DWORD v3[2] = @"duration";
  void v4[2] = +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:3];
}

uint64_t sub_10057275C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BBB78);
  }
  int v7 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3);
    uint64_t v9 = 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3);
    *(_DWORD *)std::string buf = 134218240;
    uint64_t v15 = v8;
    __int16 v16 = 2048;
    uint64_t v17 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "setExitAndEntryScanNetworks, entry, %lu, exit, %lu", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
    std::string::size_type v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::setExitAndEntryScanNetworks(const std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  uint64_t v10 = *(const void **)(a1 + 528);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 52_Block_object_dispose(&STACK[0x850], 8) = 0;
  }
  uint64_t v11 = *(const void **)(a1 + 520);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 520) = 0;
  }
  if (sub_100583528(a1, a2, (CFTypeRef *)(a1 + 520), 1)
    && sub_100583528(a1, a3, (CFTypeRef *)(a1 + 528), 0))
  {
    sub_10057E1FC(a1);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
}

void sub_100572A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100572A78(uint64_t a1, CFArrayRef theArray)
{
  if (!theArray)
  {
    int v54 = 0;
    memset(&__p, 0, sizeof(__p));
    goto LABEL_147;
  }
  memset(&__p, 0, sizeof(__p));
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
    int v54 = 0;
    goto LABEL_147;
  }
  CFIndex v4 = 0;
  int v54 = 0;
  CFArrayRef theArraya = theArray;
  while (1)
  {
    CFArrayGetValueAtIndex(theArraya, v4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      *__p.__r_.__value_.__l.__data_ = 0;
      __p.__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
    }
    CFStringRef Property = (const __CFString *)WiFiNetworkGetProperty();
    if (!Property || !sub_10013D274(Property, &__p)) {
      break;
    }
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (!size) {
      break;
    }
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    int v7 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136381187;
      *(void *)&uint8_t buf[4] = p_p;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&unsigned char buf[14] = v4;
      *(_WORD *)&buf[18] = 2050;
      *(void *)&buf[20] = Count;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "@WsbActive, network, %{private}s, %{public}d, %{public}ld", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022BBB38);
      }
      std::string::size_type v46 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)__int16 v66 = 136381187;
      *(void *)&v66[4] = v46;
      *(_WORD *)&v66[12] = 1026;
      *(_DWORD *)&v66[14] = v4;
      *(_WORD *)&v66[18] = 2050;
      *(void *)&v66[20] = Count;
      std::string::size_type v47 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::replaceMatchingNetworks(CFArrayRef)", "%s\n", v47);
      if (v47 != buf) {
        free(v47);
      }
    }
    uint64_t v9 = 0;
    uint64_t v10 = (uint64_t *)(a1 + 256);
    do
    {
      sub_10006DE8C((std::string *)buf);
      int v11 = buf[23];
      int v12 = *(void **)buf;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v13 = __p.__r_.__value_.__l.__size_;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v14 = &__p;
      }
      else {
        int v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (buf[23] >= 0) {
        std::string::size_type v15 = buf[23];
      }
      else {
        std::string::size_type v15 = *(void *)&buf[8];
      }
      if (buf[23] >= 0) {
        __int16 v16 = buf;
      }
      else {
        __int16 v16 = *(unsigned char **)buf;
      }
      if (v15 >= v13) {
        size_t v17 = v13;
      }
      else {
        size_t v17 = v15;
      }
      BOOL v18 = memcmp(v14, v16, v17) == 0;
      BOOL v19 = v15 == v13 && v18;
      if (v11 < 0)
      {
        operator delete(v12);
        if (!v19) {
          goto LABEL_108;
        }
      }
      else if (!v19)
      {
        goto LABEL_108;
      }
      int v20 = rand();
      if (v20 == -1) {
        int v21 = 0;
      }
      else {
        int v21 = v20;
      }
      int v22 = *(_DWORD *)(a1 + 280);
      *(_DWORD *)(a1 + 280) = v22 + 1;
      if (v22) {
        __int16 v23 = "56:78";
      }
      else {
        __int16 v23 = "12:34";
      }
      sub_100134750(v66, v23);
      std::to_string(&v58, (v21 >> 6) % 99);
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v24.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v58;
      }
      else {
        v24.__i_ = (std::__wrap_iter<const char *>::iterator_type)v58.__r_.__value_.__r.__words[0];
      }
      std::string::insert(&v58, v24, 58);
      std::string v59 = v58;
      memset(&v58, 0, sizeof(v58));
      std::string::push_back(&v59, 58);
      std::string v60 = v59;
      memset(&v59, 0, sizeof(v59));
      std::to_string(&v57, (v21 >> 4) % 99);
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v25 = &v57;
      }
      else {
        std::string::size_type v25 = (std::string *)v57.__r_.__value_.__r.__words[0];
      }
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v26 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v26 = v57.__r_.__value_.__l.__size_;
      }
      __int16 v27 = std::string::append(&v60, (const std::string::value_type *)v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      std::string::push_back(&v61, 58);
      std::string v62 = v61;
      memset(&v61, 0, sizeof(v61));
      std::to_string(&v56, (v21 >> 2) % 99);
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v29 = &v56;
      }
      else {
        __int16 v29 = (std::string *)v56.__r_.__value_.__r.__words[0];
      }
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v30 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v30 = v56.__r_.__value_.__l.__size_;
      }
      std::string::size_type v31 = std::string::append(&v62, (const std::string::value_type *)v29, v30);
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      std::string::push_back(&v63, 58);
      std::string v65 = v63;
      memset(&v63, 0, sizeof(v63));
      std::to_string(&v55, v21 % 99);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v33 = &v55;
      }
      else {
        char v33 = (std::string *)v55.__r_.__value_.__r.__words[0];
      }
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v34 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v34 = v55.__r_.__value_.__l.__size_;
      }
      int v35 = std::string::append(&v65, (const std::string::value_type *)v33, v34);
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      *(void *)&uint8_t buf[16] = *((void *)&v35->__r_.__value_.__l + 2);
      *(_OWORD *)std::string buf = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      if (buf[23] >= 0) {
        unint64_t v37 = buf;
      }
      else {
        unint64_t v37 = *(const std::string::value_type **)buf;
      }
      if (buf[23] >= 0) {
        std::string::size_type v38 = buf[23];
      }
      else {
        std::string::size_type v38 = *(void *)&buf[8];
      }
      std::string::append((std::string *)v66, v37, v38);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      *uint64_t v10 = sub_100B38F04((uint64_t)v66);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022BBB38);
      }
      unint64_t v39 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10006DE8C(&v65);
        long long v40 = &v65;
        if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v40 = (std::string *)v65.__r_.__value_.__r.__words[0];
        }
        int v41 = *(_DWORD *)(a1 + 280);
        *(_DWORD *)std::string buf = 67175171;
        *(_DWORD *)&uint8_t buf[4] = v9;
        *(_WORD *)&uint8_t buf[8] = 2081;
        *(void *)&buf[10] = v40;
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = v41;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "@WsbActive, Match, %{private}d, newmac, %{private}s, matches, %{public}d, #CloneMe", buf, 0x18u);
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v65.__r_.__value_.__l.__data_);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022BBB38);
        }
        sub_10006DE8C(&v63);
        uint64_t v42 = &v63;
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v42 = (std::string *)v63.__r_.__value_.__r.__words[0];
        }
        int v43 = *(_DWORD *)(a1 + 280);
        LODWORD(v65.__r_.__value_.__l.__data_) = 67175171;
        HIDWORD(v65.__r_.__value_.__r.__words[0]) = v9;
        LOWORD(v65.__r_.__value_.__r.__words[1]) = 2081;
        *(std::string::size_type *)((char *)&v65.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v42;
        WORD1(v65.__r_.__value_.__r.__words[2]) = 1026;
        HIDWORD(v65.__r_.__value_.__r.__words[2]) = v43;
        int v44 = (char *)_os_log_send_and_compose_impl();
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v63.__r_.__value_.__l.__data_);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::replaceMatchingNetworks(CFArrayRef)", "%s\n", v44);
        if (v44 != buf) {
          free(v44);
        }
      }
      if ((v66[23] & 0x80000000) != 0) {
        operator delete(*(void **)v66);
      }
      ++v54;
LABEL_108:
      ++v9;
      ++v10;
    }
    while (v9 != 3);
    if (v54)
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022BBB38);
      }
      int v45 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v54;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "WsbClients, status, samplematch, %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022BBB38);
        }
        *(_DWORD *)__int16 v66 = 67240192;
        *(_DWORD *)&v66[4] = v54;
        char v48 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::replaceMatchingNetworks(CFArrayRef)", "%s\n", v48);
        if (v48 != buf) {
          free(v48);
        }
      }
    }
    if (++v4 == Count) {
      goto LABEL_147;
    }
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022BBB38);
  }
  char v49 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = v4;
    *(_WORD *)&uint8_t buf[8] = 2050;
    *(void *)&buf[10] = Count;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "@WsbActive, network, invalid, %{public}d, %{public}ld", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    *(_DWORD *)__int16 v66 = 67240448;
    *(_DWORD *)&v66[4] = v4;
    *(_WORD *)&v66[8] = 2050;
    *(void *)&v66[10] = Count;
    int v50 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::replaceMatchingNetworks(CFArrayRef)", "%s\n", v50);
    if (v50 != buf) {
      free(v50);
    }
  }
LABEL_147:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v54 != 0;
}

void sub_10057360C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a59 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10057377C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BBAF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v13 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onWiFiManagerBackgroundScanCacheCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BBAF8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v15 = 0;
      __int16 v16 = 2082;
      size_t v17 = "";
      __int16 v18 = 2082;
      BOOL v19 = "activity";
      __int16 v20 = 2050;
      uint64_t v21 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onWiFiManagerBackgroundScanCacheCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v13 = 0;
  }
  id v10 = [*(id *)(a4 + 32) silo];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  _DWORD v11[2] = sub_1005880E4;
  v11[3] = &unk_1022BB368;
  v11[4] = a4;
  v11[5] = a1;
  void v11[6] = a2;
  v11[7] = a3;
  [v10 sync:v11];
  if (v13) {
    os_activity_scope_leave(&state);
  }
}

void sub_100573990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005739B0(uint64_t a1, uint64_t a2)
{
  sub_1005739F8(*(void **)(a1 + 32), a2, *(void *)(a1 + 48));
  CFRelease(*(CFTypeRef *)(a1 + 40));
  int v3 = *(const void **)(a1 + 48);

  CFRelease(v3);
}

uint64_t sub_1005739F8(void *a1, uint64_t a2, uint64_t a3)
{
  int v5 = a1 + 103;
  __int16 v23 = a1 + 103;
  (*(void (**)(void *))(a1[103] + 16))(a1 + 103);
  __int16 v24 = 256;
  uint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: onWiFiDeviceClientAttachedCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  int v7 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v34 = 2082;
    int v35 = "";
    __int16 v36 = 2082;
    unint64_t v37 = "activity";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWiFiDeviceClientAttachedCallback\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (a3)
  {
    if (a1[39])
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      uint64_t v8 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef InterfaceName = (const __CFString *)WiFiDeviceClientGetInterfaceName();
        id v10 = buf;
        sub_1000FECE0(InterfaceName, (uint64_t)buf);
        if (SBYTE3(v37) < 0) {
          id v10 = *(uint8_t **)buf;
        }
        CFStringRef v11 = (const __CFString *)WiFiDeviceClientGetInterfaceName();
        sub_1000FECE0(v11, (uint64_t)__p);
        if (v21 >= 0) {
          int v12 = __p;
        }
        else {
          int v12 = (void **)__p[0];
        }
        *(_DWORD *)std::string::size_type v25 = 136315394;
        *(void *)&v25[4] = v10;
        __int16 v26 = 2080;
        __int16 v27 = v12;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "WifiMgr, prefer existing device, %s, ignoring %s", v25, 0x16u);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
        if (SBYTE3(v37) < 0) {
          operator delete(*(void **)buf);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_38;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      CFStringRef v13 = (const __CFString *)WiFiDeviceClientGetInterfaceName();
      int v14 = __p;
      sub_1000FECE0(v13, (uint64_t)__p);
      if (v21 < 0) {
        int v14 = (void **)__p[0];
      }
      CFStringRef v15 = (const __CFString *)WiFiDeviceClientGetInterfaceName();
      sub_1000FECE0(v15, (uint64_t)v25);
      if (v28 >= 0) {
        __int16 v16 = v25;
      }
      else {
        __int16 v16 = *(unsigned char **)v25;
      }
      int v29 = 136315394;
      std::string::size_type v30 = v14;
      __int16 v31 = 2080;
      long long v32 = v16;
      size_t v17 = (char *)_os_log_send_and_compose_impl();
      if (v28 < 0) {
        operator delete(*(void **)v25);
      }
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiDeviceClientAttachedCallback(WiFiManagerClientRef, WiFiDeviceClientRef)", "%s\n", v17);
      if (v17 == (char *)buf) {
        goto LABEL_38;
      }
LABEL_45:
      free(v17);
      goto LABEL_38;
    }
    sub_10056B1FC(a1);
    if (a1[39] && a1[38])
    {
      sub_10056CDC0((uint64_t)a1, 1, 1);
      *(_DWORD *)std::string buf = 0;
      (*(void (**)(void *, uint8_t *, void, uint64_t))(*a1 + 144))(a1, buf, 0, 0xFFFFFFFFLL);
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    __int16 v18 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "WifiMgr, onWifiDeviceClientAttachedCallback, NULL device", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      LOWORD(__p[0]) = 0;
      size_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::onWiFiDeviceClientAttachedCallback(WiFiManagerClientRef, WiFiDeviceClientRef)", "%s\n", v17);
      if (v17 != (char *)buf) {
        goto LABEL_45;
      }
    }
  }
LABEL_38:
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(void *))(*v5 + 24))(v5);
}

void sub_100573F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, os_activity_scope_state_s state, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

uint64_t sub_100573FCC(uint64_t a1)
{
  uint64_t v2 = a1 + 824;
  uint64_t v20 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  __int16 v21 = 256;
  int v3 = _os_activity_create((void *)&_mh_execute_header, "CL: onWiFiDeviceClientPowerCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v3, &state);

  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  CFIndex v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v25 = 2082;
    __int16 v26 = "";
    __int16 v27 = 2082;
    char v28 = "activity";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWiFiDeviceClientPowerCallback\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  sub_1000D9D94(a1 + 544, (uint64_t)&byte_10248AB18);
  char v13 = 0;
  char v16 = 0;
  __int16 v12 = -256;
  memset(v17, 0, sizeof(v17));
  uint64_t v18 = 0;
  if (sub_1005744A4(a1, (BOOL *)&v12))
  {
    *(unsigned char *)(a1 + 536) = v12;
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v5 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(unsigned __int8 *)(a1 + 536);
      *(_DWORD *)std::string buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "WifiMgr, onWiFiDeviceClientPowerCallback, fIsWifiPowered, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      int v9 = *(unsigned __int8 *)(a1 + 536);
      int v22 = 67240192;
      int v23 = v9;
      id v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiDeviceClientPowerCallback(WiFiDeviceClientRef)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    sub_100570468(a1);
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v7 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "WifiService, could not retrieve power state", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      LOWORD(v22) = 0;
      CFStringRef v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::onWiFiDeviceClientPowerCallback(WiFiDeviceClientRef)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    *(unsigned char *)(a1 + 536) = v12;
  }
  *(void *)std::string buf = (char *)v17 + 8;
  sub_1000D7F78((void ***)buf);
  if (v16 && v15 < 0) {
    operator delete(__p);
  }
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

void sub_100574460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,os_activity_scope_state_s state,char a31)
{
}

uint64_t sub_1005744A4(uint64_t a1, BOOL *a2)
{
  uint64_t v4 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  if (*(void *)(a1 + 296))
  {
    if (*(void *)(a1 + 312))
    {
      BOOL v5 = WiFiDeviceClientGetPower() != 0;
      *a2 = v5;
      *(unsigned char *)(a1 + 536) = v5;
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      int v6 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *(unsigned __int8 *)(a1 + 536);
        *(_DWORD *)std::string buf = 67240192;
        int v16 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "WifiMgr, WiFiDeviceClientGetPower, %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        __int16 v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::queryPowerState(BOOL &)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
      uint64_t v8 = 1;
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      id v10 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "WifiService, queryPowerState, fWifiDevice is NULL", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        int v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::queryPowerState(BOOL &)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      uint64_t v8 = 0;
      *(unsigned char *)(a1 + 536) = 0;
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v9 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "WifiService, queryPowerState, fDpcSource is NULL", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      char v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::queryPowerState(BOOL &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    uint64_t v8 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return v8;
}

void sub_10057495C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10057498C(double *a1)
{
  uint64_t v2 = a1 + 103;
  int v7 = a1 + 103;
  (*(void (**)(void *))(*((void *)a1 + 103) + 16))((void *)a1 + 103);
  __int16 v8 = 256;
  int v3 = _os_activity_create((void *)&_mh_execute_header, "CL: onWiFiDeviceClientResumeScanCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v3, &state);

  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  uint64_t v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289282;
    int v10 = 0;
    __int16 v11 = 2082;
    __int16 v12 = "";
    __int16 v13 = 2082;
    int v14 = "activity";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWiFiDeviceClientResumeScanCallback\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  sub_1001BD958((uint64_t)a1);
  if (a1[49] >= 0.0) {
    a1[49] = -1.0;
  }
  *(_DWORD *)std::string buf = 2;
  (*(void (**)(double *, uint8_t *, void, uint64_t))(*(void *)a1 + 144))(a1, buf, 0, 0xFFFFFFFFLL);
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(void *))(*v2 + 24))(v2);
}

void sub_100574B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100574BA0(void *a1, uint64_t a2, const __CFDictionary *a3)
{
  BOOL v5 = a1 + 103;
  int v43 = a1 + 103;
  (*(void (**)(void *))(a1[103] + 16))(a1 + 103);
  __int16 v44 = 256;
  int v6 = _os_activity_create((void *)&_mh_execute_header, "CL: onWiFiDeviceClientLinkExtendedCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  int v7 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(void *)std::string buf = 68289282;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWiFiDeviceClientLinkExtendedCallback\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  sub_1001BD958((uint64_t)a1);
  __int16 v8 = (const void *)a1[40];
  if (v8)
  {
    CFRelease(v8);
    a1[40] = 0;
  }
  if (a3)
  {
    Value = CFDictionaryGetValue(a3, @"LINK_CHANGED_NETWORK");
    a1[40] = Value;
    if (Value) {
      CFRetain(Value);
    }
  }
  sub_100570248((uint64_t)a1);
  __int16 v35 = -256;
  LOBYTE(v36[0]) = 0;
  char v39 = 0;
  memset(v40, 0, sizeof(v40));
  uint64_t v41 = 0;
  if (sub_10006DB54((uint64_t)a1))
  {
    __p.__r_.__value_.__r.__words[0] = qword_10248AB78;
    if (byte_10248AB80[23] < 0)
    {
      sub_1000DC48C(&__p.__r_.__value_.__s.__data_[8], *(void **)byte_10248AB80, *(unint64_t *)&byte_10248AB80[8]);
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)byte_10248AB80;
      uint64_t v30 = *(void *)&byte_10248AB80[16];
    }
    long long v31 = xmmword_10248AB98;
    long long v32 = xmmword_10248ABA8;
    long long v33 = xmmword_10248ABB8;
    uint64_t v34 = qword_10248ABC8;
    if ((sub_1005755A8((uint64_t)a1, (uint64_t *)&__p) & 1) == 0)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      int v10 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "WifiService, linkextend1 failed", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        LOWORD(v45) = 0;
        __int16 v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::onWiFiDeviceClientLinkExtendedCallback(WiFiDeviceClientRef, CFDictionaryRef)", "%s\n", v26);
        if (v26 != buf) {
          free(v26);
        }
      }
    }
    sub_100588040((uint64_t)v36, (uint64_t)&__p);
    if (SHIBYTE(v30) < 0) {
      operator delete((void *)__p.__r_.__value_.__l.__size_);
    }
  }
  BYTE2(v41) = 0;
  if (a3)
  {
    sub_10013FA80((int)&__p, a3);
    sub_1000D29FC((uint64_t)&__p, @"LINKDOWN_IS_INVOL", (BOOL *)&v41 + 2);
    if (v39) {
      BOOL v11 = v38 <= 0;
    }
    else {
      BOOL v11 = 1;
    }
    BOOL v12 = !v11;
    BOOL v28 = v12;
    sub_1000D29FC((uint64_t)&__p, @"LINK_CHANGED_IS_LINKDOWN", &v28);
    if (v28)
    {
      sub_1000D9D94((uint64_t)v36, (uint64_t)&byte_10248AB18);
    }
    else if (!v39 || v38 <= 0)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      char v15 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "WifiService, linkextend2 failed", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        LOWORD(v45) = 0;
        __int16 v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::onWiFiDeviceClientLinkExtendedCallback(WiFiDeviceClientRef, CFDictionaryRef)", "%s\n", v27);
        if (v27 != buf) {
          free(v27);
        }
      }
    }
    sub_10013FBD4((uint64_t)&__p, "linkChangedEventDataDict");
    sub_10013F3C4(&__p);
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    __int16 v13 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "WifiMgr, onWiFiDeviceClientLinkExtendedCallback, linkChangedEventDataDict null", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::onWiFiDeviceClientLinkExtendedCallback(WiFiDeviceClientRef, CFDictionaryRef)", "%s\n", v14);
      if (v14 != buf) {
        free(v14);
      }
    }
  }
  memset(&__p, 0, sizeof(__p));
  if (v39 && v38 >= 1)
  {
    uint64_t v45 = v36[0];
    sub_10006DE8C((std::string *)buf);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = *(std::string *)buf;
    int v16 = v38;
  }
  else
  {
    int v16 = DWORD2(xmmword_10248AB98);
    std::string::assign(&__p, "N/A");
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  size_t v17 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    if (v39) {
      BOOL v18 = v38 <= 0;
    }
    else {
      BOOL v18 = 1;
    }
    int v19 = !v18;
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 67240707;
    *(_DWORD *)&uint8_t buf[4] = v19;
    *(_WORD *)&uint8_t buf[8] = 2081;
    *(void *)&buf[10] = p_p;
    *(_WORD *)&buf[18] = 1025;
    *(_DWORD *)&buf[20] = v16;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "@ClxLink, associate, %{public}d, %{private}s, %{private}d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    if (v39) {
      BOOL v22 = v38 <= 0;
    }
    else {
      BOOL v22 = 1;
    }
    int v23 = !v22;
    __int16 v24 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    LODWORD(v45) = 67240707;
    HIDWORD(v45) = v23;
    __int16 v46 = 2081;
    std::string::size_type v47 = v24;
    __int16 v48 = 1025;
    int v49 = v16;
    __int16 v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiDeviceClientLinkExtendedCallback(WiFiDeviceClientRef, CFDictionaryRef)", "%s\n", v25);
    if (v25 != buf) {
      free(v25);
    }
  }
  *(_DWORD *)std::string buf = 6;
  (*(void (**)(void *, unsigned char *, __int16 *, uint64_t, uint64_t, void))(*a1 + 152))(a1, buf, &v35, 1, 0xFFFFFFFFLL, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)std::string buf = &v40[8];
  sub_1000D7F78((void ***)buf);
  if (v39 && v37 < 0) {
    operator delete((void *)v36[1]);
  }
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(void *))(*v5 + 24))(v5);
}

void sub_10057550C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,os_activity_scope_state_s state,char a47)
{
}

uint64_t sub_1005755A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 824;
  uint64_t v32 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  __int16 v33 = 256;
  if (!*(void *)(a1 + 312) || !*(void *)(a1 + 304))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    BOOL v11 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v12 = *(void *)(a1 + 312) == 0;
      BOOL v13 = *(void *)(a1 + 304) == 0;
      *(_DWORD *)std::string buf = 67240448;
      *(_DWORD *)char v39 = v12;
      *(_WORD *)&v39[4] = 1026;
      *(_DWORD *)&v39[6] = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "WifiMgr, getAssoc, fail, device, %{public}d, manager, %{public}d", buf, 0xEu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_25;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    BOOL v14 = *(void *)(a1 + 312) == 0;
    BOOL v15 = *(void *)(a1 + 304) == 0;
    LODWORD(v34.__r_.__value_.__l.__data_) = 67240448;
    HIDWORD(v34.__r_.__value_.__r.__words[0]) = v14;
    LOWORD(v34.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v34.__r_.__value_.__r.__words[1] + 2) = v15;
    int v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::getAssociatedNetwork(CLWifiService_Type::AccessPoint &) const", "%s\n", v16);
    goto LABEL_39;
  }
  if (!*(unsigned char *)(a1 + 632) || *(int *)(a1 + 584) < 1)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    size_t v17 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "WifiMgr, getAssoc, fail, no association", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_25;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    LOWORD(v34.__r_.__value_.__l.__data_) = 0;
    int v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::getAssociatedNetwork(CLWifiService_Type::AccessPoint &) const", "%s\n", v16);
LABEL_39:
    if (v16 != (char *)buf) {
      free(v16);
    }
LABEL_25:
    uint64_t v18 = 0;
    goto LABEL_26;
  }
  *a2 = *(void *)(a1 + 544);
  BOOL v5 = a2 + 1;
  std::string::operator=((std::string *)(a2 + 1), (const std::string *)(a1 + 552));
  long long v6 = *(_OWORD *)(a1 + 576);
  long long v7 = *(_OWORD *)(a1 + 592);
  long long v8 = *(_OWORD *)(a1 + 608);
  a2[10] = *(void *)(a1 + 624);
  *((_OWORD *)a2 + 3) = v7;
  *((_OWORD *)a2 + 4) = v8;
  *((_OWORD *)a2 + 2) = v6;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  int v9 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    __dst[0] = (void *)*a2;
    int v10 = &v34;
    sub_10006DE8C(&v34);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v10 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    if (*((char *)a2 + 31) < 0)
    {
      sub_1000DC48C(&__p, (void *)a2[1], a2[2]);
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v5;
      __p.__r_.__value_.__r.__words[2] = a2[3];
    }
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    int v21 = *((_DWORD *)a2 + 10);
    int v22 = *((_DWORD *)a2 + 8);
    *(_DWORD *)std::string buf = 136381443;
    *(void *)char v39 = v10;
    *(_WORD *)&uint8_t v39[8] = 2081;
    long long v40 = p_p;
    __int16 v41 = 1026;
    int v42 = v21;
    __int16 v43 = 1026;
    int v44 = v22;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "WifiMgr, getAssoc, mac, %{private}s, ssid, %{private}s, channel, %{public}d, rssi, %{public}d", buf, 0x22u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    uint64_t v30 = *a2;
    int v23 = &__p;
    sub_10006DE8C(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (*((char *)a2 + 31) < 0)
    {
      sub_1000DC48C(__dst, (void *)a2[1], a2[2]);
    }
    else
    {
      *(_OWORD *)std::string __dst = *v5;
      uint64_t v29 = a2[3];
    }
    __int16 v24 = __dst;
    if (v29 < 0) {
      __int16 v24 = (void **)__dst[0];
    }
    int v25 = *((_DWORD *)a2 + 10);
    int v26 = *((_DWORD *)a2 + 8);
    LODWORD(v34.__r_.__value_.__l.__data_) = 136381443;
    *(std::string::size_type *)((char *)v34.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
    WORD2(v34.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&v34.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v24;
    HIWORD(v34.__r_.__value_.__r.__words[2]) = 1026;
    int v35 = v25;
    __int16 v36 = 1026;
    int v37 = v26;
    __int16 v27 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v29) < 0) {
      operator delete(__dst[0]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::getAssociatedNetwork(CLWifiService_Type::AccessPoint &) const", "%s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
  }
  uint64_t v18 = 1;
LABEL_26:
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return v18;
}

void sub_100575C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_1019DB560((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_100575C98(void *a1, uint64_t a2, uint64_t a3)
{
  long long v6 = a1 + 103;
  int v44 = a1 + 103;
  (*(void (**)(void *))(a1[103] + 16))(a1 + 103);
  __int16 v45 = 256;
  long long v7 = _os_activity_create((void *)&_mh_execute_header, "CL: onWiFiDeviceClientBssidChangeCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v7, &state);

  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  long long v8 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWiFiDeviceClientBssidChangeCallback\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  sub_1001BD958((uint64_t)a1);
  sub_100570248((uint64_t)a1);
  __int16 v35 = -256;
  v36[0] = 0;
  char v40 = 0;
  memset(v41, 0, sizeof(v41));
  int v9 = &qword_10248AB78;
  uint64_t v42 = 0;
  uint64_t v28 = qword_10248AB78;
  if (byte_10248AB80[23] < 0)
  {
    sub_1000DC48C(&v29, *(void **)byte_10248AB80, *(unint64_t *)&byte_10248AB80[8]);
  }
  else
  {
    long long v29 = *(_OWORD *)byte_10248AB80;
    uint64_t v30 = *(void *)&byte_10248AB80[16];
  }
  long long v31 = xmmword_10248AB98;
  long long v32 = xmmword_10248ABA8;
  long long v33 = xmmword_10248ABB8;
  uint64_t v34 = qword_10248ABC8;
  int v10 = sub_1005755A8((uint64_t)a1, &v28);
  uint64_t v11 = sub_10006DB54((uint64_t)a1);
  if (v10 != v11)
  {
    sub_101A6584C();
    abort_report_np();
    __break(1u);
LABEL_64:
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    goto LABEL_46;
  }
  int v9 = (uint64_t *)v36;
  if (v10) {
    uint64_t v11 = sub_100588040((uint64_t)v36, (uint64_t)&v28);
  }
  if (sub_100576660(v11, a3, (uint64_t)&v28, 0))
  {
    sub_100588040((uint64_t)v36, (uint64_t)&v28);
    if (v10)
    {
      CFStringRef Property = (const void *)WiFiNetworkGetProperty();
      if (Property) {
        BOOL v13 = CFEqual(Property, kCFBooleanTrue) != 0;
      }
      else {
        BOOL v13 = 1;
      }
      BOOL v39 = v13;
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v16 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100D54C68((uint64_t)v36);
      size_t v17 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)__int16 v46 = 136380675;
      *(void *)&void v46[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "WifiMgr, associated state changed to %{private}s", v46, 0xCu);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      sub_100D54C68((uint64_t)v36);
      if (SBYTE3(v48) >= 0) {
        int v25 = v46;
      }
      else {
        int v25 = *(unsigned char **)v46;
      }
      LODWORD(__p[0]) = 136380675;
      *(void **)((char *)__p + 4) = v25;
      BOOL v15 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE3(v48) < 0) {
        operator delete(*(void **)v46);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiDeviceClientBssidChangeCallback(WiFiDeviceClientRef, WiFiNetworkRef)", "%s\n", v15);
      if (v15 != buf) {
LABEL_81:
      }
        free(v15);
    }
  }
  else
  {
    sub_1000D9D94((uint64_t)v36, (uint64_t)&byte_10248AB18);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    BOOL v14 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "WifiMgr, onWiFiDeviceClientBssidChangeCallback, invalid roam network", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      *(_WORD *)__int16 v46 = 0;
      BOOL v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::onWiFiDeviceClientBssidChangeCallback(WiFiDeviceClientRef, WiFiNetworkRef)", "%s\n", v15);
      if (v15 != buf) {
        goto LABEL_81;
      }
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v54 = 0;
  sub_100134750(v26, "");
  if (v10)
  {
    *(void *)__int16 v46 = v28;
    sub_100B39278((std::string *)buf);
    if (SHIBYTE(v54) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)buf;
    uint64_t v54 = *(void *)&buf[16];
    LODWORD(a3) = DWORD2(v31);
    if (SHIBYTE(v30) < 0)
    {
      sub_1000DC48C(buf, (void *)v29, *((unint64_t *)&v29 + 1));
    }
    else
    {
      *(_OWORD *)std::string buf = v29;
      *(void *)&uint8_t buf[16] = v30;
    }
    if (SHIBYTE(v27) < 0) {
      operator delete(v26[0]);
    }
    *(_OWORD *)int v26 = *(_OWORD *)buf;
    uint64_t v27 = *(void *)&buf[16];
    int v3 = v31;
  }
  else
  {
    LODWORD(a3) = 0;
    int v3 = 0;
  }
  if (qword_1024193A0 != -1) {
    goto LABEL_64;
  }
LABEL_46:
  uint64_t v18 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = __p;
    if (v54 < 0) {
      int v19 = (void **)__p[0];
    }
    uint64_t v20 = v26;
    if (v27 < 0) {
      uint64_t v20 = (void **)v26[0];
    }
    *(_DWORD *)std::string buf = 67110147;
    *(_DWORD *)&uint8_t buf[4] = v10;
    *(_WORD *)&uint8_t buf[8] = 2081;
    *(void *)&buf[10] = v19;
    *(_WORD *)&buf[18] = 2081;
    *(void *)&buf[20] = v20;
    __int16 v56 = 1024;
    int v57 = a3;
    __int16 v58 = 1024;
    int v59 = v3;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "WifiMgr, roaming, associated, %d, ap, %{private}s, ssid, %{private}s, %d, %d", buf, 0x28u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v22 = __p;
    if (v54 < 0) {
      int v22 = (void **)__p[0];
    }
    int v23 = v26;
    if (v27 < 0) {
      int v23 = (void **)v26[0];
    }
    *(_DWORD *)__int16 v46 = 67110147;
    *(_DWORD *)&void v46[4] = v10;
    *(_WORD *)&v46[8] = 2081;
    *(void *)&v46[10] = v22;
    __int16 v47 = 2081;
    __int16 v48 = v23;
    __int16 v49 = 1024;
    int v50 = a3;
    __int16 v51 = 1024;
    int v52 = v3;
    __int16 v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiDeviceClientBssidChangeCallback(WiFiDeviceClientRef, WiFiNetworkRef)", "%s\n", v24);
    if (v24 != buf) {
      free(v24);
    }
  }
  *(_DWORD *)std::string buf = 7;
  (*(void (**)(void *, unsigned char *, __int16 *, void, uint64_t, void))(*a1 + 152))(a1, buf, &v35, 0, 0xFFFFFFFFLL, 0);
  sub_1000D9D94((uint64_t)(a1 + 68), (uint64_t)v9);
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete((void *)v29);
  }
  *(void *)std::string buf = &v41[8];
  sub_1000D7F78((void ***)buf);
  if (v40 && v38 < 0) {
    operator delete(v37);
  }
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(void *))(*v6 + 24))(v6);
}

void sub_1005765B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,os_activity_scope_state_s state,char a50)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_100570A18((uint64_t)&a31);
  os_activity_scope_leave(&state);
  sub_1019DB560((uint64_t)&a50);
  _Unwind_Resume(a1);
}

BOOL sub_100576660(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a3 = qword_10248AB78;
  uint64_t v112 = a3 + 8;
  std::string::operator=((std::string *)(a3 + 8), (const std::string *)byte_10248AB80);
  long long v7 = xmmword_10248ABA8;
  long long v6 = xmmword_10248ABB8;
  long long v8 = xmmword_10248AB98;
  *(void *)(a3 + 80) = qword_10248ABC8;
  *(_OWORD *)(a3 + 4_Block_object_dispose(&STACK[0x850], 8) = v7;
  *(_OWORD *)(a3 + 64) = v6;
  *(_OWORD *)(a3 + 32) = v8;
  memset(&v123, 0, sizeof(v123));
  CFStringRef Property = (const __CFString *)WiFiNetworkGetProperty();
  if (!Property || !sub_10013D274(Property, &v123)) {
    goto LABEL_6;
  }
  std::string::size_type size = HIBYTE(v123.__r_.__value_.__r.__words[2]);
  if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v123.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
LABEL_6:
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    uint64_t v11 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      BOOL v12 = &v123;
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        BOOL v12 = (std::string *)v123.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136380675;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "WifiMgr, error, bssid invalid, %{private}s, #CloneMe", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      std::string v84 = &v123;
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string v84 = (std::string *)v123.__r_.__value_.__r.__words[0];
      }
      int v124 = 136380675;
      __int16 v125 = v84;
      uint64_t v85 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWifiService::getAccessPoint(const WiFiNetworkRef, CLWifiService_Type::AccessPoint &, GetAccessPointQueryType) const", "%s\n", v85);
      if (v85 != buf) {
        free(v85);
      }
    }
  }
  int v13 = *(_DWORD *)(a3 + 32);
  int v14 = *(_DWORD *)(a3 + 36);
  int v121 = *(_DWORD *)(a3 + 40);
  int v122 = v14;
  memset(&v120, 0, sizeof(v120));
  int v119 = v13;
  double v118 = *(double *)(a3 + 48);
  char v114 = *(unsigned char *)(a3 + 65);
  int v117 = *(_DWORD *)(a3 + 68);
  BOOL v15 = (const void *)WiFiNetworkGetProperty();
  if (!v15 || (sub_10013E6B4(v15, &v122) & 1) == 0) {
    int v122 = -1;
  }
  int v16 = (const void *)WiFiNetworkGetProperty();
  if (!v16 || (sub_10013E6B4(v16, &v121) & 1) == 0) {
    int v121 = -1;
  }
  CFStringRef v17 = (const __CFString *)WiFiNetworkGetProperty();
  if (!v17 || !sub_10013D274(v17, &v120))
  {
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    {
      *v120.__r_.__value_.__l.__data_ = 0;
      v120.__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      v120.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&v120.__r_.__value_.__s + 23) = 0;
    }
  }
  uint64_t v18 = (const void *)WiFiNetworkGetProperty();
  if (!v18 || (sub_10013E6B4(v18, &v119) & 1) == 0) {
    int v119 = -1;
  }
  int v19 = (const void *)WiFiNetworkGetProperty();
  double v20 = -1.0;
  if (v19 && sub_1000A6DD8(v19, &v118)) {
    double v20 = v118 / 1000.0;
  }
  double v118 = v20;
  int IsApplePersonalHotspot = WiFiNetworkIsApplePersonalHotspot();
  if (v122 != -1 || v121 != -1)
  {
    std::string::size_type v24 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
    if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v24 = v123.__r_.__value_.__l.__size_;
    }
    if (!v24) {
      goto LABEL_45;
    }
    if (v121 >= 1)
    {
LABEL_49:
      int v25 = 0;
      BOOL v26 = v121 < 0xA6;
      goto LABEL_51;
    }
LABEL_44:
    int v25 = 0;
    BOOL v26 = 0;
    goto LABEL_51;
  }
  if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v22 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v22 = v120.__r_.__value_.__l.__size_;
  }
  std::string::size_type v23 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
  if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v23 = v123.__r_.__value_.__l.__size_;
  }
  if (!v22)
  {
    BOOL v26 = v23 != 0;
    int v25 = 1;
    goto LABEL_51;
  }
  if (v23) {
    goto LABEL_44;
  }
LABEL_45:
  int v25 = 0;
  std::string::size_type v27 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
  BOOL v26 = 0;
  if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v27 = v120.__r_.__value_.__l.__size_;
  }
  if (v27 && v121 >= 1) {
    goto LABEL_49;
  }
LABEL_51:
  uint64_t v28 = (const void *)WiFiNetworkGetProperty();
  if (!v28 || (sub_1004D18D4(v28, &v117) & 1) == 0) {
    int v117 = 0;
  }
  BOOL v113 = v26;
  if (v26)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    long long v29 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v30 = &v123;
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v30 = (std::string *)v123.__r_.__value_.__r.__words[0];
      }
      long long v31 = &v120;
      if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        long long v31 = (std::string *)v120.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136316930;
      *(void *)&uint8_t buf[4] = v30;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&unsigned char buf[14] = v31;
      *(_WORD *)&buf[22] = 1024;
      int v145 = v121;
      __int16 v146 = 1024;
      int v147 = v122;
      __int16 v148 = 1024;
      int v149 = v119;
      __int16 v150 = 2048;
      double v151 = v118;
      __int16 v152 = 1024;
      int v153 = v25;
      __int16 v154 = 1024;
      LODWORD(v155) = v117;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "WifiService, getAccessPoint, mac, %s, ssid, %s, channel, %d, mode, 0x%x, rssi, %d, age, %.1lf, isEPNONetwork, %d， rssiFlags, %u", buf, 0x3Eu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_115;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    long long v32 = &v123;
    if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v32 = (std::string *)v123.__r_.__value_.__r.__words[0];
    }
    long long v33 = &v120;
    if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v33 = (std::string *)v120.__r_.__value_.__r.__words[0];
    }
    int v124 = 136316930;
    __int16 v125 = v32;
    __int16 v126 = 2080;
    int v127 = v33;
    __int16 v128 = 1024;
    int v129 = v121;
    __int16 v130 = 1024;
    int v131 = v122;
    __int16 v132 = 1024;
    int v133 = v119;
    __int16 v134 = 2048;
    double v135 = v118;
    __int16 v136 = 1024;
    int v137 = v25;
    __int16 v138 = 1024;
    LODWORD(v139) = v117;
    uint64_t v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::getAccessPoint(const WiFiNetworkRef, CLWifiService_Type::AccessPoint &, GetAccessPointQueryType) const", "%s\n", v34);
    if (v34 == buf) {
      goto LABEL_115;
    }
LABEL_182:
    free(v34);
    goto LABEL_115;
  }
  if (*(_DWORD *)(a3 + 40))
  {
    if (*(char *)(a3 + 31) < 0)
    {
      sub_1000DC48C(buf, *(void **)(a3 + 8), *(void *)(a3 + 16));
    }
    else
    {
      *(_OWORD *)std::string buf = *(_OWORD *)v112;
      *(void *)&uint8_t buf[16] = *(void *)(v112 + 16);
    }
    if (buf[23] >= 0) {
      uint64_t v35 = buf[23];
    }
    else {
      uint64_t v35 = *(void *)&buf[8];
    }
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if (v35) {
        goto LABEL_81;
      }
    }
    else if (v35)
    {
LABEL_81:
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      __int16 v36 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        int v104 = v25;
        int v108 = IsApplePersonalHotspot;
        if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v37 = &v123;
        }
        else {
          int v37 = (std::string *)v123.__r_.__value_.__r.__words[0];
        }
        if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v38 = &v120;
        }
        else {
          char v38 = (std::string *)v120.__r_.__value_.__r.__words[0];
        }
        int v40 = v121;
        int v39 = v122;
        int v98 = v119;
        double v100 = v118;
        uint64_t v41 = WiFiNetworkGetProperty();
        uint64_t v42 = WiFiNetworkGetProperty();
        uint64_t v43 = WiFiNetworkGetProperty();
        *(_DWORD *)std::string buf = 136382979;
        *(void *)&uint8_t buf[4] = v37;
        *(_WORD *)&unsigned char buf[12] = 2081;
        *(void *)&unsigned char buf[14] = v38;
        *(_WORD *)&buf[22] = 1026;
        int v145 = v40;
        __int16 v146 = 1026;
        int v147 = v39;
        __int16 v148 = 1026;
        int v149 = v98;
        __int16 v150 = 2050;
        double v151 = v100;
        __int16 v152 = 1026;
        int v25 = v104;
        int v153 = v104;
        __int16 v154 = 2050;
        uint64_t v155 = v41;
        __int16 v156 = 2050;
        uint64_t v157 = v42;
        __int16 v158 = 2049;
        uint64_t v159 = v43;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "WifiService, getAccessPoint, invalid-network, mac, %{private}s, ssid, %{private}s, channel, %{public}d, mode, 0x%{public}x, rssi, %{public}d, age, %{public}.1lf, isEPNONetwork, %{public}d, m, %{public}p, c, %{public}p, s, %{private}p", buf, 0x56u);
        int IsApplePersonalHotspot = v108;
      }
      if (sub_10013D1A0(115, 0))
      {
        int v105 = v25;
        int v109 = IsApplePersonalHotspot;
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v44 = &v123;
        }
        else {
          int v44 = (std::string *)v123.__r_.__value_.__r.__words[0];
        }
        if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          __int16 v45 = &v120;
        }
        else {
          __int16 v45 = (std::string *)v120.__r_.__value_.__r.__words[0];
        }
        int v46 = v121;
        int v47 = v122;
        int v48 = v119;
        double v99 = v118;
        uint64_t v49 = WiFiNetworkGetProperty();
        uint64_t v50 = WiFiNetworkGetProperty();
        uint64_t v51 = WiFiNetworkGetProperty();
        int v124 = 136382979;
        __int16 v125 = v44;
        __int16 v126 = 2081;
        int v127 = v45;
        __int16 v128 = 1026;
        int v129 = v46;
        __int16 v130 = 1026;
        int v131 = v47;
        __int16 v132 = 1026;
        int v133 = v48;
        __int16 v134 = 2050;
        double v135 = v99;
        __int16 v136 = 1026;
        int v137 = v105;
        __int16 v138 = 2050;
        uint64_t v139 = v49;
        __int16 v140 = 2050;
        uint64_t v141 = v50;
        __int16 v142 = 2049;
        uint64_t v143 = v51;
        int v52 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWifiService::getAccessPoint(const WiFiNetworkRef, CLWifiService_Type::AccessPoint &, GetAccessPointQueryType) const", "%s\n", v52);
        if (v52 != buf) {
          free(v52);
        }
        int IsApplePersonalHotspot = v109;
      }
      goto LABEL_115;
    }
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  uint64_t v53 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    int v106 = v25;
    int v110 = IsApplePersonalHotspot;
    int v102 = a4;
    if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v54 = &v123;
    }
    else {
      uint64_t v54 = (std::string *)v123.__r_.__value_.__r.__words[0];
    }
    if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v55 = &v120;
    }
    else {
      std::string v55 = (std::string *)v120.__r_.__value_.__r.__words[0];
    }
    int v56 = *(_DWORD *)(a3 + 36);
    int v57 = *(_DWORD *)(a3 + 40);
    int v58 = *(_DWORD *)(a3 + 32);
    double v101 = *(double *)(a3 + 48);
    uint64_t v59 = WiFiNetworkGetProperty();
    uint64_t v60 = WiFiNetworkGetProperty();
    uint64_t v61 = WiFiNetworkGetProperty();
    *(_DWORD *)std::string buf = 136317442;
    *(void *)&uint8_t buf[4] = v54;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&unsigned char buf[14] = v55;
    *(_WORD *)&buf[22] = 1024;
    int v145 = v57;
    __int16 v146 = 1024;
    int v147 = v56;
    __int16 v148 = 1024;
    int v149 = v58;
    __int16 v150 = 2048;
    double v151 = v101;
    __int16 v152 = 1024;
    int v25 = v106;
    int v153 = v106;
    __int16 v154 = 2048;
    uint64_t v155 = v59;
    __int16 v156 = 2048;
    uint64_t v157 = v60;
    __int16 v158 = 2048;
    uint64_t v159 = v61;
    _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "WifiService, getAccessPoint, invalid-network, mac, %s, ssid, %s, channel, %d, mode, 0x%x, rssi, %d, age, %.1lf, isEPNONetwork, %d, m, %p, c, %p, s, %p", buf, 0x56u);
    a4 = v102;
    int IsApplePersonalHotspot = v110;
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    int v103 = a4;
    int v107 = v25;
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v111 = IsApplePersonalHotspot;
    unint64_t v89 = (v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v123
        : (std::string *)v123.__r_.__value_.__r.__words[0];
    unint64_t v90 = (v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v120
        : (std::string *)v120.__r_.__value_.__r.__words[0];
    int v91 = *(_DWORD *)(a3 + 36);
    int v92 = *(_DWORD *)(a3 + 40);
    int v93 = *(_DWORD *)(a3 + 32);
    double v94 = *(double *)(a3 + 48);
    uint64_t v95 = WiFiNetworkGetProperty();
    uint64_t v96 = WiFiNetworkGetProperty();
    uint64_t v97 = WiFiNetworkGetProperty();
    int v124 = 136317442;
    __int16 v125 = v89;
    __int16 v126 = 2080;
    int v127 = v90;
    __int16 v128 = 1024;
    int v129 = v92;
    __int16 v130 = 1024;
    int v131 = v91;
    __int16 v132 = 1024;
    int v133 = v93;
    __int16 v134 = 2048;
    double v135 = v94;
    __int16 v136 = 1024;
    int v137 = v107;
    __int16 v138 = 2048;
    uint64_t v139 = v95;
    __int16 v140 = 2048;
    uint64_t v141 = v96;
    __int16 v142 = 2048;
    uint64_t v143 = v97;
    uint64_t v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::getAccessPoint(const WiFiNetworkRef, CLWifiService_Type::AccessPoint &, GetAccessPointQueryType) const", "%s\n", v34);
    a4 = v103;
    int IsApplePersonalHotspot = v111;
    if (v34 != buf) {
      goto LABEL_182;
    }
  }
LABEL_115:
  uint64_t v116 = qword_10248AB78;
  if (a4)
  {
    if (a4 == 1)
    {
      std::string::size_type v62 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v62 = v123.__r_.__value_.__l.__size_;
      }
      if (v62 || (*(void *)std::string buf = qword_10248AB78, sub_100B3918C(&v116, buf)))
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        std::string v63 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
        {
          int v64 = &v123;
          if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v64 = (std::string *)v123.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 136380931;
          *(void *)&uint8_t buf[4] = v64;
          *(_WORD *)&unsigned char buf[12] = 1025;
          *(_DWORD *)&unsigned char buf[14] = 75312138;
          _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_ERROR, "WifiService, getAccessPoint, HostedNetwork, %{private}s, r%{private}d", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BBB18);
          }
          std::string v65 = &v123;
          if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string v65 = (std::string *)v123.__r_.__value_.__r.__words[0];
          }
          int v124 = 136380931;
          __int16 v125 = v65;
          __int16 v126 = 1025;
          LODWORD(v127) = 75312138;
          __int16 v66 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWifiService::getAccessPoint(const WiFiNetworkRef, CLWifiService_Type::AccessPoint &, GetAccessPointQueryType) const", "%s\n", v66);
          if (v66 != buf) {
            free(v66);
          }
        }
      }
    }
  }
  else
  {
    uint64_t v116 = sub_100B38F04((uint64_t)&v123);
  }
  uint64_t v67 = v116;
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    sub_1000DC48C(&__p, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v120;
  }
  int v68 = v119;
  BOOL v69 = IsApplePersonalHotspot != 0;
  int v71 = v121;
  int v70 = v122;
  double v72 = v118;
  uint64_t v73 = *(void *)(a3 + 56);
  int v74 = v117;
  *(void *)std::string buf = __p.__r_.__value_.__l.__size_;
  std::string::size_type v75 = __p.__r_.__value_.__r.__words[0];
  *(void *)&buf[7] = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
  char v76 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  memset(&__p, 0, sizeof(__p));
  *(void *)a3 = v67;
  if (*(char *)(a3 + 31) < 0)
  {
    operator delete(*(void **)v112);
    char v77 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else
  {
    char v77 = 0;
  }
  uint64_t v78 = *(void *)buf;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x850], 8) = v75;
  *(void *)(a3 + 16) = v78;
  *(void *)(a3 + 23) = *(void *)&buf[7];
  *(unsigned char *)(a3 + 31) = v76;
  *(_DWORD *)(a3 + 32) = v68;
  *(_DWORD *)(a3 + 36) = v70;
  *(_DWORD *)(a3 + 40) = v71;
  *(double *)(a3 + 4_Block_object_dispose(&STACK[0x850], 8) = v72;
  *(void *)(a3 + 56) = v73;
  *(unsigned char *)(a3 + 64) = v69;
  BOOL v79 = v113;
  *(unsigned char *)(a3 + 65) = v114;
  *(_DWORD *)(a3 + 6_Block_object_dispose(&STACK[0x850], 8) = v74;
  *(unsigned char *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = 0;
  if (v77 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (sub_100B391DC())
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    char v80 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      int v81 = &v123;
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v81 = (std::string *)v123.__r_.__value_.__r.__words[0];
      }
      std::string v82 = &v120;
      if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string v82 = (std::string *)v120.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136380931;
      *(void *)&uint8_t buf[4] = v81;
      *(_WORD *)&unsigned char buf[12] = 2081;
      *(void *)&unsigned char buf[14] = v82;
      _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "WifiService, getAccessPoint, invalid mac, %{private}s, %{private}s, #CloneMe", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      uint64_t v86 = &v123;
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v86 = (std::string *)v123.__r_.__value_.__r.__words[0];
      }
      uint64_t v87 = &v120;
      if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v87 = (std::string *)v120.__r_.__value_.__r.__words[0];
      }
      int v124 = 136380931;
      __int16 v125 = v86;
      __int16 v126 = 2081;
      int v127 = v87;
      uint64_t v88 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWifiService::getAccessPoint(const WiFiNetworkRef, CLWifiService_Type::AccessPoint &, GetAccessPointQueryType) const", "%s\n", v88);
      if (v88 != buf) {
        free(v88);
      }
    }
    BOOL v79 = 0;
  }
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v120.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v123.__r_.__value_.__l.__data_);
  }
  return v79;
}

void sub_10057785C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005778D0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1 + 824;
  uint64_t v16 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  __int16 v17 = 256;
  long long v6 = _os_activity_create((void *)&_mh_execute_header, "CL: onWiFiDeviceClientBgScanSuspendResumeCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  long long v7 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289282;
    int v23 = 0;
    __int16 v24 = 2082;
    int v25 = "";
    __int16 v26 = 2082;
    std::string::size_type v27 = "activity";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWiFiDeviceClientBgScanSuspendResumeCallback\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
  }
  long long v8 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *(const char **)(a1 + 400);
    *(_DWORD *)std::string buf = 67240448;
    int v23 = a3;
    __int16 v24 = 2050;
    int v25 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "WifiMgr, resume, %{public}d, timestamp, %{public}.1f", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    uint64_t v13 = *(void *)(a1 + 400);
    int v18 = 67240448;
    int v19 = a3;
    __int16 v20 = 2050;
    uint64_t v21 = v13;
    int v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiDeviceClientBgScanSuspendResumeCallback(WiFiDeviceClientRef, Boolean)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  double v10 = *(double *)(a1 + 400);
  if (a3)
  {
    if (v10 < 0.0)
    {
      double Current = CFAbsoluteTimeGetCurrent();
LABEL_13:
      *(double *)(a1 + 400) = Current;
    }
  }
  else
  {
    double Current = -1.0;
    if (v10 >= 0.0) {
      goto LABEL_13;
    }
  }
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
}

void sub_100577BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13)
{
}

void sub_100577C28(uint64_t a1, uint64_t a2, int a3)
{
  __int16 v7 = -256;
  char v8 = 0;
  char v11 = 0;
  memset(v12, 0, sizeof(v12));
  uint64_t v13 = 0;
  sub_1001BD958(a1);
  BYTE3(v13) = a3;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  uint64_t v5 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "WifiMgr, network critical, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v14 = 67109120;
    int v15 = a3;
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiDeviceClient24GHzNetworkInCriticalStateCallback(WiFiDeviceClientRef, BOOL)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  *(_DWORD *)std::string buf = 13;
  (*(void (**)(uint64_t, uint8_t *, __int16 *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, buf, &v7, 1, 0xFFFFFFFFLL, 0);
  *(void *)std::string buf = (char *)v12 + 8;
  sub_1000D7F78((void ***)buf);
  if (v11)
  {
    if (v10 < 0) {
      operator delete(__p);
    }
  }
}

void sub_100577E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100570A18((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100577E8C(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v42 = sub_100D54EB0(a3);
  if (sub_1000FC450())
  {
    sub_1000E9354(buf);
    LODWORD(v48.__r_.__value_.__l.__data_) = -1171354717 * ((unint64_t)(a2[1] - *a2) >> 3);
    sub_1000EA838((uint64_t)buf, "scanResult", &v48);
    sub_1000FC45C((uint64_t)buf, (uint64_t)"locationd");
    sub_10013F3C4(buf);
  }
  __int16 v7 = a2;
  uint64_t v6 = *a2;
  uint64_t v5 = v7[1];
  int v43 = -1171354717 * ((unint64_t)(v5 - v6) >> 3);
  if (v5 == v6)
  {
    unsigned int v10 = 0;
    unsigned int v9 = 0;
    unsigned int v8 = 0;
  }
  else
  {
    unsigned int v8 = 0;
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    unsigned int v11 = 1;
    do
    {
      if (*(unsigned char *)(a1 + 632) && *(int *)(a1 + 584) >= 1)
      {
        *(void *)std::string buf = *(void *)(a1 + 544);
        v48.__r_.__value_.__r.__words[0] = *(void *)v6;
        BOOL v12 = sub_100B39178(buf, &v48);
      }
      else
      {
        BOOL v12 = 0;
      }
      if (v11 <= sub_100F85DC4())
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        uint64_t v13 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          __dst[0] = *(void **)v6;
          sub_100B39278(&v48);
          if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v14 = &v48;
          }
          else {
            int v14 = (std::string *)v48.__r_.__value_.__r.__words[0];
          }
          if (*(char *)(v6 + 31) < 0)
          {
            sub_1000DC48C(&__p, *(void **)(v6 + 8), *(void *)(v6 + 16));
          }
          else
          {
            long long v15 = *(_OWORD *)(v6 + 8);
            __p.__r_.__value_.__r.__words[2] = *(void *)(v6 + 24);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
          }
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          int v17 = *(_DWORD *)(v6 + 32);
          int v18 = *(_DWORD *)(v6 + 36);
          int v19 = *(_DWORD *)(v6 + 40);
          uint64_t v20 = *(void *)(v6 + 48);
          uint64_t v21 = *(void *)(v6 + 56);
          *(_DWORD *)std::string buf = 136448771;
          *(void *)&uint8_t buf[4] = v42;
          __int16 v62 = 2081;
          *(void *)std::string v63 = v14;
          *(_WORD *)&v63[8] = 1026;
          *(_DWORD *)int v64 = v11;
          *(_WORD *)&v64[4] = 1026;
          *(_DWORD *)std::string v65 = v43;
          *(_WORD *)&v65[4] = 2081;
          __int16 v66 = p_p;
          *(_WORD *)uint64_t v67 = 1026;
          *(_DWORD *)&v67[2] = v17;
          *(_WORD *)int v68 = 1026;
          *(_DWORD *)&v68[2] = v18;
          *(_WORD *)BOOL v69 = 1026;
          *(_DWORD *)&v69[2] = v19;
          __int16 v70 = 2050;
          uint64_t v71 = v20;
          __int16 v72 = 2050;
          uint64_t v73 = v21;
          __int16 v74 = 1026;
          BOOL v75 = v12;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "WifiScan, result, %{public}s, mac, %{private}s, %{public}d / %{public}d, ssid, %{private}s, rssi, %{public}d, mode, %{public}d, channel, %{public}d, age, %{public}0.1lf, timestamp, %{public}.1lf, associated, %{public}d", buf, 0x58u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v48.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BBB18);
          }
          std::string::size_type v46 = *(void *)v6;
          sub_100B39278(&__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            __int16 v24 = &__p;
          }
          else {
            __int16 v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (*(char *)(v6 + 31) < 0)
          {
            sub_1000DC48C(__dst, *(void **)(v6 + 8), *(void *)(v6 + 16));
          }
          else
          {
            long long v25 = *(_OWORD *)(v6 + 8);
            uint64_t v45 = *(void *)(v6 + 24);
            *(_OWORD *)std::string __dst = v25;
          }
          __int16 v26 = __dst;
          if (v45 < 0) {
            __int16 v26 = (void **)__dst[0];
          }
          int v27 = *(_DWORD *)(v6 + 32);
          int v28 = *(_DWORD *)(v6 + 36);
          int v29 = *(_DWORD *)(v6 + 40);
          uint64_t v30 = *(void *)(v6 + 48);
          uint64_t v31 = *(void *)(v6 + 56);
          LODWORD(v48.__r_.__value_.__l.__data_) = 136448771;
          *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 4) = (std::string::size_type)v42;
          WORD2(v48.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&v48.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v24;
          HIWORD(v48.__r_.__value_.__r.__words[2]) = 1026;
          *(_DWORD *)uint64_t v49 = v11;
          *(_WORD *)&void v49[4] = 1026;
          *(_DWORD *)uint64_t v50 = v43;
          *(_WORD *)&void v50[4] = 2081;
          uint64_t v51 = v26;
          *(_WORD *)int v52 = 1026;
          *(_DWORD *)&_OWORD v52[2] = v27;
          *(_WORD *)uint64_t v53 = 1026;
          *(_DWORD *)&v53[2] = v28;
          *(_WORD *)uint64_t v54 = 1026;
          *(_DWORD *)&v54[2] = v29;
          __int16 v55 = 2050;
          uint64_t v56 = v30;
          __int16 v57 = 2050;
          uint64_t v58 = v31;
          __int16 v59 = 1026;
          BOOL v60 = v12;
          long long v32 = (char *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v45) < 0) {
            operator delete(__dst[0]);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::logWifiScanResult(const std::vector<CLWifiService_Type::AccessPoint> &, CLWifiService_Type::ScanType)", "%s\n", v32);
          if (v32 != buf) {
            free(v32);
          }
        }
      }
      unint64_t v22 = sub_1000D8908(v6);
      int v23 = sub_100D550A4(*(_DWORD *)(v6 + 40));
      v10 += (v22 >> 41) & 1;
      v9 += v23 ^ 1;
      v8 += v23;
      v6 += 88;
      ++v11;
    }
    while (v6 != v5);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  long long v33 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v42;
    __int16 v62 = 1026;
    *(_DWORD *)std::string v63 = v43;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "WifiScan, results, %{public}s, %{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    LODWORD(v48.__r_.__value_.__l.__data_) = 136446466;
    *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 4) = (std::string::size_type)v42;
    WORD2(v48.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v48.__r_.__value_.__r.__words[1] + 6) = v43;
    int v39 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::logWifiScanResult(const std::vector<CLWifiService_Type::AccessPoint> &, CLWifiService_Type::ScanType)", "%s\n", v39);
    if (v39 != buf) {
      free(v39);
    }
  }
  if (a3 != 5 || v43 >= 1)
  {
    int v34 = v43;
    if (v43)
    {
      if (v43 == 1)
      {
        int v34 = 1;
      }
      else if (v43 >= 5)
      {
        if (v43 >= 9)
        {
          if (v43 >= 0x11)
          {
            if (v43 >= 0x21)
            {
              if (v43 < 0x41) {
                int v34 = 64;
              }
              else {
                int v34 = 65;
              }
            }
            else
            {
              int v34 = 32;
            }
          }
          else
          {
            int v34 = 16;
          }
        }
        else
        {
          int v34 = 8;
        }
      }
      else
      {
        int v34 = 4;
      }
    }
    int v35 = v8;
    if (v8)
    {
      if (v8 == 1)
      {
        int v35 = 1;
      }
      else if (v8 >= 5)
      {
        if (v8 >= 9)
        {
          if (v8 >= 0x11)
          {
            if (v8 >= 0x21)
            {
              if (v8 < 0x41) {
                int v35 = 64;
              }
              else {
                int v35 = 65;
              }
            }
            else
            {
              int v35 = 32;
            }
          }
          else
          {
            int v35 = 16;
          }
        }
        else
        {
          int v35 = 8;
        }
      }
      else
      {
        int v35 = 4;
      }
    }
    int v36 = v9;
    if (v9)
    {
      if (v9 == 1)
      {
        int v36 = 1;
      }
      else if (v9 >= 5)
      {
        if (v9 >= 9)
        {
          if (v9 >= 0x11)
          {
            if (v9 >= 0x21)
            {
              if (v9 < 0x41) {
                int v36 = 64;
              }
              else {
                int v36 = 65;
              }
            }
            else
            {
              int v36 = 32;
            }
          }
          else
          {
            int v36 = 16;
          }
        }
        else
        {
          int v36 = 8;
        }
      }
      else
      {
        int v36 = 4;
      }
    }
    int v37 = v10;
    if (v10)
    {
      if (v10 == 1)
      {
        int v37 = 1;
      }
      else if (v10 >= 5)
      {
        if (v10 >= 9)
        {
          if (v10 >= 0x11)
          {
            if (v10 >= 0x21)
            {
              if (v10 < 0x41) {
                int v37 = 64;
              }
              else {
                int v37 = 65;
              }
            }
            else
            {
              int v37 = 32;
            }
          }
          else
          {
            int v37 = 16;
          }
        }
        else
        {
          int v37 = 8;
        }
      }
      else
      {
        int v37 = 4;
      }
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    char v38 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136448258;
      *(void *)&uint8_t buf[4] = v42;
      __int16 v62 = 1026;
      *(_DWORD *)std::string v63 = v43;
      *(_WORD *)&v63[4] = 1026;
      *(_DWORD *)&v63[6] = v34;
      *(_WORD *)int v64 = 1026;
      *(_DWORD *)&v64[2] = v8;
      *(_WORD *)std::string v65 = 1026;
      *(_DWORD *)&v65[2] = v35;
      LOWORD(v66) = 1026;
      *(_DWORD *)((char *)&v66 + 2) = v9;
      HIWORD(v66) = 1026;
      *(_DWORD *)uint64_t v67 = v36;
      *(_WORD *)&v67[4] = 1026;
      *(_DWORD *)int v68 = v10;
      *(_WORD *)&v68[4] = 1026;
      *(_DWORD *)BOOL v69 = v37;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "WsMetric, scanreply, %{public}s, %{public}d, %{public}d, 2ghz, %{public}d, %{public}d, 5ghz, %{public}d, %{public}d, la, %{public}d, %{public}d", buf, 0x3Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      LODWORD(v48.__r_.__value_.__l.__data_) = 136448258;
      *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 4) = (std::string::size_type)v42;
      WORD2(v48.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&v48.__r_.__value_.__r.__words[1] + 6) = v43;
      WORD1(v48.__r_.__value_.__r.__words[2]) = 1026;
      HIDWORD(v48.__r_.__value_.__r.__words[2]) = v34;
      *(_WORD *)uint64_t v49 = 1026;
      *(_DWORD *)&v49[2] = v8;
      *(_WORD *)uint64_t v50 = 1026;
      *(_DWORD *)&v50[2] = v35;
      LOWORD(v51) = 1026;
      *(_DWORD *)((char *)&v51 + 2) = v9;
      HIWORD(v51) = 1026;
      *(_DWORD *)int v52 = v36;
      *(_WORD *)&v52[4] = 1026;
      *(_DWORD *)uint64_t v53 = v10;
      *(_WORD *)&v53[4] = 1026;
      *(_DWORD *)uint64_t v54 = v37;
      int v40 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::logWifiScanResult(const std::vector<CLWifiService_Type::AccessPoint> &, CLWifiService_Type::ScanType)", "%s\n", v40);
      if (v40 != buf) {
        free(v40);
      }
    }
    AnalyticsSendEventLazy();
  }
}

void sub_100578904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_100578950(uint64_t a1)
{
  v4[0] = @"type";
  v5[0] = +[NSString stringWithUTF8String:*(void *)(a1 + 32)];
  v4[1] = @"aps";
  v5[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 40)];
  void v4[2] = @"binAps";
  void v5[2] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 44)];
  void v4[3] = @"aps2GHz";
  void v5[3] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  v4[4] = @"bin2GHz";
  v5[4] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 52)];
  void v4[5] = @"aps5GHz";
  void v5[5] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 40)];
  void v4[6] = @"bin5GHz";
  v5[6] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
  void v4[7] = @"apsLocalAdmin";
  v5[7] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 60)];
  v4[8] = @"binLocalAdmin";
  uint64_t v2 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 64)];
  v4[9] = @"daily";
  v5[8] = v2;
  v5[9] = &off_102392708;
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:10];
}

void sub_100578AD4(uint64_t a1, uint64_t a2, const __CFDictionary *a3, const __CFArray *a4, int a5)
{
  unsigned int v9 = _os_activity_create((void *)&_mh_execute_header, "CL: onWiFiDeviceClientScanCacheCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v9, &state);

  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  unsigned int v10 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWiFiDeviceClientScanCacheCallback\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (!a4 || a5)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    uint64_t v13 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = a5;
      *(_WORD *)&uint8_t buf[8] = 2050;
      *(void *)&buf[10] = a4;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "WifiMgr, error, cache callback, %{public}d, %{public}p", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      *(_DWORD *)long long v25 = 67240448;
      *(_DWORD *)&v25[4] = a5;
      *(_WORD *)&v25[8] = 2050;
      *(void *)&v25[10] = a4;
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::onWiFiDeviceClientScanCacheCallback(WiFiDeviceClientRef, CFDictionaryRef, CFArrayRef, WiFiError)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
  else
  {
    sub_1001BD958(a1);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    unsigned int v11 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      CFIndex Count = CFArrayGetCount(a4);
      *(_DWORD *)std::string buf = 134349056;
      *(void *)&uint8_t buf[4] = Count;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "WifiMgr, onWiFiDeviceClientScanCacheCallback, %{public}lu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      CFIndex v15 = CFArrayGetCount(a4);
      *(_DWORD *)long long v25 = 134349056;
      *(void *)&v25[4] = v15;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiDeviceClientScanCacheCallback(WiFiDeviceClientRef, CFDictionaryRef, CFArrayRef, WiFiError)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    uint64_t v21 = a1 + 824;
    (*(void (**)(void))(*(void *)(a1 + 824) + 16))();
    __int16 v23 = 256;
    sub_10013FA80((int)v20, a3);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247B3D0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_10247B3D0))
    {
      sub_1000C7F88(buf);
      v25[0] = 0;
      char v17 = sub_1000D2988(*(uint64_t *)buf, "printScanResultsCSV", v25);
      if (v25[0]) {
        char v18 = v17;
      }
      else {
        char v18 = 0;
      }
      if (*(void *)&buf[8]) {
        sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
      }
      byte_10247B3C8 = v18;
      __cxa_guard_release(&qword_10247B3D0);
    }
    if (byte_10247B3C8) {
      sub_10013FBD4((uint64_t)v20, "scanResults");
    }
    buf[0] = 5;
    sub_100579238(a1 + 756, (char *)buf);
    ++*(_DWORD *)(a1 + 756);
    *(unsigned char *)(a1 + 416) = 5;
    *(CFAbsoluteTime *)(a1 + 424) = CFAbsoluteTimeGetCurrent();
    sub_1000D7FCC((uint64_t *)(a1 + 432));
    sub_100579770(a1, a4, (double *)(a1 + 384), (uint64_t *)(a1 + 432), (uint64_t)"cache");
    sub_100577E8C(a1, (uint64_t *)(a1 + 432), *(char *)(a1 + 416));
    if (*(void *)(a1 + 440) != *(void *)(a1 + 432))
    {
      buf[0] = 0;
      uint8_t buf[8] = 0;
      char v29 = 0;
      memset(v30, 0, sizeof(v30));
      uint64_t v31 = 0;
      buf[1] = *(unsigned char *)(a1 + 416);
      (*(void (**)(uint64_t, unsigned char *, unsigned char *))(*(void *)a1 + 224))(a1, &v30[8], v30);
      sub_100566054(a1, (uint64_t)v25);
      if (v27) {
        sub_100588040((uint64_t)&buf[8], (uint64_t)v25);
      }
      int v19 = 3;
      (*(void (**)(uint64_t, int *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v19, buf, 1, 0xFFFFFFFFLL, 0);
      [*(id *)(a1 + 656) processEventTime:CFAbsoluteTimeGetCurrent()];
      if (v27 && v26 < 0) {
        operator delete(*(void **)&v25[8]);
      }
      *(void *)long long v25 = &v30[8];
      sub_1000D7F78((void ***)v25);
      if (v29 && (char)buf[39] < 0) {
        operator delete(*(void **)&buf[16]);
      }
    }
    sub_10013F3C4(v20);
    if (HIBYTE(v23))
    {
      if ((_BYTE)v23) {
        pthread_mutex_unlock(v22);
      }
      else {
        (*(void (**)(uint64_t))(*(void *)v21 + 24))(v21);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_10057917C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  char v38 = *(std::__shared_weak_count **)(v36 + 8);
  if (v38) {
    sub_1000DB0A0(v38);
  }
  __cxa_guard_abort(&qword_10247B3D0);
  sub_10013F3C4(&a12);
  sub_1019DB560((uint64_t)&a14);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100579238(uint64_t a1, char *a2)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BBB78);
  }
  uint64_t v4 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v5 = *a2;
    *(_DWORD *)std::string buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v5;
    __int16 v23 = 2080;
    __int16 v24 = sub_100D54EB0(v5);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "WIFI: stats: increment scan, type, %d, %s", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
    unsigned int v12 = *a2;
    *(_DWORD *)char v18 = 67109378;
    *(_DWORD *)&v18[4] = v12;
    *(_WORD *)&v18[8] = 2080;
    *(void *)&v18[10] = sub_100D54EB0(v12);
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService_Type::ScanStats::incrementScan(const CLWifiService_Type::ScanType &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  uint64_t v6 = *a2;
  if (v6 > 12)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    __int16 v7 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      unsigned int v8 = *a2;
      unsigned int v9 = sub_100D54EB0(v8);
      *(_DWORD *)std::string buf = 67240450;
      *(_DWORD *)&uint8_t buf[4] = v8;
      __int16 v23 = 2082;
      __int16 v24 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "WIFI: stats: unknown scan type, %{public}d, %{public}s", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      unsigned int v16 = *a2;
      *(_DWORD *)char v18 = 67240450;
      *(_DWORD *)&v18[4] = v16;
      *(_WORD *)&v18[8] = 2082;
      *(void *)&v18[10] = sub_100D54EB0(v16);
      char v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService_Type::ScanStats::incrementScan(const CLWifiService_Type::ScanType &)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
  else
  {
    ++*(_DWORD *)(a1 + 4 * v6 + 12);
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BBB78);
  }
  unsigned int v10 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_1005866C4();
    unsigned int v11 = v25 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)char v18 = 136315138;
    *(void *)&v18[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "WIFI: stats: scansStat, %s", v18, 0xCu);
    if (v25 < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
    sub_1005866C4();
    if (v19 >= 0) {
      int v14 = v18;
    }
    else {
      int v14 = *(unsigned char **)v18;
    }
    int v20 = 136315138;
    uint64_t v21 = v14;
    CFIndex v15 = (char *)_os_log_send_and_compose_impl();
    if (v19 < 0) {
      operator delete(*(void **)v18);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService_Type::ScanStats::incrementScan(const CLWifiService_Type::ScanType &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
}

uint64_t sub_100579770(uint64_t a1, CFArrayRef theArray, double *a3, uint64_t *a4, uint64_t a5)
{
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count >= 10001)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      unsigned int v9 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 136446466;
        *(void *)&uint8_t buf[4] = a5;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&unsigned char buf[14] = Count;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "WifiScan, warning, too many APs returned from wifid. source, %{public}s, APs, %{public}ld", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        *(_DWORD *)BOOL v69 = 136446466;
        *(void *)&v69[4] = a5;
        *(_WORD *)&v69[12] = 2050;
        *(void *)&v69[14] = Count;
        unsigned int v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::addAccessPoints(CFArrayRef, const CFTimeInterval &, std::vector<CLWifiService_Type::AccessPoint> &, const char *)", "%s\n", v10);
        if (v10 != buf) {
          free(v10);
        }
      }
    }
  }
  else
  {
    CFIndex Count = 0;
  }
  long long v52 = 0u;
  long long v53 = 0u;
  int v54 = 1065353216;
  unsigned int v11 = (void *)*a4;
  unsigned int v12 = (void *)a4[1];
  while (v11 != v12)
  {
    *(void *)std::string buf = *v11;
    sub_1000E34E4((uint64_t)&v52, buf, buf);
    v11 += 11;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  if (Count >= 1)
  {
    double v14 = Current;
    uint64_t v47 = a1;
    int v43 = a4;
    CFIndex v15 = 0;
    uint64_t v46 = 0;
    int v16 = 0;
    int v17 = 0;
    int v48 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v15);
      CFTypeID v19 = CFGetTypeID(ValueAtIndex);
      uint64_t TypeID = WiFiNetworkGetTypeID();
      if (v19 != TypeID)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        uint64_t v21 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 67240192;
          *(_DWORD *)&uint8_t buf[4] = v15;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "WifiScan, failed to retrieve index %{public}d in array", buf, 8u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BBB18);
          }
          *(_DWORD *)BOOL v69 = 67240192;
          *(_DWORD *)&v69[4] = v15;
          long long v32 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::addAccessPoints(CFArrayRef, const CFTimeInterval &, std::vector<CLWifiService_Type::AccessPoint> &, const char *)", "%s\n", v32);
          if (v32 != buf) {
            free(v32);
          }
        }
        ++v17;
        goto LABEL_93;
      }
      *(void *)BOOL v69 = qword_10248AB78;
      if (byte_10248AB80[23] < 0)
      {
        uint64_t TypeID = (uint64_t)sub_1000DC48C(&v69[8], *(void **)byte_10248AB80, *(unint64_t *)&byte_10248AB80[8]);
      }
      else
      {
        *(_OWORD *)&v69[8] = *(_OWORD *)byte_10248AB80;
        *(void *)&v69[24] = *(void *)&byte_10248AB80[16];
      }
      *(_OWORD *)__int16 v70 = xmmword_10248AB98;
      *(_OWORD *)&v70[16] = xmmword_10248ABA8;
      long long v71 = xmmword_10248ABB8;
      uint64_t v72 = qword_10248ABC8;
      if (!sub_100576660(TypeID, (uint64_t)ValueAtIndex, (uint64_t)v69, 0))
      {
        ++v17;
        goto LABEL_91;
      }
      *(double *)&v70[24] = v14 - *(double *)&v70[16];
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BBB78);
      }
      unint64_t v22 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        __dst[0] = *(void **)v69;
        sub_10006DE8C((std::string *)v55);
        if (v55[23] >= 0) {
          __int16 v23 = v55;
        }
        else {
          __int16 v23 = *(unsigned char **)v55;
        }
        if ((v69[31] & 0x80000000) != 0) {
          sub_1000DC48C(&__p, *(void **)&v69[8], *(unint64_t *)&v69[16]);
        }
        else {
          std::string __p = *(std::string *)&v69[8];
        }
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 67111170;
        *(_DWORD *)&uint8_t buf[4] = v15;
        *(_WORD *)&uint8_t buf[8] = 2048;
        *(void *)&buf[10] = Count;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v23;
        *(_WORD *)&unsigned char buf[28] = 2080;
        *(void *)&buf[30] = p_p;
        __int16 v74 = 1024;
        int v75 = *(_DWORD *)v70;
        __int16 v76 = 1024;
        int v77 = *(_DWORD *)&v70[4];
        __int16 v78 = 1024;
        int v79 = *(_DWORD *)&v70[8];
        __int16 v80 = 2048;
        uint64_t v81 = *(void *)&v70[16];
        __int16 v82 = 2048;
        uint64_t v83 = *(void *)&v70[24];
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "WIFI_SCAN: raw scan result, ap, %d, %ld, mac, %-20s, ssid, %-30s, rssi, %+4d, mode, %d, channel, %3d, age, %5.2lf, timestamp, %.1lf", buf, 0x4Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if ((v55[23] & 0x80000000) != 0) {
          operator delete(*(void **)v55);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BBB78);
        }
        uint64_t v51 = *(void *)v69;
        sub_10006DE8C(&__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v33 = &__p;
        }
        else {
          long long v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((v69[31] & 0x80000000) != 0)
        {
          sub_1000DC48C(__dst, *(void **)&v69[8], *(unint64_t *)&v69[16]);
        }
        else
        {
          *(_OWORD *)std::string __dst = *(_OWORD *)&v69[8];
          uint64_t v50 = *(void *)&v69[24];
        }
        int v34 = __dst;
        if (v50 < 0) {
          int v34 = (void **)__dst[0];
        }
        *(_DWORD *)__int16 v55 = 67111170;
        *(_DWORD *)&v55[4] = v15;
        *(_WORD *)&v55[8] = 2048;
        *(void *)&v55[10] = Count;
        *(_WORD *)&v55[18] = 2080;
        *(void *)&v55[20] = v33;
        __int16 v56 = 2080;
        __int16 v57 = v34;
        __int16 v58 = 1024;
        int v59 = *(_DWORD *)v70;
        __int16 v60 = 1024;
        int v61 = *(_DWORD *)&v70[4];
        __int16 v62 = 1024;
        int v63 = *(_DWORD *)&v70[8];
        __int16 v64 = 2048;
        uint64_t v65 = *(void *)&v70[16];
        __int16 v66 = 2048;
        uint64_t v67 = *(void *)&v70[24];
        int v35 = (char *)_os_log_send_and_compose_impl();
        if (SHIBYTE(v50) < 0) {
          operator delete(__dst[0]);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::addAccessPoints(CFArrayRef, const CFTimeInterval &, std::vector<CLWifiService_Type::AccessPoint> &, const char *)", "%s\n", v35);
        if (v35 != buf) {
          free(v35);
        }
      }
      if ((*(_DWORD *)v70 - 1) <= 0xFFFFFF7E) {
        break;
      }
      if (*(unsigned char *)(v47 + 632))
      {
        if (*(int *)(v47 + 584) >= 1)
        {
          *(void *)std::string buf = *(void *)v69;
          *(void *)__int16 v55 = *(void *)(v47 + 544);
          if (sub_100B39178(buf, v55))
          {
            *(_DWORD *)(v47 + 576) = *(_DWORD *)v70;
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1022BBB18);
            }
            char v27 = qword_1024193A8;
            if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
            {
              __dst[0] = *(void **)v69;
              sub_100B39278((std::string *)v55);
              if (v55[23] >= 0) {
                int v28 = v55;
              }
              else {
                int v28 = *(unsigned char **)v55;
              }
              if ((v69[31] & 0x80000000) != 0) {
                sub_1000DC48C(&__p, *(void **)&v69[8], *(unint64_t *)&v69[16]);
              }
              else {
                std::string __p = *(std::string *)&v69[8];
              }
              char v29 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                char v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)std::string buf = 136381187;
              *(void *)&uint8_t buf[4] = v28;
              *(_WORD *)&unsigned char buf[12] = 2081;
              *(void *)&unsigned char buf[14] = v29;
              *(_WORD *)&buf[22] = 1026;
              *(_DWORD *)&unsigned char buf[24] = *(_DWORD *)v70;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "WifiScan, update associated rssi, mac, %{private}s, ssid, %{private}s, rssi, %{public}d", buf, 0x1Cu);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if ((v55[23] & 0x80000000) != 0) {
                operator delete(*(void **)v55);
              }
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193A0 != -1) {
                dispatch_once(&qword_1024193A0, &stru_1022BBB18);
              }
              uint64_t v51 = *(void *)v69;
              sub_100B39278(&__p);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v37 = &__p;
              }
              else {
                int v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              if ((v69[31] & 0x80000000) != 0)
              {
                sub_1000DC48C(__dst, *(void **)&v69[8], *(unint64_t *)&v69[16]);
              }
              else
              {
                *(_OWORD *)std::string __dst = *(_OWORD *)&v69[8];
                uint64_t v50 = *(void *)&v69[24];
              }
              char v38 = __dst;
              if (v50 < 0) {
                char v38 = (void **)__dst[0];
              }
              *(_DWORD *)__int16 v55 = 136381187;
              *(void *)&v55[4] = v37;
              *(_WORD *)&unsigned char v55[12] = 2081;
              *(void *)&v55[14] = v38;
              *(_WORD *)&v55[22] = 1026;
              *(_DWORD *)&v55[24] = *(_DWORD *)v70;
              int v39 = (char *)_os_log_send_and_compose_impl();
              if (SHIBYTE(v50) < 0) {
                operator delete(__dst[0]);
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::addAccessPoints(CFArrayRef, const CFTimeInterval &, std::vector<CLWifiService_Type::AccessPoint> &, const char *)", "%s\n", v39);
              if (v39 != buf) {
                free(v39);
              }
            }
          }
        }
      }
      if (byte_10247B3E8)
      {
        *(void *)std::string buf = *(void *)v69;
        if (sub_100B39178(&qword_10247B3E0, buf))
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BBB18);
          }
          uint64_t v30 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
          {
            sub_100B39278((std::string *)buf);
            uint64_t v31 = buf;
            if (buf[23] < 0) {
              uint64_t v31 = *(unsigned char **)buf;
            }
            *(_DWORD *)__int16 v55 = 67240451;
            *(_DWORD *)&v55[4] = v15 + 1;
            *(_WORD *)&v55[8] = 2081;
            *(void *)&v55[10] = v31;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "WifiScan, addAp, %{public}d, excluded, %{private}s", v55, 0x12u);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_84;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BBB18);
          }
          sub_100B39278((std::string *)v55);
          uint64_t v36 = v55;
          if (v55[23] < 0) {
            uint64_t v36 = *(unsigned char **)v55;
          }
          LODWORD(__p.__r_.__value_.__l.__data_) = 67240451;
          HIDWORD(__p.__r_.__value_.__r.__words[0]) = v15 + 1;
          LOWORD(__p.__r_.__value_.__r.__words[1]) = 2081;
          *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v36;
          char v26 = (char *)_os_log_send_and_compose_impl();
          if ((v55[23] & 0x80000000) != 0) {
            operator delete(*(void **)v55);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::addAccessPoints(CFArrayRef, const CFTimeInterval &, std::vector<CLWifiService_Type::AccessPoint> &, const char *)", "%s\n", v26);
LABEL_122:
          if (v26 != buf) {
            free(v26);
          }
LABEL_84:
          ++v16;
          goto LABEL_91;
        }
      }
      *(void *)std::string buf = *(void *)v69;
      if (sub_10058A478(&v52, buf))
      {
        ++v48;
      }
      else if (*a3 < 0.0 || *a3 >= *(double *)&v70[16])
      {
        *(void *)std::string buf = *(void *)v69;
        sub_1000E34E4((uint64_t)&v52, buf, buf);
        sub_100581D48(v43, (uint64_t)v69);
        LODWORD(v46) = v46 + 1;
      }
      else
      {
        ++HIDWORD(v46);
      }
LABEL_91:
      if ((v69[31] & 0x80000000) != 0) {
        operator delete(*(void **)&v69[8]);
      }
LABEL_93:
      if (Count == ++v15) {
        goto LABEL_141;
      }
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    char v25 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v15 + 1;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = *(_DWORD *)v70;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "WifiScan, addAp, %{public}d, badrssi, %{public}d, #CloneMe", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      *(_DWORD *)__int16 v55 = 67240448;
      *(_DWORD *)&v55[4] = v15 + 1;
      *(_WORD *)&v55[8] = 1026;
      *(_DWORD *)&v55[10] = *(_DWORD *)v70;
      char v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::addAccessPoints(CFArrayRef, const CFTimeInterval &, std::vector<CLWifiService_Type::AccessPoint> &, const char *)", "%s\n", v26);
      goto LABEL_122;
    }
    goto LABEL_84;
  }
  int v48 = 0;
  int v17 = 0;
  uint64_t v46 = 0;
  int v16 = 0;
LABEL_141:
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  int v40 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136448002;
    *(void *)&uint8_t buf[4] = a5;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(void *)&unsigned char buf[14] = Count;
    *(_WORD *)&buf[22] = 2050;
    *(void *)&unsigned char buf[24] = *((void *)&v53 + 1);
    *(_WORD *)&unsigned char buf[32] = 1026;
    *(_DWORD *)&buf[34] = v46;
    __int16 v74 = 1026;
    int v75 = v48;
    __int16 v76 = 1026;
    int v77 = v17;
    __int16 v78 = 1026;
    int v79 = HIDWORD(v46);
    __int16 v80 = 1026;
    LODWORD(v81) = v16;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "WifiScan, addAps, %{public}s, returned, %{public}ld, unique, %{public}ld, insert, %{public}d, keep, %{public}d, error, %{public}d, stale, %{public}d, ignore, %{public}d", buf, 0x3Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    *(_DWORD *)BOOL v69 = 136448002;
    *(void *)&v69[4] = a5;
    *(_WORD *)&v69[12] = 2050;
    *(void *)&v69[14] = Count;
    *(_WORD *)&v69[22] = 2050;
    *(void *)&v69[24] = *((void *)&v53 + 1);
    *(_WORD *)__int16 v70 = 1026;
    *(_DWORD *)&v70[2] = v46;
    *(_WORD *)&v70[6] = 1026;
    *(_DWORD *)&v70[8] = v48;
    *(_WORD *)&v70[12] = 1026;
    *(_DWORD *)&v70[14] = v17;
    *(_WORD *)&v70[18] = 1026;
    *(_DWORD *)&v70[20] = HIDWORD(v46);
    *(_WORD *)&v70[24] = 1026;
    *(_DWORD *)&v70[26] = v16;
    uint64_t v42 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::addAccessPoints(CFArrayRef, const CFTimeInterval &, std::vector<CLWifiService_Type::AccessPoint> &, const char *)", "%s\n", v42);
    if (v42 != buf) {
      free(v42);
    }
  }
  return sub_1000D7D80((uint64_t)&v52);
}

void sub_10057A858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t sub_10057A910(uint64_t a1, uint64_t a2, const __CFArray *a3, int a4)
{
  uint64_t v7 = a1 + 824;
  uint64_t v44 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  __int16 v45 = 256;
  unsigned int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: onWiFiDeviceClientScanCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v8, &state);

  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  unsigned int v9 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289282;
    int v55 = 0;
    __int16 v56 = 2082;
    *(void *)__int16 v57 = "";
    *(_WORD *)&v57[8] = 2082;
    *(void *)&v57[10] = "activity";
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWiFiDeviceClientScanCallback\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  sub_1001BD958(a1);
  int v10 = *(char *)(a1 + 233);
  if (!*(unsigned char *)(a1 + 234))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    unsigned int v11 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "WifiMgr, Multiple scan callbacks, #CloneMe", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      LOWORD(v46) = 0;
      long long v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiDeviceClientScanCallback(WiFiDeviceClientRef, CFArrayRef, WiFiError)", "%s\n", v32);
      if (v32 != (char *)buf) {
        free(v32);
      }
    }
  }
  *(unsigned char *)(a1 + 234) = 0;
  uint64_t v36 = qword_10248AB78;
  if (byte_10248AB80[23] < 0)
  {
    sub_1000DC48C(&__p, *(void **)byte_10248AB80, *(unint64_t *)&byte_10248AB80[8]);
  }
  else
  {
    long long __p = *(_OWORD *)byte_10248AB80;
    uint64_t v38 = *(void *)&byte_10248AB80[16];
  }
  long long v39 = xmmword_10248AB98;
  long long v40 = xmmword_10248ABA8;
  long long v41 = xmmword_10248ABB8;
  uint64_t v42 = qword_10248ABC8;
  if (a3 && (CFTypeID v12 = CFGetTypeID(a3), v12 == CFArrayGetTypeID()))
  {
    int Count = CFArrayGetCount(a3);
    int v14 = 1;
  }
  else
  {
    int v14 = 0;
    int Count = 0;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  CFIndex v15 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67240704;
    int v55 = a4;
    __int16 v56 = 1026;
    *(_DWORD *)__int16 v57 = v14;
    *(_WORD *)&v57[4] = 1026;
    *(_DWORD *)&v57[6] = Count;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "WifiMgr, onWiFiDeviceClientScanCallback, error, %{public}d, valid, %{public}d, count, %{public}d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    LODWORD(v46) = 67240704;
    HIDWORD(v46) = a4;
    *(_WORD *)uint64_t v47 = 1026;
    *(_DWORD *)&_OWORD v47[2] = v14;
    *(_WORD *)&v47[6] = 1026;
    *(_DWORD *)&v47[8] = Count;
    char v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiDeviceClientScanCallback(WiFiDeviceClientRef, CFArrayRef, WiFiError)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  char v16 = v14 ^ 1;
  if (a4) {
    char v16 = 1;
  }
  if (v16)
  {
    *(unsigned char *)(a1 + 416) = -1;
    *(void *)(a1 + 424) = 0;
    sub_1000D7FCC((uint64_t *)(a1 + 432));
    *(void *)(a1 + 40_Block_object_dispose(&STACK[0x850], 8) = 0;
    if (a4 == 16)
    {
      *(const CFTimeInterval *)(a1 + 744) = -kCFAbsoluteTimeIntervalSince1970;
      *(_DWORD *)(a1 + 752) = 16;
      if (*(double *)(a1 + 392) < 0.0)
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BBB78);
        }
        unint64_t v22 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "recording busy start time as now", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022BBB78);
          }
          LOWORD(v46) = 0;
          int v34 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiDeviceClientScanCallback(WiFiDeviceClientRef, CFArrayRef, WiFiError)", "%s\n", v34);
          if (v34 != (char *)buf) {
            free(v34);
          }
        }
        *(CFAbsoluteTime *)(a1 + 392) = CFAbsoluteTimeGetCurrent();
      }
      ++*(_DWORD *)(a1 + 764);
      *(_DWORD *)std::string buf = 5;
      (*(void (**)(uint64_t, uint8_t *, void, uint64_t))(*(void *)a1 + 144))(a1, buf, 0, 0xFFFFFFFFLL);
    }
    else
    {
      *(_DWORD *)std::string buf = 4;
      (*(void (**)(uint64_t, uint8_t *, void, uint64_t))(*(void *)a1 + 144))(a1, buf, 0, 0xFFFFFFFFLL);
      if (a4 == 6)
      {
        *(CFAbsoluteTime *)(a1 + 744) = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)(a1 + 752) = 6;
      }
      ++*(_DWORD *)(a1 + 760);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 416) = v10;
    *(CFAbsoluteTime *)(a1 + 424) = CFAbsoluteTimeGetCurrent();
    sub_1000D7FCC((uint64_t *)(a1 + 432));
    *(const CFTimeInterval *)(a1 + 744) = -kCFAbsoluteTimeIntervalSince1970;
    *(_DWORD *)(a1 + 752) = 0;
    sub_100579770(a1, a3, (double *)(a1 + 384), (uint64_t *)(a1 + 432), (uint64_t)"scan");
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
    int v17 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      char v18 = sub_100D54EB0((char)v10);
      uint64_t v19 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 440) - *(void *)(a1 + 432)) >> 3);
      double v20 = *(double *)(a1 + 424) - *(double *)(a1 + 408);
      uint64_t v21 = *(void *)(a1 + 384);
      *(_DWORD *)std::string buf = 67110146;
      int v55 = v10;
      __int16 v56 = 2080;
      *(void *)__int16 v57 = v18;
      *(_WORD *)&v57[8] = 2048;
      *(void *)&v57[10] = v19;
      __int16 v58 = 2048;
      double v59 = v20;
      __int16 v60 = 2048;
      uint64_t v61 = v21;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "asynchronous scan type %d %s completed - %lu results (%.3fs scan time), max age, %.3f", buf, 0x30u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BBB78);
      }
      char v27 = sub_100D54EB0((char)v10);
      uint64_t v28 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 440) - *(void *)(a1 + 432)) >> 3);
      double v29 = *(double *)(a1 + 424) - *(double *)(a1 + 408);
      uint64_t v30 = *(void *)(a1 + 384);
      LODWORD(v46) = 67110146;
      HIDWORD(v46) = v10;
      *(_WORD *)uint64_t v47 = 2080;
      *(void *)&_OWORD v47[2] = v27;
      *(_WORD *)&unsigned char v47[10] = 2048;
      uint64_t v48 = v28;
      __int16 v49 = 2048;
      double v50 = v29;
      __int16 v51 = 2048;
      uint64_t v52 = v30;
      uint64_t v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiDeviceClientScanCallback(WiFiDeviceClientRef, CFArrayRef, WiFiError)", "%s\n", v31);
      if (v31 != (char *)buf) {
        free(v31);
      }
    }
    ++*(_DWORD *)(a1 + 756);
    *(void *)(a1 + 40_Block_object_dispose(&STACK[0x850], 8) = 0;
    sub_100577E8C(a1, (uint64_t *)(a1 + 432), (char)v10);
    buf[0] = 0;
    LOBYTE(v56) = 0;
    char v62 = 0;
    memset(v63, 0, sizeof(v63));
    uint64_t v64 = 0;
    buf[1] = v10;
    (*(void (**)(uint64_t, unsigned char *, unsigned char *))(*(void *)a1 + 224))(a1, &v63[8], v63);
    sub_100566054(a1, (uint64_t)&v46);
    if (v53) {
      sub_100588040((uint64_t)&v56, (uint64_t)&v46);
    }
    int v35 = 3;
    (*(void (**)(uint64_t, int *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v35, buf, 1, 0xFFFFFFFFLL, 0);
    [*(id *)(a1 + 656) processEventTime:CFAbsoluteTimeGetCurrent()];
    if (v53 && SBYTE1(v50) < 0) {
      operator delete(*(void **)v47);
    }
    uint64_t v46 = (void **)&v63[8];
    sub_1000D7F78(&v46);
    if (v62 && SHIBYTE(v60) < 0) {
      operator delete(*(void **)&v57[6]);
    }
  }
  if (*(void *)(a1 + 312))
  {
    WiFiDeviceClientRegisterScanUpdateCallback();
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    __int16 v23 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "WifiService, scan callback, fWifiDevice NULL", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      LOWORD(v46) = 0;
      long long v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::onWiFiDeviceClientScanCallback(WiFiDeviceClientRef, CFArrayRef, WiFiError)", "%s\n", v33);
      if (v33 != (char *)buf) {
        free(v33);
      }
    }
  }
  if (*(void *)(a1 + 368))
  {
    CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 296));
    __int16 v24 = (__CFRunLoop *)sub_1001C2710();
    CFRunLoopWakeUp(v24);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete((void *)__p);
  }
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7);
}

void sub_10057B564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,os_activity_scope_state_s state,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,int a44,__int16 a45,char a46,char a47)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  os_activity_scope_leave(&state);
  sub_1019DB560((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_10057B610(uint64_t a1, uint64_t a2, uint64_t a3, const __CFArray *a4)
{
  uint64_t v5 = a1;
  uint64_t v91 = a1 + 824;
  (*(void (**)(void))(*(void *)(a1 + 824) + 16))();
  __int16 v93 = 256;
  uint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: onWiFiManagerBackgroundScanCacheCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  uint64_t v7 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWiFiManagerBackgroundScanCacheCallback\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022BBB38);
  }
  unsigned int v8 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *(_DWORD *)(v5 + 284);
    int v10 = *(unsigned __int8 *)(v5 + 244);
    int v11 = *(unsigned __int8 *)(v5 + 245);
    int v12 = *(unsigned __int8 *)(v5 + 246);
    int v14 = *(_DWORD *)(v5 + 236);
    int v13 = *(_DWORD *)(v5 + 240);
    *(_DWORD *)std::string buf = 67241472;
    *(_DWORD *)&uint8_t buf[4] = v9;
    *(_WORD *)&uint8_t buf[8] = 1026;
    *(_DWORD *)&buf[10] = v13;
    *(_WORD *)&unsigned char buf[14] = 1026;
    *(_DWORD *)&uint8_t buf[16] = v10;
    *(_WORD *)&buf[20] = 1026;
    *(_DWORD *)&buf[22] = v11;
    *(_WORD *)&buf[26] = 1026;
    *(_DWORD *)&unsigned char buf[28] = v12;
    *(_WORD *)&unsigned char buf[32] = 1026;
    int v102 = v14;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "WsbReg, snap, clients, %{public}d, interval, %{public}d, active, %{public}d, rollover, %{public}d, sample, %{public}d, state, %{public}d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    int v64 = *(_DWORD *)(v5 + 284);
    int v65 = *(unsigned __int8 *)(v5 + 244);
    int v66 = *(unsigned __int8 *)(v5 + 245);
    int v67 = *(unsigned __int8 *)(v5 + 246);
    int v69 = *(_DWORD *)(v5 + 236);
    int v68 = *(_DWORD *)(v5 + 240);
    *(_DWORD *)uint64_t v96 = 67241472;
    *(_DWORD *)&v96[4] = v64;
    *(_WORD *)&v96[8] = 1026;
    *(_DWORD *)&v96[10] = v68;
    *(_WORD *)&v96[14] = 1026;
    *(_DWORD *)&v96[16] = v65;
    *(_WORD *)&v96[20] = 1026;
    *(_DWORD *)&v96[22] = v66;
    *(_WORD *)&v96[26] = 1026;
    *(_DWORD *)&v96[28] = v67;
    LOWORD(v97) = 1026;
    *(_DWORD *)((char *)&v97 + 2) = v69;
    __int16 v70 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v70);
    if (v70 != buf) {
      free(v70);
    }
  }
  double Current = CFAbsoluteTimeGetCurrent();
  if (!a4)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    char v26 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "@WsbCb, count, 0", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022BBB38);
      }
      *(_WORD *)uint64_t v96 = 0;
      char v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v27);
      if (v27 != buf) {
        free(v27);
      }
    }
    goto LABEL_149;
  }
  CFIndex Count = CFArrayGetCount(a4);
  [(__CFArray *)a4 objectAtIndexedSubscript:((Count << 32) - 0x100000000) >> 32];
  IntCFStringRef Property = WiFiNetworkGetIntProperty();
  WiFiNetworkGetProperty();
  uint64_t v76 = v5;
  if (Current - (double)IntProperty <= *(double *)(v5 + 488)
    && 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(v5 + 504) - *(void *)(v5 + 496)) >> 3) == (int)Count)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    char v18 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)(v5 + 488);
      *(_DWORD *)std::string buf = 134349568;
      *(double *)&uint8_t buf[4] = Current - (double)IntProperty;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&unsigned char buf[14] = v19;
      *(_WORD *)&buf[22] = 1026;
      *(_DWORD *)&unsigned char buf[24] = Count;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "@WsbCb, duplicate, times, %{public}.1f, %{public}.1f, count, %{public}d, #CloneMe", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022BBB38);
      }
      uint64_t v20 = *(void *)(v5 + 488);
      *(_DWORD *)uint64_t v96 = 134349568;
      *(double *)&v96[4] = Current - (double)IntProperty;
      *(_WORD *)&v96[12] = 2050;
      *(void *)&v96[14] = v20;
      *(_WORD *)&v96[22] = 1026;
      *(_DWORD *)&v96[24] = Count;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v21);
      if (v21 != buf) {
        free(v21);
      }
    }
LABEL_143:
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    double v59 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = Count;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "WsbMetric, groupresult, discard, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022BBB38);
      }
      *(_DWORD *)uint64_t v96 = 67240192;
      *(_DWORD *)&v96[4] = Count;
      uint64_t v73 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v73);
      if (v73 != buf) {
        free(v73);
      }
    }
    AnalyticsSendEventLazy();
    AnalyticsSendEventLazy();
    sub_1000D7FCC((uint64_t *)(v5 + 496));
LABEL_149:
    LODWORD(Count) = 0;
    goto LABEL_150;
  }
  uint64_t v22 = sub_100103240();
  int v23 = sub_10073F1D8(v22);
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022BBB38);
  }
  __int16 v24 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = Count;
    *(_WORD *)&uint8_t buf[8] = 2050;
    *(double *)&buf[10] = Current;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "@WsbCb, count, %{public}d, currtime, %{public}.1f", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    *(_DWORD *)uint64_t v96 = 67240448;
    *(_DWORD *)&v96[4] = Count;
    *(_WORD *)&v96[8] = 2050;
    *(double *)&v96[10] = Current;
    uint64_t v72 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v72);
    if (v72 != buf) {
      free(v72);
    }
    if ((Count & 0x80000000) == 0)
    {
LABEL_29:
      if (v23 >= (int)Count) {
        goto LABEL_35;
      }
    }
  }
  else if ((Count & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022BBB38);
  }
  char v25 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = Count;
    *(_WORD *)&uint8_t buf[8] = 1026;
    *(_DWORD *)&buf[10] = v23;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "@WsbCb, out of range, %{public}d, max, %{public}d, #CloneMe", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    *(_DWORD *)uint64_t v96 = 67240448;
    *(_DWORD *)&v96[4] = Count;
    *(_WORD *)&v96[8] = 1026;
    *(_DWORD *)&v96[10] = v23;
    __int16 v74 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v74);
    if (v74 != buf) {
      free(v74);
    }
  }
LABEL_35:
  *(double *)(v5 + 48_Block_object_dispose(&STACK[0x850], 8) = Current;
  int v75 = (uint64_t *)(v5 + 496);
  sub_1000D7FCC((uint64_t *)(v5 + 496));
  memset(&v89, 0, sizeof(v89));
  if ((byte_10248AB80[23] & 0x80000000) == 0)
  {
    std::string __dst = *(std::string *)byte_10248AB80;
    *(void *)uint64_t v96 = qword_10248AB78;
LABEL_47:
    *(_OWORD *)&v96[8] = *(_OWORD *)byte_10248AB80;
    *(void *)&v96[24] = *(void *)&byte_10248AB80[16];
    goto LABEL_48;
  }
  sub_1000DC48C(&__dst, *(void **)byte_10248AB80, *(unint64_t *)&byte_10248AB80[8]);
  *(void *)uint64_t v96 = qword_10248AB78;
  if ((byte_10248AB80[23] & 0x80000000) == 0) {
    goto LABEL_47;
  }
  sub_1000DC48C(&v96[8], *(void **)byte_10248AB80, *(unint64_t *)&byte_10248AB80[8]);
LABEL_48:
  long long v97 = xmmword_10248AB98;
  long long v98 = xmmword_10248ABA8;
  long long v99 = xmmword_10248ABB8;
  uint64_t v100 = qword_10248ABC8;
  if ((int)Count < 1)
  {
    int v77 = 0;
  }
  else
  {
    uint64_t v28 = 0;
    int v77 = 0;
    do
    {
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      {
        *v89.__r_.__value_.__l.__data_ = 0;
        v89.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v89.__r_.__value_.__s.__data_[0] = 0;
        *((unsigned char *)&v89.__r_.__value_.__s + 23) = 0;
      }
      id v29 = [(__CFArray *)a4 objectAtIndexedSubscript:v28];
      CFStringRef Property = (const __CFString *)WiFiNetworkGetProperty();
      sub_10013D274(Property, &v89);
      char v31 = WiFiNetworkGetIntProperty();
      unsigned int v32 = WiFiNetworkGetIntProperty();
      if (v29 && WiFiNetworkGetChannel()) {
        long long v33 = off_1022BBCE8[(int)WiFiNetworkGetOperatingBand()];
      }
      else {
        long long v33 = "NA";
      }
      sub_100134750(v86, v33);
      int v34 = WiFiNetworkGetIntProperty();
      unsigned int v35 = WiFiNetworkGetIntProperty();
      int IsApplePersonalHotspot = WiFiNetworkIsApplePersonalHotspot();
      int v85 = 0;
      int v37 = (const void *)WiFiNetworkGetProperty();
      if (!v37 || (sub_1004D18D4(v37, &v85) & 1) == 0) {
        int v85 = 0;
      }
      uint64_t v38 = (void **)sub_100B38F04((uint64_t)&v89);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        sub_1000DC48C(&v78, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      }
      else {
        std::string v78 = __dst;
      }
      std::string __p = v78;
      memset(&v78, 0, sizeof(v78));
      int v79 = v38;
      LODWORD(v81) = v31;
      *(void *)((char *)&v81 + 4) = __PAIR64__(v32, v35);
      *(double *)&long long v82 = (double)v34;
      *((double *)&v82 + 1) = Current - (double)v34;
      LOBYTE(v83) = IsApplePersonalHotspot != 0;
      BYTE1(v83) = 1;
      DWORD1(v83) = v85;
      BYTE8(v83) = 0;
      uint64_t v84 = 0;
      if (WiFiNetworkGetIntProperty())
      {
        BYTE8(v83) = 1;
        *(void *)uint64_t v96 = v79;
        std::string::operator=((std::string *)&v96[8], &__p);
        long long v97 = v81;
        long long v98 = v82;
        long long v99 = v83;
        uint64_t v100 = v84;
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022BBB38);
        }
        long long v39 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
        {
          sub_100D5475C((uint64_t *)&v79);
          long long v40 = buf;
          if (buf[23] < 0) {
            long long v40 = *(unsigned char **)buf;
          }
          *(_DWORD *)uint64_t v95 = 136380675;
          *(void *)&v95[4] = v40;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "@WsbCb, associated AP, %{private}s", v95, 0xCu);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022BBB38);
          }
          sub_100D5475C((uint64_t *)&v79);
          long long v41 = v95;
          if (v95[23] < 0) {
            long long v41 = *(unsigned char **)v95;
          }
          LODWORD(v94.__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 4) = (std::string::size_type)v41;
          uint64_t v42 = (char *)_os_log_send_and_compose_impl();
          if ((v95[23] & 0x80000000) != 0) {
            operator delete(*(void **)v95);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v42);
          if (v42 != buf) {
            free(v42);
          }
        }
      }
      else
      {
        BYTE8(v83) = 0;
      }
      uint64_t v84 = *(void *)&Current;
      if ((DWORD2(v81) - 257) >= 0xFFFFFF00
        && *(double *)&v82 >= 0.0
        && *(double *)&v82 <= 86400.0
        && (*(void *)std::string buf = v79, sub_1000D8908((uint64_t)buf)))
      {
        unint64_t v50 = *(void *)(v76 + 504);
        if (v50 >= *(void *)(v76 + 512))
        {
          uint64_t v51 = sub_1001F8D14(v75, (uint64_t)&v79);
        }
        else
        {
          sub_1001F8C88((uint64_t)v75, (uint64_t)&v79);
          uint64_t v51 = v50 + 88;
        }
        *(void *)(v76 + 504) = v51;
        [*(id *)(v76 + 656) processEventTime:Current - (double)v34];
      }
      else
      {
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022BBB38);
        }
        int v43 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
        {
          int v44 = DWORD2(v81);
          uint64_t v45 = v82;
          v94.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
          sub_10006DE8C((std::string *)v95);
          uint64_t v46 = v95;
          if (v95[23] < 0) {
            uint64_t v46 = *(unsigned char **)v95;
          }
          *(_DWORD *)std::string buf = 67240963;
          *(_DWORD *)&uint8_t buf[4] = 1;
          *(_WORD *)&uint8_t buf[8] = 1026;
          *(_DWORD *)&buf[10] = v44;
          *(_WORD *)&unsigned char buf[14] = 2050;
          *(void *)&uint8_t buf[16] = v45;
          *(_WORD *)&unsigned char buf[24] = 2081;
          *(void *)&buf[26] = v46;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "@WsbCb, bad, %{public}d, channel, %{public}d, age, %{public}.0f, mac, %{private}s", buf, 0x22u);
          if ((v95[23] & 0x80000000) != 0) {
            operator delete(*(void **)v95);
          }
        }
        ++v77;
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022BBB38);
          }
          int v55 = DWORD2(v81);
          uint64_t v56 = v82;
          sub_10006DE8C(&v94);
          __int16 v57 = &v94;
          if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            __int16 v57 = (std::string *)v94.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)uint64_t v95 = 67240963;
          *(_DWORD *)&v95[4] = 1;
          *(_WORD *)&v95[8] = 1026;
          *(_DWORD *)&v95[10] = v55;
          *(_WORD *)&v95[14] = 2050;
          *(void *)&v95[16] = v56;
          *(_WORD *)&unsigned char v95[24] = 2081;
          *(void *)&v95[26] = v57;
          __int16 v58 = (char *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v94.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v58);
          if (v58 != buf) {
            free(v58);
          }
        }
      }
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022BBB38);
      }
      uint64_t v47 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
      {
        sub_100D5475C((uint64_t *)&v79);
        uint64_t v48 = v95;
        if (v95[23] < 0) {
          uint64_t v48 = *(unsigned char **)v95;
        }
        __int16 v49 = v86;
        if (v87 < 0) {
          __int16 v49 = (void **)v86[0];
        }
        *(_DWORD *)std::string buf = 67240707;
        *(_DWORD *)&uint8_t buf[4] = v28 + 1;
        *(_WORD *)&uint8_t buf[8] = 2081;
        *(void *)&buf[10] = v48;
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = v49;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "@WsbCb, AP, %{public}d, %{private}s, band, %{public}s", buf, 0x1Cu);
        if ((v95[23] & 0x80000000) != 0) {
          operator delete(*(void **)v95);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022BBB38);
        }
        sub_100D5475C((uint64_t *)&v79);
        uint64_t v52 = &v94;
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v52 = (std::string *)v94.__r_.__value_.__r.__words[0];
        }
        char v53 = v86;
        if (v87 < 0) {
          char v53 = (void **)v86[0];
        }
        *(_DWORD *)uint64_t v95 = 67240707;
        *(_DWORD *)&v95[4] = v28 + 1;
        *(_WORD *)&v95[8] = 2081;
        *(void *)&v95[10] = v52;
        *(_WORD *)&v95[18] = 2082;
        *(void *)&v95[20] = v53;
        int v54 = (char *)_os_log_send_and_compose_impl();
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v94.__r_.__value_.__l.__data_);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v54);
        if (v54 != buf) {
          free(v54);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v87 < 0) {
        operator delete(v86[0]);
      }
      ++v28;
    }
    while (Count != v28);
  }
  uint64_t v5 = v76;
  if (4 * v77 < (int)Count)
  {
    *(_WORD *)std::string buf = -256;
    uint8_t buf[8] = 0;
    char v104 = 0;
    memset(v105, 0, sizeof(v105));
    uint64_t v106 = 0;
    sub_100588040((uint64_t)&buf[8], (uint64_t)v96);
    HIDWORD(v106) = 1;
    (*(void (**)(uint64_t, unsigned char *, unsigned char *))(*(void *)v76 + 240))(v76, &v105[8], v105);
    LODWORD(v79) = 12;
    (*(void (**)(uint64_t, void ***, unsigned char *, void, uint64_t, void))(*(void *)v76 + 152))(v76, &v79, buf, 0, 0xFFFFFFFFLL, 0);
    int v79 = (void **)&v105[8];
    sub_1000D7F78(&v79);
    if (v104)
    {
      if (v103 < 0) {
        operator delete(*(void **)&buf[16]);
      }
    }
  }
  if ((v96[31] & 0x80000000) != 0) {
    operator delete(*(void **)&v96[8]);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
  if (4 * v77 >= (int)Count) {
    goto LABEL_143;
  }
LABEL_150:
  double v60 = *(double *)(v5 + 288);
  if (v60 <= 0.0) {
    int v61 = -1;
  }
  else {
    int v61 = (int)(Current - v60);
  }
  if (*(unsigned char *)(v5 + 246))
  {
    char v62 = "fake";
  }
  else if (*(void *)(v5 + 248))
  {
    char v62 = "fences";
  }
  else
  {
    char v62 = "off";
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022BBB38);
  }
  int v63 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67240706;
    *(_DWORD *)&uint8_t buf[4] = Count;
    *(_WORD *)&uint8_t buf[8] = 1026;
    *(_DWORD *)&buf[10] = v61;
    *(_WORD *)&unsigned char buf[14] = 2082;
    *(void *)&uint8_t buf[16] = v62;
    _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "WsbMetric, callback, aps, %{public}d, delta, %{public}d, active, %{public}s", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    *(_DWORD *)uint64_t v96 = 67240706;
    *(_DWORD *)&v96[4] = Count;
    *(_WORD *)&v96[8] = 1026;
    *(_DWORD *)&v96[10] = v61;
    *(_WORD *)&v96[14] = 2082;
    *(void *)&v96[16] = v62;
    long long v71 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerBackgroundScanCacheCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v71);
    if (v71 != buf) {
      free(v71);
    }
  }
  AnalyticsSendEventLazy();
  *(double *)(v5 + 28_Block_object_dispose(&STACK[0x850], 8) = Current;
  os_activity_scope_leave(&state);
  if (HIBYTE(v93))
  {
    if ((_BYTE)v93) {
      pthread_mutex_unlock(v92);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v91 + 24))(v91);
    }
  }
}

void sub_10057CF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  os_activity_scope_leave(&state);
  sub_1019DB560((uint64_t)&a69);
  _Unwind_Resume(a1);
}

NSDictionary *sub_10057D070(uint64_t a1)
{
  v2[1] = @"numInGroup";
  v3[0] = @"discard";
  v2[0] = @"groupResult";
  v3[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:v3 forKeys:v2 count:2];
}

NSDictionary *sub_10057D108(uint64_t a1)
{
  v2[1] = @"numInGroup";
  v3[0] = @"discard:badcb";
  v2[0] = @"groupResult";
  v3[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:v3 forKeys:v2 count:2];
}

NSDictionary *sub_10057D1A0(uint64_t a1)
{
  v4[0] = @"aps";
  v5[0] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 40)];
  v4[1] = @"delta";
  v5[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 44)];
  void v4[2] = @"active";
  uint64_t v2 = +[NSString stringWithUTF8String:*(void *)(a1 + 32)];
  void v4[3] = @"daily";
  void v5[2] = v2;
  void v5[3] = &off_102392708;
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:4];
}

uint64_t sub_10057D27C(unsigned char *a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v6 = a1 + 824;
  int v23 = a1 + 824;
  (*(void (**)(unsigned char *))(*((void *)a1 + 103) + 16))(a1 + 824);
  __int16 v24 = 256;
  uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: onWiFiManagerBackgroundScanCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v7, &state);

  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  unsigned int v8 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWiFiManagerBackgroundScanCallback\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  sub_1001BD958((uint64_t)a1);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BBB78);
  }
  int v9 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *((void *)a1 + 31);
    *(_DWORD *)std::string buf = 134218240;
    *(void *)&uint8_t buf[4] = a4;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&unsigned char buf[14] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Got background scan callback, networks, %p, Exit / Entry notification, gfNetworks, %ld", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
    uint64_t v16 = *((void *)a1 + 31);
    *(_DWORD *)char v25 = 134218240;
    *(void *)&v25[4] = a4;
    __int16 v26 = 2048;
    uint64_t v27 = v16;
    int v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerBackgroundScanCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v17);
    if (v17 != buf) {
      free(v17);
    }
  }
  CFShow(a4);
  sub_1000D7FCC((uint64_t *)a1 + 58);
  *((CFAbsoluteTime *)a1 + 57) = CFAbsoluteTimeGetCurrent();
  if (a4)
  {
    *(void *)std::string buf = 0xBFF0000000000000;
    sub_1000D7FCC((uint64_t *)a1 + 58);
    sub_100579770((uint64_t)a1, (CFArrayRef)a4, (double *)buf, (uint64_t *)a1 + 58, (uint64_t)"get");
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
    int v11 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)a1 + 59) - *((void *)a1 + 58)) >> 3);
      *(_DWORD *)std::string buf = 134217984;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%ld background scan entry results", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BBB78);
      }
      uint64_t v18 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)a1 + 59) - *((void *)a1 + 58)) >> 3);
      *(_DWORD *)char v25 = 134217984;
      *(void *)&v25[4] = v18;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerBackgroundScanCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v19);
      if (v19 != buf) {
        free(v19);
      }
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
    int v13 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "issue kNotificationBackgroundEntry", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BBB78);
      }
      *(_WORD *)char v25 = 0;
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerBackgroundScanCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    *(_WORD *)std::string buf = -256;
    uint8_t buf[8] = 0;
    char v30 = 0;
    memset(v31, 0, sizeof(v31));
    uint64_t v32 = 0;
    (*(void (**)(unsigned char *, unsigned char *, unsigned char *))(*(void *)a1 + 232))(a1, &v31[8], v31);
    *(_DWORD *)char v25 = 8;
    (*(void (**)(unsigned char *, unsigned char *, unsigned char *, void, uint64_t, void))(*(void *)a1 + 152))(a1, v25, buf, 0, 0xFFFFFFFFLL, 0);
    *(void *)char v25 = &v31[8];
    sub_1000D7F78((void ***)v25);
    if (v30 && v29 < 0) {
      operator delete(*(void **)&buf[16]);
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
    int v14 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "issue kNotificationBackgroundExit", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BBB78);
      }
      *(_WORD *)char v25 = 0;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerBackgroundScanCallback(WiFiManagerClientRef, WiFiDeviceClientRef, CFArrayRef)", "%s\n", v21);
      if (v21 != buf) {
        free(v21);
      }
    }
    *(_DWORD *)std::string buf = 9;
    (*(void (**)(unsigned char *, unsigned char *, void, uint64_t))(*(void *)a1 + 144))(a1, buf, 0, 0xFFFFFFFFLL);
  }
  if (sub_100572A78((uint64_t)a1, (CFArrayRef)a4))
  {
    a1[246] = 0;
    sub_1005719B4((uint64_t)a1, 1);
  }
  if (sub_1000FC450())
  {
    sub_1000E9354(buf);
    v25[0] = a4 != 0;
    sub_1000EA238((uint64_t)buf, "ePNOEnter", v25);
    sub_1000FC45C((uint64_t)buf, (uint64_t)"locationd");
    sub_10013F3C4(buf);
  }
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(unsigned char *))(*(void *)v6 + 24))(v6);
}

void sub_10057DB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_10057DB84(uint64_t a1)
{
  uint64_t v2 = a1 + 824;
  uint64_t v25 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  __int16 v26 = 256;
  int v3 = _os_activity_create((void *)&_mh_execute_header, "CL: onWiFiManagerRestartCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v3, &state);

  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  uint64_t v4 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289282;
    int v32 = 0;
    __int16 v33 = 2082;
    int v34 = "";
    __int16 v35 = 2082;
    uint64_t v36 = "activity";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWiFiManagerRestartCallback\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022BBB38);
  }
  uint64_t v5 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "@WifiNotify, WifiManagerRestart", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    LOWORD(v16) = 0;
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerRestartCallback(WiFiManagerClientRef)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  sub_1005744A4(a1, &v23);
  uint64_t v16 = qword_10248AB78;
  if (byte_10248AB80[23] < 0)
  {
    sub_1000DC48C(&__p, *(void **)byte_10248AB80, *(unint64_t *)&byte_10248AB80[8]);
  }
  else
  {
    long long __p = *(_OWORD *)byte_10248AB80;
    uint64_t v18 = *(void *)&byte_10248AB80[16];
  }
  long long v19 = xmmword_10248AB98;
  long long v20 = xmmword_10248ABA8;
  long long v21 = xmmword_10248ABB8;
  uint64_t v22 = qword_10248ABC8;
  if (!sub_10056F668(a1, (uint64_t)&v16))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
    uint64_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Failed to query associated network", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BBB78);
      }
      LOWORD(v27) = 0;
      CFIndex v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerRestartCallback(WiFiManagerClientRef)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  sub_10056B1FC(a1);
  sub_10057E1FC(a1);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  uint64_t v7 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(_DWORD *)(a1 + 284);
    int v9 = *(const char **)(a1 + 712);
    *(_DWORD *)std::string buf = 67240448;
    int v32 = v8;
    __int16 v33 = 2050;
    int v34 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "WsbReg, wifirestart, clients, %{public}d, %{public}ld", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v12 = *(_DWORD *)(a1 + 284);
    uint64_t v13 = *(void *)(a1 + 712);
    int v27 = 67240448;
    int v28 = v12;
    __int16 v29 = 2050;
    uint64_t v30 = v13;
    int v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onWiFiManagerRestartCallback(WiFiManagerClientRef)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  if (*(int *)(a1 + 284) >= 1)
  {
    *(_DWORD *)(a1 + 236) = 0;
    sub_10056CDC0(a1, 1, 1);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete((void *)__p);
  }
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

void sub_10057E1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,os_activity_scope_state_s state,char a28)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  os_activity_scope_leave(&state);
  sub_1019DB560((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_10057E1FC(uint64_t a1)
{
  if (*(void *)(a1 + 296) && *(void *)(a1 + 304))
  {
    CFArrayRef v2 = *(const __CFArray **)(a1 + 520);
    if (v2) {
      CFMutableArrayRef MutableCopy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, v2);
    }
    else {
      CFMutableArrayRef MutableCopy = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    }
    int v8 = MutableCopy;
    CFArrayRef v9 = *(const __CFArray **)(a1 + 528);
    if (v9)
    {
      v26.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 528));
      v26.location = 0;
      CFArrayAppendArray(v8, v9, v26);
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
    uint64_t v10 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      CFIndex Count = CFArrayGetCount(v8);
      uint64_t v13 = *(void *)(a1 + 296);
      uint64_t v12 = *(void *)(a1 + 304);
      *(_DWORD *)std::string buf = 134218496;
      CFIndex v21 = Count;
      __int16 v22 = 2048;
      uint64_t v23 = v12;
      __int16 v24 = 2048;
      uint64_t v25 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Setting %ld background scan networks, fWifiManager, %p, fDpcSource, %p", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BBB78);
      }
      CFArrayGetCount(v8);
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::setBackgroundScanNetworksInternal()", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    if (*(void *)(a1 + 304))
    {
      uint64_t v14 = (*(uint64_t (**)(void, __CFArray *))(**(void **)(a1 + 840) + 16))(*(void *)(a1 + 840), v8);
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      CFIndex v15 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = *(void *)(a1 + 296);
        CFIndex v16 = *(void *)(a1 + 304);
        *(_DWORD *)std::string buf = 134349312;
        CFIndex v21 = v16;
        __int16 v22 = 2050;
        uint64_t v23 = v17;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "WifiService, fWifiManager is NULL, %{public}p, fDpcSource, %{public}p", buf, 0x16u);
      }
      uint64_t v14 = sub_10013D1A0(115, 0);
      if (v14)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        long long v19 = (char *)_os_log_send_and_compose_impl();
        uint64_t v14 = sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::setBackgroundScanNetworksInternal()", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    sub_100583774(v14, v8);
    CFRelease(v8);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
    uint64_t v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 296);
      CFIndex v5 = *(void *)(a1 + 304);
      *(_DWORD *)std::string buf = 134218240;
      CFIndex v21 = v5;
      __int16 v22 = 2048;
      uint64_t v23 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning avoid setBackgroundScanNetworksInternal, fWifiManager is NULL, %p, fDpcSource, %p, shutdown?", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BBB78);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::setBackgroundScanNetworksInternal()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void *sub_10057E76C@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_10057E7E8(uint64_t a1, int a2, int *a3, int *a4)
{
  sub_10057EC68(a1, a2, a3, a4);
  if (*a3 == 12)
  {
    sub_100103240();
    if (sub_10073EC70())
    {
      *(_DWORD *)std::string buf = *a3;
      int v8 = sub_1001072EC(a1, (int *)buf, 1);
      if (v8 == *(_DWORD *)(a1 + 284))
      {
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022BBB38);
        }
        CFArrayRef v9 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = *((void *)a4 + 1);
          int v11 = *a4;
          int v12 = *((unsigned __int8 *)a4 + 4);
          int v13 = *((unsigned __int8 *)a4 + 5);
          *(_DWORD *)std::string buf = 67241474;
          int v23 = v8;
          __int16 v24 = 1026;
          int v25 = a2;
          __int16 v26 = 2082;
          uint64_t v27 = v10;
          __int16 v28 = 1026;
          int v29 = v11;
          __int16 v30 = 1026;
          int v31 = v12;
          __int16 v32 = 1026;
          int v33 = v13;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "@WsbReg, clients, %{public}d, same, idname, %{public}d, %{public}s, rate, %{public}d, active, %{public}d, rollover, %{public}d", buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022BBB38);
          }
          uint64_t v14 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLWifiService::registerForNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::RegInfo &)", "%s\n", v14);
          if (v14 != (char *)buf) {
            free(v14);
          }
        }
      }
      else
      {
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022BBB38);
        }
        CFIndex v15 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v16 = *((void *)a4 + 1);
          int v17 = *a4;
          int v18 = *((unsigned __int8 *)a4 + 4);
          int v19 = *((unsigned __int8 *)a4 + 5);
          *(_DWORD *)std::string buf = 67241474;
          int v23 = v8;
          __int16 v24 = 1026;
          int v25 = a2;
          __int16 v26 = 2082;
          uint64_t v27 = v16;
          __int16 v28 = 1026;
          int v29 = v17;
          __int16 v30 = 1026;
          int v31 = v18;
          __int16 v32 = 1026;
          int v33 = v19;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "@WsbReg, clients, %{public}d, plus, idname, %{public}d, %{public}s, rate, %{public}d, active, %{public}d, rollover, %{public}d", buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022BBB38);
          }
          CFIndex v21 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLWifiService::registerForNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::RegInfo &)", "%s\n", v21);
          if (v21 != (char *)buf) {
            free(v21);
          }
        }
        sub_10057F178(a1, *((uint64_t **)a4 + 1), a2, 0);
        sub_10056CDC0(a1, 1, 0);
        *(_DWORD *)(a1 + 284) = v8;
      }
      sub_100005CB4(a1, (uint64_t)"reg");
    }
  }
  return 1;
}

BOOL sub_10057EC68(uint64_t a1, int a2, int *a3, _OWORD *a4)
{
  int v37 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        int v13 = (uint64_t *)v7;
      }
      else {
        int v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v36 = v10;
      int v16 = *a3;
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          int v23 = (uint64_t *)v17;
        }
        else {
          int v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (!v24) {
        goto LABEL_42;
      }
      uint64_t v25 = a1 + 64;
      do
      {
        int v26 = *(_DWORD *)(v24 + 32);
        BOOL v27 = v26 < v16;
        if (v26 >= v16) {
          __int16 v28 = (uint64_t *)v24;
        }
        else {
          __int16 v28 = (uint64_t *)(v24 + 8);
        }
        if (!v27) {
          uint64_t v25 = v24;
        }
        uint64_t v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        uint64_t v33 = *(void *)(v25 + 56);
        *(void *)std::string buf = &v37;
        *(_OWORD *)(sub_1005893C0((uint64_t **)(v25 + 40), &v37, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 5) = *a4;
        *(_WORD *)std::string buf = -256;
        uint8_t buf[8] = 0;
        char v45 = 0;
        memset(v46, 0, sizeof(v46));
        uint64_t v47 = 0;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_1005897C8();
        }
        *(void *)uint64_t v38 = &v46[8];
        sub_1000D7F78((void ***)v38);
        if (v45 && v44 < 0) {
          operator delete(*(void **)((char *)__p + 2));
        }
        if (v33) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        char v29 = byte_10241C710;
        *(_DWORD *)uint64_t v38 = *a3;
        *(void *)std::string buf = v38;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), (int *)v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v29;
        *(_DWORD *)uint64_t v38 = *a3;
        *(void *)std::string buf = v38;
        __int16 v30 = sub_10044715C((uint64_t **)(a1 + 56), (int *)v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        int v31 = (std::__shared_weak_count *)v30[9];
        v30[8] = 0;
        v30[9] = 0;
        if (v31) {
          sub_1000DB0A0(v31);
        }
        *(_DWORD *)uint64_t v38 = *a3;
        *(void *)std::string buf = v38;
        __int16 v32 = sub_10044715C((uint64_t **)(a1 + 56), (int *)v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)std::string buf = &v37;
        *(_OWORD *)(sub_1005893C0(v32 + 5, &v37, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 5) = *a4;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v20 == v18)
      {
        *(_DWORD *)std::string buf = *a3;
        sub_1000EDED4((uint64_t **)(v36 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BBAF8);
  }
  uint64_t v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    CFIndex v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      CFIndex v15 = (void *)*v15;
    }
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v42 = 1026;
    __p[0] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BBAF8);
    }
    int v34 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v34 = (void *)*v34;
    }
    *(_DWORD *)uint64_t v38 = 136446466;
    *(void *)&v38[4] = v34;
    __int16 v39 = 1026;
    int v40 = a2;
    __int16 v35 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]", "%s\n", v35);
    if (v35 != buf) {
      free(v35);
    }
    return 0;
  }
  return result;
}

void sub_10057F158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_100570A18((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10057F178(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  v110[0] = a3;
  if (*(double *)(a1 + 680) == 0.0)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    CFIndex v15 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = *(_DWORD *)(a1 + 284);
      int v17 = *(unsigned __int8 *)(a1 + 246);
      *(_DWORD *)std::string buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v16;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "WsbClients, status, holdoff, clients, %{public}d, samplescan, %{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022BBB38);
      }
      int v18 = *(_DWORD *)(a1 + 284);
      int v19 = *(unsigned __int8 *)(a1 + 246);
      LODWORD(v119) = 67240448;
      HIDWORD(v119) = v18;
      LOWORD(v120) = 1026;
      *(_DWORD *)((char *)&v120 + 2) = v19;
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)", "%s\n", v20);
      if (v20 != buf) {
        free(v20);
      }
    }
  }
  else
  {
    double Current = CFAbsoluteTimeGetCurrent();
    double v8 = *(double *)(a1 + 680);
    double v9 = *(double *)(a1 + 688);
    int v10 = *(_DWORD *)(a1 + 712);
    sub_10048B72C((uint64_t)&v119);
    std::ostream::operator<<();
    std::stringbuf::str();
    double v11 = Current - v8;
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    BOOL v12 = qword_1024193B8;
    double v13 = v11 / 60.0;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = v108;
      if (v109 < 0) {
        uint64_t v14 = (void **)v108[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = v14;
      *(_WORD *)&unsigned char buf[12] = 2050;
      double v118 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "WsbMetric, clients, %{public}s, delta, %{public}.1f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022BBB38);
      }
      long long v71 = v108;
      if (v109 < 0) {
        long long v71 = (void **)v108[0];
      }
      *(_DWORD *)char v114 = 136446466;
      *(void *)&v114[4] = v71;
      *(_WORD *)&v114[12] = 2050;
      *(double *)&v114[14] = v13;
      uint64_t v72 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)", "%s\n", v72);
      if (v72 != buf) {
        free(v72);
      }
    }
    double v101 = _NSConcreteStackBlock;
    uint64_t v102 = 3321888768;
    char v103 = sub_100580798;
    char v104 = &unk_1022BB998;
    if (SHIBYTE(v109) < 0)
    {
      sub_1000DC48C(&v105, v108[0], (unint64_t)v108[1]);
    }
    else
    {
      long long v105 = *(_OWORD *)v108;
      uint64_t v106 = v109;
    }
    double v107 = v13;
    AnalyticsSendEventLazy();
    if (v10 >= 1)
    {
      if ((Current - v9) / 60.0 >= 1.0)
      {
        int v21 = *(_DWORD *)(a1 + 720);
        BOOL v22 = "active:off";
        if (v21 == 1) {
          BOOL v22 = "active:fences";
        }
        if (v21 == 2) {
          int v23 = "active:fake";
        }
        else {
          int v23 = v22;
        }
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022BBB38);
        }
        uint64_t v24 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = v23;
          *(_WORD *)&unsigned char buf[12] = 2050;
          double v118 = (Current - v9) / 60.0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "WsbMetric, regmode, %{public}s, duration, %{public}.1f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022BBB38);
          }
          *(_DWORD *)char v114 = 136446466;
          *(void *)&v114[4] = v23;
          *(_WORD *)&v114[12] = 2050;
          *(double *)&v114[14] = (Current - v9) / 60.0;
          uint64_t v73 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)", "%s\n", v73);
          if (v73 != buf) {
            free(v73);
          }
        }
        uint64_t v95 = _NSConcreteStackBlock;
        uint64_t v96 = 3221225472;
        long long v97 = sub_100580890;
        long long v98 = &unk_1022AE8E0;
        long long v99 = v23;
        double v100 = (Current - v9) / 60.0;
        AnalyticsSendEventLazy();
      }
      if (v13 >= 1.0)
      {
        int v27 = *(_DWORD *)(a1 + 724);
        __int16 v28 = "rollover:off";
        if (v27 == 1) {
          __int16 v28 = "rollover:partial";
        }
        if (v27 == 2) {
          char v29 = "rollover:all";
        }
        else {
          char v29 = v28;
        }
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022BBB38);
        }
        __int16 v30 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = v29;
          *(_WORD *)&unsigned char buf[12] = 2050;
          double v118 = v13;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "WsbMetric, regmode, %{public}s, duration, %{public}.1f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022BBB38);
          }
          *(_DWORD *)char v114 = 136446466;
          *(void *)&v114[4] = v29;
          *(_WORD *)&v114[12] = 2050;
          *(double *)&v114[14] = v13;
          __int16 v74 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)", "%s\n", v74);
          if (v74 != buf) {
            free(v74);
          }
        }
        std::string v89 = _NSConcreteStackBlock;
        uint64_t v90 = 3221225472;
        uint64_t v91 = sub_100580950;
        int v92 = &unk_1022AE8E0;
        __int16 v93 = v29;
        double v94 = v13;
        AnalyticsSendEventLazy();
        if (*(unsigned char *)(a1 + 728)) {
          int v31 = "profile:dynamic";
        }
        else {
          int v31 = "profile:standard";
        }
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022BBB38);
        }
        __int16 v32 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = v31;
          *(_WORD *)&unsigned char buf[12] = 2050;
          double v118 = v13;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "WsbMetric, regmode, %{public}s, duration, %{public}.1f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022BBB38);
          }
          *(_DWORD *)char v114 = 136446466;
          *(void *)&v114[4] = v31;
          *(_WORD *)&v114[12] = 2050;
          *(double *)&v114[14] = v13;
          int v75 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)", "%s\n", v75);
          if (v75 != buf) {
            free(v75);
          }
        }
        long long v83 = _NSConcreteStackBlock;
        uint64_t v84 = 3221225472;
        int v85 = sub_100580A10;
        uint64_t v86 = &unk_1022AE8E0;
        char v87 = v31;
        double v88 = v13;
        AnalyticsSendEventLazy();
        int v77 = a4;
        uint64_t v33 = *(void **)(a1 + 696);
        if (v33 != (void *)(a1 + 704))
        {
          do
          {
            sub_10048B72C((uint64_t)v114);
            uint64_t v36 = sub_100132EFC(v114, (uint64_t)"client:", 7);
            size_t v37 = strlen((const char *)v33[5]);
            sub_100132EFC(v36, v33[5], v37);
            std::stringbuf::str();
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1022BBB38);
            }
            uint64_t v38 = qword_1024193B8;
            if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
            {
              __int16 v39 = v81;
              if (v82 < 0) {
                __int16 v39 = (void **)v81[0];
              }
              *(_DWORD *)std::string buf = 136446466;
              *(void *)&uint8_t buf[4] = v39;
              *(_WORD *)&unsigned char buf[12] = 2050;
              double v118 = v13;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "WsbMetric, regmode, %{public}s, duration, %{public}.1f", buf, 0x16u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193B0 != -1) {
                dispatch_once(&qword_1024193B0, &stru_1022BBB38);
              }
              int v43 = v81;
              if (v82 < 0) {
                int v43 = (void **)v81[0];
              }
              v110[1] = 136446466;
              int v111 = v43;
              __int16 v112 = 2050;
              double v113 = v13;
              char v44 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)", "%s\n", v44);
              if (v44 != buf) {
                free(v44);
              }
            }
            if (SHIBYTE(v82) < 0)
            {
              sub_1000DC48C(&__p, v81[0], (unint64_t)v81[1]);
            }
            else
            {
              long long __p = *(_OWORD *)v81;
              uint64_t v79 = v82;
            }
            double v80 = v13;
            AnalyticsSendEventLazy();
            if (SHIBYTE(v79) < 0) {
              operator delete((void *)__p);
            }
            if (SHIBYTE(v82) < 0) {
              operator delete(v81[0]);
            }
            *(void *)char v114 = v34;
            *(void *)&v114[*(void *)(v34 - 24)] = v35;
            if (v116 < 0) {
              operator delete(v115);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
            int v40 = (void *)v33[1];
            if (v40)
            {
              do
              {
                long long v41 = v40;
                int v40 = (void *)*v40;
              }
              while (v40);
            }
            else
            {
              do
              {
                long long v41 = (void *)v33[2];
                BOOL v42 = *v41 == (void)v33;
                uint64_t v33 = v41;
              }
              while (!v42);
            }
            uint64_t v33 = v41;
          }
          while (v41 != (void *)(a1 + 704));
        }
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022BBB38);
        }
        a4 = v77;
        char v45 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 134349056;
          *(double *)&uint8_t buf[4] = v13;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "WsbMetric, regmode, total, duration, %{public}.1f", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022BBB38);
          }
          *(_DWORD *)char v114 = 134349056;
          *(double *)&v114[4] = v13;
          uint64_t v76 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)", "%s\n", v76);
          if (v76 != buf) {
            free(v76);
          }
          a4 = v77;
        }
        AnalyticsSendEventLazy();
      }
      else
      {
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022BBB38);
        }
        uint64_t v25 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "WsbMetric, regmode, subminute", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022BBB38);
          }
          *(_WORD *)char v114 = 0;
          int v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)", "%s\n", v26);
          if (v26 != buf) {
            free(v26);
          }
        }
      }
    }
    *(double *)(a1 + 680) = Current;
    *(double *)(a1 + 68_Block_object_dispose(&STACK[0x850], 8) = Current;
    if (SHIBYTE(v106) < 0) {
      operator delete((void *)v105);
    }
    if (SHIBYTE(v109) < 0) {
      operator delete(v108[0]);
    }
    if (v122 < 0) {
      operator delete(v121);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (a4)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022BBB38);
    }
    uint64_t v46 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      int v47 = *(_DWORD *)(a1 + 284);
      int v48 = *(unsigned __int8 *)(a1 + 246);
      *(_DWORD *)std::string buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v47;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v48;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "WsbClients, status, reportonly, clients, %{public}d, dummyscan, %{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022BBB38);
      }
      int v49 = *(_DWORD *)(a1 + 284);
      int v50 = *(unsigned __int8 *)(a1 + 246);
      LODWORD(v119) = 67240448;
      HIDWORD(v119) = v49;
      LOWORD(v120) = 1026;
      *(_DWORD *)((char *)&v120 + 2) = v50;
      uint64_t v51 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::wsbReportClientMetrics(const char *, int, BOOL)", "%s\n", v51);
      if (v51 != buf) {
        free(v51);
      }
    }
  }
  else
  {
    uint64_t v52 = *(void *)(a1 + 64);
    if (!v52) {
      goto LABEL_146;
    }
    uint64_t v53 = a1 + 64;
    do
    {
      int v54 = *(_DWORD *)(v52 + 32);
      BOOL v55 = v54 < 12;
      if (v54 >= 12) {
        uint64_t v56 = (uint64_t *)v52;
      }
      else {
        uint64_t v56 = (uint64_t *)(v52 + 8);
      }
      if (!v55) {
        uint64_t v53 = v52;
      }
      uint64_t v52 = *v56;
    }
    while (*v56);
    if (v53 != a1 + 64 && *(int *)(v53 + 32) <= 12 && (uint64_t v57 = *(void *)(v53 + 56)) != 0)
    {
      __int16 v58 = *(void **)(v53 + 40);
      double v59 = (void *)(v53 + 48);
      if (v58 == (void *)(v53 + 48))
      {
        int v69 = 0;
        *(_DWORD *)(a1 + 724) = 0;
      }
      else
      {
        int v60 = 0;
        BOOL v61 = 0;
        char v62 = *(unsigned char *)(a1 + 728);
        do
        {
          char v63 = *((unsigned char *)v58 + 44) | v61;
          BOOL v61 = v63 != 0;
          int v64 = (void *)v58[1];
          int v65 = v58;
          if (v64)
          {
            do
            {
              int v66 = v64;
              int v64 = (void *)*v64;
            }
            while (v64);
          }
          else
          {
            do
            {
              int v66 = (void *)v65[2];
              BOOL v42 = *v66 == (void)v65;
              int v65 = v66;
            }
            while (!v42);
          }
          v60 += *((unsigned __int8 *)v58 + 45);
          v62 |= *((_DWORD *)v58 + 10) < 3600;
          __int16 v58 = v66;
        }
        while (v66 != v59);
        *(unsigned char *)(a1 + 72_Block_object_dispose(&STACK[0x850], 8) = v62;
        if (v57 == v60) {
          int v67 = 2;
        }
        else {
          int v67 = 1;
        }
        if (v60) {
          int v68 = v67;
        }
        else {
          int v68 = 0;
        }
        *(_DWORD *)(a1 + 724) = v68;
        if (v63)
        {
          if (*(unsigned char *)(a1 + 246)) {
            int v69 = 2;
          }
          else {
            int v69 = 1;
          }
        }
        else
        {
          int v69 = 0;
        }
      }
      *(_DWORD *)(a1 + 720) = v69;
    }
    else
    {
LABEL_146:
      sub_1000F5BB0(a1 + 696, *(void **)(a1 + 704));
      *(void *)(a1 + 696) = a1 + 704;
      *(void *)(a1 + 712) = 0;
      *(void *)(a1 + 704) = 0;
      *(void *)(a1 + 720) = 0;
      *(unsigned char *)(a1 + 72_Block_object_dispose(&STACK[0x850], 8) = 0;
    }
    __int16 v70 = (uint64_t **)(a1 + 696);
    if (a2)
    {
      *(void *)std::string buf = v110;
      sub_1000FEE0C(v70, v110, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5] = a2;
    }
    else
    {
      sub_10017C890((uint64_t)v70, v110);
    }
  }
}

void sub_1005806D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  if (a62 < 0) {
    operator delete(__p);
  }
  if (a69 < 0) {
    operator delete(a64);
  }
  sub_10048B8C4((uint64_t)&STACK[0x950]);
  _Unwind_Resume(a1);
}

uint64_t sub_100580788()
{
  return 1;
}

uint64_t sub_100580790()
{
  return 1;
}

NSDictionary *sub_100580798(uint64_t a1)
{
  v4[0] = @"clients";
  CFArrayRef v2 = (void *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    CFArrayRef v2 = (void *)*v2;
  }
  v4[1] = @"duration";
  v5[0] = +[NSString stringWithUTF8String:v2];
  v5[1] = +[NSNumber numberWithDouble:*(double *)(a1 + 56)];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];
}

void *sub_10058084C(uint64_t a1, uint64_t a2)
{
  BOOL result = (void *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0) {
    return sub_1000DC48C(result, *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  long long v3 = *(_OWORD *)(a2 + 32);
  result[2] = *(void *)(a2 + 48);
  *(_OWORD *)BOOL result = v3;
  return result;
}

void sub_10058087C(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
}

NSDictionary *sub_100580890(uint64_t a1)
{
  v4[0] = @"active";
  v3[0] = @"mode";
  v3[1] = @"submode";
  v4[1] = +[NSString stringWithUTF8String:*(void *)(a1 + 32)];
  void v3[2] = @"duration";
  void v4[2] = +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:3];
}

NSDictionary *sub_100580950(uint64_t a1)
{
  v4[0] = @"rollover";
  v3[0] = @"mode";
  v3[1] = @"submode";
  v4[1] = +[NSString stringWithUTF8String:*(void *)(a1 + 32)];
  void v3[2] = @"duration";
  void v4[2] = +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:3];
}

NSDictionary *sub_100580A10(uint64_t a1)
{
  v4[0] = @"profile";
  v3[0] = @"mode";
  v3[1] = @"submode";
  v4[1] = +[NSString stringWithUTF8String:*(void *)(a1 + 32)];
  void v3[2] = @"duration";
  void v4[2] = +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:3];
}

NSDictionary *sub_100580AD0(uint64_t a1)
{
  v5[0] = @"client";
  v4[0] = @"mode";
  v4[1] = @"submode";
  CFArrayRef v2 = (void *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    CFArrayRef v2 = (void *)*v2;
  }
  v5[1] = +[NSString stringWithUTF8String:v2];
  void v4[2] = @"duration";
  void v5[2] = +[NSNumber numberWithDouble:*(double *)(a1 + 56)];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:3];
}

NSDictionary *sub_100580B9C(uint64_t a1)
{
  v2[0] = @"mode";
  v2[1] = @"submode";
  v3[0] = @"total";
  v3[1] = @"total";
  void v2[2] = @"duration";
  void v3[2] = +[NSNumber numberWithDouble:*(double *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:v3 forKeys:v2 count:3];
}

BOOL sub_100580C40(void *a1, uint64_t a2)
{
  uint64_t v4 = a1 + 103;
  (*(void (**)(void *))(a1[103] + 16))(a1 + 103);
  if (!a1[39] || !a1[38])
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
    int v10 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(theArray[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning no device / manager", (uint8_t *)theArray, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(theArray, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BBB78);
      }
      BOOL v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::getHostedNetwork(CLWifiService_Type::AccessPoint &) const", "%s\n", v12);
      if (v12 != (char *)theArray) {
        free(v12);
      }
    }
    goto LABEL_15;
  }
  theArray[0] = 0;
  if (WiFiDeviceClientCopyHostedNetworks()) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = theArray[0] == 0;
  }
  if (v5)
  {
LABEL_15:
    BOOL v9 = 0;
    goto LABEL_16;
  }
  BOOL v9 = CFArrayGetCount(0) >= 1
    && (ValueAtIndex = CFArrayGetValueAtIndex(theArray[0], 0),
        CFTypeID v7 = CFGetTypeID(ValueAtIndex),
        uint64_t TypeID = WiFiNetworkGetTypeID(),
        v7 == TypeID)
    && sub_100576660(TypeID, (uint64_t)ValueAtIndex, a2, 1);
  CFRelease(theArray[0]);
LABEL_16:
  (*(void (**)(void *))(*v4 + 24))(v4);
  return v9;
}

void sub_100580EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100580EFC()
{
  unsigned int v4 = 0;
  sub_1000C7F88(&v2);
  int v0 = sub_10006EF84(v2, "WifiScanIterations", &v4);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  if (v0) {
    return v4;
  }
  else {
    return 1;
  }
}

void sub_100580F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100580F78()
{
  int v4 = 0;
  sub_1000C7F88(&v2);
  int v0 = sub_10006EF84(v2, "WifiScanDwellTime", &v4);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  if (v0) {
    return v4;
  }
  else {
    return 110;
  }
}

void sub_100580FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

__CFDictionary *sub_100580FF8(uint64_t a1, int a2, int a3, int a4, _DWORD **a5, void *a6, uint64_t a7, int a8, char a9)
{
  int v37 = a3;
  int v38 = a2;
  int v35 = a7;
  int valuePtr = a4;
  int v34 = a8;
  CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v37);
  CFNumberRef v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v35);
  CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v38);
  CFNumberRef v15 = CFNumberCreate(0, kCFNumberSInt32Type, &unk_101D236E4);
  CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v34);
  CFNumberRef v17 = v16;
  if (v11) {
    BOOL v18 = v12 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18 || v13 == 0 || v14 == 0 || v15 == 0 || v16 == 0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v23 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134350336;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&unsigned char buf[14] = v12;
      *(_WORD *)&buf[22] = 2050;
      *(void *)&unsigned char buf[24] = v13;
      *(_WORD *)int v50 = 2050;
      *(void *)&v50[2] = v14;
      *(_WORD *)&v50[10] = 2050;
      *(void *)&v50[12] = v15;
      *(_WORD *)&v50[20] = 2050;
      *(void *)&v50[22] = v17;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "could not create scan params mode %{public}p type %{public}p dwell %{public}p scans %{public}p flag %{public}p age %{public}p", buf, 0x3Eu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      int v39 = 134350336;
      *(void *)int v40 = v11;
      *(_WORD *)&v40[8] = 2050;
      CFNumberRef v41 = v12;
      *(_WORD *)BOOL v42 = 2050;
      *(void *)&v42[2] = v13;
      __int16 v43 = 2050;
      CFNumberRef v44 = v14;
      __int16 v45 = 2050;
      CFNumberRef v46 = v15;
      __int16 v47 = 2050;
      CFNumberRef v48 = v17;
      char v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CFMutableDictionaryRef CLWifiService::createScanOptions(int, apple80211_scan_type, int, const Iter &, const Iter &, cl::chrono::milliseconds, cl::chrono::seconds, BOOL) [Iter = const int *]", "%s\n", v29);
      if (v29 != buf) {
        free(v29);
      }
    }
    Mutable = 0;
  }
  else
  {
    int v31 = a6;
    *(void *)std::string buf = kCFBooleanFalse;
    *(void *)&uint8_t buf[8] = kCFBooleanTrue;
    *(void *)&uint8_t buf[16] = v11;
    *(void *)&unsigned char buf[24] = v12;
    *(void *)int v50 = v13;
    *(void *)&v50[8] = v14;
    if (a9) {
      CFBooleanRef v25 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v25 = kCFBooleanFalse;
    }
    *(void *)&v50[16] = v16;
    *(void *)&v50[24] = v25;
    CFBooleanRef v51 = kCFBooleanFalse;
    Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 9, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    for (uint64_t i = 0; i != 9; ++i)
      CFDictionarySetValue(Mutable, off_1022BBC78[i], *(const void **)&buf[i * 8]);
    if (*a5 != (_DWORD *)*v31) {
      sub_100589970(a1, a5, v31, v15, Mutable);
    }
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (!Mutable)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
    int v27 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v38;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v37;
      *(_WORD *)&unsigned char buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = valuePtr;
      *(_WORD *)&buf[20] = 2048;
      *(void *)&buf[22] = a7;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#Warning failed to create scan options (numScans=%d, scan_type=%d, scanModes=%d, dwellTime=%lld)", buf, 0x1Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BBB78);
      }
      int v39 = 67109888;
      *(_DWORD *)int v40 = v38;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = v37;
      LOWORD(v41) = 1024;
      *(_DWORD *)((char *)&v41 + 2) = valuePtr;
      HIWORD(v41) = 2048;
      *(void *)BOOL v42 = a7;
      __int16 v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CFMutableDictionaryRef CLWifiService::createScanOptions(int, apple80211_scan_type, int, const Iter &, const Iter &, cl::chrono::milliseconds, cl::chrono::seconds, BOOL) [Iter = const int *]", "%s\n", v30);
      if (v30 != buf) {
        free(v30);
      }
    }
  }
  return Mutable;
}

__CFDictionary *sub_10058156C(uint64_t a1, int a2, int a3, int a4, _DWORD **a5, void *a6, uint64_t a7, int a8, char a9)
{
  int v37 = a3;
  int v38 = a2;
  int v35 = a7;
  int valuePtr = a4;
  int v34 = a8;
  CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v37);
  CFNumberRef v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v35);
  CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v38);
  CFNumberRef v15 = CFNumberCreate(0, kCFNumberSInt32Type, &unk_101D236E8);
  CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v34);
  CFNumberRef v17 = v16;
  if (v11) {
    BOOL v18 = v12 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18 || v13 == 0 || v14 == 0 || v15 == 0 || v16 == 0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v23 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134350336;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&unsigned char buf[14] = v12;
      *(_WORD *)&buf[22] = 2050;
      *(void *)&unsigned char buf[24] = v13;
      *(_WORD *)int v50 = 2050;
      *(void *)&v50[2] = v14;
      *(_WORD *)&v50[10] = 2050;
      *(void *)&v50[12] = v15;
      *(_WORD *)&v50[20] = 2050;
      *(void *)&v50[22] = v17;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "could not create scan params mode %{public}p type %{public}p dwell %{public}p scans %{public}p flag %{public}p age %{public}p", buf, 0x3Eu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      int v39 = 134350336;
      *(void *)int v40 = v11;
      *(_WORD *)&v40[8] = 2050;
      CFNumberRef v41 = v12;
      *(_WORD *)BOOL v42 = 2050;
      *(void *)&v42[2] = v13;
      __int16 v43 = 2050;
      CFNumberRef v44 = v14;
      __int16 v45 = 2050;
      CFNumberRef v46 = v15;
      __int16 v47 = 2050;
      CFNumberRef v48 = v17;
      char v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CFMutableDictionaryRef CLWifiService::createScanOptions(int, apple80211_scan_type, int, const Iter &, const Iter &, cl::chrono::milliseconds, cl::chrono::seconds, BOOL) [Iter = int *]", "%s\n", v29);
      if (v29 != buf) {
        free(v29);
      }
    }
    Mutable = 0;
  }
  else
  {
    int v31 = a6;
    *(void *)std::string buf = kCFBooleanFalse;
    *(void *)&uint8_t buf[8] = kCFBooleanTrue;
    *(void *)&uint8_t buf[16] = v11;
    *(void *)&unsigned char buf[24] = v12;
    *(void *)int v50 = v13;
    *(void *)&v50[8] = v14;
    if (a9) {
      CFBooleanRef v25 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v25 = kCFBooleanFalse;
    }
    *(void *)&v50[16] = v16;
    *(void *)&v50[24] = v25;
    CFBooleanRef v51 = kCFBooleanFalse;
    Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 9, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    for (uint64_t i = 0; i != 9; ++i)
      CFDictionarySetValue(Mutable, off_1022BBC78[i], *(const void **)&buf[i * 8]);
    if (*a5 != (_DWORD *)*v31) {
      sub_100589C74(a1, a5, v31, v15, Mutable);
    }
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (!Mutable)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
    int v27 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v38;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v37;
      *(_WORD *)&unsigned char buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = valuePtr;
      *(_WORD *)&buf[20] = 2048;
      *(void *)&buf[22] = a7;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#Warning failed to create scan options (numScans=%d, scan_type=%d, scanModes=%d, dwellTime=%lld)", buf, 0x1Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BBB78);
      }
      int v39 = 67109888;
      *(_DWORD *)int v40 = v38;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = v37;
      LOWORD(v41) = 1024;
      *(_DWORD *)((char *)&v41 + 2) = valuePtr;
      HIWORD(v41) = 2048;
      *(void *)BOOL v42 = a7;
      __int16 v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CFMutableDictionaryRef CLWifiService::createScanOptions(int, apple80211_scan_type, int, const Iter &, const Iter &, cl::chrono::milliseconds, cl::chrono::seconds, BOOL) [Iter = int *]", "%s\n", v30);
      if (v30 != buf) {
        free(v30);
      }
    }
  }
  return Mutable;
}

uint64_t sub_100581AE0(void *a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = a1 + 103;
  (*(void (**)(void *))(a1[103] + 16))(a1 + 103);
  if (a1 + 54 != a2) {
    sub_1000DAC8C(a2, a1[54], a1[55], 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a1[55] - a1[54]) >> 3));
  }
  *a3 = a1[53];
  return (*(uint64_t (**)(void *))(a1[103] + 24))(v6);
}

void sub_100581BB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100581BCC(void *a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = a1 + 103;
  int v23 = a1 + 103;
  (*(void (**)(void *))(a1[103] + 16))(a1 + 103);
  __int16 v24 = 256;
  uint64_t v7 = a1[58];
  uint64_t v8 = a1[59];
  if (v7 != v8)
  {
    BOOL v9 = (long long *)(v7 + 8);
    do
    {
      uint64_t v10 = (uint64_t)v9 - 8;
      uint64_t v16 = *((void *)v9 - 1);
      if (*((char *)v9 + 23) < 0)
      {
        sub_1000DC48C(&__p, *(void **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v11 = *v9;
        uint64_t v18 = *((void *)v9 + 2);
        long long __p = v11;
      }
      long long v12 = *(long long *)((char *)v9 + 24);
      long long v13 = *(long long *)((char *)v9 + 40);
      long long v14 = *(long long *)((char *)v9 + 56);
      uint64_t v22 = *((void *)v9 + 9);
      long long v20 = v13;
      long long v21 = v14;
      long long v19 = v12;
      sub_100581D48(a2, (uint64_t)&v16);
      if (SHIBYTE(v18) < 0) {
        operator delete((void *)__p);
      }
      BOOL v9 = (long long *)((char *)v9 + 88);
    }
    while (v10 + 88 != v8);
  }
  *a3 = a1[57];
  return (*(uint64_t (**)(void *))(a1[103] + 24))(v6);
}

void sub_100581D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
}

uint64_t sub_100581D48(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    uint64_t v13 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) > 0x2E8BA2E8BA2E8BALL) {
      sub_1001D7FD4();
    }
    unint64_t v15 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x1745D1745D1745DLL) {
      unint64_t v16 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v16 = v14;
    }
    v23[4] = result;
    if (v16) {
      CFNumberRef v17 = (char *)sub_1000DA8B4(result, v16);
    }
    else {
      CFNumberRef v17 = 0;
    }
    uint64_t v18 = &v17[88 * v13];
    v23[0] = v17;
    v23[1] = v18;
    v23[3] = &v17[88 * v16];
    *(void *)uint64_t v18 = *(void *)a2;
    long long v19 = *(_OWORD *)(a2 + 8);
    *((void *)v18 + 3) = *(void *)(a2 + 24);
    *(_OWORD *)(v18 + _Block_object_dispose(&STACK[0x850], 8) = v19;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + _Block_object_dispose(&STACK[0x850], 8) = 0;
    long long v21 = *(_OWORD *)(a2 + 48);
    long long v20 = *(_OWORD *)(a2 + 64);
    uint64_t v22 = *(void *)(a2 + 80);
    *((_OWORD *)v18 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)v18 + 3) = v21;
    *((void *)v18 + 10) = v22;
    *((_OWORD *)v18 + 4) = v20;
    void v23[2] = v18 + 88;
    sub_1001F89D8(a1, v23);
    uint64_t v12 = a1[1];
    uint64_t result = sub_1001F8BA4((uint64_t)v23);
  }
  else
  {
    *(void *)unint64_t v7 = *(void *)a2;
    long long v8 = *(_OWORD *)(a2 + 8);
    *(void *)(v7 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(v7 + _Block_object_dispose(&STACK[0x850], 8) = v8;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + _Block_object_dispose(&STACK[0x850], 8) = 0;
    long long v9 = *(_OWORD *)(a2 + 32);
    long long v10 = *(_OWORD *)(a2 + 48);
    long long v11 = *(_OWORD *)(a2 + 64);
    *(void *)(v7 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(v7 + 4_Block_object_dispose(&STACK[0x850], 8) = v10;
    *(_OWORD *)(v7 + 64) = v11;
    *(_OWORD *)(v7 + 32) = v9;
    uint64_t v12 = v7 + 88;
    a1[1] = v7 + 88;
  }
  a1[1] = v12;
  return result;
}

void sub_100581EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001F8BA4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100581EDC(void *a1, uint64_t *a2, void *a3)
{
  unint64_t v6 = a1 + 103;
  (*(void (**)(void *))(a1[103] + 16))(a1 + 103);
  if (a1 + 62 != a2) {
    sub_1000DAC8C(a2, a1[62], a1[63], 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a1[63] - a1[62]) >> 3));
  }
  *a3 = a1[61];
  return (*(uint64_t (**)(void *))(a1[103] + 24))(v6);
}

void sub_100581FB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100581FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(char *)(a5 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a5, *(void *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)a5;
    uint64_t v14 = *(void *)(a5 + 16);
  }
  LOBYTE(__p[0]) = 0;
  char v12 = 0;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, void **, void **))(*(void *)a1 + 256))(a1, a2, a3, 0, a4, __dst, __p);
  if (v12 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
  return v9;
}

void sub_1005820AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a12) {
    sub_101A6536C((uint64_t)&a9);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005820D8(uint64_t a1, uint64_t a2, int a3, int a4, int a5, void **a6, uint64_t a7)
{
  char v12 = sub_100D54EB0(a2);
  if (a5) {
    int v13 = 2;
  }
  else {
    int v13 = 1;
  }
  int v26 = a5;
  int v27 = v13;
  if (a5) {
    uint64_t v14 = "passive";
  }
  else {
    uint64_t v14 = "active";
  }
  if (a3) {
    unint64_t v15 = "low";
  }
  else {
    unint64_t v15 = "normal";
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  unint64_t v16 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    CFNumberRef v17 = a6;
    if (*((char *)a6 + 23) < 0) {
      CFNumberRef v17 = *a6;
    }
    *(_DWORD *)std::string buf = 136446978;
    *(void *)int v64 = v17;
    *(_WORD *)&v64[8] = 2082;
    int v65 = v12;
    *(_WORD *)int v66 = 2082;
    *(void *)&_OWORD v66[2] = v14;
    __int16 v67 = 2082;
    int v68 = v15;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "WsMetric, scanrequest, %{public}s, %{public}s, %{public}s, %{public}s", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    uint64_t v22 = a6;
    if (*((char *)a6 + 23) < 0) {
      uint64_t v22 = *a6;
    }
    int v54 = 136446978;
    BOOL v55 = v22;
    __int16 v56 = 2082;
    uint64_t v57 = v12;
    __int16 v58 = 2082;
    double v59 = v14;
    __int16 v60 = 2082;
    BOOL v61 = v15;
    int v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLWifiService::startScan(CLWifiService_Type::ScanType, BOOL, BOOL, BOOL, std::string, const std::optional<CLWifiService_Type::Channels> &)", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
  int v37 = _NSConcreteStackBlock;
  uint64_t v38 = 3321888768;
  int v39 = sub_100582698;
  int v40 = &unk_1022BB9C8;
  if (*((char *)a6 + 23) < 0)
  {
    sub_1000DC48C(&v41, *a6, (unint64_t)a6[1]);
  }
  else
  {
    long long v41 = *(_OWORD *)a6;
    BOOL v42 = a6[2];
  }
  __int16 v43 = v12;
  CFNumberRef v44 = v14;
  __int16 v45 = v15;
  AnalyticsSendEventLazy();
  if (*((char *)a6 + 23) < 0)
  {
    sub_1000DC48C(__p, *a6, (unint64_t)a6[1]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a6;
    uint64_t v36 = a6[2];
  }
  sub_100582798(a1, a2, v27, a3, a4, (uint64_t)__p, a7, &v54);
  if (SHIBYTE(v36) < 0) {
    operator delete(__p[0]);
  }
  if (v62)
  {
    sub_1001F6F78((uint64_t)v30, (uint64_t *)&v54);
    uint64_t v18 = sub_1005667D4(a1, v30);
    if (v34 < 0) {
      operator delete(v33);
    }
    if (v31)
    {
      __int16 v32 = v31;
      operator delete(v31);
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
    long long v19 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v20 = *(unsigned __int8 *)(a7 + 24);
      *(_DWORD *)std::string buf = 67109888;
      *(_DWORD *)int v64 = a2;
      *(_WORD *)&v64[4] = 1024;
      *(_DWORD *)&unsigned char v64[6] = a3;
      LOWORD(v65) = 1024;
      *(_DWORD *)((char *)&v65 + 2) = v26;
      HIWORD(v65) = 1026;
      *(_DWORD *)int v66 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Unable to convert type: %d, isLowPriority: %d, isPassiveScan: %d, w/ overriding channels: %{public}d to scan parameters. Not attempting to scan", buf, 0x1Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BBB78);
      }
      int v24 = *(unsigned __int8 *)(a7 + 24);
      int v46 = 67109888;
      int v47 = a2;
      __int16 v48 = 1024;
      int v49 = a3;
      __int16 v50 = 1024;
      int v51 = v26;
      __int16 v52 = 1026;
      int v53 = v24;
      CFBooleanRef v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLWifiService::startScan(CLWifiService_Type::ScanType, BOOL, BOOL, BOOL, std::string, const std::optional<CLWifiService_Type::Channels> &)", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    uint64_t v18 = 0;
  }
  sub_10058816C((uint64_t)&v54);
  if (SHIBYTE(v42) < 0) {
    operator delete((void *)v41);
  }
  return v18;
}

void sub_100582634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

NSDictionary *sub_100582698(uint64_t a1)
{
  v5[0] = @"requester";
  uint64_t v2 = (void *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v2 = (void *)*v2;
  }
  v6[0] = +[NSString stringWithUTF8String:v2];
  v5[1] = @"type";
  v6[1] = +[NSString stringWithUTF8String:*(void *)(a1 + 56)];
  void v5[2] = @"activepassive";
  _DWORD v6[2] = +[NSString stringWithUTF8String:*(void *)(a1 + 64)];
  void v5[3] = @"priority";
  long long v3 = +[NSString stringWithUTF8String:*(void *)(a1 + 72)];
  void v5[4] = @"daily";
  void v6[3] = v3;
  v6[4] = &off_102392708;
  return +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:5];
}

void sub_100582798(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unsigned char *a8@<X8>)
{
  int v12 = a2;
  int valuePtr = a3;
  uint64_t v14 = sub_100583FDC(a1, a2);
  if (v14)
  {
    unint64_t v15 = (__CFDictionary *)v14;
    CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
    CFTypeRef v17 = CFAutorelease(v16);
    if (a4) {
      CFBooleanRef v18 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v18 = kCFBooleanFalse;
    }
    if (a5) {
      CFBooleanRef v19 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v19 = kCFBooleanFalse;
    }
    CFDictionarySetValue(v15, @"SCAN_TYPE", v17);
    CFDictionarySetValue(v15, @"SCAN_LOW_PRIORITY", v18);
    CFDictionarySetValue(v15, @"SCAN_LOW_LATENCY", v19);
    if ((v12 - 11) <= 1 && *(unsigned char *)(a7 + 24))
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      int v20 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        if (!*(unsigned char *)(a7 + 24)) {
          sub_10020D700();
        }
        sub_100D55288((uint64_t *)a7, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 67240450;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v12;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)p_p;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "WifiScan, type, %{public}d, overriding channels, %{public}s", (uint8_t *)&buf, 0x12u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        if (!*(unsigned char *)(a7 + 24)) {
          sub_10020D700();
        }
        sub_100D55288((uint64_t *)a7, &buf);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        int v31 = 67240450;
        int v32 = v12;
        __int16 v33 = 2082;
        char v34 = p_buf;
        CFBooleanRef v25 = (std::string *)_os_log_send_and_compose_impl();
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "std::optional<CLWifiService_Type::ScanParameters> CLWifiService::toWifiScanParameters(CLWifiService_Type::ScanType, apple80211_scan_type, CLWifiService_Type::ScanParameters::Priority, BOOL, std::string, const std::optional<CLWifiService_Type::Channels> &)", "%s\n", (const char *)v25);
        if (v25 != &__p) {
          free(v25);
        }
      }
      if (*(char *)(a6 + 23) < 0)
      {
        sub_1000DC48C(__dst, *(void **)a6, *(void *)(a6 + 8));
      }
      else
      {
        *(_OWORD *)std::string __dst = *(_OWORD *)a6;
        uint64_t v27 = *(void *)(a6 + 16);
      }
      sub_1005881CC((uint64_t)&buf, a7);
    }
    else
    {
      if (*(char *)(a6 + 23) < 0)
      {
        sub_1000DC48C(__dst, *(void **)a6, *(void *)(a6 + 8));
      }
      else
      {
        *(_OWORD *)std::string __dst = *(_OWORD *)a6;
        uint64_t v27 = *(void *)(a6 + 16);
      }
      buf.__r_.__value_.__s.__data_[0] = 0;
      char v30 = 0;
    }
    sub_100F7EA30(v12, v15, (uint64_t)__dst, (uint64_t)&buf, (uint64_t)&__p);
    sub_1001F6F78((uint64_t)a8, (uint64_t *)&__p);
    a8[96] = 1;
    if (v38 < 0) {
      operator delete(v37);
    }
    if (__p.__r_.__value_.__r.__words[2])
    {
      std::string::size_type v36 = __p.__r_.__value_.__r.__words[2];
      operator delete((void *)__p.__r_.__value_.__r.__words[2]);
    }
    if (v30 && buf.__r_.__value_.__r.__words[0])
    {
      buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27) < 0) {
      operator delete(__dst[0]);
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
    uint64_t v22 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v12;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Got null wifi device options for scan type %d", (uint8_t *)&__p, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BBB78);
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v12;
      int v23 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::optional<CLWifiService_Type::ScanParameters> CLWifiService::toWifiScanParameters(CLWifiService_Type::ScanType, apple80211_scan_type, CLWifiService_Type::ScanParameters::Priority, BOOL, std::string, const std::optional<CLWifiService_Type::Channels> &)", "%s\n", (const char *)v23);
      if (v23 != &__p) {
        free(v23);
      }
    }
    *a8 = 0;
    a8[96] = 0;
  }
}

void sub_100582CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100582D2C(void *a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t)(a1 + 5);
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = 42 * ((v6 - v5) >> 3) - 1;
  if (v6 == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == a1[5] + a1[4])
  {
    sub_100589F78(a1);
    uint64_t v5 = a1[1];
    uint64_t v6 = a1[2];
  }
  if (v6 == v5)
  {
    uint64_t v9 = 0;
  }
  else
  {
    unint64_t v8 = a1[5] + a1[4];
    uint64_t v9 = *(void *)(v5 + 8 * (v8 / 0x2A)) + 96 * (v8 % 0x2A);
  }
  sub_10058A290(v4, v9, a2);
  uint64_t v10 = a1[4];
  uint64_t v11 = a1[5] + 1;
  a1[5] = v11;
  unint64_t v12 = v10 + v11;
  uint64_t v13 = a1[1];
  uint64_t v14 = (void *)(v13 + 8 * (v12 / 0x2A));
  uint64_t v15 = *v14 + 96 * (v12 % 0x2A);
  if (a1[2] == v13) {
    uint64_t v15 = 0;
  }
  if (v15 == *v14) {
    uint64_t v15 = *(v14 - 1) + 4032;
  }
  return v15 - 96;
}

void sub_100582E54(uint64_t a1, void *a2)
{
  if (a2 && (int v26 = *(id **)(a1 + 32), [a2 data]))
  {
    CFBooleanRef v25 = [a2 data];
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    long long v3 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v4 = [a2 type];
      uint64_t v6 = v25[14];
      uint64_t v5 = v25[15];
      uint64_t v7 = v25[13];
      sub_100D54C68((uint64_t)(v25 + 1));
      unint64_t v8 = (v35 & 0x80000000) == 0 ? &__p : (void **)__p;
      *(_DWORD *)std::string buf = 67240963;
      *(_DWORD *)&uint8_t buf[4] = v4;
      __int16 v39 = 2050;
      uint64_t v40 = v7;
      __int16 v41 = 2050;
      uint64_t v42 = 0x2E8BA2E8BA2E8BA3 * ((v5 - v6) >> 3);
      __int16 v43 = 2081;
      CFNumberRef v44 = v8;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "AONSense,wifiService,type,%{public}d,scanTime,%{public}.3f,count,%{public}zu,associated,%{private}s", buf, 0x26u);
      if (SBYTE3(v35) < 0) {
        operator delete(__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      unsigned int v19 = [a2 type];
      uint64_t v21 = v25[14];
      uint64_t v20 = v25[15];
      uint64_t v22 = (uint8_t *)v25[13];
      sub_100D54C68((uint64_t)(v25 + 1));
      if (v30 >= 0) {
        int v23 = &v27;
      }
      else {
        int v23 = v27;
      }
      LODWORD(__p) = 67240963;
      HIDWORD(__p) = v19;
      __int16 v32 = 2050;
      __int16 v33 = v22;
      __int16 v34 = 2050;
      uint64_t v35 = 0x2E8BA2E8BA2E8BA3 * ((v20 - v21) >> 3);
      __int16 v36 = 2081;
      int v37 = v23;
      int v24 = (char *)_os_log_send_and_compose_impl();
      if (v30 < 0) {
        operator delete(v27);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::startAONScanRequest()_block_invoke", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
    id v9 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v10 = v25[14];
    uint64_t v11 = v25[15];
    if (v10 != v11)
    {
      int v12 = 0;
      do
      {
        [v9 addObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)(*(double *)(v10 + 56) + 0.5))]];
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        uint64_t v13 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          sub_100D5475C((uint64_t *)v10);
          if ((v42 & 0x80000000) == 0) {
            uint64_t v14 = buf;
          }
          else {
            uint64_t v14 = *(uint8_t **)buf;
          }
          LODWORD(__p) = 67240451;
          HIDWORD(__p) = v12;
          __int16 v32 = 2081;
          __int16 v33 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "AONSense,wifiService,ap,%{public}d,%{private}s", (uint8_t *)&__p, 0x12u);
          if (SBYTE3(v42) < 0) {
            operator delete(*(void **)buf);
          }
          ++v12;
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BBB18);
          }
          sub_100D5475C((uint64_t *)v10);
          p_p = &__p;
          if ((v35 & 0x80000000) != 0) {
            p_p = __p;
          }
          LODWORD(v27) = 67240451;
          HIDWORD(v27) = v12;
          __int16 v28 = 2081;
          char v29 = p_p;
          CFNumberRef v16 = (char *)_os_log_send_and_compose_impl();
          if (SBYTE3(v35) < 0) {
            operator delete(__p);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::startAONScanRequest()_block_invoke", "%s\n", v16);
          if (v16 != (char *)buf) {
            free(v16);
          }
          ++v12;
        }
        v10 += 88;
      }
      while (v10 != v11);
    }
    [v26[83] processEventTimes:v9];
    [v26[84] processEventTimes:v9];
    *((_DWORD *)v25 + 35) = 2;
    *(_DWORD *)std::string buf = 12;
    (*((void (**)(id *, uint8_t *))*v26 + 19))(v26, buf);
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    CFTypeRef v17 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "AONSense,wifiService,data,null", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      LOWORD(__p) = 0;
      CFBooleanRef v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWifiService::startAONScanRequest()_block_invoke", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
}

uint64_t sub_100583528(uint64_t a1, uint64_t *a2, CFTypeRef *a3, int a4)
{
  uint64_t result = (uint64_t)CFArrayCreateMutable(kCFAllocatorDefault, 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3), &kCFTypeArrayCallBacks);
  *a3 = (CFTypeRef)result;
  if (result)
  {
    uint64_t v8 = *a2;
    uint64_t v9 = a2[1];
    if (*a2 == v9)
    {
      return 1;
    }
    else
    {
      uint64_t v10 = (__CFArray *)result;
      while (1)
      {
        value = 0;
        if (!sub_100583C48(result, v8, (uint64_t *)&value, a4)) {
          break;
        }
        uint64_t v11 = value;
        if (!value) {
          break;
        }
        CFArrayAppendValue(v10, value);
        CFRelease(v11);
        v8 += 88;
        if (v8 == v9) {
          return 1;
        }
      }
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      int v12 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "WifiService, create background network failed", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        uint64_t v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWifiService::createBackgroundNetworks(const std::vector<CLWifiService_Type::AccessPoint> &, CFArrayRef &, BOOL)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      CFRelease(*a3);
      uint64_t result = 0;
      *a3 = 0;
    }
  }
  return result;
}

void sub_100583774(uint64_t a1, void *a2)
{
  long long v3 = +[NSMutableDictionary dictionaryWithCapacity:14];
  if ([a2 count])
  {
    unint64_t v4 = 0;
    char v5 = 0;
    do
    {
      [a2 objectAtIndexedSubscript:v4];
      IntCFStringRef Property = WiFiNetworkGetIntProperty();
      int v7 = IntProperty;
      if ((IntProperty - 1) > 0xC) {
        v5 |= (int)IntProperty > 14;
      }
      else {
        [(NSMutableDictionary *)v3 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1) forKey:+[NSNumber numberWithInt:IntProperty]];
      }
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      uint64_t v8 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 67109120;
        int v17 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "gfmetrics, channel, %d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::collectChannelMetrics(NSArray *)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      ++v4;
    }
    while ((unint64_t)[a2 count] > v4);
  }
  else
  {
    char v5 = 0;
  }
  id v10 = [[-[NSMutableDictionary allKeys](v3, "allKeys") count];
  BOOL v11 = [(NSMutableDictionary *)v3 objectForKeyedSubscript:&off_102392708]
     && [(NSMutableDictionary *)v3 objectForKeyedSubscript:&off_102392720]
     && [(NSMutableDictionary *)v3 objectForKeyedSubscript:&off_102392738] != 0;
  if (((int)v10 > 0) | v5 & 1)
  {
    v14[0] = @"Channels";
    v15[0] = +[NSNumber numberWithInt:v10];
    v14[1] = @"1_6_11";
    v15[1] = +[NSNumber numberWithBool:v11];
    int v14[2] = @"Non24GHz";
    v15[2] = +[NSNumber numberWithBool:v5 & 1];
    +[NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:3];
    AnalyticsSendEvent();
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v12 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109632;
      int v17 = (int)v10;
      __int16 v18 = 1024;
      BOOL v19 = v11;
      __int16 v20 = 1024;
      int v21 = v5 & 1;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "gfmetrics, Channels, %d, 1_6_11, %d, Non24GHz, %d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::collectChannelMetrics(NSArray *)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

BOOL sub_100583C48(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  sub_1000E9354(v18);
  v20.__r_.__value_.__r.__words[0] = *(void *)a2;
  sub_10006DE8C(__p);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v7 = __p;
  }
  else {
    int v7 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  sub_1004D3518((uint64_t)v18, @"BSSID", (char *)v7);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if ((*(_DWORD *)(a2 + 40) & 0x80000000) == 0)
  {
    LODWORD(__p[0].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 40);
    sub_1000EA2A4((uint64_t)v18, @"CHANNEL", __p);
  }
  __p[0].__r_.__value_.__s.__data_[0] = 1;
  if (a4) {
    sub_1000EA52C((uint64_t)v18, @"ENTRY_NETWORK", __p);
  }
  else {
    sub_1000EA52C((uint64_t)v18, @"EXIT_NETWORK", __p);
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BBB78);
  }
  uint64_t v8 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    v17.__r_.__value_.__r.__words[0] = *(void *)a2;
    sub_10006DE8C(&v20);
    uint64_t v9 = (v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &v20
       : (std::string *)v20.__r_.__value_.__r.__words[0];
    int v10 = *(_DWORD *)(a2 + 40);
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
    WORD2(__p[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = v10;
    WORD1(__p[0].__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(__p[0].__r_.__value_.__r.__words[2]) = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "network mac, %s, channel, %d, entry, %d", (uint8_t *)__p, 0x18u);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
    sub_10006DE8C(&v17);
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v14 = &v17;
    }
    else {
      uint64_t v14 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    int v15 = *(_DWORD *)(a2 + 40);
    LODWORD(v20.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
    WORD2(v20.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v20.__r_.__value_.__r.__words[1] + 6) = v15;
    WORD1(v20.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(v20.__r_.__value_.__r.__words[2]) = a4;
    CFNumberRef v16 = (std::string *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiService::createBackgroundNetwork(const CLWifiService_Type::AccessPoint &, WiFiNetworkRef &, BOOL)", "%s\n", (const char *)v16);
    if (v16 != __p) {
      free(v16);
    }
  }
  sub_1000E9358((uint64_t)v18);
  uint64_t v11 = WiFiNetworkCreate();
  *a3 = v11;
  BOOL v12 = v11 != 0;
  sub_10013F3C4(v18);
  return v12;
}

void sub_100583F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

#error "100584120: call analysis failed (funcsize=92)"

void sub_10058418C(uint64_t a1, _DWORD **a2, void *a3, __CFDictionary *a4)
{
  CFNumberRef v8 = CFNumberCreate(0, kCFNumberSInt32Type, &unk_101D236EC);
  if (v8)
  {
    CFNumberRef v9 = v8;
    sub_10058A574(a1, a2, a3, v8, a4);
    CFRelease(v9);
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v10 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134349056;
      uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "setScanOptionsChannels could not create scan params flag %{public}p", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::setScanOptionsChannels(const Iter &, const Iter &, CFMutableDictionaryRef) [Iter = std::__wrap_iter<int *>]", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

CFTypeRef sub_1005843BC(uint64_t a1, unsigned int *a2)
{
  if (sub_100F7E9EC((uint64_t)a2) == 11)
  {
    int v4 = sub_1006D40B0(a2);
    int v5 = sub_100C8D88C((uint64_t)a2);
    int v6 = sub_1000E68D8((uint64_t)a2);
    uint64_t v14 = *(_DWORD **)sub_1002CAC98((uint64_t)a2);
    uint64_t v13 = *(void *)(sub_1002CAC98((uint64_t)a2) + 8);
    uint64_t v7 = sub_1008B42D8((uint64_t)a2);
    int v8 = sub_100F7E9DC((uint64_t)a2);
    char v9 = sub_100778804((uint64_t)a2);
    int v10 = sub_1005844DC(a1, v4, v5, v6, &v14, &v13, v7, v8, v9);
    return CFAutorelease(v10);
  }
  else
  {
    uint64_t v12 = sub_100F7E9EC((uint64_t)a2);
    return (CFTypeRef)sub_100583FDC(a1, v12);
  }
}

__CFDictionary *sub_1005844DC(uint64_t a1, int a2, int a3, int a4, _DWORD **a5, void *a6, uint64_t a7, int a8, char a9)
{
  int v37 = a3;
  int v38 = a2;
  int v35 = a7;
  int valuePtr = a4;
  int v34 = a8;
  CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v37);
  CFNumberRef v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v35);
  CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v38);
  CFNumberRef v15 = CFNumberCreate(0, kCFNumberSInt32Type, &unk_101D236F0);
  CFNumberRef v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &v34);
  CFNumberRef v17 = v16;
  if (v11) {
    BOOL v18 = v12 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18 || v13 == 0 || v14 == 0 || v15 == 0 || v16 == 0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v23 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134350336;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&unsigned char buf[14] = v12;
      *(_WORD *)&buf[22] = 2050;
      *(void *)&unsigned char buf[24] = v13;
      *(_WORD *)__int16 v50 = 2050;
      *(void *)&v50[2] = v14;
      *(_WORD *)&v50[10] = 2050;
      *(void *)&v50[12] = v15;
      *(_WORD *)&v50[20] = 2050;
      *(void *)&v50[22] = v17;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "could not create scan params mode %{public}p type %{public}p dwell %{public}p scans %{public}p flag %{public}p age %{public}p", buf, 0x3Eu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      int v39 = 134350336;
      *(void *)uint64_t v40 = v11;
      *(_WORD *)&v40[8] = 2050;
      CFNumberRef v41 = v12;
      *(_WORD *)uint64_t v42 = 2050;
      *(void *)&v42[2] = v13;
      __int16 v43 = 2050;
      CFNumberRef v44 = v14;
      __int16 v45 = 2050;
      CFNumberRef v46 = v15;
      __int16 v47 = 2050;
      CFNumberRef v48 = v17;
      char v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CFMutableDictionaryRef CLWifiService::createScanOptions(int, apple80211_scan_type, int, const Iter &, const Iter &, cl::chrono::milliseconds, cl::chrono::seconds, BOOL) [Iter = std::__wrap_iter<const int *>]", "%s\n", v29);
      if (v29 != buf) {
        free(v29);
      }
    }
    Mutable = 0;
  }
  else
  {
    int v31 = a6;
    *(void *)std::string buf = kCFBooleanFalse;
    *(void *)&uint8_t buf[8] = kCFBooleanTrue;
    *(void *)&uint8_t buf[16] = v11;
    *(void *)&unsigned char buf[24] = v12;
    *(void *)__int16 v50 = v13;
    *(void *)&v50[8] = v14;
    if (a9) {
      CFBooleanRef v25 = kCFBooleanTrue;
    }
    else {
      CFBooleanRef v25 = kCFBooleanFalse;
    }
    *(void *)&v50[16] = v16;
    *(void *)&v50[24] = v25;
    CFBooleanRef v51 = kCFBooleanFalse;
    Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 9, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    for (uint64_t i = 0; i != 9; ++i)
      CFDictionarySetValue(Mutable, off_1022BBC78[i], *(const void **)&buf[i * 8]);
    if (*a5 != (_DWORD *)*v31) {
      sub_10058A878(a1, a5, v31, v15, Mutable);
    }
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (!Mutable)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
    uint64_t v27 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v38;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v37;
      *(_WORD *)&unsigned char buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = valuePtr;
      *(_WORD *)&buf[20] = 2048;
      *(void *)&buf[22] = a7;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#Warning failed to create scan options (numScans=%d, scan_type=%d, scanModes=%d, dwellTime=%lld)", buf, 0x1Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BBB78);
      }
      int v39 = 67109888;
      *(_DWORD *)uint64_t v40 = v38;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = v37;
      LOWORD(v41) = 1024;
      *(_DWORD *)((char *)&v41 + 2) = valuePtr;
      HIWORD(v41) = 2048;
      *(void *)uint64_t v42 = a7;
      char v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CFMutableDictionaryRef CLWifiService::createScanOptions(int, apple80211_scan_type, int, const Iter &, const Iter &, cl::chrono::milliseconds, cl::chrono::seconds, BOOL) [Iter = std::__wrap_iter<const int *>]", "%s\n", v30);
      if (v30 != buf) {
        free(v30);
      }
    }
  }
  return Mutable;
}

void sub_100584A50(uint64_t a1)
{
  uint64_t v2 = a1 + 824;
  uint64_t v73 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  __int16 v75 = 256;
  double Current = CFAbsoluteTimeGetCurrent();
  int v4 = &qword_102419000;
  if (!*(void *)(a1 + 312) || !*(void *)(a1 + 296))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    double v59 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v60 = *(void *)(a1 + 312) == 0;
      BOOL v61 = *(void *)(a1 + 296) == 0;
      *(_DWORD *)std::string buf = 67240448;
      *(_DWORD *)double v88 = v60;
      *(_WORD *)&v88[4] = 1026;
      *(_DWORD *)&v88[6] = v61;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "WifiMgr, performScan, fail,  device, %{public}d, dpc, %{public}d", buf, 0xEu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_138;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    BOOL v62 = *(void *)(a1 + 312) == 0;
    BOOL v63 = *(void *)(a1 + 296) == 0;
    unsigned int v81 = 67240448;
    *(_DWORD *)uint64_t v82 = v62;
    *(_WORD *)&v82[4] = 1026;
    *(_DWORD *)&v82[6] = v63;
    int v64 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::performPendingScans()", "%s\n", v64);
    goto LABEL_135;
  }
  double v5 = Current;
  if (Current - *(double *)(a1 + 408) <= 3.0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v65 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "WifiMgr, performScan, in progress", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_138;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    LOWORD(v81) = 0;
    int v64 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::performPendingScans()", "%s\n", v64);
LABEL_135:
    if (v64 != (char *)buf) {
      free(v64);
    }
LABEL_138:
    if ((_BYTE)v75) {
      pthread_mutex_unlock(v74);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v73 + 24))(v73);
    }
    return;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022BBB18);
  }
  int v6 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 368);
    *(_DWORD *)std::string buf = 134349056;
    *(void *)double v88 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "WifiScan, perform, %{public}lu", buf, 0xCu);
  }
  uint64_t v68 = v2;
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    uint64_t v66 = *(void *)(a1 + 368);
    unsigned int v81 = 134349056;
    *(void *)uint64_t v82 = v66;
    __int16 v67 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::performPendingScans()", "%s\n", v67);
    if (v67 != (char *)buf) {
      free(v67);
    }
  }
  uint64_t v8 = 1;
  while (*(void *)(a1 + 368))
  {
    sub_1001F6F78((uint64_t)&v81, (uint64_t *)(*(void *)(*(void *)(a1 + 336) + 8 * (*(void *)(a1 + 360) / 0x2AuLL))+ 96 * (*(void *)(a1 + 360) % 0x2AuLL)));
    unsigned int v9 = sub_100F7E9EC((uint64_t)&v81);
    sub_100585D14((int64x2_t *)(a1 + 328));
    uint64_t v10 = v8;
    CFNumberRef v11 = (__CFDictionary *)sub_1005843BC(a1, &v81);
    if (v11)
    {
      if (sub_100778804((uint64_t)&v81)) {
        CFBooleanRef v12 = kCFBooleanTrue;
      }
      else {
        CFBooleanRef v12 = kCFBooleanFalse;
      }
      CFDictionarySetValue(v11, @"SCAN_LOW_PRIORITY", v12);
      if (sub_100F7E9E4((uint64_t)&v81)) {
        CFBooleanRef v13 = kCFBooleanTrue;
      }
      else {
        CFBooleanRef v13 = kCFBooleanFalse;
      }
      CFDictionarySetValue(v11, @"SCAN_LOW_LATENCY", v13);
      BOOL v14 = sub_100D33CE4((uint64_t)&v81);
      uint64_t v15 = 120;
      if (v14) {
        uint64_t v15 = 112;
      }
      CFDictionarySetValue(v11, @"SCAN_TYPE", *(const void **)(a1 + v15));
      CFNumberRef v16 = *(const void **)(a1 + 312);
      CFRetain(v16);
      CFRetain(v11);
      sub_10014D468(v2);
      double v17 = CFAbsoluteTimeGetCurrent();
      *(unsigned char *)(a1 + 233) = v9;
      int v69 = WiFiDeviceClientScanAsync();
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      BOOL v18 = v4[117];
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        sub_100F7E9FC((char *)&v81, (uint64_t)__p);
        if (__p[23] >= 0) {
          BOOL v19 = __p;
        }
        else {
          BOOL v19 = *(unsigned char **)__p;
        }
        unsigned int v20 = sub_100F7E9EC((uint64_t)&v81);
        int v21 = sub_100D54EB0(v20);
        if (sub_100778804((uint64_t)&v81)) {
          int v22 = 108;
        }
        else {
          int v22 = 110;
        }
        int v23 = sub_100F7E9E4((uint64_t)&v81);
        BOOL v24 = sub_100D33CE4((uint64_t)&v81);
        *(_DWORD *)std::string buf = 136447746;
        if (v23) {
          int v25 = 108;
        }
        else {
          int v25 = 100;
        }
        *(void *)double v88 = v19;
        if (v24) {
          int v26 = 112;
        }
        else {
          int v26 = 97;
        }
        *(_WORD *)&v88[8] = 2082;
        *(void *)&v88[10] = v21;
        *(_WORD *)&v88[18] = 1026;
        *(_DWORD *)&v88[20] = v22;
        __int16 v89 = 1026;
        LODWORD(v90) = v25;
        WORD2(v90) = 1026;
        *(_DWORD *)((char *)&v90 + 6) = v26;
        WORD5(v90) = 1026;
        HIDWORD(v90) = v8;
        __int16 v91 = 1026;
        int v92 = v69;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "WifiScan, execute, %{public}s, %{public}s, flags, %{public}c%{public}c%{public}c, n, %{public}d, error, %{public}d", buf, 0x34u);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        uint64_t v10 = (v8 + 1);
        int v4 = &qword_102419000;
        uint64_t v2 = v68;
      }
      else
      {
        int v4 = &qword_102419000;
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        int v40 = v10;
        sub_100F7E9FC((char *)&v81, (uint64_t)v71);
        if (v72 >= 0) {
          CFNumberRef v41 = v71;
        }
        else {
          CFNumberRef v41 = (void **)v71[0];
        }
        unsigned int v42 = sub_100F7E9EC((uint64_t)&v81);
        __int16 v43 = sub_100D54EB0(v42);
        if (sub_100778804((uint64_t)&v81)) {
          int v44 = 108;
        }
        else {
          int v44 = 110;
        }
        int v45 = sub_100F7E9E4((uint64_t)&v81);
        BOOL v46 = sub_100D33CE4((uint64_t)&v81);
        *(_DWORD *)std::string __p = 136447746;
        if (v45) {
          int v47 = 108;
        }
        else {
          int v47 = 100;
        }
        *(void *)&__p[4] = v41;
        if (v46) {
          int v48 = 112;
        }
        else {
          int v48 = 97;
        }
        *(_WORD *)&__p[12] = 2082;
        *(void *)&__p[14] = v43;
        *(_WORD *)&__p[22] = 1026;
        *(_DWORD *)&unsigned char __p[24] = v44;
        __int16 v77 = 1026;
        LODWORD(v7_Block_object_dispose(&STACK[0x850], 8) = v47;
        WORD2(v7_Block_object_dispose(&STACK[0x850], 8) = 1026;
        *(_DWORD *)((char *)&v78 + 6) = v48;
        WORD5(v7_Block_object_dispose(&STACK[0x850], 8) = 1026;
        HIDWORD(v7_Block_object_dispose(&STACK[0x850], 8) = v40;
        __int16 v79 = 1026;
        int v80 = v69;
        int v49 = (char *)_os_log_send_and_compose_impl();
        if (v72 < 0) {
          operator delete(v71[0]);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::performPendingScans()", "%s\n", v49);
        int v4 = &qword_102419000;
        uint64_t v2 = v68;
        if (v49 != (char *)buf) {
          free(v49);
        }
        uint64_t v10 = (v40 + 1);
      }
      if (*(unsigned char *)(a1 + 234))
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        uint64_t v27 = v4[117];
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "WifiMgr, Requesting scan with pending scan reply, #CloneMe", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BBB18);
          }
          *(_WORD *)std::string __p = 0;
          __int16 v50 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::performPendingScans()", "%s\n", v50);
          if (v50 != (char *)buf) {
            free(v50);
          }
        }
      }
      *(unsigned char *)(a1 + 234) = 1;
      double v28 = CFAbsoluteTimeGetCurrent();
      sub_10014DB24(v2);
      CFRelease(v11);
      CFRelease(v16);
      double v29 = v28 - v17;
      if (v29 >= 3.0)
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BBB78);
        }
        char v30 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 134217984;
          *(double *)double v88 = v29;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#Warning WIFI: ScanAsync blocked for, %.1lf", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022BBB78);
          }
          *(_DWORD *)std::string __p = 134217984;
          *(double *)&__p[4] = v29;
          int v54 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::performPendingScans()", "%s\n", v54);
          if (v54 != (char *)buf) {
            free(v54);
          }
        }
      }
      if (!v69)
      {
        *(double *)(a1 + 40_Block_object_dispose(&STACK[0x850], 8) = v5;
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BBB78);
        }
        __int16 v36 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          int v37 = sub_100D54EB0(v9);
          uint64_t v38 = *(void *)(a1 + 368);
          *(_DWORD *)std::string buf = 67109890;
          *(_DWORD *)double v88 = v9;
          *(_WORD *)&v88[4] = 2080;
          *(void *)&v88[6] = v37;
          *(_WORD *)&v88[14] = 2048;
          *(void *)&v88[16] = v38;
          __int16 v89 = 2048;
          *(double *)&long long v90 = v29;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "asynchronous scan type %d %s in progress (%lu requests left), scanWaitInterval, %.3lf", buf, 0x26u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022BBB78);
          }
          BOOL v55 = sub_100D54EB0(v9);
          uint64_t v56 = *(void *)(a1 + 368);
          *(_DWORD *)std::string __p = 67109890;
          *(_DWORD *)&__p[4] = v9;
          *(_WORD *)&__p[8] = 2080;
          *(void *)&__p[10] = v55;
          *(_WORD *)&unsigned char __p[18] = 2048;
          *(void *)&__p[20] = v56;
          __int16 v77 = 2048;
          *(double *)&long long v78 = v29;
          uint64_t v57 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::performPendingScans()", "%s\n", v57);
          if (v57 != (char *)buf) {
            free(v57);
          }
        }
        if (*(void *)(a1 + 312))
        {
          WiFiDeviceClientRegisterScanUpdateCallback();
          goto LABEL_72;
        }
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        int v39 = v4[117];
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "WifiService, performPendingScans, fWifiDevice NULL", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BBB18);
          }
          *(_WORD *)std::string __p = 0;
          __int16 v58 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::performPendingScans()", "%s\n", v58);
          uint64_t v8 = v10;
          if (v58 != (char *)buf) {
            free(v58);
          }
        }
        else
        {
LABEL_72:
          uint64_t v8 = v10;
        }
        char v35 = 0;
        goto LABEL_74;
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BBB78);
      }
      int v31 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v32 = sub_100D54EB0(v9);
        uint64_t v33 = *(void *)(a1 + 368);
        *(_DWORD *)std::string buf = 67110146;
        *(_DWORD *)double v88 = v9;
        *(_WORD *)&v88[4] = 2080;
        *(void *)&v88[6] = v32;
        *(_WORD *)&v88[14] = 2048;
        *(void *)&v88[16] = v33;
        __int16 v89 = 1024;
        LODWORD(v90) = v69;
        WORD2(v90) = 2048;
        *(double *)((char *)&v90 + 6) = v29;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#Warning asynchronous scan type %d %s failed (%lu requests left) - error %d, scanWaitInterval, %.3lf", buf, 0x2Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022BBB78);
        }
        CFBooleanRef v51 = sub_100D54EB0(v9);
        uint64_t v52 = *(void *)(a1 + 368);
        *(_DWORD *)std::string __p = 67110146;
        *(_DWORD *)&__p[4] = v9;
        *(_WORD *)&__p[8] = 2080;
        *(void *)&__p[10] = v51;
        *(_WORD *)&unsigned char __p[18] = 2048;
        *(void *)&__p[20] = v52;
        __int16 v77 = 1024;
        LODWORD(v7_Block_object_dispose(&STACK[0x850], 8) = v69;
        WORD2(v7_Block_object_dispose(&STACK[0x850], 8) = 2048;
        *(double *)((char *)&v78 + 6) = v29;
        int v53 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::performPendingScans()", "%s\n", v53);
        if (v53 != (char *)buf) {
          free(v53);
        }
      }
      sub_1000D7FCC((uint64_t *)(a1 + 432));
      *(unsigned char *)(a1 + 416) = -1;
      *(void *)(a1 + 424) = 0;
      int v34 = *(void **)(a1 + 40);
      v70[0] = _NSConcreteStackBlock;
      v70[1] = 3221225472;
      v70[2] = sub_100585FD8;
      v70[3] = &unk_1022A3020;
      v70[4] = a1;
      [v34 async:v70];
      uint64_t v8 = v10;
    }
    char v35 = 1;
LABEL_74:
    if (v86 < 0) {
      operator delete(v85);
    }
    if (v83)
    {
      uint64_t v84 = v83;
      operator delete(v83);
    }
    if ((v35 & 1) == 0) {
      break;
    }
  }
  if (HIBYTE(v75)) {
    goto LABEL_138;
  }
}

void sub_100585C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

uint64_t sub_100585D14(int64x2_t *a1)
{
  sub_10058846C((uint64_t)&a1[2].i64[1], *(void *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x2AuLL)) + 96 * (a1[2].i64[0] % 0x2AuLL));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101D0A740);

  return sub_10058AB7C((uint64_t)a1, 1);
}

void sub_100585DA0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BBAF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v14 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onWiFiDeviceClientScanCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BBAF8);
    }
    unsigned int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v16 = 0;
      __int16 v17 = 2082;
      BOOL v18 = "";
      __int16 v19 = 2082;
      unsigned int v20 = "activity";
      __int16 v21 = 2050;
      uint64_t v22 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onWiFiDeviceClientScanCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v14 = 0;
  }
  id v10 = [*(id *)(a4 + 32) silo];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  _DWORD v11[2] = sub_1005881B8;
  v11[3] = &unk_1022BBB98;
  v11[4] = a4;
  v11[5] = a1;
  void v11[6] = a2;
  int v12 = a3;
  [v10 sync:v11];
  if (v14) {
    os_activity_scope_leave(&state);
  }
}

void sub_100585FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100585FD8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  int v4 = v1 + 103;
  (*(void (**)(void *))(v1[103] + 16))(v1 + 103);
  __int16 v5 = 256;
  int v3 = 4;
  (*(void (**)(void *, int *, void, uint64_t))(*v1 + 144))(v1, &v3, 0, 0xFFFFFFFFLL);
  return (*(uint64_t (**)(void *))(v1[103] + 24))(v1 + 103);
}

void sub_1005860A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005860B4(uint64_t a1)
{
  uint64_t v2 = a1 + 824;
  uint64_t v11 = a1 + 824;
  (*(void (**)(uint64_t))(*(void *)(a1 + 824) + 16))(a1 + 824);
  __int16 v12 = 256;
  if (*(void *)(a1 + 736))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    int v3 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "WifiDpc, onDpcSource", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      __int16 v10 = 0;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onDpcSource()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    int v4 = *(NSObject **)(a1 + 736);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100586458;
    block[3] = &unk_1022A3020;
    block[4] = a1;
    dispatch_async(v4, block);
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022BBB18);
    }
    __int16 v5 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "WifiDpc, null dispatch queue (shutdown?), #KvCheck", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022BBB18);
      }
      __int16 v10 = 0;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::onDpcSource()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

void sub_10058642C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100586458(uint64_t a1)
{
}

uint64_t sub_100586460(uint64_t a1)
{
  return sub_100586470(*(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_100586470(void *a1, int a2)
{
  int v4 = a1 + 103;
  (*(void (**)(void *))(a1[103] + 16))(a1 + 103);
  if (a1[38] && a1[37])
  {
    WiFiManagerClientQuiesceWiFi();
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022BBB78);
    }
    __int16 v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v9 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "IMD: doQuiesceWifi, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022BBB78);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiService::doQuiesceWifi(BOOL)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  return (*(uint64_t (**)(void *))(*v4 + 24))(v4);
}

void sub_100586698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005866C4()
{
  sub_10010F274((uint64_t)v9);
  sub_100132EFC(v10, (uint64_t)"scanStats, numOfScan, S1, ", 26);
  int v0 = (void *)std::ostream::operator<<();
  sub_100132EFC(v0, (uint64_t)", S2, ", 6);
  uint64_t v1 = (void *)std::ostream::operator<<();
  sub_100132EFC(v1, (uint64_t)", 5GHz S1, ", 11);
  uint64_t v2 = (void *)std::ostream::operator<<();
  sub_100132EFC(v2, (uint64_t)", Fast, ", 8);
  int v3 = (void *)std::ostream::operator<<();
  sub_100132EFC(v3, (uint64_t)", Cached, ", 10);
  int v4 = (void *)std::ostream::operator<<();
  sub_100132EFC(v4, (uint64_t)", numOfScanErrors, ", 19);
  __int16 v5 = (void *)std::ostream::operator<<();
  sub_100132EFC(v5, (uint64_t)", numOfScanBusies, ", 19);
  int v6 = (void *)std::ostream::operator<<();
  sub_100132EFC(v6, (uint64_t)", numOfReceivedScans, ", 22);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1005868F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100586904()
{
}

void sub_1005869C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_100586A00(uint64_t a1)
{
  return _WiFiManagerClientSetBackgroundScanNetworks(*(void *)(*(void *)(a1 + 8) + 304));
}

void sub_100586A0C(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        int v9 = (uint64_t *)v4;
      }
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BBAF8);
      }
      __int16 v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        char v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          char v11 = (void *)*v11;
        }
        *(_DWORD *)std::string buf = 136446466;
        __int16 v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022BBAF8);
        }
        __int16 v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          __int16 v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        uint64_t v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        CFBooleanRef v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::removeClient(int) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_100586C9C(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10058AC4C(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_100586D50(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_100586D98(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_100586DE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_10241C718);
}

BOOL sub_100586E0C(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        int v21 = (uint64_t *)v15;
      }
      else {
        int v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BBAF8);
    }
    int v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      char v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        char v11 = (void *)*v11;
      }
      *(_DWORD *)std::string buf = 136446466;
      BOOL v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BBAF8);
      }
      uint64_t v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::clientRegistered(int, const Notification_T &) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_100587090(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v7 = *a2;
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 32);
    BOOL v10 = v9 < v7;
    if (v9 >= v7) {
      char v11 = (uint64_t *)v4;
    }
    else {
      char v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3) {
    return 0;
  }
  if (v7 < *(_DWORD *)(v8 + 32)) {
    return 0;
  }
  uint64_t v12 = *(void *)(v8 + 64);
  if (!v12) {
    return 0;
  }
  *(_WORD *)a3 = *(_WORD *)v12;
  sub_1000D9D94(a3 + 8, v12 + 8);
  *(void *)(a3 + 104) = *(void *)(v12 + 104);
  if (v12 != a3) {
    sub_1000DAC8C((uint64_t *)(a3 + 112), *(void *)(v12 + 112), *(void *)(v12 + 120), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(v12 + 120) - *(void *)(v12 + 112)) >> 3));
  }
  *(void *)(a3 + 136) = *(void *)(v12 + 136);
  return 1;
}

uint64_t sub_100587158(uint64_t a1, int *a2, uint64_t a3)
{
  sub_100588CB4(a3, &v10);
  int v9 = *a2;
  char v11 = &v9;
  uint64_t v5 = sub_10044715C((uint64_t **)(a1 + 56), &v9, (uint64_t)&unk_101D0B290, &v11);
  long long v6 = v10;
  long long v10 = 0uLL;
  int v7 = (std::__shared_weak_count *)v5[9];
  *((_OWORD *)v5 + 4) = v6;
  if (v7)
  {
    sub_1000DB0A0(v7);
    if (*((void *)&v10 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  return 1;
}

void sub_1005871EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100587204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v4 = -256;
  char v5 = 0;
  char v8 = 0;
  memset(v9, 0, sizeof(v9));
  uint64_t v10 = 0;
  (*(void (**)(uint64_t, uint64_t, __int16 *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, &v4, a3, a4, 0);
  char v11 = (void **)v9 + 1;
  sub_1000D7F78(&v11);
  if (v8)
  {
    if (v7 < 0) {
      operator delete(__p);
    }
  }
}

void sub_1005872A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100570A18((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005872B8(uint64_t a1, int *a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  char v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BBAF8);
  }
  int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    char v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)std::string buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    __int16 v23 = 2082;
    BOOL v24 = v10;
    __int16 v25 = 2050;
    int v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    uint64_t v27 = v28;
    memset(v28, 0, sizeof(v28));
    double v29 = 0;
    sub_100588AE8((uint64_t)buf, a2, (uint64_t)&v27);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v26) {
      sub_1000DB0A0(v26);
    }
    sub_1000F5BB0((uint64_t)&buf[8], *(void **)&buf[16]);
    if (v29) {
      sub_1000DB0A0(v29);
    }
    sub_1000F5BB0((uint64_t)&v27, v28[0]);
  }
  if (!a4)
  {
    BOOL v20 = (std::__shared_weak_count *)v14[9];
    void v14[8] = 0;
    v14[9] = 0;
    if (!v20) {
      goto LABEL_29;
    }
LABEL_28:
    sub_1000DB0A0(v20);
    goto LABEL_29;
  }
  sub_100588CB4(a3, buf);
  long long v18 = *(_OWORD *)buf;
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  int v19 = (std::__shared_weak_count *)v14[9];
  *((_OWORD *)v14 + 4) = v18;
  if (v19)
  {
    sub_1000DB0A0(v19);
    BOOL v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      goto LABEL_28;
    }
  }
LABEL_29:
  if (v14[7]) {
    sub_1005884C4();
  }
  os_activity_scope_leave(&state);
}

void sub_100587888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_1005878D4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BBAF8);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BBAF8);
      }
      __int16 v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::listClients() [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BBAF8);
    }
    char v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      long long v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        long long v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BBAF8);
      }
      BOOL v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::listClients() [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    char v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022BBAF8);
            }
            uint64_t v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              char v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                char v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)std::string buf = 136315650;
              uint64_t v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022BBAF8);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::listClients() [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        long long v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            long long v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            char v8 = v19;
          }
          while (!v16);
        }
        char v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_100587E80()
{
}

void sub_100587E98(uint64_t a1)
{
  sub_10058ABDC(a1);

  operator delete();
}

id sub_100587ED0(uint64_t a1, int a2, void *a3)
{
  id result = sub_100588F70(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_100587F20(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100587F50(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_100587F80(uint64_t a1)
{
  return sub_1005860B4(*(void *)(a1 + 32));
}

void sub_100587F88(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t sub_100587FB8(uint64_t a1)
{
  return sub_10057DB84(*(void *)(a1 + 32));
}

uint64_t sub_100587FC0(uint64_t a1)
{
  return sub_10056FE60(*(void **)(a1 + 32));
}

uint64_t sub_100587FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10057D27C(*(unsigned char **)(a1 + 32), a2, a3, *(const void **)(a1 + 56));
}

uint64_t sub_100587FDC(uint64_t a1)
{
  return sub_100573FCC(*(void *)(a1 + 32));
}

uint64_t sub_100587FE4(uint64_t a1)
{
  return sub_10057498C(*(double **)(a1 + 32));
}

uint64_t sub_100587FEC(uint64_t a1, uint64_t a2)
{
  return sub_100574BA0(*(void **)(a1 + 32), a2, *(const __CFDictionary **)(a1 + 48));
}

uint64_t sub_100587FFC(uint64_t a1, uint64_t a2)
{
  return sub_100575C98(*(void **)(a1 + 32), a2, *(void *)(a1 + 48));
}

uint64_t sub_10058800C(uint64_t a1, uint64_t a2)
{
  return sub_1005778D0(*(void *)(a1 + 32), a2, *(unsigned __int8 *)(a1 + 48));
}

void sub_10058801C(uint64_t a1, uint64_t a2)
{
}

void sub_100588030(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100588040(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 88))
  {
    *(void *)a1 = *(void *)a2;
    std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
    long long v5 = *(_OWORD *)(a2 + 48);
    long long v4 = *(_OWORD *)(a2 + 64);
    long long v6 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = v5;
    *(_OWORD *)(a1 + 64) = v4;
    *(_OWORD *)(a1 + 32) = v6;
  }
  else
  {
    sub_1000D9E2C(a1, a2);
    *(unsigned char *)(a1 + 8_Block_object_dispose(&STACK[0x850], 8) = 1;
  }
  return a1;
}

void sub_1005880B4(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1005880E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1005880F4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1000DC48C((unsigned char *)v4, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(v4 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v4 = v5;
  }
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v8 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = v7;
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 8_Block_object_dispose(&STACK[0x850], 8) = 1;
  return a1;
}

uint64_t sub_10058816C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    if (*(char *)(a1 + 87) < 0) {
      operator delete(*(void **)(a1 + 64));
    }
    uint64_t v2 = *(void **)(a1 + 16);
    if (v2)
    {
      *(void *)(a1 + 24) = v2;
      operator delete(v2);
    }
  }
  return a1;
}

uint64_t sub_1005881B8(uint64_t a1, uint64_t a2)
{
  return sub_10057A910(*(void *)(a1 + 32), a2, *(const __CFArray **)(a1 + 48), *(_DWORD *)(a1 + 56));
}

uint64_t sub_1005881CC(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  sub_100588218((void *)a1, a2);
  return a1;
}

void sub_1005881FC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    sub_101A5DAEC(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100588218(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = result;
    void *result = 0;
    result[1] = 0;
    result[2] = 0;
    id result = sub_10010F834(result, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    *((unsigned char *)v2 + 24) = 1;
  }
  return result;
}

__n128 sub_100588264@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 64);
  long long v4 = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x850], 8) = v4;
  return result;
}

void *sub_100588278@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = a1[4];
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  return sub_1000DA6E8(a2 + 1, a1[5], a1[6], 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a1[6] - a1[5]) >> 3));
}

void *sub_1005882B0(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[4];
  *(void *)(a1 + 40) = 0;
  uint64_t v3 = (void *)(a1 + 40);
  *(v3 - 1) = v2;
  v3[1] = 0;
  void v3[2] = 0;
  return sub_1000DA6E8(v3, a2[5], a2[6], 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a2[6] - a2[5]) >> 3));
}

void sub_1005882E8(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  sub_1000D7F78(&v1);
}

uint64_t sub_100588314(void *a1)
{
  uint64_t v2 = a1 + 5;
  uint64_t v3 = (void **)a1[1];
  long long v4 = (void **)a1[2];
  if (v4 == v3)
  {
    long long v4 = (void **)a1[1];
  }
  else
  {
    unint64_t v5 = a1[4];
    long long v6 = &v3[v5 / 0x2A];
    uint64_t v7 = (uint64_t)*v6 + 96 * (v5 % 0x2A);
    unint64_t v8 = (unint64_t)v3[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != v8)
    {
      do
      {
        sub_10058846C((uint64_t)v2, v7);
        v7 += 96;
        if (v7 - (void)*v6 == 4032)
        {
          uint64_t v9 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != v8);
      uint64_t v3 = (void **)a1[1];
      long long v4 = (void **)a1[2];
    }
  }
  void *v2 = 0;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      long long v4 = (void **)a1[2];
      uint64_t v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 21;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    int v13 = *v3++;
    operator delete(v13);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

void sub_10058846C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 87) < 0) {
    operator delete(*(void **)(a2 + 64));
  }
  uint64_t v3 = *(void **)(a2 + 16);
  if (v3)
  {
    *(void *)(a2 + 24) = v3;
    operator delete(v3);
  }
}

void sub_1005884C4()
{
}

void sub_1005885BC()
{
  if (*(unsigned char *)(v0 + 96))
  {
    if (*(char *)(v0 + 39) < 0) {
      operator delete(*(void **)(v0 + 16));
    }
  }
  operator delete();
}

void sub_100588600(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    unint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      uint64_t v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          uint64_t v12 = (uint64_t *)v4;
        }
        else {
          uint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        int v49 = v9;
        id v13 = sub_100588F70(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 8);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                uint64_t v22 = (uint64_t *)v17;
              }
              else {
                uint64_t v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              int v48 = v19;
              sub_1005889F0(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              double v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  __int16 v32 = (uint64_t *)v27;
                }
                else {
                  __int16 v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  double v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              int v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                char v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 32);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    int v39 = (uint64_t *)v36;
                  }
                  else {
                    int v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    char v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 8))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 32);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      unsigned int v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      unsigned int v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      char v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              int v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022BBAF8);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 8);
                *(_DWORD *)std::string buf = 136446466;
                BOOL v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022BBAF8);
                }
                int v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  int v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 8);
                int v50 = 136446466;
                CFBooleanRef v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                int v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_1005889F0(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_100588F70(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    uint64_t v12 = sub_1005893C0(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    __n128 result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 5);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

uint64_t sub_100588AE8(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(_DWORD *)a1 = *a2;
  sub_100588B40(a1 + 8, a3);
  uint64_t v5 = *(void *)(a3 + 32);
  *(void *)(a1 + 32) = *(void *)(a3 + 24);
  *(void *)(a1 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = *(unsigned char *)(a3 + 40);
  return a1;
}

uint64_t sub_100588B40(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)a1 = a1 + 8;
  sub_100588B98((_OWORD *)a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_100588B80(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_100588B98(_OWORD *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    long long v6 = (uint64_t *)result + 1;
    do
    {
      __n128 result = sub_100588C24(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      uint64_t v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_OWORD *sub_100588C24(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  long long v6 = sub_1002CF4AC(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x38uLL);
    _DWORD v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    sub_1000EDF90(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void *sub_100588CB4@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xA8uLL);
  __n128 result = sub_100588D10(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100588CFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100588D10(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022BBC18;
  sub_100588E20((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_100588D6C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100588D80(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022BBC18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100588DA0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022BBC18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100588DF4(uint64_t a1)
{
  sub_100588EB4((uint64_t)&v1, a1 + 24);
}

void *sub_100588E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a2 = *(_WORD *)a3;
  sub_1000E23EC((unsigned char *)(a2 + 8), a3 + 8);
  uint64_t v5 = *(void *)(a3 + 104);
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 104) = v5;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 12_Block_object_dispose(&STACK[0x850], 8) = 0;
  __n128 result = sub_1000DA6E8((void *)(a2 + 112), *(void *)(a3 + 112), *(void *)(a3 + 120), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a3 + 120) - *(void *)(a3 + 112)) >> 3));
  *(void *)(a2 + 136) = *(void *)(a3 + 136);
  return result;
}

void sub_100588E98(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 96)) {
    sub_101A65CE8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100588EB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 112);
  sub_1000D7F78(&v3);
  if (*(unsigned char *)(a2 + 96))
  {
    if (*(char *)(a2 + 39) < 0) {
      operator delete(*(void **)(a2 + 16));
    }
  }
}

uint64_t sub_100588F04(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    uint64_t v2 = (void **)(v1 + 112);
    sub_1000D7F78(&v2);
    if (*(unsigned char *)(v1 + 96))
    {
      if (*(char *)(v1 + 39) < 0) {
        operator delete(*(void **)(v1 + 16));
      }
    }
    operator delete();
  }
  return result;
}

id sub_100588F70(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_100588FD0(a1);
}

id sub_100588FD0(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BBC58);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D559E0 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        long long v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLWifiService_Type::NotificationData, Callbacunint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BBC58);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D559E0 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022BBC58);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_100589390(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t **sub_1005893C0(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  long long v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        __int16 v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        long long v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      long long v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    __int16 v9 = a1 + 1;
LABEL_10:
    __int16 v11 = operator new(0x38uLL);
    void v11[8] = **a4;
    *((void *)v11 + 5) = 3600;
    *((void *)v11 + 6) = "na";
    sub_1000EDF90(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *sub_100589490(uint64_t **a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = (uint64_t **)sub_1005295E0((uint64_t)a1, &v9, a2);
  long long v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    long long v6 = (uint64_t *)operator new(0x28uLL);
    v6[4] = *a3;
    sub_1000EDF90(a1, v9, v7, v6);
  }
  return v6;
}

void sub_100589514(void *a1)
{
  if (a1)
  {
    sub_100589514(*a1);
    sub_100589514(a1[1]);
    operator delete(a1);
  }
}

uint64_t sub_100589560(uint64_t *a1, uint64_t *a2, long long *a3, int *a4, int *a5, int *a6, double *a7, uint64_t *a8, char *a9, char *a10, int *a11)
{
  uint64_t v12 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) > 0x2E8BA2E8BA2E8BALL) {
    sub_1001D7FD4();
  }
  int v20 = a10;
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v13) {
    unint64_t v13 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL) {
    unint64_t v21 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v21 = v13;
  }
  BOOL v31 = a1 + 2;
  if (v21)
  {
    int v26 = a8;
    uint64_t v25 = v12;
    uint64_t v22 = (char *)sub_1000DA8B4((uint64_t)(a1 + 2), v21);
    uint64_t v12 = v25;
    a8 = v26;
    int v20 = a10;
  }
  else
  {
    uint64_t v22 = 0;
  }
  uint64_t v27 = v22;
  int v28 = &v22[88 * v12];
  int v30 = &v22[88 * v21];
  sub_1005896E8((uint64_t)(a1 + 2), (uint64_t)v28, a2, a3, a4, a5, a6, a7, a8, a9, v20, a11);
  double v29 = v28 + 88;
  sub_1001F89D8(a1, &v27);
  uint64_t v23 = a1[1];
  sub_1001F8BA4((uint64_t)&v27);
  return v23;
}

void sub_1005896D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1001F8BA4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1005896E8(uint64_t a1, uint64_t a2, uint64_t *a3, long long *a4, int *a5, int *a6, int *a7, double *a8, uint64_t *a9, char *a10, char *a11, int *a12)
{
  uint64_t v17 = *a3;
  if (*((char *)a4 + 23) < 0)
  {
    sub_1000DC48C(&v26, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v26 = *a4;
    uint64_t v27 = *((void *)a4 + 2);
  }
  int v18 = *a5;
  int v19 = *a6;
  int v20 = *a7;
  double result = *a8;
  uint64_t v22 = *a9;
  char v23 = *a10;
  char v24 = *a11;
  int v25 = *a12;
  *(void *)a2 = v17;
  *(_OWORD *)(a2 + _Block_object_dispose(&STACK[0x850], 8) = v26;
  *(void *)(a2 + 24) = v27;
  *(_DWORD *)(a2 + 32) = v18;
  *(_DWORD *)(a2 + 36) = v19;
  *(_DWORD *)(a2 + 40) = v20;
  *(double *)(a2 + 4_Block_object_dispose(&STACK[0x850], 8) = result;
  *(void *)(a2 + 56) = v22;
  *(unsigned char *)(a2 + 64) = v23;
  *(unsigned char *)(a2 + 65) = v24;
  *(_DWORD *)(a2 + 6_Block_object_dispose(&STACK[0x850], 8) = v25;
  *(unsigned char *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  return result;
}

void sub_1005897C8()
{
}

void sub_1005898C0()
{
  if (*(unsigned char *)(v0 + 96))
  {
    if (*(char *)(v0 + 39) < 0) {
      operator delete(*(void **)(v0 + 16));
    }
  }
  operator delete();
}

uint64_t sub_100589904(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    id v2 = (void **)(v1 + 112);
    sub_1000D7F78(&v2);
    if (*(unsigned char *)(v1 + 96))
    {
      if (*(char *)(v1 + 39) < 0) {
        operator delete(*(void **)(v1 + 16));
      }
    }
    operator delete();
  }
  return result;
}

void sub_100589970(uint64_t a1, _DWORD **a2, void *a3, const void *a4, __CFDictionary *a5)
{
  Mutable = CFArrayCreateMutable(0, 24, &kCFTypeArrayCallBacks);
  for (uint64_t i = *a2; i != (_DWORD *)*a3; ++i)
  {
    valuePtr[0] = *i;
    if (valuePtr[0] != -1)
    {
      int v10 = CFDictionaryCreateMutable(kCFAllocatorDefault, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFNumberRef v11 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
      CFNumberRef v12 = v11;
      if (v10) {
        BOOL v13 = v11 == 0;
      }
      else {
        BOOL v13 = 1;
      }
      if (v13)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        uint64_t v14 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 67240704;
          int v23 = valuePtr[0];
          __int16 v24 = 2050;
          int v25 = v10;
          __int16 v26 = 2050;
          CFNumberRef v27 = v12;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "could not create param for channel %{public}d channelDict %{public}p channelNumber %{public}p", buf, 0x1Cu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BBB18);
          }
          valuePtr[1] = 67240704;
          valuePtr[2] = valuePtr[0];
          __int16 v18 = 2050;
          int v19 = v10;
          __int16 v20 = 2050;
          CFNumberRef v21 = v12;
          int v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::setScanOptionsChannels(const Iter &, const Iter &, CFNumberRef, CFMutableDictionaryRef) [Iter = const int *]", "%s\n", v15);
          if (v15 != (char *)buf) {
            free(v15);
          }
        }
      }
      else
      {
        CFDictionaryAddValue(v10, @"CHANNEL", v11);
        CFDictionaryAddValue(v10, @"CHANNEL_FLAGS", a4);
        CFArrayAppendValue(Mutable, v10);
        CFRelease(v10);
        CFRelease(v12);
      }
    }
  }
  CFDictionarySetValue(a5, @"SCAN_CHANNELS", Mutable);
  CFRelease(Mutable);
}

void sub_100589C74(uint64_t a1, _DWORD **a2, void *a3, const void *a4, __CFDictionary *a5)
{
  Mutable = CFArrayCreateMutable(0, 24, &kCFTypeArrayCallBacks);
  for (uint64_t i = *a2; i != (_DWORD *)*a3; ++i)
  {
    valuePtr[0] = *i;
    if (valuePtr[0] != -1)
    {
      int v10 = CFDictionaryCreateMutable(kCFAllocatorDefault, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFNumberRef v11 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
      CFNumberRef v12 = v11;
      if (v10) {
        BOOL v13 = v11 == 0;
      }
      else {
        BOOL v13 = 1;
      }
      if (v13)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022BBB18);
        }
        uint64_t v14 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 67240704;
          int v23 = valuePtr[0];
          __int16 v24 = 2050;
          int v25 = v10;
          __int16 v26 = 2050;
          CFNumberRef v27 = v12;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "could not create param for channel %{public}d channelDict %{public}p channelNumber %{public}p", buf, 0x1Cu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BBB18);
          }
          valuePtr[1] = 67240704;
          valuePtr[2] = valuePtr[0];
          __int16 v18 = 2050;
          int v19 = v10;
          __int16 v20 = 2050;
          CFNumberRef v21 = v12;
          int v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::setScanOptionsChannels(const Iter &, const Iter &, CFNumberRef, CFMutableDictionaryRef) [Iter = int *]", "%s\n", v15);
          if (v15 != (char *)buf) {
            free(v15);
          }
        }
      }
      else
      {
        CFDictionaryAddValue(v10, @"CHANNEL", v11);
        CFDictionaryAddValue(v10, @"CHANNEL_FLAGS", a4);
        CFArrayAppendValue(Mutable, v10);
        CFRelease(v10);
        CFRelease(v12);
      }
    }
  }
  CFDictionarySetValue(a5, @"SCAN_CHANNELS", Mutable);
  CFRelease(Mutable);
}

void sub_100589F78(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    long long v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)int v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      char v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        int v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    int v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    BOOL v44 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      char v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        int v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        CFBooleanRef v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)CFBooleanRef v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      __int16 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        int v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int16 v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0xFC0uLL);
  sub_1000DA434(&v54, &v53);
  CFNumberRef v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  double v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10058A244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10058A290(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1001F6F78((uint64_t)v4, a3);
  sub_1001F6F78(a2, v4);
  if (v8 < 0) {
    operator delete(__p);
  }
  if (v5)
  {
    long long v6 = v5;
    operator delete(v5);
  }
}

void sub_10058A2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10058A304(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_1000DA770(result, a4);
    double result = (void *)sub_10058A38C((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10058A36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + _Block_object_dispose(&STACK[0x850], 8) = v10;
  sub_1000D7F78(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10058A38C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v17 = a4;
  uint64_t v18 = a4;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  char v16 = 0;
  if (a2 != a3)
  {
    long long v6 = (long long *)(a2 + 8);
    do
    {
      uint64_t v7 = (uint64_t)v6 - 8;
      *(void *)uint64_t v4 = *((void *)v6 - 1);
      char v8 = (unsigned char *)(v4 + 8);
      if (*((char *)v6 + 23) < 0)
      {
        sub_1000DC48C(v8, *(void **)v6, *((void *)v6 + 1));
        uint64_t v10 = v18;
      }
      else
      {
        long long v9 = *v6;
        *(void *)(v4 + 24) = *((void *)v6 + 2);
        *(_OWORD *)char v8 = v9;
        uint64_t v10 = v4;
      }
      long long v11 = *(long long *)((char *)v6 + 24);
      long long v12 = *(long long *)((char *)v6 + 40);
      long long v13 = *(long long *)((char *)v6 + 56);
      *(void *)(v4 + 80) = *((void *)v6 + 9);
      *(_OWORD *)(v4 + 4_Block_object_dispose(&STACK[0x850], 8) = v12;
      *(_OWORD *)(v4 + 64) = v13;
      *(_OWORD *)(v4 + 32) = v11;
      uint64_t v4 = v10 + 88;
      uint64_t v18 = v10 + 88;
      long long v6 = (long long *)((char *)v6 + 88);
    }
    while (v7 + 88 != a3);
  }
  char v16 = 1;
  sub_1000DA900((uint64_t)v15);
  return v4;
}

void sub_10058A464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10058A478(void *a1, void *a2)
{
  unint64_t v4 = sub_1000D8908((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  long long v11 = (void *)*v10;
  if (*v10)
  {
    do
    {
      unint64_t v12 = v11[1];
      if (v12 == v6)
      {
        if (sub_100B39178(v11 + 2, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(void *)&v5) {
            v12 %= *(void *)&v5;
          }
        }
        else
        {
          v12 &= *(void *)&v5 - 1;
        }
        if (v12 != v9) {
          return 0;
        }
      }
      long long v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

void sub_10058A574(uint64_t a1, _DWORD **a2, void *a3, const void *a4, __CFDictionary *a5)
{
  Mutable = CFArrayCreateMutable(0, 24, &kCFTypeArrayCallBacks);
  unint64_t v9 = *a2;
  if ((_DWORD *)*a3 != v9)
  {
    do
    {
      valuePtr[0] = *v9;
      if (valuePtr[0] != -1)
      {
        uint64_t v10 = CFDictionaryCreateMutable(kCFAllocatorDefault, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        CFNumberRef v11 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
        CFNumberRef v12 = v11;
        if (v10) {
          BOOL v13 = v11 == 0;
        }
        else {
          BOOL v13 = 1;
        }
        if (v13)
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BBB18);
          }
          BOOL v14 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 67240704;
            int v23 = valuePtr[0];
            __int16 v24 = 2050;
            unint64_t v25 = v10;
            __int16 v26 = 2050;
            CFNumberRef v27 = v12;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "could not create param for channel %{public}d channelDict %{public}p channelNumber %{public}p", buf, 0x1Cu);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1022BBB18);
            }
            valuePtr[1] = 67240704;
            valuePtr[2] = valuePtr[0];
            __int16 v18 = 2050;
            int v19 = v10;
            __int16 v20 = 2050;
            CFNumberRef v21 = v12;
            uint64_t v15 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::setScanOptionsChannels(const Iter &, const Iter &, CFNumberRef, CFMutableDictionaryRef) [Iter = std::__wrap_iter<int *>]", "%s\n", v15);
            if (v15 != (char *)buf) {
              free(v15);
            }
          }
        }
        else
        {
          CFDictionaryAddValue(v10, @"CHANNEL", v11);
          CFDictionaryAddValue(v10, @"CHANNEL_FLAGS", a4);
          CFArrayAppendValue(Mutable, v10);
          CFRelease(v10);
          CFRelease(v12);
        }
      }
      ++v9;
    }
    while (v9 != (_DWORD *)*a3);
  }
  CFDictionarySetValue(a5, @"SCAN_CHANNELS", Mutable);
  CFRelease(Mutable);
}

void sub_10058A878(uint64_t a1, _DWORD **a2, void *a3, const void *a4, __CFDictionary *a5)
{
  Mutable = CFArrayCreateMutable(0, 24, &kCFTypeArrayCallBacks);
  unint64_t v9 = *a2;
  if ((_DWORD *)*a3 != v9)
  {
    do
    {
      valuePtr[0] = *v9;
      if (valuePtr[0] != -1)
      {
        uint64_t v10 = CFDictionaryCreateMutable(kCFAllocatorDefault, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        CFNumberRef v11 = CFNumberCreate(0, kCFNumberSInt32Type, valuePtr);
        CFNumberRef v12 = v11;
        if (v10) {
          BOOL v13 = v11 == 0;
        }
        else {
          BOOL v13 = 1;
        }
        if (v13)
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1022BBB18);
          }
          BOOL v14 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 67240704;
            int v23 = valuePtr[0];
            __int16 v24 = 2050;
            unint64_t v25 = v10;
            __int16 v26 = 2050;
            CFNumberRef v27 = v12;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "could not create param for channel %{public}d channelDict %{public}p channelNumber %{public}p", buf, 0x1Cu);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1022BBB18);
            }
            valuePtr[1] = 67240704;
            valuePtr[2] = valuePtr[0];
            __int16 v18 = 2050;
            int v19 = v10;
            __int16 v20 = 2050;
            CFNumberRef v21 = v12;
            uint64_t v15 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiService::setScanOptionsChannels(const Iter &, const Iter &, CFNumberRef, CFMutableDictionaryRef) [Iter = std::__wrap_iter<const int *>]", "%s\n", v15);
            if (v15 != (char *)buf) {
              free(v15);
            }
          }
        }
        else
        {
          CFDictionaryAddValue(v10, @"CHANNEL", v11);
          CFDictionaryAddValue(v10, @"CHANNEL_FLAGS", a4);
          CFArrayAppendValue(Mutable, v10);
          CFRelease(v10);
          CFRelease(v12);
        }
      }
      ++v9;
    }
    while (v9 != (_DWORD *)*a3);
  }
  CFDictionarySetValue(a5, @"SCAN_CHANNELS", Mutable);
  CFRelease(Mutable);
}

uint64_t sub_10058AB7C(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x2A) {
    a2 = 1;
  }
  if (v2 < 0x54) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 42;
  }
  return v4 ^ 1u;
}

uint64_t sub_10058ABDC(uint64_t a1)
{
  *(void *)a1 = off_1022BBCD0;
  unint64_t v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

id sub_10058AC4C(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_10058ACAC(a1);
}

id sub_10058ACAC(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BBC58);
      }
      BOOL v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D236F4 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        unint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLWifiService_Type::RegInfo, Callbacunint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022BBC58);
      }
      int8x8_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D236F4 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022BBC58);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

BOOL sub_10058B06C()
{
  return os_log_type_enabled(v0, OS_LOG_TYPE_FAULT);
}

void sub_10058B098()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_10058B150(_Unwind_Exception *a1)
{
}

void sub_10058B168()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *uint64_t v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_10058B210(_Unwind_Exception *a1)
{
}

uint64_t sub_10058B528(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0;
        uint64_t v11 = OBJC_IVAR___PBDataReader__error;
        int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v11 = OBJC_IVAR___PBDataReader__error;
    int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v12 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v14 = 0;
        unsigned int v15 = 0;
        uint64_t v16 = 0;
        *(unsigned char *)(a1 + 52) |= 2u;
        while (1)
        {
          uint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v18 = v17 + 1;
          if (v17 == -1 || v18 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v19 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18;
          v16 |= (unint64_t)(v19 & 0x7F) << v14;
          if ((v19 & 0x80) == 0) {
            goto LABEL_54;
          }
          v14 += 7;
          BOOL v10 = v15++ >= 9;
          if (v10)
          {
            LODWORD(v16) = 0;
            goto LABEL_56;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_54:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v16) = 0;
        }
LABEL_56:
        uint64_t v37 = 44;
        goto LABEL_61;
      case 2u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v16 = 0;
        while (2)
        {
          uint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v24 = v23 + 1;
          if (v23 == -1 || v24 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24;
            v16 |= (unint64_t)(v25 & 0x7F) << v21;
            if (v25 < 0)
            {
              v21 += 7;
              BOOL v10 = v22++ >= 9;
              if (v10)
              {
                LODWORD(v16) = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v16) = 0;
        }
LABEL_60:
        uint64_t v37 = 40;
LABEL_61:
        *(_DWORD *)(a1 + v37) = v16;
        continue;
      case 3u:
        unint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v27 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v11) = 1;
          uint64_t v27 = 0;
        }
        uint64_t v38 = 8;
        goto LABEL_74;
      case 4u:
        unint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v27 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v11) = 1;
          uint64_t v27 = 0;
        }
        uint64_t v38 = 16;
        goto LABEL_74;
      case 5u:
        unint64_t v29 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v27 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v11) = 1;
          uint64_t v27 = 0;
        }
        uint64_t v38 = 24;
        goto LABEL_74;
      case 6u:
        *(unsigned char *)(a1 + 52) |= 1u;
        unint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v27 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v27 = 0;
        }
        uint64_t v38 = 32;
LABEL_74:
        *(void *)(a1 + v3_Block_object_dispose(&STACK[0x850], 8) = v27;
        continue;
      case 7u:
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v33 = 0;
        *(unsigned char *)(a1 + 52) |= 4u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      uint64_t v34 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v35 = v34 + 1;
      if (v34 == -1 || v35 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v36 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35;
      v33 |= (unint64_t)(v36 & 0x7F) << v31;
      if ((v36 & 0x80) == 0) {
        goto LABEL_63;
      }
      v31 += 7;
      BOOL v10 = v32++ >= 9;
      if (v10)
      {
        uint64_t v33 = 0;
        goto LABEL_65;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_63:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v33 = 0;
    }
LABEL_65:
    *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = v33 != 0;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_10058C198(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10058C1CC(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = &off_1022BBD88;
  sub_101A1F180((unsigned __int8 *)(a1 + 8), "NatalimetryMaxDelay", &qword_101D23760, 0);
  *(void *)a1 = off_1022BBD18;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = *a2;
  uint64_t v6 = a2[1];
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 201) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x850], 8) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  LOBYTE(v_Block_object_dispose(&STACK[0x850], 8) = 0;
  sub_10006ACBC((unsigned __int8 *)(a1 + 217), "LogBinaryNatalimetryOutputs", (unsigned __int8 *)&v8, 0);
  LODWORD(v_Block_object_dispose(&STACK[0x850], 8) = -1082130432;
  sub_101A22680((unsigned __int8 *)(a1 + 220), "OverrideUserMetsWithMets", &v8, 0);
  LODWORD(v_Block_object_dispose(&STACK[0x850], 8) = -1082130432;
  sub_101A22680((unsigned __int8 *)(a1 + 232), "OverrideRawTruthMetsWithMets", &v8, 0);
  *(void *)(a1 + 24_Block_object_dispose(&STACK[0x850], 8) = off_1022B2000;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(void *)(a1 + 312) = a1 + 320;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 32_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)(a1 + 336) = 0x10000000000000;
  *(_DWORD *)(a1 + 256) = 3;
  *(void *)(a1 + 344) = off_1022B2000;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(void *)(a1 + 40_Block_object_dispose(&STACK[0x850], 8) = a1 + 416;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0x10000000000000;
  *(_DWORD *)(a1 + 352) = 3;
  *(void *)(a1 + 440) = a3;
  sub_100BA529C(a1 + 448, a3);
  sub_10108D8B4(a1 + 520);
  int v7 = sub_101284E70();
  sub_1010953B0(v7);
}

void sub_10058C474()
{
}

uint64_t sub_10058C57C(uint64_t a1)
{
  *(void *)a1 = off_1022BBD18;

  sub_10058D17C((void *)(a1 + 520));
  sub_100BA5304(a1 + 448);
  *(void *)(a1 + 344) = off_1022B2000;
  sub_1000F5BB0(a1 + 408, *(void **)(a1 + 416));
  sub_10041F48C((void *)(a1 + 360));
  *(void *)(a1 + 24_Block_object_dispose(&STACK[0x850], 8) = off_1022B2000;
  sub_1000F5BB0(a1 + 312, *(void **)(a1 + 320));
  sub_10041F48C((void *)(a1 + 264));
  sub_1000D80C4((void *)(a1 + 168));
  sub_1000D80C4((void *)(a1 + 120));
  sub_10041F48C((void *)(a1 + 72));
  uint64_t v2 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  BOOL v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  uint64_t v4 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  return a1;
}

void sub_10058C6C8(uint64_t a1)
{
  sub_10058C57C(a1);

  operator delete();
}

void sub_10058C700(uint64_t a1, uint64_t a2)
{
}

void sub_10058C708(uint64_t a1)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022BBDC0);
  }
  uint64_t v2 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Pausing calorimetry processing", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022BBDC0);
    }
    LOWORD(v8[0]) = 0;
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCalorieController::pause()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  *(unsigned char *)(a1 + 216) = 1;
  double Current = CFAbsoluteTimeGetCurrent();
  if (*(unsigned char *)(a1 + 218))
  {
    double v4 = Current;
    v8[0] = off_1022E6FB0;
    char v9 = 1;
    *(double *)&v8[1] = Current;
    uint64_t v5 = sub_101282D9C();
    sub_10128431C(v5, (uint64_t)v8);
    sub_10170140C(buf);
    sub_101727A28((uint64_t)buf);
    v13 |= 1u;
    double v12 = v4;
    uint64_t v6 = v11;
    *(unsigned char *)(v11 + 12) |= 1u;
    *(unsigned char *)(v6 + _Block_object_dispose(&STACK[0x850], 8) = 1;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022BBDE0);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)buf);
    }
    sub_101706914((PB::Base *)buf);
  }
}

void sub_10058C978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_10058C998(uint64_t a1)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022BBDC0);
  }
  uint64_t v2 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Resuming calorimetry processing", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022BBDC0);
    }
    LOWORD(v6) = 0;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCalorieController::resume()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  *(unsigned char *)(a1 + 216) = 0;
  if (*(unsigned char *)(a1 + 218))
  {
    uint64_t v6 = off_1022E6FB0;
    char v8 = 0;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v3 = sub_101282D9C();
    sub_10128431C(v3, (uint64_t)&v6);
    sub_10170140C(buf);
    sub_101727A28((uint64_t)buf);
    v12 |= 1u;
    CFAbsoluteTime v11 = Current;
    uint64_t v4 = v10;
    *(unsigned char *)(v10 + 12) |= 1u;
    *(unsigned char *)(v4 + _Block_object_dispose(&STACK[0x850], 8) = 0;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022BBDE0);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)buf);
    }
    sub_101706914((PB::Base *)buf);
  }
}

void sub_10058CBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10058CC14(uint64_t a1, uint64_t a2)
{
  sub_10108F040(a1 + 520, a2);
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 24);
    return v4();
  }
  return result;
}

void sub_10058CC88(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  sub_100103240();
  if (sub_10010145C())
  {
    char v12 = objc_alloc_init(ALActivityLog);
    [(ALActivityLog *)v12 setTimestamp:*(double *)(a5 + 16)];
    [(ALActivityLog *)v12 setCalorieData:objc_alloc_init(ALCMCalorieData)];
    [(ALCMCalorieData *)[(ALActivityLog *)v12 calorieData] setActivityType:*(unsigned int *)(a5 + 24)];
    [(ALCMCalorieData *)[(ALActivityLog *)v12 calorieData] setIsStanding:*(unsigned __int8 *)(a5 + 29)];
    [(ALCMCalorieData *)[(ALActivityLog *)v12 calorieData] setUserMets:*(double *)(a5 + 32)];
    [(ALCMCalorieData *)[(ALActivityLog *)v12 calorieData] setTruthMets:*(double *)(a5 + 40)];
    if (*(unsigned char *)(a4 + 208))
    {
      [(ALCMCalorieData *)[(ALActivityLog *)v12 calorieData] setUserMetsSource:a6[6]];
      [(ALCMCalorieData *)[(ALActivityLog *)v12 calorieData] setTruthMetsSource:a6[8]];
      int v13 = *a6;
      char v14 = [(ALActivityLog *)v12 calorieData];
      LODWORD(v15) = v13;
      [(ALCMCalorieData *)v14 setMetsHR:v15];
      int v16 = a6[1];
      uint64_t v17 = [(ALActivityLog *)v12 calorieData];
      LODWORD(v1_Block_object_dispose(&STACK[0x850], 8) = v16;
      [(ALCMCalorieData *)v17 setMetsWR:v18];
      int v19 = a6[2];
      __int16 v20 = [(ALActivityLog *)v12 calorieData];
      LODWORD(v21) = v19;
      [(ALCMCalorieData *)v20 setMetsFM:v21];
    }
    [+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance") proxyForService:@"CLActivityLogger"] logData:v12;
    if (*(unsigned char *)(*(void *)(a3 + 16) + 80))
    {
      uint64_t v23 = objc_alloc_init(ALActivityLog);
      [(ALActivityLog *)v23 setTimestamp:a1];
      [(ALActivityLog *)v23 setOdometer:objc_alloc_init(ALCLOdometer)];
      float v24 = *(double *)(a3 + 624);
      char v25 = [(ALActivityLog *)v23 odometer];
      *(float *)&double v26 = v24;
      [(ALCLOdometer *)v25 setDistance:v26];
      float v27 = *(double *)(a3 + 632);
      unint64_t v28 = [(ALActivityLog *)v23 odometer];
      *(float *)&double v29 = v27;
      [(ALCLOdometer *)v28 setAccuracy:v29];
      float v30 = *(double *)(a3 + 640);
      char v31 = [(ALActivityLog *)v23 odometer];
      *(float *)&double v32 = v30;
      [(ALCLOdometer *)v31 setGpsAltitude:v32];
      float v33 = *(double *)(a3 + 648);
      uint64_t v34 = [(ALActivityLog *)v23 odometer];
      *(float *)&double v35 = v33;
      [(ALCLOdometer *)v34 setSpeed:v35];
      float v36 = *(double *)(a3 + 656);
      uint64_t v37 = [(ALActivityLog *)v23 odometer];
      *(float *)&double v38 = v36;
      [(ALCLOdometer *)v37 setRawSpeed:v38];
      float v39 = *(double *)(a3 + 664);
      uint64_t v40 = [(ALActivityLog *)v23 odometer];
      *(float *)&double v41 = v39;
      [(ALCLOdometer *)v40 setOdometer:v41];
      float v42 = *(double *)(a3 + 672);
      __int16 v43 = [(ALActivityLog *)v23 odometer];
      *(float *)&double v44 = v42;
      [(ALCLOdometer *)v43 setGpsSpeedAccuracy:v44];
      [(ALCLOdometer *)[(ALActivityLog *)v23 odometer] setTimestampGps:*(double *)(a3 + 680)];
      [(ALCLOdometer *)[(ALActivityLog *)v23 odometer] setQuality:*(unsigned int *)(a3 + 696)];
      [[+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance") proxyForService:@"CLActivityLogger"] logData:v23];
    }
    if (*(unsigned char *)(*(void *)(a3 + 24) + 80))
    {
      unint64_t v46 = objc_alloc_init(ALActivityLog);
      [(ALActivityLog *)v46 setTimestamp:a1];
      [(ALActivityLog *)v46 setElevation:objc_alloc_init(ALCMElevation)];
      [(ALCMElevation *)[(ALActivityLog *)v46 elevation] setElevationAscended:*(unsigned int *)(a3 + 824)];
      [(ALCMElevation *)[(ALActivityLog *)v46 elevation] setElevationDescended:*(unsigned int *)(a3 + 828)];
      [(ALCMElevation *)[(ALActivityLog *)v46 elevation] setGradeType:*(unsigned int *)(a3 + 832)];
      float v47 = *(double *)(a3 + 840);
      int v48 = [(ALActivityLog *)v46 elevation];
      *(float *)&double v49 = v47;
      [(ALCMElevation *)v48 setVerticalSpeed:v49];
      [(ALCMElevation *)[(ALActivityLog *)v46 elevation] setRawGradeType:*(unsigned int *)(a3 + 832)];
      [(ALCMElevation *)[(ALActivityLog *)v46 elevation] setSource:*(unsigned int *)(a3 + 848)];
      [+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance") proxyForService:@"CLActivityLogger"] logData:v46;
    }
    if (*(unsigned char *)(*(void *)(a3 + 8) + 80))
    {
      CFBooleanRef v51 = objc_alloc_init(ALActivityLog);
      [(ALActivityLog *)v51 setTimestamp:a1];
      [(ALActivityLog *)v51 setStairClimbingModel:objc_alloc_init(ALCLStairClimbingModel)];
      int v52 = *(_DWORD *)(a3 + 304);
      int v53 = [(ALActivityLog *)v51 stairClimbingModel];
      LODWORD(v54) = v52;
      [(ALCLStairClimbingModel *)v53 setMachineFrequency:v54];
      [[+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance") proxyForService:@"CLActivityLogger"] logData:v51];
      if (*(unsigned char *)(*(void *)(a3 + 8) + 80))
      {
        __int16 v56 = objc_alloc_init(ALActivityLog);
        [(ALActivityLog *)v56 setTimestamp:a1];
        [(ALActivityLog *)v56 setRowingModel:objc_alloc_init(ALCLRowingModel)];
        int v57 = *(_DWORD *)(a3 + 316);
        __int16 v58 = [(ALActivityLog *)v56 rowingModel];
        LODWORD(v59) = v57;
        [(ALCLRowingModel *)v58 setStrokePower:v59];
        int v60 = *(_DWORD *)(a3 + 312);
        BOOL v61 = [(ALActivityLog *)v56 rowingModel];
        LODWORD(v62) = v60;
        [(ALCLRowingModel *)v61 setStrokeAmp:v62];
        int v63 = *(_DWORD *)(a3 + 308);
        int v64 = [(ALActivityLog *)v56 rowingModel];
        LODWORD(v65) = v63;
        [(ALCLRowingModel *)v64 setStrokeFrequency:v65];
        [[+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance") proxyForService:@"CLActivityLogger"] logData:v56];
      }
    }
  }
}

uint64_t sub_10058D17C(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 36;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 73;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    int v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

void sub_10058D224(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_10058D258(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    int v7 = (void *)a1[1];
    char v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    char v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)char v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      char v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        char v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }
    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    double v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      char v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        CFBooleanRef v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)CFBooleanRef v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      __int16 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        char v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int16 v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  float v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  double v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10058D524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10058D570(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    int v7 = (void *)a1[1];
    char v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    char v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)char v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      char v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        char v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }
    char v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    double v44 = (void *)a1[1];
    char v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      char v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        char v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        CFBooleanRef v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)CFBooleanRef v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      __int16 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        char v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int16 v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  float v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  double v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10058D83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10058D888()
{
  sub_100134750(qword_10247B3F0, "Acc800Fp");
  dword_10247B408 = 800;
  __cxa_atexit((void (*)(void *))sub_10058C198, qword_10247B3F0, (void *)&_mh_execute_header);
  sub_100134750(qword_10247B410, "DmFp");
  dword_10247B428 = 200;

  return __cxa_atexit((void (*)(void *))sub_10058C198, qword_10247B410, (void *)&_mh_execute_header);
}

void sub_10058D930()
{
}

void sub_10058D97C()
{
}

uint64_t sub_10058D9A0(char a1)
{
  uint64_t result = qword_102489FB8;
  if (!qword_102489FB8)
  {
    uint64_t v3 = sub_1000D3E78();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    uint64_t v4[2] = sub_10058DA2C;
    void v4[3] = &unk_1022BBE00;
    char v5 = a1;
    sub_1009E8E94(v3, (uint64_t)v4);
    return qword_102489FB8;
  }
  return result;
}

void sub_10058DA2C()
{
  if (!qword_102489FB8) {
    sub_10058D930();
  }
}

void sub_10058DA44(uint64_t a1)
{
}

void sub_10058E128(_Unwind_Exception *a1, uint64_t a2)
{
  nullsub_41(v7, a2);
  sub_100D4F09C(v6);
  sub_100B8FF64(v5);
  sub_10058FC00(v4);
  uint64_t v9 = v2[246];
  v2[246] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)v2[245];
  if (v10) {
    sub_1000DB0A0(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)v2[243];
  if (v11) {
    sub_1000DB0A0(v11);
  }
  sub_1004C62FC(v3, 0);
  sub_1010D3850((uint64_t)v2);
  _Unwind_Resume(a1);
}

void sub_10058E22C()
{
  if (qword_102418FE0 != -1) {
    dispatch_once(&qword_102418FE0, &stru_1022BC920);
  }
  uint64_t v0 = qword_102418FE8;
  if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "cma reopening HID driver interface, this is not expected", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_1022BC920);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static void CLSPU::onRegistryIDChangedBounce(void *)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

uint64_t sub_10058E3B4(uint64_t a1)
{
  sub_1000D3E78();
  sub_1000D5B68();

  return sub_1005912E0(a1, 0);
}

void sub_10058E3F4(void *a1)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current != (CFRunLoopRef)sub_1001BEA14())
  {
    uint64_t v3 = sub_1000D3E78();
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1005912D8;
    void v15[3] = &unk_1022A3020;
    v15[4] = a1;
    sub_1009E8E94(v3, (uint64_t)v15);
    return;
  }
  if (a1[242])
  {
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_1022BC920);
    }
    uint64_t v4 = qword_102418FE8;
    if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Close hid driver interface", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_1022BC920);
      }
      LOWORD(v16) = 0;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPU::closeHidDriverInterface()", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    uint64_t v5 = a1 + 239;
    uint64_t v6 = (IOCFPlugInInterface **)a1[239];
    uint64_t v7 = a1[240];
    if (v7)
    {
      (*(void (**)(void, void))(*(void *)v7 + 72))(a1[240], 0);
      if (!v6) {
        goto LABEL_14;
      }
    }
    else if (!v6)
    {
      *(void *)(a1[242] + _Block_object_dispose(&STACK[0x850], 8) = 0;
      *uint64_t v5 = 0;
      a1[240] = 0;
      return;
    }
    ((void (*)(IOCFPlugInInterface **))(*v6)->Release)(v6);
    IODestroyPlugInInterface(v6);
LABEL_14:
    *(void *)(a1[242] + _Block_object_dispose(&STACK[0x850], 8) = 0;
    *uint64_t v5 = 0;
    a1[240] = 0;
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_1022BC920);
    }
    char v8 = qword_102418FE8;
    if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = a1[239];
      uint64_t v10 = a1[240];
      *(_DWORD *)std::string buf = 134218752;
      unint64_t v25 = v6;
      __int16 v26 = 2048;
      uint64_t v27 = v7;
      __int16 v28 = 2048;
      uint64_t v29 = v9;
      __int16 v30 = 2048;
      uint64_t v31 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Closed hid driver interface, {cfPlugInInterface, hidDriverInterface} was then {%p,%p}, is now {%p,%p}", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_1022BC920);
      }
      uint64_t v12 = a1[239];
      uint64_t v13 = a1[240];
      int v16 = 134218752;
      uint64_t v17 = v6;
      __int16 v18 = 2048;
      uint64_t v19 = v7;
      __int16 v20 = 2048;
      uint64_t v21 = v12;
      __int16 v22 = 2048;
      uint64_t v23 = v13;
      BOOL v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPU::closeHidDriverInterface()", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
}

void sub_10058E7F4(uint64_t a1, uint64_t a2)
{
  kern_return_t v17;
  kern_return_t v18;
  NSObject *v19;
  NSObject *v20;
  uint8_t *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  IOCFPlugInInterface **v25;
  HRESULT (__cdecl *QueryInterface)(void *, REFIID, LPVOID *);
  CFUUIDRef v27;
  CFUUIDBytes v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void v42[5];
  char v43;
  SInt32 theScore;
  uint64_t v45;
  IOCFPlugInInterface **theInterface;
  uint64_t valuePtr;
  int v48;
  unsigned char v49[18];
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  IOCFPlugInInterface **v53;
  __int16 v54;
  uint64_t v55;
  uint8_t buf[4];
  unsigned char v57[18];
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  IOCFPlugInInterface **v61;
  __int16 v62;
  uint64_t v63;

  if (qword_102418FE0 != -1) {
    dispatch_once(&qword_102418FE0, &stru_1022BC920);
  }
  uint64_t v4 = qword_102418FE8;
  if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)int v57 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Open hid driver interface,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_1022BC920);
    }
    int v48 = 67109120;
    *(_DWORD *)uint64_t v49 = a2;
    double v35 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPU::openHidDriverInterface(BOOL)", "%s\n", v35);
    if (v35 != (char *)buf) {
      free(v35);
    }
  }
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current != (CFRunLoopRef)sub_1001BEA14())
  {
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_1022BC920);
    }
    uint64_t v6 = qword_102418FE8;
    if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "openHidDriverInterface should be called from motion thread", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_1022BC920);
      }
      LOWORD(v4_Block_object_dispose(&STACK[0x850], 8) = 0;
      uint64_t v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLSPU::openHidDriverInterface(BOOL)", "%s\n", v36);
      if (v36 != (char *)buf) {
        free(v36);
      }
    }
    uint64_t v7 = sub_1000D3E78();
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472;
    v42[2] = sub_1005912C8;
    v42[3] = &unk_1022BBA18;
    v42[4] = a1;
    __int16 v43 = a2;
    sub_1009E8E94(v7, (uint64_t)v42);
    return;
  }
  uint64_t v8 = *(void *)(a1 + 1936);
  if (!v8) {
    return;
  }
  theInterface = 0;
  int valuePtr = 0;
  uint64_t v45 = 0;
  uint64_t v9 = (__IOHIDServiceClient *)sub_100A291D0(v8);
  if (v9)
  {
    uint64_t v10 = v9;
    CFNumberRef RegistryID = (const __CFNumber *)IOHIDServiceClientGetRegistryID(v9);
    if (RegistryID)
    {
      CFNumberGetValue(RegistryID, kCFNumberSInt64Type, &valuePtr);
      if (valuePtr)
      {
        theScore = 0;
        CFDictionaryRef v12 = IORegistryEntryIDMatching(valuePtr);
        io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v12);
        if (MatchingService)
        {
          io_service_t v14 = MatchingService;
          CFUUIDRef v15 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0x3Bu, 0xC5u, 0xCCu, 0x87u, 0x84u, 0x5Eu, 0x48u, 0xABu, 0xA9u, 0xC2u, 0x94u, 0x36u, 0, 0x1Bu, 0xA6u, 0x8Au);
          CFUUIDRef v16 = CFUUIDGetConstantUUIDWithBytes(0, 0xC2u, 0x44u, 0xE8u, 0x58u, 0x10u, 0x9Cu, 0x11u, 0xD4u, 0x91u, 0xD4u, 0, 0x50u, 0xE4u, 0xC6u, 0x42u, 0x6Fu);
          uint64_t v17 = IOCreatePlugInInterfaceForService(v14, v15, v16, &theInterface, &theScore);
          if (!v17)
          {
            IOObjectRelease(v14);
            unint64_t v25 = theInterface;
            QueryInterface = (*theInterface)->QueryInterface;
            uint64_t v27 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0x6Eu, 0xBEu, 0xBAu, 0x6Eu, 9u, 0x1Eu, 0x45u, 0x2Eu, 0x82u, 0xEAu, 0x29u, 0x79u, 0x81u, 0x6Fu, 0xB1u, 0xB5u);
            __int16 v28 = CFUUIDGetUUIDBytes(v27);
            if (((unsigned int (*)(IOCFPlugInInterface **, void, void, uint64_t *))QueryInterface)(v25, *(void *)&v28.byte0, *(void *)&v28.byte8, &v45))
            {
              if (qword_102418FE0 != -1) {
                dispatch_once(&qword_102418FE0, &stru_1022BC920);
              }
              uint64_t v29 = qword_102418FE8;
              if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_FAULT))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "Unable to set up query interface", buf, 2u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102418FE0 != -1) {
                  dispatch_once(&qword_102418FE0, &stru_1022BC920);
                }
                LOWORD(v4_Block_object_dispose(&STACK[0x850], 8) = 0;
                uint64_t v37 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLSPU::openHidDriverInterface(BOOL)", "%s\n", v37);
                if (v37 != (char *)buf) {
                  free(v37);
                }
              }
            }
            else
            {
              if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v45 + 64))(v45, a2))
              {
                if (qword_102418FE0 != -1) {
                  dispatch_once(&qword_102418FE0, &stru_1022BC920);
                }
                uint64_t v31 = qword_102418FE8;
                if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_DEFAULT))
                {
                  long long v32 = *(void *)(a1 + 1912);
                  unint64_t v33 = *(void *)(a1 + 1920);
                  *(_DWORD *)std::string buf = 134219008;
                  *(void *)int v57 = valuePtr;
                  *(_WORD *)&v57[8] = 2048;
                  *(void *)&v57[10] = v32;
                  __int16 v58 = 2048;
                  double v59 = v33;
                  int v60 = 2048;
                  BOOL v61 = theInterface;
                  double v62 = 2048;
                  int v63 = v45;
                  _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Opened hid driver interface, registryID %llx, {cfPlugInInterface, hidDriverInterface} was then {%p,%p}, is now {%p,%p}", buf, 0x34u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102418FE0 != -1) {
                    dispatch_once(&qword_102418FE0, &stru_1022BC920);
                  }
                  uint64_t v39 = *(void *)(a1 + 1912);
                  uint64_t v40 = *(void *)(a1 + 1920);
                  int v48 = 134219008;
                  *(void *)uint64_t v49 = valuePtr;
                  *(_WORD *)&v49[8] = 2048;
                  *(void *)&v49[10] = v39;
                  uint64_t v50 = 2048;
                  CFBooleanRef v51 = v40;
                  uint64_t v52 = 2048;
                  int v53 = theInterface;
                  long long v54 = 2048;
                  long long v55 = v45;
                  double v41 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPU::openHidDriverInterface(BOOL)", "%s\n", v41);
                  if (v41 != (char *)buf) {
                    free(v41);
                  }
                }
                *(void *)(*(void *)(a1 + 1936) + _Block_object_dispose(&STACK[0x850], 8) = valuePtr;
                uint64_t v34 = v45;
                *(void *)(a1 + 1912) = theInterface;
                *(void *)(a1 + 1920) = v34;
                sub_1005911D4((NSObject **)(a1 + 192), v34);
                if (*(void *)(a1 + 1920))
                {
                  if (a2) {
                    sub_100591248(a1);
                  }
                  else {
                    sub_100591288(a1);
                  }
                }
                return;
              }
              if (qword_102418FE0 != -1) {
                dispatch_once(&qword_102418FE0, &stru_1022BC920);
              }
              __int16 v30 = qword_102418FE8;
              if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)std::string buf = 67240450;
                *(_DWORD *)int v57 = 0;
                *(_WORD *)&v57[4] = 2114;
                *(void *)&v57[6] = v10;
                _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "Unable to create plugin interface: kr:%{public}x service:%{public}@", buf, 0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102418FE0 != -1) {
                  dispatch_once(&qword_102418FE0, &stru_1022BC920);
                }
                int v48 = 67240450;
                *(_DWORD *)uint64_t v49 = 0;
                *(_WORD *)&void v49[4] = 2114;
                *(void *)&unsigned char v49[6] = v10;
                double v38 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLSPU::openHidDriverInterface(BOOL)", "%s\n", v38);
                if (v38 != (char *)buf) {
                  free(v38);
                }
              }
              if (v45) {
                (*(void (**)(uint64_t, void))(*(void *)v45 + 72))(v45, 0);
              }
            }
            if (theInterface)
            {
              ((void (*)(IOCFPlugInInterface **))(*theInterface)->Release)(theInterface);
              IODestroyPlugInInterface(theInterface);
            }
            return;
          }
          __int16 v18 = v17;
          if (qword_102418FE0 != -1) {
            dispatch_once(&qword_102418FE0, &stru_1022BC920);
          }
          uint64_t v19 = qword_102418FE8;
          if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)std::string buf = 67240192;
            *(_DWORD *)int v57 = v18;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Unable to create plugin interface: 0x%{public}x", buf, 8u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FE0 != -1) {
              dispatch_once(&qword_102418FE0, &stru_1022BC920);
            }
            int v48 = 67240192;
            *(_DWORD *)uint64_t v49 = v18;
LABEL_60:
            uint64_t v21 = (uint8_t *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLSPU::openHidDriverInterface(BOOL)", "%s\n");
LABEL_61:
            if (v21 != buf) {
              free(v21);
            }
          }
        }
        else
        {
          if (qword_102418FE0 != -1) {
            dispatch_once(&qword_102418FE0, &stru_1022BC920);
          }
          uint64_t v24 = qword_102418FE8;
          if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "Service doesn't exist", buf, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FE0 != -1) {
              dispatch_once(&qword_102418FE0, &stru_1022BC920);
            }
            LOWORD(v4_Block_object_dispose(&STACK[0x850], 8) = 0;
            goto LABEL_60;
          }
        }
      }
      else
      {
        if (qword_102418FE0 != -1) {
          dispatch_once(&qword_102418FE0, &stru_1022BC920);
        }
        uint64_t v23 = qword_102418FE8;
        if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "Can't get cma registry ID", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FE0 != -1) {
            dispatch_once(&qword_102418FE0, &stru_1022BC920);
          }
          LOWORD(v4_Block_object_dispose(&STACK[0x850], 8) = 0;
          goto LABEL_60;
        }
      }
    }
    else
    {
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_1022BC920);
      }
      __int16 v22 = qword_102418FE8;
      if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "IOHIDServiceClientGetRegistryID query for cma service failed", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FE0 != -1) {
          dispatch_once(&qword_102418FE0, &stru_1022BC920);
        }
        LOWORD(v4_Block_object_dispose(&STACK[0x850], 8) = 0;
        goto LABEL_60;
      }
    }
  }
  else
  {
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_1022BC920);
    }
    __int16 v20 = qword_102418FE8;
    if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "IoHidDevice is not ready", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_1022BC920);
      }
      LOWORD(v4_Block_object_dispose(&STACK[0x850], 8) = 0;
      uint64_t v21 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPU::openHidDriverInterface(BOOL)", "%s\n");
      goto LABEL_61;
    }
  }
}

uint64_t sub_10058F648(void *a1)
{
  sub_1000D3E78();
  sub_1000D5B68();
  unint64_t v2 = (uint64_t *)a1[241];
  sub_1012B3B9C(v2);
  sub_1012B3F28(v2);
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 568);

  return v3(a1);
}

void sub_10058F6CC(void *a1, char a2)
{
  uint64_t v4 = sub_1000D3E78();
  sub_10006B564(v4, &v32);
  int v31 = 1;
  sub_10006EF84(v32, "OscarLogLevel", &v31);
  if (qword_102418FE0 != -1) {
    dispatch_once(&qword_102418FE0, &stru_1022BC920);
  }
  uint64_t v5 = qword_102418FE8;
  if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v36 = (char)v31;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "spuLogLevel,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_1022BC920);
    }
    v34[0] = 67109120;
    v34[1] = (char)v31;
    __int16 v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPU::sendInitialConfig(BOOL)", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  char v6 = (*(uint64_t (**)(void *))(*a1 + 192))(a1);
  __int16 v30 = 0;
  sub_1000D2988(v32, "OscarActivityForceCodeTransition", (BOOL *)&v30 + 1);
  sub_1000D2988(v32, "OscarStepCountingForceCodeTransition", (BOOL *)&v30);
  sub_1004D0240(v32, "UserConfig", (_WORD *)a1 + 172);
  buf[0] = 0;
  sub_10006ACBC(v29, "LogCompassCalibration", buf, 0);
  buf[0] = 0;
  sub_10006ACBC(v28, "LogCompass", buf, 0);
  *((unsigned char *)a1 + 12844) = (v28[1] | v29[1]) != 0;
  buf[0] = 0;
  sub_10006ACBC(v27, "IgnoreDynamicGyroBiasEstimator", buf, 0);
  BOOL v26 = sub_1000F08D4() ^ 1;
  sub_1000D2988(v32, "ConsumeBasebandSpeedInActivity", &v26);
  v34[0] = 1114636288;
  sub_101A22680(buf, "ViewObstructedReplyIntervalSecs", v34, 0);
  char v24 = a2;
  char v25 = v6;
  LOBYTE(v34[0]) = 0;
  sub_1000D2988(v32, "EnableComputeWhileStatic", (BOOL *)v34);
  char v7 = sub_1010CE960();
  char v8 = HIBYTE(v30);
  char v9 = v30;
  char v10 = v31;
  unsigned __int8 v23 = v27[1];
  sub_100103240();
  char v11 = sub_10074372C();
  BOOL v12 = v26;
  sub_100103240();
  BOOL v13 = sub_10074306C();
  sub_100103240();
  char v14 = sub_1007430E8();
  sub_100103240();
  char v15 = sub_100743148();
  sub_100103240();
  BOOL v16 = sub_1007431C8();
  int v17 = v36;
  char v18 = v34[0];
  *((unsigned char *)a1 + 217) = 6;
  *((unsigned char *)a1 + 21_Block_object_dispose(&STACK[0x850], 8) = v7;
  *((unsigned char *)a1 + 219) = v25;
  *((unsigned char *)a1 + 220) = v8;
  *((unsigned char *)a1 + 221) = v9;
  *(_DWORD *)((char *)a1 + 222) = 0;
  *((unsigned char *)a1 + 226) = 0;
  *((unsigned char *)a1 + 227) = v10;
  *(void *)((char *)a1 + 22_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)((char *)a1 + 235) = 0;
  *((unsigned char *)a1 + 243) = v23;
  *((unsigned char *)a1 + 244) = v11;
  *(void *)((char *)a1 + 253) = 0;
  *(void *)((char *)a1 + 245) = 0;
  *((unsigned char *)a1 + 263) = v12;
  *((_WORD *)a1 + 132) = 0;
  *((unsigned char *)a1 + 266) = v13;
  *(_WORD *)((char *)a1 + 267) = 0;
  *((unsigned char *)a1 + 269) = v14;
  *((unsigned char *)a1 + 270) = 0;
  *((unsigned char *)a1 + 271) = v15;
  *((unsigned char *)a1 + 272) = v16;
  *((unsigned char *)a1 + 273) = 0;
  *(_DWORD *)((char *)a1 + 274) = v17;
  *(_DWORD *)((char *)a1 + 27_Block_object_dispose(&STACK[0x850], 8) = 0;
  *((unsigned char *)a1 + 282) = v18;
  unsigned int v19 = sub_1000A16E8();
  unsigned int v20 = sub_10074157C();
  if ((v19 & 0x20000000) != 0) {
    int v21 = 34;
  }
  else {
    int v21 = 32;
  }
  if ((v19 & 0x20000008) != 0) {
    v21 |= 0x40u;
  }
  sub_1010CE9B4((uint64_t)a1, (float *)((v19 >> 9) & 8 | v19 & 0x10 | (v20 >> 2) & 4 | v21), v24);
  if ((v24 & 1) == 0)
  {
    sub_10058FC44(a1);
    (*(void (**)(void *, uint64_t))(*a1 + 552))(a1, 1);
    sub_10058FCBC();
  }
  sub_100590008((uint64_t)a1);
  if (v33) {
    sub_1000DB0A0(v33);
  }
}

void sub_10058FBAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10058FC00(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void *sub_10058FC44(void *result)
{
  uint64_t v1 = result[73];
  if (v1)
  {
    unint64_t v2 = result;
    [*(id *)(v1 + 16) register:*(void *)(v1 + 8) forNotification:1 registrationInfo:0];
    [*(id *)(v2[73] + 16) register:*(void *)(v2[73] + 8) forNotification:2 registrationInfo:0];
    uint64_t v3 = v2[73];
    uint64_t v5 = *(void *)(v3 + 8);
    uint64_t v4 = *(void **)(v3 + 16);
    return [v4 register:v5 forNotification:3 registrationInfo:0];
  }
  return result;
}

void sub_10058FCBC()
{
}

void sub_100590008(uint64_t a1)
{
  double v61 = 0.0;
  uint64_t v2 = sub_1000A6958();
  if (sub_1004D01D8(v2, @"CompassCalibration", (CFTypeRef *)&v61))
  {
    [objc_msgSend(*(id *)&v61, "objectForKeyedSubscript:", @"Time") floatValue];
    float v4 = v3;
    id v5 = [*(id *)&v61 objectForKeyedSubscript:@"Bias"];
    id v6 = [*(id *)&v61 objectForKeyedSubscript:@"Scale"];
    double v7 = v4;
    if (*(unsigned char *)(a1 + 12844))
    {
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022BC960);
      }
      char v8 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
      {
        [v5[0] floatValue];
        float v10 = v9;
        [v5 objectAtIndexedSubscript:1].floatValue;
        float v12 = v11;
        [v5[2] floatValue];
        float v14 = v13;
        [objc_msgSend(v6, "objectAtIndexedSubscript:", 0) floatValue];
        *(_DWORD *)std::string buf = 134219520;
        *(double *)&uint8_t buf[4] = v10;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(double *)&unsigned char buf[14] = v12;
        *(_WORD *)&buf[22] = 2048;
        *(double *)&unsigned char buf[24] = v14;
        __int16 v63 = 2048;
        double v64 = (float)(1.0 / v15);
        __int16 v65 = 1024;
        int v66 = 4;
        __int16 v67 = 2048;
        uint64_t v68 = 0x3FD1EB8520000000;
        __int16 v69 = 2048;
        double v70 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[CompassCalibration] logging initial persisted calibration: bias.x,%.2f,.y,%.2f,.z,%.2f,radius,%.2f,level,%d,quality,%.2f,cftime,%.3f", buf, 0x44u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022BC960);
        }
        [v5[0] floatValue];
        float v53 = v52;
        [v5[1] floatValue];
        float v55 = v54;
        [v5[2] floatValue];
        float v57 = v56;
        [objc_msgSend(v6, "objectAtIndexedSubscript:", 0) floatValue];
        int v74 = 134219520;
        double v75 = v53;
        __int16 v76 = 2048;
        double v77 = v55;
        __int16 v78 = 2048;
        double v79 = v57;
        __int16 v80 = 2048;
        double v81 = (float)(1.0 / v58);
        __int16 v82 = 1024;
        int v83 = 4;
        __int16 v84 = 2048;
        uint64_t v85 = 0x3FD1EB8520000000;
        __int16 v86 = 2048;
        double v87 = v7;
        double v59 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPU::retrieveCachedCompassCalibration()", "%s\n", v59);
        if (v59 != buf) {
          free(v59);
        }
      }
      sub_10170140C(buf);
      sub_101726F78((uint64_t)buf);
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      v73 |= 1u;
      CFAbsoluteTime v71 = Current;
      uint64_t v17 = v72;
      uint64_t v18 = *(void *)(a1 + 352);
      *(_DWORD *)(v72 + 80) |= 1u;
      *(void *)(v17 + _Block_object_dispose(&STACK[0x850], 8) = v18;
      uint64_t v19 = v72;
      [v5[0] floatValue];
      *(_DWORD *)(v19 + 80) |= 2u;
      *(_DWORD *)(v19 + 16) = v20;
      uint64_t v21 = v72;
      [v5[1] floatValue];
      *(_DWORD *)(v21 + 80) |= 4u;
      *(_DWORD *)(v21 + 20) = v22;
      uint64_t v23 = v72;
      [v5 objectAtIndexedSubscript:2]
      *(_DWORD *)(v23 + 80) |= 8u;
      *(_DWORD *)(v23 + 24) = v24;
      uint64_t v25 = v72;
      [objc_msgSend(v6, "objectAtIndexedSubscript:", 0) floatValue];
      *(_DWORD *)(v25 + 80) |= 0x2000u;
      *(_DWORD *)(v25 + 64) = v26;
      uint64_t v27 = v72;
      [objc_msgSend(v6, "objectAtIndexedSubscript:", 1) floatValue];
      *(_DWORD *)(v27 + 80) |= 0x4000u;
      *(_DWORD *)(v27 + 6_Block_object_dispose(&STACK[0x850], 8) = v28;
      uint64_t v29 = v72;
      [objc_msgSend(v6, "objectAtIndexedSubscript:", 2) floatValue];
      *(_DWORD *)(v29 + 80) |= 0x8000u;
      *(_DWORD *)(v29 + 72) = v30;
      uint64_t v31 = v72;
      *(_DWORD *)(v72 + 80) |= 0x1000u;
      *(_DWORD *)(v31 + 60) = 1049582633;
      uint64_t v32 = v72;
      *(_DWORD *)(v72 + 80) |= 0x20u;
      *(_DWORD *)(v32 + 32) = 2139095039;
      uint64_t v33 = v72;
      *(_DWORD *)(v72 + 80) |= 0x40u;
      *(_DWORD *)(v33 + 36) = 0;
      uint64_t v34 = v72;
      *(_DWORD *)(v72 + 80) |= 0x80u;
      *(_DWORD *)(v34 + 40) = 0;
      uint64_t v35 = v72;
      *(_DWORD *)(v72 + 80) |= 0x200u;
      *(_DWORD *)(v35 + 4_Block_object_dispose(&STACK[0x850], 8) = 0;
      uint64_t v36 = v72;
      *(_DWORD *)(v72 + 80) |= 0x400u;
      *(_DWORD *)(v36 + 52) = 0;
      uint64_t v37 = v72;
      *(_DWORD *)(v72 + 80) |= 0x800u;
      *(_DWORD *)(v37 + 56) = 0;
      uint64_t v38 = v72;
      *(_DWORD *)(v72 + 80) |= 0x10u;
      *(_DWORD *)(v38 + 2_Block_object_dispose(&STACK[0x850], 8) = 4;
      uint64_t v39 = v72;
      *(_DWORD *)(v72 + 80) |= 0x20000u;
      *(unsigned char *)(v39 + 77) = 0;
      uint64_t v40 = v72;
      *(_DWORD *)(v72 + 80) |= 0x10000u;
      *(unsigned char *)(v40 + 76) = 1;
      uint64_t v41 = v72;
      *(_DWORD *)(v72 + 80) |= 0x100u;
      *(_DWORD *)(v41 + 44) = 0;
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022BC980);
      }
      if (qword_10248AF90) {
        sub_1019E5150(qword_10248AF90, (uint64_t)buf);
      }
      sub_101706914((PB::Base *)buf);
    }
    if (CFAbsoluteTimeGetCurrent() + -3600.0 <= v7)
    {
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022BC960);
      }
      uint64_t v45 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 138412290;
        *(double *)&uint8_t buf[4] = v61;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "[CompassCalibration] restoring calibration,%@", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022BC960);
        }
        int v74 = 138412290;
        double v75 = v61;
        int v60 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPU::retrieveCachedCompassCalibration()", "%s\n", v60);
        if (v60 != buf) {
          free(v60);
        }
      }
      [v5[0] floatValue];
      *(_DWORD *)&buf[1] = v46;
      [v5 objectAtIndexedSubscript:1].floatValue
      *(_DWORD *)&buf[5] = v47;
      [v5[2] floatValue];
      *(_DWORD *)&buf[9] = v48;
      [objc_msgSend(v6, "objectAtIndexedSubscript:", 0) floatValue];
      *(_DWORD *)&buf[13] = v49;
      [objc_msgSend(v6, "objectAtIndexedSubscript:", 1) floatValue];
      *(_DWORD *)&buf[17] = v50;
      [objc_msgSend(v6, "objectAtIndexedSubscript:", 2) floatValue];
      *(_DWORD *)&buf[21] = v51;
      *(_DWORD *)&buf[25] = 1049582633;
      sub_100597E38(a1 + 192, buf, 0);
    }
    else
    {
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022BC960);
      }
      uint64_t v42 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 138412290;
        *(double *)&uint8_t buf[4] = v61;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "[CompassCalibration] stale persistent calibration,%@", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022BC960);
        }
        int v74 = 138412290;
        double v75 = v61;
        __int16 v43 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPU::retrieveCachedCompassCalibration()", "%s\n", v43);
LABEL_30:
        if (v43 != buf) {
          free(v43);
        }
      }
    }
  }
  else
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022BC960);
    }
    double v44 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "[CompassCalibration] no persistent calibration found", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022BC960);
      }
      LOWORD(v74) = 0;
      __int16 v43 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPU::retrieveCachedCompassCalibration()", "%s\n", v43);
      goto LABEL_30;
    }
  }
}

void sub_100590A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100590A70(uint64_t a1)
{
  *(void *)a1 = off_1022BBE30;
  *(void *)(a1 + 32) = off_1022BC2F8;
  *(void *)(a1 + 40) = off_1022BC340;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = off_1022BC378;
  *(void *)(a1 + 56) = off_1022BC3A0;
  *(void *)(a1 + 64) = off_1022BC3F0;
  *(void *)(a1 + 72) = off_1022BC428;
  *(void *)(a1 + 80) = off_1022BC468;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x850], 8) = off_1022BC4A0;
  *(void *)(a1 + 96) = off_1022BC4D0;
  *(void *)(a1 + 104) = off_1022BC520;
  *(void *)(a1 + 112) = off_1022BC548;
  *(void *)(a1 + 120) = off_1022BC5B0;
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x850], 8) = off_1022BC5D8;
  *(void *)(a1 + 136) = off_1022BC600;
  *(void *)(a1 + 152) = off_1022BC628;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 1944);
  long long v3 = 0uLL;
  *(_OWORD *)(a1 + 1936) = 0u;
  if (v2)
  {
    sub_1000DB0A0(v2);
    long long v3 = 0uLL;
  }
  float v4 = *(std::__shared_weak_count **)(a1 + 1960);
  *(_OWORD *)(a1 + 1952) = v3;
  if (v4) {
    sub_1000DB0A0(v4);
  }
  sub_1004C62FC((uint64_t *)(a1 + 1928), 0);

  nullsub_41(a1 + 13608, v5);
  sub_100D4F09C(a1 + 13176);
  sub_100B8FF64(a1 + 13040);
  if (*(char *)(a1 + 12959) < 0) {
    operator delete(*(void **)(a1 + 12936));
  }
  if (*(char *)(a1 + 12887) < 0) {
    operator delete(*(void **)(a1 + 12864));
  }
  uint64_t v6 = *(void *)(a1 + 1968);
  *(void *)(a1 + 196_Block_object_dispose(&STACK[0x850], 8) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  double v7 = *(std::__shared_weak_count **)(a1 + 1960);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  char v8 = *(std::__shared_weak_count **)(a1 + 1944);
  if (v8) {
    sub_1000DB0A0(v8);
  }
  sub_1004C62FC((uint64_t *)(a1 + 1928), 0);

  return sub_1010D3850(a1);
}

uint64_t sub_100590DA0(uint64_t a1)
{
  return sub_100590A70(a1 - 32);
}

uint64_t sub_100590DA8(uint64_t a1)
{
  return sub_100590A70(a1 - 40);
}

uint64_t sub_100590DB0(uint64_t a1)
{
  return sub_100590A70(a1 - 48);
}

uint64_t sub_100590DB8(uint64_t a1)
{
  return sub_100590A70(a1 - 56);
}

uint64_t sub_100590DC0(uint64_t a1)
{
  return sub_100590A70(a1 - 64);
}

uint64_t sub_100590DC8(uint64_t a1)
{
  return sub_100590A70(a1 - 72);
}

uint64_t sub_100590DD0(uint64_t a1)
{
  return sub_100590A70(a1 - 80);
}

uint64_t sub_100590DD8(uint64_t a1)
{
  return sub_100590A70(a1 - 88);
}

uint64_t sub_100590DE0(uint64_t a1)
{
  return sub_100590A70(a1 - 96);
}

uint64_t sub_100590DE8(uint64_t a1)
{
  return sub_100590A70(a1 - 104);
}

uint64_t sub_100590DF0(uint64_t a1)
{
  return sub_100590A70(a1 - 112);
}

uint64_t sub_100590DF8(uint64_t a1)
{
  return sub_100590A70(a1 - 120);
}

uint64_t sub_100590E00(uint64_t a1)
{
  return sub_100590A70(a1 - 128);
}

uint64_t sub_100590E08(uint64_t a1)
{
  return sub_100590A70(a1 - 136);
}

uint64_t sub_100590E10(uint64_t a1)
{
  return sub_100590A70(a1 - 152);
}

void sub_100590E18(uint64_t a1)
{
  sub_100590A70(a1);

  operator delete();
}

void sub_100590E50(uint64_t a1)
{
  sub_100590A70(a1 - 32);

  operator delete();
}

void sub_100590E8C(uint64_t a1)
{
  sub_100590A70(a1 - 40);

  operator delete();
}

void sub_100590EC8(uint64_t a1)
{
  sub_100590A70(a1 - 48);

  operator delete();
}

void sub_100590F04(uint64_t a1)
{
  sub_100590A70(a1 - 56);

  operator delete();
}

void sub_100590F40(uint64_t a1)
{
  sub_100590A70(a1 - 64);

  operator delete();
}

void sub_100590F7C(uint64_t a1)
{
  sub_100590A70(a1 - 72);

  operator delete();
}

void sub_100590FB8(uint64_t a1)
{
  sub_100590A70(a1 - 80);

  operator delete();
}

void sub_100590FF4(uint64_t a1)
{
  sub_100590A70(a1 - 88);

  operator delete();
}

void sub_100591030(uint64_t a1)
{
  sub_100590A70(a1 - 96);

  operator delete();
}

void sub_10059106C(uint64_t a1)
{
  sub_100590A70(a1 - 104);

  operator delete();
}

void sub_1005910A8(uint64_t a1)
{
  sub_100590A70(a1 - 112);

  operator delete();
}

void sub_1005910E4(uint64_t a1)
{
  sub_100590A70(a1 - 120);

  operator delete();
}

void sub_100591120(uint64_t a1)
{
  sub_100590A70(a1 - 128);

  operator delete();
}

void sub_10059115C(uint64_t a1)
{
  sub_100590A70(a1 - 136);

  operator delete();
}

void sub_100591198(uint64_t a1)
{
  sub_100590A70(a1 - 152);

  operator delete();
}

void sub_1005911D4(NSObject **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100597A00;
  void v3[3] = &unk_1022B8660;
  v3[4] = a1;
  void v3[5] = a2;
  dispatch_async(v2, v3);
}

uint64_t sub_100591248(uint64_t a1)
{
  sub_1000D3E78();
  sub_1000D5B68();

  return sub_1005912E0(a1, 1);
}

uint64_t sub_100591288(uint64_t a1)
{
  sub_1000D3E78();
  sub_1000D5B68();

  return sub_1005912E0(a1, 0);
}

uint64_t sub_1005912C8(uint64_t a1)
{
  return sub_10058E7F4(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_1005912D8(uint64_t a1)
{
  return sub_10058E3F4(*(void *)(a1 + 32));
}

uint64_t sub_1005912E0(uint64_t a1, int a2)
{
  sub_100EBBEB0((uint64_t)v18, (uint64_t)"ApplyToHistorical", a1, 300.0);
  sub_100134750(__p, "none");
  sub_100EBBFD8((uint64_t)v18, (uint64_t *)__p);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (*(void *)(a1 + 1920))
  {
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_1022BC920);
    }
    float v4 = qword_102418FE8;
    if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Begin processing historical events.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_1022BC920);
      }
      LOWORD(v19) = 0;
      float v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPU::fetchHistoricalEvents(BOOL)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    sub_1010DF740(a1, 1);
    uint64_t v5 = *(void *)(a1 + 1920);
    if (a2)
    {
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_1022BC920);
      }
      uint64_t v6 = qword_102418FE8;
      if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Clearing historical event buffer", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FE0 != -1) {
          dispatch_once(&qword_102418FE0, &stru_1022BC920);
        }
        LOWORD(v19) = 0;
        float v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPU::fetchHistoricalEvents(BOOL)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      int v7 = (*(uint64_t (**)(uint64_t, uint64_t (*)(), uint64_t))(*(void *)v5 + 96))(v5, nullsub_219, a1);
    }
    else
    {
      int v7 = (*(uint64_t (**)(void, uint64_t (*)(), uint64_t))(*(void *)v5 + 96))(*(void *)(a1 + 1920), sub_100591930, a1);
    }
    int v8 = v7;
    if (v7)
    {
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_1022BC920);
      }
      float v9 = qword_102418FE8;
      if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        int v22 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "ApplyToHistorical did not complete successfully.  Status: 0x%x", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FE0 != -1) {
          dispatch_once(&qword_102418FE0, &stru_1022BC920);
        }
        int v19 = 67109120;
        int v20 = v8;
        float v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLSPU::fetchHistoricalEvents(BOOL)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
    }
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_1022BC920);
    }
    float v10 = qword_102418FE8;
    if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Finish processing historical events.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_1022BC920);
      }
      LOWORD(v19) = 0;
      float v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPU::fetchHistoricalEvents(BOOL)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    sub_1010DF740(a1, 0);
  }
  sub_100EBC6AC((uint64_t)v18);
  return sub_100EBBF9C(v18);
}

void sub_1005918E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

void sub_100591934(uint64_t a1)
{
  if (sub_100A291D0(*(void *)(a1 + 1936)))
  {
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_1022BC920);
    }
    uint64_t v2 = qword_102418FE8;
    if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Processing historical event", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_1022BC920);
      }
      float v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPU::historicalEventApplier(IOHIDEventRef)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    sub_100A291D0(*(void *)(a1 + 1936));
    sub_1000D38F4();
  }
  else
  {
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_1022BC920);
    }
    long long v3 = qword_102418FE8;
    if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "No service ref, did not process historical event", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_1022BC920);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPU::historicalEventApplier(IOHIDEventRef)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

uint64_t sub_100591C14(unsigned char *a1)
{
  sub_1000D3E78();
  sub_1000D5B68();
  a1[216] = 1;
  uint64_t v2 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 552);

  return v2(a1, 1);
}

void sub_100591C84(uint64_t a1, void *aBlock)
{
  long long v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100591D0C;
  void v5[3] = &unk_1022A56E0;
  void v5[4] = v3;
  void v5[5] = a1;
  sub_1009E8F7C(v4, (uint64_t)v5);
}

void sub_100591D0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);

  *(void *)(v2 + 1976) = [*(id *)(a1 + 32) copy];
  long long v3 = *(const void **)(a1 + 32);

  _Block_release(v3);
}

void sub_100591D58(uint64_t a1, int a2)
{
  char v6 = 18;
  int v7 = a2;
  uint64_t v8 = -1;
  if (qword_102418FE0 != -1) {
    dispatch_once(&qword_102418FE0, &stru_1022BC920);
  }
  uint64_t v4 = qword_102418FE8;
  if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[CLSPU] Setting BufferedAccelSampleRate,%lu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_1022BC920);
    }
    int v9 = 134217984;
    uint64_t v10 = a2;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPU::setAccelBufferSampling(int)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_100597BC4(a1 + 192, &v6, 0);
}

void sub_100591F38(uint64_t a1, int a2)
{
  char v6 = 18;
  int v7 = -1;
  int v8 = a2;
  int v9 = -1;
  if (qword_102418FE0 != -1) {
    dispatch_once(&qword_102418FE0, &stru_1022BC920);
  }
  uint64_t v4 = qword_102418FE8;
  if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[CLSPU] Setting BufferedGyroSampleRate,%lu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_1022BC920);
    }
    int v10 = 134217984;
    uint64_t v11 = a2;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPU::setGyroBufferSampling(int)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_100597BC4(a1 + 192, &v6, 0);
}

void sub_100592118(uint64_t a1, int a2)
{
  char v6 = 18;
  uint64_t v7 = -1;
  int v8 = a2;
  if (qword_102418FE0 != -1) {
    dispatch_once(&qword_102418FE0, &stru_1022BC920);
  }
  uint64_t v4 = qword_102418FE8;
  if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[CLSPU] Setting BufferedPressureSampleRate,%lu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_1022BC920);
    }
    int v9 = 134217984;
    uint64_t v10 = a2;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPU::setPressureBufferSampling(int)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_100597BC4(a1 + 192, &v6, 0);
}

void sub_1005922F8(uint64_t a1, void *aBlock)
{
  long long v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100592380;
  void v5[3] = &unk_1022A56E0;
  void v5[4] = v3;
  void v5[5] = a1;
  sub_1009E8F7C(v4, (uint64_t)v5);
}

void sub_100592380(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);

  *(void *)(v2 + 1984) = [*(id *)(a1 + 32) copy];
  long long v3 = *(const void **)(a1 + 32);

  _Block_release(v3);
}

void sub_1005923CC(uint64_t a1, void *aBlock)
{
  long long v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100592454;
  void v5[3] = &unk_1022A56E0;
  void v5[4] = v3;
  void v5[5] = a1;
  sub_1009E8F7C(v4, (uint64_t)v5);
}

void sub_100592454(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);

  *(void *)(v2 + 12832) = [*(id *)(a1 + 32) copy];
  long long v3 = *(const void **)(a1 + 32);

  _Block_release(v3);
}

BOOL sub_1005924A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 1928);
  if (v1)
  {
    CFRunLoopRef Current = CFRunLoopGetCurrent();
    sub_1000D3E78();
    if (Current == (CFRunLoopRef)sub_1001BEA14())
    {
      double v5 = 0.005;
      if (!*(unsigned char *)(a1 + 225)) {
        double v5 = 0.0;
      }
      sub_100A29D64(*(void *)(a1 + 1952), v5);
      __int16 v19 = 3;
      int v6 = *(unsigned __int8 *)(a1 + 226);
      HIBYTE(v19) = *(unsigned char *)(a1 + 226);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022BC940);
      }
      uint64_t v7 = qword_102419088;
      if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 67109120;
        LODWORD(v23) = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[CLSPU] Sending CameraDebug command %hhu", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022BC940);
        }
        int v20 = 67109120;
        LODWORD(v21) = v6;
        uint64_t v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLSPU::configureDevMotion3()", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      int v18 = 0;
      uint64_t v17 = 4;
      mach_error_t v8 = sub_1012B4B18(*(void *)(a1 + 1928), (uint64_t)&v19, (char *)2, (uint64_t)&v18, (uint64_t)&v17);
      if (v8)
      {
        mach_error_t v9 = v8;
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022BC940);
        }
        uint64_t v10 = qword_102419088;
        if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_ERROR))
        {
          uint64_t v11 = mach_error_string(v9);
          *(_DWORD *)std::string buf = 136315138;
          uint64_t v23 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[CLSPU] Send command failed %s", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419080 != -1) {
            dispatch_once(&qword_102419080, &stru_1022BC940);
          }
          float v14 = mach_error_string(v9);
          int v20 = 136315138;
          uint64_t v21 = v14;
          float v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLSPU::configureDevMotion3()", "%s\n", v15);
          if (v15 != (char *)buf) {
            free(v15);
          }
        }
      }
    }
    else
    {
      uint64_t v4 = sub_1000D3E78();
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      uint64_t v16[2] = sub_100592884;
      v16[3] = &unk_1022A3020;
      v16[4] = a1;
      sub_1009E8E94(v4, (uint64_t)v16);
    }
  }
  return v1 != 0;
}

uint64_t sub_100592884(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 568))();
}

void sub_1005928B4(uint64_t a1, uint64_t a2)
{
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current == (CFRunLoopRef)sub_1001BEA14())
  {
    int v6 = *(void (**)(uint64_t, uint64_t, void, void))(*(void *)a1 + 560);
    v6(a1, a2, 0, 0);
  }
  else
  {
    uint64_t v5 = sub_1000D3E78();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_1005929B4;
    void v7[3] = &unk_1022BBA18;
    v7[4] = a1;
    char v8 = a2;
    sub_1009E8F7C(v5, (uint64_t)v7);
  }
}

uint64_t sub_1005929B4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 552))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_1005929EC(uint64_t a1, char a2, NSObject *a3, id a4)
{
  sub_1000D3E78();
  sub_1000D5B68();
  *(unsigned char *)(a1 + 246) = a2;
  if (qword_102418FE0 != -1) {
    dispatch_once(&qword_102418FE0, &stru_1022BC920);
  }
  char v8 = qword_102418FE8;
  if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_INFO))
  {
    int v9 = *(unsigned __int8 *)(a1 + 218);
    int v10 = *(unsigned __int8 *)(a1 + 219);
    int v11 = *(unsigned __int8 *)(a1 + 223);
    int v12 = *(unsigned __int8 *)(a1 + 264);
    int v13 = *(unsigned __int8 *)(a1 + 220);
    int v14 = *(unsigned __int8 *)(a1 + 221);
    int v15 = *(unsigned __int8 *)(a1 + 222);
    int v16 = *(unsigned __int8 *)(a1 + 242);
    int v17 = *(unsigned __int8 *)(a1 + 243);
    int v18 = *(unsigned __int8 *)(a1 + 225);
    int v19 = *(unsigned __int8 *)(a1 + 226);
    double v20 = *(float *)(a1 + 230);
    int v21 = *(unsigned __int8 *)(a1 + 224);
    int v22 = *(char *)(a1 + 227);
    int v23 = *(unsigned __int8 *)(a1 + 245);
    int v24 = *(unsigned __int16 *)(a1 + 228);
    int v25 = *(unsigned __int8 *)(a1 + 255);
    int v26 = *(unsigned __int8 *)(a1 + 256);
    int v27 = *(unsigned __int8 *)(a1 + 257);
    int v28 = *(unsigned __int8 *)(a1 + 258);
    int v29 = *(unsigned __int8 *)(a1 + 259);
    id v30 = a4;
    uint64_t v31 = *(void *)(a1 + 247);
    int v32 = *(unsigned __int8 *)(a1 + 267);
    int v66 = a3;
    int v33 = *(unsigned __int8 *)(a1 + 244);
    int v63 = *(unsigned __int8 *)(a1 + 271);
    int v64 = *(unsigned __int8 *)(a1 + 282);
    int v65 = *(unsigned __int8 *)(a1 + 272);
    *(_DWORD *)std::string buf = 67181313;
    int v124 = v9;
    __int16 v125 = 1025;
    int v126 = v10;
    __int16 v127 = 1025;
    int v128 = v11;
    __int16 v129 = 1025;
    int v130 = v12;
    __int16 v131 = 1025;
    int v132 = v13;
    __int16 v133 = 1025;
    int v134 = v14;
    __int16 v135 = 1025;
    int v136 = v15;
    __int16 v137 = 1026;
    int v138 = v16;
    __int16 v139 = 1026;
    int v140 = v17;
    __int16 v141 = 1026;
    int v142 = v18;
    __int16 v143 = 1026;
    int v144 = v19;
    __int16 v145 = 2050;
    double v146 = v20;
    __int16 v147 = 1026;
    int v148 = v21;
    __int16 v149 = 1026;
    int v150 = v22;
    __int16 v151 = 1025;
    int v152 = v23;
    __int16 v153 = 1026;
    int v154 = v24;
    __int16 v155 = 1025;
    int v156 = v25;
    __int16 v157 = 1025;
    int v158 = v26;
    __int16 v159 = 1025;
    int v160 = v27;
    __int16 v161 = 1025;
    int v162 = v28;
    __int16 v163 = 1025;
    int v164 = v29;
    __int16 v165 = 2050;
    uint64_t v166 = v31;
    a4 = v30;
    __int16 v167 = 1025;
    int v168 = v32;
    __int16 v169 = 1025;
    int v170 = v33;
    a3 = v66;
    __int16 v171 = 1025;
    int v172 = v63;
    __int16 v173 = 1025;
    int v174 = v64;
    __int16 v175 = 1025;
    int v176 = v65;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Sending new config to SPU:enableActivity,%{private}u,enableStepCounting,%{private}u,enableOnBodyDetection,%{private}u,enableStepCountPeriodFast,%{private}uactivityForceCodeTransition,%{private}u,stepCountingForceCodeTransition,%{private}u,enableThreshold,%{private}u,disableDynamicBias,%{public}u,ignoreDynamicBias,%{public}u,ispEnable,%{public}u,ispMode,%{public}u,ISPUpdateIntervalOverride,%{public}f,stickyIsp,%{public}d,logLevel,%{public}d,enableCoarseElevation,%{private}d,proactiveRevisitTime,%{public}u,fallStatsMode,%{private}u,sensorRecordingActive,%{private}u,simulateEvent,%{private}u,userStudyPressureDataCollection,%{private}u,detectorEnabled,%{private}u,lastAckedAopTimestamp,%{public}llu,gateDynamicBiasOnChargerStatus,%{private}u,supportsOISImprovements,%{private}u,compassCoexDuringBasebandUse,%{private}u,enableComputeWhileStatic,%{private}u,magnetometer50HzODRUse,%{private}u", buf, 0xACu);
  }
  if (!sub_10013D1A0(115, 2))
  {
    if (!a4) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  bzero(buf, 0x65CuLL);
  __int16 v67 = a3;
  id v62 = a4;
  if (qword_102418FE0 != -1) {
    dispatch_once(&qword_102418FE0, &stru_1022BC920);
  }
  int v34 = *(unsigned __int8 *)(a1 + 218);
  int v35 = *(unsigned __int8 *)(a1 + 219);
  int v36 = *(unsigned __int8 *)(a1 + 223);
  int v37 = *(unsigned __int8 *)(a1 + 264);
  int v38 = *(unsigned __int8 *)(a1 + 220);
  int v39 = *(unsigned __int8 *)(a1 + 221);
  int v40 = *(unsigned __int8 *)(a1 + 222);
  int v41 = *(unsigned __int8 *)(a1 + 242);
  int v42 = *(unsigned __int8 *)(a1 + 243);
  int v43 = *(unsigned __int8 *)(a1 + 225);
  int v44 = *(unsigned __int8 *)(a1 + 226);
  double v45 = *(float *)(a1 + 230);
  int v46 = *(unsigned __int8 *)(a1 + 224);
  int v47 = *(char *)(a1 + 227);
  int v48 = *(unsigned __int8 *)(a1 + 245);
  int v49 = *(unsigned __int16 *)(a1 + 228);
  int v50 = *(unsigned __int8 *)(a1 + 255);
  int v51 = *(unsigned __int8 *)(a1 + 256);
  int v52 = *(unsigned __int8 *)(a1 + 257);
  int v53 = *(unsigned __int8 *)(a1 + 258);
  int v54 = *(unsigned __int8 *)(a1 + 259);
  uint64_t v55 = *(void *)(a1 + 247);
  int v56 = *(unsigned __int8 *)(a1 + 267);
  int v57 = *(unsigned __int8 *)(a1 + 244);
  int v58 = *(unsigned __int8 *)(a1 + 271);
  int v59 = *(unsigned __int8 *)(a1 + 282);
  int v60 = *(unsigned __int8 *)(a1 + 272);
  int v69 = 67181313;
  int v70 = v34;
  __int16 v71 = 1025;
  int v72 = v35;
  __int16 v73 = 1025;
  int v74 = v36;
  __int16 v75 = 1025;
  int v76 = v37;
  __int16 v77 = 1025;
  int v78 = v38;
  __int16 v79 = 1025;
  int v80 = v39;
  __int16 v81 = 1025;
  int v82 = v40;
  __int16 v83 = 1026;
  int v84 = v41;
  __int16 v85 = 1026;
  int v86 = v42;
  __int16 v87 = 1026;
  int v88 = v43;
  __int16 v89 = 1026;
  int v90 = v44;
  __int16 v91 = 2050;
  double v92 = v45;
  __int16 v93 = 1026;
  int v94 = v46;
  __int16 v95 = 1026;
  int v96 = v47;
  __int16 v97 = 1025;
  int v98 = v48;
  __int16 v99 = 1026;
  int v100 = v49;
  __int16 v101 = 1025;
  int v102 = v50;
  __int16 v103 = 1025;
  int v104 = v51;
  __int16 v105 = 1025;
  int v106 = v52;
  __int16 v107 = 1025;
  int v108 = v53;
  __int16 v109 = 1025;
  int v110 = v54;
  __int16 v111 = 2050;
  uint64_t v112 = v55;
  __int16 v113 = 1025;
  int v114 = v56;
  __int16 v115 = 1025;
  int v116 = v57;
  __int16 v117 = 1025;
  int v118 = v58;
  __int16 v119 = 1025;
  int v120 = v59;
  __int16 v121 = 1025;
  int v122 = v60;
  double v61 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSPU::configureMotionCoprocessorWithHandler(BOOL, dispatch_queue_t, CMCommandCallback)", "%s\n", v61);
  if (v61 != (char *)buf) {
    free(v61);
  }
  a3 = v67;
  a4 = v62;
  if (v62)
  {
LABEL_7:
    a4 = [a4 copy];
    if (a3) {
      dispatch_retain(a3);
    }
  }
LABEL_9:
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_100593078;
  aBlock[3] = &unk_1022BC8E8;
  aBlock[5] = a4;
  aBlock[6] = a1;
  aBlock[4] = a3;
  sub_100592F1C(a1 + 192, (long long *)(a1 + 217), aBlock);
}

void sub_100592F1C(uint64_t a1, long long *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v10[0] = 0;
    v10[1] = v10;
    _DWORD v10[2] = 0x7812000000;
    v10[3] = sub_100597D90;
    v10[4] = nullsub_220;
    void v10[5] = "";
    long long v4 = a2[3];
    long long v13 = a2[2];
    long long v14 = v4;
    __int16 v15 = *((_WORD *)a2 + 32);
    long long v5 = *a2;
    long long v12 = a2[1];
    long long v11 = v5;
    if (aBlock) {
      int v6 = _Block_copy(aBlock);
    }
    else {
      int v6 = 0;
    }
    char v8 = *(NSObject **)a1;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _OWORD v9[2] = sub_100597DB8;
    v9[3] = &unk_1022BCA88;
    v9[5] = v10;
    void v9[6] = a1;
    void v9[4] = v6;
    dispatch_async(v8, v9);
    _Block_object_dispose(v10, 8);
  }
  else if (aBlock)
  {
    uint64_t v7 = (void (*)(void *, void))*((void *)aBlock + 2);
    v7(aBlock, 0);
  }
}

void sub_100593060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100593078(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = sub_1000D3E78();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  _DWORD v11[2] = sub_100593194;
  v11[3] = &unk_1022BBA18;
  v11[4] = v4;
  char v12 = a2;
  sub_1009E8F7C(v5, (uint64_t)v11);
  int v6 = *(void (***)(void, void))(a1 + 40);
  if (v6)
  {
    if (*(void *)(a1 + 32))
    {
      id v7 = [v6 copy];
      char v8 = *(NSObject **)(a1 + 32);
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      _OWORD v9[2] = sub_100593488;
      v9[3] = &unk_1022BC8C0;
      void v9[4] = v7;
      char v10 = a2;
      dispatch_async(v8, v9);
    }
    else
    {
      v6[2](v6, a2);
    }
  }
}

void sub_100593194(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 40))
  {
    if (*(unsigned char *)(v1 + 216))
    {
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_1022BC920);
      }
      uint64_t v2 = qword_102418FE8;
      if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending initial configuration.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FE0 != -1) {
          dispatch_once(&qword_102418FE0, &stru_1022BC920);
        }
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSPU::configureMotionCoprocessorWithHandler(BOOL, dispatch_queue_t, CMCommandCallback)_block_invoke", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
      sub_1010CF6B4(v1);
    }
  }
  else
  {
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_1022BC920);
    }
    long long v3 = qword_102418FE8;
    if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to configure motion coprocessor", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_1022BC920);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLSPU::configureMotionCoprocessorWithHandler(BOOL, dispatch_queue_t, CMCommandCallback)_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    sub_1010CE588(v1);
  }
}

void sub_100593488(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v2 = *(void **)(a1 + 32);
}

uint64_t sub_1005934D0(uint64_t a1)
{
  if (qword_102418FE0 != -1) {
    dispatch_once(&qword_102418FE0, &stru_1022BC920);
  }
  uint64_t v2 = qword_102418FE8;
  if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "SPU rejected configuration. resending.", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_1022BC920);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLSPU::visitHello(const CMMotionCoprocessorReply::Hello *)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 552))(a1, 0);
}

uint64_t sub_100593698(uint64_t a1)
{
  return sub_1005934D0(a1 - 152);
}

uint64_t sub_1005936A0(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  double Current = CFAbsoluteTimeGetCurrent();
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022BC960);
  }
  int v6 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
  {
    double v7 = *(float *)(v2 + 5);
    double v8 = *(float *)(v2 + 9);
    double v9 = *(float *)(v2 + 13);
    double v10 = *(float *)(v2 + 17);
    double v11 = *(float *)(v2 + 21);
    double v12 = *(float *)(v2 + 25);
    double v13 = *(float *)(v2 + 29);
    double v14 = *(float *)(v2 + 33);
    double v15 = *(float *)(v2 + 37);
    double v16 = *(float *)(v2 + 53);
    double v17 = *(float *)(v2 + 57);
    double v18 = *(float *)(v2 + 61);
    double v19 = *(float *)(v2 + 65);
    double v20 = *(float *)(v2 + 41);
    double v21 = *(float *)(v2 + 49);
    int v22 = *(char *)(v2 + 1);
    int v23 = *(unsigned __int8 *)(v2 + 2);
    int v24 = *(unsigned __int8 *)(v2 + 3);
    int v25 = *(unsigned __int8 *)(v2 + 4);
    double v26 = *(float *)(v2 + 69);
    double v27 = *(float *)(v2 + 73);
    double v28 = *(float *)(v2 + 77);
    double v29 = *(float *)(v2 + 81);
    double v30 = *(float *)(v2 + 85);
    *(_DWORD *)std::string buf = 134224128;
    double v99 = v7;
    __int16 v100 = 2048;
    double v101 = v8;
    __int16 v102 = 2048;
    double v103 = v9;
    __int16 v104 = 2048;
    double v105 = v10;
    __int16 v106 = 2048;
    double v107 = v11;
    __int16 v108 = 2048;
    double v109 = v12;
    __int16 v110 = 2048;
    double v111 = v13;
    __int16 v112 = 2048;
    double v113 = v14;
    __int16 v114 = 2048;
    double v115 = v15;
    __int16 v116 = 2050;
    double v117 = v16;
    __int16 v118 = 2050;
    double v119 = v17;
    __int16 v120 = 2050;
    double v121 = v18;
    __int16 v122 = 2050;
    double v123 = v19;
    __int16 v124 = 2048;
    double v125 = v20;
    __int16 v126 = 2048;
    double v127 = v21;
    __int16 v128 = 2048;
    double v129 = v21;
    __int16 v130 = 1026;
    int v131 = v22;
    __int16 v132 = 1026;
    int v133 = v23;
    __int16 v134 = 1026;
    int v135 = v24;
    __int16 v136 = 1026;
    int v137 = v25;
    __int16 v138 = 2050;
    double v139 = v26;
    __int16 v140 = 2050;
    double v141 = v27;
    __int16 v142 = 2050;
    double v143 = v28;
    __int16 v144 = 2050;
    double v145 = v29;
    __int16 v146 = 2050;
    double v147 = v30;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[CompassCalibration] bias.x,%f,.y,%f,.z,%f,biasEstVar.x,%f,.y,%f,.z,%f,scale.x,%f,.y,%f,.z,%f,quality,%{public}f,cost,%{public}f,coverage,%{public}f,earthDiffRatio,%{public}f,pose.x,%f,.y,%f,.z,%f,level,%{public}d,saturations,%{public}d,hasConsistency,%{public}d,apAwake,%{public}d,planarity,%{public}f,temperature,%{public}f,minTemperatureSinceLastCal,%{public}f,maxTemperatureSinceLastCal,%{public}f,avgTemperatureSinceLastCal,%{public}f", buf, 0xECu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022BC960);
    }
    double v69 = *(float *)(v2 + 5);
    double v70 = *(float *)(v2 + 9);
    double v71 = *(float *)(v2 + 13);
    double v72 = *(float *)(v2 + 17);
    double v73 = *(float *)(v2 + 21);
    double v74 = *(float *)(v2 + 25);
    double v75 = *(float *)(v2 + 29);
    double v76 = *(float *)(v2 + 33);
    double v77 = *(float *)(v2 + 37);
    double v78 = *(float *)(v2 + 53);
    double v79 = *(float *)(v2 + 57);
    double v80 = *(float *)(v2 + 61);
    double v81 = *(float *)(v2 + 65);
    double v82 = *(float *)(v2 + 41);
    double v83 = *(float *)(v2 + 49);
    int v84 = *(char *)(v2 + 1);
    int v85 = *(unsigned __int8 *)(v2 + 2);
    int v86 = *(unsigned __int8 *)(v2 + 3);
    int v87 = *(unsigned __int8 *)(v2 + 4);
    double v88 = *(float *)(v2 + 69);
    double v89 = *(float *)(v2 + 73);
    double v90 = *(float *)(v2 + 77);
    double v91 = *(float *)(v2 + 81);
    double v92 = *(float *)(v2 + 85);
    *(_DWORD *)__int16 v155 = 134224128;
    *(double *)&v155[4] = v69;
    *(_WORD *)&v155[12] = 2048;
    *(double *)&v155[14] = v70;
    __int16 v156 = 2048;
    double v157 = v71;
    *(_WORD *)int v158 = 2048;
    *(double *)&v158[2] = v72;
    *(_WORD *)&v158[10] = 2048;
    *(double *)&v158[12] = v73;
    *(_WORD *)__int16 v159 = 2048;
    *(double *)&v159[2] = v74;
    *(_WORD *)&v159[10] = 2048;
    *(double *)&v159[12] = v75;
    *(_WORD *)int v160 = 2048;
    *(double *)&v160[2] = v76;
    *(_WORD *)&v160[10] = 2048;
    double v161 = v77;
    __int16 v162 = 2050;
    double v163 = v78;
    __int16 v164 = 2050;
    double v165 = v79;
    __int16 v166 = 2050;
    double v167 = v80;
    __int16 v168 = 2050;
    double v169 = v81;
    __int16 v170 = 2048;
    double v171 = v82;
    __int16 v172 = 2048;
    double v173 = v83;
    __int16 v174 = 2048;
    double v175 = v83;
    __int16 v176 = 1026;
    int v177 = v84;
    __int16 v178 = 1026;
    int v179 = v85;
    __int16 v180 = 1026;
    int v181 = v86;
    __int16 v182 = 1026;
    int v183 = v87;
    __int16 v184 = 2050;
    double v185 = v88;
    __int16 v186 = 2050;
    double v187 = v89;
    __int16 v188 = 2050;
    double v189 = v90;
    __int16 v190 = 2050;
    double v191 = v91;
    __int16 v192 = 2050;
    double v193 = v92;
    __int16 v93 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSPU::visitCompassCalibration(const CMMotionCoprocessorReply::CompassCalibration *)", "%s\n", v93);
    if (v93 != (char *)buf) {
      free(v93);
    }
  }
  if (*(char *)(v2 + 1) < 4)
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022BC960);
    }
    int v40 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "[CompassCalibration] clearing persistent calibration", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022BC960);
      }
      *(_WORD *)__int16 v155 = 0;
      int v94 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSPU::visitCompassCalibration(const CMMotionCoprocessorReply::CompassCalibration *)", "%s\n", v94);
      if (v94 != (char *)buf) {
        free(v94);
      }
    }
    uint64_t v41 = sub_1000A6958();
    sub_1004CF870(v41);
  }
  else if (*(float *)(v2 + 53) > 0.28)
  {
    v153[0] = @"Bias";
    LODWORD(v31) = *(_DWORD *)(v2 + 5);
    v152[0] = +[NSNumber numberWithFloat:v31];
    LODWORD(v32) = *(_DWORD *)(v2 + 9);
    v152[1] = +[NSNumber numberWithFloat:v32];
    LODWORD(v33) = *(_DWORD *)(v2 + 13);
    v152[2] = +[NSNumber numberWithFloat:v33];
    v154[0] = +[NSArray arrayWithObjects:v152 count:3];
    v153[1] = @"Scale";
    LODWORD(v34) = *(_DWORD *)(v2 + 29);
    v151[0] = +[NSNumber numberWithFloat:v34];
    LODWORD(v35) = *(_DWORD *)(v2 + 33);
    v151[1] = +[NSNumber numberWithFloat:v35];
    LODWORD(v36) = *(_DWORD *)(v2 + 37);
    v151[2] = +[NSNumber numberWithFloat:v36];
    v154[1] = +[NSArray arrayWithObjects:v151 count:3];
    v153[2] = @"Time";
    v154[2] = +[NSNumber numberWithDouble:Current];
    *(double *)&int v37 = COERCE_DOUBLE(+[NSDictionary dictionaryWithObjects:v154 forKeys:v153 count:3]);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022BC960);
    }
    int v38 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 138412290;
      double v99 = *(double *)&v37;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "[CompassCalibration] persisting calibration,%@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022BC960);
      }
      *(_DWORD *)__int16 v155 = 138412290;
      *(void *)&v155[4] = v37;
      __int16 v95 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSPU::visitCompassCalibration(const CMMotionCoprocessorReply::CompassCalibration *)", "%s\n", v95);
      if (v95 != (char *)buf) {
        free(v95);
      }
    }
    uint64_t v39 = sub_1000A6958();
    sub_1004D258C(v39);
  }
  if (*(unsigned char *)(v4 + 12844))
  {
    *(void *)__int16 v155 = off_1022E6980;
    double v42 = *(double *)(v4 + 352);
    *(double *)&v155[8] = Current;
    double v157 = v42;
    *(void *)&long long v43 = *(void *)(v2 + 9);
    *((void *)&v43 + 1) = *(void *)(v2 + 29);
    int v44 = *(_DWORD *)(v2 + 5);
    *(_OWORD *)&v158[4] = v43;
    LODWORD(v43) = *(_DWORD *)(v2 + 37);
    *(_DWORD *)int v158 = v44;
    *(_DWORD *)__int16 v159 = v43;
    *(_OWORD *)&v159[4] = *(_OWORD *)(v2 + 53);
    *(void *)int v160 = *(void *)(v2 + 41);
    *(_DWORD *)&v160[8] = *(_DWORD *)(v2 + 49);
    LOBYTE(v161) = *(unsigned char *)(v2 + 1);
    uint64_t v45 = sub_101282D9C();
    sub_10128431C(v45, (uint64_t)v155);
    sub_10170140C(buf);
    sub_101726F78((uint64_t)buf);
    v150 |= 1u;
    double v148 = Current;
    uint64_t v46 = v149;
    uint64_t v47 = *(void *)(v4 + 352);
    *(_DWORD *)(v149 + 80) |= 1u;
    *(void *)(v46 + _Block_object_dispose(&STACK[0x850], 8) = v47;
    uint64_t v48 = v149;
    LODWORD(v47) = *(_DWORD *)(v2 + 5);
    *(_DWORD *)(v149 + 80) |= 2u;
    *(_DWORD *)(v48 + 16) = v47;
    uint64_t v49 = v149;
    LODWORD(v47) = *(_DWORD *)(v2 + 9);
    *(_DWORD *)(v149 + 80) |= 4u;
    *(_DWORD *)(v49 + 20) = v47;
    uint64_t v50 = v149;
    LODWORD(v47) = *(_DWORD *)(v2 + 13);
    *(_DWORD *)(v149 + 80) |= 8u;
    *(_DWORD *)(v50 + 24) = v47;
    uint64_t v51 = v149;
    LODWORD(v47) = *(_DWORD *)(v2 + 29);
    *(_DWORD *)(v149 + 80) |= 0x2000u;
    *(_DWORD *)(v51 + 64) = v47;
    uint64_t v52 = v149;
    LODWORD(v47) = *(_DWORD *)(v2 + 33);
    *(_DWORD *)(v149 + 80) |= 0x4000u;
    *(_DWORD *)(v52 + 6_Block_object_dispose(&STACK[0x850], 8) = v47;
    uint64_t v53 = v149;
    LODWORD(v47) = *(_DWORD *)(v2 + 37);
    *(_DWORD *)(v149 + 80) |= 0x8000u;
    *(_DWORD *)(v53 + 72) = v47;
    uint64_t v54 = v149;
    LODWORD(v47) = *(_DWORD *)(v2 + 53);
    *(_DWORD *)(v149 + 80) |= 0x1000u;
    *(_DWORD *)(v54 + 60) = v47;
    uint64_t v55 = v149;
    LODWORD(v47) = *(_DWORD *)(v2 + 57);
    *(_DWORD *)(v149 + 80) |= 0x20u;
    *(_DWORD *)(v55 + 32) = v47;
    uint64_t v56 = v149;
    LODWORD(v47) = *(_DWORD *)(v2 + 61);
    *(_DWORD *)(v149 + 80) |= 0x40u;
    *(_DWORD *)(v56 + 36) = v47;
    uint64_t v57 = v149;
    LODWORD(v47) = *(_DWORD *)(v2 + 65);
    *(_DWORD *)(v149 + 80) |= 0x80u;
    *(_DWORD *)(v57 + 40) = v47;
    uint64_t v58 = v149;
    LODWORD(v47) = *(_DWORD *)(v2 + 41);
    *(_DWORD *)(v149 + 80) |= 0x200u;
    *(_DWORD *)(v58 + 4_Block_object_dispose(&STACK[0x850], 8) = v47;
    uint64_t v59 = v149;
    LODWORD(v47) = *(_DWORD *)(v2 + 45);
    *(_DWORD *)(v149 + 80) |= 0x400u;
    *(_DWORD *)(v59 + 52) = v47;
    uint64_t v60 = v149;
    LODWORD(v47) = *(_DWORD *)(v2 + 49);
    *(_DWORD *)(v149 + 80) |= 0x800u;
    *(_DWORD *)(v60 + 56) = v47;
    uint64_t v61 = v149;
    int v62 = *(char *)(v2 + 1);
    *(_DWORD *)(v149 + 80) |= 0x10u;
    *(_DWORD *)(v61 + 2_Block_object_dispose(&STACK[0x850], 8) = v62;
    uint64_t v63 = v149;
    LOBYTE(v62) = *(unsigned char *)(v2 + 3) != 0;
    *(_DWORD *)(v149 + 80) |= 0x20000u;
    *(unsigned char *)(v63 + 77) = v62;
    uint64_t v64 = v149;
    LOBYTE(v62) = *(unsigned char *)(v2 + 4);
    *(_DWORD *)(v149 + 80) |= 0x10000u;
    *(unsigned char *)(v64 + 76) = v62;
    uint64_t v65 = v149;
    LODWORD(v47) = *(_DWORD *)(v2 + 69);
    *(_DWORD *)(v149 + 80) |= 0x100u;
    *(_DWORD *)(v65 + 44) = v47;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022BC980);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)buf);
    }
    sub_101706914((PB::Base *)buf);
  }
  sub_100B8FF68(v4 + 13040, v2);
  long long v66 = *(_OWORD *)(v2 + 48);
  v96[2] = *(_OWORD *)(v2 + 32);
  v96[3] = v66;
  v97[0] = *(_OWORD *)(v2 + 64);
  *(_OWORD *)((char *)v97 + 9) = *(_OWORD *)(v2 + 73);
  long long v67 = *(_OWORD *)(v2 + 16);
  v96[0] = *(_OWORD *)v2;
  v96[1] = v67;
  sub_100B5EA08(v4 + 12848, (uint64_t)v96);
  return sub_1000E01AC(v4, 6, v2, 89);
}

void sub_100594234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100594254(uint64_t a1)
{
  return sub_1005936A0(a1 - 152);
}

void sub_10059425C(uint64_t a1, uint64_t a2)
{
}

void sub_100594274(uint64_t a1, uint64_t a2)
{
}

void sub_10059428C(uint64_t a1, uint64_t *a2)
{
}

void sub_1005942A0(uint64_t a1, uint64_t *a2)
{
}

void sub_1005942B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 16);
  switch(*(unsigned char *)(a2 + 16))
  {
    case 1:
      uint64_t v5 = a1 + 1992;
      goto LABEL_10;
    case 2:
      uint64_t v7 = 4160;
      goto LABEL_9;
    case 3:
      uint64_t v8 = 6328;
      goto LABEL_7;
    case 4:
      uint64_t v8 = 8496;
LABEL_7:
      uint64_t v5 = a1 + v8;
      double v9 = (uint64_t *)(a1 + 1984);
      goto LABEL_11;
    case 5:
      uint64_t v7 = 10664;
LABEL_9:
      uint64_t v5 = a1 + v7;
LABEL_10:
      double v9 = (uint64_t *)(a1 + 1976);
LABEL_11:
      uint64_t v6 = *v9;
      break;
    default:
      uint64_t v6 = 0;
      uint64_t v5 = 0;
      break;
  }
  if (sub_1005947FC(v5, a2))
  {
    if (qword_102419110 != -1) {
      dispatch_once(&qword_102419110, &stru_1022BC9A0);
    }
    double v10 = qword_102419118;
    if (os_log_type_enabled((os_log_t)qword_102419118, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v20 = v4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "data type %u,received and reconstructed", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419110 != -1) {
        dispatch_once(&qword_102419110, &stru_1022BC9A0);
      }
      double v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSPU::visitSensorBuffer(const CMMotionCoprocessorReply::SensorBuffer *)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    int v11 = *(_DWORD *)(a2 + 2);
    int v12 = *(_DWORD *)(a1 + 12840);
    if (v12)
    {
      if (v12 + 1 == v11) {
        goto LABEL_33;
      }
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022BC9C0);
      }
      double v13 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        int v14 = *(_DWORD *)(a1 + 12840) + 1;
        *(_DWORD *)std::string buf = 67109376;
        int v20 = v14;
        __int16 v21 = 1024;
        int v22 = v11;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Sensor Buffer packet drop detected. AP is expecting %u, but got %u", buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_33;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022BC9C0);
      }
      double v15 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLSPU::visitSensorBuffer(const CMMotionCoprocessorReply::SensorBuffer *)", "%s\n");
    }
    else
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022BC9C0);
      }
      double v16 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109120;
        int v20 = v11;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Receiving first Sensor Buffer packet since process start, seq %u", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_33;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022BC9C0);
      }
      double v15 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSPU::visitSensorBuffer(const CMMotionCoprocessorReply::SensorBuffer *)", "%s\n");
    }
    if (v15 != buf) {
      free(v15);
    }
LABEL_33:
    *(_DWORD *)(a1 + 12840) = v11;
    if (v6)
    {
      double v17 = sub_1001AACF8(a1, *(double *)(a1 + 352));
      (*(void (**)(uint64_t, uint64_t, void, uint64_t, void, double))(v6 + 16))(v6, v4, *(void *)(a2 + 8), v5, *(unsigned int *)(v5 + 2164), v17);
    }
  }
}

BOOL sub_1005947FC(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 1);
  if (*(unsigned char *)(a2 + 1) && *(_DWORD *)(a1 + 2160) + 1 != v4)
  {
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_1022BC920);
    }
    double v10 = qword_102418FE8;
    if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_FAULT))
    {
      int v11 = *(_DWORD *)(a1 + 2160);
      int v12 = *(unsigned __int8 *)(a2 + 1);
      *(_DWORD *)std::string buf = 67240704;
      int v17 = 25;
      __int16 v18 = 1026;
      int v19 = v11;
      __int16 v20 = 1026;
      int v21 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Out of order segments,U::kType,%{public}u,fLastSegment,%{public}u,packet->fSegment,%{public}u", buf, 0x14u);
    }
    BOOL v13 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v13)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_1022BC920);
      }
      double v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLSPUReportReconstructor<CLSPU::PackedSensorBuffer>::reconstruct(const U *) [T = CLSPU::PackedSensorBuffer, U = CMMotionCoprocessorReply::SensorBuffer]", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
      return 0;
    }
  }
  else
  {
    size_t v5 = *(unsigned __int16 *)(a2 + 6);
    if (v5 > 0xC8 || (unsigned int v6 = 200 * v4, (200 * v4 + v5) >= 0x871))
    {
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_1022BC920);
      }
      uint64_t v8 = qword_102418FE8;
      if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_FAULT))
      {
        int v9 = *(unsigned __int16 *)(a2 + 6);
        *(_DWORD *)std::string buf = 67240192;
        int v17 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Bad size,packet->fSize,%{public}u", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FE0 != -1) {
          dispatch_once(&qword_102418FE0, &stru_1022BC920);
        }
        int v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLSPUReportReconstructor<CLSPU::PackedSensorBuffer>::reconstruct(const U *) [T = CLSPU::PackedSensorBuffer, U = CMMotionCoprocessorReply::SensorBuffer]", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      BOOL result = 0;
      *(_DWORD *)(a1 + 2160) = -1;
    }
    else
    {
      memcpy((void *)(a1 + v6), (const void *)(a2 + 18), v5);
      *(_DWORD *)(a1 + 2160) = *(unsigned __int8 *)(a2 + 1);
      *(_DWORD *)(a1 + 2164) = v6 + *(unsigned __int16 *)(a2 + 6);
      return *(unsigned char *)(a2 + 17) != 0;
    }
  }
  return result;
}

void sub_100594BC0(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100594BC8(uint64_t a1, long long *a2)
{
  double v6 = sub_1001AACF8(a1, *(double *)(a1 + 352));
  long long v4 = a2[1];
  long long v7 = *a2;
  long long v8 = v4;
  return sub_1000E01AC(a1, 8, (uint64_t)&v6, 40);
}

uint64_t sub_100594C1C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 12832);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(unsigned __int8 *)(a2 + 1));
  }
  return result;
}

uint64_t sub_100594C38(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 12680);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(unsigned __int8 *)(a2 + 1));
  }
  return result;
}

uint64_t sub_100594C54(uint64_t a1, uint64_t a2)
{
  double v4 = sub_1001AACF8(a1, *(double *)(a1 + 352)+ ((double)*(unint64_t *)(a2 + 12) - (double)*(unint64_t *)(a2 + 20)) / 1000000.0);
  int v7 = 0;
  *(_OWORD *)double v6 = *(_OWORD *)a2;
  *(_OWORD *)&v6[12] = *(_OWORD *)(a2 + 12);
  double v8 = v4;
  return sub_1000E01AC(a1, 21, (uint64_t)v6, 40);
}

uint64_t sub_100594CD8(uint64_t a1, uint64_t a2)
{
  return sub_100594C54(a1 - 152, a2);
}

uint64_t sub_100594CE0(uint64_t a1, uint64_t a2)
{
  double v4 = sub_1001AACF8(a1, *(double *)(a1 + 352)+ ((double)*(unint64_t *)(a2 + 12) - (double)*(unint64_t *)(a2 + 20)) / 1000000.0);
  int v7 = 0;
  *(_OWORD *)double v6 = *(_OWORD *)a2;
  *(_OWORD *)&v6[12] = *(_OWORD *)(a2 + 12);
  double v8 = v4;
  return sub_1000E01AC(a1, 13, (uint64_t)v6, 40);
}

uint64_t sub_100594D64(uint64_t a1, uint64_t a2)
{
  return sub_100594CE0(a1 - 152, a2);
}

void sub_100594D6C(uint64_t a1)
{
  uint64_t v2 = sub_1000D3E78();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100594DE8;
  void v3[3] = &unk_1022A3020;
  v3[4] = a1;
  sub_1009E8F7C(v2, (uint64_t)v3);
}

void sub_100594DE8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if ((sub_1000A16E8() & 0x10) != 0)
  {
    v2[0] = 0;
    unint64_t v3 = 0xBFF0000000000000;
    *(_OWORD *)std::string __p = 0u;
    long long v5 = 0u;
    unint64_t v6 = 0xFFFFFFFF7FFFFFFFLL;
    int v7 = -1082130432;
    uint64_t v8 = -1;
    int v9 = 0;
    sub_100B5E104(v1 + 12848, (uint64_t)v2);
    (*(void (**)(uint64_t))(*(void *)v1 + 464))(v1);
    if (SBYTE7(v5) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100594EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100594EBC(uint64_t a1)
{
  uint64_t v2 = sub_1000D3E78();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100594F38;
  void v3[3] = &unk_1022A3020;
  v3[4] = a1;
  sub_1009E8F7C(v2, (uint64_t)v3);
}

void sub_100594F38(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if ((sub_1000A16E8() & 0x40000) != 0)
  {
    v2[0] = 0;
    unint64_t v3 = 0xBFF0000000000000;
    std::string __p = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0xFFFFFFFF7FFFFFFFLL;
    int v8 = -1;
    sub_100B5E534(v1 + 12848, (uint64_t)v2);
    (*(void (**)(uint64_t))(*(void *)v1 + 472))(v1);
    if (SHIBYTE(v6) < 0) {
      operator delete(__p);
    }
  }
}

void sub_100594FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100594FF8(uint64_t a1, long long *a2)
{
  long long v5 = *a2;
  uint64_t v3 = sub_1000D3E78();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  uint64_t v4[2] = sub_10059507C;
  void v4[3] = &unk_1022B8680;
  void v4[4] = a1;
  sub_1009E8F7C(v3, (uint64_t)v4);
}

uint64_t sub_10059507C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022BC9E0);
  }
  uint64_t v3 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 48);
    BOOL v5 = *(unsigned char *)(a1 + 49) != 0;
    int v6 = *(unsigned __int8 *)(a1 + 50);
    BOOL v7 = *(unsigned char *)(a1 + 51) != 0;
    BOOL v8 = *(unsigned char *)(a1 + 52) != 0;
    uint64_t v9 = *(void *)(a1 + 40);
    v11[0] = 68290563;
    v11[1] = 0;
    __int16 v12 = 2082;
    BOOL v13 = "";
    __int16 v14 = 1025;
    int v15 = v4;
    __int16 v16 = 1025;
    BOOL v17 = v5;
    __int16 v18 = 1025;
    int v19 = v6;
    __int16 v20 = 1025;
    BOOL v21 = v7;
    __int16 v22 = 1025;
    BOOL v23 = v8;
    __int16 v24 = 2049;
    uint64_t v25 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Configuration sent\", \"fFallStatsMode\":%{private}d, \"fSensorRecordingActive\":%{private}hhd, \"fSimulateEvent\":%{private}d, \"fUserStudyPressureDataCollection\":%{private}hhd, \"fDetectorEnabled\":%{private}hhd, \"fLastReplyAopTimestamp\":%{private}llu}", (uint8_t *)v11, 0x3Au);
  }
  *(_OWORD *)(v2 + 247) = *(_OWORD *)(a1 + 40);
  return (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 552))(v2, 0);
}

void sub_100595208()
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022BC9C0);
  }
  uint64_t v0 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Sending fallModel Command.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022BC9C0);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSPU::setFallModels(const CMSPUFall_Types::FallModel &, const CMSPUFall_Types::FallModel &, const CMSPUFall_Types::FallModel &)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_100595390(uint64_t a1, long long *a2)
{
  long long v4 = a2[3];
  long long v90 = a2[2];
  long long v91 = v4;
  *(_OWORD *)double v92 = a2[4];
  *(_OWORD *)&v92[12] = *(long long *)((char *)a2 + 76);
  long long v5 = a2[1];
  long long v88 = *a2;
  char v87 = 32;
  long long v89 = v5;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1022BC9E0);
  }
  int v6 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_INFO))
  {
    double v7 = *(float *)a2;
    double v8 = *((float *)a2 + 1);
    double v9 = *((float *)a2 + 2);
    double v10 = *((float *)a2 + 3);
    double v11 = *((float *)a2 + 4);
    double v12 = *((float *)a2 + 5);
    double v13 = *((float *)a2 + 6);
    int v14 = *((_DWORD *)a2 + 10);
    int v15 = *((_DWORD *)a2 + 11);
    double v16 = *((float *)a2 + 12);
    double v17 = *((float *)a2 + 13);
    double v18 = *((float *)a2 + 14);
    double v19 = *((float *)a2 + 15);
    double v20 = *((float *)a2 + 16);
    int v21 = *((_DWORD *)a2 + 17);
    int v22 = *((_DWORD *)a2 + 18);
    int v23 = *((_DWORD *)a2 + 19);
    int v24 = *((_DWORD *)a2 + 20);
    int v25 = *((unsigned __int8 *)a2 + 84);
    int v26 = *((unsigned __int8 *)a2 + 85);
    int v27 = *((unsigned __int8 *)a2 + 86);
    int v28 = *((unsigned __int8 *)a2 + 87);
    int v29 = *((unsigned __int8 *)a2 + 88);
    int v30 = *((unsigned __int8 *)a2 + 89);
    int v31 = *((unsigned __int8 *)a2 + 90);
    v32[0] = 68295683;
    v32[1] = 0;
    __int16 v33 = 2082;
    double v34 = "";
    __int16 v35 = 2049;
    double v36 = v7;
    __int16 v37 = 2049;
    double v38 = v8;
    __int16 v39 = 2049;
    double v40 = v9;
    __int16 v41 = 2049;
    double v42 = v10;
    __int16 v43 = 2049;
    double v44 = v9;
    __int16 v45 = 2049;
    double v46 = v11;
    __int16 v47 = 2049;
    double v48 = v12;
    __int16 v49 = 2049;
    double v50 = v13;
    __int16 v51 = 1025;
    int v52 = v14;
    __int16 v53 = 1025;
    int v54 = v15;
    __int16 v55 = 2049;
    double v56 = v16;
    __int16 v57 = 2049;
    double v58 = v17;
    __int16 v59 = 2049;
    double v60 = v18;
    __int16 v61 = 2049;
    double v62 = v19;
    __int16 v63 = 2049;
    double v64 = v20;
    __int16 v65 = 1025;
    int v66 = v21;
    __int16 v67 = 1025;
    int v68 = v22;
    __int16 v69 = 1025;
    int v70 = v23;
    __int16 v71 = 1025;
    int v72 = v24;
    __int16 v73 = 1025;
    int v74 = v25;
    __int16 v75 = 1025;
    int v76 = v26;
    __int16 v77 = 1025;
    int v78 = v27;
    __int16 v79 = 1025;
    int v80 = v28;
    __int16 v81 = 1025;
    int v82 = v29;
    __int16 v83 = 1025;
    int v84 = v30;
    __int16 v85 = 1025;
    int v86 = v31;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Sending fallThresholds Command\", \"fImpactMaxAccelNormAlertThreshold\":\"%{private}f\", \"fImpactMaxAccelNormLoggingStatsThreshold\":\"%{private}f\", \"fImpactMaxAccelNormLoggingHeartRateThreshold\":\"%{private}f\", \"fImpactMaxAccelNormLoggingHighResolutionSensorDataThreshold\":\"%{private}f\", \"fImpactMaxAccelNormLoggingHeartRateThreshold\":\"%{private}f\", \"fTripFallPosteriorRatioDetectionThreshold\":\"%{private}f\", \"fSlipFallPosteriorRatioDetectionThreshold\":\"%{private}f\", \"fOtherFallPosteriorRatioDetectionThreshold\":\"%{private}f\", \"fTotalLongLieThreshold\":%{private}d, \"fConsecutiveLongLieThreshold\":%{private}d, \"fAlertGatingMotionThreshold\":\"%{private}f\", \"fCyclingImpactGravityVarianceThreshold\":\"%{private}f\", \"fCyclingImpactCrownVarianceThreshold\":\"%{private}f\", \"fCyclingImpactMaxAbsYThreshold\":\"%{private}f\", \"fCyclingDistanceTraveledPostImpactThreshold\":\"%{private}f\", \"fCyclingEpochsDetectedPostImpactThreshold\":%{private}d, \"fOtherWorkoutQuiescenceThresholdLow\":%{private}d, \"fOtherWorkoutQuiescenceThresholdHigh\":%{private}d, \"fOtherWorkoutConsecutiveLongLieThreshold\":%{private}d, \"fOtherWorkoutShouldCancelAlertOnStepsThreshold\":%{private}d, \"fOtherWorkoutShouldCancelAlertOnStandThreshold\":%{private}d, \"fOtherWorkoutShouldCancelAlertOnActiveThreshold\":%{private}d, \"fRefereeOperatingModeOverride\":%{private}d, \"fAllDayStateMachineOperatingModeOverride\":%{private}d, \"fCyclingStateMachineEnabledOverride\":%{private}d, \"fAllDayStateMachineEnabledOverride\":%{private}d}", (uint8_t *)v32, 0xE2u);
  }
  sub_10059801C(a1 + 192, (long long *)&v87, 0);
}

void sub_10059560C(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100595690;
  void v5[3] = &unk_1022BBA18;
  void v5[4] = a1;
  char v6 = a2;
  sub_1009E8F7C(v4, (uint64_t)v5);
}

uint64_t sub_100595690(uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)(a1 + 32);
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_1022BCA00);
  }
  uint64_t v3 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 40);
    v6[0] = 68289283;
    v6[1] = 0;
    __int16 v7 = 2082;
    double v8 = "";
    __int16 v9 = 1025;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Configuration sent\", \"shouldGateDynamicBiasOnChargerStatus\":%{private}d}", (uint8_t *)v6, 0x18u);
  }
  v2[267] = *(unsigned char *)(a1 + 40);
  return (*(uint64_t (**)(unsigned char *, void))(*(void *)v2 + 552))(v2, 0);
}

void sub_1005957C4(uint64_t a1, int a2, int a3)
{
  LOBYTE(v7[0]) = 46;
  BYTE1(v7[0]) = a2;
  BYTE2(v7[0]) = a3;
  sub_10059826C(a1 + 192, v7, 0);
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022BC960);
  }
  long long v5 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109376;
    int v11 = a2;
    __int16 v12 = 1024;
    int v13 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Applying override baseband usage flag, enabled, %d, value, %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022BC960);
    }
    v7[1] = 67109376;
    _DWORD v7[2] = a2;
    __int16 v8 = 1024;
    int v9 = a3;
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSPU::overrideBasebandUsageFlag(BOOL, BOOL)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_1005959AC(uint64_t a1, char a2, char a3, float a4)
{
  v4[0] = 71;
  v4[1] = a2;
  float v5 = a4;
  char v6 = a3;
  sub_100598440(a1 + 192, v4, 0);
}

void sub_1005959EC(uint64_t a1, char a2)
{
  LOBYTE(v2) = 72;
  HIBYTE(v2) = a2;
  sub_100598624(a1 + 192, &v2, 0);
}

float sub_100595A24(uint64_t a1, char a2, char a3, double a4)
{
  v6[0] = 74;
  v6[1] = a2;
  float v4 = a4;
  float v7 = v4;
  char v8 = a3;
  sub_1005987F8(a1 + 192, v6, 0);
  return result;
}

void sub_100595A68(uint64_t a1, char a2, uint64_t a3)
{
  v3[0] = 75;
  v3[1] = a2;
  uint64_t v4 = a3;
  sub_1005989DC(a1 + 192, (uint64_t)v3, 0);
}

void sub_100595AA4(uint64_t a1, char a2, float a3)
{
  v3[0] = 81;
  v3[1] = a2;
  float v4 = a3;
  sub_100598BC0(a1 + 192, (int *)v3, 0);
}

id sub_100595AE0(uint64_t a1, long long *a2)
{
  long long v6 = *a2;
  int v7 = *((_DWORD *)a2 + 4);
  id v3 = [*(id *)(a1 + 168) silo];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100595B70;
  void v5[3] = &unk_1022BBB98;
  void v5[4] = a1;
  return [v3 async:v5];
}

uint64_t sub_100595B70(uint64_t a1)
{
  return sub_100D4FB30(*(void *)(a1 + 32) + 13176, a1 + 40);
}

id sub_100595B88(uint64_t a1, long long *a2)
{
  uint64_t v2 = a1 - 152;
  long long v6 = *a2;
  int v7 = *((_DWORD *)a2 + 4);
  id v3 = [*(id *)(a1 + 16) silo];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100595B70;
  void v5[3] = &unk_1022BBB98;
  void v5[4] = v2;
  return [v3 async:v5];
}

void sub_100595C28(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 168), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BCA20);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    int v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSPU::onBLSData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BCA20);
    }
    char v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      int v14 = "";
      __int16 v15 = 2082;
      double v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSPU::onBLSData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  if (!*a2) {
    sub_100751794(a4 + 13632, *a3);
  }
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_100595DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100595E0C(uint64_t a1, uint64_t a2)
{
  return sub_100D4FBB4(a1 + 13176, a2);
}

uint64_t sub_100595E18(uint64_t a1, uint64_t a2)
{
  return sub_100D4FBB4(a1 + 13024, a2);
}

uint64_t sub_100595E24(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 12844))
  {
    sub_10170140C(buf);
    sub_101724FF8((uint64_t)buf);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v45 |= 1u;
    CFAbsoluteTime v43 = Current;
    uint64_t v5 = v44;
    uint64_t v6 = *(void *)(a1 + 352);
    *(unsigned char *)(v44 + 44) |= 4u;
    *(void *)(v5 + 24) = v6;
    uint64_t v7 = v44;
    uint64_t v8 = *(void *)(a2 + 1);
    *(unsigned char *)(v44 + 44) |= 2u;
    *(void *)(v7 + 16) = v8;
    uint64_t v9 = v44;
    uint64_t v10 = *(void *)(a2 + 9);
    *(unsigned char *)(v44 + 44) |= 1u;
    *(void *)(v9 + _Block_object_dispose(&STACK[0x850], 8) = v10;
    uint64_t v11 = v44;
    uint64_t v12 = *(void *)(a2 + 17);
    *(unsigned char *)(v44 + 44) |= 8u;
    *(void *)(v11 + 32) = v12;
    uint64_t v13 = v44;
    LOBYTE(v12) = *(unsigned char *)(a2 + 25);
    *(unsigned char *)(v44 + 44) |= 0x10u;
    *(unsigned char *)(v13 + 40) = v12;
    uint64_t v14 = v44;
    LOBYTE(v12) = *(unsigned char *)(a2 + 26);
    *(unsigned char *)(v44 + 44) |= 0x40u;
    *(unsigned char *)(v14 + 42) = v12;
    uint64_t v15 = v44;
    LOBYTE(v12) = *(unsigned char *)(a2 + 27);
    *(unsigned char *)(v44 + 44) |= 0x20u;
    *(unsigned char *)(v15 + 41) = v12;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022BC980);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)buf);
    }
    sub_101706914((PB::Base *)buf);
  }
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022BC960);
  }
  double v16 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(void *)(a1 + 352);
    uint64_t v18 = *(void *)(a2 + 1);
    uint64_t v19 = *(void *)(a2 + 9);
    uint64_t v20 = *(void *)(a2 + 17);
    int v21 = *(unsigned __int8 *)(a2 + 25);
    int v22 = *(unsigned __int8 *)(a2 + 27);
    int v23 = *(unsigned __int8 *)(a2 + 26);
    int v24 = *(unsigned __int8 *)(a2 + 28);
    *(_DWORD *)std::string buf = 134350848;
    uint64_t v28 = v17;
    __int16 v29 = 2048;
    uint64_t v30 = v18;
    __int16 v31 = 2048;
    uint64_t v32 = v19;
    __int16 v33 = 2048;
    uint64_t v34 = v20;
    __int16 v35 = 1026;
    int v36 = v21;
    __int16 v37 = 1026;
    int v38 = v22;
    __int16 v39 = 1026;
    int v40 = v23;
    __int16 v41 = 1026;
    int v42 = v24;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "MagnetometerReset,timestamp,%{public}f,timeSinceLastRemagTrigger,%llu,timeSinceLastRemag,%llu,triggerCount,%llu,exitingSaturation,%{public}d,extendedSaturation,%{public}d,shiftInSaturation,%{public}d,fSuccessFlag,%{public}d", buf, 0x42u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022BC960);
    }
    int v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSPU::visitMagnetometerReset(const CMMotionCoprocessorReply::MagnetometerReset *)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  return sub_10076F93C(a1 + 13608, *(double *)(a1 + 352));
}

void sub_1005961D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005961F0(uint64_t a1, uint64_t a2)
{
  return sub_100595E24(a1 - 152, a2);
}

uint64_t sub_1005961F8()
{
  return sub_100FFB5E0();
}

uint64_t sub_100596204()
{
  return sub_100FFB5E0();
}

void sub_100596210(uint64_t a1)
{
}

void sub_10059621C(uint64_t a1)
{
}

uint64_t sub_100596228(uint64_t a1, uint64_t a2)
{
  return sub_100750E78(a1 + 13632, a2);
}

uint64_t sub_100596234(uint64_t a1, uint64_t a2)
{
  return sub_100750E78(a1 + 13480, a2);
}

uint64_t sub_100596240(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 352);
  *(double *)uint64_t v18 = v4;
  double v5 = sub_1001AACF8(a1, v4);
  *(double *)&v18[1] = v5;
  int v6 = *(unsigned __int8 *)(a2 + 1);
  char v19 = *(unsigned char *)(a2 + 1);
  int v7 = *(unsigned __int8 *)(a2 + 2);
  char v20 = *(unsigned char *)(a2 + 2);
  __int16 v8 = *(_WORD *)(a2 + 3);
  char v21 = v8;
  if (*(unsigned char *)(a1 + 12844))
  {
    sub_10170140C(buf);
    sub_101725748((uint64_t)buf);
    v44 |= 1u;
    double v43 = v5;
    uint64_t v9 = v42;
    *(unsigned char *)(v42 + 28) |= 1u;
    *(double *)(v9 + _Block_object_dispose(&STACK[0x850], 8) = v4;
    uint64_t v10 = v42;
    int v11 = *(unsigned __int8 *)(a2 + 1);
    *(unsigned char *)(v42 + 28) |= 4u;
    *(_DWORD *)(v10 + 20) = v11;
    uint64_t v12 = v42;
    LOBYTE(v11) = *(unsigned char *)(a2 + 2) != 0;
    *(unsigned char *)(v42 + 28) |= 8u;
    *(unsigned char *)(v12 + 24) = v11;
    uint64_t v13 = v42;
    int v14 = *(unsigned __int16 *)(a2 + 3);
    *(unsigned char *)(v42 + 28) |= 2u;
    *(_DWORD *)(v13 + 16) = v14;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1022BC980);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)buf);
    }
    sub_101706914((PB::Base *)buf);
  }
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022BC960);
  }
  uint64_t v15 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134219008;
    double v33 = v4;
    __int16 v34 = 2048;
    double v35 = v5;
    __int16 v36 = 1024;
    int v37 = v6;
    __int16 v38 = 1026;
    int v39 = v7;
    __int16 v40 = 1024;
    int v41 = v8;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "BasebandCompassCoex,timestamp,%f,startTime,%f,sub_type,%d,inCoex,%{public}d,reserved,0x%02x", buf, 0x28u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022BC960);
    }
    int v22 = 134219008;
    double v23 = v4;
    __int16 v24 = 2048;
    double v25 = v5;
    __int16 v26 = 1024;
    int v27 = v6;
    __int16 v28 = 1026;
    int v29 = v7;
    __int16 v30 = 1024;
    int v31 = v8;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSPU::visitBasebandCompassCoex(const CMMotionCoprocessorReply::BasebandCompassCoex *)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  return sub_1000E01AC(a1, 36, (uint64_t)v18, 224);
}

void sub_100596588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

uint64_t sub_1005965A8(uint64_t a1, uint64_t a2)
{
  return sub_100596240(a1 - 152, a2);
}

uint64_t sub_1005965B0(uint64_t a1, uint64_t a2)
{
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022BC960);
  }
  double v4 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a2 + 1);
    int v6 = *(unsigned __int8 *)(a2 + 2);
    uint64_t v7 = *(void *)(a2 + 4);
    *(_DWORD *)std::string buf = 67240704;
    int v11 = v5;
    __int16 v12 = 1026;
    int v13 = v6;
    __int16 v14 = 2048;
    uint64_t v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BasebandCompassCoexMetrics,countOfTimesEnteringHeatup,%{public}d,hasActiveMagnetometerClientDuringHeatUp,%{public}d,durationOfNonDefaultState,%llu", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022BC960);
    }
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSPU::visitBasebandCompassCoexMetrics(const CMMotionCoprocessorReply::BasebandCompassCoexMetrics *)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  return sub_10076FB60(a1 + 13608, *(double *)(a1 + 352));
}

uint64_t sub_1005967BC(uint64_t a1, uint64_t a2)
{
  return sub_1005965B0(a1 - 152, a2);
}

uint64_t sub_1005967C4(uint64_t a1, long long *a2)
{
  *(void *)&uint8_t v8[16] = 0;
  double v6 = sub_1001AACF8(a1, *(double *)(a1 + 352));
  long long v4 = a2[1];
  long long v7 = *a2;
  *(_OWORD *)__int16 v8 = v4;
  *(void *)&v8[15] = *(void *)((char *)a2 + 31);
  return sub_1000E01AC(a1, 40, (uint64_t)&v6, 48);
}

uint64_t sub_100596828(uint64_t a1, long long *a2)
{
  return sub_1005967C4(a1 - 152, a2);
}

void sub_100596830(uint64_t a1, uint64_t a2)
{
  if (qword_102418FC0 != -1) {
    dispatch_once(&qword_102418FC0, &stru_1022BCA40);
  }
  long long v4 = qword_102418FC8;
  if (os_log_type_enabled((os_log_t)qword_102418FC8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 352);
    uint64_t v6 = *(void *)(a2 + 1);
    int v7 = *(unsigned __int8 *)(a2 + 9);
    int v8 = *(unsigned __int8 *)(a2 + 10);
    int v9 = *(unsigned __int8 *)(a2 + 11);
    int v10 = *(unsigned __int8 *)(a2 + 12);
    int v11 = *(unsigned __int8 *)(a2 + 13);
    int v12 = *(unsigned __int8 *)(a2 + 14);
    double v13 = *(float *)(a2 + 15);
    double v14 = *(float *)(a2 + 19);
    double v15 = *(float *)(a2 + 23);
    double v16 = *(float *)(a2 + 27);
    double v17 = *(float *)(a2 + 31);
    double v18 = *(float *)(a2 + 35);
    double v19 = (float)(*(float *)(a2 + 39) * 57.296);
    int v20 = *(unsigned __int8 *)(a2 + 43);
    *(_DWORD *)std::string buf = 134352896;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(void *)&unsigned char buf[14] = v6;
    *(_WORD *)&buf[22] = 1026;
    *(_DWORD *)__int16 v24 = v7;
    *(_WORD *)&v24[4] = 1026;
    *(_DWORD *)&v24[6] = v8;
    *(_WORD *)&v24[10] = 1026;
    *(_DWORD *)&unsigned char v24[12] = v9;
    *(_WORD *)&v24[16] = 1026;
    *(_DWORD *)&v24[18] = v10;
    *(_WORD *)&v24[22] = 1026;
    *(_DWORD *)&v24[24] = v11;
    *(_WORD *)&v24[28] = 1026;
    *(_DWORD *)&v24[30] = v12;
    __int16 v25 = 2050;
    double v26 = v13;
    __int16 v27 = 2050;
    double v28 = v14;
    __int16 v29 = 2050;
    double v30 = v15;
    __int16 v31 = 2050;
    double v32 = v16;
    __int16 v33 = 2050;
    double v34 = v17;
    __int16 v35 = 2050;
    double v36 = v18;
    __int16 v37 = 2050;
    double v38 = v19;
    __int16 v39 = 1026;
    int v40 = v20;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "ViewObstructedState,timestamp,%{public}f,aopTimestamp,%{public}llu,shouldSuppress,%{public}u,currentState,%{public}u,currentEventTag,%{public}u,orientation,%{public}u,motionType,%{public}u,sufficientMotion,%{public}u,lux,%{public}f,rawProxIntensity,%{public}f,factoryPocketProbability,%{public}f,baselinedPocketProbability,%{public}f,pocketProbSuppressThreshold,%{public}f,pocketProbUnsuppressThreshold,%{public}f,gravityAngleDeg,%{public}f,hasProxCalibration,%{public}u", buf, 0x86u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FC0 != -1) {
      dispatch_once(&qword_102418FC0, &stru_1022BCA40);
    }
    int v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSPU::visitViewObstructedState(const CMMotionCoprocessorReply::ViewObstructedState *)", "%s\n", v22);
    if (v22 != buf) {
      free(v22);
    }
  }
  if (*(unsigned char *)(a2 + 44))
  {
    *(void *)&v24[24] = 0;
    *(void *)std::string buf = sub_1001AACF8(a1, *(double *)(a1 + 352));
    long long v21 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)a2;
    *(_OWORD *)__int16 v24 = v21;
    *(_OWORD *)&v24[13] = *(_OWORD *)(a2 + 29);
    sub_1000E01AC(a1, 42, (uint64_t)buf, 56);
  }
}

void sub_100596C04(uint64_t a1, uint64_t a2)
{
}

void sub_100596C0C(uint64_t a1, uint64_t a2)
{
  if (qword_102418FC0 != -1) {
    dispatch_once(&qword_102418FC0, &stru_1022BCA40);
  }
  long long v4 = qword_102418FC8;
  if (os_log_type_enabled((os_log_t)qword_102418FC8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 352);
    int v6 = *(unsigned __int8 *)(a2 + 9);
    int v7 = *(unsigned __int8 *)(a2 + 10);
    double v8 = *(float *)(a2 + 11);
    double v9 = *(float *)(a2 + 15);
    double v10 = *(float *)(a2 + 19);
    double v11 = *(float *)(a2 + 23);
    double v12 = *(float *)(a2 + 27);
    double v13 = *(float *)(a2 + 31);
    double v14 = *(float *)(a2 + 35);
    double v15 = *(float *)(a2 + 39);
    double v16 = *(float *)(a2 + 43);
    double v17 = *(float *)(a2 + 47);
    double v18 = *(float *)(a2 + 51);
    double v19 = *(float *)(a2 + 55);
    double v20 = *(float *)(a2 + 59);
    double v21 = *(float *)(a2 + 63);
    double v22 = *(float *)(a2 + 67);
    double v23 = *(float *)(a2 + 71);
    double v24 = *(float *)(a2 + 75);
    double v25 = *(float *)(a2 + 79);
    *(_DWORD *)std::string buf = 134354176;
    uint64_t v28 = v5;
    __int16 v29 = 1026;
    int v30 = v6;
    __int16 v31 = 1026;
    int v32 = v7;
    __int16 v33 = 2050;
    double v34 = v8;
    __int16 v35 = 2050;
    double v36 = v9;
    __int16 v37 = 2050;
    double v38 = v10;
    __int16 v39 = 2050;
    double v40 = v11;
    __int16 v41 = 2050;
    double v42 = v12;
    __int16 v43 = 2050;
    double v44 = v13;
    __int16 v45 = 2050;
    double v46 = v14;
    __int16 v47 = 2050;
    double v48 = v15;
    __int16 v49 = 2050;
    double v50 = v16;
    __int16 v51 = 2050;
    double v52 = v17;
    __int16 v53 = 2050;
    double v54 = v18;
    __int16 v55 = 2050;
    double v56 = v19;
    __int16 v57 = 2050;
    double v58 = v20;
    __int16 v59 = 2050;
    double v60 = v21;
    __int16 v61 = 2050;
    double v62 = v22;
    __int16 v63 = 2050;
    double v64 = v23;
    __int16 v65 = 2050;
    double v66 = v24;
    __int16 v67 = 2050;
    double v68 = v25;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "ViewObstructedMLFeatures timestamp,%{public}f,currentState,%{public}u,priorState,%{public}u,absMeanGravX,%{public}f,meanGravY,%{public}f,meanGravZ,%{public}f,AccelFFTBin1,%{public}f,AccelFFTBin2,%{public}f,AccelFFTBin3,%{public}f,AccelFFTBin4,%{public}f,AccelFFTBin5,%{public}f,AccelFFTBin6,%{public}f,PressureFFTBin1,%{public}f,PressureFFTBin2,%{public}f,PressureFFTBin3,%{public}f,PressureFFTBin4,%{public}f,PressureFFTBin5,%{public}f,PressureFFTBin6,%{public}fAccelFFTBinDotPressureFFTBin,%{public}f,MedianPocketProb,%{public}f,MedianLux,%{public}f", buf, 0xCCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FC0 != -1) {
      dispatch_once(&qword_102418FC0, &stru_1022BCA40);
    }
    double v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSPU::visitViewObstructedMLFeatures(const CMMotionCoprocessorReply::ViewObstructedMLFeatures *)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
}

void sub_100597054(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10059705C(uint64_t a1, uint64_t a2)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022BC9C0);
  }
  long long v4 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 352);
    double v6 = *(float *)(a2 + 12);
    *(_DWORD *)std::string buf = 134349312;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&unsigned char buf[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "ALS,timestamp,%{public}f,value,%f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022BC9C0);
    }
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSPU::visitALS(const CMMotionCoprocessorReply::ALS *)", "%s\n", v8);
    if (v8 != buf) {
      free(v8);
    }
  }
  *(void *)std::string buf = sub_1001AACF8(a1, *(double *)(a1 + 352));
  *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)a2;
  return sub_1000E01AC(a1, 41, (uint64_t)buf, 24);
}

uint64_t sub_100597268(uint64_t a1, uint64_t a2)
{
  return sub_10059705C(a1 - 152, a2);
}

uint64_t sub_100597270(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  v5[0] = sub_1001AACF8(a1, *(double *)(a1 + 352));
  v5[1] = *(void *)a2;
  LOWORD(v6) = *(_WORD *)(a2 + 8);
  return sub_1000E01AC(a1, 43, (uint64_t)v5, 24);
}

uint64_t sub_1005972D0(uint64_t a1, uint64_t a2)
{
  return sub_100597270(a1 - 152, a2);
}

uint64_t sub_1005972D8(uint64_t a1, long long *a2)
{
  *(void *)&v9[16] = 0;
  double v6 = sub_1001AACF8(a1, *(double *)(a1 + 352));
  long long v4 = a2[1];
  long long v7 = *a2;
  long long v8 = v4;
  *(_OWORD *)double v9 = a2[2];
  *(_DWORD *)&v9[15] = *(_DWORD *)((char *)a2 + 47);
  return sub_1000E01AC(a1, 44, (uint64_t)&v6, 64);
}

uint64_t sub_100597344(uint64_t a1, long long *a2)
{
  return sub_1005972D8(a1 - 152, a2);
}

uint64_t sub_10059734C(uint64_t a1, void *a2)
{
  v5[0] = sub_1001AACF8(a1, *(double *)(a1 + 352));
  v5[1] = *a2;
  return sub_1000E01AC(a1, 45, (uint64_t)v5, 16);
}

uint64_t sub_1005973A0(uint64_t a1, void *a2)
{
  return sub_10059734C(a1 - 152, a2);
}

uint64_t sub_1005973A8(uint64_t a1, void *a2)
{
  v5[0] = sub_1001AACF8(a1, *(double *)(a1 + 352));
  v5[1] = *a2;
  return sub_1000E01AC(a1, 46, (uint64_t)v5, 16);
}

uint64_t sub_1005973FC(uint64_t a1, void *a2)
{
  return sub_1005973A8(a1 - 152, a2);
}

uint64_t sub_100597404()
{
  return sub_100887558();
}

uint64_t sub_100597410()
{
  return sub_100887558();
}

void sub_10059741C()
{
  uint64_t v0 = sub_100ED9BA0();

  sub_100ED9C1C(v0);
}

void sub_100597454()
{
  uint64_t v0 = sub_100ED9BA0();

  sub_100ED9C1C(v0);
}

uint64_t sub_10059748C(uint64_t a1, uint64_t a2)
{
  return sub_1014F0D68(a1 + 13656, a2);
}

uint64_t sub_100597498(uint64_t a1, uint64_t a2)
{
  return sub_1014F0D68(a1 + 13504, a2);
}

_DWORD *sub_1005974A4(uint64_t a1, uint64_t a2)
{
  return sub_100EF51BC((_DWORD *)(a1 + 13664), a2);
}

_DWORD *sub_1005974B0(uint64_t a1, uint64_t a2)
{
  return sub_100EF51BC((_DWORD *)(a1 + 13512), a2);
}

void sub_1005974BC(uint64_t a1, uint64_t a2)
{
  if (qword_102419070 != -1) {
    dispatch_once(&qword_102419070, &stru_1022BCA60);
  }
  id v3 = qword_102419078;
  if (os_log_type_enabled((os_log_t)qword_102419078, OS_LOG_TYPE_DEFAULT))
  {
    _H0 = fabsl(*(short float *)(a2 + 4));
    __asm { FCVT            S0, H0; float }
    _H1 = fabsl(*(short float *)(a2 + 2));
    __asm { FCVT            S8, H1 }
    double v12 = (float)(atan2f(_S0, _S8) * 57.296);
    _H0 = fabsl(*(short float *)(a2 + 6));
    __asm { FCVT            S0, H0; float }
    float v15 = atan2f(_S0, _S8);
    _H1 = *(_WORD *)(a2 + 8);
    _H2 = *(_WORD *)(a2 + 10);
    __asm
    {
      FCVT            D1, H1
      FCVT            D2, H2
    }
    _H3 = *(_WORD *)(a2 + 12);
    __asm { FCVT            D3, H3 }
    _H4 = *(_WORD *)(a2 + 14);
    __asm { FCVT            D4, H4 }
    _H5 = *(_WORD *)(a2 + 16);
    __asm { FCVT            D5, H5 }
    _H6 = *(_WORD *)(a2 + 18);
    __asm { FCVT            D6, H6 }
    int v28 = *(unsigned __int8 *)(a2 + 1);
    *(_DWORD *)std::string buf = 134351104;
    double v49 = v12;
    __int16 v50 = 2050;
    double v51 = (float)(v15 * 57.296);
    __int16 v52 = 2050;
    uint64_t v53 = _D1;
    __int16 v54 = 2050;
    uint64_t v55 = _D2;
    __int16 v56 = 2050;
    uint64_t v57 = _D3;
    __int16 v58 = 2050;
    uint64_t v59 = _D4;
    __int16 v60 = 2050;
    uint64_t v61 = _D5;
    __int16 v62 = 2050;
    uint64_t v63 = _D6;
    __int16 v64 = 1026;
    int v65 = v28;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[MagicMount][DebugLogging]rollAngle,%{public}f,landscapeAngle,%{public}f,rotationRate,(%{public}f,%{public}f,%{public}f),userAccel,(%{public}f,%{public}f,%{public}f),isStationary,%{public}u", buf, 0x58u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419070 != -1) {
      dispatch_once(&qword_102419070, &stru_1022BCA60);
    }
    _H0 = fabsl(*(short float *)(a2 + 4));
    __asm { FCVT            S0, H0; float }
    _H1 = fabsl(*(short float *)(a2 + 2));
    __asm { FCVT            S8, H1 }
    atan2f(_S0, _S8);
    _H0 = fabsl(*(short float *)(a2 + 6));
    __asm { FCVT            S0, H0; float }
    atan2f(_S0, _S8);
    _H1 = *(_WORD *)(a2 + 8);
    _H2 = *(_WORD *)(a2 + 10);
    __asm
    {
      FCVT            D1, H1
      FCVT            D2, H2
    }
    _H3 = *(_WORD *)(a2 + 12);
    __asm { FCVT            D3, H3 }
    _H4 = *(_WORD *)(a2 + 14);
    __asm { FCVT            D4, H4 }
    _H5 = *(_WORD *)(a2 + 16);
    __asm { FCVT            D5, H5 }
    _H6 = *(_WORD *)(a2 + 18);
    __asm { FCVT            D6, H6 }
    __int16 v47 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSPU::visitMagicMountDebug(const CMMotionCoprocessorReply::MagicMountDebug *)", "%s\n", v47);
    if (v47 != (char *)buf) {
      free(v47);
    }
  }
}

uint64_t sub_100597814(uint64_t a1, long long *a2)
{
  uint64_t v16 = 0;
  double v8 = sub_1001AACF8(a1, *(double *)(a1 + 352));
  long long v4 = a2[5];
  long long v13 = a2[4];
  long long v14 = v4;
  long long v15 = a2[6];
  long long v5 = a2[1];
  long long v9 = *a2;
  long long v10 = v5;
  long long v6 = a2[3];
  long long v11 = a2[2];
  LOBYTE(v16) = *((unsigned char *)a2 + 112);
  long long v12 = v6;
  return sub_1000E01AC(a1, 49, (uint64_t)&v8, 128);
}

uint64_t sub_100597898(uint64_t a1, long long *a2)
{
  return sub_100597814(a1 - 152, a2);
}

uint64_t sub_1005978A0(uint64_t a1, uint64_t a2)
{
  v5[0] = *(double *)(a1 + 352);
  v5[1] = sub_1001AACF8(a1, v5[0]);
  char v6 = *(unsigned char *)(a2 + 1);
  return sub_1000E01AC(a1, 50, (uint64_t)v5, 224);
}

uint64_t sub_100597900(uint64_t a1, uint64_t a2)
{
  return sub_1005978A0(a1 - 152, a2);
}

uint64_t sub_100597908()
{
  return sub_10019BAEC();
}

uint64_t sub_100597914(uint64_t a1, long long *a2)
{
  uint64_t v25 = 0;
  double v11 = sub_1001AACF8(a1, *(double *)(a1 + 352));
  long long v4 = a2[11];
  long long v22 = a2[10];
  long long v23 = v4;
  long long v24 = a2[12];
  long long v5 = a2[7];
  long long v18 = a2[6];
  long long v19 = v5;
  long long v6 = a2[9];
  long long v20 = a2[8];
  long long v21 = v6;
  long long v7 = a2[3];
  long long v14 = a2[2];
  long long v15 = v7;
  long long v8 = a2[5];
  long long v16 = a2[4];
  long long v17 = v8;
  long long v9 = a2[1];
  long long v12 = *a2;
  LOWORD(v25) = *((_WORD *)a2 + 104);
  long long v13 = v9;
  return sub_1000E01AC(a1, 51, (uint64_t)&v11, 224);
}

uint64_t sub_1005979C8(uint64_t a1, long long *a2)
{
  return sub_100597914(a1 - 152, a2);
}

void sub_1005979D0(id a1)
{
  qword_102418FE8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "AOP");
}

uint64_t sub_100597A00(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + _Block_object_dispose(&STACK[0x850], 8) = *(void *)(result + 40);
  return result;
}

void sub_100597A10(id a1)
{
  qword_102419088 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_100597A40(id a1)
{
  qword_1024190A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_100597A74(id a1)
{
  qword_102419118 = (uint64_t)os_log_create("com.apple.locationd.Motion", "SensorRecorder");
}

void sub_100597AA4(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100597AD4(id a1)
{
  qword_1024190F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

void sub_100597B04(id a1)
{
  off_1024190B8 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_100597B34(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100597B64(id a1)
{
  qword_102418FC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Eclipse");
}

void sub_100597B94(id a1)
{
  qword_102419078 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MagicMount");
}

void sub_100597BC4(uint64_t a1, void *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    void v8[2] = 0x4012000000;
    v8[3] = sub_10017792C;
    unsigned char v8[4] = nullsub_52;
    _DWORD v8[5] = "";
    v9[0] = *a2;
    *(void *)((char *)v9 + 5) = *(void *)((char *)a2 + 5);
    if (aBlock) {
      long long v4 = _Block_copy(aBlock);
    }
    else {
      long long v4 = 0;
    }
    long long v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100597D10;
    block[3] = &unk_1022BCA88;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_100597CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100597D10(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 4_Block_object_dispose(&STACK[0x850], 8) = 18;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 13);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

__n128 sub_100597D90(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a2 + 48);
  __n128 result = *(__n128 *)(a2 + 64);
  long long v3 = *(_OWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 96);
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 96) = v4;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

void sub_100597DB8(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 4_Block_object_dispose(&STACK[0x850], 8) = 6;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 66);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_100597E38(uint64_t a1, _OWORD *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    void v8[2] = 0x5012000000;
    v8[3] = sub_100597F84;
    unsigned char v8[4] = nullsub_221;
    _DWORD v8[5] = "";
    v9[0] = *a2;
    *(_OWORD *)((char *)v9 + 13) = *(_OWORD *)((char *)a2 + 13);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    long long v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100597F9C;
    block[3] = &unk_1022BCA88;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_100597F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_100597F84(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  *(_OWORD *)(a1 + 61) = *(_OWORD *)(a2 + 61);
  *(__n128 *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = result;
  return result;
}

void sub_100597F9C(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 4_Block_object_dispose(&STACK[0x850], 8) = 37;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 29);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_10059801C(uint64_t a1, long long *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v10[0] = 0;
    v10[1] = v10;
    _DWORD v10[2] = 0x9012000000;
    v10[3] = sub_1005981C4;
    v10[4] = nullsub_222;
    void v10[5] = "";
    long long v4 = a2[3];
    long long v13 = a2[2];
    long long v14 = v4;
    v15[0] = a2[4];
    *(_OWORD *)((char *)v15 + 13) = *(long long *)((char *)a2 + 77);
    long long v5 = a2[1];
    long long v11 = *a2;
    long long v12 = v5;
    if (aBlock) {
      long long v6 = _Block_copy(aBlock);
    }
    else {
      long long v6 = 0;
    }
    long long v8 = *(NSObject **)a1;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _OWORD v9[2] = sub_1005981EC;
    v9[3] = &unk_1022BCA88;
    void v9[5] = v10;
    void v9[6] = a1;
    void v9[4] = v6;
    dispatch_async(v8, v9);
    _Block_object_dispose(v10, 8);
  }
  else if (aBlock)
  {
    long long v7 = (void (*)(void *, void))*((void *)aBlock + 2);
    v7(aBlock, 0);
  }
}

void sub_1005981AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_1005981C4(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v2;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 96);
  long long v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 125) = *(_OWORD *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 112) = v5;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

void sub_1005981EC(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 4_Block_object_dispose(&STACK[0x850], 8) = 32;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 93);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_10059826C(uint64_t a1, int *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    void v8[2] = 0x3812000000;
    v8[3] = sub_1005983B0;
    unsigned char v8[4] = nullsub_223;
    _DWORD v8[5] = "";
    int v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    long long v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_1005983C0;
    int v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_100598398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1005983B0(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 4_Block_object_dispose(&STACK[0x850], 8) = *(_DWORD *)(a2 + 48);
  return result;
}

void sub_1005983C0(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 4_Block_object_dispose(&STACK[0x850], 8) = 46;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 4);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_100598440(uint64_t a1, _DWORD *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    void v8[2] = 0x3812000000;
    v8[3] = sub_10059858C;
    unsigned char v8[4] = nullsub_224;
    _DWORD v8[5] = "";
    v9[0] = *a2;
    *(_DWORD *)((char *)v9 + 3) = *(_DWORD *)((char *)a2 + 3);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    long long v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_1005985A4;
    int v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_100598574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10059858C(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(result + 51) = *(_DWORD *)(a2 + 51);
  *(_DWORD *)(result + 4_Block_object_dispose(&STACK[0x850], 8) = v2;
  return result;
}

void sub_1005985A4(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 4_Block_object_dispose(&STACK[0x850], 8) = 71;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 7);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_100598624(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    void v8[2] = 0x3812000000;
    v8[3] = sub_100598768;
    unsigned char v8[4] = nullsub_225;
    _DWORD v8[5] = "";
    __int16 v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    long long v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_100598778;
    int v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_100598750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100598768(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 4_Block_object_dispose(&STACK[0x850], 8) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_100598778(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 4_Block_object_dispose(&STACK[0x850], 8) = 72;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 2);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1005987F8(uint64_t a1, _DWORD *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    void v8[2] = 0x3812000000;
    v8[3] = sub_100598944;
    unsigned char v8[4] = nullsub_226;
    _DWORD v8[5] = "";
    v9[0] = *a2;
    *(_DWORD *)((char *)v9 + 3) = *(_DWORD *)((char *)a2 + 3);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    long long v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_10059895C;
    int v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_10059892C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100598944(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(result + 51) = *(_DWORD *)(a2 + 51);
  *(_DWORD *)(result + 4_Block_object_dispose(&STACK[0x850], 8) = v2;
  return result;
}

void sub_10059895C(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 4_Block_object_dispose(&STACK[0x850], 8) = 74;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 7);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1005989DC(uint64_t a1, uint64_t a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    void v8[2] = 0x4012000000;
    v8[3] = sub_100598B28;
    unsigned char v8[4] = nullsub_227;
    _DWORD v8[5] = "";
    void v8[6] = *(void *)a2;
    __int16 v9 = *(_WORD *)(a2 + 8);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    long long v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100598B40;
    block[3] = &unk_1022BCA88;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_100598B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100598B28(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(_WORD *)(result + 56) = *(_WORD *)(a2 + 56);
  *(void *)(result + 4_Block_object_dispose(&STACK[0x850], 8) = v2;
  return result;
}

void sub_100598B40(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 4_Block_object_dispose(&STACK[0x850], 8) = 75;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 10);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_100598BC0(uint64_t a1, int *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    void v8[2] = 0x3812000000;
    v8[3] = sub_100598D0C;
    unsigned char v8[4] = nullsub_228;
    _DWORD v8[5] = "";
    int v9 = *a2;
    __int16 v10 = *((_WORD *)a2 + 2);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    long long v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_100598D24;
    int v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_100598CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100598D0C(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(result + 52) = *(_WORD *)(a2 + 52);
  *(_DWORD *)(result + 4_Block_object_dispose(&STACK[0x850], 8) = v2;
  return result;
}

void sub_100598D24(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 4_Block_object_dispose(&STACK[0x850], 8) = 81;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 6);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

uint64_t sub_100598DA4()
{
  sub_100134750(qword_10247B430, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247B430, (void *)&_mh_execute_header);
}

void sub_100598FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void sub_1005993AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005993EC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
    BOOL v3 = v2;
    if (v2) {
      atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CLConnection::sendMessage();
    if (v3) {
      sub_1000DB0A0(v3);
    }
  }
}

void sub_100599444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005997B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_100599C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

id sub_100599C7C(uint64_t a1)
{
  id result = [*(id *)(a1 + 40) poweredOn];
  if (result && *(unsigned char *)(a1 + 57))
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022BCAF8);
    }
    BOOL v3 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = [*(id *)(a1 + 64) clientname];
      v5[0] = 68289282;
      v5[1] = 0;
      __int16 v6 = 2082;
      long long v7 = "";
      __int16 v8 = 2114;
      id v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #client got scanner powered on status, starting BTFindingScan\", \"client\":%{public, location:escape_only}@}", (uint8_t *)v5, 0x1Cu);
    }
    id result = [*(id *)(a1 + 40) startBTFindingScan];
    *(unsigned char *)(a1 + 57) = 0;
  }
  return result;
}

void sub_100599DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100599E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100599F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100599F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059A018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059A0A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059A1F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059A2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059A39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059A4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059A5F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059A71C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059A800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059A95C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059AA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059ABCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059AD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059AE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059AEAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059AF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059AFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059B044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059B0CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059B214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059B364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059B4B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059B5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059B6E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059B858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059B960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059BAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059BC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059BD08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059BE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059BF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059C078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059C1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059C308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059C458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059C598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059C6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059C740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059C7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059C90C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059CA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059CB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059CC70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059CD88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059CEA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059CFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059D0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059D238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059D378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059D4B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059D5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059D738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059D888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059D9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059DB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059DC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059DD88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059DEF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059E018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059E13C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059E25C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059E3A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059E4E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059E620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059E770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059E8C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059EA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059EB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059EC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059EDE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059EF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059F070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059F148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10059F198(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)a1 = off_1022BCAB8;
  *(_OWORD *)(a1 + 24) = 0u;
  long long v5 = (void *)(a1 + 24);
  *(void *)(a1 + 64) = 0;
  __int16 v6 = (void *)(a1 + 64);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_WORD *)(a1 + 56) = 0;
  *(void *)(a1 + 72) = 0;
  CLConnection::setDefaultMessageHandler();
  CLConnection::setInterruptionHandler();
  CLConnection::setDisconnectionHandler();
  *__int16 v6 = [[CLDurianClientAdapter alloc] initWithClient:a1];
  id v7 = [objc_msgSend(a3, "vendor") proxyForService:@"CLDurianService"];
  *long long v5 = v7;
  [v7 registerDelegate:*v6 inSilo:[a3 silo]];
  id v8 = [[[a3 vendor] proxyForService:@"CLTrackingAvoidanceService"];
  *(void *)(a1 + 72) = v8;
  [v8 registerDelegate:*(void *)(a1 + 64) inSilo:[a3 silo]];
  return a1;
}

void sub_10059F398(_Unwind_Exception *a1)
{
  sub_100426880(v1);
  _Unwind_Resume(a1);
}

void sub_10059F3AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  long long v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_10059F420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10059F438(uint64_t a1)
{
}

void sub_10059F440(uint64_t a1)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1022BCAF8);
  }
  uint64_t v2 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 64) clientname];
    v4[0] = 68289282;
    v4[1] = 0;
    __int16 v5 = 2082;
    __int16 v6 = "";
    __int16 v7 = 2114;
    id v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #client teardown\", \"name\":%{public, location:escape_only}@}", (uint8_t *)v4, 0x1Cu);
  }
  [*(id *)(a1 + 24) teardownClient:CLISP_ME_TOKEN];
  if (*(unsigned char *)(a1 + 56)) {
    sub_1005A3D4C(a1);
  }
  if (*(void *)(a1 + 32)) {
    sub_1005A521C(a1);
  }
}

void sub_10059F568(uint64_t a1)
{
}

void *sub_10059F574(uint64_t a1)
{
  *(void *)a1 = off_1022BCAB8;

  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    [v2 stopMonitoringAvengerAdvertisementsForClient:CLISP_ME_TOKEN];

    *(void *)(a1 + 32) = 0;
  }

  *(void *)(a1 + 72) = 0;

  return sub_100426880((void *)a1);
}

void sub_10059F614(uint64_t a1)
{
  sub_10059F574(a1);

  operator delete();
}

void *sub_10059F64C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247B470, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247B470))
  {
    sub_100134750(v2, "DurianManagement/Connect");
    void v2[3] = sub_1005A0830;
    v2[4] = 0;
    sub_100134750(v3, "DurianManagement/Disconnect");
    void v3[3] = sub_1005A08C8;
    v3[4] = 0;
    sub_100134750(v4, "DurianManagement/FetchConnectionState");
    void v4[3] = sub_1005A0960;
    void v4[4] = 0;
    sub_100134750(v5, "DurianManagement/StartSoundSequence");
    void v5[3] = sub_1005A09F8;
    void v5[4] = 0;
    sub_100134750(v6, "DurianManagement/StopSound");
    void v6[3] = sub_1005A0AC0;
    v6[4] = 0;
    sub_100134750(v7, "DurianManagement/SetKeyRollInterval");
    int v7[3] = sub_1005A0B58;
    v7[4] = 0;
    sub_100134750(v8, "DurianManagement/FetchBatteryStatus");
    v8[3] = sub_1005A0C14;
    unsigned char v8[4] = 0;
    sub_100134750(v9, "DurianManagement/StartEventCounter");
    v9[3] = sub_1005A0CAC;
    void v9[4] = 0;
    sub_100134750(v10, "DurianManagement/StopEventCounter");
    v10[3] = sub_1005A0D54;
    v10[4] = 0;
    sub_100134750(v11, "DurianManagement/SetBatteryStatus");
    v11[3] = sub_1005A0DFC;
    v11[4] = 0;
    sub_100134750(v12, "DurianManagement/GetMultiStatus");
    v12[3] = sub_1005A0EC8;
    void v12[4] = 0;
    sub_100134750(v13, "DurianManagement/GetMultiPartStatus");
    void v13[3] = sub_1005A0F60;
    _DWORD v13[4] = 0;
    sub_100134750(v14, "DurianManagement/DumpLogs");
    void v14[3] = sub_1005A0FF8;
    v14[4] = 0;
    sub_100134750(v15, "DurianManagement/InitRanging");
    void v15[3] = sub_1005A10B4;
    v15[4] = 0;
    sub_100134750(v16, "DurianManagement/DeinitRanging");
    v16[3] = sub_1005A116C;
    v16[4] = 0;
    sub_100134750(v17, "DurianManagement/ConfigureRanging");
    _OWORD v17[3] = sub_1005A1214;
    v17[4] = 0;
    sub_100134750(v18, "DurianManagement/PrepareRanging");
    long long v18[3] = sub_1005A1384;
    v18[4] = 0;
    sub_100134750(v19, "DurianManagement/StartRanging");
    void v19[3] = sub_1005A142C;
    v19[4] = 0;
    sub_100134750(v20, "DurianManagement/StopRanging");
    void v20[3] = sub_1005A14FC;
    _DWORD v20[4] = 0;
    sub_100134750(v21, "DurianManagement/InduceCrash");
    v21[3] = sub_1005A15A4;
    _DWORD v21[4] = 0;
    sub_100134750(v22, "DurianManagement/Unpair");
    v22[3] = sub_1005A163C;
    _DWORD v22[4] = 0;
    sub_100134750(v23, "DurianManagement/SetTagType");
    v23[3] = sub_1005A172C;
    v23[4] = 0;
    sub_100134750(v24, "DurianManagement/SetObfuscatedIdentifier");
    v24[3] = sub_1005A17E8;
    v24[4] = 0;
    sub_100134750(v25, "DurianManagement/SetNearOwnerTimeout");
    void v25[3] = sub_1005A18B0;
    v25[4] = 0;
    sub_100134750(v26, "DurianManagement/FetchPersonalizationInformation");
    long long v26[3] = sub_1005A197C;
    v26[4] = 0;
    sub_100134750(v27, "DurianManagement/UpdateFirmware");
    unsigned __int8 v27[3] = sub_1005A1A14;
    void v27[4] = 0;
    sub_100134750(v28, "DurianManagement/AbortFirmwareUpdate");
    unsigned __int8 v28[3] = sub_1005A1ADC;
    void v28[4] = 0;
    sub_100134750(v29, "DurianManagement/FetchFirmwareVersion");
    unsigned __int8 v29[3] = sub_1005A1B74;
    v29[4] = 0;
    sub_100134750(v30, "DurianManagement/FetchUserStats");
    v30[3] = sub_1005A1C10;
    v30[4] = 0;
    sub_100134750(v31, "DurianManagement/StartUnauthorizedSound");
    v31[3] = sub_1005A1CD4;
    v31[4] = 0;
    sub_100134750(v32, "DurianManagement/StopUnauthorizedSound");
    v32[3] = sub_1005A1DB4;
    v32[4] = 0;
    sub_100134750(v33, "DurianManagement/SetWildConfiguration");
    v33[3] = sub_1005A1E4C;
    void v33[4] = 0;
    sub_100134750(v34, "DurianManagement/RollWildKey");
    v34[3] = sub_1005A1F14;
    _DWORD v34[4] = 0;
    sub_100134750(v35, "DurianManagement/SetAccelerometerSlopeMode");
    v35[3] = sub_1005A1FAC;
    v35[4] = 0;
    sub_100134750(v36, "DurianManagement/SetAccelerometerOrientationMode");
    void v36[3] = sub_1005A2074;
    v36[4] = 0;
    sub_100134750(v37, "DurianManagement/GetAccelerometerSlopeModeConfiguration");
    v37[3] = sub_1005A213C;
    v37[4] = 0;
    sub_100134750(v38, "DurianManagement/GetAccelerometerOrientationModeConfiguration");
    v38[3] = sub_1005A21D4;
    v38[4] = 0;
    sub_100134750(v39, "DurianManagement/GetAccelerometerMode");
    v39[3] = sub_1005A226C;
    v39[4] = 0;
    sub_100134750(v40, "DurianManagement/SetUnauthorizedPlaySoundRateLimit");
    v40[3] = sub_1005A2304;
    v40[4] = 0;
    sub_100134750(v41, "DurianManagement/ScanForNearOwner");
    void v41[3] = sub_1005A23C0;
    v41[4] = 0;
    sub_100134750(v42, "DurianManagement/ScanForHELE");
    v42[3] = sub_1005A2448;
    v42[4] = 0;
    sub_100134750(v43, "DurianManagement/ScanForNearbyDevicesLong");
    v43[3] = sub_1005A2598;
    v43[4] = 0;
    sub_100134750(v44, "DurianManagement/StopScanForNearbyDevicesLong");
    v44[3] = sub_1005A26E8;
    void v44[4] = 0;
    sub_100134750(v45, "DurianManagement/FetchTxPower");
    v45[3] = sub_1005A2908;
    void v45[4] = 0;
    sub_100134750(v46, "DurianManagement/StartAggressiveAdvertising");
    v46[3] = sub_1005A29CC;
    void v46[4] = 0;
    sub_100134750(v47, "DurianManagement/StopAggressiveAdvertising");
    v47[3] = sub_1005A2A8C;
    v47[4] = 0;
    sub_100134750(v48, "DurianManagement/StartUnauthorizedAggressiveAdvertising");
    v48[3] = sub_1005A2B24;
    v48[4] = 0;
    sub_100134750(v49, "DurianManagement/SetHawkeyeTestMode");
    v49[3] = sub_1005A2BBC;
    void v49[4] = 0;
    sub_100134750(v50, "DurianManagement/SetHawkeyeUTMotionConfig");
    v50[3] = sub_1005A2C8C;
    void v50[4] = 0;
    sub_100134750(v51, "DurianManagement/FetchHawkeyeAISProductData");
    v51[3] = sub_1005A2D8C;
    v51[4] = 0;
    sub_100134750(v52, "DurianManagement/FetchHawkeyeAISManufacturerName");
    v52[3] = sub_1005A2E24;
    v52[4] = 0;
    sub_100134750(v53, "DurianManagement/FetchHawkeyeAISModelName");
    v53[3] = sub_1005A2EBC;
    v53[4] = 0;
    sub_100134750(v54, "DurianManagement/FetchHawkeyeAISModelColorCode");
    v54[3] = sub_1005A2F54;
    v54[4] = 0;
    sub_100134750(v55, "DurianManagement/FetchHawkeyeAISAccessoryCategory");
    v55[3] = sub_1005A2FEC;
    v55[4] = 0;
    sub_100134750(v56, "DurianManagement/FetchHawkeyeAISAccessoryCapabilities");
    v56[3] = sub_1005A3084;
    v56[4] = 0;
    sub_100134750(v57, "DurianManagement/FetchHawkeyeAISFindMyVersion");
    _OWORD v57[3] = sub_1005A311C;
    v57[4] = 0;
    sub_100134750(v58, "DurianManagement/FetchHawkeyeAISBatteryType");
    v58[3] = sub_1005A31B4;
    v58[4] = 0;
    sub_100134750(v59, "DurianManagement/FetchHawkeyeSerialNumber");
    v59[3] = sub_1005A324C;
    v59[4] = 0;
    sub_100134750(v60, "DurianManagement/FetchHawkeyeCurrentPrimaryKey");
    _OWORD v60[3] = sub_1005A32E4;
    v60[4] = 0;
    sub_100134750(v61, "DurianManagement/FetchHawkeyeiCloudIdentifier");
    v61[3] = sub_1005A337C;
    v61[4] = 0;
    sub_100134750(v62, "DurianManagement/UseLocalFirmwareAssetFromUrl");
    v62[3] = sub_1005A3414;
    v62[4] = 0;
    sub_100134750(v63, "DurianManagement/UseDefaultFirmwareAssetSource");
    v63[3] = sub_1005A363C;
    v63[4] = 0;
    sub_100134750(v64, "DurianManagement/FetchWhetherLocalFirmwareAssetIsInUse");
    v64[3] = sub_1005A3814;
    v64[4] = 0;
    sub_100134750(v65, "DurianManagement/StartMonitoringForAvengerAdvertisementsForBTFinding");
    v65[3] = sub_1005A39EC;
    v65[4] = 0;
    sub_100134750(v66, "DurianManagement/StopMonitoringForAvengerAdvertisementsForBTFinding");
    v66[3] = sub_1005A3D4C;
    v66[4] = 0;
    sub_100134750(v67, "DurianManagement/PerformAggressiveScanForSeparationAlerts");
    v67[3] = sub_1005A3F6C;
    v67[4] = 0;
    sub_100134750(v68, "DurianManagement/PerformLongAggressiveScanForSeparationAlerts");
    v68[3] = sub_1005A4174;
    v68[4] = 0;
    sub_100134750(v69, "DurianManagement/StopLongAggressiveScanForSeparationAlerts");
    v69[3] = sub_1005A437C;
    v69[4] = 0;
    sub_100134750(v70, "DurianManagement/PerformAggressiveScanForTrackingAvoidance");
    v70[3] = sub_1005A4584;
    v70[4] = 0;
    sub_100134750(v71, "DurianManagement/PerformHELEScanForTrackingAvoidance");
    v71[3] = sub_1005A458C;
    v71[4] = 0;
    sub_100134750(v72, "DurianManagement/PerformAggressiveScanForDurianService");
    v72[3] = sub_1005A4594;
    v72[4] = 0;
    sub_100134750(v73, "DurianManagement/FetchStatusOfUTEnablementRequirements");
    v73[3] = sub_1005A459C;
    v73[4] = 0;
    sub_100134750(v74, "DurianManagement/FetchAISForTAUnknownBeacon");
    v74[3] = sub_1005A45B0;
    v74[4] = 0;
    sub_100134750(v75, "DurianManagement/StageTADetection");
    v75[3] = sub_1005A472C;
    v75[4] = 0;
    sub_100134750(v76, "DurianManagement/ForceSurfaceStagedDetections");
    v76[3] = sub_1005A486C;
    v76[4] = 0;
    sub_100134750(v77, "DurianManagement/FetchAISProductData");
    v77[3] = sub_1005A49AC;
    v77[4] = 0;
    sub_100134750(v78, "DurianManagement/FetchAISManufacturerName");
    v78[3] = sub_1005A4A70;
    v78[4] = 0;
    sub_100134750(v79, "DurianManagement/FetchAISModelName");
    v79[3] = sub_1005A4B34;
    v79[4] = 0;
    sub_100134750(v80, "DurianManagement/FetchAISProtocolImplementation");
    v80[3] = sub_1005A4BF8;
    v80[4] = 0;
    sub_100134750(v81, "DurianManagement/FetchAISAccessoryCapabilities");
    v81[3] = sub_1005A4CBC;
    v81[4] = 0;
    sub_100134750(v82, "DurianManagement/FetchAISAccessoryCategory");
    v82[3] = sub_1005A4D80;
    v82[4] = 0;
    sub_100134750(v83, "DurianManagement/FetchAISNetworkID");
    v83[3] = sub_1005A4E44;
    v83[4] = 0;
    sub_100134750(v84, "DurianManagement/FetchAISFirmwareVersion");
    v84[3] = sub_1005A4F08;
    v84[4] = 0;
    sub_100134750(v85, "DurianManagement/FetchAISBatteryType");
    v85[3] = sub_1005A4FCC;
    v85[4] = 0;
    sub_100134750(v86, "DurianManagement/FetchAISBatteryLevel");
    v86[3] = sub_1005A5090;
    v86[4] = 0;
    sub_100134750(v87, "DurianManagement/FetchAISSerialNumber");
    v87[3] = sub_1005A5154;
    v87[4] = 0;
    sub_1005A5B68((uint64_t)&unk_10247B448, (unsigned __int8 *)v2, 86);
    uint64_t v1 = 430;
    do
    {
      if (*((char *)&v2[v1 - 2] - 1) < 0) {
        operator delete((void *)v2[v1 - 5]);
      }
      v1 -= 5;
    }
    while (v1 * 8);
    __cxa_atexit((void (*)(void *))sub_1005A5218, &unk_10247B448, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10247B470);
  }
  return &unk_10247B448;
}

void sub_1005A0678(_Unwind_Exception *a1)
{
  uint64_t v3 = 3440;
  while (1)
  {
    if (*(char *)(v1 + v3 - 17) < 0) {
      operator delete(*(void **)(v1 + v3 - 40));
    }
    v3 -= 40;
    if (!v3)
    {
      __cxa_guard_abort(&qword_10247B470);
      _Unwind_Resume(a1);
    }
  }
}

void sub_1005A0828()
{
}

id sub_1005A0830(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  __int16 v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 connectToTag:v5 forClient:v7];
}

id sub_1005A08C8(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  __int16 v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 disconnectFromTag:v5 forClient:v7];
}

id sub_1005A0960(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  __int16 v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 fetchConnectionStateForTag:v5 forClient:v7];
}

id sub_1005A09F8(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_opt_class();
  id v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
  id v7 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v8 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianSoundSequence"];
  id v9 = *(void **)(a1 + 24);
  uint64_t v10 = CLISP_ME_TOKEN;

  return _[v9 playSoundSequence:v8 onTag:v7 forClient:v10];
}

id sub_1005A0AC0(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  __int16 v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 stopPlayingSoundOnTag:v5 forClient:v7];
}

id sub_1005A0B58(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v4);
  id v6 = [[DictionaryOfClasses objectForKeyedSubscript:@"CLDurianKeyRollInterval"] intValue];
  id v7 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v8 = *(void **)(a1 + 24);
  uint64_t v9 = CLISP_ME_TOKEN;

  return _[v8 setKeyRollInterval:v6 onTag:v7 forClient:v9];
}

id sub_1005A0C14(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 fetchBatteryStateFromTag:v5 forClient:v7];
}

id sub_1005A0CAC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_opt_class();
  id v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(), 0);
  id v6 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v5) objectForKeyedSubscript:@"CLDurianIdentifier"];
  uint64_t v7 = *(void **)(a1 + 24);
  uint64_t v8 = CLISP_ME_TOKEN;

  return _[v7 startEventCounterOnTag:v6 forClient:v8];
}

id sub_1005A0D54(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_opt_class();
  id v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(), 0);
  id v6 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v5) objectForKeyedSubscript:@"CLDurianIdentifier"];
  uint64_t v7 = *(void **)(a1 + 24);
  uint64_t v8 = CLISP_ME_TOKEN;

  return _[v7 stopEventCounterOnTag:v6 forClient:v8];
}

id sub_1005A0DFC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_opt_class();
  id v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
  id v7 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianIdentifier"];
  uint64_t v8 = [[DictionaryOfClasses objectForKeyedSubscript:@"CLDurianBatteryStatus"] unsignedIntValue];
  uint64_t v9 = *(void **)(a1 + 24);
  uint64_t v10 = CLISP_ME_TOKEN;

  return _[v9 setBatteryStatus:v8 onTag:v7 forClient:v10];
}

id sub_1005A0EC8(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 getMultiStatusForTag:v5 forClient:v7];
}

id sub_1005A0F60(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 getGroupStatusForTag:v5 forClient:v7];
}

id sub_1005A0FF8(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v4);
  id v6 = [[DictionaryOfClasses objectForKeyedSubscript:@"CLDurianLogType"] unsignedIntegerValue];
  id v7 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianIdentifier"];
  uint64_t v8 = *(void **)(a1 + 24);
  uint64_t v9 = CLISP_ME_TOKEN;

  return _[v8 dumpLogsOfType:v6 forTag:v7 forClient:v9];
}

id sub_1005A10B4(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v4);
  id v6 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v7 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianRangingMacAddress"];
  uint64_t v8 = *(void **)(a1 + 24);
  uint64_t v9 = CLISP_ME_TOKEN;

  return _[v8 initRangingWithMacAddress:v7 onTag:v6 forClient:v9];
}

id sub_1005A116C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_opt_class();
  id v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(), 0);
  id v6 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v5) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v7 = *(void **)(a1 + 24);
  uint64_t v8 = CLISP_ME_TOKEN;

  return [v7 deinitRangingOnTag:v6 forClient:v8];
}

id sub_1005A1214(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_opt_class();
  id v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
  id v7 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v8 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianRangingMacAddress"];
  unsigned __int8 v9 = [[DictionaryOfClasses objectForKeyedSubscript:@"CLDurianRangingCountryCode"] intValue];
  unsigned __int8 v10 = [[DictionaryOfClasses objectForKeyedSubscript:@"CLDurianRangingUwbChannel"] intValue];
  unsigned __int8 v11 = [[DictionaryOfClasses objectForKeyedSubscript:@"CLDurianRangingAcqPreamble"] intValue];
  unsigned __int8 v12 = [[DictionaryOfClasses objectForKeyedSubscript:@"CLDurianRangingTrackingPreamble"] intValue];
  unsigned __int16 v13 = (unsigned __int16)[DictionaryOfClasses objectForKeyedSubscript:@"CLDurianRangingInterval"] intValue];
  return [*(id *)(a1 + 24) configureRangingWithMacAddress:v8 countryCode:v9 uwbChannel:v10 acqPreamble:v11 trackingPreamble:v12 interval:v13 onTag:v7 forClient:CLISP_ME_TOKEN];
}

id sub_1005A1384(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_opt_class();
  id v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(), 0);
  id v6 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v5) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v7 = *(void **)(a1 + 24);
  uint64_t v8 = CLISP_ME_TOKEN;

  return _[v7 prepareRangingOnTag:v6 forClient:v8];
}

id sub_1005A142C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_opt_class();
  id v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
  id v7 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v8 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianRangingTargetEventCounter"];
  unsigned __int8 v9 = *(void **)(a1 + 24);
  unsigned __int16 v10 = (unsigned __int16)[v8 unsignedIntValue];
  uint64_t v11 = CLISP_ME_TOKEN;

  return _[v9 startRangingWithTargetEventCounter:v10 onTag:v7 forClient:v11];
}

id sub_1005A14FC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_opt_class();
  id v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(), 0);
  id v6 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v5) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v7 = *(void **)(a1 + 24);
  uint64_t v8 = CLISP_ME_TOKEN;

  return _[v7 stopRangingOnTag:v6 forClient:v8];
}

id sub_1005A15A4(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 induceCrashOnTag:v5 forClient:v7];
}

id sub_1005A163C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v4);
  id v6 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianIdentifier"];
  uint64_t v7 = *(void **)(a1 + 24);
  if (v6)
  {
    id v8 = v6;
    uint64_t v9 = CLISP_ME_TOKEN;
    unsigned __int16 v10 = *(void **)(a1 + 24);
    return _[v10 unpairFromTag:v8 forClient:v9];
  }
  else
  {
    id v11 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianMacAddress"];
    uint64_t v12 = CLISP_ME_TOKEN;
    return _[v7 unpairFromTagWithAddress:v11 forClient:v12];
  }
}

id sub_1005A172C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v4);
  id v6 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v7 = [[DictionaryOfClasses objectForKeyedSubscript:@"CLDurianTagType"] unsignedCharValue];
  id v8 = *(void **)(a1 + 24);
  uint64_t v9 = CLISP_ME_TOKEN;

  return _[v8 setTagType:v7 onTag:v6 forClient:v9];
}

id sub_1005A17E8(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_opt_class();
  id v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
  id v7 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v8 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianObfuscatedIdentifier"];
  uint64_t v9 = *(void **)(a1 + 24);
  uint64_t v10 = CLISP_ME_TOKEN;

  return _[v9 setObfuscatedIdentifier:v8 onTag:v7 forClient:v10];
}

id sub_1005A18B0(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_opt_class();
  id v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
  id v7 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v8 = [[DictionaryOfClasses objectForKeyedSubscript:@"CLDurianNearOwnerTimeout"] unsignedShortValue];
  uint64_t v9 = *(void **)(a1 + 24);
  uint64_t v10 = CLISP_ME_TOKEN;

  return _[v9 setNearOwnerTimeout:v8 onTag:v7 forClient:v10];
}

id sub_1005A197C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 getPersonalizationInfoForDevice:v5 forClient:v7];
}

id sub_1005A1A14(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_opt_class();
  id v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
  id v7 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v8 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianFirmwareAssetURL"];
  uint64_t v9 = *(void **)(a1 + 24);
  uint64_t v10 = CLISP_ME_TOKEN;

  return _[v9 updateFirmwareForDevice:v7 withAssetURL:v8 forClient:v10];
}

id sub_1005A1ADC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 abortFirmwareUpdateForDevice:v5 forClient:v7];
}

id sub_1005A1B74(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 fetchFirmwareVersionFromTag:v5 forClient:v7 includeCrashLogs:0];
}

id sub_1005A1C10(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v4);
  id v6 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v7 = [[DictionaryOfClasses objectForKeyedSubscript:@"CLDurianUserStatsPersistence"] BOOLValue];
  [*(id *)(a1 + 24) fetchUserStatsWithPersistence:v7 fromTag:v6 forClient:CLISP_ME_TOKEN];
  id v8 = *(void **)(a1 + 24);

  return [v8 submitFirmwareVersionsForOwnedTags];
}

id sub_1005A1CD4(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_opt_class();
  id v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
  id v7 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v8 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianSoundSequence"];
  if (!v8) {
    id v8 = +[CLFindMyAccessorySoundSequence defaultSequence];
  }
  uint64_t v9 = *(void **)(a1 + 24);
  uint64_t v10 = CLISP_ME_TOKEN;

  return _[v9 playUnauthorizedSoundSequence:v8 onTag:v7 forClient:v10];
}

id sub_1005A1DB4(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 stopPlayingUnauthorizedSoundOnTag:v5 forClient:v7];
}

id sub_1005A1E4C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_opt_class();
  id v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
  id v7 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v8 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianWildConfig"];
  uint64_t v9 = *(void **)(a1 + 24);
  uint64_t v10 = CLISP_ME_TOKEN;

  return _[v9 setWildModeConfiguration:v8 onTag:v7 forClient:v10];
}

id sub_1005A1F14(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 rollWildKeyOnTag:v5 forClient:v7];
}

id sub_1005A1FAC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_opt_class();
  id v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
  id v7 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v8 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianAccelerometerSlopeModeConfigurationKey"];
  uint64_t v9 = *(void **)(a1 + 24);
  uint64_t v10 = CLISP_ME_TOKEN;

  return _[v9 setAccelerometerSlopeModeConfiguration:v8 onTag:v7 forClient:v10];
}

id sub_1005A2074(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_opt_class();
  id v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
  id v7 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v8 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianAccelerometerOrientationModeConfigurationKey"];
  uint64_t v9 = *(void **)(a1 + 24);
  uint64_t v10 = CLISP_ME_TOKEN;

  return _[v9 setAccelerometerOrientationModeConfiguration:v8 onTag:v7 forClient:v10];
}

id sub_1005A213C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 fetchAccelerometerSlopeModeConfigurationOnTag:v5 forClient:v7];
}

id sub_1005A21D4(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 fetchAccelerometerOrientationModeConfigurationOnTag:v5 forClient:v7];
}

id sub_1005A226C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 fetchAccelerometerModeOnTag:v5 forClient:v7];
}

id sub_1005A2304(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v4);
  id v6 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v7 = [[DictionaryOfClasses objectForKeyedSubscript:@"CLDurianSetUnauthorizedPlaySoundRateLimitKey"] BOOLValue];
  id v8 = *(void **)(a1 + 24);
  uint64_t v9 = CLISP_ME_TOKEN;

  return _[v8 setUnauthorizedPlaySoundRateLimit:v7 onTag:v6 forClient:v9];
}

void sub_1005A23C0(CLAvengerScannerClient *a1)
{
  if (_os_feature_enabled_impl())
  {
    queue = a1->_queue;
    [(OS_dispatch_queue *)queue scanForNearbyOwner];
  }
  else
  {
    sub_1005A5830(a1);
    [(CBCentralManager *)a1->_centralManager performTemporaryAggressiveScanForFindMyAccessoryManager:CLISP_ME_TOKEN];
    sub_1005A521C((uint64_t)a1);
  }
}

void sub_1005A2448(CLAvengerScannerClient *a1)
{
  sub_1005A5830(a1);
  if (_os_feature_enabled_impl())
  {
    dispatch_time_t v2 = dispatch_time(0, 5000000000);
    uint64_t v3 = [[-[CLAvengerScannerClientDelegateProtocol silo](a1->_delegate, "silo") queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1005A5AAC;
    block[3] = &unk_1022A3020;
    block[4] = a1;
    dispatch_after(v2, v3, block);
  }
  else
  {
    [(CBCentralManager *)a1->_centralManager performTemporaryHawkeyeLowEnergyScan:CLISP_ME_TOKEN];
  }
  dispatch_time_t v4 = dispatch_time(0, 125000000000);
  id v5 = [[-[CLAvengerScannerClientDelegateProtocol silo](a1->_delegate, "silo") queue];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  unsigned char v6[2] = sub_1005A5AB8;
  void v6[3] = &unk_1022A3020;
  v6[4] = a1;
  dispatch_after(v4, v5, v6);
}

void sub_1005A2598(CLAvengerScannerClient *a1)
{
  sub_1005A5830(a1);
  if (_os_feature_enabled_impl())
  {
    dispatch_time_t v2 = dispatch_time(0, 5000000000);
    uint64_t v3 = [[-[CLAvengerScannerClientDelegateProtocol silo](a1->_delegate, "silo") queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1005A5AC0;
    block[3] = &unk_1022A3020;
    block[4] = a1;
    dispatch_after(v2, v3, block);
  }
  else
  {
    [(CBCentralManager *)a1->_centralManager performTemporaryLongAggressiveScan:CLISP_ME_TOKEN];
  }
  dispatch_time_t v4 = dispatch_time(0, 125000000000);
  id v5 = [[-[CLAvengerScannerClientDelegateProtocol silo](a1->_delegate, "silo") queue];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  unsigned char v6[2] = sub_1005A5ACC;
  void v6[3] = &unk_1022A3020;
  v6[4] = a1;
  dispatch_after(v4, v5, v6);
}

void sub_1005A26E8(uint64_t a1)
{
  if (_os_feature_enabled_impl())
  {
    dispatch_time_t v2 = *(void **)(a1 + 40);
    if (v2)
    {
      [v2 stopTemporaryLongAggressiveScan];
      return;
    }
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022BCAF8);
    }
    id v5 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
    {
LABEL_17:
      id v6 = [*(id *)(a1 + 64) clientname];
      v7[0] = 68289282;
      v7[1] = 0;
      __int16 v8 = 2082;
      uint64_t v9 = "";
      __int16 v10 = 2114;
      id v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #client no avenger scanner to stop\", \"name\":%{public, location:escape_only}@}", (uint8_t *)v7, 0x1Cu);
    }
  }
  else
  {
    uint64_t v3 = *(void **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = CLISP_ME_TOKEN;
      [v3 terminateTemporaryLongAggressiveScan:v4];
    }
    else
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1022BCAF8);
      }
      id v5 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_17;
      }
    }
  }
}

id sub_1005A2908(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v4);
  id v6 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v7 = [DictionaryOfClasses objectForKeyedSubscript:@"CLHawkeyeFetchTxPowerOwnerKey"];
  __int16 v8 = *(void **)(a1 + 24);
  uint64_t v9 = CLISP_ME_TOKEN;
  id v10 = [v7 BOOLValue];

  return _[v8 fetchTxPowerForDevice:v6 forClient:v9 asOwner:v10];
}

id sub_1005A29CC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v4);
  id v6 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v7 = [DictionaryOfClasses objectForKeyedSubscript:@"CLHawkeyeAggressiveAdvertisementTimeoutKey"];
  __int16 v8 = *(void **)(a1 + 24);
  id v9 = [v7 intValue];
  uint64_t v10 = CLISP_ME_TOKEN;

  return _[v8 startAggressiveAdvertisingForDevice:v6 withTimeout:v9 forClient:v10];
}

id sub_1005A2A8C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 stopAggressiveAdvertisingForDevice:v5 forClient:v7];
}

id sub_1005A2B24(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 startUnauthorizedAggressiveAdvertisingForDevice:v5 forClient:v7];
}

id sub_1005A2BBC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_opt_class();
  id v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
  id v7 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v8 = [DictionaryOfClasses objectForKeyedSubscript:@"CLHawkeyeTestModeKey"];
  id v9 = *(void **)(a1 + 24);
  id v10 = [v8 intValue];
  uint64_t v11 = CLISP_ME_TOKEN;

  return _[v9 setHawkeyeTestMode:v10 onTag:v7 forClient:v11];
}

id sub_1005A2C8C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_opt_class();
  id v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
  id v7 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v8 = [DictionaryOfClasses objectForKeyedSubscript:@"CLHawkeyeSeparatedUTTimeoutSecondsKey"];
  id v9 = [DictionaryOfClasses objectForKeyedSubscript:@"CLHawkeyeSeparatedUTBackoffTimeoutSecondsKey"];
  id v10 = *(void **)(a1 + 24);
  id v11 = [v8 unsignedIntValue];
  id v12 = [v9 unsignedIntValue];
  uint64_t v13 = CLISP_ME_TOKEN;

  return _[v10 setHawkeyeUTMotionConfigWithSeparatedUTTimeoutSeconds:v11 separatedUTBackoffTimeoutSeconds:v12 forDevice:v7 forClient:v13];
}

id sub_1005A2D8C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 fetchHawkeyeAISProductDataForDevice:v5 forClient:v7];
}

id sub_1005A2E24(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 fetchHawkeyeAISManufacturerNameForDevice:v5 forClient:v7];
}

id sub_1005A2EBC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 fetchHawkeyeAISModelNameForDevice:v5 forClient:v7];
}

id sub_1005A2F54(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 fetchHawkeyeAISModelColorCodeForDevice:v5 forClient:v7];
}

id sub_1005A2FEC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 fetchHawkeyeAISAccessoryCategoryForDevice:v5 forClient:v7];
}

id sub_1005A3084(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 fetchHawkeyeAISAccessoryCapabilitiesForDevice:v5 forClient:v7];
}

id sub_1005A311C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 fetchHawkeyeAISFindMyVersionForDevice:v5 forClient:v7];
}

id sub_1005A31B4(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 fetchHawkeyeAISBatteryTypeForDevice:v5 forClient:v7];
}

id sub_1005A324C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 fetchHawkeyeSerialNumber:v5 forClient:v7];
}

id sub_1005A32E4(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 fetchHawkeyeCurrentPrimaryKey:v5 forClient:v7];
}

id sub_1005A337C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v5 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v4) objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v6 = *(void **)(a1 + 24);
  uint64_t v7 = CLISP_ME_TOKEN;

  return _[v6 fetchHawkeyeiCloudIdentifier:v5 forClient:v7];
}

void sub_1005A3414(uint64_t a1, CLConnectionMessage **a2)
{
  sub_100134750(&__p, "com.apple.locationd.Proximity.FindMyCertification");
  char isEntitled = CLConnection::isEntitled();
  char v5 = isEntitled;
  if (SBYTE3(v19) < 0)
  {
    operator delete(__p);
    if (v5) {
      goto LABEL_3;
    }
  }
  else if (isEntitled)
  {
LABEL_3:
    uint64_t v6 = objc_opt_class();
    uint64_t v7 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, objc_opt_class(), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v7);
    id v9 = [DictionaryOfClasses objectForKeyedSubscript:@"CLHawkeyeFirmwareAssetURLKey"];
    id v10 = [DictionaryOfClasses objectForKeyedSubscript:@"CLHawkeyeProductGroupKey"];
    id v11 = [DictionaryOfClasses objectForKeyedSubscript:@"CLHawkeyeProductNumberKey"];
    id v12 = [DictionaryOfClasses objectForKeyedSubscript:@"CLHawkeyeFirmwareURLSandboxExtensionKey"];
    [*(id *)(a1 + 24) useLocalFirmwareAssetFromUrl:v9 forProductGroup:v10 forProductNumber:v11 withSandboxExtension:v12 forClient:CLISP_ME_TOKEN];
    return;
  }
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1022BCAF8);
  }
  uint64_t v13 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    id v14 = [*(id *)(a1 + 64) clientname];
    std::string __p = (void *)68289282;
    __int16 v16 = 2082;
    long long v17 = "";
    __int16 v18 = 2114;
    id v19 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #client not entitled for FMCA commands\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
  }
}

void sub_1005A3618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005A363C(uint64_t a1, CLConnectionMessage **a2)
{
  sub_100134750(&__p, "com.apple.locationd.Proximity.FindMyCertification");
  char isEntitled = CLConnection::isEntitled();
  char v5 = isEntitled;
  if (SBYTE3(v16) < 0)
  {
    operator delete(__p);
    if (v5) {
      goto LABEL_3;
    }
  }
  else if (isEntitled)
  {
LABEL_3:
    uint64_t v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
    id v8 = [DictionaryOfClasses objectForKeyedSubscript:@"CLHawkeyeProductGroupKey"];
    id v9 = [DictionaryOfClasses objectForKeyedSubscript:@"CLHawkeyeProductNumberKey"];
    [*(id *)(a1 + 24) useDefaultFirmwareAssetSourceForProductGroup:v8 andProductNumber:v9 forClient:CLISP_ME_TOKEN];
    return;
  }
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1022BCAF8);
  }
  id v10 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = [*(id *)(a1 + 64) clientname];
    std::string __p = (void *)68289282;
    __int16 v13 = 2082;
    id v14 = "";
    __int16 v15 = 2114;
    id v16 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #client not entitled for FMCA commands\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
  }
}

void sub_1005A37F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005A3814(uint64_t a1, CLConnectionMessage **a2)
{
  sub_100134750(&__p, "com.apple.locationd.Proximity.FindMyCertification");
  char isEntitled = CLConnection::isEntitled();
  char v5 = isEntitled;
  if (SBYTE3(v16) < 0)
  {
    operator delete(__p);
    if (v5) {
      goto LABEL_3;
    }
  }
  else if (isEntitled)
  {
LABEL_3:
    uint64_t v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v6);
    id v8 = [DictionaryOfClasses objectForKeyedSubscript:@"CLHawkeyeProductGroupKey"];
    id v9 = [DictionaryOfClasses objectForKeyedSubscript:@"CLHawkeyeProductNumberKey"];
    [*(id *)(a1 + 24) fetchWhetherLocalFirmwareAssetIsInUseForProductGroup:v8 andProductNumber:v9 forClient:CLISP_ME_TOKEN];
    return;
  }
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1022BCAF8);
  }
  id v10 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = [*(id *)(a1 + 64) clientname];
    std::string __p = (void *)68289282;
    __int16 v13 = 2082;
    id v14 = "";
    __int16 v15 = 2114;
    id v16 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #client not entitled for FMCA commands\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
  }
}

void sub_1005A39C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005A39EC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022BCAF8);
    }
    dispatch_time_t v2 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_ERROR))
    {
      id v3 = [*(id *)(a1 + 64) clientname];
      int v13 = 68289282;
      int v14 = 0;
      __int16 v15 = 2082;
      id v16 = "";
      __int16 v17 = 2114;
      id v18 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian #client already scanning for BTFinding\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v13, 0x1Cu);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1022BCAF8);
      }
    }
    uint64_t v4 = qword_102419398;
    if (os_signpost_enabled((os_log_t)qword_102419398))
    {
      id v5 = [*(id *)(a1 + 64) clientname];
      int v13 = 68289282;
      int v14 = 0;
      __int16 v15 = 2082;
      id v16 = "";
      __int16 v17 = 2114;
      id v18 = v5;
      uint64_t v6 = "#durian #client already scanning for BTFinding";
      uint64_t v7 = "{\"msg%{public}.0s\":\"#durian #client already scanning for BTFinding\", \"client\":%{public, location:escape_only}@}";
LABEL_9:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v6, v7, (uint8_t *)&v13, 0x1Cu);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 56) = 1;
    sub_1005A5830((CLAvengerScannerClient *)a1);
    if (_os_feature_enabled_impl())
    {
      if ([*(id *)(a1 + 40) poweredOn])
      {
        if (([*(id *)(a1 + 40) startBTFindingScan] & 1) == 0)
        {
          if (qword_102419390 != -1) {
            dispatch_once(&qword_102419390, &stru_1022BCAF8);
          }
          id v8 = qword_102419398;
          if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_ERROR))
          {
            id v9 = [*(id *)(a1 + 64) clientname];
            int v13 = 68289282;
            int v14 = 0;
            __int16 v15 = 2082;
            id v16 = "";
            __int16 v17 = 2114;
            id v18 = v9;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian #client failed to BTFindingScan even when powered on\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v13, 0x1Cu);
            if (qword_102419390 != -1) {
              dispatch_once(&qword_102419390, &stru_1022BCAF8);
            }
          }
          uint64_t v4 = qword_102419398;
          if (os_signpost_enabled((os_log_t)qword_102419398))
          {
            id v10 = [*(id *)(a1 + 64) clientname];
            int v13 = 68289282;
            int v14 = 0;
            __int16 v15 = 2082;
            id v16 = "";
            __int16 v17 = 2114;
            id v18 = v10;
            uint64_t v6 = "#durian #client failed to BTFindingScan even when powered on";
            uint64_t v7 = "{\"msg%{public}.0s\":\"#durian #client failed to BTFindingScan even when powered on\", \"client\":%{pub"
                 "lic, location:escape_only}@}";
            goto LABEL_9;
          }
        }
      }
      else
      {
        *(unsigned char *)(a1 + 57) = 1;
      }
    }
    else
    {
      id v11 = *(void **)(a1 + 32);
      uint64_t v12 = CLISP_ME_TOKEN;
      _[v11 startBTFindingScan:v12];
    }
  }
}

void sub_1005A3D4C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    *(_WORD *)(a1 + 56) = 0;
    if (_os_feature_enabled_impl()) {
      [*(id *)(a1 + 40) stopBTFindingScan];
    }
    else {
      [*(id *)(a1 + 32) stopBTFindingScan:CLISP_ME_TOKEN];
    }
    sub_1005A521C(a1);
  }
  else
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022BCAF8);
    }
    dispatch_time_t v2 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_ERROR))
    {
      id v3 = [*(id *)(a1 + 64) clientname];
      int v6 = 68289282;
      int v7 = 0;
      __int16 v8 = 2082;
      id v9 = "";
      __int16 v10 = 2114;
      id v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian #client not scanning for BTFinding\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v6, 0x1Cu);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1022BCAF8);
      }
    }
    uint64_t v4 = qword_102419398;
    if (os_signpost_enabled((os_log_t)qword_102419398))
    {
      id v5 = [*(id *)(a1 + 64) clientname];
      int v6 = 68289282;
      int v7 = 0;
      __int16 v8 = 2082;
      id v9 = "";
      __int16 v10 = 2114;
      id v11 = v5;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian #client not scanning for BTFinding", "{\"msg%{public}.0s\":\"#durian #client not scanning for BTFinding\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v6, 0x1Cu);
    }
  }
}

void sub_1005A3F6C(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022BCAF8);
    }
    dispatch_time_t v2 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      __int16 v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian sa performing avenger scan\"}", (uint8_t *)&v5, 0x12u);
    }
    [*(id *)(a1 + 40) performTemporaryAggressiveScan];
  }
  else
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022BCAF8);
    }
    id v3 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_ERROR))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      __int16 v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian sa attempted to issue scan but scanner client doesnt exist\"}", (uint8_t *)&v5, 0x12u);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1022BCAF8);
      }
    }
    uint64_t v4 = qword_102419398;
    if (os_signpost_enabled((os_log_t)qword_102419398))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      __int16 v8 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian sa attempted to issue scan but scanner client doesnt exist", "{\"msg%{public}.0s\":\"#durian sa attempted to issue scan but scanner client doesnt exist\"}", (uint8_t *)&v5, 0x12u);
    }
  }
}

void sub_1005A4174(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022BCAF8);
    }
    dispatch_time_t v2 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      __int16 v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian sa performing long avenger scan\"}", (uint8_t *)&v5, 0x12u);
    }
    [*(id *)(a1 + 40) performTemporaryLongAggressiveScan];
  }
  else
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022BCAF8);
    }
    id v3 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_ERROR))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      __int16 v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian sa attempted to issue scan but scanner client doesnt exist\"}", (uint8_t *)&v5, 0x12u);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1022BCAF8);
      }
    }
    uint64_t v4 = qword_102419398;
    if (os_signpost_enabled((os_log_t)qword_102419398))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      __int16 v8 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian sa attempted to issue scan but scanner client doesnt exist", "{\"msg%{public}.0s\":\"#durian sa attempted to issue scan but scanner client doesnt exist\"}", (uint8_t *)&v5, 0x12u);
    }
  }
}

void sub_1005A437C(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022BCAF8);
    }
    dispatch_time_t v2 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      __int16 v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian sa stopping long avenger scan\"}", (uint8_t *)&v5, 0x12u);
    }
    [*(id *)(a1 + 40) stopTemporaryLongAggressiveScan];
  }
  else
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022BCAF8);
    }
    id v3 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_ERROR))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      __int16 v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian sa attempted to terminate long scan but scanner proxy doesnt exist\"}", (uint8_t *)&v5, 0x12u);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1022BCAF8);
      }
    }
    uint64_t v4 = qword_102419398;
    if (os_signpost_enabled((os_log_t)qword_102419398))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      __int16 v8 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian sa attempted to terminate long scan but scanner proxy doesnt exist", "{\"msg%{public}.0s\":\"#durian sa attempted to terminate long scan but scanner proxy doesnt exist\"}", (uint8_t *)&v5, 0x12u);
    }
  }
}

id sub_1005A4584(uint64_t a1)
{
  return _[*(id *)(a1 + 72) debugPerformAggressiveScan];
}

id sub_1005A458C(uint64_t a1)
{
  return _[*(id *)(a1 + 72) debugPerformHawkeyeLowEnergyScan];
}

id sub_1005A4594(uint64_t a1)
{
  return _[*(id *)(a1 + 24) debugPerformAggressiveScan];
}

id sub_1005A459C(uint64_t a1)
{
  return _[*(id *)(a1 + 72) fetchStatusOfUTEnablementRequirementsForClient:CLISP_ME_TOKEN];
}

id sub_1005A45B0(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = objc_opt_class();
  int v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
  id v7 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianIdentifier"];
  id v8 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianMacAddress"];
  id v9 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianTagType"];
  __int16 v10 = +[NSData dataWithHexString:v8];
  if ([v9 isEqualToString:@"durian"])
  {
    uint64_t v11 = 1;
  }
  else if ([v9 isEqualToString:@"hawkeye"])
  {
    uint64_t v11 = 2;
  }
  else if ([v9 isEqualToString:@"hele"])
  {
    uint64_t v11 = 3;
  }
  else
  {
    uint64_t v11 = 0;
  }
  id v12 = [objc_alloc((Class)TAUnknownBeacon) initWithBeaconUUID:v7 address:v10 deviceType:v11 withAccessoryInfo:0];
  [*(id *)(a1 + 72) fetchAISInfoForTAUnknownBeacon:v12 client:CLISP_ME_TOKEN];

  return v12;
}

id sub_1005A472C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v4);
  id v6 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianMacAddress"];
  id v7 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianTagType"];
  id v8 = +[NSData dataWithHexString:v6];
  id v9 = [[DictionaryOfClasses objectForKeyedSubscript:@"CLAvengerAdvertisementDetailsBitmask"] intValue];
  if ([v7 isEqualToString:@"durian"])
  {
    uint64_t v10 = 1;
  }
  else if ([v7 isEqualToString:@"hawkeye"])
  {
    uint64_t v10 = 2;
  }
  else if ([v7 isEqualToString:@"hele"])
  {
    uint64_t v10 = 3;
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void **)(a1 + 72);
  uint64_t v12 = CLISP_ME_TOKEN;

  return _[v11 stageTADetection:v8 deviceType:v10 detailsBitmask:v9 client:v12];
}

id sub_1005A486C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v4);
  id v6 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianMacAddress"];
  id v7 = [DictionaryOfClasses objectForKeyedSubscript:@"CLDurianTagType"];
  id v8 = +[NSData dataWithHexString:v6];
  id v9 = [[DictionaryOfClasses objectForKeyedSubscript:@"CLAvengerAdvertisementDetailsBitmask"] intValue];
  if ([v7 isEqualToString:@"durian"])
  {
    uint64_t v10 = 1;
  }
  else if ([v7 isEqualToString:@"hawkeye"])
  {
    uint64_t v10 = 2;
  }
  else if ([v7 isEqualToString:@"hele"])
  {
    uint64_t v10 = 3;
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void **)(a1 + 72);
  uint64_t v12 = CLISP_ME_TOKEN;

  return _[v11 forceSurfaceStagedDetections:v8 deviceType:v10 detailsBitmask:v9 client:v12];
}

id sub_1005A49AC(uint64_t a1, CLConnectionMessage **a2)
{
  id result = (id)_os_feature_enabled_impl();
  if (result)
  {
    int v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
    id v6 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v5) objectForKeyedSubscript:@"CLDurianIdentifier"];
    id v7 = *(void **)(a1 + 24);
    uint64_t v8 = CLISP_ME_TOKEN;
    return _[v7 fetchAISProductDataForDevice:v6 forClient:v8];
  }
  return result;
}

id sub_1005A4A70(uint64_t a1, CLConnectionMessage **a2)
{
  id result = (id)_os_feature_enabled_impl();
  if (result)
  {
    int v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
    id v6 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v5) objectForKeyedSubscript:@"CLDurianIdentifier"];
    id v7 = *(void **)(a1 + 24);
    uint64_t v8 = CLISP_ME_TOKEN;
    return _[v7 fetchAISManufacturerNameForDevice:v6 forClient:v8];
  }
  return result;
}

id sub_1005A4B34(uint64_t a1, CLConnectionMessage **a2)
{
  id result = (id)_os_feature_enabled_impl();
  if (result)
  {
    int v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
    id v6 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v5) objectForKeyedSubscript:@"CLDurianIdentifier"];
    id v7 = *(void **)(a1 + 24);
    uint64_t v8 = CLISP_ME_TOKEN;
    return _[v7 fetchAISModelNameForDevice:v6 forClient:v8];
  }
  return result;
}

id sub_1005A4BF8(uint64_t a1, CLConnectionMessage **a2)
{
  id result = (id)_os_feature_enabled_impl();
  if (result)
  {
    int v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
    id v6 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v5) objectForKeyedSubscript:@"CLDurianIdentifier"];
    id v7 = *(void **)(a1 + 24);
    uint64_t v8 = CLISP_ME_TOKEN;
    return _[v7 fetchAISProtocolImplementationForDevice:v6 forClient:v8];
  }
  return result;
}

id sub_1005A4CBC(uint64_t a1, CLConnectionMessage **a2)
{
  id result = (id)_os_feature_enabled_impl();
  if (result)
  {
    int v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
    id v6 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v5) objectForKeyedSubscript:@"CLDurianIdentifier"];
    id v7 = *(void **)(a1 + 24);
    uint64_t v8 = CLISP_ME_TOKEN;
    return _[v7 fetchAISAccessoryCapabilitiesForDevice:v6 forClient:v8];
  }
  return result;
}

id sub_1005A4D80(uint64_t a1, CLConnectionMessage **a2)
{
  id result = (id)_os_feature_enabled_impl();
  if (result)
  {
    int v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
    id v6 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v5) objectForKeyedSubscript:@"CLDurianIdentifier"];
    id v7 = *(void **)(a1 + 24);
    uint64_t v8 = CLISP_ME_TOKEN;
    return _[v7 fetchAISAccessoryCategoryForDevice:v6 forClient:v8];
  }
  return result;
}

id sub_1005A4E44(uint64_t a1, CLConnectionMessage **a2)
{
  id result = (id)_os_feature_enabled_impl();
  if (result)
  {
    int v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
    id v6 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v5) objectForKeyedSubscript:@"CLDurianIdentifier"];
    id v7 = *(void **)(a1 + 24);
    uint64_t v8 = CLISP_ME_TOKEN;
    return _[v7 fetchAISNetworkIDForDevice:v6 forClient:v8];
  }
  return result;
}

id sub_1005A4F08(uint64_t a1, CLConnectionMessage **a2)
{
  id result = (id)_os_feature_enabled_impl();
  if (result)
  {
    int v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
    id v6 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v5) objectForKeyedSubscript:@"CLDurianIdentifier"];
    id v7 = *(void **)(a1 + 24);
    uint64_t v8 = CLISP_ME_TOKEN;
    return _[v7 fetchAISFirmwareVersionForDevice:v6 forClient:v8];
  }
  return result;
}

id sub_1005A4FCC(uint64_t a1, CLConnectionMessage **a2)
{
  id result = (id)_os_feature_enabled_impl();
  if (result)
  {
    int v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
    id v6 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v5) objectForKeyedSubscript:@"CLDurianIdentifier"];
    id v7 = *(void **)(a1 + 24);
    uint64_t v8 = CLISP_ME_TOKEN;
    return _[v7 fetchAISBatteryTypeForDevice:v6 forClient:v8];
  }
  return result;
}

id sub_1005A5090(uint64_t a1, CLConnectionMessage **a2)
{
  id result = (id)_os_feature_enabled_impl();
  if (result)
  {
    int v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
    id v6 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v5) objectForKeyedSubscript:@"CLDurianIdentifier"];
    id v7 = *(void **)(a1 + 24);
    uint64_t v8 = CLISP_ME_TOKEN;
    return _[v7 fetchAISBatteryLevelForDevice:v6 forClient:v8];
  }
  return result;
}

id sub_1005A5154(uint64_t a1, CLConnectionMessage **a2)
{
  id result = (id)_os_feature_enabled_impl();
  if (result)
  {
    int v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
    id v6 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a2, v5) objectForKeyedSubscript:@"CLDurianIdentifier"];
    id v7 = *(void **)(a1 + 24);
    uint64_t v8 = CLISP_ME_TOKEN;
    return _[v7 fetchAISSerialNumberForDevice:v6 forClient:v8];
  }
  return result;
}

void sub_1005A521C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    uint64_t v3 = v1 - 1;
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = v3;
    if (!v3)
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1022BCAF8);
      }
      uint64_t v4 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
      {
        id v5 = [*(id *)(a1 + 64) clientname];
        v8[0] = 68289282;
        v8[1] = 0;
        __int16 v9 = 2082;
        uint64_t v10 = "";
        __int16 v11 = 2114;
        id v12 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #client tearing down scanner\", \"name\":%{public, location:escape_only}@}", (uint8_t *)v8, 0x1Cu);
      }
      if (_os_feature_enabled_impl())
      {
        id v6 = (id *)(a1 + 40);
      }
      else
      {
        id v7 = *(void **)(a1 + 32);
        id v6 = (id *)(a1 + 32);
        [v7 stopMonitoringAvengerAdvertisementsForClient:CLISP_ME_TOKEN];
      }

      *id v6 = 0;
    }
  }
}

void sub_1005A5360(uint64_t a1, uint64_t a2)
{
  sub_100134750(buf, "com.apple.locationd.Proximity.TagManagement");
  char isEntitled = CLConnection::isEntitled();
  char v5 = isEntitled;
  if (SBYTE3(v33) < 0)
  {
    operator delete(*(void **)buf);
    if (v5) {
      goto LABEL_3;
    }
  }
  else if (isEntitled)
  {
LABEL_3:
    uint64_t v6 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    if (*(char *)(v6 + 23) >= 0) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = *(void *)v6;
    }
    id v8 = [(NSArray *)[+[NSString stringWithUTF8String:v7] componentsSeparatedByString:@"/"] lastObject];
    uint64_t v9 = objc_opt_class();
    uint64_t v10 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v9, objc_opt_class(), 0);
    id v11 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v10) objectForKeyedSubscript:@"CLDurianIdentifier"];
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022BCAF8);
    }
    id v12 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = [[[v11 description] substringToIndex:8];
      id v14 = [*(id *)(a1 + 64) clientname];
      *(_DWORD *)std::string buf = 68289795;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v30 = 2082;
      __int16 v31 = "";
      __int16 v32 = 2114;
      id v33 = v8;
      __int16 v34 = 2113;
      id v35 = v13;
      __int16 v36 = 2114;
      id v37 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #client handleMessage\", \"name\":%{public, location:escape_only}@, \"item\":%{private, location:escape_only}@, \"client\":%{public, location:escape_only}@}", buf, 0x30u);
    }
    sub_10059F64C();
    __int16 v15 = (unsigned __int8 *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    id v16 = sub_100122860(qword_10247B448, v15);
    sub_10059F64C();
    if (v16)
    {
      __int16 v17 = (void (*)(void *, CLConnectionMessage **))*((void *)v16 + 5);
      uint64_t v18 = *((void *)v16 + 6);
      id v19 = (void *)(a1 + (v18 >> 1));
      if (v18) {
        __int16 v17 = *(void (**)(void *, CLConnectionMessage **))(*v19 + v17);
      }
      double v26 = *(std::__shared_weak_count **)(a2 + 8);
      __int16 v27 = *(CLConnectionMessage **)a2;
      int v28 = v26;
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v17(v19, &v27);
      if (v28) {
        sub_1000DB0A0(v28);
      }
    }
    else
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1022BCAF8);
      }
      long long v22 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
      {
        id v23 = [[[v11 description] substringToIndex:8];
        *(_DWORD *)std::string buf = 68289539;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v30 = 2082;
        __int16 v31 = "";
        __int16 v32 = 2114;
        id v33 = v8;
        __int16 v34 = 2113;
        id v35 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#durian #client unrecognized message\", \"name\":%{public, location:escape_only}@, \"item\":%{private, location:escape_only}@}", buf, 0x26u);
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_1022BCAF8);
        }
      }
      long long v24 = qword_102419398;
      if (os_signpost_enabled((os_log_t)qword_102419398))
      {
        id v25 = [[[v11 description] substringToIndex:8];
        *(_DWORD *)std::string buf = 68289539;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v30 = 2082;
        __int16 v31 = "";
        __int16 v32 = 2114;
        id v33 = v8;
        __int16 v34 = 2113;
        id v35 = v25;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian #client unrecognized message", "{\"msg%{public}.0s\":\"#durian #client unrecognized message\", \"name\":%{public, location:escape_only}@, \"item\":%{private, location:escape_only}@}", buf, 0x26u);
      }
    }
    return;
  }
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1022BCAF8);
  }
  long long v20 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    id v21 = [*(id *)(a1 + 64) clientname];
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v30 = 2082;
    __int16 v31 = "";
    __int16 v32 = 2114;
    id v33 = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #client not entitled\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
}

void sub_1005A57F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

CLAvengerScannerClient *sub_1005A5830(CLAvengerScannerClient *result)
{
  reconciler = result->_reconciler;
  if (reconciler != (CLAvengerReconciler *)-1)
  {
    dispatch_time_t v2 = result;
    result->_reconciler = (CLAvengerReconciler *)((char *)&reconciler->super.isa + 1);
    id result = (CLAvengerScannerClient *)_os_feature_enabled_impl();
    if (result)
    {
      if (!v2->_controller)
      {
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_1022BCAF8);
        }
        uint64_t v3 = qword_102419398;
        if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
        {
          id v4 = [(CLPowerAssertion *)v2[1]._powerAssertion.__ptr_.__value_ clientname];
          int v8 = 68289282;
          int v9 = 0;
          __int16 v10 = 2082;
          id v11 = "";
          __int16 v12 = 2114;
          id v13 = v4;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #client initiating scanner\", \"name\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
        }
        id result = [[-[CLAvengerScannerClient alloc] initWithDelegate:queue:](v2[1]._powerAssertion.__ptr_.__value_, objc_msgSend(-[CLAvengerScannerClientDelegateProtocol silo](v2->_delegate, "silo"), "queue"));
        v2->_controller = (CLAvengerScannerClientController *)result;
      }
    }
    else if (!v2->_centralManager)
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1022BCAF8);
      }
      char v5 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
      {
        id v6 = [(CLPowerAssertion *)v2[1]._powerAssertion.__ptr_.__value_ clientname];
        int v8 = 68289282;
        int v9 = 0;
        __int16 v10 = 2082;
        id v11 = "";
        __int16 v12 = 2114;
        id v13 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #client initiating scanner\", \"name\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
      }
      uint64_t v7 = (CBCentralManager *)[[-[CLAvengerScannerClientDelegateProtocol vendor](v2->_delegate, "vendor") proxyForService:@"CLAvengerScanner"]
      v2->_centralManager = v7;
      [(CBCentralManager *)v7 registerDelegate:v2[1]._powerAssertion.__ptr_.__value_ inSilo:[(CLAvengerScannerClientDelegateProtocol *)v2->_delegate silo]];
      [(CBCentralManager *)v2->_centralManager setDelegateEntityName:"CLDurianManagementClient"];
      return (CLAvengerScannerClient *)[(CBCentralManager *)v2->_centralManager startMonitoringAvengerAdvertisementsForClient:CLISP_ME_TOKEN clientName:[(CLPowerAssertion *)v2[1]._powerAssertion.__ptr_.__value_ clientname]];
    }
  }
  return result;
}

id sub_1005A5AAC(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) performTemporaryHawkeyeLowEnergyScan];
}

void sub_1005A5AB8(uint64_t a1)
{
}

id sub_1005A5AC0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) performTemporaryLongAggressiveScan];
}

void sub_1005A5ACC(uint64_t a1)
{
}

void sub_1005A5AD4(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void *sub_1005A5B04@<X0>(void *a1@<X8>)
{
  dispatch_time_t v2 = operator new(0x70uLL);
  id result = sub_10017E960(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1005A5B54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005A5B68(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 40 * a3;
    do
    {
      sub_1005A5BE4(a1, a2, (long long *)a2);
      a2 += 40;
      v5 -= 40;
    }
    while (v5);
  }
  return a1;
}

void sub_1005A5BD0(_Unwind_Exception *a1)
{
  sub_1002220F0(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1005A5BE4(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    id v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_1005A5E64(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  long long v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1005A5E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_10022251C((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1005A5E64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + _Block_object_dispose(&STACK[0x850], 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  id result = sub_1005A5EF0((char *)v8 + 16, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1005A5ED4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_10022251C(v3, v2);
  _Unwind_Resume(a1);
}

char *sub_1005A5EF0(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  *(_OWORD *)(__dst + 24) = *(long long *)((char *)a2 + 24);
  return __dst;
}

void sub_1005A5F48(uint64_t a1, char *a2)
{
  sub_100134750(v4, a2);
  sub_100134750(&__p, "");
  sub_1005A5FF8(a1, (uint64_t)v4);
}

void sub_1005A5FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005A5FF8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)dispatch_time_t v2 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a2 + _Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  operator new();
}

void sub_1005A6100(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A65CFC(&a15, a1, a2, v21 - 48);
  long long v24 = *(_Unwind_Exception **)(v21 - 48);
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(v24);
}

void sub_1005A6154(uint64_t a1, long long *a2, int a3, uint64_t *a4, long long *a5)
{
  *(unsigned char *)a1 = 0;
  long long v8 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = v8;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 40) = 0x100000002;
  unint64_t v9 = (void *)(a1 + 8);
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(unsigned char *)(a1 + 49) = a3;
  if (*((char *)a5 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 56), *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v10 = *a5;
    *(void *)(a1 + 72) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 56) = v10;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x850], 8) = 0;
  uint64_t v11 = *a4;
  *a4 = 0;
  *(void *)(a1 + 96) = v11;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022BCB68);
  }
  unint64_t v12 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    id v13 = v9;
    if (*(char *)(a1 + 31) < 0) {
      id v13 = (void *)*v9;
    }
    buf[0] = 136315650;
    *(void *)&buf[1] = v13;
    __int16 v19 = 1024;
    int v20 = a3;
    __int16 v21 = 1024;
    int v22 = 1;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Creating managed location database %s (count triggers %d, use cache %d)", (uint8_t *)buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BCB68);
    }
    float v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLManagedLocationDatabase<CLNrCellLocationDatabase, CLTelephonyService_Type::NrCell>::CLManagedLocationDatabase(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLNrCellLocationDatabase, DataType = CLTelephonyService_Type::NrCell]", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 96) + 16))(*(void *)(a1 + 96)))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BCB68);
    }
    id v14 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      unint64_t v15 = v9;
      if (*(char *)(a1 + 31) < 0) {
        unint64_t v15 = (void *)*v9;
      }
      buf[0] = 136315138;
      *(void *)&buf[1] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Data protection is enabled, creating in-memory database for table %s", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BCB68);
      }
      float v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLManagedLocationDatabase<CLNrCellLocationDatabase, CLTelephonyService_Type::NrCell>::CLManagedLocationDatabase(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLNrCellLocationDatabase, DataType = CLTelephonyService_Type::NrCell]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    sub_1005A6924(a1, a3);
  }
  sub_1005A6A3C();
}

void sub_1005A6870(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *(void *)(v1 + 96);
  *(void *)(v1 + 96) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v2);
  }
  uint64_t v6 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005A6924(uint64_t a1, char a2)
{
  sub_100134750(__p, "");
  char v6 = 0;
  uint64_t v5 = 0;
  char v7 = a2;
  if (SHIBYTE(v4) < 0)
  {
    sub_1000DC48C(v8, __p[0], (unint64_t)__p[1]);
    uint64_t v9 = 0;
    if (SHIBYTE(v4) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)long long v8 = *(_OWORD *)__p;
    _DWORD v8[2] = v4;
    uint64_t v9 = 0;
  }
  sub_1005A6A3C();
}

void sub_1005A69F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005A6A3C()
{
}

void sub_1005A6AFC(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void sub_1005A6B54(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1005A6B84(uint64_t a1)
{
  if (*(void *)(a1 + 88)) {
    sub_101A660A8();
  }
  if (*(char *)(a1 + 31) >= 0) {
    size_t v2 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    size_t v2 = *(void *)(a1 + 16);
  }
  uint64_t v3 = __p;
  sub_1001110E4((uint64_t)__p, v2 + 17);
  if (v10 < 0) {
    uint64_t v3 = (void **)__p[0];
  }
  if (v2)
  {
    if (*(char *)(a1 + 31) >= 0) {
      long long v4 = (const void *)(a1 + 8);
    }
    else {
      long long v4 = *(const void **)(a1 + 8);
    }
    memmove(v3, v4, v2);
  }
  strcpy((char *)v3 + v2, "-InMemoryDatabase");
  int v5 = v10;
  char v6 = (void **)__p[0];
  char v7 = [CLOSTransaction alloc];
  if (v5 >= 0) {
    long long v8 = __p;
  }
  else {
    long long v8 = v6;
  }
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x850], 8) = [(CLOSTransaction *)v7 initWithDescription:v8];
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1005A6C8C(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

BOOL sub_1005A6CC8()
{
  uint64_t v1 = qword_102419388;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

uint64_t sub_1005A6CE8(uint64_t a1)
{
  uint64_t result = sub_100EB0494(a1, 0);
  *(void *)uint64_t result = &off_1022BCBB8;
  *(_DWORD *)(result + 96) = 0;
  return result;
}

uint64_t *sub_1005A6D24(uint64_t *result, _DWORD *a2, unsigned int a3, unsigned int a4)
{
  long long v4 = result;
  if (*a2 >= 3u)
  {
    if (*a2 != 9 || *((_DWORD *)result + 24) != a4) {
      return result;
    }
  }
  else
  {
    BOOL v5 = *((_DWORD *)result + 24) == a3;
    a3 = a4;
    if (!v5) {
      return result;
    }
  }
  sub_1005A6DA4((uint64_t)result, a3);

  return sub_1005A6EB8(v4);
}

void sub_1005A6DA4(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 96) != a2)
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_1022BCC60);
    }
    long long v4 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(unsigned int *)(a1 + 96);
      v6[0] = 68289538;
      v6[1] = 0;
      __int16 v7 = 2082;
      long long v8 = "";
      __int16 v9 = 2050;
      uint64_t v10 = v5;
      __int16 v11 = 2050;
      uint64_t v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Transitioned state\", \"old state\":%{public, location:CLStreamingAwareLocationProviderNoLocalGPSStateMachine::LocationSourceState}lld, \"new state\":%{public, location:CLStreamingAwareLocationProviderNoLocalGPSStateMachine::LocationSourceState}lld}", (uint8_t *)v6, 0x26u);
    }
    *(_DWORD *)(a1 + 96) = a2;
  }
}

uint64_t *sub_1005A6EB8(uint64_t *result)
{
  __asm { FMOV            V0.2D, #-1.0 }
  long long v7 = _Q0;
  __int16 v8 = 0;
  int v9 = 0;
  int v10 = 0;
  uint64_t v6 = (uint64_t)result;
  switch(*((_DWORD *)result + 24))
  {
    case 0:
      sub_100EB0C8C((uint64_t)result, 0);
      uint64_t result = sub_100EB0C8C(v6, 1u);
      break;
    case 1:
    case 3:
      sub_100126168((uint64_t)result, 0, (uint64_t)&v7);
      goto LABEL_7;
    case 2:
      sub_100EB0C8C((uint64_t)result, 0);
LABEL_7:
      uint64_t result = sub_100126168(v6, 1, (uint64_t)&v7);
      break;
    case 4:
      sub_100126168((uint64_t)result, 0, (uint64_t)&v7);
      uint64_t result = sub_100EB0C8C(v6, 1u);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *sub_1005A6FB4(uint64_t a1)
{
  size_t v2 = *(uint64_t **)(a1 + 16);
  if (!v2)
  {
LABEL_16:
    unsigned int v8 = 0;
    goto LABEL_17;
  }
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  while (1)
  {
    int v4 = *((_DWORD *)v3 + 7);
    if (v4 <= 0) {
      break;
    }
LABEL_6:
    uint64_t v3 = (uint64_t *)*v3;
    if (!v3)
    {
      uint64_t v5 = *(uint64_t **)(a1 + 16);
      while (1)
      {
        int v6 = *((_DWORD *)v5 + 7);
        if (v6 <= 1)
        {
          if (v6 == 1)
          {
LABEL_21:
            if (*(_DWORD *)(a1 + 96) > 2u) {
              goto LABEL_18;
            }
            unsigned int v8 = 4;
LABEL_17:
            sub_1005A6DA4(a1, v8);
            goto LABEL_18;
          }
          ++v5;
        }
        uint64_t v5 = (uint64_t *)*v5;
        if (!v5)
        {
          do
          {
            int v7 = *((_DWORD *)v2 + 7);
            if (v7 <= 2)
            {
              if (v7 == 2) {
                goto LABEL_21;
              }
              ++v2;
            }
            size_t v2 = (uint64_t *)*v2;
          }
          while (v2);
          goto LABEL_16;
        }
      }
    }
  }
  if (v4 < 0)
  {
    ++v3;
    goto LABEL_6;
  }
  unsigned int v10 = *(_DWORD *)(a1 + 96);
  BOOL v11 = v10 > 4;
  int v12 = (1 << v10) & 0x19;
  if (!v11 && v12 != 0)
  {
    unsigned int v8 = 2;
    goto LABEL_17;
  }
LABEL_18:

  return sub_1005A6EB8((uint64_t *)a1);
}

uint64_t sub_1005A709C(uint64_t a1, int a2, unsigned int *a3)
{
  uint64_t result = sub_100EB0478(*a3);
  if (result)
  {
    int v7 = *(_DWORD *)(a1 + 96);
    BOOL v8 = v7 != 4 || a2 == 0;
    if (v7 == 2) {
      BOOL v9 = a2 == 1;
    }
    else {
      BOOL v9 = v8;
    }
  }
  else
  {
    BOOL v9 = 1;
  }
  if (a2 == 1)
  {
    unsigned int v10 = (uint64_t *)a1;
    BOOL v11 = a3;
    unsigned int v12 = 1;
    unsigned int v13 = 2;
  }
  else
  {
    if (a2) {
      goto LABEL_14;
    }
    unsigned int v10 = (uint64_t *)a1;
    BOOL v11 = a3;
    unsigned int v12 = 3;
    unsigned int v13 = 4;
  }
  uint64_t result = (uint64_t)sub_1005A6D24(v10, v11, v12, v13);
LABEL_14:
  if (v9)
  {
    id v14 = *(uint64_t (**)(void))(**(void **)(a1 + 32) + 8);
    return v14();
  }
  return result;
}

void sub_1005A71A0(uint64_t a1)
{
  sub_10043C740(a1);

  operator delete();
}

void sub_1005A71D8(id a1)
{
  qword_102419548 = (uint64_t)os_log_create("com.apple.locationd.Core", "Streaming");
}

unsigned __int8 *sub_1005A7208(unsigned __int8 *result, float *a2, double *a3, int a4, float a5)
{
  if (*result == a4)
  {
    float v5 = *((float *)result + 4);
    float v6 = *((float *)result + 5);
    float v7 = *((float *)result + 6);
    double v8 = *((double *)result + 1);
    double v9 = *((double *)result + 5);
  }
  else
  {
    *((void *)result + 1) = 0xBFF0000000000000;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *((_OWORD *)result + 3) = 0u;
    *((_OWORD *)result + 4) = 0u;
    char *result = a4;
    float v7 = 0.0;
    double v8 = -1.0;
    double v9 = 0.0;
    float v6 = 0.0;
    float v5 = 0.0;
  }
  float v10 = *a2 + v5;
  *((float *)result + 4) = v10;
  float v11 = a2[1] + v6;
  *((float *)result + 5) = v11;
  float v12 = a2[2] + v7;
  *((float *)result + 6) = v12;
  double v13 = *a3;
  BOOL v14 = *a3 <= v8 || v8 <= 0.0;
  double v15 = v13 - v8;
  double v16 = a5;
  if (!v14) {
    double v16 = v15;
  }
  *((double *)result + 1) = v13;
  double v17 = v9 + v16;
  *((double *)result + 5) = v17;
  double v18 = *((double *)result + 10);
  if (v18 > 0.0 && v17 >= v18)
  {
    *((double *)result + 6) = v17 + *((double *)result + 6);
    float v20 = v11 + *((float *)result + 8);
    *((float *)result + 7) = v10 + *((float *)result + 7);
    *((float *)result + _Block_object_dispose(&STACK[0x850], 8) = v20;
    *((float *)result + 9) = v12 + *((float *)result + 9);
    *((void *)result + 2) = 0;
    *((_DWORD *)result + 6) = 0;
    *((void *)result + 5) = 0;
  }
  uint64_t v21 = *(void *)a2;
  *((float *)result + 16) = a2[2];
  *((void *)result + 7) = v21;
  return result;
}

double sub_1005A72FC(uint64_t a1)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = 0xBFF0000000000000;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(unsigned char *)a1 = 1;
  return result;
}

unsigned __int8 *sub_1005A731C(unsigned __int8 *result, float *a2, double *a3, int a4, float a5)
{
  if (*result == a4)
  {
    float v6 = *((float *)result + 4);
    float v5 = *((float *)result + 5);
    float v7 = *((float *)result + 6);
    double v8 = *((double *)result + 1);
    double v9 = *((double *)result + 4);
  }
  else
  {
    *((void *)result + 1) = 0xBFF0000000000000;
    *((void *)result + 2) = 0;
    *((_DWORD *)result + 6) = 0;
    *((void *)result + 4) = 0;
    *((void *)result + 5) = 0;
    *((_DWORD *)result + 12) = 0;
    float v7 = 0.0;
    *((void *)result + 7) = 0xBFF0000000000000;
    *((void *)result + _Block_object_dispose(&STACK[0x850], 8) = 0;
    double v8 = -1.0;
    double v9 = 0.0;
    *((_DWORD *)result + 1_Block_object_dispose(&STACK[0x850], 8) = 0;
    float v5 = 0.0;
    float v6 = 0.0;
    char *result = a4;
  }
  *((float *)result + 4) = *a2 + v6;
  *((float *)result + 5) = a2[1] + v5;
  *((float *)result + 6) = a2[2] + v7;
  double v10 = *a3;
  BOOL v11 = *a3 <= v8 || v8 <= 0.0;
  double v12 = v10 - v8;
  double v13 = a5;
  if (v11) {
    double v12 = v13;
  }
  *((double *)result + 1) = v10;
  *((double *)result + 4) = v9 + v12;
  uint64_t v14 = *(void *)a2;
  *((float *)result + 12) = a2[2];
  *((void *)result + 5) = v14;
  *((double *)result + 7) = v13;
  return result;
}

BOOL sub_1005A73D4(uint64_t a1, void *a2)
{
  if (*a2 == a2[1]) {
    return 0;
  }
  size_t v2 = a2;
  uint64_t v4 = sub_10016BA10();
  *(_DWORD *)std::string buf = 1;
  double v5 = sub_10016BA54(v4, buf);
  uint64_t v7 = *v2;
  uint64_t v6 = v2[1];
  if (*v2 != v6)
  {
    double v8 = v5;
    while (1)
    {
      double v9 = *(double *)(v7 + 8);
      if (v9 <= 0.0 || v5 > 0.0 && vabdd_f64(v5, v9) > 600.0) {
        break;
      }
      v7 += 72;
      if (v7 == v6) {
        goto LABEL_8;
      }
    }
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022BCC80);
    }
    uint64_t v59 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v60 = *(void *)(v7 + 8);
      *(_DWORD *)std::string buf = 134349312;
      *(double *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&unsigned char buf[14] = v60;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "InertialOdometry,ignoring IO data,unexpected MCT time-tag of IO data,current mct,%{public}.3f,IO mct,%{public}.3f", buf, 0x16u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022BCC80);
      }
      uint64_t v61 = *(void *)(v7 + 8);
      *(_DWORD *)v218 = 134349312;
      *(double *)&v218[4] = v8;
      __int16 v219 = 2050;
      *(void *)v220 = v61;
      __int16 v62 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)", "%s\n", v62);
      goto LABEL_53;
    }
    return result;
  }
LABEL_8:
  uint64_t v10 = *(void *)(a1 + 400);
  *(void *)std::string buf = 0xBFF0000000000000;
  if ((sub_100031028(v10, (double *)buf) & 1) != 0 || sub_100180714(*(void *)(a1 + 400)))
  {
    BOOL v11 = &qword_102419000;
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022BCC80);
    }
    double v12 = &qword_102419000;
    double v13 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = *(void *)(v2[1] - 64);
      uint64_t v15 = *(void *)(a1 + 400);
      *(void *)v218 = 0xBFF0000000000000;
      int v16 = sub_100031028(v15, (double *)v218);
      BOOL v17 = sub_100180714(*(void *)(a1 + 400));
      *(_DWORD *)std::string buf = 134349568;
      *(void *)&uint8_t buf[4] = v14;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&unsigned char buf[14] = v16;
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v17;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "InertialOdometry,PDR,CM not pedestrian,ignoring IO data,IO mct,%{public}.3f,isVehicular,%{public}d,isCycling,%{public}d", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022BCC80);
      }
      uint64_t v180 = *(void *)(v2[1] - 64);
      uint64_t v181 = *(void *)(a1 + 400);
      unint64_t v217 = 0xBFF0000000000000;
      int v182 = sub_100031028(v181, (double *)&v217);
      BOOL v183 = sub_100180714(*(void *)(a1 + 400));
      *(_DWORD *)v218 = 134349568;
      *(void *)&v218[4] = v180;
      __int16 v219 = 1026;
      *(_DWORD *)v220 = v182;
      *(_WORD *)&v220[4] = 1026;
      *(_DWORD *)&v220[6] = v183;
      __int16 v184 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)", "%s\n", v184);
      if (v184 != buf) {
        free(v184);
      }
    }
    BOOL result = 1;
    *(unsigned char *)(a1 + 64) = 1;
    *(void *)(a1 + 152) = 0xBFF0000000000000;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 20_Block_object_dispose(&STACK[0x850], 8) = 0u;
    *(unsigned char *)(a1 + 144) = 1;
    *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x850], 8) = 0;
    *(void *)(a1 + 72) = 0xBFF0000000000000;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0xBFF0000000000000;
    *(void *)(a1 + 12_Block_object_dispose(&STACK[0x850], 8) = 0;
    *(_DWORD *)(a1 + 136) = 0;
    __int16 v19 = (unsigned char *)v2[1];
    if ((unsigned char *)*v2 != v19)
    {
      float v20 = (float *)(*v2 + 64);
      double v21 = 0.3;
      double v22 = 0.001;
      double v23 = 2.0;
      do
      {
        *(void *)(a1 + 376) = 0;
        if (*((unsigned char *)v20 - 1))
        {
          float v24 = *(v20 - 12);
          if (v24 > 0.0)
          {
            double v25 = (float)(*(v20 - 9) / v24);
            double v26 = *(double *)(a1 + 352);
            double v27 = *((double *)v20 - 7);
            if (v26 > 0.0 && vabdd_f64(v26, v27) < v23) {
              *(double *)(a1 + 376) = vabdd_f64(v25, *(double *)(a1 + 360));
            }
            *(double *)(a1 + 352) = v27;
            *(double *)(a1 + 360) = v25;
            *(void *)(a1 + 36_Block_object_dispose(&STACK[0x850], 8) = 0x3FB70A3D70A3D70ALL;
          }
        }
        if (*(unsigned char *)v20)
        {
          float v28 = *(v20 - 12);
          if (v28 > 0.0)
          {
            *(void *)std::string buf = *((void *)v20 - 4);
            *(float *)&uint8_t buf[8] = *(v20 - 6);
            sub_1005A731C((unsigned __int8 *)(a1 + 64), (float *)buf, (double *)v20 - 7, *((unsigned __int8 *)v20 - 3), v28);
            float v29 = hypotf(*(v20 - 11), *(v20 - 10));
            double v30 = *(double *)(a1 + 120);
            if (v30 > 0.0)
            {
              float v31 = v29;
              float v32 = *(v20 - 12);
              if (hypotf(*(float *)(a1 + 104), *(float *)(a1 + 108)) / v30 > v21)
              {
                double v33 = (float)(v31 / v32);
                if (!*((unsigned char *)v20 - 1) || v33 < v22)
                {
                  if (v11[162] != -1) {
                    dispatch_once(&qword_102419510, &stru_1022BCC80);
                  }
                  __int16 v34 = v12[163];
                  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
                  {
                    double v210 = v22;
                    double v213 = v21;
                    uint64_t v35 = *((void *)v20 - 7);
                    int v36 = *((unsigned __int8 *)v20 - 1);
                    float v37 = *(v20 - 11);
                    float v38 = *(v20 - 10);
                    int v39 = *(unsigned __int8 *)v20;
                    float v41 = *(v20 - 9);
                    float v40 = *(v20 - 8);
                    float v43 = *(v20 - 7);
                    float v42 = *(v20 - 6);
                    double v44 = *(double *)(a1 + 120);
                    double v45 = 0.0;
                    if (v44 > 0.0) {
                      double v45 = hypotf(*(float *)(a1 + 104), *(float *)(a1 + 108)) / v44;
                    }
                    *(_DWORD *)std::string buf = 134351616;
                    *(void *)&uint8_t buf[4] = v35;
                    *(_WORD *)&unsigned char buf[12] = 1026;
                    *(_DWORD *)&unsigned char buf[14] = v36;
                    *(_WORD *)&buf[18] = 2050;
                    *(double *)&buf[20] = v37;
                    *(_WORD *)&unsigned char buf[28] = 2050;
                    *(double *)&buf[30] = v38;
                    *(_WORD *)&unsigned char buf[38] = 2050;
                    *(double *)&buf[40] = v41;
                    *(_WORD *)&buf[48] = 1026;
                    *(_DWORD *)&buf[50] = v39;
                    *(_WORD *)&buf[54] = 2050;
                    *(double *)&buf[56] = v40;
                    *(_WORD *)&buf[64] = 2050;
                    *(double *)&buf[66] = v43;
                    *(_WORD *)&buf[74] = 2050;
                    *(double *)&buf[76] = v42;
                    *(_WORD *)&buf[84] = 2050;
                    *(double *)&buf[86] = v33;
                    *(_WORD *)&buf[94] = 2050;
                    *(double *)&uint8_t buf[96] = v45;
                    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "InertialOdometry,PDR,VDR xcheck detected vehicular,mct,%{public}.3f,isPDRValid,%{public}d,dPosXYZ_m,%{public}.3f,%{public}.3f,%{public}.3f,isVDRValid,%{public}d,dVelXYZ_mps,%{public}.3f,%{public}.3f,%{public}.3f,GDis_m,%{public}.3f,GSpeedRate_mps2,%{public}.3f", buf, 0x68u);
                    BOOL v11 = &qword_102419000;
                    double v12 = &qword_102419000;
                    double v22 = v210;
                    double v21 = v213;
                    double v23 = 2.0;
                  }
                  if (sub_10013D1A0(115, 2))
                  {
                    double v211 = v22;
                    double v214 = v21;
                    bzero(buf, 0x65CuLL);
                    if (v11[162] != -1) {
                      dispatch_once(&qword_102419510, &stru_1022BCC80);
                    }
                    uint64_t v47 = *((void *)v20 - 7);
                    int v48 = *((unsigned __int8 *)v20 - 1);
                    float v49 = *(v20 - 11);
                    float v50 = *(v20 - 10);
                    int v51 = *(unsigned __int8 *)v20;
                    float v53 = *(v20 - 9);
                    float v52 = *(v20 - 8);
                    double v54 = *(double *)(a1 + 120);
                    double v55 = 0.0;
                    float v56 = *(v20 - 7);
                    float v57 = *(v20 - 6);
                    if (v54 > 0.0) {
                      double v55 = hypotf(*(float *)(a1 + 104), *(float *)(a1 + 108)) / v54;
                    }
                    *(_DWORD *)v218 = 134351616;
                    *(void *)&v218[4] = v47;
                    __int16 v219 = 1026;
                    *(_DWORD *)v220 = v48;
                    *(_WORD *)&v220[4] = 2050;
                    *(double *)&v220[6] = v49;
                    *(_WORD *)&v220[14] = 2050;
                    *(double *)&v220[16] = v50;
                    *(_WORD *)&v220[24] = 2050;
                    *(double *)&v220[26] = v53;
                    *(_WORD *)&v220[34] = 1026;
                    *(_DWORD *)&v220[36] = v51;
                    *(_WORD *)&v220[40] = 2050;
                    *(double *)&v220[42] = v52;
                    *(_WORD *)&v220[50] = 2050;
                    *(double *)&v220[52] = v56;
                    *(_WORD *)&v220[60] = 2050;
                    *(double *)&v220[62] = v57;
                    *(_WORD *)&v220[70] = 2050;
                    *(double *)&v220[72] = v33;
                    *(_WORD *)&v220[80] = 2050;
                    *(double *)&v220[82] = v55;
                    __int16 v58 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)", "%s\n", v58);
                    BOOL v11 = &qword_102419000;
                    double v12 = &qword_102419000;
                    double v22 = v211;
                    double v21 = v214;
                    double v23 = 2.0;
                    if (v58 != buf) {
                      free(v58);
                    }
                  }
                  *(_DWORD *)(a1 + 392) = 4;
                  *(void *)(a1 + 384) = *((void *)v20 - 7);
                }
              }
            }
          }
        }
        double v46 = v20 + 2;
        v20 += 18;
      }
      while (v46 != v19);
      return 1;
    }
    return result;
  }
  double v63 = *(double *)(a1 + 56);
  uint64_t v215 = v2;
  if (v63 < 0.0)
  {
    unint64_t v64 = 0;
LABEL_81:
    unint64_t v73 = 0x8E38E38E38E38E39 * ((uint64_t)(v2[1] - *v2) >> 3) - v64;
    unint64_t v74 = *(void *)(a1 + 40);
    if (v74 > 0x1E || v73 >= 30 - v74)
    {
      unint64_t v75 = v74 + v73;
      uint64_t v76 = v75 - 30;
      if (v75 != 30)
      {
        unint64_t v77 = *(void *)(a1 + 32);
        uint64_t v78 = *(void *)(a1 + 8);
        __int16 v79 = (void *)(v78 + 8 * (v77 / 0x38));
        if (*(void *)(a1 + 16) == v78) {
          int v80 = 0;
        }
        else {
          int v80 = (char *)(*v79 + 72 * (v77 % 0x38));
        }
        *(void *)std::string buf = v78 + 8 * (v77 / 0x38);
        *(void *)&uint8_t buf[8] = v80;
        sub_1005AACC4(buf, v76);
        sub_1005A92F0((void *)a1, v79, v80, *(void **)buf, *(char **)&buf[8]);
      }
    }
    *(unsigned char *)(a1 + 144) = 1;
    *(void *)(a1 + 152) = 0xBFF0000000000000;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 20_Block_object_dispose(&STACK[0x850], 8) = 0u;
    *(unsigned char *)(a1 + 64) = 1;
    unint64_t v212 = (unsigned __int8 *)(a1 + 144);
    *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x850], 8) = 0;
    *(void *)(a1 + 72) = 0xBFF0000000000000;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0xBFF0000000000000;
    *(void *)(a1 + 12_Block_object_dispose(&STACK[0x850], 8) = 0;
    *(_DWORD *)(a1 + 136) = 0;
    uint64_t v81 = *v2;
    if (v64 >= 0x8E38E38E38E38E39 * ((uint64_t)(v2[1] - *v2) >> 3)) {
      goto LABEL_139;
    }
    uint64_t v216 = 0;
    uint64_t v82 = 72 * v64 + 64;
    do
    {
      uint64_t v83 = v81 + v82;
      if (!*(unsigned char *)(v81 + v82 - 1)) {
        goto LABEL_100;
      }
      int v84 = *(unsigned __int8 *)(v83 - 3);
      if (v84 != *(unsigned __int8 *)(a1 + 48))
      {
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022BCC80);
        }
        __int16 v85 = qword_102419518;
        if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v86 = *(void *)(a1 + 56);
          uint64_t v87 = *(void *)(v81 + v82 - 56);
          int v88 = *(unsigned __int8 *)(a1 + 48);
          int v89 = *(unsigned __int8 *)(v83 - 3);
          *(_DWORD *)std::string buf = 134349824;
          *(void *)&uint8_t buf[4] = v86;
          *(_WORD *)&unsigned char buf[12] = 2050;
          *(void *)&unsigned char buf[14] = v87;
          *(_WORD *)&buf[22] = 1026;
          *(_DWORD *)&unsigned char buf[24] = v88;
          *(_WORD *)&unsigned char buf[28] = 1026;
          *(_DWORD *)&buf[30] = v89;
          _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEBUG, "InertialOdometry,ref frame change detected;prev IO mct,%{public}.3f,curr IO mct,%{public}.3f,prevRefF,%{publ"
            "ic}d,currRefF,%{public}d",
            buf,
            0x22u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419510 != -1) {
            dispatch_once(&qword_102419510, &stru_1022BCC80);
          }
          uint64_t v138 = *(void *)(a1 + 56);
          uint64_t v139 = *(void *)(v81 + v82 - 56);
          int v140 = *(unsigned __int8 *)(a1 + 48);
          int v141 = *(unsigned __int8 *)(v83 - 3);
          *(_DWORD *)v218 = 134349824;
          *(void *)&v218[4] = v138;
          __int16 v219 = 2050;
          *(void *)v220 = v139;
          *(_WORD *)&v220[8] = 1026;
          *(_DWORD *)&v220[10] = v140;
          *(_WORD *)&v220[14] = 1026;
          *(_DWORD *)&v220[16] = v141;
          __int16 v142 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)", "%s\n", v142);
          if (v142 != buf) {
            free(v142);
          }
        }
        sub_1005A91D0(a1);
        *(void *)(a1 + 32_Block_object_dispose(&STACK[0x850], 8) = 0xBFF0000000000000;
        int v84 = *(unsigned __int8 *)(v83 - 3);
        *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = v84;
        if (!*(unsigned char *)(v83 - 1)) {
          goto LABEL_100;
        }
      }
      uint64_t v90 = v81 + v82;
      float v91 = *(float *)(v81 + v82 - 48);
      if (v91 <= 0.0 || (float)(hypotf(*(float *)(v90 - 44), *(float *)(v90 - 40)) / v91) <= 9.0)
      {
        *(void *)std::string buf = *(void *)(v90 - 32);
        *(_DWORD *)&uint8_t buf[8] = *(_DWORD *)(v90 - 24);
        double v103 = (uint64_t *)(v90 - 56);
        sub_1005A731C((unsigned __int8 *)(a1 + 64), (float *)buf, (double *)(v90 - 56), v84, v91);
        *(void *)std::string buf = *(void *)(v90 - 44);
        *(_DWORD *)&uint8_t buf[8] = *(_DWORD *)(v90 - 36);
        sub_1005A7208(v212, (float *)buf, (double *)(v90 - 56), *(unsigned __int8 *)(v83 - 3), *(float *)(v90 - 48));
        *(void *)std::string buf = *(void *)(v90 - 44);
        *(_DWORD *)&uint8_t buf[8] = *(_DWORD *)(v90 - 36);
        sub_1005A7208((unsigned __int8 *)(a1 + 232), (float *)buf, (double *)(v90 - 56), *(unsigned __int8 *)(v83 - 3), *(float *)(v90 - 48));
        sub_1005A959C(a1, v83 - 64);
        sub_1005A9B60((void *)a1, v83 - 64);
        unint64_t v104 = *(void *)(a1 + 40);
        if (v104 >= 0x1E)
        {
          ++*(void *)(a1 + 32);
          *(void *)(a1 + 40) = v104 - 1;
          sub_100507AAC(a1, 1);
        }
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022BCC80);
        }
        double v105 = qword_102419518;
        if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v106 = *v103;
          float v107 = *(float *)(v90 - 44);
          double v108 = *(float *)(v90 - 48);
          int v206 = *(unsigned __int8 *)(v83 - 1);
          int v207 = *(unsigned __int8 *)(v83 - 3);
          double v109 = v107;
          float v110 = *(float *)(v90 - 40);
          double v111 = v110;
          double v112 = *(float *)(v90 - 36);
          float v113 = *(float *)(v90 - 32);
          float v114 = *(float *)(v90 - 28);
          double v208 = *(float *)(v90 - 24);
          int v115 = *(unsigned __int8 *)(v81 + v82);
          double v116 = hypotf(v107, v110);
          float v117 = hypotf(v113, v114);
          *(_DWORD *)std::string buf = 134352128;
          *(void *)&uint8_t buf[4] = v106;
          size_t v2 = v215;
          *(_WORD *)&unsigned char buf[12] = 1026;
          *(_DWORD *)&unsigned char buf[14] = v207;
          *(_WORD *)&buf[18] = 2050;
          *(double *)&buf[20] = v108;
          *(_WORD *)&unsigned char buf[28] = 1026;
          *(_DWORD *)&buf[30] = v206;
          *(_WORD *)&unsigned char buf[34] = 2050;
          *(double *)&buf[36] = v109;
          *(_WORD *)&buf[44] = 2050;
          *(double *)&buf[46] = v111;
          *(_WORD *)&buf[54] = 2050;
          *(double *)&buf[56] = v112;
          *(_WORD *)&buf[64] = 1026;
          *(_DWORD *)&buf[66] = v115;
          *(_WORD *)&buf[70] = 2050;
          *(double *)&buf[72] = v113;
          *(_WORD *)&buf[80] = 2050;
          *(double *)&buf[82] = v114;
          *(_WORD *)&buf[90] = 2050;
          *(double *)&buf[92] = v208;
          *(_WORD *)&buf[100] = 2050;
          *(double *)&buf[102] = v116;
          __int16 v224 = 2050;
          double v225 = v117;
          _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEBUG, "InertialOdometry,PDR,consumed IO sample,mct,%{public}.3f,RefF,%{public}d,sample_interval_s,%{public}.3f,isPDRValid,%{public}d,dPosXYZ_m,%{public}.3f,%{public}.3f,%{public}.3f,isVDRValid,%{public}d,dVelXYZ_mps,%{public}.3f,%{public}.3f,%{public}.3f,GDis,%{public}.3f,GSpeedRate,%{public}.3f", buf, 0x78u);
        }
        ++v216;
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419510 != -1) {
            dispatch_once(&qword_102419510, &stru_1022BCC80);
          }
          uint64_t v127 = *v103;
          int v128 = *(unsigned __int8 *)(v83 - 3);
          float v129 = *(float *)(v90 - 44);
          double v130 = *(float *)(v90 - 48);
          float v131 = *(float *)(v90 - 40);
          double v132 = *(float *)(v90 - 36);
          float v133 = *(float *)(v90 - 32);
          float v134 = *(float *)(v90 - 28);
          double v209 = *(float *)(v90 - 24);
          int v135 = *(unsigned __int8 *)(v83 - 1);
          int v136 = *(unsigned __int8 *)(v81 + v82);
          *(_DWORD *)v218 = 134352128;
          *(void *)&v218[4] = v127;
          __int16 v219 = 1026;
          *(_DWORD *)v220 = v128;
          *(_WORD *)&v220[4] = 2050;
          *(double *)&v220[6] = v130;
          *(_WORD *)&v220[14] = 1026;
          *(_DWORD *)&v220[16] = v135;
          *(_WORD *)&v220[20] = 2050;
          *(double *)&v220[22] = v129;
          *(_WORD *)&v220[30] = 2050;
          *(double *)&v220[32] = v131;
          *(_WORD *)&v220[40] = 2050;
          *(double *)&v220[42] = v132;
          *(_WORD *)&v220[50] = 1026;
          *(_DWORD *)&v220[52] = v136;
          *(_WORD *)&v220[56] = 2050;
          *(double *)&v220[58] = v133;
          *(_WORD *)&v220[66] = 2050;
          *(double *)&v220[68] = v134;
          *(_WORD *)&v220[76] = 2050;
          *(double *)&v220[78] = v209;
          *(_WORD *)&v220[86] = 2050;
          *(double *)&v220[88] = hypotf(v129, v131);
          __int16 v221 = 2050;
          double v222 = hypotf(v133, v134);
          int v137 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)", "%s\n", v137);
          size_t v2 = v215;
          if (v137 != buf) {
            free(v137);
          }
        }
      }
      else
      {
LABEL_100:
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022BCC80);
        }
        double v92 = qword_102419518;
        if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v93 = *(void *)(a1 + 56);
          uint64_t v94 = *(void *)(v81 + v82 - 56);
          int v95 = *(unsigned __int8 *)(v81 + v82 - 3);
          int v96 = *(unsigned __int8 *)(v83 - 1);
          float v97 = *(float *)(v81 + v82 - 44);
          double v98 = *(float *)(v81 + v82 - 48);
          double v99 = v97;
          float v100 = *(float *)(v81 + v82 - 40);
          double v101 = v100;
          float v102 = hypotf(v97, v100);
          *(_DWORD *)std::string buf = 134350848;
          *(void *)&uint8_t buf[4] = v93;
          *(_WORD *)&unsigned char buf[12] = 2050;
          *(void *)&unsigned char buf[14] = v94;
          *(_WORD *)&buf[22] = 1026;
          *(_DWORD *)&unsigned char buf[24] = v95;
          *(_WORD *)&unsigned char buf[28] = 1026;
          *(_DWORD *)&buf[30] = v96;
          size_t v2 = v215;
          *(_WORD *)&unsigned char buf[34] = 2050;
          *(double *)&buf[36] = v98;
          *(_WORD *)&buf[44] = 2050;
          *(double *)&buf[46] = v99;
          *(_WORD *)&buf[54] = 2050;
          *(double *)&buf[56] = v101;
          *(_WORD *)&buf[64] = 2050;
          *(double *)&buf[66] = v102;
          _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEBUG, "InertialOdometry,PDR,rejected dPos invalid/outlier sample;prev IO mct,%{public}.3f,curr IO mct,%{public}.3f,"
            "RefF,%{public}d,isValid,%{public}d,sample_interval,%{public}.3f,dPosX_m,%{public}.3f,dPosY_m,%{public}.3f,dP"
            "osXYnorm,%{public}.3f",
            buf,
            0x4Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419510 != -1) {
            dispatch_once(&qword_102419510, &stru_1022BCC80);
          }
          uint64_t v118 = *(void *)(a1 + 56);
          uint64_t v119 = v81 + v82;
          uint64_t v120 = *(void *)(v81 + v82 - 56);
          int v121 = *(unsigned __int8 *)(v81 + v82 - 3);
          int v122 = *(unsigned __int8 *)(v83 - 1);
          float v123 = *(float *)(v119 - 44);
          double v124 = *(float *)(v119 - 48);
          float v125 = *(float *)(v119 - 40);
          *(_DWORD *)v218 = 134350848;
          *(void *)&v218[4] = v118;
          __int16 v219 = 2050;
          *(void *)v220 = v120;
          *(_WORD *)&v220[8] = 1026;
          *(_DWORD *)&v220[10] = v121;
          *(_WORD *)&v220[14] = 1026;
          *(_DWORD *)&v220[16] = v122;
          *(_WORD *)&v220[20] = 2050;
          *(double *)&v220[22] = v124;
          *(_WORD *)&v220[30] = 2050;
          *(double *)&v220[32] = v123;
          *(_WORD *)&v220[40] = 2050;
          *(double *)&v220[42] = v125;
          *(_WORD *)&v220[50] = 2050;
          *(double *)&v220[52] = hypotf(v123, v125);
          __int16 v126 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)", "%s\n", v126);
          size_t v2 = v215;
          if (v126 != buf) {
            free(v126);
          }
        }
        ++*(_DWORD *)(a1 + 436);
      }
      ++v64;
      uint64_t v81 = *v2;
      v82 += 72;
    }
    while (v64 < 0x8E38E38E38E38E39 * ((uint64_t)(v2[1] - *v2) >> 3));
    if (v216)
    {
      double v143 = *(double *)(a1 + 192) + *(double *)(a1 + 184);
      double v144 = 0.0;
      double v145 = 0.0;
      if (v143 > 0.0) {
        double v145 = (float)((float)(*(float *)(a1 + 180) + *(float *)(a1 + 168)) - *(float *)(a1 + 220)) / v143;
      }
      double v146 = *(double *)(a1 + 152);
      double v147 = v146 - v143;
      *(void *)(a1 + 376) = 0;
      double v148 = *(double *)(a1 + 352);
      if (v148 > 0.0 && vabdd_f64(v148, v147) < 2.0)
      {
        double v144 = vabdd_f64(v145, *(double *)(a1 + 360));
        *(double *)(a1 + 376) = v144;
      }
      double v149 = hypotf((float)(*(float *)(a1 + 172) + *(float *)(a1 + 160)) - *(float *)(a1 + 212), (float)(*(float *)(a1 + 176) + *(float *)(a1 + 164)) - *(float *)(a1 + 216));
      if (v149 >= 0.001)
      {
        if (v143 * 0.25 <= v149)
        {
          if (v143 * 3.5 >= v149) {
            int v152 = 3;
          }
          else {
            int v152 = 4;
          }
        }
        else
        {
          int v152 = 2;
        }
        *(_DWORD *)(a1 + 392) = v152;
      }
      else
      {
        double v150 = *(double *)(a1 + 96);
        if (v150 > 0.0 && hypotf(*(float *)(a1 + 80), *(float *)(a1 + 84)) / v150 > 0.3
          || (double v151 = *(double *)(a1 + 120), v151 > 0.0)
          && hypotf(*(float *)(a1 + 104), *(float *)(a1 + 108)) / v151 > 0.3
          || v144 > 0.3)
        {
          *(_DWORD *)(a1 + 392) = 4;
          if (qword_102419510 != -1) {
            dispatch_once(&qword_102419510, &stru_1022BCC80);
          }
          __int16 v153 = qword_102419518;
          if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v154 = *(void *)(a1 + 152);
            double v155 = *(double *)(a1 + 120);
            double v156 = 0.0;
            double v157 = 0.0;
            if (v155 > 0.0) {
              double v157 = hypotf(*(float *)(a1 + 104), *(float *)(a1 + 108)) / v155;
            }
            double v158 = *(double *)(a1 + 96);
            if (v158 > 0.0) {
              double v156 = hypotf(*(float *)(a1 + 80), *(float *)(a1 + 84)) / v158;
            }
            uint64_t v159 = *(void *)(a1 + 360);
            double v160 = *(double *)(a1 + 352);
            double v161 = vabdd_f64(v147, v160);
            BOOL v162 = v160 <= 0.0;
            double v163 = -1.0;
            if (!v162) {
              double v163 = v161;
            }
            *(_DWORD *)std::string buf = 134350592;
            *(void *)&uint8_t buf[4] = v154;
            *(_WORD *)&unsigned char buf[12] = 2050;
            *(double *)&unsigned char buf[14] = v157;
            *(_WORD *)&buf[22] = 2050;
            *(double *)&unsigned char buf[24] = v156;
            *(_WORD *)&unsigned char buf[32] = 2050;
            *(double *)&unsigned char buf[34] = v158;
            *(_WORD *)&buf[42] = 2050;
            *(void *)&buf[44] = v159;
            *(_WORD *)&buf[52] = 2050;
            *(double *)&buf[54] = v145;
            *(_WORD *)&buf[62] = 2050;
            *(double *)&buf[64] = v163;
            _os_log_impl((void *)&_mh_execute_header, v153, OS_LOG_TYPE_DEBUG, "InertialOdometry,PDR,VDR xcheck detected non-stationary,mct,%{public}.3f,horizSpeedRate_mps2,%{public}.3f,horizSpeedRateCumSum_mps2,%{public}.3f,dtCumSum_s,%{public}.3f,lastPDRVVel_mps,%{public}.3f,currPDRVVel,%{public}.3f,VVel_dt_s,%{public}.3f", buf, 0x48u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419510 != -1) {
              dispatch_once(&qword_102419510, &stru_1022BCC80);
            }
            uint64_t v195 = *(void *)(a1 + 152);
            double v196 = *(double *)(a1 + 120);
            double v197 = 0.0;
            double v198 = 0.0;
            if (v196 > 0.0) {
              double v198 = hypotf(*(float *)(a1 + 104), *(float *)(a1 + 108)) / v196;
            }
            double v199 = *(double *)(a1 + 96);
            if (v199 > 0.0) {
              double v197 = hypotf(*(float *)(a1 + 80), *(float *)(a1 + 84)) / v199;
            }
            uint64_t v200 = *(void *)(a1 + 360);
            double v201 = *(double *)(a1 + 352);
            double v202 = fabs(v147 - v201);
            if (v201 <= 0.0) {
              double v202 = -1.0;
            }
            *(_DWORD *)v218 = 134350592;
            *(void *)&v218[4] = v195;
            __int16 v219 = 2050;
            *(double *)v220 = v198;
            *(_WORD *)&v220[8] = 2050;
            *(double *)&v220[10] = v197;
            *(_WORD *)&v220[18] = 2050;
            *(double *)&v220[20] = v199;
            *(_WORD *)&v220[28] = 2050;
            *(void *)&v220[30] = v200;
            *(_WORD *)&v220[38] = 2050;
            *(double *)&v220[40] = v145;
            *(_WORD *)&v220[48] = 2050;
            *(double *)&v220[50] = v202;
            long long v203 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)", "%s\n", v203);
            if (v203 != buf) {
              free(v203);
            }
            size_t v2 = v215;
          }
          ++*(_DWORD *)(a1 + 424);
          double v146 = *(double *)(a1 + 152);
        }
        else
        {
          *(_DWORD *)(a1 + 392) = 1;
          ++*(_DWORD *)(a1 + 428);
        }
      }
      *(double *)(a1 + 384) = v146;
    }
    else
    {
LABEL_139:
      *(void *)(a1 + 384) = 0xBFF0000000000000;
      *(_DWORD *)(a1 + 392) = 0;
    }
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022BCC80);
    }
    __int16 v164 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      double v165 = *(double *)(a1 + 56);
      double v166 = *(double *)(a1 + 152);
      int v167 = *(_DWORD *)(a1 + 392);
      uint64_t v168 = *(void *)(a1 + 96);
      float v169 = hypotf(*(float *)(a1 + 80) + *(float *)(a1 + 128), *(float *)(a1 + 84) + *(float *)(a1 + 132));
      double v170 = *(double *)(a1 + 192) + *(double *)(a1 + 184);
      double v171 = v169;
      double v172 = hypotf((float)(*(float *)(a1 + 172) + *(float *)(a1 + 160)) - *(float *)(a1 + 212), (float)(*(float *)(a1 + 176) + *(float *)(a1 + 164)) - *(float *)(a1 + 216));
      double v173 = (float)((float)(*(float *)(a1 + 180) + *(float *)(a1 + 168)) - *(float *)(a1 + 220));
      double v174 = *(double *)(a1 + 280) + *(double *)(a1 + 272);
      float v175 = hypotf((float)(*(float *)(a1 + 260) + *(float *)(a1 + 248)) - *(float *)(a1 + 300), (float)(*(float *)(a1 + 264) + *(float *)(a1 + 252)) - *(float *)(a1 + 304));
      *(_DWORD *)std::string buf = 134351616;
      *(double *)&uint8_t buf[4] = v165;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(double *)&unsigned char buf[14] = v166;
      *(_WORD *)&buf[22] = 2050;
      *(void *)&unsigned char buf[24] = vabdd_f64(v166, v165);
      *(_WORD *)&unsigned char buf[32] = 1026;
      *(_DWORD *)&unsigned char buf[34] = v167;
      *(_WORD *)&unsigned char buf[38] = 2050;
      *(void *)&buf[40] = v168;
      *(_WORD *)&buf[48] = 2050;
      *(double *)&buf[50] = v171;
      *(_WORD *)&buf[58] = 2050;
      *(double *)&buf[60] = v170;
      *(_WORD *)&std::string buf[68] = 2050;
      *(double *)&buf[70] = v172;
      *(_WORD *)&buf[78] = 2050;
      *(double *)&buf[80] = v173;
      *(_WORD *)&buf[88] = 2050;
      *(double *)&buf[90] = v174;
      *(_WORD *)&buf[98] = 2050;
      *(double *)&buf[100] = v175;
      _os_log_impl((void *)&_mh_execute_header, v164, OS_LOG_TYPE_DEBUG, "InertialOdometry,Batch IO cumsum,prev IO mct,%{public}.3f,curr IO mct,%{public}.3f,dTime,%{public}.3f,IO_Context,%{public}d,HorizSpeed_dt_s,%{public}.3f,HSpeed_mps,%{public}.3f,GDistMoved_dt_s,%{public}.3f,GDis_m,%{public}.3f,VDis_m,%{public}.3f,CumSumGDistMoved_dt_s,%{public}.3f,CumSumGDist_m,%{public}.3f", buf, 0x6Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022BCC80);
      }
      double v185 = *(double *)(a1 + 56);
      double v186 = *(double *)(a1 + 152);
      int v187 = *(_DWORD *)(a1 + 392);
      uint64_t v188 = *(void *)(a1 + 96);
      double v189 = hypotf(*(float *)(a1 + 80) + *(float *)(a1 + 128), *(float *)(a1 + 84) + *(float *)(a1 + 132));
      double v190 = *(double *)(a1 + 192) + *(double *)(a1 + 184);
      double v191 = sub_1005A9C74((float *)v212);
      double v192 = (float)((float)(*(float *)(a1 + 180) + *(float *)(a1 + 168)) - *(float *)(a1 + 220));
      double v193 = *(double *)(a1 + 280) + *(double *)(a1 + 272);
      *(_DWORD *)v218 = 134351616;
      *(double *)&v218[4] = v185;
      __int16 v219 = 2050;
      *(double *)v220 = v186;
      *(_WORD *)&v220[8] = 2050;
      *(void *)&v220[10] = vabdd_f64(v186, v185);
      *(_WORD *)&v220[18] = 1026;
      *(_DWORD *)&v220[20] = v187;
      *(_WORD *)&v220[24] = 2050;
      *(void *)&v220[26] = v188;
      *(_WORD *)&v220[34] = 2050;
      *(double *)&v220[36] = v189;
      *(_WORD *)&v220[44] = 2050;
      *(double *)&v220[46] = v190;
      *(_WORD *)&v220[54] = 2050;
      *(double *)&v220[56] = v191;
      *(_WORD *)&v220[64] = 2050;
      *(double *)&v220[66] = v192;
      *(_WORD *)&v220[74] = 2050;
      *(double *)&v220[76] = v193;
      *(_WORD *)&v220[84] = 2050;
      *(void *)&v220[86] = sub_1005A9C74((float *)(a1 + 232));
      long long v194 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)", "%s\n", v194);
      if (v194 != buf) {
        free(v194);
      }
      size_t v2 = v215;
    }
    double v176 = *(double *)(v2[1] - 64);
    *(double *)(a1 + 56) = v176;
    double v177 = *(double *)(a1 + 192) + *(double *)(a1 + 184);
    if (v177 <= 0.0)
    {
      double v178 = 0.0;
      double v179 = -1.0;
      double v176 = -1.0;
    }
    else
    {
      double v178 = (float)((float)(*(float *)(a1 + 180) + *(float *)(a1 + 168)) - *(float *)(a1 + 220)) / v177;
      double v179 = 0.09;
    }
    *(double *)(a1 + 352) = v176;
    *(double *)(a1 + 360) = v178;
    BOOL result = 1;
    *(double *)(a1 + 36_Block_object_dispose(&STACK[0x850], 8) = v179;
    return result;
  }
  uint64_t v65 = v2[1];
  if (v63 < *(double *)(v65 - 64))
  {
    uint64_t v66 = *v2;
    if (*v2 == v65)
    {
      unint64_t v64 = 0;
    }
    else
    {
      unint64_t v64 = 0;
      do
      {
        if (v63 < *(double *)(v66 + 8)) {
          break;
        }
        ++v64;
        v66 += 72;
      }
      while (v66 != v65);
    }
    int v70 = *(void **)(a1 + 400);
    *(void *)std::string buf = 0xBFF0000000000000;
    if (!sub_1000171E8(v70, (double *)buf) && vabdd_f64(*(double *)(*v2 + 72 * v64 + 8), *(double *)(a1 + 56)) > 300.0)
    {
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022BCC80);
      }
      __int16 v71 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
      {
        double v72 = *(double *)(a1 + 56);
        *(void *)&unsigned char buf[14] = *(void *)(*v2 + 72 * v64 + 8);
        *(double *)&uint8_t buf[4] = v72;
        *(_DWORD *)std::string buf = 134349568;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(_WORD *)&buf[22] = 2050;
        *(void *)&unsigned char buf[24] = vabdd_f64(*(double *)&buf[14], v72);
        _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "InertialOdometry,large gap in IO data while not static,resetting,prev IO mct,%{public}.3f,curr IO mct,%{public}.3f,dTime,%{public}.3f", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022BCC80);
        }
        double v204 = *(double *)(a1 + 56);
        *(void *)v220 = *(void *)(*v2 + 72 * v64 + 8);
        *(double *)&v218[4] = v204;
        *(_DWORD *)v218 = 134349568;
        __int16 v219 = 2050;
        *(_WORD *)&v220[8] = 2050;
        *(void *)&v220[10] = vabdd_f64(*(double *)v220, v204);
        long long v205 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)", "%s\n", v205);
        if (v205 != buf) {
          free(v205);
        }
      }
      ++*(_DWORD *)(a1 + 432);
      sub_1005A91D0(a1);
    }
    goto LABEL_81;
  }
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022BCC80);
  }
  __int16 v67 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
  {
    double v68 = *(double *)(a1 + 56);
    *(void *)&unsigned char buf[14] = *(void *)(v2[1] - 64);
    *(double *)&uint8_t buf[4] = v68;
    *(_DWORD *)std::string buf = 134349568;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(_WORD *)&buf[22] = 2050;
    *(double *)&unsigned char buf[24] = *(double *)&buf[14] - v68;
    _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "InertialOdometry,ignoring received overlapping IO data,prev IO mct,%{public}.3f,curr IO mct,%{public}.3f,dTime,%{public}.3f", buf, 0x20u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022BCC80);
    }
    double v69 = *(double *)(a1 + 56);
    *(void *)v220 = *(void *)(v2[1] - 64);
    *(double *)&v218[4] = v69;
    *(_DWORD *)v218 = 134349568;
    __int16 v219 = 2050;
    *(_WORD *)&v220[8] = 2050;
    *(double *)&v220[10] = *(double *)v220 - v69;
    __int16 v62 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::IOSamplesUpdate(const std::vector<CLPIOSample> &)", "%s\n", v62);
LABEL_53:
    if (v62 != buf) {
      free(v62);
    }
    return 0;
  }
  return result;
}

void sub_1005A91B8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

double sub_1005A91D0(uint64_t a1)
{
  size_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 16);
      size_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 28;
  }
  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v6 = 56;
  }
  *(void *)(a1 + 32) = v6;
LABEL_8:
  if (*(unsigned char *)(a1 + 416)) {
    *(unsigned char *)(a1 + 416) = 0;
  }
  *(void *)(a1 + 320) = 0xBFF0000000000000;
  *(void *)(a1 + 336) = 0xBFF0000000000000;
  *(void *)(a1 + 56) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 64) = 1;
  *(_DWORD *)(a1 + 65) = 0;
  *(_DWORD *)(a1 + 6_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)(a1 + 72) = 0xBFF0000000000000;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = 0uLL;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = 0uLL;
  *(unsigned char *)(a1 + 232) = 1;
  uint64_t v7 = a1 + 232;
  *(void *)(v7 - 80) = 0xBFF0000000000000;
  *(_OWORD *)(v7 - 72) = 0u;
  *(_OWORD *)(v7 - 56) = 0u;
  *(_OWORD *)(v7 - 40) = 0u;
  *(_OWORD *)(v7 - 24) = 0u;
  *(unsigned char *)(v7 - 8_Block_object_dispose(&STACK[0x850], 8) = 1;
  *(void *)(v7 + _Block_object_dispose(&STACK[0x850], 8) = 0xBFF0000000000000;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 4_Block_object_dispose(&STACK[0x850], 8) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(void *)(v7 + 152) = 0xBFF0000000000000;
  *(_DWORD *)(v7 + 160) = 0;
  double result = -1.0;
  *(_OWORD *)(v7 + 120) = xmmword_101D1C320;
  *(void *)(v7 + 136) = 0xBFF0000000000000;
  return result;
}

unint64_t sub_1005A92F0(void *a1, void *a2, char *a3, void *a4, char *a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 56 * (a4 - a2)
  }
       - 0x71C71C71C71C71C7 * ((uint64_t)&a5[-*a4] >> 3)
       + 0x71C71C71C71C71C7 * ((uint64_t)&a3[-*a2] >> 3);
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  double v9 = (char **)(v8 + 8 * (v7 / 0x38));
  if (a1[2] == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = &(*v9)[72 * (v7 % 0x38)];
  }
  if (a3 == v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = 56 * ((char **)a2 - v9)
  }
        - 0x71C71C71C71C71C7 * ((uint64_t)&a3[-*a2] >> 3)
        + 0x71C71C71C71C71C7 * ((v10 - *v9) >> 3);
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x38);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_1005AACC4(v24, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_1005AACC4(v24, v6);
      sub_1005AADF0(v9, v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], v24[0].n128_u64[0], (char *)v24[0].n128_u64[1], v24);
      uint64_t v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_100507AAC((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_1005AACC4(v24, v6);
      __n128 v13 = v24[0];
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      int v16 = (unsigned char **)(v15 + 8 * (v14 / 0x38));
      if (a1[2] == v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = &(*v16)[72 * (v14 % 0x38)];
      }
      v24[0] = v12;
      sub_1005AAFB8(v13.n128_u64[0], (unsigned char *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_1005AAD78(a1, 1) & 1) != 0)
        ;
    }
  }
  unint64_t v19 = a1[4];
  uint64_t v20 = a1[1];
  double v21 = (void *)(v20 + 8 * (v19 / 0x38));
  if (a1[2] == v20) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = *v21 + 72 * (v19 % 0x38);
  }
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_1005AACC4(v24, v11);
  return v24[0].n128_u64[0];
}

BOOL sub_1005A959C(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 63)) {
    return 0;
  }
  float v3 = *(float *)(a2 + 16);
  if (v3 <= 0.0) {
    return 0;
  }
  float v5 = *(float *)(a2 + 20);
  float v6 = *(float *)(a2 + 24);
  float v7 = hypotf(v5, v6);
  double v8 = v7;
  *(double *)(a1 + 320) = v7 / v3;
  double v9 = *(double *)(a1 + 336);
  if (v9 >= 0.0) {
    *(double *)(a1 + 32_Block_object_dispose(&STACK[0x850], 8) = v9;
  }
  if (v7 >= 0.5 && fabsf(v5) >= 0.005 && fabsf(v6) >= 0.005)
  {
    float v16 = atan2f(v6, v5);
    if (v16 >= 0.0) {
      double v17 = v16;
    }
    else {
      double v17 = v16 + 6.28318531;
    }
    double v18 = 6.28318531 - v17;
    if (v18 < 0.0 || v18 >= 6.28318531)
    {
      double v18 = fmod(v18, 6.28318531);
      if (v18 < 0.0) {
        double v18 = v18 + 6.28318531;
      }
    }
    double v19 = (float)(v3 * v3) * 0.09 * ((float)-v5 / (v8 * v8) * ((float)-v5 / (v8 * v8)))
        + v6 / (v8 * v8) * (v6 / (v8 * v8)) * ((float)(v3 * v3) * 0.09);
    *(double *)(a1 + 336) = v18;
    *(double *)(a1 + 344) = v19;
    if (v19 < 0.0) {
      *(void *)(a1 + 344) = qword_101D23980[*(unsigned char *)(a2 + 61) == 1];
    }
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022BCC80);
    }
    uint64_t v20 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v21 = *(void *)(a2 + 8);
      int v22 = *(unsigned __int8 *)(a2 + 61);
      uint64_t v23 = *(void *)(a1 + 320);
      double v24 = *(double *)(a1 + 336) * 57.2957795;
      double v25 = sqrt(*(double *)(a1 + 344)) * 57.2957795;
      double v26 = sub_1005A9C74((float *)(a1 + 144));
      double v27 = *(float *)(a2 + 20);
      double v28 = *(float *)(a2 + 24);
      *(_DWORD *)std::string buf = 134351104;
      uint64_t v31 = v21;
      __int16 v32 = 1026;
      *(_DWORD *)double v33 = v22;
      *(_WORD *)&void v33[4] = 2050;
      *(double *)&v33[6] = v8;
      *(_WORD *)&v33[14] = 2050;
      *(void *)&v33[16] = v23;
      *(_WORD *)&v33[24] = 2050;
      *(double *)&v33[26] = v24;
      __int16 v34 = 2050;
      double v35 = v25;
      __int16 v36 = 2050;
      double v37 = v26;
      __int16 v38 = 2050;
      double v39 = v27;
      __int16 v40 = 2050;
      double v41 = v28;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "InertialOdometry,PDR,estimated course,sample mct,%{public}.3f,RefF,%{public}d,GDistanceMoved_m,%{public}.3f,GSpeed_mps,%{public}.3f,Course_deg,%{public}.1f,CourseStdv_deg,%{public}.1f,BatchGDistMoved_m,%{public}.3f,PosX,%{public}.3f,dPosY,%{public}.3f", buf, 0x58u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022BCC80);
      }
      sub_1005A9C74((float *)(a1 + 144));
      float v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::estimateGroundSpeedAndCoursePDR(const CLPIOSample &)", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
    return 1;
  }
  else
  {
    *(void *)(a1 + 336) = 0xBFF0000000000000;
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022BCC80);
    }
    uint64_t v10 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = *(void *)(a2 + 8);
      double v12 = *(float *)(a2 + 20);
      double v13 = *(float *)(a2 + 24);
      *(_DWORD *)std::string buf = 134349824;
      uint64_t v31 = v11;
      __int16 v32 = 2050;
      *(double *)double v33 = v8;
      *(_WORD *)&v33[8] = 2050;
      *(double *)&v33[10] = v12;
      *(_WORD *)&v33[18] = 2050;
      *(double *)&v33[20] = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "InertialOdometry,PDR,cannot compute course,sample mct,%{public}.3f,GDistanceMoved,%{public}.3f,dPosX,%{public}.3f,dPosY,%{public}.3f", buf, 0x2Au);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022BCC80);
      }
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::estimateGroundSpeedAndCoursePDR(const CLPIOSample &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
      return 0;
    }
  }
  return result;
}

void sub_1005A9B54(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

__n128 sub_1005A9B60(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 56 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1005AB148(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x38)) + 72 * (v7 % 0x38);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v10 = *(_OWORD *)(a2 + 32);
  long long v11 = *(_OWORD *)(a2 + 48);
  *(void *)(v8 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)(v8 + 4_Block_object_dispose(&STACK[0x850], 8) = v11;
  *(__n128 *)(v8 + 16) = result;
  ++a1[5];
  return result;
}

double sub_1005A9C28(double *a1)
{
  if (a1[24] + a1[23] <= 0.0) {
    return -1.0;
  }
  else {
    return a1[7];
  }
}

double sub_1005A9C74(float *a1)
{
  return hypotf((float)(a1[7] + a1[4]) - a1[17], (float)(a1[8] + a1[5]) - a1[18]);
}

double sub_1005A9CAC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 320);
  *(void *)a2 = *(void *)(a1 + 56);
  *(void *)(a2 + _Block_object_dispose(&STACK[0x850], 8) = v2;
  *(void *)(a2 + 16) = 0x3FB70A3D70A3D70ALL;
  double result = *(double *)(a1 + 336);
  if (result <= -1.0) {
    double result = *(double *)(a1 + 328);
  }
  double v4 = *(double *)(a1 + 344);
  uint64_t v5 = 0x3FB1A9FBE76C8B44;
  if (v4 >= 0.069) {
    uint64_t v5 = *(void *)(a1 + 344);
  }
  *(double *)(a2 + 24) = result;
  *(void *)(a2 + 32) = v5;
  if (*(unsigned char *)(a1 + 48) == 1)
  {
    uint64_t v6 = (double *)(a1 + 344);
    if (v4 < 9.8696044) {
      uint64_t v6 = (double *)&unk_101D23990;
    }
    double result = *v6;
    *(double *)(a2 + 32) = *v6;
  }
  return result;
}

BOOL sub_1005A9D2C(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(a1 + 40);
  if (v5 > 1)
  {
    double v10 = *a2;
    unint64_t v11 = v5 + *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v13 = *(void *)(v12 + 8 * ((v11 - 1) / 0x38));
    unint64_t v14 = (v11 - 1) % 0x38;
    double v15 = *(double *)(v13 + 72 * v14 + 8);
    if (*a2 < v15 || *a2 + -1.5 > v15)
    {
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022BCC80);
      }
      double v17 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
      {
        double v18 = *a2;
        unint64_t v19 = *(void *)(a1 + 40) + *(void *)(a1 + 32) - 1;
        uint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 8) + 8 * (v19 / 0x38)) + 72 * (v19 % 0x38) + 8);
        *(_DWORD *)std::string buf = 134349312;
        double v75 = v18;
        __int16 v76 = 2050;
        *(void *)unint64_t v77 = v20;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "InertialOdometry,Out of range extrapolation timestamp to extrapolate speed for,mct,%{public}.3f,last IO sample mct,%{public}.3f", buf, 0x16u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419510 == -1) {
        goto LABEL_94;
      }
      goto LABEL_108;
    }
    unint64_t v21 = v11 - 2;
    uint64_t v22 = *(void *)(v12 + 8 * (v21 / 0x38));
    unint64_t v23 = v21 % 0x38;
    if (*(unsigned char *)(v13 + 72 * v14 + 63)) {
      BOOL v24 = *(unsigned char *)(v22 + 72 * v23 + 63) == 0;
    }
    else {
      BOOL v24 = 1;
    }
    if (v24)
    {
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022BCC80);
      }
      double v25 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
      {
        double v26 = *a2;
        *(_DWORD *)std::string buf = 134349056;
        double v75 = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "InertialOdometry,Invalid IO delta-position to extrapolate speed for,mct,%{public}.3f", buf, 0xCu);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419510 == -1) {
        goto LABEL_94;
      }
    }
    else
    {
      uint64_t v27 = v13 + 72 * v14;
      int v30 = *(unsigned __int8 *)(v27 + 61);
      float v29 = (unsigned char *)(v27 + 61);
      int v28 = v30;
      if (v30 == *(unsigned __int8 *)(v22 + 72 * v23 + 61))
      {
        uint64_t v31 = v13 + 72 * v14;
        float v33 = *(float *)(v31 + 16);
        __int16 v32 = (float *)(v31 + 16);
        float v34 = v33;
        if (v33 == *(float *)(v22 + 72 * v23 + 16) && v34 > 0.0)
        {
          double v35 = *(double *)(v22 + 72 * v23 + 8);
          double v36 = v15 - v35;
          if (v15 - v35 <= 0.0)
          {
            if (qword_102419510 != -1) {
              dispatch_once(&qword_102419510, &stru_1022BCC80);
            }
            uint64_t v61 = qword_102419518;
            if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
            {
              double v62 = *a2;
              *(_DWORD *)std::string buf = 134349056;
              double v75 = v62;
              _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "InertialOdometry,Invalid IO delta-time to extrapolate speed for,mct,%{public}.3f", buf, 0xCu);
            }
            BOOL result = sub_10013D1A0(115, 0);
            if (result)
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419510 != -1) {
                dispatch_once(&qword_102419510, &stru_1022BCC80);
              }
              double v63 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::LCFusionInertialOdometry::getIOExtrapolateSpeedMeasurementAt(const CFTimeInterval &, GroundSpeedMeasurement &, VerticalVelocityMeasurement &) const", "%s\n", v63);
              goto LABEL_95;
            }
            return result;
          }
          double v39 = (v15 - v10) / v36;
          double v40 = (v10 - v35) / v36;
          double v41 = (float *)(v22 + 72 * v23);
          float v42 = (float *)(v13 + 72 * v14);
          double v43 = v40 * v42[5] + v39 * v41[5];
          double v44 = v40 * v42[6] + v39 * v41[6];
          float v71 = v41[7];
          float v72 = v42[7];
          double v45 = hypot(v43, v44);
          double v73 = v45 / v34;
          BOOL v46 = fabs(v43) < 0.005 || v45 < 0.5;
          if (v46 || fabs(v44) < 0.005)
          {
            if (qword_102419510 != -1) {
              dispatch_once(&qword_102419510, &stru_1022BCC80);
            }
            double v64 = v45 / v34;
            uint64_t v65 = qword_102419518;
            if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
            {
              double v66 = *a2;
              *(_DWORD *)std::string buf = 134349824;
              double v75 = v66;
              __int16 v76 = 2050;
              *(double *)unint64_t v77 = v45;
              *(_WORD *)&v77[8] = 2050;
              *(double *)&v77[10] = v43;
              *(_WORD *)&v77[18] = 2050;
              *(double *)&v77[20] = v44;
              _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "InertialOdometry,PDR,cannot compute course for extrapolated sample mct,%{public}.3f,GDistanceMoved,%{public}.3f,dPosX,%{public}.3f,dPosY,%{public}.3f", buf, 0x2Au);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419510 != -1) {
                dispatch_once(&qword_102419510, &stru_1022BCC80);
              }
              int v70 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::getIOExtrapolateSpeedMeasurementAt(const CFTimeInterval &, GroundSpeedMeasurement &, VerticalVelocityMeasurement &) const", "%s\n", v70);
              if (v70 != (char *)buf) {
                free(v70);
              }
              double v64 = v45 / v34;
            }
            *(double *)a3 = *a2;
            *(double *)(a3 + _Block_object_dispose(&STACK[0x850], 8) = v64;
            *(void *)(a3 + 16) = 0x3FB70A3D70A3D70ALL;
            double v52 = -1.0;
          }
          else
          {
            double v47 = atan2(v44, v43);
            if (v47 < 0.0) {
              double v47 = v47 + 6.28318531;
            }
            double v48 = 6.28318531 - v47;
            if (6.28318531 - v47 < 0.0 || v48 >= 6.28318531)
            {
              double v49 = fmod(6.28318531 - v47, 6.28318531);
              if (v49 >= 0.0) {
                double v48 = v49;
              }
              else {
                double v48 = v49 + 6.28318531;
              }
            }
            double v50 = (float)(v34 * v34) * 0.09;
            double v51 = v44 / (v45 * v45) * (v44 / (v45 * v45));
            if (v50 * (-v43 / (v45 * v45) * (-v43 / (v45 * v45))) + v51 * v50 >= 0.0) {
              double v52 = v50 * (-v43 / (v45 * v45) * (-v43 / (v45 * v45))) + v51 * v50;
            }
            else {
              double v52 = *(double *)&qword_101D23980[v28 == 1];
            }
            if (qword_102419510 != -1) {
              dispatch_once(&qword_102419510, &stru_1022BCC80);
            }
            double v53 = v45 / v34;
            double v54 = qword_102419518;
            if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
            {
              double v55 = *a2;
              int v56 = *v29;
              *(_DWORD *)std::string buf = 134350848;
              double v75 = v55;
              __int16 v76 = 1026;
              *(_DWORD *)unint64_t v77 = v56;
              *(_WORD *)&v77[4] = 2050;
              *(double *)&v77[6] = v45;
              *(_WORD *)&v77[14] = 2050;
              *(double *)&v77[16] = v73;
              *(_WORD *)&v77[24] = 2050;
              *(double *)&v77[26] = v48 * 57.2957795;
              __int16 v78 = 2050;
              double v79 = sqrt(v52) * 57.2957795;
              __int16 v80 = 2050;
              double v81 = v43;
              __int16 v82 = 2050;
              double v83 = v44;
              _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "InertialOdometry,PDR,estimated course for extrapolated IO sample mct,%{public}.3f,RefF,%{public}d,GDistanceMoved_m,%{public}.3f,GSpeed_mps,%{public}.3f,Course_deg,%{public}.1f,CourseStdv_deg,%{public}.1f,PosX,%{public}.3f,dPosY,%{public}.3f", buf, 0x4Eu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419510 != -1) {
                dispatch_once(&qword_102419510, &stru_1022BCC80);
              }
              double v69 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::getIOExtrapolateSpeedMeasurementAt(const CFTimeInterval &, GroundSpeedMeasurement &, VerticalVelocityMeasurement &) const", "%s\n", v69);
              if (v69 != (char *)buf) {
                free(v69);
              }
              double v53 = v73;
            }
            *(double *)a3 = *a2;
            *(double *)(a3 + _Block_object_dispose(&STACK[0x850], 8) = v53;
            *(void *)(a3 + 16) = 0x3FB70A3D70A3D70ALL;
            if (v48 > -1.0) {
              goto LABEL_86;
            }
          }
          double v48 = *(double *)(a1 + 328);
LABEL_86:
          double v67 = 0.069;
          if (v52 >= 0.069) {
            double v67 = v52;
          }
          *(double *)(a3 + 24) = v48;
          *(double *)(a3 + 32) = v67;
          if (*v29 == 1)
          {
            double v68 = 9.8696044;
            if (v52 >= 9.8696044) {
              double v68 = v52;
            }
            *(double *)(a3 + 32) = v68;
          }
          *(double *)a4 = *a2;
          *(double *)(a4 + _Block_object_dispose(&STACK[0x850], 8) = (v40 * v72 + v39 * v71) / *v32;
          *(void *)(a4 + 16) = 0x3FB70A3D70A3D70ALL;
          return 1;
        }
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022BCC80);
        }
        uint64_t v59 = qword_102419518;
        if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
        {
          double v60 = *a2;
          *(_DWORD *)std::string buf = 134349056;
          double v75 = v60;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "InertialOdometry,Invalid IO sample intervals to extrapolate speed for,mct,%{public}.3f", buf, 0xCu);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419510 == -1)
        {
LABEL_94:
          double v63 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::LCFusionInertialOdometry::getIOExtrapolateSpeedMeasurementAt(const CFTimeInterval &, GroundSpeedMeasurement &, VerticalVelocityMeasurement &) const", "%s\n", v63);
LABEL_95:
          if (v63 != (char *)buf) {
            free(v63);
          }
          return 0;
        }
      }
      else
      {
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022BCC80);
        }
        float v57 = qword_102419518;
        if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
        {
          double v58 = *a2;
          *(_DWORD *)std::string buf = 134349056;
          double v75 = v58;
          _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "InertialOdometry,IO samples with different reference frame to extrapolate speed for,mct,%{public}.3f", buf, 0xCu);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419510 == -1) {
          goto LABEL_94;
        }
      }
    }
LABEL_108:
    dispatch_once(&qword_102419510, &stru_1022BCC80);
    goto LABEL_94;
  }
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022BCC80);
  }
  uint64_t v6 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
  {
    double v7 = *a2;
    *(_DWORD *)std::string buf = 134349056;
    double v75 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "InertialOdometry,Not enough IO samples to extrapolate speed for,mct,%{public}.3f", buf, 0xCu);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 == -1) {
      goto LABEL_94;
    }
    goto LABEL_108;
  }
  return result;
}

void sub_1005AAC88(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1005AAC94(id a1)
{
  qword_102419518 = (uint64_t)os_log_create("com.apple.locationd.Position", "LCFusion");
}

void *sub_1005AACC4(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)*result;
    unint64_t v3 = a2 - 0x71C71C71C71C71C7 * ((uint64_t)(result[1] - *(void *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 55 - v3;
      uint64_t v6 = &v2[-(v5 / 0x38)];
      char *result = v6;
      unint64_t v4 = *v6 + 72 * (56 * (v5 / 0x38) - v5) + 3960;
    }
    else
    {
      char *result = &v2[v3 / 0x38];
      unint64_t v4 = v2[v3 / 0x38] + 72 * (v3 % 0x38);
    }
    result[1] = v4;
  }
  return result;
}

uint64_t sub_1005AAD78(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 56 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x38) {
    a2 = 1;
  }
  if (v5 < 0x70) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

__n128 sub_1005AADF0@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    unint64_t v19 = a2;
    double v18 = a4;
    double v15 = a5;
    float v16 = a6;
  }
  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    unint64_t v14 = a4;
    double v15 = a5;
    float v16 = a6;
    while (1)
    {
      sub_1005AAEC0(v12, v14, v15, v16, &v21);
      float v16 = (char *)v22.n128_u64[1];
      double v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      double v17 = *v13--;
      uint64_t v12 = v17;
      unint64_t v14 = v17 + 4032;
    }
    double v18 = *a1 + 4032;
    unint64_t v19 = a2;
  }
  sub_1005AAEC0(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_1005AAEC0@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    double v9 = a1;
  }
  else
  {
    double v9 = a2;
    uint64_t v10 = *a3;
    unint64_t v11 = a2;
    while (1)
    {
      int64_t v12 = 0x8E38E38E38E38E39 * ((uint64_t)&a4[-v10] >> 3);
      if ((uint64_t)(0x8E38E38E38E38E39 * ((v11 - a1) >> 3)) < v12) {
        int64_t v12 = 0x8E38E38E38E38E39 * ((v11 - a1) >> 3);
      }
      v11 -= 72 * v12;
      a4 -= 72 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 72 * v12 - 6);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 4032);
    }
    if ((char *)(*v6 + 4032) == a4)
    {
      double v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_1005AAFB8(void *a1, unsigned char *a2, unsigned char **a3, unsigned char *a4, uint64_t a5)
{
  int v7 = *(void ***)a5;
  unint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = (unsigned char *)(*a1 + 4032); ; uint64_t i = v12 + 4032)
    {
      sub_1005AB04C(a2, v8, i, v7, &v14);
      unint64_t v8 = (char *)*((void *)&v15 + 1);
      int v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + _Block_object_dispose(&STACK[0x850], 8) = v8;
      if (v10 == a3) {
        break;
      }
      int64_t v12 = (unsigned char *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_1005AB04C(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_1005AB04C@<X0>(unsigned char *__src@<X1>, char *__dst@<X4>, unsigned char *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a4;
  int v7 = __src;
  if (__src == a3)
  {
    double v9 = __src;
  }
  else
  {
    double v9 = a3;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0x8E38E38E38E38E39 * ((v10 - __dst + 4032) >> 3);
      unint64_t v12 = (uint64_t)(0x8E38E38E38E38E39 * ((v9 - v7) >> 3)) >= v11 ? v11 : 0x8E38E38E38E38E39 * ((v9 - v7) >> 3);
      if (v12) {
        double result = memmove(__dst, v7, 72 * v12 - 6);
      }
      v7 += 72 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      std::string __dst = v14;
    }
    __dst += 72 * v12;
    if ((char *)*(v6 - 1) + 4032 == __dst) {
      std::string __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void sub_1005AB148(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x38;
  unint64_t v4 = v2 - 56;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    int v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    double v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      float v34 = (char *)sub_1000DA54C(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      double v37 = &v34[8 * v36];
      __int16 v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        double v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)double v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      double v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    double v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    double v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      float v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      double v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFC0uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  float v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1005AB414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

size_t sub_1005AB460(char *__source)
{
  return strlcpy(byte_102489FC0, __source, 0x100uLL);
}

uint64_t sub_1005AB474(uint64_t a1, float a2, float a3, float a4, float a5)
{
  if (sub_1005ABA70(0, (int *)&unk_10241C8A8, 0, 0, 0, 0, 0.0, 0.0, 0.0, 0.0))
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022BCCC0);
    }
    uint64_t v10 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "WMM initialization encountered an error", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0xFFFFFFFFLL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 == -1)
    {
LABEL_16:
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int declinationCalc(const float, const float, const float, const float, GeomagneticData *)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
      return 0xFFFFFFFFLL;
    }
LABEL_25:
    dispatch_once(&qword_1024190A0, &stru_1022BCCC0);
    goto LABEL_16;
  }
  dword_10247B478 = LODWORD(a2);
  dword_10247B47C = LODWORD(a3);
  *(float *)&dword_10247B480 = a4 / 1000.0;
  dword_10247B484 = LODWORD(a5);
  if (sub_1005ABA70(1, 0, (float *)&dword_10247B488, (float *)&dword_10247B48C, (float *)&dword_10247B490, &flt_10247B494, a4 / 1000.0, a2, a3, a5))
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022BCCC0);
    }
    uint64_t v11 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "WMM evaluation encountered an error", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0xFFFFFFFFLL;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 == -1) {
      goto LABEL_16;
    }
    goto LABEL_25;
  }
  dword_10247B498 = dword_10247B488;
  dword_10247B49C = dword_10247B48C;
  dword_10247B4A0 = dword_10247B490;
  *(float *)&dword_10247B484 = *(float *)&dword_10247B484 + 1.0;
  sub_1005ABA70(1, 0, (float *)&dword_10247B488, (float *)&dword_10247B48C, (float *)&dword_10247B490, &flt_10247B494, *(float *)&dword_10247B480, *(float *)&dword_10247B478, *(float *)&dword_10247B47C, *(float *)&dword_10247B484);
  float v13 = *(float *)&dword_10247B4A0;
  float v14 = *(float *)&dword_10247B498;
  __float2 v15 = __sincosf_stret(*(float *)&dword_10247B498 * 0.017453);
  int v16 = dword_10247B49C;
  __float2 v17 = __sincosf_stret(*(float *)&dword_10247B49C * 0.017453);
  if ((float)(v13 * v17.__cosval) < 100.0)
  {
    float v14 = log(-1.0);
    dword_10247B498 = LODWORD(v14);
  }
  if (90.0 - fabsf(*(float *)&dword_10247B478) <= 0.001)
  {
    float v14 = log(-1.0);
    dword_10247B498 = LODWORD(v14);
    float v19 = v14;
    float v18 = v14;
  }
  else
  {
    float v18 = v13 * (float)(v15.__cosval * v17.__cosval);
    float v19 = v13 * (float)(v15.__sinval * v17.__cosval);
  }
  uint64_t result = 0;
  *(float *)a1 = v18 / 1000.0;
  *(float *)(a1 + 4) = v19 / 1000.0;
  *(float *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = (float)(v13 * v17.__sinval) / 1000.0;
  *(float *)(a1 + 12) = v13 / 1000.0;
  *(float *)(a1 + 16) = (float)(v13 * v17.__cosval) / 1000.0;
  *(float *)(a1 + 20) = v14;
  *(_DWORD *)(a1 + 24) = v16;
  return result;
}

uint64_t sub_1005ABA70(int a1, int *a2, float *a3, float *a4, float *a5, float *a6, float a7, float a8, float a9, float a10)
{
  if (a1 == 1)
  {
    float v16 = a10 - *(float *)&dword_10247C5A4;
    __float2 v17 = (float *)&unk_10247C000;
    float v18 = *(float *)&dword_10247C5B8;
    if (*(float *)&dword_10247C5B8 < 0.0 && v16 < 0.0)
    {
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022BCCC0);
      }
      float v19 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 134349312;
        double v171 = a10;
        __int16 v172 = 2050;
        double v173 = *(float *)&dword_10247C5A4;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "supplied date (%{public}f) outside valid range (epoch=%{public}f)", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 == -1)
      {
LABEL_123:
        double v156 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "int E0000(int, int *, float, float, float, float, float *, float *, float *, float *)", "%s\n", v156);
        if (v156 != (char *)buf) {
          free(v156);
        }
        return 1;
      }
LABEL_125:
      dispatch_once(&qword_1024190A0, &stru_1022BCCC0);
      goto LABEL_123;
    }
    __float2 v44 = __sincosf_stret(a9 * 0.017453);
    float sinval = v44.__sinval;
    float cosval = v44.__cosval;
    uint64_t v47 = (float *)&unk_10247C000;
    BOOL v48 = *(float *)&dword_10247C5C0 != a8 || *(float *)&dword_10247C5BC != a7;
    dword_10247C1E8 = LODWORD(v44.__sinval);
    dword_10247C21C = LODWORD(v44.__cosval);
    uint64_t v49 = (float *)&unk_10247C000;
    uint64_t v50 = (float *)&unk_10247C000;
    if (v48)
    {
      __float2 v51 = __sincosf_stret(a8 * 0.017453);
      uint64_t v49 = (float *)&unk_10247C000;
      __float2 v17 = (float *)&unk_10247C000;
      uint64_t v47 = (float *)&unk_10247C000;
      float v52 = sqrtf(*(float *)&dword_10247C590 - (float)(*(float *)&dword_10247C598 * (float)(v51.__sinval * v51.__sinval)));
      float v53 = (float)(*(float *)&dword_10247C590 + (float)(v52 * a7))
          / (float)((float)(v52 * a7) + *(float *)&dword_10247C594);
      *(float *)&dword_10247C5C8 = v51.__sinval
                                 / sqrtf((float)(v51.__sinval * v51.__sinval)+ (float)((float)(v53 * v53) * (float)(v51.__cosval * v51.__cosval)));
      *(float *)&int v54 = sqrt(1.0 - (float)(*(float *)&dword_10247C5C8 * *(float *)&dword_10247C5C8));
      dword_10247C5CC = v54;
      float v55 = (float)(a7 * a7)
          + (float)(v52 * a7) * 2.0
          + (float)((float)(*(float *)&dword_10247C59C
                          - (float)(*(float *)&dword_10247C5A0 * (float)(v51.__sinval * v51.__sinval)))
                  / (float)(v52 * v52));
      dword_10247C5D0 = sqrtf(v55);
      float v56 = sqrtf((float)((float)(v51.__sinval * v51.__sinval) * *(float *)&dword_10247C594)+ (float)(*(float *)&dword_10247C590 * (float)(v51.__cosval * v51.__cosval)));
      *(float *)&dword_10247C5D4 = (float)(v56 + a7) / *(float *)&dword_10247C5D0;
      *(float *)&dword_10247C5D8 = (float)(v51.__sinval * (float)(v51.__cosval * *(float *)&dword_10247C598))
                                 / (float)(v56 * *(float *)&dword_10247C5D0);
    }
    uint64_t v57 = dword_10247B4A4;
    if (*(float *)&dword_10247C5C4 != a9)
    {
      if (dword_10247B4A4 >= 2)
      {
        int v58 = dword_10247B4A4 + 1;
        uint64_t v64 = dword_10247B4A4 - 1;
        uint64_t v65 = (float *)&dword_10247C220;
        float v66 = v44.__sinval;
        double v67 = (float *)&dword_10247C1EC;
        do
        {
          float v68 = *(float *)&dword_10247C21C;
          float v69 = (float)(*(float *)&dword_10247C21C * sinval) + (float)(v66 * cosval);
          *v67++ = v69;
          float v66 = *(float *)&dword_10247C1E8;
          float cosval = (float)(v68 * cosval) - (float)(*(float *)&dword_10247C1E8 * sinval);
          *v65++ = cosval;
          float sinval = v69;
          --v64;
        }
        while (v64);
      }
      else
      {
        int v58 = 2;
      }
      dword_10247B4AC = v58;
    }
    float v70 = *(float *)&dword_10247C5CC;
    if ((int)v57 >= 1)
    {
      double v157 = a3;
      double v158 = a6;
      uint64_t v71 = 0;
      float v72 = (float *)&unk_10247B9FC;
      double v73 = (float *)&unk_10247BA28;
      unint64_t v74 = (float *)&unk_10247B4B4;
      double v75 = (float *)&unk_10247B4E0;
      __int16 v76 = (float *)&unk_10247B758;
      unint64_t v77 = (float *)&unk_10247B784;
      __int16 v78 = &dword_10247BF44;
      int v79 = -1;
      int v80 = 3;
      float v81 = *(float *)&dword_10247C58C / *(float *)&dword_10247C5D0;
      float v82 = v81 * v81;
      double v83 = &dword_10247BCA0;
      float v169 = (float *)&unk_10247C2EC;
      float v84 = *(float *)&dword_10247C5C8;
      float v85 = -*(float *)&dword_10247C5CC;
      float v86 = *(float *)dword_10247C218;
      int v87 = dword_10247C2B4;
      unint64_t v88 = 1;
      float v89 = *(float *)&dword_10247C1E4;
      float v90 = 0.0;
      float v91 = flt_10247C280;
      double v92 = &dword_10247C2B4;
      uint64_t v93 = &dword_10247C1E4;
      float v94 = 0.0;
      float v95 = 0.0;
      float v96 = 0.0;
      uint64_t v161 = v57 + 1;
      BOOL v167 = v48;
      while (1)
      {
        uint64_t v97 = 0;
        int64_t v98 = 0;
        int v165 = v79;
        float v99 = -(float)(v81 * v82);
        float v82 = v81 * v82;
        unint64_t v162 = v88 + 1;
        float v100 = &dword_10247BF40[v88];
        float v101 = flt_10247C24C[v88];
        int64_t v102 = v88 - 2;
        uint64_t v168 = &dword_10247BC9C[v79];
        double v103 = v100 - 1;
        unint64_t v104 = v88 - 1;
        double v105 = (float *)((char *)&unk_10247C2E8 + 4 * v88 + 52);
        int v106 = v80;
        uint64_t v107 = 13 * (int)v88 - 13;
        uint64_t v108 = 13 * (int)v88;
        double v109 = &dword_10247BC9C[13 * v88];
        float v110 = (float *)&v109[v88 - 14];
        double v111 = v83;
        uint64_t v112 = 13 * (v88 - 1);
        float v113 = (float *)&v109[v88];
        uint64_t v166 = v71;
        uint64_t v114 = v71 + 1;
        double v163 = v111;
        int v115 = (float *)v111;
        int v164 = v106;
        do
        {
          if (v48)
          {
            if (v114 == v98)
            {
              *(float *)&v100[v108] = v70 * *(float *)&v103[v107];
              *float v113 = (float)(v84 * *(float *)&v103[v112]) + (float)(v70 * *v110);
            }
            else
            {
              if (v88 == 1 && !v98)
              {
                *(float *)&dword_10247BF44 = v84 * *(float *)dword_10247BF40;
                *(float *)&dword_10247BCA0 = (float)(*(float *)dword_10247BF40 * v85)
                                           + (float)(v84 * *(float *)&dword_10247BC9C[v104]);
                if (v18 == a10)
                {
LABEL_73:
                  float v116 = v82 * *(float *)&v78[v97];
LABEL_74:
                  float v123 = flt_10247B9F8[v88];
                  float v121 = v123 * v86;
                  float v122 = v123 * v89;
                  goto LABEL_75;
                }
LABEL_66:
                v72[v97] = v74[v97] + (float)(v16 * v76[v97]);
                if (!v98) {
                  goto LABEL_73;
                }
                v73[v98] = v75[v98] + (float)(v16 * v77[v98]);
                float v116 = v82 * *(float *)&v100[v97];
                goto LABEL_69;
              }
              if (v88 >= 2)
              {
                unint64_t v127 = v104;
                int v128 = v92;
                float v129 = v77;
                double v130 = v75;
                float v131 = v91;
                double v132 = v78;
                float v133 = v113;
                uint64_t v134 = v112;
                int v135 = v110;
                uint64_t v136 = v108;
                uint64_t v137 = v107;
                uint64_t v138 = v105;
                uint64_t v139 = v93;
                if (v98 <= v102)
                {
                  int v141 = v100 - 2;
                  float v142 = *(float *)&v168[v97];
                  uint64_t v140 = v97;
                }
                else
                {
                  uint64_t v140 = v97;
                  int v141 = v100 - 2;
                  v100[v97 - 2] = 0;
                  v168[v97] = 0;
                  float v142 = 0.0;
                }
                float v143 = *(float *)&v103[v140];
                float v144 = v169[v97];
                *(float *)&v100[v140] = (float)(v84 * v143) - (float)(v144 * *(float *)&v141[v140]);
                *int v115 = (float)((float)(v143 * v85) + (float)(v84 * *(v115 - 1))) - (float)(v144 * v142);
                uint64_t v93 = v139;
                double v105 = v138;
                uint64_t v107 = v137;
                uint64_t v108 = v136;
                float v110 = v135;
                uint64_t v112 = v134;
                float v113 = v133;
                __int16 v78 = v132;
                float v91 = v131;
                double v75 = v130;
                unint64_t v77 = v129;
                double v92 = v128;
                unint64_t v104 = v127;
                BOOL v48 = v167;
              }
            }
          }
          if (v18 != a10) {
            goto LABEL_66;
          }
          float v116 = v82 * *(float *)&v100[v97];
          if (!v98) {
            goto LABEL_74;
          }
LABEL_69:
          float v117 = v72[v97];
          float v118 = *(float *)&dword_10247C218[v98];
          float v119 = v73[v98];
          float v120 = *(float *)&v93[v98];
          float v121 = (float)(v119 * v120) + (float)(v117 * v118);
          float v122 = (float)(v117 * v120) - (float)(v119 * v118);
LABEL_75:
          float v124 = *v115;
          float v125 = v122 * v91[v98];
          if (v98 == 1 && v70 == 0.0)
          {
            if (v88 == 1)
            {
              v92[1] = v87;
              float v126 = *((float *)v92 + 1);
            }
            else
            {
              float v126 = (float)(v84 * *(float *)&v92[v104]) - (float)(*v105 * *(float *)&v92[v102]);
              *(float *)&v92[v88] = v126;
            }
            float v96 = v96 + (float)(v125 * (float)(v82 * v126));
          }
          float v90 = v90 + (float)((float)(v121 * v99) * v124);
          float v94 = v94 + (float)(v125 * v116);
          float v95 = v95 + (float)((float)(v121 * v101) * v116);
          ++v98;
          v97 += 13;
          --v106;
          v115 += 13;
        }
        while (v106 > 1);
        ++v78;
        int v79 = v165 + 1;
        int v80 = v164 + 1;
        ++v88;
        double v83 = v163 + 1;
        ++v169;
        ++v72;
        ++v76;
        ++v74;
        v73 += 13;
        v75 += 13;
        v77 += 13;
        uint64_t v71 = v166 + 1;
        int v145 = v161;
        if (v162 == v161)
        {
          dword_10247B4AC = v98;
          a3 = v157;
          a6 = v158;
          __float2 v17 = (float *)&unk_10247C000;
          uint64_t v47 = (float *)&unk_10247C000;
          uint64_t v49 = (float *)&unk_10247C000;
          uint64_t v50 = (float *)&unk_10247C000;
          goto LABEL_91;
        }
      }
    }
    int v145 = 1;
    float v95 = 0.0;
    float v90 = 0.0;
    float v96 = 0.0;
    float v94 = 0.0;
LABEL_91:
    dword_10247B4A8 = v145;
    if (v70 == 0.0) {
      float v146 = v96;
    }
    else {
      float v146 = v94 / v70;
    }
    float v147 = v49[373];
    float v148 = v50[374];
    float v149 = (float)-(float)(v95 * v148) - (float)(v90 * v147);
    float v150 = (float)(v90 * v148) - (float)(v95 * v147);
    float v151 = sqrtf((float)(v146 * v146) + (float)(v149 * v149));
    *a5 = sqrtf((float)(v150 * v150) + (float)(v151 * v151));
    *a3 = atan2f(v146, v149) / 0.017453;
    *a4 = atan2f(v150, v151) / 0.017453;
    *a6 = -999.0;
    if (fabsf(a8) >= 55.0)
    {
      float v152 = -999.0;
      if (a9 >= 0.0 && a8 > 0.0)
      {
        float v152 = *a3 - a9;
        *a6 = v152;
      }
      float v153 = fabsf(a9);
      if (a8 > 0.0 && a9 < 0.0)
      {
        float v152 = v153 + *a3;
        *a6 = v152;
      }
      if (a9 >= 0.0 && a8 < 0.0)
      {
        float v152 = *a3 + a9;
        *a6 = v152;
      }
      if (a8 < 0.0 && a9 < 0.0)
      {
        float v152 = *a3 - v153;
        *a6 = v152;
      }
      if (v152 > 180.0)
      {
        float v152 = v152 + -360.0;
LABEL_110:
        if (v152 < -180.0) {
          float v152 = v152 + 360.0;
        }
        *a6 = v152;
        goto LABEL_113;
      }
      if (v152 < -180.0) {
        goto LABEL_110;
      }
    }
LABEL_113:
    uint64_t result = 0;
    v17[366] = a10;
    v47[367] = a7;
    dword_10247C5C0 = LODWORD(a8);
    dword_10247C5C4 = LODWORD(a9);
    return result;
  }
  uint64_t v21 = fopen(byte_102489FC0, "r");
  if (!v21)
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022BCCC0);
    }
    uint64_t v59 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
    {
      double v60 = __error();
      uint64_t v61 = strerror(*v60);
      *(_DWORD *)std::string buf = 136315394;
      double v171 = COERCE_DOUBLE(byte_102489FC0);
      __int16 v172 = 2082;
      double v173 = *(double *)&v61;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_INFO, "could not open geomagnetic data file %s (%{public}s)", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022BCCC0);
    }
    double v62 = __error();
    strerror(*v62);
    goto LABEL_123;
  }
  unint64_t v22 = v21;
  dword_10247B4A4 = *a2;
  dword_10247C1E4 = 0;
  dword_10247C2B4 = 1065353216;
  dword_10247BF40[0] = 1065353216;
  dword_10247C218[0] = 1065353216;
  dword_10247BC9C[0] = 0;
  dword_10247C58C = 1170676122;
  dword_10247C590 = 1276849967;
  dword_10247C594 = 1276781883;
  dword_10247C598 = 1216674304;
  dword_10247C59C = 1488725079;
  dword_10247C5A0 = 1436593536;
  dword_10247B4B0[0] = 0;
  dword_10247B754[0] = 0;
  if (!fgets(byte_10247C5DC, 80, v21))
  {
    fclose(v22);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022BCCC0);
    }
    double v63 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_INFO, "geomagnetic data file appears to be empty", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 == -1) {
      goto LABEL_123;
    }
    goto LABEL_125;
  }
  sscanf(byte_10247C5DC, "%f", &dword_10247C5A4);
  if (fgets(byte_10247C5DC, 80, v22))
  {
    uint64_t v23 = 0;
    do
    {
      do
      {
        if (!byte_10247C5DC[v23]) {
          break;
        }
        *((unsigned char *)&dword_10247C62D + v23) = byte_10247C5DC[v23];
        ++v23;
        *((unsigned char *)&dword_10247C62D + v23) = 0;
      }
      while (v23 != 4);
      if (!(dword_10247C62D ^ 0x39393939 | byte_10247C631)) {
        break;
      }
      sscanf(byte_10247C5DC, "%d%d%f%f%f%f", &dword_10247B4A8, &dword_10247B4AC, &dword_10247C5A8, &dword_10247C5AC, &dword_10247C5B0, &dword_10247C5B4);
      unsigned int v24 = dword_10247B4AC;
      if (dword_10247B4AC > 0xC
        || (uint64_t v25 = dword_10247B4A8, dword_10247B4A8 > 12)
        || dword_10247B4A8 < 0)
      {
        fclose(v22);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022BCCC0);
        }
        double v155 = qword_1024190A8;
        if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v155, OS_LOG_TYPE_INFO, "geomagnetic data file appears to have invalid dimensions", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          return 1;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          goto LABEL_125;
        }
        goto LABEL_123;
      }
      if (dword_10247B4AC <= dword_10247B4A8)
      {
        dword_10247B4B0[13 * dword_10247B4AC + dword_10247B4A8] = dword_10247C5A8;
        dword_10247B754[13 * v24 + v25] = dword_10247C5B0;
        if (v24)
        {
          unsigned int v26 = v24 - 1;
          dword_10247B4B0[13 * v25 + v26] = dword_10247C5AC;
          dword_10247B754[13 * v25 + v26] = dword_10247C5B4;
        }
      }
      uint64_t v27 = fgets(byte_10247C5DC, 80, v22);
      uint64_t v23 = 0;
    }
    while (v27);
  }
  dword_10247BF40[0] = 1065353216;
  if (dword_10247B4A4 < 1)
  {
    LODWORD(v29) = 1;
  }
  else
  {
    int v28 = 0;
    uint64_t v29 = dword_10247B4A4 + 1;
    long long v30 = (float *)&unk_10247B758;
    long long v31 = (float *)&unk_10247B4B4;
    long long v32 = (float *)&unk_10247C2EC;
    uint64_t v33 = 1;
    do
    {
      uint64_t v34 = 0;
      int v35 = 0;
      uint64_t v36 = (float *)&dword_10247BF40[v33];
      int v37 = 2 * v33 - 1;
      *uint64_t v36 = (float)(*(v36 - 1) * (float)v37) / (float)(int)v33;
      uint64_t v38 = v33 + 1;
      float v39 = (float)(v37 * (2 * v33 - 3));
      int v40 = 2;
      int v41 = v28;
      do
      {
        v32[v34] = (float)((v28 + v35) * v41) / v39;
        if (v34)
        {
          float v42 = v36[(int)v34 - 13] * sqrtf((float)(v40 * (v41 + 2)) / (float)(v28 + v35 + 1));
          v36[(int)v34] = v42;
          *(float *)&dword_10247B4B0[13 * v33 + (v35 - 1)] = *(float *)&dword_10247B4B0[13 * v33 + (v35 - 1)]
                                                                         * v42;
          *(float *)&dword_10247B754[13 * v33 + (v35 - 1)] = v42
                                                                         * *(float *)&dword_10247B754[13 * v33 + (v35 - 1)];
          int v40 = 1;
        }
        float v43 = v36[v34];
        v31[v34] = v43 * v31[v34];
        v30[v34] = v43 * v30[v34];
        ++v35;
        v34 += 13;
        --v41;
      }
      while (v41 + 3 > 1);
      flt_10247C24C[v33] = (float)(int)v38;
      flt_10247C280[v33] = (float)(int)v33;
      ++v28;
      ++v30;
      ++v31;
      ++v32;
      ++v33;
    }
    while (v38 != v29);
    dword_10247B4AC = v35;
  }
  dword_10247B4A8 = v29;
  dword_10247C320 = 0;
  dword_10247C5C4 = -998637568;
  dword_10247C5C0 = -998637568;
  dword_10247C5BC = -998637568;
  dword_10247C5B8 = -998637568;
  fclose(v22);
  return 0;
}

void sub_1005ACB70(id a1)
{
  qword_1024190A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_1005ACCB8(id a1)
{
  qword_10247C638 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLMotionStateSilo"];
}

uint64_t sub_1005ACD78(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005AD180;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_10247C648 != -1) {
    dispatch_once(&qword_10247C648, block);
  }
  return qword_10248A0C0;
}

void sub_1005AD15C(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)(v1 - 120);
  if (v3)
  {
    *(void *)(v1 - 112) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005AD180()
{
  char v4 = 1;
  uint64_t v0 = sub_1000D3E78();
  sub_10006B564(v0, &v2);
  char v1 = sub_1000D2988(v2, "OscarActivity", (BOOL *)&v4);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  if (v1)
  {
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    char v4 = 1;
  }
  if (sub_1000D2E34(0)) {
    operator new();
  }
LABEL_9:
  operator new();
}

void sub_1005AD25C()
{
}

uint64_t sub_1005AD2A8(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1005AD580(a1, "CLMotionState", a2);
  *(void *)uint64_t v3 = off_1022BCD10;
  Init = (CLMotionActivity *)CLMotionActivity::getInit((uint64_t *)(v3 + 112), (CLMotionActivity *)v3);
  *(_WORD *)(a1 + 24_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(unsigned char *)(a1 + 250) = 0;
  CLMotionActivity::getInit((uint64_t *)(a1 + 256), Init);
  *(void *)(a1 + 392) = a1 + 392;
  *(void *)(a1 + 400) = a1 + 392;
  *(void *)(a1 + 40_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)(a1 + 416) = 0;
  uint64_t v5 = sub_1000D3E78();
  sub_10006B564(v5, buf);
  char v6 = sub_1000D2988(*(uint64_t *)buf, "LogMotionStateReplay", (BOOL *)(a1 + 248));
  if (v15) {
    sub_1000DB0A0(v15);
  }
  if ((v6 & 1) == 0) {
    *(unsigned char *)(a1 + 24_Block_object_dispose(&STACK[0x850], 8) = 0;
  }
  uint64_t v7 = sub_1000D3E78();
  sub_10006B564(v7, buf);
  unint64_t v8 = (unsigned char *)(a1 + 249);
  char v9 = sub_1000D2988(*(uint64_t *)buf, "DisableMotionStateNotify", (BOOL *)(a1 + 249));
  if (v15) {
    sub_1000DB0A0(v15);
  }
  if ((v9 & 1) == 0) {
    unsigned char *v8 = 0;
  }
  if (qword_102419010 != -1) {
    dispatch_once(&qword_102419010, &stru_1022BCEA0);
  }
  uint64_t v10 = qword_102419018;
  if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEBUG))
  {
    int v11 = *v8;
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "DisableMotionStateNotifyDefaultsWrite,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_1022BCEA0);
    }
    float v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionState::CLMotionState(id<CLIntersiloUniverse>)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  return a1;
}

void sub_1005AD538(_Unwind_Exception *a1)
{
  sub_1003B2350(v2);
  sub_1005AD62C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005AD580(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1022BCEF0;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 10_Block_object_dispose(&STACK[0x850], 8) = 0;
  return a1;
}

void sub_1005AD610(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005AD62C(uint64_t a1)
{
  *(void *)a1 = off_1022BCEF0;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1005AD6B0(void *a1)
{
  *a1 = off_1022BCD10;
  sub_1003B2350(a1 + 49);

  return sub_1005AD62C((uint64_t)a1);
}

uint64_t sub_1005AD708(void *a1)
{
  *a1 = off_1022BCD10;
  sub_1003B2350(a1 + 49);

  return sub_1005AD62C((uint64_t)a1);
}

void sub_1005AD760(void *a1)
{
  *a1 = off_1022BCD10;
  sub_1003B2350(a1 + 49);
  sub_1005AD62C((uint64_t)a1);

  operator delete();
}

void sub_1005AD7CC(uint64_t a1)
{
  *(unsigned char *)(a1 + 10_Block_object_dispose(&STACK[0x850], 8) = 1;
  uint64_t v2 = *(void **)(a1 + 416);
  if (v2)
  {
    [v2 invalidate];

    *(void *)(a1 + 416) = 0;
  }
}

unint64_t sub_1005AD80C()
{
  return ((unint64_t)sub_1000A16E8() >> 22) & 1;
}

unint64_t sub_1005AD828()
{
  return ((unint64_t)sub_1000A16E8() >> 23) & 1;
}

uint64_t sub_1005AD844()
{
  return 0;
}

__n128 sub_1005AD84C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 112);
  long long v2 = *(_OWORD *)(a1 + 128);
  long long v3 = *(_OWORD *)(a1 + 144);
  long long v4 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x850], 8) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 64) = v4;
  *(_OWORD *)(a2 + 16) = v2;
  *(_OWORD *)(a2 + 32) = v3;
  __n128 result = *(__n128 *)(a1 + 192);
  long long v6 = *(_OWORD *)(a1 + 208);
  long long v7 = *(_OWORD *)(a1 + 224);
  *(void *)(a2 + 12_Block_object_dispose(&STACK[0x850], 8) = *(void *)(a1 + 240);
  *(_OWORD *)(a2 + 96) = v6;
  *(_OWORD *)(a2 + 112) = v7;
  *(__n128 *)(a2 + 80) = result;
  return result;
}

void *sub_1005AD880@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_1005AD8FC(uint64_t result, _DWORD *a2)
{
  if (!*(unsigned char *)(result + 249))
  {
    uint64_t v2 = result;
    uint64_t v3 = result + 112;
    if (*(_DWORD *)(result + 112))
    {
      switch(*a2)
      {
        case 0:
          LODWORD(v22) = 0;
          __n128 result = sub_1001072EC(result, (int *)&v22, 1);
          if ((int)result <= 1)
          {
            long long v4 = *(_OWORD *)(v3 + 112);
            long long v28 = *(_OWORD *)(v3 + 96);
            long long v29 = v4;
            uint64_t v30 = *(void *)(v3 + 128);
            long long v5 = *(_OWORD *)(v3 + 48);
            long long v24 = *(_OWORD *)(v3 + 32);
            long long v25 = v5;
            long long v6 = *(_OWORD *)(v3 + 80);
            long long v26 = *(_OWORD *)(v3 + 64);
            long long v27 = v6;
            long long v7 = *(_OWORD *)(v3 + 16);
            long long v22 = *(_OWORD *)v3;
            long long v23 = v7;
            int v21 = 0;
            return (*(uint64_t (**)(uint64_t, int *, long long *, uint64_t, uint64_t, void))(*(void *)v2 + 152))(v2, &v21, &v22, 1, 0xFFFFFFFFLL, 0);
          }
          return result;
        case 1:
          LODWORD(v22) = 1;
          __n128 result = sub_1001072EC(result, (int *)&v22, 1);
          if ((int)result <= 1)
          {
            long long v13 = *(_OWORD *)(v3 + 112);
            long long v28 = *(_OWORD *)(v3 + 96);
            long long v29 = v13;
            uint64_t v30 = *(void *)(v3 + 128);
            long long v14 = *(_OWORD *)(v3 + 48);
            long long v24 = *(_OWORD *)(v3 + 32);
            long long v25 = v14;
            long long v15 = *(_OWORD *)(v3 + 80);
            long long v26 = *(_OWORD *)(v3 + 64);
            long long v27 = v15;
            long long v16 = *(_OWORD *)(v3 + 16);
            long long v22 = *(_OWORD *)v3;
            long long v23 = v16;
            int v21 = 1;
            return (*(uint64_t (**)(uint64_t, int *, long long *, uint64_t, uint64_t, void))(*(void *)v2 + 152))(v2, &v21, &v22, 1, 0xFFFFFFFFLL, 0);
          }
          return result;
        case 2:
          int v8 = 2;
          goto LABEL_9;
        case 3:
          LODWORD(v22) = 3;
          __n128 result = sub_1001072EC(result, (int *)&v22, 1);
          if ((int)result > 1) {
            return result;
          }
          long long v17 = *(_OWORD *)(v2 + 368);
          long long v28 = *(_OWORD *)(v2 + 352);
          long long v29 = v17;
          uint64_t v30 = *(void *)(v2 + 384);
          long long v18 = *(_OWORD *)(v2 + 304);
          long long v24 = *(_OWORD *)(v2 + 288);
          long long v25 = v18;
          long long v19 = *(_OWORD *)(v2 + 336);
          long long v26 = *(_OWORD *)(v2 + 320);
          long long v27 = v19;
          long long v20 = *(_OWORD *)(v2 + 272);
          long long v22 = *(_OWORD *)(v2 + 256);
          long long v23 = v20;
          int v21 = 3;
          break;
        case 4:
          int v8 = 4;
LABEL_9:
          LODWORD(v22) = v8;
          __n128 result = sub_1001072EC(result, (int *)&v22, 1);
          if ((int)result > 1) {
            return result;
          }
          long long v9 = *(_OWORD *)(v3 + 112);
          long long v28 = *(_OWORD *)(v3 + 96);
          long long v29 = v9;
          uint64_t v30 = *(void *)(v3 + 128);
          long long v10 = *(_OWORD *)(v3 + 48);
          long long v24 = *(_OWORD *)(v3 + 32);
          long long v25 = v10;
          long long v11 = *(_OWORD *)(v3 + 80);
          long long v26 = *(_OWORD *)(v3 + 64);
          long long v27 = v11;
          long long v12 = *(_OWORD *)(v3 + 16);
          long long v22 = *(_OWORD *)v3;
          long long v23 = v12;
          int v21 = v8;
          break;
        default:
          return result;
      }
      return (*(uint64_t (**)(uint64_t, int *, long long *, uint64_t, uint64_t, void))(*(void *)v2 + 152))(v2, &v21, &v22, 1, 0xFFFFFFFFLL, 0);
    }
  }
  return result;
}

void sub_1005ADB30(uint64_t a1)
{
  uint64_t v2 = (float *)(a1 + 112);
  long long v3 = *(_OWORD *)(a1 + 224);
  void v7[6] = *(_OWORD *)(a1 + 208);
  void v7[7] = v3;
  uint64_t v8 = *(void *)(a1 + 240);
  long long v4 = *(_OWORD *)(a1 + 160);
  _DWORD v7[2] = *(_OWORD *)(a1 + 144);
  int v7[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 192);
  v7[4] = *(_OWORD *)(a1 + 176);
  void v7[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 128);
  v7[0] = *(_OWORD *)(a1 + 112);
  v7[1] = v6;
  CLMotionActivity::init((CLMotionActivity *)(a1 + 112));
  sub_1005ADBB8(a1);
  CLMotionActivity::init((CLMotionActivity *)(a1 + 256));
  sub_1005ADD04(a1);
  sub_10092C9C4((int *)v7, v2, (uint64_t)"");
}

uint64_t sub_1005ADBB8(uint64_t result)
{
  if (!*(unsigned char *)(result + 249))
  {
    uint64_t v1 = result;
    long long v2 = *(_OWORD *)(result + 224);
    void v7[6] = *(_OWORD *)(result + 208);
    void v7[7] = v2;
    uint64_t v8 = *(void *)(result + 240);
    long long v3 = *(_OWORD *)(result + 160);
    _DWORD v7[2] = *(_OWORD *)(result + 144);
    int v7[3] = v3;
    long long v4 = *(_OWORD *)(result + 192);
    v7[4] = *(_OWORD *)(result + 176);
    void v7[5] = v4;
    long long v5 = *(_OWORD *)(result + 128);
    v7[0] = *(_OWORD *)(result + 112);
    v7[1] = v5;
    int v6 = 0;
    (*(void (**)(uint64_t, int *, _OWORD *, uint64_t, uint64_t, void))(*(void *)result + 152))(result, &v6, v7, 1, 0xFFFFFFFFLL, 0);
    int v6 = 1;
    (*(void (**)(uint64_t, int *, _OWORD *, uint64_t, uint64_t, void))(*(void *)v1 + 152))(v1, &v6, v7, 1, 0xFFFFFFFFLL, 0);
    int v6 = 2;
    return (*(uint64_t (**)(uint64_t, int *, _OWORD *, uint64_t, uint64_t, void))(*(void *)v1 + 152))(v1, &v6, v7, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

uint64_t sub_1005ADD04(uint64_t result)
{
  if (!*(unsigned char *)(result + 249))
  {
    long long v1 = *(_OWORD *)(result + 368);
    void v6[6] = *(_OWORD *)(result + 352);
    v6[7] = v1;
    uint64_t v7 = *(void *)(result + 384);
    long long v2 = *(_OWORD *)(result + 304);
    _DWORD v6[2] = *(_OWORD *)(result + 288);
    void v6[3] = v2;
    long long v3 = *(_OWORD *)(result + 336);
    v6[4] = *(_OWORD *)(result + 320);
    void v6[5] = v3;
    long long v4 = *(_OWORD *)(result + 272);
    v6[0] = *(_OWORD *)(result + 256);
    v6[1] = v4;
    int v5 = 3;
    return (*(uint64_t (**)(uint64_t, int *, _OWORD *, uint64_t, uint64_t, void))(*(void *)result + 152))(result, &v5, v6, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_1005ADDC0(int *a1, float *a2)
{
}

uint64_t sub_1005ADDCC(uint64_t result, uint64_t a2)
{
  *(_OWORD *)(result + 112) = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(result + 160) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(result + 176) = v4;
  *(_OWORD *)(result + 12_Block_object_dispose(&STACK[0x850], 8) = v2;
  *(_OWORD *)(result + 144) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(result + 240) = *(void *)(a2 + 128);
  *(_OWORD *)(result + 20_Block_object_dispose(&STACK[0x850], 8) = v6;
  *(_OWORD *)(result + 224) = v7;
  *(_OWORD *)(result + 192) = v5;
  return sub_1005ADBB8(result);
}

uint64_t sub_1005ADE00(uint64_t a1, _DWORD *a2)
{
  if (*a2 != 3) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 250))
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_1022BCEA0);
    }
    long long v3 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "DOMINANT ACTIVITY: already monitoring dominant activity", buf, 2u);
    }
    BOOL v4 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022BCEA0);
      }
      long long v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLMotionState::registerForNotificationInternal(const CLMotionState_Type::Notification &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
      return 0;
    }
  }
  else
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_1022BCEA0);
    }
    long long v7 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "DOMINANT ACTIVITY: start monitoring dominant activity", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022BCEA0);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLMotionState::registerForNotificationInternal(const CLMotionState_Type::Notification &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    uint64_t result = 1;
    *(unsigned char *)(a1 + 250) = 1;
  }
  return result;
}

uint64_t sub_1005AE0E8(uint64_t a1, _DWORD *a2)
{
  if (*a2 != 3) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 250))
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_1022BCEA0);
    }
    long long v3 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "DOMINANT ACTIVITY: stop monitoring dominant activity", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022BCEA0);
      }
      long long v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLMotionState::unregisterForNotificationInternal(const CLMotionState_Type::Notification &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    CLMotionActivity::init((CLMotionActivity *)(a1 + 256));
    *(unsigned char *)(a1 + 250) = 0;
    BOOL v4 = *(void **)(a1 + 416);
    if (v4)
    {
      [v4 invalidate];

      *(void *)(a1 + 416) = 0;
    }
    return 1;
  }
  if (qword_102419010 != -1) {
    dispatch_once(&qword_102419010, &stru_1022BCEA0);
  }
  long long v6 = qword_102419018;
  if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "DOMINANT ACTIVITY: not monitoring dominant activity yet", buf, 2u);
  }
  BOOL v7 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v7)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_1022BCEA0);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLMotionState::unregisterForNotificationInternal(const CLMotionState_Type::Notification &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
    return 0;
  }
  return result;
}

double sub_1005AE3E8(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 112);
  void v16[6] = *(_OWORD *)(a2 + 96);
  v16[7] = v4;
  uint64_t v17 = *(void *)(a2 + 128);
  long long v5 = *(_OWORD *)(a2 + 48);
  uint64_t v16[2] = *(_OWORD *)(a2 + 32);
  v16[3] = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  v16[4] = *(_OWORD *)(a2 + 64);
  void v16[5] = v6;
  long long v7 = *(_OWORD *)(a2 + 16);
  v16[0] = *(_OWORD *)a2;
  v16[1] = v7;
  int v15 = 4;
  (*(void (**)(uint64_t, int *, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v15, v16, 1, 0xFFFFFFFFLL, 0);
  if (*(unsigned char *)(a1 + 250))
  {
    long long v9 = operator new(0x98uLL);
    long long v10 = *(_OWORD *)(a2 + 112);
    void v9[7] = *(_OWORD *)(a2 + 96);
    v9[8] = v10;
    *((void *)v9 + 1_Block_object_dispose(&STACK[0x850], 8) = *(void *)(a2 + 128);
    long long v11 = *(_OWORD *)(a2 + 48);
    v9[3] = *(_OWORD *)(a2 + 32);
    void v9[4] = v11;
    long long v12 = *(_OWORD *)(a2 + 80);
    void v9[5] = *(_OWORD *)(a2 + 64);
    void v9[6] = v12;
    long long v13 = *(_OWORD *)(a2 + 16);
    v9[1] = *(_OWORD *)a2;
    _DWORD v9[2] = v13;
    uint64_t v14 = *(void *)(a1 + 392);
    *(void *)long long v9 = v14;
    *((void *)v9 + 1) = a1 + 392;
    *(void *)(v14 + _Block_object_dispose(&STACK[0x850], 8) = v9;
    *(void *)(a1 + 392) = v9;
    ++*(void *)(a1 + 408);
    return sub_1005AE50C();
  }
  return result;
}

double sub_1005AE50C()
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022BCEC0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG) || sub_10013D1A0(115, 3))
  {
    return CFAbsoluteTimeGetCurrent();
  }
  return result;
}

void sub_1005AE584(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 416);
  if (v2)
  {
    [v2 invalidate];

    *(void *)(a1 + 416) = 0;
  }
  if (!*(unsigned char *)(a1 + 250)) {
    return;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  double v4 = Current;
  long long v5 = (_OWORD *)(a1 + 392);
  uint64_t v6 = *(void *)(a1 + 400);
  if (v6 != a1 + 392)
  {
    double v7 = Current + -30.0;
    uint64_t v8 = *(void *)(a1 + 400);
    long long v9 = (_OWORD *)(a1 + 392);
    if (*(double *)(v6 + 96) < Current + -30.0)
    {
      uint64_t v8 = *(void *)(a1 + 400);
      while (1)
      {
        long long v9 = (_OWORD *)v8;
        uint64_t v8 = *(void *)(v8 + 8);
        if ((_OWORD *)v8 == v5) {
          break;
        }
        if (*(double *)(v8 + 96) >= v7) {
          goto LABEL_11;
        }
      }
      uint64_t v8 = a1 + 392;
    }
LABEL_11:
    if (v9 != v5)
    {
      long long v10 = v9[3];
      *(_OWORD *)&uint8_t buf[16] = v9[2];
      long long v89 = v10;
      long long v11 = v9[5];
      long long v90 = v9[4];
      long long v91 = v11;
      *(_OWORD *)std::string buf = v9[1];
      long long v12 = *(_OWORD *)((char *)v9 + 120);
      long long v65 = *(_OWORD *)((char *)v9 + 104);
      long long v66 = v12;
      long long v67 = *(_OWORD *)((char *)v9 + 136);
      if ((_OWORD *)v8 == v5)
      {
        uint64_t v13 = *(void *)v9;
        *(void *)(v13 + _Block_object_dispose(&STACK[0x850], 8) = *((void *)v9 + 1);
        **((void **)v9 + 1) = v13;
        --*(void *)(a1 + 408);
        operator delete(v9);
      }
      else
      {
        sub_1005AED4C(a1 + 392, (uint64_t *)v6, (uint64_t *)v8);
      }
      uint64_t v14 = operator new(0x98uLL);
      long long v15 = v90;
      void v14[3] = v89;
      v14[4] = v15;
      void v14[5] = v91;
      long long v16 = *(_OWORD *)&buf[16];
      v14[1] = *(_OWORD *)buf;
      int v14[2] = v16;
      *((double *)v14 + 12) = v7;
      long long v17 = v66;
      *(_OWORD *)((char *)v14 + 104) = v65;
      *(_OWORD *)((char *)v14 + 120) = v17;
      *(_OWORD *)((char *)v14 + 136) = v67;
      long long v18 = *(void **)(a1 + 400);
      *(void *)uint64_t v14 = v5;
      *((void *)v14 + 1) = v18;
      void *v18 = v14;
      uint64_t v19 = *(void *)(a1 + 408) + 1;
      *(void *)(a1 + 400) = v14;
      *(void *)(a1 + 40_Block_object_dispose(&STACK[0x850], 8) = v19;
    }
  }
  sub_1005AE50C();
  __int16 v78 = 0;
  uint64_t v79 = 0;
  unint64_t v77 = (uint64_t *)&v78;
  int v21 = *(_DWORD **)(a1 + 400);
  if (v5 == (_OWORD *)v21)
  {
    std::string __p = 0;
    double v75 = 0;
    double v22 = 0.0;
    __int16 v76 = 0;
    goto LABEL_61;
  }
  double v22 = 0.0;
  double v23 = v4;
  do
  {
    long long v24 = *(_DWORD **)v5;
    double v25 = *(double *)(*(void *)v5 + 96);
    double v26 = v23 - v25;
    long long v27 = v78;
    if (!v78)
    {
      int v28 = v24[4];
LABEL_33:
      int v33 = v24[5];
      *(_DWORD *)std::string buf = v28;
      *(_DWORD *)&uint8_t buf[8] = v28;
      *(_DWORD *)&unsigned char buf[12] = v33;
      *(double *)&uint8_t buf[16] = v23 - v25;
      long long v20 = (CLMotionActivity *)sub_1005B0C90(&v77, (int *)buf, (uint64_t)buf);
      long long v24 = *(_DWORD **)v5;
      double v25 = *(double *)(*(void *)v5 + 96);
      int v21 = *(_DWORD **)(a1 + 400);
      goto LABEL_34;
    }
    int v28 = v24[4];
    long long v29 = &v78;
    do
    {
      uint64_t v30 = v27;
      long long v31 = v29;
      int v32 = *((_DWORD *)v27 + 8);
      if (v32 >= v28) {
        long long v29 = (void **)v27;
      }
      else {
        ++v27;
      }
      long long v27 = (void *)*v27;
    }
    while (v27);
    if (v29 == &v78) {
      goto LABEL_33;
    }
    if (v32 < v28) {
      uint64_t v30 = v31;
    }
    if (v28 < *((_DWORD *)v30 + 8)) {
      goto LABEL_33;
    }
    if (v24[5] == 2 && *((_DWORD *)v29 + 11) != 2) {
      *((_DWORD *)v29 + 11) = 2;
    }
    *((double *)v29 + 6) = v26 + *((double *)v29 + 6);
LABEL_34:
    double v22 = v22 + v26;
    double v23 = v25;
    long long v5 = v24;
  }
  while (v24 != v21);
  uint64_t v34 = v77;
  std::string __p = 0;
  double v75 = 0;
  __int16 v76 = 0;
  if (v77 != (uint64_t *)&v78)
  {
    int v35 = 0;
    do
    {
      uint64_t v36 = (__n128 *)(v34 + 5);
      if (v35 >= v76)
      {
        uint64_t v37 = ((char *)v35 - (unsigned char *)__p) >> 4;
        if ((unint64_t)(v37 + 1) >> 60) {
          sub_1001D7FD4();
        }
        unint64_t v38 = ((char *)v76 - (unsigned char *)__p) >> 3;
        if (v38 <= v37 + 1) {
          unint64_t v38 = v37 + 1;
        }
        if ((unint64_t)((char *)v76 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39) {
          long long v20 = (CLMotionActivity *)sub_1000C571C((uint64_t)&v76, v39);
        }
        else {
          long long v20 = 0;
        }
        int v40 = (__n128 *)((char *)v20 + 16 * v37);
        *int v40 = *v36;
        float v42 = (__n128 *)__p;
        int v41 = v75;
        float v43 = v40;
        if (v75 != __p)
        {
          do
          {
            v43[-1] = v41[-1];
            --v43;
            --v41;
          }
          while (v41 != v42);
          int v41 = (__n128 *)__p;
        }
        int v35 = v40 + 1;
        std::string __p = v43;
        double v75 = v40 + 1;
        __int16 v76 = (__n128 *)((char *)v20 + 16 * v39);
        if (v41) {
          operator delete(v41);
        }
      }
      else
      {
        *v35++ = *v36;
      }
      double v75 = v35;
      __float2 v44 = (uint64_t *)v34[1];
      if (v44)
      {
        do
        {
          uint64_t v45 = v44;
          __float2 v44 = (uint64_t *)*v44;
        }
        while (v44);
      }
      else
      {
        do
        {
          uint64_t v45 = (uint64_t *)v34[2];
          BOOL v46 = *v45 == (void)v34;
          uint64_t v34 = v45;
        }
        while (!v46);
      }
      uint64_t v34 = v45;
    }
    while (v45 != (uint64_t *)&v78);
  }
LABEL_61:
  uint64_t v73 = 0;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  CLMotionActivity::getInit((uint64_t *)&v65, v20);
  if (v22 >= 30.0)
  {
    unint64_t v50 = 126 - 2 * __clz(((char *)v75 - (unsigned char *)__p) >> 4);
    if (v75 == __p) {
      uint64_t v51 = 0;
    }
    else {
      uint64_t v51 = v50;
    }
    sub_1005B0D54((__n128 *)__p, v75, (uint64_t)buf, v51, 1);
    uint64_t v49 = v75;
    *(void *)&long long v65 = v75[-1].n128_u64[0];
    unint64_t v48 = v75[-1].n128_u64[1];
    unsigned int v47 = v65;
  }
  else
  {
    unsigned int v47 = 0;
    *(void *)&long long v65 = 0;
    unint64_t v48 = -1.0;
    uint64_t v49 = v75;
  }
  *(double *)&long long v70 = v4;
  if ((unint64_t)((char *)v49 - (unsigned char *)__p) >= 0x11
    && (*(_DWORD *)(a1 + 112) != *(_DWORD *)(a1 + 256) || *(_DWORD *)(a1 + 116) != *(_DWORD *)(a1 + 260)))
  {
    id v52 = [*(id *)(a1 + 40) newTimer];
    *(void *)(a1 + 416) = v52;
    v64[0] = _NSConcreteStackBlock;
    v64[1] = 3221225472;
    v64[2] = sub_1005AEDC0;
    v64[3] = &unk_1022A3020;
    v64[4] = a1;
    [v52 setHandler:v64];
    if (v79 - 2 >= (unint64_t)(((char *)v75 - (unsigned char *)__p) >> 4)) {
      sub_100273D6C();
    }
    double v53 = (v75[-1].n128_f64[1] - *((double *)__p + 2 * v79 - 3)) * 0.5;
    if (v53 < 1.0) {
      double v53 = 1.0;
    }
    [*(id *)(a1 + 416) setNextFireDelay:v53];
    unsigned int v47 = v65;
  }
  if (*(void *)(a1 + 256) != __PAIR64__(DWORD1(v65), v47))
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_1022BCEA0);
    }
    int v54 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v55 = CLMotionActivity::activityTypeToString();
      uint64_t v56 = CLMotionActivity::activityConfidenceToString();
      *(_DWORD *)std::string buf = 134218754;
      *(double *)&uint8_t buf[4] = v22;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&unsigned char buf[14] = v55;
      *(_WORD *)&buf[22] = 2080;
      *(void *)&unsigned char buf[24] = v56;
      LOWORD(v89) = 2048;
      *(void *)((char *)&v89 + 2) = v48;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "DOMINANT ACTIVITY: dominant activity during the last %f seconds, type, %s, confidence, %s, interval, %f", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_1022BCEA0);
      }
      uint64_t v61 = CLMotionActivity::activityTypeToString();
      uint64_t v62 = CLMotionActivity::activityConfidenceToString();
      int v80 = 134218754;
      double v81 = v22;
      __int16 v82 = 2080;
      uint64_t v83 = v61;
      __int16 v84 = 2080;
      uint64_t v85 = v62;
      __int16 v86 = 2048;
      unint64_t v87 = v48;
      double v63 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionState::processDominantActivity()", "%s\n", v63);
      if (v63 != buf) {
        free(v63);
      }
    }
    long long v57 = v72;
    *(_OWORD *)(a1 + 352) = v71;
    *(_OWORD *)(a1 + 36_Block_object_dispose(&STACK[0x850], 8) = v57;
    *(void *)(a1 + 384) = v73;
    long long v58 = v68;
    *(_OWORD *)(a1 + 28_Block_object_dispose(&STACK[0x850], 8) = v67;
    *(_OWORD *)(a1 + 304) = v58;
    long long v59 = v70;
    *(_OWORD *)(a1 + 320) = v69;
    *(_OWORD *)(a1 + 336) = v59;
    long long v60 = v66;
    *(_OWORD *)(a1 + 256) = v65;
    *(_OWORD *)(a1 + 272) = v60;
    sub_1005ADD04(a1);
  }
  if (__p)
  {
    double v75 = (__n128 *)__p;
    operator delete(__p);
  }
  sub_1000F5BB0((uint64_t)&v77, v78);
}

void sub_1005AECFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,char a38,void *a39)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1000F5BB0((uint64_t)&a38, a39);
  _Unwind_Resume(a1);
}

uint64_t *sub_1005AED4C(uint64_t a1, uint64_t *__p, uint64_t *a3)
{
  if (__p != a3)
  {
    uint64_t v5 = *a3;
    uint64_t v6 = *__p;
    *(void *)(v6 + _Block_object_dispose(&STACK[0x850], 8) = *(void *)(*a3 + 8);
    **(void **)(v5 + _Block_object_dispose(&STACK[0x850], 8) = v6;
    do
    {
      double v7 = (uint64_t *)__p[1];
      --*(void *)(a1 + 16);
      operator delete(__p);
      std::string __p = v7;
    }
    while (v7 != a3);
  }
  return a3;
}

uint64_t sub_1005AEDC0(uint64_t a1)
{
  return sub_1005AE584(*(void *)(a1 + 32));
}

uint64_t sub_1005AEDC8(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_1022BD040;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    long long v12 = a3;
  }
  else {
    long long v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:[a4 silo]];
  return a1;
}

void sub_1005AEEAC()
{
}

void sub_1005AEF68(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

id sub_1005AEFA4(uint64_t a1)
{
  id v2 = [+[CLServiceVendor sharedInstance] proxyForService:@"CLMotionState"];

  return [v2 syncgetDoSync:a1];
}

void sub_1005AEFF0(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        long long v9 = (uint64_t *)v4;
      }
      else {
        long long v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BCE80);
      }
      long long v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        long long v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          long long v11 = (void *)*v11;
        }
        *(_DWORD *)std::string buf = 136446466;
        uint64_t v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022BCE80);
        }
        long long v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          long long v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        long long v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData>::removeClient(int) [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_1005AF280(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_1005AF334(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_1005AF37C(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_1005AF3C4(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_1005AF40C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_10241C970);
}

uint64_t sub_1005AF438(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)float v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          long long v24 = (uint64_t *)v18;
        }
        else {
          long long v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          long long v29 = (uint64_t *)v25;
        }
        else {
          long long v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)&buf[0] = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        memset(buf, 0, 160);
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_1005B1AB8();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_10241C971;
        int v39 = v17;
        *(void *)&buf[0] = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)&buf[0] = &v39;
        long long v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        int v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)&buf[0] = &v39;
        uint64_t v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)&buf[0] = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022BCE80);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    long long v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v15 = (void *)*v15;
    }
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BCE80);
    }
    uint64_t v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v37 = (void *)*v37;
    }
    *(_DWORD *)float v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    unint64_t v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_1005AF8F8(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BCE80);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)std::string buf = 136446466;
      long long v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BCE80);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1005AFB7C(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022BCE80);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022BCE80);
                }
                long long v29 = a1 + 8;
                if (a1[31] < 0) {
                  long long v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                unint64_t v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                long long v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1005AFF50(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  int v11 = *(_OWORD **)(v7 + 64);
  if (!v11) {
    return 0;
  }
  long long v12 = v11[1];
  *a3 = *v11;
  a3[1] = v12;
  long long v13 = v11[2];
  long long v14 = v11[3];
  long long v15 = v11[5];
  a3[4] = v11[4];
  a3[5] = v15;
  a3[2] = v13;
  a3[3] = v14;
  long long v16 = v11[6];
  long long v17 = v11[7];
  long long v18 = v11[9];
  a3[8] = v11[8];
  a3[9] = v18;
  a3[6] = v16;
  a3[7] = v17;
  return 1;
}

uint64_t sub_1005AFFD0(uint64_t a1, int *a2, _OWORD *a3)
{
  int v6 = (char *)operator new(0xB8uLL);
  long long v7 = a3[7];
  *(_OWORD *)(v6 + 120) = a3[6];
  *(_OWORD *)(v6 + 136) = v7;
  long long v8 = a3[9];
  *(_OWORD *)(v6 + 152) = a3[8];
  *(_OWORD *)(v6 + 16_Block_object_dispose(&STACK[0x850], 8) = v8;
  long long v9 = a3[3];
  *(_OWORD *)(v6 + 56) = a3[2];
  *(_OWORD *)(v6 + 72) = v9;
  long long v10 = a3[5];
  *(_OWORD *)(v6 + 8_Block_object_dispose(&STACK[0x850], 8) = a3[4];
  *(_OWORD *)(v6 + 104) = v10;
  long long v11 = a3[1];
  *(_OWORD *)(v6 + 24) = *a3;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = off_1022BCFD0;
  *(_OWORD *)(v6 + 40) = v11;
  int v15 = *a2;
  long long v16 = &v15;
  long long v12 = sub_10044715C((uint64_t **)(a1 + 56), &v15, (uint64_t)&unk_101D0B290, &v16);
  long long v13 = (std::__shared_weak_count *)v12[9];
  v12[8] = (uint64_t *)(v6 + 24);
  v12[9] = (uint64_t *)v6;
  if (v13) {
    sub_1000DB0A0(v13);
  }
  return 1;
}

void sub_1005B00B8(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B00CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_1005B0160(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BCE80);
    }
    id v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)std::string buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BCE80);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData>::listClients() [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022BCE80);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022BCE80);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData>::listClients() [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    long long v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        long long v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022BCE80);
            }
            long long v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              long long v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                long long v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)std::string buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022BCE80);
              }
              long long v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData>::listClients() [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            long long v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                long long v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                long long v9 = v15;
              }
              while (!v16);
            }
            long long v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        long long v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            long long v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            long long v8 = v19;
          }
          while (!v16);
        }
        long long v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_1005B0710(uint64_t a1)
{
  sub_1005B1A48(a1);

  operator delete();
}

void sub_1005B0748(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1005B0778(id a1)
{
  qword_102419018 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void sub_1005B07A8(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1005B07D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022BCFD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1005B07F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022BCFD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

id sub_1005B084C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_1005B0BD8((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1022BD010);
    }
    uint64_t v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = 0x8000000101D23AD0 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_1022BD010);
  }
  uint64_t v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = 0x8000000101D23AD0 & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_1022BD010);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = 0x8000000101D23AD0 & 0x7FFFFFFFFFFFFFFFLL;
  int v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMotionState_Type::NotificationData, Callbacunint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_1005B0BD8(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_102392768))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)160) {
      sub_101A66400();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_1005B0C60(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t **sub_1005B0C90(uint64_t **a1, int *a2, uint64_t a3)
{
  int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        int v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        int v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v8 = a1 + 1;
LABEL_10:
    __int16 v10 = (char *)operator new(0x38uLL);
    *((_DWORD *)v10 + _Block_object_dispose(&STACK[0x850], 8) = *(_DWORD *)a3;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 8);
    sub_1000EDF90(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_1005B0D54(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t sub_1005B1148(uint64_t result, void *a2)
{
  if ((void *)result != a2)
  {
    id v2 = (void *)(result + 16);
    if ((void *)(result + 16) != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = (void *)result;
      do
      {
        double v5 = *((double *)v4 + 3);
        double v6 = *((double *)v4 + 1);
        uint64_t v4 = v2;
        if (v5 < v6)
        {
          uint64_t v7 = *v2;
          uint64_t v8 = v3;
          while (1)
          {
            *(_OWORD *)(result + v8 + 16) = *(_OWORD *)(result + v8);
            if (!v8) {
              break;
            }
            double v9 = *(double *)(result + v8 - 8);
            v8 -= 16;
            if (v5 >= v9)
            {
              uint64_t v10 = result + v8 + 16;
              goto LABEL_10;
            }
          }
          uint64_t v10 = result;
LABEL_10:
          *(void *)uint64_t v10 = v7;
          *(double *)(v10 + _Block_object_dispose(&STACK[0x850], 8) = v5;
        }
        id v2 = v4 + 2;
        v3 += 16;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_1005B11CC(double *a1, double *a2, double *a3)
{
  double v3 = a2[1];
  double v4 = a3[1];
  if (v3 < a1[1])
  {
    if (v4 < v3)
    {
      long long v5 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    long long v8 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (a3[1] >= a2[1]) {
      return 1;
    }
    long long v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    long long v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (a2[1] >= a1[1]) {
      return 1;
    }
    long long v7 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

unint64_t sub_1005B1288(double *a1, double *a2)
{
  double v2 = a1[1];
  if (v2 >= *(a2 - 1))
  {
    unint64_t v6 = (unint64_t)(a1 + 2);
    do
    {
      unint64_t v4 = v6;
      if (v6 >= (unint64_t)a2) {
        break;
      }
      double v7 = *(double *)(v6 + 8);
      v6 += 16;
    }
    while (v2 >= v7);
  }
  else
  {
    double v3 = a1;
    do
    {
      unint64_t v4 = (unint64_t)(v3 + 2);
      double v5 = v3[3];
      v3 += 2;
    }
    while (v2 >= v5);
  }
  if (v4 >= (unint64_t)a2)
  {
    long long v8 = a2;
  }
  else
  {
    do
    {
      long long v8 = a2 - 2;
      double v9 = *(a2 - 1);
      a2 -= 2;
    }
    while (v2 < v9);
  }
  double v10 = *a1;
  while (v4 < (unint64_t)v8)
  {
    long long v14 = *(_OWORD *)v4;
    *(_OWORD *)unint64_t v4 = *(_OWORD *)v8;
    *(_OWORD *)long long v8 = v14;
    do
    {
      double v11 = *(double *)(v4 + 24);
      v4 += 16;
    }
    while (v2 >= v11);
    do
    {
      double v12 = *(v8 - 1);
      v8 -= 2;
    }
    while (v2 < v12);
  }
  if ((double *)(v4 - 16) != a1) {
    *(_OWORD *)a1 = *(_OWORD *)(v4 - 16);
  }
  *(double *)(v4 - 16) = v10;
  *(double *)(v4 - _Block_object_dispose(&STACK[0x850], 8) = v2;
  return v4;
}

unint64_t sub_1005B136C(double *a1, double *a2)
{
  uint64_t v2 = 0;
  double v3 = *a1;
  double v4 = a1[1];
  do
  {
    double v5 = a1[v2 + 3];
    v2 += 2;
  }
  while (v5 < v4);
  unint64_t v6 = (unint64_t)&a1[v2];
  if (v2 == 2)
  {
    while (v6 < (unint64_t)a2)
    {
      double v7 = a2 - 2;
      double v9 = *(a2 - 1);
      a2 -= 2;
      if (v9 < v4) {
        goto LABEL_9;
      }
    }
    double v7 = a2;
  }
  else
  {
    do
    {
      double v7 = a2 - 2;
      double v8 = *(a2 - 1);
      a2 -= 2;
    }
    while (v8 >= v4);
  }
LABEL_9:
  unint64_t v10 = (unint64_t)&a1[v2];
  if (v6 < (unint64_t)v7)
  {
    double v11 = v7;
    do
    {
      long long v12 = *(_OWORD *)v10;
      *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
      *(_OWORD *)double v11 = v12;
      do
      {
        double v13 = *(double *)(v10 + 24);
        v10 += 16;
      }
      while (v13 < v4);
      do
      {
        double v14 = *(v11 - 1);
        v11 -= 2;
      }
      while (v14 >= v4);
    }
    while (v10 < (unint64_t)v11);
  }
  if ((double *)(v10 - 16) != a1) {
    *(_OWORD *)a1 = *(_OWORD *)(v10 - 16);
  }
  *(double *)(v10 - 16) = v3;
  *(double *)(v10 - _Block_object_dispose(&STACK[0x850], 8) = v4;
  return v10 - 16;
}

BOOL sub_1005B1450(__n128 *a1, __n128 *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (a2[-1].n128_f64[1] < a1->n128_f64[1])
      {
        __n128 v6 = *a1;
        *a1 = a2[-1];
        a2[-1] = v6;
      }
      return result;
    case 3:
      sub_1005B11CC(a1->n128_f64, a1[1].n128_f64, a2[-1].n128_f64);
      return 1;
    case 4:
      sub_1005B1600(a1->n128_f64, (uint64_t)&a1[1], (uint64_t)&a1[2], (uint64_t)&a2[-1]);
      return 1;
    case 5:
      sub_1005B16A4(a1->n128_f64, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      double v7 = a1 + 2;
      sub_1005B11CC(a1->n128_f64, a1[1].n128_f64, a1[2].n128_f64);
      double v8 = a1 + 3;
      if (&a1[3] == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    double v11 = v8->n128_f64[1];
    if (v11 < v7->n128_f64[1])
    {
      unint64_t v12 = v8->n128_u64[0];
      uint64_t v13 = v9;
      while (1)
      {
        *(__n128 *)((char *)a1 + v13 + 4_Block_object_dispose(&STACK[0x850], 8) = *(__n128 *)((char *)a1 + v13 + 32);
        if (v13 == -32) {
          break;
        }
        double v14 = *(double *)((char *)&a1[1].n128_f64[1] + v13);
        v13 -= 16;
        if (v11 >= v14)
        {
          uint64_t v15 = (uint64_t)&a1[3] + v13;
          goto LABEL_12;
        }
      }
      uint64_t v15 = (uint64_t)a1;
LABEL_12:
      *(void *)uint64_t v15 = v12;
      *(double *)(v15 + _Block_object_dispose(&STACK[0x850], 8) = v11;
      if (++v10 == 8) {
        return &v8[1] == a2;
      }
    }
    double v7 = v8;
    v9 += 16;
    if (++v8 == a2) {
      return 1;
    }
  }
}

__n128 sub_1005B1600(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1005B11CC(a1, (double *)a2, (double *)a3);
  result.n128_u64[0] = *(void *)(a4 + 8);
  if (result.n128_f64[0] < *(double *)(a3 + 8))
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    result.n128_u64[0] = *(void *)(a3 + 8);
    if (result.n128_f64[0] < *(double *)(a2 + 8))
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      result.n128_u64[0] = *(void *)(a2 + 8);
      if (result.n128_f64[0] < a1[1])
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 sub_1005B16A4(double *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  sub_1005B1600(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
  result.n128_u64[0] = a5->n128_u64[1];
  if (result.n128_f64[0] < a4->n128_f64[1])
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    result.n128_u64[0] = a4->n128_u64[1];
    if (result.n128_f64[0] < a3->n128_f64[1])
    {
      __n128 result = *a3;
      *a3 = *a4;
      *a4 = result;
      result.n128_u64[0] = a3->n128_u64[1];
      if (result.n128_f64[0] < a2->n128_f64[1])
      {
        __n128 result = *a2;
        *a2 = *a3;
        *a3 = result;
        result.n128_u64[0] = a2->n128_u64[1];
        if (result.n128_f64[0] < a1[1])
        {
          __n128 result = *(__n128 *)a1;
          *(__n128 *)a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

double *sub_1005B1774(double *a1, double *a2, double *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    __n128 v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unint64_t v12 = &a1[2 * v10];
      do
      {
        sub_1005B1928((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      double v14 = v6;
      do
      {
        if (v14[1] < a1[1])
        {
          long long v15 = *(_OWORD *)v14;
          *(_OWORD *)double v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          sub_1005B1928((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      do
      {
        uint64_t v17 = 0;
        long long v24 = *(_OWORD *)a1;
        __int16 v18 = a1;
        do
        {
          char v19 = v18;
          v18 += 2 * v17 + 2;
          uint64_t v20 = 2 * v17;
          uint64_t v17 = (2 * v17) | 1;
          uint64_t v21 = v20 + 2;
          if (v21 < v16 && v18[1] < v18[3])
          {
            v18 += 2;
            uint64_t v17 = v21;
          }
          *(_OWORD *)char v19 = *(_OWORD *)v18;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v18 == v6)
        {
          *(_OWORD *)__int16 v18 = v24;
        }
        else
        {
          *(_OWORD *)__int16 v18 = *(_OWORD *)v6;
          *(_OWORD *)__n128 v6 = v24;
          sub_1005B19EC((uint64_t)a1, (uint64_t)(v18 + 2), a4, ((char *)(v18 + 2) - (char *)a1) >> 4);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1005B1928(uint64_t result, uint64_t a2, uint64_t a3, double *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (double *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3 && v8[1] < v8[3])
      {
        v8 += 2;
        uint64_t v7 = v9;
      }
      double v10 = a4[1];
      if (v8[1] >= v10)
      {
        double v11 = *a4;
        do
        {
          unint64_t v12 = a4;
          a4 = v8;
          *(_OWORD *)unint64_t v12 = *(_OWORD *)v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v13 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = (double *)(result + 16 * v7);
          uint64_t v14 = v13 + 2;
          if (v14 < a3 && v8[1] < v8[3])
          {
            v8 += 2;
            uint64_t v7 = v14;
          }
        }
        while (v8[1] >= v10);
        *a4 = v11;
        a4[1] = v10;
      }
    }
  }
  return result;
}

uint64_t sub_1005B19EC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    double v5 = *(double *)(a2 - 8);
    if (*(double *)(result + 16 * v4 + 8) < v5)
    {
      uint64_t v8 = *(void *)(a2 - 16);
      uint64_t v6 = a2 - 16;
      uint64_t v7 = v8;
      do
      {
        uint64_t v9 = (_OWORD *)v6;
        uint64_t v6 = result + 16 * v4;
        *uint64_t v9 = *(_OWORD *)v6;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
      }
      while (*(double *)(result + 16 * v4 + 8) < v5);
      *(void *)uint64_t v6 = v7;
      *(double *)(v6 + _Block_object_dispose(&STACK[0x850], 8) = v5;
    }
  }
  return result;
}

uint64_t sub_1005B1A48(uint64_t a1)
{
  *(void *)a1 = off_1022BD040;
  uint64_t v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_1005B1AB8()
{
}

uint64_t sub_1005B1B84(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

uint64_t sub_1005B1BA4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1022BD068;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = a2;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(a1 + 16) = Current;
  *(CFAbsoluteTime *)(a1 + 24) = Current;
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  return a1;
}

uint64_t sub_1005B1C18(uint64_t a1)
{
  *(void *)a1 = off_1022BD068;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = 14400;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(a1 + 16) = Current;
  *(CFAbsoluteTime *)(a1 + 24) = Current;
  *(_DWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  return a1;
}

BOOL sub_1005B1C90(double *a1, double *a2)
{
  double v2 = *a2 - a1[2];
  double v3 = (double)*((unint64_t *)a1 + 1);
  if (v2 >= v3)
  {
    (*(void (**)(double *))(*(void *)a1 + 24))(a1);
    ++*((_DWORD *)a1 + 8);
    (*(void (**)(double *))(*(void *)a1 + 16))(a1);
    a1[2] = *a2;
  }
  return v2 >= v3;
}

BOOL sub_1005B1D3C(double *a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  return sub_1005B1C90(a1, &Current);
}

void sub_1005B1D78()
{
}

double sub_1005B2040(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 12_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 16_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(_DWORD *)(a1 + 179) = 0;
  *(void *)(a1 + 172) = 0;
  *(void *)(a1 + 20_Block_object_dispose(&STACK[0x850], 8) = 0;
  *(void *)(a1 + 216) = a1 + 216;
  *(void *)(a1 + 224) = a1 + 216;
  *(void *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 244) = 0;
  *(_OWORD *)(a1 + 24_Block_object_dispose(&STACK[0x850], 8) = xmmword_101D23B30;
  *(_OWORD *)(a1 + 264) = unk_101D23B40;
  *(_OWORD *)(a1 + 280) = xmmword_101D23B50;
  *(_OWORD *)(a1 + 292) = *(long long *)((char *)&xmmword_101D23B50 + 12);
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 32_Block_object_dispose(&STACK[0x850], 8) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  return result;
}

void sub_1005B20E8(uint64_t a1)
{
  uint64_t v2 = *(char **)a1;
  int64x2_t v3 = *(int64x2_t *)(a1 + 8);
  int64x2_t v4 = vshrq_n_s64(vsubq_s64(v3, vdupq_n_s64((unint64_t)v2)), 3uLL);
  unint64_t v5 = 0x6DB6DB6DB6DB6DB7 * v4.i64[0];
  unint64_t v6 = v5;
  if (0x6DB6DB6DB6DB6DB7 * v4.i64[1] <= v5) {
    return;
  }
  if ((char *)v3.i64[0] == v2)
  {
    double v11 = 0;
    uint64_t v9 = 56 * v5;
    goto LABEL_8;
  }
  uint64_t v7 = (char *)sub_10017EA6C(a1 + 16, v5);
  uint64_t v2 = *(char **)a1;
  uint64_t v8 = *(char **)(a1 + 8);
  uint64_t v9 = (uint64_t)&v7[56 * v6];
  double v11 = &v7[56 * v10];
  if (v8 == *(char **)a1)
  {
LABEL_8:
    uint64_t v12 = v9;
    goto LABEL_9;
  }
  uint64_t v12 = v9;
  do
  {
    long long v13 = *(_OWORD *)(v8 - 56);
    long long v14 = *(_OWORD *)(v8 - 40);
    long long v15 = *(_OWORD *)(v8 - 24);
    *(_DWORD *)(v12 - _Block_object_dispose(&STACK[0x850], 8) = *((_DWORD *)v8 - 2);
    *(_OWORD *)(v12 - 24) = v15;
    *(_OWORD *)(v12 - 40) = v14;
    *(_OWORD *)(v12 - 56) = v13;
    v12 -= 56;
    v8 -= 56;
  }
  while (v8 != v2);
  uint64_t v2 = *(char **)a1;
LABEL_9:
  *(void *)a1 = v12;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x850], 8) = v9;
  *(void *)(a1 + 16) = v11;
  if (v2)
  {
    operator delete(v2);
  }
}

void sub_1005B2208(uint64_t a1, CLMotionActivity *a2)
{
  uint64_t v2 = *(void *)(a1 + 200);
  if (*(void *)(a1 + 192) != v2)
  {
    if (*(double *)&a2[1].type - *(double *)(v2 - 56) >= 840.0)
    {
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_1022BD0B8);
      }
      long long v15 = qword_102419208;
      if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Walking bout ended due to exceeding max duration without stepNotifications", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419200 != -1) {
          dispatch_once(&qword_102419200, &stru_1022BD0B8);
        }
        uint64_t v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleMotionActivityNotification(const CLMotionActivity &)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      sub_1005B2604(a1);
    }
    else
    {
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_1022BD0B8);
      }
      int64x2_t v4 = qword_102419208;
      if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v5 = CLMotionActivity::activityTypeToString();
        int type = a2->type;
        int confidence = a2->confidence;
        uint64_t v8 = CLMotionActivity::activityTypeToString();
        int source = a2[1].source;
        int mountedState = a2[1].mountedState;
        int isMounted = CLMotionActivity::isMounted(a2);
        uint64_t v12 = *(void *)&a2[1].type;
        *(_DWORD *)std::string buf = 136382467;
        uint64_t v18 = v5;
        __int16 v19 = 1025;
        int v20 = type;
        __int16 v21 = 1025;
        int v22 = confidence;
        __int16 v23 = 2081;
        uint64_t v24 = v8;
        __int16 v25 = 1025;
        int v26 = source;
        __int16 v27 = 1025;
        int v28 = mountedState;
        __int16 v29 = 1025;
        int v30 = isMounted;
        __int16 v31 = 2048;
        uint64_t v32 = v12;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Activity type is %{private}s (%{private}d), conf, %{private}d, raw activity type %{private}s (%{private}d), raw conf, %{private}d, mounted, %{private}d, startTime, %f", buf, 0x3Eu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419200 != -1) {
          dispatch_once(&qword_102419200, &stru_1022BD0B8);
        }
        CLMotionActivity::activityTypeToString();
        CLMotionActivity::activityTypeToString();
        CLMotionActivity::isMounted(a2);
        long long v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleMotionActivityNotification(const CLMotionActivity &)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

void sub_1005B2604(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 192);
  uint64_t v4 = *(void *)(a1 + 200);
  uint64_t v2 = (uint64_t *)(a1 + 192);
  if (v3 != v4)
  {
    id v52 = &v52;
    double v53 = &v52;
    uint64_t v54 = 0;
    uint64_t v5 = operator new(8uLL);
    uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((v4 - v3) >> 3);
    *uint64_t v5 = 0;
    uint64_t v7 = (double *)(v5 + 1);
    *(void *)&__p[8] = v5 + 1;
    *(void *)&__p[16] = v5 + 1;
    *(void *)std::string __p = v5;
    double v8 = 0.0;
    do
    {
      double v8 = v8 + (double)*(int *)(v3 + 24);
      if ((unint64_t)v7 >= *(void *)&__p[16])
      {
        uint64_t v10 = *(double **)__p;
        uint64_t v11 = ((uint64_t)v7 - *(void *)__p) >> 3;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61) {
          sub_1001D7FD4();
        }
        uint64_t v13 = *(void *)&__p[16] - *(void *)__p;
        if ((uint64_t)(*(void *)&__p[16] - *(void *)__p) >> 2 > v12) {
          unint64_t v12 = v13 >> 2;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          long long v15 = (char *)sub_1000DA54C((uint64_t)&__p[16], v14);
          uint64_t v10 = *(double **)__p;
          uint64_t v7 = *(double **)&__p[8];
        }
        else
        {
          long long v15 = 0;
        }
        uint64_t v16 = (double *)&v15[8 * v11];
        *uint64_t v16 = v8;
        uint64_t v9 = v16 + 1;
        while (v7 != v10)
        {
          uint64_t v17 = *((void *)v7-- - 1);
          *((void *)v16-- - 1) = v17;
        }
        *(void *)std::string __p = v16;
        *(void *)&__p[8] = v9;
        *(void *)&__p[16] = &v15[8 * v14];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        *uint64_t v7 = v8;
        uint64_t v9 = v7 + 1;
      }
      *(void *)&__p[8] = v9;
      v3 += 56;
      uint64_t v7 = v9;
    }
    while (v3 != v4);
    uint64_t v18 = 0;
    unsigned int v19 = 0;
    unsigned int v20 = 0;
    unsigned int v21 = 0;
    uint64_t v22 = *v2;
    __int16 v23 = *(void **)__p;
    double v24 = 0.0;
    do
    {
      unsigned int v25 = v20;
      uint64_t v26 = (int)v20;
      if ((int)(v20 + 1) > (int)v6) {
        unsigned int v27 = v20 + 1;
      }
      else {
        unsigned int v27 = v6;
      }
      unsigned int v20 = v27 - 1;
      int v28 = (double *)(*v2 + 72 + 56 * (int)v25);
      uint64_t v29 = v26 + 1;
      while (1)
      {
        uint64_t v30 = v29;
        if (v29 >= (int)v6) {
          break;
        }
        double v31 = *v28;
        v28 += 7;
        ++v25;
        ++v29;
        if (v31 - *(double *)(v22 + 56 * v18 + 8) > 360.0)
        {
          unsigned int v20 = v25 - 1;
          goto LABEL_29;
        }
      }
      unsigned int v25 = v27;
LABEL_29:
      double v32 = *(double *)(*(void *)__p + 8 * v18);
      if (*(double *)(*(void *)__p + 8 * (int)v25) - v32 > v24)
      {
        unsigned int v19 = v20;
        double v24 = *(double *)(*(void *)__p + 8 * (int)v25) - v32;
        unsigned int v21 = v18;
      }
      if (v30 >= (int)v6) {
        break;
      }
      ++v18;
    }
    while (v18 < (int)v6);
    if (v21 > v19) {
      goto LABEL_37;
    }
    unint64_t v33 = (int)v19;
    unint64_t v34 = (int)v21;
    uint64_t v35 = v52;
    char v36 = (long long *)(v22 + 56 * (int)v21);
    uint64_t v37 = v54 + 1;
    do
    {
      unint64_t v38 = operator new(0x48uLL);
      long long v39 = *v36;
      long long v40 = v36[1];
      long long v41 = v36[2];
      v38[8] = *((void *)v36 + 6);
      *((_OWORD *)v38 + 2) = v40;
      *((_OWORD *)v38 + 3) = v41;
      *((_OWORD *)v38 + 1) = v39;
      *unint64_t v38 = v35;
      v38[1] = &v52;
      v35[1] = v38;
      ++v34;
      char v36 = (long long *)((char *)v36 + 56);
      id v52 = v38;
      uint64_t v54 = v37++;
      uint64_t v35 = v38;
    }
    while (v34 <= v33);
    if (v23)
    {
LABEL_37:
      *(void *)&__p[8] = v23;
      operator delete(v23);
    }
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1022BD0B8);
    }
    char v42 = qword_102419208;
    if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v43 = *(void *)(*(void *)(a1 + 192) + 8);
      uint64_t v44 = *(void *)(*(void *)(a1 + 200) - 40);
      uint64_t v45 = v53[3];
      uint64_t v46 = v52[4];
      *(_DWORD *)std::string __p = 134284289;
      *(void *)&__p[4] = v43;
      *(_WORD *)&__p[12] = 2049;
      *(void *)&__p[14] = v44;
      *(_WORD *)&__p[22] = 2049;
      uint64_t v64 = v45;
      __int16 v65 = 2049;
      uint64_t v66 = v46;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "Timestamp comparisons... firstStepCountTime:%{private}f, lastStepCountTime:%{private}f, trimmedBoutStartTime:%{private}f, trimmedBoutEndTime:%{private}f", __p, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_1022BD0B8);
      }
      uint64_t v47 = *(void *)(*(void *)(a1 + 192) + 8);
      uint64_t v48 = *(void *)(*(void *)(a1 + 200) - 40);
      uint64_t v49 = v53[3];
      uint64_t v50 = v52[4];
      int v55 = 134284289;
      uint64_t v56 = v47;
      __int16 v57 = 2049;
      uint64_t v58 = v48;
      __int16 v59 = 2049;
      uint64_t v60 = v49;
      __int16 v61 = 2049;
      uint64_t v62 = v50;
      uint64_t v51 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::stopBout()", "%s\n", v51);
      if (v51 != __p) {
        free(v51);
      }
    }
    sub_1005B4264(a1, &v52, 0);
    sub_1003B2350(&v52);
    uint64_t v3 = *v2;
  }
  *(void *)(a1 + 200) = v3;
  sub_1005B20E8((uint64_t)v2);
}

void sub_1005B2ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
}

__n128 sub_1005B2AF8(uint64_t a1, uint64_t a2)
{
  if (qword_102419200 != -1) {
    dispatch_once(&qword_102419200, &stru_1022BD0B8);
  }
  uint64_t v4 = qword_102419208;
  if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a2 + 24);
    double v6 = *(double *)(a2 + 88);
    uint64_t v7 = *(void *)(a2 + 32);
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v9 = *(void *)(a2 + 16);
    int v10 = *(unsigned __int8 *)(a2 + 166);
    *(_DWORD *)std::string buf = 134284801;
    *(void *)uint64_t v79 = v8;
    *(_WORD *)&v79[8] = 1025;
    *(_DWORD *)&v79[10] = v5;
    __int16 v80 = 2049;
    double v81 = v6;
    __int16 v82 = 2049;
    uint64_t v83 = v7;
    __int16 v84 = 2049;
    uint64_t v85 = v9;
    __int16 v86 = 1025;
    int v87 = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Received stepCountEntry, startTime, %{private}f, count, %{private}d, activeTime, %{private}f, distance, %{private}f, firstStepTime, %{private}f, distanceSource, %{private}d", buf, 0x36u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1022BD0B8);
    }
    int v61 = *(_DWORD *)(a2 + 24);
    uint64_t v62 = *(void *)(a2 + 88);
    uint64_t v63 = *(void *)(a2 + 32);
    uint64_t v64 = *(void *)(a2 + 8);
    uint64_t v65 = *(void *)(a2 + 16);
    int v66 = *(unsigned __int8 *)(a2 + 166);
    *(_DWORD *)__int16 v76 = 134284801;
    *(void *)&v76[4] = v64;
    *(_WORD *)&v76[12] = 1025;
    *(_DWORD *)&v76[14] = v61;
    *(_WORD *)&v76[18] = 2049;
    *(void *)&v76[20] = v62;
    *(_WORD *)&v76[28] = 2049;
    *(void *)&v76[30] = v63;
    *(_WORD *)&v76[38] = 2049;
    *(void *)&v76[40] = v65;
    LOWORD(v77) = 1025;
    *(_DWORD *)((char *)&v77 + 2) = v66;
    long long v67 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v67);
    if (v67 != (char *)buf) {
      free(v67);
    }
  }
  if (!*(_DWORD *)(a1 + 288))
  {
    int v14 = *(_DWORD *)(a2 + 24);
    int v15 = *(_DWORD *)(a1 + 40);
    if (*(double *)(a2 + 8) < *(double *)(a1 + 24))
    {
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_1022BD0B8);
      }
      uint64_t v16 = qword_102419208;
      if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Saw time go backwards", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419200 != -1) {
          dispatch_once(&qword_102419200, &stru_1022BD0B8);
        }
        *(_WORD *)__int16 v76 = 0;
        long long v68 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v68);
        if (v68 != (char *)buf) {
          free(v68);
        }
      }
    }
    unsigned int v17 = v14 - v15;
    if (v14 - v15 < 0)
    {
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_1022BD0B8);
      }
      __int16 v23 = qword_102419208;
      if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Saw step count go backwards", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419200 != -1) {
          dispatch_once(&qword_102419200, &stru_1022BD0B8);
        }
        *(_WORD *)__int16 v76 = 0;
        long long v69 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v69);
        if (v69 != (char *)buf) {
          free(v69);
        }
      }
      if (*(void *)(a1 + 192) == *(void *)(a1 + 200)) {
        goto LABEL_119;
      }
      goto LABEL_37;
    }
    uint64_t v18 = *(void *)(a1 + 192);
    uint64_t v19 = *(void *)(a1 + 200);
    unsigned int v20 = (char **)(a1 + 192);
    if (v17 >= 0x29)
    {
      if (v18 != v19)
      {
        if (qword_102419200 != -1) {
          dispatch_once(&qword_102419200, &stru_1022BD0B8);
        }
        unsigned int v21 = qword_102419208;
        if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEFAULT))
        {
          double v22 = *(double *)(a2 + 8) - *(double *)(a1 + 24);
          *(_DWORD *)std::string buf = 67240448;
          *(_DWORD *)uint64_t v79 = v14 - v15;
          *(_WORD *)&v79[4] = 2050;
          *(double *)&v79[6] = v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Unexpected large jump in steps, %{public}d new steps, %{public}.1f seconds delay since last entry, stopping bout", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419200 != -1) {
            dispatch_once(&qword_102419200, &stru_1022BD0B8);
          }
          double v70 = *(double *)(a2 + 8) - *(double *)(a1 + 24);
          *(_DWORD *)__int16 v76 = 67240448;
          *(_DWORD *)&v76[4] = v14 - v15;
          *(_WORD *)&v76[8] = 2050;
          *(double *)&v76[10] = v70;
          long long v71 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v71);
          if (v71 != (char *)buf) {
            free(v71);
          }
        }
LABEL_37:
        sub_1005B2604(a1);
LABEL_119:
        long long v54 = *(_OWORD *)a2;
        long long v55 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x850], 8) = v55;
        *(_OWORD *)(a1 + 16) = v54;
        long long v56 = *(_OWORD *)(a2 + 48);
        long long v57 = *(_OWORD *)(a2 + 64);
        long long v58 = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 112) = v58;
        *(_OWORD *)(a1 + 64) = v56;
        *(_OWORD *)(a1 + 80) = v57;
        __n128 result = *(__n128 *)(a2 + 112);
        long long v59 = *(_OWORD *)(a2 + 128);
        long long v60 = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 176) = v60;
        *(__n128 *)(a1 + 12_Block_object_dispose(&STACK[0x850], 8) = result;
        *(_OWORD *)(a1 + 144) = v59;
        return result;
      }
      double v26 = *(double *)(a1 + 24);
      if (*(double *)(a2 + 8) - v26 <= 3.84)
      {
        if (qword_102419200 != -1) {
          dispatch_once(&qword_102419200, &stru_1022BD0B8);
        }
        long long v39 = qword_102419208;
        if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEFAULT))
        {
          double v40 = *(double *)(a2 + 8) - *(double *)(a1 + 24);
          *(_DWORD *)std::string buf = 67240448;
          *(_DWORD *)uint64_t v79 = v14 - v15;
          *(_WORD *)&v79[4] = 2050;
          *(double *)&v79[6] = v40;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Unexpected large jump in steps, %{public}d new steps, %{public}.1f seconds delay since last entry", buf, 0x12u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_119;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419200 == -1) {
          goto LABEL_55;
        }
      }
      else
      {
        if (v26 <= 0.0) {
          goto LABEL_119;
        }
        if (qword_102419200 != -1) {
          dispatch_once(&qword_102419200, &stru_1022BD0B8);
        }
        unsigned int v27 = qword_102419208;
        if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_INFO))
        {
          double v28 = *(double *)(a2 + 8) - *(double *)(a1 + 24);
          *(_DWORD *)std::string buf = 67240448;
          *(_DWORD *)uint64_t v79 = v14 - v15;
          *(_WORD *)&v79[4] = 2050;
          *(double *)&v79[6] = v28;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Possibly missing step count entries, %{public}d new steps, %{public}.1f seconds delay since last entry", buf, 0x12u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_119;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419200 == -1) {
          goto LABEL_55;
        }
      }
      dispatch_once(&qword_102419200, &stru_1022BD0B8);
LABEL_55:
      double v29 = *(double *)(a2 + 8) - *(double *)(a1 + 24);
      *(_DWORD *)__int16 v76 = 67240448;
      *(_DWORD *)&v76[4] = v14 - v15;
      *(_WORD *)&v76[8] = 2050;
      *(double *)&v76[10] = v29;
      uint64_t v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v30);
      goto LABEL_102;
    }
    if (v18 != v19)
    {
      double v24 = *(double *)(a2 + 8);
      if (v24 - *(double *)(v19 - 56) > 240.0)
      {
        if (qword_102419200 != -1) {
          dispatch_once(&qword_102419200, &stru_1022BD0B8);
        }
        unsigned int v25 = qword_102419208;
        if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Walking bout ended due to exceeding max duration without steps", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_62;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419200 == -1)
        {
LABEL_138:
          *(_WORD *)__int16 v76 = 0;
          long long v72 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v72);
          if (v72 != (char *)buf) {
            free(v72);
          }
LABEL_62:
          sub_1005B2604(a1);
          goto LABEL_63;
        }
LABEL_151:
        dispatch_once(&qword_102419200, &stru_1022BD0B8);
        goto LABEL_138;
      }
      if (v24 - *(double *)(v18 + 8) > 36000.0)
      {
        if (qword_102419200 != -1) {
          dispatch_once(&qword_102419200, &stru_1022BD0B8);
        }
        double v31 = qword_102419208;
        if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Walking bout has ended due to exceeding the max duration", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_62;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419200 == -1) {
          goto LABEL_138;
        }
        goto LABEL_151;
      }
    }
LABEL_63:
    if (v14 == v15) {
      goto LABEL_119;
    }
    if (*(double *)(a2 + 16) <= 0.0)
    {
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_1022BD0B8);
      }
      unint64_t v38 = qword_102419208;
      if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "StepCountEntry with steps but no firstStepTime", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_119;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_1022BD0B8);
      }
      *(_WORD *)__int16 v76 = 0;
      uint64_t v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v30);
    }
    else
    {
      if (*(double *)(a2 + 88) > *(double *)(a1 + 104))
      {
        if (*(void *)(a1 + 192) == *(void *)(a1 + 200))
        {
          if (qword_102419200 != -1) {
            dispatch_once(&qword_102419200, &stru_1022BD0B8);
          }
          double v32 = qword_102419208;
          if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_INFO))
          {
            uint64_t v33 = *(void *)(a2 + 16);
            *(_DWORD *)std::string buf = 134349056;
            *(void *)uint64_t v79 = v33;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "Potential walking bout identified... fBoutStartTime: %{public}f", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419200 != -1) {
              dispatch_once(&qword_102419200, &stru_1022BD0B8);
            }
            uint64_t v74 = *(void *)(a2 + 16);
            *(_DWORD *)__int16 v76 = 134349056;
            *(void *)&v76[4] = v74;
            double v75 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v75);
            if (v75 != (char *)buf) {
              free(v75);
            }
          }
        }
        sub_1005B3EE4((double *)a1, a2, v17, (uint64_t)v76);
        if (qword_102419200 != -1) {
          dispatch_once(&qword_102419200, &stru_1022BD0B8);
        }
        unint64_t v34 = qword_102419208;
        if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 67109632;
          *(_DWORD *)uint64_t v79 = *(_DWORD *)&v76[24];
          *(_WORD *)&v79[4] = 2048;
          *(void *)&v79[6] = *(void *)&v76[32];
          __int16 v80 = 2048;
          double v81 = *(double *)&v76[16] - *(double *)&v76[8];
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "Extending bout...,deltaSteps,%d,dist,%.3f,activeTime,%.3f", buf, 0x1Cu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419200 != -1) {
            dispatch_once(&qword_102419200, &stru_1022BD0B8);
          }
          uint64_t v73 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v73);
          if (v73 != (char *)buf) {
            free(v73);
          }
        }
        unint64_t v35 = *(void *)(a1 + 208);
        unint64_t v36 = *(void *)(a1 + 200);
        if (v36 >= v35)
        {
          uint64_t v42 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v36 - (void)*v20) >> 3);
          unint64_t v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) > 0x492492492492492) {
            sub_1001D7FD4();
          }
          unint64_t v44 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v35 - (void)*v20) >> 3);
          if (2 * v44 > v43) {
            unint64_t v43 = 2 * v44;
          }
          if (v44 >= 0x249249249249249) {
            unint64_t v45 = 0x492492492492492;
          }
          else {
            unint64_t v45 = v43;
          }
          if (v45) {
            uint64_t v46 = (char *)sub_10017EA6C(a1 + 208, v45);
          }
          else {
            uint64_t v46 = 0;
          }
          uint64_t v47 = &v46[56 * v42];
          uint64_t v48 = &v46[56 * v45];
          *(_OWORD *)uint64_t v47 = *(_OWORD *)v76;
          *((_OWORD *)v47 + 1) = *(_OWORD *)&v76[16];
          *((_OWORD *)v47 + 2) = *(_OWORD *)&v76[32];
          *((void *)v47 + 6) = v77;
          uint64_t v37 = v47 + 56;
          uint64_t v50 = *(char **)(a1 + 192);
          uint64_t v49 = *(char **)(a1 + 200);
          if (v49 != v50)
          {
            do
            {
              long long v51 = *(_OWORD *)(v49 - 56);
              long long v52 = *(_OWORD *)(v49 - 40);
              long long v53 = *(_OWORD *)(v49 - 24);
              *((_DWORD *)v47 - 2) = *((_DWORD *)v49 - 2);
              *(_OWORD *)(v47 - 24) = v53;
              *(_OWORD *)(v47 - 40) = v52;
              *(_OWORD *)(v47 - 56) = v51;
              v47 -= 56;
              v49 -= 56;
            }
            while (v49 != v50);
            uint64_t v49 = *v20;
          }
          *(void *)(a1 + 192) = v47;
          *(void *)(a1 + 200) = v37;
          *(void *)(a1 + 20_Block_object_dispose(&STACK[0x850], 8) = v48;
          if (v49) {
            operator delete(v49);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v36 = *(_OWORD *)v76;
          *(_OWORD *)(v36 + 16) = *(_OWORD *)&v76[16];
          *(_OWORD *)(v36 + 32) = *(_OWORD *)&v76[32];
          *(void *)(v36 + 4_Block_object_dispose(&STACK[0x850], 8) = v77;
          uint64_t v37 = (char *)(v36 + 56);
        }
        *(void *)(a1 + 200) = v37;
        sub_1005B40F8(a1, (void *)(a1 + 216), (_DWORD *)(a1 + 240), (double *)v76, 1);
        goto LABEL_119;
      }
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_1022BD0B8);
      }
      long long v41 = qword_102419208;
      if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "StepCountEntry with steps but activeTime doesn't advance", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_119;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_1022BD0B8);
      }
      *(_WORD *)__int16 v76 = 0;
      uint64_t v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v30);
    }
LABEL_102:
    if (v30 != (char *)buf) {
      free(v30);
    }
    goto LABEL_119;
  }
  if (qword_102419200 != -1) {
    dispatch_once(&qword_102419200, &stru_1022BD0B8);
  }
  uint64_t v11 = qword_102419208;
  if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Ignoring step count while in wheelchair mode", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1022BD0B8);
    }
    *(_WORD *)__int16 v76 = 0;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  return result;
}

void sub_1005B3EE4(double *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  double v5 = *(double *)(a2 + 8);
  double v6 = *(double *)(a2 + 16);
  *(double *)a4 = v5;
  *(double *)(a4 + _Block_object_dispose(&STACK[0x850], 8) = v6;
  *(_DWORD *)(a4 + 24) = a3;
  *(double *)(a4 + 32) = *(double *)(a2 + 32) - a1[6];
  *(unsigned char *)(a4 + 40) = *(unsigned char *)(a2 + 166);
  *(void *)(a4 + 44) = *(void *)(a2 + 156);
  if (v5 >= a1[3] + 3.84)
  {
    *(double *)(a4 + 16) = v5;
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1022BD0B8);
    }
    uint64_t v7 = qword_102419208;
    if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a2 + 8);
      *(_DWORD *)std::string buf = 134349056;
      uint64_t v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Missing previous epoch before an epoch with steps, starttime, %{public}f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_1022BD0B8);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "P6MWDStepEntry CLPredictedWalkDistanceBoutDetector::createP6MWDStepEntry(const CLStepCountEntry &, const int)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  else
  {
    *(double *)(a4 + 16) = v6 + *(double *)(a2 + 88) - a1[13];
  }
}

void sub_1005B40F8(uint64_t a1, void *a2, _DWORD *a3, double *a4, int a5)
{
  uint64_t v10 = a2[2];
  if (v10 && (double v11 = *(double *)(*a2 + 32), vabdd_f64(a4[1], v11) > 0.01))
  {
    if (v11 - *(double *)(a2[1] + 24) >= 30.0) {
      sub_1005B4264(a1, a2, a5);
    }
    sub_1003B2350(a2);
    *a3 = 1;
    uint64_t v10 = a2[2];
  }
  else
  {
    int v12 = (*a3)++;
    if (v12 < 0) {
      return;
    }
  }
  uint64_t v13 = operator new(0x48uLL);
  void v13[8] = *((void *)a4 + 6);
  long long v14 = *((_OWORD *)a4 + 2);
  long long v15 = *(_OWORD *)a4;
  *((_OWORD *)v13 + 2) = *((_OWORD *)a4 + 1);
  *((_OWORD *)v13 + 3) = v14;
  *((_OWORD *)v13 + 1) = v15;
  uint64_t v16 = *a2;
  *uint64_t v13 = *a2;
  v13[1] = a2;
  *(void *)(v16 + _Block_object_dispose(&STACK[0x850], 8) = v13;
  *a2 = v13;
  a2[2] = v10 + 1;
  if (*((double *)v13 + 4) - *(double *)(a2[1] + 24) >= 30.0)
  {
    sub_1005B4264(a1, a2, a5);
    for (uint64_t i = a2[2]; i; uint64_t i = a2[2])
    {
      uint64_t v18 = (double *)a2[1];
      if (*(double *)(*a2 + 32) - v18[3] <= 15.0) {
        break;
      }
      double v19 = *v18;
      *(double *)(*(void *)&v19 + _Block_object_dispose(&STACK[0x850], 8) = v18[1];
      **((double **)v18 + 1) = v19;
      a2[2] = i - 1;
      operator delete(v18);
    }
  }
}

void sub_1005B4264(uint64_t a1, void *a2, int a3)
{
  int v21 = 0;
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v7 = *(void *)(v5 + 24);
  uint64_t v8 = *(void *)(*a2 + 32);
  uint64_t v22 = v7;
  uint64_t v23 = v8;
  int32x2_t v27 = vsub_s32(*(int32x2_t *)(v6 + 60), *(int32x2_t *)(v5 + 60));
  int v30 = a3;
  long long v31 = 0u;
  memset(v32, 0, sizeof(v32));
  if ((void *)v5 == a2)
  {
    int v10 = 0;
    int v9 = 0;
    double v13 = 0.0;
    double v12 = 0.0;
    double v11 = 0.0;
  }
  else
  {
    int v9 = 0;
    int v10 = 0;
    double v11 = 0.0;
    double v12 = 0.0;
    double v13 = 0.0;
    do
    {
      int v14 = *(_DWORD *)(v5 + 40);
      v9 += v14;
      double v15 = *(double *)(v5 + 48);
      double v11 = v15 + v11;
      double v12 = v12 + *(double *)(v5 + 32) - *(double *)(v5 + 24);
      int v16 = *(unsigned __int8 *)(v5 + 56);
      if (v16 != 1) {
        double v15 = -0.0;
      }
      double v13 = v13 + v15;
      if (v16 != 1) {
        int v14 = 0;
      }
      v10 += v14;
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while ((void *)v5 != a2);
  }
  int v24 = v9;
  double v25 = v11;
  double v26 = v12;
  int v28 = v10;
  double v29 = v13;
  int v17 = sub_1005B45BC(a1, (uint64_t)&v21);
  if (qword_102419200 != -1) {
    dispatch_once(&qword_102419200, &stru_1022BD0B8);
  }
  uint64_t v18 = qword_102419208;
  if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67242240;
    int v52 = a3;
    __int16 v53 = 2050;
    uint64_t v54 = v7;
    __int16 v55 = 2050;
    uint64_t v56 = v8;
    __int16 v57 = 1026;
    int v58 = v9;
    __int16 v59 = 2050;
    double v60 = v11;
    __int16 v61 = 2050;
    double v62 = v12;
    __int16 v63 = 1026;
    int v64 = v10;
    __int16 v65 = 2050;
    double v66 = v13;
    __int16 v67 = 1026;
    int v68 = v17;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "type,%{public}d,boutStart,%{public}f,boutEnd,%{public}f,steps,%{public}d,distance,%{public}f,activeTime,%{public}f,gpsSteps,%{public}d,gpsDistance,%{public}f,report,%{public}d", buf, 0x4Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1022BD0B8);
    }
    int v33 = 67242240;
    int v34 = a3;
    __int16 v35 = 2050;
    uint64_t v36 = v7;
    __int16 v37 = 2050;
    uint64_t v38 = v8;
    __int16 v39 = 1026;
    int v40 = v9;
    __int16 v41 = 2050;
    double v42 = v11;
    __int16 v43 = 2050;
    double v44 = v12;
    __int16 v45 = 1026;
    int v46 = v10;
    __int16 v47 = 2050;
    double v48 = v13;
    __int16 v49 = 1026;
    int v50 = v17;
    unsigned int v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::assembleAndReportBout(const std::list<P6MWDStepEntry> &, P6MWDBoutType) const", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  if (v17)
  {
    double v19 = *(void (**)(int *, void))(a1 + 312);
    if (v19) {
      v19(&v21, *(void *)(a1 + 320));
    }
  }
}

uint64_t sub_1005B45BC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(double *)(a2 + 40) >= 60.0 || *(_DWORD *)(a2 + 72) == 1;
  uint64_t v3 = v2;
  if (!v2)
  {
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1022BD0B8);
    }
    uint64_t v4 = qword_102419208;
    if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Discarding bout since it does not meet minimum timeWithSteps requirement", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_1022BD0B8);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPredictedWalkDistanceBoutDetector::shouldReportBout(const CLPredictedWalkDistanceBoutEntry &) const", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return v3;
}

void sub_1005B4770(uint64_t a1, long long *a2)
{
  if (qword_102419200 != -1) {
    dispatch_once(&qword_102419200, &stru_1022BD0B8);
  }
  uint64_t v4 = qword_102419208;
  if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEBUG))
  {
    if (*(unsigned char *)(a1 + 244)) {
      uint64_t v5 = "update";
    }
    else {
      uint64_t v5 = "init";
    }
    *(_DWORD *)std::string buf = 136315138;
    int v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLPredictedWalkDistanceBoutDetector: Received user info (%s)", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1022BD0B8);
    }
    double v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleUserInfoUpdate(const CLBodyMetrics &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  long long v6 = *a2;
  long long v7 = a2[1];
  long long v8 = a2[2];
  *(_OWORD *)(a1 + 292) = *(long long *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 264) = v7;
  *(_OWORD *)(a1 + 280) = v8;
  *(_OWORD *)(a1 + 24_Block_object_dispose(&STACK[0x850], 8) = v6;
  *(unsigned char *)(a1 + 244) = 1;
  if (*(void *)(a1 + 192) != *(void *)(a1 + 200) && *(_DWORD *)(a1 + 288))
  {
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1022BD0B8);
    }
    int v9 = qword_102419208;
    if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEBUG))
    {
      int v10 = **(const char ***)(a1 + 192);
      *(_DWORD *)std::string buf = 134349056;
      int v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLPredictedWalkDistanceBoutDetector: Ending walking bout due to wheelchair (%{public}.2f)", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419200 != -1) {
        dispatch_once(&qword_102419200, &stru_1022BD0B8);
      }
      double v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPredictedWalkDistanceBoutDetector::handleUserInfoUpdate(const CLBodyMetrics &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    sub_1005B2604(a1);
  }
}

void sub_1005B4AF0(id a1)
{
  qword_102419208 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PredictedWalkDistance");
}

void sub_1005B4B24()
{
  sub_1000C7F88(buf);
  uint64_t v0 = *(void *)buf;
  sub_10103E294();
  LOBYTE(v1) = 0;
  sub_1000D2988(v0, "EnableLocationControllerRecorder", (BOOL *)&v1);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000C7F88(buf);
  LOBYTE(v1) = 0;
  sub_1000D2988(*(uint64_t *)buf, "EnableLocationControllerRecorderDebugLogs", (BOOL *)&v1);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  operator new();
}

void sub_1005B4DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  a12 = 0;
  sub_1005C15A8((uint64_t)&a12, v12);
  _Unwind_Resume(a1);
}

void sub_1005B4E40()
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022BD0F8);
  }
  uint64_t v0 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v1 = sub_10016BA10();
    *(_DWORD *)std::string buf = 1;
    double v2 = sub_10016BA54(v1, buf);
    *(_DWORD *)std::string buf = 134349056;
    double v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#locctl,#rec,shutdown recorder instance,mct,%{public}.3f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    sub_1005B5034();
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLLocationControllerRecorder::shutdownInstance()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  if (qword_10247C650 != -1) {
    dispatch_once(&qword_10247C650, &stru_1022BD0D8);
  }
  if (qword_10248A0C8) {
    sub_1005B5064(qword_10248A0C8);
  }
}

double sub_1005B5034()
{
  uint64_t v0 = sub_10016BA10();
  int v2 = 1;
  return sub_10016BA54(v0, &v2);
}

void sub_1005B5064(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_101212CAC(v2);
    uint64_t v3 = sub_10016BA10();
    *(_DWORD *)std::string buf = 1;
    *(double *)(a1 + 32) = sub_10016BA54(v3, buf);
    *(unsigned char *)(a1 + 24) = 0;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    uint64_t v4 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = sub_10016BA10();
      *(_DWORD *)std::string buf = 1;
      double v6 = sub_10016BA54(v5, buf);
      uint64_t v7 = sub_10016BA10();
      double v8 = sub_10018202C(v7);
      *(_DWORD *)std::string buf = 134349312;
      double v12 = v6;
      __int16 v13 = 2050;
      double v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#locctl,#rec,close record session,mct,%{public}.3f,propagation_us,%{public}.3f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      sub_1005B5034();
      uint64_t v9 = sub_10016BA10();
      sub_10018202C(v9);
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::close()", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

void sub_1005B5290(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    if (*(unsigned char *)(a1 + 24))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      uint64_t v3 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        uint64_t v4 = sub_10016BA10();
        *(_DWORD *)std::string buf = 1;
        double v5 = sub_10016BA54(v4, buf);
        uint64_t v6 = sub_10016BA10();
        double v7 = sub_10018202C(v6);
        *(_DWORD *)std::string buf = 134349312;
        double v24 = v5;
        __int16 v25 = 2050;
        double v26 = v7;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#locctl,#rec,#Warning,previous record session is still open,ignoring open,mct,%{public}.3f,propagation_us,%{public}.3f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 == -1)
        {
LABEL_23:
          sub_1005B5034();
          uint64_t v19 = sub_10016BA10();
          sub_10018202C(v19);
          unsigned int v20 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::open()", "%s\n", v20);
          if (v20 != (char *)buf) {
            free(v20);
          }
          return;
        }
LABEL_29:
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
        goto LABEL_23;
      }
    }
    else
    {
      sub_10120EFA4(v2);
      *(unsigned char *)(a1 + 24) = 1;
      if (*(double *)(a1 + 32) < 0.0)
      {
        uint64_t v8 = sub_10016BA10();
        *(_DWORD *)std::string buf = 1;
        *(double *)(a1 + 32) = sub_10016BA54(v8, buf);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022BD0F8);
        }
        uint64_t v9 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          uint64_t v10 = sub_10016BA10();
          *(_DWORD *)std::string buf = 1;
          double v11 = sub_10016BA54(v10, buf);
          uint64_t v12 = sub_10016BA10();
          double v13 = sub_10018202C(v12);
          *(_DWORD *)std::string buf = 134349312;
          double v24 = v11;
          __int16 v25 = 2050;
          double v26 = v13;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "#locctl,#rec,open record session for the first time since boot,mct,%{public}.3f,propagation_us,%{public}.3f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022BD0F8);
          }
          sub_1005B5034();
          uint64_t v21 = sub_10016BA10();
          sub_10018202C(v21);
          uint64_t v22 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::open()", "%s\n", v22);
          if (v22 != (char *)buf) {
            free(v22);
          }
        }
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      double v14 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = sub_10016BA10();
        *(_DWORD *)std::string buf = 1;
        double v16 = sub_10016BA54(v15, buf);
        uint64_t v17 = sub_10016BA10();
        double v18 = sub_10018202C(v17);
        *(_DWORD *)std::string buf = 134349312;
        double v24 = v16;
        __int16 v25 = 2050;
        double v26 = v18;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#locctl,#rec,open record session,mct,%{public}.3f,propagation_us,%{public}.3f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 == -1) {
          goto LABEL_23;
        }
        goto LABEL_29;
      }
    }
  }
}

uint64_t sub_1005B5794(uint64_t result)
{
  if (*(void *)(result + 16))
  {
    uint64_t v1 = result;
    sub_100168850(v17);
    uint64_t v2 = (__n128 *)sub_10016BA10();
    sub_100168854(v2, v16);
    sub_10016673C((uint64_t)v16, (uint64_t)v17);
    v19 |= 2u;
    uint64_t v3 = v18;
    if (!v18) {
      operator new();
    }
    *(_DWORD *)(v18 + 492) |= 0x10u;
    uint64_t v4 = *(void *)(v3 + 296);
    if (!v4) {
      operator new();
    }
    *(_DWORD *)(v4 + 28) |= 2u;
    uint64_t v5 = *(void *)(v4 + 16);
    if (!v5) {
      operator new();
    }
    char v6 = sub_10015F708();
    sub_10146803C(v5, v6);
    int v7 = sub_100168A44(v1);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    uint64_t v8 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v9 = v16[0].n128_u64[0];
      uint64_t v10 = sub_10016BA10();
      double v11 = sub_10018202C(v10);
      *(_DWORD *)std::string buf = 67240704;
      int v27 = v7;
      __int16 v28 = 2050;
      unint64_t v29 = v9;
      __int16 v30 = 2050;
      double v31 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#locctl,#rec,wrote platform info,success,%{public}d,mct,%{public}.3f,propagation_us,%{public}.3f", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      unint64_t v12 = v16[0].n128_u64[0];
      uint64_t v13 = sub_10016BA10();
      double v14 = sub_10018202C(v13);
      int v20 = 67240704;
      int v21 = v7;
      __int16 v22 = 2050;
      unint64_t v23 = v12;
      __int16 v24 = 2050;
      double v25 = v14;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordRavenPlatformInfo()", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    return sub_1001687EC(v17);
  }
  return result;
}

void sub_1005B5A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B5AF8(uint64_t result, void *a2)
{
  if (*(void *)(result + 16))
  {
    uint64_t v3 = result;
    sub_100168850(v39);
    uint64_t v4 = (__n128 *)sub_10016BA10();
    sub_100168854(v4, v38);
    unsigned int v37 = 1;
    LODWORD(__str.__r_.__value_.__l.__data_) = 21;
    v36[0] = 21;
    v36[1] = sub_10016A9AC((int *)&__str);
    sub_100165AD4((uint64_t)v39, &v37, v36, v36, (uint64_t *)v38);
    v41 |= 2u;
    uint64_t v5 = v40;
    if (!v40) {
      operator new();
    }
    *(_DWORD *)(v40 + 492) |= 0x800u;
    uint64_t v6 = *(void *)(v5 + 352);
    if (!v6) {
      operator new();
    }
    *(_DWORD *)(v6 + 184) |= 0x10u;
    uint64_t v7 = *(void *)(v6 + 32);
    if (!v7) {
      operator new();
    }
    *(_DWORD *)(v7 + 28) |= 1u;
    *(_DWORD *)(v7 + _Block_object_dispose(&STACK[0x850], 8) = -1;
    if (!sub_1001662E0(2u)) {
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 6520, "::CLP::LogEntry::PrivateData::SystemNotification_NotificationType_IsValid(value)");
    }
    int v8 = *(_DWORD *)(v7 + 28);
    *(_DWORD *)(v7 + 12) = 2;
    *(_DWORD *)(v7 + 2_Block_object_dispose(&STACK[0x850], 8) = v8 | 6;
    unint64_t v9 = *(_DWORD **)(v7 + 16);
    if (!v9) {
      operator new();
    }
    pid_t v10 = getpid();
    uint64_t v34 = v3;
    __int16 v35 = a2;
    v9[18] |= 4u;
    void v9[5] = v10;
    unint64_t v12 = a2 + 1;
    double v11 = (void *)*a2;
    if (v11 != v12)
    {
      do
      {
        int v13 = v9[9];
        uint64_t v14 = (int)v9[8];
        if ((int)v14 >= v13)
        {
          if (v13 == v9[10])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v9 + 6), v13 + 1);
            int v13 = v9[9];
          }
          v9[9] = v13 + 1;
          sub_1005C11CC();
        }
        uint64_t v15 = *((void *)v9 + 3);
        v9[8] = v14 + 1;
        uint64_t v16 = *(void *)(v15 + 8 * v14);
        int v17 = *((_DWORD *)v11 + 8);
        int v18 = *(_DWORD *)(v16 + 40) | 1;
        *(_DWORD *)(v16 + 40) = v18;
        *(_DWORD *)(v16 + 32) = v17;
        if (*((char *)v11 + 63) < 0)
        {
          sub_1000DC48C(&__str, (void *)v11[5], v11[6]);
          int v18 = *(_DWORD *)(v16 + 40);
        }
        else
        {
          std::string __str = *(std::string *)(v11 + 5);
        }
        *(_DWORD *)(v16 + 40) = v18 | 2;
        int v19 = *(std::string **)(v16 + 8);
        if (v19 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        std::string::operator=(v19, &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        sub_1005C1230((uint64_t *)&__str, (uint64_t)(v11 + 8));
        std::string::size_type v20 = __str.__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)__str.__r_.__value_.__l.__data_ != &__str.__r_.__value_.__r.__words[1])
        {
          do
          {
            int v21 = *(_DWORD *)(v20 + 28);
            int v22 = *(_DWORD *)(v16 + 24);
            if (v22 == *(_DWORD *)(v16 + 28))
            {
              sub_100221DFC(v16 + 16, v22 + 1);
              int v22 = *(_DWORD *)(v16 + 24);
            }
            uint64_t v23 = *(void *)(v16 + 16);
            *(_DWORD *)(v16 + 24) = v22 + 1;
            *(_DWORD *)(v23 + 4 * v22) = v21;
            __int16 v24 = *(std::string **)(v20 + 8);
            if (v24)
            {
              do
              {
                double v25 = v24;
                __int16 v24 = (std::string *)v24->__r_.__value_.__r.__words[0];
              }
              while (v24);
            }
            else
            {
              do
              {
                double v25 = *(std::string **)(v20 + 16);
                BOOL v26 = v25->__r_.__value_.__r.__words[0] == v20;
                std::string::size_type v20 = (std::string::size_type)v25;
              }
              while (!v26);
            }
            std::string::size_type v20 = (std::string::size_type)v25;
          }
          while (v25 != (std::string *)&__str.__r_.__value_.__r.__words[1]);
        }
        sub_1000F5BB0((uint64_t)&__str, (void *)__str.__r_.__value_.__l.__size_);
        int v27 = (void *)v11[1];
        if (v27)
        {
          do
          {
            __int16 v28 = v27;
            int v27 = (void *)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            __int16 v28 = (void *)v11[2];
            BOOL v26 = *v28 == (void)v11;
            double v11 = v28;
          }
          while (!v26);
        }
        double v11 = v28;
      }
      while (v28 != v12);
    }
    int v29 = sub_100168A44(v34);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    __int16 v30 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      std::string::size_type v31 = v35[2];
      LODWORD(__str.__r_.__value_.__l.__data_) = 67240448;
      HIDWORD(__str.__r_.__value_.__r.__words[0]) = v29;
      LOWORD(__str.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordLocationControllerClientList,success,%{public}d,clientList_size,%{public}zu", (uint8_t *)&__str, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&__str, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      uint64_t v32 = v35[2];
      int v42 = 67240448;
      int v43 = v29;
      __int16 v44 = 2050;
      uint64_t v45 = v32;
      int v33 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordLocationControllerClientList(const CLLocationControllerRecorder_Types::ClientList &)", "%s\n", (const char *)v33);
      if (v33 != &__str) {
        free(v33);
      }
    }
    return sub_1001687EC(v39);
  }
  return result;
}

void sub_1005B6078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_1001687EC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005B6144(uint64_t result, int a2)
{
  if (!*(void *)(result + 16)) {
    return result;
  }
  uint64_t v3 = result;
  sub_100168850(v21);
  uint64_t v4 = (__n128 *)sub_10016BA10();
  sub_100168854(v4, v20);
  unsigned int v19 = 1;
  LODWORD(__str.__r_.__value_.__l.__data_) = 21;
  v18[0] = 21;
  v18[1] = sub_10016A9AC((int *)&__str);
  sub_100165AD4((uint64_t)v21, &v19, v18, v18, (uint64_t *)v20);
  v23 |= 2u;
  uint64_t v5 = v22;
  if (!v22) {
    operator new();
  }
  *(_DWORD *)(v22 + 492) |= 0x800u;
  uint64_t v6 = *(void *)(v5 + 352);
  if (!v6) {
    operator new();
  }
  *(_DWORD *)(v6 + 184) |= 0x10u;
  uint64_t v7 = *(void *)(v6 + 32);
  if (!v7) {
    operator new();
  }
  *(_DWORD *)(v7 + 28) |= 1u;
  *(_DWORD *)(v7 + _Block_object_dispose(&STACK[0x850], 8) = -1;
  if (!sub_1001662E0(3u)) {
    __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 6520, "::CLP::LogEntry::PrivateData::SystemNotification_NotificationType_IsValid(value)");
  }
  int v8 = *(_DWORD *)(v7 + 28);
  *(_DWORD *)(v7 + 12) = 3;
  *(_DWORD *)(v7 + 2_Block_object_dispose(&STACK[0x850], 8) = v8 | 6;
  uint64_t v9 = *(void *)(v7 + 16);
  if (!v9) {
    operator new();
  }
  if (!a2)
  {
    if (sub_10016E644(2u))
    {
      int v10 = 2;
      goto LABEL_16;
    }
LABEL_37:
    __assert_rtn("set_filter_type", "CLPLocationController.pb.h", 6359, "::CLP::LogEntry::PrivateData::SystemNotification_FilterType_IsValid(value)");
  }
  if (!sub_10016E644(1u)) {
    goto LABEL_37;
  }
  int v10 = 1;
LABEL_16:
  *(_DWORD *)(v9 + 72) |= 0x10u;
  *(_DWORD *)(v9 + 64) = v10;
  sub_100134750(&v17, "prod");
  sub_1000C7F88(&v25);
  uint64_t v11 = v25;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    sub_1000DC48C(&__p, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v17;
  }
  sub_1005B66DC(v11, "LCPlaybackSystemVersionInfo", &__p, (uint64_t)&__str);
  *(_DWORD *)(v9 + 72) |= 0x20u;
  unint64_t v12 = *(std::string **)(v9 + 48);
  if (v12 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
    operator new();
  }
  std::string::operator=(v12, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v26) {
    sub_1000DB0A0(v26);
  }
  int v13 = sub_100168A44(v3);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022BD0F8);
  }
  uint64_t v14 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    LODWORD(__str.__r_.__value_.__l.__data_) = 67240448;
    HIDWORD(__str.__r_.__value_.__r.__words[0]) = v13;
    LOWORD(__str.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#locctl,#rec,recordLocationControllerFilterVersion,success,%{public}d,locationControllerFilterUsageIsLegacy,%{public}d", (uint8_t *)&__str, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__str, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    LODWORD(v25) = 67240448;
    HIDWORD(v25) = v13;
    LOWORD(v26) = 1026;
    *(_DWORD *)((char *)&v26 + 2) = a2;
    uint64_t v15 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordLocationControllerFilterVersion(BOOL)", "%s\n", (const char *)v15);
    if (v15 != &__str) {
      free(v15);
    }
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  return sub_1001687EC(v21);
}

void sub_1005B65E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_1001687EC(&a30);
  _Unwind_Resume(a1);
}

void sub_1005B66DC(uint64_t a1@<X0>, const char *a2@<X1>, std::string *a3@<X2>, uint64_t a4@<X8>)
{
  memset(&__p, 0, sizeof(__p));
  BOOL v6 = sub_1004D1284(a1, a2, &__p);
  if (v6) {
    p_p = &__p;
  }
  else {
    p_p = a3;
  }
  if (SHIBYTE(p_p->__r_.__value_.__r.__words[2]) < 0)
  {
    int v8 = (void *)p_p->__r_.__value_.__r.__words[0];
    uint64_t v9 = &__p;
    if (!v6) {
      uint64_t v9 = a3;
    }
    sub_1000DC48C((unsigned char *)a4, v8, v9->__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)&p_p->__r_.__value_.__l.__data_;
    *(void *)(a4 + 16) = *((void *)&p_p->__r_.__value_.__l + 2);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1005B6778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005B6794(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6, char *a7)
{
  if (!*(void *)(a1 + 16)) {
    return;
  }
  if (*a2 == 4)
  {
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      int v10 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0]) {
          BOOL v11 = a3->i32[1] == 0;
        }
        else {
          BOOL v11 = 1;
        }
        int v12 = !v11;
        if (*a4) {
          BOOL v13 = a4[1] == 0;
        }
        else {
          BOOL v13 = 1;
        }
        int v14 = !v13;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v12;
        __int16 v71 = 1024;
        LODWORD(v72) = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLDaemonStatus_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      BOOL v15 = !a3->i32[0] || a3->i32[1] == 0;
      BOOL v16 = !v15;
      BOOL v17 = !*a4 || a4[1] == 0;
      BOOL v18 = !v17;
      *(_DWORD *)double v66 = 67109376;
      *(_DWORD *)&v66[4] = v16;
      *(_WORD *)&v66[8] = 1024;
      *(_DWORD *)&unsigned char v66[10] = v18;
      unsigned int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v19);
      if (v19 == (char *)&buf) {
        return;
      }
LABEL_54:
      free(v19);
      return;
    }
    sub_100168850(v66);
    int v27 = (__n128 *)sub_10016BA10();
    sub_100168854(v27, v56);
    sub_100165AD4((uint64_t)v66, a2, a3, a4, (uint64_t *)v56);
    v69 |= 2u;
    uint64_t v28 = v68;
    if (!v68) {
      operator new();
    }
    *(_DWORD *)(v68 + 492) |= 0x800u;
    uint64_t v29 = *(void *)(v28 + 352);
    if (!v29) {
      operator new();
    }
    *(_DWORD *)(v29 + 184) |= 0x20u;
    uint64_t v30 = *(void *)(v29 + 40);
    if (!v30) {
      operator new();
    }
    int v31 = *a5;
    *(_DWORD *)(v30 + 28) |= 1u;
    *(_DWORD *)(v30 + _Block_object_dispose(&STACK[0x850], 8) = v31;
    sub_101469700(a6, a7, v30);
    int v32 = sub_100168A44(a1);
    if (*(unsigned char *)(a1 + 8))
    {
      int v33 = v32;
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      uint64_t v34 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        sub_101522B64((int *)a2, v57);
        if (SBYTE3(v59) >= 0) {
          __int16 v35 = v57;
        }
        else {
          __int16 v35 = *(unsigned char **)v57;
        }
        LODWORD(v49[0]) = a3->i32[0];
        sub_101522E48((int *)v49, v54);
        if (v55 >= 0) {
          uint64_t v36 = v54;
        }
        else {
          uint64_t v36 = (void **)v54[0];
        }
        int v51 = *a4;
        unsigned int v37 = __p;
        sub_101522E48(&v51, __p);
        if (v53 < 0) {
          unsigned int v37 = (void **)__p[0];
        }
        int v38 = *a6;
        uint64_t v39 = sub_10016BA10();
        double v40 = sub_10018202C(v39);
        LODWORD(buf) = 67110402;
        HIDWORD(buf) = v33;
        __int16 v71 = 2080;
        long long v72 = v35;
        __int16 v73 = 2080;
        uint64_t v74 = v36;
        __int16 v75 = 2080;
        __int16 v76 = v37;
        __int16 v77 = 1024;
        int v78 = v38;
        __int16 v79 = 2050;
        double v80 = v40;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLDaemonStatus_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x36u);
        if (v53 < 0) {
          operator delete(__p[0]);
        }
        if (v55 < 0) {
          operator delete(v54[0]);
        }
        if (SBYTE3(v59) < 0) {
          operator delete(*(void **)v57);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022BD0F8);
        }
        sub_101522B64((int *)a2, v54);
        if (v55 >= 0) {
          int v41 = v54;
        }
        else {
          int v41 = (void **)v54[0];
        }
        int v51 = a3->i32[0];
        int v42 = __p;
        sub_101522E48(&v51, __p);
        if (v53 < 0) {
          int v42 = (void **)__p[0];
        }
        int v48 = *a4;
        sub_101522E48(&v48, v49);
        if (v50 >= 0) {
          int v43 = v49;
        }
        else {
          int v43 = (void **)v49[0];
        }
        int v44 = *a6;
        uint64_t v45 = sub_10016BA10();
        double v46 = sub_10018202C(v45);
        *(_DWORD *)__int16 v57 = 67110402;
        *(_DWORD *)&v57[4] = v33;
        *(_WORD *)&v57[8] = 2080;
        *(void *)&v57[10] = v41;
        __int16 v58 = 2080;
        __int16 v59 = v42;
        __int16 v60 = 2080;
        __int16 v61 = v43;
        __int16 v62 = 1024;
        int v63 = v44;
        __int16 v64 = 2050;
        double v65 = v46;
        __int16 v47 = (char *)_os_log_send_and_compose_impl();
        if (v50 < 0) {
          operator delete(v49[0]);
        }
        if (v53 < 0) {
          operator delete(__p[0]);
        }
        if (v55 < 0) {
          operator delete(v54[0]);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v47);
        if (v47 != (char *)&buf) {
          free(v47);
        }
      }
    }
    sub_1001687EC(v66);
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    std::string::size_type v20 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      sub_101522B64((int *)a2, &buf);
      int v21 = SBYTE3(v74) >= 0 ? &buf : (void **)buf;
      *(_DWORD *)double v66 = 136315138;
      *(void *)&v66[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLDaemonStatus_Type,unsupported message type,%s", v66, 0xCu);
      if (SBYTE3(v74) < 0) {
        operator delete(buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      sub_101522B64((int *)a2, v66);
      if (v67 >= 0) {
        uint64_t v22 = v66;
      }
      else {
        uint64_t v22 = *(uint8_t **)v66;
      }
      *(_DWORD *)__int16 v57 = 136315138;
      *(void *)&v57[4] = v22;
      unsigned int v19 = (char *)_os_log_send_and_compose_impl();
      if (v67 < 0) {
        operator delete(*(void **)v66);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v19);
      if (v19 != (char *)&buf) {
        goto LABEL_54;
      }
    }
  }
}

void sub_1005B6FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

void sub_1005B70E0(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6, uint64_t a7)
{
  if (!*(void *)(a1 + 16)) {
    return;
  }
  if (*a2 == 4)
  {
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      int v10 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0]) {
          BOOL v11 = a3->i32[1] == 0;
        }
        else {
          BOOL v11 = 1;
        }
        int v12 = !v11;
        if (*a4) {
          BOOL v13 = a4[1] == 0;
        }
        else {
          BOOL v13 = 1;
        }
        int v14 = !v13;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v12;
        __int16 v75 = 1024;
        LODWORD(v76) = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLClientManager_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      BOOL v15 = !a3->i32[0] || a3->i32[1] == 0;
      BOOL v16 = !v15;
      BOOL v17 = !*a4 || a4[1] == 0;
      BOOL v18 = !v17;
      *(_DWORD *)double v70 = 67109376;
      *(_DWORD *)&v70[4] = v16;
      *(_WORD *)&v70[8] = 1024;
      *(_DWORD *)&v70[10] = v18;
      unsigned int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v19);
      if (v19 == (char *)&buf) {
        return;
      }
LABEL_54:
      free(v19);
      return;
    }
    sub_100168850(v70);
    int v27 = (__n128 *)sub_10016BA10();
    sub_100168854(v27, v60);
    sub_100165AD4((uint64_t)v70, a2, a3, a4, (uint64_t *)v60);
    v73 |= 2u;
    uint64_t v28 = v72;
    if (!v72) {
      operator new();
    }
    *(_DWORD *)(v72 + 492) |= 0x800u;
    uint64_t v29 = *(void *)(v28 + 352);
    if (!v29) {
      operator new();
    }
    *(_DWORD *)(v29 + 184) |= 0x40u;
    uint64_t v30 = *(void *)(v29 + 48);
    if (!v30) {
      operator new();
    }
    int v31 = *a5;
    *(_DWORD *)(v30 + 28) |= 1u;
    *(_DWORD *)(v30 + _Block_object_dispose(&STACK[0x850], 8) = v31;
    unsigned int v32 = sub_1005B7AF4(a6);
    if (!sub_10016E644(v32)) {
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 6971, "::CLP::LogEntry::PrivateData::ClientManagerNotification_NotificationType_IsValid(value)");
    }
    int v33 = *(_DWORD *)(v30 + 28);
    *(_DWORD *)(v30 + 12) = v32;
    *(_DWORD *)(v30 + 2_Block_object_dispose(&STACK[0x850], 8) = v33 | 6;
    uint64_t v34 = *(void *)(v30 + 16);
    if (!v34) {
      operator new();
    }
    unsigned int v35 = sub_1005B7CCC((int *)(a7 + 188));
    if (!sub_100165F14(v35)) {
      __assert_rtn("set_location_enabled", "CLPLocationController.pb.h", 6922, "::CLP::LogEntry::PrivateData::LocationServicesEnabled_IsValid(value)");
    }
    *(_DWORD *)(v34 + 16) |= 1u;
    *(_DWORD *)(v34 + _Block_object_dispose(&STACK[0x850], 8) = v35;
    int v36 = sub_100168A44(a1);
    if (*(unsigned char *)(a1 + 8))
    {
      int v37 = v36;
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      int v38 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        sub_101522B64((int *)a2, v61);
        if (SBYTE3(v63) >= 0) {
          uint64_t v39 = v61;
        }
        else {
          uint64_t v39 = *(unsigned char **)v61;
        }
        LODWORD(v53[0]) = a3->i32[0];
        sub_101522E48((int *)v53, v58);
        if (v59 >= 0) {
          double v40 = v58;
        }
        else {
          double v40 = (void **)v58[0];
        }
        int v55 = *a4;
        int v41 = __p;
        sub_101522E48(&v55, __p);
        if (v57 < 0) {
          int v41 = (void **)__p[0];
        }
        int v42 = *a6;
        uint64_t v43 = sub_10016BA10();
        double v44 = sub_10018202C(v43);
        LODWORD(buf) = 67110402;
        HIDWORD(buf) = v37;
        __int16 v75 = 2080;
        __int16 v76 = v39;
        __int16 v77 = 2080;
        int v78 = v40;
        __int16 v79 = 2080;
        double v80 = v41;
        __int16 v81 = 1024;
        int v82 = v42;
        __int16 v83 = 2050;
        double v84 = v44;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLClientManager_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x36u);
        if (v57 < 0) {
          operator delete(__p[0]);
        }
        if (v59 < 0) {
          operator delete(v58[0]);
        }
        if (SBYTE3(v63) < 0) {
          operator delete(*(void **)v61);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022BD0F8);
        }
        sub_101522B64((int *)a2, v58);
        if (v59 >= 0) {
          uint64_t v45 = v58;
        }
        else {
          uint64_t v45 = (void **)v58[0];
        }
        int v55 = a3->i32[0];
        double v46 = __p;
        sub_101522E48(&v55, __p);
        if (v57 < 0) {
          double v46 = (void **)__p[0];
        }
        int v52 = *a4;
        sub_101522E48(&v52, v53);
        if (v54 >= 0) {
          __int16 v47 = v53;
        }
        else {
          __int16 v47 = (void **)v53[0];
        }
        int v48 = *a6;
        uint64_t v49 = sub_10016BA10();
        double v50 = sub_10018202C(v49);
        *(_DWORD *)__int16 v61 = 67110402;
        *(_DWORD *)&v61[4] = v37;
        *(_WORD *)&v61[8] = 2080;
        *(void *)&v61[10] = v45;
        __int16 v62 = 2080;
        int v63 = v46;
        __int16 v64 = 2080;
        double v65 = v47;
        __int16 v66 = 1024;
        int v67 = v48;
        __int16 v68 = 2050;
        double v69 = v50;
        int v51 = (char *)_os_log_send_and_compose_impl();
        if (v54 < 0) {
          operator delete(v53[0]);
        }
        if (v57 < 0) {
          operator delete(__p[0]);
        }
        if (v59 < 0) {
          operator delete(v58[0]);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v51);
        if (v51 != (char *)&buf) {
          free(v51);
        }
      }
    }
    sub_1001687EC(v70);
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    std::string::size_type v20 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      sub_101522B64((int *)a2, &buf);
      int v21 = SBYTE3(v78) >= 0 ? &buf : (void **)buf;
      *(_DWORD *)double v70 = 136315138;
      *(void *)&v70[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLClientManager_Type,unsupported message type,%s", v70, 0xCu);
      if (SBYTE3(v78) < 0) {
        operator delete(buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      sub_101522B64((int *)a2, v70);
      if (v71 >= 0) {
        uint64_t v22 = v70;
      }
      else {
        uint64_t v22 = *(uint8_t **)v70;
      }
      *(_DWORD *)__int16 v61 = 136315138;
      *(void *)&v61[4] = v22;
      unsigned int v19 = (char *)_os_log_send_and_compose_impl();
      if (v71 < 0) {
        operator delete(*(void **)v70);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v19);
      if (v19 != (char *)&buf) {
        goto LABEL_54;
      }
    }
  }
}

void sub_1005B79CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

uint64_t sub_1005B7AF4(int *a1)
{
  if (!*a1) {
    return 1;
  }
  if (*a1 == 4) {
    return 2;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022BD0F8);
  }
  uint64_t v3 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *a1;
    *(_DWORD *)std::string buf = 67109120;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#locctl,#rec,convertClientManagerNotificationTypeToProtobuf,unhandled type,%d", buf, 8u);
  }
  uint64_t result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static CLP::LogEntry::PrivateData::ClientManagerNotification_NotificationType CLLocationControllerRecorder::convertClientManagerNotificationTypeToProtobuf(const CLClientManager_Type::Notification &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1005B7CCC(int *a1)
{
  if (*a1 < 3) {
    return (*a1 + 1);
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022BD0F8);
  }
  uint64_t v3 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *a1;
    *(_DWORD *)std::string buf = 67109120;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#locctl,#rec,convertLocationServicesEnabledTypeToProtobuf,unhandled type,%d", buf, 8u);
  }
  uint64_t result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static CLP::LogEntry::PrivateData::LocationServicesEnabled CLLocationControllerRecorder::convertLocationServicesEnabledTypeToProtobuf(const CLCommonLocationServicesEnabled &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 0;
  }
  return result;
}

void sub_1005B7E98(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6, char *a7)
{
  if (!*(void *)(a1 + 16)) {
    return;
  }
  if (*a2 == 4)
  {
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      int v10 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0]) {
          BOOL v11 = a3->i32[1] == 0;
        }
        else {
          BOOL v11 = 1;
        }
        int v12 = !v11;
        if (*a4) {
          BOOL v13 = a4[1] == 0;
        }
        else {
          BOOL v13 = 1;
        }
        int v14 = !v13;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v12;
        __int16 v81 = 1024;
        LODWORD(v82) = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLWifiService_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      BOOL v15 = !a3->i32[0] || a3->i32[1] == 0;
      BOOL v16 = !v15;
      BOOL v17 = !*a4 || a4[1] == 0;
      BOOL v18 = !v17;
      *(_DWORD *)__int16 v76 = 67109376;
      *(_DWORD *)&v76[4] = v16;
      *(_WORD *)&v76[8] = 1024;
      *(_DWORD *)&v76[10] = v18;
      unsigned int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v19);
      if (v19 == (char *)&buf) {
        return;
      }
LABEL_54:
      free(v19);
      return;
    }
    sub_100168850(v76);
    int v27 = (__n128 *)sub_10016BA10();
    sub_100168854(v27, v66);
    sub_100165AD4((uint64_t)v76, a2, a3, a4, (uint64_t *)v66);
    v79 |= 2u;
    uint64_t v28 = v78;
    if (!v78) {
      operator new();
    }
    *(_DWORD *)(v78 + 492) |= 0x800u;
    uint64_t v29 = *(void *)(v28 + 352);
    if (!v29) {
      operator new();
    }
    *(_DWORD *)(v29 + 184) |= 0x80u;
    uint64_t v30 = *(void *)(v29 + 56);
    if (!v30) {
      operator new();
    }
    int v31 = *a5;
    *(_DWORD *)(v30 + 28) |= 1u;
    *(_DWORD *)(v30 + _Block_object_dispose(&STACK[0x850], 8) = v31;
    unsigned int v32 = sub_101465650(a6);
    if (!sub_1003DE308(v32)) {
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 7261, "::CLP::LogEntry::PrivateData::WifiNotificationType_IsValid(value)");
    }
    int v33 = *(_DWORD *)(v30 + 28);
    *(_DWORD *)(v30 + 12) = v32;
    *(_DWORD *)(v30 + 2_Block_object_dispose(&STACK[0x850], 8) = v33 | 6;
    uint64_t v34 = *(void *)(v30 + 16);
    if (!v34) {
      operator new();
    }
    unsigned int v35 = *a6;
    switch(*a6)
    {
      case 1:
        char v38 = *a7;
        *(_DWORD *)(v34 + 36) |= 1u;
        *(unsigned char *)(v34 + 2_Block_object_dispose(&STACK[0x850], 8) = v38;
        goto LABEL_74;
      case 3:
        unsigned int v39 = sub_10146582C(a7 + 1);
        sub_1005B89A0(v34, v39);
        uint64_t v40 = sub_1005B89E4(v34);
        sub_101465A0C((uint64_t)(a7 + 104), v40);
        unsigned int v35 = *a6;
        goto LABEL_69;
      case 6:
        char v37 = a7[138];
        *(_DWORD *)(v34 + 36) |= 0x40u;
        *(unsigned char *)(v34 + 31) = v37;
        goto LABEL_71;
      case 10:
      case 11:
        char v36 = a7[137];
        *(_DWORD *)(v34 + 36) |= 0x20u;
        *(unsigned char *)(v34 + 30) = v36;
        goto LABEL_69;
      default:
LABEL_69:
        if (v35 <= 7 && ((1 << v35) & 0xC8) != 0)
        {
LABEL_71:
          *(_DWORD *)(v34 + 36) |= 4u;
          uint64_t v41 = *(void *)(v34 + 8);
          if (!v41) {
            operator new();
          }
          sub_101465080((uint64_t)(a7 + 8), v41);
        }
LABEL_74:
        int v42 = sub_100168A44(a1);
        if (*(unsigned char *)(a1 + 8))
        {
          int v43 = v42;
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_1022BD0F8);
          }
          double v44 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
          {
            sub_101522B64((int *)a2, v67);
            if (SBYTE3(v69) >= 0) {
              uint64_t v45 = v67;
            }
            else {
              uint64_t v45 = *(unsigned char **)v67;
            }
            LODWORD(v59[0]) = a3->i32[0];
            sub_101522E48((int *)v59, v64);
            if (v65 >= 0) {
              double v46 = v64;
            }
            else {
              double v46 = (void **)v64[0];
            }
            int v61 = *a4;
            __int16 v47 = __p;
            sub_101522E48(&v61, __p);
            if (v63 < 0) {
              __int16 v47 = (void **)__p[0];
            }
            int v48 = *a6;
            uint64_t v49 = sub_10016BA10();
            double v50 = sub_10018202C(v49);
            LODWORD(buf) = 67110402;
            HIDWORD(buf) = v43;
            __int16 v81 = 2080;
            int v82 = v45;
            __int16 v83 = 2080;
            double v84 = v46;
            __int16 v85 = 2080;
            __int16 v86 = v47;
            __int16 v87 = 1024;
            int v88 = v48;
            __int16 v89 = 2050;
            double v90 = v50;
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLWifiService_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x36u);
            if (v63 < 0) {
              operator delete(__p[0]);
            }
            if (v65 < 0) {
              operator delete(v64[0]);
            }
            if (SBYTE3(v69) < 0) {
              operator delete(*(void **)v67);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_1022BD0F8);
            }
            sub_101522B64((int *)a2, v64);
            if (v65 >= 0) {
              int v51 = v64;
            }
            else {
              int v51 = (void **)v64[0];
            }
            int v61 = a3->i32[0];
            int v52 = __p;
            sub_101522E48(&v61, __p);
            if (v63 < 0) {
              int v52 = (void **)__p[0];
            }
            int v58 = *a4;
            sub_101522E48(&v58, v59);
            if (v60 >= 0) {
              char v53 = v59;
            }
            else {
              char v53 = (void **)v59[0];
            }
            int v54 = *a6;
            uint64_t v55 = sub_10016BA10();
            double v56 = sub_10018202C(v55);
            *(_DWORD *)int v67 = 67110402;
            *(_DWORD *)&v67[4] = v43;
            *(_WORD *)&v67[8] = 2080;
            *(void *)&unsigned char v67[10] = v51;
            __int16 v68 = 2080;
            double v69 = v52;
            __int16 v70 = 2080;
            char v71 = v53;
            __int16 v72 = 1024;
            int v73 = v54;
            __int16 v74 = 2050;
            double v75 = v56;
            char v57 = (char *)_os_log_send_and_compose_impl();
            if (v60 < 0) {
              operator delete(v59[0]);
            }
            if (v63 < 0) {
              operator delete(__p[0]);
            }
            if (v65 < 0) {
              operator delete(v64[0]);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v57);
            if (v57 != (char *)&buf) {
              free(v57);
            }
          }
        }
        sub_1001687EC(v76);
        break;
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    std::string::size_type v20 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      sub_101522B64((int *)a2, &buf);
      int v21 = SBYTE3(v84) >= 0 ? &buf : (void **)buf;
      *(_DWORD *)__int16 v76 = 136315138;
      *(void *)&v76[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLWifiService_Type,unsupported message type,%s", v76, 0xCu);
      if (SBYTE3(v84) < 0) {
        operator delete(buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      sub_101522B64((int *)a2, v76);
      if (v77 >= 0) {
        uint64_t v22 = v76;
      }
      else {
        uint64_t v22 = *(uint8_t **)v76;
      }
      *(_DWORD *)int v67 = 136315138;
      *(void *)&v67[4] = v22;
      unsigned int v19 = (char *)_os_log_send_and_compose_impl();
      if (v77 < 0) {
        operator delete(*(void **)v76);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v19);
      if (v19 != (char *)&buf) {
        goto LABEL_54;
      }
    }
  }
}

void sub_1005B8840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

BOOL sub_1005B89A0(uint64_t a1, unsigned int a2)
{
  BOOL result = sub_1003DE308(a2);
  if (!result) {
    sub_101A665B0();
  }
  *(_DWORD *)(a1 + 36) |= 2u;
  *(_DWORD *)(a1 + 24) = a2;
  return result;
}

uint64_t sub_1005B89E4(uint64_t a1)
{
  *(_DWORD *)(a1 + 36) |= 8u;
  if (!*(void *)(a1 + 16)) {
    operator new();
  }
  return *(void *)(a1 + 16);
}

void sub_1005B8A40()
{
}

void sub_1005B8A64(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6, int *a7)
{
  if (!*(void *)(a1 + 16)) {
    return;
  }
  if (*a2 == 4)
  {
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      int v10 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0]) {
          BOOL v11 = a3->i32[1] == 0;
        }
        else {
          BOOL v11 = 1;
        }
        int v12 = !v11;
        if (*a4) {
          BOOL v13 = a4[1] == 0;
        }
        else {
          BOOL v13 = 1;
        }
        int v14 = !v13;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v12;
        __int16 v75 = 1024;
        LODWORD(v76) = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLDataProtectionManager_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      BOOL v15 = !a3->i32[0] || a3->i32[1] == 0;
      BOOL v16 = !v15;
      BOOL v17 = !*a4 || a4[1] == 0;
      BOOL v18 = !v17;
      *(_DWORD *)__int16 v70 = 67109376;
      *(_DWORD *)&v70[4] = v16;
      *(_WORD *)&v70[8] = 1024;
      *(_DWORD *)&v70[10] = v18;
      unsigned int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v19);
      if (v19 == (char *)&buf) {
        return;
      }
LABEL_54:
      free(v19);
      return;
    }
    sub_100168850(v70);
    int v27 = (__n128 *)sub_10016BA10();
    sub_100168854(v27, v60);
    sub_100165AD4((uint64_t)v70, a2, a3, a4, (uint64_t *)v60);
    v73 |= 2u;
    uint64_t v28 = v72;
    if (!v72) {
      operator new();
    }
    *(_DWORD *)(v72 + 492) |= 0x800u;
    uint64_t v29 = *(void *)(v28 + 352);
    if (!v29) {
      operator new();
    }
    *(_DWORD *)(v29 + 184) |= 0x100u;
    uint64_t v30 = *(void *)(v29 + 64);
    if (!v30) {
      operator new();
    }
    int v31 = *a5;
    *(_DWORD *)(v30 + 28) |= 1u;
    *(_DWORD *)(v30 + _Block_object_dispose(&STACK[0x850], 8) = v31;
    unsigned int v32 = sub_1005B9478(a6);
    if (!sub_1001A4C4C(v32)) {
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 7379, "::CLP::LogEntry::PrivateData::DataProtectionManagerNotification_NotificationType_IsValid(value)");
    }
    int v33 = *(_DWORD *)(v30 + 28);
    *(_DWORD *)(v30 + 12) = v32;
    *(_DWORD *)(v30 + 2_Block_object_dispose(&STACK[0x850], 8) = v33 | 6;
    uint64_t v34 = *(void *)(v30 + 16);
    if (!v34) {
      operator new();
    }
    unsigned int v35 = sub_1005B963C(a7);
    if (!sub_10016E644(v35)) {
      __assert_rtn("set_availability", "CLPLocationController.pb.h", 7330, "::CLP::LogEntry::PrivateData::DataAvailability_IsValid(value)");
    }
    *(_DWORD *)(v34 + 16) |= 1u;
    *(_DWORD *)(v34 + _Block_object_dispose(&STACK[0x850], 8) = v35;
    int v36 = sub_100168A44(a1);
    if (*(unsigned char *)(a1 + 8))
    {
      int v37 = v36;
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      char v38 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        sub_101522B64((int *)a2, v61);
        if (SBYTE3(v63) >= 0) {
          unsigned int v39 = v61;
        }
        else {
          unsigned int v39 = *(unsigned char **)v61;
        }
        LODWORD(v53[0]) = a3->i32[0];
        sub_101522E48((int *)v53, v58);
        if (v59 >= 0) {
          uint64_t v40 = v58;
        }
        else {
          uint64_t v40 = (void **)v58[0];
        }
        int v55 = *a4;
        uint64_t v41 = __p;
        sub_101522E48(&v55, __p);
        if (v57 < 0) {
          uint64_t v41 = (void **)__p[0];
        }
        int v42 = *a6;
        uint64_t v43 = sub_10016BA10();
        double v44 = sub_10018202C(v43);
        LODWORD(buf) = 67110402;
        HIDWORD(buf) = v37;
        __int16 v75 = 2080;
        __int16 v76 = v39;
        __int16 v77 = 2080;
        uint64_t v78 = v40;
        __int16 v79 = 2080;
        double v80 = v41;
        __int16 v81 = 1024;
        int v82 = v42;
        __int16 v83 = 2050;
        double v84 = v44;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLDataProtectionManager_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x36u);
        if (v57 < 0) {
          operator delete(__p[0]);
        }
        if (v59 < 0) {
          operator delete(v58[0]);
        }
        if (SBYTE3(v63) < 0) {
          operator delete(*(void **)v61);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022BD0F8);
        }
        sub_101522B64((int *)a2, v58);
        if (v59 >= 0) {
          uint64_t v45 = v58;
        }
        else {
          uint64_t v45 = (void **)v58[0];
        }
        int v55 = a3->i32[0];
        double v46 = __p;
        sub_101522E48(&v55, __p);
        if (v57 < 0) {
          double v46 = (void **)__p[0];
        }
        int v52 = *a4;
        sub_101522E48(&v52, v53);
        if (v54 >= 0) {
          __int16 v47 = v53;
        }
        else {
          __int16 v47 = (void **)v53[0];
        }
        int v48 = *a6;
        uint64_t v49 = sub_10016BA10();
        double v50 = sub_10018202C(v49);
        *(_DWORD *)int v61 = 67110402;
        *(_DWORD *)&v61[4] = v37;
        *(_WORD *)&v61[8] = 2080;
        *(void *)&v61[10] = v45;
        __int16 v62 = 2080;
        char v63 = v46;
        __int16 v64 = 2080;
        char v65 = v47;
        __int16 v66 = 1024;
        int v67 = v48;
        __int16 v68 = 2050;
        double v69 = v50;
        int v51 = (char *)_os_log_send_and_compose_impl();
        if (v54 < 0) {
          operator delete(v53[0]);
        }
        if (v57 < 0) {
          operator delete(__p[0]);
        }
        if (v59 < 0) {
          operator delete(v58[0]);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v51);
        if (v51 != (char *)&buf) {
          free(v51);
        }
      }
    }
    sub_1001687EC(v70);
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    std::string::size_type v20 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      sub_101522B64((int *)a2, &buf);
      int v21 = SBYTE3(v78) >= 0 ? &buf : (void **)buf;
      *(_DWORD *)__int16 v70 = 136315138;
      *(void *)&v70[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLDataProtectionManager_Type,unsupported message type,%s", v70, 0xCu);
      if (SBYTE3(v78) < 0) {
        operator delete(buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      sub_101522B64((int *)a2, v70);
      if (v71 >= 0) {
        uint64_t v22 = v70;
      }
      else {
        uint64_t v22 = *(uint8_t **)v70;
      }
      *(_DWORD *)int v61 = 136315138;
      *(void *)&v61[4] = v22;
      unsigned int v19 = (char *)_os_log_send_and_compose_impl();
      if (v71 < 0) {
        operator delete(*(void **)v70);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v19);
      if (v19 != (char *)&buf) {
        goto LABEL_54;
      }
    }
  }
}

void sub_1005B9350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

BOOL sub_1005B9478(int *a1)
{
  if (!*a1) {
    return 1;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022BD0F8);
  }
  uint64_t v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *a1;
    *(_DWORD *)std::string buf = 67109120;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#locctl,#rec,convertDataProtectionManagerNotificationTypeToProtobuf,unhandled type,%d", buf, 8u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static CLP::LogEntry::PrivateData::DataProtectionManagerNotification_NotificationType CLLocationControllerRecorder::convertDataProtectionManagerNotificationTypeToProtobuf(const CLDataProtectionManager_Type::Notification &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1005B963C(int *a1)
{
  if (!*a1) {
    return 1;
  }
  if (*a1 == 1) {
    return 2;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022BD0F8);
  }
  int v3 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *a1;
    *(_DWORD *)std::string buf = 67109120;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#locctl,#rec,convertDataAvailabilityTypeToProtobuf,unhandled type,%d", buf, 8u);
  }
  uint64_t result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static CLP::LogEntry::PrivateData::DataAvailability CLLocationControllerRecorder::convertDataAvailabilityTypeToProtobuf(const CLDataProtectionManager_Type::DataAvailability &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 0;
  }
  return result;
}

void sub_1005B9814(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6, uint64_t a7)
{
  if (!*(void *)(a1 + 16)) {
    return;
  }
  if (*a2 == 4)
  {
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      int v10 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0]) {
          BOOL v11 = a3->i32[1] == 0;
        }
        else {
          BOOL v11 = 1;
        }
        int v12 = !v11;
        if (*a4) {
          BOOL v13 = a4[1] == 0;
        }
        else {
          BOOL v13 = 1;
        }
        int v14 = !v13;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v12;
        __int16 v75 = 1024;
        LODWORD(v76) = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLBluetoothService_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      BOOL v15 = !a3->i32[0] || a3->i32[1] == 0;
      BOOL v16 = !v15;
      BOOL v17 = !*a4 || a4[1] == 0;
      BOOL v18 = !v17;
      *(_DWORD *)__int16 v70 = 67109376;
      *(_DWORD *)&v70[4] = v16;
      *(_WORD *)&v70[8] = 1024;
      *(_DWORD *)&v70[10] = v18;
      unsigned int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLBluetoothService_Type::Notification &, const CLBluetoothService_Type::NotificationData &)", "%s\n", v19);
      if (v19 == (char *)&buf) {
        return;
      }
LABEL_54:
      free(v19);
      return;
    }
    sub_100168850(v70);
    int v27 = (__n128 *)sub_10016BA10();
    sub_100168854(v27, v60);
    sub_100165AD4((uint64_t)v70, a2, a3, a4, (uint64_t *)v60);
    v73 |= 2u;
    uint64_t v28 = v72;
    if (!v72) {
      operator new();
    }
    *(_DWORD *)(v72 + 492) |= 0x800u;
    uint64_t v29 = *(void *)(v28 + 352);
    if (!v29) {
      operator new();
    }
    *(_DWORD *)(v29 + 184) |= 0x200u;
    uint64_t v30 = *(void *)(v29 + 72);
    if (!v30) {
      operator new();
    }
    int v31 = *a5;
    *(_DWORD *)(v30 + 28) |= 1u;
    *(_DWORD *)(v30 + _Block_object_dispose(&STACK[0x850], 8) = v31;
    unsigned int v32 = sub_10146901C(a6);
    if (!sub_100165F14(v32)) {
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 7863, "::CLP::LogEntry::PrivateData::BluetoothServiceNotification_NotificationType_IsValid(value)");
    }
    int v33 = *(_DWORD *)(v30 + 28);
    *(_DWORD *)(v30 + 12) = v32;
    *(_DWORD *)(v30 + 2_Block_object_dispose(&STACK[0x850], 8) = v33 | 6;
    uint64_t v34 = *(void *)(v30 + 16);
    if (!v34) {
      operator new();
    }
    char v35 = *(unsigned char *)(a7 + 113);
    *(_DWORD *)(v34 + 24) |= 1u;
    *(unsigned char *)(v34 + 16) = v35;
    int v36 = sub_100168A44(a1);
    if (*(unsigned char *)(a1 + 8))
    {
      int v37 = v36;
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      char v38 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        sub_101522B64((int *)a2, v61);
        if (SBYTE3(v63) >= 0) {
          unsigned int v39 = v61;
        }
        else {
          unsigned int v39 = *(unsigned char **)v61;
        }
        LODWORD(v53[0]) = a3->i32[0];
        sub_101522E48((int *)v53, v58);
        if (v59 >= 0) {
          uint64_t v40 = v58;
        }
        else {
          uint64_t v40 = (void **)v58[0];
        }
        int v55 = *a4;
        uint64_t v41 = __p;
        sub_101522E48(&v55, __p);
        if (v57 < 0) {
          uint64_t v41 = (void **)__p[0];
        }
        int v42 = *a6;
        uint64_t v43 = sub_10016BA10();
        double v44 = sub_10018202C(v43);
        LODWORD(buf) = 67110402;
        HIDWORD(buf) = v37;
        __int16 v75 = 2080;
        __int16 v76 = v39;
        __int16 v77 = 2080;
        uint64_t v78 = v40;
        __int16 v79 = 2080;
        double v80 = v41;
        __int16 v81 = 1024;
        int v82 = v42;
        __int16 v83 = 2050;
        double v84 = v44;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLBluetoothService_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x36u);
        if (v57 < 0) {
          operator delete(__p[0]);
        }
        if (v59 < 0) {
          operator delete(v58[0]);
        }
        if (SBYTE3(v63) < 0) {
          operator delete(*(void **)v61);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022BD0F8);
        }
        sub_101522B64((int *)a2, v58);
        if (v59 >= 0) {
          uint64_t v45 = v58;
        }
        else {
          uint64_t v45 = (void **)v58[0];
        }
        int v55 = a3->i32[0];
        double v46 = __p;
        sub_101522E48(&v55, __p);
        if (v57 < 0) {
          double v46 = (void **)__p[0];
        }
        int v52 = *a4;
        sub_101522E48(&v52, v53);
        if (v54 >= 0) {
          __int16 v47 = v53;
        }
        else {
          __int16 v47 = (void **)v53[0];
        }
        int v48 = *a6;
        uint64_t v49 = sub_10016BA10();
        double v50 = sub_10018202C(v49);
        *(_DWORD *)int v61 = 67110402;
        *(_DWORD *)&v61[4] = v37;
        *(_WORD *)&v61[8] = 2080;
        *(void *)&v61[10] = v45;
        __int16 v62 = 2080;
        char v63 = v46;
        __int16 v64 = 2080;
        char v65 = v47;
        __int16 v66 = 1024;
        int v67 = v48;
        __int16 v68 = 2050;
        double v69 = v50;
        int v51 = (char *)_os_log_send_and_compose_impl();
        if (v54 < 0) {
          operator delete(v53[0]);
        }
        if (v57 < 0) {
          operator delete(__p[0]);
        }
        if (v59 < 0) {
          operator delete(v58[0]);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLBluetoothService_Type::Notification &, const CLBluetoothService_Type::NotificationData &)", "%s\n", v51);
        if (v51 != (char *)&buf) {
          free(v51);
        }
      }
    }
    sub_1001687EC(v70);
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    std::string::size_type v20 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      sub_101522B64((int *)a2, &buf);
      int v21 = SBYTE3(v78) >= 0 ? &buf : (void **)buf;
      *(_DWORD *)__int16 v70 = 136315138;
      *(void *)&v70[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLBluetoothService_Type,unsupported message type,%s", v70, 0xCu);
      if (SBYTE3(v78) < 0) {
        operator delete(buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      sub_101522B64((int *)a2, v70);
      if (v71 >= 0) {
        uint64_t v22 = v70;
      }
      else {
        uint64_t v22 = *(uint8_t **)v70;
      }
      *(_DWORD *)int v61 = 136315138;
      *(void *)&v61[4] = v22;
      unsigned int v19 = (char *)_os_log_send_and_compose_impl();
      if (v71 < 0) {
        operator delete(*(void **)v70);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLBluetoothService_Type::Notification &, const CLBluetoothService_Type::NotificationData &)", "%s\n", v19);
      if (v19 != (char *)&buf) {
        goto LABEL_54;
      }
    }
  }
}

void sub_1005BA0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

void sub_1005BA1EC(uint64_t a1, unsigned int *a2, int32x4_t *a3, int *a4, int *a5, int *a6, char *a7)
{
  if (!*(void *)(a1 + 16)) {
    return;
  }
  if (*a2 == 4)
  {
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*a3))))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      int v10 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        if (a3->i32[0]) {
          BOOL v11 = a3->i32[1] == 0;
        }
        else {
          BOOL v11 = 1;
        }
        int v12 = !v11;
        if (*a4) {
          BOOL v13 = a4[1] == 0;
        }
        else {
          BOOL v13 = 1;
        }
        int v14 = !v13;
        LODWORD(buf) = 67109376;
        HIDWORD(buf) = v12;
        __int16 v79 = 1024;
        LODWORD(v80) = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLCompanionNotifier_Type,silo entry invalid,from_valid,%d,to_valid,%d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      BOOL v15 = !a3->i32[0] || a3->i32[1] == 0;
      BOOL v16 = !v15;
      BOOL v17 = !*a4 || a4[1] == 0;
      BOOL v18 = !v17;
      *(_DWORD *)__int16 v74 = 67109376;
      *(_DWORD *)&v74[4] = v16;
      *(_WORD *)&v74[8] = 1024;
      *(_DWORD *)&v74[10] = v18;
      unsigned int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v19);
      if (v19 == (char *)&buf) {
        return;
      }
LABEL_54:
      free(v19);
      return;
    }
    sub_100168850(v74);
    int v27 = (__n128 *)sub_10016BA10();
    sub_100168854(v27, v64);
    sub_100165AD4((uint64_t)v74, a2, a3, a4, (uint64_t *)v64);
    v77 |= 2u;
    uint64_t v28 = v76;
    if (!v76) {
      operator new();
    }
    *(_DWORD *)(v76 + 492) |= 0x800u;
    uint64_t v29 = *(void *)(v28 + 352);
    if (!v29) {
      operator new();
    }
    *(_DWORD *)(v29 + 184) |= 0x400u;
    uint64_t v30 = *(void *)(v29 + 80);
    if (!v30) {
      operator new();
    }
    int v31 = *a5;
    *(_DWORD *)(v30 + 28) |= 1u;
    *(_DWORD *)(v30 + _Block_object_dispose(&STACK[0x850], 8) = v31;
    unsigned int v32 = sub_101469350(a6);
    if (!sub_1001A4C4C(v32)) {
      __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 7980, "::CLP::LogEntry::PrivateData::CompanionNotifierNotification_NotificationType_IsValid(value)");
    }
    int v33 = *(_DWORD *)(v30 + 28);
    *(_DWORD *)(v30 + 12) = v32;
    *(_DWORD *)(v30 + 2_Block_object_dispose(&STACK[0x850], 8) = v33 | 6;
    uint64_t v34 = *(void *)(v30 + 16);
    if (!v34) {
      operator new();
    }
    if (*a6 == 5)
    {
      char v35 = *a7;
      *(_DWORD *)(v34 + 16) |= 1u;
      *(unsigned char *)(v34 + _Block_object_dispose(&STACK[0x850], 8) = v35;
      int v36 = sub_100168A44(a1);
      if (!*(unsigned char *)(a1 + 8)) {
        goto LABEL_106;
      }
      int v37 = v36;
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      char v38 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        sub_101522B64((int *)a2, v65);
        if (SBYTE3(v67) >= 0) {
          unsigned int v39 = v65;
        }
        else {
          unsigned int v39 = *(unsigned char **)v65;
        }
        LODWORD(v57[0]) = a3->i32[0];
        sub_101522E48((int *)v57, v62);
        int v55 = v37;
        if (v63 >= 0) {
          uint64_t v40 = v62;
        }
        else {
          uint64_t v40 = (void **)v62[0];
        }
        int v59 = *a4;
        uint64_t v41 = __p;
        sub_101522E48(&v59, __p);
        if (v61 < 0) {
          uint64_t v41 = (void **)__p[0];
        }
        int v42 = *a6;
        uint64_t v43 = sub_10016BA10();
        double v44 = sub_10018202C(v43);
        LODWORD(buf) = 67110402;
        HIDWORD(buf) = v55;
        __int16 v79 = 2080;
        double v80 = v39;
        __int16 v81 = 2080;
        int v82 = v40;
        __int16 v83 = 2080;
        double v84 = v41;
        __int16 v85 = 1024;
        int v86 = v42;
        __int16 v87 = 2050;
        double v88 = v44;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLCompanionNotifier_Type,success,%d,message_type,%s,from,%s,to,%s,notification_type,%d,propagation_us,%{public}.3f", (uint8_t *)&buf, 0x36u);
        if (v61 < 0) {
          operator delete(__p[0]);
        }
        if (v63 < 0) {
          operator delete(v62[0]);
        }
        int v37 = v55;
        if (SBYTE3(v67) < 0) {
          operator delete(*(void **)v65);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_106;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      sub_101522B64((int *)a2, v62);
      if (v63 >= 0) {
        uint64_t v45 = v62;
      }
      else {
        uint64_t v45 = (void **)v62[0];
      }
      int v59 = a3->i32[0];
      double v46 = __p;
      sub_101522E48(&v59, __p);
      if (v61 < 0) {
        double v46 = (void **)__p[0];
      }
      int v56 = *a4;
      __int16 v47 = v57;
      sub_101522E48(&v56, v57);
      if (v58 < 0) {
        __int16 v47 = (void **)v57[0];
      }
      int v48 = *a6;
      uint64_t v49 = sub_10016BA10();
      double v50 = sub_10018202C(v49);
      *(_DWORD *)char v65 = 67110402;
      *(_DWORD *)&v65[4] = v37;
      *(_WORD *)&v65[8] = 2080;
      *(void *)&v65[10] = v45;
      __int16 v66 = 2080;
      int v67 = v46;
      __int16 v68 = 2080;
      double v69 = v47;
      __int16 v70 = 1024;
      int v71 = v48;
      __int16 v72 = 2050;
      double v73 = v50;
      int v51 = (char *)_os_log_send_and_compose_impl();
      if (v58 < 0) {
        operator delete(v57[0]);
      }
      if (v61 < 0) {
        operator delete(__p[0]);
      }
      if (v63 < 0) {
        operator delete(v62[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v51);
      if (v51 == (char *)&buf) {
        goto LABEL_106;
      }
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      int v52 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        int v53 = *a6;
        LODWORD(buf) = 67109120;
        HIDWORD(buf) = v53;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLCompanionNotifier_Type,unsupported notification type,%d", (uint8_t *)&buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_106;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022BD0F8);
      }
      int v54 = *a6;
      *(_DWORD *)char v65 = 67109120;
      *(_DWORD *)&v65[4] = v54;
      int v51 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v51);
      if (v51 == (char *)&buf) {
        goto LABEL_106;
      }
    }
    free(v51);
LABEL_106:
    sub_1001687EC(v74);
    return;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022BD0F8);
  }
  std::string::size_type v20 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    sub_101522B64((int *)a2, &buf);
    int v21 = SBYTE3(v82) >= 0 ? &buf : (void **)buf;
    *(_DWORD *)__int16 v74 = 136315138;
    *(void *)&v74[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#locctl,#rec,recordMessage,CLCompanionNotifier_Type,unsupported message type,%s", v74, 0xCu);
    if (SBYTE3(v82) < 0) {
      operator delete(buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022BD0F8);
    }
    sub_101522B64((int *)a2, v74);
    if (v75 >= 0) {
      uint64_t v22 = v74;
    }
    else {
      uint64_t v22 = *(uint8_t **)v74;
    }
    *(_DWORD *)char v65 = 136315138;
    *(void *)&v65[4] = v22;
    unsigned int v19 = (char *)_os_log_send_and_compose_impl();
    if (v75 < 0) {
      operator delete(*(void **)v74);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerRecorder::recordMessage(const CLLocationControllerRecorder_Types::MessageType &, const CLLocationControllerRecorder_Types::Silo &, const CLLocationControllerRecorder_Types::Silo &, const int &, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v19);
    if (v19 != (char *)&buf) {
      goto LABEL_54;
    }
  }
}