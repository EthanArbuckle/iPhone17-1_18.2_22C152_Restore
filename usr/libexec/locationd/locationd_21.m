void sub_100E3BAB4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  int v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  unint64_t v22;
  unint64_t i;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  NSObject *v30;
  uint64_t *v31;
  uint64_t *v32;
  int v33;
  double v34;
  unint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  NSObject *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned char buf[22];
  __int16 v57;
  double v58;
  char v59;
  unsigned char v60[22];
  __int16 v61;
  double v62;
  unsigned __int8 v63;
  char v64;

  sub_1000DEB28((_DWORD *)a3, a1);
  if (*(unsigned char *)(a1 + 6376))
  {
    *(unsigned char *)(a3 + 1096) = *(void *)(a1 + 6328) == 0;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v6 = *a2;
    v7 = a2[1];
    if (*a2 != v7)
    {
      v8 = 0;
      do
      {
        if (v8 >= v55)
        {
          v8 = sub_1001F8D14(&v53, v6);
        }
        else
        {
          sub_1001F8C88((uint64_t)&v53, v6);
          v8 += 88;
        }
        v54 = v8;
        v6 += 88;
      }
      while (v6 != v7);
      if (v53 != v8)
      {
        v10 = *a2;
        v9 = (uint64_t)(a2 + 4);
        v11 = *(double *)(v10 + 56);
        sub_1000E23EC(buf, v9);
        if (!v59) {
          goto LABEL_20;
        }
        sub_1000E23EC(v60, v9);
        if (!v64) {
          sub_10020D700();
        }
        v12 = v63;
        if (SHIBYTE(v62) < 0) {
          operator delete(*(void **)&v60[8]);
        }
        if (v59 && SHIBYTE(v58) < 0) {
          operator delete(*(void **)&buf[8]);
        }
        if (v12)
        {
          v13 = *(void **)(a3 + 3312);
          sub_1000E23EC(buf, v9);
          *(void *)v60 = *(void *)buf;
          sub_1013F99A0(v13, (unint64_t *)v60, v11);
          if (v59 && SHIBYTE(v58) < 0) {
            operator delete(*(void **)&buf[8]);
          }
        }
        else
        {
LABEL_20:
          sub_1013FA2B8(*(void **)(a3 + 3312), v11);
        }
        v14 = v53;
        v15 = v54;
        v16 = *(double *)(v53 + 56);
        v50 = 0;
        v51 = 0;
        v52 = 0;
        v47 = 0;
        v48 = 0;
        v49 = 0;
        if (v53 != v54)
        {
          v17 = 0;
          while (1)
          {
            if (vabdd_f64(v16, *(double *)(v14 + 56)) <= 4.0)
            {
              if (v17 >= v52) {
                goto LABEL_43;
              }
              sub_1001F8C88((uint64_t)&v50, v14);
              v17 += 88;
            }
            else
            {
              v18 = v50;
              sub_10093B088((uint64_t *)&v47, (uint64_t)&v50);
              if (qword_1024193B0 != -1) {
                dispatch_once(&qword_1024193B0, &stru_1022FBF70);
              }
              v19 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v17 - v18) >> 3);
              v20 = qword_1024193B8;
              if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 134349568;
                *(void *)&buf[4] = 0xAAAAAAAAAAAAAAABLL * (v48 - v47);
                *(_WORD *)&buf[12] = 2050;
                *(void *)&buf[14] = v19;
                v57 = 2050;
                v58 = v16;
                _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "@WsbGroup, add, %{public}lu, aps, %{public}lu, time, %{public}.1f", buf, 0x20u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024193B0 != -1) {
                  dispatch_once(&qword_1024193B0, &stru_1022FBF70);
                }
                *(_DWORD *)v60 = 134349568;
                *(void *)&v60[4] = 0xAAAAAAAAAAAAAAABLL * (v48 - v47);
                *(_WORD *)&v60[12] = 2050;
                *(void *)&v60[14] = v19;
                v61 = 2050;
                v62 = v16;
                v24 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Wsb &) const", "%s\n", v24);
                if (v24 != buf) {
                  free(v24);
                }
              }
              if (qword_1024193B0 != -1) {
                dispatch_once(&qword_1024193B0, &stru_1022FBF70);
              }
              v21 = qword_1024193B8;
              if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134349056;
                *(void *)&buf[4] = v19;
                _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "WsbMetric, scanaps, %{public}lu", buf, 0xCu);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024193B0 != -1) {
                  dispatch_once(&qword_1024193B0, &stru_1022FBF70);
                }
                *(_DWORD *)v60 = 134349056;
                *(void *)&v60[4] = v19;
                v25 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Wsb &) const", "%s\n", v25);
                if (v25 != buf) {
                  free(v25);
                }
              }
              AnalyticsSendEventLazy();
              v16 = *(double *)(v14 + 56);
              v22 = v50;
              for (i = v51; i != v22; i -= 88)
              {
                if (*(char *)(i - 57) < 0) {
                  operator delete(*(void **)(i - 80));
                }
              }
              v51 = v22;
              if (v22 >= v52)
              {
LABEL_43:
                v17 = sub_1001F8D14((uint64_t *)&v50, v14);
                goto LABEL_44;
              }
              sub_1001F8C88((uint64_t)&v50, v14);
              v17 = v22 + 88;
            }
LABEL_44:
            v51 = v17;
            v14 += 88;
            if (v14 == v15)
            {
              v26 = v50;
              goto LABEL_55;
            }
          }
        }
        v26 = 0;
        v17 = 0;
LABEL_55:
        sub_10093B088((uint64_t *)&v47, (uint64_t)&v50);
        v27 = (uint64_t)(v17 - v26) >> 3;
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022FBF70);
        }
        v28 = 0x2E8BA2E8BA2E8BA3 * v27;
        v29 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134349568;
          *(void *)&buf[4] = 0xAAAAAAAAAAAAAAABLL * (v48 - v47);
          *(_WORD *)&buf[12] = 2050;
          *(void *)&buf[14] = v28;
          v57 = 2050;
          v58 = v16;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "@WsbGroup, last, %{public}lu, aps, %{public}lu, time, %{public}.1f", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022FBF70);
          }
          *(_DWORD *)v60 = 134349568;
          *(void *)&v60[4] = 0xAAAAAAAAAAAAAAABLL * (v48 - v47);
          *(_WORD *)&v60[12] = 2050;
          *(void *)&v60[14] = v28;
          v61 = 2050;
          v62 = v16;
          v44 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Wsb &) const", "%s\n", v44);
          if (v44 != buf) {
            free(v44);
          }
        }
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022FBF70);
        }
        v30 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349056;
          *(void *)&buf[4] = v28;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "WsbMetric, scanaps, %{public}lu", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022FBF70);
          }
          *(_DWORD *)v60 = 134349056;
          *(void *)&v60[4] = v28;
          v45 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Wsb &) const", "%s\n", v45);
          if (v45 != buf) {
            free(v45);
          }
        }
        AnalyticsSendEventLazy();
        v31 = v47;
        v32 = v48;
        if (v47 != v48)
        {
          v33 = 0;
          do
          {
            v34 = *(double *)(*v31 + 56) - *(double *)(a1 + 6144);
            if (v34 > 0.0 && *(unsigned char *)(a1 + 6376))
            {
              v35 = *(void *)(a3 + 1080);
              if (v35 >= *(void *)(a3 + 1088))
              {
                v36 = sub_100E471E8((uint64_t *)(a3 + 1072), v31);
              }
              else
              {
                sub_100E47180(a3 + 1072, v31);
                v36 = v35 + 24;
              }
              *(void *)(a3 + 1080) = v36;
            }
            else
            {
              if (qword_1024193B0 != -1) {
                dispatch_once(&qword_1024193B0, &stru_1022FBF70);
              }
              v37 = qword_1024193B8;
              if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
              {
                v38 = *(void *)(*v31 + 56);
                v39 = 0x2E8BA2E8BA2E8BA3 * ((v31[1] - *v31) >> 3);
                *(_DWORD *)buf = 134349568;
                *(void *)&buf[4] = v38;
                *(_WORD *)&buf[12] = 2050;
                *(void *)&buf[14] = v39;
                v57 = 2050;
                v58 = v34;
                _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "@WsbDiscard, privacy, %{public}.1f, aps, %{public}ld, delta, %{public}.1f", buf, 0x20u);
              }
              ++v33;
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024193B0 != -1) {
                  dispatch_once(&qword_1024193B0, &stru_1022FBF70);
                }
                v40 = *(void *)(*v31 + 56);
                v41 = 0x2E8BA2E8BA2E8BA3 * ((v31[1] - *v31) >> 3);
                *(_DWORD *)v60 = 134349568;
                *(void *)&v60[4] = v40;
                *(_WORD *)&v60[12] = 2050;
                *(void *)&v60[14] = v41;
                v61 = 2050;
                v62 = v34;
                v42 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Wsb &) const", "%s\n", v42);
                if (v42 != buf) {
                  free(v42);
                }
              }
            }
            v31 += 3;
          }
          while (v31 != v32);
          if (v33 > 0)
          {
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1022FBF70);
            }
            v43 = qword_1024193B8;
            if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 67240192;
              *(_DWORD *)&buf[4] = v33;
              _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "WsbMetric, groupresult, privacy, %{public}d", buf, 8u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193B0 != -1) {
                dispatch_once(&qword_1024193B0, &stru_1022FBF70);
              }
              *(_DWORD *)v60 = 67240192;
              *(_DWORD *)&v60[4] = v33;
              v46 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Wsb &) const", "%s\n", v46);
              if (v46 != buf) {
                free(v46);
              }
            }
            AnalyticsSendEventLazy();
            AnalyticsSendEventLazy();
          }
        }
        *(void *)buf = &v47;
        sub_1000D7F04((void ***)buf);
        *(void *)buf = &v50;
        sub_1000D7F78((void ***)buf);
      }
    }
    *(void *)buf = &v53;
    sub_1000D7F78((void ***)buf);
  }
}

void sub_100E3C8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,char *a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  a45 = &a36;
  sub_1000D7F04((void ***)&a45);
  a45 = &a39;
  sub_1000D7F78((void ***)&a45);
  a45 = &a42;
  sub_1000D7F78((void ***)&a45);
  sub_10050BAA0(v59);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100E3C968(uint64_t a1)
{
  CFStringRef v2 = @"aps";
  v3 = +[NSNumber numberWithUnsignedLong:*(void *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:&v3 forKeys:&v2 count:1];
}

NSDictionary *sub_100E3C9EC(uint64_t a1)
{
  CFStringRef v2 = @"aps";
  v3 = +[NSNumber numberWithUnsignedLong:*(void *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:&v3 forKeys:&v2 count:1];
}

NSDictionary *sub_100E3CA70(uint64_t a1)
{
  v2[1] = @"numInGroup";
  v3[0] = @"discard";
  v2[0] = @"groupResult";
  v3[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:v3 forKeys:v2 count:2];
}

NSDictionary *sub_100E3CB08(uint64_t a1)
{
  v2[1] = @"numInGroup";
  v3[0] = @"discard:privacy";
  v2[0] = @"groupResult";
  v3[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:v3 forKeys:v2 count:2];
}

void sub_100E3CBA0(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000DEB28((_DWORD *)a3, a1);
  int v6 = *a2;
  *(_DWORD *)(a3 + 6368) = *a2;
  int v7 = sub_1000E6DB4(a1 + 4944);
  *(double *)(a3 + 6160) = sub_100E3AD00(a1, v6, v7);
  if ((*(_DWORD *)(a1 + 6368) - 3) <= 0xFFFFFFFD && (*a2 - 1) <= 1) {
    *(void *)(a3 + 5952) = *(void *)(a1 + 6384);
  }
}

void sub_100E3CC28(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

void sub_100E3CC3C(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000DEB28((_DWORD *)a3, a1);
  int v6 = *(uint64_t **)(a1 + 6280);
  int v7 = *(uint64_t **)(a1 + 6288);
  if (v6 == v7)
  {
    uint64_t v12 = *(void *)(a1 + 6280);
  }
  else
  {
    v26 = a2;
    do
    {
      long long v34 = 0uLL;
      uint64_t v35 = 0;
      sub_1000DA6E8(&v34, *v6, v6[1], 0x2E8BA2E8BA2E8BA3 * ((v6[1] - *v6) >> 3));
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022FBF70);
      }
      v8 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(v34 + 56);
        *(_DWORD *)buf = 134349312;
        *(void *)&buf[4] = v9;
        __int16 v28 = 2050;
        uint64_t v29 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)&v34 + 1) - v34) >> 3);
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "@WsbDiscard, privacy, %{public}.1f, aps, %{public}ld", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022FBF70);
        }
        uint64_t v10 = *(void *)(v34 + 56);
        int v30 = 134349312;
        uint64_t v31 = v10;
        __int16 v32 = 2050;
        uint64_t v33 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)&v34 + 1) - v34) >> 3);
        v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::Privacy &) const", "%s\n", v11);
        if (v11 != buf) {
          free(v11);
        }
      }
      *(void *)buf = &v34;
      sub_1000D7F78((void ***)buf);
      v6 += 3;
    }
    while (v6 != v7);
    uint64_t v12 = *(void *)(a1 + 6288);
    int v6 = *(uint64_t **)(a1 + 6280);
    a2 = v26;
  }
  int v13 = -1431655765 * ((unint64_t)(v12 - (void)v6) >> 3);
  if (v13 > 0)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    v14 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "WsbMetric, groupresult, privacy, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022FBF70);
      }
      LODWORD(v34) = 67240192;
      DWORD1(v34) = v13;
      v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::Privacy &) const", "%s\n", v21);
      if (v21 != buf) {
        free(v21);
      }
    }
    AnalyticsSendEventLazy();
    AnalyticsSendEventLazy();
  }
  sub_100E3D604(a1 + 3016, (uint64_t)buf);
  sub_1000E2978(a3 + 3016, (uint64_t)buf);
  sub_1000D7DCC((uint64_t)buf);
  int v15 = *a2;
  if (*a2 != 2)
  {
    *(unsigned char *)(a3 + 6376) = v15 == 1;
    if (v15 == 1)
    {
      *(_OWORD *)(a3 + 6168) = *(_OWORD *)(a1 + 6168);
      *(_OWORD *)(a3 + 6216) = *(_OWORD *)(a1 + 6216);
      *(_OWORD *)(a3 + 6232) = *(_OWORD *)(a1 + 6232);
      *(_OWORD *)(a3 + 6248) = *(_OWORD *)(a1 + 6248);
      *(_OWORD *)(a3 + 6184) = *(_OWORD *)(a1 + 6184);
      *(_OWORD *)(a3 + 6200) = *(_OWORD *)(a1 + 6200);
      *(_OWORD *)(a3 + 6257) = *(_OWORD *)(a1 + 6257);
      *(_DWORD *)(a3 + 6168) = 0;
      sub_1000D9D94(a3 + 3208, a1 + 3208);
      *(_WORD *)(a3 + 3304) = *(_WORD *)(a1 + 3304);
      if (*(unsigned char *)(a1 + 6172))
      {
        if (*(double *)(a3 + 6184) <= *(double *)(a3 + 6176))
        {
          *(void *)(a3 + 6184) = *(void *)(a1 + 6384);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022FBF70);
          }
          v16 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
          {
            double v17 = *(double *)(a3 + 6184) - *(double *)(a3 + 6176);
            *(_DWORD *)buf = 134349056;
            *(double *)&buf[4] = v17;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "@EmerTick, toggle, %{public}.1f", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1022FBF70);
            }
            double v24 = *(double *)(a3 + 6184) - *(double *)(a3 + 6176);
            LODWORD(v34) = 134349056;
            *(double *)((char *)&v34 + 4) = v24;
            v25 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::Privacy &) const", "%s\n", v25);
            if (v25 != buf) {
              free(v25);
            }
          }
        }
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022FBF70);
        }
        v18 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
        {
          double v19 = *(double *)(a3 + 6184) - *(double *)(a3 + 6176);
          *(_DWORD *)buf = 134349056;
          *(double *)&buf[4] = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "@EmerFlow, ToggleOn, %{public}.1f", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022FBF70);
          }
          double v22 = *(double *)(a3 + 6184) - *(double *)(a3 + 6176);
          LODWORD(v34) = 134349056;
          *(double *)((char *)&v34 + 4) = v22;
          v23 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::Privacy &) const", "%s\n", v23);
          if (v23 != buf) {
            free(v23);
          }
        }
      }
    }
  }
  uint64_t v20 = *(void *)(a1 + 6384);
  *(void *)(a3 + 3404) = v20;
  *(void *)(a3 + 6144) = v20;
}

void sub_100E3D48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

NSDictionary *sub_100E3D4D4(uint64_t a1)
{
  v2[1] = @"numInGroup";
  v3[0] = @"discard";
  v2[0] = @"groupResult";
  v3[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:v3 forKeys:v2 count:2];
}

NSDictionary *sub_100E3D56C(uint64_t a1)
{
  v2[1] = @"numInGroup";
  v3[0] = @"discard:privacy";
  v2[0] = @"groupResult";
  v3[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:v3 forKeys:v2 count:2];
}

__n128 sub_100E3D604@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_1000DB6E4(a2);
  *(void *)(v3 + 3368) = *(void *)(a1 + 3368);
  *(void *)(v3 + 3120) = *(void *)(a1 + 3120);
  *(_OWORD *)(v3 + 3384) = *(_OWORD *)(a1 + 3384);
  *(_DWORD *)(v3 + 3400) = *(_DWORD *)(a1 + 3400);
  *(unsigned char *)(v3 + 3156) = *(unsigned char *)(a1 + 3156);
  *(unsigned char *)(v3 + 3256) = *(unsigned char *)(a1 + 3256);
  *(_DWORD *)(v3 + 3360) = *(_DWORD *)(a1 + 3360);
  *(void *)(v3 + 128) = *(void *)(a1 + 128);
  long long v4 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v3 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v3 + 112) = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v3 + 80) = v5;
  long long v6 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v3 + 48) = v6;
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)a1;
  *(__n128 *)(v3 + 16) = result;
  *(unsigned char *)(v3 + 136) = *(unsigned char *)(a1 + 136);
  return result;
}

_DWORD *sub_100E3D69C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  __n128 result = sub_1000DEB28(a3, a1);
  *((unsigned char *)result + 5960) = 1;
  BOOL v6 = *a2 != 2 || a2[1] == 2;
  if (!v6 && *(int *)(a1 + 6412) >= 1)
  {
    if (*(void *)(a1 + 6328))
    {
      *((unsigned char *)result + 1656) = 1;
      *((void *)result + 794) = 0x402E000000000000;
    }
  }
  return result;
}

uint64_t sub_100E3D70C@<X0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000DEB28((_DWORD *)a3, a1);
  uint64_t v5 = *(void *)(a3 + 3192);
  sub_100E46858((void *)(v5 + 8), a2);
  unint64_t v7 = a2->n128_u64[1];
  return sub_100C63640(v5, (double *)&v7);
}

void sub_100E3D770(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

void sub_100E3D784(uint64_t a1)
{
  __chkstk_darwin(a1);
  CFStringRef v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = (uint64_t)v5;
  sub_1000DEB28(v5, v3);
  if (*v2 == -1)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    unint64_t v7 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v30) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "@WifiFlow, alsreply, aps, 0, tag, -1", (uint8_t *)&v30, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v30, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022FBF70);
      }
      LOWORD(v24) = 0;
      v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Network::AlsRequestResult &) const", "%s\n", v18);
      if (v18 != (char *)&v30) {
        free(v18);
      }
    }
  }
  int v8 = v2[1];
  if (v8 == 1)
  {
    if (*v2 == -1)
    {
      *(unsigned char *)(v6 + 1656) = 1;
      *(void *)(v6 + 6352) = 0x4082C00000000000;
    }
    else
    {
      int v9 = sub_100F91E80(v4 + 3208);
      if (*(_DWORD *)(v4 + 6348)) {
        uint64_t v10 = "reproc";
      }
      else {
        uint64_t v10 = "live";
      }
      if (v9) {
        v11 = "Wifi";
      }
      else {
        v11 = "Cell";
      }
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022FBF70);
      }
      uint64_t v12 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = *(void *)(v6 + 6328);
        int v30 = 136446722;
        *(void *)uint64_t v31 = v11;
        *(_WORD *)&v31[8] = 2082;
        *(void *)&v31[10] = v10;
        *(_WORD *)&v31[18] = 2050;
        v32[0] = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "WsbMetric, als, %{public}s, %{public}s, %{public}ld", (uint8_t *)&v30, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&v30, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022FBF70);
        }
        uint64_t v19 = *(void *)(v6 + 6328);
        int v24 = 136446722;
        v25 = v11;
        __int16 v26 = 2082;
        v27 = v10;
        __int16 v28 = 2050;
        uint64_t v29 = v19;
        uint64_t v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Network::AlsRequestResult &) const", "%s\n", v20);
        if (v20 != (char *)&v30) {
          free(v20);
        }
      }
      sub_1000DF9A4((uint64_t)v21, v6);
      v23[432] = v10;
      v23[433] = v11;
      AnalyticsSendEventLazy();
      *(_DWORD *)(v6 + 6344) = *v2;
      if (*(void *)(v6 + 6328)) {
        sub_1000E2F40((void *)(v6 + 6304));
      }
      uint64_t v14 = *(void *)(v4 + 6288);
      if (v14 != *(void *)(v4 + 6280)) {
        *(void *)(v6 + 6360) = *(void *)(*(void *)(v14 - 24) + 56);
      }
      sub_1000D7DCC((uint64_t)v23);
      sub_1000D7C60((uint64_t)&v22);
      sub_1000D7B80((uint64_t)v21);
    }
  }
  else if (!v8 && *v2 != -1)
  {
    *(void *)(v6 + 6128) = *(void *)(v4 + 6384);
    *(unsigned char *)(v6 + 5960) = 1;
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022FBF70);
  }
  int v15 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    int v16 = *v2;
    if (v2[1]) {
      double v17 = "wsb";
    }
    else {
      double v17 = "normal";
    }
    int v30 = 68289538;
    *(_DWORD *)uint64_t v31 = 0;
    *(_WORD *)&v31[4] = 2082;
    *(void *)&v31[6] = "";
    *(_WORD *)&v31[14] = 1026;
    *(_DWORD *)&v31[16] = v16;
    LOWORD(v32[0]) = 2082;
    *(void *)((char *)v32 + 2) = v17;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#pre-wifi-position-calculation-state-update, als request results indicate success\", \"tag\":%{public}d, \"requestType\":%{public, location:escape_only}s}", (uint8_t *)&v30, 0x22u);
  }
}

void sub_100E3DD14(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100E3DD48(void *a1)
{
  v3[0] = @"aps";
  v4[0] = +[NSNumber numberWithUnsignedLong:a1[795]];
  v3[1] = @"pass";
  v4[1] = +[NSString stringWithUTF8String:a1[813]];
  void v3[2] = @"reachability";
  v4[2] = +[NSString stringWithUTF8String:a1[814]];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:3];
}

uint64_t sub_100E3DE10(uint64_t a1, uint64_t a2)
{
  return sub_1000DF9A4(a1 + 32, a2 + 32);
}

void sub_100E3DE1C(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  sub_1000D7DCC(a1 + 3048);
  sub_1000D7C60(a1 + 840);

  sub_1000D7B80(v2);
}

void sub_100E3DE64(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000DEB28((_DWORD *)a3, a1);
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022FBF70);
  }
  uint64_t v6 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *a2;
    int v7 = a2[1];
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)v61 = v7;
    *(_WORD *)&v61[4] = 1026;
    *(_DWORD *)&v61[6] = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "@WifiFlow, alsreply, aps, %{public}d, tag, %{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    int v38 = *a2;
    int v37 = a2[1];
    int v54 = 67240448;
    *(_DWORD *)v55 = v37;
    *(_WORD *)&v55[4] = 1026;
    *(_DWORD *)&v55[6] = v38;
    v39 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Network::AlsFinished &) const", "%s\n", v39);
    if (v39 != (char *)buf) {
      free(v39);
    }
  }
  if (sub_1006D30F0((_DWORD *)(a1 + 5968)) || *(unsigned char *)(a1 + 6172))
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    int v9 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      BOOL v10 = sub_1006D30F0((_DWORD *)(a1 + 5968));
      int v11 = *(unsigned __int8 *)(a1 + 6172);
      int v12 = *(_DWORD *)(a1 + 6168);
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)v61 = v10;
      *(_WORD *)&v61[4] = 1026;
      *(_DWORD *)&v61[6] = v11;
      *(_WORD *)v62 = 1026;
      *(_DWORD *)&v62[2] = v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "EmerCheck, als, top, highinteg, %{public}d, emer, %{public}d, state, %{public}d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022FBF70);
      }
      BOOL v40 = sub_1006D30F0((_DWORD *)(a1 + 5968));
      int v41 = *(unsigned __int8 *)(a1 + 6172);
      int v42 = *(_DWORD *)(a1 + 6168);
      int v54 = 67240704;
      *(_DWORD *)v55 = v40;
      *(_WORD *)&v55[4] = 1026;
      *(_DWORD *)&v55[6] = v41;
      *(_WORD *)v56 = 1026;
      *(_DWORD *)&v56[2] = v42;
      v43 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Network::AlsFinished &) const", "%s\n", v43);
      if (v43 != (char *)buf) {
        free(v43);
      }
    }
    *(_DWORD *)(a3 + 6156) = 0;
    int v13 = *(_DWORD *)(a1 + 6168);
    if (v13 == 3 || v13 == 5)
    {
      if (v13 == 5) {
        int v26 = 6;
      }
      else {
        int v26 = 4;
      }
      *(_DWORD *)(a3 + 6168) = v26;
      if (*(double *)(a3 + 6224) < *(double *)(a3 + 6176))
      {
        *(void *)(a3 + 6224) = *(void *)(a1 + 6384);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022FBF70);
        }
        v27 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
        {
          double v28 = *(double *)(a3 + 6224) - *(double *)(a3 + 6176);
          *(_DWORD *)buf = 134349056;
          *(double *)v61 = v28;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "@EmerTick, preliminaryAlsReplyTick, %{public}.1f", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022FBF70);
          }
          double v49 = *(double *)(a3 + 6224) - *(double *)(a3 + 6176);
          int v54 = 134349056;
          *(double *)v55 = v49;
          v50 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Network::AlsFinished &) const", "%s\n", v50);
          if (v50 != (char *)buf) {
            free(v50);
          }
        }
      }
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022FBF70);
      }
      uint64_t v29 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        int v30 = "ScanRequest5GHzWithAlsReply";
        if (v13 == 5) {
          int v30 = "ScanReply5GHzWithAlsReply";
        }
        int v32 = *a2;
        int v31 = a2[1];
        int v33 = *(_DWORD *)(a3 + 6156);
        double v34 = *(double *)(a3 + 6248) - *(double *)(a3 + 6176);
        *(_DWORD *)buf = 136447234;
        *(void *)v61 = v30;
        *(_WORD *)&v61[8] = 1026;
        *(_DWORD *)v62 = v31;
        *(_WORD *)&v62[4] = 1026;
        *(_DWORD *)v63 = v32;
        *(_WORD *)&v63[4] = 1026;
        *(_DWORD *)&v63[6] = v33;
        __int16 v64 = 2050;
        double v65 = v34;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "@EmerFlow, %{public}s, aps, %{public}d, tag, %{public}d, queryType, %{public}d, tte, %{public}.1f", buf, 0x28u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022FBF70);
        }
        v44 = "ScanRequest5GHzWithAlsReply";
        if (v13 == 5) {
          v44 = "ScanReply5GHzWithAlsReply";
        }
        int v46 = *a2;
        int v45 = a2[1];
        int v47 = *(_DWORD *)(a3 + 6156);
        double v48 = *(double *)(a3 + 6248) - *(double *)(a3 + 6176);
        int v54 = 136447234;
        *(void *)v55 = v44;
        *(_WORD *)&v55[8] = 1026;
        *(_DWORD *)v56 = v45;
        *(_WORD *)&v56[4] = 1026;
        *(_DWORD *)v57 = v46;
        *(_WORD *)&v57[4] = 1026;
        *(_DWORD *)&v57[6] = v47;
        __int16 v58 = 2050;
        double v59 = v48;
        v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Network::AlsFinished &) const", "%s\n", v25);
        goto LABEL_64;
      }
    }
    else if (v13 == 7)
    {
      *(_DWORD *)(a3 + 6168) = 8;
      if (*(double *)(a3 + 6248) < *(double *)(a3 + 6176))
      {
        *(void *)(a3 + 6248) = *(void *)(a1 + 6384);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022FBF70);
        }
        uint64_t v14 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
        {
          double v15 = *(double *)(a3 + 6248) - *(double *)(a3 + 6176);
          *(_DWORD *)buf = 134349056;
          *(double *)v61 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "@EmerTick, alsreply, %{public}.1f", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022FBF70);
          }
          double v51 = *(double *)(a3 + 6248) - *(double *)(a3 + 6176);
          int v54 = 134349056;
          *(double *)v55 = v51;
          v52 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Network::AlsFinished &) const", "%s\n", v52);
          if (v52 != (char *)buf) {
            free(v52);
          }
        }
      }
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022FBF70);
      }
      int v16 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = *a2;
        int v17 = a2[1];
        int v19 = *(_DWORD *)(a3 + 6156);
        double v20 = *(double *)(a3 + 6248) - *(double *)(a3 + 6176);
        *(_DWORD *)buf = 67240960;
        *(_DWORD *)v61 = v17;
        *(_WORD *)&v61[4] = 1026;
        *(_DWORD *)&v61[6] = v18;
        *(_WORD *)v62 = 1026;
        *(_DWORD *)&v62[2] = v19;
        *(_WORD *)v63 = 2050;
        *(double *)&v63[2] = v20;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "@EmerFlow, AlsReply, aps, %{public}d, tag, %{public}d, queryType, %{public}d, tte, %{public}.1f", buf, 0x1Eu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022FBF70);
        }
        int v22 = *a2;
        int v21 = a2[1];
        int v23 = *(_DWORD *)(a3 + 6156);
        double v24 = *(double *)(a3 + 6248) - *(double *)(a3 + 6176);
        int v54 = 67240960;
        *(_DWORD *)v55 = v21;
        *(_WORD *)&v55[4] = 1026;
        *(_DWORD *)&v55[6] = v22;
        *(_WORD *)v56 = 1026;
        *(_DWORD *)&v56[2] = v23;
        *(_WORD *)v57 = 2050;
        *(double *)&v57[2] = v24;
        v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Network::AlsFinished &) const", "%s\n", v25);
LABEL_64:
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
    }
  }
  double v35 = *(double *)(a3 + 6384);
  v36 = *(std::__shared_weak_count **)(a3 + 3168);
  v53[0] = *(void **)(a3 + 3160);
  v53[1] = &v36->__vftable;
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100E3AFB4(v53, v35);
  if (v36) {
    sub_1000DB0A0(v36);
  }
}

void sub_100E3E8D8(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

void sub_100E3E924(uint64_t a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  sub_1000DEB28(a3, a1);
  if (*(void *)(a1 + 6288) != *(void *)(a1 + 6280) && *(_DWORD *)(a1 + 6344) == *a2)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    uint64_t v6 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "WsbAls, reply, 0", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022FBF70);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Network::AlsAllUnknown &) const", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    a3[1587] = 2;
  }
}

void sub_100E3EAF4(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

void sub_100E3EB0C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (char *)(a1 + 6007);
  sub_1000DEB28((_DWORD *)a3, a1);
  double v7 = *(double *)(a1 + 6384);
  int v8 = v6[433] & 0xF;
  double v9 = *(double *)(*(void *)(a1 + 6424) + 320);
  BOOL v10 = (v6[433] & 0xF) == 0;
  if (v9 <= 0.0) {
    int v11 = -1;
  }
  else {
    int v11 = (int)(v7 - v9);
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022FBF70);
  }
  int v12 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    sub_1006D3DD4((char *)a2, (uint64_t)__p);
    int v13 = v96[9] >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = v13;
    __int16 v104 = 1026;
    *(_DWORD *)v105 = v11;
    *(_WORD *)&v105[4] = 1026;
    *(_DWORD *)&v105[6] = v8 == 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "WlpMetric, locreq, %{public}s, dt, %{public}d, metric, %{public}d", buf, 0x18u);
    if ((v96[9] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    sub_1006D3DD4((char *)a2, (uint64_t)&v75);
    if (v77.__r_.__value_.__s.__data_[7] >= 0) {
      v61 = &v75;
    }
    else {
      v61 = v75;
    }
    *(_DWORD *)__p = 136446722;
    *(void *)&__p[4] = v61;
    __int16 v95 = 1026;
    *(_DWORD *)v96 = v11;
    *(_WORD *)&v96[4] = 1026;
    *(_DWORD *)&v96[6] = v8 == 0;
    v62 = (char *)_os_log_send_and_compose_impl();
    if (v77.__r_.__value_.__s.__data_[7] < 0) {
      operator delete(v75);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::LocationRequest &) const", "%s\n", v62);
    if (v62 != buf) {
      free(v62);
    }
  }
  if (!v8)
  {
    v83 = _NSConcreteStackBlock;
    uint64_t v84 = 3221225472;
    v85 = sub_100E3FCA8;
    v86 = &unk_1022BB978;
    int v87 = v11;
    AnalyticsSendEventLazy();
  }
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v15 = *(void *)(a3 + 6424);
  *(CFAbsoluteTime *)(v15 + 320) = Current;
  sub_1006D3DD4((char *)a2, (uint64_t)buf);
  *(void *)__p = buf;
  int v16 = sub_100510D70((uint64_t **)(v15 + 8), (const void **)buf, (uint64_t)&unk_101D0B290, (_OWORD **)__p);
  ++*((_DWORD *)v16 + 14);
  if ((v105[9] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v17 = *(void *)(a3 + 6424);
  int v18 = (char *)sub_1006D40F4((_DWORD *)a2);
  sub_100134750(buf, v18);
  *(void *)__p = buf;
  int v19 = sub_100510D70((uint64_t **)(v17 + 32), (const void **)buf, (uint64_t)&unk_101D0B290, (_OWORD **)__p);
  ++*((_DWORD *)v19 + 14);
  if ((v105[9] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v20 = *(void *)(a3 + 6424);
  sub_100134750(buf, "total");
  *(void *)__p = buf;
  int v21 = sub_100510D70((uint64_t **)(v20 + 8), (const void **)buf, (uint64_t)&unk_101D0B290, (_OWORD **)__p);
  ++*((_DWORD *)v21 + 14);
  if ((v105[9] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v22 = *(void *)(a3 + 6424);
  sub_100134750(buf, "total");
  *(void *)__p = buf;
  int v23 = sub_100510D70((uint64_t **)(v22 + 32), (const void **)buf, (uint64_t)&unk_101D0B290, (_OWORD **)__p);
  ++*((_DWORD *)v23 + 14);
  if ((v105[9] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  ++*(unsigned char *)(a3 + 6440);
  if (v6[372])
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    double v24 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1006D3DD4((char *)a2, (uint64_t)__p);
      v25 = v96[9] >= 0 ? __p : *(unsigned char **)__p;
      int v26 = sub_1006D40F4((_DWORD *)a2);
      v27 = sub_1006D40F4((_DWORD *)(a1 + 5968));
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = v25;
      __int16 v104 = 2082;
      *(void *)v105 = v26;
      *(_WORD *)&v105[8] = 2082;
      v106 = v27;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "@WifiFlow, locreq, %{public}s, %{public}s, current, %{public}s", buf, 0x20u);
      if ((v96[9] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022FBF70);
      }
      sub_1006D3DD4((char *)a2, (uint64_t)&v75);
      if (v77.__r_.__value_.__s.__data_[7] >= 0) {
        v63 = &v75;
      }
      else {
        v63 = v75;
      }
      __int16 v64 = sub_1006D40F4((_DWORD *)a2);
      double v65 = sub_1006D40F4((_DWORD *)(a1 + 5968));
      *(_DWORD *)__p = 136446722;
      *(void *)&__p[4] = v63;
      __int16 v95 = 2082;
      *(void *)v96 = v64;
      *(_WORD *)&v96[8] = 2082;
      *(void *)&v96[10] = v65;
      v66 = (char *)_os_log_send_and_compose_impl();
      if (v77.__r_.__value_.__s.__data_[7] < 0) {
        operator delete(v75);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::LocationRequest &) const", "%s\n", v66);
      if (v66 != buf) {
        free(v66);
      }
    }
    *(void *)(a3 + 816) = *(void *)(a1 + 5968);
    *(unsigned char *)(a3 + 824) = *(unsigned char *)(a1 + 5976);
    std::string::operator=((std::string *)(a3 + 832), (const std::string *)(a1 + 5984));
    long long v28 = *(_OWORD *)(a1 + 6024);
    long long v29 = *(_OWORD *)(a1 + 6056);
    *(_OWORD *)(a3 + 888) = *(_OWORD *)(a1 + 6040);
    *(_OWORD *)(a3 + 904) = v29;
    *(_OWORD *)(a3 + 916) = *(_OWORD *)(a1 + 6068);
    *(_OWORD *)(a3 + 856) = *(_OWORD *)(a1 + 6008);
    *(_OWORD *)(a3 + 872) = v28;
    std::string::operator=((std::string *)(a3 + 936), (const std::string *)(a1 + 6088));
    double v30 = *(double *)(a1 + 6384);
    double v31 = *(double *)(a1 + 6120);
    *(void *)__p = *(void *)(a1 + 5968);
    __p[8] = *(unsigned char *)(a1 + 5976);
    if (*v6 < 0)
    {
      sub_1000DC48C(&v96[2], *(void **)(a1 + 5984), *(void *)(a1 + 5992));
    }
    else
    {
      *(_OWORD *)&v96[2] = *(_OWORD *)(a1 + 5984);
      uint64_t v97 = *(void *)(a1 + 6000);
    }
    long long v33 = *(_OWORD *)(a1 + 6008);
    long long v99 = *(_OWORD *)(a1 + 6024);
    long long v34 = *(_OWORD *)(a1 + 6056);
    long long v100 = *(_OWORD *)(a1 + 6040);
    *(_OWORD *)v101 = v34;
    *(_OWORD *)&v101[12] = *(_OWORD *)(a1 + 6068);
    long long v98 = v33;
    if (v6[104] < 0) {
      sub_1000DC48C(&v102, *(void **)(a1 + 6088), *(void *)(a1 + 6096));
    }
    else {
      std::string v102 = *(std::string *)(a1 + 6088);
    }
    v75 = *(void **)a2;
    char v76 = *(unsigned char *)(a2 + 8);
    if (*(char *)(a2 + 39) < 0) {
      sub_1000DC48C(&v77, *(void **)(a2 + 16), *(void *)(a2 + 24));
    }
    else {
      std::string v77 = *(std::string *)(a2 + 16);
    }
    long long v35 = *(_OWORD *)(a2 + 72);
    long long v79 = *(_OWORD *)(a2 + 56);
    long long v80 = v35;
    v81[0] = *(_OWORD *)(a2 + 88);
    *(_OWORD *)((char *)v81 + 12) = *(_OWORD *)(a2 + 100);
    long long v78 = *(_OWORD *)(a2 + 40);
    if (*(char *)(a2 + 143) < 0) {
      sub_1000DC48C(&v82, *(void **)(a2 + 120), *(void *)(a2 + 128));
    }
    else {
      std::string v82 = *(std::string *)(a2 + 120);
    }
    *(void *)&long long v80 = *(void *)(a3 + 888);
    v101[22] = v10;
    if (v6[413] && !sub_1006D30F0(&v75))
    {
      *(_DWORD *)buf = 2;
      sub_1006D40A4(&v75, buf);
    }
    if (v6[165])
    {
      *(_DWORD *)buf = 6;
      sub_1006D40A4(&v75, buf);
      buf[0] = 0;
      sub_1006D40B8((uint64_t)__p, buf);
    }
    double v36 = vabdd_f64(v30, v31);
    if (sub_100054BBC(__p) && v36 >= 6.0)
    {
      sub_1006D331C(a3 + 5968, 5, 2u, v7);
      sub_1006D3144((int *)__p);
      if (sub_1006D30F0(&v75))
      {
        *(void *)(a3 + 5048) = 0;
        *(void *)(a3 + 5040) = 0;
        *(_DWORD *)(a3 + 5056) = 0;
        *(unsigned char *)(a3 + 5096) = 0;
        *(void *)(a3 + 5072) = 0;
        *(void *)(a3 + 5088) = 0;
        *(void *)(a3 + 5080) = 0;
        *(_DWORD *)(a3 + 4944) = 0xFFFF;
        *(void *)(a3 + 4956) = 0;
        *(void *)(a3 + 4948) = 0;
        __asm { FMOV            V1.2D, #-1.0 }
        *(_OWORD *)(a3 + 4964) = xmmword_101D1C320;
        *(_OWORD *)(a3 + 4980) = _Q1;
        *(_OWORD *)(a3 + 4996) = _Q1;
        *(_OWORD *)(a3 + 5012) = _Q1;
        *(_DWORD *)(a3 + 5028) = 0;
        *(void *)(a3 + 5032) = 0xBFF0000000000000;
        *(void *)(a3 + 5060) = 0xBFF0000000000000;
        *(_DWORD *)(a3 + 5068) = 0x7FFFFFFF;
        *(void *)(a3 + 5100) = 0;
        *(void *)(a3 + 5112) = 0xBFF0000000000000;
        *(_DWORD *)(a3 + 5120) = 0;
        *(unsigned char *)(a3 + 5124) = 0;
        *(_WORD *)(a3 + 5126) = 0;
      }
    }
    if (sub_100054BBC(__p))
    {
      int v42 = sub_1006D40B0((unsigned int *)&v75);
      if (v42 <= (int)sub_1006D40B0((unsigned int *)__p))
      {
        if (!sub_1006D40C4((uint64_t)__p)
          || ((char v59 = sub_1006D40C4((uint64_t)&v75), v36 < 6.0) ? (v60 = 1) : (v60 = v59), (v60 & 1) != 0))
        {
          char v54 = 0;
LABEL_77:
          *(unsigned char *)(a3 + 5976) = __p[8];
          *(void *)(a3 + 5968) = *(void *)__p;
          std::string::operator=((std::string *)(a3 + 5984), (const std::string *)&v96[2]);
          *(_OWORD *)(a3 + 6068) = *(_OWORD *)&v101[12];
          long long v55 = v98;
          *(_OWORD *)(a3 + 6024) = v99;
          long long v56 = *(_OWORD *)v101;
          *(_OWORD *)(a3 + 6040) = v100;
          *(_OWORD *)(a3 + 6056) = v56;
          *(_OWORD *)(a3 + 6008) = v55;
          std::string::operator=((std::string *)(a3 + 6088), &v102);
          *(unsigned char *)(a3 + 811) = v54;
          *(unsigned char *)(a3 + 809) = !sub_1006D30F0(&v75);
          double v57 = *(double *)(a3 + 6384);
          __int16 v58 = *(std::__shared_weak_count **)(a3 + 3168);
          v74[0] = *(void **)(a3 + 3160);
          v74[1] = &v58->__vftable;
          if (v58) {
            atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_100E3AFB4(v74, v57);
          if (v58) {
            sub_1000DB0A0(v58);
          }
          if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v82.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v77.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v102.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v97) < 0) {
            operator delete(*(void **)&v96[2]);
          }
          return;
        }
      }
      *(_DWORD *)buf = sub_1006D40B0((unsigned int *)&v75);
      sub_1006D40A4(__p, buf);
      *(void *)buf = sub_1000E6F24((uint64_t)&v75);
      sub_1006D40CC((uint64_t)__p, (double *)buf);
      buf[0] = sub_1006D40C4((uint64_t)&v75);
      sub_1006D40B8((uint64_t)__p, buf);
      *(_DWORD *)buf = 0;
      sub_1006D40D8((uint64_t)__p, buf);
      sub_1006D331C((uint64_t)__p, 5, 1u, v7);
    }
    else
    {
      *(void *)__p = v75;
      __p[8] = v76;
      std::string::operator=((std::string *)&v96[2], &v77);
      long long v100 = v80;
      *(_OWORD *)v101 = v81[0];
      *(_OWORD *)&v101[12] = *(_OWORD *)((char *)v81 + 12);
      long long v98 = v78;
      long long v99 = v79;
      std::string::operator=(&v102, &v82);
    }
    sub_1006D331C((uint64_t)__p, 1, 0, v7);
    v43 = (int *)(a3 + 6444);
    *(void *)(a3 + 6444) = *(void *)(a3 + 6456);
    *(unsigned char *)(a3 + 6452) = *(unsigned char *)(a3 + 6464);
    v44 = (int *)(a3 + 6456);
    *(void *)(a3 + 6456) = sub_100AC3010((int *)(a3 + 6444));
    *(unsigned char *)(a3 + 6464) = v45;
    if (!*(unsigned char *)(a3 + 6422))
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022FBF70);
      }
      int v46 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "@WifiFlow, platform not support 5GHz, revert to default inter-locreq state", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022FBF70);
        }
        LOWORD(v88) = 0;
        v73 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::LocationRequest &) const", "%s\n", v73);
        if (v73 != buf) {
          free(v73);
        }
      }
      *(void *)v43 = sub_1000DBCA8();
      *(unsigned char *)(a3 + 6452) = v47;
      *(void *)v44 = sub_1000DBCA8();
      *(unsigned char *)(a3 + 6464) = v48;
    }
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    double v49 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      int v50 = sub_1006D40B0((unsigned int *)__p);
      double v51 = sub_1006D3E00(v50);
      v52 = sub_100AC2F94(*v43);
      v53 = sub_100AC2F94(*v44);
      *(_DWORD *)buf = 136381187;
      *(void *)&uint8_t buf[4] = v51;
      __int16 v104 = 2082;
      *(void *)v105 = v52;
      *(_WORD *)&v105[8] = 2082;
      v106 = v53;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "@WifiFlow, inter-locreq state per request type, %{private}s, current %{public}s, staging %{public}s", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022FBF70);
      }
      int v67 = sub_1006D40B0((unsigned int *)__p);
      v68 = sub_1006D3E00(v67);
      v69 = sub_100AC2F94(*v43);
      v70 = sub_100AC2F94(*v44);
      int v88 = 136381187;
      v89 = v68;
      __int16 v90 = 2082;
      v91 = v69;
      __int16 v92 = 2082;
      v93 = v70;
      v71 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::LocationRequest &) const", "%s\n", v71);
      if (v71 != buf) {
        free(v71);
      }
      char v54 = 1;
    }
    else
    {
      char v54 = 1;
    }
    goto LABEL_77;
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022FBF70);
  }
  int v32 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "WifiFlow, locreq, skip, WifiOff", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    *(_WORD *)__p = 0;
    v72 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::LocationRequest &) const", "%s\n", v72);
    if (v72 != buf) {
      free(v72);
    }
  }
  *(unsigned char *)(a3 + 809) = 0;
}

void sub_100E3FB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  sub_10050EC2C((uint64_t)&__p);
  sub_10050EC2C((uint64_t)&a41);
  sub_10050BAA0(v41);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100E3FCA8(uint64_t a1)
{
  v2[1] = @"delta";
  v3[0] = @"locreq";
  v2[0] = @"trigger";
  v3[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:v3 forKeys:v2 count:2];
}

void sub_100E3FD40(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  v255 = sub_1000DEB28(a2, a1);
  uint64_t v2 = (int *)*((void *)v255 + 803);
  int v3 = *v2;
  v264 = (uint64_t **)(v2 + 20);
  if (*v2 < 25) {
    ++v3;
  }
  *uint64_t v2 = v3;
  v258 = (uint64_t **)(v2 + 44);
  sub_100134750(buf, "total");
  uint64_t v4 = (uint64_t **)(v2 + 2);
  v334[0] = buf;
  int v5 = *((_DWORD *)sub_100510D70((uint64_t **)v2 + 1, (const void **)buf, (uint64_t)&unk_101D0B290, (_OWORD **)v334) + 14);
  sub_100134750(v334, "awareness");
  v310[0] = v334;
  int v6 = *((_DWORD *)sub_100510D70((uint64_t **)v2 + 1, (const void **)v334, (uint64_t)&unk_101D0B290, (_OWORD **)v310) + 14);
  sub_100134750(v310, "geofence");
  *(void *)v325 = v310;
  int v7 = *((_DWORD *)sub_100510D70((uint64_t **)v2 + 1, (const void **)v310, (uint64_t)&unk_101D0B290, (_OWORD **)v325) + 14);
  sub_100134750(v325, "slc");
  *(void *)__dst = v325;
  int v8 = *((_DWORD *)sub_100510D70((uint64_t **)v2 + 1, (const void **)v325, (uint64_t)&unk_101D0B290, (_OWORD **)__dst) + 14);
  sub_100134750(__dst, "speedestimator");
  v256 = v2;
  v321 = __dst;
  int v9 = *((_DWORD *)sub_100510D70((uint64_t **)v2 + 1, (const void **)__dst, (uint64_t)&unk_101D0B290, (_OWORD **)&v321)
       + 14);
  sub_100134750(&v321, "cpi");
  v356 = &v321;
  int v10 = *((_DWORD *)sub_100510D70(v4, (const void **)&v321, (uint64_t)&unk_101D0B290, (_OWORD **)&v356) + 14);
  sub_100134750(&v356, "registrant");
  *(void *)v354 = &v356;
  int v11 = *((_DWORD *)sub_100510D70(v4, (const void **)&v356, (uint64_t)&unk_101D0B290, (_OWORD **)v354) + 14);
  sub_100134750(v354, "scanready");
  int loga = v7;
  *(void *)v350 = v354;
  int v12 = v6;
  int v13 = *((_DWORD *)sub_100510D70(v4, (const void **)v354, (uint64_t)&unk_101D0B290, (_OWORD **)v350) + 14);
  sub_100134750(v350, "emergency");
  int v14 = v5;
  v319[0] = v350;
  int v15 = *((_DWORD *)sub_100510D70(v4, (const void **)v350, (uint64_t)&unk_101D0B290, (_OWORD **)v319) + 14);
  sub_100134750(v319, "timer");
  __p[0] = v319;
  int v16 = *((_DWORD *)sub_100510D70(v4, (const void **)v319, (uint64_t)&unk_101D0B290, (_OWORD **)__p) + 14);
  sub_100134750(__p, "other");
  v315[0] = __p;
  *((_DWORD *)sub_100510D70(v4, (const void **)__p, (uint64_t)&unk_101D0B290, (_OWORD **)v315) + 14) = v14 - (v15 + v16) - (v12 + loga + v8 + v9 + v10 + v11 + v13);
  if (v318 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v17 = (uint64_t **)v256;
  int v18 = v4;
  if (v320 < 0) {
    operator delete(v319[0]);
  }
  if (v353 < 0) {
    operator delete(*(void **)v350);
  }
  if (v355 < 0) {
    operator delete(*(void **)v354);
  }
  if (SHIBYTE(v358) < 0) {
    operator delete(v356);
  }
  if (SHIBYTE(v323) < 0) {
    operator delete(v321);
  }
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  if ((v325[23] & 0x80000000) != 0) {
    operator delete(*(void **)v325);
  }
  if (SHIBYTE(v311[0]) < 0) {
    operator delete(v310[0]);
  }
  if (SBYTE7(v335) < 0) {
    operator delete(v334[0]);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022FBF70);
  }
  uint64_t v19 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    sub_100134750(v334, "total");
    v310[0] = v334;
    int v20 = *((_DWORD *)sub_100510D70(v4, (const void **)v334, (uint64_t)&unk_101D0B290, (_OWORD **)v310) + 14);
    sub_100134750(v310, "awareness");
    *(void *)v325 = v310;
    int v21 = *((_DWORD *)sub_100510D70(v4, (const void **)v310, (uint64_t)&unk_101D0B290, (_OWORD **)v325) + 14);
    sub_100134750(v325, "geofence");
    *(void *)__dst = v325;
    int v22 = *((_DWORD *)sub_100510D70(v4, (const void **)v325, (uint64_t)&unk_101D0B290, (_OWORD **)__dst) + 14);
    sub_100134750(__dst, "slc");
    v321 = __dst;
    int v23 = *((_DWORD *)sub_100510D70(v4, (const void **)__dst, (uint64_t)&unk_101D0B290, (_OWORD **)&v321) + 14);
    sub_100134750(&v321, "speedestimator");
    v356 = &v321;
    int v24 = *((_DWORD *)sub_100510D70(v4, (const void **)&v321, (uint64_t)&unk_101D0B290, (_OWORD **)&v356) + 14);
    sub_100134750(&v356, "cpi");
    *(void *)v354 = &v356;
    int v25 = *((_DWORD *)sub_100510D70(v4, (const void **)&v356, (uint64_t)&unk_101D0B290, (_OWORD **)v354) + 14);
    sub_100134750(v354, "registrant");
    *(void *)v350 = v354;
    int v266 = *((_DWORD *)sub_100510D70(v18, (const void **)v354, (uint64_t)&unk_101D0B290, (_OWORD **)v350) + 14);
    sub_100134750(v350, "scanready");
    v319[0] = v350;
    int v26 = *((_DWORD *)sub_100510D70(v18, (const void **)v350, (uint64_t)&unk_101D0B290, (_OWORD **)v319) + 14);
    sub_100134750(v319, "emergency");
    logb = v19;
    __p[0] = v319;
    v27 = v18;
    int v28 = *((_DWORD *)sub_100510D70(v18, (const void **)v319, (uint64_t)&unk_101D0B290, (_OWORD **)__p) + 14);
    sub_100134750(__p, "timer");
    v315[0] = __p;
    int v29 = *((_DWORD *)sub_100510D70(v18, (const void **)__p, (uint64_t)&unk_101D0B290, (_OWORD **)v315) + 14);
    sub_100134750(v315, "other");
    v313[0] = v315;
    int v30 = *((_DWORD *)sub_100510D70(v27, (const void **)v315, (uint64_t)&unk_101D0B290, (_OWORD **)v313) + 14);
    *(_DWORD *)buf = 67242752;
    *(_DWORD *)&uint8_t buf[4] = v20;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v21;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = v22;
    *(_WORD *)&buf[20] = 1026;
    *(_DWORD *)&buf[22] = v23;
    *(_WORD *)&buf[26] = 1026;
    *(_DWORD *)&buf[28] = v24;
    *(_WORD *)&buf[32] = 1026;
    *(_DWORD *)&buf[34] = v25;
    *(_WORD *)&buf[38] = 1026;
    int v360 = v266;
    __int16 v361 = 1026;
    int v362 = v26;
    __int16 v363 = 1026;
    int v364 = v28;
    __int16 v365 = 1026;
    int v366 = v29;
    __int16 v367 = 1026;
    int v368 = v30;
    _os_log_impl((void *)&_mh_execute_header, logb, OS_LOG_TYPE_DEBUG, "WlpMetric, heartbeat, requesters, %{public}d, aware, %{public}d, gf, %{public}d, slc, %{public}d, speedest, %{public}d, cpi, %{public}d, registrant, %{public}d, scanready, %{public}d, emer, %{public}d, timer, %{public}d, other, %{public}d", buf, 0x44u);
    uint64_t v17 = (uint64_t **)v256;
    if (v316 < 0) {
      operator delete(v315[0]);
    }
    int v18 = v27;
    if (v318 < 0) {
      operator delete(__p[0]);
    }
    if (v320 < 0) {
      operator delete(v319[0]);
    }
    if (v353 < 0) {
      operator delete(*(void **)v350);
    }
    if (v355 < 0) {
      operator delete(*(void **)v354);
    }
    if (SHIBYTE(v358) < 0) {
      operator delete(v356);
    }
    if (SHIBYTE(v323) < 0) {
      operator delete(v321);
    }
    if ((__dst[23] & 0x80000000) != 0) {
      operator delete(*(void **)__dst);
    }
    if ((v325[23] & 0x80000000) != 0) {
      operator delete(*(void **)v325);
    }
    if (SHIBYTE(v311[0]) < 0) {
      operator delete(v310[0]);
    }
    if (SBYTE7(v335) < 0) {
      operator delete(v334[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    sub_100134750(v310, "total");
    *(void *)v325 = v310;
    int v202 = *((_DWORD *)sub_100510D70(v18, (const void **)v310, (uint64_t)&unk_101D0B290, (_OWORD **)v325) + 14);
    sub_100134750(v325, "awareness");
    *(void *)__dst = v325;
    int v203 = *((_DWORD *)sub_100510D70(v18, (const void **)v325, (uint64_t)&unk_101D0B290, (_OWORD **)__dst) + 14);
    sub_100134750(__dst, "geofence");
    v321 = __dst;
    int v204 = *((_DWORD *)sub_100510D70(v18, (const void **)__dst, (uint64_t)&unk_101D0B290, (_OWORD **)&v321) + 14);
    sub_100134750(&v321, "slc");
    v356 = &v321;
    int v205 = *((_DWORD *)sub_100510D70(v18, (const void **)&v321, (uint64_t)&unk_101D0B290, (_OWORD **)&v356) + 14);
    sub_100134750(&v356, "speedestimator");
    *(void *)v354 = &v356;
    int v206 = *((_DWORD *)sub_100510D70(v18, (const void **)&v356, (uint64_t)&unk_101D0B290, (_OWORD **)v354) + 14);
    sub_100134750(v354, "cpi");
    *(void *)v350 = v354;
    int v207 = *((_DWORD *)sub_100510D70(v18, (const void **)v354, (uint64_t)&unk_101D0B290, (_OWORD **)v350) + 14);
    sub_100134750(v350, "registrant");
    v319[0] = v350;
    int v208 = *((_DWORD *)sub_100510D70(v18, (const void **)v350, (uint64_t)&unk_101D0B290, (_OWORD **)v319) + 14);
    sub_100134750(v319, "scanready");
    int v268 = v208;
    __p[0] = v319;
    int logc = *((_DWORD *)sub_100510D70(v18, (const void **)v319, (uint64_t)&unk_101D0B290, (_OWORD **)__p) + 14);
    sub_100134750(__p, "emergency");
    v315[0] = __p;
    v209 = v18;
    int v210 = *((_DWORD *)sub_100510D70(v18, (const void **)__p, (uint64_t)&unk_101D0B290, (_OWORD **)v315) + 14);
    sub_100134750(v315, "timer");
    v313[0] = v315;
    int v211 = *((_DWORD *)sub_100510D70(v18, (const void **)v315, (uint64_t)&unk_101D0B290, (_OWORD **)v313) + 14);
    sub_100134750(v313, "other");
    v324 = v313;
    int v212 = *((_DWORD *)sub_100510D70(v209, (const void **)v313, (uint64_t)&unk_101D0B290, (_OWORD **)&v324) + 14);
    LODWORD(v334[0]) = 67242752;
    HIDWORD(v334[0]) = v202;
    LOWORD(v334[1]) = 1026;
    *(_DWORD *)((char *)&v334[1] + 2) = v203;
    HIWORD(v334[1]) = 1026;
    LODWORD(v335) = v204;
    WORD2(v335) = 1026;
    *(_DWORD *)((char *)&v335 + 6) = v205;
    WORD5(v335) = 1026;
    HIDWORD(v335) = v206;
    __int16 v336 = 1026;
    int v337 = v207;
    __int16 v338 = 1026;
    int v339 = v268;
    __int16 v340 = 1026;
    int v341 = logc;
    __int16 v342 = 1026;
    int v343 = v210;
    __int16 v344 = 1026;
    int v345 = v211;
    __int16 v346 = 1026;
    int v347 = v212;
    v213 = (char *)_os_log_send_and_compose_impl();
    if (v314 < 0) {
      operator delete(v313[0]);
    }
    uint64_t v17 = (uint64_t **)v256;
    if (v316 < 0) {
      operator delete(v315[0]);
    }
    if (v318 < 0) {
      operator delete(__p[0]);
    }
    if (v320 < 0) {
      operator delete(v319[0]);
    }
    if (v353 < 0) {
      operator delete(*(void **)v350);
    }
    if (v355 < 0) {
      operator delete(*(void **)v354);
    }
    if (SHIBYTE(v358) < 0) {
      operator delete(v356);
    }
    if (SHIBYTE(v323) < 0) {
      operator delete(v321);
    }
    if ((__dst[23] & 0x80000000) != 0) {
      operator delete(*(void **)__dst);
    }
    if ((v325[23] & 0x80000000) != 0) {
      operator delete(*(void **)v325);
    }
    if (SHIBYTE(v311[0]) < 0) {
      operator delete(v310[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::MetricHeartbeat &) const", "%s\n", v213);
    if (v213 != buf) {
      free(v213);
    }
  }
  sub_100134750(buf, "total");
  double v31 = v17 + 4;
  v334[0] = buf;
  int v32 = *((_DWORD *)sub_100510D70(v17 + 4, (const void **)buf, (uint64_t)&unk_101D0B290, (_OWORD **)v334) + 14);
  sub_100134750(v334, "cpi");
  v310[0] = v334;
  unint64_t v33 = *((unsigned int *)sub_100510D70(v17 + 4, (const void **)v334, (uint64_t)&unk_101D0B290, (_OWORD **)v310) + 14);
  sub_100134750(v310, "lowpower");
  *(void *)v325 = v310;
  int v34 = *((_DWORD *)sub_100510D70(v31, (const void **)v310, (uint64_t)&unk_101D0B290, (_OWORD **)v325) + 14);
  sub_100134750(v325, "clientupdate");
  *(void *)__dst = v325;
  int v35 = *((_DWORD *)sub_100510D70(v31, (const void **)v325, (uint64_t)&unk_101D0B290, (_OWORD **)__dst) + 14);
  sub_100134750(__dst, "emergency");
  v321 = __dst;
  int v36 = *((_DWORD *)sub_100510D70(v31, (const void **)__dst, (uint64_t)&unk_101D0B290, (_OWORD **)&v321) + 14);
  sub_100134750(&v321, "other");
  v356 = &v321;
  *((_DWORD *)sub_100510D70(v31, (const void **)&v321, (uint64_t)&unk_101D0B290, (_OWORD **)&v356) + 14) = v32 - (v33 + v34 + v35 + v36);
  if (SHIBYTE(v323) < 0) {
    operator delete(v321);
  }
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  if ((v325[23] & 0x80000000) != 0) {
    operator delete(*(void **)v325);
  }
  if (SHIBYTE(v311[0]) < 0) {
    operator delete(v310[0]);
  }
  if (SBYTE7(v335) < 0) {
    operator delete(v334[0]);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022FBF70);
  }
  int v37 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    sub_100134750(v334, "total");
    v310[0] = v334;
    unint64_t v33 = *((unsigned int *)sub_100510D70(v31, (const void **)v334, (uint64_t)&unk_101D0B290, (_OWORD **)v310) + 14);
    sub_100134750(v310, "cpi");
    *(void *)v325 = v310;
    int v38 = *((_DWORD *)sub_100510D70(v31, (const void **)v310, (uint64_t)&unk_101D0B290, (_OWORD **)v325) + 14);
    sub_100134750(v325, "lowpower");
    *(void *)__dst = v325;
    int v39 = *((_DWORD *)sub_100510D70(v31, (const void **)v325, (uint64_t)&unk_101D0B290, (_OWORD **)__dst) + 14);
    sub_100134750(__dst, "clientupdate");
    v321 = __dst;
    int v40 = *((_DWORD *)sub_100510D70(v31, (const void **)__dst, (uint64_t)&unk_101D0B290, (_OWORD **)&v321) + 14);
    sub_100134750(&v321, "emergency");
    v356 = &v321;
    int v41 = *((_DWORD *)sub_100510D70(v31, (const void **)&v321, (uint64_t)&unk_101D0B290, (_OWORD **)&v356) + 14);
    sub_100134750(&v356, "other");
    *(void *)v354 = &v356;
    int v42 = *((_DWORD *)sub_100510D70(v31, (const void **)&v356, (uint64_t)&unk_101D0B290, (_OWORD **)v354) + 14);
    *(_DWORD *)buf = 67241472;
    *(_DWORD *)&uint8_t buf[4] = v33;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v38;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = v39;
    *(_WORD *)&buf[20] = 1026;
    *(_DWORD *)&buf[22] = v40;
    *(_WORD *)&buf[26] = 1026;
    *(_DWORD *)&buf[28] = v41;
    *(_WORD *)&buf[32] = 1026;
    *(_DWORD *)&buf[34] = v42;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "WlpMetric, heartbeat, locreqtypes, %{public}d, cpi, %{public}d, lowpower, %{public}d, clientupdate, %{public}d, emergency, %{public}d, other, %{public}d", buf, 0x26u);
    if (SHIBYTE(v358) < 0) {
      operator delete(v356);
    }
    if (SHIBYTE(v323) < 0) {
      operator delete(v321);
    }
    if ((__dst[23] & 0x80000000) != 0) {
      operator delete(*(void **)__dst);
    }
    if ((v325[23] & 0x80000000) != 0) {
      operator delete(*(void **)v325);
    }
    if (SHIBYTE(v311[0]) < 0) {
      operator delete(v310[0]);
    }
    if (SBYTE7(v335) < 0) {
      operator delete(v334[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    sub_100134750(v310, "total");
    *(void *)v325 = v310;
    unint64_t v33 = *((unsigned int *)sub_100510D70(v31, (const void **)v310, (uint64_t)&unk_101D0B290, (_OWORD **)v325) + 14);
    sub_100134750(v325, "cpi");
    *(void *)__dst = v325;
    int v214 = *((_DWORD *)sub_100510D70(v31, (const void **)v325, (uint64_t)&unk_101D0B290, (_OWORD **)__dst) + 14);
    sub_100134750(__dst, "lowpower");
    v321 = __dst;
    int v215 = *((_DWORD *)sub_100510D70(v31, (const void **)__dst, (uint64_t)&unk_101D0B290, (_OWORD **)&v321) + 14);
    sub_100134750(&v321, "clientupdate");
    v356 = &v321;
    int v216 = *((_DWORD *)sub_100510D70(v31, (const void **)&v321, (uint64_t)&unk_101D0B290, (_OWORD **)&v356) + 14);
    sub_100134750(&v356, "emergency");
    *(void *)v354 = &v356;
    int v217 = *((_DWORD *)sub_100510D70(v31, (const void **)&v356, (uint64_t)&unk_101D0B290, (_OWORD **)v354) + 14);
    sub_100134750(v354, "other");
    *(void *)v350 = v354;
    int v218 = *((_DWORD *)sub_100510D70(v31, (const void **)v354, (uint64_t)&unk_101D0B290, (_OWORD **)v350) + 14);
    LODWORD(v334[0]) = 67241472;
    HIDWORD(v334[0]) = v33;
    LOWORD(v334[1]) = 1026;
    *(_DWORD *)((char *)&v334[1] + 2) = v214;
    HIWORD(v334[1]) = 1026;
    LODWORD(v335) = v215;
    WORD2(v335) = 1026;
    *(_DWORD *)((char *)&v335 + 6) = v216;
    WORD5(v335) = 1026;
    HIDWORD(v335) = v217;
    __int16 v336 = 1026;
    int v337 = v218;
    v219 = (char *)_os_log_send_and_compose_impl();
    if (v355 < 0) {
      operator delete(*(void **)v354);
    }
    if (SHIBYTE(v358) < 0) {
      operator delete(v356);
    }
    if (SHIBYTE(v323) < 0) {
      operator delete(v321);
    }
    if ((__dst[23] & 0x80000000) != 0) {
      operator delete(*(void **)__dst);
    }
    if ((v325[23] & 0x80000000) != 0) {
      operator delete(*(void **)v325);
    }
    if (SHIBYTE(v311[0]) < 0) {
      operator delete(v310[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::MetricHeartbeat &) const", "%s\n", v219);
    if (v219 != buf) {
      free(v219);
    }
  }
  v43 = operator new(6uLL);
  LODWORD(v43->isa) = 151521030;
  os_log_t log = v43;
  WORD2(v43->isa) = 3082;
  uint64_t v44 = 0;
  v267 = operator new(2uLL);
  _WORD *v267 = 256;
  v322 = 0;
  v321 = 0;
  unint64_t v323 = 0;
  do
  {
    char v45 = *((unsigned char *)&log->isa + v44);
    sub_10050CAF0(v45, 0);
    int v46 = v322;
    if ((unint64_t)v322 >= v323)
    {
      unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * (((char *)v322 - (unsigned char *)v321) >> 3);
      unint64_t v49 = v48 + 1;
      if (v48 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      if (0x5555555555555556 * ((uint64_t)(v323 - (void)v321) >> 3) > v49) {
        unint64_t v49 = 0x5555555555555556 * ((uint64_t)(v323 - (void)v321) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v323 - (void)v321) >> 3) >= 0x555555555555555) {
        unint64_t v50 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v50 = v49;
      }
      *(void *)&buf[32] = &v323;
      if (v50) {
        double v51 = (char *)sub_1000DA5D8((uint64_t)&v323, v50);
      }
      else {
        double v51 = 0;
      }
      v52 = &v51[24 * v48];
      *(void *)buf = v51;
      *(void *)&buf[8] = v52;
      *(void *)&buf[24] = &v51[24 * v50];
      long long v53 = *(_OWORD *)v334;
      *((void *)v52 + 2) = v335;
      *(_OWORD *)v52 = v53;
      *(void *)&long long v335 = 0;
      v334[1] = 0;
      v334[0] = 0;
      *(void *)&buf[16] = v52 + 24;
      sub_1001D7FEC((uint64_t *)&v321, buf);
      char v54 = v322;
      sub_1001D8184((uint64_t)buf);
      v322 = v54;
      if (SBYTE7(v335) < 0) {
        operator delete(v334[0]);
      }
    }
    else
    {
      long long v47 = *(_OWORD *)v334;
      v322[2] = v335;
      *int v46 = v47;
      v322 = (void *)v46 + 3;
    }
    if (v45 == 12)
    {
      for (uint64_t i = 0; i != 2; ++i)
      {
        unint64_t v33 = v33 & 0xFFFFFFFFFFFF0000 | *((unsigned __int8 *)v267 + i) | 0x100;
        sub_10050CAF0(0xCu, v33);
        long long v56 = v322;
        if ((unint64_t)v322 >= v323)
        {
          unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * (((char *)v322 - (unsigned char *)v321) >> 3);
          unint64_t v59 = v58 + 1;
          if (v58 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_1001D7FD4();
          }
          if (0x5555555555555556 * ((uint64_t)(v323 - (void)v321) >> 3) > v59) {
            unint64_t v59 = 0x5555555555555556 * ((uint64_t)(v323 - (void)v321) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v323 - (void)v321) >> 3) >= 0x555555555555555) {
            unint64_t v60 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v60 = v59;
          }
          *(void *)&buf[32] = &v323;
          if (v60) {
            v61 = (char *)sub_1000DA5D8((uint64_t)&v323, v60);
          }
          else {
            v61 = 0;
          }
          v62 = &v61[24 * v58];
          *(void *)buf = v61;
          *(void *)&buf[8] = v62;
          *(void *)&buf[24] = &v61[24 * v60];
          long long v63 = *(_OWORD *)v334;
          *((void *)v62 + 2) = v335;
          *(_OWORD *)v62 = v63;
          *(void *)&long long v335 = 0;
          v334[1] = 0;
          v334[0] = 0;
          *(void *)&buf[16] = v62 + 24;
          sub_1001D7FEC((uint64_t *)&v321, buf);
          __int16 v64 = v322;
          sub_1001D8184((uint64_t)buf);
          v322 = v64;
          if (SBYTE7(v335) < 0) {
            operator delete(v334[0]);
          }
        }
        else
        {
          long long v57 = *(_OWORD *)v334;
          v322[2] = v335;
          *long long v56 = v57;
          v322 = (void *)v56 + 3;
        }
      }
    }
    ++v44;
  }
  while (v44 != 6);
  sub_10010F274((uint64_t)v334);
  sub_10010F274((uint64_t)v310);
  double v65 = (char *)v321;
  v66 = (char *)v322;
  if (v321 == v322)
  {
    int v67 = 0;
  }
  else
  {
    int v67 = 0;
    do
    {
      if (v65[23] < 0)
      {
        sub_1000DC48C(buf, *(void **)v65, *((void *)v65 + 1));
      }
      else
      {
        long long v68 = *(_OWORD *)v65;
        *(void *)&buf[16] = *((void *)v65 + 2);
        *(_OWORD *)buf = v68;
      }
      v69 = sub_100132EFC(&v335, (uint64_t)", ", 2);
      if (buf[23] >= 0) {
        v70 = buf;
      }
      else {
        v70 = *(unsigned char **)buf;
      }
      if (buf[23] >= 0) {
        uint64_t v71 = buf[23];
      }
      else {
        uint64_t v71 = *(void *)&buf[8];
      }
      v72 = sub_100132EFC(v69, (uint64_t)v70, v71);
      sub_100132EFC(v72, (uint64_t)", ", 2);
      *(void *)v325 = buf;
      sub_100510C30(v264, (const void **)buf, (uint64_t)&unk_101D0B290, (long long **)v325);
      std::ostream::operator<<();
      *(void *)v325 = buf;
      int v73 = *((_DWORD *)sub_100510C30(v264, (const void **)buf, (uint64_t)&unk_101D0B290, (long long **)v325) + 14);
      v74 = sub_100132EFC(v311, (uint64_t)", ", 2);
      if (buf[23] >= 0) {
        v75 = buf;
      }
      else {
        v75 = *(unsigned char **)buf;
      }
      if (buf[23] >= 0) {
        uint64_t v76 = buf[23];
      }
      else {
        uint64_t v76 = *(void *)&buf[8];
      }
      std::string v77 = sub_100132EFC(v74, (uint64_t)v75, v76);
      sub_100132EFC(v77, (uint64_t)", ", 2);
      *(void *)v325 = buf;
      sub_100510C30(v258, (const void **)buf, (uint64_t)&unk_101D0B290, (long long **)v325);
      std::ostream::operator<<();
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      v67 += v73;
      v65 += 24;
    }
    while (v65 != v66);
  }
  sub_100134750(buf, "total");
  *(void *)v325 = buf;
  int v78 = *((_DWORD *)sub_100510D70(v264, (const void **)buf, (uint64_t)&unk_101D0B290, (_OWORD **)v325) + 14);
  sub_100134750(v325, "other");
  *(void *)__dst = v325;
  *((_DWORD *)sub_100510D70(v264, (const void **)v325, (uint64_t)&unk_101D0B290, (_OWORD **)__dst) + 14) = v78 - v67;
  if ((v325[23] & 0x80000000) != 0) {
    operator delete(*(void **)v325);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022FBF70);
  }
  long long v79 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    sub_100134750(v325, "total");
    *(void *)__dst = v325;
    int v80 = *((_DWORD *)sub_100510D70(v264, (const void **)v325, (uint64_t)&unk_101D0B290, (_OWORD **)__dst) + 14);
    v81 = __dst;
    std::stringbuf::str();
    if (__dst[23] < 0) {
      v81 = *(unsigned char **)__dst;
    }
    sub_100134750(&v356, "other");
    *(void *)v354 = &v356;
    int v82 = *((_DWORD *)sub_100510D70(v264, (const void **)&v356, (uint64_t)&unk_101D0B290, (_OWORD **)v354) + 14);
    *(_DWORD *)buf = 67240706;
    *(_DWORD *)&uint8_t buf[4] = v80;
    *(_WORD *)&buf[8] = 2082;
    *(void *)&buf[10] = v81;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v82;
    _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "WlpMetric, heartbeat, scanreqtypes, %{public}d%{public}s, other, %{public}d", buf, 0x18u);
    if (SHIBYTE(v358) < 0) {
      operator delete(v356);
    }
    if ((__dst[23] & 0x80000000) != 0) {
      operator delete(*(void **)__dst);
    }
    if ((v325[23] & 0x80000000) != 0) {
      operator delete(*(void **)v325);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    sub_100134750(__dst, "total");
    v356 = __dst;
    int v220 = *((_DWORD *)sub_100510D70(v264, (const void **)__dst, (uint64_t)&unk_101D0B290, (_OWORD **)&v356) + 14);
    v221 = &v356;
    std::stringbuf::str();
    if (v358 < 0) {
      v221 = v356;
    }
    sub_100134750(v354, "other");
    *(void *)v350 = v354;
    int v222 = *((_DWORD *)sub_100510D70(v264, (const void **)v354, (uint64_t)&unk_101D0B290, (_OWORD **)v350) + 14);
    *(_DWORD *)v325 = 67240706;
    *(_DWORD *)&v325[4] = v220;
    *(_WORD *)&v325[8] = 2082;
    *(void *)&v325[10] = v221;
    *(_WORD *)&v325[18] = 1026;
    *(_DWORD *)&v325[20] = v222;
    v223 = (char *)_os_log_send_and_compose_impl();
    if (v355 < 0) {
      operator delete(*(void **)v354);
    }
    if (SHIBYTE(v358) < 0) {
      operator delete(v356);
    }
    if ((__dst[23] & 0x80000000) != 0) {
      operator delete(*(void **)__dst);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::MetricHeartbeat &) const", "%s\n", v223);
    if (v223 != buf) {
      free(v223);
    }
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022FBF70);
  }
  v83 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    std::stringbuf::str();
    uint64_t v84 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
    *(_DWORD *)v325 = 136446210;
    *(void *)&v325[4] = v84;
    _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEBUG, "WlpMetric, heartbeat, empty scans per scanreqtypes %{public}s", v325, 0xCu);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    std::stringbuf::str();
    if (v325[23] >= 0) {
      v224 = v325;
    }
    else {
      v224 = *(unsigned char **)v325;
    }
    *(_DWORD *)__dst = 136446210;
    *(void *)&__dst[4] = v224;
    v225 = (char *)_os_log_send_and_compose_impl();
    if ((v325[23] & 0x80000000) != 0) {
      operator delete(*(void **)v325);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::MetricHeartbeat &) const", "%s\n", v225);
    if (v225 != buf) {
      free(v225);
    }
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022FBF70);
  }
  v85 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    int v86 = *v256;
    int v87 = v256[50];
    int v88 = v256[51];
    int v90 = v256[52];
    int v89 = v256[53];
    *(_DWORD *)buf = 67241216;
    *(_DWORD *)&uint8_t buf[4] = v86;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v87;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = v88;
    *(_WORD *)&buf[20] = 1026;
    *(_DWORD *)&buf[22] = v89;
    *(_WORD *)&buf[26] = 1026;
    *(_DWORD *)&buf[28] = v90;
    _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEBUG, "WlpMetric, heartbeat, misc, %{public}d, alsAps, %{public}d, fixes, %{public}d, scanErrors, %{public}d, scanBusys, %{public}d", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    int v226 = *v256;
    int v227 = v256[50];
    int v228 = v256[51];
    int v230 = v256[52];
    int v229 = v256[53];
    *(_DWORD *)v325 = 67241216;
    *(_DWORD *)&v325[4] = v226;
    *(_WORD *)&v325[8] = 1026;
    *(_DWORD *)&v325[10] = v227;
    *(_WORD *)&v325[14] = 1026;
    *(_DWORD *)&v325[16] = v228;
    *(_WORD *)&v325[20] = 1026;
    *(_DWORD *)&v325[22] = v229;
    *(_WORD *)&v325[26] = 1026;
    *(_DWORD *)&v325[28] = v230;
    v231 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::MetricHeartbeat &) const", "%s\n", v231);
    if (v231 != buf) {
      free(v231);
    }
  }
  v91 = (int *)*((void *)v256 + 1);
  if (v91 != v256 + 4)
  {
    do
    {
      if (*((char *)v91 + 55) < 0)
      {
        sub_1000DC48C(buf, *((void **)v91 + 4), *((void *)v91 + 5));
      }
      else
      {
        *(_OWORD *)buf = *((_OWORD *)v91 + 2);
        *(void *)&buf[16] = *((void *)v91 + 6);
      }
      int v92 = v91[14];
      *(_DWORD *)&buf[24] = v92;
      if (v92)
      {
        v303 = _NSConcreteStackBlock;
        uint64_t v304 = 3321888768;
        v305 = sub_100E443F0;
        v306 = &unk_1022E8980;
        if ((buf[23] & 0x80000000) != 0)
        {
          sub_1000DC48C(&v307, *(void **)buf, *(unint64_t *)&buf[8]);
          int v92 = *(_DWORD *)&buf[24];
        }
        else
        {
          long long v307 = *(_OWORD *)buf;
          uint64_t v308 = *(void *)&buf[16];
        }
        int v309 = v92;
        AnalyticsSendEventLazy();
        if (SHIBYTE(v308) < 0) {
          operator delete((void *)v307);
        }
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      v93 = (int *)*((void *)v91 + 1);
      if (v93)
      {
        do
        {
          v94 = v93;
          v93 = *(int **)v93;
        }
        while (v93);
      }
      else
      {
        do
        {
          v94 = (int *)*((void *)v91 + 2);
          BOOL v95 = *(void *)v94 == (void)v91;
          v91 = v94;
        }
        while (!v95);
      }
      v91 = v94;
    }
    while (v94 != v256 + 4);
  }
  v96 = (int *)*((void *)v256 + 4);
  if (v96 != v256 + 10)
  {
    do
    {
      if (*((char *)v96 + 55) < 0)
      {
        sub_1000DC48C(buf, *((void **)v96 + 4), *((void *)v96 + 5));
      }
      else
      {
        *(_OWORD *)buf = *((_OWORD *)v96 + 2);
        *(void *)&buf[16] = *((void *)v96 + 6);
      }
      int v97 = v96[14];
      *(_DWORD *)&buf[24] = v97;
      if (v97)
      {
        v296 = _NSConcreteStackBlock;
        uint64_t v297 = 3321888768;
        v298 = sub_100E444A4;
        v299 = &unk_1022E8980;
        if ((buf[23] & 0x80000000) != 0)
        {
          sub_1000DC48C(&v300, *(void **)buf, *(unint64_t *)&buf[8]);
          int v97 = *(_DWORD *)&buf[24];
        }
        else
        {
          long long v300 = *(_OWORD *)buf;
          uint64_t v301 = *(void *)&buf[16];
        }
        int v302 = v97;
        AnalyticsSendEventLazy();
        if (SHIBYTE(v301) < 0) {
          operator delete((void *)v300);
        }
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      long long v98 = (int *)*((void *)v96 + 1);
      if (v98)
      {
        do
        {
          long long v99 = v98;
          long long v98 = *(int **)v98;
        }
        while (v98);
      }
      else
      {
        do
        {
          long long v99 = (int *)*((void *)v96 + 2);
          BOOL v95 = *(void *)v99 == (void)v96;
          v96 = v99;
        }
        while (!v95);
      }
      v96 = v99;
    }
    while (v99 != v256 + 10);
  }
  uint64_t v100 = *((void *)v255 + 803);
  v101 = *(void **)(v100 + 56);
  std::string v102 = (void *)(v100 + 64);
  if (v101 != (void *)(v100 + 64))
  {
    do
    {
      if (*((int *)v101 + 14) >= 1)
      {
        v103 = v101 + 4;
        v332[0] = @"scanRequester";
        if (*((char *)v101 + 55) < 0) {
          v103 = (void *)*v103;
        }
        v333[0] = +[NSString stringWithUTF8String:v103];
        v332[1] = @"numRequests";
        v333[1] = +[NSNumber numberWithInt:*((unsigned int *)v101 + 14)];
        __int16 v104 = +[NSDictionary dictionaryWithObjects:v333 forKeys:v332 count:2];
        v291 = _NSConcreteStackBlock;
        uint64_t v292 = 3221225472;
        v293 = sub_100E44558;
        v294 = &unk_1022A6390;
        v295 = v104;
        AnalyticsSendEventLazy();
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022FBF70);
        }
        v105 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289539;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2113;
          *(void *)&buf[20] = @"WifiLocationScanRequesters";
          *(_WORD *)&buf[28] = 2113;
          *(void *)&buf[30] = v104;
          _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Wlp submitting PowerLog event\", \"eventName\":%{private, location:escape_only}@, \"dictionary\":%{private, location:escape_only}@}", buf, 0x26u);
        }
        PLLogRegisteredEvent();
      }
      v106 = (void *)v101[1];
      if (v106)
      {
        do
        {
          v107 = v106;
          v106 = (void *)*v106;
        }
        while (v106);
      }
      else
      {
        do
        {
          v107 = (void *)v101[2];
          BOOL v95 = *v107 == (void)v101;
          v101 = v107;
        }
        while (!v95);
      }
      v101 = v107;
    }
    while (v107 != v102);
  }
  v108 = (int *)*((void *)v256 + 10);
  if (v108 != v256 + 22)
  {
    do
    {
      if (*((char *)v108 + 55) < 0)
      {
        sub_1000DC48C(buf, *((void **)v108 + 4), *((void *)v108 + 5));
      }
      else
      {
        *(_OWORD *)buf = *((_OWORD *)v108 + 2);
        *(void *)&buf[16] = *((void *)v108 + 6);
      }
      int v109 = v108[14];
      *(_DWORD *)&buf[24] = v109;
      if (v109)
      {
        v284 = _NSConcreteStackBlock;
        uint64_t v285 = 3321888768;
        v286 = sub_100E44560;
        v287 = &unk_1022E8980;
        if ((buf[23] & 0x80000000) != 0)
        {
          sub_1000DC48C(&v288, *(void **)buf, *(unint64_t *)&buf[8]);
          int v109 = *(_DWORD *)&buf[24];
        }
        else
        {
          long long v288 = *(_OWORD *)buf;
          uint64_t v289 = *(void *)&buf[16];
        }
        int v290 = v109;
        AnalyticsSendEventLazy();
        if (SHIBYTE(v289) < 0) {
          operator delete((void *)v288);
        }
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      v110 = (int *)*((void *)v108 + 1);
      if (v110)
      {
        do
        {
          v111 = v110;
          v110 = *(int **)v110;
        }
        while (v110);
      }
      else
      {
        do
        {
          v111 = (int *)*((void *)v108 + 2);
          BOOL v95 = *(void *)v111 == (void)v108;
          v108 = v111;
        }
        while (!v95);
      }
      v108 = v111;
    }
    while (v111 != v256 + 22);
  }
  v112 = (long long *)*((void *)v256 + 19);
  v113 = (long long *)(v256 + 40);
  if (v112 != (long long *)(v256 + 40))
  {
    v114 = &v325[24];
    do
    {
      sub_100E46C2C(__dst, v112 + 2);
      v357 = 0;
      v356 = 0;
      uint64_t v358 = 0;
      sub_10010F834(&v356, *(const void **)&__dst[24], v331, (v331 - *(void *)&__dst[24]) >> 2);
      v115 = v114;
      sub_10010F274((uint64_t)v325);
      v116 = v356;
      if (v357 != v356)
      {
        unint64_t v117 = 0;
        do
        {
          if (v116[v117])
          {
            v272 = _NSConcreteStackBlock;
            uint64_t v273 = 3321888768;
            v274 = sub_100E44614;
            v275 = &unk_1022FBF40;
            sub_100E46C2C(&v276, (long long *)__dst);
            unint64_t v280 = v117;
            v282 = 0;
            uint64_t v283 = 0;
            v281 = 0;
            sub_10010F834(&v281, v356, (uint64_t)v357, ((char *)v357 - (unsigned char *)v356) >> 2);
            AnalyticsSendEventLazy();
            if (v281)
            {
              v282 = v281;
              operator delete(v281);
            }
            if (v278)
            {
              v279 = v278;
              operator delete(v278);
            }
            if (v277 < 0) {
              operator delete(v276);
            }
          }
          sub_100132EFC(&v325[16], (uint64_t)", ", 2);
          std::ostream::operator<<();
          ++v117;
          v116 = v356;
        }
        while (v117 < ((char *)v357 - (unsigned char *)v356) >> 2);
      }
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022FBF70);
      }
      v118 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
      {
        int v119 = __dst[23];
        v120 = *(unsigned char **)__dst;
        std::stringbuf::str();
        v121 = __dst;
        if (v119 < 0) {
          v121 = v120;
        }
        v122 = buf;
        if (buf[23] < 0) {
          v122 = *(unsigned char **)buf;
        }
        *(_DWORD *)v354 = 136446466;
        *(void *)&v354[4] = v121;
        *(_WORD *)&v354[12] = 2082;
        *(void *)&v354[14] = v122;
        _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_DEBUG, "WlpMetric, heartbeat, scanreqtype, %{public}s, fix ap count per bucket %{public}s", v354, 0x16u);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        v113 = (long long *)(v256 + 40);
      }
      v114 = v115;
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022FBF70);
        }
        int v125 = __dst[23];
        v126 = *(unsigned char **)__dst;
        std::stringbuf::str();
        v127 = __dst;
        if (v125 < 0) {
          v127 = v126;
        }
        v128 = v354;
        if (v355 < 0) {
          v128 = *(unsigned char **)v354;
        }
        *(_DWORD *)v350 = 136446466;
        *(void *)&v350[4] = v127;
        __int16 v351 = 2082;
        v352 = v128;
        v129 = (char *)_os_log_send_and_compose_impl();
        if (v355 < 0) {
          operator delete(*(void **)v354);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::MetricHeartbeat &) const", "%s\n", v129);
        v113 = (long long *)(v256 + 40);
        if (v129 != buf) {
          free(v129);
        }
        v114 = v115;
      }
      *(void *)v325 = v265;
      *(void *)&v325[*(void *)(v265 - 24)] = v259;
      *(void *)&v325[16] = v257;
      if (v329 < 0) {
        operator delete(v328);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      std::ios::~ios();
      if (v356)
      {
        v357 = (NSNumber *)v356;
        operator delete(v356);
      }
      if (*(void *)&__dst[24])
      {
        uint64_t v331 = *(void *)&__dst[24];
        operator delete(*(void **)&__dst[24]);
      }
      if ((__dst[23] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
      v123 = (long long *)*((void *)v112 + 1);
      if (v123)
      {
        do
        {
          v124 = v123;
          v123 = *(long long **)v123;
        }
        while (v123);
      }
      else
      {
        do
        {
          v124 = (long long *)*((void *)v112 + 2);
          BOOL v95 = *(void *)v124 == (void)v112;
          v112 = v124;
        }
        while (!v95);
      }
      v112 = v124;
    }
    while (v124 != v113);
  }
  v130 = (int *)*((void *)v256 + 22);
  if (v130 != v256 + 46)
  {
    do
    {
      if (*((char *)v130 + 55) < 0)
      {
        sub_1000DC48C(buf, *((void **)v130 + 4), *((void *)v130 + 5));
      }
      else
      {
        *(_OWORD *)buf = *((_OWORD *)v130 + 2);
        *(void *)&buf[16] = *((void *)v130 + 6);
      }
      int v131 = v130[14];
      *(_DWORD *)&buf[24] = v131;
      if (v131)
      {
        if ((buf[23] & 0x80000000) != 0)
        {
          sub_1000DC48C(&v269, *(void **)buf, *(unint64_t *)&buf[8]);
          int v131 = *(_DWORD *)&buf[24];
        }
        else
        {
          long long v269 = *(_OWORD *)buf;
          uint64_t v270 = *(void *)&buf[16];
        }
        int v271 = v131;
        AnalyticsSendEventLazy();
        if (SHIBYTE(v270) < 0) {
          operator delete((void *)v269);
        }
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      v132 = (int *)*((void *)v130 + 1);
      if (v132)
      {
        do
        {
          v133 = v132;
          v132 = *(int **)v132;
        }
        while (v132);
      }
      else
      {
        do
        {
          v133 = (int *)*((void *)v130 + 2);
          BOOL v95 = *(void *)v133 == (void)v130;
          v130 = v133;
        }
        while (!v95);
      }
      v130 = v133;
    }
    while (v133 != v256 + 46);
  }
  AnalyticsSendEventLazy();
  *(void *)v325 = _NSConcreteStackBlock;
  *(void *)&v325[8] = 3221225472;
  *(void *)&v325[16] = sub_100E46CB4;
  *(void *)&v325[24] = &unk_1022A6368;
  v326 = (NSDictionary *)v256;
  AnalyticsSendEventLazy();
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022FBF70);
  }
  v134 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    int v135 = v256[59];
    int v136 = v256[60];
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = v135;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v136;
    _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_DEFAULT, "WlpMetric, numWifi1YieldValid, %{public}d, numWifi1YieldInvalid, %{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    int v232 = v256[59];
    int v233 = v256[60];
    *(_DWORD *)__dst = 67240448;
    *(_DWORD *)&__dst[4] = v232;
    *(_WORD *)&__dst[8] = 1026;
    *(_DWORD *)&__dst[10] = v233;
    v234 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PrePositionCalculationStateUpdate::submitWifi1YieldMetrics(Types::HeartbeatMetrics &)", "%s\n", v234);
    if (v234 != buf) {
      free(v234);
    }
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022FBF70);
  }
  v137 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    int v138 = v256[61];
    int v139 = v256[62];
    int v140 = v256[63];
    int v141 = v256[64];
    *(_DWORD *)buf = 67240960;
    *(_DWORD *)&uint8_t buf[4] = v138;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v139;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = v140;
    *(_WORD *)&buf[20] = 1026;
    *(_DWORD *)&buf[22] = v141;
    _os_log_impl((void *)&_mh_execute_header, v137, OS_LOG_TYPE_DEFAULT, "WlpMetric, numNotifyLocationAvailable, %{public}d, numNotifyLocationUnavailable, %{public}d, numNotifyBatchedLocations, %{public}d, numNotifyWsbLocations, %{public}d", buf, 0x1Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    int v235 = v256[61];
    int v236 = v256[62];
    int v237 = v256[63];
    int v238 = v256[64];
    *(_DWORD *)__dst = 67240960;
    *(_DWORD *)&__dst[4] = v235;
    *(_WORD *)&__dst[8] = 1026;
    *(_DWORD *)&__dst[10] = v236;
    *(_WORD *)&__dst[14] = 1026;
    *(_DWORD *)&__dst[16] = v237;
    *(_WORD *)&__dst[20] = 1026;
    *(_DWORD *)&__dst[22] = v238;
    v239 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PrePositionCalculationStateUpdate::submitWifi1YieldMetrics(Types::HeartbeatMetrics &)", "%s\n", v239);
    if (v239 != buf) {
      free(v239);
    }
  }
  *(void *)(v256 + 61) = 0;
  *(void *)(v256 + 59) = 0;
  *(void *)(v256 + 63) = 0;
  v142 = (int *)*((void *)v256 + 33);
  v143 = v256 + 68;
  if (v142 != v256 + 68)
  {
    do
    {
      v144 = v142 + 8;
      *(void *)v354 = @"wifi1UnavailableReason";
      v145 = v142 + 8;
      if (*((char *)v142 + 55) < 0) {
        v145 = (void *)*v144;
      }
      v356 = +[NSString stringWithUTF8String:v145];
      *(void *)&v354[8] = @"wifi1UnavailableReasonCount";
      v357 = +[NSNumber numberWithInt:v142[14]];
      v146 = +[NSDictionary dictionaryWithObjects:&v356 forKeys:v354 count:2];
      *(void *)v325 = _NSConcreteStackBlock;
      *(void *)&v325[8] = 3221225472;
      *(void *)&v325[16] = sub_100E46DE4;
      *(void *)&v325[24] = &unk_1022A6390;
      v326 = v146;
      AnalyticsSendEventLazy();
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022FBF70);
      }
      v147 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        v148 = v142 + 8;
        if (*((char *)v142 + 55) < 0) {
          v148 = (void *)*v144;
        }
        int v149 = v142[14];
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = v148;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&buf[14] = v149;
        _os_log_impl((void *)&_mh_execute_header, v147, OS_LOG_TYPE_DEFAULT, "WlpMetric, notifyLocationUnavailableReason, %{public}s, count, %{public}d", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022FBF70);
        }
        if (*((char *)v142 + 55) < 0) {
          v144 = (void *)*v144;
        }
        int v152 = v142[14];
        *(_DWORD *)__dst = 136446466;
        *(void *)&__dst[4] = v144;
        *(_WORD *)&__dst[12] = 1026;
        *(_DWORD *)&__dst[14] = v152;
        v153 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PrePositionCalculationStateUpdate::submitWifi1UnavailableReasonMetrics(Types::HeartbeatMetrics &)", "%s\n", v153);
        if (v153 != buf) {
          free(v153);
        }
      }
      v150 = (int *)*((void *)v142 + 1);
      if (v150)
      {
        do
        {
          v151 = v150;
          v150 = *(int **)v150;
        }
        while (v150);
      }
      else
      {
        do
        {
          v151 = (int *)*((void *)v142 + 2);
          BOOL v95 = *(void *)v151 == (void)v142;
          v142 = v151;
        }
        while (!v95);
      }
      v142 = v151;
    }
    while (v151 != v143);
  }
  sub_1000DB264((uint64_t)(v256 + 66), *((char **)v256 + 34));
  *((void *)v256 + 34) = 0;
  *((void *)v256 + 35) = 0;
  *((void *)v256 + 33) = v143;
  if (v256[54] + v256[55])
  {
    *(void *)v325 = _NSConcreteStackBlock;
    *(void *)&v325[8] = 3221225472;
    *(void *)&v325[16] = sub_100E46DEC;
    *(void *)&v325[24] = &unk_1022A6368;
    v326 = (NSDictionary *)v256;
    AnalyticsSendEventLazy();
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    v154 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      int v155 = v256[54];
      int v156 = v256[55];
      int v157 = v256[56];
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)&uint8_t buf[4] = v155;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v156;
      *(_WORD *)&buf[14] = 1026;
      *(_DWORD *)&buf[16] = v157;
      _os_log_impl((void *)&_mh_execute_header, v154, OS_LOG_TYPE_DEFAULT, "WlpMetric, wifiFixWithAssociatedAp, numAssociated, %{public}d, numUnassociated, %{public}d, numWifiFixesWithAssociatedAp, %{public}d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022FBF70);
      }
      int v249 = v256[54];
      int v250 = v256[55];
      int v251 = v256[56];
      *(_DWORD *)__dst = 67240704;
      *(_DWORD *)&__dst[4] = v249;
      *(_WORD *)&__dst[8] = 1026;
      *(_DWORD *)&__dst[10] = v250;
      *(_WORD *)&__dst[14] = 1026;
      *(_DWORD *)&__dst[16] = v251;
      v252 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PrePositionCalculationStateUpdate::submitWifi1WithAssociatedApMetrics(Types::HeartbeatMetrics &)", "%s\n", v252);
      if (v252 != buf) {
        free(v252);
      }
    }
    *((void *)v256 + 27) = 0;
    v256[56] = 0;
  }
  int v158 = v256[57];
  int v159 = v256[58] + v158;
  if (v159)
  {
    *(void *)v325 = _NSConcreteStackBlock;
    *(void *)&v325[8] = 3221225472;
    *(void *)&v325[16] = sub_100E46EBC;
    *(void *)&v325[24] = &unk_1022AE8E0;
    double v160 = (float)((float)v158 / (float)v159);
    v326 = (NSDictionary *)v256;
    double v327 = v160;
    AnalyticsSendEventLazy();
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    v161 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      int v162 = v256[57];
      int v163 = v256[58];
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)&uint8_t buf[4] = v162;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v163;
      *(_WORD *)&buf[14] = 2050;
      *(double *)&buf[16] = v160;
      _os_log_impl((void *)&_mh_execute_header, v161, OS_LOG_TYPE_DEFAULT, "WlpMetric, wifiFixWithAssociatedAp, numAssociatedApCentroidMacPresencesFromScansWhenUnassociated, %{public}d, numAssociatedApCentroidMacAbsencesFromScansWhenUnassociated, %{public}d, associatedApCentroidMacPresencePercentageWhenUnassociated, %{public}.1f", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022FBF70);
      }
      int v246 = v256[57];
      int v247 = v256[58];
      *(_DWORD *)__dst = 67240704;
      *(_DWORD *)&__dst[4] = v246;
      *(_WORD *)&__dst[8] = 1026;
      *(_DWORD *)&__dst[10] = v247;
      *(_WORD *)&__dst[14] = 2050;
      *(double *)&__dst[16] = v160;
      v248 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PrePositionCalculationStateUpdate::submitAssociatedApCentroidMacPresencesFromScansWhenUnassociatedMetrics(Types::HeartbeatMetrics &)", "%s\n", v248);
      if (v248 != buf) {
        free(v248);
      }
    }
    v256[57] = 0;
    v256[58] = 0;
  }
  *(void *)v325 = _NSConcreteStackBlock;
  *(void *)&v325[8] = 3221225472;
  *(void *)&v325[16] = sub_100E46F88;
  *(void *)&v325[24] = &unk_1022A6368;
  v326 = (NSDictionary *)v256;
  AnalyticsSendEventLazy();
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022FBF70);
  }
  v164 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    int v165 = v256[73];
    int v166 = v256[72];
    int v167 = v256[74];
    *(_DWORD *)buf = 67240704;
    *(_DWORD *)&uint8_t buf[4] = v165;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v166;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = v167;
    _os_log_impl((void *)&_mh_execute_header, v164, OS_LOG_TYPE_DEBUG, "WlpMetric, wifiFixwithReachIntersection, numReachIntersectionYield, %{public}d, numWifi1Yield, %{public}d, numReachIntersectionConservativeUsed, , %{public}d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    int v240 = v256[73];
    int v241 = v256[72];
    int v242 = v256[74];
    *(_DWORD *)__dst = 67240704;
    *(_DWORD *)&__dst[4] = v240;
    *(_WORD *)&__dst[8] = 1026;
    *(_DWORD *)&__dst[10] = v241;
    *(_WORD *)&__dst[14] = 1026;
    *(_DWORD *)&__dst[16] = v242;
    v243 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PrePositionCalculationStateUpdate::submitWifi1WithReachIntersectionMetrics(Types::HeartbeatMetrics &)", "%s\n", v243);
    if (v243 != buf) {
      free(v243);
    }
  }
  *((void *)v256 + 36) = 0;
  v256[74] = 0;
  if (*((void *)v256 + 15))
  {
    v168 = (int *)*((void *)v256 + 13);
    v169 = v256 + 28;
    if (v168 != v256 + 28)
    {
      do
      {
        v170 = v168 + 8;
        *(void *)__dst = @"reason";
        if (*((char *)v168 + 55) < 0) {
          v170 = (void *)*v170;
        }
        *(void *)v325 = +[NSString stringWithUTF8String:v170];
        *(void *)&__dst[8] = @"tally";
        *(void *)&v325[8] = +[NSNumber numberWithInt:v168[14]];
        v171 = +[NSDictionary dictionaryWithObjects:v325 forKeys:__dst count:2];
        *(void *)buf = _NSConcreteStackBlock;
        *(void *)&buf[8] = 3221225472;
        *(void *)&buf[16] = sub_100E47058;
        *(void *)&buf[24] = &unk_1022A6390;
        *(void *)&buf[32] = v171;
        AnalyticsSendEventLazy();
        v172 = (int *)*((void *)v168 + 1);
        if (v172)
        {
          do
          {
            v173 = v172;
            v172 = *(int **)v172;
          }
          while (v172);
        }
        else
        {
          do
          {
            v173 = (int *)*((void *)v168 + 2);
            BOOL v95 = *(void *)v173 == (void)v168;
            v168 = v173;
          }
          while (!v95);
        }
        v168 = v173;
      }
      while (v173 != v169);
    }
    sub_1000DB264((uint64_t)(v256 + 26), *((char **)v256 + 14));
    *((void *)v256 + 14) = 0;
    *((void *)v256 + 15) = 0;
    *((void *)v256 + 13) = v169;
  }
  else
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    v174 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v174, OS_LOG_TYPE_INFO, "alsRequestReasonsTally metrics nothing to submit", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022FBF70);
      }
      *(_WORD *)v325 = 0;
      v253 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PrePositionCalculationStateUpdate::submitAlsRequestReasonsTally(Types::HeartbeatMetrics &)", "%s\n", v253);
      if (v253 != buf) {
        free(v253);
      }
    }
  }
  v175 = (void *)*((void *)v255 + 803);
  v176 = (char *)v175[2];
  v175 += 2;
  sub_1000DB264((uint64_t)(v175 - 1), v176);
  *(v175 - 1) = v175;
  void *v175 = 0;
  v175[1] = 0;
  v177 = (void *)*((void *)v255 + 803);
  v178 = (char *)v177[5];
  v177 += 5;
  sub_1000DB264((uint64_t)(v177 - 1), v178);
  *(v177 - 1) = v177;
  void *v177 = 0;
  v177[1] = 0;
  v179 = (void *)*((void *)v255 + 803);
  v180 = (char *)v179[8];
  v179 += 8;
  sub_1000DB264((uint64_t)(v179 - 1), v180);
  *(v179 - 1) = v179;
  void *v179 = 0;
  v179[1] = 0;
  v181 = (void *)*((void *)v255 + 803);
  v182 = (char *)v181[11];
  v181 += 11;
  sub_1000DB264((uint64_t)(v181 - 1), v182);
  *(v181 - 1) = v181;
  void *v181 = 0;
  v181[1] = 0;
  v183 = (void *)*((void *)v255 + 803);
  v184 = (void *)v183[20];
  v183 += 20;
  sub_1000DB2C8((uint64_t)(v183 - 1), v184);
  *(v183 - 1) = v183;
  void *v183 = 0;
  v183[1] = 0;
  v185 = (void *)*((void *)v255 + 803);
  v186 = (char *)v185[23];
  v185 += 23;
  sub_1000DB264((uint64_t)(v185 - 1), v186);
  *(v185 - 1) = v185;
  void *v185 = 0;
  v185[1] = 0;
  uint64_t v187 = *((void *)v255 + 803);
  *(void *)(v187 + 200) = 0;
  *(void *)(v187 + 208) = 0;
  double v188 = *(double *)(a1 + 6384);
  uint64_t v189 = *(void *)(a1 + 6424);
  int v190 = *(_DWORD *)(v189 + 300);
  int v191 = (unint64_t)(2290649225 * (int)(v188 - *(double *)(v189 + 304) + 30.0)) >> 32;
  double v192 = v188 - *(double *)(v189 + 312);
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022FBF70);
  }
  int v193 = (v191 >> 5) + (v191 >> 31);
  v194 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240704;
    *(_DWORD *)&uint8_t buf[4] = v190;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v193;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = (int)v192;
    _os_log_impl((void *)&_mh_execute_header, v194, OS_LOG_TYPE_DEBUG, "WlpMetric, clients, beat, %{public}d, sum, %{public}d, bin, %{public}d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    *(_DWORD *)v325 = 67240704;
    *(_DWORD *)&v325[4] = v190;
    *(_WORD *)&v325[8] = 1026;
    *(_DWORD *)&v325[10] = v193;
    *(_WORD *)&v325[14] = 1026;
    *(_DWORD *)&v325[16] = (int)v192;
    v244 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::MetricHeartbeat &) const", "%s\n", v244);
    if (v244 != buf) {
      free(v244);
    }
  }
  AnalyticsSendEventLazy();
  double v195 = *(double *)(*(void *)(a1 + 6424) + 320);
  if (v195 <= 0.0) {
    int v196 = -1;
  }
  else {
    int v196 = (int)(v188 - v195);
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022FBF70);
  }
  v197 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v196;
    _os_log_impl((void *)&_mh_execute_header, v197, OS_LOG_TYPE_DEBUG, "WlpMetric, locreq, heartbeat, dt, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    *(_DWORD *)v325 = 67240192;
    *(_DWORD *)&v325[4] = v196;
    v245 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::MetricHeartbeat &) const", "%s\n", v245);
    if (v245 != buf) {
      free(v245);
    }
  }
  AnalyticsSendEventLazy();
  *(void **)((char *)v310
  uint64_t v201 = v199;
  v311[0] = v199;
  if (v312 < 0) {
    operator delete((void *)v311[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  v334[0] = v198;
  *(void **)((char *)v334 + *((void *)v198 - 3)) = v200;
  *(void *)&long long v335 = v201;
  if (v349 < 0) {
    operator delete(v348);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  *(void *)buf = &v321;
  sub_1000A7B4C((void ***)buf);
  operator delete(v267);
  operator delete(log);
}

void sub_100E43D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p)
{
  STACK[0x5B0] = (unint64_t)&STACK[0x418];
  sub_1000A7B4C((void ***)&STACK[0x5B0]);
  operator delete(__p);
  operator delete(a22);
  sub_10050BAA0(a13);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100E443F0(uint64_t a1)
{
  v4[0] = @"name";
  uint64_t v2 = (void *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v2 = (void *)*v2;
  }
  v4[1] = @"requests";
  v5[0] = +[NSString stringWithUTF8String:v2];
  v5[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];
}

NSDictionary *sub_100E444A4(uint64_t a1)
{
  v4[0] = @"name";
  uint64_t v2 = (void *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v2 = (void *)*v2;
  }
  v4[1] = @"requests";
  v5[0] = +[NSString stringWithUTF8String:v2];
  v5[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];
}

uint64_t sub_100E44558(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

NSDictionary *sub_100E44560(uint64_t a1)
{
  v4[0] = @"name";
  uint64_t v2 = (void *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v2 = (void *)*v2;
  }
  v4[1] = @"requests";
  v5[0] = +[NSString stringWithUTF8String:v2];
  v5[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];
}

NSDictionary *sub_100E44614(uint64_t a1)
{
  v4[0] = @"scantype";
  uint64_t v2 = (void *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v2 = (void *)*v2;
  }
  v5[0] = +[NSString stringWithUTF8String:v2];
  v4[1] = @"fixApsBucketed";
  v5[1] = +[NSNumber numberWithUnsignedLong:*(void *)(a1 + 80)];
  void v4[2] = @"wifiFixes";
  void v5[2] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 88) + 4 * *(void *)(a1 + 80))];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:3];
}

void *sub_100E446EC(void *a1, uint64_t a2)
{
  int v3 = a1;
  sub_100E46C2C(a1 + 4, (long long *)(a2 + 32));
  v3[11] = 0;
  v3[12] = 0;
  v3 += 11;
  void v3[2] = 0;
  return sub_10010F834(v3, *(const void **)(a2 + 88), *(void *)(a2 + 96), (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 2);
}

void sub_100E44744(_Unwind_Exception *a1)
{
  sub_100DF2FD0(v1);
  _Unwind_Resume(a1);
}

void sub_100E44758(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(void *)(a1 + 64) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v4 = *(void **)(a1 + 32);
    operator delete(v4);
  }
}

NSDictionary *sub_100E447C0(uint64_t a1)
{
  v4[0] = @"scantype";
  uint64_t v2 = (void *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v2 = (void *)*v2;
  }
  v5[0] = +[NSString stringWithUTF8String:v2];
  v5[1] = &off_102393500;
  v4[1] = @"fixApsBucketed";
  void v4[2] = @"wifiFixes";
  void v5[2] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:3];
}

NSDictionary *sub_100E44888(uint64_t a1)
{
  v3[0] = @"beats";
  v4[0] = +[NSNumber numberWithInt:**(unsigned int **)(a1 + 32)];
  v3[1] = @"alsAps";
  v4[1] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 200)];
  void v3[2] = @"fixes";
  void v4[2] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 204)];
  void v3[3] = @"scanErrors";
  void v4[3] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 208)];
  v3[4] = @"scanBusys";
  v4[4] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 212)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:5];
}

NSDictionary *sub_100E44998(unsigned int *a1)
{
  v3[0] = @"clients";
  v4[0] = +[NSNumber numberWithInt:a1[8]];
  v4[1] = @"heartbeat";
  v3[1] = @"trigger";
  void v3[2] = @"sum";
  void v4[2] = +[NSNumber numberWithInt:a1[9]];
  void v3[3] = @"bin";
  void v4[3] = +[NSNumber numberWithInt:a1[10]];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:4];
}

NSDictionary *sub_100E44A6C(uint64_t a1)
{
  v2[1] = @"delta";
  v3[0] = @"heartbeat";
  v2[0] = @"trigger";
  v3[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:v3 forKeys:v2 count:2];
}

uint64_t sub_100E44B04@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (uint64_t)sub_1000DEB28((_DWORD *)a3, a1);
  *(void *)(a3 + 6160) = 0x4018000000000000;
  *(void *)(a3 + 6136) = *(void *)(a3 + 6384);
  if (*a2) {
    return result;
  }
  double v7 = *(double *)(a1 + 6384);
  uint64_t v8 = *(void *)(a1 + 6424);
  int v9 = *(_DWORD *)(v8 + 300);
  double v10 = *(double *)(v8 + 304);
  if (v10 <= 0.0)
  {
    int v11 = -1;
    if (!v9) {
      goto LABEL_6;
    }
LABEL_8:
    int v13 = -1;
    goto LABEL_9;
  }
  int v11 = (int)(v7 - v10 + 30.0) / 60;
  if (v9) {
    goto LABEL_8;
  }
LABEL_6:
  double v12 = *(double *)(v8 + 312);
  if (v12 <= 0.0) {
    goto LABEL_8;
  }
  int v13 = (int)(v7 - v12);
LABEL_9:
  int v14 = *(_DWORD *)(a1 + 6400);
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022FBF70);
  }
  int v15 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240704;
    int v19 = v9;
    __int16 v20 = 1026;
    int v21 = v11;
    __int16 v22 = 1026;
    int v23 = v13;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "WlpMetric, clients, reg, %{public}d, sum, %{public}d, bin, %{public}d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::Registration &) const", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  uint64_t result = AnalyticsSendEventLazy();
  uint64_t v16 = *(void *)(a3 + 6424);
  if (!v9) {
    *(double *)(v16 + 312) = v7;
  }
  *(double *)(v16 + 304) = v7;
  *(_DWORD *)(v16 + 300) = v14;
  return result;
}

void sub_100E44E00(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100E44E18(unsigned int *a1)
{
  v3[0] = @"clients";
  v4[0] = +[NSNumber numberWithInt:a1[8]];
  v4[1] = @"register";
  v3[1] = @"trigger";
  void v3[2] = @"sum";
  void v4[2] = +[NSNumber numberWithInt:a1[9]];
  void v3[3] = @"bin";
  void v4[3] = +[NSNumber numberWithInt:a1[10]];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:4];
}

void sub_100E44EEC(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1000DEB28((_DWORD *)a3, a1);
  *(void *)(a3 + 6160) = 0x4018000000000000;
  if (*a2) {
    return;
  }
  double v6 = *(double *)(a1 + 6384);
  uint64_t v7 = *(void *)(a1 + 6424);
  int v8 = *(_DWORD *)(v7 + 300);
  double v9 = *(double *)(v7 + 304);
  if (v9 <= 0.0)
  {
    int v10 = -1;
    if (!v8)
    {
LABEL_8:
      int v12 = -1;
      goto LABEL_9;
    }
  }
  else
  {
    int v10 = (int)(v6 - v9 + 30.0) / 60;
    if (!v8) {
      goto LABEL_8;
    }
  }
  double v11 = *(double *)(v7 + 312);
  if (v11 <= 0.0) {
    goto LABEL_8;
  }
  int v12 = (int)(v6 - v11);
LABEL_9:
  int v13 = *(_DWORD *)(a1 + 6400);
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022FBF70);
  }
  int v14 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240704;
    *(_DWORD *)int v25 = v8;
    *(_WORD *)&v25[4] = 1026;
    *(_DWORD *)&v25[6] = v10;
    LOWORD(v26) = 1026;
    *(_DWORD *)((char *)&v26 + 2) = v12;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "WlpMetric, clients, unreg, %{public}d, sum, %{public}d, bin, %{public}d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    __int16 v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::Unregistration &) const", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  AnalyticsSendEventLazy();
  uint64_t v15 = *(void *)(a3 + 6424);
  if (v8) {
    *(double *)(v15 + 312) = v6;
  }
  *(double *)(v15 + 304) = v6;
  *(_DWORD *)(v15 + 300) = v13;
  if (*(int *)(a1 + 6400) <= 0)
  {
    uint64_t v16 = (int *)(a3 + 6444);
    *(void *)(a3 + 6444) = sub_1000DBCA8();
    *(unsigned char *)(a3 + 6452) = v17;
    *(void *)(a3 + 6456) = sub_1000DBCA8();
    *(unsigned char *)(a3 + 6464) = v18;
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    int v19 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      __int16 v20 = sub_100AC2F94(*v16);
      int v21 = sub_100AC2F94(*(_DWORD *)(a3 + 6456));
      *(_DWORD *)buf = 136446466;
      *(void *)int v25 = v20;
      *(_WORD *)&v25[8] = 2082;
      int v26 = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "@WifiFlow, reset inter-locreq state, current, %{public}s, staging, %{public}s", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022FBF70);
      }
      sub_100AC2F94(*v16);
      sub_100AC2F94(*(_DWORD *)(a3 + 6456));
      int v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::Unregistration &) const", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
  }
}

void sub_100E45390(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100E453BC(unsigned int *a1)
{
  v3[0] = @"clients";
  v4[0] = +[NSNumber numberWithInt:a1[8]];
  v4[1] = @"unregister";
  v3[1] = @"trigger";
  void v3[2] = @"sum";
  void v4[2] = +[NSNumber numberWithInt:a1[9]];
  void v3[3] = @"bin";
  void v4[3] = +[NSNumber numberWithInt:a1[10]];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:4];
}

void sub_100E45490(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  double v6 = (unsigned char *)(a3 + 6172);
  uint64_t v7 = (unsigned __int8 *)(a1 + 6172);
  sub_1000DEB28((_DWORD *)a3, a1);
  int v8 = *v7;
  int v9 = *a2;
  double v10 = *(double *)(a1 + 6384);
  long long v11 = *(_OWORD *)(a1 + 6232);
  *(_OWORD *)(a3 + 1008) = *(_OWORD *)(a1 + 6216);
  *(_OWORD *)(a3 + 1024) = v11;
  *(_OWORD *)(a3 + 1040) = *(_OWORD *)(a1 + 6248);
  *(_OWORD *)(a3 + 1049) = *(_OWORD *)(a1 + 6257);
  long long v12 = *(_OWORD *)(a1 + 6184);
  *(_OWORD *)(a3 + 960) = *(_OWORD *)(a1 + 6168);
  *(_OWORD *)(a3 + 976) = v12;
  *(_OWORD *)(a3 + 992) = *(_OWORD *)(a1 + 6200);
  *double v6 = v9;
  int v13 = v7[100];
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022FBF70);
  }
  int v14 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)v27 = v8;
    *(_WORD *)&v27[4] = 1026;
    *(_DWORD *)&v27[6] = v9;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "@EmerFlow, StateChange, wasEmer, %{public}d, nowEmer, %{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    int v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::EmergencyState &) const", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
  *(_OWORD *)(a3 + 6256) = 0u;
  *(_OWORD *)(a3 + 6240) = 0u;
  *(_OWORD *)(a3 + 6224) = 0u;
  *(_OWORD *)(a3 + 6208) = 0u;
  *(_OWORD *)(a3 + 6192) = 0u;
  *(_OWORD *)(a3 + 6176) = 0u;
  if (v9)
  {
    *(double *)(a3 + 6176) = v10;
    *(double *)(a3 + 6184) = v10;
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    uint64_t v15 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a3 + 6176);
      *(_DWORD *)buf = 134349056;
      *(void *)v27 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "@EmerTick, on, %{public}.1f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022FBF70);
      }
      __int16 v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::EmergencyState &) const", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
    if (v8)
    {
      BOOL v17 = v13 != 0;
    }
    else
    {
      *(double *)(a3 + 6176) = v10;
      *(double *)(a3 + 6184) = v10;
      *(double *)(a3 + 6192) = v10;
      BOOL v17 = v13 != 0;
      if (!v7[207])
      {
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022FBF70);
        }
        __int16 v20 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "@EmerFlow, RequestWifiOn", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022FBF70);
          }
          int v25 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::EmergencyState &) const", "%s\n", v25);
          if (v25 != (char *)buf) {
            free(v25);
          }
        }
        BOOL v17 = 1;
      }
    }
  }
  else
  {
    if (v8)
    {
      *(_DWORD *)(a3 + 6168) = 0;
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022FBF70);
      }
      char v18 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349312;
        *(void *)v27 = fmax(v10, 0.0);
        *(_WORD *)&v27[8] = 2050;
        uint64_t v28 = *(void *)v27;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "@EmerFlow, Off, any, %{public}.1f, sufficient, %{public}.1f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022FBF70);
        }
        int v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::EmergencyState &) const", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
    }
    if (v13)
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022FBF70);
      }
      int v19 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "@EmerFlow, RequestWifiOff", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022FBF70);
        }
        int v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::EmergencyState &) const", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
    }
    BOOL v17 = 0;
  }
  *(unsigned char *)(a3 + 6272) = v17;
}

void sub_100E45C54(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

void sub_100E45C80(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000DEB28((_DWORD *)a2, a1);
  *(_DWORD *)(a2 + 6348) = *(_DWORD *)(a1 + 6348) + 1;
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022FBF70);
  }
  uint64_t v4 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a2 + 6348);
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 6288) - *(void *)(a1 + 6280)) >> 3);
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)int v21 = v5;
    *(_WORD *)&v21[4] = 2050;
    *(void *)&v21[6] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "WsbReproc, pass, %{public}d, groups, %{public}ld", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    BOOL v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::ReprocessWifiScanBuffer &) const", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  uint64_t v7 = *(void *)(a2 + 6280);
  uint64_t v8 = *(void *)(a2 + 6288);
  if (v7 != v8)
  {
    unsigned int v9 = 0;
    while (1)
    {
      double v10 = *(double *)(a1 + 6384) - *(double *)(*(void *)v7 + 56);
      if (v10 < 14400.0) {
        break;
      }
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022FBF70);
      }
      long long v11 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(*(void *)v7 + 56);
        *(_DWORD *)buf = 134349568;
        *(void *)int v21 = v12;
        *(_WORD *)&v21[8] = 1026;
        *(_DWORD *)&v21[10] = v9 + 1;
        __int16 v22 = 1026;
        int v23 = (int)v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "@WsbDiscard, age, %{public}.1f, aps, %{public}d, delta, %{public}d", buf, 0x18u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022FBF70);
        }
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::ReprocessWifiScanBuffer &) const", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      v7 += 24;
      ++v9;
      if (v7 == v8) {
        goto LABEL_26;
      }
    }
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FBF70);
    }
    int v14 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = *(void *)(*(void *)v7 + 56);
      *(_DWORD *)buf = 134349312;
      *(void *)int v21 = v15;
      *(_WORD *)&v21[8] = 1026;
      *(_DWORD *)&v21[10] = (int)v10;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "@WsbReproc, inrange, %{public}.1f, count, %{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022FBF70);
      }
      int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::ReprocessWifiScanBuffer &) const", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    if (v9)
    {
LABEL_26:
      sub_100E46450(a2 + 6280, *(uint64_t **)(a2 + 6280), *(void *)(a2 + 6280) + 24 * v9);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022FBF70);
      }
      uint64_t v16 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)int v21 = v9;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "WsbMetric, groupresult, aged, %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022FBF70);
        }
        char v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::ReprocessWifiScanBuffer &) const", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
      AnalyticsSendEventLazy();
      AnalyticsSendEventLazy();
    }
  }
}

void sub_100E4641C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

uint64_t *sub_100E46450(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (a2 != (uint64_t *)a3)
  {
    sub_100E47314((uint64_t)&v9, a3, *(void *)(a1 + 8), a2);
    unint64_t v6 = v5;
    uint64_t v7 = *(void ***)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 3;
        double v10 = v7;
        sub_1000D7F78(&v10);
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

NSDictionary *sub_100E464D4(uint64_t a1)
{
  v2[1] = @"numInGroup";
  v3[0] = @"discard";
  v2[0] = @"groupResult";
  v3[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:v3 forKeys:v2 count:2];
}

NSDictionary *sub_100E4656C(uint64_t a1)
{
  v2[1] = @"numInGroup";
  v3[0] = @"discard:aged";
  v2[0] = @"groupResult";
  v3[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:v3 forKeys:v2 count:2];
}

void sub_100E46604(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_100E46634(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (sub_100F91E80(a1))
  {
    sub_1000D8908(a1);
    sub_100B39278(a2);
  }
  else
  {
    sub_100134750(a2, "none");
  }
}

uint64_t *sub_100E466AC(void *a1, uint64_t *a2)
{
  uint64_t result = sub_100E466E4(a1, a2);
  if (result)
  {
    sub_100E4680C(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void *sub_100E466E4(void *a1, uint64_t *a2)
{
  uint64_t v16 = *a2;
  unint64_t v4 = sub_1000D8908((uint64_t)&v16);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  double v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  long long v11 = (void *)*v10;
  if (*v10)
  {
    do
    {
      unint64_t v12 = v11[1];
      if (v12 == v6)
      {
        uint64_t v16 = v11[2];
        uint64_t v13 = sub_1000D8908((uint64_t)&v16);
        uint64_t v15 = *a2;
        if (v13 == sub_1000D8908((uint64_t)&v15)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(void *)&v5) {
            v12 %= *(void *)&v5;
          }
        }
        else
        {
          v12 &= *(void *)&v5 - 1;
        }
        if (v12 != v9) {
          return 0;
        }
      }
      long long v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t sub_100E4680C(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_10017FA3C(a1, a2, (uint64_t)&__p);
  int v3 = (void **)__p;
  __p = 0;
  if (v3) {
    sub_10050E97C((uint64_t)&v6, v3);
  }
  return v2;
}

__n128 sub_100E46858(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100E468E4(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_100E468E4(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000DA54C(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  int v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100E46BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100E46BFC(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void *sub_100E46C2C(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  sub_10010F834(__dst + 3, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 2);
  return __dst;
}

void sub_100E46C98(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_100E46CB4(uint64_t a1)
{
  v3[0] = @"numWifi1YieldValid";
  v4[0] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 236)];
  v3[1] = @"numWifi1YieldInvalid";
  v4[1] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 240)];
  void v3[2] = @"numNotifyLocationAvailable";
  void v4[2] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 244)];
  void v3[3] = @"numNotifyLocationUnavailable";
  void v4[3] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 248)];
  void v3[4] = @"numNotifyBatchedLocations";
  void v4[4] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 252)];
  void v3[5] = @"numNotifyWsbLocations";
  void v4[5] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 256)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:6];
}

uint64_t sub_100E46DE4(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

NSDictionary *sub_100E46DEC(uint64_t a1)
{
  v3[0] = @"numAssociated";
  v4[0] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 216)];
  v3[1] = @"numUnassociated";
  v4[1] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 220)];
  void v3[2] = @"numWifiFixesWithAssociatedAp";
  void v4[2] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 224)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:3];
}

NSDictionary *sub_100E46EBC(uint64_t a1)
{
  v3[0] = @"numAssociatedApCentroidMacPresencesFromScansWhenUnassociated";
  v4[0] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 228)];
  v3[1] = @"numAssociatedApCentroidMacAbsencesFromScansWhenUnassociated";
  v4[1] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 232)];
  void v3[2] = @"associatedApCentroidMacPresencePercentageWhenUnassociated";
  void v4[2] = +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:3];
}

NSDictionary *sub_100E46F88(uint64_t a1)
{
  v3[0] = @"numReachIntersectionYield";
  v4[0] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 292)];
  v3[1] = @"numWifi1Yield";
  v4[1] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 288)];
  void v3[2] = @"numReachIntersectionConservativeUsed";
  void v4[2] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 296)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:3];
}

uint64_t sub_100E47058(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_100E47060(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10050EE58(a1, a2);
  *(void *)(v3 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(v3 + 48) = *(unsigned char *)(a2 + 48);
  sub_1000E23EC((unsigned char *)(v3 + 56), a2 + 56);
  return 7;
}

void sub_100E470A8(_Unwind_Exception *a1)
{
  sub_1000DB114(v1);
  _Unwind_Resume(a1);
}

void *sub_100E470BC@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  long long v4 = operator new(0x48uLL);
  __n128 result = sub_100E47118(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100E47104(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100E47118(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B8218;
  sub_10050EE58((uint64_t)(a1 + 3), a2);
  a1[8] = *(void *)(a2 + 40);
  return a1;
}

void sub_100E4716C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *sub_100E47180(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  void *v3 = 0;
  v3[1] = 0;
  void v3[2] = 0;
  __n128 result = sub_1000DA6E8(v3, *a2, a2[1], 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_100E471E0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100E471E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1000DA5D8(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_1000DA6E8(v11, *a2, a2[1], 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
  v15 += 24;
  sub_10093D088(a1, v14);
  uint64_t v12 = a1[1];
  sub_10093D228(v14);
  return v12;
}

void sub_100E47300(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10093D228((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E47314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    sub_10017C740(a4);
    *(_OWORD *)a4 = *(_OWORD *)v5;
    a4[2] = *(void *)(v5 + 16);
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
    a4 += 3;
    v5 += 24;
  }
  while (v5 != v6);
  return v6;
}

void sub_100E4742C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_100E474E4(_Unwind_Exception *a1)
{
}

void sub_100E474FC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_100E475A4(_Unwind_Exception *a1)
{
}

void sub_100E47688(uint64_t a1, void *a2)
{
  dispatch_time_t v3 = dispatch_time(0, 5000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100E47B78;
  block[3] = &unk_1022A3020;
  block[4] = a2;
  dispatch_after(v3, (dispatch_queue_t)[(dispatch_queue_t)objc_msgSend(objc_msgSend(a2, "silo"), "queue") block]);
}

id sub_100E47B78(uint64_t a1)
{
  return _[*(id *)(a1 + 32) handleSysTimeChanged];
}

void sub_100E47B80(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void *sub_100E47BB0(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5)
{
  uint64_t v7 = (std::__shared_weak_count *)a4[1];
  uint64_t v12 = *a4;
  uint64_t v13 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100DFC7F8(a1, a2, a3, &v12, a5);
  if (v13) {
    sub_1000DB0A0(v13);
  }
  *a1 = off_1022FBFE0;
  unint64_t v8 = (std::__shared_weak_count *)a4[1];
  uint64_t v10 = *a4;
  uint64_t v11 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_10159C390(a1 + 11, &v10);
  if (v11) {
    sub_1000DB0A0(v11);
  }
  (*(void (**)(void *))(*a1 + 152))(a1);
  return a1;
}

void sub_100E47C90(_Unwind_Exception *a1)
{
  sub_1006BC524(v2);
  sub_100DFC8A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100E47CD8(void *a1)
{
  *a1 = off_1022FBFE0;
  sub_1006BC524((uint64_t)(a1 + 11));

  return sub_100DFC8A4((uint64_t)a1);
}

void sub_100E47D2C(void *a1)
{
  *a1 = off_1022FBFE0;
  sub_1006BC524((uint64_t)(a1 + 11));
  sub_100DFC8A4((uint64_t)a1);

  operator delete();
}

BOOL sub_100E47D94(void **a1, uint64_t a2, double a3)
{
  sub_100176CA0(v8, a2);
  int v5 = ((uint64_t (*)(void **, unsigned char *))(*a1)[12])(a1, v8);
  if (v8[32]) {
    sub_100178B14((uint64_t)v8);
  }
  if (v5)
  {
    sub_1011C5764((uint64_t)a1[8], 2, a3);
    return 0;
  }
  else
  {
    int v7 = *((_DWORD *)a1 + 20);
    return v7 < (int)sub_100E47E60(a1);
  }
}

void sub_100E47E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14) {
    sub_100178B14((uint64_t)&a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E47E60(void **a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*a1[6] + 128))(&v5);
  int v2 = v6;
  uint64_t v3 = ((unsigned int (*)(void **))(*a1)[14])(a1) * v2;
  sub_1000D7D80((uint64_t)&v9);
  sub_1000D7D80((uint64_t)&v8);
  sub_1000D7D80((uint64_t)&v7);
  return v3;
}

void sub_100E47F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100E47F20(uint64_t a1)
{
  ++*(_DWORD *)(a1 + 80);
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022FC0A8);
  }
  int v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(_DWORD *)(a1 + 80);
    v4[0] = 68289539;
    v4[1] = 0;
    __int16 v5 = 2082;
    int v6 = "";
    __int16 v7 = 1025;
    int v8 = v3;
    __int16 v9 = 1025;
    int v10 = sub_100E47E60((void **)a1);
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Update next trace eligibility\", \"collected\":%{private}d, \"cap\":%{private}d}", (uint8_t *)v4, 0x1Eu);
  }
}

id sub_100E48030(id *a1)
{
  int v2 = (*((uint64_t (**)(id *))*a1 + 14))(a1);
  id result = [a1[1] count];
  if ((unint64_t)result <= v2)
  {
    a1[3] = 0;
  }
  else
  {
    unint64_t v4 = +[NSSortDescriptor sortDescriptorWithKey:@"score" ascending:1];
    id v5 = a1[1];
    uint64_t v13 = v4;
    a1[3] = [[[v5 sortedArrayUsingDescriptors:+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v13, 1)] firstObject];
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022FC0A8);
    }
    int v6 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      id v7 = [[[a1[3] archive] directory] UTF8String];
      v8[0] = 68289283;
      v8[1] = 0;
      __int16 v9 = 2082;
      int v10 = "";
      __int16 v11 = 2081;
      id v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Next in progress archive\", \"dir\":%{private, location:escape_only}s}", (uint8_t *)v8, 0x1Cu);
    }
    [objc_msgSend(a1[3], "archive") secondaryDataSize];
    return (id)sub_1011C5608();
  }
  return result;
}

uint64_t sub_100E481D8()
{
  return 3;
}

uint64_t sub_100E481E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 88))();
}

void sub_100E48208(uint64_t a1)
{
  *(_DWORD *)(a1 + 80) = 0;
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022FC0A8);
  }
  int v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(_DWORD *)(a1 + 80);
    v4[0] = 68289283;
    v4[1] = 0;
    __int16 v5 = 2082;
    int v6 = "";
    __int16 v7 = 1025;
    int v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Reset trace eligibility\", \"collected\":%{private}d}", (uint8_t *)v4, 0x18u);
  }
}

uint64_t sub_100E482F8(uint64_t a1)
{
  sub_100DFCD68(a1);
  int v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 152);

  return v2(a1);
}

NSString *sub_100E48350(uint64_t a1, uint64_t a2)
{
  return +[NSString stringWithFormat:@"v-%u", a2];
}

uint64_t sub_100E48384(uint64_t a1)
{
  return a1 + 88;
}

uint64_t sub_100E4838C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 120))();
}

CFStringRef sub_100E483B4()
{
  return @"Vision Enabled";
}

void sub_100E483C0(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void *sub_100E483F0(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_100CCA904(a1, *(const void **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5));
  unint64_t v3 = *a1;
  unint64_t v4 = (__n128 *)a1[1];
  unint64_t v5 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *a1) >> 5));
  a1[3] = 0;
  int v6 = (void **)(a1 + 3);
  a1[4] = 0;
  a1[5] = 0;
  if (v4 == (__n128 *)v3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v5;
  }
  sub_100E4A708(v3, v4, v7, 1);
  if (*a1 != a1[1])
  {
    sub_100E484F0(a1, (void **)&v10, *(double *)(*a1 + 8), *(double *)(*a1 + 16));
    int v8 = *v6;
    if (*v6)
    {
      a1[4] = v8;
      operator delete(v8);
      *int v6 = 0;
      a1[4] = 0;
      a1[5] = 0;
    }
    *(_OWORD *)(a1 + 3) = v10;
    a1[5] = v11;
  }
  return a1;
}

void sub_100E484C0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = v2;
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 32) = v5;
    operator delete(v5);
  }
  int v6 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E484F0(uint64_t *a1@<X0>, void **a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    uint64_t v9 = (uint64_t)(a2 + 2);
    do
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v26 = 0;
      sub_101171D90((uint64_t)v25);
      sub_1000F17A8(v25, (double *)&v28, (double *)&v27, (double *)&v26, a3, a4, 0.0, *(double *)(v4 + 8), *(double *)(v4 + 16), 0.0);
      uint64_t v11 = v27;
      uint64_t v10 = v28;
      double v12 = (double)*(int *)(v4 + 48);
      BOOL v14 = (char *)a2[1];
      uint64_t v13 = (char *)a2[2];
      if (v14 >= v13)
      {
        uint64_t v16 = (char *)*a2;
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (unsigned char *)*a2) >> 3);
        unint64_t v18 = v17 + 1;
        if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_1001D7FD4();
        }
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v16) >> 3);
        if (2 * v19 > v18) {
          unint64_t v18 = 2 * v19;
        }
        if (v19 >= 0x555555555555555) {
          unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          uint64_t v21 = (char *)sub_1000DA5D8(v9, v20);
          uint64_t v16 = (char *)*a2;
          BOOL v14 = (char *)a2[1];
        }
        else
        {
          uint64_t v21 = 0;
        }
        unint64_t v22 = &v21[24 * v17];
        *(void *)unint64_t v22 = v11;
        *((void *)v22 + 1) = v10;
        *((double *)v22 + 2) = v12;
        uint64_t v23 = v22;
        if (v14 != v16)
        {
          do
          {
            long long v24 = *(_OWORD *)(v14 - 24);
            *((void *)v23 - 1) = *((void *)v14 - 1);
            *(_OWORD *)(v23 - 24) = v24;
            v23 -= 24;
            v14 -= 24;
          }
          while (v14 != v16);
          uint64_t v16 = (char *)*a2;
        }
        uint64_t v15 = v22 + 24;
        *a2 = v23;
        a2[1] = v22 + 24;
        a2[2] = &v21[24 * v20];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *(void *)BOOL v14 = v27;
        *((void *)v14 + 1) = v10;
        uint64_t v15 = v14 + 24;
        *((double *)v14 + 2) = v12;
      }
      a2[1] = v15;
      v4 += 96;
    }
    while (v4 != v5);
  }
}

void sub_100E486B8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100E486DC@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a2 + 8;
  unint64_t v4 = 0;
  if (result[1] != *result)
  {
    unint64_t v3 = result;
    do
    {
      id result = sub_1002F9B84((uint64_t **)a2, &v4, (uint64_t *)&v4);
      ++v4;
    }
    while (v4 < 0xAAAAAAAAAAAAAAABLL * ((v3[1] - *v3) >> 5));
  }
  return result;
}

void sub_100E48768(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_100E48780(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100E4B9B8((uint64_t *)(a1 + 16), a3);
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(double *)(a1 + 144) = sub_100E48818((uint64_t **)a1, (void *)(a1 + 16));
  return a1;
}

void sub_100E487EC(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v2, *(void **)(v1 + 24));
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  _Unwind_Resume(a1);
}

double sub_100E48818(uint64_t **a1, void *a2)
{
  uint64_t v2 = a2[2];
  if (!v2) {
    return 0.0;
  }
  if (v2 == 1) {
    return 1.0;
  }
  uint64_t v5 = a2 + 1;
  int v6 = (void *)*a2;
  if ((void *)*a2 == a2 + 1)
  {
    unint64_t v8 = 0;
    unint64_t v20 = (v2 - 1) * v2;
LABEL_39:
    unint64_t v24 = v20 >> 1;
    double result = 1.0;
    if (v8 != v24) {
      return (double)v8 / (double)v24;
    }
    return result;
  }
  unint64_t v8 = 0;
  do
  {
    uint64_t v9 = (void *)v6[1];
    uint64_t v10 = v9;
    uint64_t v11 = v6;
    if (v9)
    {
      do
      {
        double v12 = v10;
        uint64_t v10 = (void *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        double v12 = (void *)v11[2];
        BOOL v13 = *v12 == (void)v11;
        uint64_t v11 = v12;
      }
      while (!v13);
    }
    if (v12 != v5)
    {
      do
      {
        uint64_t v14 = v6[4];
        uint64_t v15 = **a1;
        uint64_t v16 = v12[4];
        sub_101171D90((uint64_t)buf);
        if (sub_101171810(*(double *)(v15 + 96 * v14 + 8), *(double *)(v15 + 96 * v14 + 16), *(double *)(v15 + 96 * v16 + 8), *(double *)(v15 + 96 * v16 + 16)) <= (double)(*(_DWORD *)(v15 + 96 * v16 + 48)+ *(_DWORD *)(v15 + 96 * v14 + 48)))++v8; {
        unint64_t v17 = (void *)v12[1];
        }
        if (v17)
        {
          do
          {
            unint64_t v18 = v17;
            unint64_t v17 = (void *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            unint64_t v18 = (void *)v12[2];
            BOOL v13 = *v18 == (void)v12;
            double v12 = v18;
          }
          while (!v13);
        }
        double v12 = v18;
      }
      while (v18 != v5);
      uint64_t v9 = (void *)v6[1];
    }
    if (v9)
    {
      do
      {
        unint64_t v19 = v9;
        uint64_t v9 = (void *)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        unint64_t v19 = (void *)v6[2];
        BOOL v13 = *v19 == (void)v6;
        int v6 = v19;
      }
      while (!v13);
    }
    int v6 = v19;
  }
  while (v19 != v5);
  unint64_t v20 = (a2[2] - 1) * a2[2];
  if (v8 <= v20 >> 1) {
    goto LABEL_39;
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022FC0C8);
  }
  uint64_t v21 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "[WifiReachIntersection] pairwise intersection count is more than the total possibility; something is wrong.",
      buf,
      2u);
  }
  BOOL v22 = sub_10013D1A0(115, 0);
  double result = 1.0;
  if (v22)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022FC0C8);
    }
    uint64_t v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static double CLWifiReachIntersection::ReachIntersection::computePairwiseIntersectionRatio(const std::shared_ptr<ReachIntersectionInputCentroids> &, const std::set<size_t> &)", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
    return 1.0;
  }
  return result;
}

uint64_t sub_100E48B30(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136)) {
    return 1;
  }
  sub_100134750(&__p, "ff:ff:ff:ff:ff:ff");
  uint64_t v3 = sub_100B38F04((uint64_t)&__p);
  sub_10106EB84(v3, (uint64_t)v50);
  int v4 = *(unsigned __int8 *)(a1 + 136);
  long long v5 = v50[3];
  long long v6 = v50[4];
  long long v7 = v50[1];
  *(_OWORD *)(a1 + 72) = v50[2];
  *(_OWORD *)(a1 + 88) = v5;
  long long v8 = v50[5];
  *(_OWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 120) = v8;
  *(_OWORD *)(a1 + 40) = v50[0];
  *(_OWORD *)(a1 + 56) = v7;
  if (!v4) {
    *(unsigned char *)(a1 + 136) = 1;
  }
  if (SHIBYTE(v49) < 0) {
    operator delete(__p);
  }
  __p = 0;
  unint64_t v48 = 0;
  uint64_t v49 = 0;
  if (sub_100E48ECC(a1, (uint64_t)&__p))
  {
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    unint64_t v46 = 0;
    uint64_t v9 = __p;
    uint64_t v10 = v48;
    if (__p == v48)
    {
      unint64_t v33 = 0;
    }
    else
    {
      uint64_t v11 = 0;
      do
      {
        double v12 = (_OWORD *)(**(void **)a1 + 96 * *v9);
        if (v11 >= v46)
        {
          unint64_t v17 = (char *)v44;
          unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (unsigned char *)v44) >> 5);
          unint64_t v19 = v18 + 1;
          if (v18 + 1 > 0x2AAAAAAAAAAAAAALL) {
            sub_1001D7FD4();
          }
          if (0x5555555555555556 * ((v46 - (unsigned char *)v44) >> 5) > v19) {
            unint64_t v19 = 0x5555555555555556 * ((v46 - (unsigned char *)v44) >> 5);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v46 - (unsigned char *)v44) >> 5) >= 0x155555555555555) {
            unint64_t v20 = 0x2AAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v20 = v19;
          }
          if (v20)
          {
            uint64_t v21 = (char *)sub_100642EA8((uint64_t)&v46, v20);
            unint64_t v17 = (char *)v44;
            uint64_t v11 = v45;
          }
          else
          {
            uint64_t v21 = 0;
          }
          BOOL v22 = &v21[96 * v18];
          long long v23 = v12[1];
          *(_OWORD *)BOOL v22 = *v12;
          *((_OWORD *)v22 + 1) = v23;
          long long v24 = v12[2];
          long long v25 = v12[3];
          long long v26 = v12[5];
          *((_OWORD *)v22 + 4) = v12[4];
          *((_OWORD *)v22 + 5) = v26;
          *((_OWORD *)v22 + 2) = v24;
          *((_OWORD *)v22 + 3) = v25;
          if (v11 == v17)
          {
            long long v32 = &v21[96 * v18];
          }
          else
          {
            uint64_t v27 = &v21[96 * v18];
            do
            {
              long long v28 = *((_OWORD *)v11 - 5);
              *((_OWORD *)v27 - 6) = *((_OWORD *)v11 - 6);
              *((_OWORD *)v27 - 5) = v28;
              long long v29 = *((_OWORD *)v11 - 4);
              long long v30 = *((_OWORD *)v11 - 3);
              long long v31 = *((_OWORD *)v11 - 1);
              long long v32 = v27 - 96;
              *((_OWORD *)v27 - 2) = *((_OWORD *)v11 - 2);
              *((_OWORD *)v27 - 1) = v31;
              *((_OWORD *)v27 - 4) = v29;
              *((_OWORD *)v27 - 3) = v30;
              v11 -= 96;
              v27 -= 96;
            }
            while (v11 != v17);
          }
          uint64_t v11 = v22 + 96;
          uint64_t v44 = v32;
          uint64_t v45 = v22 + 96;
          unint64_t v46 = &v21[96 * v20];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          long long v13 = v12[1];
          *(_OWORD *)uint64_t v11 = *v12;
          *((_OWORD *)v11 + 1) = v13;
          long long v14 = v12[2];
          long long v15 = v12[3];
          long long v16 = v12[5];
          *((_OWORD *)v11 + 4) = v12[4];
          *((_OWORD *)v11 + 5) = v16;
          *((_OWORD *)v11 + 2) = v14;
          *((_OWORD *)v11 + 3) = v15;
          v11 += 96;
        }
        uint64_t v45 = v11;
        ++v9;
      }
      while (v9 != v10);
      unint64_t v33 = (double *)v44;
    }
    sub_100E484F0((uint64_t *)&v44, v43, v33[1], v33[2]);
    double v41 = 0.0;
    double v42 = 0.0;
    uint64_t v40 = 0;
    if (sub_100E494D8((double **)v43, &v41, (double *)&v40))
    {
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v37 = 0;
      sub_101171D90((uint64_t)v50);
      sub_10005B848((double *)v50, (double *)&v39, (double *)&v38, (double *)&v37, v33[1], v33[2], v33[3], v42, v41, 0.0);
      uint64_t v35 = v38;
      *(void *)(a1 + 48) = v39;
      *(void *)(a1 + 56) = v35;
      *(void *)(a1 + 72) = v40;
    }
    if (v43[0])
    {
      v43[1] = v43[0];
      operator delete(v43[0]);
    }
    if (v44)
    {
      uint64_t v45 = (char *)v44;
      operator delete(v44);
    }
  }
  else if (v48 - (unsigned char *)__p == 8)
  {
    uint64_t v34 = **(void **)a1 + 96 * *(void *)__p;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(v34 + 8);
    *(void *)(a1 + 72) = *(void *)(v34 + 32);
  }
  BOOL v1 = sub_10106EB1C((double *)(a1 + 40));
  if (__p)
  {
    unint64_t v48 = __p;
    operator delete(__p);
  }
  return v1;
}

void sub_100E48E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E48ECC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t **)a1;
  if (*(double *)(a1 + 144) == 0.0)
  {
    sub_100E4BB24(buf, *(void **)(a1 + 16), (void *)(a1 + 24));
    uint64_t v3 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v3;
      operator delete(v3);
    }
    char v4 = 0;
    *(_OWORD *)a2 = *(_OWORD *)buf;
    *(void *)(a2 + 16) = *(void *)&buf[16];
  }
  else
  {
    long long v5 = *(void **)(a1 + 16);
    uint64_t v44 = (void *)(a1 + 24);
    if (v5 == (void *)(a1 + 24))
    {
      char v4 = 0;
    }
    else
    {
      uint64_t v6 = a2;
      char v4 = 0;
      uint64_t v42 = a2 + 16;
      do
      {
        unint64_t v7 = v5[4];
        uint64_t v8 = **v2;
        if (v7 >= 0xAAAAAAAAAAAAAAABLL * (((*v2)[1] - v8) >> 5))
        {
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_1022FC0C8);
          }
          BOOL v22 = qword_1024193B8;
          if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_FAULT))
          {
            unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * (((*v2)[1] - **v2) >> 5);
            *(_DWORD *)buf = 134349312;
            *(void *)&uint8_t buf[4] = v7;
            *(_WORD *)&unsigned char buf[12] = 2050;
            *(void *)&buf[14] = v23;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "[WifiReachIntersection] out of bound candidate index %{public}lu from %{public}lu input centroids", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193B0 != -1) {
              dispatch_once(&qword_1024193B0, &stru_1022FC0C8);
            }
            uint64_t v36 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWifiReachIntersection::ReachIntersection::removeCentroidIndicesWithNestedAps(std::vector<size_t> &)", "%s\n", v36);
            if (v36 != buf) {
              free(v36);
            }
          }
          uint64_t v6 = a2;
          uint64_t v2 = (uint64_t **)a1;
        }
        else
        {
          uint64_t v9 = *(uint64_t **)v6;
          uint64_t v10 = *(uint64_t **)(v6 + 8);
          uint64_t v43 = v5[4];
          if (*(uint64_t **)v6 == v10)
          {
LABEL_12:
            uint64_t v6 = a2;
            unint64_t v20 = *(void **)(a2 + 8);
            unint64_t v19 = *(void *)(a2 + 16);
            if ((unint64_t)v20 >= v19)
            {
              long long v24 = *(void **)a2;
              uint64_t v25 = ((uint64_t)v20 - *(void *)a2) >> 3;
              unint64_t v26 = v25 + 1;
              uint64_t v27 = v43;
              if ((unint64_t)(v25 + 1) >> 61) {
                sub_1001D7FD4();
              }
              uint64_t v28 = v19 - (void)v24;
              if (v28 >> 2 > v26) {
                unint64_t v26 = v28 >> 2;
              }
              if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v29 = v26;
              }
              if (v29)
              {
                long long v30 = (char *)sub_1000DA54C(v42, v29);
                uint64_t v6 = a2;
                uint64_t v2 = (uint64_t **)a1;
                long long v24 = *(void **)a2;
                unint64_t v20 = *(void **)(a2 + 8);
                uint64_t v27 = v43;
              }
              else
              {
                long long v30 = 0;
              }
              long long v31 = &v30[8 * v25];
              *(void *)long long v31 = v27;
              uint64_t v21 = v31 + 8;
              while (v20 != v24)
              {
                uint64_t v32 = *--v20;
                *((void *)v31 - 1) = v32;
                v31 -= 8;
              }
              *(void *)uint64_t v6 = v31;
              *(void *)(v6 + 8) = v21;
              *(void *)(v6 + 16) = &v30[8 * v29];
              if (v24) {
                operator delete(v24);
              }
            }
            else
            {
              *unint64_t v20 = v43;
              uint64_t v21 = v20 + 1;
            }
            *(void *)(v6 + 8) = v21;
          }
          else
          {
            uint64_t v11 = v8 + 96 * v7;
            double v12 = (double *)(v11 + 8);
            long long v13 = (double *)(v11 + 16);
            long long v14 = (int *)(v11 + 48);
            while (1)
            {
              uint64_t v15 = *v9;
              uint64_t v16 = **v2;
              sub_101171D90((uint64_t)buf);
              long double v17 = sub_101171810(*v12, *v13, *(double *)(v16 + 96 * v15 + 8), *(double *)(v16 + 96 * v15 + 16));
              int v18 = *(_DWORD *)(v16 + 96 * v15 + 48);
              v4 |= v17 <= (double)(v18 + *v14);
              if (v17 + (double)v18 <= (double)*v14) {
                break;
              }
              ++v9;
              uint64_t v2 = (uint64_t **)a1;
              if (v9 == v10) {
                goto LABEL_12;
              }
            }
            uint64_t v6 = a2;
            uint64_t v2 = (uint64_t **)a1;
          }
        }
        unint64_t v33 = (void *)v5[1];
        if (v33)
        {
          do
          {
            uint64_t v34 = v33;
            unint64_t v33 = (void *)*v33;
          }
          while (v33);
        }
        else
        {
          do
          {
            uint64_t v34 = (void *)v5[2];
            BOOL v35 = *v34 == (void)v5;
            long long v5 = v34;
          }
          while (!v35);
        }
        long long v5 = v34;
      }
      while (v34 != v44);
    }
    if ((unint64_t)v2[4] >= 2 && (v4 & 1) == 0)
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_1022FC0C8);
      }
      uint64_t v37 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_FAULT))
      {
        uint64_t v38 = v2[4];
        uint64_t v39 = v2[18];
        *(_DWORD *)buf = 134349312;
        *(void *)&uint8_t buf[4] = v38;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&buf[14] = v39;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_FAULT, "[WifiReachIntersection] no intersection for %{public}zu centroid(s) after passing pairwise intersection check %{public}f > 0; something is wrong",
          buf,
          0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_1022FC0C8);
        }
        double v41 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWifiReachIntersection::ReachIntersection::removeCentroidIndicesWithNestedAps(std::vector<size_t> &)", "%s\n", v41);
        if (v41 != buf) {
          free(v41);
        }
      }
      char v4 = 0;
    }
  }
  return v4 & 1;
}

uint64_t sub_100E494D8(double **a1, double *a2, double *a3)
{
  double v7 = (*a1)[1];
  double v6 = (*a1)[2];
  double v8 = **a1;
  double v9 = v8 - v6;
  double v10 = v8 + v6;
  __p = 0;
  long long v53 = 0;
  long long v54 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  double v51 = 0;
  if (v8 - v6 <= v8 + v6)
  {
    uint64_t v11 = 0;
    do
    {
      if (v11 >= v54)
      {
        long long v13 = (double *)__p;
        uint64_t v14 = ((char *)v11 - (unsigned char *)__p) >> 3;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61) {
          sub_1001D7FD4();
        }
        uint64_t v16 = (char *)v54 - (unsigned char *)__p;
        if (((char *)v54 - (unsigned char *)__p) >> 2 > v15) {
          unint64_t v15 = v16 >> 2;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          int v18 = (char *)sub_1000DA54C((uint64_t)&v54, v17);
          long long v13 = (double *)__p;
          uint64_t v11 = v53;
        }
        else
        {
          int v18 = 0;
        }
        unint64_t v19 = (double *)&v18[8 * v14];
        *unint64_t v19 = v9;
        double v12 = v19 + 1;
        while (v11 != v13)
        {
          uint64_t v20 = *((void *)v11-- - 1);
          *((void *)v19-- - 1) = v20;
        }
        __p = v19;
        long long v53 = v12;
        long long v54 = (double *)&v18[8 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        double *v11 = v9;
        double v12 = v11 + 1;
      }
      long long v53 = v12;
      double v9 = v9 + 1.0;
      uint64_t v11 = v12;
    }
    while (v9 <= v10);
  }
  double v21 = v7 - v6;
  double v22 = v6 + v7;
  if (v21 <= v22)
  {
    unint64_t v23 = v50;
    do
    {
      if (v23 >= v51)
      {
        uint64_t v25 = (double *)v49;
        uint64_t v26 = ((char *)v23 - (unsigned char *)v49) >> 3;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61) {
          sub_1001D7FD4();
        }
        uint64_t v28 = (char *)v51 - (unsigned char *)v49;
        if (((char *)v51 - (unsigned char *)v49) >> 2 > v27) {
          unint64_t v27 = v28 >> 2;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          long long v30 = (char *)sub_1000DA54C((uint64_t)&v51, v29);
          uint64_t v25 = (double *)v49;
          unint64_t v23 = v50;
        }
        else
        {
          long long v30 = 0;
        }
        long long v31 = (double *)&v30[8 * v26];
        *long long v31 = v21;
        long long v24 = v31 + 1;
        while (v23 != v25)
        {
          uint64_t v32 = *((void *)v23-- - 1);
          *((void *)v31-- - 1) = v32;
        }
        uint64_t v49 = v31;
        uint64_t v50 = v24;
        double v51 = (double *)&v30[8 * v29];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        double *v23 = v21;
        long long v24 = v23 + 1;
      }
      uint64_t v50 = v24;
      double v21 = v21 + 1.0;
      unint64_t v23 = v24;
    }
    while (v21 <= v22);
  }
  unint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  double v44 = 0.0;
  double v45 = 0.0;
  if ((sub_100E49AD4((double **)&__p, a1, (char **)&v46, &v45, 1) & 1) == 0)
  {
    uint64_t v42 = 0;
    uint64_t v34 = (double *)v46;
    if (!v46) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  int v33 = sub_100E49AD4((double **)&v49, a1, (char **)&v46, &v44, 0);
  uint64_t v34 = (double *)v46;
  if (!v33)
  {
    uint64_t v42 = 0;
    if (!v46) {
      goto LABEL_50;
    }
LABEL_49:
    uint64_t v47 = v34;
    operator delete(v34);
    goto LABEL_50;
  }
  double v36 = v44;
  double v35 = v45;
  *a2 = v45;
  a2[1] = v36;
  double v37 = 0.0;
  if (v34 != v47)
  {
    uint64_t v38 = v34;
    do
    {
      double v39 = *v38;
      double v40 = v38[1];
      v38 += 2;
      double v41 = (v35 - v39) * (v35 - v39) + (v36 - v40) * (v36 - v40);
      if (v37 < v41) {
        double v37 = v41;
      }
    }
    while (v38 != v47);
  }
  *a3 = sqrt(v37) / 3.0;
  uint64_t v42 = 1;
  if (v34) {
    goto LABEL_49;
  }
LABEL_50:
  if (v49)
  {
    uint64_t v50 = (double *)v49;
    operator delete(v49);
  }
  if (__p)
  {
    long long v53 = (double *)__p;
    operator delete(__p);
  }
  return v42;
}

void sub_100E49804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E49854(uint64_t a1, uint64_t a2)
{
  sub_100E4BC74(a2, (void *)a1);
  sub_100E486DC(*(uint64_t **)a1, (uint64_t)__p);
  sub_100E48780(a1 + 16, (void *)a1, (uint64_t)__p);
  sub_1000F5BB0((uint64_t)__p, (void *)__p[1]);
  sub_100134750(__p, "ff:ff:ff:ff:ff:ff");
  uint64_t v3 = sub_100B38F04((uint64_t)__p);
  sub_10106EB84(v3, a1 + 168);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(_WORD *)(a1 + 264) = 0;
  sub_100B803B4(a1 + 272);
  return a1;
}

void sub_100E498FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_100E49954(v16);
  int v18 = *(std::__shared_weak_count **)(v15 + 8);
  if (v18) {
    sub_1000DB0A0(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100E49954(uint64_t a1)
{
  sub_1000F5BB0(a1 + 16, *(void **)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

uint64_t sub_100E49994(uint64_t a1)
{
  return sub_100E48B30(a1 + 16);
}

__int16 *sub_100E4999C(__int16 *result, uint64_t a2)
{
  uint64_t v3 = result;
  result[132] = 0;
  if (!*((unsigned char *)result + 152)) {
    goto LABEL_14;
  }
  double result = (__int16 *)sub_10106EB1C((double *)result + 7);
  if (!result) {
    goto LABEL_14;
  }
  uint64_t v4 = **(void **)v3;
  uint64_t v5 = *(void *)(*(void *)v3 + 8);
  if (v4 == v5)
  {
    BOOL v9 = 1;
  }
  else
  {
    uint64_t v6 = v4 + 96;
    do
    {
      sub_101171D90((uint64_t)v14);
      long double v7 = sub_1000F1648(v14, *(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)(v6 - 88), *(double *)(v6 - 80), 0.0);
      long double v8 = (double)*(int *)(v6 - 48);
      BOOL v9 = v7 < v8;
      BOOL v10 = v7 >= v8 || v6 == v5;
      v6 += 96;
    }
    while (!v10);
  }
  *((unsigned char *)v3 + 265) = v9;
  *((unsigned char *)v3 + 264) = v9;
  uint64_t v11 = sub_101413054();
  double result = (__int16 *)sub_10141E05C((uint64_t)v11);
  if (result)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)v3 + 8) - **(void **)v3) >> 5);
    double result = sub_101413054();
    if (v12 > *((int *)result + 1))
    {
LABEL_14:
      *((unsigned char *)v3 + 264) = 1;
LABEL_15:
      *((_OWORD *)v3 + 11) = *(_OWORD *)(a2 + 4);
      uint64_t v13 = *(void *)(a2 + 20);
      goto LABEL_16;
    }
  }
  if (*((unsigned char *)v3 + 264)) {
    goto LABEL_15;
  }
  if (!*((unsigned char *)v3 + 152)) {
    sub_10020D700();
  }
  uint64_t v13 = *((void *)v3 + 11);
  *((_OWORD *)v3 + 11) = *((_OWORD *)v3 + 4);
LABEL_16:
  *((void *)v3 + 25) = v13;
  return result;
}

BOOL sub_100E49ABC(uint64_t a1)
{
  return *(unsigned char *)(a1 + 152) && sub_10106EB1C((double *)(a1 + 56));
}

uint64_t sub_100E49AD4(double **a1, double **a2, char **a3, double *a4, int a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1 == v6) {
    return 0;
  }
  BOOL v10 = a3 + 2;
  double v11 = 0.0;
  double v12 = 0.0;
  do
  {
    sub_100E49F0C(a2, a5, (double **)__p, *v5);
    double v52 = 0.0;
    double v53 = 0.0;
    if (!sub_100E4A2F4((float64x2_t **)a2, (float64x2_t **)__p, a5, &v52, &v53)) {
      goto LABEL_67;
    }
    uint64_t v14 = a3[1];
    uint64_t v13 = a3[2];
    if (a5)
    {
      double v15 = *v5;
      double v16 = v52;
      if (v14 >= v13)
      {
        uint64_t v20 = *a3;
        uint64_t v21 = (v14 - *a3) >> 4;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 60) {
          sub_1001D7FD4();
        }
        uint64_t v23 = v13 - v20;
        if (v23 >> 3 > v22) {
          unint64_t v22 = v23 >> 3;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          uint64_t v25 = (char *)sub_1000C571C((uint64_t)v10, v24);
          uint64_t v20 = *a3;
          uint64_t v14 = a3[1];
        }
        else
        {
          uint64_t v25 = 0;
        }
        uint64_t v32 = &v25[16 * v21];
        *(double *)uint64_t v32 = v15;
        *((double *)v32 + 1) = v16;
        int v33 = v32;
        if (v14 != v20)
        {
          do
          {
            *((_OWORD *)v33 - 1) = *((_OWORD *)v14 - 1);
            v33 -= 16;
            v14 -= 16;
          }
          while (v14 != v20);
          uint64_t v20 = *a3;
        }
        uint64_t v13 = &v25[16 * v24];
        unint64_t v17 = v32 + 16;
        *a3 = v33;
        a3[1] = v32 + 16;
        a3[2] = v13;
        if (v20)
        {
          operator delete(v20);
          uint64_t v13 = *v10;
        }
      }
      else
      {
        *(double *)uint64_t v14 = v15;
        *((double *)v14 + 1) = v16;
        unint64_t v17 = v14 + 16;
      }
      a3[1] = v17;
      double v34 = *v5;
      double v35 = v53;
      if (v17 >= v13)
      {
        double v36 = *a3;
        uint64_t v37 = (v17 - *a3) >> 4;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 60) {
          sub_1001D7FD4();
        }
        uint64_t v39 = v13 - v36;
        if (v39 >> 3 > v38) {
          unint64_t v38 = v39 >> 3;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v40 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40)
        {
          double v41 = (char *)sub_1000C571C((uint64_t)v10, v40);
          double v36 = *a3;
          unint64_t v17 = a3[1];
        }
        else
        {
          double v41 = 0;
        }
        uint64_t v48 = (double *)&v41[16 * v37];
        *uint64_t v48 = v34;
        v48[1] = v35;
        uint64_t v49 = v48;
        if (v17 == v36) {
          goto LABEL_64;
        }
        do
        {
          *((_OWORD *)v49 - 1) = *((_OWORD *)v17 - 1);
          v49 -= 2;
          v17 -= 16;
        }
        while (v17 != v36);
LABEL_63:
        double v36 = *a3;
LABEL_64:
        double v44 = (char *)(v48 + 2);
        *a3 = (char *)v49;
        a3[1] = (char *)(v48 + 2);
        a3[2] = &v41[16 * v40];
        if (v36) {
          operator delete(v36);
        }
        goto LABEL_66;
      }
    }
    else
    {
      double v18 = v52;
      double v19 = *v5;
      if (v14 >= v13)
      {
        uint64_t v26 = *a3;
        uint64_t v27 = (v14 - *a3) >> 4;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 60) {
          sub_1001D7FD4();
        }
        uint64_t v29 = v13 - v26;
        if (v29 >> 3 > v28) {
          unint64_t v28 = v29 >> 3;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30)
        {
          long long v31 = (char *)sub_1000C571C((uint64_t)v10, v30);
          uint64_t v26 = *a3;
          uint64_t v14 = a3[1];
        }
        else
        {
          long long v31 = 0;
        }
        uint64_t v42 = &v31[16 * v27];
        *(double *)uint64_t v42 = v18;
        *((double *)v42 + 1) = v19;
        uint64_t v43 = v42;
        if (v14 != v26)
        {
          do
          {
            *((_OWORD *)v43 - 1) = *((_OWORD *)v14 - 1);
            v43 -= 16;
            v14 -= 16;
          }
          while (v14 != v26);
          uint64_t v26 = *a3;
        }
        uint64_t v13 = &v31[16 * v30];
        unint64_t v17 = v42 + 16;
        *a3 = v43;
        a3[1] = v42 + 16;
        a3[2] = v13;
        if (v26)
        {
          operator delete(v26);
          uint64_t v13 = *v10;
        }
      }
      else
      {
        *(double *)uint64_t v14 = v52;
        *((double *)v14 + 1) = v19;
        unint64_t v17 = v14 + 16;
      }
      a3[1] = v17;
      double v34 = v53;
      double v35 = *v5;
      if (v17 >= v13)
      {
        double v36 = *a3;
        uint64_t v45 = (v17 - *a3) >> 4;
        unint64_t v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 60) {
          sub_1001D7FD4();
        }
        uint64_t v47 = v13 - v36;
        if (v47 >> 3 > v46) {
          unint64_t v46 = v47 >> 3;
        }
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v40 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v46;
        }
        if (v40)
        {
          double v41 = (char *)sub_1000C571C((uint64_t)v10, v40);
          double v36 = *a3;
          unint64_t v17 = a3[1];
        }
        else
        {
          double v41 = 0;
        }
        uint64_t v48 = (double *)&v41[16 * v45];
        *uint64_t v48 = v34;
        v48[1] = v35;
        uint64_t v49 = v48;
        if (v17 == v36) {
          goto LABEL_64;
        }
        do
        {
          *((_OWORD *)v49 - 1) = *((_OWORD *)v17 - 1);
          v49 -= 2;
          v17 -= 16;
        }
        while (v17 != v36);
        goto LABEL_63;
      }
    }
    *(double *)unint64_t v17 = v34;
    *((double *)v17 + 1) = v35;
    double v44 = v17 + 16;
LABEL_66:
    a3[1] = v44;
    double v11 = v11 + (v53 - v52) * *v5;
    double v12 = v12 + v53 - v52;
LABEL_67:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    ++v5;
  }
  while (v5 != v6);
  if (v12 != 0.0)
  {
    *a4 = v11 / v12;
    return 1;
  }
  return 0;
}

void sub_100E49ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E49F0C(double **a1@<X0>, int a2@<W1>, double **a3@<X8>, double a4@<D0>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    BOOL v9 = 0;
    BOOL v10 = (char **)(a3 + 2);
    do
    {
      double v11 = v4 + 1;
      if (a2) {
        double v12 = v4;
      }
      else {
        double v12 = v4 + 1;
      }
      double v13 = v4[2];
      if (vabdd_f64(*v12, a4) > v13) {
        goto LABEL_72;
      }
      double v14 = sqrt(v13 * v13 - (a4 - *v12) * (a4 - *v12));
      double v15 = *v10;
      if (a2)
      {
        double v16 = v14 + *v11;
        if (v9 >= (double *)v15)
        {
          double v19 = *a3;
          uint64_t v20 = ((char *)v9 - (char *)*a3) >> 4;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60) {
            sub_1001D7FD4();
          }
          uint64_t v22 = v15 - (char *)v19;
          if (v22 >> 3 > v21) {
            unint64_t v21 = v22 >> 3;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v21;
          }
          if (v23)
          {
            unint64_t v24 = (char *)sub_1000C571C((uint64_t)v10, v23);
            double v19 = *a3;
            BOOL v9 = a3[1];
          }
          else
          {
            unint64_t v24 = 0;
          }
          long long v31 = (double *)&v24[16 * v20];
          *long long v31 = a4;
          v31[1] = v16;
          uint64_t v32 = v31;
          if (v9 != v19)
          {
            do
            {
              *((_OWORD *)v32 - 1) = *((_OWORD *)v9 - 1);
              v32 -= 2;
              v9 -= 2;
            }
            while (v9 != v19);
            double v19 = *a3;
          }
          double v15 = &v24[16 * v23];
          unint64_t v17 = v31 + 2;
          *a3 = v32;
          a3[1] = v31 + 2;
          a3[2] = (double *)v15;
          if (v19)
          {
            operator delete(v19);
            double v15 = *v10;
          }
        }
        else
        {
          *BOOL v9 = a4;
          v9[1] = v16;
          unint64_t v17 = v9 + 2;
        }
        a3[1] = v17;
        double v33 = *v11 - v14;
        if (v17 >= (double *)v15)
        {
          double v34 = *a3;
          uint64_t v35 = ((char *)v17 - (char *)*a3) >> 4;
          unint64_t v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 60) {
            sub_1001D7FD4();
          }
          uint64_t v37 = v15 - (char *)v34;
          if (v37 >> 3 > v36) {
            unint64_t v36 = v37 >> 3;
          }
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v38 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v36;
          }
          if (v38)
          {
            uint64_t v39 = (char *)sub_1000C571C((uint64_t)v10, v38);
            double v34 = *a3;
            unint64_t v17 = a3[1];
          }
          else
          {
            uint64_t v39 = 0;
          }
          unint64_t v46 = (double *)&v39[16 * v35];
          *unint64_t v46 = a4;
          v46[1] = v33;
          uint64_t v47 = v46;
          if (v17 != v34)
          {
            do
            {
              *((_OWORD *)v47 - 1) = *((_OWORD *)v17 - 1);
              v47 -= 2;
              v17 -= 2;
            }
            while (v17 != v34);
            goto LABEL_68;
          }
          goto LABEL_69;
        }
        *unint64_t v17 = a4;
        v17[1] = v33;
      }
      else
      {
        double v18 = v14 + *v4;
        if (v9 >= (double *)v15)
        {
          uint64_t v25 = *a3;
          uint64_t v26 = ((char *)v9 - (char *)*a3) >> 4;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 60) {
            sub_1001D7FD4();
          }
          uint64_t v28 = v15 - (char *)v25;
          if (v28 >> 3 > v27) {
            unint64_t v27 = v28 >> 3;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v27;
          }
          if (v29)
          {
            unint64_t v30 = (char *)sub_1000C571C((uint64_t)v10, v29);
            uint64_t v25 = *a3;
            BOOL v9 = a3[1];
          }
          else
          {
            unint64_t v30 = 0;
          }
          unint64_t v40 = (double *)&v30[16 * v26];
          *unint64_t v40 = v18;
          v40[1] = a4;
          double v41 = v40;
          if (v9 != v25)
          {
            do
            {
              *((_OWORD *)v41 - 1) = *((_OWORD *)v9 - 1);
              v41 -= 2;
              v9 -= 2;
            }
            while (v9 != v25);
            uint64_t v25 = *a3;
          }
          double v15 = &v30[16 * v29];
          unint64_t v17 = v40 + 2;
          *a3 = v41;
          a3[1] = v40 + 2;
          a3[2] = (double *)v15;
          if (v25)
          {
            operator delete(v25);
            double v15 = *v10;
          }
        }
        else
        {
          *BOOL v9 = v18;
          v9[1] = a4;
          unint64_t v17 = v9 + 2;
        }
        a3[1] = v17;
        double v42 = *v4 - v14;
        if (v17 >= (double *)v15)
        {
          double v34 = *a3;
          uint64_t v43 = ((char *)v17 - (char *)*a3) >> 4;
          unint64_t v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 60) {
            sub_1001D7FD4();
          }
          uint64_t v45 = v15 - (char *)v34;
          if (v45 >> 3 > v44) {
            unint64_t v44 = v45 >> 3;
          }
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v38 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v44;
          }
          if (v38)
          {
            uint64_t v39 = (char *)sub_1000C571C((uint64_t)v10, v38);
            double v34 = *a3;
            unint64_t v17 = a3[1];
          }
          else
          {
            uint64_t v39 = 0;
          }
          unint64_t v46 = (double *)&v39[16 * v43];
          *unint64_t v46 = v42;
          v46[1] = a4;
          uint64_t v47 = v46;
          if (v17 != v34)
          {
            do
            {
              *((_OWORD *)v47 - 1) = *((_OWORD *)v17 - 1);
              v47 -= 2;
              v17 -= 2;
            }
            while (v17 != v34);
LABEL_68:
            double v34 = *a3;
          }
LABEL_69:
          BOOL v9 = v46 + 2;
          *a3 = v47;
          a3[1] = v46 + 2;
          a3[2] = (double *)&v39[16 * v38];
          if (v34) {
            operator delete(v34);
          }
          goto LABEL_71;
        }
        *unint64_t v17 = v42;
        v17[1] = a4;
      }
      BOOL v9 = v17 + 2;
LABEL_71:
      a3[1] = v9;
LABEL_72:
      v4 += 3;
    }
    while (v4 != v5);
  }
}

void sub_100E4A2BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E4A2F4(float64x2_t **a1, float64x2_t **a2, int a3, double *a4, double *a5)
{
  *a5 = -1.79769313e308;
  *a4 = 1.79769313e308;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    char v7 = 0;
  }
  else
  {
    char v7 = 0;
    long double v8 = *a1;
    BOOL v9 = a1[1];
    do
    {
      if (v8 == v9)
      {
LABEL_7:
        double v12 = &v5->f64[1];
        if (!a3) {
          double v12 = (double *)v5;
        }
        double v13 = *v12;
        double v14 = *a5;
        if (*a5 < *v12) {
          double v14 = *v12;
        }
        *a5 = v14;
        if (v13 >= *a4) {
          double v13 = *a4;
        }
        *a4 = v13;
        char v7 = 1;
      }
      else
      {
        BOOL v10 = v8;
        while (1)
        {
          float64x2_t v11 = vsubq_f64(*v10, *v5);
          if (vaddvq_f64(vmulq_f64(v11, v11)) - v10[1].f64[0] * v10[1].f64[0] >= 0.01) {
            break;
          }
          BOOL v10 = (float64x2_t *)((char *)v10 + 24);
          if (v10 == v9) {
            goto LABEL_7;
          }
        }
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return v7 & 1;
}

void sub_100E4A3B0(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 152) && (uint64_t v4 = (_OWORD *)(a1 + 56), sub_10106EB1C((double *)(a1 + 56))))
  {
    if (!*(unsigned char *)(a1 + 152)) {
      sub_10020D700();
    }
    long long v5 = v4[3];
    a2[2] = v4[2];
    a2[3] = v5;
    long long v6 = v4[5];
    a2[4] = v4[4];
    a2[5] = v6;
    long long v7 = v4[1];
    *a2 = *v4;
    a2[1] = v7;
  }
  else
  {
    sub_100134750(__p, "ff:ff:ff:ff:ff:ff");
    uint64_t v8 = sub_100B38F04((uint64_t)__p);
    sub_10106EB84(v8, (uint64_t)a2);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100E4A454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100E4A470(uint64_t a1, _OWORD *a2)
{
  long long v4 = a2[7];
  long long v30 = a2[6];
  long long v31 = v4;
  v32[0] = a2[8];
  *(_OWORD *)((char *)v32 + 12) = *(_OWORD *)((char *)a2 + 140);
  long long v5 = a2[3];
  long long v26 = a2[2];
  long long v27 = v5;
  long long v6 = a2[5];
  long long v28 = a2[4];
  long long v29 = v6;
  long long v7 = a2[1];
  *(_OWORD *)uint64_t v25 = *a2;
  *(_OWORD *)&v25[16] = v7;
  sub_100E4A3B0(a1, &v22);
  *(_OWORD *)&v25[4] = v23;
  *(void *)&v25[20] = v24;
  long long v8 = a2[5];
  long long v17 = a2[4];
  long long v18 = v8;
  long long v9 = a2[3];
  long long v15 = a2[2];
  long long v16 = v9;
  *(_OWORD *)&v21[12] = *(_OWORD *)((char *)a2 + 140);
  long long v10 = a2[8];
  long long v11 = a2[6];
  long long v20 = a2[7];
  *(_OWORD *)unint64_t v21 = v10;
  long long v19 = v11;
  long long v12 = a2[1];
  *(_OWORD *)double v14 = *a2;
  *(_OWORD *)&v14[16] = v12;
  *(_OWORD *)&v14[4] = *(_OWORD *)(a1 + 176);
  *(void *)&v14[20] = *(void *)(a1 + 200);
  sub_100B80750(a1 + 272, (uint64_t)a2, (uint64_t)v25, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 5), (uint64_t)v14, *(unsigned char *)(a1 + 264), *(unsigned char *)(a1 + 265), *(double *)(a1 + 160));
  return result;
}

void sub_100E4A578(uint64_t a1, long long *a2, char *a3)
{
  if (sub_100B803B8((uint64_t)a2))
  {
    sub_100B803D4(a1 + 272, a2, a3);
  }
}

BOOL sub_100E4A5E0(uint64_t a1, uint64_t a2)
{
  int v4 = (unsigned __int16)*sub_101413054();
  if (v4 == 2)
  {
    BOOL result = sub_10106EB1C((double *)(a1 + 168));
    if (result)
    {
      *(_OWORD *)(a2 + 4) = *(_OWORD *)(a1 + 176);
      *(void *)(a2 + 20) = *(void *)(a1 + 200);
      *(_WORD *)(a2 + 182) = 2;
      if (!*(unsigned char *)(a1 + 264)) {
        *(_DWORD *)(a2 + 156) = -1431655765 * ((*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 5);
      }
      return 1;
    }
  }
  else if (v4 == 1 && *(unsigned char *)(a1 + 152))
  {
    BOOL result = sub_10106EB1C((double *)(a1 + 56));
    if (result)
    {
      sub_100E4A3B0(a1, v6);
      *(_OWORD *)(a2 + 4) = *(_OWORD *)&v6[8];
      *(void *)(a2 + 20) = v7;
      *(_DWORD *)(a2 + 156) = -1431655765 * ((*(void *)(*(void *)a1 + 8) - **(void **)a1) >> 5);
      BOOL result = 1;
      *(_WORD *)(a2 + 182) = 1;
    }
  }
  else
  {
    return 0;
  }
  return result;
}

void sub_100E4A6D8(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_100E4A708(unint64_t a1, __n128 *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v10) >> 5);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if ((signed __int32)a2[-3].n128_u32[0] < *(_DWORD *)(v10 + 48))
                {
                  __n128 v145 = *(__n128 *)v10;
                  __n128 v157 = *(__n128 *)(v10 + 16);
                  __n128 v190 = *(__n128 *)(v10 + 64);
                  __n128 v199 = *(__n128 *)(v10 + 80);
                  __n128 v169 = *(__n128 *)(v10 + 32);
                  __n128 v181 = *(__n128 *)(v10 + 48);
                  __n128 v62 = a2[-1];
                  __n128 v64 = a2[-4];
                  __n128 v63 = a2[-3];
                  *(__n128 *)(v10 + 64) = a2[-2];
                  *(__n128 *)(v10 + 80) = v62;
                  *(__n128 *)(v10 + 32) = v64;
                  *(__n128 *)(v10 + 48) = v63;
                  __n128 v65 = a2[-5];
                  *(__n128 *)unint64_t v10 = a2[-6];
                  *(__n128 *)(v10 + 16) = v65;
                  a2[-6] = v145;
                  a2[-5] = v157;
                  a2[-2] = v190;
                  a2[-1] = v199;
                  a2[-4] = v169;
                  a2[-3] = v181;
                }
                break;
              case 3uLL:
                sub_100E4B2F0((__n128 *)v10, (__n128 *)(v10 + 96), a2 - 6);
                break;
              case 4uLL:
                sub_100E4B870((__n128 *)v10, (__n128 *)(v10 + 96), (__n128 *)(v10 + 192), a2 - 6);
                break;
              case 5uLL:
                v66 = (__n128 *)(v10 + 96);
                int v67 = (__n128 *)(v10 + 192);
                long long v68 = (__n128 *)(v10 + 288);
                sub_100E4B870((__n128 *)v10, (__n128 *)(v10 + 96), (__n128 *)(v10 + 192), (__n128 *)(v10 + 288));
                if ((signed __int32)a2[-3].n128_u32[0] < *(_DWORD *)(v10 + 336))
                {
                  __n128 v170 = *(__n128 *)(v10 + 320);
                  __n128 v182 = *(__n128 *)(v10 + 336);
                  __n128 v191 = *(__n128 *)(v10 + 352);
                  __n128 v200 = *(__n128 *)(v10 + 368);
                  __n128 v146 = *v68;
                  __n128 v158 = *(__n128 *)(v10 + 304);
                  __n128 v69 = a2[-5];
                  __n128 *v68 = a2[-6];
                  *(__n128 *)(v10 + 304) = v69;
                  __n128 v70 = a2[-1];
                  __n128 v72 = a2[-4];
                  __n128 v71 = a2[-3];
                  *(__n128 *)(v10 + 352) = a2[-2];
                  *(__n128 *)(v10 + 368) = v70;
                  *(__n128 *)(v10 + 320) = v72;
                  *(__n128 *)(v10 + 336) = v71;
                  a2[-6] = v146;
                  a2[-5] = v158;
                  a2[-2] = v191;
                  a2[-1] = v200;
                  a2[-4] = v170;
                  a2[-3] = v182;
                  if (*(_DWORD *)(v10 + 336) < *(_DWORD *)(v10 + 240))
                  {
                    long long v171 = *(_OWORD *)(v10 + 224);
                    long long v183 = *(_OWORD *)(v10 + 240);
                    long long v192 = *(_OWORD *)(v10 + 256);
                    long long v201 = *(_OWORD *)(v10 + 272);
                    __n128 v147 = *v67;
                    long long v159 = *(_OWORD *)(v10 + 208);
                    long long v73 = *(_OWORD *)(v10 + 336);
                    *(_OWORD *)(v10 + 224) = *(_OWORD *)(v10 + 320);
                    *(_OWORD *)(v10 + 240) = v73;
                    long long v74 = *(_OWORD *)(v10 + 368);
                    *(_OWORD *)(v10 + 256) = *(_OWORD *)(v10 + 352);
                    *(_OWORD *)(v10 + 272) = v74;
                    long long v75 = *(_OWORD *)(v10 + 304);
                    *int v67 = *v68;
                    *(_OWORD *)(v10 + 208) = v75;
                    __n128 *v68 = v147;
                    *(_OWORD *)(v10 + 304) = v159;
                    *(_OWORD *)(v10 + 352) = v192;
                    *(_OWORD *)(v10 + 368) = v201;
                    *(_OWORD *)(v10 + 320) = v171;
                    *(_OWORD *)(v10 + 336) = v183;
                    if (*(_DWORD *)(v10 + 240) < *(_DWORD *)(v10 + 144))
                    {
                      long long v172 = *(_OWORD *)(v10 + 128);
                      long long v184 = *(_OWORD *)(v10 + 144);
                      long long v193 = *(_OWORD *)(v10 + 160);
                      long long v202 = *(_OWORD *)(v10 + 176);
                      __n128 v148 = *v66;
                      long long v160 = *(_OWORD *)(v10 + 112);
                      long long v76 = *(_OWORD *)(v10 + 240);
                      *(_OWORD *)(v10 + 128) = *(_OWORD *)(v10 + 224);
                      *(_OWORD *)(v10 + 144) = v76;
                      long long v77 = *(_OWORD *)(v10 + 272);
                      *(_OWORD *)(v10 + 160) = *(_OWORD *)(v10 + 256);
                      *(_OWORD *)(v10 + 176) = v77;
                      long long v78 = *(_OWORD *)(v10 + 208);
                      __n128 *v66 = *v67;
                      *(_OWORD *)(v10 + 112) = v78;
                      *int v67 = v148;
                      *(_OWORD *)(v10 + 208) = v160;
                      *(_OWORD *)(v10 + 256) = v193;
                      *(_OWORD *)(v10 + 272) = v202;
                      *(_OWORD *)(v10 + 224) = v172;
                      *(_OWORD *)(v10 + 240) = v184;
                      if (*(_DWORD *)(v10 + 144) < *(_DWORD *)(v10 + 48))
                      {
                        __n128 v149 = *(__n128 *)v10;
                        long long v161 = *(_OWORD *)(v10 + 16);
                        long long v194 = *(_OWORD *)(v10 + 64);
                        long long v203 = *(_OWORD *)(v10 + 80);
                        long long v173 = *(_OWORD *)(v10 + 32);
                        long long v185 = *(_OWORD *)(v10 + 48);
                        long long v79 = *(_OWORD *)(v10 + 176);
                        *(_OWORD *)(v10 + 64) = *(_OWORD *)(v10 + 160);
                        *(_OWORD *)(v10 + 80) = v79;
                        long long v80 = *(_OWORD *)(v10 + 144);
                        *(_OWORD *)(v10 + 32) = *(_OWORD *)(v10 + 128);
                        *(_OWORD *)(v10 + 48) = v80;
                        long long v81 = *(_OWORD *)(v10 + 112);
                        *(__n128 *)unint64_t v10 = *v66;
                        *(_OWORD *)(v10 + 16) = v81;
                        __n128 *v66 = v149;
                        *(_OWORD *)(v10 + 112) = v161;
                        *(_OWORD *)(v10 + 160) = v194;
                        *(_OWORD *)(v10 + 176) = v203;
                        *(_OWORD *)(v10 + 128) = v173;
                        *(_OWORD *)(v10 + 144) = v185;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 2303)
          {
            int v82 = (__n128 *)(v10 + 96);
            BOOL v84 = (__n128 *)v10 == a2 || v82 == a2;
            if (a4)
            {
              if (!v84)
              {
                uint64_t v85 = 0;
                int v86 = (_OWORD *)v10;
                do
                {
                  int v87 = v82;
                  int v88 = *((_DWORD *)v86 + 36);
                  if (v88 < *((_DWORD *)v86 + 12))
                  {
                    __n128 v162 = v87[1];
                    __n128 v174 = v87[2];
                    __n128 v150 = *v87;
                    long long v213 = *(_OWORD *)((char *)v86 + 148);
                    long long v219 = *(_OWORD *)((char *)v86 + 164);
                    long long v89 = v86[11];
                    uint64_t v90 = v85;
                    HIDWORD(v219) = v89;
                    while (1)
                    {
                      v91 = (_OWORD *)(v10 + v90);
                      long long v92 = *(_OWORD *)(v10 + v90 + 48);
                      v91[8] = *(_OWORD *)(v10 + v90 + 32);
                      v91[9] = v92;
                      long long v93 = *(_OWORD *)(v10 + v90 + 80);
                      v91[10] = *(_OWORD *)(v10 + v90 + 64);
                      v91[11] = v93;
                      long long v94 = *(_OWORD *)(v10 + v90 + 16);
                      v91[6] = *(_OWORD *)(v10 + v90);
                      v91[7] = v94;
                      if (!v90) {
                        break;
                      }
                      v90 -= 96;
                      if (v88 >= *((_DWORD *)v91 - 12))
                      {
                        uint64_t v95 = v10 + v90 + 96;
                        goto LABEL_83;
                      }
                    }
                    uint64_t v95 = v10;
LABEL_83:
                    *(__n128 *)uint64_t v95 = v150;
                    *(__n128 *)(v95 + 16) = v162;
                    *(__n128 *)(v95 + 32) = v174;
                    *(_DWORD *)(v95 + 48) = v88;
                    *(_OWORD *)(v95 + 52) = v213;
                    *(_OWORD *)(v95 + 68) = v219;
                    *(_OWORD *)(v95 + 80) = v89;
                  }
                  int v82 = v87 + 6;
                  v85 += 96;
                  int v86 = v87;
                }
                while (&v87[6] != a2);
              }
            }
            else if (!v84)
            {
              do
              {
                int v136 = v82;
                signed __int32 v137 = *(_DWORD *)(a1 + 144);
                if (v137 < *(_DWORD *)(a1 + 48))
                {
                  __n128 v165 = v82[1];
                  __n128 v177 = v82[2];
                  __n128 v153 = *v82;
                  __n128 v216 = *(__n128 *)(a1 + 148);
                  *(_OWORD *)int v222 = *(_OWORD *)(a1 + 164);
                  *(_OWORD *)&v222[12] = *(_OWORD *)(a1 + 176);
                  do
                  {
                    __n128 v138 = v82[-3];
                    v82[2] = v82[-4];
                    v82[3] = v138;
                    __n128 v139 = v82[-1];
                    v82[4] = v82[-2];
                    v82[5] = v139;
                    __n128 v140 = v82[-5];
                    *int v82 = v82[-6];
                    v82[1] = v140;
                    __int32 v141 = v82[-9].n128_i32[0];
                    v82 -= 6;
                  }
                  while (v137 < v141);
                  *int v82 = v153;
                  v82[1] = v165;
                  v82[2] = v177;
                  v82[3].n128_u32[0] = v137;
                  v82[5] = *(__n128 *)&v222[12];
                  *(__n128 *)((char *)v82 + 68) = *(__n128 *)v222;
                  *(__n128 *)((char *)v82 + 52) = v216;
                }
                int v82 = v136 + 6;
                a1 = (unint64_t)v136;
              }
              while (&v136[6] != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((__n128 *)v10 != a2)
            {
              int64_t v96 = (v12 - 2) >> 1;
              int64_t v97 = v96;
              do
              {
                int64_t v98 = v97;
                if (v96 >= v97)
                {
                  uint64_t v99 = (2 * v97) | 1;
                  unint64_t v100 = v10 + 96 * v99;
                  if (2 * v97 + 2 < (uint64_t)v12)
                  {
                    BOOL v101 = *(_DWORD *)(v100 + 48) < *(_DWORD *)(v100 + 144);
                    v100 += 96 * v101;
                    if (v101) {
                      uint64_t v99 = 2 * v97 + 2;
                    }
                  }
                  unint64_t v102 = v10 + 96 * v97;
                  int v103 = *(_DWORD *)(v102 + 48);
                  if (*(_DWORD *)(v100 + 48) >= v103)
                  {
                    long long v163 = *(_OWORD *)(v102 + 16);
                    long long v175 = *(_OWORD *)(v102 + 32);
                    long long v151 = *(_OWORD *)v102;
                    *(_OWORD *)&v220[12] = *(_OWORD *)(v102 + 80);
                    long long v214 = *(_OWORD *)(v102 + 52);
                    *(_OWORD *)int v220 = *(_OWORD *)(v102 + 68);
                    do
                    {
                      __int16 v104 = (_OWORD *)v102;
                      unint64_t v102 = v100;
                      long long v105 = *(_OWORD *)(v100 + 16);
                      *__int16 v104 = *(_OWORD *)v100;
                      v104[1] = v105;
                      long long v106 = *(_OWORD *)(v100 + 32);
                      long long v107 = *(_OWORD *)(v100 + 48);
                      long long v108 = *(_OWORD *)(v100 + 80);
                      v104[4] = *(_OWORD *)(v100 + 64);
                      v104[5] = v108;
                      v104[2] = v106;
                      v104[3] = v107;
                      if (v96 < v99) {
                        break;
                      }
                      uint64_t v109 = (2 * v99) | 1;
                      unint64_t v100 = v10 + 96 * v109;
                      uint64_t v110 = 2 * v99 + 2;
                      if (v110 < (uint64_t)v12)
                      {
                        BOOL v101 = *(_DWORD *)(v100 + 48) < *(_DWORD *)(v100 + 144);
                        v100 += 96 * v101;
                        if (v101) {
                          uint64_t v109 = v110;
                        }
                      }
                      uint64_t v99 = v109;
                    }
                    while (*(_DWORD *)(v100 + 48) >= v103);
                    *(_OWORD *)unint64_t v102 = v151;
                    *(_OWORD *)(v102 + 16) = v163;
                    *(_OWORD *)(v102 + 32) = v175;
                    *(_DWORD *)(v102 + 48) = v103;
                    *(_OWORD *)(v102 + 52) = v214;
                    *(_OWORD *)(v102 + 68) = *(_OWORD *)v220;
                    *(_OWORD *)(v102 + 80) = *(_OWORD *)&v220[12];
                  }
                }
                int64_t v97 = v98 - 1;
              }
              while (v98);
              int64_t v111 = v11 / 0x60uLL;
              do
              {
                uint64_t v112 = 0;
                __n128 v152 = *(__n128 *)v10;
                __n128 v164 = *(__n128 *)(v10 + 16);
                __n128 v195 = *(__n128 *)(v10 + 64);
                __n128 v204 = *(__n128 *)(v10 + 80);
                __n128 v176 = *(__n128 *)(v10 + 32);
                __n128 v186 = *(__n128 *)(v10 + 48);
                v113 = (_OWORD *)v10;
                do
                {
                  uint64_t v114 = (uint64_t)&v113[6 * v112 + 6];
                  uint64_t v115 = (2 * v112) | 1;
                  uint64_t v116 = 2 * v112 + 2;
                  if (v116 < v111)
                  {
                    int v117 = *(_DWORD *)(v114 + 48);
                    int v118 = *(_DWORD *)(v114 + 144);
                    v114 += 96 * (v117 < v118);
                    if (v117 < v118) {
                      uint64_t v115 = v116;
                    }
                  }
                  long long v119 = *(_OWORD *)(v114 + 16);
                  _OWORD *v113 = *(_OWORD *)v114;
                  v113[1] = v119;
                  long long v120 = *(_OWORD *)(v114 + 32);
                  long long v121 = *(_OWORD *)(v114 + 48);
                  long long v122 = *(_OWORD *)(v114 + 80);
                  v113[4] = *(_OWORD *)(v114 + 64);
                  v113[5] = v122;
                  v113[2] = v120;
                  v113[3] = v121;
                  v113 = (_OWORD *)v114;
                  uint64_t v112 = v115;
                }
                while (v115 <= (uint64_t)((unint64_t)(v111 - 2) >> 1));
                a2 -= 6;
                if ((__n128 *)v114 == a2)
                {
                  *(__n128 *)uint64_t v114 = v152;
                  *(__n128 *)(v114 + 16) = v164;
                  *(__n128 *)(v114 + 64) = v195;
                  *(__n128 *)(v114 + 80) = v204;
                  *(__n128 *)(v114 + 32) = v176;
                  *(__n128 *)(v114 + 48) = v186;
                }
                else
                {
                  __n128 v123 = a2[1];
                  *(__n128 *)uint64_t v114 = *a2;
                  *(__n128 *)(v114 + 16) = v123;
                  __n128 v124 = a2[2];
                  __n128 v125 = a2[3];
                  __n128 v126 = a2[5];
                  *(__n128 *)(v114 + 64) = a2[4];
                  *(__n128 *)(v114 + 80) = v126;
                  *(__n128 *)(v114 + 32) = v124;
                  *(__n128 *)(v114 + 48) = v125;
                  a2[4] = v195;
                  a2[5] = v204;
                  a2[2] = v176;
                  a2[3] = v186;
                  *a2 = v152;
                  a2[1] = v164;
                  uint64_t v127 = v114 - v10 + 96;
                  if (v127 >= 97)
                  {
                    unint64_t v128 = (v127 / 0x60uLL - 2) >> 1;
                    v129 = (_OWORD *)(v10 + 96 * v128);
                    int v130 = *(_DWORD *)(v114 + 48);
                    if (*((_DWORD *)v129 + 12) < v130)
                    {
                      long long v221 = *(_OWORD *)(v114 + 16);
                      long long v225 = *(_OWORD *)(v114 + 32);
                      long long v215 = *(_OWORD *)v114;
                      *(_OWORD *)&v210[12] = *(_OWORD *)(v114 + 80);
                      long long v207 = *(_OWORD *)(v114 + 52);
                      *(_OWORD *)int v210 = *(_OWORD *)(v114 + 68);
                      do
                      {
                        int v131 = (_OWORD *)v114;
                        uint64_t v114 = (uint64_t)v129;
                        long long v132 = v129[1];
                        *int v131 = *v129;
                        v131[1] = v132;
                        long long v133 = v129[2];
                        long long v134 = v129[3];
                        long long v135 = v129[5];
                        v131[4] = v129[4];
                        v131[5] = v135;
                        v131[2] = v133;
                        v131[3] = v134;
                        if (!v128) {
                          break;
                        }
                        unint64_t v128 = (v128 - 1) >> 1;
                        v129 = (_OWORD *)(v10 + 96 * v128);
                      }
                      while (*((_DWORD *)v129 + 12) < v130);
                      *(_OWORD *)uint64_t v114 = v215;
                      *(_OWORD *)(v114 + 16) = v221;
                      *(_OWORD *)(v114 + 32) = v225;
                      *(_DWORD *)(v114 + 48) = v130;
                      *(_OWORD *)(v114 + 52) = v207;
                      *(_OWORD *)(v114 + 68) = *(_OWORD *)v210;
                      *(_OWORD *)(v114 + 80) = *(_OWORD *)&v210[12];
                    }
                  }
                }
                BOOL v101 = v111-- <= 2;
              }
              while (!v101);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 96 * (v12 >> 1);
          if ((unint64_t)v11 > 0x3000)
          {
            sub_100E4B2F0((__n128 *)a1, (__n128 *)(a1 + 96 * (v12 >> 1)), a2 - 6);
            uint64_t v15 = 3 * v13;
            long long v16 = (__n128 *)(a1 + 96 * v13 - 96);
            sub_100E4B2F0((__n128 *)(a1 + 96), v16, a2 - 12);
            long long v17 = (__n128 *)(a1 + 96 + 32 * v15);
            sub_100E4B2F0((__n128 *)(a1 + 192), v17, a2 - 18);
            sub_100E4B2F0(v16, (__n128 *)v14, v17);
            __n128 v142 = *(__n128 *)a1;
            long long v154 = *(_OWORD *)(a1 + 16);
            long long v187 = *(_OWORD *)(a1 + 64);
            long long v196 = *(_OWORD *)(a1 + 80);
            long long v166 = *(_OWORD *)(a1 + 32);
            long long v178 = *(_OWORD *)(a1 + 48);
            long long v18 = *(_OWORD *)(v14 + 80);
            long long v20 = *(_OWORD *)(v14 + 32);
            long long v19 = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(a1 + 64) = *(_OWORD *)(v14 + 64);
            *(_OWORD *)(a1 + 80) = v18;
            *(_OWORD *)(a1 + 32) = v20;
            *(_OWORD *)(a1 + 48) = v19;
            long long v21 = *(_OWORD *)(v14 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_OWORD *)(a1 + 16) = v21;
            *(__n128 *)unint64_t v14 = v142;
            *(_OWORD *)(v14 + 16) = v154;
            *(_OWORD *)(v14 + 64) = v187;
            *(_OWORD *)(v14 + 80) = v196;
            *(_OWORD *)(v14 + 32) = v166;
            *(_OWORD *)(v14 + 48) = v178;
          }
          else
          {
            sub_100E4B2F0((__n128 *)(a1 + 96 * (v12 >> 1)), (__n128 *)a1, a2 - 6);
          }
          --a3;
          if (a4) {
            break;
          }
          signed __int32 v22 = *(_DWORD *)(a1 + 48);
          if (*(_DWORD *)(a1 - 48) < v22) {
            goto LABEL_12;
          }
          long long v218 = *(_OWORD *)(a1 + 16);
          long long v224 = *(_OWORD *)(a1 + 32);
          __n128 v212 = *(__n128 *)a1;
          long long v206 = *(_OWORD *)(a1 + 52);
          *(_OWORD *)v209 = *(_OWORD *)(a1 + 68);
          *(_OWORD *)&v209[12] = *(_OWORD *)(a1 + 80);
          if (v22 >= (signed __int32)a2[-3].n128_u32[0])
          {
            unint64_t v46 = a1 + 96;
            do
            {
              unint64_t v10 = v46;
              if (v46 >= (unint64_t)a2) {
                break;
              }
              signed __int32 v47 = *(_DWORD *)(v46 + 48);
              v46 += 96;
            }
            while (v22 >= v47);
          }
          else
          {
            unint64_t v44 = a1;
            do
            {
              unint64_t v10 = v44 + 96;
              signed __int32 v45 = *(_DWORD *)(v44 + 144);
              v44 += 96;
            }
            while (v22 >= v45);
          }
          uint64_t v48 = a2;
          if (v10 < (unint64_t)a2)
          {
            uint64_t v49 = a2;
            do
            {
              uint64_t v48 = v49 - 6;
              signed __int32 v50 = v49[-3].n128_i32[0];
              v49 -= 6;
            }
            while (v22 < v50);
          }
          while (v10 < (unint64_t)v48)
          {
            __n128 v144 = *(__n128 *)v10;
            __n128 v156 = *(__n128 *)(v10 + 16);
            __n128 v189 = *(__n128 *)(v10 + 64);
            __n128 v198 = *(__n128 *)(v10 + 80);
            __n128 v168 = *(__n128 *)(v10 + 32);
            __n128 v180 = *(__n128 *)(v10 + 48);
            __n128 v51 = v48[5];
            __n128 v53 = v48[2];
            __n128 v52 = v48[3];
            *(__n128 *)(v10 + 64) = v48[4];
            *(__n128 *)(v10 + 80) = v51;
            *(__n128 *)(v10 + 32) = v53;
            *(__n128 *)(v10 + 48) = v52;
            __n128 v54 = v48[1];
            *(__n128 *)unint64_t v10 = *v48;
            *(__n128 *)(v10 + 16) = v54;
            *uint64_t v48 = v144;
            v48[1] = v156;
            v48[4] = v189;
            v48[5] = v198;
            v48[2] = v168;
            v48[3] = v180;
            do
            {
              signed __int32 v55 = *(_DWORD *)(v10 + 144);
              v10 += 96;
            }
            while (v22 >= v55);
            do
            {
              signed __int32 v56 = v48[-3].n128_i32[0];
              v48 -= 6;
            }
            while (v22 < v56);
          }
          long long v57 = (__n128 *)(v10 - 96);
          BOOL v4 = v10 - 96 >= a1;
          BOOL v5 = v10 - 96 == a1;
          if (v10 - 96 != a1)
          {
            long long v58 = *(_OWORD *)(v10 - 80);
            *(__n128 *)a1 = *v57;
            *(_OWORD *)(a1 + 16) = v58;
            long long v59 = *(_OWORD *)(v10 - 64);
            long long v60 = *(_OWORD *)(v10 - 48);
            long long v61 = *(_OWORD *)(v10 - 16);
            *(_OWORD *)(a1 + 64) = *(_OWORD *)(v10 - 32);
            *(_OWORD *)(a1 + 80) = v61;
            *(_OWORD *)(a1 + 32) = v59;
            *(_OWORD *)(a1 + 48) = v60;
          }
          a4 = 0;
          *long long v57 = v212;
          *(_OWORD *)(v10 - 80) = v218;
          *(_OWORD *)(v10 - 64) = v224;
          *(_DWORD *)(v10 - 48) = v22;
          *(_OWORD *)(v10 - 16) = *(_OWORD *)&v209[12];
          *(_OWORD *)(v10 - 28) = *(_OWORD *)v209;
          *(_OWORD *)(v10 - 44) = v206;
        }
        signed __int32 v22 = *(_DWORD *)(a1 + 48);
LABEL_12:
        uint64_t v23 = 0;
        long long v217 = *(_OWORD *)(a1 + 16);
        long long v223 = *(_OWORD *)(a1 + 32);
        __n128 v211 = *(__n128 *)a1;
        long long v205 = *(_OWORD *)(a1 + 52);
        *(_OWORD *)int v208 = *(_OWORD *)(a1 + 68);
        *(_OWORD *)&v208[12] = *(_OWORD *)(a1 + 80);
        do
        {
          signed __int32 v24 = *(_DWORD *)(a1 + v23 + 144);
          v23 += 96;
        }
        while (v24 < v22);
        unint64_t v25 = a1 + v23;
        long long v26 = a2;
        if (v23 == 96)
        {
          long long v29 = a2;
          while (v25 < (unint64_t)v29)
          {
            long long v27 = v29 - 6;
            signed __int32 v30 = v29[-3].n128_i32[0];
            v29 -= 6;
            if (v30 < v22) {
              goto LABEL_22;
            }
          }
          long long v27 = v29;
        }
        else
        {
          do
          {
            long long v27 = v26 - 6;
            signed __int32 v28 = v26[-3].n128_i32[0];
            v26 -= 6;
          }
          while (v28 >= v22);
        }
LABEL_22:
        unint64_t v10 = v25;
        if (v25 < (unint64_t)v27)
        {
          long long v31 = v27;
          do
          {
            __n128 v143 = *(__n128 *)v10;
            __n128 v155 = *(__n128 *)(v10 + 16);
            __n128 v188 = *(__n128 *)(v10 + 64);
            __n128 v197 = *(__n128 *)(v10 + 80);
            __n128 v167 = *(__n128 *)(v10 + 32);
            __n128 v179 = *(__n128 *)(v10 + 48);
            __n128 v32 = v31[5];
            __n128 v34 = v31[2];
            __n128 v33 = v31[3];
            *(__n128 *)(v10 + 64) = v31[4];
            *(__n128 *)(v10 + 80) = v32;
            *(__n128 *)(v10 + 32) = v34;
            *(__n128 *)(v10 + 48) = v33;
            __n128 v35 = v31[1];
            *(__n128 *)unint64_t v10 = *v31;
            *(__n128 *)(v10 + 16) = v35;
            *long long v31 = v143;
            v31[1] = v155;
            v31[4] = v188;
            v31[5] = v197;
            v31[2] = v167;
            v31[3] = v179;
            do
            {
              signed __int32 v36 = *(_DWORD *)(v10 + 144);
              v10 += 96;
            }
            while (v36 < v22);
            do
            {
              signed __int32 v37 = v31[-3].n128_i32[0];
              v31 -= 6;
            }
            while (v37 >= v22);
          }
          while (v10 < (unint64_t)v31);
        }
        unint64_t v38 = (__n128 *)(v10 - 96);
        if (v10 - 96 != a1)
        {
          long long v39 = *(_OWORD *)(v10 - 80);
          *(__n128 *)a1 = *v38;
          *(_OWORD *)(a1 + 16) = v39;
          long long v40 = *(_OWORD *)(v10 - 64);
          long long v41 = *(_OWORD *)(v10 - 48);
          long long v42 = *(_OWORD *)(v10 - 16);
          *(_OWORD *)(a1 + 64) = *(_OWORD *)(v10 - 32);
          *(_OWORD *)(a1 + 80) = v42;
          *(_OWORD *)(a1 + 32) = v40;
          *(_OWORD *)(a1 + 48) = v41;
        }
        *unint64_t v38 = v211;
        *(_OWORD *)(v10 - 80) = v217;
        *(_OWORD *)(v10 - 64) = v223;
        *(_DWORD *)(v10 - 48) = v22;
        *(_OWORD *)(v10 - 16) = *(_OWORD *)&v208[12];
        *(_OWORD *)(v10 - 28) = *(_OWORD *)v208;
        *(_OWORD *)(v10 - 44) = v205;
        if (v25 >= (unint64_t)v27) {
          break;
        }
LABEL_33:
        sub_100E4A708(a1, v10 - 96, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v43 = sub_100E4B498(a1, v10 - 96);
      if (sub_100E4B498(v10, (uint64_t)a2)) {
        break;
      }
      if (!v43) {
        goto LABEL_33;
      }
    }
    a2 = (__n128 *)(v10 - 96);
    if (!v43) {
      continue;
    }
    break;
  }
}

__n128 sub_100E4B2F0(__n128 *a1, __n128 *a2, __n128 *a3)
{
  signed __int32 v3 = a2[3].n128_i32[0];
  signed __int32 v4 = a3[3].n128_i32[0];
  if (v3 >= (signed __int32)a1[3].n128_u32[0])
  {
    if (v4 < v3)
    {
      __n128 v35 = a2[2];
      __n128 v39 = a2[3];
      __n128 v43 = a2[4];
      __n128 v47 = a2[5];
      __n128 v27 = *a2;
      __n128 v31 = a2[1];
      __n128 v9 = a3[1];
      *a2 = *a3;
      a2[1] = v9;
      __n128 v10 = a3[5];
      __n128 v12 = a3[2];
      __n128 v11 = a3[3];
      a2[4] = a3[4];
      a2[5] = v10;
      a2[2] = v12;
      a2[3] = v11;
      a3[4] = v43;
      a3[5] = v47;
      a3[2] = v35;
      a3[3] = v39;
      __n128 result = v27;
      *a3 = v27;
      a3[1] = v31;
      if ((signed __int32)a2[3].n128_u32[0] < (signed __int32)a1[3].n128_u32[0])
      {
        __n128 v36 = a1[2];
        __n128 v40 = a1[3];
        __n128 v44 = a1[4];
        __n128 v48 = a1[5];
        __n128 v28 = *a1;
        __n128 v32 = a1[1];
        __n128 v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        __n128 v15 = a2[5];
        __n128 v17 = a2[2];
        __n128 v16 = a2[3];
        a1[4] = a2[4];
        a1[5] = v15;
        a1[2] = v17;
        a1[3] = v16;
        a2[4] = v44;
        a2[5] = v48;
        a2[2] = v36;
        a2[3] = v40;
        __n128 result = v28;
        *a2 = v28;
        a2[1] = v32;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      __n128 v37 = a1[2];
      __n128 v41 = a1[3];
      __n128 v45 = a1[4];
      __n128 v49 = a1[5];
      __n128 v29 = *a1;
      __n128 v33 = a1[1];
      __n128 v18 = a2[1];
      *a1 = *a2;
      a1[1] = v18;
      __n128 v19 = a2[5];
      __n128 v21 = a2[2];
      __n128 v20 = a2[3];
      a1[4] = a2[4];
      a1[5] = v19;
      a1[2] = v21;
      a1[3] = v20;
      a2[4] = v45;
      a2[5] = v49;
      a2[2] = v37;
      a2[3] = v41;
      __n128 result = v29;
      *a2 = v29;
      a2[1] = v33;
      if ((signed __int32)a3[3].n128_u32[0] >= (signed __int32)a2[3].n128_u32[0]) {
        return result;
      }
      __n128 v34 = a2[2];
      __n128 v38 = a2[3];
      __n128 v42 = a2[4];
      __n128 v46 = a2[5];
      __n128 v26 = *a2;
      __n128 v30 = a2[1];
      __n128 v22 = a3[1];
      *a2 = *a3;
      a2[1] = v22;
      __n128 v23 = a3[5];
      __n128 v25 = a3[2];
      __n128 v24 = a3[3];
      a2[4] = a3[4];
      a2[5] = v23;
      a2[2] = v25;
      a2[3] = v24;
    }
    else
    {
      __n128 v34 = a1[2];
      __n128 v38 = a1[3];
      __n128 v42 = a1[4];
      __n128 v46 = a1[5];
      __n128 v26 = *a1;
      __n128 v30 = a1[1];
      __n128 v5 = a3[1];
      *a1 = *a3;
      a1[1] = v5;
      __n128 v6 = a3[5];
      __n128 v8 = a3[2];
      __n128 v7 = a3[3];
      a1[4] = a3[4];
      a1[5] = v6;
      a1[2] = v8;
      a1[3] = v7;
    }
    a3[4] = v42;
    a3[5] = v46;
    a3[2] = v34;
    a3[3] = v38;
    __n128 result = v26;
    *a3 = v26;
    a3[1] = v30;
  }
  return result;
}

BOOL sub_100E4B498(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 48) < *(_DWORD *)(a1 + 48))
      {
        long long v49 = *(_OWORD *)(a1 + 32);
        long long v55 = *(_OWORD *)(a1 + 48);
        long long v60 = *(_OWORD *)(a1 + 64);
        long long v65 = *(_OWORD *)(a1 + 80);
        __n128 v37 = *(__n128 *)a1;
        long long v43 = *(_OWORD *)(a1 + 16);
        long long v6 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 16) = v6;
        long long v7 = *(_OWORD *)(a2 - 16);
        long long v9 = *(_OWORD *)(a2 - 64);
        long long v8 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 80) = v7;
        *(_OWORD *)(a1 + 32) = v9;
        *(_OWORD *)(a1 + 48) = v8;
        *(_OWORD *)(a2 - 64) = v49;
        *(_OWORD *)(a2 - 48) = v55;
        *(_OWORD *)(a2 - 32) = v60;
        *(_OWORD *)(a2 - 16) = v65;
        *(__n128 *)(a2 - 96) = v37;
        *(_OWORD *)(a2 - 80) = v43;
      }
      return result;
    case 3uLL:
      sub_100E4B2F0((__n128 *)a1, (__n128 *)(a1 + 96), (__n128 *)(a2 - 96));
      return 1;
    case 4uLL:
      sub_100E4B870((__n128 *)a1, (__n128 *)(a1 + 96), (__n128 *)(a1 + 192), (__n128 *)(a2 - 96));
      return 1;
    case 5uLL:
      __n128 v21 = (__n128 *)(a1 + 96);
      __n128 v22 = (__n128 *)(a1 + 192);
      __n128 v23 = (__n128 *)(a1 + 288);
      sub_100E4B870((__n128 *)a1, (__n128 *)(a1 + 96), (__n128 *)(a1 + 192), (__n128 *)(a1 + 288));
      if (*(_DWORD *)(a2 - 48) >= *(_DWORD *)(a1 + 336)) {
        return 1;
      }
      long long v51 = *(_OWORD *)(a1 + 320);
      long long v56 = *(_OWORD *)(a1 + 336);
      long long v61 = *(_OWORD *)(a1 + 352);
      long long v66 = *(_OWORD *)(a1 + 368);
      __n128 v39 = *v23;
      long long v45 = *(_OWORD *)(a1 + 304);
      long long v24 = *(_OWORD *)(a2 - 80);
      __n128 *v23 = *(__n128 *)(a2 - 96);
      *(_OWORD *)(a1 + 304) = v24;
      long long v25 = *(_OWORD *)(a2 - 16);
      long long v27 = *(_OWORD *)(a2 - 64);
      long long v26 = *(_OWORD *)(a2 - 48);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 368) = v25;
      *(_OWORD *)(a1 + 320) = v27;
      *(_OWORD *)(a1 + 336) = v26;
      *(_OWORD *)(a2 - 64) = v51;
      *(_OWORD *)(a2 - 48) = v56;
      *(_OWORD *)(a2 - 32) = v61;
      *(_OWORD *)(a2 - 16) = v66;
      *(__n128 *)(a2 - 96) = v39;
      *(_OWORD *)(a2 - 80) = v45;
      if (*(_DWORD *)(a1 + 336) >= *(_DWORD *)(a1 + 240)) {
        return 1;
      }
      long long v52 = *(_OWORD *)(a1 + 224);
      long long v57 = *(_OWORD *)(a1 + 240);
      long long v62 = *(_OWORD *)(a1 + 256);
      long long v67 = *(_OWORD *)(a1 + 272);
      __n128 v40 = *v22;
      long long v46 = *(_OWORD *)(a1 + 208);
      long long v28 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a1 + 240) = v28;
      long long v29 = *(_OWORD *)(a1 + 368);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 272) = v29;
      long long v30 = *(_OWORD *)(a1 + 304);
      *__n128 v22 = *v23;
      *(_OWORD *)(a1 + 208) = v30;
      __n128 *v23 = v40;
      *(_OWORD *)(a1 + 304) = v46;
      *(_OWORD *)(a1 + 352) = v62;
      *(_OWORD *)(a1 + 368) = v67;
      *(_OWORD *)(a1 + 320) = v52;
      *(_OWORD *)(a1 + 336) = v57;
      if (*(_DWORD *)(a1 + 240) >= *(_DWORD *)(a1 + 144)) {
        return 1;
      }
      long long v53 = *(_OWORD *)(a1 + 128);
      long long v58 = *(_OWORD *)(a1 + 144);
      long long v63 = *(_OWORD *)(a1 + 160);
      long long v68 = *(_OWORD *)(a1 + 176);
      __n128 v41 = *v21;
      long long v47 = *(_OWORD *)(a1 + 112);
      long long v31 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a1 + 144) = v31;
      long long v32 = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a1 + 176) = v32;
      long long v33 = *(_OWORD *)(a1 + 208);
      __n128 *v21 = *v22;
      *(_OWORD *)(a1 + 112) = v33;
      *__n128 v22 = v41;
      *(_OWORD *)(a1 + 208) = v47;
      *(_OWORD *)(a1 + 256) = v63;
      *(_OWORD *)(a1 + 272) = v68;
      *(_OWORD *)(a1 + 224) = v53;
      *(_OWORD *)(a1 + 240) = v58;
      if (*(_DWORD *)(a1 + 144) >= *(_DWORD *)(a1 + 48)) {
        return 1;
      }
      long long v54 = *(_OWORD *)(a1 + 32);
      long long v59 = *(_OWORD *)(a1 + 48);
      long long v64 = *(_OWORD *)(a1 + 64);
      long long v69 = *(_OWORD *)(a1 + 80);
      __n128 v42 = *(__n128 *)a1;
      long long v48 = *(_OWORD *)(a1 + 16);
      long long v34 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 48) = v34;
      long long v35 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 80) = v35;
      long long v36 = *(_OWORD *)(a1 + 112);
      *(__n128 *)a1 = *v21;
      *(_OWORD *)(a1 + 16) = v36;
      __n128 *v21 = v42;
      *(_OWORD *)(a1 + 112) = v48;
      *(_OWORD *)(a1 + 160) = v64;
      *(_OWORD *)(a1 + 176) = v69;
      BOOL result = 1;
      *(_OWORD *)(a1 + 128) = v54;
      *(_OWORD *)(a1 + 144) = v59;
      return result;
    default:
      uint64_t v10 = a1 + 192;
      sub_100E4B2F0((__n128 *)a1, (__n128 *)(a1 + 96), (__n128 *)(a1 + 192));
      uint64_t v11 = a1 + 288;
      if (a1 + 288 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    int v14 = *(_DWORD *)(v11 + 48);
    if (v14 < *(_DWORD *)(v10 + 48))
    {
      long long v38 = *(_OWORD *)v11;
      long long v44 = *(_OWORD *)(v11 + 16);
      long long v50 = *(_OWORD *)(v11 + 32);
      long long v70 = *(_OWORD *)(v11 + 52);
      *(_OWORD *)__n128 v71 = *(_OWORD *)(v11 + 68);
      uint64_t v15 = v12;
      *(_OWORD *)&v71[12] = *(_OWORD *)(v11 + 80);
      while (1)
      {
        uint64_t v16 = a1 + v15;
        long long v17 = *(_OWORD *)(a1 + v15 + 240);
        *(_OWORD *)(v16 + 320) = *(_OWORD *)(a1 + v15 + 224);
        *(_OWORD *)(v16 + 336) = v17;
        long long v18 = *(_OWORD *)(a1 + v15 + 272);
        *(_OWORD *)(v16 + 352) = *(_OWORD *)(a1 + v15 + 256);
        *(_OWORD *)(v16 + 368) = v18;
        long long v19 = *(_OWORD *)(a1 + v15 + 208);
        *(_OWORD *)(v16 + 288) = *(_OWORD *)(a1 + v15 + 192);
        *(_OWORD *)(v16 + 304) = v19;
        if (v15 == -192) {
          break;
        }
        v15 -= 96;
        if (v14 >= *(_DWORD *)(v16 + 144))
        {
          uint64_t v20 = a1 + v15 + 288;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(_OWORD *)uint64_t v20 = v38;
      *(_OWORD *)(v20 + 16) = v44;
      *(_OWORD *)(v20 + 32) = v50;
      *(_OWORD *)(v20 + 52) = v70;
      *(_DWORD *)(v20 + 48) = v14;
      *(_OWORD *)(v20 + 68) = *(_OWORD *)v71;
      ++v13;
      *(_OWORD *)(v20 + 80) = *(_OWORD *)&v71[12];
      if (v13 == 8) {
        return v11 + 96 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 96;
    v11 += 96;
    if (v11 == a2) {
      return 1;
    }
  }
}

__n128 sub_100E4B870(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4)
{
  result.n128_u64[0] = sub_100E4B2F0(a1, a2, a3).n128_u64[0];
  if ((signed __int32)a4[3].n128_u32[0] < (signed __int32)a3[3].n128_u32[0])
  {
    __n128 v27 = a3[2];
    __n128 v30 = a3[3];
    __n128 v33 = a3[4];
    __n128 v36 = a3[5];
    __n128 v21 = *a3;
    __n128 v24 = a3[1];
    __n128 v9 = a4[1];
    *a3 = *a4;
    a3[1] = v9;
    __n128 v10 = a4[5];
    __n128 v12 = a4[2];
    __n128 v11 = a4[3];
    a3[4] = a4[4];
    a3[5] = v10;
    a3[2] = v12;
    a3[3] = v11;
    a4[4] = v33;
    a4[5] = v36;
    a4[2] = v27;
    a4[3] = v30;
    __n128 result = v21;
    *a4 = v21;
    a4[1] = v24;
    if ((signed __int32)a3[3].n128_u32[0] < (signed __int32)a2[3].n128_u32[0])
    {
      __n128 v28 = a2[2];
      __n128 v31 = a2[3];
      __n128 v34 = a2[4];
      __n128 v37 = a2[5];
      __n128 v22 = *a2;
      __n128 v25 = a2[1];
      __n128 v13 = a3[1];
      *a2 = *a3;
      a2[1] = v13;
      __n128 v14 = a3[5];
      __n128 v16 = a3[2];
      __n128 v15 = a3[3];
      a2[4] = a3[4];
      a2[5] = v14;
      a2[2] = v16;
      a2[3] = v15;
      a3[4] = v34;
      a3[5] = v37;
      a3[2] = v28;
      a3[3] = v31;
      __n128 result = v22;
      *a3 = v22;
      a3[1] = v25;
      if ((signed __int32)a2[3].n128_u32[0] < (signed __int32)a1[3].n128_u32[0])
      {
        __n128 v29 = a1[2];
        __n128 v32 = a1[3];
        __n128 v35 = a1[4];
        __n128 v38 = a1[5];
        __n128 v23 = *a1;
        __n128 v26 = a1[1];
        __n128 v17 = a2[1];
        *a1 = *a2;
        a1[1] = v17;
        __n128 v18 = a2[5];
        __n128 v20 = a2[2];
        __n128 v19 = a2[3];
        a1[4] = a2[4];
        a1[5] = v18;
        a1[2] = v20;
        a1[3] = v19;
        a2[4] = v35;
        a2[5] = v38;
        a2[2] = v29;
        a2[3] = v32;
        __n128 result = v23;
        *a2 = v23;
        a2[1] = v26;
      }
    }
  }
  return result;
}

uint64_t *sub_100E4B9B8(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100E4BA10(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_100E4B9F8(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100E4BA10(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    __n128 v5 = (uint64_t **)result;
    long long v6 = result + 1;
    do
    {
      __n128 result = sub_100E4BA9C(v5, v6, v4 + 4, v4 + 4);
      long long v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          long long v8 = v7;
          long long v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_100E4BA9C(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  long long v6 = (uint64_t **)sub_1001DE1B4(a1, a2, &v11, &v10, a3);
  long long v7 = *v6;
  if (!*v6)
  {
    long long v8 = v6;
    long long v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    sub_1000EDF90(a1, v11, v8, v7);
  }
  return v7;
}

void *sub_100E4BB24(void *a1, void *a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a3)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    __n128 v5 = a2;
    do
    {
      long long v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          long long v7 = v6;
          long long v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          __n128 v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      __n128 v5 = v7;
    }
    while (v7 != a3);
  }
  sub_100E4BBAC(a1, a2, a3, v4);
  return a1;
}

void *sub_100E4BBAC(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    sub_1001DCF60(result, a4);
    return (void *)sub_100E4BC1C(v6, a2, a3);
  }
  return result;
}

void sub_100E4BC00(_Unwind_Exception *exception_object)
{
  signed __int32 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E4BC1C(uint64_t result, void *a2, void *a3)
{
  signed __int32 v3 = *(void **)(result + 8);
  if (a2 != a3)
  {
    do
    {
      void *v3 = a2[4];
      unint64_t v4 = (void *)a2[1];
      if (v4)
      {
        do
        {
          __n128 v5 = v4;
          unint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          __n128 v5 = (void *)a2[2];
          BOOL v6 = *v5 == (void)a2;
          a2 = v5;
        }
        while (!v6);
      }
      ++v3;
      a2 = v5;
    }
    while (v5 != a3);
  }
  *(void *)(result + 8) = v3;
  return result;
}

void *sub_100E4BC74@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x48uLL);
  __n128 result = sub_100E4BCD0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100E4BCBC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100E4BCD0(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022FC0F8;
  sub_100E483F0(a1 + 3, a2);
  return a1;
}

void sub_100E4BD18(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100E4BD2C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022FC0F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100E4BD4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022FC0F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100E4BDA0(uint64_t a1)
{
  sub_100E4BDCC((uint64_t)&v1, a1 + 24);
}

void sub_100E4BDCC(uint64_t a1, uint64_t a2)
{
  signed __int32 v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(void *)(a2 + 32) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v4;
    operator delete(v4);
  }
}

void sub_100E4BE24()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_100E4BEDC(_Unwind_Exception *a1)
{
}

void sub_100E4BEF4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_100E4BF9C(_Unwind_Exception *a1)
{
}

void sub_100E4BFB4(char *a1, int *a2, uint64_t a3)
{
  int v4 = *a2;
  if ((*a2 & 0xFFFFFFFE) == 6
    && (*(unsigned char *)(a3 + 96) ? (BOOL v5 = *(_DWORD *)(a3 + 48) <= 0) : (BOOL v5 = 1),
        v5 ? (char v6 = 0) : (char v6 = 1),
        *a1 = v6,
        a1[1] = 0,
        v4 == 7))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022FC138);
    }
    long long v7 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *a1;
      int v9 = a1[1];
      *(_DWORD *)buf = 67109376;
      int v15 = v8;
      __int16 v16 = 1024;
      int v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "LocationController,WifiAssoc,%d,AssocLoc,%d,Roam", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1)
      {
LABEL_23:
        __n128 v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerWiFiAssociationTracker::updateWithWifiService(const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
        return;
      }
LABEL_25:
      dispatch_once(&qword_102419380, &stru_1022FC138);
      goto LABEL_23;
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022FC138);
    }
    uint64_t v10 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v11 = *a1;
      int v12 = a1[1];
      *(_DWORD *)buf = 67109376;
      int v15 = v11;
      __int16 v16 = 1024;
      int v17 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "LocationController,WifiAssoc,%d,AssocLoc,%d,LinkStatus", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_23;
      }
      goto LABEL_25;
    }
  }
}

void sub_100E4C2D0(unsigned __int8 *a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a2 + 768);
  a1[1] = v3;
  if (v3) {
    BOOL v4 = *a1 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022FC138);
    }
    BOOL v5 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "LocationController,Associated WiFi location without association", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022FC138);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLLocationControllerWiFiAssociationTracker::updateWithWifiLocation(const CLLocationProvider_Type::NotificationData &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    *a1 = 1;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022FC138);
  }
  char v6 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *a1;
    int v8 = a1[1];
    *(_DWORD *)buf = 67109376;
    int v12 = v7;
    __int16 v13 = 1024;
    int v14 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "LocationController,WifiAssoc,%d,AssocLoc,%d,Location", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022FC138);
    }
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerWiFiAssociationTracker::updateWithWifiLocation(const CLLocationProvider_Type::NotificationData &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
}

void sub_100E4C5EC(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100E4C6CC(id a1)
{
  qword_102481C18 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLRunningAggregatorAWDSilo"];
}

id sub_100E4C8BC(int a1, unsigned int *a2, void *__src, void *a4)
{
  uint64_t v5 = *a2;
  memcpy(v7, __src, sizeof(v7));
  return [a4 onStepNotification:v5 data:v7];
}

uint64_t sub_100E4CA54(void *a1, void *a2, void *a3)
{
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[1];
  if (v6 == v7) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = 32 * (v6 - v7) - 1;
  }
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5];
  unint64_t v11 = v10 + v9;
  if (v8 == v10 + v9)
  {
    sub_100E4CEC4(a1);
    uint64_t v9 = a1[4];
    uint64_t v10 = a1[5];
    uint64_t v7 = a1[1];
    unint64_t v11 = v9 + v10;
  }
  int v12 = (void *)(*(void *)(v7 + ((v11 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v11);
  *int v12 = *a2;
  v12[1] = *a3;
  uint64_t v13 = v10 + 1;
  a1[5] = v13;
  unint64_t v14 = v9 + v13;
  int v15 = (void *)(v7 + 8 * (v14 >> 8));
  if ((_BYTE)v14) {
    uint64_t v16 = *v15 + 16 * v14;
  }
  else {
    uint64_t v16 = *(v15 - 1) + 4096;
  }
  return v16 - 16;
}

void sub_100E4CEC4(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __n128 v34 = (char *)sub_1000DA54C(v5, v33);
      __n128 v35 = &v34[8 * (v33 >> 2)];
      __n128 v37 = &v34[8 * v36];
      __n128 v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __n128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__n128 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    __n128 v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __n128 v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      __n128 v35 = &v34[8 * (v46 >> 2)];
      __n128 v37 = &v34[8 * v47];
      long long v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      long long v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  __n128 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  __n128 v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100E4D190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100E4D1DC()
{
  sub_100134750(qword_102481C00, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102481C00, (void *)&_mh_execute_header);
}

void sub_100E4D2EC(id a1)
{
  qword_102481C28 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLGatheringServiceSilo"];
}

void sub_100E4D364(id a1)
{
  sub_100103240();
  if (sub_10016CCBC())
  {
    byte_102481C38 = 1;
  }
  else
  {
    if (qword_1024194B0 != -1) {
      dispatch_once(&qword_1024194B0, &stru_1022FC1B8);
    }
    char v1 = qword_1024194B8;
    if (os_log_type_enabled((os_log_t)qword_1024194B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "not supported on this platform", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194B0 != -1) {
        dispatch_once(&qword_1024194B0, &stru_1022FC1B8);
      }
      unint64_t v2 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "+[CLGatheringService isSupported]_block_invoke", "%s\n", v2);
      if (v2 != (char *)buf) {
        free(v2);
      }
    }
  }
}

void sub_100E4DB24(id a1)
{
  qword_1024194B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gathering");
}

void *sub_100E4DB54(void *a1, int a2)
{
  sub_100134750(__p, "");
  sub_100E4DC64((uint64_t)a1, "CLSwimPersistence", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_1022FC1E8;
  a1[9] = off_1022FC298;
  sub_100F03BA0(a1 + 57, 0, 0);
  (*(void (**)(void *))(*a1 + 112))(a1);
  return a1;
}

void sub_100E4DC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E4DC64(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 8));
  *uint64_t v12 = &off_1022B2C68;
  *(void *)a1 = off_1022FC928;
  *(void *)(a1 + 72) = off_1022FC9D0;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_1022FC928;
  *(void *)(a1 + 72) = off_1022FC9D0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 376) = 12000;
  *(void *)(a1 + 384) = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 392));
  *(void *)(a1 + 392) = &off_1022B2C68;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 264) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_100E4E074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  void *v27 = v30;
  sub_1003BE1F8(v31);
  sub_1000D801C(v29);
  sub_1011F8AE0(v28);
  void *v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_100E4E108()
{
}

void *sub_100E4E110(void *a1)
{
  *a1 = off_1022FC928;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_1022FC9D0;
  a1[48] = off_1022B2C20;
  sub_1003BE1F8(a1 + 49);
  sub_1000D801C(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022B2C20;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_100E4E1D4(uint64_t a1)
{
  return sub_100E4E110((void *)(a1 - 72));
}

void sub_100E4E1DC(void *a1)
{
  sub_100E4E110(a1);

  operator delete();
}

void sub_100E4E214(uint64_t a1)
{
  sub_100E4E110((void *)(a1 - 72));

  operator delete();
}

uint64_t sub_100E4E250@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM SwimDistributions ORDER BY id DESC");
  }
  return result;
}

void sub_100E4E5BC(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E4E618(uint64_t a1)
{
  if (sub_100E4E668(a1))
  {
    sub_100E4EA2C(a1, 100, 75);
  }
}

uint64_t sub_100E4E668(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"INSERT INTO SwimDistributions (loiUuid, poolLength, style, mean, median, min, max, stddev, samples, prctile10, prctile90, uuid) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
  }
  return 0;
}

void sub_100E4E9E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E4EA2C(uint64_t a1, int a2, int a3)
{
  if (a3 >= a2)
  {
    sub_101A90698();
    __break(1u);
    dispatch_once(&qword_102419000, &stru_1022FC328);
    uint64_t v8 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Unable to purge old records.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (*v4 != -1) {
        dispatch_once(&qword_102419000, &stru_1022FC328);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLSwimPersistence::purgeDistributions(int, int)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else
  {
    int v7 = sub_100E4ECB0(a1);
    if (sub_100082064(a1 + 72))
    {
      if (v7 >= a2) {
        sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE From SwimDistributions WHERE id <= (SELECT MAX(id) From SwimDistributions) - ?");
      }
    }
  }
}

void sub_100E4EC6C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E4ECB0(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM SwimDistributions");
  }
  return 0xFFFFFFFFLL;
}

void sub_100E4EED4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E4EF18(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM SwimDistributions");
  }
  return result;
}

void sub_100E4F118(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E4F15C(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from SwimHistory ORDER by rowid DESC limit ?");
  }
  return 109;
}

void sub_100E4F4BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E4F500(uint64_t a1, uint64_t *a2, void **a3)
{
  sub_10002B640(*(void *)(a1 + 80));
  uint64_t v50 = 0;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v41 = 0u;
  v40[0] = 0;
  v40[1] = 0;
  sub_100652E3C(a1, (unsigned __int8 *)v40);
  for (; !sub_100E50708(a2, (uint64_t)&v41); a3[1] = v15)
  {
    uuid_copy((unsigned __int8 *)&v42 + 8, (const unsigned __int8 *)v40);
    char v6 = (char *)a3[1];
    int v7 = (char *)a3[2];
    if (v6 >= v7)
    {
      unint64_t v16 = 0x86BCA1AF286BCA1BLL * ((v6 - (unsigned char *)*a3) >> 3);
      unint64_t v17 = v16 + 1;
      if (v16 + 1 > 0x1AF286BCA1AF286) {
        sub_1001D7FD4();
      }
      unint64_t v18 = 0x86BCA1AF286BCA1BLL * ((v7 - (unsigned char *)*a3) >> 3);
      if (2 * v18 > v17) {
        unint64_t v17 = 2 * v18;
      }
      if (v18 >= 0xD79435E50D7943) {
        unint64_t v19 = 0x1AF286BCA1AF286;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19) {
        int64_t v20 = (char *)sub_1007F65A4((uint64_t)(a3 + 2), v19);
      }
      else {
        int64_t v20 = 0;
      }
      uint64_t v21 = &v20[152 * v16];
      long long v22 = v42;
      *(_OWORD *)uint64_t v21 = v41;
      *((_OWORD *)v21 + 1) = v22;
      long long v23 = v43;
      long long v24 = v44;
      long long v25 = v46;
      *((_OWORD *)v21 + 4) = v45;
      *((_OWORD *)v21 + 5) = v25;
      *((_OWORD *)v21 + 2) = v23;
      *((_OWORD *)v21 + 3) = v24;
      long long v26 = v47;
      long long v27 = v48;
      long long v28 = v49;
      *((void *)v21 + 18) = v50;
      *((_OWORD *)v21 + 7) = v27;
      *((_OWORD *)v21 + 8) = v28;
      *((_OWORD *)v21 + 6) = v26;
      uint64_t v30 = (char *)*a3;
      __n128 v29 = (char *)a3[1];
      long long v31 = v21;
      if (v29 != *a3)
      {
        do
        {
          long long v32 = *(_OWORD *)(v29 - 152);
          *(_OWORD *)(v31 - 136) = *(_OWORD *)(v29 - 136);
          *(_OWORD *)(v31 - 152) = v32;
          long long v33 = *(_OWORD *)(v29 - 120);
          long long v34 = *(_OWORD *)(v29 - 104);
          long long v35 = *(_OWORD *)(v29 - 88);
          *(_OWORD *)(v31 - 72) = *(_OWORD *)(v29 - 72);
          *(_OWORD *)(v31 - 88) = v35;
          *(_OWORD *)(v31 - 104) = v34;
          *(_OWORD *)(v31 - 120) = v33;
          long long v36 = *(_OWORD *)(v29 - 56);
          long long v37 = *(_OWORD *)(v29 - 40);
          long long v38 = *(_OWORD *)(v29 - 24);
          *((void *)v31 - 1) = *((void *)v29 - 1);
          *(_OWORD *)(v31 - 24) = v38;
          *(_OWORD *)(v31 - 40) = v37;
          *(_OWORD *)(v31 - 56) = v36;
          v31 -= 152;
          v29 -= 152;
        }
        while (v29 != v30);
        __n128 v29 = (char *)*a3;
      }
      uint64_t v15 = v21 + 152;
      *a3 = v31;
      a3[1] = v21 + 152;
      a3[2] = &v20[152 * v19];
      if (v29) {
        operator delete(v29);
      }
    }
    else
    {
      long long v8 = v42;
      *(_OWORD *)char v6 = v41;
      *((_OWORD *)v6 + 1) = v8;
      long long v9 = v43;
      long long v10 = v44;
      long long v11 = v46;
      *((_OWORD *)v6 + 4) = v45;
      *((_OWORD *)v6 + 5) = v11;
      *((_OWORD *)v6 + 2) = v9;
      *((_OWORD *)v6 + 3) = v10;
      long long v12 = v47;
      long long v13 = v48;
      long long v14 = v49;
      *((void *)v6 + 18) = v50;
      *((_OWORD *)v6 + 7) = v13;
      *((_OWORD *)v6 + 8) = v14;
      *((_OWORD *)v6 + 6) = v12;
      uint64_t v15 = v6 + 152;
    }
  }
  return sub_100028FB4(*(void *)(a1 + 80));
}

uint64_t sub_100E4F794(uint64_t a1, const unsigned __int8 *a2)
{
  if (sub_100082064(a1 + 72))
  {
    uuid_unparse(a2, out);
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from SwimHistory WHERE uuid = ?");
  }
  return 109;
}

void sub_100E4F9F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E4FA38(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_100652E3C((uint64_t)a1, (unsigned __int8 *)v10);
  if (!sub_100082064(a1 + 9)) {
    return 109;
  }
  *(void *)uu1 = 0;
  uint64_t v9 = 0;
  sub_100652E3C((uint64_t)a1, uu1);
  if (!uuid_is_null((const unsigned __int8 *)(a2 + 24)) && !uuid_compare(uu1, (const unsigned __int8 *)(a2 + 24))) {
    sub_10014D518(a1[10], (uint64_t)"SELECT * from SwimHistory WHERE id >= ?");
  }
  (*(void (**)(uint64_t *, uint64_t))(*a1 + 40))(a1, a3);
  return 100;
}

void sub_100E4FCF8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E4FD3C(void *a1, uint64_t a2)
{
  unint64_t v4 = a1 + 14;
  (*(void (**)(void *))(a1[14] + 16))(a1 + 14);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(void *)(a2 + 144) = 0;
  int v5 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 104))(a1, a2);
  if (v5)
  {
    if (v5 != 1)
    {
      uint64_t v7 = 109;
      goto LABEL_10;
    }
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1022FC328);
    }
    char v6 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#Warning returning default entry after querying empty db for most recent lap", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_1022FC328);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLSwimPersistence::getMostRecentLap(CLSwimEntry &) const", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  uint64_t v7 = 100;
LABEL_10:
  (*(void (**)(void *))(*v4 + 24))(v4);
  return v7;
}

void sub_100E4FF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E4FFC0(uint64_t *a1, uint64_t a2, void **a3)
{
  if (!sub_100082064(a1 + 9)) {
    return 109;
  }
  memset(uu, 0, sizeof(uu));
  uuid_parse("00000000-0000-0000-0000-000000000000", uu);
  if (uuid_is_null((const unsigned __int8 *)(a2 + 24)) && uuid_compare(uu, (const unsigned __int8 *)(a2 + 8)))
  {
    memset(dst, 0, sizeof(dst));
    uuid_copy(dst, (const unsigned __int8 *)(a2 + 8));
    return sub_100E4F794((uint64_t)a1, dst);
  }
  else
  {
    uint64_t v6 = sub_100E4FA38(a1, a2, (uint64_t)a3);
    if (v6 == 100)
    {
      if (*a3 == a3[1])
      {
        uint64_t v51 = 0;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        *(_OWORD *)uuid_t dst = 0u;
        uint64_t v6 = sub_100E4FD3C(a1, (uint64_t)dst);
        if (v6 == 100)
        {
          v41[0] = 0;
          v41[1] = 0;
          sub_100652E3C((uint64_t)a1, (unsigned __int8 *)v41);
          uuid_copy((unsigned __int8 *)&v43 + 8, (const unsigned __int8 *)v41);
          uint64_t v7 = (char *)a3[2];
          long long v8 = (char *)a3[1];
          if (v8 >= v7)
          {
            unint64_t v17 = 0x86BCA1AF286BCA1BLL * ((v8 - (unsigned char *)*a3) >> 3);
            unint64_t v18 = v17 + 1;
            if (v17 + 1 > 0x1AF286BCA1AF286) {
              sub_1001D7FD4();
            }
            unint64_t v19 = 0x86BCA1AF286BCA1BLL * ((v7 - (unsigned char *)*a3) >> 3);
            if (2 * v19 > v18) {
              unint64_t v18 = 2 * v19;
            }
            if (v19 >= 0xD79435E50D7943) {
              unint64_t v20 = 0x1AF286BCA1AF286;
            }
            else {
              unint64_t v20 = v18;
            }
            if (v20) {
              uint64_t v21 = (char *)sub_1007F65A4((uint64_t)(a3 + 2), v20);
            }
            else {
              uint64_t v21 = 0;
            }
            long long v22 = &v21[152 * v17];
            long long v23 = &v21[152 * v20];
            long long v24 = v43;
            *(_OWORD *)long long v22 = *(_OWORD *)dst;
            *((_OWORD *)v22 + 1) = v24;
            long long v25 = v44;
            long long v26 = v45;
            long long v27 = v47;
            *((_OWORD *)v22 + 4) = v46;
            *((_OWORD *)v22 + 5) = v27;
            *((_OWORD *)v22 + 2) = v25;
            *((_OWORD *)v22 + 3) = v26;
            long long v28 = v48;
            long long v29 = v49;
            long long v30 = v50;
            *((void *)v22 + 18) = v51;
            *((_OWORD *)v22 + 7) = v29;
            *((_OWORD *)v22 + 8) = v30;
            *((_OWORD *)v22 + 6) = v28;
            unint64_t v16 = v22 + 152;
            long long v32 = (char *)*a3;
            long long v31 = (char *)a3[1];
            if (v31 != *a3)
            {
              do
              {
                long long v33 = *(_OWORD *)(v31 - 152);
                *(_OWORD *)(v22 - 136) = *(_OWORD *)(v31 - 136);
                *(_OWORD *)(v22 - 152) = v33;
                long long v34 = *(_OWORD *)(v31 - 120);
                long long v35 = *(_OWORD *)(v31 - 104);
                long long v36 = *(_OWORD *)(v31 - 88);
                *(_OWORD *)(v22 - 72) = *(_OWORD *)(v31 - 72);
                *(_OWORD *)(v22 - 88) = v36;
                *(_OWORD *)(v22 - 104) = v35;
                *(_OWORD *)(v22 - 120) = v34;
                long long v37 = *(_OWORD *)(v31 - 56);
                long long v38 = *(_OWORD *)(v31 - 40);
                long long v39 = *(_OWORD *)(v31 - 24);
                *((void *)v22 - 1) = *((void *)v31 - 1);
                *(_OWORD *)(v22 - 24) = v39;
                *(_OWORD *)(v22 - 40) = v38;
                *(_OWORD *)(v22 - 56) = v37;
                v22 -= 152;
                v31 -= 152;
              }
              while (v31 != v32);
              long long v31 = (char *)*a3;
            }
            *a3 = v22;
            a3[1] = v16;
            a3[2] = v23;
            if (v31) {
              operator delete(v31);
            }
          }
          else
          {
            long long v9 = v43;
            *(_OWORD *)long long v8 = *(_OWORD *)dst;
            *((_OWORD *)v8 + 1) = v9;
            long long v10 = v44;
            long long v11 = v45;
            long long v12 = v47;
            *((_OWORD *)v8 + 4) = v46;
            *((_OWORD *)v8 + 5) = v12;
            *((_OWORD *)v8 + 2) = v10;
            *((_OWORD *)v8 + 3) = v11;
            long long v13 = v48;
            long long v14 = v49;
            long long v15 = v50;
            *((void *)v8 + 18) = v51;
            *((_OWORD *)v8 + 7) = v14;
            *((_OWORD *)v8 + 8) = v15;
            *((_OWORD *)v8 + 6) = v13;
            unint64_t v16 = v8 + 152;
          }
          a3[1] = v16;
        }
      }
      else
      {
        return 100;
      }
    }
  }
  return v6;
}

uint64_t sub_100E502BC(uint64_t *a1, uint64_t *a2)
{
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10002B640(a1[10]);
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    while (v5 != v6)
    {
      (*(void (**)(uint64_t *, uint64_t, void))(*a1 + 120))(a1, v5, 0);
      v5 += 152;
    }
    uint64_t v7 = a1[10];
    return sub_100028FB4(v7);
  }
  return result;
}

uint64_t sub_100E50364(uint64_t a1, void *a2)
{
  return 0;
}

uint64_t sub_100E5039C(uint64_t a1, void *a2)
{
  if (*a2 != a2[1] && sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE from SwimHistory WHERE startTime < ?");
  }
  return 0;
}

void sub_100E505DC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E50620(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 - 72;
  CFAbsoluteTimeGetCurrent();
  sub_100E5039C(v3, a2);
  return 0;
}

uint64_t sub_100E50658(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from SwimHistory");
  }
  return result;
}

void sub_100E506F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E50708(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)a2 = sqlite3_column_int64(v6, 0);
  uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  long long v8 = sqlite3_column_text(v7, 1);
  uuid_parse((const char *)v8, (unsigned __int8 *)(a2 + 8));
  long long v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v9, 2);
  long long v10 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 48) = sqlite3_column_double(v10, 3);
  long long v11 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 56) = sqlite3_column_double(v11, 4);
  long long v12 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 64) = sqlite3_column_double(v12, 5);
  long long v13 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 72) = sqlite3_column_double(v13, 6);
  long long v14 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 88) = sqlite3_column_double(v14, 7);
  long long v15 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 96) = sqlite3_column_int(v15, 8);
  unint64_t v16 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 100) = sqlite3_column_int(v16, 9);
  unint64_t v17 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 104) = sqlite3_column_int(v17, 10);
  unint64_t v18 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 108) = sqlite3_column_int(v18, 11);
  unint64_t v19 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 120) = sqlite3_column_int(v19, 12);
  unint64_t v20 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 128) = sqlite3_column_double(v20, 13);
  uint64_t v21 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 136) = sqlite3_column_double(v21, 14);
  long long v22 = (sqlite3_stmt *)sub_10014D19C(*a1);
  double v23 = sqlite3_column_double(v22, 15);
  uint64_t result = 0;
  *(_DWORD *)(a2 + 144) = (int)v23;
  return result;
}

uint64_t sub_100E508A4(uint64_t *a1)
{
  uint64_t result = sub_10014C3C0(a1[10]);
  if (result)
  {
    sub_100E50934((uint64_t)a1);
    sub_1005F7B0C(a1[10], "SwimHistory", (const char **)&off_1022FC348, (const std::string::value_type **)&off_102474ED0, 0);
    sub_1005F7B0C(a1[10], "SwimDistributions", (const char **)&off_1022FC678, (const std::string::value_type **)&off_102474EE0, 0);
    uint64_t result = sub_100601D1C(a1[10], (uint64_t)"SELECT * from SwimHistory ORDER BY rowid DESC LIMIT 1");
    a1[57] = result;
    a1[58] = v3;
  }
  return result;
}

uint64_t sub_100E50934(uint64_t a1)
{
  uint64_t result = sub_1005F93E4(*(void *)(a1 + 80), "SwimHistory");
  if (result)
  {
    uint64_t v3 = "segment";
    int v4 = 5;
    __int16 v5 = 0;
    char v6 = 0;
    char v7 = 0;
    sub_1005FEC4C(*(void *)(a1 + 80), "SwimHistory", (uint64_t)"segment", (uint64_t)&v3);
  }
  return result;
}

void sub_100E50E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a23);
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  sub_101A129A8((uint64_t)&a61);
  _Unwind_Resume(a1);
}

void sub_100E50F0C(uint64_t a1)
{
}

void sub_100E50F90(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

void sub_100E50FA8(uint64_t a1)
{
}

void sub_100E50FB8(uint64_t a1)
{
}

void sub_100E51330(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E51374()
{
  return 0;
}

uint64_t sub_100E5137C(uint64_t a1, uint64_t a2)
{
  if (!sub_100082064(a1 + 72)) {
    return 2;
  }
  sub_100082068((void *)(a1 + 456), &v9);
  if (v9)
  {
    uint64_t v4 = sub_100E50708(&v9, a2);
  }
  else
  {
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1022FC328);
    }
    __int16 v5 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "SwimPersistence: failed to prepare getMostRecent #InvalidPreparedSQLStatement", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_1022FC328);
      }
      long long v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CLActivityDB::ActivityCode CLSwimPersistence::getMostRecentRecordUL(CLSwimEntry &) const", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    uint64_t v4 = 2;
  }
  uint64_t v6 = v9;
  uint64_t v9 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return v4;
}

void sub_100E51580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E515C8(uint64_t a1, void *a2)
{
  if (!sub_1005F9734(*(void *)(a1 + 80), (char *)a2))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022FCA10);
    }
    uint64_t v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022FCA10);
      }
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      unint64_t v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<CLSwimEntry>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLSwimEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", (const char *)v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    memset(__p, 0, 24);
    sub_100134750(buf, (char *)a2);
    __int16 v5 = std::string::append(buf, "AutoIncr");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t v22 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v21 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_100134750(buf, (char *)a2);
    char v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_10002B640(*(void *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v8 = HIBYTE(__p[2]);
    }
    else {
      size_t v8 = (size_t)__p[1];
    }
    uint64_t v9 = buf;
    sub_1001110E4((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0) {
        long long v10 = __p;
      }
      else {
        long long v10 = (void **)__p[0];
      }
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v22 >= 0) {
      long long v11 = v21;
    }
    else {
      long long v11 = (void **)v21[0];
    }
    if (v22 >= 0) {
      std::string::size_type v12 = HIBYTE(v22);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v21[1];
    }
    long long v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    long long v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v14;
    __p[1] = v23.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v23.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      char v15 = HIBYTE(__p[2]);
      long long v14 = __p[0];
    }
    if (v15 >= 0) {
      unint64_t v16 = __p;
    }
    else {
      unint64_t v16 = (void **)v14;
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)v16);
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = *(void *)(v17 + 88);
  }
  sub_10003CC68(v17, v18);
  return 0;
}

void sub_100E527F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

void sub_100E52B54(uint64_t a1@<X0>, const unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 112;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  if (sub_100082064(v6 - 40))
  {
    memset(out, 0, 37);
    uuid_unparse(a2, out);
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from SwimHistory WHERE uuid = ? ORDER BY id ASC");
  }
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_1022FC328);
  }
  char v7 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "DB, not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1022FC328);
    }
    *(_WORD *)uuid_string_t out = 0;
    size_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::pair<CMError, std::vector<CLSwimEntry>> CLSwimPersistence::getAllRecordsForSessionId(unsigned char *) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  *(_DWORD *)a3 = 109;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 8) = 0;
  sub_100E54630((void *)(a3 + 8), 0, 0, 0);
  (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
}

void sub_100E52FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  sub_1019DB560((uint64_t)&a13);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100E53060(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A9082C(v2);
    __break(1u);
  }
  uint64_t v9 = v11[1];
  operator delete(v11[0]);
  if (!v9) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v11);
    uint64_t v3 = sub_100132EFC(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      size_t v8 = __p;
    }
    else {
      size_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_100E53568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_100E535F0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_100E556DC(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022FCA10);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)long long v13 = 0;
    *(_WORD *)&v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    char v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022FCA10);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(void *)long long v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022FCA10);
      }
      long long v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLSwimEntry>::setDatabaseAccessible() [T = CLSwimEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_100E53D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_100E53DA4(uint64_t a1, uint64_t a2, char a3)
{
  v34[0] = (id)os_transaction_create();
  v34[1] = 0;
  if (*(double *)(a1 + 264) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v34);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  int v6 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 104))(a1, v43);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022FCA10);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022FCA10);
        }
        LOWORD(v35) = 0;
        char v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLSwimEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSwimEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *(double *)(a2 + 40);
    double v8 = v44;
    double v9 = v7 - v44;
    if (v7 - v44 < 0.0) {
      double v9 = -(v7 - v44);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022FCA10);
      }
      long long v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 40);
        *(_DWORD *)buf = 134349312;
        double v40 = v44;
        __int16 v41 = 2050;
        uint64_t v42 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022FCA10);
        }
        uint64_t v28 = *(void *)(a2 + 40);
        int v35 = 134349312;
        double v36 = v44;
        __int16 v37 = 2050;
        uint64_t v38 = v28;
        long long v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSwimEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSwimEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
      }
      CLWriteStackshot();
      double v7 = *(double *)(a2 + 40);
      double v8 = v44;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022FCA10);
        }
        uint64_t v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)(a2 + 40);
          *(_DWORD *)buf = 134217984;
          double v40 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022FCA10);
          }
          double v30 = *(double *)(a2 + 40);
          int v35 = 134217984;
          double v36 = v30;
          long long v31 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSwimEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSwimEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v31);
          if (v31 != (char *)buf) {
            free(v31);
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v33 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_1022FCA10);
        double v17 = v33;
      }
      double v18 = v16 - v17;
      unint64_t v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        double v40 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022FCA10);
        }
        int v35 = 134217984;
        double v36 = v18;
        long long v32 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSwimEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSwimEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v32);
        if (v32 != (char *)buf) {
          free(v32);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, v43, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v20;
  long long v21 = *(_OWORD *)(a2 + 32);
  long long v22 = *(_OWORD *)(a2 + 48);
  long long v23 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 304) = v23;
  *(_OWORD *)(a1 + 256) = v21;
  *(_OWORD *)(a1 + 272) = v22;
  long long v24 = *(_OWORD *)(a2 + 96);
  long long v25 = *(_OWORD *)(a2 + 112);
  long long v26 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 368) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 336) = v25;
  *(_OWORD *)(a1 + 352) = v26;
  *(_OWORD *)(a1 + 320) = v24;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v34);
}

void sub_100E545CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E545F8(uint64_t a1)
{
  return sub_100E535F0(a1 - 72);
}

void sub_100E54600(id a1)
{
  qword_102419008 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

void *sub_100E54630(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = sub_100E546AC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100E54690(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100E546AC(void *a1, unint64_t a2)
{
  if (a2 >= 0x1AF286BCA1AF287) {
    sub_1001D7FD4();
  }
  uint64_t result = (char *)sub_1007F65A4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[152 * v4];
  return result;
}

uint64_t sub_100E54704(void *a1, void *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A9099C(v4);
    __break(1u);
  }
  uint64_t v12 = v13[1];
  operator delete(v13[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v13);
    int v6 = sub_100132EFC(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(v15, a1);
    if ((v16 & 0x80u) == 0) {
      uint64_t v7 = v15;
    }
    else {
      uint64_t v7 = (void **)v15[0];
    }
    if ((v16 & 0x80u) == 0) {
      uint64_t v8 = v16;
    }
    else {
      uint64_t v8 = (uint64_t)v15[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v16 < 0) {
      operator delete(v15[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v16 & 0x80u) == 0) {
      uint64_t v11 = v15;
    }
    else {
      uint64_t v11 = (void **)v15[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_100E54BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E54C58(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101A90B0C(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  uint64_t v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_100E54FCC(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A90C7C(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    uint64_t v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_100E552F8(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A90DEC(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_100E5561C(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100E5564C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_100E556DC(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_100E5575C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E55778(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

BOOL sub_100E557A8(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_100E599F4(v2, a2);
}

uint64_t sub_100E557B8(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_100E5BA60(v2, a2);
}

BOOL sub_100E557C8(uint64_t a1)
{
  uint64_t v1 = a1 - 8;
  if (!a1) {
    uint64_t v1 = 0;
  }
  return *(unsigned char *)(v1 + 1389) && *(_DWORD *)(v1 + 400) == 0;
}

void *sub_100E557F4(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = (void *)(a1 - 8);
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_100E5F618(v2, a2);
}

void sub_100E55804(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_100E5F7D0(v2, a2);
}

void sub_100E55814(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = (void *)(a1 - 8);
  }
  else {
    uint64_t v3 = 0;
  }
  sub_100E60500(v3);

  sub_100E5F7D0((uint64_t)v3, a2);
}

BOOL sub_100E55860(uint64_t a1, void *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_100E59FF4(v2, a2);
}

uint64_t (***sub_100E55870(uint64_t a1, uint64_t a2))(void, uint8_t *)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_100E5BFC0(v2, a2);
}

void sub_100E55880(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_100E5C16C(v2, a2);
}

uint64_t sub_100E55890(uint64_t a1, int *a2)
{
  if (a1) {
    uint64_t v2 = (uint64_t *)(a1 - 8);
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_100E62420(v2, a2);
}

BOOL sub_100E558A0(uint64_t a1)
{
  uint64_t v1 = a1 - 8;
  if (!a1) {
    uint64_t v1 = 0;
  }
  return *(unsigned char *)(v1 + 1388) && *(_DWORD *)(v1 + 400) == 0;
}

uint64_t sub_100E558CC(uint64_t a1)
{
  if (a1) {
    return sub_100E61EFC(a1 - 8);
  }
  else {
    return sub_100E61EFC(0);
  }
}

uint64_t sub_100E558DC(uint64_t a1)
{
  if (a1) {
    return sub_100E629C8(a1 - 8);
  }
  else {
    return sub_100E629C8(0);
  }
}

uint64_t sub_100E558EC(uint64_t a1)
{
  if (a1) {
    return sub_100E620B4(a1 - 8);
  }
  else {
    return sub_100E620B4(0);
  }
}

double sub_100E558FC(uint64_t a1, double *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_100E5D5B8(v2, a2);
}

void sub_100E5590C(uint64_t a1, double *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_100E5D7F0(v2, a2);
}

void sub_100E5591C(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_100E5EC5C(v2, a2);
}

uint64_t sub_100E5592C(uint64_t a1)
{
  if (a1) {
    return sub_100E5A2D8((void *)(a1 - 8));
  }
  else {
    return sub_100E5A2D8(0);
  }
}

uint64_t sub_100E5593C(uint64_t a1)
{
  if (a1) {
    return sub_100E62EFC(a1 - 8);
  }
  else {
    return sub_100E62EFC(0);
  }
}

BOOL sub_100E5594C(uint64_t a1)
{
  if (a1) {
    return sub_100E5B21C(a1 - 8);
  }
  else {
    return sub_100E5B21C(0);
  }
}

void sub_100E5595C(uint64_t a1)
{
  if (a1) {
    sub_100E5C37C((void *)(a1 - 8));
  }
  else {
    sub_100E5C37C(0);
  }
}

BOOL sub_100E5596C(uint64_t a1)
{
  if (a1) {
    return sub_100E5B404(a1 - 8);
  }
  else {
    return sub_100E5B404(0);
  }
}

uint64_t sub_100E5597C(uint64_t a1)
{
  if (a1) {
    return sub_100E5A43C(a1 - 8);
  }
  else {
    return sub_100E5A43C(0);
  }
}

void *sub_100E5598C(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = (void *)(a1 - 8);
  }
  else {
    uint64_t v3 = 0;
  }
  sub_100E5D3CC((uint64_t)v3);

  return sub_100E5F618(v3, a2);
}

uint64_t sub_100E559D8(uint64_t a1, void *a2)
{
  return CLMotionActivity::isTypePedestrian() ^ 1;
}

void sub_100E55A04(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_100E5EA88(v2, a2);
}

uint64_t sub_100E55A14(uint64_t a1, uint64_t *a2)
{
  if (a1) {
    uint64_t v2 = (uint64_t *)(a1 - 8);
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_100E5DB48(v2, a2);
}

uint64_t sub_100E55A24(uint64_t a1, int *a2)
{
  if (a1) {
    uint64_t v2 = (uint64_t *)(a1 - 8);
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_100E63430(v2, a2);
}

double sub_100E55A34(uint64_t a1, double *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  if (*(unsigned char *)(v2 + 1390)) {
    return sub_100E56820(v2, 2, *(void *)(v2 + 624), *a2);
  }
  return result;
}

double sub_100E55A5C(uint64_t a1, double *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  if (*(unsigned char *)(v2 + 1390)) {
    return sub_100E56820(v2, 3, *(void *)(v2 + 624), *a2);
  }
  return result;
}

double sub_100E55A84(uint64_t a1, void *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_100E5DD24(v2, a2);
}

void sub_100E55A94(uint64_t a1, double *a2)
{
  if (a1) {
    uint64_t v2 = (uint64_t *)(a1 - 8);
  }
  else {
    uint64_t v2 = 0;
  }
  sub_100E5A5F4(v2, a2);
}

BOOL sub_100E55AA4(uint64_t a1)
{
  uint64_t v1 = a1 - 8;
  if (!a1) {
    uint64_t v1 = 0;
  }
  return *(unsigned char *)(v1 + 1389) && *(_DWORD *)(v1 + 400) == 0;
}

uint64_t sub_100E55AD0(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = (void *)(a1 - 8);
  }
  else {
    uint64_t v1 = 0;
  }
  sub_100E5D3CC((uint64_t)v1);
  sub_100E5EEB8((uint64_t)v1);

  return sub_100E5F07C(v1);
}

uint64_t sub_100E55B24(uint64_t a1, void *a2)
{
  if (a1) {
    uint64_t v2 = (void *)(a1 - 8);
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_100E5E4A4(v2, a2);
}

void *sub_100E55B34(uint64_t a1, int *a2)
{
  if (a1) {
    uint64_t v2 = (void *)(a1 - 8);
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_100E5CEEC(v2, a2);
}

uint64_t sub_100E55B44(uint64_t a1)
{
  if (a1) {
    return sub_100E639D8((void *)(a1 - 8));
  }
  else {
    return sub_100E639D8(0);
  }
}

uint64_t sub_100E55B54(uint64_t a1)
{
  if (a1) {
    return sub_100E63B94((void *)(a1 - 8));
  }
  else {
    return sub_100E63B94(0);
  }
}

uint64_t sub_100E55B64(uint64_t a1, uint64_t *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_100E5AC38(v2, a2);
}

uint64_t (***sub_100E55B74(uint64_t a1))(void, uint8_t *)
{
  if (a1) {
    return sub_100E5B678(a1 - 8);
  }
  else {
    return sub_100E5B678(0);
  }
}

uint64_t sub_100E55B84(uint64_t a1, uint64_t *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_100E5ACCC(v2, a2);
}

uint64_t sub_100E55B94(uint64_t a1)
{
  if (a1) {
    return sub_100E642E8(a1 - 8);
  }
  else {
    return sub_100E642E8(0);
  }
}

BOOL sub_100E55BA4(uint64_t a1, uint64_t *a2)
{
  if (a1) {
    uint64_t v2 = a1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  return sub_100E5B034(v2, a2);
}

uint64_t sub_100E55BB4(uint64_t a1)
{
  if (a1) {
    return sub_100E64D64(a1 - 8);
  }
  else {
    return sub_100E64D64(0);
  }
}

void sub_100E55BC4(uint64_t a1)
{
  if (a1) {
    sub_100E64F48(a1 - 8);
  }
  else {
    sub_100E64F48(0);
  }
}

uint64_t sub_100E55BD4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  *(void *)(a1 + 8) = &unk_1022FCA50;
  *(void *)(a1 + 16) = 68;
  *(_WORD *)(a1 + 24) = 512;
  *(void *)a1 = off_1022FD0C0;
  double v9 = (void *)(a1 + 32);
  sub_10111AA9C(a1 + 32);
  *(unsigned char *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(void *)(a1 + 480) = 0xBFF0000000000000;
  *(void *)(a1 + 488) = 0;
  *(unsigned char *)(a1 + 496) = 0;
  *(unsigned char *)(a1 + 504) = 0;
  *(unsigned char *)(a1 + 512) = 0;
  *(unsigned char *)(a1 + 520) = 0;
  *(unsigned char *)(a1 + 528) = 0;
  *(unsigned char *)(a1 + 536) = 0;
  *(unsigned char *)(a1 + 544) = 0;
  *(unsigned char *)(a1 + 552) = 0;
  *(unsigned char *)(a1 + 560) = 0;
  *(unsigned char *)(a1 + 568) = 0;
  *(unsigned char *)(a1 + 576) = 0;
  *(unsigned char *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(void *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(int64x2_t *)(a1 + 624) = vdupq_n_s64(0x1AuLL);
  *(_OWORD *)(a1 + 640) = 0u;
  int64x2_t v10 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 656) = 0u;
  *(int64x2_t *)(a1 + 672) = v10;
  *(_OWORD *)(a1 + 648) = 0u;
  *(void *)(a1 + 664) = 3000;
  *(void *)(a1 + 696) = 0x10000000000000;
  *(_DWORD *)(a1 + 712) = 0x7FFFFFFF;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 728) = 0x10000000000000;
  *(_OWORD *)(a1 + 801) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 824) = 0u;
  *(int64x2_t *)(a1 + 848) = v10;
  *(void *)(a1 + 864) = 23;
  *(void *)(a1 + 872) = 0x7FEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 880) = 0;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(void *)(a1 + 960) = 26;
  *(void *)(a1 + 1304) = 0;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(void *)(a1 + 1112) = 26;
  *(void *)(a1 + 1120) = 26;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(void *)(a1 + 1152) = 3000;
  *(void *)(a1 + 1160) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 1168) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 1184) = 0x10000000000000;
  *(_DWORD *)(a1 + 1200) = 0x7FFFFFFF;
  *(void *)(a1 + 1208) = 0;
  *(void *)(a1 + 1216) = 0x10000000000000;
  *(_OWORD *)(a1 + 1289) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(unsigned char *)(a1 + 1336) = 0;
  *(void *)(a1 + 1328) = 0;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(void *)(a1 + 1360) = 0;
  *(_OWORD *)(a1 + 1344) = 0u;
  sub_1014872EC(a1 + 1368, v9);
  *(_DWORD *)(a1 + 1384) = 0;
  *(_WORD *)(a1 + 1388) = 257;
  *(unsigned char *)(a1 + 1390) = 1;
  *(void *)(a1 + 1400) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 1408) = 0;
  *(_DWORD *)(a1 + 1412) = 0;
  *(unsigned char *)(a1 + 1416) = 0;
  *(_DWORD *)(a1 + 1420) = 0;
  *(void *)(a1 + 1424) = &_mh_execute_header;
  *(void *)(a1 + 1432) = *a4;
  uint64_t v11 = a4[1];
  *(void *)(a1 + 1440) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10077B4F4(a1 + 1448, a3);
  *(void *)(a1 + 1480) = 0;
  *(unsigned char *)(a1 + 1488) = 0;
  *(void *)(a1 + 1496) = 0x10000000000000;
  *(void *)(a1 + 1504) = a5;
  v38[0] = off_1022FD278;
  v38[1] = a1;
  v38[3] = v38;
  sub_100902AD0(a1 + 1512, v38);
  sub_1006A79C8(v38);
  *(unsigned char *)(a1 + 1568) = 0;
  *(void *)(a1 + 1576) = 0xBFF0000000000000;
  *(int64x2_t *)(a1 + 1584) = vdupq_n_s64(0x1AuLL);
  *(void *)(a1 + 1600) = 0;
  *(void *)(a1 + 1608) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 1616) = -1;
  v37[0] = off_1022FD2F8;
  v37[1] = a1;
  v37[3] = v37;
  sub_100E56390(v9, (uint64_t)v37);
  sub_1006ADD54(v37);
  v36[0] = off_1022FD378;
  v36[1] = a1;
  v36[3] = v36;
  sub_100E5644C(v9, (uint64_t)v36);
  sub_1006ADD54(v36);
  v35[0] = off_1022FD3F8;
  v35[1] = a1;
  v35[3] = v35;
  sub_100E56508(v9, (uint64_t)v35);
  sub_1006ADD54(v35);
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  uint64_t v12 = sub_1000A6958();
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 936))(v12);
  if (sub_100E565C4(v13, uu) && !uuid_is_null(uu))
  {
    memset(out, 0, 37);
    uuid_unparse(uu, out);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    unsigned __int8 v14 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 136315138;
      *(void *)((char *)buf + 4) = out;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Workout Predictor - Saved session id found, sending de-escalation: %s", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      unint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWorkoutPredictor::CLWorkoutPredictor(CLWorkoutPredictorSources &, CLWorkoutPredictor_Type::OnWorkoutPrediction, std::shared_ptr<CLBackgroundEscalationManager>, CLIndoorOutdoorProtocol *)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    uuid_copy((unsigned __int8 *)(a1 + 592), uu);
    double Current = CFAbsoluteTimeGetCurrent();
    sub_100E56820(a1, 10, 0, Current);
    CFAbsoluteTime v16 = CFAbsoluteTimeGetCurrent();
    long long v32 = 0u;
    long long v31 = 0u;
    long long v30 = 0u;
    long long v29 = 0u;
    long long v28 = 0u;
    long long v27 = 0u;
    long long v26 = 0u;
    long long v25 = 0u;
    long long v24 = 0u;
    long long v23 = 0u;
    long long v22 = 0u;
    long long v21 = 0u;
    *(CFAbsoluteTime *)buf = v16;
    *(int64x2_t *)&buf[1] = vdupq_n_s64(1uLL);
    uint8_t buf[4] = 0;
    buf[3] = 0;
    sub_10077AD10(a1 + 1448, 10);
    uuid_clear((unsigned __int8 *)(a1 + 592));
    sub_100E56900();
  }
  uuid_clear((unsigned __int8 *)(a1 + 608));
  *(void *)(a1 + 1392) = 0;
  uint64_t v17 = sub_10077AD10(a1 + 1448, 7);
  sub_100E56A9C(v17, 1);
  sub_10077AD10(a1 + 1448, 11);
  return a1;
}

void sub_100E56280(_Unwind_Exception *a1)
{
  sub_1007458BC(v5);
  sub_1006ADDD8(v4);
  int v7 = (std::__shared_weak_count *)v2[180];
  if (v7) {
    sub_1000DB0A0(v7);
  }
  uint64_t v8 = v2[172];
  v2[172] = 0;
  if (v8) {
    sub_1006A7A4C((uint64_t)(v2 + 172), v8);
  }
  double v9 = v2 + 58;
  int64x2_t v10 = (uint64_t *)v2[59];
  v2[59] = 0;
  if (v10) {
    sub_1006A7AA8((uint64_t)(v2 + 59), v10);
  }
  uint64_t v11 = *v9;
  *double v9 = 0;
  if (v11) {
    operator delete();
  }
  uint64_t v12 = v2[54];
  v2[54] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *v3;
  void *v3 = 0;
  if (v13) {
    sub_1006A7B2C((uint64_t)v3, v13);
  }
  sub_100E56CE0(v1);
  _Unwind_Resume(a1);
}

void *sub_100E56390(void *a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 160))(*a1);
  sub_1006ADA50((uint64_t)v5, a2);
  sub_1006AD9DC((void *)(v3 + 200), (uint64_t)v5);
  return sub_1006ADD54(v5);
}

void sub_100E56430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1006ADD54((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_100E5644C(void *a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 144))(*a1);
  sub_1006ADA50((uint64_t)v5, a2);
  sub_1006AD9DC((void *)(v3 + 200), (uint64_t)v5);
  return sub_1006ADD54(v5);
}

void sub_100E564EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1006ADD54((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_100E56508(void *a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)*a1 + 120))(*a1);
  sub_1006ADA50((uint64_t)v5, a2);
  sub_1006AD9DC((void *)(v3 + 320), (uint64_t)v5);
  return sub_1006ADD54(v5);
}

void sub_100E565A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1006ADD54((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_100E565C4(uint64_t a1, unsigned __int8 *a2)
{
  memset(&__p, 0, sizeof(__p));
  uint64_t v3 = sub_1000A6958();
  if (sub_1004D1284(v3, "WorkoutPredictorSessionId", &__p))
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v4 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v15 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Workout Predictor - Retrieving session id: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      double v9 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        double v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      int v12 = 136315138;
      uint64_t v13 = v9;
      int64x2_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::getSessionIdFromCache(uuid_t &) const", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v6 = &__p;
    }
    else {
      uint64_t v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    BOOL v7 = uuid_parse((const char *)v6, a2) == 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_100E567FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_100E56820(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  sub_100E58CB4(a1, a2, a3, (uint64_t)v6, a4);
  long long v20 = v6[12];
  long long v21 = v6[13];
  uint64_t v22 = v7;
  long long v16 = v6[8];
  long long v17 = v6[9];
  long long v18 = v6[10];
  long long v19 = v6[11];
  long long v12 = v6[4];
  long long v13 = v6[5];
  long long v14 = v6[6];
  long long v15 = v6[7];
  long long v8 = v6[0];
  long long v9 = v6[1];
  long long v10 = v6[2];
  long long v11 = v6[3];
  sub_10077AD10(a1 + 1448, 0);
  return sub_100466C2C(a1 + 1568, (uint64_t)v6);
}

void sub_100E56900()
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  v0 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Workout Predictor - Clearing session id from daemon cache.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::clearSessionIdInCache() const", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  uint64_t v1 = sub_1000A6958();
  sub_1004CF7DC(v1, "WorkoutPredictorSessionId", 0xFFFFFFFFLL);
}

unint64_t sub_100E56A9C(uint64_t a1, int a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102481D08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102481D08))
  {
    unsigned __int8 v10 = _os_feature_enabled_impl();
    sub_10006ACBC(v11, "EnableEarlyWorkoutDetection", &v10, 0);
    byte_102481D00 = v11[1];
    __cxa_guard_release(&qword_102481D08);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102481D18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102481D18))
  {
    if (byte_102481D00) {
      __int16 v4 = 150;
    }
    else {
      __int16 v4 = -1;
    }
    __int16 v9 = v4;
    sub_100E655AC(byte_102481D10, "EarlyWorkoutDetectionEscalationRulesLookbackTimeInSeconds", &v9, 0);
    __cxa_guard_release(&qword_102481D18);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102481D28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102481D28))
  {
    if (byte_102481D00) {
      __int16 v5 = 120;
    }
    else {
      __int16 v5 = -1;
    }
    __int16 v8 = v5;
    sub_100E655AC(byte_102481D20, "EarlyWorkoutDetectionEscalationRulesActiveTimeInSeconds", &v8, 0);
    __cxa_guard_release(&qword_102481D28);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102481D40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102481D40))
  {
    float v6 = 3.4028e38;
    if (byte_102481D00) {
      float v6 = 2.0;
    }
    float v7 = v6;
    sub_101A22680(byte_102481D30, "EarlyWorkoutDetectionEscalationRulesActiveSpeedInMPH", &v7, 0);
    __cxa_guard_release(&qword_102481D40);
  }
  if (a2) {
    return (unsigned __int16)word_102481D12 | ((unint64_t)(unsigned __int16)word_102481D22 << 16) | ((unint64_t)dword_102481D34 << 32);
  }
  else {
    return 0x7F7FFFFF7FFF0000;
  }
}

void sub_100E56C98(_Unwind_Exception *a1)
{
}

void *sub_100E56CE0(void *a1)
{
  a1[1] = off_1022C26F8;
  sub_1006A7C78(a1 + 33);
  sub_1004F4578(a1 + 3);
  return a1;
}

uint64_t sub_100E56D38(uint64_t a1, int a2)
{
  if (sub_10010145C())
  {
    if (a2) {
      sub_100E56D7C(a1);
    }
    else {
      sub_100E57124(a1);
    }
  }
  return 1;
}

void sub_100E56D7C(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 440);
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Trying to bring up TurnDetector, prevClientCount, %zu\n", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    __int16 v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::onTurnDetectorActivate()", "%s\n", v8);
    if (v8 != buf) {
      free(v8);
    }
  }
  unint64_t v4 = *(void *)(a1 + 440) + 1;
  *(void *)(a1 + 440) = v4;
  if (v4 >= 3)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    __int16 v5 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 440);
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = v6;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = 2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Turn detector client count is %zu but max is %zu", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      __int16 v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutPredictor::onTurnDetectorActivate()", "%s\n", v9);
      if (v9 != buf) {
        free(v9);
      }
    }
    unint64_t v4 = *(void *)(a1 + 440);
  }
  if (v4 == 1)
  {
    uint64_t v7 = *(void *)(a1 + 464);
    memset(&buf[2], 0, 32);
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    memset(v22, 0, sizeof(v22));
    buf[0] = 1;
    buf[1] = v7 != 0;
    sub_10077AD10(a1 + 1448, 3);
  }
}

void sub_100E57124(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 440);
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Trying to tear down TurnDetector, prevClientCount, %zu\n", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    __int16 v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::onTurnDetectorDeactivate()", "%s\n", v9);
    if (v9 != buf) {
      free(v9);
    }
  }
  uint64_t v4 = *(void *)(a1 + 440);
  BOOL v5 = v4 != 0;
  uint64_t v7 = v4 - 1;
  BOOL v6 = v7 != 0 && v5;
  if (!v5) {
    uint64_t v7 = 0;
  }
  *(void *)(a1 + 440) = v7;
  if (!v6)
  {
    uint64_t v8 = *(void *)(a1 + 464);
    *(_OWORD *)&buf[2] = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    memset(v23, 0, sizeof(v23));
    buf[0] = 0;
    buf[1] = v8 != 0;
    sub_10077AD10(a1 + 1448, 3);
  }
}

id sub_100E57354(uint64_t a1, int a2, int a3)
{
  double v6 = sub_10016C458();
  double Current = CFAbsoluteTimeGetCurrent();
  if (!a2)
  {
    if (a3)
    {
      uint64_t v8 = (double *)(a1 + 560);
      __int16 v9 = (unsigned char *)(a1 + 568);
      if (*(unsigned char *)(a1 + 536))
      {
        BOOL v10 = 0;
        long long v11 = (unsigned char *)(a1 + 536);
        double v14 = *(double *)(a1 + 528);
LABEL_15:
        double v15 = v6 - v14;
        double v12 = -1.0;
        double v13 = -1.0;
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v8 = (double *)(a1 + 576);
      __int16 v9 = (unsigned char *)(a1 + 584);
      if (*(unsigned char *)(a1 + 552))
      {
        BOOL v10 = 0;
        long long v11 = (unsigned char *)(a1 + 552);
        double v14 = *(double *)(a1 + 544);
        goto LABEL_15;
      }
    }
LABEL_17:
    BOOL v10 = 0;
    double v12 = -1.0;
    double v13 = -1.0;
    goto LABEL_18;
  }
  if (a3)
  {
    uint64_t v8 = (double *)(a1 + 528);
    __int16 v9 = (unsigned char *)(a1 + 536);
    if (*(unsigned char *)(a1 + 568))
    {
      BOOL v10 = 0;
      long long v11 = (unsigned char *)(a1 + 568);
      double v12 = v6 - *(double *)(a1 + 560);
      double v13 = -1.0;
LABEL_12:
      double v15 = -1.0;
LABEL_16:
      unsigned char *v11 = 0;
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  uint64_t v8 = (double *)(a1 + 544);
  __int16 v9 = (unsigned char *)(a1 + 552);
  BOOL v10 = *(unsigned char *)(a1 + 536) != 0;
  double v12 = -1.0;
  double v13 = -1.0;
  if (*(unsigned char *)(a1 + 536)) {
    double v13 = v6 - *(double *)(a1 + 528);
  }
  if (*(unsigned char *)(a1 + 584))
  {
    long long v11 = (unsigned char *)(a1 + 584);
    double v12 = v6 - *(double *)(a1 + 576);
    goto LABEL_12;
  }
LABEL_18:
  double v15 = -1.0;
LABEL_19:
  double *v8 = v6;
  *__int16 v9 = 1;
  id result = sub_100817900();
  if (result)
  {
    double v17 = *(double *)(a1 + 672);
    BOOL v18 = v17 > Current || v17 <= 0.0;
    double v19 = Current - v17;
    if (v18) {
      double v20 = -1.0;
    }
    else {
      double v20 = v19;
    }
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    long long v21 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = *(void *)(a1 + 720);
      uint64_t v23 = *(void *)(a1 + 1208);
      *(_DWORD *)buf = 67242240;
      int v26 = a2;
      __int16 v27 = 1026;
      int v28 = a3;
      __int16 v29 = 2050;
      double v30 = v15;
      __int16 v31 = 2048;
      double v32 = v12;
      __int16 v33 = 2050;
      double v34 = v20;
      __int16 v35 = 2050;
      uint64_t v36 = v22;
      __int16 v37 = 2050;
      uint64_t v38 = v23;
      __int16 v39 = 1026;
      BOOL v40 = v10;
      __int16 v41 = 2048;
      double v42 = v13;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "CLAS,analytics,GpsEnablements,enableGps,%{public}d,isTypeIntermittentGps,%{public}d,timeSinceGpsTypeLastEnabledSeconds,%{public}.1lf,timeSinceGpsTypeLastDisabledSeconds,%.1lf,timeSinceCurrentWorkoutStartS,%{public}.1lf,currentEscalatedWorkoutType,%{public}ld,previousEscalatedWorkoutType,%{public}ld,isIntermittentTo1HzGpsTransition,%{public}d,timeSinceIntermittentGpsEnabledAtTransitionS,%.1lf", buf, 0x50u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      long long v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::GpsEnablementAnalytics(BOOL, BOOL) const", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
    return (id)AnalyticsSendEventLazy();
  }
  return result;
}

NSDictionary *sub_100E57774(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v4[0] = @"enableGps";
  v5[0] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 72)];
  v4[1] = @"gpsTypeAlreadyInDesiredEnablementState";
  v5[1] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 73)];
  _DWORD v4[2] = @"isTypeIntermittentGps";
  void v5[2] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 74)];
  void v4[3] = @"timeSinceGpsTypeLastEnabledSeconds";
  void v5[3] = +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
  void v4[4] = @"timeSinceGpsTypeLastDisabledSeconds";
  void v5[4] = +[NSNumber numberWithDouble:*(double *)(a1 + 48)];
  void v4[5] = @"timeSinceCurrentWorkoutStartS";
  v5[5] = +[NSNumber numberWithDouble:*(double *)(a1 + 56)];
  void v4[6] = @"currentEscalatedWorkoutType";
  v5[6] = +[NSNumber numberWithInteger:*(void *)(v2 + 720)];
  v4[7] = @"previousEscalatedWorkoutType";
  v5[7] = +[NSNumber numberWithInteger:*(void *)(v2 + 1208)];
  v4[8] = @"isIntermittentTo1HzGpsTransition";
  v5[8] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 75)];
  v4[9] = @"timeSinceIntermittentGpsEnabledAtTransitionS";
  v5[9] = +[NSNumber numberWithDouble:*(double *)(a1 + 64)];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:10];
}

uint64_t sub_100E57908(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 448);
  unint64_t v7 = v6 - 1;
  if (!v6) {
    unint64_t v7 = 0;
  }
  if (a2) {
    unint64_t v8 = v6 + 1;
  }
  else {
    unint64_t v8 = v7;
  }
  *(void *)(a1 + 448) = v8;
  __int16 v9 = &qword_102419000;
  if (v8 >= 3)
  {
    if (qword_1024191C0 != -1)
    {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
      __int16 v9 = &qword_102419000;
    }
    BOOL v10 = v9[57];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 448);
      *(_DWORD *)buf = 134218240;
      *(void *)uint64_t v22 = v11;
      *(_WORD *)&v22[8] = 2048;
      *(void *)&v22[10] = 2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Gps client count is %zu but max is %zu", buf, 0x16u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    __int16 v9 = &qword_102419000;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      double v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWorkoutPredictor::activateGps(BOOL, BOOL)", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
      __int16 v9 = &qword_102419000;
    }
  }
  uint64_t v13 = *(void *)(a1 + 448);
  if (v13 == 1) {
    int v14 = a2;
  }
  else {
    int v14 = 0;
  }
  if (qword_1024191C0 != -1)
  {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
    __int16 v9 = &qword_102419000;
  }
  double v15 = v9[57];
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = *(void *)(a1 + 448);
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)uint64_t v22 = a2;
    *(_WORD *)&v22[4] = 2048;
    *(void *)&v22[6] = v16;
    *(_WORD *)&v22[14] = 1024;
    *(_DWORD *)&v22[16] = v14;
    __int16 v23 = 1024;
    int v24 = (v13 == 0) & ~a2;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Workout Predictor activateGps, enable, %d, currentClientCount, %zu, shouldActivate, %d, shouldDeactivate, %d", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    double v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::activateGps(BOOL, BOOL)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  BOOL v17 = v13 == 1;
  if (!a2) {
    BOOL v17 = v13 == 0;
  }
  if (v17)
  {
    sub_10077AD10(a1 + 1448, 9);
    sub_100E57354(a1, a2, a3);
  }
  return 1;
}

uint64_t sub_100E57D68(int a1, unsigned __int8 *uu)
{
  memset(out, 0, 37);
  uuid_unparse(uu, out);
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    unint64_t v8 = out;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Workout Predictor - Saving session id: %s to daemon cache.", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::saveSessionIdInCache(const uuid_t &) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  uint64_t v3 = sub_1000A6958();
  sub_1004D34AC(v3, "WorkoutPredictorSessionId", out);
  uint64_t v4 = *(void *)sub_1000A6958();
  return (*(uint64_t (**)(void))(v4 + 944))();
}

uint64_t sub_100E57F78(unsigned __int8 *a1, int a2, int a3)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v6 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240448;
    int v12 = a2;
    __int16 v13 = 1026;
    int v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Workout Predictor - updating settings, start, %{public}d, stop, %{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::setEnableWorkoutAlerts(BOOL, BOOL)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  int v7 = a1[1388];
  a1[1388] = a2;
  a1[1389] = a3;
  if (v7 != a2)
  {
    if (a2) {
      int v8 = 0;
    }
    else {
      int v8 = 2;
    }
    sub_100E581B0((uint64_t)a1, v8);
  }
  uint64_t result = (*(uint64_t (**)(unsigned __int8 *))(*(void *)a1 + 16))(a1);
  if (result) {
    return sub_1001A34E0((uint64_t)(a1 + 8), 11, (uint64_t)buf);
  }
  return result;
}

void sub_100E581B0(uint64_t a1, int a2)
{
  uint64_t v2 = a1;
  if (!*(unsigned char *)(a1 + 1388) || *(_DWORD *)(a1 + 400))
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v3 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CLAS,Disabling early escalations and rhythmic gnss because start alerts aren't allowed", buf, 2u);
    }
    a1 = sub_10013D1A0(115, 2);
    if (a1)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      double v19 = (char *)_os_log_send_and_compose_impl();
      a1 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::controlEarlyEscalation(EarlyEscalationControl) const", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    goto LABEL_8;
  }
  int v9 = a2;
  switch(a2)
  {
    case 2:
LABEL_8:
      if (*(unsigned char *)(v2 + 520)) {
        *(unsigned char *)(v2 + 520) = 0;
      }
      unint64_t v4 = sub_100E56A9C(a1, 0);
      LOWORD(v5) = v4;
      unint64_t v6 = HIDWORD(v4);
      unint64_t v7 = v4 >> 16;
      sub_10077AD10(v2 + 1448, 11);
      sub_10077AD10(v2 + 1448, 9);
      int v8 = 0;
      int v9 = 2;
      goto LABEL_11;
    case 1:
      unint64_t v17 = sub_100E56A9C(a1, 0);
      LOWORD(v5) = v17;
      unint64_t v6 = HIDWORD(v17);
      unint64_t v7 = v17 >> 16;
      sub_10077AD10(v2 + 1448, 11);
      sub_10077AD10(v2 + 1448, 9);
      int v8 = 1;
      int v9 = 1;
LABEL_11:
      sub_100E57354(v2, v8, 1);
      int v5 = (unsigned __int16)v5;
      LODWORD(v7) = (unsigned __int16)v7;
      double v10 = *(float *)&v6;
      goto LABEL_12;
    case 0:
      if (*(unsigned char *)(a1 + 520)) {
        *(unsigned char *)(a1 + 520) = 0;
      }
      unint64_t v16 = sub_100E56A9C(a1, 1);
      LOWORD(v5) = v16;
      unint64_t v6 = HIDWORD(v16);
      unint64_t v7 = v16 >> 16;
      sub_10077AD10(v2 + 1448, 11);
      sub_10077AD10(v2 + 1448, 9);
      int v8 = 0;
      int v9 = 0;
      goto LABEL_11;
  }
  int v5 = 0;
  LODWORD(v7) = 0;
  double v10 = 0.0;
LABEL_12:
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v11 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = "Disable";
    if (v9 == 1) {
      int v12 = "Ongoing";
    }
    *(_DWORD *)buf = 136446978;
    if (!v9) {
      int v12 = "Activate";
    }
    long long v21 = v12;
    if (v9) {
      int v13 = -1;
    }
    else {
      int v13 = v5;
    }
    if (v9) {
      int v14 = -1;
    }
    else {
      int v14 = v7;
    }
    __int16 v22 = 1026;
    int v23 = v13;
    unint64_t v15 = 0xBFF0000000000000;
    if (!v9) {
      unint64_t v15 = *(void *)&v10;
    }
    __int16 v24 = 1026;
    int v25 = v14;
    __int16 v26 = 2050;
    unint64_t v27 = v15;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CLAS,controlEarlyEscalation,command,%{public}s,lookbackTimeInSeconds,%{public}d,activeTimeInSeconds,%{public}d,activeSpeedInMPH,%{public}.1lf", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    BOOL v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::controlEarlyEscalation(EarlyEscalationControl) const", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
}

uint64_t sub_100E5885C(void *a1, double a2, double a3)
{
  *(double *)int v5 = a2;
  *(double *)&v5[1] = a3;
  a1[85] = 0x7FEFFFFFFFFFFFFFLL;
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  if (result) {
    return sub_1001A34E0((uint64_t)(a1 + 1), 12, (uint64_t)v5);
  }
  return result;
}

uint64_t sub_100E588C8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)a2;
  *(void *)(a1 + 1416) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 1400) = v2;
  uint64_t result = *(void *)(a1 + 424);
  if (result) {
    return sub_1014435DC(result, (long long *)a2);
  }
  return result;
}

void *sub_100E588EC(uint64_t a1, _DWORD *a2)
{
  uint64_t result = *(void **)(a1 + 424);
  if (result) {
    return sub_101443828(result, a2);
  }
  return result;
}

uint64_t sub_100E588FC(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 424);
  if (result) {
    uint64_t result = sub_101443E30(result, a2);
  }
  *(_DWORD *)(a1 + 1384) = *(_DWORD *)(a2 + 12);
  return result;
}

uint64_t *sub_100E58938(uint64_t a1)
{
  uint64_t result = *(uint64_t **)(a1 + 424);
  if (result) {
    return (uint64_t *)sub_10144385C(result);
  }
  return result;
}

BOOL sub_100E58948(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 80);
  if (v2 != 720912) {
    return v2 == 720912;
  }
  double v4 = sub_10016C458();
  if (*(unsigned char *)(a1 + 520))
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    int v5 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
    {
      if (!*(unsigned char *)(a1 + 520)) {
        goto LABEL_25;
      }
      double v6 = vabdd_f64(v4, *(double *)(a1 + 512));
      *(_DWORD *)buf = 134217984;
      double v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLAS, received another early escalation when we're already tracking one, duration, %f", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_9;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    if (*(unsigned char *)(a1 + 520))
    {
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWorkoutPredictor::checkAndDisableEarlyDetection(const CLWorkoutPredictorActivity &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
      goto LABEL_9;
    }
LABEL_25:
    sub_10020D700();
  }
LABEL_9:
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  unint64_t v7 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(a1 + 24);
    *(_DWORD *)buf = 67109120;
    LODWORD(v13) = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLAS, received early escalation, current fsm state, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    double v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::checkAndDisableEarlyDetection(const CLWorkoutPredictorActivity &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  *(double *)(a1 + 512) = v4;
  *(unsigned char *)(a1 + 520) = 1;
  sub_100E581B0(a1, 1);
  return v2 == 720912;
}

void sub_100E58CB4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  double v10 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    v24[0] = 68289794;
    v24[1] = 0;
    __int16 v25 = 2082;
    __int16 v26 = "";
    __int16 v27 = 2050;
    double v28 = a5;
    __int16 v29 = 2050;
    uint64_t v30 = a2;
    __int16 v31 = 2050;
    uint64_t v32 = a3;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Sending workout event\", \"event time\":\"%{public}f\", \"event type\":%{public}ld, \"workout type\":%{public}ld}", (uint8_t *)v24, 0x30u);
  }
  uuid_copy((unsigned __int8 *)(a4 + 64), (const unsigned __int8 *)(a1 + 592));
  uuid_copy((unsigned __int8 *)(a4 + 80), (const unsigned __int8 *)(a1 + 608));
  *(void *)(a4 + 112) = a3;
  long long v11 = *(_OWORD *)(a1 + 800);
  *(_OWORD *)(a4 + 176) = *(_OWORD *)(a1 + 784);
  *(_OWORD *)(a4 + 192) = v11;
  *(_OWORD *)(a4 + 208) = *(_OWORD *)(a1 + 816);
  long long v12 = *(_OWORD *)(a1 + 768);
  *(_OWORD *)(a4 + 144) = *(_OWORD *)(a1 + 752);
  *(_OWORD *)(a4 + 160) = v12;
  if (a3 == 19) {
    *(_OWORD *)(a4 + 128) = *(_OWORD *)(a1 + 832);
  }
  uint64_t v13 = *(void *)(a1 + 656);
  if (!v13) {
    uint64_t v13 = sub_1010144C0(*(void *)(a1 + 632));
  }
  uint64_t v14 = *(void *)(a1 + 648);
  if (!v14) {
    uint64_t v14 = v13;
  }
  *(void *)(a4 + 120) = v14;
  *(void *)(a4 + 224) = *(void *)(a1 + 744);
  long long v15 = *(_OWORD *)(a1 + 672);
  *(_OWORD *)a4 = v15;
  *(void *)(a4 + 16) = a2;
  *(double *)(a4 + 24) = a5;
  *(_DWORD *)(a4 + 32) = *(_DWORD *)(a1 + 736);
  *(double *)(a4 + 40) = sub_100F6E71C(*(void *)(a1 + 1432), *(double *)&v15);
  *(void *)(a4 + 48) = *(void *)(a1 + 720);
  if (a3 == 14)
  {
    uint64_t v16 = *(void *)(a1 + 664);
    *(void *)(a4 + 128) = v16;
  }
  else
  {
    uint64_t v16 = 3000;
  }
  *(void *)(a4 + 56) = v16;
  long long v17 = *(_OWORD *)(a4 + 208);
  *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a4 + 192);
  *(_OWORD *)(a1 + 1056) = v17;
  *(void *)(a1 + 1072) = *(void *)(a4 + 224);
  long long v18 = *(_OWORD *)(a4 + 144);
  *(_OWORD *)(a1 + 976) = *(_OWORD *)(a4 + 128);
  *(_OWORD *)(a1 + 992) = v18;
  long long v19 = *(_OWORD *)(a4 + 176);
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a4 + 160);
  *(_OWORD *)(a1 + 1024) = v19;
  long long v20 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(a1 + 912) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(a1 + 928) = v20;
  long long v21 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(a1 + 944) = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(a1 + 960) = v21;
  long long v22 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 848) = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 864) = v22;
  long long v23 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(a1 + 880) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a1 + 896) = v23;
}

uint64_t sub_100E58ECC(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102481CC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102481CC8))
  {
    LOWORD(v12) = 180;
    sub_100E655AC(buf, "WorkoutDetectionStartTimerDelayWorkout", &v12, 0);
    LOWORD(v9) = *(_WORD *)&buf[2];
    dword_102481CC0 = (int)(float)((float)v9 / 2.56);
    __cxa_guard_release(&qword_102481CC8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102481CD8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102481CD8))
  {
    LOWORD(v12) = 600;
    sub_100E655AC(buf, "WorkoutDetectionStartTimerDelayWalking", &v12, 0);
    LOWORD(v10) = *(_WORD *)&buf[2];
    dword_102481CD0 = (int)(float)((float)v10 / 2.56);
    __cxa_guard_release(&qword_102481CD8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102481CE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102481CE8))
  {
    LOWORD(v12) = 180;
    sub_100E655AC(buf, "WorkoutDetectionStartTimerDelayRunning", &v12, 0);
    LOWORD(v11) = *(_WORD *)&buf[2];
    dword_102481CE0 = (int)(float)((float)v11 / 2.56);
    __cxa_guard_release(&qword_102481CE8);
  }
  if ((unint64_t)(a2 - 20) < 0x2F)
  {
LABEL_6:
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v3 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      uint64_t v17 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to get workout start reminder delay for workout type: %{public}ld.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      int v12 = 134349056;
      uint64_t v13 = a2;
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "int CLWorkoutPredictor::getDelayInEpochsForStartRemindersForLabel(CMWorkoutType) const", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
LABEL_11:
    uint64_t v4 = 0x7FFFFFFFLL;
  }
  else
  {
    switch(a2)
    {
      case 0:
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
      case 11:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
        goto LABEL_6;
      case 1:
        uint64_t v4 = dword_102481CD0;
        break;
      case 2:
        uint64_t v4 = dword_102481CE0;
        break;
      case 3:
      case 4:
      case 9:
      case 12:
      case 14:
      case 19:
        uint64_t v4 = dword_102481CC0;
        break;
      default:
        goto LABEL_11;
    }
  }
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  int v5 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349312;
    uint64_t v17 = a2;
    __int16 v18 = 1026;
    int v19 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLAS,Received workout start reminder delay in epochs for workout type,%{public}ld,delay,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    int v12 = 134349312;
    uint64_t v13 = a2;
    __int16 v14 = 1026;
    int v15 = v4;
    unint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "int CLWorkoutPredictor::getDelayInEpochsForStartRemindersForLabel(CMWorkoutType) const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return v4;
}

void sub_100E59384(_Unwind_Exception *a1)
{
}

uint64_t sub_100E59414(uint64_t result, uint64_t a2)
{
  *(void *)(result + 1480) = a2;
  return result;
}

uint64_t sub_100E5941C(uint64_t result, double a2)
{
  *(double *)(result + 1496) = a2;
  return result;
}

uint64_t sub_100E59424(uint64_t result, char a2)
{
  *(unsigned char *)(result + 1488) = a2;
  return result;
}

uint64_t sub_100E5942C(uint64_t a1, uint64_t *a2)
{
  BOOL v4 = sub_100E597B0(a1);
  BOOL v5 = v4;
  if (*((unsigned char *)a2 + 32))
  {
    if (*(void *)(a1 + 720) == 1)
    {
      double v6 = a2 + 1;
      BOOL v7 = 1;
LABEL_10:
      BOOL v9 = 1;
      goto LABEL_12;
    }
    BOOL v7 = *(void *)(a1 + 632) == 1;
  }
  else
  {
    BOOL v7 = 0;
  }
  double v6 = a2 + 1;
  if (a2[1]) {
    int v8 = v7;
  }
  else {
    int v8 = 1;
  }
  if ((v8 | v4)) {
    goto LABEL_10;
  }
  BOOL v7 = 0;
  BOOL v9 = *(unsigned char *)(a1 + 1388) == 0;
LABEL_12:
  int v10 = sub_100F6E09C(*(void *)(a1 + 1432));
  int v11 = *(_DWORD *)(a1 + 1384);
  if (sub_1001BD934(*v6) == 3) {
    uint64_t result = MGGetBoolAnswer();
  }
  else {
    uint64_t result = 1;
  }
  int v13 = result ^ 1;
  if ((v9 & v10 & 1) != 0 || v11 == 4 || v13)
  {
    if (v5 || !*(unsigned char *)(a1 + 1388))
    {
      int v14 = 13;
    }
    else if (v11 == 4)
    {
      int v14 = 8;
    }
    else if (result)
    {
      int v14 = 7;
    }
    else
    {
      int v14 = 14;
    }
    int v21 = v14;
    uint64_t v22 = *a2;
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    int v15 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = *(unsigned __int8 *)(a1 + 1388);
      uint64_t v17 = *v6;
      *(_DWORD *)buf = 67241728;
      BOOL v38 = v5;
      __int16 v39 = 1026;
      int v40 = v16;
      __int16 v41 = 2050;
      uint64_t v42 = v17;
      __int16 v43 = 1026;
      int v44 = v10;
      __int16 v45 = 1026;
      BOOL v46 = v7;
      __int16 v47 = 1026;
      BOOL v48 = v11 == 4;
      __int16 v49 = 1026;
      int v50 = v13;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Workout Predictor Deescalating,shouldMute,%{public}d,startAlertEnabled,%{public}d,tier2,%{public}lu,backgroundDeescalate,%{public}d,isTrackingAltWalk,%{public}d,vehicular,%{public}d,supportedAlertType,%{public}d", buf, 0x30u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      int v18 = *(unsigned __int8 *)(a1 + 1388);
      uint64_t v19 = *v6;
      int v23 = 67241728;
      BOOL v24 = v5;
      __int16 v25 = 1026;
      int v26 = v18;
      __int16 v27 = 2050;
      uint64_t v28 = v19;
      __int16 v29 = 1026;
      int v30 = v10;
      __int16 v31 = 1026;
      BOOL v32 = v7;
      __int16 v33 = 1026;
      BOOL v34 = v11 == 4;
      __int16 v35 = 1026;
      int v36 = v13;
      long long v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::checkDeescalationAndSignal(CLWorkoutClassifier_Type::SmoothedTier2ClassifierResult &)", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if (result) {
      return sub_1001A34E0(a1 + 8, 14, (uint64_t)&v21);
    }
  }
  return result;
}

BOOL sub_100E597B0(uint64_t a1)
{
  return vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 1184)) < *(double *)(a1 + 1192)
      && *(void *)(a1 + 1120) == *(void *)(a1 + 632)
      && *(void *)(a1 + 1144) == *(void *)(a1 + 656);
}

void *sub_100E59810(void *result, int a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t)result;
  switch(a2)
  {
    case 8:
      uint64_t v8 = 23;
      if (*(_DWORD *)a3 == 2) {
        uint64_t v8 = 3;
      }
      uint64_t v9 = 2;
      if (*(_DWORD *)a3 != 1) {
        uint64_t v9 = v8;
      }
      if (v9 != 23 && result[108] != v9)
      {
        if (v9 == 3)
        {
          *(void *)&long long v11 = *(void *)(a3 + 8);
          uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
          if (!result) {
            return result;
          }
          uint64_t v6 = v4 + 8;
          int v7 = 8;
        }
        else
        {
          *(void *)&long long v11 = *(void *)(a3 + 8);
          uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
          if (!result) {
            return result;
          }
          uint64_t v6 = v4 + 8;
          int v7 = 9;
        }
        return (void *)sub_1001A34E0(v6, v7, (uint64_t)&v11);
      }
      break;
    case 4:
      sub_10111E1FC(result + 4, (long long *)a3);
      uint64_t result = (void *)sub_100E5942C(v4, (uint64_t *)a3);
      uint64_t v10 = *(void *)(a3 + 8);
      if (v10)
      {
        if (v10 != 25)
        {
          uint64_t v12 = 0;
          *(void *)&long long v11 = v10;
          *((void *)&v11 + 1) = *(void *)(a3 + 24);
          LODWORD(v12) = *(_DWORD *)(a3 + 16);
          uint64_t v13 = *(void *)a3;
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
          if (result)
          {
            uint64_t v6 = v4 + 8;
            int v7 = 2;
            return (void *)sub_1001A34E0(v6, v7, (uint64_t)&v11);
          }
        }
      }
      break;
    case 1:
      BOOL v5 = (dispatch_queue_t *)sub_10019F4CC();
      sub_100F2B0B8(v5, a3);
      long long v11 = *(_OWORD *)a3;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
      if (result)
      {
        uint64_t v6 = v4 + 8;
        int v7 = 4;
        return (void *)sub_1001A34E0(v6, v7, (uint64_t)&v11);
      }
      break;
  }
  return result;
}

BOOL sub_100E599F4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 1388)) {
    BOOL v4 = *(_DWORD *)(a1 + 400) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  int v5 = *(unsigned __int8 *)(a2 + 24);
  double v6 = *(double *)a2;
  double v7 = *(double *)(a1 + 728);
  BOOL v8 = sub_100F6DCFC(*(void *)(a1 + 1432), *(void *)(a2 + 16));
  if (sub_1001BD934(*(void *)(a2 + 16)) == 3) {
    int v9 = MGGetBoolAnswer();
  }
  else {
    int v9 = 1;
  }
  BOOL v10 = vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 1184)) < *(double *)(a1 + 1192)
     && *(void *)(a2 + 16) == 3
     && *(void *)(a1 + 1120) == 4;
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  long long v11 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68290562;
    BOOL v21 = 0;
    __int16 v22 = 2082;
    *(void *)int v23 = "";
    *(_WORD *)&v23[8] = 1026;
    *(_DWORD *)BOOL v24 = v4;
    *(_WORD *)&v24[4] = 1026;
    *(_DWORD *)__int16 v25 = v6 > v7;
    *(_WORD *)&v25[4] = 1026;
    *(_DWORD *)int v26 = v8;
    *(_WORD *)&v26[4] = 1026;
    *(_DWORD *)&v26[6] = v9;
    __int16 v27 = 1026;
    BOOL v28 = v10;
    __int16 v29 = 1026;
    LODWORD(v30) = v5;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLAS,check if workout should escalate.\", \"is start enabled\":%{public}hhd, \"is new\":%{public}hhd, \"allow background\":%{public}hhd, \"is allowed type\":%{public}hhd, \"should mute\":%{public}hhd, \"is early detection\":%{public}hhd}", buf, 0x36u);
  }
  if (v5)
  {
    BOOL v12 = 0;
  }
  else
  {
    BOOL v13 = v6 > v7 && v4;
    BOOL v12 = v13 & v9 & !v10 | v8;
  }
  if (sub_100817900())
  {
    if (*(unsigned char *)(a1 + 536))
    {
      double v14 = sub_10016C458();
      if (!*(unsigned char *)(a1 + 536)) {
        sub_10020D700();
      }
      double v15 = v14 - *(double *)(a1 + 528);
    }
    else
    {
      double v15 = -1.0;
    }
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    int v16 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(a2 + 16);
      *(_DWORD *)buf = 67241984;
      BOOL v21 = v4;
      __int16 v22 = 1026;
      *(_DWORD *)int v23 = v6 > v7;
      *(_WORD *)&v23[4] = 1026;
      *(_DWORD *)&v23[6] = v8;
      *(_WORD *)BOOL v24 = 1026;
      *(_DWORD *)&_DWORD v24[2] = v9;
      *(_WORD *)__int16 v25 = 1026;
      *(_DWORD *)&v25[2] = v5;
      *(_WORD *)int v26 = 2050;
      *(void *)&v26[2] = v17;
      __int16 v27 = 1026;
      BOOL v28 = v12;
      __int16 v29 = 2048;
      double v30 = v15;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "CLAS,analytics,Escalations,areStartAlertsEnabled,%{public}d,isNewEscalation,%{public}d,isBackgroundEscalation,%{public}d,isAllowedWorkoutType,%{public}d,isEarlyDetection,%{public}d,workoutType,%{public}ld,shouldInitiateNonEarlyEscalation,%{public}d,timeSinceLastEarlyEscalationSeconds,%.1lf", buf, 0x3Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::shouldEscalate(const EApEscalation *) const", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    AnalyticsSendEventLazy();
  }
  return v12;
}

NSDictionary *sub_100E59EA0(uint64_t a1)
{
  v3[0] = @"areStartAlertsEnabled";
  v4[0] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 48)];
  v3[1] = @"isNewEscalation";
  v4[1] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 49)];
  void v3[2] = @"isBackgroundEscalation";
  _DWORD v4[2] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 50)];
  void v3[3] = @"isAllowedWorkoutType";
  void v4[3] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 51)];
  void v3[4] = @"isEarlyEscalation";
  void v4[4] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 52)];
  void v3[5] = @"workoutType";
  void v4[5] = +[NSNumber numberWithInteger:*(void *)(*(void *)(a1 + 32) + 16)];
  void v3[6] = @"shouldInitiateNonEarlyEscalation";
  void v4[6] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 53)];
  v3[7] = @"timeSinceLastEarlyEscalationSeconds";
  v4[7] = +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:8];
}

BOOL sub_100E59FF4(uint64_t a1, void *a2)
{
  +[CMWorkout CLMotionActivityTypeFromCMWorkoutType:*a2];
  if (CLMotionActivity::isTypePedestrian()) {
    BOOL v3 = *(void *)(a1 + 656) == 0;
  }
  else {
    BOOL v3 = 0;
  }
  uint64_t v4 = sub_1000A16E8();
  if (qword_1024192A0 != -1) {
    dispatch_once(&qword_1024192A0, &stru_1022FD148);
  }
  unint64_t v5 = v4 & 0x1000000000000;
  double v6 = qword_1024192A8;
  if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(a1 + 1336);
    *(_DWORD *)buf = 67240704;
    BOOL v12 = v3;
    __int16 v13 = 1026;
    int v14 = v7;
    __int16 v15 = 1026;
    int v16 = HIWORD(v5);
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "isWaitingForIndoorOutdoorDisambiguation,%{public}d,permission,%{public}d,enabled,%{public}d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192A0 != -1) {
      dispatch_once(&qword_1024192A0, &stru_1022FD148);
    }
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::isWaitingForIndoorOutdoorDisambiguation(const ELabelerUpdate *) const", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (*(unsigned char *)(a1 + 1336)) {
    BOOL v8 = v3;
  }
  else {
    BOOL v8 = 0;
  }
  return v5 && v8;
}

uint64_t sub_100E5A22C(uint64_t a1)
{
  return sub_10077AD10(a1 + 1448, 2);
}

uint64_t sub_100E5A2D8(void *a1)
{
  BOOL v2 = sub_100E597B0((uint64_t)a1);
  unsigned int v3 = sub_100E5A43C((uint64_t)a1);
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[140];
    uint64_t v6 = a1[79];
    uint64_t v7 = a1[143];
    uint64_t v8 = a1[82];
    uint64_t v9 = a1[148];
    uint64_t v10 = a1[149];
    v12[0] = 68291074;
    v12[1] = 0;
    __int16 v13 = 2082;
    int v14 = "";
    __int16 v15 = 2050;
    uint64_t v16 = v5;
    __int16 v17 = 2050;
    uint64_t v18 = v6;
    __int16 v19 = 2050;
    uint64_t v20 = v7;
    __int16 v21 = 2050;
    uint64_t v22 = v8;
    __int16 v23 = 1026;
    BOOL v24 = v2;
    __int16 v25 = 2050;
    uint64_t v26 = v9;
    __int16 v27 = 2050;
    uint64_t v28 = v10;
    __int16 v29 = 1026;
    unsigned int v30 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"should mute - start\", \"previous workout type\":%{public}ld, \"current workout type\":%{public}ld, \"previous workout location type\":%{public}ld, \"current workout location type\":%{public}ld, \"should mute\":%{public}d, \"previous mute time - start\":\"%{public}f\", \"previous mute interval - start\":\"%{public}f\", \"backgroundEscalationIsNotActive\":%{public}d}", (uint8_t *)v12, 0x5Au);
  }
  return v2 & v3;
}

uint64_t sub_100E5A43C(uint64_t a1)
{
  uint64_t v1 = sub_100F6E09C(*(void *)(a1 + 1432));
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  BOOL v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    int v6 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLWorkoutPredictor,backgroundEscalationIsNotActive,shouldDeescalateForVO2MaxVar,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::backgroundEscalationIsNotActive(const T *) const [T = CLWorkoutPredictor::EStartReminderDelayExpired]", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return v1;
}

void sub_100E5A5F4(uint64_t *a1, double *a2)
{
  double v3 = *a2;
  a1[85] = *(void *)a2;
  *((double *)a1 + 91) = v3;
  sub_100E56820((uint64_t)a1, 1, a1[78], v3);
  sub_100E5A650((uint64_t)a1);

  sub_100E5A95C((uint64_t)a1);
}

uint64_t sub_100E5A650(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  BOOL v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down. Resetting workout prediction.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    LOWORD(v7) = 0;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardown(const T *) [T = CLWorkoutPredictor::EUserEndedWorkout]", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_100902D40(a1 + 1512);
  sub_100E5D218(a1);
  sub_100E5C784((void *)a1);
  sub_100E5D3CC(a1);
  uuid_clear((unsigned __int8 *)(a1 + 592));
  uuid_clear((unsigned __int8 *)(a1 + 608));
  sub_100E56900();
  *(int64x2_t *)(a1 + 624) = vdupq_n_s64(0x1AuLL);
  *(_DWORD *)(a1 + 640) = 0;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 648) = 0;
  *(int64x2_t *)(a1 + 672) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 712) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 736) = 0;
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 840) = 0;
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 664) = 3000;
  if (*(void *)(a1 + 1344) || *(void *)(a1 + 1352) || *(void *)(a1 + 1360))
  {
    memset((char *)v6 + 8, 0, 208);
    *(void *)&v6[0] = *(void *)(a1 + 1360);
    long long v12 = v6[4];
    long long v11 = v6[3];
    long long v9 = v6[1];
    long long v10 = v6[2];
    long long v16 = v6[8];
    long long v15 = v6[7];
    long long v13 = v6[5];
    long long v14 = v6[6];
    long long v20 = v6[12];
    long long v19 = v6[11];
    long long v17 = v6[9];
    long long v18 = v6[10];
    *(_OWORD *)buf = *(_OWORD *)(a1 + 1344);
    uint64_t v21 = 0;
    long long v7 = *(_OWORD *)buf;
    long long v8 = v6[0];
    sub_10077AD10(a1 + 1448, 6);
    *(void *)(a1 + 1344) = 0;
    *(void *)(a1 + 1352) = 0;
    *(void *)(a1 + 1360) = 0;
  }
  sub_100F6DDD8(*(void *)(a1 + 1432));
  return sub_100E5A22C(a1);
}

void sub_100E5A95C(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  BOOL v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Trying to tear down ActiveStateDetector", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardownActiveStateDetector()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (*(void *)(a1 + 472))
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    double v3 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Tearing down ActiveStateDetector", buf, 2u);
    }
    uint64_t v4 = (uint64_t **)(a1 + 472);
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      long long v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardownActiveStateDetector()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    uint64_t v5 = *v4;
    *uint64_t v4 = 0;
    if (v5) {
      sub_1006A7AA8((uint64_t)v4, v5);
    }
  }
}

uint64_t sub_100E5AC38(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 648);
  +[CMWorkout CLMotionActivityTypeFromCMWorkoutType:*a2];
  int isTypePedestrian = CLMotionActivity::isTypePedestrian();
  uint64_t v6 = sub_1000A16E8();
  uint64_t v7 = *(void *)(a1 + 624);
  unsigned __int16 v9 = v7 != 15 && v7 != 24;
  uint64_t v10 = 0;
  if (isTypePedestrian && v4 && v4 != 3) {
    return sub_100E5ACCC(a1, a2) & HIWORD(v6) & v9;
  }
  return v10;
}

uint64_t sub_100E5ACCC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_1001BD934(*(void *)(a1 + 624));
  uint64_t v5 = sub_1001BD934(*a2);
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v6 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349312;
    uint64_t v19 = v4;
    __int16 v20 = 2050;
    uint64_t v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Checking if resuming the same workout: confirmed=%{public}ld detected=%{public}ld", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    long long v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::isSameWorkout(const ELabelerUpdate *const) const", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  uint64_t v7 = *(void *)(a1 + 624);
  if (v7 == 24 || v7 == 15)
  {
    uint64_t v8 = sub_1001BD934(v4);
    int v10 = v8 == 1 || v8 == 24;
    uint64_t v11 = sub_1001BD934(v5);
    int v13 = v11 == 1 || v11 == 24;
    if (v10 != v13) {
      return 0;
    }
  }
  else if (v4 != v5)
  {
    return 0;
  }
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  long long v15 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Checking to see if we should retract stop alert. Workout is the same.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    long long v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::isSameWorkout(const ELabelerUpdate *const) const", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  return 1;
}

BOOL sub_100E5B034(uint64_t a1, uint64_t *a2)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 648);
    uint64_t v6 = *a2;
    *(_DWORD *)buf = 134349312;
    uint64_t v10 = v5;
    __int16 v11 = 2050;
    uint64_t v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Checking if resuming in the same location: previous=%{public}ld new=%{public}ld", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::isSameLocation(const ELocationTypeUpdate *const) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return *(void *)(a1 + 648) == *a2;
}

BOOL sub_100E5B21C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 640);
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  double v3 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 640);
    *(_DWORD *)buf = 67240448;
    int v8 = v4;
    __int16 v9 = 1026;
    BOOL v10 = v2 == 1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "isPredictedWorkoutConfidenceHigh,detectedWorkoutConfidence,%{public}d,is_high,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::isPredictedWorkoutConfidenceHigh(const EStartReminderDelayExpired *const) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return v2 == 1;
}

BOOL sub_100E5B404(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102481CF8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v8 = a1;
    int v9 = __cxa_guard_acquire(&qword_102481CF8);
    a1 = v8;
    if (v9)
    {
      v10[0] = 120;
      sub_10044FD20(buf, "AddedDelayInSecondsForHighConfidence", v10, 0);
      dword_102481CF0 = (int)(float)((float)v12 / 2.56);
      __cxa_guard_release(&qword_102481CF8);
      a1 = v8;
    }
  }
  int v1 = *(_DWORD *)(a1 + 716);
  int v2 = *(_DWORD *)(a1 + 712);
  int v3 = dword_102481CF0;
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  int v4 = v3 + v2;
  uint64_t v5 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    BOOL v12 = v1 < v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLWorkoutPredictor::shouldWaitForHighConfidence,shouldWaitForHighConfidenceVar,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    v10[0] = 67240192;
    v10[1] = v1 < v4;
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::shouldWaitForHighConfidence(const EStartReminderDelayExpired *const) const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return v1 < v4;
}

void sub_100E5B658(_Unwind_Exception *a1)
{
}

uint64_t (***sub_100E5B678(uint64_t a1))(void, uint8_t *)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  int v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "User started activity again. Check to see if we should retract stop alert. Bringing up indoor/outdoor detector.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::enterConfirmStopRetraction(const ELabelerUpdate *const)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return sub_100E5B814(a1);
}

uint64_t (***sub_100E5B814(uint64_t a1))(void, uint8_t *)
{
  if (qword_1024192A0 != -1) {
    dispatch_once(&qword_1024192A0, &stru_1022FD148);
  }
  int v2 = qword_1024192A8;
  if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 456);
    *(_DWORD *)buf = 67240192;
    int v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Bringing up Indoor/Outdoor detector,isActive,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192A0 != -1) {
      dispatch_once(&qword_1024192A0, &stru_1022FD148);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupIndoorOutdoor()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 56))(*(void *)(a1 + 32));
  uint64_t result = (uint64_t (***)(void, uint8_t *))sub_100AD8E44(v4);
  if (!*(unsigned char *)(a1 + 456))
  {
    BOOL v6 = 1;
    *(unsigned char *)(a1 + 456) = 1;
    uint64_t v10 = *(void *)(a1 + 1480);
    uint64_t v11 = *(void *)(a1 + 1496);
    if (sub_101014514(*(void *)(a1 + 624))) {
      BOOL v6 = *(void *)(a1 + 648) != 3;
    }
    buf[0] = v6;
    uint64_t result = *(uint64_t (****)(void, uint8_t *))(a1 + 1504);
    if (result) {
      return (uint64_t (***)(void, uint8_t *))(**result)(result, buf);
    }
  }
  return result;
}

uint64_t sub_100E5BA60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unsigned __int8 *)(a1 + 592);
  uuid_generate((unsigned __int8 *)(a1 + 592));
  sub_100E57D68(v5, v4);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = (double *)a2;
  *(void *)(a1 + 1344) = v6;
  *(void *)(a1 + 672) = *(void *)(a2 + 8 * (v6 == 3));
  *(void *)(a1 + 632) = 25;
  if (v6 == 3)
  {
    double v17 = CFAbsoluteTimeGetCurrent() + -48.6399994;
    if (*(double *)a2 >= v17) {
      uint64_t v7 = (double *)a2;
    }
    else {
      uint64_t v7 = &v17;
    }
  }
  *(_DWORD *)(a1 + 716) = (int)(vabdd_f64(CFAbsoluteTimeGetCurrent(), *v7) / 2.55999994);
  *(_DWORD *)(a1 + 712) = sub_100E58ECC(v8, *(void *)(a2 + 16));
  *(void *)(a1 + 720) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 736) = 3;
  sub_100E5BD08(a1);
  sub_100F6D940(*(void *)(a1 + 1432), *(void *)(a2 + 16));
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  int v9 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a2 + 16);
    int v11 = *(_DWORD *)(a1 + 716);
    *(void *)&double v17 = 68289538;
    *(_WORD *)long long v18 = 2082;
    *(void *)&v18[2] = "";
    *(_WORD *)&v18[10] = 2050;
    *(void *)&v18[12] = v10;
    *(_WORD *)&v18[20] = 1026;
    *(_DWORD *)&v18[22] = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Transitioned to kWaitForLabel state.\", \"escalated workout type\":%{public}ld, \"elapsed epochs\":%{public}d}", (uint8_t *)&v17, 0x22u);
  }
  sub_100E5A22C(a1);
  uint64_t v12 = *(void *)(a2 + 16);
  memset(&v18[8], 0, 216);
  double v17 = 0.0;
  *(void *)long long v18 = v12;
  sub_10077AD10(a1 + 1448, 5);
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100E56820(a1, 8, *(void *)(a1 + 632), Current);
  CFAbsoluteTime v14 = CFAbsoluteTimeGetCurrent();
  uint64_t v15 = *(void *)(a1 + 632);
  memset(&v18[32], 0, 192);
  double v17 = v14;
  *(void *)long long v18 = 1;
  *(void *)&v18[8] = 0;
  *(void *)&v18[16] = 0;
  *(void *)&v18[24] = v15;
  uint64_t result = sub_10077AD10(a1 + 1448, 10);
  if (*(void *)(a2 + 16) == 3) {
    return sub_100902F64(a1 + 1512, 4, 2, 0, 0);
  }
  return result;
}

void *sub_100E5BD08(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32));
  uint64_t result = (void *)sub_1006AC0E8(v3);
  uint64_t v5 = *(void *)(v2 + 400);
  if (v5)
  {
    *(unsigned char *)(v5 + 56) = 0;
  }
  else
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v6 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Bringing up WorkoutLabeler", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupLabeler()", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    v11[0] = off_1022FD718;
    v11[1] = a1;
    unsigned __int8 v11[3] = v11;
    (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t, void *))(*(void *)a1 + 24))(buf, a1, v2, v11);
    uint64_t v7 = *(void *)buf;
    *(void *)buf = 0;
    uint64_t v8 = *(void *)(a1 + 432);
    *(void *)(a1 + 432) = v7;
    if (v8)
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      uint64_t v9 = *(void *)buf;
      *(void *)buf = 0;
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
    }
    return sub_1006ADDD8(v11);
  }
  return result;
}

void sub_100E5BFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t (***sub_100E5BFC0(uint64_t a1, uint64_t a2))(void, uint8_t *)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Transitioned to kLabelAvailable state, wait for indoor/outdoor.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::enterLabelAvailable_waitForIndoorOutdoor(const ELabelerUpdate *)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  sub_100E5C16C(a1, a2);
  return sub_100E5B814(a1);
}

void sub_100E5C16C(uint64_t a1, uint64_t a2)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Transitioned to kLabelAvailable state.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::enterLabelAvailable(const ELabelerUpdate *)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  double v5 = *(double *)(a2 + 8);
  if (*(double *)(a1 + 672) != v5)
  {
    *(double *)(a1 + 672) = v5;
    *(_DWORD *)(a1 + 716) = (int)(vabdd_f64(CFAbsoluteTimeGetCurrent(), v5) / 2.55999994);
  }
  uint64_t v6 = *(void *)a2;
  *(void *)(a1 + 632) = *(void *)a2;
  *(_DWORD *)(a1 + 640) = *(_DWORD *)(a2 + 16);
  sub_100F6D940(*(void *)(a1 + 1432), v6);
  if (sub_1001BD934(*(void *)(a1 + 632)) == 1)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    sub_100E56820(a1, 9, *(void *)(a1 + 632), Current);
  }
}

void sub_100E5C37C(void *a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Transitioned to kWorkoutStarted.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    double v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::enterWorkoutStarted(const EStartReminderDelayExpired *)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_1004663C0((uint64_t)(a1 + 196), a1 + 74, a1[64], a1[65], 2);
  sub_100E5C5C0((uint64_t)a1);
  sub_100E5C784(a1);
  sub_100E5C950(a1);
  if (sub_1001BD934(a1[79]) != 1)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    sub_100E56820((uint64_t)a1, 9, a1[79], Current);
  }
  if (a1[79] == 19)
  {
    a1[105] = 0;
    a1[104] = 0;
    a1[82] = 1;
    sub_100902F64((uint64_t)(a1 + 189), 19, 1, 0, 0);
  }
  double v4 = CFAbsoluteTimeGetCurrent();
  sub_100E56820((uint64_t)a1, 11, a1[79], v4);
  a1[169] = a1[79];
}

double sub_100E5C5C0(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Resetting mute alerts for start", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    double v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::resetMuteStartAlert(const T *) [T = CLWorkoutPredictor::EStartReminderDelayExpired]", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  uuid_clear((unsigned __int8 *)(a1 + 1080));
  *(void *)(a1 + 1112) = 26;
  *(void *)(a1 + 1120) = 26;
  *(void *)(a1 + 1144) = 0;
  *(void *)(a1 + 1160) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 1168) = 0x7FEFFFFFFFFFFFFFLL;
  double result = 2.22507386e-308;
  *(_OWORD *)(a1 + 1184) = xmmword_101D1EA10;
  return result;
}

void *sub_100E5C784(void *result)
{
  if (result[54])
  {
    int v1 = result;
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v2 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down labeler", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardownLabeler()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    double result = (void *)v1[54];
    v1[54] = 0;
    if (result) {
      return (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  return result;
}

uint64_t sub_100E5C950(void *a1)
{
  if (!a1[53])
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v2 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Bringing up StopDetector", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EStartReminderDelayExpired]", "%s\n", v13);
      if (v13 != (char *)&buf) {
        free(v13);
      }
    }
    operator new();
  }
  uint64_t v3 = a1[78];
  if (v3) {
    BOOL v4 = v3 == 26;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    double v5 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[79];
      uint64_t v7 = (void *)a1[82];
      int buf = 134218240;
      *(void *)buf_4 = v6;
      __int16 v17 = 2048;
      id v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", (uint8_t *)&buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EStartReminderDelayExpired]", "%s\n", v12);
      if (v12 != (char *)&buf) {
        free(v12);
      }
    }
    uint64_t result = sub_101444AC8(a1[53], a1[79], a1[82], 1);
  }
  else
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v9 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = a1[78];
      id v11 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:v10];
      int buf = 134218240;
      *(void *)buf_4 = v10;
      __int16 v17 = 2048;
      id v18 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", (uint8_t *)&buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      +[CMWorkout workoutLocationTypeFromCMWorkoutType:a1[78]];
      CFAbsoluteTime v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EStartReminderDelayExpired]", "%s\n", v14);
      if (v14 != (char *)&buf) {
        free(v14);
      }
    }
    uint64_t result = sub_101444AC8(a1[53], a1[78], +[CMWorkout workoutLocationTypeFromCMWorkoutType:a1[78]], 0);
  }
  *(void *)(a1[53] + 24) = a1[83];
  return result;
}

void sub_100E5CEB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1006ADDD8((uint64_t *)va);
  operator delete();
}

void *sub_100E5CEEC(void *a1, int *a2)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  BOOL v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Transitioned to kWorkoutStopped (stop was detected after start confirmation).", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::enterWorkoutStoppedAfterStartConfirmation(const EStopDetected *)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_100E5D0E4((uint64_t)a1, a2);
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100E56820((uint64_t)a1, 4, a1[78], Current);
  sub_100E5D218((uint64_t)a1);
  sub_100E5C784(a1);
  sub_100E5D3CC((uint64_t)a1);
  uint64_t result = sub_100E5BD08((uint64_t)a1);
  uint64_t v7 = a1[78];
  if (v7 == 24 || v7 == 15) {
    *(unsigned char *)(a1[54] + 56) = 1;
  }
  return result;
}

double sub_100E5D0E4(uint64_t a1, int *a2)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  BOOL v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v6 = *((void *)a2 + 1);
    int v7 = *a2;
    v9[0] = 68289794;
    v9[1] = 0;
    __int16 v10 = 2082;
    id v11 = "";
    __int16 v12 = 2050;
    CFAbsoluteTime v13 = Current;
    __int16 v14 = 2050;
    uint64_t v15 = v6;
    __int16 v16 = 1026;
    int v17 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Workout stop detected\", \"at\":\"%{public}f\", \"endTime\":\"%{public}f\", \"reason\":%{public}d}", (uint8_t *)v9, 0x2Cu);
  }
  *(void *)(a1 + 680) = *((void *)a2 + 1);
  double result = 0.0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(void *)(a1 + 840) = 0;
  *(void *)(a1 + 832) = 0;
  return result;
}

void sub_100E5D218(uint64_t a1)
{
  if (*(void *)(a1 + 424))
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v2 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down stop detector", buf, 2u);
    }
    uint64_t v3 = (uint64_t **)(a1 + 424);
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      double v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardownStopDetector()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    BOOL v4 = *v3;
    char *v3 = 0;
    if (v4) {
      sub_1006A7B2C((uint64_t)v3, v4);
    }
  }
}

void sub_100E5D3CC(uint64_t a1)
{
  if (qword_1024192A0 != -1) {
    dispatch_once(&qword_1024192A0, &stru_1022FD148);
  }
  uint64_t v2 = qword_1024192A8;
  if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 456);
    *(_DWORD *)int buf = 67240192;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Teardown indoor/outdoor,isActive,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192A0 != -1) {
      dispatch_once(&qword_1024192A0, &stru_1022FD148);
    }
    double v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardownIndoorOutdoor()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (*(unsigned char *)(a1 + 456))
  {
    *(unsigned char *)(a1 + 456) = 0;
    uint64_t v4 = *(void *)(a1 + 1504);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
}

double sub_100E5D5B8(uint64_t a1, double *a2)
{
  long long v4 = *(_OWORD *)(a1 + 800);
  *(_OWORD *)(a1 + 1272) = *(_OWORD *)(a1 + 784);
  *(_OWORD *)(a1 + 1288) = v4;
  long long v5 = *(_OWORD *)(a1 + 832);
  *(_OWORD *)(a1 + 1304) = *(_OWORD *)(a1 + 816);
  *(_OWORD *)(a1 + 1320) = v5;
  long long v6 = *(_OWORD *)(a1 + 736);
  *(_OWORD *)(a1 + 1208) = *(_OWORD *)(a1 + 720);
  *(_OWORD *)(a1 + 1224) = v6;
  long long v7 = *(_OWORD *)(a1 + 768);
  *(_OWORD *)(a1 + 1240) = *(_OWORD *)(a1 + 752);
  *(_OWORD *)(a1 + 1256) = v7;
  long long v8 = *(_OWORD *)(a1 + 672);
  *(_OWORD *)(a1 + 1144) = *(_OWORD *)(a1 + 656);
  *(_OWORD *)(a1 + 1160) = v8;
  long long v9 = *(_OWORD *)(a1 + 704);
  *(_OWORD *)(a1 + 1176) = *(_OWORD *)(a1 + 688);
  *(_OWORD *)(a1 + 1192) = v9;
  long long v10 = *(_OWORD *)(a1 + 608);
  *(_OWORD *)(a1 + 1080) = *(_OWORD *)(a1 + 592);
  *(_OWORD *)(a1 + 1096) = v10;
  long long v11 = *(_OWORD *)(a1 + 640);
  *(_OWORD *)(a1 + 1112) = *(_OWORD *)(a1 + 624);
  *(_OWORD *)(a1 + 1128) = v11;
  *(_OWORD *)(a1 + 1184) = *(_OWORD *)a2;
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  __int16 v12 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(a1 + 1192);
    uint64_t v14 = *(void *)(a1 + 1120);
    *(_DWORD *)int buf = 134349312;
    uint64_t v18 = v13;
    __int16 v19 = 2050;
    uint64_t v20 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Start alerts will be muted for %{public}f seconds for type %{public}ld.", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    __int16 v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::muteStartAlert(const EMuteAlert *)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  return sub_100E56820(a1, 6, *(void *)(a1 + 1120), *a2);
}

void sub_100E5D7F0(uint64_t a1, double *a2)
{
  sub_100E5D5B8(a1, a2);
  sub_100E5D83C(a1);

  sub_100E581B0(a1, 0);
}

uint64_t sub_100E5D83C(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down. Resetting workout prediction. Notifying clients.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardownAndNotifyDeEscalation(const T *) [T = CLWorkoutPredictor::EMuteAlert]", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100E56820(a1, 10, 0, Current);
  CFAbsoluteTime v4 = CFAbsoluteTimeGetCurrent();
  long long v21 = 0u;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  long long v11 = 0u;
  long long v10 = 0u;
  *(CFAbsoluteTime *)int buf = v4;
  int64x2_t v8 = vdupq_n_s64(1uLL);
  long long v9 = xmmword_101D916B0;
  sub_10077AD10(a1 + 1448, 10);
  return sub_100E65FB4(a1);
}

uint64_t sub_100E5DA64(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 464);
  if (result)
  {
    uint64_t result = sub_10079E0F0(result, a2, (uint64_t *)&v4);
    if (result)
    {
      sub_10111DEB0((void *)(a1 + 32), &v4);
      long long v15 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      uint64_t v9 = v4;
      uint64_t v10 = v5;
      long long v11 = v6;
      long long v12 = v7;
      int v13 = v8;
      int v14 = 0;
      return sub_10077AD10(a1 + 1448, 12);
    }
  }
  return result;
}

uint64_t sub_100E5DB48(uint64_t *a1, uint64_t *a2)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  long long v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received indoor/outdoor update.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    long long v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::updateIndoorOutdoorState(const ELocationTypeUpdate *)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (a1[82] != *a2)
  {
    a1[82] = *a2;
    if (sub_1001BD934(a1[79]) == 1)
    {
      double Current = CFAbsoluteTimeGetCurrent();
      sub_100E56820((uint64_t)a1, 9, a1[79], Current);
    }
  }
  return sub_100F6D910(a1[179], *a2);
}

double sub_100E5DD24(uint64_t a1, void *a2)
{
  *(void *)(a1 + 648) = *a2;
  *(void *)(a1 + 624) = sub_100E5DF14(a1, *(void *)(a1 + 624));
  sub_100E5D3CC(a1);
  if (*a2)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v5 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *a2;
      *(_DWORD *)int buf = 134349056;
      uint64_t v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received indoor/outdoor disambiguation for a one button workout, new location update %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::workoutConfirmedLocationUpdate(const ELocationTypeUpdate *)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    double Current = CFAbsoluteTimeGetCurrent();
    return sub_100E56820(a1, 7, *(void *)(a1 + 624), Current);
  }
  return result;
}

uint64_t sub_100E5DF14(uint64_t a1, uint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v4 = *(void *)(a1 + 648);
    if (v4 == 1)
    {
      uint64_t v2 = 18;
    }
    else if (v4 == 2)
    {
      uint64_t v2 = 17;
    }
    else
    {
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      int v8 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Indoor/outdoor detector unable to disambiguate location for running", buf, 2u);
      }
      uint64_t v2 = 2;
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1022FD128);
        }
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CMWorkoutType CLWorkoutPredictor::updateWorkoutTypeForOneButtonWorkouts(CMWorkoutType)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
        uint64_t v2 = 2;
      }
    }
  }
  else
  {
    uint64_t v2 = a2;
    if (a2 == 1)
    {
      uint64_t v3 = *(void *)(a1 + 648);
      if (v3 == 1)
      {
        uint64_t v2 = 16;
      }
      else if (v3 == 2)
      {
        uint64_t v2 = 15;
      }
      else
      {
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1022FD128);
        }
        long long v7 = qword_1024191C8;
        if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Indoor/outdoor detector unable to disambiguate location for walking", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_1022FD128);
          }
          long long v12 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CMWorkoutType CLWorkoutPredictor::updateWorkoutTypeForOneButtonWorkouts(CMWorkoutType)", "%s\n", v12);
          if (v12 != (char *)buf) {
            free(v12);
          }
        }
        uint64_t v2 = 1;
      }
    }
    else
    {
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      uint64_t v5 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Called updateWorkoutTypeForOneButtonWorkouts when not in a one button workout", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1022FD128);
        }
        uint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CMWorkoutType CLWorkoutPredictor::updateWorkoutTypeForOneButtonWorkouts(CMWorkoutType)", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
    }
  }
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v9 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 134349056;
    uint64_t v15 = v2;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Updated workout type for one button workout to %{public}ld", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    long long v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMWorkoutType CLWorkoutPredictor::updateWorkoutTypeForOneButtonWorkouts(CMWorkoutType)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  return v2;
}

uint64_t sub_100E5E4A4(void *a1, void *a2)
{
  sub_100E5DD24((uint64_t)a1, a2);
  sub_100E5D218((uint64_t)a1);

  return sub_100E5E4EC(a1);
}

uint64_t sub_100E5E4EC(void *a1)
{
  if (!a1[53])
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v2 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Bringing up StopDetector", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::ELocationTypeUpdate]", "%s\n", v13);
      if (v13 != (char *)&buf) {
        free(v13);
      }
    }
    operator new();
  }
  uint64_t v3 = a1[78];
  if (v3) {
    BOOL v4 = v3 == 26;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v5 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[79];
      long long v7 = (void *)a1[82];
      int buf = 134218240;
      *(void *)buf_4 = v6;
      __int16 v17 = 2048;
      id v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", (uint8_t *)&buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      long long v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::ELocationTypeUpdate]", "%s\n", v12);
      if (v12 != (char *)&buf) {
        free(v12);
      }
    }
    uint64_t result = sub_101444AC8(a1[53], a1[79], a1[82], 1);
  }
  else
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v9 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = a1[78];
      id v11 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:v10];
      int buf = 134218240;
      *(void *)buf_4 = v10;
      __int16 v17 = 2048;
      id v18 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", (uint8_t *)&buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      +[CMWorkout workoutLocationTypeFromCMWorkoutType:a1[78]];
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::ELocationTypeUpdate]", "%s\n", v14);
      if (v14 != (char *)&buf) {
        free(v14);
      }
    }
    uint64_t result = sub_101444AC8(a1[53], a1[78], +[CMWorkout workoutLocationTypeFromCMWorkoutType:a1[78]], 0);
  }
  *(void *)(a1[53] + 24) = a1[83];
  return result;
}

void sub_100E5EA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1006ADDD8((uint64_t *)va);
  operator delete();
}

void sub_100E5EA88(uint64_t a1, uint64_t a2)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  BOOL v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a2 + 24);
    *(_DWORD *)int buf = 134349056;
    uint64_t v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Updating label startTime to %{public}f and tearing down indoor/outdoor.", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::updateLabel_teardownIndoorOutdoor(const ELabelerUpdate *)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  *(void *)(a1 + 672) = *(void *)(a2 + 24);
  sub_100E5EC5C(a1, a2);
  sub_100E5D3CC(a1);
}

void sub_100E5EC5C(uint64_t a1, uint64_t a2)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  BOOL v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)a2;
    *(_DWORD *)int buf = 134349056;
    uint64_t v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Updating label to %{public}ld.", buf, 0xCu);
  }
  uint64_t v6 = sub_10013D1A0(115, 2);
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    int v13 = (char *)_os_log_send_and_compose_impl();
    uint64_t v6 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::updateLabel(const ELabelerUpdate *)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  uint64_t v7 = *(void *)(a1 + 632);
  uint64_t v8 = *(void *)a2;
  double v9 = *(double *)(a1 + 672);
  double v10 = *(double *)(a2 + 8);
  if (v9 != v10)
  {
    *(double *)(a1 + 672) = v10;
    *(_DWORD *)(a1 + 716) = (int)(vabdd_f64(CFAbsoluteTimeGetCurrent(), v10) / 2.55999994);
  }
  uint64_t v11 = *(void *)a2;
  *(void *)(a1 + 632) = *(void *)a2;
  *(_DWORD *)(a1 + 640) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 712) = sub_100E58ECC(v6, v11);
  if (v7 != v8 || v9 != v10)
  {
    sub_100F6D940(*(void *)(a1 + 1432), *(void *)a2);
    if (sub_1001BD934(*(void *)a2) == 1)
    {
      double Current = CFAbsoluteTimeGetCurrent();
      sub_100E56820(a1, 9, *(void *)a2, Current);
    }
  }
}

void sub_100E5EEB8(uint64_t a1)
{
  if (sub_101014514(*(void *)(a1 + 624)) && *(void *)(a1 + 648) == 3)
  {
    if (qword_1024192A0 != -1) {
      dispatch_once(&qword_1024192A0, &stru_1022FD148);
    }
    uint64_t v2 = qword_1024192A8;
    if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Entering a one button workout", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192A0 != -1) {
        dispatch_once(&qword_1024192A0, &stru_1022FD148);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::checkIfOneButtonWorkoutAndBringupIndoorOutdoor()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    if (!*(unsigned char *)(a1 + 1488) && (sub_1000A16E8() & 0x1000000000000) != 0) {
      sub_100E5B814(a1);
    }
  }
}

uint64_t sub_100E5F07C(void *a1)
{
  if (!a1[53])
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v2 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Bringing up StopDetector", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EPreferenceChanged]", "%s\n", v13);
      if (v13 != (char *)&buf) {
        free(v13);
      }
    }
    operator new();
  }
  uint64_t v3 = a1[78];
  if (v3) {
    BOOL v4 = v3 == 26;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v5 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[79];
      uint64_t v7 = (void *)a1[82];
      int buf = 134218240;
      *(void *)buf_4 = v6;
      __int16 v17 = 2048;
      id v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", (uint8_t *)&buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      long long v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EPreferenceChanged]", "%s\n", v12);
      if (v12 != (char *)&buf) {
        free(v12);
      }
    }
    uint64_t result = sub_101444AC8(a1[53], a1[79], a1[82], 1);
  }
  else
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    double v9 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = a1[78];
      id v11 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:v10];
      int buf = 134218240;
      *(void *)buf_4 = v10;
      __int16 v17 = 2048;
      id v18 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", (uint8_t *)&buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      +[CMWorkout workoutLocationTypeFromCMWorkoutType:a1[78]];
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EPreferenceChanged]", "%s\n", v14);
      if (v14 != (char *)&buf) {
        free(v14);
      }
    }
    uint64_t result = sub_101444AC8(a1[53], a1[78], +[CMWorkout workoutLocationTypeFromCMWorkoutType:a1[78]], 0);
  }
  *(void *)(a1[53] + 24) = a1[83];
  return result;
}

void sub_100E5F5E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1006ADDD8((uint64_t *)va);
  operator delete();
}

void *sub_100E5F618(void *a1, uint64_t a2)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  BOOL v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "User confirmed start of a workout (and stop is enabled).", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::enterWorkoutConfirmedStopEnabled(const EUserStartedWorkout *)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  sub_100E5F7D0((uint64_t)a1, a2);
  sub_100E5FF64(a1);
  return sub_100E5C784(a1);
}

void sub_100E5F7D0(uint64_t a1, uint64_t a2)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  BOOL v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "User confirmed start of a workout.", (uint8_t *)buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    *(_WORD *)uint64_t v42 = 0;
    long long v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::doUserStartedWorkout(const EUserStartedWorkout *)", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  sub_100E606BC(a1);
  *(void *)(a1 + 624) = *(void *)(a2 + 40);
  *(void *)(a1 + 648) = *(void *)(a2 + 48);
  *(void *)(a1 + 744) = *(void *)(a2 + 56);
  *(void *)(a1 + 664) = *(void *)(a2 + 160);
  double v5 = *(double *)(a2 + 32);
  if (v5 >= *(double *)(a1 + 672)) {
    double v5 = *(double *)(a1 + 672);
  }
  *(double *)(a1 + 672) = v5;
  *(void *)(a1 + 712) = 0x7FFFFFFFLL;
  long long v6 = *(_OWORD *)(a2 + 128);
  long long v8 = *(_OWORD *)(a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 816) = v6;
  *(_OWORD *)(a1 + 768) = v8;
  *(_OWORD *)(a1 + 784) = v7;
  *(_OWORD *)(a1 + 752) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 832) = *(_OWORD *)(a2 + 144);
  uuid_copy((unsigned __int8 *)(a1 + 608), (const unsigned __int8 *)(a2 + 16));
  if (uuid_is_null((const unsigned __int8 *)(a1 + 592))
    || uuid_compare((const unsigned __int8 *)(a1 + 592), (const unsigned __int8 *)a2))
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    double v9 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a2 + 40);
      uint64_t v11 = *(void *)(a1 + 632);
      LODWORD(buf[0]) = 134349312;
      *(void *)((char *)buf + 4) = v10;
      WORD6(buf[0]) = 2050;
      *(void *)((char *)buf + 14) = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "User started workout (%{public}ld) that differs from prediction (%{public}ld).", (uint8_t *)buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      uint64_t v23 = *(void *)(a2 + 40);
      uint64_t v24 = *(void *)(a1 + 632);
      *(_DWORD *)uint64_t v42 = 134349312;
      *(void *)&v42[4] = v23;
      *(_WORD *)&v42[12] = 2050;
      *(void *)&v42[14] = v24;
      long long v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::doUserStartedWorkout(const EUserStartedWorkout *)", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    *(_DWORD *)(a1 + 736) = 1;
    *(void *)(a1 + 672) = *(void *)(a2 + 32);
    uuid_copy((unsigned __int8 *)(a1 + 592), (const unsigned __int8 *)a2);
    sub_100E57D68(v12, (unsigned __int8 *)(a1 + 592));
    sub_1004663C0(a1 + 1568, (void *)(a1 + 592), *(void *)(a1 + 512), *(void *)(a1 + 520), 3);
  }
  else
  {
    *(_DWORD *)(a1 + 736) = 2;
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    long long v20 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "User started workout based on prediction.", (uint8_t *)buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      *(_WORD *)uint64_t v42 = 0;
      long long v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::doUserStartedWorkout(const EUserStartedWorkout *)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
  uint64_t v13 = *(void *)(a1 + 656);
  if (v13 && v13 != *(void *)(a1 + 648))
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    int v14 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 656);
      uint64_t v16 = *(void *)(a1 + 648);
      *(void *)&buf[0] = 68289538;
      WORD4(buf[0]) = 2082;
      *(void *)((char *)buf + 10) = "";
      WORD1(buf[1]) = 2050;
      *(void *)((char *)&buf[1] + 4) = v15;
      WORD6(buf[1]) = 2050;
      *(void *)((char *)&buf[1] + 14) = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Location type differs\", \"Detected\":%{public}ld, \"User specified\":%{public}ld}", (uint8_t *)buf, 0x26u);
    }
  }
  sub_100E5EEB8(a1);
  sub_100F6DDD8(*(void *)(a1 + 1432));
  uint64_t v17 = sub_101014448(*(void *)(a1 + 632), *(void *)(a1 + 656));
  uint64_t v18 = sub_101014448(*(void *)(a1 + 624), *(void *)(a1 + 648));
  uint64_t v40 = 0;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  sub_100E58CB4(a1, 0, *(void *)(a1 + 624), (uint64_t)&v26, *(double *)(a2 + 32));
  if (v17 == v18)
  {
    sub_100902C40(a1 + 1512, v33, *((uint64_t *)&v33 + 1), v34, *((uint64_t *)&v34 + 1));
    sub_100903014((void *)(a1 + 1512));
  }
  else
  {
    sub_100902D40(a1 + 1512);
  }
  unsigned char buf[12] = v38;
  buf[13] = v39;
  *(void *)&buf[14] = v40;
  uint8_t buf[8] = v34;
  buf[9] = v35;
  buf[10] = v36;
  buf[11] = v37;
  uint8_t buf[4] = v30;
  void buf[5] = v31;
  buf[6] = v32;
  buf[7] = v33;
  buf[0] = v26;
  buf[1] = v27;
  buf[2] = v28;
  buf[3] = v29;
  sub_10077AD10(a1 + 1448, 0);
  sub_100466C2C(a1 + 1568, (uint64_t)&v26);
  uint64_t v19 = *(void *)(a2 + 40);
  *(void *)(a1 + 1360) = v19;
  memset((char *)&buf[1] + 8, 0, 208);
  *(void *)&buf[1] = v19;
  long long v46 = buf[5];
  long long v45 = buf[4];
  long long v43 = buf[2];
  long long v44 = buf[3];
  long long v50 = buf[9];
  long long v49 = buf[8];
  long long v47 = buf[6];
  long long v48 = buf[7];
  long long v54 = buf[13];
  long long v53 = buf[12];
  long long v51 = buf[10];
  long long v52 = buf[11];
  buf[0] = *(_OWORD *)(a1 + 1344);
  uint64_t v55 = 0;
  *(_OWORD *)uint64_t v42 = buf[0];
  *(_OWORD *)&v42[16] = buf[1];
  sub_10077AD10(a1 + 1448, 6);
  *(void *)(a1 + 1360) = 0;
  *(_OWORD *)(a1 + 1344) = 0u;
  sub_100E60880((void *)a1);
}

uint64_t sub_100E5FF64(void *a1)
{
  if (!a1[53])
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v2 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Bringing up StopDetector", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EUserStartedWorkout]", "%s\n", v13);
      if (v13 != (char *)&buf) {
        free(v13);
      }
    }
    operator new();
  }
  uint64_t v3 = a1[78];
  if (v3) {
    BOOL v4 = v3 == 26;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    double v5 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[79];
      long long v7 = (void *)a1[82];
      int buf = 134218240;
      *(void *)buf_4 = v6;
      __int16 v17 = 2048;
      id v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", (uint8_t *)&buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EUserStartedWorkout]", "%s\n", v12);
      if (v12 != (char *)&buf) {
        free(v12);
      }
    }
    uint64_t result = sub_101444AC8(a1[53], a1[79], a1[82], 1);
  }
  else
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    double v9 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = a1[78];
      id v11 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:v10];
      int buf = 134218240;
      *(void *)buf_4 = v10;
      __int16 v17 = 2048;
      id v18 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", (uint8_t *)&buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      +[CMWorkout workoutLocationTypeFromCMWorkoutType:a1[78]];
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EUserStartedWorkout]", "%s\n", v14);
      if (v14 != (char *)&buf) {
        free(v14);
      }
    }
    uint64_t result = sub_101444AC8(a1[53], a1[78], +[CMWorkout workoutLocationTypeFromCMWorkoutType:a1[78]], 0);
  }
  *(void *)(a1[53] + 24) = a1[83];
  return result;
}

void sub_100E604CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1006ADDD8((uint64_t *)va);
  operator delete();
}

uint64_t sub_100E60500(void *a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down for StopDisabled", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    BOOL v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::partialTeardownWhenStopIsDisabled(const T *) [T = CLWorkoutPredictor::EUserStartedWorkout]", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_100E5D218((uint64_t)a1);
  sub_100E5C784(a1);
  sub_100E5D3CC((uint64_t)a1);
  sub_100E5EEB8((uint64_t)a1);
  return sub_100E5A22C((uint64_t)a1);
}

double sub_100E606BC(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Resetting mute alerts for start", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    BOOL v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::resetMuteStartAlert(const T *) [T = CLWorkoutPredictor::EUserStartedWorkout]", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  uuid_clear((unsigned __int8 *)(a1 + 1080));
  *(void *)(a1 + 1112) = 26;
  *(void *)(a1 + 1120) = 26;
  *(void *)(a1 + 1144) = 0;
  *(void *)(a1 + 1160) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 1168) = 0x7FEFFFFFFFFFFFFFLL;
  double result = 2.22507386e-308;
  *(_OWORD *)(a1 + 1184) = xmmword_101D1EA10;
  return result;
}

void sub_100E60880(void *a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Trying to bringup ActiveStateDetector", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    long long v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupActiveStateDetector()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  uint64_t v3 = sub_101014448(a1[78], a1[81]);
  BOOL v4 = (uint64_t *)a1[59];
  if (!v4)
  {
LABEL_18:
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    long long v7 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Bringing up ActiveStateDetector", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      double v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupActiveStateDetector()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    operator new();
  }
  if (v4[2] != v3)
  {
    a1[59] = 0;
    sub_1006A7AA8((uint64_t)(a1 + 59), v4);
    goto LABEL_18;
  }
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  double v5 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Trying to bringup ActiveStateDetector,but already running", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupActiveStateDetector()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_100E60D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1006ADDD8((uint64_t *)va);
  operator delete();
}

void sub_100E60D4C(uint64_t a1, void *a2)
{
  *(void *)(a1 + 1424) = *a2;
  uint64_t v3 = *(int **)(a1 + 464);
  if (v3) {
    sub_10079ECC4(v3, (void *)(a1 + 1424));
  }
}

uint64_t *sub_100E60D6C(uint64_t a1, long long *a2)
{
  sub_10111E84C((void *)(a1 + 32), a2);
  double result = *(uint64_t **)(a1 + 472);
  if (result)
  {
    return (uint64_t *)sub_10077AD64(result);
  }
  return result;
}

uint64_t sub_100E60DB8(uint64_t a1, uint64_t a2)
{
  uuid_copy(dst, (const unsigned __int8 *)a2);
  uuid_copy(v11, (const unsigned __int8 *)(a2 + 16));
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  long long v13 = *(_OWORD *)(a2 + 48);
  uint64_t v14 = *(void *)(a2 + 160);
  long long v4 = *(_OWORD *)(a2 + 128);
  long long v17 = *(_OWORD *)(a2 + 112);
  long long v18 = v4;
  long long v19 = *(_OWORD *)(a2 + 144);
  long long v5 = *(_OWORD *)(a2 + 96);
  long long v15 = *(_OWORD *)(a2 + 80);
  long long v16 = v5;
  if ((void)v13 == 19) {
    long long v20 = *(_OWORD *)(a2 + 64);
  }
  uint64_t v9 = 0;
  int v6 = sub_101014848(*(void *)(a2 + 64), &v9);
  uint64_t v7 = v9;
  if (!v6) {
    uint64_t v7 = 3000;
  }
  uint64_t v21 = v7;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (result) {
    return sub_1001A34E0(a1 + 8, 6, (uint64_t)dst);
  }
  return result;
}

void sub_100E60ED4(void *a1, double a2)
{
  if (a1[78] == 26)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v2 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Workout, Error stopping, no active workouts", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutPredictor::feedUserWorkoutStop(CFAbsoluteTime)", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
  else
  {
    *(double *)int buf = a2;
    if ((*(unsigned int (**)(void *))(*a1 + 16))(a1)) {
      sub_1001A34E0((uint64_t)(a1 + 1), 7, (uint64_t)buf);
    }
  }
}

void sub_100E610A8(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 16);
  if (*(unsigned char *)(a2 + 16) && !*(void *)(a1 + 744))
  {
    uint64_t v3 = *(void *)(a1 + 472);
    if (v3)
    {
      sub_10077AE44(v3, v2 != 2);
    }
    else
    {
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      long long v4 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "ActiveStateDetector should be active?", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1022FD128);
        }
        long long v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutPredictor::feedActivePedStateUpdate(const CMActivePedStateEntry &)", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
    }
  }
}

void sub_100E61294(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 472);
  if (v2)
  {
    CFAbsoluteTimeGetCurrent();
    sub_10077AE44(v2, a2);
  }
  else
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    long long v4 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "ActiveStateDetector should be active?", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      long long v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutPredictor::feedSkiUpdate(BOOL)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

void sub_100E61470()
{
}

void sub_100E61518(uint64_t a1, ...)
{
  va_start(va, a1);
  sub_1006ADDD8((uint64_t *)va);
  operator delete();
}

uint64_t sub_100E6154C(uint64_t result)
{
  if (!*(void *)(result + 464))
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    int v1 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Bringing up Tier2 Classifier", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      uint64_t v2 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::onTier2ClassifierActivate()", "%s\n", v2);
      if (v2 != (char *)buf) {
        free(v2);
      }
    }
    operator new();
  }
  return result;
}

void sub_100E617A8()
{
}

uint64_t sub_100E617D4(uint64_t result)
{
  if (*(void *)(result + 464))
  {
    uint64_t v1 = result;
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v2 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tear down tier2 classifier", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      long long v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::onTier2ClassifierDeactivate()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    uint64_t v3 = *(void *)(v1 + 464);
    *(void *)(v1 + 464) = 0;
    if (v3) {
      operator delete();
    }
    BOOL v4 = *(void *)(v1 + 440) != 0;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    memset(v20, 0, sizeof(v20));
    buf[0] = v4;
    buf[1] = 0;
    return sub_10077AD10(v1 + 1448, 3);
  }
  return result;
}

BOOL sub_100E61A10(uint64_t a1, uint64_t a2)
{
  if (sub_101014514(*(void *)(a1 + 624)) && *(void *)(a1 + 648) == 3 && *(unsigned char *)(a1 + 1488))
  {
    if (qword_1024192A0 != -1) {
      dispatch_once(&qword_1024192A0, &stru_1022FD148);
    }
    BOOL v4 = qword_1024192A8;
    if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 134217984;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Forced location signal, new workout location: %zd", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192A0 != -1) {
        dispatch_once(&qword_1024192A0, &stru_1022FD148);
      }
      long long v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::triggerWorkoutLocationUpdateForUserStartedWorkouts(CMWorkoutLocationType)", "%s\n", v11);
      if (v11 != buf) {
        free(v11);
      }
    }
    *(void *)int buf = a2;
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
      sub_1001A34E0(a1 + 8, 10, (uint64_t)buf);
    }
    return 1;
  }
  else
  {
    if (qword_1024192A0 != -1) {
      dispatch_once(&qword_1024192A0, &stru_1022FD148);
    }
    int v6 = qword_1024192A8;
    if (os_log_type_enabled((os_log_t)qword_1024192A8, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v7 = sub_101014514(*(void *)(a1 + 624));
      BOOL v8 = *(void *)(a1 + 648) == 3;
      int v9 = *(unsigned __int8 *)(a1 + 1488);
      *(_DWORD *)int buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v7;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v8;
      __int16 v13 = 1024;
      int v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Cannot force location signal; isValidWorkoutForLocationTbd: %d, IsLocationTbd: %d, fEnableForcedWorkoutLocationU"
        "pdatesFromSPI: %d",
        buf,
        0x14u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192A0 != -1) {
        dispatch_once(&qword_1024192A0, &stru_1022FD148);
      }
      sub_101014514(*(void *)(a1 + 624));
      long long v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::triggerWorkoutLocationUpdateForUserStartedWorkouts(CMWorkoutLocationType)", "%s\n", v10);
      if (v10 != buf) {
        free(v10);
      }
      return 0;
    }
  }
  return result;
}

void sub_100E61DD0(uint64_t a1, uint64_t a2)
{
}

void sub_100E61DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    sub_1001A34E0(a1 + 8, 10, (uint64_t)&v3);
  }
  sub_100E5D3CC(a1);
}

uint64_t sub_100E61E44(uint64_t result, char a2)
{
  *(unsigned char *)(result + 1390) = a2;
  return result;
}

uint64_t sub_100E61E4C(uint64_t a1, int a2)
{
  uint64_t v2 = (a2 - 1);
  if (v2 >= 0xE) {
    return 0;
  }
  else {
    return v2 + 8;
  }
}

void sub_100E61E64(void *a1)
{
  sub_1006A78A0(a1);

  operator delete();
}

void sub_100E61E9C(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100E61ECC(id a1)
{
  qword_1024192A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "IndoorOutdoor");
}

uint64_t sub_100E61EFC(uint64_t a1)
{
  uint64_t v1 = sub_100F6E09C(*(void *)(a1 + 1432));
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67240192;
    int v6 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLWorkoutPredictor,backgroundEscalationIsNotActive,shouldDeescalateForVO2MaxVar,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    BOOL v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::backgroundEscalationIsNotActive(const T *) const [T = CLWorkoutPredictor::EPreferenceChanged]", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return v1;
}

uint64_t sub_100E620B4(uint64_t a1)
{
  uint64_t v1 = sub_100E62268(a1) ^ 1;
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67240192;
    int v6 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLWorkoutPredictor,backgroundEscalationIsActive,is_active,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    BOOL v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::backgroundEscalationIsActive(const T *) const [T = CLWorkoutPredictor::EMuteAlert]", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return v1;
}

uint64_t sub_100E62268(uint64_t a1)
{
  uint64_t v1 = sub_100F6E09C(*(void *)(a1 + 1432));
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67240192;
    int v6 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLWorkoutPredictor,backgroundEscalationIsNotActive,shouldDeescalateForVO2MaxVar,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    BOOL v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutPredictor::backgroundEscalationIsNotActive(const T *) const [T = CLWorkoutPredictor::EMuteAlert]", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return v1;
}

uint64_t sub_100E62420(uint64_t *a1, int *a2)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  BOOL v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Transitioned to kInit (stop was detected prior to start confirmation).", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    long long v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::enterWorkoutStoppedBeforeStartConfirmation(const T *) [T = CLWorkoutPredictor::EDeescalate]", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  sub_1004663C0((uint64_t)(a1 + 196), a1 + 74, a1[64], a1[65], 1);
  sub_100E5D0E4((uint64_t)a1, a2);
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100E56820((uint64_t)a1, 10, 0, Current);
  uint64_t v7 = sub_100E61E4C(v6, *a2);
  *(void *)int buf = CFAbsoluteTimeGetCurrent();
  *(int64x2_t *)long long v12 = vdupq_n_s64(1uLL);
  *(void *)&v12[16] = v7;
  memset(v13, 0, 200);
  sub_10077AD10((uint64_t)(a1 + 181), 10);
  uint64_t v8 = a1[90];
  *(_DWORD *)&uint8_t buf[4] = 0;
  *(_DWORD *)&buf[1] = 0;
  *(_OWORD *)&v12[8] = 0u;
  memset(v13, 0, 200);
  buf[0] = 1;
  *(void *)long long v12 = v8;
  sub_10077AD10((uint64_t)(a1 + 181), 5);
  return sub_100E626BC((uint64_t)a1);
}

uint64_t sub_100E626BC(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down. Resetting workout prediction.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    LOWORD(v7) = 0;
    BOOL v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardown(const T *) [T = CLWorkoutPredictor::EDeescalate]", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_100902D40(a1 + 1512);
  sub_100E5D218(a1);
  sub_100E5C784((void *)a1);
  sub_100E5D3CC(a1);
  uuid_clear((unsigned __int8 *)(a1 + 592));
  uuid_clear((unsigned __int8 *)(a1 + 608));
  sub_100E56900();
  *(int64x2_t *)(a1 + 624) = vdupq_n_s64(0x1AuLL);
  *(_DWORD *)(a1 + 640) = 0;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 648) = 0;
  *(int64x2_t *)(a1 + 672) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 712) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 736) = 0;
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 840) = 0;
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 664) = 3000;
  if (*(void *)(a1 + 1344) || *(void *)(a1 + 1352) || *(void *)(a1 + 1360))
  {
    memset((char *)v6 + 8, 0, 208);
    *(void *)&v6[0] = *(void *)(a1 + 1360);
    long long v12 = v6[4];
    long long v11 = v6[3];
    long long v9 = v6[1];
    long long v10 = v6[2];
    long long v16 = v6[8];
    long long v15 = v6[7];
    long long v13 = v6[5];
    long long v14 = v6[6];
    long long v20 = v6[12];
    long long v19 = v6[11];
    long long v17 = v6[9];
    long long v18 = v6[10];
    *(_OWORD *)int buf = *(_OWORD *)(a1 + 1344);
    uint64_t v21 = 0;
    long long v7 = *(_OWORD *)buf;
    long long v8 = v6[0];
    sub_10077AD10(a1 + 1448, 6);
    *(void *)(a1 + 1344) = 0;
    *(void *)(a1 + 1352) = 0;
    *(void *)(a1 + 1360) = 0;
  }
  sub_100F6DDD8(*(void *)(a1 + 1432));
  return sub_100E5A22C(a1);
}

uint64_t sub_100E629C8(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down. Resetting workout prediction. Notifying clients.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardownAndNotifyDeEscalation(const T *) [T = CLWorkoutPredictor::EPreferenceChanged]", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100E56820(a1, 10, 0, Current);
  CFAbsoluteTime v4 = CFAbsoluteTimeGetCurrent();
  long long v21 = 0u;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  long long v11 = 0u;
  long long v10 = 0u;
  *(CFAbsoluteTime *)int buf = v4;
  int64x2_t v8 = vdupq_n_s64(1uLL);
  long long v9 = xmmword_101D916B0;
  sub_10077AD10(a1 + 1448, 10);
  return sub_100E62BF0(a1);
}

uint64_t sub_100E62BF0(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down. Resetting workout prediction.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    LOWORD(v7) = 0;
    CFAbsoluteTime v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardown(const T *) [T = CLWorkoutPredictor::EPreferenceChanged]", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_100902D40(a1 + 1512);
  sub_100E5D218(a1);
  sub_100E5C784((void *)a1);
  sub_100E5D3CC(a1);
  uuid_clear((unsigned __int8 *)(a1 + 592));
  uuid_clear((unsigned __int8 *)(a1 + 608));
  sub_100E56900();
  *(int64x2_t *)(a1 + 624) = vdupq_n_s64(0x1AuLL);
  *(_DWORD *)(a1 + 640) = 0;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 648) = 0;
  *(int64x2_t *)(a1 + 672) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 712) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 736) = 0;
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 840) = 0;
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 664) = 3000;
  if (*(void *)(a1 + 1344) || *(void *)(a1 + 1352) || *(void *)(a1 + 1360))
  {
    memset((char *)v6 + 8, 0, 208);
    *(void *)&v6[0] = *(void *)(a1 + 1360);
    long long v12 = v6[4];
    long long v11 = v6[3];
    long long v9 = v6[1];
    long long v10 = v6[2];
    long long v16 = v6[8];
    long long v15 = v6[7];
    long long v13 = v6[5];
    long long v14 = v6[6];
    long long v20 = v6[12];
    long long v19 = v6[11];
    long long v17 = v6[9];
    long long v18 = v6[10];
    *(_OWORD *)int buf = *(_OWORD *)(a1 + 1344);
    uint64_t v21 = 0;
    long long v7 = *(_OWORD *)buf;
    long long v8 = v6[0];
    sub_10077AD10(a1 + 1448, 6);
    *(void *)(a1 + 1344) = 0;
    *(void *)(a1 + 1352) = 0;
    *(void *)(a1 + 1360) = 0;
  }
  sub_100F6DDD8(*(void *)(a1 + 1432));
  return sub_100E5A22C(a1);
}

uint64_t sub_100E62EFC(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down. Resetting workout prediction. Notifying clients.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardownAndNotifyDeEscalation(const T *) [T = CLWorkoutPredictor::EStartReminderDelayExpired]", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100E56820(a1, 10, 0, Current);
  CFAbsoluteTime v4 = CFAbsoluteTimeGetCurrent();
  long long v21 = 0u;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  long long v11 = 0u;
  long long v10 = 0u;
  *(CFAbsoluteTime *)int buf = v4;
  int64x2_t v8 = vdupq_n_s64(1uLL);
  long long v9 = xmmword_101D916B0;
  sub_10077AD10(a1 + 1448, 10);
  return sub_100E63124(a1);
}

uint64_t sub_100E63124(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down. Resetting workout prediction.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    LOWORD(v7) = 0;
    CFAbsoluteTime v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardown(const T *) [T = CLWorkoutPredictor::EStartReminderDelayExpired]", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_100902D40(a1 + 1512);
  sub_100E5D218(a1);
  sub_100E5C784((void *)a1);
  sub_100E5D3CC(a1);
  uuid_clear((unsigned __int8 *)(a1 + 592));
  uuid_clear((unsigned __int8 *)(a1 + 608));
  sub_100E56900();
  *(int64x2_t *)(a1 + 624) = vdupq_n_s64(0x1AuLL);
  *(_DWORD *)(a1 + 640) = 0;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 648) = 0;
  *(int64x2_t *)(a1 + 672) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 712) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 736) = 0;
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 840) = 0;
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 664) = 3000;
  if (*(void *)(a1 + 1344) || *(void *)(a1 + 1352) || *(void *)(a1 + 1360))
  {
    memset((char *)v6 + 8, 0, 208);
    *(void *)&v6[0] = *(void *)(a1 + 1360);
    long long v12 = v6[4];
    long long v11 = v6[3];
    long long v9 = v6[1];
    long long v10 = v6[2];
    long long v16 = v6[8];
    long long v15 = v6[7];
    long long v13 = v6[5];
    long long v14 = v6[6];
    long long v20 = v6[12];
    long long v19 = v6[11];
    long long v17 = v6[9];
    long long v18 = v6[10];
    *(_OWORD *)int buf = *(_OWORD *)(a1 + 1344);
    uint64_t v21 = 0;
    long long v7 = *(_OWORD *)buf;
    long long v8 = v6[0];
    sub_10077AD10(a1 + 1448, 6);
    *(void *)(a1 + 1344) = 0;
    *(void *)(a1 + 1352) = 0;
    *(void *)(a1 + 1360) = 0;
  }
  sub_100F6DDD8(*(void *)(a1 + 1432));
  return sub_100E5A22C(a1);
}

uint64_t sub_100E63430(uint64_t *a1, int *a2)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  CFAbsoluteTime v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Transitioned to kInit (stop was detected prior to start confirmation).", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    long long v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::enterWorkoutStoppedBeforeStartConfirmation(const T *) [T = CLWorkoutPredictor::EStopDetected]", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  sub_1004663C0((uint64_t)(a1 + 196), a1 + 74, a1[64], a1[65], 1);
  sub_100E5D0E4((uint64_t)a1, a2);
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100E56820((uint64_t)a1, 10, 0, Current);
  uint64_t v7 = sub_100E61E4C(v6, *a2);
  *(void *)int buf = CFAbsoluteTimeGetCurrent();
  *(int64x2_t *)long long v12 = vdupq_n_s64(1uLL);
  *(void *)&v12[16] = v7;
  memset(v13, 0, 200);
  sub_10077AD10((uint64_t)(a1 + 181), 10);
  uint64_t v8 = a1[90];
  *(_DWORD *)&uint8_t buf[4] = 0;
  *(_DWORD *)&buf[1] = 0;
  *(_OWORD *)&v12[8] = 0u;
  memset(v13, 0, 200);
  buf[0] = 1;
  *(void *)long long v12 = v8;
  sub_10077AD10((uint64_t)(a1 + 181), 5);
  return sub_100E636CC((uint64_t)a1);
}

uint64_t sub_100E636CC(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down. Resetting workout prediction.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    LOWORD(v7) = 0;
    CFAbsoluteTime v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardown(const T *) [T = CLWorkoutPredictor::EStopDetected]", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_100902D40(a1 + 1512);
  sub_100E5D218(a1);
  sub_100E5C784((void *)a1);
  sub_100E5D3CC(a1);
  uuid_clear((unsigned __int8 *)(a1 + 592));
  uuid_clear((unsigned __int8 *)(a1 + 608));
  sub_100E56900();
  *(int64x2_t *)(a1 + 624) = vdupq_n_s64(0x1AuLL);
  *(_DWORD *)(a1 + 640) = 0;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 648) = 0;
  *(int64x2_t *)(a1 + 672) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 712) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 736) = 0;
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 840) = 0;
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 664) = 3000;
  if (*(void *)(a1 + 1344) || *(void *)(a1 + 1352) || *(void *)(a1 + 1360))
  {
    memset((char *)v6 + 8, 0, 208);
    *(void *)&v6[0] = *(void *)(a1 + 1360);
    long long v12 = v6[4];
    long long v11 = v6[3];
    long long v9 = v6[1];
    long long v10 = v6[2];
    long long v16 = v6[8];
    long long v15 = v6[7];
    long long v13 = v6[5];
    long long v14 = v6[6];
    long long v20 = v6[12];
    long long v19 = v6[11];
    long long v17 = v6[9];
    long long v18 = v6[10];
    *(_OWORD *)int buf = *(_OWORD *)(a1 + 1344);
    uint64_t v21 = 0;
    long long v7 = *(_OWORD *)buf;
    long long v8 = v6[0];
    sub_10077AD10(a1 + 1448, 6);
    *(void *)(a1 + 1344) = 0;
    *(void *)(a1 + 1352) = 0;
    *(void *)(a1 + 1360) = 0;
  }
  sub_100F6DDD8(*(void *)(a1 + 1432));
  return sub_100E5A22C(a1);
}

uint64_t sub_100E639D8(void *a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down for StopDisabled", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    CFAbsoluteTime v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::partialTeardownWhenStopIsDisabled(const T *) [T = CLWorkoutPredictor::EPreferenceChanged]", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_100E5D218((uint64_t)a1);
  sub_100E5C784(a1);
  sub_100E5D3CC((uint64_t)a1);
  sub_100E5EEB8((uint64_t)a1);
  return sub_100E5A22C((uint64_t)a1);
}

uint64_t sub_100E63B94(void *a1)
{
  sub_100E5D3CC((uint64_t)a1);
  sub_100E5C784(a1);
  sub_100E5EEB8((uint64_t)a1);
  sub_100E5D218((uint64_t)a1);

  return sub_100E63BEC(a1);
}

uint64_t sub_100E63BEC(void *a1)
{
  if (!a1[53])
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v2 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Bringing up StopDetector", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      long long v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EMuteAlert]", "%s\n", v13);
      if (v13 != (char *)&buf) {
        free(v13);
      }
    }
    operator new();
  }
  uint64_t v3 = a1[78];
  if (v3) {
    BOOL v4 = v3 == 26;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    long long v5 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[79];
      long long v7 = (void *)a1[82];
      int buf = 134218240;
      *(void *)buf_4 = v6;
      __int16 v17 = 2048;
      id v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", (uint8_t *)&buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      long long v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EMuteAlert]", "%s\n", v12);
      if (v12 != (char *)&buf) {
        free(v12);
      }
    }
    uint64_t result = sub_101444AC8(a1[53], a1[79], a1[82], 1);
  }
  else
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    long long v9 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = a1[78];
      id v11 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:v10];
      int buf = 134218240;
      *(void *)buf_4 = v10;
      __int16 v17 = 2048;
      id v18 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", (uint8_t *)&buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      +[CMWorkout workoutLocationTypeFromCMWorkoutType:a1[78]];
      long long v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::EMuteAlert]", "%s\n", v14);
      if (v14 != (char *)&buf) {
        free(v14);
      }
    }
    uint64_t result = sub_101444AC8(a1[53], a1[78], +[CMWorkout workoutLocationTypeFromCMWorkoutType:a1[78]], 0);
  }
  *(void *)(a1[53] + 24) = a1[83];
  return result;
}

void sub_100E64154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1006ADDD8((uint64_t *)va);
  operator delete();
}

void *sub_100E64188(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022FD178;
  result[1] = v3;
  return result;
}

uint64_t sub_100E641D0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022FD178;
  a2[1] = v2;
  return result;
}

void *sub_100E641FC(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *a2;
  long long v4 = *(_OWORD *)(a3 + 208);
  v12[12] = *(_OWORD *)(a3 + 192);
  v12[13] = v4;
  uint64_t v13 = *(void *)(a3 + 224);
  long long v5 = *(_OWORD *)(a3 + 144);
  v12[8] = *(_OWORD *)(a3 + 128);
  v12[9] = v5;
  long long v6 = *(_OWORD *)(a3 + 176);
  v12[10] = *(_OWORD *)(a3 + 160);
  v12[11] = v6;
  long long v7 = *(_OWORD *)(a3 + 80);
  v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v7;
  long long v8 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v8;
  long long v9 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v9;
  long long v10 = *(_OWORD *)(a3 + 48);
  _DWORD v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v10;
  return sub_100E59810(*(void **)(a1 + 8), v3, (uint64_t)v12);
}

uint64_t sub_100E6429C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E642DC()
{
}

uint64_t sub_100E642E8(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Retracting stop alert.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    long long v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::retractStopAlert(const T *const) [T = CLWorkoutPredictor::ELabelerUpdate]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (uuid_is_null((const unsigned __int8 *)(a1 + 592))) {
    sub_101A90F5C();
  }
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100E56820(a1, 12, *(void *)(a1 + 624), Current);
  sub_100E644CC(a1);
  sub_100E5EEB8(a1);
  sub_100E5C784((void *)a1);
  return sub_100E64668((void *)a1);
}

void sub_100E644CC(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down StopDetector and IndoorOutdoor detector.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    int v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardownCheckingLocationForStopRetractionState(const T *const) [T = CLWorkoutPredictor::ELabelerUpdate]", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_100E5D3CC(a1);
}

uint64_t sub_100E64668(void *a1)
{
  if (!a1[53])
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    uint64_t v2 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Bringing up StopDetector", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::ELabelerUpdate]", "%s\n", v13);
      if (v13 != (char *)&buf) {
        free(v13);
      }
    }
    operator new();
  }
  uint64_t v3 = a1[78];
  if (v3) {
    BOOL v4 = v3 == 26;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    long long v5 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[79];
      long long v7 = (void *)a1[82];
      int buf = 134218240;
      *(void *)buf_4 = v6;
      __int16 v17 = 2048;
      id v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "predictedWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", (uint8_t *)&buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      long long v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::ELabelerUpdate]", "%s\n", v12);
      if (v12 != (char *)&buf) {
        free(v12);
      }
    }
    uint64_t result = sub_101444AC8(a1[53], a1[79], a1[82], 1);
  }
  else
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    long long v9 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = a1[78];
      id v11 = +[CMWorkout workoutLocationTypeFromCMWorkoutType:v10];
      int buf = 134218240;
      *(void *)buf_4 = v10;
      __int16 v17 = 2048;
      id v18 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "userWorkoutType: fStopDetector->setWorkoutType(%ld,%ld)", (uint8_t *)&buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022FD128);
      }
      +[CMWorkout workoutLocationTypeFromCMWorkoutType:a1[78]];
      long long v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::bringupStopDetector(const T *) [T = CLWorkoutPredictor::ELabelerUpdate]", "%s\n", v14);
      if (v14 != (char *)&buf) {
        free(v14);
      }
    }
    uint64_t result = sub_101444AC8(a1[53], a1[78], +[CMWorkout workoutLocationTypeFromCMWorkoutType:a1[78]], 0);
  }
  *(void *)(a1[53] + 24) = a1[83];
  return result;
}

void sub_100E64BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1006ADDD8((uint64_t *)va);
  operator delete();
}

void *sub_100E64C04(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022FD1F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100E64C4C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022FD1F8;
  a2[1] = v2;
  return result;
}

void *sub_100E64C78(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *a2;
  long long v4 = *(_OWORD *)(a3 + 208);
  v12[12] = *(_OWORD *)(a3 + 192);
  v12[13] = v4;
  uint64_t v13 = *(void *)(a3 + 224);
  long long v5 = *(_OWORD *)(a3 + 144);
  v12[8] = *(_OWORD *)(a3 + 128);
  v12[9] = v5;
  long long v6 = *(_OWORD *)(a3 + 176);
  v12[10] = *(_OWORD *)(a3 + 160);
  v12[11] = v6;
  long long v7 = *(_OWORD *)(a3 + 80);
  v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v7;
  long long v8 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v8;
  long long v9 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v9;
  long long v10 = *(_OWORD *)(a3 + 48);
  _DWORD v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v10;
  return sub_100E59810(*(void **)(a1 + 8), v3, (uint64_t)v12);
}

uint64_t sub_100E64D18(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E64D58()
{
}

uint64_t sub_100E64D64(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Retracting stop alert.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    long long v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::retractStopAlert(const T *const) [T = CLWorkoutPredictor::ELocationTypeUpdate]", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (uuid_is_null((const unsigned __int8 *)(a1 + 592))) {
    sub_101A90F5C();
  }
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100E56820(a1, 12, *(void *)(a1 + 624), Current);
  sub_100E64F48(a1);
  sub_100E5EEB8(a1);
  sub_100E5C784((void *)a1);
  return sub_100E5E4EC((void *)a1);
}

void sub_100E64F48(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down StopDetector and IndoorOutdoor detector.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    int v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardownCheckingLocationForStopRetractionState(const T *const) [T = CLWorkoutPredictor::ELocationTypeUpdate]", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_100E5D3CC(a1);
}

void sub_100E650E8()
{
}

void *sub_100E650FC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022FD278;
  result[1] = v3;
  return result;
}

uint64_t sub_100E65144(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022FD278;
  a2[1] = v2;
  return result;
}

double sub_100E65170(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  sub_10077AD10(v3 + 1448, 0);
  return sub_100466C2C(v3 + 1568, a2);
}

uint64_t sub_100E6522C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E6526C()
{
}

void sub_100E6527C()
{
}

void *sub_100E65290(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022FD2F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100E652D8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022FD2F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100E65304(uint64_t a1, unsigned __int8 *a2)
{
  return 1;
}

uint64_t sub_100E65328(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E65368()
{
}

void sub_100E65378()
{
}

void *sub_100E6538C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022FD378;
  result[1] = v3;
  return result;
}

uint64_t sub_100E653D4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022FD378;
  a2[1] = v2;
  return result;
}

uint64_t sub_100E65400(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*a2) {
    sub_100E6154C(v2);
  }
  else {
    sub_100E617D4(v2);
  }
  return 1;
}

uint64_t sub_100E65430(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E65470()
{
}

void sub_100E65480()
{
}

void *sub_100E65494(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022FD3F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100E654DC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022FD3F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100E65508(uint64_t a1, unsigned __int8 *a2)
{
  return 1;
}

uint64_t sub_100E65530(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E65570()
{
}

void sub_100E6557C(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

unsigned __int8 *sub_100E655AC(unsigned __int8 *a1, const char *a2, _WORD *a3, unsigned __int8 a4)
{
  *a1 = 0;
  *((_WORD *)a1 + 1) = *a3;
  long long v6 = a1 + 2;
  a1[4] = a4;
  uint64_t v7 = sub_1000D3E78();
  sub_10006B564(v7, buf);
  *a1 = sub_1004D0240(*(uint64_t *)buf, a2, v6);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_10010F274((uint64_t)v28);
  std::ostream::operator<<();
  if (!a1[4])
  {
    if (*a1)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022FD468);
      }
      long long v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *a1;
        std::stringbuf::str();
        long long v12 = SBYTE3(v34) >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v11;
        __int16 v36 = 2080;
        long long v37 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v34) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_47;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022FD468);
      }
      int v13 = *a1;
      std::stringbuf::str();
      if (v27 >= 0) {
        long long v14 = v26;
      }
      else {
        long long v14 = (void **)v26[0];
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = a2;
      __int16 v31 = 1024;
      int v32 = v13;
      __int16 v33 = 2080;
      long long v34 = v14;
      long long v15 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0) {
        operator delete(v26[0]);
      }
    }
    else
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022FD468);
      }
      long long v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        int v20 = *a1;
        std::stringbuf::str();
        uint64_t v21 = SBYTE3(v34) >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v20;
        __int16 v36 = 2080;
        long long v37 = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v34) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_47;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022FD468);
      }
      int v24 = *a1;
      std::stringbuf::str();
      if (v27 >= 0) {
        long long v25 = v26;
      }
      else {
        long long v25 = (void **)v26[0];
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = a2;
      __int16 v31 = 1024;
      int v32 = v24;
      __int16 v33 = 2080;
      long long v34 = v25;
      long long v15 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0) {
        operator delete(v26[0]);
      }
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionDefaultsWrite<unsigned short>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = unsigned short]", "%s\n", v15);
    if (v15 == buf) {
      goto LABEL_47;
    }
    goto LABEL_58;
  }
  if (*a1)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022FD468);
    }
    long long v8 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *a1;
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1)
      {
LABEL_36:
        int v18 = *a1;
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = a2;
        __int16 v31 = 1024;
        int v32 = v18;
        long long v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionDefaultsWrite<unsigned short>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = unsigned short]", "%s\n", v15);
        if (v15 == buf) {
          goto LABEL_47;
        }
LABEL_58:
        free(v15);
        goto LABEL_47;
      }
LABEL_59:
      dispatch_once(&qword_102418FD0, &stru_1022FD468);
      goto LABEL_36;
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022FD468);
    }
    long long v16 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      int v17 = *a1;
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 == -1) {
        goto LABEL_36;
      }
      goto LABEL_59;
    }
  }
LABEL_47:
  *(void *)((char *)v28
  v28[2] = v22;
  if (v29 < 0) {
    operator delete((void *)v28[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return a1;
}

void sub_100E65E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100E65E54(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022FD498;
  result[1] = v3;
  return result;
}

uint64_t sub_100E65E9C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022FD498;
  a2[1] = v2;
  return result;
}

void *sub_100E65EC8(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *a2;
  long long v4 = *(_OWORD *)(a3 + 208);
  v12[12] = *(_OWORD *)(a3 + 192);
  v12[13] = v4;
  uint64_t v13 = *(void *)(a3 + 224);
  long long v5 = *(_OWORD *)(a3 + 144);
  v12[8] = *(_OWORD *)(a3 + 128);
  v12[9] = v5;
  long long v6 = *(_OWORD *)(a3 + 176);
  v12[10] = *(_OWORD *)(a3 + 160);
  v12[11] = v6;
  long long v7 = *(_OWORD *)(a3 + 80);
  v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v7;
  long long v8 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v8;
  long long v9 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v9;
  long long v10 = *(_OWORD *)(a3 + 48);
  _DWORD v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v10;
  return sub_100E59810(*(void **)(a1 + 8), v3, (uint64_t)v12);
}

uint64_t sub_100E65F68(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E65FA8()
{
}

uint64_t sub_100E65FB4(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FD128);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down. Resetting workout prediction.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FD128);
    }
    LOWORD(v7) = 0;
    long long v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictor::teardown(const T *) [T = CLWorkoutPredictor::EMuteAlert]", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_100902D40(a1 + 1512);
  sub_100E5D218(a1);
  sub_100E5C784((void *)a1);
  sub_100E5D3CC(a1);
  uuid_clear((unsigned __int8 *)(a1 + 592));
  uuid_clear((unsigned __int8 *)(a1 + 608));
  sub_100E56900();
  *(int64x2_t *)(a1 + 624) = vdupq_n_s64(0x1AuLL);
  *(_DWORD *)(a1 + 640) = 0;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 648) = 0;
  *(int64x2_t *)(a1 + 672) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 712) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 736) = 0;
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 840) = 0;
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 664) = 3000;
  if (*(void *)(a1 + 1344) || *(void *)(a1 + 1352) || *(void *)(a1 + 1360))
  {
    memset((char *)v6 + 8, 0, 208);
    *(void *)&v6[0] = *(void *)(a1 + 1360);
    long long v12 = v6[4];
    long long v11 = v6[3];
    long long v9 = v6[1];
    long long v10 = v6[2];
    long long v16 = v6[8];
    long long v15 = v6[7];
    long long v13 = v6[5];
    long long v14 = v6[6];
    long long v20 = v6[12];
    long long v19 = v6[11];
    long long v17 = v6[9];
    long long v18 = v6[10];
    *(_OWORD *)int buf = *(_OWORD *)(a1 + 1344);
    uint64_t v21 = 0;
    long long v7 = *(_OWORD *)buf;
    long long v8 = v6[0];
    sub_10077AD10(a1 + 1448, 6);
    *(void *)(a1 + 1344) = 0;
    *(void *)(a1 + 1352) = 0;
    *(void *)(a1 + 1360) = 0;
  }
  sub_100F6DDD8(*(void *)(a1 + 1432));
  return sub_100E5A22C(a1);
}

void *sub_100E662C0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022FD518;
  result[1] = v3;
  return result;
}

uint64_t sub_100E66308(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022FD518;
  a2[1] = v2;
  return result;
}

void *sub_100E66334(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *a2;
  long long v4 = *(_OWORD *)(a3 + 208);
  v12[12] = *(_OWORD *)(a3 + 192);
  v12[13] = v4;
  uint64_t v13 = *(void *)(a3 + 224);
  long long v5 = *(_OWORD *)(a3 + 144);
  v12[8] = *(_OWORD *)(a3 + 128);
  v12[9] = v5;
  long long v6 = *(_OWORD *)(a3 + 176);
  v12[10] = *(_OWORD *)(a3 + 160);
  v12[11] = v6;
  long long v7 = *(_OWORD *)(a3 + 80);
  v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v7;
  long long v8 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v8;
  long long v9 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v9;
  long long v10 = *(_OWORD *)(a3 + 48);
  _DWORD v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v10;
  return sub_100E59810(*(void **)(a1 + 8), v3, (uint64_t)v12);
}

uint64_t sub_100E663D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E66414()
{
}

void *sub_100E66420(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022FD598;
  result[1] = v3;
  return result;
}

uint64_t sub_100E66468(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022FD598;
  a2[1] = v2;
  return result;
}

void *sub_100E66494(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *a2;
  long long v4 = *(_OWORD *)(a3 + 208);
  v12[12] = *(_OWORD *)(a3 + 192);
  v12[13] = v4;
  uint64_t v13 = *(void *)(a3 + 224);
  long long v5 = *(_OWORD *)(a3 + 144);
  v12[8] = *(_OWORD *)(a3 + 128);
  v12[9] = v5;
  long long v6 = *(_OWORD *)(a3 + 176);
  v12[10] = *(_OWORD *)(a3 + 160);
  v12[11] = v6;
  long long v7 = *(_OWORD *)(a3 + 80);
  v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v7;
  long long v8 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v8;
  long long v9 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v9;
  long long v10 = *(_OWORD *)(a3 + 48);
  _DWORD v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v10;
  return sub_100E59810(*(void **)(a1 + 8), v3, (uint64_t)v12);
}

uint64_t sub_100E66534(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E66574()
{
}

void *sub_100E66580(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022FD618;
  result[1] = v3;
  return result;
}

uint64_t sub_100E665C8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022FD618;
  a2[1] = v2;
  return result;
}

void *sub_100E665F4(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *a2;
  long long v4 = *(_OWORD *)(a3 + 208);
  v12[12] = *(_OWORD *)(a3 + 192);
  v12[13] = v4;
  uint64_t v13 = *(void *)(a3 + 224);
  long long v5 = *(_OWORD *)(a3 + 144);
  v12[8] = *(_OWORD *)(a3 + 128);
  v12[9] = v5;
  long long v6 = *(_OWORD *)(a3 + 176);
  v12[10] = *(_OWORD *)(a3 + 160);
  v12[11] = v6;
  long long v7 = *(_OWORD *)(a3 + 80);
  v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v7;
  long long v8 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v8;
  long long v9 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v9;
  long long v10 = *(_OWORD *)(a3 + 48);
  _DWORD v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v10;
  return sub_100E59810(*(void **)(a1 + 8), v3, (uint64_t)v12);
}

uint64_t sub_100E66694(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E666D4()
{
}

void sub_100E666E4()
{
}

void *sub_100E666F8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022FD698;
  result[1] = v3;
  return result;
}

uint64_t sub_100E66740(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022FD698;
  a2[1] = v2;
  return result;
}

void *sub_100E6676C(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *a2;
  long long v4 = *(_OWORD *)(a3 + 208);
  v12[12] = *(_OWORD *)(a3 + 192);
  v12[13] = v4;
  uint64_t v13 = *(void *)(a3 + 224);
  long long v5 = *(_OWORD *)(a3 + 144);
  v12[8] = *(_OWORD *)(a3 + 128);
  v12[9] = v5;
  long long v6 = *(_OWORD *)(a3 + 176);
  v12[10] = *(_OWORD *)(a3 + 160);
  v12[11] = v6;
  long long v7 = *(_OWORD *)(a3 + 80);
  v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v7;
  long long v8 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v8;
  long long v9 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v9;
  long long v10 = *(_OWORD *)(a3 + 48);
  _DWORD v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v10;
  return sub_100E59810(*(void **)(a1 + 8), v3, (uint64_t)v12);
}

uint64_t sub_100E6680C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100E6684C()
{
}

void sub_100E6685C()
{
}

void *sub_100E66870(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022FD718;
  result[1] = v3;
  return result;
}

uint64_t sub_100E668B8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022FD718;
  a2[1] = v2;
  return result;
}

void *sub_100E668E4(uint64_t a1, int *a2, uint64_t a3)
{
  int v3 = *a2;
  long long v4 = *(_OWORD *)(a3 + 208);
  v12[12] = *(_OWORD *)(a3 + 192);
  v12[13] = v4;
  uint64_t v13 = *(void *)(a3 + 224);
  long long v5 = *(_OWORD *)(a3 + 144);
  v12[8] = *(_OWORD *)(a3 + 128);
  v12[9] = v5;
  long long v6 = *(_OWORD *)(a3 + 176);
  v12[10] = *(_OWORD *)(a3 + 160);
  v12[11] = v6;
  long long v7 = *(_OWORD *)(a3 + 80);
  v12[4] = *(_OWORD *)(a3 + 64);
  v12[5] = v7;
  long long v8 = *(_OWORD *)(a3 + 112);
  v12[6] = *(_OWORD *)(a3 + 96);
  v12[7] = v8;
  long long v9 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v9;
  long long v10 = *(_OWORD *)(a3 + 48);
  _DWORD v12[2] = *(_OWORD *)(a3 + 32);
  v12[3] = v10;
  return sub_100E59810(*(void **)(a1 + 8), v3, (uint64_t)v12);
}

uint64_t sub_100E66984(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100E669C4()
{
}

BOOL sub_100E669D0()
{
  uint64_t v1 = qword_1024191C8;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

uint64_t sub_100E669F0()
{
  sub_100134750(qword_102481C48, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102481C48, (void *)&_mh_execute_header);
  sub_100134750(qword_102481C60, "Acc800Fp");
  dword_102481C78 = 800;
  __cxa_atexit((void (*)(void *))sub_10058C198, qword_102481C60, (void *)&_mh_execute_header);
  sub_100134750(qword_102481C80, "DmFp");
  dword_102481C98 = 200;

  return __cxa_atexit((void (*)(void *))sub_10058C198, qword_102481C80, (void *)&_mh_execute_header);
}

uint64_t sub_100E66ACC()
{
  if (qword_102481D48 != -1) {
    dispatch_once(&qword_102481D48, &stru_1022FD788);
  }
  return qword_10248ADF0;
}

void sub_100E66B14(uint64_t a1)
{
}

void *sub_100E66B5C(void *a1)
{
  *a1 = off_1022FD7B8;
  sub_100E66BD0((uint64_t)a1, 0, 0);
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_1000DB0A0(v2);
  }

  return sub_1009D1DE4(a1);
}

void sub_100E66BD0(uint64_t a1, int a2, uint64_t a3)
{
  if (!a2)
  {
    uint64_t v18 = v3;
    uint64_t v19 = v4;
    if (!*(void *)(a1 + 32))
    {
      sub_100103240();
      int v7 = sub_10016CCBC();
      int v8 = v7 ? 41 : 1;
      int v9 = v7 ? 65280 : 11;
      long long v10 = (uint64_t *)sub_100A26784();
      v15[0] = v9;
      v15[1] = v8;
      char v16 = 0;
      sub_101A46D60(v10, (uint64_t)v15, (uint64_t *)&v17);
      long long v11 = v17;
      long long v17 = 0uLL;
      long long v12 = *(std::__shared_weak_count **)(a1 + 40);
      *(_OWORD *)(a1 + 32) = v11;
      if (v12)
      {
        sub_1000DB0A0(v12);
        if (*((void *)&v17 + 1)) {
          sub_1000DB0A0(*((std::__shared_weak_count **)&v17 + 1));
        }
      }
    }
    if (a3)
    {
      uint64_t v13 = sub_100E66CA0;
      uint64_t v14 = a1;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
    sub_100A2932C(*(uint64_t **)(a1 + 32), (uint64_t)v13, v14);
  }
}

uint64_t sub_100E66CA0(uint64_t a1)
{
  uint64_t result = IOHIDEventGetType();
  if (result == 3)
  {
    int IntegerValue = IOHIDEventGetIntegerValue();
    uint64_t result = IOHIDEventGetIntegerValue();
    if (IntegerValue == 65289 && result == 1)
    {
      BOOL v4 = IOHIDEventGetIntegerValue() == 0;
      unint64_t TimeStamp = IOHIDEventGetTimeStamp();
      sub_1000D3D90(TimeStamp);
      BOOL v6 = v4;
      return sub_1000E7BA0(a1, 0, (uint64_t)&v6, 1);
    }
  }
  return result;
}

void sub_100E66D64(uint64_t a1, void *a2)
{
  *(void *)a1 = a2;
  sub_100ECEB98(a1 + 8, "MotionCalibration", a2);
  *(void *)(a1 + 200) = 0;
  sub_100EBBEB0(a1 + 208, (uint64_t)"CLEphemeralGNSSController", a1, 0.0);
  *(void *)(a1 + 264) = [objc_msgSend(objc_msgSend(a2, "silo"), "newTimer")];
  *(unsigned char *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0x403E000000000000;
  *(void *)(a1 + 288) = 0x404E000000000000;
  *(unsigned char *)(a1 + 296) = 1;
  *(void *)(a1 + 328) = 0x6400000000;
  *(void *)(a1 + 320) = 0x3FB0000000000000;
  sub_100ECEB9C();
}

void sub_100E66EA0(_Unwind_Exception *a1)
{
  sub_100EBBF9C(v3);
  uint64_t v5 = *(void *)(v1 + 200);
  *(void *)(v1 + 200) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_100C0AB60(v2);
  _Unwind_Resume(a1);
}

void sub_100E66EF8(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022FD810);
  }
  BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLEphemeralGNSSController::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022FD810);
    }
    int v9 = qword_102419588;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)int buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      __int16 v16 = 2082;
      long long v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLEphemeralGNSSController::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100E67C50(v6, v7, a2);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100E670A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E670CC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 272)) {
    sub_100E6717C((double *)a1);
  }
  uint64_t v2 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  sub_100EBBF9C(a1 + 208);
  uint64_t v3 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_100C0AB60(a1 + 8);
  return a1;
}

double *sub_100E6717C(double *result)
{
  if (*((unsigned char *)result + 272))
  {
    uint64_t v1 = result;
    sub_100E67AB4((uint64_t)result);
    v1[32] = sub_10016C458();
    if (*((int *)v1 + 54) >= 1)
    {
      if (qword_102419660 != -1) {
        dispatch_once(&qword_102419660, &stru_1022FD830);
      }
      uint64_t v2 = qword_102419668;
      if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[CLEphemeralGNSSController] Releasing power assertion and disabling proactive GPS", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419660 != -1) {
          dispatch_once(&qword_102419660, &stru_1022FD830);
        }
        uint64_t v3 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEphemeralGNSSController::stopEphemeralUpdates()", "%s\n", v3);
        if (v3 != (char *)buf) {
          free(v3);
        }
      }
      sub_100EBC6AC((uint64_t)(v1 + 26));
    }
    uint64_t result = (double *)[*(id *)(*((void *)v1 + 25) + 16) unregister:*(void *)(*((void *)v1 + 25) + 8) forNotification:0];
    *((unsigned char *)v1 + 272) = 0;
  }
  return result;
}

void sub_100E67354(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 272))
  {
    double v2 = sub_10016C458();
    double v3 = *(double *)(a1 + 256);
    double v4 = v2 - v3;
    BOOL v5 = v3 <= 0.0;
    double v6 = 0.0;
    if (!v5) {
      double v6 = v4;
    }
    if (v6 == 0.0 || v6 > *(double *)(a1 + 280))
    {
      if (*(_DWORD *)(a1 + 332) == *(unsigned __int16 *)(a1 + 330)
        && (!*(_WORD *)(a1 + 330) ? (double v7 = 0.0) : (double v7 = *(double *)sub_1000C0B8C((unsigned __int16 *)(a1 + 328), 0)),
            double v10 = v2 - v7,
            v2 - v7 < 86400.0))
      {
        if (qword_102419660 != -1) {
          dispatch_once(&qword_102419660, &stru_1022FD830);
        }
        char v11 = qword_102419668;
        if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 134217984;
          double v23 = v10;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[CLEphemeralGNSSController] Attempt to start a new session denied: hit the escalation event backstop, timeSinceBackstop %f", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419660 != -1) {
            dispatch_once(&qword_102419660, &stru_1022FD830);
          }
          int v20 = 134217984;
          double v21 = v10;
          int v9 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEphemeralGNSSController::startEphemeralUpdates()", "%s\n", v9);
LABEL_27:
          if (v9 != (char *)buf) {
            free(v9);
          }
        }
      }
      else
      {
        sub_100E678A8(a1);
        [*(id *)(*(void *)(a1 + 200) + 16) register:*(void *)(*(void *)(a1 + 200) + 8) forNotification:0 registrationInfo:0];
        if (*(int *)(a1 + 216) <= 0)
        {
          if (qword_102419660 != -1) {
            dispatch_once(&qword_102419660, &stru_1022FD830);
          }
          long long v12 = qword_102419668;
          if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[CLEphemeralGNSSController] Taking power assertion and enabling proactive GPS.", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419660 != -1) {
              dispatch_once(&qword_102419660, &stru_1022FD830);
            }
            LOWORD(v20) = 0;
            long long v17 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLEphemeralGNSSController::startEphemeralUpdates()", "%s\n", v17);
            if (v17 != (char *)buf) {
              free(v17);
            }
          }
          sub_100134750(__p, "starting ephemeral GNSS session");
          sub_100EBBFD8(a1 + 208, (uint64_t *)__p);
          if (v19 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v13 = *(unsigned __int16 *)(a1 + 330);
          unint64_t v14 = *(unsigned int *)(a1 + 332);
          uint64_t v15 = *(unsigned __int16 *)(a1 + 328);
          if (v15 + v13 >= v14) {
            uint64_t v16 = *(unsigned int *)(a1 + 332);
          }
          else {
            uint64_t v16 = 0;
          }
          *(double *)(a1 + 328 + 8 * (v15 + v13 - v16) + 8) = v2;
          if (v14 <= v13)
          {
            if (v15 + 1 < v14) {
              LOWORD(v14) = 0;
            }
            *(_WORD *)(a1 + 328) = v15 + 1 - v14;
          }
          else
          {
            *(_WORD *)(a1 + 330) = v13 + 1;
          }
          *(unsigned char *)(a1 + 296) = 1;
        }
        *(unsigned char *)(a1 + 272) = 1;
      }
    }
    else
    {
      if (qword_102419660 != -1) {
        dispatch_once(&qword_102419660, &stru_1022FD830);
      }
      int v8 = qword_102419668;
      if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[CLEphemeralGNSSController] Attempt to start a new session denied: too soon since last session ended.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419660 != -1) {
          dispatch_once(&qword_102419660, &stru_1022FD830);
        }
        LOWORD(v20) = 0;
        int v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEphemeralGNSSController::startEphemeralUpdates()", "%s\n", v9);
        goto LABEL_27;
      }
    }
  }
}

void sub_100E67884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100E678A8(uint64_t a1)
{
  if (qword_102419660 != -1) {
    dispatch_once(&qword_102419660, &stru_1022FD830);
  }
  double v2 = qword_102419668;
  if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[CLEphemeralGNSSController] Starting auto stop timer", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419660 != -1) {
      dispatch_once(&qword_102419660, &stru_1022FD830);
    }
    __int16 v6 = 0;
    double v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEphemeralGNSSController::startAutoStopTimer()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  if ([*(id *)(a1 + 264) handler]) {
    sub_101A910E0();
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100E67E44;
  void v5[3] = &unk_1022A3020;
  void v5[4] = a1;
  [*(id *)(a1 + 264) setHandler:v5];
  return [*(id *)(a1 + 264) setNextFireDelay:*(double *)(a1 + 288) interval:1.79769313e308];
}

id sub_100E67AB4(uint64_t a1)
{
  if (qword_102419660 != -1) {
    dispatch_once(&qword_102419660, &stru_1022FD830);
  }
  double v2 = qword_102419668;
  if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[CLEphemeralGNSSController] Stopping auto stop timer", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419660 != -1) {
      dispatch_once(&qword_102419660, &stru_1022FD830);
    }
    double v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEphemeralGNSSController::stopAutoStopTimer()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [*(id *)(a1 + 264) invalidate];
}

void sub_100E67C50(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (*a3) {
    sub_101A9110C();
  }
  if (qword_102419660 != -1) {
    dispatch_once(&qword_102419660, &stru_1022FD830);
  }
  double v3 = qword_102419668;
  if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[CLEphemeralGNSSController] Received location notification", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419660 != -1) {
      dispatch_once(&qword_102419660, &stru_1022FD830);
    }
    double v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEphemeralGNSSController::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

void sub_100E67DE4(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100E67E14(id a1)
{
  qword_102419668 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MotionCues");
}

double *sub_100E67E44(uint64_t a1)
{
  uint64_t v1 = *(double **)(a1 + 32);
  if (qword_102419660 != -1) {
    dispatch_once(&qword_102419660, &stru_1022FD830);
  }
  double v2 = qword_102419668;
  if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[CLEphemeralGNSSController] Auto stop timer expired; stopping session",
      buf,
      2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419660 != -1) {
      dispatch_once(&qword_102419660, &stru_1022FD830);
    }
    double v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEphemeralGNSSController::startAutoStopTimer()_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return sub_100E6717C(v1);
}

id *sub_100E67FE0(id *a1, uint64_t a2)
{
  *a1 = [objc_alloc((Class)GEOMapFeatureAccess) initWithQueue:a2];
  sub_100E68040(a1);
  [*a1 setFlipNegativeTravelDirectionRoads:1];
  [*a1 setAllowStaleData:1];
  return a1;
}

uint64_t sub_100E68040(id *a1)
{
  sub_1000E9354(v4);
  uint64_t v2 = sub_1000A6958();
  sub_100012960(v2, "Kappa", v4);
  [*a1 setAllowNetworkTileLoad:[objc_msgSend(objc_msgSend((id)sub_1000E9358((uint64_t)v4), "valueForKey:", @"roadDisableNetwork"), "BOOLValue") ^ 1]];
  return sub_10013F3C4(v4);
}

void sub_100E680B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id *sub_100E680D4(id *a1)
{
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1022FD8C0);
  }
  uint64_t v2 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGCZ,destroy geocodec malloc zone,~CLKappaMapTiles()", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022FD8C0);
    }
    double v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLKappaMapTiles::~CLKappaMapTiles()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  [*a1 clearRoadTiles];
  GEOResetGeoCodecsAllocator();

  return a1;
}

void sub_100E68280(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_100E68290(id *a1, uint64_t a2, double a3, double a4, float a5, double a6)
{
  uint64_t v13 = [[CLOSTransaction alloc] initWithDescription:"CLKappaMapTiles.getDistanceToClosestRoad"];
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_1022FD8E0);
  }
  unint64_t v14 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Kappa,GEO,getDistanceToClosestRoad", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_1022FD8E0);
    }
    LOWORD(v29) = 0;
    char v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaMapTiles::getDistanceToClosestRoad(const double, const double, const float, const double, void (^)(std::unique_ptr<CMSPU::Safety::RoadInfoSample>, NSError *))", "%s\n", v19);
    if (v19 != buf) {
      free(v19);
    }
  }
  if (!sub_1000EF68C(a3, a4)) {
    goto LABEL_10;
  }
  BOOL v15 = !sub_1000EF668(a3, a4);
  if (a6 < 0.0) {
    LOBYTE(v15) = 0;
  }
  if (v15)
  {
    __int16 v18 = (char *)operator new(0x78uLL);
    *((void *)v18 + 2) = 0;
    *((void *)v18 + 1) = 0;
    *(void *)__int16 v18 = off_1022FD910;
    *(_OWORD *)(v18 + 24) = 0u;
    *(_OWORD *)(v18 + 40) = 0u;
    *(_OWORD *)(v18 + 88) = 0u;
    *(_OWORD *)(v18 + 56) = 0u;
    *(_OWORD *)(v18 + 72) = 0u;
    *((void *)v18 + 13) = 0;
    *((void *)v18 + 14) = 0;
    *((_DWORD *)v18 + 8) = 2139095039;
    v18[36] = 9;
    *((float *)v18 + 10) = a5;
    *(_OWORD *)(v18 + 92) = 0u;
    *(_OWORD *)(v18 + 44) = 0u;
    *(_OWORD *)(v18 + 60) = 0u;
    *(_OWORD *)(v18 + 76) = 0u;
    *((_WORD *)v18 + 54) = 0;
    *(void *)int buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x2020000000;
    LODWORD(v36) = 0;
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3321888768;
    _DWORD v24[2] = sub_100E6889C;
    v24[3] = &unk_1022FD858;
    v24[4] = v13;
    v24[5] = buf;
    unsigned char v24[6] = v18 + 24;
    long long v25 = (std::__shared_weak_count *)v18;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v18 + 1, 1uLL, memory_order_relaxed);
    double v26 = a3;
    double v27 = a4;
    sub_100E68040(a1);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3321888768;
    v21[2] = sub_100E68E78;
    v21[3] = &unk_1022FD890;
    v21[6] = buf;
    v21[7] = a1;
    v21[4] = v13;
    v21[5] = a2;
    *(double *)&v21[8] = a3;
    *(double *)&v21[9] = a4;
    *(double *)&v21[10] = a6;
    float v23 = a5;
    v21[11] = v18 + 24;
    uint64_t v22 = (std::__shared_weak_count *)v18;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v18 + 1, 1uLL, memory_order_relaxed);
    [*a1 findRoadsNear:v24 radius:v21 handler:a3 completionHandler:a4];
    if (v22) {
      sub_1000DB0A0(v22);
    }
    if (v25) {
      sub_1000DB0A0(v25);
    }
    _Block_object_dispose(buf, 8);
    sub_1000DB0A0((std::__shared_weak_count *)v18);
  }
  else
  {
LABEL_10:
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_1022FD8E0);
    }
    uint64_t v16 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 134284033;
      *(double *)&uint8_t buf[4] = a3;
      *(_WORD *)&unsigned char buf[12] = 2049;
      *(double *)&unsigned char buf[14] = a4;
      *(_WORD *)&buf[22] = 2050;
      double v36 = a6;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Kappa,GEO,invalid coordinate,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.1lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_1022FD8E0);
      }
      int v29 = 134284033;
      double v30 = a3;
      __int16 v31 = 2049;
      double v32 = a4;
      __int16 v33 = 2050;
      double v34 = a6;
      int v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaMapTiles::getDistanceToClosestRoad(const double, const double, const float, const double, void (^)(std::unique_ptr<CMSPU::Safety::RoadInfoSample>, NSError *))", "%s\n", v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    uint64_t v28 = 0;
    (*(void (**)(uint64_t, uint64_t *, NSError *))(a2 + 16))(a2, &v28, +[NSError errorWithDomain:kCLErrorDomainPrivate code:6 userInfo:0]);
    uint64_t v17 = v28;
    uint64_t v28 = 0;
    if (v17) {
      operator delete();
    }
  }
}

void sub_100E6882C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (a24) {
    sub_1000DB0A0(a24);
  }
  if (a33) {
    sub_1000DB0A0(a33);
  }
  _Block_object_dispose(&a41, 8);
  sub_1000DB0A0(v41);
  _Unwind_Resume(a1);
}

void sub_100E6889C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_1022FD8E0);
  }
  double v4 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 67109376;
    *(_DWORD *)uint64_t v17 = [v3 roadClass];
    *(_WORD *)&v17[4] = 1024;
    *(_DWORD *)&v17[6] = [v3 isDrivable];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Kappa,GEO,GEOMapFeatureRoadHandler class:%d drivable:%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_1022FD8E0);
    }
    [v3 roadClass];
    [v3 isDrivable];
    unint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaMapTiles::getDistanceToClosestRoad(const double, const double, const float, const double, void (^)(std::unique_ptr<CMSPU::Safety::RoadInfoSample>, NSError *))_block_invoke", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  ++*(_WORD *)(*(void *)(a1 + 48) + 20);
  if (!v3 || (unint64_t)[v3 coordinateCount] <= 1)
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_1022FD8E0);
    }
    BOOL v5 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Kappa,GEO,malformed road tile", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419100 == -1)
    {
LABEL_38:
      BOOL v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaMapTiles::getDistanceToClosestRoad(const double, const double, const float, const double, void (^)(std::unique_ptr<CMSPU::Safety::RoadInfoSample>, NSError *))_block_invoke", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
      return;
    }
LABEL_40:
    dispatch_once(&qword_102419100, &stru_1022FD8E0);
    goto LABEL_38;
  }
  if ([v3 isDrivable])
  {
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    [v3 closestDistance2DFromCoordinate:*(double *)(a1 + 64), *(double *)(a1 + 72), 0.0];
    double v7 = v6;
    if (v6 >= 0.0 && v6 != 1.79769313e308 && v6 < *(float *)(*(void *)(a1 + 48) + 8))
    {
      unsigned __int8 v8 = [v3 roadClass];
      uint64_t v9 = *(void *)(a1 + 48);
      *(unsigned char *)(v9 + 12) = v8;
      float v10 = v7;
      *(float *)(v9 + 8) = v10;
    }
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_1022FD8E0);
    }
    char v11 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
    {
      double v12 = *(float *)(*(void *)(a1 + 48) + 8);
      *(_DWORD *)int buf = 134218240;
      *(double *)uint64_t v17 = v7;
      *(_WORD *)&v17[8] = 2048;
      double v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Kappa,GEO,distanceToRoad:%f, distanceToClosestRoad:%f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 == -1) {
        goto LABEL_38;
      }
      goto LABEL_40;
    }
  }
  else
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_1022FD8E0);
    }
    uint64_t v13 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Kappa,GEO,Roads,ignoring non-drivable road", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 == -1) {
        goto LABEL_38;
      }
      goto LABEL_40;
    }
  }
}

uint64_t sub_100E68E4C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100E68E68(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

void sub_100E68E78(uint64_t a1, void *a2)
{
  double v4 = *(id **)(a1 + 56);
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1022FD8C0);
  }
  BOOL v5 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLGCZ,destroy geocodec malloc zone,CLKappaMapTiles::getDistanceToClosestRoad", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022FD8C0);
    }
    uint64_t v28 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaMapTiles::getDistanceToClosestRoad(const double, const double, const float, const double, void (^)(std::unique_ptr<CMSPU::Safety::RoadInfoSample>, NSError *))_block_invoke", "%s\n", v28);
    if (v28 != (char *)buf) {
      free(v28);
    }
  }
  [*v4 clearRoadTiles];
  GEOResetGeoCodecsAllocator();
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_1022FD8E0);
  }
  double v6 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Kappa,GEO,GEOMapFeatureAccessCompletionHandler", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_1022FD8E0);
    }
    int v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaMapTiles::getDistanceToClosestRoad(const double, const double, const float, const double, void (^)(std::unique_ptr<CMSPU::Safety::RoadInfoSample>, NSError *))_block_invoke", "%s\n", v29);
    if (v29 != (char *)buf) {
      free(v29);
    }
  }
  if (a2)
  {
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_1022FD8E0);
    }
    double v7 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_ERROR))
    {
      id v8 = [a2 code];
      id v9 = [a2 domain];
      id v10 = [a2 localizedDescription];
      uint64_t v12 = *(void *)(a1 + 64);
      uint64_t v11 = *(void *)(a1 + 72);
      uint64_t v13 = *(void *)(a1 + 80);
      float v14 = *(float *)(a1 + 104);
      unsigned int v15 = [*v4 allowNetworkTileLoad];
      *(_DWORD *)int buf = 134350851;
      *(void *)double v34 = v8;
      *(_WORD *)&v34[8] = 2114;
      id v35 = v9;
      *(_WORD *)double v36 = 2113;
      *(void *)&v36[2] = v10;
      *(_WORD *)long long v37 = 2049;
      *(void *)&v37[2] = v12;
      __int16 v38 = 2049;
      uint64_t v39 = v11;
      __int16 v40 = 2050;
      uint64_t v41 = v13;
      __int16 v42 = 2049;
      double v43 = v14;
      __int16 v44 = 1026;
      unsigned int v45 = v15;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Kappa,GEO,Roads,GEOMapFeatureAccessRequest reported error,%{public}lld,domain,%{public}@,description, \"%{private}@\",LL,%{private}.7lf,%{private}.7lf,radius,%{public}.1lf,accuracy,%{private}.7lf,networkAllowed,%{public}d", buf, 0x4Eu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_1022FD8E0);
      }
      [a2 code];
      [a2 domain];
      [a2 localizedDescription];
      [*v4 allowNetworkTileLoad];
      __int16 v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLKappaMapTiles::getDistanceToClosestRoad(const double, const double, const float, const double, void (^)(std::unique_ptr<CMSPU::Safety::RoadInfoSample>, NSError *))_block_invoke", "%s\n", v31);
      if (v31 != (char *)buf) {
        free(v31);
      }
    }
    uint64_t v16 = a1 + 88;
    strncpy((char *)(*(void *)(a1 + 88) + 22), (const char *)[objc_msgSend(objc_msgSend(a2, "domain"), "UTF8String") UTF8String], 0x40uLL);
    *(unsigned char *)(*(void *)v16 + 85) = 0;
    *(void *)(*(void *)v16 + 88) = [a2 code];
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_1022FD8E0);
    }
    uint64_t v17 = qword_102419108;
    if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 88);
      uint64_t v19 = v18 + 22;
      uint64_t v20 = *(void *)(v18 + 88);
      *(_DWORD *)int buf = 136315394;
      *(void *)double v34 = v19;
      *(_WORD *)&v34[8] = 1024;
      LODWORD(v35) = v20;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "failed to fetch road info %s %d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419100 != -1) {
        dispatch_once(&qword_102419100, &stru_1022FD8E0);
      }
      double v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaMapTiles::getDistanceToClosestRoad(const double, const double, const float, const double, void (^)(std::unique_ptr<CMSPU::Safety::RoadInfoSample>, NSError *))_block_invoke", "%s\n", v32);
      if (v32 != (char *)buf) {
        free(v32);
      }
    }
  }
  if (qword_102419100 != -1) {
    dispatch_once(&qword_102419100, &stru_1022FD8E0);
  }
  double v21 = qword_102419108;
  if (os_log_type_enabled((os_log_t)qword_102419108, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    unsigned int v23 = [*v4 allowNetworkTileLoad];
    uint64_t v24 = *(void *)(a1 + 88);
    int v25 = *(unsigned __int8 *)(v24 + 12);
    double v26 = *(float *)(v24 + 8);
    double v27 = *(float *)(a1 + 104);
    *(_DWORD *)int buf = 67241217;
    *(_DWORD *)double v34 = v22;
    *(_WORD *)&v34[4] = 1026;
    *(_DWORD *)&v34[6] = v23;
    LOWORD(v35) = 1026;
    *(_DWORD *)((char *)&v35 + 2) = v25;
    HIWORD(v35) = 2050;
    *(double *)double v36 = v26;
    *(_WORD *)&v36[8] = 2049;
    *(double *)long long v37 = v27;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Kappa,GEO,GEOMapFeatureAccessCompletionHandler Completed query with %{public}d roads evaluated, network status is: %{public}d, calling handler with road class:%{public}d distance:%{public}f accuracy:%{private}f", buf, 0x28u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419100 != -1) {
      dispatch_once(&qword_102419100, &stru_1022FD8E0);
    }
    [*v4 allowNetworkTileLoad];
    double v30 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLKappaMapTiles::getDistanceToClosestRoad(const double, const double, const float, const double, void (^)(std::unique_ptr<CMSPU::Safety::RoadInfoSample>, NSError *))_block_invoke", "%s\n", v30);
    if (v30 != (char *)buf) {
      free(v30);
    }
  }
  operator new();
}

void sub_100E69810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E69844(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 96);
  *(void *)(result + 88) = *(void *)(a2 + 88);
  *(void *)(result + 96) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100E69860(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 96);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

void sub_100E69870(id a1)
{
  qword_102419438 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_100E698A0(id a1)
{
  qword_102419108 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Kappa");
}

void sub_100E698D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022FD910;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100E698F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022FD910;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

BOOL sub_100E6994C(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16) == 20 && *(void *)(a2 + 112) == 4;
}

uint64_t sub_100E69970(void *a1, uint64_t a2)
{
  a1[7] = *(void *)(a2 + 112);
  a1[4] = a1[3];
  return sub_100E6A2C4((uint64_t)a1, 1);
}

uint64_t sub_100E69988(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16)) {
    return 0;
  }
  unint64_t v3 = *(void *)(a2 + 112);
  BOOL v4 = v3 > 0x2E;
  unint64_t v5 = (0x405800300010uLL >> v3) & 1;
  if (v4) {
    return 0;
  }
  else {
    return v5;
  }
}

void sub_100E699BC(void *a1, uint64_t a2)
{
  a1[7] = *(void *)(a2 + 112);
  a1[4] = a1[3];
  sub_100E6A2C4((uint64_t)a1, 1);

  sub_100E6A4A4((uint64_t)a1);
}

BOOL sub_100E69A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  return (v2 == 11 || v2 == 0) && *(void *)(a2 + 112) == 4;
}

BOOL sub_100E69A38(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16) == 21 && *(void *)(a2 + 112) == 4;
}

uint64_t sub_100E69A5C(void *a1)
{
  a1[7] = 0;
  a1[4] = a1[3];
  return sub_100E6A2C4((uint64_t)a1, 0);
}

BOOL sub_100E69A78(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16) == 1 && *(void *)(a2 + 112) == *(void *)(a1 + 56);
}

uint64_t sub_100E69AA4(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_1022FD950;
  *(void *)(result + 8) = 8;
  *(_WORD *)(result + 16) = 512;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = a2;
  *(void *)(result + 72) = 0;
  return result;
}

uint64_t sub_100E69AD4(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[9];
  v9[8] = a2[8];
  v9[9] = v2;
  long long v3 = a2[11];
  v9[10] = a2[10];
  v9[11] = v3;
  long long v4 = a2[5];
  v9[4] = a2[4];
  v9[5] = v4;
  long long v5 = a2[7];
  v9[6] = a2[6];
  v9[7] = v5;
  long long v6 = a2[1];
  v9[0] = *a2;
  v9[1] = v6;
  long long v7 = a2[3];
  _DWORD v9[2] = a2[2];
  v9[3] = v7;
  return sub_1001A34E0(a1, 1, (uint64_t)v9);
}

void sub_100E69B2C(uint64_t a1, uint64_t a2)
{
  if (qword_102419150 != -1) {
    dispatch_once(&qword_102419150, &stru_1022FDA10);
  }
  long long v4 = qword_102419158;
  if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a2 + 16);
    uint64_t v6 = *(void *)(a2 + 112);
    int v7 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)int buf = 134349568;
    uint64_t v37 = v5;
    __int16 v38 = 2050;
    uint64_t v39 = v6;
    __int16 v40 = 1026;
    int v41 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLWorkoutDistanceController, received event, %{public}ld, workout, %{public}ld, current state, %{public}d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419150 != -1) {
      dispatch_once(&qword_102419150, &stru_1022FDA10);
    }
    uint64_t v17 = *(void *)(a2 + 16);
    uint64_t v18 = *(void *)(a2 + 112);
    int v19 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)int v22 = 134349568;
    *(void *)&v22[4] = v17;
    *(_WORD *)&v22[12] = 2050;
    *(void *)&v22[14] = v18;
    *(_WORD *)&v22[22] = 1026;
    *(_DWORD *)&v22[24] = v19;
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutDistanceController::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  long long v8 = *(_OWORD *)(a2 + 208);
  long long v33 = *(_OWORD *)(a2 + 192);
  long long v34 = v8;
  uint64_t v35 = *(void *)(a2 + 224);
  long long v9 = *(_OWORD *)(a2 + 144);
  long long v29 = *(_OWORD *)(a2 + 128);
  long long v30 = v9;
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v31 = *(_OWORD *)(a2 + 160);
  long long v32 = v10;
  long long v11 = *(_OWORD *)(a2 + 80);
  long long v25 = *(_OWORD *)(a2 + 64);
  long long v26 = v11;
  long long v12 = *(_OWORD *)(a2 + 112);
  long long v27 = *(_OWORD *)(a2 + 96);
  long long v28 = v12;
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)int v22 = *(_OWORD *)a2;
  *(_OWORD *)&v22[16] = v13;
  long long v14 = *(_OWORD *)(a2 + 48);
  long long v23 = *(_OWORD *)(a2 + 32);
  long long v24 = v14;
  sub_1001A34E0(a1, 2, (uint64_t)v22);
  if (qword_102419150 != -1) {
    dispatch_once(&qword_102419150, &stru_1022FDA10);
  }
  unsigned int v15 = qword_102419158;
  if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)int buf = 67240192;
    LODWORD(v37) = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "CLWorkoutDistanceController, state after workout event, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419150 != -1) {
      dispatch_once(&qword_102419150, &stru_1022FDA10);
    }
    double v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutDistanceController::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
}

uint64_t sub_100E69EC8(uint64_t a1)
{
  if (*(void *)(a1 + 32) != *(void *)(a1 + 24))
  {
    sub_100E69F20(a1, (unint64_t **)(a1 + 24));
    *(void *)(a1 + 32) = *(void *)(a1 + 24);
  }

  return sub_100E6A2C4(a1, 1);
}

uint64_t sub_100E69F20(uint64_t result, unint64_t **a2)
{
  unint64_t v2 = *(void *)(result + 56);
  BOOL v3 = v2 > 0x15;
  uint64_t v4 = (1 << v2) & 0x300010;
  if (!v3 && v4 != 0)
  {
    uint64_t v7 = result;
    long long v8 = *a2;
    long long v9 = a2[1];
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)*a2) >> 6) < 2)
    {
      if (v8 == v9) {
        unint64_t v14 = 0;
      }
      else {
        unint64_t v14 = *v8;
      }
      if (qword_102419150 != -1) {
        dispatch_once(&qword_102419150, &stru_1022FDA10);
      }
      unsigned int v15 = qword_102419158;
      if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 134349056;
        unint64_t v18 = v14;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "CLWorkoutDistanceController, sending update, %{public}f", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return (*(uint64_t (**)(void, unint64_t **))(**(void **)(v7 + 64) + 8))(*(void *)(v7 + 64), a2);
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419150 == -1) {
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v10 = *v8;
      uint64_t v11 = *(v9 - 24);
      if (qword_102419150 != -1) {
        dispatch_once(&qword_102419150, &stru_1022FDA10);
      }
      long long v12 = qword_102419158;
      if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 6);
        *(_DWORD *)int buf = 134349568;
        unint64_t v18 = v13;
        __int16 v19 = 2050;
        unint64_t v20 = v10;
        __int16 v21 = 2050;
        uint64_t v22 = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "CLWorkoutDistanceController, notifying clients with num updates, %{public}lu, start, %{public}f, end, %{public}f", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return (*(uint64_t (**)(void, unint64_t **))(**(void **)(v7 + 64) + 8))(*(void *)(v7 + 64), a2);
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419150 == -1)
      {
LABEL_24:
        int v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutDistanceController::sendOdometerData(const std::vector<CLOdometerEntry> &) const", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
        return (*(uint64_t (**)(void, unint64_t **))(**(void **)(v7 + 64) + 8))(*(void *)(v7 + 64), a2);
      }
    }
    dispatch_once(&qword_102419150, &stru_1022FDA10);
    goto LABEL_24;
  }
  return result;
}

uint64_t sub_100E6A2C4(uint64_t a1, uint64_t a2)
{
  if (qword_102419150 != -1) {
    dispatch_once(&qword_102419150, &stru_1022FDA10);
  }
  uint64_t v4 = qword_102419158;
  if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67240192;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLWorkoutDistanceController, toggling gps, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419150 != -1) {
      dispatch_once(&qword_102419150, &stru_1022FDA10);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutDistanceController::toggleGps(BOOL)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  *(unsigned char *)(a1 + 48) = a2;
  return (***(uint64_t (****)(void, uint64_t))(a1 + 64))(*(void *)(a1 + 64), a2);
}

void sub_100E6A4A4(uint64_t a1)
{
  if (*(void *)(a1 + 72)) {
    sub_10079D264((uint64_t *)(a1 + 72), 0);
  }
  operator new();
}

void sub_100E6A92C(_Unwind_Exception *a1)
{
  sub_1004A2EB8(v2);
  sub_1004A2C4C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100E6A9BC(void *a1)
{
  a1[7] = 0;
  a1[4] = a1[3];
  uint64_t result = sub_100E6A2C4((uint64_t)a1, 0);
  uint64_t v4 = a1[9];
  BOOL v3 = a1 + 9;
  if (v4)
  {
    return sub_10079D264(v3, 0);
  }
  return result;
}

void sub_100E6AA1C(void *a1, long long *a2)
{
  unint64_t v6 = a1[5];
  uint64_t v4 = (uint64_t)(a1 + 5);
  unint64_t v5 = v6;
  uint64_t v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v18 = (void **)(v4 - 16);
    uint64_t v19 = *(void *)(v4 - 16);
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v19) >> 6);
    unint64_t v21 = v20 + 1;
    if (v20 + 1 > 0x155555555555555) {
      sub_1001D7FD4();
    }
    unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v19) >> 6);
    if (2 * v22 > v21) {
      unint64_t v21 = 2 * v22;
    }
    if (v22 >= 0xAAAAAAAAAAAAAALL) {
      unint64_t v23 = 0x155555555555555;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23) {
      long long v24 = (char *)sub_10017EB28(v4, v23);
    }
    else {
      long long v24 = 0;
    }
    long long v25 = &v24[192 * v20];
    long long v26 = &v24[192 * v23];
    long long v27 = *a2;
    long long v28 = a2[1];
    long long v29 = a2[3];
    *((_OWORD *)v25 + 2) = a2[2];
    *((_OWORD *)v25 + 3) = v29;
    *(_OWORD *)long long v25 = v27;
    *((_OWORD *)v25 + 1) = v28;
    long long v30 = a2[4];
    long long v31 = a2[5];
    long long v32 = a2[7];
    *((_OWORD *)v25 + 6) = a2[6];
    *((_OWORD *)v25 + 7) = v32;
    *((_OWORD *)v25 + 4) = v30;
    *((_OWORD *)v25 + 5) = v31;
    long long v33 = a2[8];
    long long v34 = a2[9];
    long long v35 = a2[11];
    *((_OWORD *)v25 + 10) = a2[10];
    *((_OWORD *)v25 + 11) = v35;
    *((_OWORD *)v25 + 8) = v33;
    *((_OWORD *)v25 + 9) = v34;
    uint64_t v17 = v25 + 192;
    uint64_t v37 = (char *)a1[3];
    double v36 = (char *)a1[4];
    if (v36 != v37)
    {
      do
      {
        long long v38 = *((_OWORD *)v36 - 12);
        long long v39 = *((_OWORD *)v36 - 11);
        long long v40 = *((_OWORD *)v36 - 9);
        *((_OWORD *)v25 - 10) = *((_OWORD *)v36 - 10);
        *((_OWORD *)v25 - 9) = v40;
        *((_OWORD *)v25 - 12) = v38;
        *((_OWORD *)v25 - 11) = v39;
        long long v41 = *((_OWORD *)v36 - 8);
        long long v42 = *((_OWORD *)v36 - 7);
        long long v43 = *((_OWORD *)v36 - 5);
        *((_OWORD *)v25 - 6) = *((_OWORD *)v36 - 6);
        *((_OWORD *)v25 - 5) = v43;
        *((_OWORD *)v25 - 8) = v41;
        *((_OWORD *)v25 - 7) = v42;
        long long v44 = *((_OWORD *)v36 - 4);
        long long v45 = *((_OWORD *)v36 - 3);
        long long v46 = *((_OWORD *)v36 - 1);
        *((_OWORD *)v25 - 2) = *((_OWORD *)v36 - 2);
        *((_OWORD *)v25 - 1) = v46;
        *((_OWORD *)v25 - 4) = v44;
        *((_OWORD *)v25 - 3) = v45;
        v25 -= 192;
        v36 -= 192;
      }
      while (v36 != v37);
      double v36 = (char *)*v18;
    }
    a1[3] = v25;
    a1[4] = v17;
    a1[5] = v26;
    if (v36) {
      operator delete(v36);
    }
  }
  else
  {
    long long v8 = *a2;
    long long v9 = a2[1];
    long long v10 = a2[3];
    v7[2] = a2[2];
    v7[3] = v10;
    *uint64_t v7 = v8;
    v7[1] = v9;
    long long v11 = a2[4];
    long long v12 = a2[5];
    long long v13 = a2[7];
    v7[6] = a2[6];
    v7[7] = v13;
    v7[4] = v11;
    v7[5] = v12;
    long long v14 = a2[8];
    long long v15 = a2[9];
    long long v16 = a2[11];
    v7[10] = a2[10];
    v7[11] = v16;
    v7[8] = v14;
    v7[9] = v15;
    uint64_t v17 = v7 + 12;
  }
  a1[4] = v17;
  double Current = CFAbsoluteTimeGetCurrent();
  long long v49 = (long long *)a1[3];
  long long v48 = (long long *)a1[4];
  if (v49 != v48)
  {
    while (vabdd_f64(Current, *(double *)v49) <= 300.0)
    {
      v49 += 12;
      if (v49 == v48) {
        return;
      }
    }
    if (v49 != v48)
    {
      long long v50 = v49 + 12;
      if (v49 + 12 != v48)
      {
        do
        {
          if (vabdd_f64(Current, *(double *)v50) <= 300.0)
          {
            long long v51 = *v50;
            long long v52 = v50[1];
            long long v53 = v50[3];
            v49[2] = v50[2];
            v49[3] = v53;
            *long long v49 = v51;
            v49[1] = v52;
            long long v54 = v50[4];
            long long v55 = v50[5];
            long long v56 = v50[7];
            v49[6] = v50[6];
            v49[7] = v56;
            v49[4] = v54;
            v49[5] = v55;
            long long v57 = v50[8];
            long long v58 = v50[9];
            long long v59 = v50[11];
            v49[10] = v50[10];
            v49[11] = v59;
            v49[8] = v57;
            v49[9] = v58;
            v49 += 12;
          }
          v50 += 12;
        }
        while (v50 != v48);
        long long v48 = (long long *)a1[4];
      }
    }
    if (v49 != v48) {
      a1[4] = v49;
    }
  }
}

void sub_100E6AC74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = operator new(0xC0uLL);
  long long v14 = v4 + 12;
  long long v5 = *(_OWORD *)(a2 + 144);
  void v4[8] = *(_OWORD *)(a2 + 128);
  v4[9] = v5;
  long long v6 = *(_OWORD *)(a2 + 176);
  void v4[10] = *(_OWORD *)(a2 + 160);
  v4[11] = v6;
  long long v7 = *(_OWORD *)(a2 + 80);
  void v4[4] = *(_OWORD *)(a2 + 64);
  void v4[5] = v7;
  long long v8 = *(_OWORD *)(a2 + 112);
  void v4[6] = *(_OWORD *)(a2 + 96);
  v4[7] = v8;
  long long v9 = *(_OWORD *)(a2 + 16);
  *uint64_t v4 = *(_OWORD *)a2;
  v4[1] = v9;
  long long v10 = *(_OWORD *)(a2 + 48);
  void v4[2] = *(_OWORD *)(a2 + 32);
  void v4[3] = v10;
  std::string __p = v4;
  long long v13 = v4 + 12;
  long long v11 = *(void **)(a1 + 72);
  if (v11) {
    sub_100FFC430(v11, (uint64_t *)a2);
  }
  sub_100E69F20(a1, (unint64_t **)&__p);
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_100E6AD10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E6AD2C(id a1)
{
  qword_102419158 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Odometer");
}

void sub_100E6AD5C(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100E6AD90()
{
}

void *sub_100E6ADA4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022FDA60;
  return result;
}

void sub_100E6ADDC(uint64_t a1, void *a2)
{
  *a2 = off_1022FDA60;
}

double sub_100E6AE04(uint64_t a1, double **a2)
{
  unint64_t v2 = *a2;
  double result = **a2;
  double v4 = 0.0;
  while (v2 != a2[1])
  {
    double v4 = v4 + v2[2];
    v2 += 3;
  }
  return result;
}

uint64_t sub_100E6AE30(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100E6AE70()
{
}

void sub_100E6AE80()
{
}

void *sub_100E6AE94()
{
  double result = operator new(0x10uLL);
  *double result = off_1022FDAE0;
  return result;
}

void sub_100E6AECC(uint64_t a1, void *a2)
{
  *a2 = off_1022FDAE0;
}

double sub_100E6AEF4(uint64_t a1, double **a2)
{
  unint64_t v2 = a2[1];
  double result = **a2;
  double v4 = 0.0;
  if (*a2 != v2)
  {
    long long v5 = *a2;
    do
    {
      double v4 = v4 + v5[2];
      v5 += 3;
    }
    while (v5 != v2);
  }
  return result;
}

uint64_t sub_100E6AF44(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100E6AF84()
{
}

void sub_100E6AF94()
{
}

void *sub_100E6AFA8()
{
  double result = operator new(0x10uLL);
  *double result = off_1022FDB60;
  return result;
}

void sub_100E6AFE0(uint64_t a1, void *a2)
{
  *a2 = off_1022FDB60;
}

BOOL sub_100E6B008(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) >= 0.0;
}

uint64_t sub_100E6B018(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100E6B058()
{
}

void sub_100E6B068()
{
}

void *sub_100E6B07C()
{
  double result = operator new(0x10uLL);
  *double result = off_1022FDBE0;
  return result;
}

void sub_100E6B0B4(uint64_t a1, void *a2)
{
  *a2 = off_1022FDBE0;
}

BOOL sub_100E6B0DC(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) > 2.22044605e-16;
}

uint64_t sub_100E6B0F4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100E6B134()
{
}

uint64_t sub_100E6B140(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100E6B1D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100E6B270()
{
  qword_102481D50 = (uint64_t)off_1022FDA60;
  qword_102481D68 = (uint64_t)&qword_102481D50;
  __cxa_atexit((void (*)(void *))sub_10049ED98, &qword_102481D50, (void *)&_mh_execute_header);
  qword_102481D70 = (uint64_t)off_1022FDAE0;
  qword_102481D88 = (uint64_t)&qword_102481D70;
  __cxa_atexit((void (*)(void *))sub_10049ED98, &qword_102481D70, (void *)&_mh_execute_header);
  qword_102481D90 = (uint64_t)off_1022FDB60;
  qword_102481DA8 = (uint64_t)&qword_102481D90;
  __cxa_atexit((void (*)(void *))sub_10049ED9C, &qword_102481D90, (void *)&_mh_execute_header);
  qword_102481DB0 = (uint64_t)off_1022FDBE0;
  qword_102481DC8 = (uint64_t)&qword_102481DB0;

  return __cxa_atexit((void (*)(void *))sub_10049ED9C, &qword_102481DB0, (void *)&_mh_execute_header);
}

uint64_t sub_100E6B390(uint64_t a1)
{
  *(void *)a1 = 850045863;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 850045863;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_DWORD *)(a1 + 308) = 0;
  *(_OWORD *)(a1 + 212) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(void *)(a1 + 312) = a1 + 312;
  *(void *)(a1 + 320) = a1 + 312;
  *(void *)(a1 + 328) = 0;
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022FDC70);
  }
  unint64_t v2 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLWorkoutDistanceCoreAnalyzer::CLWorkoutDistanceCoreAnalyzer()", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022FDC70);
    }
    double v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLWorkoutDistanceCoreAnalyzer::CLWorkoutDistanceCoreAnalyzer()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_100E6B5CC(a1);
  return a1;
}

void sub_100E6B5A4(_Unwind_Exception *a1)
{
  sub_1003B2350(v3);
  std::mutex::~mutex(v2);
  std::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

double sub_100E6B5CC(uint64_t a1)
{
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022FDC70);
  }
  unint64_t v2 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLWorkoutDistanceCoreAnalyzer: resetCoreAnalytics()", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022FDC70);
    }
    long long v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutDistanceCoreAnalyzer::resetCoreAnalytics()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 216) = 0u;
  double v4 = (_OWORD *)(a1 + 216);
  *((unsigned char *)v4 - 8) = 0;
  *((void *)v4 - 2) = 0xBFF0000000000000;
  v4[1] = 0u;
  void v4[2] = 0u;
  void v4[3] = 0u;
  void v4[4] = 0u;
  void v4[5] = 0u;
  return result;
}

void sub_100E6B784(uint64_t a1, long long *a2)
{
  double v4 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  long long v5 = *a2;
  long long v6 = a2[1];
  long long v7 = a2[2];
  *(_OWORD *)(a1 + 172) = *(long long *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 128) = v5;

  std::mutex::unlock(v4);
}

void sub_100E6B7E8(uint64_t a1)
{
  if (*(void *)(a1 + 328) >= 0xBuLL) {
    sub_1003B2350((void *)(a1 + 312));
  }
  sub_100E6B5CC(a1);
  *(unsigned char *)(a1 + 208) = 1;
}

void sub_100E6B82C(std::mutex *a1, int *a2)
{
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022FDC70);
  }
  double v4 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a2;
    int v6 = a2[2];
    *(_DWORD *)int buf = 67109376;
    int v13 = v5;
    __int16 v14 = 1024;
    int v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLWorkoutDistanceCoreAnalyzer::feedSession: MotionOverride: action,%d,type,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022FDC70);
    }
    long long v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutDistanceCoreAnalyzer::feedSession(const CLMotionStateMediator_Type::MotionOverride &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  std::mutex::lock(a1);
  if (*a2 == 1)
  {
    unint64_t sig = a1[3].__m_.__sig;
    if (sig > 0x18 || ((1 << sig) & 0x1028000) == 0)
    {
      unint64_t v10 = *((void *)a2 + 18);
      if (v10 <= 0x18 && ((1 << v10) & 0x1028000) != 0) {
        sub_100E6B7E8((uint64_t)a1);
      }
    }
  }
  else if (!*a2)
  {
    unint64_t v7 = a1[3].__m_.__sig;
    if (v7 <= 0x18 && ((1 << v7) & 0x1028000) != 0)
    {
      unint64_t v8 = *((void *)a2 + 18);
      if (v8 > 0x18 || ((1 << v8) & 0x1028000) == 0) {
        sub_100E6BAF0((uint64_t)a1);
      }
    }
  }
  a1[3].__m_.__unint64_t sig = *((void *)a2 + 18);
  std::mutex::unlock(a1);
}

void sub_100E6BAD4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100E6BAF0(uint64_t a1)
{
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022FDC70);
  }
  unint64_t v2 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLWorkoutDistanceCoreAnalyzer: processFinishedWorkout()", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022FDC70);
    }
    long long v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutDistanceCoreAnalyzer::processFinishedWorkout()", "%s\n", v25);
    if (v25 != (char *)buf) {
      free(v25);
    }
  }
  if (*(unsigned char *)(a1 + 208))
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022FDC70);
    }
    uint64_t v3 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      int v4 = *(_DWORD *)(a1 + 284);
      int v5 = *(_DWORD *)(a1 + 280);
      *(_DWORD *)int buf = 67109376;
      int v32 = v4;
      __int16 v33 = 1024;
      int v34 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "fCA_stepCounts_current: %d, fCA_stepCounts_begin: %d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022FDC70);
      }
      long long v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutDistanceCoreAnalyzer::processFinishedWorkout()", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
    double Current = CFAbsoluteTimeGetCurrent();
    int v7 = *(_DWORD *)(a1 + 288);
    int v8 = *(_DWORD *)(a1 + 292) + v7;
    double v9 = -1.0;
    double v10 = -1.0;
    if (v8 >= 1) {
      double v10 = (double)v7 / (double)v8;
    }
    double v28 = v10;
    double v30 = Current;
    int v11 = *(_DWORD *)(a1 + 212);
    double v12 = -1.0;
    if (v11 >= 1)
    {
      double v9 = *(double *)(a1 + 296) / (double)v11;
      double v12 = *(double *)(a1 + 304) / (double)v11;
    }
    double v27 = v12;
    double v29 = v9;
    double v14 = *(double *)(a1 + 216);
    double v13 = *(double *)(a1 + 224);
    double v16 = *(double *)(a1 + 232);
    double v15 = *(double *)(a1 + 240);
    double v18 = *(double *)(a1 + 248);
    double v17 = *(double *)(a1 + 256);
    double v20 = *(double *)(a1 + 264);
    double v19 = *(double *)(a1 + 272);
    int v21 = *(_DWORD *)(a1 + 284);
    int v22 = *(_DWORD *)(a1 + 280);
    unint64_t v23 = (double *)operator new(0x60uLL);
    v23[2] = *(double *)(a1 + 200);
    v23[3] = v30;
    v23[4] = v13 - v14;
    v23[5] = v15 - v16;
    v23[6] = v17 - v18;
    v23[7] = v19 - v20;
    v23[8] = v28;
    v23[9] = v29;
    unsigned char v23[10] = v27;
    *((_DWORD *)v23 + 22) = v21 - v22;
    uint64_t v24 = *(void *)(a1 + 312);
    *(void *)unint64_t v23 = v24;
    *((void *)v23 + 1) = a1 + 312;
    *(void *)(v24 + 8) = v23;
    *(void *)(a1 + 312) = v23;
    ++*(void *)(a1 + 328);
    sub_100E6B5CC(a1);
  }
}

void sub_100E6BEFC(std::mutex *a1, uint64_t a2)
{
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022FDC70);
  }
  int v4 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 134217984;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLWorkoutDistanceCoreAnalyzer::handleWorkoutSessionOverride(), time: %f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022FDC70);
    }
    CFAbsoluteTimeGetCurrent();
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutDistanceCoreAnalyzer::handleWorkoutSessionOverride(const CLWorkoutUpdate &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  std::mutex::lock(a1);
  unint64_t v5 = (unint64_t)+[CMWorkout CMWorkoutTypeFromCLMotionActivityType:*(unsigned int *)(a2 + 8)];
  unint64_t v6 = v5;
  unint64_t sig = a1[3].__m_.__sig;
  if (sig > 0x18 || ((1 << sig) & 0x1028000) == 0) {
    goto LABEL_12;
  }
  if (v5 > 0x18 || ((1 << v5) & 0x1028000) == 0)
  {
    sub_100E6BAF0((uint64_t)a1);
    goto LABEL_15;
  }
  if (((1 << sig) & 0x1028000) == 0)
  {
LABEL_12:
    if (v5 <= 0x18 && ((1 << v5) & 0x1028000) != 0) {
      sub_100E6B7E8((uint64_t)a1);
    }
  }
LABEL_15:
  a1[3].__m_.__unint64_t sig = v6;
  std::mutex::unlock(a1);
}

void sub_100E6C178(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

NSData *sub_100E6C194(uint64_t a1)
{
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022FDC70);
  }
  unint64_t v2 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLWorkoutDistanceCoreAnalyzer: getSerializedCoreAnalytics()", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022FDC70);
    }
    LOWORD(v24) = 0;
    double v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "NSData *CLWorkoutDistanceCoreAnalyzer::getSerializedCoreAnalytics()", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  std::mutex::lock((std::mutex *)a1);
  if (!*(void *)(a1 + 328)) {
    goto LABEL_30;
  }
  id v3 = +[NSMutableArray array];
  int v4 = (void *)(a1 + 312);
  unint64_t v5 = *(void **)(a1 + 320);
  if (v5 != (void *)(a1 + 312))
  {
    do
    {
      unint64_t v6 = [[CLWorkoutDistanceCoreAnalytics alloc] initWithWorkoutDistanceMeasures:v5 + 2];
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022FDC70);
      }
      int v7 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
      {
        id v8 = [(CLWorkoutDistanceCoreAnalytics *)v6 description];
        *(_DWORD *)int buf = 138412290;
        id v27 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Workout distance core analytics: %@", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_1022FDC70);
        }
        int v24 = 138412290;
        id v25 = [(CLWorkoutDistanceCoreAnalytics *)v6 description];
        double v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "NSData *CLWorkoutDistanceCoreAnalyzer::getSerializedCoreAnalytics()", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      [v3 addObject:v6];
      unint64_t v5 = (void *)v5[1];
    }
    while (v5 != v4);
  }
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022FDC70);
  }
  double v10 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v11 = [v3 count];
    *(_DWORD *)int buf = 67109120;
    LODWORD(v27) = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLWorkoutDistanceCoreAnalyzer: Attempt to serialize core analytics array of %d entries.", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022FDC70);
    }
    int v24 = 67109120;
    LODWORD(v25) = [v3 count];
    double v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "NSData *CLWorkoutDistanceCoreAnalyzer::getSerializedCoreAnalytics()", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  unint64_t v23 = 0;
  double v12 = +[NSKeyedArchiver archivedDataWithRootObject:v3 requiringSecureCoding:1 error:&v23];
  if (v23)
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022FDC70);
    }
    double v13 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 138412290;
      id v27 = v23;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "CLWorkoutDistanceCoreAnalyzer: Error serializing the message: %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022FDC70);
      }
      int v24 = 138412290;
      id v25 = v23;
      double v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "NSData *CLWorkoutDistanceCoreAnalyzer::getSerializedCoreAnalytics()", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
LABEL_30:
    double v14 = 0;
    goto LABEL_37;
  }
  double v14 = v12;
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022FDC70);
  }
  double v15 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v16 = [(NSData *)v14 length];
    *(_DWORD *)int buf = 67109120;
    LODWORD(v27) = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLWorkoutDistanceCoreAnalyzer: Serialization complete, message size: %d bytes.", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022FDC70);
    }
    unsigned int v21 = [(NSData *)v14 length];
    int v24 = 67109120;
    LODWORD(v25) = v21;
    int v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "NSData *CLWorkoutDistanceCoreAnalyzer::getSerializedCoreAnalytics()", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  sub_1003B2350(v4);
LABEL_37:
  std::mutex::unlock((std::mutex *)a1);
  return v14;
}

void sub_100E6C938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12)
{
}

uint64_t sub_100E6C984(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022FDC70);
  }
  unint64_t v5 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLWorkoutDistanceCoreAnalyzer: getDeserializedCoreAnalytics()", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022FDC70);
    }
    LOWORD(v50) = 0;
    long long v39 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLWorkoutDistanceCoreAnalyzer::getDeserializedCoreAnalytics(std::list<WorkoutDistanceMeasures> &, NSData * _Nullable) const", "%s\n", v39);
    if (v39 != (char *)buf) {
      free(v39);
    }
  }
  sub_1003B2350(a2);
  if (a3)
  {
    uint64_t v50 = 0;
    uint64_t v6 = objc_opt_class();
    uint64_t v7 = objc_opt_class();
    uint64_t v8 = objc_opt_class();
    id v9 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, v7, v8, objc_opt_class(), 0), a3, &v50);
    if (v50)
    {
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022FDC70);
      }
      double v10 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CLWorkoutDistanceCoreAnalyzer: Error unserializing the message.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_1022FDC70);
        }
        LOWORD(v52) = 0;
        LODWORD(v44) = 2;
        long long v40 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CMError CLWorkoutDistanceCoreAnalyzer::getDeserializedCoreAnalytics(std::list<WorkoutDistanceMeasures> &, NSData * _Nullable) const", "%s\n", v40);
        if (v40 != (char *)buf) {
          free(v40);
        }
      }
      NSLog(@"Error: %@", v50, v44);
      return 103;
    }
    else
    {
      double v13 = v9;
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022FDC70);
      }
      double v14 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v15 = [v13 count];
        *(_DWORD *)int buf = 67109120;
        unsigned int v55 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLWorkoutDistanceCoreAnalyzer: Message deserialized to %d samples.", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_1022FDC70);
        }
        unsigned int v42 = [v13 count];
        int v52 = 67109120;
        unsigned int v53 = v42;
        long long v43 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLWorkoutDistanceCoreAnalyzer::getDeserializedCoreAnalytics(std::list<WorkoutDistanceMeasures> &, NSData * _Nullable) const", "%s\n", v43);
        if (v43 != (char *)buf) {
          free(v43);
        }
      }
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      id v16 = [v13 countByEnumeratingWithState:&v46 objects:v51 count:16];
      if (v16)
      {
        uint64_t v17 = *(void *)v47;
        do
        {
          for (uint64_t i = 0; i != v16; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v47 != v17) {
              objc_enumerationMutation(v13);
            }
            double v19 = *(void **)(*((void *)&v46 + 1) + 8 * i);
            [v19 beginTime];
            uint64_t v45 = v20;
            [v19 endTime];
            uint64_t v22 = v21;
            [v19 totalDistanceStepCount];
            uint64_t v24 = v23;
            [v19 totalDistanceStepCountMobility];
            uint64_t v26 = v25;
            [v19 totalDistanceOdometer];
            uint64_t v28 = v27;
            [v19 totalDistanceFused];
            uint64_t v30 = v29;
            [v19 percentageRemoteGPSSource];
            uint64_t v32 = v31;
            [v19 meanPaceStepCount];
            uint64_t v34 = v33;
            [v19 meanPaceFinalFused];
            uint64_t v36 = v35;
            LODWORD(v19) = [v19 totalStepCount];
            uint64_t v37 = operator new(0x60uLL);
            v37[2] = v45;
            v37[3] = v22;
            void v37[4] = v24;
            v37[5] = v26;
            v37[6] = v28;
            v37[7] = v30;
            v37[8] = v32;
            v37[9] = v34;
            unsigned char v37[10] = v36;
            *((_DWORD *)v37 + 22) = v19;
            uint64_t v38 = *a2;
            *uint64_t v37 = *a2;
            v37[1] = a2;
            *(void *)(v38 + 8) = v37;
            *a2 = (uint64_t)v37;
            ++a2[2];
          }
          id v16 = [v13 countByEnumeratingWithState:&v46 objects:v51 count:16];
        }
        while (v16);
      }
      return 100;
    }
  }
  else
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022FDC70);
    }
    double v12 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLWorkoutDistanceCoreAnalyzer: Empty message received for deserialization.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022FDC70);
      }
      LOWORD(v50) = 0;
      long long v41 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLWorkoutDistanceCoreAnalyzer::getDeserializedCoreAnalytics(std::list<WorkoutDistanceMeasures> &, NSData * _Nullable) const", "%s\n", v41);
      if (v41 != (char *)buf) {
        free(v41);
      }
    }
    return 112;
  }
}

void sub_100E6D0DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022FDC70);
  }
  uint64_t v6 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Attempt to send core anaytics from CLWorkoutDistanceCoreAnalyzer", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022FDC70);
    }
    LOWORD(v115) = 0;
    long long v74 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutDistanceCoreAnalyzer::submitCoreAnalytics(WorkoutDistanceMeasures, WorkoutDistanceMeasures)", "%s\n", v74);
    if (v74 != buf) {
      free(v74);
    }
  }
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022FDC70);
  }
  uint64_t v7 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
  {
    double v8 = *(double *)a2;
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v10 = *(void *)(a2 + 16);
    uint64_t v11 = *(void *)(a2 + 24);
    double v12 = *(double *)(a2 + 32);
    double v13 = *(double *)(a2 + 40);
    double v14 = *(double *)(a2 + 48);
    uint64_t v15 = *(void *)(a2 + 56);
    uint64_t v16 = *(void *)(a2 + 64);
    int v17 = *(_DWORD *)(a2 + 72);
    *(_DWORD *)int buf = 134220288;
    *(double *)&uint8_t buf[4] = v8;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&unsigned char buf[14] = v9;
    *(_WORD *)&buf[22] = 2048;
    *(void *)&unsigned char buf[24] = v10;
    *(_WORD *)&buf[32] = 2048;
    *(void *)&unsigned char buf[34] = v11;
    *(_WORD *)&buf[42] = 2048;
    double v139 = v12;
    __int16 v140 = 2048;
    double v141 = v13;
    __int16 v142 = 2048;
    double v143 = v14;
    __int16 v144 = 2048;
    *(void *)__n128 v145 = v15;
    *(_WORD *)&v145[8] = 2048;
    uint64_t v146 = v16;
    *(_WORD *)__n128 v147 = 1024;
    *(_DWORD *)&v147[2] = v17;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Phone measures: %f, %f, %f, %f, %f, %f, %f, %f, %f, %d", buf, 0x62u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022FDC70);
    }
    double v75 = *(double *)a2;
    double v76 = *(double *)(a2 + 8);
    double v77 = *(double *)(a2 + 16);
    double v78 = *(double *)(a2 + 24);
    double v79 = *(double *)(a2 + 32);
    double v80 = *(double *)(a2 + 40);
    double v81 = *(double *)(a2 + 48);
    uint64_t v82 = *(void *)(a2 + 56);
    uint64_t v83 = *(void *)(a2 + 64);
    int v84 = *(_DWORD *)(a2 + 72);
    int v115 = 134220288;
    double v116 = v75;
    __int16 v117 = 2048;
    double v118 = v76;
    __int16 v119 = 2048;
    double v120 = v77;
    __int16 v121 = 2048;
    double v122 = v78;
    __int16 v123 = 2048;
    double v124 = v79;
    __int16 v125 = 2048;
    double v126 = v80;
    __int16 v127 = 2048;
    double v128 = v81;
    __int16 v129 = 2048;
    *(void *)int v130 = v82;
    *(_WORD *)&v130[8] = 2048;
    uint64_t v131 = v83;
    *(_WORD *)long long v132 = 1024;
    *(_DWORD *)&v132[2] = v84;
    uint64_t v85 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutDistanceCoreAnalyzer::submitCoreAnalytics(WorkoutDistanceMeasures, WorkoutDistanceMeasures)", "%s\n", v85);
    if (v85 != buf) {
      free(v85);
    }
  }
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022FDC70);
  }
  double v18 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
  {
    double v19 = *(double *)a3;
    uint64_t v20 = *(void *)(a3 + 8);
    uint64_t v21 = *(void *)(a3 + 16);
    uint64_t v22 = *(void *)(a3 + 24);
    double v23 = *(double *)(a3 + 32);
    double v24 = *(double *)(a3 + 40);
    double v25 = *(double *)(a3 + 48);
    uint64_t v26 = *(void *)(a3 + 56);
    uint64_t v27 = *(void *)(a3 + 64);
    int v28 = *(_DWORD *)(a3 + 72);
    *(_DWORD *)int buf = 134220288;
    *(double *)&uint8_t buf[4] = v19;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&unsigned char buf[14] = v20;
    *(_WORD *)&buf[22] = 2048;
    *(void *)&unsigned char buf[24] = v21;
    *(_WORD *)&buf[32] = 2048;
    *(void *)&unsigned char buf[34] = v22;
    *(_WORD *)&buf[42] = 2048;
    double v139 = v23;
    __int16 v140 = 2048;
    double v141 = v24;
    __int16 v142 = 2048;
    double v143 = v25;
    __int16 v144 = 2048;
    *(void *)__n128 v145 = v26;
    *(_WORD *)&v145[8] = 2048;
    uint64_t v146 = v27;
    *(_WORD *)__n128 v147 = 1024;
    *(_DWORD *)&v147[2] = v28;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Watch measures: %f, %f, %f, %f, %f, %f, %f, %f, %f, %d", buf, 0x62u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022FDC70);
    }
    double v86 = *(double *)a3;
    double v87 = *(double *)(a3 + 8);
    double v88 = *(double *)(a3 + 16);
    double v89 = *(double *)(a3 + 24);
    double v90 = *(double *)(a3 + 32);
    double v91 = *(double *)(a3 + 40);
    double v92 = *(double *)(a3 + 48);
    uint64_t v93 = *(void *)(a3 + 56);
    uint64_t v94 = *(void *)(a3 + 64);
    int v95 = *(_DWORD *)(a3 + 72);
    int v115 = 134220288;
    double v116 = v86;
    __int16 v117 = 2048;
    double v118 = v87;
    __int16 v119 = 2048;
    double v120 = v88;
    __int16 v121 = 2048;
    double v122 = v89;
    __int16 v123 = 2048;
    double v124 = v90;
    __int16 v125 = 2048;
    double v126 = v91;
    __int16 v127 = 2048;
    double v128 = v92;
    __int16 v129 = 2048;
    *(void *)int v130 = v93;
    *(_WORD *)&v130[8] = 2048;
    uint64_t v131 = v94;
    *(_WORD *)long long v132 = 1024;
    *(_DWORD *)&v132[2] = v95;
    int64_t v96 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutDistanceCoreAnalyzer::submitCoreAnalytics(WorkoutDistanceMeasures, WorkoutDistanceMeasures)", "%s\n", v96);
    if (v96 != buf) {
      free(v96);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102481DE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102481DE8))
  {
    *(_OWORD *)int buf = xmmword_101D92C3C;
    *(void *)&uint8_t buf[16] = 0x4280000042440000;
    sub_1003B17B4(qword_102481DD0, buf, 6uLL);
    __cxa_atexit((void (*)(void *))sub_1003B1838, qword_102481DD0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102481DE8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102481E08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102481E08))
  {
    *(_OWORD *)int buf = xmmword_101D92C54;
    *(void *)&uint8_t buf[16] = 0x46C35000469C4000;
    sub_1003B17B4(qword_102481DF0, buf, 6uLL);
    __cxa_atexit((void (*)(void *))sub_1003B1838, qword_102481DF0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102481E08);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102481E28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102481E28))
  {
    *(_OWORD *)int buf = xmmword_101D92C6C;
    *(_OWORD *)&uint8_t buf[16] = unk_101D92C7C;
    *(_OWORD *)&buf[28] = unk_101D92C88;
    sub_1003B17B4(qword_102481E10, buf, 0xBuLL);
    __cxa_atexit((void (*)(void *))sub_1003B1838, qword_102481E10, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102481E28);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_102481E48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(qword_102481E48))
  {
    *(_DWORD *)&uint8_t buf[16] = 1108056474;
    *(_OWORD *)int buf = xmmword_101D92C98;
    sub_1003B17B4(qword_102481E30, buf, 5uLL);
    __cxa_atexit((void (*)(void *))sub_1003B1838, qword_102481E30, (void *)&_mh_execute_header);
    __cxa_guard_release(qword_102481E48);
  }
  std::mutex::lock((std::mutex *)(a1 + 64));
  int v29 = *(_DWORD *)(a1 + 132);
  float v30 = *(float *)(a1 + 136);
  float v99 = *(float *)(a1 + 140);
  float v31 = *(float *)(a1 + 148);
  std::mutex::unlock((std::mutex *)(a1 + 64));
  double v32 = *(double *)(a2 + 40);
  double v33 = -1.0;
  double v34 = -1.0;
  if (v32 > 0.001) {
    double v34 = *(double *)(a3 + 32) / v32;
  }
  double v35 = *(double *)(a2 + 64);
  if (v35 > 0.001) {
    double v33 = *(double *)(a2 + 56) / v35;
  }
  double v36 = -1.0;
  if (v32 > 0.001) {
    double v36 = *(double *)(a2 + 16) / v32;
  }
  int v37 = *(_DWORD *)(a3 + 72);
  if (v37 < 1) {
    float v38 = -1.0;
  }
  else {
    float v38 = (float)*(int *)(a2 + 72) / (float)v37;
  }
  float v100 = v38;
  double v39 = -1.0;
  if (v35 > 0.001) {
    double v39 = *(double *)(a3 + 56) / v35;
  }
  double v101 = v34;
  float v102 = -1.0;
  if (v32 > 0.001)
  {
    float v40 = *(double *)(a3 + 16) / v32;
    float v102 = v40;
  }
  double v41 = *(double *)a2;
  double v42 = *(double *)(a2 + 8);
  uint64_t v112 = 0;
  v113 = 0;
  uint64_t v114 = 0;
  sub_10010F834(&v112, (const void *)qword_102481DD0[0], unk_102481DD8, (unk_102481DD8 - qword_102481DD0[0]) >> 2);
  uint64_t v43 = (char *)v113 - (char *)v112;
  if (v113 == v112)
  {
    LODWORD(v44) = 0;
    int v46 = 0;
    if (!v113) {
      goto LABEL_41;
    }
  }
  else
  {
    uint64_t v44 = 0;
    uint64_t v45 = v43 >> 2;
    if ((unint64_t)(v43 >> 2) <= 1) {
      uint64_t v45 = 1;
    }
    while (v112[v44] < v31)
    {
      if (v45 == ++v44)
      {
        LODWORD(v44) = v45;
        break;
      }
    }
  }
  v113 = v112;
  operator delete(v112);
  int v46 = v44;
LABEL_41:
  double v47 = *(double *)(a2 + 40);
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  uint64_t v109 = 0;
  sub_10010F834(&v109, (const void *)qword_102481DF0[0], unk_102481DF8, (unk_102481DF8 - qword_102481DF0[0]) >> 2);
  double v48 = v42 - v41;
  uint64_t v49 = (char *)v110 - (char *)v109;
  if (v110 == v109)
  {
    LODWORD(v50) = 0;
    int v53 = 0;
    if (!v110) {
      goto LABEL_49;
    }
  }
  else
  {
    uint64_t v50 = 0;
    uint64_t v52 = v49 >> 2;
    if ((unint64_t)(v49 >> 2) <= 1) {
      uint64_t v52 = 1;
    }
    while (1)
    {
      float v51 = v47;
      if (v109[v50] >= v51) {
        break;
      }
      if (v52 == ++v50)
      {
        LODWORD(v50) = v52;
        break;
      }
    }
  }
  uint64_t v110 = v109;
  operator delete(v109);
  int v53 = v50;
LABEL_49:
  double v54 = *(double *)(a3 + 48);
  float v55 = -1.0;
  if (v48 > 0.001) {
    float v55 = *(double *)(a2 + 40) / v48;
  }
  long long v106 = 0;
  long long v107 = 0;
  uint64_t v108 = 0;
  sub_10010F834(&v106, (const void *)qword_102481E10[0], unk_102481E18, (unk_102481E18 - qword_102481E10[0]) >> 2);
  uint64_t v56 = (char *)v107 - (char *)v106;
  if (v107 == v106)
  {
    LODWORD(v57) = 0;
    int v59 = 0;
    if (!v107) {
      goto LABEL_59;
    }
  }
  else
  {
    uint64_t v57 = 0;
    uint64_t v58 = v56 >> 2;
    if ((unint64_t)(v56 >> 2) <= 1) {
      uint64_t v58 = 1;
    }
    while (v106[v57] < v55)
    {
      if (v58 == ++v57)
      {
        LODWORD(v57) = v58;
        break;
      }
    }
  }
  long long v107 = v106;
  operator delete(v106);
  int v59 = v57;
LABEL_59:
  float v60 = 0.0;
  if (v30 != 0.0) {
    float v60 = v99 / (float)(v30 * v30);
  }
  int v103 = 0;
  __int16 v104 = 0;
  uint64_t v105 = 0;
  sub_10010F834(&v103, (const void *)qword_102481E30[0], unk_102481E38, (unk_102481E38 - qword_102481E30[0]) >> 2);
  uint64_t v61 = (char *)v104 - (char *)v103;
  if (v104 == v103)
  {
    LODWORD(v62) = 0;
    int v65 = 0;
    double v64 = v33;
    if (!v104) {
      goto LABEL_70;
    }
  }
  else
  {
    uint64_t v62 = 0;
    uint64_t v63 = v61 >> 2;
    if ((unint64_t)(v61 >> 2) <= 1) {
      uint64_t v63 = 1;
    }
    double v64 = v33;
    while (v103[v62] < v60)
    {
      if (v63 == ++v62)
      {
        LODWORD(v62) = v63;
        break;
      }
    }
  }
  __int16 v104 = v103;
  operator delete(v103);
  int v65 = v62;
LABEL_70:
  float v66 = v30 / 0.1;
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022FDC70);
  }
  float v67 = v101;
  float v68 = v64;
  float v69 = v36;
  long long v70 = qword_102419038;
  float v71 = v39;
  unsigned int v72 = vcvtps_s32_f32(v66);
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 134221312;
    *(double *)&uint8_t buf[4] = v67;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&unsigned char buf[14] = v68;
    *(_WORD *)&buf[22] = 2048;
    *(double *)&unsigned char buf[24] = v69;
    *(_WORD *)&buf[32] = 2048;
    *(double *)&unsigned char buf[34] = v100;
    *(_WORD *)&buf[42] = 2048;
    double v139 = v71;
    __int16 v140 = 2048;
    double v141 = v102;
    __int16 v142 = 2048;
    double v143 = v102;
    __int16 v144 = 1024;
    *(_DWORD *)__n128 v145 = v46;
    *(_WORD *)&v145[4] = 1024;
    *(_DWORD *)&v145[6] = v53;
    LOWORD(v146) = 1024;
    *(_DWORD *)((char *)&v146 + 2) = v29;
    HIWORD(v146) = 1024;
    *(_DWORD *)__n128 v147 = v54 >= 0.5;
    *(_WORD *)&v147[4] = 1024;
    int v148 = v59;
    __int16 v149 = 1024;
    int v150 = v65;
    __int16 v151 = 1024;
    unsigned int v152 = v72;
    _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_INFO, "CLWorkoutDistanceCoreAnalyzer: Core analytics: %f,%f,%f,%f,%f,%f,%f,%d,%d,%d,%d,%d,%d,%d", buf, 0x72u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022FDC70);
    }
    int v115 = 134221312;
    double v116 = v67;
    __int16 v117 = 2048;
    double v118 = v68;
    __int16 v119 = 2048;
    double v120 = v69;
    __int16 v121 = 2048;
    double v122 = v100;
    __int16 v123 = 2048;
    double v124 = v71;
    __int16 v125 = 2048;
    double v126 = v102;
    __int16 v127 = 2048;
    double v128 = v102;
    __int16 v129 = 1024;
    *(_DWORD *)int v130 = v46;
    *(_WORD *)&v130[4] = 1024;
    *(_DWORD *)&v130[6] = v53;
    LOWORD(v131) = 1024;
    *(_DWORD *)((char *)&v131 + 2) = v29;
    HIWORD(v131) = 1024;
    *(_DWORD *)long long v132 = v54 >= 0.5;
    *(_WORD *)&v132[4] = 1024;
    int v133 = v59;
    __int16 v134 = 1024;
    int v135 = v65;
    __int16 v136 = 1024;
    unsigned int v137 = v72;
    int64_t v97 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutDistanceCoreAnalyzer::submitCoreAnalytics(WorkoutDistanceMeasures, WorkoutDistanceMeasures)", "%s\n", v97);
    if (v97 != buf) {
      free(v97);
    }
  }
  if (objc_opt_class()
    && (objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed") & 1) != 0)
  {
    if (*(double *)(a2 + 40) > 0.01) {
      AnalyticsSendEventLazy();
    }
  }
  else
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022FDC70);
    }
    long long v73 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_INFO, "CLWorkoutDistanceCoreAnalyzer: Not authorized to submit analytics without IHA", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022FDC70);
      }
      LOWORD(v115) = 0;
      int64_t v98 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutDistanceCoreAnalyzer::submitCoreAnalytics(WorkoutDistanceMeasures, WorkoutDistanceMeasures)", "%s\n", v98);
      if (v98 != buf) {
        free(v98);
      }
    }
  }
}

void sub_100E6E098(_Unwind_Exception *a1)
{
}

NSDictionary *sub_100E6E0E8(uint64_t a1, double a2)
{
  v10[0] = @"normGPSDistance";
  LODWORD(a2) = *(_DWORD *)(a1 + 32);
  v11[0] = +[NSNumber numberWithFloat:a2];
  v10[1] = @"normPhonePace";
  LODWORD(v3) = *(_DWORD *)(a1 + 36);
  v11[1] = +[NSNumber numberWithFloat:v3];
  void v10[2] = @"normPhonePedCalDistance";
  LODWORD(v4) = *(_DWORD *)(a1 + 40);
  v11[2] = +[NSNumber numberWithFloat:v4];
  v10[3] = @"normStepCount";
  LODWORD(v5) = *(_DWORD *)(a1 + 44);
  unsigned __int8 v11[3] = +[NSNumber numberWithFloat:v5];
  _DWORD v10[4] = @"normWatchPace";
  LODWORD(v6) = *(_DWORD *)(a1 + 48);
  void v11[4] = +[NSNumber numberWithFloat:v6];
  v10[5] = @"normWatchPedCalDistance";
  LODWORD(v7) = *(_DWORD *)(a1 + 52);
  v11[5] = +[NSNumber numberWithFloat:v7];
  v10[6] = @"normWatchPedMobDistance";
  LODWORD(v8) = *(_DWORD *)(a1 + 56);
  v11[6] = +[NSNumber numberWithFloat:v8];
  v10[7] = @"ageGroup";
  v11[7] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 60)];
  v10[8] = @"distanceBin";
  v11[8] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 64)];
  v10[9] = @"gender";
  v11[9] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 68)];
  v10[10] = @"phoneGPS";
  v11[10] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 84)];
  v10[11] = @"speedBin";
  v11[11] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
  v10[12] = @"userBMIBin";
  v11[12] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 76)];
  v10[13] = @"userHeightBin";
  v11[13] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80)];
  return +[NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:14];
}

void *sub_100E6E2E8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022FDC70);
  }
  double v6 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Attempt to sync workout distance metric between watch and phone.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022FDC70);
    }
    double v41 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::list<std::pair<WorkoutDistanceMeasures, WorkoutDistanceMeasures>> CLWorkoutDistanceCoreAnalyzer::prepareCoreAnalyticsSubmissionQueue(std::list<WorkoutDistanceMeasures> &)", "%s\n", v41);
    if (v41 != buf) {
      free(v41);
    }
  }
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022FDC70);
  }
  double v7 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = a1[41];
    uint64_t v9 = *(void *)(a2 + 16);
    *(_DWORD *)int buf = 134218240;
    *(void *)&uint8_t buf[4] = v8;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&unsigned char buf[14] = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Workout distance: Phone buffer size: %lu, Watch buffer size: %lu,", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022FDC70);
    }
    double v42 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::list<std::pair<WorkoutDistanceMeasures, WorkoutDistanceMeasures>> CLWorkoutDistanceCoreAnalyzer::prepareCoreAnalyticsSubmissionQueue(std::list<WorkoutDistanceMeasures> &)", "%s\n", v42);
    if (v42 != buf) {
      free(v42);
    }
  }
  *a3 = (uint64_t)a3;
  a3[1] = (uint64_t)a3;
  a3[2] = 0;
  while (a1[41] && *(void *)(a2 + 16))
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022FDC70);
    }
    uint64_t v10 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = a1[40];
      uint64_t v12 = *(void *)(a2 + 8);
      uint64_t v14 = *(void *)(v11 + 16);
      uint64_t v13 = *(void *)(v11 + 24);
      uint64_t v16 = *(void *)(v12 + 16);
      uint64_t v15 = *(void *)(v12 + 24);
      *(_DWORD *)int buf = 134218752;
      *(void *)&uint8_t buf[4] = v14;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&unsigned char buf[14] = v16;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&unsigned char buf[24] = v13;
      LOWORD(v44) = 2048;
      *(void *)((char *)&v44 + 2) = v15;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Attempt to sync phone begin time (%f) with watch begin time (%f) and phone end time (%f) with watch end time (%f)", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022FDC70);
      }
      float v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::list<std::pair<WorkoutDistanceMeasures, WorkoutDistanceMeasures>> CLWorkoutDistanceCoreAnalyzer::prepareCoreAnalyticsSubmissionQueue(std::list<WorkoutDistanceMeasures> &)", "%s\n", v38);
      if (v38 != buf) {
        free(v38);
      }
    }
    int v17 = (double *)a1[40];
    double v18 = v17[2];
    double v19 = *(double **)(a2 + 8);
    double v20 = v19[2];
    if (vabdd_f64(v18, v20) >= 15.0 || vabdd_f64(v17[3], v19[3]) >= 15.0)
    {
      if (v18 >= v20)
      {
        uint64_t v37 = *(void *)v19;
        *(double *)(v37 + 8) = v19[1];
        **((void **)v19 + 1) = v37;
        --*(void *)(a2 + 16);
        int v17 = v19;
      }
      else
      {
        double v36 = *v17;
        *(double *)(*(void *)&v36 + 8) = v17[1];
        **((double **)v17 + 1) = v36;
        --a1[41];
      }
    }
    else
    {
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022FDC70);
      }
      uint64_t v21 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
      {
        double v22 = *(double *)(*(void *)(a2 + 8) + 24) - *(double *)(*(void *)(a2 + 8) + 16);
        *(_DWORD *)int buf = 134217984;
        *(double *)&uint8_t buf[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Workout synced. Total duration %f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_1022FDC70);
        }
        double v39 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "std::list<std::pair<WorkoutDistanceMeasures, WorkoutDistanceMeasures>> CLWorkoutDistanceCoreAnalyzer::prepareCoreAnalyticsSubmissionQueue(std::list<WorkoutDistanceMeasures> &)", "%s\n", v39);
        if (v39 != buf) {
          free(v39);
        }
      }
      double v23 = *(_OWORD **)(a2 + 8);
      double v24 = (_OWORD *)a1[40];
      long long v25 = v23[3];
      *(_OWORD *)&uint8_t buf[16] = v23[2];
      long long v44 = v25;
      long long v26 = v23[5];
      long long v45 = v23[4];
      long long v46 = v26;
      *(_OWORD *)int buf = v23[1];
      long long v48 = v24[2];
      long long v49 = v24[3];
      long long v50 = v24[4];
      long long v51 = v24[5];
      long long v47 = v24[1];
      uint64_t v27 = operator new(0xB0uLL);
      long long v28 = v49;
      v27[7] = v48;
      v27[8] = v28;
      long long v29 = v51;
      v27[9] = v50;
      unsigned char v27[10] = v29;
      long long v30 = v45;
      v27[3] = v44;
      v27[4] = v30;
      long long v31 = v47;
      v27[5] = v46;
      v27[6] = v31;
      long long v32 = *(_OWORD *)&buf[16];
      v27[1] = *(_OWORD *)buf;
      v27[2] = v32;
      uint64_t v33 = *a3;
      *(void *)uint64_t v27 = *a3;
      *((void *)v27 + 1) = a3;
      *(void *)(v33 + 8) = v27;
      *a3 = (uint64_t)v27;
      ++a3[2];
      uint64_t v34 = *(void *)v24;
      *(void *)(v34 + 8) = *((void *)v24 + 1);
      **((void **)v24 + 1) = v34;
      --a1[41];
      operator delete(v24);
      int v17 = *(double **)(a2 + 8);
      double v35 = *v17;
      *(double *)(*(void *)&v35 + 8) = v17[1];
      **((double **)v17 + 1) = v35;
      --*(void *)(a2 + 16);
    }
    operator delete(v17);
  }
  return sub_1003B2350(a1 + 39);
}

void sub_100E6EA8C(_Unwind_Exception *a1)
{
  sub_1003B2350(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100E6EAB4(std::mutex *a1, uint64_t a2)
{
  std::mutex::lock(a1);
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_1022FDC70);
  }
  double v4 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 134217984;
    *(void *)double v24 = CFAbsoluteTimeGetCurrent();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLWorkoutDistanceCoreAnalyzer::onReceiveCoreAnalyticsFromWatch, time: %f", buf, 0xCu);
  }
  uint64_t v5 = sub_10013D1A0(115, 2);
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022FDC70);
    }
    LODWORD(v21) = 134217984;
    *(void *)((char *)&v21 + 4) = CFAbsoluteTimeGetCurrent();
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    uint64_t v5 = sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLWorkoutDistanceCoreAnalyzer::onReceiveCoreAnalyticsFromWatch(NSData * _Nullable)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  if (a1[3].__m_.__opaque[8]) {
    sub_100E6BAF0((uint64_t)a1);
  }
  *(void *)&long long v21 = &v21;
  *((void *)&v21 + 1) = &v21;
  uint64_t v22 = 0;
  uint64_t v6 = sub_100E6C984(v5, (uint64_t *)&v21, a2);
  if (v6 == 100)
  {
    if (v22)
    {
      sub_100E6E2E8(a1, (uint64_t)&v21, (uint64_t *)buf);
      for (uint64_t i = *(void *)&v24[4]; (uint8_t *)i != buf; uint64_t i = *(void *)(i + 8))
      {
        long long v8 = *(_OWORD *)(i + 64);
        v19[2] = *(_OWORD *)(i + 48);
        v19[3] = v8;
        long long v9 = *(_OWORD *)(i + 96);
        v19[4] = *(_OWORD *)(i + 80);
        long long v10 = *(_OWORD *)(i + 32);
        v19[0] = *(_OWORD *)(i + 16);
        v19[1] = v10;
        long long v11 = *(_OWORD *)(i + 112);
        long long v12 = *(_OWORD *)(i + 144);
        long long v13 = *(_OWORD *)(i + 160);
        v18[2] = *(_OWORD *)(i + 128);
        v18[3] = v12;
        v18[4] = v13;
        v18[0] = v9;
        v18[1] = v11;
        sub_100E6D0DC((uint64_t)a1, (uint64_t)v19, (uint64_t)v18);
      }
      sub_1003B2350(buf);
    }
  }
  else
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_1022FDC70);
    }
    uint64_t v14 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Something went wrong with the workout distance core analytics received from the watch. Abort submission.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1022FDC70);
      }
      __int16 v20 = 0;
      int v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CMError CLWorkoutDistanceCoreAnalyzer::onReceiveCoreAnalyticsFromWatch(NSData * _Nullable)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
  sub_1003B2350(&v21);
  std::mutex::unlock(a1);
  return v6;
}

void sub_100E6EE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  sub_1003B2350(&a33);
  std::mutex::unlock(v33);
  _Unwind_Resume(a1);
}

void sub_100E6EEB8(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

double sub_100E6EF74(uint64_t a1)
{
  *(void *)a1 = off_1022F5E40;
  *(void *)(a1 + 8) = 0x19000000000;
  *(void *)(a1 + 4816) = 0x19000000000;
  *(void *)(a1 + 8024) = 0;
  *(_DWORD *)(a1 + 8032) = 0;
  *(void *)(a1 + 8036) = 0xBF8000003F800000;
  double result = 0.0;
  *(_OWORD *)(a1 + 8048) = 0u;
  *(void *)(a1 + 8064) = 0x3F80000000000000;
  return result;
}

__n128 sub_100E6EFD0(uint64_t a1, uint64_t a2, __n128 *a3, uint64_t a4)
{
  sub_100659A48((unsigned __int16 *)(a1 + 8), a2);
  uint64_t v8 = *(unsigned __int16 *)(a1 + 4818);
  unint64_t v9 = *(unsigned int *)(a1 + 4820);
  uint64_t v10 = *(unsigned __int16 *)(a1 + 4816);
  if (v10 + v8 >= v9) {
    uint64_t v11 = *(unsigned int *)(a1 + 4820);
  }
  else {
    uint64_t v11 = 0;
  }
  *(void *)(a1 + 4816 + 8 * (v10 + v8 - v11) + 8) = a4;
  if (v9 <= v8)
  {
    if (v10 + 1 < v9) {
      LOWORD(v9) = 0;
    }
    *(_WORD *)(a1 + 4816) = v10 + 1 - v9;
  }
  else
  {
    *(_WORD *)(a1 + 4818) = v8 + 1;
  }
  if ((__n128 *)(a1 + 8056) != a3)
  {
    __n128 result = *a3;
    *(__n128 *)(a1 + 8056) = *a3;
  }
  return result;
}

BOOL sub_100E6F074(uint64_t a1, void *a2, float a3)
{
  if (!a2) {
    return 0;
  }
  [a2 transform];
  double v133 = 0.0;
  double v134 = 0.0;
  uint64_t v132 = 0;
  sub_1005D7CC4(&v134, &v133, (double *)&v132, v141, v142, v143);
  __double2 v6 = __sincos_stret(a3 * 3.14159265 / -180.0);
  double sinval = v6.__sinval;
  __asm { FMOV            V0.2D, #1.0 }
  float64x2_t v105 = _Q0;
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_102481EC0, memory_order_acquire) & 1) == 0)
  {
    int v93 = __cxa_guard_acquire(qword_102481EC0);
    double sinval = v6.__sinval;
    if (v93)
    {
      xmmword_102481E60 = xmmword_101D1C570;
      *(_OWORD *)algn_102481E70 = 0u;
      xmmword_102481E80 = xmmword_101D1C450;
      unk_102481E90 = 0u;
      xmmword_102481EA0 = 0uLL;
      xmmword_102481EB0 = (__int128)v105;
      __cxa_guard_release(qword_102481EC0);
      double sinval = v6.__sinval;
    }
  }
  double v104 = -sinval;
  __double2 v13 = __sincos_stret(v134 * 3.14159265 / 180.0);
  v12.f64[0] = v13.__sinval;
  float64x2_t v103 = v12;
  __double2 v18 = __sincos_stret(v133 * 3.14159265 / 180.0);
  v15.f64[0] = v18.__cosval;
  v14.f64[0] = v18.__sinval;
  long long v20 = v135;
  long long v19 = v136;
  long long v22 = v137;
  long long v21 = v138;
  long long v24 = v139;
  long long v23 = v140;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102481F40, memory_order_acquire) & 1) == 0)
  {
    long long v101 = v19;
    float64x2_t v102 = v15;
    long long v99 = v23;
    long long v100 = v21;
    long long v97 = v22;
    long long v98 = v20;
    long long v96 = v24;
    int v94 = __cxa_guard_acquire(&qword_102481F40);
    long long v24 = v96;
    long long v22 = v97;
    long long v20 = v98;
    long long v23 = v99;
    long long v21 = v100;
    long long v19 = v101;
    v15.f64[0] = v102.f64[0];
    v14.f64[0] = v18.__sinval;
    if (v94)
    {
      xmmword_102481EE0 = 0uLL;
      __asm { FMOV            V0.2D, #-1.0 }
      xmmword_102481EF0 = _Q0;
      xmmword_102481F00 = xmmword_101D1C570;
      xmmword_102481F10 = 0u;
      xmmword_102481F20 = xmmword_101D1C320;
      unk_102481F30 = 0u;
      __cxa_guard_release(&qword_102481F40);
      long long v24 = v96;
      long long v22 = v97;
      long long v20 = v98;
      long long v23 = v99;
      long long v21 = v100;
      long long v19 = v101;
      v15.f64[0] = v102.f64[0];
      v14.f64[0] = v18.__sinval;
    }
  }
  uint64_t v25 = 0;
  v26.f64[0] = -v14.f64[0];
  int64x2_t v130 = 0u;
  *(_OWORD *)uint64_t v131 = 0u;
  double v27 = -(v14.f64[0] * v103.f64[0]);
  v14.f64[0] = v13.__cosval * v14.f64[0];
  float64x2_t v128 = 0u;
  float64x2_t v129 = 0u;
  int64x2_t v126 = 0u;
  long long v127 = 0u;
  v113[2] = xmmword_102481E80;
  v113[3] = unk_102481E90;
  v113[4] = xmmword_102481EA0;
  v113[5] = xmmword_102481EB0;
  v113[0] = xmmword_102481E60;
  v113[1] = *(_OWORD *)algn_102481E70;
  v28.f64[0] = v6.__cosval;
  v28.f64[1] = v104;
  v17.f64[0] = 0.0;
  do
  {
    float64x2_t v30 = (float64x2_t)v113[v25];
    float64x2_t v29 = (float64x2_t)v113[v25 + 1];
    long long v31 = (float64x2_t *)((char *)&v114 + v25 * 16);
    *long long v31 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v28, v30.f64[0]), (float64x2_t)v6, v30, 1), (float64x2_t)0, v29.f64[0]);
    v31[1] = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v17, v30), v17, v30, 1), v105, v29);
    v25 += 2;
  }
  while (v25 != 6);
  uint64_t v32 = 0;
  v112[0] = v20;
  v112[1] = v19;
  v112[2] = v22;
  v112[3] = v21;
  v112[4] = v24;
  v112[5] = v23;
  v15.f64[1] = v27;
  v17.f64[1] = v13.__cosval;
  do
  {
    float64x2_t v34 = (float64x2_t)v112[v32];
    float64x2_t v33 = (float64x2_t)v112[v32 + 1];
    v16.f64[0] = v13.__cosval * v15.f64[0];
    float64x2_t v35 = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v16, v34), v14, v34, 1), v33, v103);
    double v36 = &v112[v32 + 6];
    v26.f64[1] = -(v15.f64[0] * v103.f64[0]);
    _OWORD *v36 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, v34.f64[0]), v15, v34, 1), v17, v33.f64[0]);
    v36[1] = v35;
    v32 += 2;
  }
  while (v32 != 6);
  uint64_t v37 = 0;
  float64x2_t v38 = v114;
  float64x2_t v39 = v116;
  float64x2_t v40 = v118;
  v33.f64[0] = v115;
  v34.f64[0] = v117;
  v35.f64[0] = v119;
  *(void *)&v38.f64[1] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
  *(void *)&v39.f64[1] = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u64[0];
  *(void *)&v40.f64[1] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
  do
  {
    float64x2_t v42 = (float64x2_t)v112[v37 + 6];
    float64x2_t v41 = (float64x2_t)v112[v37 + 7];
    uint64_t v43 = (float64x2_t *)((char *)&v120 + v37 * 16);
    float64x2_t *v43 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v38, v42.f64[0]), v39, v42, 1), v40, v41.f64[0]);
    v43[1] = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v33, v42), v34, v42, 1), v41, v35);
    v37 += 2;
  }
  while (v37 != 6);
  uint64_t v44 = 0;
  v111[2] = xmmword_102481F00;
  v111[3] = xmmword_102481F10;
  v111[4] = xmmword_102481F20;
  v111[5] = unk_102481F30;
  v111[0] = xmmword_102481EE0;
  v111[1] = xmmword_102481EF0;
  float64x2_t v45 = v120;
  float64x2_t v46 = v122;
  float64x2_t v47 = v124;
  v33.f64[0] = v121;
  v34.f64[0] = v123;
  v35.f64[0] = v125;
  *(void *)&v45.f64[1] = vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).u64[0];
  *(void *)&v46.f64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u64[0];
  *(void *)&v47.f64[1] = vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u64[0];
  do
  {
    float64x2_t v49 = (float64x2_t)v111[v44];
    float64x2_t v48 = (float64x2_t)v111[v44 + 1];
    long long v50 = (float64x2_t *)&v126.i8[v44 * 16];
    float64x2_t *v50 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v49.f64[0]), v46, v49, 1), v47, v48.f64[0]);
    v50[1] = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v33, v49), v34, v49, 1), v48, v35);
    v44 += 2;
  }
  while (v44 != 6);
  double v51 = *(double *)v126.i64 + v128.f64[1] + v131[0];
  if (v51 >= 0.0)
  {
    double v67 = sqrt(v51 + 1.0);
    double v68 = v67 + v67;
    double v71 = 1.0 / v68 * vsubq_f64(v129, (float64x2_t)vdupq_laneq_s64(v130, 1)).f64[0];
    double v72 = (*(double *)v130.i64 - *(double *)&v127) * (1.0 / v68);
    double v73 = 1.0 / v68 * vsubq_f64((float64x2_t)vdupq_laneq_s64(v126, 1), v128).f64[0];
    double v74 = v68 * 0.25;
  }
  else if (*(double *)v126.i64 < v128.f64[1] || *(double *)v126.i64 < v131[0])
  {
    double v53 = sqrt(1.0 - *(double *)v126.i64 - v128.f64[1] + v131[0]);
    double v54 = v53 + v53;
    double v55 = 1.0 / v54;
    double v56 = (*(double *)&v127 + *(double *)v130.i64) * (1.0 / v54);
    double v57 = vaddq_f64(v129, (float64x2_t)vdupq_laneq_s64(v130, 1)).f64[0];
    double v58 = 1.0 / v54 * v57;
    float64x2_t v59 = (float64x2_t)vdupq_laneq_s64(v126, 1);
    double v60 = v54 * 0.25;
    double v61 = v55 * vsubq_f64(v59, v128).f64[0];
    double v62 = sqrt(v128.f64[1] + 1.0 - *(double *)v126.i64 - v131[0]);
    double v63 = v62 + v62;
    double v64 = 1.0 / v63 * vaddq_f64(v59, v128).f64[0];
    double v65 = 1.0 / v63 * v57;
    if (v128.f64[1] >= v131[0]) {
      double v71 = v64;
    }
    else {
      double v71 = v56;
    }
    if (v128.f64[1] >= v131[0]) {
      double v72 = v63 * 0.25;
    }
    else {
      double v72 = v58;
    }
    if (v128.f64[1] >= v131[0]) {
      double v73 = v65;
    }
    else {
      double v73 = v60;
    }
    if (v128.f64[1] >= v131[0]) {
      double v74 = (*(double *)v130.i64 - *(double *)&v127) * (1.0 / v63);
    }
    else {
      double v74 = v61;
    }
  }
  else
  {
    double v69 = sqrt(*(double *)v126.i64 + 1.0 - v128.f64[1] - v131[0]);
    double v70 = v69 + v69;
    double v71 = v70 * 0.25;
    double v72 = 1.0 / v70 * vaddq_f64((float64x2_t)vdupq_laneq_s64(v126, 1), v128).f64[0];
    double v73 = (*(double *)&v127 + *(double *)v130.i64) * (1.0 / v70);
    double v74 = 1.0 / v70 * vsubq_f64(v129, (float64x2_t)vdupq_laneq_s64(v130, 1)).f64[0];
  }
  [a2 timestamp:v96 v97 v98 v99 v100 v101 *(_OWORD *)&v102];
  *(double *)v76.i64 = v75 * 1000000.0;
  unint64_t v77 = (unint64_t)*(double *)v76.i64;
  v76.f32[0] = v71;
  *(float *)&unsigned int v78 = v72;
  *(float *)&unsigned int v79 = v73;
  v110.i64[0] = __PAIR64__(v78, v76.u32[0]);
  v76.f32[0] = v74;
  v110.i64[1] = __PAIR64__(v76.u32[0], v79);
  sub_100B9BEAC(&v110, v76);
  float32x4_t v109 = v110;
  unint64_t v80 = *(unsigned __int16 *)(a1 + 4818);
  unint64_t v81 = *(unsigned int *)(a1 + 4820);
  uint64_t v82 = *(unsigned __int16 *)(a1 + 4816);
  if (v81 == v80 && *(void *)(a1 + 4824 + 8 * v82) < v77)
  {
    unint64_t v83 = v80 + v82 - 1;
    uint64_t v84 = v83 >= v80 ? *(unsigned __int16 *)(a1 + 4818) : 0;
    if (*(void *)(a1 + 4824 + 8 * (v83 - v84)) > v77)
    {
      if (v80 >= 2)
      {
        unint64_t v85 = 1;
        unint64_t v86 = v77;
        do
        {
          if (v86 >= *(void *)sub_100B5D42C((unsigned __int16 *)(a1 + 4816), v85 - 1)
            && v86 < *(void *)sub_100B5D42C((unsigned __int16 *)(a1 + 4816), v85))
          {
            float v106 = (float)(*(void *)sub_100B5D42C((unsigned __int16 *)(a1 + 4816), v85) - v86) * 0.000001;
            double v87 = (float32x2_t *)sub_100659D10((unsigned __int16 *)(a1 + 8), v85 - 1);
            double v88 = (float32x2_t *)sub_100659D10((unsigned __int16 *)(a1 + 8), v85);
            float32_t v89 = v106 * (float)((float)(v87[1].f32[0] + v88[1].f32[0]) * 0.5);
            *(float32x2_t *)v107.f32 = vmul_n_f32(vmul_f32(vadd_f32(*v87, *v88), (float32x2_t)0x3F0000003F000000), v106);
            v107.f32[2] = v89;
            *(double *)v90.i64 = sub_100B9BDF4(&v108, v107.f32);
            sub_100B9BB80((uint64_t)&v108, v109.f32, &v107, v90);
            float32x4_t v109 = v107;
            unint64_t v86 = *(void *)sub_100B5D42C((unsigned __int16 *)(a1 + 4816), v85);
          }
          ++v85;
        }
        while (v85 < *(unsigned __int16 *)(a1 + 4818));
      }
LABEL_48:
      if ((float32x4_t *)(a1 + 8024) != &v109) {
        *(float32x4_t *)(a1 + 8024) = v109;
      }
      *(_DWORD *)(a1 + 8040) = 989432550;
      *(void *)(a1 + 8048) = v77;
      [a2 confidence];
      return v92 >= 0.85;
    }
  }
  unint64_t v91 = v80 + v82 - 1;
  if (v91 < v81) {
    unint64_t v81 = 0;
  }
  if (*(void *)(a1 + 8 * (v91 - v81) + 4824) == v77) {
    goto LABEL_48;
  }
  if ((float32x4_t *)(a1 + 8024) != &v109) {
    *(float32x4_t *)(a1 + 8024) = v110;
  }
  BOOL result = 0;
  *(_DWORD *)(a1 + 8040) = 989432550;
  *(void *)(a1 + 8048) = v77;
  return result;
}

uint64_t sub_100E6F7F8(uint64_t a1, void *a2)
{
  *(void *)a1 = a2;
  sub_101171D90(a1 + 8);
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0x4044000000000000;
  *(_DWORD *)(a1 + 232) = 1;
  *(_OWORD *)(a1 + 240) = xmmword_101D92CC0;
  *(void *)(a1 + 256) = 1;
  *(void *)(a1 + 264) = [objc_msgSend(*(id *)a1, "silo") newTimer];
  *(void *)(a1 + 272) = 0x3FC3333333333333;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x406A400000000000;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 408) = 1065353216;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_DWORD *)(a1 + 448) = 1065353216;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022FDCB0);
  }
  double v3 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    LOWORD(v24[0]) = 2082;
    *(std::__shared_weak_count **)((char *)v24 + 2) = (std::__shared_weak_count *)"";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,Constructor\"}", buf, 0x12u);
  }
  sub_1000C7F88(buf);
  double v4 = *(double *)(a1 + 88);
  double v22 = 0.0;
  int v5 = sub_1000A699C(*(uint64_t *)buf, "MinimumDistanceForRayTracingTileQuery", &v22);
  double v6 = v22;
  if (!v5) {
    double v6 = v4;
  }
  *(double *)(a1 + 88) = v6;
  if (v24[0]) {
    sub_1000DB0A0(v24[0]);
  }
  CLMotionActivity::init((CLMotionActivity *)(a1 + 96));
  sub_1000C7F88(buf);
  char v7 = *(unsigned char *)(a1 + 232);
  LOBYTE(v22) = 0;
  int v8 = sub_1000D2988(*(uint64_t *)buf, "EnableRavenBuildingDataAndRayTracingTileQueryForOnlyPedestrianActivity", (BOOL *)&v22);
  char v9 = LOBYTE(v22);
  if (!v8) {
    char v9 = v7;
  }
  *(unsigned char *)(a1 + 232) = v9;
  if (v24[0]) {
    sub_1000DB0A0(v24[0]);
  }
  sub_1000C7F88(buf);
  char v10 = *(unsigned char *)(a1 + 233);
  LOBYTE(v22) = 0;
  int v11 = sub_1000D2988(*(uint64_t *)buf, "EnableRayTracingTileQueryInNonDUSignalEnvironment", (BOOL *)&v22);
  char v12 = LOBYTE(v22);
  if (!v11) {
    char v12 = v10;
  }
  *(unsigned char *)(a1 + 233) = v12;
  if (v24[0]) {
    sub_1000DB0A0(v24[0]);
  }
  sub_1000C7F88(buf);
  char v13 = *(unsigned char *)(a1 + 234);
  LOBYTE(v22) = 0;
  int v14 = sub_1000D2988(*(uint64_t *)buf, "UseCLRayTracingTileManager", (BOOL *)&v22);
  char v15 = LOBYTE(v22);
  if (!v14) {
    char v15 = v13;
  }
  *(unsigned char *)(a1 + 234) = v15;
  if (v24[0])
  {
    sub_1000DB0A0(v24[0]);
    char v15 = *(unsigned char *)(a1 + 234);
  }
  if (!v15)
  {
    id v16 = [objc_alloc((Class)GEOMapFeatureAccess) initWithQueue:[objc_msgSend(*(id *)a1, "silo") queue]];
    *(void *)(a1 + 360) = v16;
    if (v16)
    {
      [v16 setAllowStaleData:1];
      [*(id *)(a1 + 360) setAllowNetworkTileLoad:1];
    }
    else
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022FDCB0);
      }
      float64x2_t v17 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        LOWORD(v24[0]) = 2082;
        *(std::__shared_weak_count **)((char *)v24 + 2) = (std::__shared_weak_count *)"";
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,Constructor,failed to create fGEOMapFeatureAccess\"}", buf, 0x12u);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022FDCB0);
        }
      }
      __double2 v18 = qword_102419408;
      if (os_signpost_enabled((os_log_t)qword_102419408))
      {
        *(_DWORD *)int buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        LOWORD(v24[0]) = 2082;
        *(std::__shared_weak_count **)((char *)v24 + 2) = (std::__shared_weak_count *)"";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLRavenRayTracingTileClient,Constructor,failed to create fGEOMapFeatureAccess", "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,Constructor,failed to create fGEOMapFeatureAccess\"}", buf, 0x12u);
      }
    }
  }
  long long v19 = *(void **)(a1 + 264);
  if (v19)
  {
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_100E6FD0C;
    v21[3] = &unk_1022A3020;
    v21[4] = a1;
    [v19 setHandler:v21];
    long long v19 = *(void **)(a1 + 264);
  }
  [v19 setNextFireDelay:1.79769313e308];
  sub_1000E2F40((void *)(a1 + 376));
  sub_1000E2F40((void *)(a1 + 416));
  return a1;
}

void sub_100E6FC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  long long v20 = *(std::__shared_weak_count **)(v16 + 464);
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  sub_1000D7D80(v18);
  sub_1000D7D80(v17);
  long long v21 = *(void **)(v16 + 328);
  if (v21)
  {
    *(void *)(v16 + 336) = v21;
    operator delete(v21);
  }
  if (*(char *)(v16 + 327) < 0) {
    operator delete(*(void **)(v16 + 304));
  }
  sub_1000A7B4C(&a15);
  _Unwind_Resume(a1);
}

id sub_100E6FD0C(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 32);
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022FDCB0);
  }
  unint64_t v2 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 68289026;
    int v7 = 0;
    __int16 v8 = 2082;
    char v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"HandleSerializeAndSendTimer\"}", buf, 0x12u);
  }
  id v3 = [*v1 silo];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100E6FE40;
  void v5[3] = &unk_1022A3020;
  void v5[4] = v1;
  return [v3 async:v5];
}

void sub_100E6FE40(uint64_t a1)
{
}

void sub_100E6FE48(uint64_t a1)
{
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022FDCB0);
  }
  unint64_t v2 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 68289026;
    int v8 = 0;
    __int16 v9 = 2082;
    char v10 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,HandleSerializeAndSendTimer\"}", (uint8_t *)&v7, 0x12u);
  }
  id v3 = *(std::__shared_weak_count **)(a1 + 464);
  if (v3)
  {
    double v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 456);
      if (v5)
      {
        sub_100CE5C00(v5);
LABEL_15:
        sub_1000DB0A0(v4);
        return;
      }
    }
  }
  else
  {
    double v4 = 0;
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022FDCB0);
  }
  double v6 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 68289026;
    int v8 = 0;
    __int16 v9 = 2082;
    char v10 = "";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,localRCSharedPtr,null\"}", (uint8_t *)&v7, 0x12u);
  }
  if (v4) {
    goto LABEL_15;
  }
}

void sub_100E6FFE0(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100E6FFF8(uint64_t a1)
{
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022FDCB0);
  }
  unint64_t v2 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = 68289026;
    __int16 v7 = 2082;
    int v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,Destructor\"}", (uint8_t *)&v6, 0x12u);
  }
  sub_100E70138(a1);
  id v3 = *(std::__shared_weak_count **)(a1 + 464);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  sub_1000D7D80(a1 + 416);
  sub_1000D7D80(a1 + 376);
  double v4 = *(void **)(a1 + 328);
  if (v4)
  {
    *(void *)(a1 + 336) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*(void **)(a1 + 304));
  }
  uint64_t v6 = a1 + 280;
  sub_1000A7B4C((void ***)&v6);
  return a1;
}

void sub_100E7012C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void *sub_100E70138(uint64_t a1)
{
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022FDCB0);
  }
  unint64_t v2 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 68289026;
    int v11 = 0;
    __int16 v12 = 2082;
    char v13 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,Reset\"}", buf, 0x12u);
  }
  id v3 = *(id **)(a1 + 328);
  double v4 = *(id **)(a1 + 336);
  if (v3 != v4)
  {
    do
    {

      *v3++ = 0;
    }
    while (v3 != v4);
    id v3 = *(id **)(a1 + 328);
  }
  *(void *)(a1 + 336) = v3;
  uint64_t v5 = *(void **)(a1 + 352);
  if (v5)
  {

    *(void *)(a1 + 352) = 0;
  }
  uint64_t v6 = *(void **)(a1 + 264);
  if (v6)
  {
    [v6 invalidate];

    *(void *)(a1 + 264) = 0;
  }
  if (*(unsigned char *)(a1 + 56)) {
    *(unsigned char *)(a1 + 56) = 0;
  }
  if (*(unsigned char *)(a1 + 80)) {
    *(unsigned char *)(a1 + 80) = 0;
  }
  *(unsigned char *)(a1 + 235) = 0;
  sub_1000A7BA0((uint64_t *)(a1 + 280));
  if (*(char *)(a1 + 327) < 0)
  {
    **(unsigned char **)(a1 + 304) = 0;
    *(void *)(a1 + 312) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 304) = 0;
    *(unsigned char *)(a1 + 327) = 0;
  }
  *(_DWORD *)(a1 + 260) = 0;
  if (*(void *)(a1 + 360))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022FDCD0);
    }
    __int16 v7 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLGCZ,destroy geocodec malloc zone,CLRavenRayTracingTileClient::Reset()", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022FDCD0);
      }
      __int16 v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenRayTracingTileClient::Reset()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    GEOResetGeoCodecsAllocator();

    *(void *)(a1 + 360) = 0;
  }
  if (*(void *)a1)
  {

    *(void *)a1 = 0;
  }
  sub_1000E2F40((void *)(a1 + 376));
  return sub_1000E2F40((void *)(a1 + 416));
}

BOOL sub_100E70434(uint64_t a1, double *a2)
{
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022FDCB0);
  }
  double v4 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = 68289026;
    int v23 = 0;
    __int16 v24 = 2082;
    uint64_t v25 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,IsQueryNeeded\"}", (uint8_t *)&v22, 0x12u);
  }
  double v5 = sub_10016C458();
  if (*(unsigned char *)(a1 + 235))
  {
    double v6 = v5;
    double v7 = *(double *)(a1 + 248);
    if (v7 > v6 || v6 - v7 > *(double *)(a1 + 240))
    {
      *(unsigned char *)(a1 + 235) = 0;
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022FDCB0);
      }
      int v8 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 248);
        int v22 = 68289538;
        int v23 = 0;
        __int16 v24 = 2082;
        uint64_t v25 = "";
        __int16 v26 = 2050;
        uint64_t v27 = v9;
        __int16 v28 = 2050;
        double v29 = v6;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,IsQueryNeeded,Query Timeout\", \"fQueryTimestampMCT\":\"%{public}f\", \"currentMCTTime\":\"%{public}f\"}", (uint8_t *)&v22, 0x26u);
      }
    }
    if (*(unsigned char *)(a1 + 235))
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022FDCB0);
      }
      char v10 = qword_102419408;
      BOOL v11 = os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT);
      BOOL result = 0;
      if (v11)
      {
        int v22 = 68289026;
        int v23 = 0;
        __int16 v24 = 2082;
        uint64_t v25 = "";
        char v13 = "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,IsQueryNeeded,QueryInProgress\"}";
LABEL_47:
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v22, 0x12u);
        return 0;
      }
      return result;
    }
  }
  if (!*(unsigned char *)(a1 + 233) && (*(_DWORD *)(a1 + 260) - 3) >= 2)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022FDCB0);
    }
    char v10 = qword_102419408;
    BOOL v21 = os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (v21)
    {
      int v22 = 68289026;
      int v23 = 0;
      __int16 v24 = 2082;
      uint64_t v25 = "";
      char v13 = "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,IsQueryNeeded,QueryRejectedInSigEnv\"}";
      goto LABEL_47;
    }
    return result;
  }
  int v14 = (int *)(a1 + 96);
  if (!*(_DWORD *)(a1 + 96)
    || (CLMotionActivity::isWalking((CLMotionActivity *)(a1 + 96)) & 1) != 0
    || (CLMotionActivity::isRunning((CLMotionActivity *)(a1 + 96)) & 1) != 0
    || (int v15 = *v14, *v14 == 3)
    || v15 == 11805
    || v15 == 90603
    || !*(unsigned char *)(a1 + 232))
  {
    if (!*(unsigned char *)(a1 + 80))
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022FDCB0);
      }
      long long v20 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
      {
        int v22 = 68289026;
        int v23 = 0;
        __int16 v24 = 2082;
        uint64_t v25 = "";
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,IsQueryNeeded,FirstQuery\"}", (uint8_t *)&v22, 0x12u);
      }
      return 1;
    }
    *(long double *)(a1 + 48) = sub_1000F1648((double *)(a1 + 8), *a2, a2[1], *(double *)(a1 + 64), *(double *)(a1 + 72), 0.0);
    *(unsigned char *)(a1 + 56) = 1;
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022FDCB0);
    }
    uint64_t v17 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      if (!*(unsigned char *)(a1 + 56)) {
        goto LABEL_49;
      }
      uint64_t v18 = *(void *)(a1 + 48);
      double v19 = *(double *)(a1 + 88);
      int v22 = 68289538;
      int v23 = 0;
      __int16 v24 = 2082;
      uint64_t v25 = "";
      __int16 v26 = 2050;
      uint64_t v27 = v18;
      __int16 v28 = 2050;
      double v29 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,IsQueryNeeded\", \"DistanceFromLastQuery\":\"%{public}f\", \"MinimumDistanceThreshold\":\"%{public}f\"}", (uint8_t *)&v22, 0x26u);
    }
    if (*(unsigned char *)(a1 + 56)) {
      return *(double *)(a1 + 48) >= *(double *)(a1 + 88);
    }
LABEL_49:
    sub_10020D700();
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022FDCB0);
  }
  char v10 = qword_102419408;
  BOOL v16 = os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT);
  BOOL result = 0;
  if (v16)
  {
    int v22 = 68289026;
    int v23 = 0;
    __int16 v24 = 2082;
    uint64_t v25 = "";
    char v13 = "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,IsQueryNeeded,isNonPedestrian\"}";
    goto LABEL_47;
  }
  return result;
}

uint64_t sub_100E70958(uint64_t result)
{
  *(unsigned char *)(result + 235) = 0;
  return result;
}

void sub_100E70960(uint64_t a1, double *a2, uint64_t *a3)
{
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022FDCB0);
  }
  double v6 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    int v15 = "";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,QueryRayTracingTile\"}", (uint8_t *)&v12, 0x12u);
  }
  if (sub_100E70434(a1, a2))
  {
    *(unsigned char *)(a1 + 235) = 1;
    *(double *)(a1 + 248) = sub_10016C458();
    double v7 = *(std::__shared_weak_count **)(a1 + 464);
    if (!v7 || v7->__shared_owners_ == -1)
    {
      uint64_t v9 = *a3;
      uint64_t v8 = a3[1];
      if (v8)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
        double v7 = *(std::__shared_weak_count **)(a1 + 464);
      }
      *(void *)(a1 + 456) = v9;
      *(void *)(a1 + 464) = v8;
      if (v7) {
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    int v10 = *(unsigned __int8 *)(a1 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)a2;
    if (!v10) {
      *(unsigned char *)(a1 + 80) = 1;
    }
    if (*(unsigned char *)(a1 + 234)) {
      [objc_msgSend(*(id *)a1, "vendor") proxyForService:@"CLRayTracingTileManager"] requestRTTiles:*(unsigned int *)(a1 + 256) longitude:*(double *)(a1 + 264) numberOfTiles:a2[1]];
    }
    else {
      sub_100E70B84(a1, a2);
    }
  }
  else
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022FDCB0);
    }
    BOOL v11 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 68289026;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,QueryRayTracingTile,IsQueryNeeded,FALSE\"}", (uint8_t *)&v12, 0x12u);
    }
  }
}

void sub_100E70B84(uint64_t a1, double *a2)
{
  double v4 = (void *)(a1 + 376);
  sub_1000E2E9C(a1 + 416, (uint64_t *)(a1 + 376));
  sub_1000E2F40(v4);
  if (*(void *)(a1 + 360))
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100E70E88;
    v13[3] = &unk_1022FDC90;
    v13[4] = a1;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    _DWORD v12[2] = sub_100E71D38;
    v12[3] = &unk_1022A5348;
    v12[4] = a1;
    uint64_t v7 = *(void *)a2;
    double v6 = a2[1];
    [*(id *)(a1 + 360) findRaytracingDataNear:v13 radius:v12 handler:*a2 completionHandler:v6];
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022FDCB0);
    }
    uint64_t v8 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 368);
      *(_DWORD *)int buf = 68289795;
      int v15 = 0;
      __int16 v16 = 2082;
      uint64_t v17 = "";
      __int16 v18 = 2049;
      uint64_t v19 = v7;
      __int16 v20 = 2049;
      double v21 = v6;
      __int16 v22 = 2049;
      uint64_t v23 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,GEORayTracingTileQuery,generated\", \"QueryLat\":\"%{private}f\", \"QueryLon\":\"%{private}f\", \"QueryRadius_m\":\"%{private}f\"}", buf, 0x30u);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 235) = 0;
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022FDCB0);
    }
    int v10 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 68289026;
      int v15 = 0;
      __int16 v16 = 2082;
      uint64_t v17 = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,fGEOMapFeatureAccess null\"}", buf, 0x12u);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022FDCB0);
      }
    }
    BOOL v11 = qword_102419408;
    if (os_signpost_enabled((os_log_t)qword_102419408))
    {
      *(_DWORD *)int buf = 68289026;
      int v15 = 0;
      __int16 v16 = 2082;
      uint64_t v17 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLRavenRayTracingTileClient,fGEOMapFeatureAccess null", "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,fGEOMapFeatureAccess null\"}", buf, 0x12u);
    }
  }
}

void sub_100E70E88(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022FDCB0);
  }
  double v4 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLRavenRayTracingTileClient,rayTracingTileGEOHandler", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022FDCB0);
    }
    LOWORD(v17) = 0;
    __int16 v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenRayTracingTileClient::GEORayTracingTileQuery(const CLClientLocationCoordinate &)_block_invoke", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  if (a2)
  {
    id v5 = [a2 boundingBox];
    double v6 = v5;
    if (v5 && *(unsigned char *)(v3 + 80))
    {
      id v5 = [v5 containsCoordinate:*(double *)(v3 + 64), *(double *)(v3 + 72)];
      int v7 = (int)v5;
    }
    else
    {
      int v7 = 0;
    }
    unint64_t v17 = sub_100E715E0((uint64_t)v5, v6);
    uint64_t v18 = v8;
    if ((_BYTE)v8)
    {
      sub_10089DA1C(v3 + 376, &v17, &v17);
      if ((v9 & 1) == 0)
      {
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022FDCB0);
        }
        int v10 = qword_102419408;
        if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
        {
          if (!(_BYTE)v18) {
            goto LABEL_70;
          }
          *(_DWORD *)int buf = 134283521;
          unint64_t v22 = v17;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CLRavenRayTracingTileClient,Repeated rt tile files found in the rt tiles query,tile_id,%{private}llu", buf, 0xCu);
        }
        if (!sub_10013D1A0(115, 0)) {
          return;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022FDCB0);
        }
        if ((_BYTE)v18)
        {
          int v19 = 134283521;
          unint64_t v20 = v17;
LABEL_39:
          int v13 = (uint8_t *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLRavenRayTracingTileClient::GEORayTracingTileQuery(const CLClientLocationCoordinate &)_block_invoke", "%s\n");
          goto LABEL_40;
        }
        goto LABEL_70;
      }
      if (!(_BYTE)v18) {
        goto LABEL_70;
      }
      if (sub_100E72C1C((void *)(v3 + 416), &v17))
      {
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022FDCB0);
        }
        __int16 v14 = qword_102419408;
        if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
        {
          if (!(_BYTE)v18) {
            goto LABEL_70;
          }
          *(_DWORD *)int buf = 134283521;
          unint64_t v22 = v17;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "CLRavenRayTracingTileClient,rt tiles dropped,%{private}llu", buf, 0xCu);
        }
        if (!sub_10013D1A0(115, 2)) {
          return;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022FDCB0);
        }
        if ((_BYTE)v18)
        {
          int v19 = 134283521;
          unint64_t v20 = v17;
LABEL_69:
          int v13 = (uint8_t *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenRayTracingTileClient::GEORayTracingTileQuery(const CLClientLocationCoordinate &)_block_invoke", "%s\n");
LABEL_40:
          if (v13 != buf) {
            free(v13);
          }
          return;
        }
      }
      else
      {
        sub_100E71920(v3, a2, v7);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022FDCB0);
        }
        int v15 = qword_102419408;
        if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
        {
          if (!(_BYTE)v18) {
            goto LABEL_70;
          }
          *(_DWORD *)int buf = 134283521;
          unint64_t v22 = v17;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "CLRavenRayTracingTileClient,rt tiles added,%{private}llu", buf, 0xCu);
        }
        if (!sub_10013D1A0(115, 2)) {
          return;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022FDCB0);
        }
        if ((_BYTE)v18)
        {
          int v19 = 134283521;
          unint64_t v20 = v17;
          goto LABEL_69;
        }
      }
LABEL_70:
      sub_10020D700();
    }
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022FDCB0);
    }
    int v12 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLRavenRayTracingTileClient, Could not compute geo hash ID for the rt tile using its reported bounding box", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022FDCB0);
      }
      LOWORD(v19) = 0;
      goto LABEL_39;
    }
  }
  else
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022FDCB0);
    }
    BOOL v11 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "CLRavenRayTracingTileClient,rayTracingTileGEOHandler,null geoRayTracingTile", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022FDCB0);
      }
      LOWORD(v17) = 0;
      goto LABEL_39;
    }
  }
}

unint64_t sub_100E715E0(uint64_t a1, void *a2)
{
  if (!a2)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022FDCB0);
    }
    __int16 v16 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLRavenRayTracingTileClient,rt tile bounding box is nil to generate tile centroid geo hash ID", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_21;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419400 == -1) {
      goto LABEL_24;
    }
    goto LABEL_26;
  }
  if (![a2 hasSouthLat]
    || ![a2 hasNorthLat]
    || ![a2 hasEastLng]
    || ([a2 hasWestLng] & 1) == 0)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022FDCB0);
    }
    int v15 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLRavenRayTracingTileClient,rt tile bounding box is not populated correctly to generate tile centroid geo hash ID", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_21;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419400 == -1)
    {
LABEL_24:
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "std::optional<uint64_t> CLRavenRayTracingTileClient::ComputeTileCentroidGeoHashID(const GEOMapRegion *) const", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
LABEL_21:
      uint64_t v14 = 0;
      unint64_t v13 = 0;
      return v13 | v14;
    }
LABEL_26:
    dispatch_once(&qword_102419400, &stru_1022FDCB0);
    goto LABEL_24;
  }
  [a2 southLat];
  double v4 = v3;
  [a2 northLat];
  double v6 = (v4 + v5) * 0.5;
  [a2 westLng];
  double v8 = v7;
  [a2 eastLng];
  double v10 = (v8 + v9) * 0.5;
  double v11 = 360.0;
  if (v10 >= 0.0) {
    double v11 = 0.0;
  }
  unint64_t v12 = vcvtad_u64_f64((v10 + v11) * 1000000.0);
  unint64_t v13 = v12 & 0xFFFFFFFFFFFFFF00 | (vcvtad_u64_f64((v6 + 90.0) * 1000000.0) << 32);
  uint64_t v14 = v12;
  return v13 | v14;
}

void sub_100E71920(uint64_t a1, void *a2, int a3)
{
  if (a2)
  {
    id v6 = a2;
    if (a3)
    {
      uint64_t v7 = qword_102419400;
      if (*(void *)(a1 + 352))
      {
        if (qword_102419400 != -1) {
          dispatch_once(&qword_102419400, &stru_1022FDCB0);
        }
        double v8 = qword_102419408;
        if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
        {
          int v29 = 68289026;
          int v30 = 0;
          __int16 v31 = 2082;
          uint64_t v32 = "";
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,AddTile,second current tile received\"}", (uint8_t *)&v29, 0x12u);
          if (qword_102419400 != -1) {
            dispatch_once(&qword_102419400, &stru_1022FDCB0);
          }
        }
        double v9 = qword_102419408;
        if (os_signpost_enabled((os_log_t)qword_102419408))
        {
          int v29 = 68289026;
          int v30 = 0;
          __int16 v31 = 2082;
          uint64_t v32 = "";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLRavenRayTracingTileClient,AddTile,second current tile received", "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,AddTile,second current tile received\"}", (uint8_t *)&v29, 0x12u);
        }
        if (*(void *)(a1 + 352)) {
          goto LABEL_12;
        }
        uint64_t v7 = qword_102419400;
      }
      if (v7 != -1) {
        dispatch_once(&qword_102419400, &stru_1022FDCB0);
      }
      __int16 v26 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
      {
        int v29 = 68289026;
        int v30 = 0;
        __int16 v31 = 2082;
        uint64_t v32 = "";
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,AddTile,received current tile\"}", (uint8_t *)&v29, 0x12u);
      }
      *(void *)(a1 + 352) = a2;
      goto LABEL_42;
    }
LABEL_12:
    double v11 = *(void **)(a1 + 336);
    unint64_t v10 = *(void *)(a1 + 344);
    if ((unint64_t)v11 >= v10)
    {
      uint64_t v15 = *(void *)(a1 + 328);
      uint64_t v16 = ((uint64_t)v11 - v15) >> 3;
      if ((unint64_t)(v16 + 1) >> 61) {
        sub_1001D7FD4();
      }
      uint64_t v17 = v10 - v15;
      uint64_t v18 = v17 >> 2;
      if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
        uint64_t v18 = v16 + 1;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v18;
      }
      if (v19) {
        unint64_t v20 = (char *)sub_1000DA54C(a1 + 344, v19);
      }
      else {
        unint64_t v20 = 0;
      }
      double v21 = &v20[8 * v16];
      unint64_t v22 = &v20[8 * v19];
      *(void *)double v21 = a2;
      unint64_t v12 = v21 + 8;
      __int16 v24 = *(char **)(a1 + 328);
      uint64_t v23 = *(char **)(a1 + 336);
      if (v23 != v24)
      {
        do
        {
          uint64_t v25 = *((void *)v23 - 1);
          v23 -= 8;
          *((void *)v21 - 1) = v25;
          v21 -= 8;
        }
        while (v23 != v24);
        uint64_t v23 = *(char **)(a1 + 328);
      }
      *(void *)(a1 + 328) = v21;
      *(void *)(a1 + 336) = v12;
      *(void *)(a1 + 344) = v22;
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      void *v11 = a2;
      unint64_t v12 = v11 + 1;
    }
    *(void *)(a1 + 336) = v12;
LABEL_42:
    uint64_t v27 = *(void **)(a1 + 264);
    if (v27)
    {
      [v27 nextFireDelay];
      if (v28 > *(double *)(a1 + 272)) {
        sub_100E72710(a1);
      }
    }
    return;
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022FDCB0);
  }
  unint64_t v13 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
  {
    int v29 = 68289026;
    int v30 = 0;
    __int16 v31 = 2082;
    uint64_t v32 = "";
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,AddTile,null pointer\"}", (uint8_t *)&v29, 0x12u);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022FDCB0);
    }
  }
  uint64_t v14 = qword_102419408;
  if (os_signpost_enabled((os_log_t)qword_102419408))
  {
    int v29 = 68289026;
    int v30 = 0;
    __int16 v31 = 2082;
    uint64_t v32 = "";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLRavenRayTracingTileClient,AddTile,null pointer", "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,AddTile,null pointer\"}", (uint8_t *)&v29, 0x12u);
  }
}

void sub_100E71D38(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022FDCB0);
  }
  double v4 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLRavenRayTracingTileClient,rayTracingTileGEOCompletionHandler", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022FDCB0);
    }
    double v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRavenRayTracingTileClient::GEORayTracingTileQuery(const CLClientLocationCoordinate &)_block_invoke", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (a2)
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022FDCB0);
    }
    double v5 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = [a2 code];
      id v7 = [[objc_msgSend(a2, "domain") UTF8String];
      id v8 = [[objc_msgSend(a2, "localizedDescription") UTF8String];
      *(_DWORD *)int buf = 68289795;
      int v11 = 0;
      __int16 v12 = 2082;
      unint64_t v13 = "";
      __int16 v14 = 2050;
      id v15 = v6;
      __int16 v16 = 2082;
      id v17 = v7;
      __int16 v18 = 2081;
      id v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,#Warning rayTracingTileGEOCompletionHandler\", \"error\":%{public}lld, \"domain\":%{public, location:escape_only}s, \"description\":%{private, location:escape_only}s}", buf, 0x30u);
    }
  }
  *(unsigned char *)(v3 + 235) = 0;
}

__n128 sub_100E71FA8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 96) = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 160) = v4;
  *(_OWORD *)(a1 + 112) = v2;
  *(_OWORD *)(a1 + 128) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 224) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 192) = v6;
  *(_OWORD *)(a1 + 208) = v7;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

void sub_100E71FDC(uint64_t a1, int a2)
{
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022FDCB0);
  }
  long long v4 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 260);
    v6[0] = 68289538;
    v6[1] = 0;
    __int16 v7 = 2082;
    id v8 = "";
    __int16 v9 = 1026;
    int v10 = v5;
    __int16 v11 = 1026;
    int v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,SetSignalEnvironmentType\", \"OldSigEnv\":%{public}d, \"NewSigEnv\":%{public}d}", (uint8_t *)v6, 0x1Eu);
  }
  *(_DWORD *)(a1 + 260) = a2;
}

uint64_t sub_100E720E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 288);
  if (*(void *)(a1 + 280) != v2)
  {
    if (*(char *)(a1 + 327) < 0)
    {
      if (*(void *)(a1 + 312)) {
        goto LABEL_4;
      }
    }
    else if (*(unsigned char *)(a1 + 327))
    {
LABEL_4:
      sub_1002F0A00((const void **)(a1 + 304), (const void **)(v2 - 24), (uint64_t)v13);
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      *(_OWORD *)a2 = *(_OWORD *)v13;
      *(void *)(a2 + 16) = *(void *)&v13[16];
      uint64_t v5 = *(void *)(a1 + 288);
      long long v6 = (void **)(v5 - 24);
      if (*(char *)(v5 - 1) < 0) {
        operator delete(*v6);
      }
      *(void *)(a1 + 288) = v6;
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022FDCB0);
      }
      __int16 v7 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a2 + 23) >= 0) {
          id v8 = (void *)a2;
        }
        else {
          id v8 = *(void **)a2;
        }
        unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 288) - *(void *)(a1 + 280)) >> 3);
        *(void *)unint64_t v13 = 68289538;
        *(_WORD *)&v13[8] = 2082;
        *(void *)&v13[10] = "";
        *(_WORD *)&v13[18] = 2082;
        *(void *)&v13[20] = v8;
        __int16 v14 = 2050;
        unint64_t v15 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,GetNextTile\", \"TileFilePathName\":%{public, location:escape_only}s, \"NumberOfTilesInList\":%{public}ld}", v13, 0x26u);
      }
      return 1;
    }
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022FDCB0);
  }
  __int16 v11 = qword_102419408;
  BOOL v12 = os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v12)
  {
    *(void *)unint64_t v13 = 68289026;
    *(_WORD *)&v13[8] = 2082;
    *(void *)&v13[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,GetNextTile,no tile\"}", v13, 0x12u);
    return 0;
  }
  return result;
}

uint64_t sub_100E72314(void *a1, void *a2)
{
  uint64_t v2 = a1[42];
  uint64_t v3 = a1[44];
  if (a1[41] != v2)
  {
    if (!v3)
    {
      *a2 = *(void *)(v2 - 8);
      a1[42] -= 8;
      return 1;
    }
LABEL_5:
    *a2 = v3;
    a1[44] = 0;
    return 1;
  }
  if (v3) {
    goto LABEL_5;
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022FDCB0);
  }
  uint64_t v5 = qword_102419408;
  BOOL v6 = os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v6)
  {
    v7[0] = 68289026;
    v7[1] = 0;
    __int16 v8 = 2082;
    unint64_t v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,GetNextTile,no tile\"}", (uint8_t *)v7, 0x12u);
    return 0;
  }
  return result;
}

void sub_100E72438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022FDCB0);
  }
  BOOL v6 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 288) - *(void *)(a1 + 280)) >> 3);
    int v14 = 68289538;
    int v15 = 0;
    __int16 v16 = 2082;
    id v17 = "";
    __int16 v18 = 2050;
    unint64_t v19 = v7;
    __int16 v20 = 2050;
    unint64_t v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,AddListOfTileFiles\", \"NumberOfNewTileFiles\":%{public}ld, \"NumberOfExistingTileFiles\":%{public}ld}", (uint8_t *)&v14, 0x26u);
  }
  if (*(void *)a2 != *(void *)(a2 + 8))
  {
    uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a3 + 8);
    }
    if (v9)
    {
      if (*(char *)(a1 + 327) < 0)
      {
        if (*(void *)(a1 + 312))
        {
LABEL_12:
          int v10 = (uint64_t *)(a1 + 280);
          __int16 v11 = *(std::string **)(a1 + 288);
          if (*(std::string **)(a1 + 280) == v11)
          {
            if (v10 != (uint64_t *)a2) {
              sub_1019EF7A8((uint64_t)v10, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
            }
          }
          else
          {
            sub_100E72CD0(v10, v11, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
          }
          return;
        }
      }
      else if (*(unsigned char *)(a1 + 327))
      {
        goto LABEL_12;
      }
      std::string::operator=((std::string *)(a1 + 304), (const std::string *)a3);
      goto LABEL_12;
    }
  }
  if (qword_102419400 != -1) {
    dispatch_once(&qword_102419400, &stru_1022FDCB0);
  }
  BOOL v12 = qword_102419408;
  if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
  {
    int v14 = 68289026;
    int v15 = 0;
    __int16 v16 = 2082;
    id v17 = "";
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,AddListOfTileFiles,insufficient information\"}", (uint8_t *)&v14, 0x12u);
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022FDCB0);
    }
  }
  unint64_t v13 = qword_102419408;
  if (os_signpost_enabled((os_log_t)qword_102419408))
  {
    int v14 = 68289026;
    int v15 = 0;
    __int16 v16 = 2082;
    id v17 = "";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLRavenRayTracingTileClient,AddListOfTileFiles,insufficient information", "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,AddListOfTileFiles,insufficient information\"}", (uint8_t *)&v14, 0x12u);
  }
}

void sub_100E72710(uint64_t a1)
{
  if (*(void *)(a1 + 264))
  {
    if (*(unsigned char *)(a1 + 234))
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022FDCB0);
      }
      uint64_t v2 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 288) - *(void *)(a1 + 280)) >> 3);
        int v11 = 68289282;
        int v12 = 0;
        __int16 v13 = 2082;
        int v14 = "";
        __int16 v15 = 2050;
        unint64_t v16 = v3;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,ScheduleNextSerializeAndSend\", \"SizeOfListOfTileFiles\":%{public}ld}", (uint8_t *)&v11, 0x1Cu);
      }
      uint64_t v4 = *(void *)(a1 + 280);
      uint64_t v5 = *(void *)(a1 + 288);
    }
    else
    {
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022FDCB0);
      }
      unint64_t v8 = qword_102419408;
      if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = (uint64_t)(*(void *)(a1 + 336) - *(void *)(a1 + 328)) >> 3;
        int v11 = 68289282;
        int v12 = 0;
        __int16 v13 = 2082;
        int v14 = "";
        __int16 v15 = 2050;
        unint64_t v16 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,ScheduleNextSerializeAndSend\", \"SizeOfListOfTileFiles\":%{public}ld}", (uint8_t *)&v11, 0x1Cu);
      }
      uint64_t v4 = *(void *)(a1 + 328);
      uint64_t v5 = *(void *)(a1 + 336);
    }
    if (v4 == v5) {
      double v10 = 1.79769313e308;
    }
    else {
      double v10 = *(double *)(a1 + 272);
    }
    [*(id *)(a1 + 264) setNextFireDelay:v10];
  }
  else
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022FDCB0);
    }
    BOOL v6 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      int v11 = 68289026;
      int v12 = 0;
      __int16 v13 = 2082;
      int v14 = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,fSerializeAndSendScheduleTimer null\"}", (uint8_t *)&v11, 0x12u);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022FDCB0);
      }
    }
    unint64_t v7 = qword_102419408;
    if (os_signpost_enabled((os_log_t)qword_102419408))
    {
      int v11 = 68289026;
      int v12 = 0;
      __int16 v13 = 2082;
      int v14 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLRavenRayTracingTileClient,fSerializeAndSendScheduleTimer null", "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,fSerializeAndSendScheduleTimer null\"}", (uint8_t *)&v11, 0x12u);
    }
  }
}

void sub_100E72A04(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    _objc_release_x1();
  }
  else
  {
    if (qword_102419400 != -1) {
      dispatch_once(&qword_102419400, &stru_1022FDCB0);
    }
    uint64_t v2 = qword_102419408;
    if (os_log_type_enabled((os_log_t)qword_102419408, OS_LOG_TYPE_ERROR))
    {
      int v4 = 68289026;
      int v5 = 0;
      __int16 v6 = 2082;
      unint64_t v7 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,ReleaseTile,null pointer\"}", (uint8_t *)&v4, 0x12u);
      if (qword_102419400 != -1) {
        dispatch_once(&qword_102419400, &stru_1022FDCB0);
      }
    }
    unint64_t v3 = qword_102419408;
    if (os_signpost_enabled((os_log_t)qword_102419408))
    {
      int v4 = 68289026;
      int v5 = 0;
      __int16 v6 = 2082;
      unint64_t v7 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLRavenRayTracingTileClient,ReleaseTile,null pointer", "{\"msg%{public}.0s\":\"CLRavenRayTracingTileClient,ReleaseTile,null pointer\"}", (uint8_t *)&v4, 0x12u);
    }
  }
}

uint64_t sub_100E72BB4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 234);
}

void sub_100E72BBC(id a1)
{
  qword_102419408 = (uint64_t)os_log_create("com.apple.locationd.Position", "Raven");
}

void sub_100E72BEC(id a1)
{
  qword_102419438 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void *sub_100E72C1C(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  __int16 v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

std::string *sub_100E72CD0(uint64_t *a1, std::string *a2, std::string *a3, long long *a4, uint64_t a5)
{
  unint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 3)) >= a5)
      {
        unint64_t v21 = (long long *)&a3[a5];
      }
      else
      {
        unint64_t v21 = (long long *)(&a3->__r_.__value_.__l.__data_ + ((uint64_t)(v12 - (void)a2) >> 3));
        a1[1] = (uint64_t)sub_1000DC3CC(v9, v21, a4, *(char **)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      sub_10020E2D0((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[a5]);
      sub_10020E510(a3, (std::string *)v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v27 = v9;
      if (v18) {
        unint64_t v19 = (char *)sub_1000DA5D8(v9, v18);
      }
      else {
        unint64_t v19 = 0;
      }
      uint64_t v23 = v19;
      __int16 v24 = &v19[24 * v15];
      uint64_t v25 = v24;
      __int16 v26 = &v19[24 * v18];
      sub_10020E340(&v23, (long long *)a3, a5);
      unint64_t v5 = (std::string *)sub_10020E3D4((uint64_t)a1, &v23, (long long *)v5);
      sub_1001D8184((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_100E72E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E72E94()
{
  sub_100134750(qword_102481F48, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102481F48, (void *)&_mh_execute_header);
}

void sub_100E72FA4(id a1)
{
  qword_102481F78 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLSkiNotifierSilo"];
}

void sub_100E732CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E73330(id a1)
{
  if (sub_100C60EC0())
  {
    sub_100103240();
    if (sub_10010145C())
    {
      sub_100103240();
      if ((sub_1000A16E8() & 0x400000000) != 0) {
        byte_102481F88 = 1;
      }
    }
  }
}

void sub_100E73370(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100E733A0()
{
  sub_100134750(qword_102481F60, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102481F60, (void *)&_mh_execute_header);
}

void sub_100E73400(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *a2;
  sub_1000EF97C((uint64_t)v6, a3);
  [a4 onForcedLocationNotification:v5 data:v6];

  if (v11) {
    sub_1000DB0A0(v11);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    sub_1000DB0A0(v8);
  }
  if (v7) {
    sub_1000DB0A0(v7);
  }
}

void sub_100E73490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100E734A4(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4 = *a2;
  long long v5 = a3[9];
  v12[8] = a3[8];
  v12[9] = v5;
  long long v6 = a3[11];
  v12[10] = a3[10];
  v12[11] = v6;
  long long v7 = a3[5];
  v12[4] = a3[4];
  void v12[5] = v7;
  long long v8 = a3[7];
  v12[6] = a3[6];
  v12[7] = v8;
  long long v9 = a3[1];
  v12[0] = *a3;
  v12[1] = v9;
  long long v10 = a3[3];
  _DWORD v12[2] = a3[2];
  v12[3] = v10;
  return [a4 onCompanionConnectionNotification:v4 data:v12];
}

void sub_100E73C08()
{
}

BOOL sub_100E73D3C(uint64_t a1)
{
  if (qword_1024191E0 != -1) {
    dispatch_once(&qword_1024191E0, &stru_1022FDD50);
  }
  int8x8_t v2 = qword_1024191E8;
  if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "unsubscribing from Wifi notifications", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_1022FDD50);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLContextManagerAbsoluteAltimeter setupTimers]_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 48) + 16) unregister:*(void *)(*(void *)(*(void *)(a1 + 32) + 48) + 8) forNotification:1];
  *(unsigned char *)(*(void *)(a1 + 32) + 80) = 0;
  return sub_100EBC6AC(*(void *)(*(void *)(a1 + 32) + 112));
}

BOOL sub_100E73F10(uint64_t a1)
{
  if (qword_1024191E0 != -1) {
    dispatch_once(&qword_1024191E0, &stru_1022FDD50);
  }
  int8x8_t v2 = qword_1024191E8;
  if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "unsubscribing from GPS notifications", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_1022FDD50);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLContextManagerAbsoluteAltimeter setupTimers]_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 48) + 16) unregister:*(void *)(*(void *)(*(void *)(a1 + 32) + 48) + 8) forNotification:0];
  *(unsigned char *)(*(void *)(a1 + 32) + 81) = 0;
  return sub_100EBC6AC(*(void *)(*(void *)(a1 + 32) + 120));
}

void sub_100E74C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (v24) {
    sub_1000DB0A0(v24);
  }
  sub_1000DAF68(&a24);
  _Unwind_Resume(a1);
}

void sub_100E75250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000DAF68((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100E768DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, ...)
{
  va_start(va, a9);
  if (a9) {
    sub_1000DB0A0(a9);
  }
  if (v9) {
    sub_1000DB0A0(v9);
  }
  sub_1000DAF68((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100E7702C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E775E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  sub_1000DAF68((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100E78608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  sub_1000DAF68((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100E78B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000DAF68((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100E78F48(id a1)
{
  qword_1024191E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_100E78F78()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D92D08;
      v0[3] = unk_101D92D18;
      v0[4] = xmmword_101D92D28;
      v0[0] = xmmword_101D92CE8;
      v0[1] = unk_101D92CF8;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_100E79058(_Unwind_Exception *a1)
{
}

uint64_t sub_100E79070()
{
  sub_100134750(qword_102481F98, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102481F98, (void *)&_mh_execute_header);
}

void sub_100E791DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100E7921C(double *a1, double *a2, double *a3)
{
  double v3 = *a3;
  if (!*(void *)a3) {
    return 0;
  }
  long long v6 = (std::__shared_weak_count *)*((void *)a3 + 1);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v7 = (std::__shared_weak_count *)*((void *)a1 + 1);
  *a1 = v3;
  *((void *)a1 + 1) = v6;
  if (v7)
  {
    sub_1000DB0A0(v7);
    double v3 = *a1;
    long long v6 = (std::__shared_weak_count *)*((void *)a1 + 1);
  }
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v3 == 0.0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022FDD70);
    }
    uint64_t v11 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "CLMM, NULL road", buf, 2u);
    }
    double v9 = 0.0;
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_44;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
LABEL_80:
    }
      dispatch_once(&qword_102419430, &stru_1022FDD70);
    goto LABEL_18;
  }
  uint64_t v8 = (*(void *)(*(void *)&v3 + 144) - *(void *)(*(void *)&v3 + 136)) >> 4;
  if ((int)v8 <= 0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022FDD70);
    }
    uint64_t v13 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", buf, 2u);
    }
    double v9 = 0.0;
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_44;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_77;
    }
    goto LABEL_81;
  }
  double v9 = 0.0;
  if (v8 == 1)
  {
    char v10 = 1;
    goto LABEL_45;
  }
  sub_10039C4B4(*(void **)&v3);
  if (v8 - 1 != (uint64_t)(*(void *)(*(void *)&v3 + 168) - *(void *)(*(void *)&v3 + 160)) >> 3)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022FDD70);
    }
    unint64_t v21 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_44;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_77;
    }
    goto LABEL_81;
  }
  sub_10039C4B4(*(void **)&v3);
  unint64_t v14 = *(double **)(*(void *)&v3 + 160);
  unint64_t v15 = *(double **)(*(void *)&v3 + 168);
  if (v14 != v15)
  {
    double v16 = 0.0;
    int v17 = 2;
    uint64_t v18 = 24;
    while (1)
    {
      double v19 = *v14 / *(double *)(*(void *)&v3 + 40);
      if (vabdd_f64(0.5, v16 + v19) < 0.000001) {
        break;
      }
      if (v16 + v19 > 0.5)
      {
        uint64_t v37 = (double *)(*(void *)(*(void *)&v3 + 136) + v18);
        double v39 = *(v37 - 3);
        double v38 = *(v37 - 2);
        double v40 = *(v37 - 1);
        double v41 = sub_1011717B4(v38, *v37);
        double v42 = (0.5 - v16) / v19;
        sub_10005B720(v38 + v41 * v42);
        double v9 = v43;
        uint64_t v44 = (double *)(*(void *)(*(void *)&v3 + 136) + v18);
        double v45 = *(v44 - 3);
        double v46 = *(v44 - 2);
        double v47 = *(v44 - 1);
        double v48 = *v44;
        *(double *)int buf = 0.0;
        uint64_t v50 = 0;
        __y[0] = 0.0;
        sub_1000F17A8(a2, (double *)buf, __y, (double *)&v50, v45, v46, 0.0, v47, v48, 0.0);
        double v22 = v39 + (v40 - v39) * v42;
        goto LABEL_67;
      }
      ++v14;
      v18 += 16;
      ++v17;
      double v16 = v16 + v19;
      if (v14 == v15) {
        goto LABEL_32;
      }
    }
    if (v17 < (int)v8)
    {
      __int16 v26 = (double *)(*(void *)(*(void *)&v3 + 136) + v18);
      double v22 = *(v26 - 1);
      double v9 = *v26;
      double v27 = *(v26 - 3);
      double v28 = *(v26 - 2);
      *(double *)int buf = 0.0;
      uint64_t v50 = 0;
      __y[0] = 0.0;
      sub_1000F17A8(a2, (double *)buf, __y, (double *)&v50, v27, v28, 0.0, v22, v9, 0.0);
      long double v29 = __y[0];
      long double v30 = *(double *)buf;
      uint64_t v31 = *(void *)(*(void *)&v3 + 136) + v18;
      double v32 = *(double *)(v31 + 8);
      double v33 = *(double *)(v31 + 16);
      *(double *)int buf = 0.0;
      uint64_t v50 = 0;
      __y[0] = 0.0;
      sub_1000F17A8(a2, (double *)buf, __y, (double *)&v50, v22, v9, 0.0, v32, v33, 0.0);
      double v34 = atan2(v29, v30);
      if (v34 < 0.0) {
        double v34 = v34 + 6.28318531;
      }
      double v35 = v34 * 57.2957795;
      double v36 = atan2(__y[0], *(long double *)buf);
      if (v36 < 0.0) {
        double v36 = v36 + 6.28318531;
      }
      sub_1004BAC08(v35, v36 * 57.2957795);
LABEL_67:
      char v10 = 1;
      if (v6) {
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022FDD70);
    }
    float64x2_t v49 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", buf, 2u);
    }
    double v9 = 0.0;
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_44;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      goto LABEL_80;
    }
LABEL_18:
    LOWORD(__y[0]) = 0;
    id v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v12);
    goto LABEL_78;
  }
LABEL_32:
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1022FDD70);
  }
  uint64_t v20 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", buf, 2u);
  }
  if (!sub_10013D1A0(115, 2)) {
    goto LABEL_44;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102419430 != -1) {
LABEL_81:
  }
    dispatch_once(&qword_102419430, &stru_1022FDD70);
LABEL_77:
  LOWORD(__y[0]) = 0;
  id v12 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v12);
LABEL_78:
  if (v12 != (char *)buf) {
    free(v12);
  }
LABEL_44:
  char v10 = 0;
LABEL_45:
  double v22 = 0.0;
  if (v6) {
LABEL_46:
  }
    sub_1000DB0A0(v6);
LABEL_47:
  if (v10)
  {
    a1[3] = v22;
    a1[4] = v9;
    return 1;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1022FDD70);
  }
  __int16 v24 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "CLTSP,Unable to find mid-point", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022FDD70);
    }
    LOWORD(__y[0]) = 0;
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRouteRoad::initialize(CLDistanceCalc &, const CLMapRoadPtr)", "%s\n", v25);
    if (v25 != (char *)buf) {
      free(v25);
    }
    return 0;
  }
  return result;
}

void sub_100E79BF4(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100E79C14(uint64_t *a1, uint64_t **a2)
{
  double v3 = *a2;
  if (!v3) {
    return 0;
  }
  uint64_t result = *a1;
  if (result)
  {
    if (*(unsigned char *)(result + 116)
      || (~*(_DWORD *)(result + 108) & 0x7FFFFFFF) == 0
      || *(unsigned char *)(result + 117)
      || (~*(_DWORD *)(result + 112) & 0x7FFFFFFF) == 0
      || *(unsigned char *)(*v3 + 116))
    {
      return sub_10039D530(result, v3);
    }
    else
    {
      int v6 = *(_DWORD *)(*v3 + 108);
      uint64_t result = sub_10039D530(result, v3);
      if (result && (v6 & 0x7FFFFFFF) != 0x7FFFFFFF)
      {
        int v7 = *(_DWORD *)(**a2 + 108);
        return *(_DWORD *)(*a1 + 108) == v7 || *(_DWORD *)(*a1 + 112) == v7;
      }
    }
  }
  return result;
}

uint64_t sub_100E79CFC(uint64_t *a1, uint64_t **a2)
{
  double v3 = *a2;
  if (!v3) {
    return 0;
  }
  uint64_t result = *a1;
  if (result)
  {
    if (*(unsigned char *)(result + 116)
      || (~*(_DWORD *)(result + 108) & 0x7FFFFFFF) == 0
      || *(unsigned char *)(result + 117)
      || (~*(_DWORD *)(result + 112) & 0x7FFFFFFF) == 0
      || *(unsigned char *)(*v3 + 117))
    {
      return sub_10039D594(result, v3);
    }
    else
    {
      int v6 = *(_DWORD *)(*v3 + 112);
      uint64_t result = sub_10039D594(result, v3);
      if (result && (v6 & 0x7FFFFFFF) != 0x7FFFFFFF)
      {
        int v7 = *(_DWORD *)(**a2 + 112);
        return *(_DWORD *)(*a1 + 108) == v7 || *(_DWORD *)(*a1 + 112) == v7;
      }
    }
  }
  return result;
}

uint64_t sub_100E79DE4(uint64_t *a1, uint64_t **a2)
{
  double v3 = *a2;
  if (!v3) {
    return 0;
  }
  uint64_t result = *a1;
  if (result)
  {
    if (*(unsigned char *)(result + 116)
      || (~*(_DWORD *)(result + 108) & 0x7FFFFFFF) == 0
      || (uint64_t v6 = *v3, *(unsigned char *)(*v3 + 116))
      || (~*(_DWORD *)(v6 + 108) & 0x7FFFFFFF) == 0
      || *(unsigned char *)(v6 + 117))
    {
      return sub_10039D5F8(result, v3);
    }
    else
    {
      int v7 = *(_DWORD *)(v6 + 112);
      uint64_t result = sub_10039D5F8(result, v3);
      if (result && (v7 & 0x7FFFFFFF) != 0x7FFFFFFF)
      {
        int v8 = *(_DWORD *)(*a1 + 108);
        uint64_t v9 = **a2;
        return v8 == *(_DWORD *)(v9 + 108) || v8 == *(_DWORD *)(v9 + 112);
      }
    }
  }
  return result;
}

uint64_t sub_100E79ED0(uint64_t *a1, uint64_t **a2)
{
  double v3 = *a2;
  if (!v3) {
    return 0;
  }
  uint64_t result = *a1;
  if (result)
  {
    if (*(unsigned char *)(result + 117)
      || (~*(_DWORD *)(result + 112) & 0x7FFFFFFF) == 0
      || (uint64_t v6 = *v3, *(unsigned char *)(*v3 + 116))
      || (~*(_DWORD *)(v6 + 108) & 0x7FFFFFFF) == 0
      || *(unsigned char *)(v6 + 117))
    {
      return sub_10039D65C(result, v3);
    }
    else
    {
      int v7 = *(_DWORD *)(v6 + 112);
      uint64_t result = sub_10039D65C(result, v3);
      if (result && (v7 & 0x7FFFFFFF) != 0x7FFFFFFF)
      {
        int v8 = *(_DWORD *)(*a1 + 112);
        uint64_t v9 = **a2;
        return v8 == *(_DWORD *)(v9 + 108) || v8 == *(_DWORD *)(v9 + 112);
      }
    }
  }
  return result;
}

double sub_100E79FBC(uint64_t a1, int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  if (v3 == a2) {
    double v5 = sub_10039CED4(v4);
  }
  else {
    double v5 = sub_10039CCA0(v4);
  }
  double v6 = 180.0;
  if (*(unsigned char *)(a1 + 16)) {
    double v6 = 0.0;
  }
  return v5 - v6;
}

void sub_100E7A014(uint64_t a1, uint64_t **a2)
{
  if (*a2)
  {
    uint64_t v2 = **a2;
    if (v2)
    {
      unint64_t v8 = *(void *)(v2 + 8);
      uint64_t v9 = &v8;
      uint64_t v4 = sub_100E7D2BC(a1, &v8, (uint64_t)&unk_101D0B290, &v9);
      double v6 = *a2;
      double v5 = a2[1];
      if (v5) {
        atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
      }
      int v7 = (std::__shared_weak_count *)v4[4];
      void v4[3] = v6;
      void v4[4] = v5;
      if (v7) {
        sub_1000DB0A0(v7);
      }
    }
  }
}

uint64_t *sub_100E7A09C(uint64_t *result, uint64_t **a2)
{
  if (*a2)
  {
    uint64_t v2 = **a2;
    if (v2)
    {
      int v3 = result;
      if (result[3])
      {
        unint64_t v5 = *(void *)(v2 + 8);
        uint64_t result = sub_1006BCC18(result, &v5);
        if (result)
        {
          unint64_t v5 = *(void *)(**a2 + 8);
          return sub_100E7D50C(v3, &v5);
        }
      }
    }
  }
  return result;
}

BOOL sub_100E7A114(uint64_t a1, void *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v4) {
    sub_1000DB0A0(v4);
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  unint64_t v5 = *(void **)(a1 + 16);
  if (v5)
  {
    double v6 = -1.0;
    while (1)
    {
      uint64_t v7 = v5[3];
      if (v6 < 0.0) {
        break;
      }
      if (v7)
      {
        double v8 = *(double *)(v7 + 56) + *(double *)(v7 + 64);
        if (v8 < v6) {
          goto LABEL_10;
        }
      }
LABEL_15:
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        return v6 >= 0.0;
      }
    }
    double v8 = *(double *)(v7 + 56) + *(double *)(v7 + 64);
LABEL_10:
    uint64_t v9 = v5[4];
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    char v10 = (std::__shared_weak_count *)a2[1];
    *a2 = v7;
    a2[1] = v9;
    if (v10) {
      sub_1000DB0A0(v10);
    }
    double v6 = v8;
    goto LABEL_15;
  }
  double v6 = -1.0;
  return v6 >= 0.0;
}

void *sub_100E7A1E0@<X0>(void *result@<X0>, uint64_t **a2@<X1>, void *a3@<X8>)
{
  if (*a2
    && (uint64_t v4 = **a2) != 0
    && (uint64_t v6 = (uint64_t)result,
        uint64_t v9 = *(unint64_t **)(v4 + 8),
        (uint64_t result = sub_1006BCC18(result, (unint64_t *)&v9)) != 0))
  {
    unint64_t v8 = *(void *)(**a2 + 8);
    uint64_t v9 = &v8;
    uint64_t result = sub_100E7D2BC(v6, &v8, (uint64_t)&unk_101D0B290, &v9);
    uint64_t v7 = result[4];
    *a3 = result[3];
    a3[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void **sub_100E7A290(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    unint64_t v14 = (char *)sub_1000C571C((uint64_t)result, v13);
    unint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)unint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    sub_100E7D680(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = sub_1000C5898(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_100E7A398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000C5898((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E7A3AC(uint64_t a1, double *a2, void *a3, void **a4, uint64_t *a5, double *a6, uint64_t a7, unsigned __int8 a8, double a9, double a10, double a11)
{
  if (*a5)
  {
    sub_1000C59A8((uint64_t *)a1);
    double v170 = sub_10016C458();
    ++*(_DWORD *)(a1 + 48);
    if (*a3 && a10 <= 1.0 && a10 >= 0.0 && a11 <= 1.0 && a11 >= 0.0 && *a4)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022FDD70);
      }
      double v22 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v23 = *(void *)(*a3 + 8);
        uint64_t v24 = (*a4)[1];
        *(_DWORD *)int buf = 134349568;
        *(double *)&uint8_t buf[4] = a9;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)__n128 v195 = v23;
        *(_WORD *)&v195[8] = 2050;
        *(void *)&v195[10] = v24;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,constructing between,start,%{public}lld,stop,%{public}lld", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022FDD70);
        }
        uint64_t v140 = *(void *)(*a3 + 8);
        uint64_t v141 = (*a4)[1];
        int v187 = 134349568;
        *(double *)__n128 v188 = a9;
        *(_WORD *)&v188[8] = 2050;
        *(void *)__n128 v189 = v140;
        *(_WORD *)&v189[8] = 2050;
        *(void *)&v189[10] = v141;
        long double v142 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v142);
        if (v142 != buf) {
          free(v142);
        }
      }
      uint64_t v25 = (char *)operator new(0x68uLL);
      *((void *)v25 + 1) = 0;
      *((void *)v25 + 2) = 0;
      *(void *)uint64_t v25 = off_1022FDDA0;
      *((void *)v25 + 3) = 0;
      *((void *)v25 + 4) = 0;
      *((void *)v25 + 5) = 0;
      v25[40] = 1;
      *((_OWORD *)v25 + 3) = 0u;
      *((_OWORD *)v25 + 4) = 0u;
      *((_OWORD *)v25 + 5) = 0u;
      *((void *)v25 + 12) = 0;
      *(void *)&long long v186 = v25 + 24;
      *((void *)&v186 + 1) = v25;
      __int16 v26 = (std::__shared_weak_count *)a3[1];
      v185[0] = *(double *)a3;
      *(void *)&v185[1] = v26;
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v27 = sub_100E7921C((double *)v25 + 3, a2, v185);
      if (v26) {
        sub_1000DB0A0(v26);
      }
      if (!v27)
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022FDD70);
        }
        double v39 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 134349056;
          *(double *)&uint8_t buf[4] = a9;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,unable to init startRouteRoad", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1022FDD70);
          }
          int v187 = 134349056;
          *(double *)__n128 v188 = a9;
          long double v143 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v143);
          if (v143 != buf) {
            free(v143);
          }
        }
        char v37 = 0;
        ++*(_DWORD *)(a1 + 52);
        goto LABEL_246;
      }
      double v28 = (char *)operator new(0x68uLL);
      *((void *)v28 + 1) = 0;
      *((void *)v28 + 2) = 0;
      *(void *)double v28 = off_1022FDDA0;
      *((void *)v28 + 3) = 0;
      *((void *)v28 + 4) = 0;
      *((void *)v28 + 5) = 0;
      v28[40] = 1;
      *((_OWORD *)v28 + 3) = 0u;
      *((_OWORD *)v28 + 4) = 0u;
      *((_OWORD *)v28 + 5) = 0u;
      *((void *)v28 + 12) = 0;
      *(void *)&long long v184 = v28 + 24;
      *((void *)&v184 + 1) = v28;
      long double v29 = (std::__shared_weak_count *)a4[1];
      *(void *)&v183[0] = *a4;
      *(void *)&v183[1] = v29;
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v30 = sub_100E7921C((double *)v28 + 3, a2, v183);
      if (v29) {
        sub_1000DB0A0(v29);
      }
      if (!v30)
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022FDD70);
        }
        double v40 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 134349056;
          *(double *)&uint8_t buf[4] = a9;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,unable to init destinationRouteRoad", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1022FDD70);
          }
          int v187 = 134349056;
          *(double *)__n128 v188 = a9;
          __int16 v144 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v144);
          if (v144 != buf) {
            free(v144);
          }
        }
        char v37 = 0;
        ++*(_DWORD *)(a1 + 52);
        goto LABEL_244;
      }
      uint64_t v31 = (void *)*a3;
      uint64_t v32 = (uint64_t)*a4;
      if (*(void *)*a3 == **a4 && v31[1] == *(void *)(v32 + 8))
      {
        sub_100E7A290((uint64_t *)a1, &v186);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022FDD70);
        }
        double v33 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 134349056;
          *(double *)&uint8_t buf[4] = a9;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,routeConstructor,start road is same as destination road", buf, 0xCu);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_66;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 == -1)
        {
LABEL_276:
          int v187 = 134349056;
          *(double *)__n128 v188 = a9;
          __n128 v145 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v145);
          if (v145 != buf) {
            free(v145);
          }
LABEL_66:
          char v37 = 1;
LABEL_244:
          if (*((void *)&v184 + 1)) {
            sub_1000DB0A0(*((std::__shared_weak_count **)&v184 + 1));
          }
LABEL_246:
          if (*((void *)&v186 + 1)) {
            sub_1000DB0A0(*((std::__shared_weak_count **)&v186 + 1));
          }
          return v37 & 1;
        }
      }
      else
      {
        uint64_t v41 = v31[18];
        double v42 = 0.0;
        double v43 = 0.0;
        double v44 = 0.0;
        if (v41 != v31[17])
        {
          double v43 = *(double *)(v41 - 16);
          double v44 = *(double *)(v41 - 8);
        }
        uint64_t v46 = v32 + 136;
        double v45 = *(double **)(v32 + 136);
        double v47 = 0.0;
        if (*(double **)(v46 + 8) != v45)
        {
          double v42 = *v45;
          double v47 = v45[1];
        }
        if (!sub_1004BABDC(v43, v44, v42, v47, 0.0000001))
        {
          if (sub_1000EF668(*a6, a6[1]) && (a6 = (double *)(*a4)[17], a11 = 0.0, (double *)(*a4)[18] == a6))
          {
            double v49 = 0.0;
            double v50 = 0.0;
          }
          else
          {
            double v49 = *a6;
            double v50 = a6[1];
          }
          uint64_t v51 = *(void *)(*a3 + 144);
          if (v51 == *(void *)(*a3 + 136))
          {
            double v52 = 0.0;
            double v53 = 0.0;
          }
          else
          {
            double v52 = *(double *)(v51 - 16);
            double v53 = *(double *)(v51 - 8);
          }
          long double v54 = sub_1000F1648(a2, v52, v53, v49, v50, 0.0);
          long long v180 = 0u;
          long long v181 = 0u;
          int v182 = 1065353216;
          memset(v178, 0, sizeof(v178));
          int v179 = 1065353216;
          *(long double *)(v186 + 64) = v54;
          sub_100E7A014((uint64_t)&v180, (uint64_t **)&v186);
          char v169 = 0;
          int v55 = 0;
          long long v177 = 0uLL;
          uint64_t v56 = a8;
          while (v55 != 1500)
          {
            HIDWORD(v58) = -1775253149 * (unsigned __int16)++v55;
            LODWORD(v58) = HIDWORD(v58);
            if ((v58 >> 1) <= 0x1B4E81B) {
              sub_100D205A0(*a5);
            }
            if (!sub_100E7A114((uint64_t)&v180, &v177) || !(void)v177 || (float64x2_t v59 = *(void **)v177) == 0)
            {
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1022FDD70);
              }
              long long v98 = qword_102419438;
              if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)int buf = 134349568;
                *(double *)&uint8_t buf[4] = a9;
                *(_WORD *)&unsigned char buf[12] = 1026;
                *(_DWORD *)__n128 v195 = v55;
                *(_WORD *)&v195[4] = 2050;
                *(void *)&v195[6] = *((void *)&v181 + 1);
                _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,did not find best path,iterations,%{public}d,openSet,%{public}lu", buf, 0x1Cu);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419430 != -1) {
                  dispatch_once(&qword_102419430, &stru_1022FDD70);
                }
                int v187 = 134349568;
                *(double *)__n128 v188 = a9;
                *(_WORD *)&v188[8] = 1026;
                *(_DWORD *)__n128 v189 = v55;
                *(_WORD *)&v189[4] = 2050;
                *(void *)&v189[6] = *((void *)&v181 + 1);
                long long v99 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v99);
                goto LABEL_293;
              }
              goto LABEL_178;
            }
            if ((void)v184 && *v59 == **(void **)v184 && v59[1] == *(void *)(*(void *)v184 + 8))
            {
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1022FDD70);
              }
              double v134 = qword_102419438;
              if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
              {
                int v135 = *(_DWORD *)(a1 + 32);
                *(_DWORD *)int buf = 134349568;
                *(double *)&uint8_t buf[4] = a9;
                *(_WORD *)&unsigned char buf[12] = 1026;
                *(_DWORD *)__n128 v195 = v135;
                *(_WORD *)&v195[4] = 2050;
                *(void *)&v195[6] = *((void *)&v181 + 1);
                _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,aStarConstructPedestrian,best path found is the destinationPath - search complete!,iterations,%{public}d,openSet,%{public}lu", buf, 0x1Cu);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419430 != -1) {
                  dispatch_once(&qword_102419430, &stru_1022FDD70);
                }
                int v164 = *(_DWORD *)(a1 + 32);
                int v187 = 134349568;
                *(double *)__n128 v188 = a9;
                *(_WORD *)&v188[8] = 1026;
                *(_DWORD *)__n128 v189 = v164;
                *(_WORD *)&v189[4] = 2050;
                *(void *)&v189[6] = *((void *)&v181 + 1);
                __n128 v165 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v165);
                if (v165 != buf) {
                  free(v165);
                }
              }
              char v169 = 0;
              goto LABEL_179;
            }
            __n128 v174 = 0;
            long long v175 = 0;
            uint64_t v176 = 0;
            sub_100D24064(*a5, (uint64_t *)v177, (uint64_t *)&v174, 1);
            long long v171 = 0;
            long long v172 = 0;
            uint64_t v173 = 0;
            sub_100D248EC(*a5, (uint64_t *)v177, (uint64_t *)&v171, 1);
            sub_100D2CEF4((uint64_t *)&v174, v175, v171, v172, (v172 - (char *)v171) >> 4);
            __n128 v167 = v175;
            __n128 v168 = (uint64_t *)v174;
            if (v174 != v175)
            {
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1022FDD70);
              }
              double v60 = qword_102419438;
              if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v61 = *(void *)(*(void *)v177 + 8);
                double v62 = *(double *)(v177 + 64);
                *(void *)long long v196 = *(void *)(v177 + 56);
                *(double *)__n128 v197 = v62;
                *(_DWORD *)int buf = 134350593;
                *(double *)&uint8_t buf[4] = a9;
                *(_WORD *)&unsigned char buf[12] = 2049;
                *(void *)__n128 v195 = v61;
                *(_WORD *)&v195[8] = 2050;
                *(void *)&v195[10] = (v175 - v174) >> 4;
                *(_WORD *)&v195[18] = 2050;
                *(_WORD *)&v196[8] = 2050;
                *(_WORD *)&v197[8] = 2050;
                *(double *)__n128 v198 = *(double *)v196 + v62;
                *(_WORD *)&v198[8] = 1026;
                int v199 = v55;
                _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,found neighbors for %{private}lld,size,%{public}lu,g,%{public}.2lf,h,%{public}.2lf,cost,%{public}.2lf,iterationCount,%{public}d", buf, 0x44u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419430 != -1) {
                  dispatch_once(&qword_102419430, &stru_1022FDD70);
                }
                uint64_t v92 = *(void *)(*(void *)v177 + 8);
                double v93 = *(double *)(v177 + 64);
                *(void *)__n128 v190 = *(void *)(v177 + 56);
                *(double *)__n128 v191 = v93;
                int v187 = 134350593;
                *(double *)__n128 v188 = a9;
                *(_WORD *)&v188[8] = 2049;
                *(void *)__n128 v189 = v92;
                *(_WORD *)&v189[8] = 2050;
                *(void *)&v189[10] = (v175 - v174) >> 4;
                *(_WORD *)&v189[18] = 2050;
                *(_WORD *)&v190[8] = 2050;
                *(_WORD *)&v191[8] = 2050;
                *(double *)long long v192 = *(double *)v190 + v93;
                *(_WORD *)&v192[8] = 1026;
                int v193 = v55;
                int v94 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v94);
                if (v94 != buf) {
                  free(v94);
                }
              }
              sub_100E7A09C((uint64_t *)&v180, (uint64_t **)&v177);
              int v166 = v55;
              double v64 = (uint64_t *)v174;
              double v63 = v175;
              while (2)
              {
                if (v64 == (uint64_t *)v63)
                {
LABEL_147:
                  sub_100E7A014((uint64_t)v178, (uint64_t **)&v177);
                  int v55 = v166;
                  goto LABEL_148;
                }
                double v65 = (void *)*v64;
                if (!*v64)
                {
                  if (qword_102419430 != -1) {
                    dispatch_once(&qword_102419430, &stru_1022FDD70);
                  }
                  unint64_t v91 = qword_102419438;
                  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)int buf = 134349056;
                    *(double *)&uint8_t buf[4] = a9;
                    _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,neighbor road is nullptr", buf, 0xCu);
                  }
                  if (sub_10013D1A0(115, 0))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_102419430 != -1) {
                      dispatch_once(&qword_102419430, &stru_1022FDD70);
                    }
                    int v187 = 134349056;
                    *(double *)__n128 v188 = a9;
                    long long v97 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v97);
                    if (v97 != buf) {
                      free(v97);
                    }
                  }
                  char v169 = 1;
                  goto LABEL_147;
                }
                if (*v65 == **a4)
                {
                  uint64_t v66 = v65[1];
                  double v67 = (uint64_t *)v177;
                  if (v66 == (*a4)[1])
                  {
                    BOOL v68 = sub_10039D530(*(void *)v177, v64);
                    uint64_t v69 = (uint64_t)*a4;
                    if (v68)
                    {
                      sub_10039C4B4(*a4);
                      double v70 = a11 * *(double *)(v69 + 40);
                    }
                    else
                    {
                      sub_10039C4B4(*a4);
                      double v70 = (1.0 - a11) * *(double *)(v69 + 40);
                    }
LABEL_113:
                    uint64_t v79 = *(void *)v177;
                    sub_10039C4B4(*(void **)v177);
                    double v80 = *(double *)(v79 + 40);
                    if ((void)v186)
                    {
                      unint64_t v81 = *(void **)v177;
                      if (*(void *)v177)
                      {
                        if (*v81 == **(void **)v186 && v81[1] == *(void *)(*(void *)v186 + 8))
                        {
                          BOOL v82 = sub_10039D5F8((uint64_t)v81, v64);
                          uint64_t v83 = *(void *)v177;
                          if (v82)
                          {
                            sub_10039C4B4(*(void **)v177);
                            double v84 = *(double *)(v83 + 40);
                            double v85 = a10;
                          }
                          else
                          {
                            sub_10039C4B4(*(void **)v177);
                            double v85 = *(double *)(v83 + 40);
                            double v84 = 1.0 - a10;
                          }
                          double v80 = v84 * v85;
                        }
                      }
                    }
                    double v86 = v70 + v80 + *(double *)(v177 + 56);
                    if (!v56 || v86 <= *(double *)&a7) {
                      operator new();
                    }
                    if (qword_102419430 != -1) {
                      dispatch_once(&qword_102419430, &stru_1022FDD70);
                    }
                    double v87 = qword_102419438;
                    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)int buf = 134349568;
                      *(double *)&uint8_t buf[4] = a9;
                      *(_WORD *)&unsigned char buf[12] = 2050;
                      *(double *)__n128 v195 = v86;
                      *(_WORD *)&v195[8] = 2050;
                      *(void *)&v195[10] = a7;
                      _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "CLTSP,CLRS,%{public}.1lf,Warning,cost exceeds maximum tolerable cost,cost,%{public}.1lf,maxTolerableCostInMeters,%{public}.1lf", buf, 0x20u);
                    }
                    if (sub_10013D1A0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_102419430 != -1) {
                        dispatch_once(&qword_102419430, &stru_1022FDD70);
                      }
                      int v187 = 134349568;
                      *(double *)__n128 v188 = a9;
                      *(_WORD *)&v188[8] = 2050;
                      *(double *)__n128 v189 = v86;
                      *(_WORD *)&v189[8] = 2050;
                      *(void *)&v189[10] = a7;
                      double v88 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v88);
                      if (v88 != buf) {
                        free(v88);
                      }
                    }
                    v64 += 2;
                    continue;
                  }
                }
                else
                {
                  double v67 = (uint64_t *)v177;
                }
                break;
              }
              BOOL v71 = sub_10039D530(*v67, v64);
              uint64_t v72 = *(void *)(*v64 + 144);
              if (v72 == *(void *)(*v64 + 136))
              {
                double v73 = 0.0;
                double v74 = 0.0;
              }
              else
              {
                double v73 = *(double *)(v72 - 16);
                double v74 = *(double *)(v72 - 8);
              }
              double v70 = sub_1000F1648(a2, v73, v74, v49, v50, 0.0);
              double v75 = *(double **)(*v64 + 136);
              if (*(double **)(*v64 + 144) == v75)
              {
                double v76 = 0.0;
                double v77 = 0.0;
              }
              else
              {
                double v76 = *v75;
                double v77 = v75[1];
              }
              double v78 = sub_1000F1648(a2, v76, v77, v49, v50, 0.0);
              if (!v71) {
                double v70 = v78;
              }
              goto LABEL_113;
            }
            ++*(_DWORD *)(a1 + 60);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1022FDD70);
            }
            float32_t v89 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
            {
              int v90 = *(_DWORD *)(a1 + 32);
              *(_DWORD *)int buf = 134349568;
              *(double *)&uint8_t buf[4] = a9;
              *(_WORD *)&unsigned char buf[12] = 1026;
              *(_DWORD *)__n128 v195 = v90;
              *(_WORD *)&v195[4] = 2050;
              *(void *)&v195[6] = *((void *)&v181 + 1);
              _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,aStarConstruct,road connections not available,%{public}d,openSet,%{public}lu", buf, 0x1Cu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1022FDD70);
              }
              int v95 = *(_DWORD *)(a1 + 32);
              int v187 = 134349568;
              *(double *)__n128 v188 = a9;
              *(_WORD *)&v188[8] = 1026;
              *(_DWORD *)__n128 v189 = v95;
              *(_WORD *)&v189[4] = 2050;
              *(void *)&v189[6] = *((void *)&v181 + 1);
              long long v96 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v96);
              if (v96 != buf) {
                free(v96);
              }
              char v169 = 1;
            }
            else
            {
              char v169 = 1;
            }
LABEL_148:
            *(void *)int buf = &v171;
            sub_1000C5954((void ***)buf);
            *(void *)int buf = &v174;
            sub_1000C5954((void ***)buf);
            if (v168 != (uint64_t *)v167)
            {
              if (!(void)v177) {
                continue;
              }
              if ((a11 != 1.0 || (sub_100E79CFC((uint64_t *)v177, (uint64_t **)&v184) & 1) == 0)
                && (a11 != 0.0 || (sub_100E79C14((uint64_t *)v177, (uint64_t **)&v184) & 1) == 0))
              {
                if (!(void)v184) {
                  continue;
                }
                double v57 = *(void **)v177;
                if (!*(void *)v177 || *v57 != **(void **)v184 || v57[1] != *(void *)(*(void *)v184 + 8)) {
                  continue;
                }
              }
            }
            goto LABEL_179;
          }
          ++*(_DWORD *)(a1 + 28);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1022FDD70);
          }
          long long v100 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 134349568;
            *(double *)&uint8_t buf[4] = a9;
            *(_WORD *)&unsigned char buf[12] = 1026;
            *(_DWORD *)__n128 v195 = 1501;
            *(_WORD *)&v195[4] = 1026;
            *(_DWORD *)&v195[6] = 1500;
            _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,A* Search iterations,%{public}d,exceeded max,%{public}d", buf, 0x18u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1022FDD70);
            }
            int v187 = 134349568;
            *(double *)__n128 v188 = a9;
            *(_WORD *)&v188[8] = 1026;
            *(_DWORD *)__n128 v189 = 1501;
            *(_WORD *)&v189[4] = 1026;
            *(_DWORD *)&v189[6] = 1500;
            long long v99 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v99);
LABEL_293:
            if (v99 != buf) {
              free(v99);
            }
          }
LABEL_178:
          char v169 = 1;
LABEL_179:
          sub_100D205A0(*a5);
          long long v175 = 0;
          uint64_t v176 = 0;
          __n128 v174 = (char *)&v175;
          uint64_t v101 = v177;
          if (!(v169 & 1 | ((void)v177 == 0)))
          {
            int v123 = 501;
            while (1)
            {
              if (!*(void *)(v101 + 40)) {
                goto LABEL_180;
              }
              if (!--v123) {
                break;
              }
              float64x2_t v124 = *(unint64_t **)v101;
              if (!*(void *)v101)
              {
                if (qword_102419430 != -1) {
                  dispatch_once(&qword_102419430, &stru_1022FDD70);
                }
                int64x2_t v130 = qword_102419438;
                if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)int buf = 134349056;
                  *(double *)&uint8_t buf[4] = a9;
                  _os_log_impl((void *)&_mh_execute_header, v130, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,A* Search null road", buf, 0xCu);
                }
                if (sub_10013D1A0(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102419430 != -1) {
                    dispatch_once(&qword_102419430, &stru_1022FDD70);
                  }
                  int v187 = 134349056;
                  *(double *)__n128 v188 = a9;
                  long long v161 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v161);
                  if (v161 != buf) {
                    free(v161);
                  }
                }
                double v129 = 0.0;
                if (v170 < 0.0) {
                  goto LABEL_240;
                }
                goto LABEL_239;
              }
              if (sub_100D2AF70((uint64_t)&v174, *(unint64_t **)v101))
              {
                if (qword_102419430 != -1) {
                  dispatch_once(&qword_102419430, &stru_1022FDD70);
                }
                uint64_t v131 = qword_102419438;
                if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v132 = *(void *)(*(void *)v177 + 8);
                  *(_DWORD *)int buf = 134349313;
                  *(double *)&uint8_t buf[4] = a9;
                  *(_WORD *)&unsigned char buf[12] = 2049;
                  *(void *)__n128 v195 = v132;
                  _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,A* Search road already added,%{private}lld", buf, 0x16u);
                }
                if (sub_10013D1A0(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102419430 != -1) {
                    dispatch_once(&qword_102419430, &stru_1022FDD70);
                  }
                  uint64_t v162 = *(void *)(*(void *)v177 + 8);
                  int v187 = 134349313;
                  *(double *)__n128 v188 = a9;
                  *(_WORD *)&v188[8] = 2049;
                  *(void *)__n128 v189 = v162;
                  long long v163 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v163);
                  if (v163 != buf) {
                    free(v163);
                  }
                }
                double v129 = 0.0;
                if (v170 >= 0.0) {
                  goto LABEL_239;
                }
LABEL_240:
                char v37 = 0;
                *(double *)(a1 + 40) = v129;
                *(double *)(a1 + 64) = v129 + *(double *)(a1 + 64);
                goto LABEL_241;
              }
              sub_100E7A290((uint64_t *)a1, &v177);
              *(void *)int buf = v124;
              *((unsigned char *)sub_100D2DF34((uint64_t **)&v174, v124, (uint64_t)&unk_101D0B290, (_OWORD **)buf) + 48) = 1;
              uint64_t v126 = *(void *)(v177 + 40);
              uint64_t v125 = *(void *)(v177 + 48);
              if (v125) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v125 + 8), 1uLL, memory_order_relaxed);
              }
              long long v127 = (std::__shared_weak_count *)*((void *)&v177 + 1);
              *(void *)&long long v177 = v126;
              *((void *)&v177 + 1) = v125;
              if (v127) {
                sub_1000DB0A0(v127);
              }
              uint64_t v101 = v177;
              if (!(void)v177) {
                goto LABEL_180;
              }
            }
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1022FDD70);
            }
            float64x2_t v128 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 134349568;
              *(double *)&uint8_t buf[4] = a9;
              *(_WORD *)&unsigned char buf[12] = 1026;
              *(_DWORD *)__n128 v195 = 501;
              *(_WORD *)&v195[4] = 1026;
              *(_DWORD *)&v195[6] = 500;
              _os_log_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,A* Search road count,%{public}d,exceeded max,%{public}d", buf, 0x18u);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1022FDD70);
              }
              int v187 = 134349568;
              *(double *)__n128 v188 = a9;
              *(_WORD *)&v188[8] = 1026;
              *(_DWORD *)__n128 v189 = 501;
              *(_WORD *)&v189[4] = 1026;
              *(_DWORD *)&v189[6] = 500;
              long long v160 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v160);
              if (v160 != buf) {
                free(v160);
              }
            }
            double v129 = 0.0;
            if (v170 < 0.0) {
              goto LABEL_240;
            }
LABEL_239:
            double v129 = vabdd_f64(sub_10016C458(), v170) * 1000.0;
            goto LABEL_240;
          }
LABEL_180:
          if (!sub_100D2AF70((uint64_t)&v174, *(unint64_t **)v186))
          {
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1022FDD70);
            }
            float64x2_t v102 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v103 = *(void *)(*(void *)v186 + 8);
              *(_DWORD *)int buf = 134349312;
              *(double *)&uint8_t buf[4] = a9;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)__n128 v195 = v103;
              _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,added first road,%lld", buf, 0x16u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1022FDD70);
              }
              uint64_t v156 = *(void *)(*(void *)v186 + 8);
              int v187 = 134349312;
              *(double *)__n128 v188 = a9;
              *(_WORD *)&v188[8] = 2048;
              *(void *)__n128 v189 = v156;
              __n128 v157 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v157);
              if (v157 != buf) {
                free(v157);
              }
            }
            sub_100E7A290((uint64_t *)a1, &v186);
          }
          double v104 = *(uint64_t **)a1;
          uint64_t v105 = *(void *)(a1 + 8);
          float v106 = (uint64_t *)(v105 - 16);
          if (*(void *)a1 != v105 && v106 > v104)
          {
            do
            {
              uint64_t v108 = *v104;
              *double v104 = *v106;
              uint64_t *v106 = v108;
              uint64_t v109 = v104[1];
              v104[1] = v106[1];
              v106[1] = v109;
              v104 += 2;
              v106 -= 2;
            }
            while (v104 < v106);
          }
          if (!sub_100D2AF70((uint64_t)&v174, *(unint64_t **)v184))
          {
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1022FDD70);
            }
            float32x4_t v110 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v111 = *(void *)(*(void *)v184 + 8);
              *(_DWORD *)int buf = 134349312;
              *(double *)&uint8_t buf[4] = a9;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)__n128 v195 = v111;
              _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,added last road,%lld", buf, 0x16u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1022FDD70);
              }
              uint64_t v158 = *(void *)(*(void *)v184 + 8);
              int v187 = 134349312;
              *(double *)__n128 v188 = a9;
              *(_WORD *)&v188[8] = 2048;
              *(void *)__n128 v189 = v158;
              long long v159 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v159);
              if (v159 != buf) {
                free(v159);
              }
            }
            sub_100E7A290((uint64_t *)a1, &v184);
          }
          *(_DWORD *)(a1 + 52) += v169 & 1;
          double v112 = 0.0;
          if (v170 >= 0.0) {
            double v112 = vabdd_f64(sub_10016C458(), v170) * 1000.0;
          }
          *(double *)(a1 + 40) = v112;
          *(double *)(a1 + 64) = v112 + *(double *)(a1 + 64);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1022FDD70);
          }
          v113 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
          {
            int v114 = *(_DWORD *)(a1 + 48);
            int v115 = *(_DWORD *)(a1 + 52);
            int v116 = *(_DWORD *)(a1 + 24);
            int v117 = *(_DWORD *)(a1 + 28);
            int v118 = *(_DWORD *)(a1 + 32);
            int v119 = *(_DWORD *)(a1 + 56);
            int v120 = *(_DWORD *)(a1 + 60);
            uint64_t v121 = *(void *)(a1 + 40);
            uint64_t v122 = *(void *)(a1 + 64);
            *(_DWORD *)int buf = 67242240;
            *(_DWORD *)&uint8_t buf[4] = v114;
            *(_WORD *)&uint8_t buf[8] = 1026;
            *(_DWORD *)&buf[10] = v115;
            *(_WORD *)__n128 v195 = 1026;
            *(_DWORD *)&v195[2] = v116;
            *(_WORD *)&v195[6] = 1026;
            *(_DWORD *)&v195[8] = v117;
            *(_WORD *)&v195[12] = 1026;
            *(_DWORD *)&v195[14] = v119;
            *(_WORD *)&v195[18] = 1026;
            *(_DWORD *)long long v196 = v118;
            *(_WORD *)&v196[4] = 1026;
            *(_DWORD *)&v196[6] = v120;
            *(_WORD *)__n128 v197 = 2050;
            *(void *)&v197[2] = v121;
            *(_WORD *)__n128 v198 = 2050;
            *(void *)&v198[2] = v122;
            _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEFAULT, "CLTSP,AStar Pedestrian Analytics,attempts,%{public}d,failures,%{public}d,roadCountExceededMax,%{public}d,iterationsExceededMax,%{public}d,processingTimeExceededMax,%{public}d,iterations,%{public}d,roadConnectionsUnavailable,%{public}d,processingTimeMSec,%{public}.2lf,cumulativeProcessingTimeMSec,%{public}.2lf", buf, 0x40u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1022FDD70);
            }
            int v146 = *(_DWORD *)(a1 + 48);
            int v147 = *(_DWORD *)(a1 + 52);
            int v148 = *(_DWORD *)(a1 + 24);
            int v149 = *(_DWORD *)(a1 + 28);
            int v150 = *(_DWORD *)(a1 + 32);
            int v151 = *(_DWORD *)(a1 + 56);
            int v152 = *(_DWORD *)(a1 + 60);
            uint64_t v153 = *(void *)(a1 + 40);
            uint64_t v154 = *(void *)(a1 + 64);
            int v187 = 67242240;
            *(_DWORD *)__n128 v188 = v146;
            *(_WORD *)&v188[4] = 1026;
            *(_DWORD *)&v188[6] = v147;
            *(_WORD *)__n128 v189 = 1026;
            *(_DWORD *)&v189[2] = v148;
            *(_WORD *)&v189[6] = 1026;
            *(_DWORD *)&v189[8] = v149;
            *(_WORD *)&v189[12] = 1026;
            *(_DWORD *)&v189[14] = v151;
            *(_WORD *)&v189[18] = 1026;
            *(_DWORD *)__n128 v190 = v150;
            *(_WORD *)&v190[4] = 1026;
            *(_DWORD *)&v190[6] = v152;
            *(_WORD *)__n128 v191 = 2050;
            *(void *)&v191[2] = v153;
            *(_WORD *)long long v192 = 2050;
            *(void *)&v192[2] = v154;
            __n128 v155 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v155);
            if (v155 != buf) {
              free(v155);
            }
          }
          char v37 = v169 ^ 1;
LABEL_241:
          sub_1000F5BB0((uint64_t)&v174, v175);
          if (*((void *)&v177 + 1)) {
            sub_1000DB0A0(*((std::__shared_weak_count **)&v177 + 1));
          }
          sub_10017FBB4((uint64_t)v178);
          sub_10017FBB4((uint64_t)&v180);
          goto LABEL_244;
        }
        sub_100E7A290((uint64_t *)a1, &v186);
        sub_100E7A290((uint64_t *)a1, &v184);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022FDD70);
        }
        double v48 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 134349056;
          *(double *)&uint8_t buf[4] = a9;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.3lf,routeConstructor,start road and destination road are neighbors", buf, 0xCu);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_66;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 == -1) {
          goto LABEL_276;
        }
      }
      dispatch_once(&qword_102419430, &stru_1022FDD70);
      goto LABEL_276;
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022FDD70);
    }
    double v34 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      BOOL v35 = *a3 != 0;
      BOOL v36 = *a4 != 0;
      *(_DWORD *)int buf = 134350080;
      *(double *)&uint8_t buf[4] = a9;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)__n128 v195 = v35;
      *(_WORD *)&v195[4] = 1026;
      *(_DWORD *)&v195[6] = v36;
      *(_WORD *)&v195[10] = 2048;
      *(double *)&v195[12] = a10;
      *(_WORD *)long long v196 = 2048;
      *(double *)&v196[2] = a11;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.3lf,routeConstructor,constructPedestrian,invalid inputs,startRoad,%{public}d,destRoad,%{public}d,startRoadProjection,%.1lf,destinationRoadProjection,%.1lf", buf, 0x2Cu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022FDD70);
      }
      BOOL v136 = *a3 != 0;
      BOOL v137 = *a4 != 0;
      int v187 = 134350080;
      *(double *)__n128 v188 = a9;
      *(_WORD *)&v188[8] = 1026;
      *(_DWORD *)__n128 v189 = v136;
      *(_WORD *)&v189[4] = 1026;
      *(_DWORD *)&v189[6] = v137;
      *(_WORD *)&v189[10] = 2048;
      *(double *)&v189[12] = a10;
      *(_WORD *)__n128 v190 = 2048;
      *(double *)&v190[2] = a11;
      long long v138 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v138);
      if (v138 != buf) {
        free(v138);
      }
    }
    char v37 = 0;
    ++*(_DWORD *)(a1 + 52);
  }
  else
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022FDD70);
    }
    double v38 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Unexpected,invalid geometry pointer,constructPedestrian", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022FDD70);
      }
      LOWORD(v187) = 0;
      long long v139 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLAStarRouteConstructor::constructPedestrian(CLDistanceCalc &, const CFAbsoluteTime, const CLMapRoadPtr &, const CLMapRoadPtr &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const GEOLocationCoordinate2D &, const double, double, const std::optional<double>)", "%s\n", v139);
      if (v139 != buf) {
        free(v139);
      }
    }
    char v37 = 0;
  }
  return v37 & 1;
}

void sub_100E7CED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,uint64_t a56,uint64_t a57,std::__shared_weak_count *a58)
{
  if (a38) {
    sub_1000DB0A0(a38);
  }
  sub_10017FBB4((uint64_t)&a39);
  sub_10017FBB4((uint64_t)&a45);
  if (a54) {
    sub_1000DB0A0(a54);
  }
  if (a58) {
    sub_1000DB0A0(a58);
  }
  _Unwind_Resume(a1);
}

void sub_100E7D070(uint64_t *a1, double *a2)
{
  uint64_t v2 = *a1;
  if ((unint64_t)(a1[1] - *a1) >= 0x11)
  {
    uint64_t v5 = 0;
    do
    {
      long long v6 = *(_OWORD *)(v2 + 16 * v5);
      long long v21 = v6;
      uint64_t v7 = (std::__shared_weak_count *)*((void *)&v6 + 1);
      if (*((void *)&v6 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v6 + 1) + 8), 1uLL, memory_order_relaxed);
        uint64_t v2 = *a1;
      }
      double v19 = *(uint64_t **)(v2 + 16 * v5 + 16);
      long long v20 = *(_OWORD *)(v2 + 16 * v5 + 16);
      uint64_t v8 = (std::__shared_weak_count *)*((void *)&v20 + 1);
      if (*((void *)&v20 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = v6;
      if ((sub_100E79DE4((uint64_t *)v6, (uint64_t **)&v20) & 1) == 0)
      {
        if (sub_100E79ED0((uint64_t *)v9, (uint64_t **)&v20))
        {
          char v10 = 1;
          goto LABEL_11;
        }
        uint64_t v12 = *(void *)v9;
        uint64_t v13 = *v19;
        double v14 = sub_1000F1648(a2, **(double **)(*(void *)v9 + 136), *(double *)(*(void *)(*(void *)v9 + 136) + 8), **(double **)(*v19 + 136), *(double *)(*(void *)(*v19 + 136) + 8), 0.0);
        double v15 = sub_1000F1648(a2, **(double **)(v12 + 136), *(double *)(*(void *)(v12 + 136) + 8), *(double *)(*(void *)(v13 + 144) - 16), *(double *)(*(void *)(v13 + 144) - 8), 0.0);
        if (v15 >= v14) {
          double v16 = v14;
        }
        else {
          double v16 = v15;
        }
        double v17 = sub_1000F1648(a2, *(double *)(*(void *)(v12 + 144) - 16), *(double *)(*(void *)(v12 + 144) - 8), **(double **)(v13 + 136), *(double *)(*(void *)(v13 + 136) + 8), 0.0);
        double v18 = sub_1000F1648(a2, *(double *)(*(void *)(v12 + 144) - 16), *(double *)(*(void *)(v12 + 144) - 8), *(double *)(*(void *)(v13 + 144) - 16), *(double *)(*(void *)(v13 + 144) - 8), 0.0);
        if (v18 >= v17) {
          double v18 = v17;
        }
        if (v16 >= v18) {
          goto LABEL_12;
        }
      }
      char v10 = 0;
LABEL_11:
      *(unsigned char *)(v9 + 16) = v10;
LABEL_12:
      if (v5 + 1 == ((a1[1] - *a1) >> 4) - 1 && sub_100E79ED0(v19, (uint64_t **)&v21)) {
        *((unsigned char *)v19 + 16) = 0;
      }
      if (v8) {
        sub_1000DB0A0(v8);
      }
      if (v7) {
        sub_1000DB0A0(v7);
      }
      uint64_t v2 = *a1;
      unint64_t v11 = v5 + 2;
      ++v5;
    }
    while (v11 < (a1[1] - *a1) >> 4);
  }
}

void sub_100E7D258(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_1000DB0A0(v2);
  }
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E7D28C(id a1)
{
  qword_102419438 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void *sub_100E7D2BC(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    char v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x28uLL);
  *uint64_t i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  i[4] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_100100330(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  long long v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *v13;
  *uint64_t v13 = i;
  *(void *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    long long v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_100E7D4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_10097F4F8(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t *sub_100E7D50C(void *a1, unint64_t *a2)
{
  uint64_t result = sub_100E72C1C(a1, a2);
  if (result)
  {
    sub_100E7D544(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t sub_100E7D544(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_10017FA3C(a1, a2, (uint64_t)&__p);
  int v3 = __p;
  std::string __p = 0;
  if (v3) {
    sub_10097F4F8((uint64_t)&v6, v3);
  }
  return v2;
}

void sub_100E7D590(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022FDDA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100E7D5B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022FDDA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100E7D604(uint64_t a1)
{
  sub_100E7D630((uint64_t)&v1, a1 + 24);
}

void sub_100E7D630(uint64_t a1, uint64_t a2)
{
  int v3 = *(std::__shared_weak_count **)(a2 + 48);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
  if (v4)
  {
    sub_1000DB0A0(v4);
  }
}

uint64_t sub_100E7D680(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100E7D6F8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100E7D6F8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  _DWORD v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_100E7D78C((uint64_t)v12);
  return v10;
}

uint64_t sub_100E7D78C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1002CFBC4(a1);
  }
  return a1;
}

void sub_100E7D7C4(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100E7D834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    sub_100E7D8A0((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E7D854(uint64_t a1)
{
}

uint64_t sub_100E7D85C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100E7D8A0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v3 = *(std::__shared_weak_count **)(a2 + 48);
    if (v3) {
      sub_1000DB0A0(v3);
    }
    unint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
    if (v4) {
      sub_1000DB0A0(v4);
    }
    operator delete();
  }
}

void sub_100E7D904(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v3 = *(void **)(a2 + 2248);
    if (v3)
    {
      *(void *)(a2 + 2256) = v3;
      operator delete(v3);
    }
    sub_10082B4FC(a2);
    operator delete();
  }
}

void *sub_100E7D964@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xA70uLL);
  uint64_t result = sub_100E7D9B0(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100E7D99C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100E7D9B0(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022FDE68;
  sub_101187CA8((uint64_t)(a1 + 3));
  a1[3] = &off_10230E990;
  return a1;
}

void sub_100E7DA14(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100E7DA28(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022FDE68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100E7DA48(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022FDE68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100E7DA9C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_100E7DAC4@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = (char *)operator new(0xA78uLL);
  uint64_t result = sub_10082B324((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_100E7DB0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100E7DB20(void *a1, int a2)
{
  sub_100134750(__p, "");
  sub_100E7DCD0((uint64_t)a1, "GaitMetricsHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_1022FDEB8;
  a1[9] = off_1022FDF88;
  a1[50] = off_1022FDFD8;
  sub_100F03BA0(a1 + 51, 0, 0);
  sub_100F03BA0(a1 + 53, 0, 0);
  sub_100F03BA0(a1 + 55, 0, 0);
  sub_100F03BA0(a1 + 57, 0, 0);
  sub_100F03BA0(a1 + 59, 0, 0);
  sub_100F03BA0(a1 + 61, 0, 0);
  sub_100F03BA0(a1 + 63, 0, 0);
  sub_100F03BA0(a1 + 65, 0, 0);
  sub_100F03BA0(a1 + 67, 0, 0);
  (*(void (**)(void *))(*a1 + 112))(a1);
  return a1;
}

void sub_100E7DCA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E7DCD0(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 8));
  *unint64_t v12 = off_1022ADB08;
  *(void *)a1 = off_1022FE590;
  *(void *)(a1 + 72) = off_1022FE638;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_1022FE590;
  *(void *)(a1 + 72) = off_1022FE638;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(void *)(a1 + 263) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 272) = 0x3FD9999A00000000;
  *(unsigned char *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 284) = 1116213084;
  *(unsigned char *)(a1 + 288) = 0;
  *(void *)(a1 + 292) = 0;
  *(void *)(a1 + 308) = 0;
  *(void *)(a1 + 300) = 0;
  *(_DWORD *)(a1 + 320) = 12000;
  *(void *)(a1 + 328) = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 336));
  *(void *)(a1 + 336) = off_1022ADB08;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_100E7E128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  *a11 = v29;
  sub_1003BE1F8(v30);
  sub_100D97288(v28);
  sub_1011F8AE0(v27);
  void *v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_100E7E1C0()
{
}

void *sub_100E7E1C8(void *a1)
{
  *a1 = off_1022FE590;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_1022FE638;
  a1[41] = off_1022ADAD8;
  sub_1003BE1F8(a1 + 42);
  sub_100D97288(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022ADAD8;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_100E7E28C(uint64_t a1)
{
  return sub_100E7E1C8((void *)(a1 - 72));
}

void *sub_100E7E294(uint64_t a1)
{
  return sub_100E7E1C8((void *)(a1 - 400));
}

void sub_100E7E29C(void *a1)
{
  sub_100E7E1C8(a1);

  operator delete();
}

void sub_100E7E2D4(uint64_t a1)
{
  sub_100E7E1C8((void *)(a1 - 72));

  operator delete();
}

void sub_100E7E310(uint64_t a1)
{
  sub_100E7E1C8((void *)(a1 - 400));

  operator delete();
}

uint64_t sub_100E7E34C(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = a1 + 14;
  uint64_t v4 = a1[14];
  v15[1] = (uint64_t)(a1 + 14);
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 14);
  __int16 v16 = 256;
  if (*(double *)(*(void *)(a2 + 8) - 16) == 1.79769313e308 && sub_100081E3C((uint64_t)(a1 + 9)))
  {
    sub_10002B640(a1[10]);
    double Current = CFAbsoluteTimeGetCurrent();
    sub_100082068(a1 + 55, v15);
    uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(v15[0]);
    if (sub_100055D58(v7, 1, Current - *(double *)(*(void *)(a2 + 8) - 24)))
    {
      uint64_t v8 = a1[10];
      long long v9 = (sqlite3_stmt *)sub_10014D19C(v15[0]);
      sub_10001FEB0(v8, v9);
      uint64_t v10 = (*(int (**)(uint64_t *))(*a1 + 152))(a1);
    }
    else
    {
      uint64_t v10 = -1;
    }
    sub_100028FB4(a1[10]);
    uint64_t v11 = a1[10];
    if (*(uint64_t *)(v11 + 88) <= 0) {
      uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = *(void *)(v11 + 88);
    }
    sub_10003CC68(v11, v12);
    uint64_t v13 = v15[0];
    v15[0] = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  else
  {
    uint64_t v10 = -1;
  }
  (*(void (**)(uint64_t *))(*v5 + 24))(v5);
  return v10;
}

void sub_100E7E4F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E7E528(uint64_t a1, uint64_t a2)
{
  return sub_100E7E34C((uint64_t *)(a1 - 72), a2);
}

uint64_t sub_100E7E530(uint64_t *a1, char **a2)
{
  uint64_t v5 = a1 + 14;
  uint64_t v4 = a1[14];
  uint64_t v6 = (uint64_t)(a1 + 9);
  v34[1] = (uint64_t)(a1 + 14);
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 14);
  __int16 v35 = 256;
  if (sub_100081E3C(v6))
  {
    a2[1] = *a2;
    sub_100082068(a1 + 57, v34);
    sub_10002B640(a1[10]);
    *(_DWORD *)uint64_t v31 = 0;
    memset(&v31[8], 0, 39);
    *(void *)&long long v32 = 0x3FD9999A00000000;
    BYTE8(v32) = 0;
    HIDWORD(v32) = 1116213084;
    v33[0] = 0;
    memset(&v33[4], 0, 24);
    while (!sub_100E7E81C(v34, (uint64_t)v31))
    {
      uint64_t v7 = a2[1];
      unint64_t v8 = (unint64_t)a2[2];
      if ((unint64_t)v7 >= v8)
      {
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a2) >> 5);
        unint64_t v14 = v13 + 1;
        if (v13 + 1 > 0x2AAAAAAAAAAAAAALL) {
          sub_1001D7FD4();
        }
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)*a2) >> 5);
        if (2 * v15 > v14) {
          unint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x155555555555555) {
          unint64_t v16 = 0x2AAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16) {
          uint64_t v17 = (char *)sub_100642EA8((uint64_t)(a2 + 2), v16);
        }
        else {
          uint64_t v17 = 0;
        }
        __int16 v18 = &v17[96 * v13];
        long long v19 = *(_OWORD *)&v31[16];
        *(_OWORD *)__int16 v18 = *(_OWORD *)v31;
        *((_OWORD *)v18 + 1) = v19;
        long long v20 = *(_OWORD *)&v33[16];
        *((_OWORD *)v18 + 4) = *(_OWORD *)v33;
        *((_OWORD *)v18 + 5) = v20;
        long long v21 = v32;
        *((_OWORD *)v18 + 2) = *(_OWORD *)&v31[32];
        *((_OWORD *)v18 + 3) = v21;
        uint64_t v23 = *a2;
        unint64_t v22 = a2[1];
        uint64_t v24 = v18;
        if (v22 != *a2)
        {
          do
          {
            long long v25 = *((_OWORD *)v22 - 5);
            *((_OWORD *)v24 - 6) = *((_OWORD *)v22 - 6);
            *((_OWORD *)v24 - 5) = v25;
            long long v26 = *((_OWORD *)v22 - 4);
            long long v27 = *((_OWORD *)v22 - 3);
            long long v28 = *((_OWORD *)v22 - 2);
            *(_OWORD *)(v24 - 20) = *(_OWORD *)(v22 - 20);
            *((_OWORD *)v24 - 3) = v27;
            *((_OWORD *)v24 - 2) = v28;
            *((_OWORD *)v24 - 4) = v26;
            v24 -= 96;
            v22 -= 96;
          }
          while (v22 != v23);
          unint64_t v22 = *a2;
        }
        uint64_t v12 = v18 + 96;
        *a2 = v24;
        a2[1] = v18 + 96;
        a2[2] = &v17[96 * v16];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        long long v9 = v32;
        *((_OWORD *)v7 + 2) = *(_OWORD *)&v31[32];
        *((_OWORD *)v7 + 3) = v9;
        long long v10 = *(_OWORD *)&v33[16];
        *((_OWORD *)v7 + 4) = *(_OWORD *)v33;
        *((_OWORD *)v7 + 5) = v10;
        long long v11 = *(_OWORD *)&v31[16];
        uint64_t v12 = v7 + 96;
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v31;
        *((_OWORD *)v7 + 1) = v11;
      }
      a2[1] = v12;
    }
    sub_100028FB4(a1[10]);
    uint64_t v29 = v34[0];
    v34[0] = 0;
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
    }
  }
  return (*(uint64_t (**)(uint64_t *))(*v5 + 24))(v5);
}

void sub_100E7E7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E7E81C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v6, 0);
  uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  unint64_t v8 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)(a2 + 16) = (unint64_t)sqlite3_column_double(v8, 2);
  long long v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v10 = sqlite3_column_double(v9, 3);
  *(float *)(a2 + 24) = v10;
  long long v11 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v12 = sqlite3_column_double(v11, 4);
  *(float *)(a2 + 28) = v12;
  unint64_t v13 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v14 = sqlite3_column_double(v13, 5);
  *(float *)(a2 + 32) = v14;
  unint64_t v15 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 40) = sqlite3_column_int(v15, 6);
  unint64_t v16 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v17 = sqlite3_column_double(v16, 7);
  *(float *)(a2 + 36) = v17;
  __int16 v18 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 41) = sqlite3_column_int(v18, 8);
  long long v19 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 42) = sqlite3_column_int(v19, 9);
  long long v20 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 43) = sqlite3_column_int(v20, 10);
  long long v21 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 44) = sqlite3_column_int(v21, 11);
  unint64_t v22 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v23 = sqlite3_column_double(v22, 12);
  *(float *)(a2 + 48) = v23;
  uint64_t v24 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 45) = sqlite3_column_int(v24, 13);
  long long v25 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 46) = sqlite3_column_int(v25, 14);
  long long v26 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v27 = sqlite3_column_double(v26, 15);
  *(float *)(a2 + 52) = v27;
  long long v28 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 56) = sqlite3_column_int(v28, 16) != 0;
  uint64_t v29 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v30 = sqlite3_column_double(v29, 17);
  *(float *)(a2 + 60) = v30;
  uint64_t v31 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 64) = sqlite3_column_int(v31, 18) != 0;
  long long v32 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v33 = sqlite3_column_double(v32, 19);
  *(float *)(a2 + 68) = v33;
  double v34 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v35 = sqlite3_column_double(v34, 20);
  *(float *)(a2 + 72) = v35;
  BOOL v36 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v37 = sqlite3_column_double(v36, 21);
  *(float *)(a2 + 76) = v37;
  double v38 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v39 = sqlite3_column_double(v38, 22);
  *(float *)(a2 + 80) = v39;
  double v40 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v41 = sqlite3_column_double(v40, 23);
  *(float *)(a2 + 84) = v41;
  double v42 = (sqlite3_stmt *)sub_10014D19C(*a1);
  double v43 = sqlite3_column_double(v42, 24);
  uint64_t result = 0;
  *(float *)&double v43 = v43;
  *(_DWORD *)(a2 + 88) = LODWORD(v43);
  return result;
}

uint64_t sub_100E7EAAC(uint64_t a1)
{
  if (!sub_100081E3C(a1 + 72)) {
    return 0xFFFFFFFFLL;
  }
  sub_100082068((void *)(a1 + 472), &v8);
  int v3 = (sqlite3_stmt *)sub_10014D19C(v8);
  int v4 = sqlite3_step(v3);
  if (v4 == 100)
  {
    int v5 = (sqlite3_stmt *)sub_10014D19C(v8);
    uint64_t v1 = sqlite3_column_int(v5, 0);
  }
  uint64_t v6 = v8;
  uint64_t v8 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (v4 != 100) {
    return 0xFFFFFFFFLL;
  }
  return v1;
}

void sub_100E7EB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E7EB98(uint64_t a1)
{
  return sub_100E7EAAC(a1 - 72);
}

uint64_t sub_100E7EBA0(uint64_t a1, char **a2, double a3, double a4)
{
  uint64_t v9 = a1 + 112;
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v10 = a1 + 72;
  v34[1] = a1 + 112;
  (*(void (**)(uint64_t))(v8 + 16))(a1 + 112);
  __int16 v35 = 256;
  if (sub_100081E3C(v10))
  {
    a2[1] = *a2;
    sub_100082068((void *)(a1 + 488), v34);
    *(_DWORD *)int buf = 0;
    memset(&buf[8], 0, 39);
    *(void *)&long long v37 = 0x3FD9999A00000000;
    BYTE8(v37) = 0;
    HIDWORD(v37) = 1116213084;
    v38[0] = 0;
    memset(&v38[4], 0, 24);
    if (a4 >= a3)
    {
      long long v11 = (sqlite3_stmt *)sub_10014D19C(v34[0]);
      if (sub_100055D58(v11, 1, a3))
      {
        float v12 = (sqlite3_stmt *)sub_10014D19C(v34[0]);
        if (sub_100055D58(v12, 2, a4))
        {
          while (!sub_100E7E81C(v34, (uint64_t)buf))
          {
            unint64_t v13 = a2[1];
            unint64_t v14 = (unint64_t)a2[2];
            if ((unint64_t)v13 >= v14)
            {
              unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v13 - *a2) >> 5);
              unint64_t v17 = v16 + 1;
              if (v16 + 1 > 0x2AAAAAAAAAAAAAALL) {
                sub_1001D7FD4();
              }
              unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)*a2) >> 5);
              if (2 * v18 > v17) {
                unint64_t v17 = 2 * v18;
              }
              if (v18 >= 0x155555555555555) {
                unint64_t v19 = 0x2AAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v19 = v17;
              }
              if (v19) {
                long long v20 = (char *)sub_100642EA8((uint64_t)(a2 + 2), v19);
              }
              else {
                long long v20 = 0;
              }
              long long v21 = &v20[96 * v16];
              *(_OWORD *)long long v21 = *(_OWORD *)buf;
              *((_OWORD *)v21 + 1) = *(_OWORD *)&buf[16];
              *((_OWORD *)v21 + 5) = *(_OWORD *)&v38[16];
              *((_OWORD *)v21 + 4) = *(_OWORD *)v38;
              *((_OWORD *)v21 + 3) = v37;
              *((_OWORD *)v21 + 2) = *(_OWORD *)&buf[32];
              float v23 = *a2;
              unint64_t v22 = a2[1];
              uint64_t v24 = v21;
              if (v22 != *a2)
              {
                do
                {
                  long long v25 = *((_OWORD *)v22 - 5);
                  *((_OWORD *)v24 - 6) = *((_OWORD *)v22 - 6);
                  *((_OWORD *)v24 - 5) = v25;
                  long long v26 = *((_OWORD *)v22 - 4);
                  long long v27 = *((_OWORD *)v22 - 3);
                  long long v28 = *((_OWORD *)v22 - 2);
                  *(_OWORD *)(v24 - 20) = *(_OWORD *)(v22 - 20);
                  *((_OWORD *)v24 - 3) = v27;
                  *((_OWORD *)v24 - 2) = v28;
                  *((_OWORD *)v24 - 4) = v26;
                  v24 -= 96;
                  v22 -= 96;
                }
                while (v22 != v23);
                unint64_t v22 = *a2;
              }
              unint64_t v15 = v21 + 96;
              *a2 = v24;
              a2[1] = v21 + 96;
              a2[2] = &v20[96 * v19];
              if (v22) {
                operator delete(v22);
              }
            }
            else
            {
              *((_OWORD *)v13 + 2) = *(_OWORD *)&buf[32];
              *((_OWORD *)v13 + 3) = v37;
              *((_OWORD *)v13 + 4) = *(_OWORD *)v38;
              *((_OWORD *)v13 + 5) = *(_OWORD *)&v38[16];
              *(_OWORD *)unint64_t v13 = *(_OWORD *)buf;
              *((_OWORD *)v13 + 1) = *(_OWORD *)&buf[16];
              unint64_t v15 = v13 + 96;
            }
            a2[1] = v15;
          }
        }
      }
    }
    uint64_t v31 = v34[0];
    v34[0] = 0;
    if (v31) {
      (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
    }
    uint64_t v30 = 100;
  }
  else
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022FE080);
    }
    uint64_t v29 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "GaitMetricsHistory not accessible", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022FE080);
      }
      LOWORD(v34[0]) = 0;
      float v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CMError CLMobility::GaitMetricsRecorderDb::queryGaitMetricsInTimeRange(CFAbsoluteTime, CFAbsoluteTime, std::vector<GaitMetrics> &)", "%s\n", v33);
      if (v33 != buf) {
        free(v33);
      }
    }
    uint64_t v30 = 109;
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
  return v30;
}

void sub_100E7F004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E7F06C(uint64_t a1, char **a2, double a3, double a4)
{
  return sub_100E7EBA0(a1 - 400, a2, a3, a4);
}

uint64_t sub_100E7F074(void *a1, uint64_t a2)
{
  return sub_100E7F07C(a1, a2, 0);
}

uint64_t sub_100E7F07C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 14;
  (*(void (**)(void *))(a1[14] + 16))(a1 + 14);
  (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, a3);
  return (*(uint64_t (**)(void *))(*v6 + 24))(v6);
}

void sub_100E7F148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E7F15C(uint64_t a1, uint64_t a2)
{
  return sub_100E7F07C((void *)(a1 - 400), a2, 0);
}

uint64_t sub_100E7F168(void *a1, _OWORD *a2)
{
  int v5 = a1 + 14;
  uint64_t v4 = a1[14];
  uint64_t v6 = (uint64_t)(a1 + 9);
  long long v20 = a1 + 14;
  (*(void (**)(void *))(v4 + 16))(a1 + 14);
  __int16 v21 = 256;
  if (!sub_100081E3C(v6))
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022FE080);
    }
    uint64_t v10 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[GaitMetricsHistory] Database inaccessible, unable to query", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_17;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022FE080);
    }
    *(_WORD *)unint64_t v17 = 0;
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLMobility::GaitMetricsRecorderDb::mostRecentGaitMetrics(GaitMetrics &)", "%s\n", v9);
    goto LABEL_38;
  }
  *(_DWORD *)unint64_t v17 = 0;
  memset(&v17[8], 0, 39);
  *(void *)&long long v18 = 0x3FD9999A00000000;
  BYTE8(v18) = 0;
  HIDWORD(v18) = 1116213084;
  LOBYTE(v19[0]) = 0;
  memset((char *)v19 + 4, 0, 24);
  int v7 = (*(uint64_t (**)(void *, unsigned char *))(*a1 + 104))(a1, v17);
  switch(v7)
  {
    case 0:
      long long v14 = v18;
      a2[2] = *(_OWORD *)&v17[32];
      a2[3] = v14;
      a2[4] = v19[0];
      *(_OWORD *)((char *)a2 + 76) = *(_OWORD *)((char *)v19 + 12);
      long long v15 = *(_OWORD *)&v17[16];
      uint64_t v11 = 1;
      *a2 = *(_OWORD *)v17;
      a2[1] = v15;
      goto LABEL_18;
    case 1:
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022FE080);
      }
      unint64_t v13 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[GaitMetricsHistory] Most recent gait metrics: No recent records in database", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_17;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022FE080);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLMobility::GaitMetricsRecorderDb::mostRecentGaitMetrics(GaitMetrics &)", "%s\n", v9);
      goto LABEL_38;
    case 2:
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022FE080);
      }
      uint64_t v8 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[GaitMetricsHistory] Most recent gait metrics: Query error", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_17;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 == -1) {
        goto LABEL_11;
      }
      break;
    default:
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022FE080);
      }
      unint64_t v16 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "[GaitMetricsHistory] Most recent gait metrics: unexpected return type", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_17;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 == -1) {
        goto LABEL_11;
      }
      break;
  }
  dispatch_once(&qword_1024191F0, &stru_1022FE080);
LABEL_11:
  uint64_t v9 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLMobility::GaitMetricsRecorderDb::mostRecentGaitMetrics(GaitMetrics &)", "%s\n", v9);
LABEL_38:
  if (v9 != (char *)buf) {
    free(v9);
  }
LABEL_17:
  uint64_t v11 = 0;
LABEL_18:
  (*(void (**)(void *))(*v5 + 24))(v5);
  return v11;
}

void sub_100E7F778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

uint64_t sub_100E7F7B0(uint64_t a1, _OWORD *a2)
{
  return sub_100E7F168((void *)(a1 - 400), a2);
}

uint64_t sub_100E7F7B8(uint64_t *a1)
{
  uint64_t result = sub_10014C3C0(a1[10]);
  if (result)
  {
    sub_100E7F8CC((uint64_t)a1);
    sub_1005F7B0C(a1[10], "GaitMetricsHistory", (const char **)&off_1022FE0A0, (const std::string::value_type **)&off_102474FB0, 0);
    a1[51] = sub_100601D1C(a1[10], (uint64_t)"DELETE FROM GaitMetricsHistory WHERE startTime > ?");
    a1[52] = v3;
    a1[53] = sub_100601D1C(a1[10], (uint64_t)"DELETE FROM GaitMetricsHistory");
    a1[54] = v4;
    a1[55] = sub_100601D1C(a1[10], (uint64_t)"DELETE FROM GaitMetricsHistory WHERE startTime < ?");
    a1[56] = v5;
    a1[57] = sub_100601D1C(a1[10], (uint64_t)"SELECT * from GaitMetricsHistory ORDER BY startTime ASC");
    a1[58] = v6;
    a1[59] = sub_100601D1C(a1[10], (uint64_t)"SELECT COUNT(*) FROM GaitMetricsHistory");
    a1[60] = v7;
    a1[61] = sub_100601D1C(a1[10], (uint64_t)"SELECT * FROM GaitMetricsHistory WHERE startTime BETWEEN ? and ? ORDER BY startTime ASC");
    a1[62] = v8;
    a1[63] = sub_100601D1C(a1[10], (uint64_t)"SELECT * FROM GaitMetricsHistory ORDER BY id DESC LIMIT 1");
    a1[64] = v9;
    a1[65] = sub_100601D1C(a1[10], (uint64_t)"INSERT INTO GaitMetricsHistory (startTime, timestamp, walkingSpeed, doubleSupportPercentage, stepLength, deviceSide, asymmetryProbability, segmentsRejectedByIsSwingStanceCycle, segmentsRejectedByIsNotRunning, segmentsRejectedByIsFeasibleWalkingSpeed, segmentsRejectedByIsPendular, cycleTime, segmentsRejectedByIsSufficientVerticalTwist, segmentsRejectedByIsCadenceConcordant, userHeight, isHeightSet, userWeight, isWeightSet, stepIndexOfHarmonicityAP, stepIndexOfHarmonicityML, stepIndexOfHarmonicityVT, swingIndexOfHarmonicityAP, swingIndexOfHarmonicityML, swingIndexOfHarmonicityVT) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    a1[66] = v10;
    uint64_t result = sub_100601D1C(a1[10], (uint64_t)"UPDATE GaitMetricsHistory SET startTime = startTime + ?");
    a1[67] = result;
    a1[68] = v11;
  }
  return result;
}

uint64_t sub_100E7F8CC(uint64_t a1)
{
  uint64_t result = sub_1005F93E4(*(void *)(a1 + 80), "GaitMetricsHistory");
  if (result)
  {
    uint64_t v3 = "segmentsRejectedByIsSwingStanceCycle";
    int v4 = 5;
    __int16 v5 = 0;
    char v6 = 0;
    char v7 = 0;
    sub_1005FEC4C(*(void *)(a1 + 80), "GaitMetricsHistory", (uint64_t)"segmentsRejectedByIsSwingStanceCycle", (uint64_t)&v3);
  }
  return result;
}

void sub_100E7FDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a23);
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  sub_101A129A8((uint64_t)&a61);
  _Unwind_Resume(a1);
}

uint64_t sub_100E7FE6C(uint64_t a1)
{
  uint64_t result = sub_100081E3C(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 424), &v7);
    uint64_t v3 = *(void *)(a1 + 80);
    int v4 = (sqlite3_stmt *)sub_10014D19C(v7);
    sub_10001FEB0(v3, v4);
    uint64_t v5 = *(void *)(a1 + 80);
    if (*(uint64_t *)(v5 + 88) <= 0) {
      uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v6 = *(void *)(v5 + 88);
    }
    sub_10003CC68(v5, v6);
    uint64_t result = v7;
    uint64_t v7 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_100E7FF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E7FF28(uint64_t a1)
{
  return sub_100E7FE6C(a1 - 72);
}

uint64_t sub_100E7FF30(void *a1, uint64_t a2)
{
  uint64_t result = sub_100081E3C((uint64_t)(a1 + 9));
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100082068(a1 + 51, &v10);
    uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(v10);
    if (sub_100055D58(v5, 1, *(double *)(a2 + 8)))
    {
      uint64_t v6 = a1[10];
      uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(v10);
      sub_10001FEB0(v6, v7);
    }
    uint64_t v8 = a1[10];
    if (*(uint64_t *)(v8 + 88) <= 0) {
      uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v9 = *(void *)(v8 + 88);
    }
    sub_10003CC68(v8, v9);
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_100E8001C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E80038(uint64_t a1, double a2)
{
  uint64_t result = sub_100081E3C(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 536), &v8);
    uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(v8);
    if (sub_100055D58(v5, 1, a2))
    {
      uint64_t v6 = *(void *)(a1 + 80);
      uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(v8);
      sub_10001FEB0(v6, v7);
    }
    uint64_t result = v8;
    uint64_t v8 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_100E800E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E80100(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100081E3C(a1 + 72);
  if (result)
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022FE080);
    }
    uint64_t v5 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void *)(a2 + 8);
      *(_DWORD *)int buf = 134349056;
      uint64_t v39 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[GaitMetricsRecorderDb] Inserting record %{public}f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022FE080);
      }
      uint64_t v34 = *(void *)(a2 + 8);
      LODWORD(v37[0]) = 134349056;
      *(uint64_t *)((char *)v37 + 4) = v34;
      __int16 v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMobility::GaitMetricsRecorderDb::insertRecordUL(const GaitMetrics &, BOOL)", "%s\n", v35);
      if (v35 != (char *)buf) {
        free(v35);
      }
    }
    sub_100082068((void *)(a1 + 520), v37);
    if (v37[0])
    {
      uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(v37[0]);
      if (sub_100055D58(v7, 1, *(double *)(a2 + 8)))
      {
        uint64_t v8 = (sqlite3_stmt *)sub_10014D19C(v37[0]);
        if (sub_10014DBB4(v8, 2, *(void *)(a2 + 16)))
        {
          uint64_t v9 = (sqlite3_stmt *)sub_10014D19C(v37[0]);
          if (sub_100055D58(v9, 3, *(float *)(a2 + 24)))
          {
            uint64_t v10 = (sqlite3_stmt *)sub_10014D19C(v37[0]);
            if (sub_100055D58(v10, 4, *(float *)(a2 + 28)))
            {
              uint64_t v11 = (sqlite3_stmt *)sub_10014D19C(v37[0]);
              if (sub_100055D58(v11, 5, *(float *)(a2 + 32)))
              {
                float v12 = (sqlite3_stmt *)sub_10014D19C(v37[0]);
                if (sub_10014D1A4(v12, 6, *(unsigned __int8 *)(a2 + 40)))
                {
                  unint64_t v13 = (sqlite3_stmt *)sub_10014D19C(v37[0]);
                  if (sub_100055D58(v13, 7, *(float *)(a2 + 36)))
                  {
                    long long v14 = (sqlite3_stmt *)sub_10014D19C(v37[0]);
                    if (sub_10014D1A4(v14, 8, *(unsigned __int8 *)(a2 + 41)))
                    {
                      long long v15 = (sqlite3_stmt *)sub_10014D19C(v37[0]);
                      if (sub_10014D1A4(v15, 9, *(unsigned __int8 *)(a2 + 42)))
                      {
                        unint64_t v16 = (sqlite3_stmt *)sub_10014D19C(v37[0]);
                        if (sub_10014D1A4(v16, 10, *(unsigned __int8 *)(a2 + 43)))
                        {
                          unint64_t v17 = (sqlite3_stmt *)sub_10014D19C(v37[0]);
                          if (sub_10014D1A4(v17, 11, *(unsigned __int8 *)(a2 + 44)))
                          {
                            long long v18 = (sqlite3_stmt *)sub_10014D19C(v37[0]);
                            if (sub_100055D58(v18, 12, *(float *)(a2 + 48)))
                            {
                              unint64_t v19 = (sqlite3_stmt *)sub_10014D19C(v37[0]);
                              if (sub_10014D1A4(v19, 13, *(unsigned __int8 *)(a2 + 45)))
                              {
                                long long v20 = (sqlite3_stmt *)sub_10014D19C(v37[0]);
                                if (sub_10014D1A4(v20, 14, *(unsigned __int8 *)(a2 + 46)))
                                {
                                  __int16 v21 = (sqlite3_stmt *)sub_10014D19C(v37[0]);
                                  if (sub_100055D58(v21, 15, *(float *)(a2 + 52)))
                                  {
                                    unint64_t v22 = (sqlite3_stmt *)sub_10014D19C(v37[0]);
                                    if (sub_10014D1A4(v22, 16, *(unsigned __int8 *)(a2 + 56)))
                                    {
                                      float v23 = (sqlite3_stmt *)sub_10014D19C(v37[0]);
                                      if (sub_100055D58(v23, 17, *(float *)(a2 + 60)))
                                      {
                                        uint64_t v24 = (sqlite3_stmt *)sub_10014D19C(v37[0]);
                                        if (sub_10014D1A4(v24, 18, *(unsigned __int8 *)(a2 + 64)))
                                        {
                                          long long v25 = (sqlite3_stmt *)sub_10014D19C(v37[0]);
                                          if (sub_100055D58(v25, 19, *(float *)(a2 + 68)))
                                          {
                                            long long v26 = (sqlite3_stmt *)sub_10014D19C(v37[0]);
                                            if (sub_100055D58(v26, 20, *(float *)(a2 + 72)))
                                            {
                                              long long v27 = (sqlite3_stmt *)sub_10014D19C(v37[0]);
                                              if (sub_100055D58(v27, 21, *(float *)(a2 + 76)))
                                              {
                                                long long v28 = (sqlite3_stmt *)sub_10014D19C(v37[0]);
                                                if (sub_100055D58(v28, 22, *(float *)(a2 + 80)))
                                                {
                                                  uint64_t v29 = (sqlite3_stmt *)sub_10014D19C(v37[0]);
                                                  if (sub_100055D58(v29, 23, *(float *)(a2 + 84)))
                                                  {
                                                    uint64_t v30 = (sqlite3_stmt *)sub_10014D19C(v37[0]);
                                                    if (sub_100055D58(v30, 24, *(float *)(a2 + 88)))
                                                    {
                                                      uint64_t v31 = *(void *)(a1 + 80);
                                                      long long v32 = (sqlite3_stmt *)sub_10014D19C(v37[0]);
                                                      sub_10001FEB0(v31, v32);
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022FE080);
      }
      float v33 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "GaitMetricsRecorderDb: failed to prepare insert #InvalidPreparedSQLStatement", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022FE080);
        }
        BOOL v36 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLMobility::GaitMetricsRecorderDb::insertRecordUL(const GaitMetrics &, BOOL)", "%s\n", v36);
        if (v36 != (char *)buf) {
          free(v36);
        }
      }
    }
    uint64_t result = v37[0];
    v37[0] = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_100E806C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E8070C()
{
  return 0;
}

uint64_t sub_100E80714(uint64_t a1, uint64_t a2)
{
  if (!sub_100081E3C(a1 + 72)) {
    return 2;
  }
  sub_100082068((void *)(a1 + 504), &v10);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v5 = sub_100E7E81C(&v10, a2);
  }
  else
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022FE080);
    }
    uint64_t v6 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "GaitMetricsRecorderDb: failed to prepare getMostRecent #InvalidPreparedSQLStatement", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022FE080);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CLActivityDB::ActivityCode CLMobility::GaitMetricsRecorderDb::getMostRecentRecordUL(GaitMetrics &) const", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    uint64_t v5 = 2;
  }
  uint64_t v7 = v10;
  uint64_t v10 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (!v4) {
    return 2;
  }
  return v5;
}

void sub_100E80920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E80968(uint64_t a1, void *a2)
{
  if (!sub_1005F9734(*(void *)(a1 + 80), (char *)a2))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022FE678);
    }
    uint64_t v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022FE678);
      }
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      long long v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", (const char *)v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    memset(__p, 0, 24);
    sub_100134750(buf, (char *)a2);
    uint64_t v5 = std::string::append(buf, "AutoIncr");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t v22 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)__int16 v21 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_100134750(buf, (char *)a2);
    uint64_t v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_10002B640(*(void *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v8 = HIBYTE(__p[2]);
    }
    else {
      size_t v8 = (size_t)__p[1];
    }
    uint64_t v9 = buf;
    sub_1001110E4((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v22 >= 0) {
      uint64_t v11 = v21;
    }
    else {
      uint64_t v11 = (void **)v21[0];
    }
    if (v22 >= 0) {
      std::string::size_type v12 = HIBYTE(v22);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v21[1];
    }
    unint64_t v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    long long v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v14;
    __p[1] = v23.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v23.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      char v15 = HIBYTE(__p[2]);
      long long v14 = __p[0];
    }
    if (v15 >= 0) {
      unint64_t v16 = __p;
    }
    else {
      unint64_t v16 = (void **)v14;
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)v16);
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = *(void *)(v17 + 88);
  }
  sub_10003CC68(v17, v18);
  return 0;
}

void sub_100E81B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100E81EF4(void *a1)
{
  uint64_t v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17[0]) < 0)
  {
    uint64_t v10 = v16[1];
    operator delete(v16[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v16);
        uint64_t v4 = sub_100132EFC(v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0) {
          uint64_t v5 = __p;
        }
        else {
          uint64_t v5 = (void **)__p[0];
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v6 = v14;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        uint64_t v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((v14 & 0x80u) == 0) {
          uint64_t v9 = __p;
        }
        else {
          uint64_t v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17[0]))
  {
    goto LABEL_3;
  }
  sub_101A91308(v3);
  uint64_t v15 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v16
  v17[0] = v11;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_100E82390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_100E82410(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_100E84414(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022FE678);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)int buf = 68289282;
    *(_DWORD *)unint64_t v13 = 0;
    *(_WORD *)&v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022FE678);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)int buf = 134349056;
      *(void *)unint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022FE678);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_100E82B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_100E82BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v3;
  __n128 result = *(__n128 *)(a3 + 32);
  long long v5 = *(_OWORD *)(a3 + 48);
  long long v6 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 76) = *(_OWORD *)(a3 + 76);
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v6;
  *(__n128 *)(a2 + 32) = result;
  return result;
}

id *sub_100E82BF0(uint64_t a1, uint64_t a2, char a3)
{
  v41[0] = (id)os_transaction_create();
  v41[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v41);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  int v31 = 0;
  long long v32 = 0u;
  memset(v33, 0, sizeof(v33));
  uint64_t v34 = 0x3FD9999A00000000;
  char v35 = 0;
  int v36 = 1116213084;
  char v37 = 0;
  uint64_t v38 = 0;
  uint64_t v40 = 0;
  uint64_t v39 = 0;
  int v6 = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 104))(a1, &v31);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022FE678);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022FE678);
        }
        LOWORD(v42) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *(double *)(a2 + 8);
    double v8 = *(double *)&v32;
    double v9 = v7 - *(double *)&v32;
    if (v7 - *(double *)&v32 < 0.0) {
      double v9 = -(v7 - *(double *)&v32);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022FE678);
      }
      uint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 8);
        *(_DWORD *)int buf = 134349312;
        double v47 = *(double *)&v32;
        __int16 v48 = 2050;
        uint64_t v49 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022FE678);
        }
        uint64_t v25 = *(void *)(a2 + 8);
        int v42 = 134349312;
        double v43 = *(double *)&v32;
        __int16 v44 = 2050;
        uint64_t v45 = v25;
        long long v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      CLWriteStackshot();
      double v7 = *(double *)(a2 + 8);
      double v8 = *(double *)&v32;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022FE678);
        }
        std::string::size_type v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)(a2 + 8);
          *(_DWORD *)int buf = 134217984;
          double v47 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022FE678);
          }
          double v27 = *(double *)(a2 + 8);
          int v42 = 134217984;
          double v43 = v27;
          long long v28 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v28);
          if (v28 != (char *)buf) {
            free(v28);
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v30 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_1022FE678);
        double v17 = v30;
      }
      double v18 = v16 - v17;
      unint64_t v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 134217984;
        double v47 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022FE678);
        }
        int v42 = 134217984;
        double v43 = v18;
        uint64_t v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMobility::GaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::GaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, &v31, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v20;
  long long v21 = *(_OWORD *)(a2 + 32);
  long long v22 = *(_OWORD *)(a2 + 48);
  long long v23 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 300) = *(_OWORD *)(a2 + 76);
  *(_OWORD *)(a1 + 272) = v22;
  *(_OWORD *)(a1 + 288) = v23;
  *(_OWORD *)(a1 + 256) = v21;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v41);
}

void sub_100E83454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E83480(uint64_t a1)
{
  return sub_100E82410(a1 - 72);
}

void sub_100E83488(id a1)
{
  qword_1024191F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

uint64_t sub_100E834B8(void *a1, void *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A91478(v4);
    sub_1001D7FD4();
  }
  std::string::size_type v12 = v15[1];
  operator delete(v15[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v15);
    int v6 = sub_100132EFC(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_100E83910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  sub_101A129A8((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_100E83990(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101A915E8(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  std::string::size_type v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_100E83D04(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A91758(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_100E84030(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A918C8(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    long long v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_100E84354(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100E84384(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_100E84414(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_100E84494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E844B0(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_100E844E0()
{
  sub_100134750(__p, "");
  uint64_t v3 = 0x200000000;
  __int16 v4 = 0;
  if (SHIBYTE(v9) < 0)
  {
    sub_1000DC48C(&v5, __p[0], (unint64_t)__p[1]);
    uint64_t v7 = 0;
    if (SHIBYTE(v9) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v5 = *(_OWORD *)__p;
    uint64_t v6 = v9;
    uint64_t v7 = 0;
  }
  sub_1005F54CC(v2, &v3);
  memcpy(__dst, off_1022FE6B8, sizeof(__dst));
  if (sub_10014C3C0((uint64_t)v2))
  {
    sub_10060313C((uint64_t)v2, __dst);
  }
  else
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022FE928);
    }
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "consolidated database not valid; unable to drop obsolete tables",
        (uint8_t *)__p,
        2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022FE928);
      }
      uint64_t v1 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void SqliteDatabase_Helper_dropObsoleteTablesFromConsolidatedDatabase()", "%s\n", v1);
      if (v1 != (char *)__p) {
        free(v1);
      }
    }
  }
  sub_1005F5850(v2);
  if (SHIBYTE(v6) < 0) {
    operator delete((void *)v5);
  }
}

void sub_100E84720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100E8476C()
{
  memcpy(__dst, off_1022FE7C0, sizeof(__dst));
  sub_100134750(__p, "");
  uint64_t v3 = 0x100000002;
  __int16 v4 = 0;
  if (SHIBYTE(v9) < 0)
  {
    sub_1000DC48C(&v5, __p[0], (unint64_t)__p[1]);
    uint64_t v7 = 0;
    if (SHIBYTE(v9) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v5 = *(_OWORD *)__p;
    uint64_t v6 = v9;
    uint64_t v7 = 0;
  }
  sub_1005F54CC(v2, &v3);
  if (sub_10014C3C0((uint64_t)v2))
  {
    sub_10060313C((uint64_t)v2, __dst);
  }
  else
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022FE928);
    }
    uint64_t v0 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Class B database not valid; unable to drop obsolete tables",
        (uint8_t *)__p,
        2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022FE928);
      }
      uint64_t v1 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void SqliteDatabase_Helper_dropObsoleteTablesFromClassBDatabase()", "%s\n", v1);
      if (v1 != (char *)__p) {
        free(v1);
      }
    }
  }
  sub_1005F5850(v2);
  if (SHIBYTE(v6) < 0) {
    operator delete((void *)v5);
  }
}

void sub_100E849AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100E849F8(id a1)
{
  off_1024195E8 = os_log_create("com.apple.locationd.Utility", "Database");
}

void sub_100E84A28(void *a1, double *a2)
{
  __int16 v4 = operator new(4uLL);
  std::string __p = v4;
  *__int16 v4 = 5;
  uint64_t v6 = v4 + 1;
  uint64_t v7 = v4 + 1;
  __int16 v9 = 0;
  *(_OWORD *)uint64_t v8 = xmmword_101D1E250;
  memset(&v8[2], 0, 135);
  long long v10 = xmmword_101D1E250;
  uint64_t v11 = 0;
  int v12 = 0;
  uint64_t v13 = 0;
  v14[0] = 0;
  *(void *)((char *)v14 + 5) = 0;
  *(void *)((char *)&v14[1] + 6) = 0;
  char v15 = 0;
  memset(&v14[3], 0, 24);
  long long v16 = xmmword_101D1E250;
  uint64_t v17 = 0;
  int v18 = 0;
  unint64_t v19 = 0xFFEFFFFFFFFFFFFFLL;
  int v30 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  int v25 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  memset(v29, 0, sizeof(v29));
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  unint64_t v33 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v34 = 0;
  int v35 = 0;
  uint64_t v41 = 0;
  __int16 v42 = 0;
  int v47 = 0;
  int v40 = 0;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  char v45 = 0;
  memset(v46, 0, sizeof(v46));
  unint64_t v48 = 0xFFEFFFFFFFFFFFFFLL;
  long long v67 = 0u;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  uint64_t v68 = 0;
  unint64_t v69 = 0xFFEFFFFFFFFFFFFFLL;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  unint64_t v74 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v75 = 0;
  int v76 = 0;
  uint64_t v77 = 0;
  char v78 = 0;
  unint64_t v79 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v81 = 0;
  uint64_t v80 = 0;
  uint64_t v82 = 0x80000000800000;
  uint64_t v84 = 0;
  uint64_t v83 = 0;
  long long v85 = xmmword_101D1E260;
  uint64_t v86 = 0x80000000800000;
  long long v87 = 0u;
  long long v88 = 0u;
  uint64_t v89 = 0;
  unint64_t v90 = 0xFFEFFFFFFFFFFFFFLL;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  int v97 = 0;
  unint64_t v98 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v99 = 0;
  int v100 = 0;
  unint64_t v101 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v102 = 7;
  unint64_t v103 = 0xFFEFFFFFFFFFFFFFLL;
  char v104 = 0;
  uint64_t v106 = 0;
  uint64_t v105 = 0;
  uint64_t v107 = 0;
  if (sub_100174478(a2, &__p, (uint64_t)v8)) {
    sub_100E84CE0(a1 + 11, (uint64_t)&v69);
  }
  else {
    sub_100E84D44(a1);
  }
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
}

void sub_100E84CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E84CE0(void *a1, uint64_t a2)
{
  sub_1005076CC(a1, a2);
  unint64_t v3 = a1[5];
  if (v3 >= 0x28)
  {
    ++a1[4];
    a1[5] = v3 - 1;
    sub_100507AAC((uint64_t)a1, 1);
  }
}

void sub_100E84D44(void *a1)
{
  uint64_t v2 = (void **)a1[12];
  uint64_t v3 = a1[13];
  a1[16] = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[13];
      uint64_t v2 = (void **)(a1[12] + 8);
      a1[12] = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 28;
  }
  else
  {
    if (v4 >> 3 != 2) {
      return;
    }
    uint64_t v6 = 56;
  }
  a1[15] = v6;
}

uint64_t sub_100E84DBC()
{
  return 0;
}

double sub_100E84DC4(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 80);
  switch(v2)
  {
    case 2:
      uint64_t v3 = (void *)(a1 + 88);
      v10[0] = off_1022FEC48;
      v10[1] = sub_100E85060;
      v10[3] = v10;
      sub_100507B0C((void *)(a1 + 88), 6uLL, 0xAuLL, (uint64_t)v10, (uint64_t)v8);
      sub_100507E30(v10);
      v9[0] = off_1022FEC48;
      v9[1] = sub_100E85080;
      v9[3] = v9;
      sub_100507B0C(v3, 3uLL, 5uLL, (uint64_t)v9, (uint64_t)v7);
      sub_100507E30(v9);
      if (v7[0] >= v8[0] || v8[0] == -1.0) {
        return v8[0];
      }
      else {
        return v7[0];
      }
    case 1:
      uint64_t v5 = (void *)(a1 + 88);
      v12[0] = off_1022FEC48;
      v12[1] = sub_100E85060;
      void v12[3] = v12;
      sub_100507B0C((void *)(a1 + 88), 0x19uLL, 0x28uLL, (uint64_t)v12, (uint64_t)v8);
      sub_100507E30(v12);
      v11[0] = off_1022FEC48;
      v11[1] = sub_100E85080;
      unsigned __int8 v11[3] = v11;
      sub_100507B0C(v5, 0xCuLL, 0x10uLL, (uint64_t)v11, (uint64_t)v7);
      sub_100507E30(v11);
      if (v7[0] == -1.0) {
        return v8[0];
      }
      else {
        return v7[0];
      }
    case 0:
      v13[0] = off_1022FEC48;
      v13[1] = sub_100E85060;
      v13[3] = v13;
      sub_100507B0C((void *)(a1 + 88), 0x1EuLL, 0x24uLL, (uint64_t)v13, (uint64_t)v8);
      double v1 = v8[0];
      sub_100507E30(v13);
      break;
  }
  return v1;
}

void sub_100E8501C(_Unwind_Exception *a1)
{
  sub_100507E30((void *)(v1 - 136));
  _Unwind_Resume(a1);
}

BOOL sub_100E85060(uint64_t a1)
{
  return *(float *)(a1 + 68) < 17.0 && (unint64_t)(*(void *)(a1 + 16) - 1) < 2;
}

BOOL sub_100E85080(uint64_t a1)
{
  return *(float *)(a1 + 68) < 17.0 && *(void *)(a1 + 16) == 2;
}

double sub_100E8509C(void *a1)
{
  int v2 = a1 + 11;
  v9[0] = off_1022FEC48;
  v9[1] = sub_100E85250;
  v9[3] = v9;
  sub_100507B0C(a1 + 11, 3uLL, 5uLL, (uint64_t)v9, (uint64_t)v7);
  sub_100507E30(v9);
  uint64_t v3 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  sub_100E85270(v3, (uint64_t)"notIsStraightPedEpochRun", 0, (uint64_t)v7);
  v8[0] = off_1022FEC48;
  v8[1] = sub_100E854A0;
  v8[3] = v8;
  sub_100507B0C(v2, 6uLL, 0xAuLL, (uint64_t)v8, (uint64_t)v6);
  sub_100507E30(v8);
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  sub_100E85270(v4, (uint64_t)"notIsPedEpochRun", 0, (uint64_t)v6);
  double result = v7[0];
  if (v7[0] == -1.0) {
    return v6[0];
  }
  return result;
}

void sub_100E85228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_100507E30((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_100E85250(uint64_t a1)
{
  return *(float *)(a1 + 68) >= 17.0 || (unint64_t)(*(void *)(a1 + 16) - 3) < 0xFFFFFFFFFFFFFFFELL;
}

void sub_100E85270(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022FEC18);
  }
  uint64_t v8 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *(void *)(a4 + 16);
    uint64_t v10 = *(void *)(a4 + 24);
    int v11 = *(_DWORD *)(a4 + 8);
    *(_DWORD *)int buf = 136316418;
    uint64_t v14 = a2;
    __int16 v15 = 2048;
    uint64_t v16 = a1;
    __int16 v17 = 1024;
    int v18 = a3;
    __int16 v19 = 2048;
    uint64_t v20 = v9;
    __int16 v21 = 2048;
    uint64_t v22 = v10;
    __int16 v23 = 1024;
    int v24 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Model,%s,type,%lu,active,%d,M,%lu,N,%lu,cnt,%d", buf, 0x36u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022FEC18);
    }
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void logMofNResult(CMWorkoutType, const char *, BOOL, const HistoryHelper::MofNResult &)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
}

BOOL sub_100E854A0(uint64_t a1)
{
  return (unint64_t)(*(void *)(a1 + 16) - 3) < 0xFFFFFFFFFFFFFFFELL;
}

void sub_100E854B4(void *a1, double *a2)
{
  *(_OWORD *)int v18 = xmmword_101D1E250;
  __int16 v19 = 0;
  memset(&v18[2], 0, 135);
  long long v20 = xmmword_101D1E250;
  uint64_t v21 = 0;
  int v22 = 0;
  uint64_t v23 = 0;
  v24[0] = 0;
  *(void *)((char *)v24 + 5) = 0;
  *(void *)((char *)&v24[1] + 6) = 0;
  char v25 = 0;
  memset(&v24[3], 0, 24);
  long long v26 = xmmword_101D1E250;
  uint64_t v27 = 0;
  int v28 = 0;
  double v29 = -1.79769313e308;
  int v40 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  int v35 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  memset(v39, 0, sizeof(v39));
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  unint64_t v43 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v44 = 0;
  int v45 = 0;
  uint64_t v51 = 0;
  __int16 v52 = 0;
  int v57 = 0;
  int v50 = 0;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  char v55 = 0;
  memset(v56, 0, sizeof(v56));
  unint64_t v58 = 0xFFEFFFFFFFFFFFFFLL;
  long long v77 = 0u;
  long long v76 = 0u;
  long long v75 = 0u;
  long long v74 = 0u;
  long long v73 = 0u;
  long long v72 = 0u;
  long long v71 = 0u;
  long long v70 = 0u;
  long long v69 = 0u;
  long long v68 = 0u;
  long long v67 = 0u;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  uint64_t v78 = 0;
  *(void *)unint64_t v79 = 0xFFEFFFFFFFFFFFFFLL;
  memset(&v79[8], 0, 64);
  unint64_t v80 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v81 = 0;
  int v82 = 0;
  uint64_t v83 = 0;
  char v84 = 0;
  unint64_t v85 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v87 = 0;
  uint64_t v86 = 0;
  uint64_t v88 = 0x80000000800000;
  uint64_t v90 = 0;
  uint64_t v89 = 0;
  long long v91 = xmmword_101D1E260;
  uint64_t v92 = 0x80000000800000;
  long long v93 = 0u;
  long long v94 = 0u;
  uint64_t v95 = 0;
  unint64_t v96 = 0xFFEFFFFFFFFFFFFFLL;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  int v103 = 0;
  unint64_t v104 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v105 = 0;
  int v106 = 0;
  unint64_t v107 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v108 = 7;
  unint64_t v109 = 0xFFEFFFFFFFFFFFFFLL;
  char v110 = 0;
  uint64_t v112 = 0;
  uint64_t v111 = 0;
  uint64_t v113 = 0;
  uint64_t v4 = operator new(4uLL);
  __p[0] = v4;
  *uint64_t v4 = 5;
  __p[1] = v4 + 1;
  *(void *)&long long v11 = v4 + 1;
  sub_100174478(a2, __p, (uint64_t)v18);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v15 = 0;
  BOOL v16 = 0;
  if (*(double *)v79 == -1.79769313e308)
  {
    sub_100E858B4(a1);
  }
  else
  {
    long long v12 = *(_OWORD *)&v79[32];
    long long v13 = *(_OWORD *)&v79[48];
    uint64_t v14 = *(void *)&v79[64];
    *(_OWORD *)std::string __p = *(_OWORD *)v79;
    long long v11 = *(_OWORD *)&v79[16];
    uint64_t v17 = *(void *)v79;
    if ((*(unsigned int (**)(void *))(*a1 + 88))(a1) == 2)
    {
      uint64_t v5 = operator new(4uLL);
      uint64_t v7 = v5;
      *uint64_t v5 = 2;
      uint64_t v9 = v5 + 1;
      uint64_t v8 = v5 + 1;
      sub_100174478(a2, &v7, (uint64_t)v18);
      if (v7)
      {
        uint64_t v8 = v7;
        operator delete(v7);
      }
      uint64_t v15 = v32;
      BOOL v6 = v29 != -1.79769313e308;
      if (*(double *)&v32 < 0.0) {
        BOOL v6 = 0;
      }
      BOOL v16 = v6;
    }
    sub_100E85850(a1 + 11, (uint64_t)__p);
  }
}

void sub_100E85818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E85850(void *a1, uint64_t a2)
{
  sub_100E8737C(a1, a2);
  unint64_t v3 = a1[5];
  if (v3 >= 0x28)
  {
    ++a1[4];
    a1[5] = v3 - 1;
    sub_10058AB7C((uint64_t)a1, 1);
  }
}

void sub_100E858B4(void *a1)
{
  int v2 = (void **)a1[12];
  uint64_t v3 = a1[13];
  a1[16] = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[13];
      int v2 = (void **)(a1[12] + 8);
      a1[12] = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 21;
  }
  else
  {
    if (v4 >> 3 != 2) {
      return;
    }
    uint64_t v6 = 42;
  }
  a1[15] = v6;
}

uint64_t sub_100E8592C(uint64_t a1)
{
  v6[0] = off_1022FECE8;
  v6[1] = sub_100E85A28;
  v6[3] = v6;
  sub_100E87758((uint64_t)v7, (uint64_t)v6);
  sub_100E85C84((void *)(a1 + 88), 2uLL, 8uLL, (uint64_t)v7, (uint64_t)v4);
  sub_100E878BC(v7);
  if (v4[0] == -1.0) {
    uint64_t v2 = v5;
  }
  else {
    uint64_t v2 = 2;
  }
  sub_100E878BC(v6);
  return v2;
}

void sub_100E85A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100E878BC((void *)(v6 - 56));
  sub_100E878BC((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_100E85A28(uint64_t a1)
{
  return *(float *)(a1 + 24) > 0.825 && *(void *)(a1 + 16) == 4;
}

void sub_100E85A48(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 80);
  if (v2 > 2)
  {
    unint64_t v3 = 0;
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v3 = qword_101D93440[v2];
    unint64_t v4 = qword_101D93470[v2];
  }
  v10[0] = off_1022FECE8;
  v10[1] = sub_100E85A28;
  v10[3] = v10;
  sub_100E85C84((void *)(a1 + 88), v3, v4, (uint64_t)v10, (uint64_t)v7);
  sub_100E878BC(v10);
  v9[0] = off_1022FECE8;
  v9[1] = sub_100E85E28;
  v9[3] = v9;
  sub_100E85C84((void *)(a1 + 88), 1uLL, v4, (uint64_t)v9, (uint64_t)v6);
  sub_100E878BC(v9);
  v8[0] = off_1022FECE8;
  v8[1] = sub_100E85E30;
  v8[3] = v8;
  sub_100E85C84((void *)(a1 + 88), 1uLL, v4, (uint64_t)v8, (uint64_t)v6);
  sub_100E878BC(v8);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  sub_100E85270(v5, (uint64_t)"isOutdoorCycleEpoch", 1, (uint64_t)v7);
}

void sub_100E85C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_100E878BC(va);
  _Unwind_Resume(a1);
}

double sub_100E85C84@<D0>(void *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0xBFF0000000000000;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t v10 = a1[4];
  unint64_t v9 = a1[5];
  *(unsigned char *)(a5 + 32) = v9 >= a3;
  *(void *)(a5 + 16) = a2;
  *(void *)(a5 + 24) = a3;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = (v10 + v9) / 0x2A;
  uint64_t v13 = a1[1];
  uint64_t v14 = a1[2];
  uint64_t v15 = (void *)(v13 + 8 * v12);
  if (v14 == v13) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = *v15 + 96 * (v11 - 42 * v12);
  }
  if (a3 <= 1) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = a3;
  }
  for (uint64_t i = v17 - 1; ; --i)
  {
    unint64_t v19 = v14 == v13 ? 0 : *(void *)(v13 + 8 * (a1[4] / 0x2AuLL)) + 96 * (a1[4] % 0x2AuLL);
    if (v16 == v19) {
      break;
    }
    uint64_t v20 = v16;
    if (v16 == *v15) {
      uint64_t v20 = *(v15 - 1) + 4032;
    }
    uint64_t v21 = *(void *)(a4 + 24);
    if (!v21) {
      sub_10015E48C();
    }
    unint64_t v22 = *(int *)(a5 + 8)
        + (unint64_t)(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v21 + 48))(v21, v20 - 96);
    *(_DWORD *)(a5 + 8) = v22;
    if (a2 <= v22)
    {
      if (v16 == *v15) {
        uint64_t v16 = *(v15 - 1) + 4032;
      }
      double result = *(double *)(v16 - 8);
      *(double *)a5 = result;
      return result;
    }
    if (!i) {
      return result;
    }
    if (v16 == *v15)
    {
      uint64_t v24 = *--v15;
      uint64_t v16 = v24 + 4032;
    }
    v16 -= 96;
    uint64_t v13 = a1[1];
    uint64_t v14 = a1[2];
  }
  return result;
}

uint64_t sub_100E85E28(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

BOOL sub_100E85E30(uint64_t a1)
{
  return *(double *)(a1 + 72) > 1.72110396 && *(unsigned char *)(a1 + 80) != 0;
}

double sub_100E85E50(void *a1)
{
  uint64_t v2 = a1 + 11;
  v14[0] = off_1022FECE8;
  v14[1] = sub_100E860B8;
  v14[3] = v14;
  sub_100E85C84(a1 + 11, 3uLL, 5uLL, (uint64_t)v14, (uint64_t)v11);
  sub_100E878BC(v14);
  uint64_t v3 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  sub_100E85270(v3, (uint64_t)"notIsOutdoorCycleEpoch", 0, (uint64_t)v11);
  v13[0] = off_1022FECE8;
  v13[1] = sub_100E860C8;
  v13[3] = v13;
  sub_100E85C84(v2, 1uLL, 5uLL, (uint64_t)v13, (uint64_t)v10);
  sub_100E878BC(v13);
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  sub_100E85270(v4, (uint64_t)"isPedEpochOutdoorCycle", 0, (uint64_t)v10);
  v12[0] = off_1022FECE8;
  v12[1] = sub_100E860B8;
  void v12[3] = v12;
  sub_100E85C84(v2, 6uLL, 0xAuLL, (uint64_t)v12, (uint64_t)v9);
  sub_100E878BC(v12);
  uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  sub_100E85270(v5, (uint64_t)"notIsOutdoorCycleEpoch", 0, (uint64_t)v9);
  if (v10[0] >= v11[0]) {
    double v6 = v11[0];
  }
  else {
    double v6 = v10[0];
  }
  BOOL v7 = v10[0] == -1.0 || v11[0] == -1.0;
  double result = *(double *)v9;
  if (!v7) {
    return v6;
  }
  return result;
}

void sub_100E86084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  sub_100E878BC((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_100E860B8(uint64_t a1)
{
  return *(void *)(a1 + 16) != 4;
}

BOOL sub_100E860C8(uint64_t a1)
{
  return (unint64_t)(*(void *)(a1 + 16) - 1) < 2;
}

uint64_t sub_100E860DC()
{
  return 0;
}

double sub_100E860E4(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 80);
  if (v2 > 2)
  {
    unint64_t v3 = 0;
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v3 = qword_101D93458[v2];
    unint64_t v4 = qword_101D93470[v2];
  }
  v8[0] = off_1022FEC48;
  v8[1] = sub_100E86210;
  v8[3] = v8;
  sub_100507B0C((void *)(a1 + 88), v3, v4, (uint64_t)v8, (uint64_t)v7);
  sub_100507E30(v8);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  sub_100E85270(v5, (uint64_t)"isIndoorCycleEpoch", 1, (uint64_t)v7);
  return *(double *)v7;
}

void sub_100E861F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100507E30((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_100E86210(uint64_t a1)
{
  return *(void *)(a1 + 16) == 5;
}

double sub_100E86220(void *a1)
{
  uint64_t v2 = a1 + 11;
  v14[0] = off_1022FEC48;
  v14[1] = sub_100E86488;
  v14[3] = v14;
  sub_100507B0C(a1 + 11, 3uLL, 5uLL, (uint64_t)v14, (uint64_t)v11);
  sub_100507E30(v14);
  uint64_t v3 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  sub_100E85270(v3, (uint64_t)"notIsIndoorCycleEpoch", 0, (uint64_t)v11);
  v13[0] = off_1022FEC48;
  v13[1] = sub_100E8649C;
  v13[3] = v13;
  sub_100507B0C(v2, 1uLL, 5uLL, (uint64_t)v13, (uint64_t)v10);
  sub_100507E30(v13);
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  sub_100E85270(v4, (uint64_t)"isPedEpochIndoorCycle", 0, (uint64_t)v10);
  v12[0] = off_1022FEC48;
  v12[1] = sub_100E86488;
  void v12[3] = v12;
  sub_100507B0C(v2, 6uLL, 0xAuLL, (uint64_t)v12, (uint64_t)v9);
  sub_100507E30(v12);
  uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  sub_100E85270(v5, (uint64_t)"notIsIndoorCycleEpoch", 0, (uint64_t)v9);
  if (v10[0] >= v11[0]) {
    double v6 = v11[0];
  }
  else {
    double v6 = v10[0];
  }
  BOOL v7 = v10[0] == -1.0 || v11[0] == -1.0;
  double result = *(double *)v9;
  if (!v7) {
    return v6;
  }
  return result;
}

void sub_100E86454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  sub_100507E30((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_100E86488(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  return v1 != 5 && v1 != 9;
}

BOOL sub_100E8649C(uint64_t a1)
{
  return (unint64_t)(*(void *)(a1 + 16) - 1) < 2;
}

void sub_100E864B0(void *a1, double *a2)
{
  uint64_t v4 = operator new(8uLL);
  std::string __p = v4;
  *uint64_t v4 = 0x900000005;
  double v6 = v4 + 1;
  BOOL v7 = v4 + 1;
  __int16 v23 = 0;
  *(_OWORD *)unint64_t v22 = xmmword_101D1E250;
  memset(&v22[2], 0, 135);
  long long v24 = xmmword_101D1E250;
  uint64_t v25 = 0;
  int v26 = 0;
  uint64_t v27 = 0;
  v28[0] = 0;
  *(void *)((char *)v28 + 5) = 0;
  *(void *)((char *)&v28[1] + 6) = 0;
  char v29 = 0;
  memset(&v28[3], 0, 24);
  long long v30 = xmmword_101D1E250;
  uint64_t v31 = 0;
  int v32 = 0;
  unint64_t v33 = 0xFFEFFFFFFFFFFFFFLL;
  int v44 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  int v39 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  memset(v43, 0, sizeof(v43));
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  unint64_t v47 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v48 = 0;
  int v49 = 0;
  uint64_t v55 = 0;
  __int16 v56 = 0;
  int v61 = 0;
  int v54 = 0;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  char v59 = 0;
  memset(v60, 0, sizeof(v60));
  unint64_t v62 = 0xFFEFFFFFFFFFFFFFLL;
  long long v81 = 0u;
  long long v80 = 0u;
  long long v79 = 0u;
  long long v78 = 0u;
  long long v77 = 0u;
  long long v76 = 0u;
  long long v75 = 0u;
  long long v74 = 0u;
  long long v73 = 0u;
  long long v72 = 0u;
  long long v71 = 0u;
  long long v70 = 0u;
  long long v69 = 0u;
  long long v68 = 0u;
  long long v67 = 0u;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  uint64_t v82 = 0;
  *(void *)uint64_t v83 = 0xFFEFFFFFFFFFFFFFLL;
  memset(&v83[8], 0, 64);
  unint64_t v84 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v85 = 0;
  int v86 = 0;
  uint64_t v87 = 0;
  char v88 = 0;
  unint64_t v89 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v91 = 0;
  uint64_t v90 = 0;
  uint64_t v92 = 0x80000000800000;
  uint64_t v94 = 0;
  uint64_t v93 = 0;
  long long v95 = xmmword_101D1E260;
  uint64_t v96 = 0x80000000800000;
  long long v97 = 0u;
  long long v98 = 0u;
  *(void *)&long long v99 = 0;
  *((void *)&v99 + 1) = 0xFFEFFFFFFFFFFFFFLL;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  LODWORD(v106) = 0;
  unint64_t v107 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v108 = 0;
  int v109 = 0;
  unint64_t v110 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v111 = 7;
  unint64_t v112 = 0xFFEFFFFFFFFFFFFFLL;
  char v113 = 0;
  uint64_t v115 = 0;
  uint64_t v114 = 0;
  uint64_t v116 = 0;
  sub_100174478(a2, &__p, (uint64_t)v22);
  if (*(double *)v83 == -1.79769313e308)
  {
    sub_100E86868(a1);
  }
  else
  {
    _DWORD v8[2] = *(_OWORD *)&v83[32];
    v8[3] = *(_OWORD *)&v83[48];
    uint64_t v9 = *(void *)&v83[64];
    v8[0] = *(_OWORD *)v83;
    v8[1] = *(_OWORD *)&v83[16];
    long long v16 = v103;
    long long v17 = v104;
    long long v18 = v105;
    uint64_t v19 = v106;
    uint64_t v20 = 0;
    long long v12 = v99;
    long long v13 = v100;
    long long v14 = v101;
    long long v15 = v102;
    long long v10 = v97;
    long long v11 = v98;
    LOBYTE(v20) = *((double *)&v99 + 1) != -1.79769313e308;
    uint64_t v21 = *(void *)v83;
    sub_100E86804(a1 + 11, v8);
  }
  if (__p)
  {
    double v6 = __p;
    operator delete(__p);
  }
}

void sub_100E867E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E86804(void *a1, long long *a2)
{
  sub_100E87940(a1, a2);
  unint64_t v3 = a1[5];
  if (v3 >= 0x28)
  {
    ++a1[4];
    a1[5] = v3 - 1;
    sub_100665538((uint64_t)a1, 1);
  }
}

void sub_100E86868(void *a1)
{
  uint64_t v2 = (void **)a1[12];
  uint64_t v3 = a1[13];
  a1[16] = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[13];
      uint64_t v2 = (void **)(a1[12] + 8);
      a1[12] = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 8;
  }
  else
  {
    if (v4 >> 3 != 2) {
      return;
    }
    uint64_t v6 = 17;
  }
  a1[15] = v6;
}

uint64_t sub_100E868E0(uint64_t a1)
{
  v6[0] = off_1022FED98;
  v6[1] = sub_100E869DC;
  v6[3] = v6;
  sub_100E87D38((uint64_t)v7, (uint64_t)v6);
  sub_100E86B2C((void *)(a1 + 88), 2uLL, 8uLL, (uint64_t)v7, (uint64_t)v4);
  sub_100E87E9C(v7);
  if (v4[0] == -1.0) {
    uint64_t v2 = v5;
  }
  else {
    uint64_t v2 = 2;
  }
  sub_100E87E9C(v6);
  return v2;
}

void sub_100E869B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100E87E9C((void *)(v6 - 56));
  sub_100E87E9C((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_100E869DC(uint64_t a1)
{
  return *(float *)(a1 + 24) > 0.775 && *(void *)(a1 + 16) == 19;
}

double sub_100E86A00(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 80);
  if (v2 > 2)
  {
    unint64_t v3 = 0;
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v3 = qword_101D93488[v2];
    unint64_t v4 = qword_101D934A0[v2];
  }
  v8[0] = off_1022FED98;
  v8[1] = sub_100E869DC;
  v8[3] = v8;
  sub_100E86B2C((void *)(a1 + 88), v3, v4, (uint64_t)v8, (uint64_t)v7);
  sub_100E87E9C(v8);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  sub_100E85270(v5, (uint64_t)"isSwimEpoch", 1, (uint64_t)v7);
  return *(double *)v7;
}

void sub_100E86B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100E87E9C((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_100E86B2C@<D0>(void *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0xBFF0000000000000;
  *(_DWORD *)(a5 + 8) = 0;
  uint64_t v10 = a1[4];
  unint64_t v9 = a1[5];
  *(unsigned char *)(a5 + 32) = v9 >= a3;
  *(void *)(a5 + 16) = a2;
  *(void *)(a5 + 24) = a3;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = (v10 + v9) / 0x11;
  uint64_t v13 = a1[1];
  uint64_t v14 = a1[2];
  long long v15 = (void *)(v13 + 8 * v12);
  if (v14 == v13) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = *v15 + 240 * (v11 - 17 * v12);
  }
  if (a3 <= 1) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = a3;
  }
  for (uint64_t i = v17 - 1; ; --i)
  {
    unint64_t v19 = v14 == v13 ? 0 : *(void *)(v13 + 8 * (a1[4] / 0x11uLL)) + 240 * (a1[4] % 0x11uLL);
    if (v16 == v19) {
      break;
    }
    uint64_t v20 = v16;
    if (v16 == *v15) {
      uint64_t v20 = *(v15 - 1) + 4080;
    }
    uint64_t v21 = *(void *)(a4 + 24);
    if (!v21) {
      sub_10015E48C();
    }
    unint64_t v22 = *(int *)(a5 + 8)
        + (unint64_t)(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v21 + 48))(v21, v20 - 240);
    *(_DWORD *)(a5 + 8) = v22;
    if (a2 <= v22)
    {
      if (v16 == *v15) {
        uint64_t v16 = *(v15 - 1) + 4080;
      }
      double result = *(double *)(v16 - 8);
      *(double *)a5 = result;
      return result;
    }
    if (!i) {
      return result;
    }
    if (v16 == *v15)
    {
      uint64_t v24 = *--v15;
      uint64_t v16 = v24 + 4080;
    }
    v16 -= 240;
    uint64_t v13 = a1[1];
    uint64_t v14 = a1[2];
  }
  return result;
}

double sub_100E86CC4(void *a1)
{
  uint64_t v2 = a1 + 11;
  v17[0] = off_1022FED98;
  v17[1] = sub_100E86F98;
  v17[3] = v17;
  sub_100E86B2C(a1 + 11, 1uLL, 0xFuLL, (uint64_t)v17, (uint64_t)v13);
  sub_100E87E9C(v17);
  if (v13[0] == -1.0) {
    unint64_t v3 = sub_100E86FAC;
  }
  else {
    unint64_t v3 = sub_100E86FEC;
  }
  v16[0] = off_1022FED98;
  v16[1] = v3;
  v16[3] = v16;
  sub_100E86B2C(v2, 6uLL, 0xAuLL, (uint64_t)v16, (uint64_t)v12);
  sub_100E87E9C(v16);
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  sub_100E85270(v4, (uint64_t)"notIsSwimEpoch", 0, (uint64_t)v12);
  v15[0] = off_1022FED98;
  v15[1] = sub_100E86F98;
  uint64_t v15[3] = v15;
  sub_100E86B2C(v2, 1uLL, 0xAuLL, (uint64_t)v15, (uint64_t)v11);
  sub_100E87E9C(v15);
  uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  sub_100E85270(v5, (uint64_t)"isPedEpochSwim", 0, (uint64_t)v11);
  v14[0] = off_1022FED98;
  v14[1] = v3;
  v14[3] = v14;
  sub_100E86B2C(v2, 0xAuLL, 0xFuLL, (uint64_t)v14, (uint64_t)v10);
  sub_100E87E9C(v14);
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
  sub_100E85270(v6, (uint64_t)"notIsSwimEpoch", 0, (uint64_t)v10);
  if (v11[0] >= v12[0]) {
    double v7 = v12[0];
  }
  else {
    double v7 = v11[0];
  }
  BOOL v8 = v11[0] == -1.0 || v12[0] == -1.0;
  double result = *(double *)v10;
  if (!v8) {
    return v7;
  }
  return result;
}

void sub_100E86F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
}

BOOL sub_100E86F98(uint64_t a1)
{
  return (unint64_t)(*(void *)(a1 + 16) - 1) < 2;
}

BOOL sub_100E86FAC(uint64_t a1)
{
  BOOL result = 0;
  uint64_t v3 = *(void *)(a1 + 16);
  int v4 = *(unsigned __int8 *)(a1 + 224);
  int v5 = *(_DWORD *)(a1 + 196);
  if (v4) {
    BOOL v6 = v5 == 6;
  }
  else {
    BOOL v6 = 0;
  }
  char v8 = v6 && v3 != 4;
  if (v3 != 19 && (v8 & 1) == 0) {
    return v3 != 5 && v3 != 9;
  }
  return result;
}

BOOL sub_100E86FEC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  BOOL v2 = v1 == 4;
  BOOL v3 = v1 != 19;
  if (*(_DWORD *)(a1 + 196) != 6 || *(unsigned char *)(a1 + 224) == 0) {
    return v3;
  }
  else {
    return v2;
  }
}

void *sub_100E8701C(void *a1)
{
  *a1 = off_1022FE958;
  sub_10050757C(a1 + 11);
  return a1;
}

void sub_100E87060(void *a1)
{
  *a1 = off_1022FE958;
  sub_10050757C(a1 + 11);

  operator delete();
}

BOOL sub_100E870C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1001BD934(a2);
  return v3 == (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
}

void *sub_100E87120(void *a1)
{
  *a1 = off_1022FEA78;
  sub_100D97288(a1 + 11);
  return a1;
}

void sub_100E87164(void *a1)
{
  *a1 = off_1022FEA78;
  sub_100D97288(a1 + 11);

  operator delete();
}

uint64_t sub_100E871C8()
{
  return 4;
}

void *sub_100E871D4(void *a1)
{
  *a1 = off_1022FEB98;
  sub_100663B8C(a1 + 11);
  return a1;
}

void sub_100E87218(void *a1)
{
  *a1 = off_1022FEB98;
  sub_100663B8C(a1 + 11);

  operator delete();
}

void sub_100E87280(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void *sub_100E872B0(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = off_1022FEC48;
  result[1] = v3;
  return result;
}

uint64_t sub_100E872F8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022FEC48;
  a2[1] = v2;
  return result;
}

uint64_t sub_100E87324(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_100E87330(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_1022FECB8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100E87370()
{
  return &off_1022FECB8;
}

__n128 sub_100E8737C(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100E87440(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v11 = *(_OWORD *)(a2 + 48);
  long long v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 80) = v12;
  *(__n128 *)(v8 + 32) = result;
  *(_OWORD *)(v8 + 48) = v11;
  ++a1[5];
  return result;
}

void sub_100E87440(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)sub_1000DA54C(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      long long v37 = &v34[8 * v36];
      long long v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        long long v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)long long v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      long long v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int16 v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0xFC0uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  char v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100E8770C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100E87758(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100E877F0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1022FECE8;
  result[1] = v3;
  return result;
}

uint64_t sub_100E87838(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022FECE8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100E87864(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_100E87870(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_1022FED68)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100E878B0()
{
  return &off_1022FED68;
}

void *sub_100E878BC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

__n128 sub_100E87940(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 2 * (v4 - v5) + ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100E87A20(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x11)) + 240 * (v7 % 0x11);
  long long v9 = *a2;
  long long v10 = a2[2];
  *(_OWORD *)(v8 + 16) = a2[1];
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)unint64_t v8 = v9;
  long long v11 = a2[3];
  long long v12 = a2[4];
  long long v13 = a2[6];
  *(_OWORD *)(v8 + 80) = a2[5];
  *(_OWORD *)(v8 + 96) = v13;
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)(v8 + 64) = v12;
  long long v14 = a2[7];
  long long v15 = a2[8];
  long long v16 = a2[10];
  *(_OWORD *)(v8 + 144) = a2[9];
  *(_OWORD *)(v8 + 160) = v16;
  *(_OWORD *)(v8 + 112) = v14;
  *(_OWORD *)(v8 + 128) = v15;
  __n128 result = (__n128)a2[11];
  long long v18 = a2[12];
  long long v19 = a2[14];
  *(_OWORD *)(v8 + 208) = a2[13];
  *(_OWORD *)(v8 + 224) = v19;
  *(__n128 *)(v8 + 176) = result;
  *(_OWORD *)(v8 + 192) = v18;
  ++a1[5];
  return result;
}

void sub_100E87A20(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x11;
  unint64_t v4 = v2 - 17;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)sub_1000DA54C(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      long long v37 = &v34[8 * v36];
      long long v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        long long v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)long long v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    long long v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      long long v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  __int16 v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  char v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100E87CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100E87D38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100E87DD0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1022FED98;
  result[1] = v3;
  return result;
}

uint64_t sub_100E87E18(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022FED98;
  a2[1] = v2;
  return result;
}

uint64_t sub_100E87E44(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_100E87E50(uint64_t a1, uint64_t a2)
{
  if (sub_1000E9B14(a2, (uint64_t)&off_1022FEE18)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100E87E90()
{
  return &off_1022FEE18;
}

void *sub_100E87E9C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

double sub_100E87F20@<D0>(uint64_t a1@<X8>)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022FEE88);
  }
  uint64_t v2 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 134217984;
    uint64_t v6 = 0x4014000000000000;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Cross Training, Compendium METS, METS, %f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022FEE88);
    }
    unint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieCrossTrainingModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  *(_OWORD *)a1 = xmmword_101D934D0;
  *(void *)(a1 + 16) = 0x40A0000000000000;
  *(void *)(a1 + 24) = 0x40A0000000000000;
  *(void *)&double result = 0x400000003;
  *(void *)(a1 + 32) = 0x400000003;
  return result;
}

void sub_100E88100(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

double sub_100E88130(uint64_t a1, uint64_t a2)
{
  return sub_100E88154(a1, a2, v3);
}

double sub_100E88154(uint64_t a1, uint64_t a2, double *a3)
{
  double v5 = sub_100E883DC(a1, *(unsigned __int8 *)(a2 + 48));
  a3[2] = v5;
  double v6 = *(float *)(a2 + 20) * -0.699999988 + 208.0;
  double v7 = v6 + -44.0;
  if (!*(unsigned char *)(a2 + 48)) {
    double v7 = *(float *)(a2 + 20) * -0.699999988 + 208.0;
  }
  *a3 = v6;
  a3[1] = v7;
  if (v5 < v7) {
    double v5 = v7;
  }
  if (v5 >= v6) {
    double v8 = v6;
  }
  else {
    double v8 = v5;
  }
  if (qword_102419160 != -1) {
    dispatch_once(&qword_102419160, &stru_1022FEEA8);
  }
  long long v9 = qword_102419168;
  if (os_log_type_enabled((os_log_t)qword_102419168, OS_LOG_TYPE_DEBUG))
  {
    double v10 = a3[2];
    uint64_t v11 = *((void *)a3 + 1);
    if (v10 == -1.79769313e308) {
      double v10 = -1.0;
    }
    *(_DWORD *)int buf = 134284289;
    double v15 = v10;
    __int16 v16 = 2049;
    uint64_t v17 = v11;
    __int16 v18 = 2049;
    double v19 = v6;
    __int16 v20 = 2049;
    double v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "HRMaxEstimator,vo2MaxObservedHRMax,%{private}f,ageAndBetaBlockerPredictedHrMax,%{private}f,hrMaxCeiling,%{private}f,estimatedHRMax,%{private}f", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419160 != -1) {
      dispatch_once(&qword_102419160, &stru_1022FEEA8);
    }
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "double CLHRMaxEstimator::getEstimatedHRMax(const CLBodyMetrics &, CLHRMaxFeatures &) const", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  return v8;
}

double sub_100E883DC(uint64_t a1, uint64_t a2)
{
  long long v30 = 0;
  long long v31 = 0;
  uint64_t v32 = 0;
  uint64_t v3 = sub_1011E124C();
  CFAbsoluteTimeGetCurrent();
  sub_1011E1F28(v3, a2, &v30);
  std::string __p = 0;
  uint64_t v28 = 0;
  char v29 = 0;
  unint64_t v4 = (double *)v30;
  double v5 = v31;
  if (v30 == v31) {
    goto LABEL_46;
  }
  do
  {
    if (v4[10] >= 0.6 && *((void *)v4 + 6) >= 0x1EuLL)
    {
      if (qword_102419160 != -1) {
        dispatch_once(&qword_102419160, &stru_1022FEEA8);
      }
      double v7 = qword_102419168;
      if (os_log_type_enabled((os_log_t)qword_102419168, OS_LOG_TYPE_DEBUG))
      {
        double v8 = v4[9];
        int v9 = *((_DWORD *)v4 + 44);
        *(_DWORD *)int buf = 134283777;
        double v38 = v8;
        __int16 v39 = 1025;
        int v40 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "HRMaxEstimator,clusterHrMean,%{private}f,vo2MaxModelSource,%{private}d", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419160 != -1) {
          dispatch_once(&qword_102419160, &stru_1022FEEA8);
        }
        double v20 = v4[9];
        int v21 = *((_DWORD *)v4 + 44);
        int v33 = 134283777;
        double v34 = v20;
        __int16 v35 = 1025;
        int v36 = v21;
        unint64_t v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "double CLHRMaxEstimator::getObservedHRMaxFromVO2MaxClusters(BOOL) const", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      if (*((_DWORD *)v4 + 44) == 1)
      {
        double v10 = v28;
        if (v28 >= v29)
        {
          uint64_t v12 = (char *)__p;
          uint64_t v13 = (v28 - (unsigned char *)__p) >> 3;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61) {
            sub_1001D7FD4();
          }
          uint64_t v15 = v29 - (unsigned char *)__p;
          if ((v29 - (unsigned char *)__p) >> 2 > v14) {
            unint64_t v14 = v15 >> 2;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            uint64_t v17 = (char *)sub_1000DA54C((uint64_t)&v29, v16);
            uint64_t v12 = (char *)__p;
            double v10 = v28;
          }
          else
          {
            uint64_t v17 = 0;
          }
          __int16 v18 = &v17[8 * v13];
          *(double *)__int16 v18 = v4[9];
          uint64_t v11 = v18 + 8;
          while (v10 != v12)
          {
            uint64_t v19 = *((void *)v10 - 1);
            v10 -= 8;
            *((void *)v18 - 1) = v19;
            v18 -= 8;
          }
          std::string __p = v18;
          uint64_t v28 = v11;
          char v29 = &v17[8 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *(double *)uint64_t v28 = v4[9];
          uint64_t v11 = v10 + 8;
        }
        uint64_t v28 = v11;
      }
    }
    v4 += 23;
  }
  while (v4 != v5);
  if ((unint64_t)(v28 - (unsigned char *)__p) <= 0x18)
  {
LABEL_46:
    double v23 = -1.79769313e308;
  }
  else
  {
    double v23 = sub_10126DA1C((uint64_t)&__p, 95);
    if (qword_102419160 != -1) {
      dispatch_once(&qword_102419160, &stru_1022FEEA8);
    }
    uint64_t v24 = qword_102419168;
    if (os_log_type_enabled((os_log_t)qword_102419168, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 134283521;
      double v38 = v23;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "HRMaxEstimator,observedHRMax,%{private}f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419160 != -1) {
        dispatch_once(&qword_102419160, &stru_1022FEEA8);
      }
      int v33 = 134283521;
      double v34 = v23;
      unint64_t v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "double CLHRMaxEstimator::getObservedHRMaxFromVO2MaxClusters(BOOL) const", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
  }
  if (__p)
  {
    uint64_t v28 = (char *)__p;
    operator delete(__p);
  }
  if (v30)
  {
    long long v31 = (double *)v30;
    operator delete(v30);
  }
  return v23;
}

void sub_100E88894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E888D8(id a1)
{
  qword_102419168 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HeartRate");
}

void sub_100E889B8(id a1)
{
  qword_102481FC8 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLAvengerObservationReporterServiceSilo"];
}

id sub_100E89290(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) silo];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100E89310;
  void v5[3] = &unk_10229FED8;
  void v5[4] = a2;
  return [v3 async:v5];
}

void sub_100E89310(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022FEF08);
    }
    uint64_t v2 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_ERROR))
    {
      id v3 = [[objc_msgSend(*(id *)(a1 + 32), "description") UTF8String];
      int v6 = 68289282;
      int v7 = 0;
      __int16 v8 = 2082;
      int v9 = "";
      __int16 v10 = 2082;
      id v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#CLAvengerObservationReporterService WARN: onAvengerAdvertisementDetected: saveBeaconPayloads error received\", \"error\":%{public, location:escape_only}s}", (uint8_t *)&v6, 0x1Cu);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022FEF08);
      }
    }
    unint64_t v4 = qword_102419568;
    if (os_signpost_enabled((os_log_t)qword_102419568))
    {
      id v5 = [[objc_msgSend(*(id *)(a1 + 32), "description") UTF8String];
      int v6 = 68289282;
      int v7 = 0;
      __int16 v8 = 2082;
      int v9 = "";
      __int16 v10 = 2082;
      id v11 = v5;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#CLAvengerObservationReporterService WARN: onAvengerAdvertisementDetected: saveBeaconPayloads error received", "{\"msg%{public}.0s\":\"#CLAvengerObservationReporterService WARN: onAvengerAdvertisementDetected: saveBeaconPayloads error received\", \"error\":%{public, location:escape_only}s}", (uint8_t *)&v6, 0x1Cu);
    }
  }
}

void sub_100E896D8(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_100E89708(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_100E89738()
{
  sub_100134750(&qword_102481FB0, "com.apple.camera");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102481FB0, (void *)&_mh_execute_header);
}

void sub_100E897DC(id a1)
{
  if (sub_1007414F8())
  {
    sub_100103240();
    if ((sub_1001073D0() & 8) != 0) {
      byte_102481FE0 = 1;
    }
  }
}

void sub_100E898C0(id a1)
{
  qword_102481FF0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLGnssProviderSilo"];
}

uint64_t sub_100E89980(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100E8BA5C;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102482000 != -1) {
    dispatch_once(&qword_102482000, block);
  }
  return qword_10248ADF8;
}

void sub_100E8A02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E8A4A0(uint64_t a1, _DWORD *a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022FF188);
  }
  unint64_t v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    sub_100D335B8(a2, __p);
    id v5 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? __p
       : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "state,%{public}s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022FF188);
    }
    sub_100D335B8(a2, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    int v19 = 136446210;
    double v20 = p_buf;
    unint64_t v14 = (std::string *)_os_log_send_and_compose_impl();
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::handleEmergencyStateChange(CLEmergencyState)", "%s\n", (const char *)v14);
    if (v14 != __p) {
      free(v14);
    }
  }
  long long v16 = *(_OWORD *)a2;
  int v17 = a2[4];
  sub_10083BDC4((uint64_t *)(a1 + 120), &v16);
  int v6 = *(unsigned __int8 *)(a1 + 3272);
  BOOL v7 = *(unsigned char *)(a1 + 3272) == 0;
  BOOL v8 = sub_100D33A54((uint64_t)a2);
  *(unsigned char *)(a1 + 3272) = v8;
  char v9 = v7 && v8;
  if (v7 && v8)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022FF188);
    }
    __int16 v10 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "notifyEmergencyLocationStatus(true)", (uint8_t *)__p, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_27;
    }
    bzero(__p, 0x65CuLL);
    if (qword_1024193E0 == -1)
    {
LABEL_39:
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      uint64_t v15 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::handleEmergencyStateChange(CLEmergencyState)", "%s\n", (const char *)v15);
      if (v15 != __p) {
        free(v15);
      }
LABEL_27:
      sub_100E8B950((unsigned char *)a1, v9);
      return;
    }
LABEL_41:
    dispatch_once(&qword_1024193E0, &stru_1022FF188);
    goto LABEL_39;
  }
  if (v6) {
    char v11 = v8;
  }
  else {
    char v11 = 1;
  }
  if ((v11 & 1) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022FF188);
    }
    uint64_t v12 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "notifyEmergencyLocationStatus(false)", (uint8_t *)__p, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_27;
    }
    bzero(__p, 0x65CuLL);
    if (qword_1024193E0 == -1) {
      goto LABEL_39;
    }
    goto LABEL_41;
  }
}

void sub_100E8AA08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10084DD34((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E8AB28(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022FF108);
  }
  unint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Provider,addRhythmicGnssClient", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    BOOL v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::addRhythmicGnssClient(CLRhythmicGnssWakeMode)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (sub_100743D34())
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    id v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Provider,addRhythmicGnssClient new architecture", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      BOOL v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::addRhythmicGnssClient(CLRhythmicGnssWakeMode)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    *(_DWORD *)std::string buf = a2;
    sub_10196E0E0(a1 + 3320, (int *)buf);
    if (sub_10197234C(a1 + 3320)) {
      sub_100837F90(a1 + 120, 1);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Provider,addRhythmicGnssClient not supported on this platform", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      char v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::addRhythmicGnssClient(CLRhythmicGnssWakeMode)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

void sub_100E8AFD4(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022FF108);
  }
  unint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Provider,removeRhythmicGnssClient", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    BOOL v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::removeRhythmicGnssClient(CLRhythmicGnssWakeMode)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (sub_100743D34())
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    id v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Provider,removeRhythmicGnssClient new Architecture", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      BOOL v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::removeRhythmicGnssClient(CLRhythmicGnssWakeMode)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    *(_DWORD *)std::string buf = a2;
    sub_10196D12C(a1 + 3320, (int *)buf);
    if (!sub_10197234C(a1 + 3320)) {
      sub_100837F90(a1 + 120, 0);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Provider,removeRhythmicGnssClient not supported on this platform", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      char v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::removeRhythmicGnssClient(CLRhythmicGnssWakeMode)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

void sub_100E8B76C(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022FF108);
  }
  unint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a2 + 4);
    uint64_t v6 = *(void *)(a2 + 12);
    *(_DWORD *)std::string buf = 134283777;
    uint64_t v9 = v5;
    __int16 v10 = 2049;
    uint64_t v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "forwardRelayedLocation location,lat,%{private}+.6f,lon,%{private}.6f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    BOOL v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::forwardRelayedLocation(const CLDaemonLocation &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_1008497C4(a1 + 120, a2);
}

void sub_100E8B950(unsigned char *a1, char a2)
{
  sub_1000DB3D4((uint64_t)v4);
  char v7 = a2;
  sub_100E9077C(a1);
  int v12 = 12;
  if (sub_1001072EC((uint64_t)a1, &v12, 1))
  {
    int v12 = 12;
    (*(void (**)(unsigned char *, int *, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v12, v4, 1, 0xFFFFFFFFLL, 0);
  }
  sub_100E8CD3C((uint64_t)a1);

  if (v10) {
    sub_1000DB0A0(v10);
  }
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_100E8BA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100E8BA5C()
{
}

void sub_100E8BAA8()
{
}

void sub_100E8BACC(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)sub_1006B766C(a1, "CLGnssProvider", a2);
  *uint64_t v2 = off_1022FEF78;
  uint64_t v3 = v2[4];
  v12[0] = off_1022FF238;
  v12[1] = v2;
  void v12[3] = v12;
  v11[0] = off_1022FF2C8;
  v11[1] = v2;
  unsigned __int8 v11[3] = v11;
  v10[0] = off_1022FF348;
  v10[1] = v2;
  v10[3] = v10;
  v9[0] = off_1022FF3C8;
  v9[1] = v2;
  v9[3] = v9;
  v8[0] = off_1022FF448;
  v8[1] = v2;
  v8[3] = v8;
  v7[0] = off_1022FF4C8;
  v7[1] = v2;
  v7[3] = v7;
  v6[0] = off_1022FF558;
  v6[1] = v2;
  v6[3] = v6;
  v5[0] = off_1022FF5E8;
  v5[1] = v2;
  void v5[3] = v5;
  v4[0] = off_1022FF668;
  v4[1] = v2;
  void v4[3] = v4;
  sub_1008378F0((uint64_t)(v2 + 15), v3, (uint64_t)v12, (uint64_t)v11, (uint64_t)v10, (uint64_t)v9, (uint64_t)v8, (uint64_t)v7, (uint64_t)v6, (uint64_t)v5, (uint64_t)v4);
}

void sub_100E8C2BC(_Unwind_Exception *a1)
{
  uint64_t v5 = v1[458];
  v1[458] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_10196CD08(v3);
  sub_100E93A88(v1 + 414, 0);
  uint64_t v6 = v1[408];
  v1[408] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_100837F8C(v2);
  sub_1006B7BEC(v1);
  _Unwind_Resume(a1);
}

void sub_100E8C3D4(uint64_t a1)
{
}

void sub_100E8C3DC(id *a1)
{
  [a1[400] setNextFireDelay:1.79769313e308];
  *(_DWORD *)std::string buf = 0;
  if (sub_1001072EC((uint64_t)a1, (int *)buf, 1))
  {
    *(_DWORD *)std::string buf = 9;
    if (sub_1001072EC((uint64_t)a1, (int *)buf, 1))
    {
      *(_DWORD *)std::string buf = 9;
      (*((void (**)(id *, uint8_t *, uint64_t, uint64_t))*a1 + 18))(a1, buf, 1, 0xFFFFFFFFLL);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    uint64_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning,timeout when no location clients,debouncing?", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::onLocationTimeout()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

void sub_100E8C5E8(uint64_t a1)
{
}

void sub_100E8C5F0(uint64_t a1)
{
  *(_DWORD *)std::string buf = 0;
  if (sub_1001072EC(a1, (int *)buf, 1))
  {
    if (*(double *)(a1 + 3216) >= 0.0 && *(double *)(a1 + 3240) >= 0.0)
    {
      double v2 = sub_10016C458();
      double v3 = v2 - *(double *)(a1 + 3216);
      if (v3 >= 3.0)
      {
        sub_1000DB3D4((uint64_t)v13);
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        int v16 = 1;
        CFAbsoluteTime v17 = Current;
        double v18 = sub_1000D3E50();
        double v19 = v2;
        double v4 = v2 - *(double *)(a1 + 3240);
        if (v4 <= 15.0)
        {
          long long v14 = *(_OWORD *)(a1 + 3224);
          *(double *)(a1 + 3240) = v2;
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022FF108);
        }
        uint64_t v5 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v6 = *(void *)(a1 + 3216);
          uint64_t v7 = *(void *)(a1 + 3240);
          uint64_t v8 = *(void *)(a1 + 3224);
          *(_DWORD *)std::string buf = 134350592;
          CFAbsoluteTime v41 = Current;
          __int16 v42 = 2050;
          double v43 = v2;
          __int16 v44 = 2050;
          uint64_t v45 = v6;
          __int16 v46 = 2050;
          uint64_t v47 = v7;
          __int16 v48 = 2050;
          double v49 = v3;
          __int16 v50 = 2050;
          uint64_t v51 = v8;
          __int16 v52 = 2050;
          double v53 = v4;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "DeadReckoning,%{public}.1lf,Notification sent,currentTime,%{public}.1lf,fLastPositionTimeStamp,%{public}.1lf,fLastGoodSpeedTime,%{public}.1lf,locTimeDiff,%{public}.1lf,fLastGoodSpeed,%{public}.1lf,velTimeDiff,%{public}.1lf", buf, 0x48u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022FF108);
          }
          uint64_t v9 = *(void *)(a1 + 3216);
          uint64_t v10 = *(void *)(a1 + 3240);
          uint64_t v11 = *(void *)(a1 + 3224);
          int v26 = 134350592;
          CFAbsoluteTime v27 = Current;
          __int16 v28 = 2050;
          double v29 = v2;
          __int16 v30 = 2050;
          uint64_t v31 = v9;
          __int16 v32 = 2050;
          uint64_t v33 = v10;
          __int16 v34 = 2050;
          double v35 = v3;
          __int16 v36 = 2050;
          uint64_t v37 = v11;
          __int16 v38 = 2050;
          double v39 = v4;
          int v12 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::onGNSSOutage()", "%s\n", v12);
          if (v12 != (char *)buf) {
            free(v12);
          }
        }
        *(_DWORD *)std::string buf = 26;
        (*(void (**)(uint64_t, uint8_t *, unsigned char *, void, uint64_t, void))(*(void *)a1 + 152))(a1, buf, v13, 0, 0xFFFFFFFFLL, 0);

        if (v24) {
          sub_1000DB0A0(v24);
        }
        if (v23 < 0) {
          operator delete(__p);
        }
        if (v21) {
          sub_1000DB0A0(v21);
        }
        if (v20) {
          sub_1000DB0A0(v20);
        }
      }
    }
  }
}

void sub_100E8C94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E8C984(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022FF1A8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssProvider::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022FF1A8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      CFAbsoluteTime v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssProvider::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100E91B5C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100E8CB40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E8CB60(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022FF1A8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssProvider::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022FF1A8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      CFAbsoluteTime v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssProvider::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100E91FE4(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100E8CD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E8CD3C(uint64_t a1)
{
  if (sub_100743D34())
  {
    sub_1000DB3D4((uint64_t)v7);
    double v2 = sub_10016C458() - *(double *)(a1 + 3216);
    int v3 = (v2 >= 1200.0) & (*(_DWORD *)(a1 + 3296) >> 1);
    BOOL v4 = !sub_10010145C() || ((v3 | !sub_100119964()) & 1) != 0 || *(unsigned char *)(a1 + 3272) != 0;
    BOOL v14 = v4;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    uint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67240704;
      BOOL v22 = v14;
      __int16 v23 = 2050;
      double v24 = v2;
      __int16 v25 = 1026;
      int v26 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ilsa,CLGnssProvider,notifyRhythmicStreamingControl,isStreamingAllowed,%{public}d,timeSinceLastGnssFix_s,%{public}.3lf,streamingForced,%{public}d", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      int v15 = 67240704;
      BOOL v16 = v14;
      __int16 v17 = 2050;
      double v18 = v2;
      __int16 v19 = 1026;
      int v20 = v3;
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::notifyRhythmicGnssStreamingControlStateToClients()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    *(_DWORD *)std::string buf = 42;
    (*(void (**)(uint64_t, uint8_t *, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, buf, v7, 1, 0xFFFFFFFFLL, 0);

    if (v12) {
      sub_1000DB0A0(v12);
    }
    if (v11 < 0) {
      operator delete(__p);
    }
    if (v9) {
      sub_1000DB0A0(v9);
    }
    if (v8) {
      sub_1000DB0A0(v8);
    }
  }
}

void sub_100E8D018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E8D048(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022FF108);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLGnssProvider,onGnssStop", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    int v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::onGnssStop()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  *(double *)(a1 + 3632) = sub_10016C458();
  sub_100E8D1F0(a1, (uint64_t *)(a1 + 3624));
}

void sub_100E8D1F0(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022FF108);
  }
  BOOL v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    uint64_t v7 = a2[2];
    *(_DWORD *)std::string buf = 134284033;
    uint64_t v32 = v5;
    __int16 v33 = 2049;
    uint64_t v34 = v6;
    __int16 v35 = 2049;
    uint64_t v36 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLGNSSStateQueryAssertion,gnss,notifyClientWithGnssStatusRequest,lastGnssStartTime_s,%{private}.3lf,lastGnssStopTime_s,%{private}.3lf,lastGnssYieldTime_s,%{private}.3lf", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    uint64_t v12 = *a2;
    uint64_t v13 = a2[1];
    uint64_t v14 = a2[2];
    int v17 = 134284033;
    uint64_t v18 = v12;
    __int16 v19 = 2049;
    uint64_t v20 = v13;
    __int16 v21 = 2049;
    uint64_t v22 = v14;
    int v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::notifyClientWithGnssStatusRequest(const CLLocationProvider_Type::CLGNSSStateQueryAssertionReportData &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  *(_DWORD *)std::string buf = 45;
  if (sub_1001072EC(a1, (int *)buf, 1))
  {
    sub_1000DB3D4((uint64_t)&v17);
    long long v29 = *(_OWORD *)a2;
    uint64_t v30 = a2[2];
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    uint64_t v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *a2;
      uint64_t v10 = a2[1];
      uint64_t v11 = a2[2];
      *(_DWORD *)std::string buf = 134284033;
      uint64_t v32 = v9;
      __int16 v33 = 2049;
      uint64_t v34 = v10;
      __int16 v35 = 2049;
      uint64_t v36 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#CLGNSSStateQueryAssertion,gnss,notifyClientWithGnssStatusRequest,lastGnssStartTime_s,%{private}.3lf,lastGnssStopTime_s,%{private}.3lf,lastGnssYieldTime_s,%{private}.3lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      BOOL v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::notifyClientWithGnssStatusRequest(const CLLocationProvider_Type::CLGNSSStateQueryAssertionReportData &)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    *(_DWORD *)std::string buf = 45;
    (*(void (**)(uint64_t, uint8_t *, int *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, buf, &v17, 1, 0xFFFFFFFFLL, 0);

    if (v27) {
      sub_1000DB0A0(v27);
    }
    if (v26 < 0) {
      operator delete(__p);
    }
    if (v24) {
      sub_1000DB0A0(v24);
    }
    if (v23) {
      sub_1000DB0A0(v23);
    }
  }
}

void sub_100E8D610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E8D644(uint64_t a1)
{
  *(void *)a1 = off_1022FEF78;
  double v2 = *(void **)(a1 + 3656);
  if (v2 && *(void *)(a1 + 3648))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLGnssProvider,unsubscribe to leech visits", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLGnssProvider::~CLGnssProvider()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    [*(id *)(a1 + 3656) stopLeechingVisitsForClient:*(void *)(a1 + 3648)];
    double v2 = *(void **)(a1 + 3656);
  }

  *(void *)(a1 + 3656) = 0;
  *(void *)(a1 + 3648) = 0;
  [*(id *)(a1 + 3248) stopMonitoringEmergencyState:CLISP_ME_TOKEN];

  [*(id *)(a1 + 3200) invalidate];
  *(void *)(a1 + 3200) = 0;
  [*(id *)(a1 + 3208) invalidate];

  *(void *)(a1 + 3208) = 0;
  [*(id *)(a1 + 3256) stopMonitoringRelayLocation:CLISP_ME_TOKEN];
  uint64_t v4 = *(void *)(a1 + 3664);
  *(void *)(a1 + 3664) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_10196CD08(a1 + 3320);
  sub_100E93A88((uint64_t *)(a1 + 3312), 0);
  uint64_t v5 = *(void *)(a1 + 3264);
  *(void *)(a1 + 3264) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_100837F8C((uint64_t *)(a1 + 120));
  sub_1006B7BEC(a1);
  return a1;
}

void sub_100E8D900(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_100E8D910(uint64_t a1)
{
  sub_100E8D644(a1);

  operator delete();
}

void sub_100E8D948()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022FF108);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "CLGnssProvider,start", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssProvider::start()", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

uint64_t sub_100E8DAD0(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022FF108);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGnssProvider,shutdown", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssProvider::shutdown()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  *(_DWORD *)std::string buf = 0;
  if ((int)sub_1001072EC(a1, (int *)buf, 1) >= 1)
  {
    sub_100E8DCD4(a1);
    sub_100E8DEBC((unsigned char *)a1, 0);
  }
  sub_1006B7C30(a1);
  sub_10083AEFC(a1 + 120);
  uint64_t result = *(void *)(a1 + 3664);
  *(void *)(a1 + 3664) = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_100E8DCD4(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022FF108);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGnssProvider,stopLocation", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    int v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::stopLocation()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  [*(id *)(a1 + 3200) setNextFireDelay:1.79769313e308];
  [*(id *)(a1 + 3208) setNextFireDelay:1.79769313e308];
  if (*(unsigned char *)(a1 + 3672))
  {
    [*(id *)(*(void *)(a1 + 3664) + 16) unregister:*(void *)(*(void *)(a1 + 3664) + 8) forNotification:27];
    *(unsigned char *)(a1 + 3672) = 0;
  }
  sub_10083ADD4(a1 + 120);
  sub_100E9077C((unsigned char *)a1);
}

void sub_100E8DEBC(unsigned char *a1, char a2)
{
  sub_1000DB3D4((uint64_t)v5);
  int v8 = 1;
  char v9 = a2;
  int v4 = 11;
  (*(void (**)(unsigned char *, int *, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v4, v5, 1, 0xFFFFFFFFLL, 0);
  a1[3273] = a2;

  if (v12) {
    sub_1000DB0A0(v12);
  }
  if (v11 < 0) {
    operator delete(v10);
  }
  if (v7) {
    sub_1000DB0A0(v7);
  }
  if (v6) {
    sub_1000DB0A0(v6);
  }
}

void sub_100E8DF90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E8DFA4(uint64_t result, _DWORD *a2)
{
  if (!*a2)
  {
    uint64_t v2 = result + 120;
    int v3 = sub_1001266F8(result, 0);
    return sub_100836844(v2, v3);
  }
  return result;
}

void sub_100E8DFF8(uint64_t a1, int a2, int a3, int *a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022FF108);
  }
  int v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *a4;
    int v10 = *(_DWORD *)(a1 + 3308);
    int v11 = *(unsigned __int8 *)(a1 + 3274);
    *(_DWORD *)std::string buf = 67241216;
    int v34 = a2;
    __int16 v35 = 1026;
    int v36 = a3;
    __int16 v37 = 1026;
    int v38 = v9;
    __int16 v39 = 1026;
    int v40 = v10;
    __int16 v41 = 1026;
    int v42 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLGnssProvider,updateGnssModeOfOperation,enable,%{public}d,numberOfClients,%{public}d,notification,%{public}d,prevNumberOfActiveGNSSClients,%{public}d,previousRhythmicGnssRunning,%{public}d", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    id v28 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::updateGnssModeOfOperation(const BOOL, const uint32_t, const CLLocationProvider_Type::Notification &)", "%s\n", v28);
    if (v28 != (char *)buf) {
      free(v28);
    }
  }
  if (*a4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    uint64_t v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLGnssProvider,invalid notification to update the state", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    __int16 v25 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssProvider::updateGnssModeOfOperation(const BOOL, const uint32_t, const CLLocationProvider_Type::Notification &)", "%s\n");
LABEL_127:
    if (v25 != buf) {
      free(v25);
    }
    return;
  }
  *(_DWORD *)(a1 + 3308) = a3;
  if (a2)
  {
    if (!a3)
    {
      int v15 = 0;
LABEL_69:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      uint64_t v20 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 67240192;
        int v34 = v15;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "CLGnssProvider,updateGnssModeOfOperation,send1HzupdateNoti,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022FF108);
        }
        long long v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::updateGnssModeOfOperation(const BOOL, const uint32_t, const CLLocationProvider_Type::Notification &)", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
      }
      if (v15) {
        sub_100E907E4(a1, 0, a2, -1);
      }
      return;
    }
    if (a3 == 1)
    {
      if (sub_10197233C(a1 + 3320))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022FF108);
        }
        id v13 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLGnssProvider,updateGnssModeOfOperation,Only Rhythmic Client", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_99;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1)
        {
LABEL_137:
          uint64_t v31 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::updateGnssModeOfOperation(const BOOL, const uint32_t, const CLLocationProvider_Type::Notification &)", "%s\n", v31);
          if (v31 != (char *)buf) {
            free(v31);
          }
LABEL_99:
          *(unsigned char *)(a1 + 3274) = 1;
          return;
        }
LABEL_145:
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
        goto LABEL_137;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      __int16 v19 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "CLGnssProvider,updateGnssModeOfOperation,1Hz Only", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_68;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_134;
      }
      goto LABEL_148;
    }
    if (!*(unsigned char *)(a1 + 3274)) {
      goto LABEL_155;
    }
    if (sub_10197233C(a1 + 3320))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      int v17 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLGnssProvider,updateGnssModeOfOperation,Rhythmic+1Hz", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_68;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_134:
        uint64_t v30 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::updateGnssModeOfOperation(const BOOL, const uint32_t, const CLLocationProvider_Type::Notification &)", "%s\n", v30);
        if (v30 != (char *)buf) {
          free(v30);
        }
LABEL_68:
        int v15 = 1;
        goto LABEL_69;
      }
LABEL_148:
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
      goto LABEL_134;
    }
    if (!*(unsigned char *)(a1 + 3274))
    {
LABEL_155:
      if (sub_10197233C(a1 + 3320))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022FF108);
        }
        __int16 v23 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLGnssProvider,updateGnssModeOfOperation,Rhythmic started,1Hz", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_99;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_137;
        }
        goto LABEL_145;
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    double v24 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLGnssProvider,updateGnssModeOfOperation,addition 1Hz", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_106:
        __int16 v25 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::updateGnssModeOfOperation(const BOOL, const uint32_t, const CLLocationProvider_Type::Notification &)", "%s\n");
        goto LABEL_127;
      }
LABEL_147:
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
      goto LABEL_106;
    }
    return;
  }
  if (a3 != 1)
  {
    if (a3)
    {
      if (!*(unsigned char *)(a1 + 3274) || (sub_10197233C(a1 + 3320) & 1) != 0)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022FF108);
        }
        uint64_t v18 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLGnssProvider,updateGnssModeOfOperation,one of 1Hz de-registered", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 == -1) {
            goto LABEL_106;
          }
          goto LABEL_147;
        }
        return;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      char v26 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CLGnssProvider,updateGnssModeOfOperation,Rhythmic off,1hz On", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1)
        {
LABEL_140:
          uint64_t v32 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::updateGnssModeOfOperation(const BOOL, const uint32_t, const CLLocationProvider_Type::Notification &)", "%s\n", v32);
          if (v32 != (char *)buf) {
            free(v32);
          }
          goto LABEL_119;
        }
LABEL_152:
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
        goto LABEL_140;
      }
    }
    else
    {
      if (!*(unsigned char *)(a1 + 3274) || (sub_10197233C(a1 + 3320) & 1) != 0)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022FF108);
        }
        uint64_t v14 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLGnssProvider,updateGnssModeOfOperation,1Hz only off", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_68;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_134;
        }
        goto LABEL_148;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      __int16 v21 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLGnssProvider,updateGnssModeOfOperation,Only Rhythmic Client off", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_140;
        }
        goto LABEL_152;
      }
    }
LABEL_119:
    *(unsigned char *)(a1 + 3274) = 0;
    return;
  }
  if (*(unsigned char *)(a1 + 3274))
  {
    if (sub_10197233C(a1 + 3320))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      BOOL v16 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "CLGnssProvider,updateGnssModeOfOperation,1Hz off", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_68;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_134;
      }
      goto LABEL_148;
    }
    if (*(unsigned char *)(a1 + 3274) && (sub_10197233C(a1 + 3320) & 1) == 0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      CFAbsoluteTime v27 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "CLGnssProvider,updateGnssModeOfOperation,Rhythmic Off", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_119;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_140;
      }
      goto LABEL_152;
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022FF108);
  }
  uint64_t v22 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "CLGnssProvider,updateGnssModeOfOperation,1Hz active", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_106;
    }
    goto LABEL_147;
  }
}

uint64_t sub_100E8F058(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v19 = a2;
  if (!*a3)
  {
    *(void *)std::string buf = &v19;
    id v5 = [[sub_10008A098((uint64_t **)(a1 + 80), (int *)&v19, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[8] description];
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v7 = v19;
      id v8 = [v5 UTF8String];
      *(_DWORD *)std::string buf = 67240450;
      *(_DWORD *)&uint8_t buf[4] = v7;
      __int16 v27 = 2082;
      id v28 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#wigo,on,GnssProviderBare,%{public}d,%{public}s", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      unsigned int v16 = v19;
      id v17 = [v5 UTF8String];
      int v22 = 67240450;
      unsigned int v23 = v16;
      __int16 v24 = 2082;
      id v25 = v17;
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGnssProvider::registerForNotification(int, const CLLocationProvider_Type::Notification &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    v20[0] = @"ServiceName";
    v20[1] = @"Register";
    v21[0] = v5;
    v21[1] = &__kCFBooleanTrue;
    +[NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:2];
    PLLogRegisteredEvent();
    a2 = v19;
  }
  uint64_t v9 = sub_1006B7C3C(a1, a2, (uint64_t)a3);
  if (v9)
  {
    *(_DWORD *)std::string buf = *a3;
    if ((int)sub_1001072EC(a1, (int *)buf, 1) >= 2) {
      sub_100E8DFA4(a1, a3);
    }
    if (!*a3)
    {
      *(_DWORD *)std::string buf = 0;
      int v10 = sub_1001072EC(a1, (int *)buf, 1);
      sub_100E8DFF8(a1, 1, v10, a3);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    int v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v12 = *a3;
      *(_DWORD *)std::string buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v19;
      __int16 v27 = 1026;
      LODWORD(v28) = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Registering for client,%{public}d,notification,%{public}d,failed", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      int v14 = *a3;
      int v22 = 67240448;
      unsigned int v23 = v19;
      __int16 v24 = 1026;
      LODWORD(v25) = v14;
      int v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGnssProvider::registerForNotification(int, const CLLocationProvider_Type::Notification &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  return v9;
}

BOOL sub_100E8F4BC(uint64_t a1, int a2, int *a3)
{
  int v19 = a2;
  if (!*a3)
  {
    *(void *)std::string buf = &v19;
    id v5 = [[sub_10008A098((uint64_t **)(a1 + 80), &v19, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[8] description];
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = v19;
      id v8 = [v5 UTF8String];
      *(_DWORD *)std::string buf = 67240450;
      *(_DWORD *)&uint8_t buf[4] = v7;
      __int16 v27 = 2082;
      id v28 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#wigo,off,GnssProviderBare,%{public}d,%{public}s", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      int v16 = v19;
      id v17 = [v5 UTF8String];
      int v22 = 67240450;
      int v23 = v16;
      __int16 v24 = 2082;
      id v25 = v17;
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGnssProvider::unregisterForNotification(int, const CLLocationProvider_Type::Notification &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    v20[0] = @"ServiceName";
    v20[1] = @"Register";
    v21[0] = v5;
    v21[1] = &__kCFBooleanFalse;
    +[NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:2];
    PLLogRegisteredEvent();
    a2 = v19;
  }
  BOOL v9 = sub_1001AF260((char *)a1, a2, a3);
  if (v9)
  {
    if (!*a3)
    {
      *(_DWORD *)std::string buf = 0;
      if ((int)sub_1001072EC(a1, (int *)buf, 1) >= 1)
      {
        *(_DWORD *)std::string buf = *a3;
        int v10 = sub_1001072EC(a1, (int *)buf, 1);
        sub_100E8DFF8(a1, 0, v10, a3);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    int v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v12 = *a3;
      *(_DWORD *)std::string buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v19;
      __int16 v27 = 1026;
      LODWORD(v28) = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Unregistering for client,%{public}d,notification,%{public}d,failed", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      int v14 = *a3;
      int v22 = 67240448;
      int v23 = v19;
      __int16 v24 = 1026;
      LODWORD(v25) = v14;
      int v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGnssProvider::unregisterForNotification(int, const CLLocationProvider_Type::Notification &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  return v9;
}

uint64_t sub_100E8F914(uint64_t a1, int *a2)
{
  if (!*a2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#wigo,on,GnssProviderInternal", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      LOWORD(v18) = 0;
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGnssProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
  if (sub_1000B015C())
  {
    switch(*a2)
    {
      case 28:
        sub_100848578((void *)(a1 + 120), 1);
        break;
      case 29:
        sub_100847DA4((void *)(a1 + 120), 1);
        break;
      case 30:
      case 31:
      case 32:
      case 33:
      case 36:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
        return 1;
      case 34:
        sub_100848CA8(a1 + 120, 1);
        break;
      case 35:
        sub_100848910((void *)(a1 + 120), 1);
        break;
      case 37:
        sub_100849098(a1 + 120, 1);
        break;
      case 38:
        sub_100848CB8(a1 + 120, 1);
        break;
      case 44:
        sub_10084AE90(a1 + 120, 1);
        break;
      case 45:
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022FF108);
        }
        int v10 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "kNotificationGNSSStatusIndication registered", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022FF108);
          }
          LOWORD(v18) = 0;
          int v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGnssProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v15);
          if (v15 != (char *)buf) {
            free(v15);
          }
        }
        int v11 = *(void **)(a1 + 32);
        if (v11)
        {
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_100E90204;
          block[3] = &unk_1022A3020;
          block[4] = a1;
          dispatch_async([[objc_msgSend(objc_msgSend(v11, "silo"), "queue") retain] autorelease], block);
        }
        break;
      default:
        if (!*a2)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022FF108);
          }
          id v8 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Start location in location notification", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1022FF108);
            }
            LOWORD(v18) = 0;
            int v16 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGnssProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v16);
            if (v16 != (char *)buf) {
              free(v16);
            }
          }
          sub_100E8DFA4(a1, a2);
          sub_100E9000C(a1);
          *(_DWORD *)std::string buf = *a2;
          int v9 = sub_1001072EC(a1, (int *)buf, 1);
          sub_100E8DFF8(a1, 1, v9, a2);
        }
        break;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    id v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v6 = *a2;
      *(_DWORD *)std::string buf = 67240192;
      int v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Internal registeration for notification,%{public}d,failed", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      int v12 = *a2;
      int v18 = 67240192;
      int v19 = v12;
      id v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGnssProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return 1;
}

void sub_100E9000C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022FF108);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGnssProvider,startLocation", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    int v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::startLocation()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  [*(id *)(a1 + 3200) setNextFireDelay:30.0];
  [*(id *)(a1 + 3208) setNextFireDelay:1.0 interval:1.0];
  if (!*(unsigned char *)(a1 + 3672))
  {
    [*(id *)(*(void *)(a1 + 3664) + 16) register:*(void *)(*(void *)(a1 + 3664) + 8) forNotification:27 registrationInfo:0];
    *(unsigned char *)(a1 + 3672) = 1;
  }
  sub_100E9077C((unsigned char *)a1);
  sub_100839E84(a1 + 120);
  *(double *)(a1 + 3624) = sub_10016C458();
  sub_100E8D1F0(a1, (uint64_t *)(a1 + 3624));
}

void sub_100E90204(uint64_t a1)
{
}

uint64_t sub_100E90210(void *a1, int *a2)
{
  if (!*a2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#wigo,off,GnssProviderInternal", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGnssProvider::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  sub_1006B7E64((uint64_t)a1);
  switch(*a2)
  {
    case 28:
      sub_100848578(a1 + 15, 0);
      break;
    case 29:
      sub_100847DA4(a1 + 15, 0);
      break;
    case 30:
    case 31:
    case 32:
    case 33:
    case 36:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
      return 1;
    case 34:
      sub_100848CA8((uint64_t)(a1 + 15), 0);
      break;
    case 35:
      sub_100848910(a1 + 15, 0);
      break;
    case 37:
      sub_100849098((uint64_t)(a1 + 15), 0);
      break;
    case 38:
      *(_DWORD *)std::string buf = 38;
      (*(void (**)(void *, uint8_t *))(*a1 + 120))(a1, buf);
      sub_100848CB8((uint64_t)(a1 + 15), 0);
      break;
    case 44:
      sub_10084AE90((uint64_t)(a1 + 15), 0);
      break;
    case 45:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      int v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "kNotificationGNSSStatusIndication unregistered", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022FF108);
        }
        int v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGnssProvider::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
      break;
    default:
      if (!*a2)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022FF108);
        }
        id v5 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "stopLocation in location notification", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022FF108);
          }
          int v11 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGnssProvider::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v11);
          if (v11 != (char *)buf) {
            free(v11);
          }
        }
        sub_100E8DCD4((uint64_t)a1);
        *(_DWORD *)std::string buf = *a2;
        int v6 = sub_1001072EC((uint64_t)a1, (int *)buf, 1);
        sub_100E8DFF8((uint64_t)a1, 0, v6, a2);
      }
      break;
  }
  return 1;
}

void sub_100E9077C(unsigned char *a1)
{
  if (a1[3272])
  {
    int v2 = 1;
  }
  else
  {
    int v3 = 0;
    int v2 = sub_1001072EC((uint64_t)a1, &v3, 1) != 0;
  }
  if (a1[3273] != v2) {
    sub_100E8DEBC(a1, v2);
  }
}

void sub_100E907E4(uint64_t a1, unsigned int a2, int a3, int a4)
{
  if (!sub_100743D34()) {
    return;
  }
  sub_1000DB3D4((uint64_t)v17);
  if (a2 >= 2)
  {
    if (a2 == 2)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      id v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "CLGnssProvider,#Warning,invalid mode of operation", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022FF108);
        }
        LOWORD(v29) = 0;
        int v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::notifyGnssModeOfOperationToClients(const CLLocationProvider_Type::GnssModeOfOperation, const BOOL, const CLRhythmicGnssWakeMode)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      goto LABEL_34;
    }
  }
  else
  {
    unsigned int v24 = a2;
  }
  unsigned __int8 v25 = a3;
  int v26 = a4;
  if (!a3)
  {
    if (v24 < 2)
    {
      uint64_t v10 = *(void *)(a1 + 3296) & ~(1 << v24);
      goto LABEL_19;
    }
    int v16 = "bitset reset argument out of range";
LABEL_53:
    sub_10000EDDC(v16);
  }
  if (v24 > 1)
  {
    int v16 = "bitset set argument out of range";
    goto LABEL_53;
  }
  uint64_t v10 = *(void *)(a1 + 3296) | (1 << v24);
LABEL_19:
  *(void *)(a1 + 3296) = v10;
  BOOL v28 = sub_10197234C(a1 + 3320);
  uint64_t v11 = *(void *)(a1 + 3296);
  if (*(unsigned char *)(a1 + 3273))
  {
    if ((sub_10197233C(a1 + 3320) | v11))
    {
      uint64_t v11 = *(void *)(a1 + 3296);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      int v12 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLGnssProvider,notifyRhythmicStatus,overwrite 1Hz client state", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022FF108);
        }
        LOWORD(v29) = 0;
        int v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssProvider::notifyGnssModeOfOperationToClients(const CLLocationProvider_Type::GnssModeOfOperation, const BOOL, const CLRhythmicGnssWakeMode)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      uint64_t v11 = *(void *)(a1 + 3296) | 1;
      *(void *)(a1 + 3296) = v11;
    }
  }
  uint64_t v27 = v11;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022FF108);
  }
  id v13 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67241472;
    unsigned int v42 = v24;
    __int16 v43 = 1026;
    int v44 = v26;
    __int16 v45 = 1026;
    int v46 = v27 & 1;
    __int16 v47 = 1026;
    unsigned int v48 = (v27 >> 1) & 1;
    __int16 v49 = 1026;
    int v50 = v25;
    __int16 v51 = 1026;
    BOOL v52 = v28;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLGnssProvider,notifyRhythmicStatus,modeOfOps,%{public}d,powerMode,%{public}d,currentModesOfOps,%{public}d,%{public}d,state,%{public}d,hasRhythmicClients,%{public}d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    int v29 = 67241472;
    unsigned int v30 = v24;
    __int16 v31 = 1026;
    int v32 = v26;
    __int16 v33 = 1026;
    int v34 = v27 & 1;
    __int16 v35 = 1026;
    unsigned int v36 = (v27 >> 1) & 1;
    __int16 v37 = 1026;
    int v38 = v25;
    __int16 v39 = 1026;
    BOOL v40 = v28;
    int v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::notifyGnssModeOfOperationToClients(const CLLocationProvider_Type::GnssModeOfOperation, const BOOL, const CLRhythmicGnssWakeMode)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  *(_DWORD *)(a1 + 3280) = v24;
  *(_DWORD *)(a1 + 3288) = v26;
  *(unsigned char *)(a1 + 3284) = v25;
  *(unsigned char *)(a1 + 3304) = v28;
  sub_10084AC6C(a1 + 120, a1 + 3280);
  *(_DWORD *)std::string buf = 41;
  (*(void (**)(uint64_t, uint8_t *, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, buf, v17, 1, 0xFFFFFFFFLL, 0);
  sub_100E8CD3C(a1);
LABEL_34:

  if (v22) {
    sub_1000DB0A0(v22);
  }
  if (v21 < 0) {
    operator delete(__p);
  }
  if (v19) {
    sub_1000DB0A0(v19);
  }
  if (v18) {
    sub_1000DB0A0(v18);
  }
}

void sub_100E90E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E90E4C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)std::string buf = 0;
  if (sub_1001072EC(a1, (int *)buf, 1)) {
    [*(id *)(a1 + 3200) setNextFireDelay:30.0];
  }
  sub_1000DB3D4((uint64_t)v23);
  long long v4 = *(_OWORD *)(a2 + 112);
  long long v27 = *(_OWORD *)(a2 + 96);
  long long v28 = v4;
  v29[0] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)v29 + 12) = *(_OWORD *)(a2 + 140);
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)unsigned int v24 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v24[16] = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  long long v25 = *(_OWORD *)(a2 + 64);
  long long v26 = v6;
  long long v7 = *(_OWORD *)(a2 + 16);
  v23[0] = *(_OWORD *)a2;
  v23[1] = v7;
  memcpy(v30, (const void *)(a2 + 160), 0x201uLL);
  uint64_t v8 = *(void *)(a2 + 680);
  int v9 = *(std::__shared_weak_count **)(a2 + 688);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v30[65] = v8;
  uint64_t v10 = v31;
  __int16 v31 = v9;
  if (v10) {
    sub_1000DB0A0(v10);
  }
  long long v11 = *(_OWORD *)(a2 + 776);
  long long v36 = *(_OWORD *)(a2 + 760);
  v37[0] = v11;
  *(void *)((char *)v37 + 13) = *(void *)(a2 + 789);
  long long v12 = *(_OWORD *)(a2 + 712);
  long long v32 = *(_OWORD *)(a2 + 696);
  long long v33 = v12;
  long long v13 = *(_OWORD *)(a2 + 744);
  long long v34 = *(_OWORD *)(a2 + 728);
  long long v35 = v13;
  uint64_t v14 = v30[43];
  uint64_t v15 = *(void *)&v24[20];
  BOOL v16 = *(double *)&v24[20] <= 0.0;
  *(void *)(a1 + 3216) = v30[43];
  if (!v16 && *(double *)&v24[12] >= 0.0)
  {
    *(void *)(a1 + 3224) = *(void *)&v24[12];
    *(void *)(a1 + 3232) = v15;
    *(void *)(a1 + 3240) = v14;
  }
  *(_DWORD *)std::string buf = 0;
  (*(void (**)(uint64_t, uint8_t *, _OWORD *, void, uint64_t, void))(*(void *)a1 + 152))(a1, buf, v23, 0, 0xFFFFFFFFLL, 0);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022FF108);
  }
  id v17 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v18 = *(_DWORD *)(a1 + 3296);
    *(_DWORD *)std::string buf = 67240448;
    int v48 = v18 & 1;
    __int16 v49 = 1026;
    int v50 = (v18 >> 1) & 1;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "CLGnssProvider,notifyClientsWithFix,GnssStatus,1Hz,%{public}d,RhythmicGnss,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    unsigned int v21 = *(_DWORD *)(a1 + 3296);
    int v43 = 67240448;
    int v44 = v21 & 1;
    __int16 v45 = 1026;
    int v46 = (v21 >> 1) & 1;
    int v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::notifyClientsWithFix(const GNSS::DaemonLocation &)", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  *(_DWORD *)std::string buf = 0;
  unsigned int v19 = sub_1001072EC(a1, (int *)buf, 1);
  unsigned int v20 = *(_DWORD *)(a1 + 3308);
  if (v20 != v19)
  {
    *(_DWORD *)std::string buf = 0;
    sub_100E8DFF8(a1, v19 > v20, v19, (int *)buf);
  }
  *(double *)(a1 + 3640) = sub_10016C458();
  sub_100E8D1F0(a1, (uint64_t *)(a1 + 3624));

  if (v41) {
    sub_1000DB0A0(v41);
  }
  if (v40 < 0) {
    operator delete(__p);
  }
  if (v38) {
    sub_1000DB0A0(v38);
  }
  if (v31) {
    sub_1000DB0A0(v31);
  }
}

void sub_100E911EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E9122C(uint64_t a1, long long *a2)
{
  sub_1000DB3D4((uint64_t)v9);
  long long v4 = (std::__shared_weak_count *)operator new(0x140uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1022FF808;
  __n128 v5 = sub_100E93B58((uint64_t)&v4[1], a2);
  uint64_t v14 = v6;
  long long v7 = v15;
  uint64_t v15 = v4;
  if (v7) {
    sub_1000DB0A0(v7);
  }
  int v8 = 25;
  (*(void (**)(uint64_t, int *, unsigned char *, void, uint64_t, void, __n128))(*(void *)a1 + 152))(a1, &v8, v9, 0, 0xFFFFFFFFLL, 0, v5);

  if (v15) {
    sub_1000DB0A0(v15);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  if (v11) {
    sub_1000DB0A0(v11);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
}

void sub_100E91340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E91358(uint64_t a1, int a2)
{
  sub_1000DB3D4((uint64_t)v5);
  int v8 = a2;
  int v4 = 18;
  (*(void (**)(uint64_t, int *, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v4, v5, 1, 0xFFFFFFFFLL, 0);

  if (v11) {
    sub_1000DB0A0(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v7) {
    sub_1000DB0A0(v7);
  }
  if (v6) {
    sub_1000DB0A0(v6);
  }
}

void sub_100E91420(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E91434(uint64_t a1, uint64_t a2)
{
  sub_1000DB3D4((uint64_t)v15);
  long long v4 = *(_OWORD *)(a2 + 112);
  v15[6] = *(_OWORD *)(a2 + 96);
  v15[7] = v4;
  v16[0] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)(a2 + 140);
  long long v5 = *(_OWORD *)(a2 + 48);
  _DWORD v15[2] = *(_OWORD *)(a2 + 32);
  uint64_t v15[3] = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  void v15[4] = *(_OWORD *)(a2 + 64);
  v15[5] = v6;
  long long v7 = *(_OWORD *)(a2 + 16);
  v15[0] = *(_OWORD *)a2;
  v15[1] = v7;
  memcpy(v17, (const void *)(a2 + 160), sizeof(v17));
  uint64_t v8 = *(void *)(a2 + 680);
  int v9 = *(std::__shared_weak_count **)(a2 + 688);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = v8;
  char v10 = v19;
  unsigned int v19 = v9;
  if (v10) {
    sub_1000DB0A0(v10);
  }
  long long v11 = *(_OWORD *)(a2 + 776);
  long long v24 = *(_OWORD *)(a2 + 760);
  v25[0] = v11;
  *(void *)((char *)v25 + 13) = *(void *)(a2 + 789);
  long long v12 = *(_OWORD *)(a2 + 712);
  long long v20 = *(_OWORD *)(a2 + 696);
  long long v21 = v12;
  long long v13 = *(_OWORD *)(a2 + 744);
  long long v22 = *(_OWORD *)(a2 + 728);
  long long v23 = v13;
  int v14 = 30;
  (*(void (**)(uint64_t, int *, _OWORD *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &v14, v15, 0, 0xFFFFFFFFLL, 0);

  if (v29) {
    sub_1000DB0A0(v29);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
  if (v26) {
    sub_1000DB0A0(v26);
  }
  if (v19) {
    sub_1000DB0A0(v19);
  }
}

void sub_100E91590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E915A4(uint64_t a1, long long *a2)
{
  sub_1000DB3D4((uint64_t)v7);
  long long v4 = a2[3];
  long long v16 = a2[2];
  long long v17 = v4;
  long long v18 = a2[4];
  long long v5 = a2[1];
  long long v14 = *a2;
  long long v15 = v5;
  uint64_t v19 = *((void *)a2 + 10);
  int v6 = 37;
  (*(void (**)(uint64_t, int *, unsigned char *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &v6, v7, 0, 0xFFFFFFFFLL, 0);

  if (v12) {
    sub_1000DB0A0(v12);
  }
  if (v11 < 0) {
    operator delete(v10);
  }
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v8) {
    sub_1000DB0A0(v8);
  }
}

void sub_100E9168C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100E916A0(uint64_t a1, int a2, int a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022FF108);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109376;
    int v12 = a2;
    __int16 v13 = 1024;
    int v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#clgda,gnss,notifyClientWithBasebandCausesL1InterferenceModeGnssStatus,band,%d,status,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    v8[0] = 67109376;
    v8[1] = a2;
    __int16 v9 = 1024;
    int v10 = a3;
    long long v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::notifyClientWithBasebandCausesL1InterferenceModeGnssStatus(GNSS::BasebandCausesL1InterferenceModeGnssBand, BOOL)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_1000DB3D4((uint64_t)buf);
  int v21 = a2;
  int v22 = a3 ^ 1;
  v8[0] = 38;
  if (sub_1001072EC(a1, v8, 1))
  {
    v8[0] = 38;
    (*(void (**)(uint64_t, int *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, v8, buf, 1, 0xFFFFFFFFLL, 0);
  }

  if (v19) {
    sub_1000DB0A0(v19);
  }
  if (v18 < 0) {
    operator delete(__p);
  }
  if (v16) {
    sub_1000DB0A0(v16);
  }
  if (v15) {
    sub_1000DB0A0(v15);
  }
}

void sub_100E91924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E91954(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022FF108);
  }
  long long v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = sub_1010FB9FC(*(int **)(a2 + 800));
    *(_DWORD *)std::string buf = 134349056;
    uint64_t v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic batched locations update,size,%{public}zu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    sub_1010FB9FC(*(int **)(a2 + 800));
    long long v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::notifyClientsWithRhythmicBatchedLocations(const CLLocationProvider_Type::NotificationData &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  *(_DWORD *)std::string buf = 43;
  return (*(uint64_t (**)(uint64_t, uint8_t *, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, buf, a2, 1, 0xFFFFFFFFLL, 0);
}

uint64_t sub_100E91B5C(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 27 && (*(_DWORD *)(a4 + 96) & 0xFFFFFFF7) == 1 && *(unsigned char *)(a4 + 516) != 0)
  {
    int v6 = (id *)result;
    *(_DWORD *)std::string buf = 0;
    if (sub_1001072EC(result, (int *)buf, 1))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      long long v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(const char **)(a4 + 76);
        int v9 = *(_DWORD *)(a4 + 96);
        *(_DWORD *)std::string buf = 134349312;
        int v21 = v8;
        __int16 v22 = 1026;
        int v23 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DeadReckoning,%{public}.1lf,propagated locations,%{public}d,reset timer", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022FF108);
        }
        uint64_t v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      [v6[400] setNextFireDelay:30.0];
    }
    if (qword_102419650 != -1) {
      dispatch_once(&qword_102419650, &stru_1022FF1E8);
    }
    int v10 = qword_102419658;
    if (os_log_type_enabled((os_log_t)qword_102419658, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = *(void *)(a4 + 4);
      uint64_t v12 = *(void *)(a4 + 12);
      uint64_t v13 = *(void *)(a4 + 20);
      uint64_t v14 = *(void *)(a4 + 44);
      uint64_t v15 = *(void *)(a4 + 60);
      uint64_t v16 = *(void *)(a4 + 184);
      int v17 = *(_DWORD *)(a4 + 128);
      *(_DWORD *)std::string buf = 136317186;
      int v21 = "CL-GnssPropagated";
      __int16 v22 = 1024;
      int v23 = 1;
      __int16 v24 = 2048;
      uint64_t v25 = v11;
      __int16 v26 = 2048;
      uint64_t v27 = v12;
      __int16 v28 = 2048;
      uint64_t v29 = v13;
      __int16 v30 = 2048;
      uint64_t v31 = v14;
      __int16 v32 = 2048;
      uint64_t v33 = v15;
      __int16 v34 = 2048;
      uint64_t v35 = v16;
      __int16 v36 = 1024;
      int v37 = v17;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Speed,%.2f,Course,%.2f,timestampGps,%.2lf,GgaOnly,integrity,%d", buf, 0x54u);
    }
    if (sub_10013D1A0(117, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419650 != -1) {
        dispatch_once(&qword_102419650, &stru_1022FF1E8);
      }
      char v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("LOCATION", 1, 0, 2, "void CLGnssProvider::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    *(_DWORD *)std::string buf = 0;
    return (*((uint64_t (**)(id *, uint8_t *, uint64_t, void, uint64_t, void))*v6 + 19))(v6, buf, a4, 0, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_100E91FE4(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022FF108);
  }
  long long v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    int v8 = *a3;
    *(_DWORD *)std::string buf = 67240192;
    LODWORD(v32) = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLGnssProvider,MA-OTA,notification,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022FF108);
    }
    int v17 = *a3;
    int v29 = 67240192;
    LODWORD(v30) = v17;
    char v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  if (*a3 == 4)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022FF208);
    }
    uint64_t v14 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = sub_1000E9358(a4);
      *(_DWORD *)std::string buf = 138477827;
      uint64_t v32 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#timingadvance Asset Harvest notification data: %{private}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022FF208);
      }
      int v29 = 138477827;
      uint64_t v30 = sub_1000E9358(a4);
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    sub_1000E9354(&v29);
    if (sub_100012960(a4, "CellHarvest", &v29))
    {
      LOBYTE(v26) = 0;
      if (sub_1000D2988((uint64_t)&v29, "TimingAdvance", (BOOL *)&v26))
      {
        sub_10084A188(a1 + 120, v26);
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022FF208);
        }
        uint64_t v16 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)std::string buf = 67109120;
          LODWORD(v32) = v26;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#timingadvance TelephonySrvice Asset Harvest notification data: %d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_1022FF208);
          }
          int v27 = 67109120;
          LODWORD(v28) = v26;
          uint64_t v25 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v25);
          if (v25 != (char *)buf) {
            free(v25);
          }
        }
      }
    }
  }
  else
  {
    if (*a3 != 2) {
      return;
    }
    sub_1000E9354(&v29);
    if (sub_100012960(a4, "GpsOdometrySettings", &v29))
    {
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_1022FF1C8);
      }
      int v9 = qword_102419368;
      if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "CLGnssProvider,MA-OTA,GpsOdometry config available", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419360 != -1) {
          dispatch_once(&qword_102419360, &stru_1022FF1C8);
        }
        LOWORD(v27) = 0;
        id v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
      sub_1008499AC(a1 + 120, (uint64_t)&v29);
    }
    if (sub_100012960(a4, "GnssConstellationSettings", &v29))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      int v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "CLGnssProvider,MA-OTA,GpsConst config available", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022FF108);
        }
        LOWORD(v27) = 0;
        int v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v21);
        if (v21 != (char *)buf) {
          free(v21);
        }
      }
      sub_1008499BC((_DWORD *)(a1 + 120), (uint64_t)&v29);
    }
    if (sub_100012960(a4, "GnssAssistanceFileSettings", &v29))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      uint64_t v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "CLGnssProvider,MA-OTA,GnssAssistanceFile config available", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022FF108);
        }
        LOWORD(v27) = 0;
        __int16 v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      sub_10084A344((uint64_t *)(a1 + 120), (uint64_t)&v29);
    }
    int v26 = 0;
    if (sub_10006EF84(a4, "GnssCoExConfigOverride", &v26))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      uint64_t v12 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 134217984;
        uint64_t v32 = v26;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "CLGnssProvider,MA-OTA,GnssCoExConfigOverride,%llu", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022FF108);
        }
        int v27 = 134217984;
        uint64_t v28 = v26;
        int v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
      sub_100849CC0((uint64_t *)(a1 + 120), v26);
    }
    if (sub_100012960(a4, "GnssKnownACSettings", &v29))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022FF108);
      }
      uint64_t v13 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "CLGnssProvider,MA-OTA,GnssKnownAC config available", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022FF108);
        }
        LOWORD(v27) = 0;
        __int16 v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssProvider::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
      sub_100849CD8(a1 + 120, (uint64_t)&v29);
    }
  }
  sub_10013F3C4(&v29);
}

void sub_100E92B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_100E92BC0()
{
}

void sub_100E92C78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_100E92CB4()
{
}

void sub_100E92D74(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_100E92DB0(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100E92DE0(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100E92E10(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100E92E40(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100E92E70(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_100E92EA0(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100E92ED0(id a1)
{
  qword_102419368 = (uint64_t)os_log_create("com.apple.locationd.Position", "GpsAccessory");
}

void sub_100E92F00(id a1)
{
  qword_102419658 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Location_deprecated");
}

void sub_100E92F30(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_100E92F64()
{
}

void *sub_100E92F78(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022FF238;
  result[1] = v3;
  return result;
}

uint64_t sub_100E92FC0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022FF238;
  a2[1] = v2;
  return result;
}

void sub_100E92FEC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100E92FF4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E93034()
{
}

void sub_100E93044()
{
}

void *sub_100E93058(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022FF2C8;
  result[1] = v3;
  return result;
}

uint64_t sub_100E930A0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022FF2C8;
  a2[1] = v2;
  return result;
}

void sub_100E930CC(uint64_t a1, long long *a2)
{
}

uint64_t sub_100E930D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E93114()
{
}

void sub_100E93124()
{
}

void *sub_100E93138(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022FF348;
  result[1] = v3;
  return result;
}

uint64_t sub_100E93180(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022FF348;
  a2[1] = v2;
  return result;
}

void sub_100E931AC(uint64_t a1, int *a2)
{
}

uint64_t sub_100E931B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E931F8()
{
}

void sub_100E93208()
{
}

void *sub_100E9321C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022FF3C8;
  result[1] = v3;
  return result;
}

uint64_t sub_100E93264(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022FF3C8;
  a2[1] = v2;
  return result;
}

void sub_100E93290(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100E93298(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E932D8()
{
}

void sub_100E932E8()
{
}

void *sub_100E932FC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022FF448;
  result[1] = v3;
  return result;
}

uint64_t sub_100E93344(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022FF448;
  a2[1] = v2;
  return result;
}

void sub_100E93370(uint64_t a1, long long *a2)
{
}

uint64_t sub_100E93378(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E933B8()
{
}

void sub_100E933C8()
{
}

void *sub_100E933DC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022FF4C8;
  result[1] = v3;
  return result;
}

uint64_t sub_100E93424(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022FF4C8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100E93450(uint64_t a1, uint64_t a2)
{
  return sub_100E91954(*(void *)(a1 + 8), a2);
}

uint64_t sub_100E93458(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E93498()
{
}

void sub_100E934A8()
{
}

void *sub_100E934BC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022FF558;
  result[1] = v3;
  return result;
}

uint64_t sub_100E93504(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022FF558;
  a2[1] = v2;
  return result;
}

void sub_100E93530(uint64_t a1, int *a2, unsigned __int8 *a3)
{
}

uint64_t sub_100E93540(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E93580()
{
}

void sub_100E93590()
{
}

void *sub_100E935A4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022FF5E8;
  result[1] = v3;
  return result;
}

uint64_t sub_100E935EC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022FF5E8;
  a2[1] = v2;
  return result;
}

void sub_100E93618(uint64_t a1)
{
}

uint64_t sub_100E93620(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E93660()
{
}

void sub_100E93670()
{
}

void *sub_100E93684(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022FF668;
  result[1] = v3;
  return result;
}

uint64_t sub_100E936CC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022FF668;
  a2[1] = v2;
  return result;
}

uint64_t sub_100E936F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = 47;
  return (*(uint64_t (**)(uint64_t, int *, uint64_t, void, uint64_t, void))(*(void *)v2 + 152))(v2, &v4, a2, 0, 0xFFFFFFFFLL, 0);
}

uint64_t sub_100E93758(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E93798()
{
}

void sub_100E937A8()
{
}

void *sub_100E937BC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022FF6E8;
  result[1] = v3;
  return result;
}

uint64_t sub_100E93804(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022FF6E8;
  a2[1] = v2;
  return result;
}

void sub_100E93830(uint64_t a1, unsigned int *a2, unsigned __int8 *a3, int *a4)
{
}

uint64_t sub_100E93844(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E93884()
{
}

void *sub_100E93890(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100E93918()
{
}

void *sub_100E9392C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022FF778;
  result[1] = v3;
  return result;
}

uint64_t sub_100E93974(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022FF778;
  a2[1] = v2;
  return result;
}

void sub_100E939A0(uint64_t a1)
{
}

uint64_t sub_100E939B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E939F8()
{
}

void *sub_100E93A04(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100E93A88(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1019BA958();
    operator delete();
  }
  return result;
}

void sub_100E93AD8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022FF808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100E93AF8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022FF808;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100E93B4C(uint64_t a1)
{
  return sub_100E93C68(a1 + 24);
}

__n128 sub_100E93B58(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v4 = *(long long *)((char *)a2 + 56);
  long long v5 = *(long long *)((char *)a2 + 72);
  *(_OWORD *)(a1 + 40) = *(long long *)((char *)a2 + 40);
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 56) = v4;
  long long v6 = *(long long *)((char *)a2 + 88);
  long long v7 = *(long long *)((char *)a2 + 104);
  long long v8 = *(long long *)((char *)a2 + 120);
  *(_OWORD *)(a1 + 136) = *(long long *)((char *)a2 + 136);
  *(_OWORD *)(a1 + 120) = v8;
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 88) = v6;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 152) = *(long long *)((char *)a2 + 152);
  *(void *)(a1 + 168) = *((void *)a2 + 21);
  *((void *)a2 + 21) = 0;
  *(long long *)((char *)a2 + 152) = 0u;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 176) = a2[11];
  *(void *)(a1 + 192) = *((void *)a2 + 24);
  *((void *)a2 + 24) = 0;
  a2[11] = 0u;
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 200) = *(long long *)((char *)a2 + 200);
  *(void *)(a1 + 216) = *((void *)a2 + 27);
  *(long long *)((char *)a2 + 200) = 0u;
  uint64_t v9 = *((void *)a2 + 28);
  *(long long *)((char *)a2 + 216) = 0u;
  *(void *)(a1 + 224) = v9;
  uint64_t v10 = *((void *)a2 + 29);
  *((void *)a2 + 29) = 0;
  *(void *)(a1 + 232) = v10;
  uint64_t v11 = *((void *)a2 + 30);
  *((void *)a2 + 30) = 0;
  *(void *)(a1 + 240) = v11;
  uint64_t v12 = *((void *)a2 + 31);
  *((void *)a2 + 31) = 0;
  *(void *)(a1 + 248) = v12;
  uint64_t v13 = *((void *)a2 + 32);
  *((void *)a2 + 32) = 0;
  *(void *)(a1 + 256) = v13;
  uint64_t v14 = *((void *)a2 + 33);
  *((void *)a2 + 33) = 0;
  *(void *)(a1 + 264) = v14;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  __n128 result = (__n128)a2[17];
  *(__n128 *)(a1 + 272) = result;
  *(void *)(a1 + 288) = *((void *)a2 + 36);
  *((void *)a2 + 34) = 0;
  *((void *)a2 + 35) = 0;
  *((void *)a2 + 36) = 0;
  return result;
}

uint64_t sub_100E93C68(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 272);
  if (v2)
  {
    *(void *)(a1 + 280) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = 0;
  if (v3) {
    operator delete();
  }
  uint64_t v4 = *(void *)(a1 + 256);
  *(void *)(a1 + 256) = 0;
  if (v4) {
    operator delete();
  }
  uint64_t v5 = *(void *)(a1 + 248);
  *(void *)(a1 + 248) = 0;
  if (v5) {
    operator delete();
  }
  uint64_t v6 = *(void *)(a1 + 240);
  *(void *)(a1 + 240) = 0;
  if (v6) {
    operator delete();
  }
  uint64_t v7 = *(void *)(a1 + 232);
  *(void *)(a1 + 232) = 0;
  if (v7) {
    operator delete();
  }
  uint64_t v8 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = 0;
  if (v8) {
    operator delete();
  }
  uint64_t v9 = *(void **)(a1 + 200);
  if (v9)
  {
    *(void *)(a1 + 208) = v9;
    operator delete(v9);
  }
  uint64_t v11 = (void **)(a1 + 176);
  sub_100E93D94(&v11);
  uint64_t v11 = (void **)(a1 + 152);
  sub_100E93EA4(&v11);
  return a1;
}

void sub_100E93D94(void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 18;
        sub_100E93E2C((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100E93E2C(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[14];
  if (v3)
  {
    a2[15] = v3;
    operator delete(v3);
  }
  uint64_t v4 = a2[6];
  a2[6] = 0;
  if (v4) {
    operator delete();
  }
  uint64_t v5 = (void *)a2[3];
  if (v5)
  {
    a2[4] = v5;
    operator delete(v5);
  }
}

void sub_100E93EA4(void ***a1)
{
  long long v2 = *a1;
  if (*v2)
  {
    sub_100E93EF8((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_100E93EF8(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 2;
    do
    {
      uint64_t v6 = (void *)*v5;
      *uint64_t v5 = 0;
      if (v6) {
        sub_100E93F5C((uint64_t)v5, v6);
      }
      uint64_t v7 = v5 - 20;
      v5 -= 22;
    }
    while (v7 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void sub_100E93F5C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (void *)a2[16];
    if (v3)
    {
      a2[17] = v3;
      operator delete(v3);
    }
    uint64_t v4 = (void *)a2[12];
    if (v4)
    {
      a2[13] = v4;
      operator delete(v4);
    }
    operator delete();
  }
}

void sub_100E93FC8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_100E94048()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_100E940D8(_Unwind_Exception *a1)
{
}

void sub_100E940F0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D93520;
      v0[3] = unk_101D93530;
      v0[4] = xmmword_101D93540;
      v0[0] = xmmword_101D93500;
      v0[1] = unk_101D93510;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_100E941D0(_Unwind_Exception *a1)
{
}

void sub_100E941E8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_100E94294(a1, (uint64_t)v4);
}

void sub_100E94270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A54CD8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_100E94294(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)long long v2 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  operator new();
}

void sub_100E9439C(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A91C08(&a15, a1, a2, v21 - 48);
  __int16 v24 = *(_Unwind_Exception **)(v21 - 48);
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(v24);
}

void sub_100E943F0(uint64_t a1@<X0>, void *a2@<X8>)
{
}

void sub_100E943F8(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
}

void sub_100E94400(uint64_t a1)
{
}

void sub_100E94408(uint64_t a1, unint64_t a2)
{
}

uint64_t sub_100E94410(uint64_t a1)
{
  return sub_1006D6E6C(*(void *)(a1 + 32));
}

uint64_t sub_100E94418(uint64_t a1)
{
  return sub_1006D5CC0(*(void *)(a1 + 32));
}

uint64_t sub_100E94420@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10064E680(*(void *)(a1 + 32), a2);
}

void sub_100E94428(uint64_t a1)
{
}

void sub_100E94430(uint64_t a1, long long *a2, int a3, uint64_t *a4, long long *a5)
{
  *(unsigned char *)a1 = 0;
  long long v8 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v8;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 40) = 0x100000002;
  uint64_t v9 = (void *)(a1 + 8);
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 49) = a3;
  if (*((char *)a5 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 56), *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v10 = *a5;
    *(void *)(a1 + 72) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 56) = v10;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v11 = *a4;
  *a4 = 0;
  *(void *)(a1 + 96) = v11;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022FF898);
  }
  uint64_t v12 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = v9;
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v13 = (void *)*v9;
    }
    buf[0] = 136315650;
    *(void *)&buf[1] = v13;
    __int16 v19 = 1024;
    int v20 = a3;
    __int16 v21 = 1024;
    int v22 = 1;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Creating managed location database %s (count triggers %d, use cache %d)", (uint8_t *)buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022FF898);
    }
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLManagedLocationDatabase<CLWifiLocationDatabase, CLWifiLocationDatabase::WifiData>::CLManagedLocationDatabase(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLWifiLocationDatabase, DataType = CLWifiLocationDatabase::WifiData]", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 96) + 16))(*(void *)(a1 + 96)))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022FF898);
    }
    uint64_t v14 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = v9;
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v15 = (void *)*v9;
      }
      buf[0] = 136315138;
      *(void *)&buf[1] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Data protection is enabled, creating in-memory database for table %s", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022FF898);
      }
      int v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLManagedLocationDatabase<CLWifiLocationDatabase, CLWifiLocationDatabase::WifiData>::CLManagedLocationDatabase(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLWifiLocationDatabase, DataType = CLWifiLocationDatabase::WifiData]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    sub_100E94C00(a1, a3);
  }
  sub_100DEDAA4();
}

void sub_100E94B4C(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *(void *)(v1 + 96);
  *(void *)(v1 + 96) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v2);
  }
  uint64_t v6 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E94C00(uint64_t a1, char a2)
{
  sub_100134750(__p, "");
  char v6 = 0;
  uint64_t v5 = 0;
  char v7 = a2;
  if (SHIBYTE(v4) < 0)
  {
    sub_1000DC48C(v8, __p[0], (unint64_t)__p[1]);
    uint64_t v9 = 0;
    if (SHIBYTE(v4) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)long long v8 = *(_OWORD *)__p;
    int v8[2] = v4;
    uint64_t v9 = 0;
  }
  sub_100DEDAA4();
}

void sub_100E94CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E94D18(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100E94D48(uint64_t a1)
{
  if (*(void *)(a1 + 88)) {
    sub_101A91F7C();
  }
  if (*(char *)(a1 + 31) >= 0) {
    size_t v2 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    size_t v2 = *(void *)(a1 + 16);
  }
  uint64_t v3 = __p;
  sub_1001110E4((uint64_t)__p, v2 + 17);
  if (v10 < 0) {
    uint64_t v3 = (void **)__p[0];
  }
  if (v2)
  {
    if (*(char *)(a1 + 31) >= 0) {
      uint64_t v4 = (const void *)(a1 + 8);
    }
    else {
      uint64_t v4 = *(const void **)(a1 + 8);
    }
    memmove(v3, v4, v2);
  }
  strcpy((char *)v3 + v2, "-InMemoryDatabase");
  int v5 = v10;
  char v6 = (void **)__p[0];
  char v7 = [CLOSTransaction alloc];
  if (v5 >= 0) {
    long long v8 = __p;
  }
  else {
    long long v8 = v6;
  }
  *(void *)(a1 + 88) = [(CLOSTransaction *)v7 initWithDescription:v8];
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100E94E50(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100E94E80(uint64_t a1, char *a2)
{
  sub_100134750(v4, a2);
  sub_100134750(&__p, "");
  sub_100E94F30(a1, (uint64_t)v4);
}

void sub_100E94EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E94F30(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)size_t v2 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  operator new();
}

void sub_100E95038(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A92140(&a15, a1, a2, v21 - 48);
  __int16 v24 = *(_Unwind_Exception **)(v21 - 48);
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(v24);
}

void sub_100E9508C(uint64_t a1, long long *a2, int a3, uint64_t *a4, long long *a5)
{
  *(unsigned char *)a1 = 0;
  long long v8 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v8;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 40) = 0x100000002;
  uint64_t v9 = (void *)(a1 + 8);
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 49) = a3;
  if (*((char *)a5 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 56), *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v10 = *a5;
    *(void *)(a1 + 72) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 56) = v10;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v11 = *a4;
  *a4 = 0;
  *(void *)(a1 + 96) = v11;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022FF928);
  }
  uint64_t v12 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = v9;
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v13 = (void *)*v9;
    }
    buf[0] = 136315650;
    *(void *)&buf[1] = v13;
    __int16 v19 = 1024;
    int v20 = a3;
    __int16 v21 = 1024;
    int v22 = 1;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Creating managed location database %s (count triggers %d, use cache %d)", (uint8_t *)buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022FF928);
    }
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLManagedLocationDatabase<CLCellLocationDatabase, CLTelephonyService_Type::Cell>::CLManagedLocationDatabase(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLCellLocationDatabase, DataType = CLTelephonyService_Type::Cell]", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 96) + 16))(*(void *)(a1 + 96)))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022FF928);
    }
    uint64_t v14 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = v9;
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v15 = (void *)*v9;
      }
      buf[0] = 136315138;
      *(void *)&buf[1] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Data protection is enabled, creating in-memory database for table %s", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022FF928);
      }
      int v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLManagedLocationDatabase<CLCellLocationDatabase, CLTelephonyService_Type::Cell>::CLManagedLocationDatabase(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLCellLocationDatabase, DataType = CLTelephonyService_Type::Cell]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    sub_100E9585C(a1, a3);
  }
  sub_10070098C();
}

void sub_100E957A8(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *(void *)(v1 + 96);
  *(void *)(v1 + 96) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v2);
  }
  uint64_t v6 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E9585C(uint64_t a1, char a2)
{
  sub_100134750(__p, "");
  char v6 = 0;
  uint64_t v5 = 0;
  char v7 = a2;
  if (SHIBYTE(v4) < 0)
  {
    sub_1000DC48C(v8, __p[0], (unint64_t)__p[1]);
    uint64_t v9 = 0;
    if (SHIBYTE(v4) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)long long v8 = *(_OWORD *)__p;
    int v8[2] = v4;
    uint64_t v9 = 0;
  }
  sub_10070098C();
}

void sub_100E9592C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E95974(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100E959A4(uint64_t a1)
{
  if (*(void *)(a1 + 88)) {
    sub_101A924B4();
  }
  if (*(char *)(a1 + 31) >= 0) {
    size_t v2 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    size_t v2 = *(void *)(a1 + 16);
  }
  uint64_t v3 = __p;
  sub_1001110E4((uint64_t)__p, v2 + 17);
  if (v10 < 0) {
    uint64_t v3 = (void **)__p[0];
  }
  if (v2)
  {
    if (*(char *)(a1 + 31) >= 0) {
      uint64_t v4 = (const void *)(a1 + 8);
    }
    else {
      uint64_t v4 = *(const void **)(a1 + 8);
    }
    memmove(v3, v4, v2);
  }
  strcpy((char *)v3 + v2, "-InMemoryDatabase");
  int v5 = v10;
  char v6 = (void **)__p[0];
  char v7 = [CLOSTransaction alloc];
  if (v5 >= 0) {
    long long v8 = __p;
  }
  else {
    long long v8 = v6;
  }
  *(void *)(a1 + 88) = [(CLOSTransaction *)v7 initWithDescription:v8];
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100E95AAC(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100E95ADC(double a1)
{
  double v4 = a1;
  uint64_t v1 = sub_1000A6958();
  sub_10016332C(v1, "CLAdaptiveExerciseMinuteThresholdUpdaterLastUpdateTime", &v4);
  uint64_t v2 = *(void *)sub_1000A6958();
  return (*(uint64_t (**)(void))(v2 + 944))();
}

float sub_100E95B4C(uint64_t a1, float *a2)
{
  *(void *)std::string buf = 0xBFF0000000000000;
  uint64_t v4 = sub_1000A6958();
  sub_1000A699C(v4, "CLAdaptiveExerciseMinuteThresholdUpdaterLastUpdateTime", buf);
  if (*(double *)buf < 0.0)
  {
    double v5 = sub_1004BE230();
    sub_100E95ADC(v5);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022FF968);
    }
    char v6 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "ExerciseMinuteThresholdUpdater, begin tracking elapsed time for updates", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022FF968);
      }
      LOWORD(v48) = 0;
      int v44 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "float CLAdaptiveExerciseMinuteThresholdUpdater::update(const CLBodyMetrics &)", "%s\n", v44);
      if (v44 != buf) {
        free(v44);
      }
    }
    return a2[13];
  }
  std::string __p = 0;
  int v46 = 0;
  uint64_t v47 = 0;
  uint64_t v8 = sub_1011E124C();
  int v9 = sub_1011E1AFC(v8, &__p);
  char v10 = v46;
  if (__p == v46)
  {
    char v10 = __p;
  }
  else
  {
    uint64_t v11 = (char *)__p + 144;
    while (*(v11 - 36))
    {
      BOOL v12 = v11 == v46;
      v11 += 144;
      if (v12) {
        goto LABEL_22;
      }
    }
    uint64_t v13 = v11 - 144;
    if (v11 - 144 != v46)
    {
      while (v11 != (char *)v10)
      {
        if (v11[108])
        {
          *(_OWORD *)uint64_t v13 = *(_OWORD *)v11;
          long long v14 = *((_OWORD *)v11 + 1);
          long long v15 = *((_OWORD *)v11 + 2);
          long long v16 = *((_OWORD *)v11 + 4);
          *((_OWORD *)v13 + 3) = *((_OWORD *)v11 + 3);
          *((_OWORD *)v13 + 4) = v16;
          *((_OWORD *)v13 + 1) = v14;
          *((_OWORD *)v13 + 2) = v15;
          long long v17 = *((_OWORD *)v11 + 5);
          long long v18 = *((_OWORD *)v11 + 6);
          long long v19 = *((_OWORD *)v11 + 8);
          *((_OWORD *)v13 + 7) = *((_OWORD *)v11 + 7);
          *((_OWORD *)v13 + 8) = v19;
          *((_OWORD *)v13 + 5) = v17;
          *((_OWORD *)v13 + 6) = v18;
          v13 += 144;
        }
        v11 += 144;
      }
    }
    if (v13 != (char *)v10)
    {
      char v10 = v13;
      int v46 = v13;
    }
  }
LABEL_22:
  if (v9 != 100)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022FF968);
    }
    __int16 v39 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "ExerciseMinuteThresholdUpdater, could not get records from VO2MaxOutputStore, CMError, %d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_63;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022FF968);
    }
    int v48 = 67109120;
    LODWORD(v49) = v9;
    char v40 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "float CLAdaptiveExerciseMinuteThresholdUpdater::update(const CLBodyMetrics &)", "%s\n", v40);
    goto LABEL_74;
  }
  if (__p != v10)
  {
    float v20 = a2[13];
    sub_100706EB0(a2);
    if (v20 == -1.0) {
      float v23 = v21;
    }
    else {
      float v23 = v20;
    }
    float v24 = *((double *)v46 - 14);
    float v25 = (float)(v24 * 0.492) / 3.5;
    if (v25 < 2.2) {
      float v25 = 2.2;
    }
    float v22 = v21;
    if (v25 <= v22) {
      float v26 = v25;
    }
    else {
      float v26 = v21;
    }
    double v27 = sub_1004BE230();
    *(void *)std::string buf = 0xBFF0000000000000;
    uint64_t v28 = sub_1000A6958();
    sub_1000A699C(v28, "CLAdaptiveExerciseMinuteThresholdUpdaterLastUpdateTime", buf);
    double v29 = 0.0;
    if (v27 - *(double *)buf >= 0.0) {
      double v29 = (v27 - *(double *)buf) / 86400.0;
    }
    float v30 = fmin(v29, 1.0);
    uint64_t v31 = a1 + 12;
    if (v26 > v23) {
      uint64_t v31 = a1;
    }
    float v32 = (float)(*(float *)(v31 + 4) / 100.0) * v30;
    if (v32 < 0.0) {
      float v32 = 0.0;
    }
    if (v32 <= 1.0) {
      float v33 = v32;
    }
    else {
      float v33 = 1.0;
    }
    double v34 = sub_1004BE230();
    sub_100E95ADC(v34);
    float v35 = 1.0 - v33;
    float v36 = v26 * v33;
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022FF968);
    }
    float v7 = v36 + (float)(v23 * v35);
    int v37 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 134284545;
      *(double *)&uint8_t buf[4] = v23;
      __int16 v59 = 2049;
      double v60 = v26;
      __int16 v61 = 2049;
      double v62 = v24;
      __int16 v63 = 2049;
      double v64 = v7;
      __int16 v65 = 2050;
      double v66 = v30;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "ExerciseMinuteThresholdUpdater, previousValue, %{private}f, targetValue, %{private}f, lastVo2max, %{private}f, updateValue, %{private}f, daysElapsed, %{public}f", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022FF968);
      }
      int v48 = 134284545;
      double v49 = v23;
      __int16 v50 = 2049;
      double v51 = v26;
      __int16 v52 = 2049;
      double v53 = v24;
      __int16 v54 = 2049;
      double v55 = v7;
      __int16 v56 = 2050;
      double v57 = v30;
      int v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "float CLAdaptiveExerciseMinuteThresholdUpdater::update(const CLBodyMetrics &)", "%s\n", v38);
      if (v38 != buf) {
        free(v38);
      }
    }
    goto LABEL_64;
  }
  double v41 = sub_1004BE230();
  sub_100E95ADC(v41);
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022FF968);
  }
  id v42 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "ExerciseMinuteThresholdUpdater, no vo2max records found for update", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022FF968);
    }
    LOWORD(v48) = 0;
    char v40 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "float CLAdaptiveExerciseMinuteThresholdUpdater::update(const CLBodyMetrics &)", "%s\n", v40);
LABEL_74:
    if (v40 != buf) {
      free(v40);
    }
  }
LABEL_63:
  float v7 = a2[13];
LABEL_64:
  if (__p)
  {
    int v46 = (char *)__p;
    operator delete(__p);
  }
  return v7;
}

void sub_100E96354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E96390(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100E963C0(uint64_t a1, char *a2)
{
  sub_100134750(v4, a2);
  sub_100134750(&__p, "");
  sub_100E96470(a1, (uint64_t)v4);
}

void sub_100E9643C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E96470(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  operator new();
}

void sub_100E96578(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A92678(&a15, a1, a2, v21 - 48);
  float v24 = *(_Unwind_Exception **)(v21 - 48);
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(v24);
}

void sub_100E965CC(uint64_t a1, long long *a2, int a3, uint64_t *a4, long long *a5)
{
  *(unsigned char *)a1 = 0;
  long long v8 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v8;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 40) = 0x100000002;
  int v9 = (void *)(a1 + 8);
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 49) = a3;
  if (*((char *)a5 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 56), *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v10 = *a5;
    *(void *)(a1 + 72) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 56) = v10;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v11 = *a4;
  *a4 = 0;
  *(void *)(a1 + 96) = v11;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022FF9D8);
  }
  BOOL v12 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = v9;
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v13 = (void *)*v9;
    }
    buf[0] = 136315650;
    *(void *)&buf[1] = v13;
    __int16 v19 = 1024;
    int v20 = a3;
    __int16 v21 = 1024;
    int v22 = 1;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Creating managed location database %s (count triggers %d, use cache %d)", (uint8_t *)buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022FF9D8);
    }
    long long v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLManagedLocationDatabase<CLCdmaCellLocationDatabase, CLTelephonyService_Type::CdmaCell>::CLManagedLocationDatabase(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLCdmaCellLocationDatabase, DataType = CLTelephonyService_Type::CdmaCell]", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 96) + 16))(*(void *)(a1 + 96)))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022FF9D8);
    }
    long long v14 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      long long v15 = v9;
      if (*(char *)(a1 + 31) < 0) {
        long long v15 = (void *)*v9;
      }
      buf[0] = 136315138;
      *(void *)&buf[1] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Data protection is enabled, creating in-memory database for table %s", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022FF9D8);
      }
      long long v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLManagedLocationDatabase<CLCdmaCellLocationDatabase, CLTelephonyService_Type::CdmaCell>::CLManagedLocationDatabase(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLCdmaCellLocationDatabase, DataType = CLTelephonyService_Type::CdmaCell]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    sub_100E96D9C(a1, a3);
  }
  sub_100700E74();
}

void sub_100E96CE8(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *(void *)(v1 + 96);
  *(void *)(v1 + 96) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v2);
  }
  uint64_t v6 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E96D9C(uint64_t a1, char a2)
{
  sub_100134750(__p, "");
  char v6 = 0;
  uint64_t v5 = 0;
  char v7 = a2;
  if (SHIBYTE(v4) < 0)
  {
    sub_1000DC48C(v8, __p[0], (unint64_t)__p[1]);
    uint64_t v9 = 0;
    if (SHIBYTE(v4) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)long long v8 = *(_OWORD *)__p;
    int v8[2] = v4;
    uint64_t v9 = 0;
  }
  sub_100700E74();
}

void sub_100E96E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E96EB4(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100E96EE4(uint64_t a1)
{
  if (*(void *)(a1 + 88)) {
    sub_101A929EC();
  }
  if (*(char *)(a1 + 31) >= 0) {
    size_t v2 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    size_t v2 = *(void *)(a1 + 16);
  }
  uint64_t v3 = __p;
  sub_1001110E4((uint64_t)__p, v2 + 17);
  if (v10 < 0) {
    uint64_t v3 = (void **)__p[0];
  }
  if (v2)
  {
    if (*(char *)(a1 + 31) >= 0) {
      uint64_t v4 = (const void *)(a1 + 8);
    }
    else {
      uint64_t v4 = *(const void **)(a1 + 8);
    }
    memmove(v3, v4, v2);
  }
  strcpy((char *)v3 + v2, "-InMemoryDatabase");
  int v5 = v10;
  char v6 = (void **)__p[0];
  char v7 = [CLOSTransaction alloc];
  if (v5 >= 0) {
    long long v8 = __p;
  }
  else {
    long long v8 = v6;
  }
  *(void *)(a1 + 88) = [(CLOSTransaction *)v7 initWithDescription:v8];
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100E96FEC(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100E9701C(uint64_t a1)
{
  sub_100E97EA4(a1);
  *(_DWORD *)(a1 + 2160) = 1;
  sub_1000C7F88(buf);
  if (sub_1000D2988(*(uint64_t *)buf, "LCFusionUseLegacyProviderSelection", (BOOL *)(a1 + 157)))
  {
    int v2 = *(unsigned __int8 *)(a1 + 157);
    if (v37) {
      sub_1000DB0A0(v37);
    }
    if (v2)
    {
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      uint64_t v3 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "LCFusion to act as passthrough and use legacy provider selection results for internal testing", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        LOWORD(v35[0]) = 0;
        uint64_t v4 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v4);
        if (v4 != (char *)buf) {
          free(v4);
        }
      }
    }
  }
  else if (v37)
  {
    sub_1000DB0A0(v37);
  }
  sub_1000C7F88(buf);
  if (sub_1000D2988(*(uint64_t *)buf, "LCFusionAlwaysYieldOnReceivingLocationNotification", (BOOL *)(a1 + 165)))
  {
    int v5 = *(unsigned __int8 *)(a1 + 165);
    if (v37) {
      sub_1000DB0A0(v37);
    }
    if (v5)
    {
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      char v6 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "LCFusion to always yield on receiving any location notification", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        LOWORD(v35[0]) = 0;
        char v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
    }
  }
  else if (v37)
  {
    sub_1000DB0A0(v37);
  }
  sub_1000C7F88(buf);
  if (sub_1000D2988(*(uint64_t *)buf, "LCFusionGenerateProviderSpecificHypotheses", (BOOL *)(a1 + 166)))
  {
    int v8 = *(unsigned __int8 *)(a1 + 166);
    if (v37) {
      sub_1000DB0A0(v37);
    }
    if (v8)
    {
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      uint64_t v9 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "LCFusion to generate and use provider specific hypotheses", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        LOWORD(v35[0]) = 0;
        char v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
    }
  }
  else if (v37)
  {
    sub_1000DB0A0(v37);
  }
  sub_1000C7F88(buf);
  double v11 = *(double *)(a1 + 2168);
  v35[0] = 0;
  int v12 = sub_1000A699C(*(uint64_t *)buf, "LCFusionGNSSHorizontalUncFloorForLowSVTracking_m", v35);
  double v13 = *(double *)v35;
  if (!v12) {
    double v13 = v11;
  }
  *(double *)(a1 + 2168) = v13;
  if (v37) {
    sub_1000DB0A0(v37);
  }
  sub_1000C7F88(buf);
  LODWORD(v35[0]) = 0;
  if (sub_10006EF84(*(uint64_t *)buf, "LCFusionAlwaysSetOutputToProviderType", v35)) {
    int v14 = v35[0];
  }
  else {
    int v14 = 0;
  }
  if (v37) {
    sub_1000DB0A0(v37);
  }
  if (v14 == 2)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    long long v17 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "LCFusion will always set output location type to Wifi", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      LOWORD(v35[0]) = 0;
      float v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v33);
      if (v33 != (char *)buf) {
        free(v33);
      }
    }
    int v16 = 4;
  }
  else if (v14 == 1)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    long long v15 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "LCFusion will always set output location type to GPS", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      LOWORD(v35[0]) = 0;
      float v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v32);
      if (v32 != (char *)buf) {
        free(v32);
      }
    }
    int v16 = 1;
  }
  else
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    long long v18 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "LCFusion output type will be determined based on max likelihood", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      LOWORD(v35[0]) = 0;
      double v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v34);
      if (v34 != (char *)buf) {
        free(v34);
      }
    }
    int v16 = 0;
  }
  *(_DWORD *)(a1 + 160) = v16;
  sub_1000C7F88(buf);
  LODWORD(v35[0]) = 0;
  int v19 = sub_10006EF84(*(uint64_t *)buf, "LCFusionSetAllHypothesesLikelihoodsEqual", v35);
  if (LODWORD(v35[0])) {
    int v20 = v19;
  }
  else {
    int v20 = 0;
  }
  if (v37) {
    sub_1000DB0A0(v37);
  }
  if (v20)
  {
    *(unsigned char *)(a1 + 164) = 1;
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    __int16 v21 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "LCFusion will set all likelihoods equal and ignore the likelihood update method", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      LOWORD(v35[0]) = 0;
      uint64_t v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v31);
      if (v31 != (char *)buf) {
        free(v31);
      }
    }
  }
  sub_1000C7F88(buf);
  if (sub_1000D2988(*(uint64_t *)buf, "LCFusionDisablePassthroughLogic", (BOOL *)(a1 + 158)))
  {
    int v22 = *(unsigned __int8 *)(a1 + 158);
    if (v37) {
      sub_1000DB0A0(v37);
    }
    if (v22)
    {
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      float v23 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "LCFusion to skip the driving/fitness/accessory passthrough logic for internal testing", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        LOWORD(v35[0]) = 0;
        float v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
    }
  }
  else if (v37)
  {
    sub_1000DB0A0(v37);
  }
  sub_1000C7F88(buf);
  if (sub_1000D2988(*(uint64_t *)buf, "LCFusionEnableRecordInternalState", (BOOL *)(a1 + 2264)))
  {
    int v25 = *(unsigned __int8 *)(a1 + 2264);
    if (v37) {
      sub_1000DB0A0(v37);
    }
    if (v25)
    {
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      float v26 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "LCFusion enable record internal state to protobuf", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        LOWORD(v35[0]) = 0;
        double v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
      }
    }
  }
  else if (v37)
  {
    sub_1000DB0A0(v37);
  }
  *(void *)(a1 + 2088) = sub_10067B400();
  *(unsigned char *)(a1 + 2164) = 1;
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022FFA18);
  }
  uint64_t v28 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "#fusion,LC Fusion configured successfully.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    LOWORD(v35[0]) = 0;
    float v30 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::configure()", "%s\n", v30);
    if (v30 != (char *)buf) {
      free(v30);
    }
  }
  return 1;
}

void sub_100E97E98(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_100E97EA4(uint64_t a1)
{
  uint64_t v1 = a1;
  int v2 = (_OWORD *)(a1 + 224);
  sub_1008A97C0(a1 + 216, *(void **)(a1 + 224));
  *(void *)(v1 + 216) = v2;
  *int v2 = 0u;
  sub_100179680((void **)(v1 + 240));
  uint64_t v3 = *(void **)(v1 + 200);
  v1 += 200;
  sub_1008A981C(v1 - 8, v3);
  *(_OWORD *)uint64_t v1 = 0u;
  *(void *)(v1 - 16) = 0xBFF0000000000000;
  *(void *)(v1 - 8) = v1;
  *(void *)(v1 + 1504) = 0;
  sub_100709830(v1 + 912);
  sub_10068D7E0(v1 + 1640);
  sub_100E97FEC((void *)(v1 + 1816));
  *(void *)(v1 + 1784) = *(void *)(v1 + 1776);
  *(unsigned char *)(v1 + 1944) = 0;
  *(void *)(v1 + 1952) = 0xBFF0000000000000;
  *(_WORD *)(v1 + 1872) = 0;
  *(unsigned char *)(v1 + 1874) = 0;
  *(unsigned char *)(v1 + 2008) = 0;
  *(unsigned char *)(v1 - 41) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v1 - 32) = _Q0;
  sub_100188E9C(v1 + 768);
  bzero(v9, 0x2D0uLL);
  sub_1008A93D4((uint64_t)v9);
  sub_100E98064(v1 + 48, (uint64_t)v9);
  sub_1008A9614(v9);
  *(_DWORD *)(v1 + 904) = 0;
  *(_WORD *)(v1 + 1875) = 0;
  *(void *)(v1 + 1880) = 0xBFF0000000000000;
  *(unsigned char *)(v1 + 1896) = 0;
  *(void *)(v1 + 1904) = 0xBFF0000000000000;
  *(_OWORD *)(v1 + 1912) = 0u;
  *(_OWORD *)(v1 + 1928) = xmmword_101D1C320;
  sub_1005A91D0(*(void *)(v1 + 1496));
  sub_10054E0C0(v1 + 1984, *(void **)(v1 + 1992));
  *(void *)(v1 + 1984) = v1 + 1992;
  *(void *)(v1 + 2000) = 0;
  *(void *)(v1 + 1992) = 0;
  *(_DWORD *)(v1 + 1960) = 1;
  *(_DWORD *)(v1 + 1976) = 0;
}

void sub_100E97FEC(void *a1)
{
  int v2 = (void **)a1[1];
  uint64_t v3 = a1[2];
  a1[5] = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[2];
      int v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 32;
  }
  else
  {
    if (v4 >> 3 != 2) {
      return;
    }
    uint64_t v6 = 64;
  }
  a1[4] = v6;
}

uint64_t sub_100E98064(uint64_t a1, uint64_t a2)
{
  sub_100EA27E0(a1, a2);
  memcpy((void *)(a1 + 48), (const void *)(a2 + 48), 0x218uLL);
  long long v4 = *(_OWORD *)(a2 + 584);
  *(_OWORD *)(a2 + 584) = 0u;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 592);
  *(_OWORD *)(a1 + 584) = v4;
  if (v5) {
    sub_1000DB0A0(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
  *(_OWORD *)(a1 + 616) = v6;
  long long v8 = *(_OWORD *)(a2 + 680);
  long long v7 = *(_OWORD *)(a2 + 696);
  long long v9 = *(_OWORD *)(a2 + 664);
  *(_DWORD *)(a1 + 712) = *(_DWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 680) = v8;
  *(_OWORD *)(a1 + 696) = v7;
  *(_OWORD *)(a1 + 664) = v9;
  long long v10 = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 632) = *(_OWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 648) = v10;
  return a1;
}

BOOL sub_100E980FC(uint64_t a1, char **a2)
{
  if (!*(unsigned char *)(a1 + 2164))
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    long long v9 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#Error,Feed InertialOdometry,LC Fusion is not configured.", (uint8_t *)&__p, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(&__p, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    long long v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::setIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v10);
    goto LABEL_35;
  }
  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100E9852C(a1);
  }
  uint64_t v5 = *a2;
  uint64_t v4 = (uint64_t)a2[1];
  if (*a2 == (char *)v4)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    double v11 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#Feed InertialOdometry,no IO sample(s) provided.", (uint8_t *)&__p, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(&__p, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    long long v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::setIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v10);
LABEL_35:
    if (v10 != (char *)&__p) {
      free(v10);
    }
    return 0;
  }
  uint64_t v6 = (v4 - (uint64_t)v5) >> 3;
  uint64_t v7 = 0x8E38E38E38E38E39 * v6;
  if ((954437177 * v6) >= 5)
  {
    do
    {
      if ((unint64_t)(v7 << 32) < 0x300000001)
      {
        std::string __p = 0;
        int v14 = 0;
        uint64_t v15 = 0;
        sub_100EA35DC(&__p, v5, v4, 0x8E38E38E38E38E39 * ((v4 - (uint64_t)v5) >> 3));
        BOOL v8 = sub_100E989AC(a1, &__p);
        uint64_t v5 = a2[1];
        if (__p)
        {
          int v14 = __p;
          operator delete(__p);
        }
      }
      else
      {
        std::string __p = 0;
        int v14 = 0;
        uint64_t v15 = 0;
        sub_100EA35DC(&__p, v5, (uint64_t)(v5 + 288), 4uLL);
        BOOL v8 = sub_100E989AC(a1, &__p);
        if (__p)
        {
          int v14 = __p;
          operator delete(__p);
        }
        v5 += 288;
      }
      uint64_t v7 = (int)v7 - 4;
      uint64_t v4 = (uint64_t)a2[1];
    }
    while (v5 != (char *)v4);
    return v8;
  }

  return sub_100E989AC(a1, a2);
}

void sub_100E9851C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100E9852C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 2144))
  {
    int v17 = *(_DWORD *)(a1 + 2160);
    if (v17 == 1)
    {
LABEL_30:
      *(_DWORD *)(a1 + 2160) = 4;
      return;
    }
    if (v17 != 2) {
      return;
    }
  }
  uint64_t v2 = sub_10016BA10();
  *(_DWORD *)std::string buf = 1;
  double v3 = sub_10016BA54(v2, buf);
  double v22 = v3;
  double v4 = *(double *)(a1 + 2152);
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022FFA18);
  }
  double v5 = v3 - v4;
  uint64_t v6 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = sub_10016BA10();
    double v8 = sub_10018202C(v7);
    *(_DWORD *)std::string buf = 134349568;
    double v30 = v5;
    __int16 v31 = 2050;
    double v32 = v22;
    __int16 v33 = 2050;
    double v34 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#fusion,data input arrived while fused state is in sleep mode for,%{public}.2f,[s],waking up to process the data,now_mct,%{public}.3f,propagation_us,%{public}.3f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    uint64_t v18 = sub_10016BA10();
    int v23 = 134349568;
    double v24 = v5;
    __int16 v25 = 2050;
    double v26 = v22;
    __int16 v27 = 2050;
    double v28 = sub_10018202C(v18);
    int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusion::checkLCFusionState()", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  if (*(_DWORD *)(a1 + 2160) == 2)
  {
    sub_1007091EC(a1 + 1112, &v22);
    long long v9 = *(void **)(a1 + 216);
    if (v9 != (void *)(a1 + 224))
    {
      do
      {
        sub_1007091EC((uint64_t)(v9 + 11), &v22);
        long long v10 = (void *)v9[1];
        if (v10)
        {
          do
          {
            double v11 = v10;
            long long v10 = (void *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            double v11 = (void *)v9[2];
            BOOL v12 = *v11 == (void)v9;
            long long v9 = v11;
          }
          while (!v12);
        }
        long long v9 = v11;
      }
      while (v11 != (void *)(a1 + 224));
    }
    for (uint64_t i = *(void **)(a1 + 240); i; uint64_t i = (void *)*i)
      sub_1007091EC((uint64_t)(i + 7), &v22);
  }
  *(_DWORD *)(a1 + 2160) = 3;
  if (*(unsigned char *)(a1 + 2144)) {
    BOOL v14 = v5 <= 5.0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    uint64_t v15 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      double v16 = *(double *)(a1 + 2152);
      *(_DWORD *)std::string buf = 134349568;
      double v30 = v16;
      __int16 v31 = 2050;
      double v32 = v22;
      __int16 v33 = 2050;
      double v34 = v5;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#fusion,slept_mct,%{public}.3f,now_mct,%{public}.3f,likely missing or late arrival wakeup msg,force wakeup from sleep after,%{public}.2f,[s]", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      double v20 = *(double *)(a1 + 2152);
      int v23 = 134349568;
      double v24 = v20;
      __int16 v25 = 2050;
      double v26 = v22;
      __int16 v27 = 2050;
      double v28 = v5;
      __int16 v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusion::checkLCFusionState()", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    *(unsigned char *)(a1 + 2144) = 0;
    *(void *)(a1 + 2152) = 0xBFF0000000000000;
    goto LABEL_30;
  }
}

void sub_100E989A0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

BOOL sub_100E989AC(uint64_t a1, void *a2)
{
  BOOL result = sub_1005A73D4(*(void *)(a1 + 1696), a2);
  if (result)
  {
    uint64_t v4 = *(void *)(a1 + 1696);
    double v6 = *(double *)(v4 + 384);
    uint64_t v5 = *(void *)(v4 + 392);
    double v94 = v6;
    uint64_t v95 = v5;
    if (!v5) {
      return 0;
    }
    if (*(unsigned char *)(a1 + 2208))
    {
      *(double *)std::string buf = v94;
      *(_DWORD *)&uint8_t buf[8] = v95;
      sub_100E9A034(v4, (uint64_t)&buf[16]);
      *(void *)uint64_t v96 = &v94;
      uint64_t v7 = sub_100EA36B0((uint64_t **)(a1 + 2240), &v94, (uint64_t)&unk_101D0B290, (void **)v96);
      long long v9 = *(_OWORD *)&v111[16];
      long long v8 = v112;
      long long v10 = *(_OWORD *)v111;
      long long v11 = *(_OWORD *)buf;
      *(_OWORD *)(v7 + 7) = *(_OWORD *)&buf[16];
      *(_OWORD *)(v7 + 9) = v10;
      *(_OWORD *)(v7 + 11) = v9;
      *(_OWORD *)(v7 + 13) = v8;
      *(_OWORD *)(v7 + 5) = v11;
      return 1;
    }
    BOOL v12 = *(double **)(a1 + 240);
    if (v12)
    {
      double v13 = -1.0;
      do
      {
        BOOL v14 = v12[51] <= v13 || *((_DWORD *)v12 + 167) == 0;
        if (!v14) {
          double v13 = v12[51];
        }
        BOOL v12 = *(double **)v12;
      }
      while (v12);
    }
    else
    {
      double v13 = -1.0;
    }
    if (v6 >= 0.0 && (v13 >= v6 ? (BOOL v15 = v13 - v6 <= 6.0) : (BOOL v15 = 1), v15))
    {
      sub_100E9A034(v4, (uint64_t)v90);
      if ((v95 - 1) > 1)
      {
        if (v95 == 4 && v91 < 0.001)
        {
          unsigned int v28 = *(_DWORD *)(a1 + 1912);
          if ((0x21Fu >> (v28 - 1))) {
            int v29 = 6;
          }
          else {
            int v29 = *(_DWORD *)(a1 + 1912);
          }
          if (v28 - 1 < 0xA) {
            unsigned int v28 = v29;
          }
          if (v93 <= 0.3) {
            unsigned int v30 = v28;
          }
          else {
            unsigned int v30 = 7;
          }
          if (qword_102419510 != -1) {
            dispatch_once(&qword_102419510, &stru_1022FFA18);
          }
          __int16 v31 = qword_102419518;
          if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
          {
            int v32 = *(_DWORD *)(a1 + 1912);
            *(_DWORD *)std::string buf = 134349568;
            *(double *)&uint8_t buf[4] = v94;
            *(_WORD *)&unsigned char buf[12] = 1026;
            *(_DWORD *)&unsigned char buf[14] = v30;
            *(_WORD *)&unsigned char buf[18] = 1026;
            *(_DWORD *)&buf[20] = v32;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,InertialOdometry derived dynamics Mode update,dynamicsMode,%{public}d,CM_dynamicsMode,%{public}d", buf, 0x18u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419510 != -1) {
              dispatch_once(&qword_102419510, &stru_1022FFA18);
            }
            int v73 = *(_DWORD *)(a1 + 1912);
            *(_DWORD *)uint64_t v96 = 134349568;
            *(double *)&v96[4] = v94;
            __int16 v97 = 1026;
            *(_DWORD *)long long v98 = v30;
            *(_WORD *)&v98[4] = 1026;
            *(_DWORD *)&v98[6] = v73;
            long long v74 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v74);
            if (v74 != buf) {
              free(v74);
            }
          }
          sub_10068DB0C(a1 + 1840, (uint64_t **)&v94, v30);
          sub_100070FB0(a1, &v94);
        }
        else
        {
          sub_1005A9CAC(*(void *)(a1 + 1696), (uint64_t)&v85);
          double v82 = sub_1005A9C28(*(double **)(a1 + 1696));
          uint64_t v83 = v33;
          uint64_t v84 = v34;
          if (v85 >= v13
            || (uint64_t v35 = *(void *)(a1 + 1696),
                *(double *)std::string buf = v13 + 0.001,
                sub_1005A9D2C(v35, (double *)buf, (uint64_t)&v85, (uint64_t)&v82)))
          {
            if (v86 >= 5.0) {
              int v36 = 6;
            }
            else {
              int v36 = 5;
            }
            if (v86 >= 2.5) {
              int v37 = v36;
            }
            else {
              int v37 = 4;
            }
            if (v86 >= 1.0) {
              unsigned int v38 = v37;
            }
            else {
              unsigned int v38 = 3;
            }
            if (qword_102419510 != -1) {
              dispatch_once(&qword_102419510, &stru_1022FFA18);
            }
            __int16 v39 = qword_102419518;
            if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)std::string buf = 134350849;
              *(double *)&uint8_t buf[4] = v85;
              *(_WORD *)&unsigned char buf[12] = 2049;
              *(double *)&unsigned char buf[14] = v86;
              *(_WORD *)&buf[22] = 2050;
              *(void *)&unsigned char buf[24] = v87;
              *(_WORD *)uint64_t v111 = 2049;
              *(void *)&v111[2] = v88;
              *(_WORD *)&v111[10] = 2050;
              *(double *)&v111[12] = v89;
              *(_WORD *)&v111[20] = 2049;
              *(void *)&v111[22] = v83;
              *(_WORD *)&v111[30] = 2050;
              *(void *)&long long v112 = v84;
              WORD4(v112) = 1026;
              *(_DWORD *)((char *)&v112 + 10) = v38;
              _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,InertialOdometry derived speed meas update,GSpeed_mps,%{private}.2f,GSpeedVar,%{public}.2f,courseRad,%{private}.1f,courseVarRad2,%{public}.1f,VSpeed_mps,%{private}.2f,VSpeedVar,%{public}.2f,dynamicsMode,%{public}d", buf, 0x4Eu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419510 != -1) {
                dispatch_once(&qword_102419510, &stru_1022FFA18);
              }
              *(_DWORD *)uint64_t v96 = 134350849;
              *(double *)&v96[4] = v85;
              __int16 v97 = 2049;
              *(double *)long long v98 = v86;
              *(_WORD *)&v98[8] = 2050;
              uint64_t v99 = v87;
              __int16 v100 = 2049;
              uint64_t v101 = v88;
              __int16 v102 = 2050;
              double v103 = v89;
              __int16 v104 = 2049;
              uint64_t v105 = v83;
              __int16 v106 = 2050;
              uint64_t v107 = v84;
              __int16 v108 = 1026;
              unsigned int v109 = v38;
              long long v77 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v77);
              if (v77 != buf) {
                free(v77);
              }
            }
            double v40 = v89;
            double v41 = *(void **)(a1 + 216);
            if (v41 != (void *)(a1 + 224))
            {
              do
              {
                if (v38 > *(_DWORD *)(a1 + 1912)) {
                  *((_DWORD *)v41 + 108) = v38;
                }
                if (v40 <= 0.616850275)
                {
                  if (!sub_100072914((uint64_t)(v41 + 11), (uint64_t)&v85))
                  {
                    if (qword_102419510 != -1) {
                      dispatch_once(&qword_102419510, &stru_1022FFA18);
                    }
                    id v42 = qword_102419518;
                    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
                    {
                      int v43 = *((_DWORD *)v41 + 173);
                      *(_DWORD *)std::string buf = 134349312;
                      *(double *)&uint8_t buf[4] = v85;
                      *(_WORD *)&unsigned char buf[12] = 1026;
                      *(_DWORD *)&unsigned char buf[14] = v43;
                      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,provider hypothesis ground speed measurement update failed,hID,%{public}d", buf, 0x12u);
                    }
                    if (sub_10013D1A0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_102419510 != -1) {
                        dispatch_once(&qword_102419510, &stru_1022FFA18);
                      }
                      int v48 = *((_DWORD *)v41 + 173);
                      *(_DWORD *)uint64_t v96 = 134349312;
                      *(double *)&v96[4] = v85;
                      __int16 v97 = 1026;
                      *(_DWORD *)long long v98 = v48;
                      double v49 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v49);
                      if (v49 != buf) {
                        free(v49);
                      }
                    }
                  }
                  if (!sub_100071CFC((uint64_t)(v41 + 11), &v82))
                  {
                    if (qword_102419510 != -1) {
                      dispatch_once(&qword_102419510, &stru_1022FFA18);
                    }
                    int v44 = qword_102419518;
                    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
                    {
                      int v45 = *((_DWORD *)v41 + 173);
                      *(_DWORD *)std::string buf = 134349312;
                      *(double *)&uint8_t buf[4] = v82;
                      *(_WORD *)&unsigned char buf[12] = 1026;
                      *(_DWORD *)&unsigned char buf[14] = v45;
                      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,provider hypothesis vertical velocity measurement update failed,hID,%{public}d", buf, 0x12u);
                    }
                    if (sub_10013D1A0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_102419510 != -1) {
                        dispatch_once(&qword_102419510, &stru_1022FFA18);
                      }
                      int v50 = *((_DWORD *)v41 + 173);
                      *(_DWORD *)uint64_t v96 = 134349312;
                      *(double *)&v96[4] = v82;
                      __int16 v97 = 1026;
                      *(_DWORD *)long long v98 = v50;
                      double v51 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v51);
                      if (v51 != buf) {
                        free(v51);
                      }
                    }
                  }
                }
                int v46 = (void *)v41[1];
                if (v46)
                {
                  do
                  {
                    uint64_t v47 = v46;
                    int v46 = (void *)*v46;
                  }
                  while (v46);
                }
                else
                {
                  do
                  {
                    uint64_t v47 = (void *)v41[2];
                    BOOL v14 = *v47 == (void)v41;
                    double v41 = v47;
                  }
                  while (!v14);
                }
                double v41 = v47;
              }
              while (v47 != (void *)(a1 + 224));
            }
            for (uint64_t i = *(uint64_t **)(a1 + 240); i; uint64_t i = (uint64_t *)*i)
            {
              if (v38 > *(_DWORD *)(a1 + 1912)) {
                *((_DWORD *)i + 100) = v38;
              }
              if (v40 <= 0.616850275)
              {
                if (!sub_100072914((uint64_t)(i + 7), (uint64_t)&v85))
                {
                  if (qword_102419510 != -1) {
                    dispatch_once(&qword_102419510, &stru_1022FFA18);
                  }
                  long long v58 = qword_102419518;
                  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
                  {
                    int v59 = *((_DWORD *)i + 165);
                    *(_DWORD *)std::string buf = 134349312;
                    *(double *)&uint8_t buf[4] = v85;
                    *(_WORD *)&unsigned char buf[12] = 1026;
                    *(_DWORD *)&unsigned char buf[14] = v59;
                    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,fused hypothesis ground speed measurement update failed,hID,%{public}d", buf, 0x12u);
                  }
                  if (sub_10013D1A0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_102419510 != -1) {
                      dispatch_once(&qword_102419510, &stru_1022FFA18);
                    }
                    int v62 = *((_DWORD *)i + 165);
                    *(_DWORD *)uint64_t v96 = 134349312;
                    *(double *)&v96[4] = v85;
                    __int16 v97 = 1026;
                    *(_DWORD *)long long v98 = v62;
                    __int16 v63 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v63);
                    if (v63 != buf) {
                      free(v63);
                    }
                  }
                }
                if (!sub_100071CFC((uint64_t)(i + 7), &v82))
                {
                  if (qword_102419510 != -1) {
                    dispatch_once(&qword_102419510, &stru_1022FFA18);
                  }
                  double v60 = qword_102419518;
                  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
                  {
                    int v61 = *((_DWORD *)i + 165);
                    *(_DWORD *)std::string buf = 134349312;
                    *(double *)&uint8_t buf[4] = v82;
                    *(_WORD *)&unsigned char buf[12] = 1026;
                    *(_DWORD *)&unsigned char buf[14] = v61;
                    _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,provider hypothesis vertical velocity measurement update failed,hID,%{public}d", buf, 0x12u);
                  }
                  if (sub_10013D1A0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_102419510 != -1) {
                      dispatch_once(&qword_102419510, &stru_1022FFA18);
                    }
                    int v64 = *((_DWORD *)i + 165);
                    *(_DWORD *)uint64_t v96 = 134349312;
                    *(double *)&v96[4] = v82;
                    __int16 v97 = 1026;
                    *(_DWORD *)long long v98 = v64;
                    __int16 v65 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v65);
                    if (v65 != buf) {
                      free(v65);
                    }
                  }
                }
              }
            }
          }
          else
          {
            if (qword_102419510 != -1) {
              dispatch_once(&qword_102419510, &stru_1022FFA18);
            }
            double v66 = qword_102419518;
            if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)std::string buf = 134349312;
              *(double *)&uint8_t buf[4] = v13;
              *(_WORD *)&unsigned char buf[12] = 2050;
              *(double *)&unsigned char buf[14] = v85;
              _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "#fusion,failed to extrapolate time-lagged InertialOdometry data,most recent filter mct,%{public}.3f,IO timeMCT,%{public}.3f", buf, 0x16u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419510 != -1) {
                dispatch_once(&qword_102419510, &stru_1022FFA18);
              }
              *(_DWORD *)uint64_t v96 = 134349312;
              *(double *)&v96[4] = v13;
              __int16 v97 = 2050;
              *(double *)long long v98 = v85;
              long long v67 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v67);
              if (v67 != buf) {
                free(v67);
              }
            }
          }
        }
        return 1;
      }
      if (*(unsigned char *)(a1 + 2096)
        || *(_DWORD *)(a1 + 96) != 1
        || vabdd_f64(sub_1005BFA38(), *(double *)(a1 + 76)) >= *(double *)(a1 + 88)
        || *(double *)(a1 + 52) >= 5.0
        || *(double *)(a1 + 44) < 4.0
        || (*(void *)std::string buf = 0xBFF0000000000000, sub_1000171E8((void *)(a1 + 1840), (double *)buf))
        && !sub_100E9A100((void *)(a1 + 2016), &dbl_101D944C8))
      {
        BOOL result = sub_1000171E8((void *)(a1 + 1840), &dbl_101D944D0);
        *(double *)(a1 + 2136) = v92 + *(double *)(a1 + 2136);
        if (result)
        {
          if (v95 == 2) {
            int v16 = 2;
          }
          else {
            int v16 = 1;
          }
          if (qword_102419510 != -1) {
            dispatch_once(&qword_102419510, &stru_1022FFA18);
          }
          int v17 = qword_102419518;
          if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
          {
            int v18 = *(_DWORD *)(a1 + 1912);
            *(_DWORD *)std::string buf = 134349568;
            *(double *)&uint8_t buf[4] = v94;
            *(_WORD *)&unsigned char buf[12] = 1026;
            *(_DWORD *)&unsigned char buf[14] = v16;
            *(_WORD *)&unsigned char buf[18] = 1026;
            *(_DWORD *)&buf[20] = v18;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,InertialOdometry derived zupt update,IO_dynamicsMode,%{public}d,CM_dynamicsMode,%{public}d", buf, 0x18u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419510 != -1) {
              dispatch_once(&qword_102419510, &stru_1022FFA18);
            }
            int v75 = *(_DWORD *)(a1 + 1912);
            *(_DWORD *)uint64_t v96 = 134349568;
            *(double *)&v96[4] = v94;
            __int16 v97 = 1026;
            *(_DWORD *)long long v98 = v16;
            *(_WORD *)&v98[4] = 1026;
            *(_DWORD *)&v98[6] = v75;
            long long v76 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v76);
            if (v76 != buf) {
              free(v76);
            }
          }
          int v19 = *(void **)(a1 + 216);
          if (v19 != (void *)(a1 + 224))
          {
            do
            {
              *((_DWORD *)v19 + 108) = v16;
              if (!sub_100071A64((uint64_t)(v19 + 11), &v94, 1.5))
              {
                if (qword_102419510 != -1) {
                  dispatch_once(&qword_102419510, &stru_1022FFA18);
                }
                double v20 = qword_102419518;
                if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
                {
                  int v21 = *((_DWORD *)v19 + 173);
                  *(_DWORD *)std::string buf = 134349312;
                  *(double *)&uint8_t buf[4] = v94;
                  *(_WORD *)&unsigned char buf[12] = 1026;
                  *(_DWORD *)&unsigned char buf[14] = v21;
                  _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,provider hypothesis zupt failed,hID,%{public}d", buf, 0x12u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102419510 != -1) {
                    dispatch_once(&qword_102419510, &stru_1022FFA18);
                  }
                  int v24 = *((_DWORD *)v19 + 173);
                  *(_DWORD *)uint64_t v96 = 134349312;
                  *(double *)&v96[4] = v94;
                  __int16 v97 = 1026;
                  *(_DWORD *)long long v98 = v24;
                  __int16 v25 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v25);
                  if (v25 != buf) {
                    free(v25);
                  }
                }
              }
              double v22 = (void *)v19[1];
              if (v22)
              {
                do
                {
                  int v23 = v22;
                  double v22 = (void *)*v22;
                }
                while (v22);
              }
              else
              {
                do
                {
                  int v23 = (void *)v19[2];
                  BOOL v14 = *v23 == (void)v19;
                  int v19 = v23;
                }
                while (!v14);
              }
              int v19 = v23;
            }
            while (v23 != (void *)(a1 + 224));
          }
          for (j = *(uint64_t **)(a1 + 240); j; j = (uint64_t *)*j)
          {
            *((_DWORD *)j + 100) = v16;
            if (!sub_100071A64((uint64_t)(j + 7), &v94, 1.5))
            {
              if (qword_102419510 != -1) {
                dispatch_once(&qword_102419510, &stru_1022FFA18);
              }
              double v53 = qword_102419518;
              if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
              {
                int v54 = *((_DWORD *)j + 165);
                *(_DWORD *)std::string buf = 134349312;
                *(double *)&uint8_t buf[4] = v94;
                *(_WORD *)&unsigned char buf[12] = 1026;
                *(_DWORD *)&unsigned char buf[14] = v54;
                _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,fused hypothesis zupt failed,hID,%{public}d", buf, 0x12u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419510 != -1) {
                  dispatch_once(&qword_102419510, &stru_1022FFA18);
                }
                int v55 = *((_DWORD *)j + 165);
                *(_DWORD *)uint64_t v96 = 134349312;
                *(double *)&v96[4] = v94;
                __int16 v97 = 1026;
                *(_DWORD *)long long v98 = v55;
                __int16 v56 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v56);
                if (v56 != buf) {
                  free(v56);
                }
              }
            }
          }
          return 1;
        }
      }
      else
      {
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        long long v68 = qword_102419518;
        if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_INFO))
        {
          uint64_t v69 = *(void *)(a1 + 76);
          uint64_t v70 = *(void *)(a1 + 44);
          uint64_t v71 = *(void *)(a1 + 52);
          *(_DWORD *)std::string buf = 134349825;
          *(void *)&uint8_t buf[4] = v69;
          *(_WORD *)&unsigned char buf[12] = 2050;
          *(double *)&unsigned char buf[14] = v94;
          *(_WORD *)&buf[22] = 2049;
          *(void *)&unsigned char buf[24] = v70;
          *(_WORD *)uint64_t v111 = 2049;
          *(void *)&v111[2] = v71;
          _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_INFO, "#fusion,iOSfix,%{public}.3f,IOmct,%{public}.3f,InertialOdometry derived zupt rejected,speed,%{private}.2f,speedAcc,%{private}.2f", buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419510 != -1) {
            dispatch_once(&qword_102419510, &stru_1022FFA18);
          }
          uint64_t v78 = *(void *)(a1 + 76);
          uint64_t v79 = *(void *)(a1 + 44);
          uint64_t v80 = *(void *)(a1 + 52);
          *(_DWORD *)uint64_t v96 = 134349825;
          *(void *)&v96[4] = v78;
          __int16 v97 = 2050;
          *(double *)long long v98 = v94;
          *(_WORD *)&v98[8] = 2049;
          uint64_t v99 = v79;
          __int16 v100 = 2049;
          uint64_t v101 = v80;
          long long v81 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v81);
          if (v81 != buf) {
            free(v81);
          }
        }
        BOOL result = 0;
        uint64_t v72 = *(void *)(a1 + 1696);
        *(void *)(v72 + 384) = 0xBFF0000000000000;
        *(_DWORD *)(v72 + 392) = 0;
      }
    }
    else
    {
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      double v26 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 134349312;
        *(double *)&uint8_t buf[4] = v13;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(double *)&unsigned char buf[14] = v6;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#fusion,most recent filter update time mct,%{public}.3f,ignoring old InertialOdometry derived data with mct,%{public}.3f", buf, 0x16u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        *(_DWORD *)uint64_t v96 = 134349312;
        *(double *)&v96[4] = v13;
        __int16 v97 = 2050;
        *(double *)long long v98 = v94;
        __int16 v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::processIOSamples(const std::vector<CLPIOSample> &)", "%s\n", v27);
        if (v27 != buf) {
          free(v27);
        }
        return 0;
      }
    }
  }
  return result;
}

void sub_100E9A00C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100E9A034(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 152);
  float v4 = hypotf((float)(*(float *)(a1 + 172) + *(float *)(a1 + 160)) - *(float *)(a1 + 212), (float)(*(float *)(a1 + 176) + *(float *)(a1 + 164)) - *(float *)(a1 + 216));
  double v5 = (float)((float)(*(float *)(a1 + 180) + *(float *)(a1 + 168)) - *(float *)(a1 + 220));
  *(double *)(a2 + 8) = v4;
  *(double *)(a2 + 16) = v5;
  uint64_t v6 = *(void *)(a1 + 376);
  *(double *)(a2 + 24) = *(double *)(a1 + 192) + *(double *)(a1 + 184);
  *(void *)(a2 + 32) = v6;
  *(double *)(a2 + 40) = hypotf(*(float *)(a1 + 80) + *(float *)(a1 + 128), *(float *)(a1 + 84) + *(float *)(a1 + 132));
  double v7 = *(double *)(a1 + 120);
  double v8 = 0.0;
  if (v7 > 0.0) {
    double v8 = hypotf(*(float *)(a1 + 104), *(float *)(a1 + 108)) / v7;
  }
  *(double *)(a2 + 48) = v8;
  *(unsigned char *)(a2 + 56) = *(unsigned char *)(a1 + 48);
}

BOOL sub_100E9A100(void *a1, double *a2)
{
  uint64_t v2 = a1[5];
  if (!v2) {
    return 0;
  }
  if (*a2 >= 0.0)
  {
    unint64_t v8 = v2 + a1[4] - 1;
    uint64_t v9 = *(void *)(a1[1] + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8));
    uint64_t v10 = sub_10016BA10();
    int v13 = 1;
    double v11 = sub_10016BA54(v10, &v13);
    double v12 = *(double *)(v9 + ((v8 & 0x3F) << 6) + 16);
    if (v12 < 0.0 || v11 >= v12 && v11 - v12 > *a2) {
      return 0;
    }
  }
  unint64_t v5 = a1[5] + a1[4] - 1;
  unint64_t v6 = *(void *)(a1[1] + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v5 & 0x3F) << 6);
  return *(void *)(v6 + 24) == 2 && *(double *)(v6 + 40) > 0.8;
}

BOOL sub_100E9A1F4(uint64_t a1, uint64_t a2)
{
  unsigned int v28 = (uint64_t **)(a1 + 2184);
  sub_10054E0C0(a1 + 2184, *(void **)(a1 + 2192));
  *(void *)(a1 + 2184) = a1 + 2192;
  *(void *)(a1 + 2200) = 0;
  *(void *)(a1 + 2192) = 0;
  if (!*(unsigned char *)(a1 + 2164))
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    double v22 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#Error,Feed setWiFiLocationBatched,LC Fusion is not configured.", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    LOWORD(v43) = 0;
    int v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::setWiFiLocationBatched(const CLLocationProvider_Type::NotificationData &)", "%s\n", v23);
LABEL_71:
    if (v23 != buf) {
      free(v23);
    }
    return 0;
  }
  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100E9852C(a1);
  }
  float v4 = *(int **)(a2 + 800);
  if (!v4)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    __int16 v25 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "#fusion,setWiFiLocationBatched,batch location data is nullptr,nothing to process.", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419510 == -1) {
      goto LABEL_70;
    }
    goto LABEL_74;
  }
  uint64_t v5 = sub_1010FB9FC(v4);
  if (v5)
  {
    unint64_t v6 = 0;
    __int16 v27 = (uint64_t **)(a1 + 192);
    while (1)
    {
      sub_1010FB258(*(void *)(a2 + 800), v6, (uint64_t)&v32);
      if (sub_100180B40(v7, v37) && v35 > 0.0 && !sub_1000EF668(v33, v34)) {
        break;
      }
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      unint64_t v8 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 134349056;
        *(double *)&uint8_t buf[4] = v36;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#fusion,setWiFiLocationBatched,invalid wsb location is skipped,wsb_location_iosTime,%{public}.3f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        int v43 = 134349056;
        double v44 = v36;
        int v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::setWiFiLocationBatched(const CLLocationProvider_Type::NotificationData &)", "%s\n", v21);
        if (v21 != buf) {
          free(v21);
        }
      }
LABEL_15:
      if (v5 == ++v6) {
        return 1;
      }
    }
    sub_1010FB770(*(void *)(a2 + 800), v6, (uint64_t)&v43);
    double v31 = v47;
    if (v47 > 0.0) {
      goto LABEL_18;
    }
    if (v36 <= 0.0)
    {
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      int v18 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#fusion,setWiFiLocationBatched,skipped wsb location with no valid timestamps", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_37;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      v30[0].n128_u16[0] = 0;
      int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::setWiFiLocationBatched(const CLLocationProvider_Type::NotificationData &)", "%s\n", v19);
    }
    else
    {
      int v17 = (__n128 *)sub_10016BA10();
      sub_100168854(v17, v30);
      double v29 = 0.0;
      if (sub_100AFF4CC((uint64_t)v30, &v29))
      {
        double v31 = v36 - v29;
LABEL_18:
        uint64_t v9 = (char *)operator new(0xD0uLL);
        *((void *)v9 + 1) = 0;
        *((void *)v9 + 2) = 0;
        *(_OWORD *)(v9 + 24) = 0u;
        *(void *)uint64_t v9 = off_1022FFA48;
        *(_OWORD *)(v9 + 40) = 0u;
        *(_OWORD *)(v9 + 56) = 0u;
        *(_OWORD *)(v9 + 72) = 0u;
        *(_OWORD *)(v9 + 88) = 0u;
        *(_OWORD *)(v9 + 104) = 0u;
        *(_OWORD *)(v9 + 120) = 0u;
        *(_OWORD *)(v9 + 136) = 0u;
        *(_OWORD *)(v9 + 152) = 0u;
        *(_OWORD *)(v9 + 168) = 0u;
        *(_OWORD *)(v9 + 184) = 0u;
        *((void *)v9 + 25) = 0;
        sub_100EA3830((uint64_t)(v9 + 24));
        (*(void (**)(double))(*((void *)v9 + 3) + 24))(v35);
        *((void *)v9 + 22) = v39;
        int v10 = v32;
        *((_DWORD *)v9 + 46) = v40;
        int v11 = v41;
        *((_DWORD *)v9 + 49) = v10;
        *((_DWORD *)v9 + 50) = v11;
        *(void *)(v9 + 188) = v42;
        *((_OWORD *)v9 + 10) = v38;
        *((double *)v9 + 5) = v31;
        *((double *)v9 + 11) = v46;
        *((_DWORD *)v9 + 24) = v45;
        v9[148] = v49;
        *(void *)std::string buf = &v37;
        double v12 = sub_10017CBA0(v27, &v37, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        int v13 = v12[5];
        BOOL v14 = (uint64_t *)operator new(0x18uLL);
        uint64_t *v14 = (uint64_t)v13;
        v14[1] = (uint64_t)(v9 + 24);
        v14[2] = (uint64_t)v9;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 1, 1uLL, memory_order_relaxed);
        double v12[5] = v14;
        *(void *)std::string buf = &v31;
        BOOL v15 = sub_100EA3900(v28, &v31, (uint64_t)&unk_101D0B290, (uint64_t **)buf);
        atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 1, 1uLL, memory_order_relaxed);
        int v16 = (std::__shared_weak_count *)v15[6];
        v15[5] = (uint64_t)(v9 + 24);
        v15[6] = (uint64_t)v9;
        if (v16) {
          sub_1000DB0A0(v16);
        }
        sub_1000DB0A0((std::__shared_weak_count *)v9);
LABEL_37:
        if (v48) {
          sub_1000DB0A0(v48);
        }
        goto LABEL_15;
      }
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      double v20 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#fusion,setWiFiLocationBatched,cannot compute fMachContinuousToCFAbsoluteOffset_s,discarding wsb sample", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_37;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::setWiFiLocationBatched(const CLLocationProvider_Type::NotificationData &)", "%s\n", v19);
    }
    if (v19 != buf) {
      free(v19);
    }
    goto LABEL_37;
  }
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022FFA18);
  }
  double v26 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#fusion,setWiFiLocationBatched,has no location data,nothing to process.", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 == -1)
    {
LABEL_70:
      LOWORD(v43) = 0;
      int v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::setWiFiLocationBatched(const CLLocationProvider_Type::NotificationData &)", "%s\n", v23);
      goto LABEL_71;
    }
LABEL_74:
    dispatch_once(&qword_102419510, &stru_1022FFA18);
    goto LABEL_70;
  }
  return result;
}

void sub_100E9AC1C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100E9AC2C(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 2164))
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    int v19 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#Error,getFilteredWiFiLocationBatched,LC Fusion is not configured.", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    LOWORD(v34) = 0;
    int v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::getFilteredWiFiLocationBatch(CLLocationProvider_Type::NotificationData &) const", "%s\n", v21);
LABEL_65:
    if (v21 != (char *)buf) {
      free(v21);
    }
    return 0;
  }
  if (!*(void *)(a1 + 2200))
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    double v22 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#fusion,getFilteredWiFiLocationBatched,no filtered wsb location data to return", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419510 == -1) {
      goto LABEL_64;
    }
LABEL_73:
    dispatch_once(&qword_102419510, &stru_1022FFA18);
LABEL_64:
    LOWORD(v34) = 0;
    int v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::getFilteredWiFiLocationBatch(CLLocationProvider_Type::NotificationData &) const", "%s\n", v21);
    goto LABEL_65;
  }
  uint64_t v3 = a2;
  float v4 = *(int **)(a2 + 800);
  if (!v4)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    double v26 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#fusion,getFilteredWiFiLocationBatched,batch location data is nullptr,nothing to process.", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419510 == -1) {
      goto LABEL_64;
    }
    goto LABEL_73;
  }
  uint64_t v5 = sub_1010FB9FC(v4);
  if (!v5)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    __int16 v27 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "#fusion,getFilteredWiFiLocationBatch,no allocated locations buffer,nothing to process.", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419510 == -1) {
      goto LABEL_64;
    }
    goto LABEL_73;
  }
  uint64_t v31 = v3;
  unint64_t v32 = v5;
  unint64_t v6 = *(void **)(a1 + 2184);
  unint64_t v7 = 0;
  if (v6 != (void *)(a1 + 2192))
  {
    __asm { FMOV            V0.2D, #-1.0 }
    long long v33 = _Q0;
    do
    {
      int v34 = 0xFFFF;
      long long v35 = 0uLL;
      long long v36 = xmmword_101D1C320;
      long long v37 = v33;
      long long v38 = v33;
      long long v39 = v33;
      int v40 = 0;
      unint64_t v41 = 0xBFF0000000000000;
      memset(v42, 0, sizeof(v42));
      unint64_t v43 = 0xBFF0000000000000;
      int v44 = 0x7FFFFFFF;
      uint64_t v46 = 0;
      long long v45 = 0uLL;
      char v47 = 0;
      if (sub_1001807D0(v5, v6[5], (uint64_t)&v34))
      {
        uint64_t v13 = v6[5];
        unint64_t v43 = *(void *)(v13 + 152);
        int v15 = *(_DWORD *)(v13 + 172);
        int v14 = *(_DWORD *)(v13 + 176);
        int v44 = *(_DWORD *)(v13 + 160);
        LODWORD(v45) = v14;
        int v34 = v15;
        *(void *)((char *)&v45 + 4) = *(void *)(v13 + 164);
        *(_OWORD *)&v42[1] = *(_OWORD *)(v13 + 136);
        sub_1010FB988(*(void *)(v3 + 800), (uint64_t)&v34, v7++);
        if (v7 >= v32) {
          break;
        }
      }
      else
      {
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        int v16 = qword_102419518;
        if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#fusion,getFilteredWiFiLocationBatch,failed to convert to daemon location,wsb location sample skipped", buf, 2u);
        }
        uint64_t v5 = sub_10013D1A0(115, 2);
        uint64_t v3 = v31;
        if (v5)
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419510 != -1) {
            dispatch_once(&qword_102419510, &stru_1022FFA18);
          }
          unsigned int v30 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::getFilteredWiFiLocationBatch(CLLocationProvider_Type::NotificationData &) const", "%s\n", v30);
          uint64_t v5 = (uint64_t)v30;
          if (v30 != (char *)buf) {
            free(v30);
          }
        }
      }
      int v17 = (void *)v6[1];
      if (v17)
      {
        do
        {
          int v18 = v17;
          int v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          int v18 = (void *)v6[2];
          _ZF = *v18 == (void)v6;
          unint64_t v6 = v18;
        }
        while (!_ZF);
      }
      unint64_t v6 = v18;
    }
    while (v18 != (void *)(a1 + 2192));
  }
  unint64_t v23 = v32;
  if (*(void *)(a1 + 2200) > v32)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    int v24 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)(a1 + 2200);
      *(_DWORD *)std::string buf = 67240448;
      int v49 = v32;
      __int16 v50 = 1026;
      int v51 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "#Error,getFilteredWiFiLocationBatch,output wsb batch buffer not the same size as processed wsb locations,wsbBufferSize,%{public}d,NumFilteredwsbLocations,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      uint64_t v28 = *(void *)(a1 + 2200);
      int v34 = 67240448;
      LODWORD(v35) = v32;
      WORD2(v35) = 1026;
      *(_DWORD *)((char *)&v35 + 6) = v28;
      double v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::getFilteredWiFiLocationBatch(CLLocationProvider_Type::NotificationData &) const", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
      uint64_t v3 = v31;
      unint64_t v23 = v32;
    }
  }
  if (v7 < v23) {
    sub_1010FBA04(*(int **)(v3 + 800), v7);
  }
  return 1;
}

void sub_100E9B56C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100E9B57C(uint64_t a1, double *a2)
{
  if (*(unsigned char *)(a1 + 2144))
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    float v4 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      double v5 = *a2;
      uint64_t v6 = *(void *)(a1 + 2152);
      *(_DWORD *)std::string buf = 134349312;
      double v17 = v5;
      __int16 v18 = 2050;
      uint64_t v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,already in AP sleep mode since,%{public}.3f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      unint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusion::enteringSleepMode(const CFTimeInterval &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    *(unsigned char *)(a1 + 2144) = 1;
    *(double *)(a1 + 2152) = *a2;
    *(unsigned char *)(a1 + 2072) = 0;
    *(unsigned char *)(a1 + 159) = 0;
    *(void *)(a1 + 176) = 0xBFF0000000000000;
    sub_1000F5BB0(a1 + 2216, *(void **)(a1 + 2224));
    *(void *)(a1 + 2216) = a1 + 2224;
    *(void *)(a1 + 2232) = 0;
    *(void *)(a1 + 2224) = 0;
    sub_1000F5BB0(a1 + 2240, *(void **)(a1 + 2248));
    *(void *)(a1 + 2240) = a1 + 2248;
    *(void *)(a1 + 2256) = 0;
    *(void *)(a1 + 2248) = 0;
    *(unsigned char *)(a1 + 2208) = 1;
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    unint64_t v8 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      double v9 = *a2;
      *(_DWORD *)std::string buf = 134349056;
      double v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#fusion,entering AP sleep mode at mct,%{public}.3f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      int v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusion::enteringSleepMode(const CFTimeInterval &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    sub_100708FD8(a1 + 1112, a2);
    int v10 = *(void **)(a1 + 216);
    if (v10 != (void *)(a1 + 224))
    {
      do
      {
        sub_100708FD8((uint64_t)(v10 + 11), a2);
        int v11 = (void *)v10[1];
        if (v11)
        {
          do
          {
            double v12 = v11;
            int v11 = (void *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            double v12 = (void *)v10[2];
            BOOL v13 = *v12 == (void)v10;
            int v10 = v12;
          }
          while (!v13);
        }
        int v10 = v12;
      }
      while (v12 != (void *)(a1 + 224));
    }
    for (uint64_t i = *(void **)(a1 + 240); i; uint64_t i = (void *)*i)
      sub_100708FD8((uint64_t)(i + 7), a2);
    *(_DWORD *)(a1 + 2160) = 2;
  }
}

void sub_100E9B98C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_100E9B998(uint64_t a1, double *a2)
{
  if (*(unsigned char *)(a1 + 2144))
  {
    double v4 = *a2;
    double v5 = *(double *)(a1 + 2152);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    double v6 = v4 - v5;
    unint64_t v7 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      double v8 = *(double *)(a1 + 2152);
      double v9 = *a2;
      *(_DWORD *)std::string buf = 134349568;
      double v19 = v8;
      __int16 v20 = 2050;
      double v21 = v9;
      __int16 v22 = 2050;
      double v23 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#fusion,slept_mct,%{public}.3f,now_mct,%{public}.3f,AP sleep wakeup after,%{public}.2f,[s]", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 == -1)
      {
LABEL_25:
        double v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusion::wakeUp(const CFTimeInterval &)", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
        goto LABEL_14;
      }
LABEL_27:
      dispatch_once(&qword_102419510, &stru_1022FFA18);
      goto LABEL_25;
    }
  }
  else
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    int v10 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      double v11 = *a2;
      *(_DWORD *)std::string buf = 134349056;
      double v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#fusion,now_mct,%{public}.3f,AP sleep wakeup called while fused state is not in sleep mode, waking up", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 == -1) {
        goto LABEL_25;
      }
      goto LABEL_27;
    }
  }
LABEL_14:
  sub_1007091EC(a1 + 1112, a2);
  double v12 = *(void **)(a1 + 216);
  if (v12 != (void *)(a1 + 224))
  {
    do
    {
      sub_1007091EC((uint64_t)(v12 + 11), a2);
      BOOL v13 = (void *)v12[1];
      if (v13)
      {
        do
        {
          int v14 = v13;
          BOOL v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          int v14 = (void *)v12[2];
          BOOL v15 = *v14 == (void)v12;
          double v12 = v14;
        }
        while (!v15);
      }
      double v12 = v14;
    }
    while (v14 != (void *)(a1 + 224));
  }
  for (uint64_t i = *(void **)(a1 + 240); i; uint64_t i = (void *)*i)
    sub_1007091EC((uint64_t)(i + 7), a2);
  *(unsigned char *)(a1 + 2144) = 0;
  *(void *)(a1 + 2152) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2160) = 4;
}

void sub_100E9BD6C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

BOOL sub_100E9BD78(uint64_t a1)
{
  BOOL result = 0;
  if (sub_100E9BE54(a1 + 1712) && !sub_1000171E8((void *)(a1 + 1840), &dbl_101D944D0))
  {
    if (*(unsigned char *)(a1 + 2073)) {
      return 1;
    }
    if (*(unsigned char *)(a1 + 2074)) {
      return 1;
    }
    if (sub_1001805B4((void *)(a1 + 1840), &dbl_101D944D0)) {
      return 1;
    }
    double v3 = sub_1005B5034();
    if (sub_100178CCC((_DWORD *)(a1 + 1968), v3)
      || (sub_100031028(a1 + 1840, &dbl_101D944D0) & 1) != 0
      || sub_1001806D4(a1 + 1840)
      || sub_100180714(a1 + 1840)
      || (sub_100011590(a1 + 1840, &dbl_101D944D0) & 1) != 0
      || (sub_100012848(a1 + 1840, &dbl_101D944D0) & 1) != 0)
    {
      return 1;
    }
  }
  return result;
}

BOOL sub_100E9BE54(uint64_t a1)
{
  if (*(double *)a1 <= 0.0) {
    return 0;
  }
  int v1 = *(_DWORD *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 + 12);
  if (!v2) {
    return 0;
  }
  int v3 = *(_DWORD *)(a1 + 28);
  BOOL v12 = v3 <= 0;
  BOOL v4 = v3 > 0;
  uint64_t v5 = 1;
  if (v12) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = 2;
  }
  if (*(int *)(a1 + 32) <= 0) {
    unint64_t v7 = v4;
  }
  else {
    unint64_t v7 = v6;
  }
  if (*(int *)(a1 + 36) > 0) {
    ++v7;
  }
  if (*(int *)(a1 + 40) > 0) {
    ++v7;
  }
  if (v7 <= 2)
  {
    int v8 = *(_DWORD *)(a1 + 20);
    BOOL v9 = (double)v2 / (double)v1 * 100.0 < 50.0 || (double)v8 / (double)v2 * 100.0 < 40.0;
    if (v9 && ((int v10 = *(_DWORD *)(a1 + 24), v10 < 5) || v8 <= 4))
    {
      BOOL v12 = v7 <= 1 || v10 <= 3;
      return !v12;
    }
    else
    {
      return 1;
    }
  }
  return v5;
}

void sub_100E9BF24(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  if (*a3 != a3[1])
  {
    if (*(double *)(a1 + 1760) <= 0.0) {
      goto LABEL_6;
    }
    double v7 = *(double *)(a1 + 1768);
    double v8 = *(double *)(a2 + 344) - v7;
    BOOL v9 = v7 > 0.0;
    double v10 = -1.0;
    if (v9) {
      double v10 = v8;
    }
    if (fabs(v10) >= 20.0)
    {
LABEL_6:
      *(void *)(a1 + 1760) = 0xBFF0000000000000;
      *(void *)(a1 + 1768) = 0xBFF0000000000000;
      *(void *)(a1 + 1776) = 0;
      *(void *)(a1 + 1792) = 0;
      *(void *)(a1 + 1784) = 0;
      *(void *)(a1 + 1760) = *(void *)(a2 + 344);
    }
    *(void *)(a1 + 1712) = 0xBFF0000000000000;
    *(_OWORD *)(a1 + 1720) = 0u;
    double v11 = (int *)(a1 + 1720);
    *(_DWORD *)(a1 + 1752) = 0;
    *(_OWORD *)(a1 + 1736) = 0u;
    sub_100735520(a1 + 1712, a3, *(double *)(a2 + 344));
    if (*v11 <= 19 && *(_DWORD *)(a1 + 1724) == *v11)
    {
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      BOOL v12 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = *(void *)(a2 + 344);
        int v14 = *(_DWORD *)(a1 + 1720);
        int v15 = *(_DWORD *)(a1 + 1724);
        *(_DWORD *)std::string buf = 134349568;
        uint64_t v35 = v13;
        __int16 v36 = 1026;
        int v37 = v14;
        __int16 v38 = 1026;
        int v39 = v15;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#GNSSTracking,mct,%{public}.3f,NumVis,%{public}03d,NumTracked,%{public}02d,discarding wrong satellite visibility report.", buf, 0x18u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419510 == -1)
        {
LABEL_35:
          long long v33 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusion::extractGNSSSatelliteTrackingQualityMetricsAndHuncFloor(const CLDaemonLocationPrivate &, const CLDaemonLocationPrivate::AboveHorizonSatelliteVisibilityReport &, double &)", "%s\n", v33);
          if (v33 != (char *)buf) {
            free(v33);
          }
          return;
        }
LABEL_37:
        dispatch_once(&qword_102419510, &stru_1022FFA18);
        goto LABEL_35;
      }
    }
    else
    {
      BOOL v16 = sub_100E9BE54(a1 + 1712);
      BOOL v17 = v16;
      if ((!*(unsigned char *)(a2 + 636) || *(double *)(a1 + 1776) < 10.0)
        && *v11 >= 1
        && (double)*(int *)(a1 + 1724) / (double)*v11 < 0.5)
      {
        *a4 = *(void *)(a1 + 2168);
      }
      double v18 = *(double *)(a1 + 1760);
      double v19 = 0.0;
      if (v18 > 0.0)
      {
        double v20 = *(double *)(a2 + 344);
        BOOL v9 = v20 <= v18;
        double v21 = v20 - v18;
        if (v9) {
          double v19 = 0.0;
        }
        else {
          double v19 = v21;
        }
      }
      *(double *)(a1 + 1776) = v19;
      *(void *)(a1 + 1768) = *(void *)(a2 + 344);
      ++*(_DWORD *)(a1 + 1792);
      if (v16)
      {
        ++*(_DWORD *)(a1 + 1784);
        *(_DWORD *)(a1 + 1788) = 0;
        ++*(_DWORD *)(a1 + 1796);
      }
      else
      {
        ++*(_DWORD *)(a1 + 1788);
        *(_DWORD *)(a1 + 1784) = 0;
      }
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      __int16 v22 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v23 = *(void *)(a2 + 344);
        int v24 = *(_DWORD *)(a1 + 1720);
        int v25 = *(_DWORD *)(a1 + 1724);
        int v26 = *(_DWORD *)(a1 + 1728);
        int v27 = *(_DWORD *)(a1 + 1732);
        int v28 = *(_DWORD *)(a1 + 1736);
        int v29 = *(_DWORD *)(a1 + 1740);
        int v30 = *(_DWORD *)(a1 + 1744);
        int v31 = *(_DWORD *)(a1 + 1748);
        int v32 = *(_DWORD *)(a1 + 1752);
        *(_DWORD *)std::string buf = 134351616;
        uint64_t v35 = v23;
        __int16 v36 = 1026;
        int v37 = v24;
        __int16 v38 = 1026;
        int v39 = v25;
        __int16 v40 = 1026;
        int v41 = v26;
        __int16 v42 = 1026;
        int v43 = v27;
        __int16 v44 = 1026;
        int v45 = v28;
        __int16 v46 = 1026;
        int v47 = v29;
        __int16 v48 = 1026;
        int v49 = v30;
        __int16 v50 = 1026;
        int v51 = v31;
        __int16 v52 = 1026;
        int v53 = v32;
        __int16 v54 = 1026;
        BOOL v55 = v17;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#GNSSTracking,mct,%{public}.3f,NumVis,%{public}03d,NumTracked,%{public}02d,NumTrackedL5,%{public}02d,NumTrackedL1CN0_ge_20,%{public}02d,NumTrackedSVElv_ge_60,%{public}02d,NumTrackedSV_azm,%{public}02d,%{public}02d,%{public}02d,%{public}02d,isLikelygoodQualityGNSSTracking,%{public}d", buf, 0x48u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419510 == -1) {
          goto LABEL_35;
        }
        goto LABEL_37;
      }
    }
  }
}

void sub_100E9C4C0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_100E9C4CC(uint64_t result)
{
  int v1 = *(double **)(result + 2216);
  int v2 = (double *)(result + 2224);
  if (v1 != (double *)(result + 2224))
  {
    uint64_t v3 = result;
    uint64_t v4 = result + 1840;
    uint64_t v5 = (double *)(result + 2248);
    while (1)
    {
      BOOL result = CLMotionActivity::isTypeUnclassifiedMoving();
      if ((result & 1) == 0) {
        break;
      }
      if (*(void *)(v3 + 2256))
      {
        uint64_t v6 = *(void *)v5;
        if (!*(void *)v5) {
          goto LABEL_19;
        }
        double v7 = v1[4];
        double v8 = v5;
        do
        {
          BOOL v9 = (uint64_t *)(v6 + 8);
          if (*(double *)(v6 + 32) >= v7)
          {
            BOOL v9 = (uint64_t *)v6;
            double v8 = (double *)v6;
          }
          uint64_t v6 = *v9;
        }
        while (*v9);
        if (v8 == v5) {
          goto LABEL_19;
        }
        if (v8 != *(double **)(v3 + 2240))
        {
          double v10 = *v8;
          double v11 = v8;
          if (*(void *)v8)
          {
            do
            {
              BOOL v12 = *(double **)&v10;
              double v10 = *(double *)(*(void *)&v10 + 8);
            }
            while (v10 != 0.0);
          }
          else
          {
            do
            {
              BOOL v12 = (double *)*((void *)v11 + 2);
              BOOL v13 = *(void *)v12 == (void)v11;
              double v11 = v12;
            }
            while (v13);
          }
          if (v7 - v12[4] < v8[4] - v7) {
            double v8 = v12;
          }
        }
        if (v8[4] - v7 <= 6.0)
        {
          if (v8[8] <= 0.001)
          {
            if (v8[9] <= 0.3 && *((_DWORD *)v8 + 12) != 4) {
              goto LABEL_19;
            }
LABEL_20:
            uint64_t v14 = v4;
            int v15 = (uint64_t **)(v1 + 4);
            unsigned int v16 = 7;
          }
          else
          {
            if (*((_DWORD *)v8 + 12) == 3) {
              unsigned int v16 = 3;
            }
            else {
              unsigned int v16 = 2;
            }
            uint64_t v14 = v4;
            int v15 = (uint64_t **)(v1 + 4);
          }
          sub_10068DB0C(v14, v15, v16);
        }
        else
        {
LABEL_19:
          if ((sub_10068E4D4(v4, v1 + 4, 600.0) & 1) == 0) {
            goto LABEL_20;
          }
        }
LABEL_23:
        BOOL result = sub_100070FB0(v3, v1 + 4);
      }
      BOOL v17 = (double *)*((void *)v1 + 1);
      if (v17)
      {
        do
        {
          double v18 = v17;
          BOOL v17 = *(double **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          double v18 = (double *)*((void *)v1 + 2);
          BOOL v13 = *(void *)v18 == (void)v1;
          int v1 = v18;
        }
        while (!v13);
      }
      int v1 = v18;
      if (v18 == v2) {
        return result;
      }
    }
    sub_100188FA8(v4, v1 + 4, (uint64_t)(v1 + 5));
    goto LABEL_23;
  }
  return result;
}

double sub_100E9C6C4(_DWORD *a1)
{
  int v1 = *a1 - 1;
  if (v1 > 9) {
    return 1600.0;
  }
  else {
    return dbl_101D94668[v1];
  }
}

BOOL sub_100E9C6F0(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned char **)(a1 + 2088);
  if (!v2 || !v2[1] || !*v2) {
    return 1;
  }
  BOOL result = 1;
  switch(*(_DWORD *)(*(void *)a2 + 128))
  {
    case 1:
      if (sub_100735634(a1 + 1712))
      {
        int v8 = *(_DWORD *)(a1 + 2176);
        *(_DWORD *)(a1 + 2176) = v8 + 1;
        if (v8 > 8) {
          return 1;
        }
      }
      else
      {
        *(_DWORD *)(a1 + 2176) = 0;
      }
      *(_DWORD *)(a1 + 1104) = 11;
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      double v10 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
      {
        int v11 = *(_DWORD *)(a1 + 2176);
        *(_DWORD *)std::string buf = 67240192;
        int v14 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#fusion rejecting bad quality gnss fix,consecutiveGoodGPSTracking,%{public}d", buf, 8u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419510 != -1) {
          goto LABEL_37;
        }
        goto LABEL_34;
      }
      break;
    case 4:
    case 6:
    case 7:
    case 8:
      uint64_t v5 = *(void **)(a1 + 240);
      if (v5)
      {
        int v6 = 0;
        do
        {
          ++v6;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
        if (v6 != 1) {
          return 1;
        }
        *(_DWORD *)(a1 + 1104) = 12;
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        double v7 = qword_102419518;
        if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#fusion rejecting wifi fix during single hypothesis", buf, 2u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419510 != -1) {
            goto LABEL_37;
          }
          goto LABEL_34;
        }
      }
      break;
    case 0xA:
      *(_DWORD *)(a1 + 1104) = 13;
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      BOOL v9 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#fusion rejecting pipelined fix during CarPlay session", buf, 2u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419510 != -1) {
LABEL_37:
        }
          dispatch_once(&qword_102419510, &stru_1022FFA18);
LABEL_34:
        BOOL v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::shouldUseThisLocationInCarPlay(const std::shared_ptr<const LCFusionProviderLocation>)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
        BOOL result = 0;
      }
      break;
    default:
      return result;
  }
  return result;
}

__n128 sub_100E9CBC4(uint64_t a1)
{
  *(void *)a1 = off_10232A710;
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(a1 + 8) = result;
  *(_OWORD *)(a1 + 40) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 56) = xmmword_101D1C320;
  *(__n128 *)(a1 + 80) = result;
  *(__n128 *)(a1 + 96) = result;
  *(void *)(a1 + 112) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  return result;
}

void sub_100E9CC14(void *a1, int *a2, int a3)
{
  uint64_t v4 = (void **)(*a1 + 240);
  uint64_t v3 = *v4;
  int v5 = *a2;
  if (*v4) {
    BOOL v6 = v5 < 1;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    do
    {
      if (*((_DWORD *)v3 + 167) == a3)
      {
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        BOOL v9 = qword_102419518;
        if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v10 = v3[6];
          if (v10) {
            uint64_t v11 = *(void *)(*(void *)(v3[2] + 8 * ((v10 + v3[5] - 1) / 0x17uLL))
          }
                            + 176 * ((v10 + v3[5] - 1) % 0x17uLL)
                            + 8);
          else {
            uint64_t v11 = 0;
          }
          int v13 = *((_DWORD *)v3 + 165);
          int v14 = *((_DWORD *)v3 + 167);
          *(_DWORD *)std::string buf = 67240960;
          int v20 = v13;
          __int16 v21 = 1026;
          int v22 = v14;
          __int16 v23 = 2050;
          uint64_t v24 = v11;
          __int16 v25 = 2050;
          uint64_t v26 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#fusion,purging, fused hypothesis deleted,hID,%{public}d,type,%{public}d,validityTime_MCT,%{public}.3f,bufferSize,%{public}zu", buf, 0x22u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419510 != -1) {
            dispatch_once(&qword_102419510, &stru_1022FFA18);
          }
          double v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "auto cllcf::CLLCFusion::performHypothesesPurging()::(anonymous class)::operator()(int &, HypothesisState) const", "%s\n", v18);
          if (v18 != (char *)buf) {
            free(v18);
          }
        }
        int v15 = *v4;
        unsigned int v16 = *v4 + 1;
        *uint64_t v4 = (void *)**v4;
        sub_1008A9614(v16);
        operator delete(v15);
        BOOL v12 = *v4;
        int v5 = *a2 - 1;
        *a2 = v5;
      }
      else
      {
        BOOL v12 = (void *)*v3;
        uint64_t v4 = (void **)v3;
      }
      if (v12) {
        BOOL v17 = v5 <= 0;
      }
      else {
        BOOL v17 = 1;
      }
      uint64_t v3 = v12;
    }
    while (!v17);
  }
}

void *sub_100E9CF4C(uint64_t a1, void **a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = *a2;
    if (*a2 != a3)
    {
      *a2 = a3;
      do
      {
        int v5 = (void *)*v4;
        sub_1008A9614(v4 + 1);
        operator delete(v4);
        uint64_t v4 = v5;
      }
      while (v5 != a3);
    }
  }
  return a3;
}

BOOL sub_100E9CFB0(uint64_t a1)
{
  int v1 = *(double **)(a1 + 240);
  if (v1)
  {
    uint64_t v3 = 1;
    uint64_t v4 = *(void **)(a1 + 240);
    do
    {
      uint64_t v4 = (void *)*v4;
      --v3;
    }
    while (v4);
    if (v3)
    {
      int v5 = 0;
      double v6 = v1[81];
      double v7 = *(uint64_t **)(a1 + 240);
      do
      {
        int v8 = *((_DWORD *)v7 + 167);
        BOOL v9 = (v8 & 0xFFFFFFFB) == 0;
        BOOL v10 = (v8 & 0xFFFFFFFB) != 0;
        if (!v9) {
          ++v5;
        }
        if (v10 && v6 < *((double *)v7 + 81)) {
          double v6 = *((double *)v7 + 81);
        }
        double v7 = (uint64_t *)*v7;
      }
      while (v7);
      double v11 = -18.4206807 - log((double)v5);
      v43[0] = 0;
      v43[1] = 0;
      __int16 v42 = (uint64_t *)v43;
      double v12 = 0.0;
      int v13 = v1;
      do
      {
        if ((*((_DWORD *)v13 + 167) & 0xFFFFFFFB) != 0)
        {
          unsigned int v44 = *((_DWORD *)v13 + 165);
          double v14 = v13[81] - v6;
          *(void *)std::string buf = &v44;
          if (v14 >= v11)
          {
            int v15 = sub_100042490(&v42, &v44, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
            *((long double *)v15 + 5) = exp(v14);
          }
          else
          {
            sub_100042490(&v42, &v44, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5] = 0;
          }
          *(void *)std::string buf = &v44;
          double v12 = v12 + *((double *)sub_100042490(&v42, &v44, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 5);
        }
        int v13 = *(double **)v13;
      }
      while (v13);
      if (v12 != 0.0 && (*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        for (uint64_t i = *(uint64_t **)(a1 + 240); i; uint64_t i = (uint64_t *)*i)
        {
          if ((*((_DWORD *)i + 167) & 0xFFFFFFFB) != 0)
          {
            if (qword_102419510 != -1) {
              dispatch_once(&qword_102419510, &stru_1022FFA18);
            }
            int v22 = qword_102419518;
            if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
            {
              int v23 = *((_DWORD *)i + 165);
              uint64_t v24 = i[80];
              uint64_t v25 = i[81];
              *(_DWORD *)std::string buf = 67109632;
              *(_DWORD *)&uint8_t buf[4] = v23;
              __int16 v51 = 2048;
              uint64_t v52 = v24;
              __int16 v53 = 2048;
              uint64_t v54 = v25;
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#selection,Likelihood normalize apriori,hID,%d,likelihood,%.9f,logLikelihood,%.5f", buf, 0x1Cu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419510 != -1) {
                dispatch_once(&qword_102419510, &stru_1022FFA18);
              }
              int v33 = *((_DWORD *)i + 165);
              uint64_t v34 = i[80];
              uint64_t v35 = i[81];
              unsigned int v44 = 67109632;
              int v45 = v33;
              __int16 v46 = 2048;
              uint64_t v47 = v34;
              __int16 v48 = 2048;
              uint64_t v49 = v35;
              __int16 v36 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::normalizeHypothesesLogLikelihoods()", "%s\n", v36);
              if (v36 != (char *)buf) {
                free(v36);
              }
            }
            unsigned int v44 = *((_DWORD *)i + 165);
            *(void *)std::string buf = &v44;
            double v26 = *((double *)sub_100042490(&v42, &v44, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 5) / v12;
            int v27 = (uint8_t *)(i + 80);
            *((double *)i + 80) = v26;
            *(void *)std::string buf = 0x3FF0000000000000;
            if (v26 > 1.0) {
              int v27 = buf;
            }
            if (v26 < 0.00000001) {
              int v27 = (uint8_t *)&unk_101D944E8;
            }
            long double v28 = *(double *)v27;
            i[80] = *(void *)v27;
            *((long double *)i + 81) = log(v28);
            if (qword_102419510 != -1) {
              dispatch_once(&qword_102419510, &stru_1022FFA18);
            }
            int v29 = qword_102419518;
            if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
            {
              int v30 = *((_DWORD *)i + 165);
              uint64_t v31 = i[80];
              uint64_t v32 = i[81];
              *(_DWORD *)std::string buf = 67109632;
              *(_DWORD *)&uint8_t buf[4] = v30;
              __int16 v51 = 2048;
              uint64_t v52 = v31;
              __int16 v53 = 2048;
              uint64_t v54 = v32;
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "#selection,Likelihood normalize aposteriori,hID,%d,likelihood,%.9f,logLikelihood,%.5f", buf, 0x1Cu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419510 != -1) {
                dispatch_once(&qword_102419510, &stru_1022FFA18);
              }
              int v37 = *((_DWORD *)i + 165);
              uint64_t v38 = i[80];
              uint64_t v39 = i[81];
              unsigned int v44 = 67109632;
              int v45 = v37;
              __int16 v46 = 2048;
              uint64_t v47 = v38;
              __int16 v48 = 2048;
              uint64_t v49 = v39;
              __int16 v40 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::normalizeHypothesesLogLikelihoods()", "%s\n", v40);
              if (v40 != (char *)buf) {
                free(v40);
              }
            }
          }
        }
      }
      else
      {
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        BOOL v17 = qword_102419518;
        if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#selection,Error in normalization method, invalid sum", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419510 != -1) {
            dispatch_once(&qword_102419510, &stru_1022FFA18);
          }
          LOWORD(v44) = 0;
          int v41 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::normalizeHypothesesLogLikelihoods()", "%s\n", v41);
          if (v41 != (char *)buf) {
            free(v41);
          }
        }
        sub_100EA0268(a1);
      }
      sub_1000F5BB0((uint64_t)&v42, v43[0]);
    }
    else
    {
      *((_OWORD *)v1 + 40) = xmmword_101D1C450;
    }
  }
  else
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    double v18 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#selection,Normalize method called without any valid hypotheses available", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      LOWORD(v44) = 0;
      double v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::normalizeHypothesesLogLikelihoods()", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
  }
  return v1 != 0;
}

void sub_100E9D798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14)
{
}

double sub_100E9D7D0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *(void *)(a1 + 240);
  float v4 = hypotf((float)(*(float *)(a1 + 260) + *(float *)(a1 + 248)) - *(float *)(a1 + 300), (float)(*(float *)(a1 + 264) + *(float *)(a1 + 252)) - *(float *)(a1 + 304));
  double v5 = (float)((float)(*(float *)(a1 + 268) + *(float *)(a1 + 256)) - *(float *)(a1 + 308));
  *(double *)(a2 + 8) = v4;
  *(double *)(a2 + 16) = v5;
  double result = *(double *)(a1 + 280) + *(double *)(a1 + 272);
  *(double *)(a2 + 24) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 56) = *(unsigned char *)(a1 + 48);
  return result;
}

uint64_t sub_100E9D860(uint64_t a1, uint64_t a2)
{
  uint64_t v106 = *(void *)(a2 + 16);
  uint64_t v2 = *(void *)(a1 + 240);
  if (!v2)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    uint64_t v49 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "#selection,No valid hypothesis available for selection", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    LOWORD(v100) = 0;
    __int16 v50 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesisMaxSelection(const LCFusionProviderLocation &)", "%s\n", v50);
    goto LABEL_135;
  }
  uint64_t v5 = 1;
  double v6 = *(void **)(a1 + 240);
  do
  {
    double v6 = (void *)*v6;
    --v5;
  }
  while (v6);
  if (v5)
  {
    if (sub_100E9CFB0(a1))
    {
      __int16 v100 = off_10232A710;
      __asm { FMOV            V0.2D, #-1.0 }
      long long v101 = _Q0;
      long long v103 = xmmword_101D1C320;
      long long v99 = _Q0;
      long long v104 = xmmword_101D1C320;
      *(_OWORD *)&v105[8] = _Q0;
      *(_OWORD *)&v105[24] = _Q0;
      *(void *)&v105[40] = 0xBFF0000000000000;
      *(_DWORD *)&v105[48] = 0;
      v105[52] = 0;
      *(_DWORD *)&v105[56] = 0;
      double v11 = *(double **)(a1 + 240);
      if (v11)
      {
        int v98 = 0;
        double v12 = 0.0;
        do
        {
          *(void *)int v119 = off_10232A710;
          *(_OWORD *)&v119[8] = v99;
          *(_OWORD *)int v120 = xmmword_101D1C320;
          *(_OWORD *)&v120[16] = xmmword_101D1C320;
          *(_OWORD *)&v121[8] = v99;
          *(_OWORD *)&v121[24] = v99;
          *(void *)&v121[40] = 0xBFF0000000000000;
          *(_DWORD *)&v121[48] = 0;
          v121[52] = 0;
          *(_DWORD *)&v121[56] = 0;
          BOOL v13 = sub_100074400((uint64_t)(v11 + 7), (double *)&v106);
          int v14 = sub_100070DA0((uint64_t)(v11 + 7), (uint64_t)v119);
          unsigned int v15 = sub_100022744((uint64_t)(v11 + 1), (double *)&v106);
          if (v13 && v14)
          {
            double v16 = v11[80];
            _NF = v16 > 0.00000001 && v12 < v16;
            if (_NF && (v15 > 8 || ((1 << v15) & 0x1D0) == 0))
            {
              *(_OWORD *)uint64_t v105 = *(_OWORD *)v121;
              *(_OWORD *)&v105[16] = *(_OWORD *)&v121[16];
              *(_OWORD *)&v105[32] = *(_OWORD *)&v121[32];
              *(_OWORD *)&v105[44] = *(_OWORD *)&v121[44];
              long long v101 = *(_OWORD *)&v119[8];
              long long v102 = *(_OWORD *)&v119[24];
              long long v103 = *(_OWORD *)v120;
              long long v104 = *(_OWORD *)&v120[16];
              int v98 = sub_100022744((uint64_t)(v11 + 1), (double *)&v106);
              if (qword_102419510 != -1) {
                dispatch_once(&qword_102419510, &stru_1022FFA18);
              }
              double v18 = qword_102419518;
              if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
              {
                int v19 = *((_DWORD *)v11 + 165);
                *(_DWORD *)std::string buf = 67240192;
                LODWORD(v123) = v19;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#fusion selected hypothesis %{public}d", buf, 8u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419510 != -1) {
                  dispatch_once(&qword_102419510, &stru_1022FFA18);
                }
                int v42 = *((_DWORD *)v11 + 165);
                int v107 = 67240192;
                LODWORD(v108) = v42;
                int v43 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesisMaxSelection(const LCFusionProviderLocation &)", "%s\n", v43);
                if (v43 != (char *)buf) {
                  free(v43);
                }
              }
              if ((v98 & 0xFFFFFFFD) == 1)
              {
                unint64_t v20 = *((void *)v11 + 5) + *((void *)v11 + 6);
                uint64_t v21 = *((void *)v11 + 2);
                uint64_t v22 = *((void *)v11 + 3);
                int v23 = (void *)(v21 + 8 * (v20 / 0x17));
                if (v22 == v21) {
                  uint64_t v24 = 0;
                }
                else {
                  uint64_t v24 = *v23 + 176 * (v20 % 0x17);
                }
                while (1)
                {
                  unint64_t v25 = v22 == v21
                      ? 0
                      : *(void *)(v21 + 8 * (*((void *)v11 + 5) / 0x17uLL)) + 176 * (*((void *)v11 + 5) % 0x17uLL);
                  if (v24 == v25) {
                    break;
                  }
                  uint64_t v26 = v24;
                  if (v24 == *v23) {
                    uint64_t v26 = *(v23 - 1) + 4048;
                  }
                  if (sub_100022DBC(v26 - 176, (double *)&v106) > 2.0) {
                    break;
                  }
                  if (v24 == *v23)
                  {
                    uint64_t v28 = *(v23 - 1);
                    uint64_t v27 = v28 + 4048;
                    if (*(_DWORD *)(v28 + 4032) == v98) {
                      goto LABEL_42;
                    }
                    --v23;
                  }
                  else
                  {
                    if (*(_DWORD *)(v24 - 16) == v98)
                    {
                      uint64_t v27 = v24;
LABEL_42:
                      int v29 = *(std::__shared_weak_count **)(v27 - 152);
                      if (v29 && (int v29 = std::__shared_weak_count::lock(v29)) != 0) {
                        uint64_t v30 = *(void *)(v27 - 160);
                      }
                      else {
                        uint64_t v30 = 0;
                      }
                      __int16 v97 = v29;
                      if (qword_102419510 != -1) {
                        dispatch_once(&qword_102419510, &stru_1022FFA18);
                      }
                      os_log_t log = qword_102419518;
                      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
                      {
                        uint64_t v31 = v24;
                        if (v24 == *v23) {
                          uint64_t v31 = *(v23 - 1) + 4048;
                        }
                        _ZF = *(_DWORD *)(v31 - 16) == 3;
                        uint64_t v32 = "GPS";
                        if (_ZF) {
                          uint64_t v32 = "Accessory";
                        }
                        int v33 = *((_DWORD *)v11 + 165);
                        uint64_t v34 = *(void *)(v30 + 24);
                        uint64_t v35 = *(void *)(v30 + 32);
                        *(_DWORD *)std::string buf = 136316419;
                        int v123 = v32;
                        __int16 v124 = 1024;
                        int v125 = v33;
                        __int16 v126 = 2049;
                        uint64_t v127 = v102;
                        __int16 v128 = 2049;
                        uint64_t v129 = v34;
                        __int16 v130 = 2049;
                        uint64_t v131 = *((void *)&v102 + 1);
                        __int16 v132 = 2049;
                        uint64_t v133 = v35;
                        _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "#fusion Overriding outputLocation with %s location,%d,lat,%{private}.7f,%{private}.7f,lon,%{private}.7f,%{private}.7f", buf, 0x3Au);
                      }
                      if (sub_10013D1A0(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_102419510 != -1) {
                          dispatch_once(&qword_102419510, &stru_1022FFA18);
                        }
                        if (v24 == *v23) {
                          uint64_t v24 = *(v23 - 1) + 4048;
                        }
                        unsigned int v44 = "GPS";
                        if (*(_DWORD *)(v24 - 16) == 3) {
                          unsigned int v44 = "Accessory";
                        }
                        int v45 = *((_DWORD *)v11 + 165);
                        uint64_t v46 = *(void *)(v30 + 24);
                        uint64_t v47 = *(void *)(v30 + 32);
                        int v107 = 136316419;
                        __int16 v108 = v44;
                        __int16 v109 = 1024;
                        int v110 = v45;
                        __int16 v111 = 2049;
                        uint64_t v112 = v102;
                        __int16 v113 = 2049;
                        uint64_t v114 = v46;
                        __int16 v115 = 2049;
                        uint64_t v116 = *((void *)&v102 + 1);
                        __int16 v117 = 2049;
                        uint64_t v118 = v47;
                        __int16 v48 = (char *)_os_log_send_and_compose_impl();
                        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesisMaxSelection(const LCFusionProviderLocation &)", "%s\n", v48);
                        if (v48 != (char *)buf) {
                          free(v48);
                        }
                      }
                      long long v36 = *(_OWORD *)(v30 + 8);
                      long long v37 = *(_OWORD *)(v30 + 24);
                      long long v38 = *(_OWORD *)(v30 + 56);
                      long long v103 = *(_OWORD *)(v30 + 40);
                      long long v104 = v38;
                      long long v101 = v36;
                      long long v102 = v37;
                      long long v39 = *(_OWORD *)(v30 + 72);
                      long long v40 = *(_OWORD *)(v30 + 88);
                      long long v41 = *(_OWORD *)(v30 + 104);
                      *(_OWORD *)&v105[44] = *(_OWORD *)(v30 + 116);
                      *(_OWORD *)&v105[16] = v40;
                      *(_OWORD *)&v105[32] = v41;
                      *(_OWORD *)uint64_t v105 = v39;
                      if (v97) {
                        sub_1000DB0A0(v97);
                      }
                      break;
                    }
                    uint64_t v27 = v24;
                  }
                  uint64_t v24 = v27 - 176;
                  uint64_t v21 = *((void *)v11 + 2);
                  uint64_t v22 = *((void *)v11 + 3);
                }
              }
              double v12 = v16;
            }
          }
          double v11 = *(double **)v11;
        }
        while (v11);
      }
      else
      {
        int v98 = 0;
      }
      *(void *)&long long v101 = *(void *)(a2 + 8);
      *((void *)&v101 + 1) = v106;
      int v63 = *(_DWORD *)(a2 + 120);
      *(void *)&v105[40] = *(void *)(a2 + 112);
      *(_DWORD *)&v105[48] = v63;
      *(_DWORD *)&v105[56] = v98;
      *((void *)&v104 + 1) = *(void *)(a2 + 64);
      *(_DWORD *)uint64_t v105 = *(_DWORD *)(a2 + 72);
      long long v64 = v104;
      *(_OWORD *)(a1 + 1008) = v103;
      *(_OWORD *)(a1 + 1024) = v64;
      long long v65 = v102;
      *(_OWORD *)(a1 + 976) = v101;
      *(_OWORD *)(a1 + 992) = v65;
      *(_OWORD *)(a1 + 1084) = *(_OWORD *)&v105[44];
      *(_OWORD *)(a1 + 1072) = *(_OWORD *)&v105[32];
      long long v66 = *(_OWORD *)v105;
      *(_OWORD *)(a1 + 1056) = *(_OWORD *)&v105[16];
      uint64_t v53 = 1;
      *(_OWORD *)(a1 + 1040) = v66;
      return v53;
    }
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    double v60 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "#selection, Failed to normalize likelihoods", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    LOWORD(v100) = 0;
    __int16 v50 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::performHypothesisMaxSelection(const LCFusionProviderLocation &)", "%s\n", v50);
LABEL_135:
    if (v50 != (char *)buf) {
      free(v50);
    }
    return 0;
  }
  __int16 v100 = off_10232A710;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v101 = _Q0;
  long long v103 = xmmword_101D1C320;
  long long v104 = xmmword_101D1C320;
  *(_OWORD *)&v105[8] = _Q0;
  *(_OWORD *)&v105[24] = _Q0;
  *(void *)&v105[40] = 0xBFF0000000000000;
  *(_DWORD *)&v105[48] = 0;
  v105[52] = 0;
  *(_DWORD *)&v105[56] = 0;
  BOOL v52 = sub_100074400(v2 + 56, (double *)&v106);
  uint64_t v53 = sub_100070DA0(*(void *)(a1 + 240) + 56, (uint64_t)&v100) & v52;
  if (v53)
  {
    *(_DWORD *)&v105[56] = sub_100022744(*(void *)(a1 + 240) + 8, (double *)&v106);
    if ((*(_DWORD *)&v105[56] & 0xFFFFFFFD) == 1)
    {
      uint64_t v54 = *(void *)(a1 + 240);
      unint64_t v55 = *(void *)(v54 + 40) + *(void *)(v54 + 48);
      uint64_t v56 = *(void *)(v54 + 16);
      uint64_t v57 = *(void *)(v54 + 24);
      long long v58 = (void *)(v56 + 8 * (v55 / 0x17));
      if (v57 == v56) {
        uint64_t v59 = 0;
      }
      else {
        uint64_t v59 = *v58 + 176 * (v55 % 0x17);
      }
      while (1)
      {
        unint64_t v67 = v57 == v56
            ? 0
            : *(void *)(v56 + 8 * (*(void *)(v54 + 40) / 0x17uLL)) + 176 * (*(void *)(v54 + 40) % 0x17uLL);
        if (v59 == v67) {
          break;
        }
        uint64_t v68 = v59;
        if (v59 == *v58) {
          uint64_t v68 = *(v58 - 1) + 4048;
        }
        if (sub_100022DBC(v68 - 176, (double *)&v106) > 2.0) {
          break;
        }
        if (v59 == *v58)
        {
          uint64_t v70 = *(v58 - 1);
          uint64_t v69 = v70 + 4048;
          if (*(_DWORD *)(v70 + 4032) == *(_DWORD *)&v105[56]) {
            goto LABEL_114;
          }
          --v58;
        }
        else
        {
          if (*(_DWORD *)(v59 - 16) == *(_DWORD *)&v105[56])
          {
            uint64_t v69 = v59;
LABEL_114:
            uint64_t v71 = *(std::__shared_weak_count **)(v69 - 152);
            if (v71 && (uint64_t v72 = std::__shared_weak_count::lock(v71)) != 0)
            {
              uint64_t v73 = *(void *)(v69 - 160);
              long long v74 = v72;
            }
            else
            {
              long long v74 = 0;
              uint64_t v73 = 0;
            }
            if (qword_102419510 != -1) {
              dispatch_once(&qword_102419510, &stru_1022FFA18);
            }
            int v75 = qword_102419518;
            if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v76 = v59;
              if (v59 == *v58) {
                uint64_t v76 = *(v58 - 1) + 4048;
              }
              int v77 = *(_DWORD *)(v54 + 660);
              if (*(_DWORD *)(v76 - 16) == 3) {
                uint64_t v78 = "Accessory";
              }
              else {
                uint64_t v78 = "GPS";
              }
              uint64_t v79 = *(void *)(v73 + 24);
              uint64_t v80 = *(void *)(v73 + 32);
              *(_DWORD *)std::string buf = 136316419;
              int v123 = v78;
              __int16 v124 = 1024;
              int v125 = v77;
              __int16 v126 = 2048;
              uint64_t v127 = v102;
              __int16 v128 = 2049;
              uint64_t v129 = v79;
              __int16 v130 = 2049;
              uint64_t v131 = *((void *)&v102 + 1);
              __int16 v132 = 2049;
              uint64_t v133 = v80;
              _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "#fusion Overriding outputLocation with raw %s location,%d,lat,%.7f,%{private}.7f,lon,%{private}.7f,%{private}.7f", buf, 0x3Au);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419510 != -1) {
                dispatch_once(&qword_102419510, &stru_1022FFA18);
              }
              if (v59 == *v58) {
                uint64_t v59 = *(v58 - 1) + 4048;
              }
              int v91 = *(_DWORD *)(v54 + 660);
              if (*(_DWORD *)(v59 - 16) == 3) {
                double v92 = "Accessory";
              }
              else {
                double v92 = "GPS";
              }
              uint64_t v93 = *(void *)(v73 + 24);
              uint64_t v94 = *(void *)(v73 + 32);
              *(_DWORD *)int v119 = 136316419;
              *(void *)&v119[4] = v92;
              *(_WORD *)&v119[12] = 1024;
              *(_DWORD *)&v119[14] = v91;
              *(_WORD *)&v119[18] = 2048;
              *(void *)&v119[20] = v102;
              *(_WORD *)&v119[28] = 2049;
              *(void *)&v119[30] = v93;
              *(_WORD *)&v119[38] = 2049;
              *(void *)int v120 = *((void *)&v102 + 1);
              *(_WORD *)&v120[8] = 2049;
              *(void *)&v120[10] = v94;
              uint64_t v95 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesisMaxSelection(const LCFusionProviderLocation &)", "%s\n", v95);
              if (v95 != (char *)buf) {
                free(v95);
              }
            }
            long long v81 = *(_OWORD *)(v73 + 8);
            long long v82 = *(_OWORD *)(v73 + 24);
            long long v83 = *(_OWORD *)(v73 + 56);
            long long v103 = *(_OWORD *)(v73 + 40);
            long long v104 = v83;
            long long v101 = v81;
            long long v102 = v82;
            long long v84 = *(_OWORD *)(v73 + 72);
            long long v85 = *(_OWORD *)(v73 + 88);
            long long v86 = *(_OWORD *)(v73 + 104);
            *(_OWORD *)&v105[44] = *(_OWORD *)(v73 + 116);
            *(_OWORD *)&v105[16] = v85;
            *(_OWORD *)&v105[32] = v86;
            *(_OWORD *)uint64_t v105 = v84;
            if (v74) {
              sub_1000DB0A0(v74);
            }
            break;
          }
          uint64_t v69 = v59;
        }
        uint64_t v59 = v69 - 176;
        uint64_t v56 = *(void *)(v54 + 16);
        uint64_t v57 = *(void *)(v54 + 24);
      }
    }
    long long v87 = *(_OWORD *)&v105[16];
    *(_OWORD *)(a1 + 1040) = *(_OWORD *)v105;
    *(_OWORD *)(a1 + 1056) = v87;
    *(_OWORD *)(a1 + 1072) = *(_OWORD *)&v105[32];
    *(_OWORD *)(a1 + 1084) = *(_OWORD *)&v105[44];
    long long v88 = v102;
    *(_OWORD *)(a1 + 976) = v101;
    *(_OWORD *)(a1 + 992) = v88;
    long long v89 = v104;
    *(_OWORD *)(a1 + 1008) = v103;
    *(_OWORD *)(a1 + 1024) = v89;
  }
  else
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    int v61 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "#selection,Failed to retrieve estimate from the only available hypothesis", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      *(_WORD *)int v119 = 0;
      int v62 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesisMaxSelection(const LCFusionProviderLocation &)", "%s\n", v62);
      if (v62 != (char *)buf) {
        free(v62);
      }
    }
  }
  return v53;
}

void sub_100E9E85C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100E9E86C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (double *)(a2 + 16);
  uint64_t v167 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a1 + 240);
  if (!v3)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    __int16 v51 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "#selection,No valid hypothesis available for selection", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419510 == -1) {
      goto LABEL_85;
    }
    goto LABEL_187;
  }
  uint64_t v6 = 1;
  double v7 = *(void **)(a1 + 240);
  do
  {
    double v7 = (void *)*v7;
    --v6;
  }
  while (v7);
  if (v6)
  {
    if (sub_100E9CFB0(a1))
    {
      double v159 = 0.0;
      double v160 = 0.0;
      if (sub_1001BD27C((double *)(a1 + 1800), &v160, &v159, *(double *)(a2 + 24), *(double *)(a1 + 1704)))
      {
        long long v161 = off_10232A710;
        long long v165 = xmmword_101D1C320;
        *(void *)&v166[40] = 0xBFF0000000000000;
        *(_DWORD *)&v166[48] = 0;
        v166[52] = 0;
        *(_DWORD *)&v166[56] = 0;
        *(void *)&long long v162 = *(void *)(a2 + 8);
        *((void *)&v162 + 1) = v167;
        long long v164 = xmmword_101D1C320;
        *(_OWORD *)&v166[8] = xmmword_101D1C570;
        *(_OWORD *)&v166[24] = xmmword_101D1C570;
        long long v163 = 0uLL;
        int v8 = *(uint64_t **)(a1 + 240);
        if (v8)
        {
          double v129 = v159 * 0.0174532925;
          double v130 = v160 * 0.0174532925;
          double v143 = 0.0;
          __asm { FMOV            V0.2D, #-1.0 }
          float64x2_t v144 = _Q0;
          _Q0.f64[0] = 3.14159265;
          int8x16_t v135 = (int8x16_t)_Q0;
          _Q0.f64[0] = NAN;
          _Q0.f64[1] = NAN;
          int8x16_t v132 = (int8x16_t)vnegq_f64(_Q0);
          double v134 = 0.0;
          double v137 = 0.0;
          double v14 = 0.0;
          do
          {
            if ((*((_DWORD *)v8 + 167) & 0xFFFFFFFB) != 0)
            {
              uint64_t v15 = v8[6];
              if (v15)
              {
                if (*(unsigned char *)(*(void *)(v8[2] + 8 * ((v15 + v8[5] - 1) / 0x17uLL))
                              + 176 * ((v15 + v8[5] - 1) % 0x17uLL)
                              + 168))
                {
                  int v147 = off_10232A710;
                  float64x2_t v148 = v144;
                  long long v151 = xmmword_101D1C320;
                  long long v152 = xmmword_101D1C320;
                  float64x2_t v153 = v144;
                  float64x2_t v154 = v144;
                  unint64_t v155 = 0xBFF0000000000000;
                  int v156 = 0;
                  char v157 = 0;
                  int v158 = 0;
                  BOOL v16 = sub_100074400((uint64_t)(v8 + 7), (double *)&v167);
                  int v17 = sub_100070DA0((uint64_t)(v8 + 7), (uint64_t)&v147);
                  if (*(unsigned char *)(a1 + 164))
                  {
                    if (qword_102419510 != -1) {
                      dispatch_once(&qword_102419510, &stru_1022FFA18);
                    }
                    double v18 = qword_102419518;
                    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
                    {
                      int v19 = *((_DWORD *)v8 + 165);
                      *(_DWORD *)std::string buf = 67109120;
                      int v171 = v19;
                      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#selection,Likelihood equal override setting likelihood to 1 for hID,%d", buf, 8u);
                    }
                    double v20 = 1.0;
                    if (sub_10013D1A0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_102419510 != -1) {
                        dispatch_once(&qword_102419510, &stru_1022FFA18);
                      }
                      int v21 = *((_DWORD *)v8 + 165);
                      int v168 = 67109120;
                      int v169 = v21;
                      uint64_t v22 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesesAveraging(const LCFusionProviderLocation &)", "%s\n", v22);
                      if (v22 != (char *)buf) {
                        free(v22);
                      }
                    }
                  }
                  else
                  {
                    double v20 = *((double *)v8 + 80);
                  }
                  if (v16 && v17 && v20 > 0.00000001)
                  {
                    double v23 = v14 + v20;
                    *(double *)&long long v163 = (v20 * v149 + v14 * *(double *)&v163) / (v14 + v20);
                    sub_1001C2684(*(long double *)&v163);
                    *(void *)&long long v163 = v25;
                    double v26 = *((double *)&v163 + 1);
                    *(double *)v27.i64 = v150 * 0.0174532925;
                    if (fabs(v150 * 0.0174532925) <= *(double *)v135.i64)
                    {
                      int8x16_t v29 = v135;
                    }
                    else
                    {
                      double v138 = *(double *)vbslq_s8(v132, v135, v27).i64;
                      long double v28 = fmod(*(double *)v27.i64 + v138, 6.28318531);
                      int8x16_t v29 = v135;
                      *(double *)v27.i64 = v28 - v138;
                    }
                    *(double *)v24.i64 = v26 * 0.0174532925;
                    double v30 = v26 * 0.0174532925;
                    if (fabs(v26 * 0.0174532925) > *(double *)v29.i64)
                    {
                      double v126 = *(double *)vbslq_s8(v132, v29, v24).i64;
                      uint64_t v139 = v27.i64[0];
                      long double v31 = fmod(*(double *)v24.i64 + v126, 6.28318531);
                      *(double *)v24.i64 = v26 * 0.0174532925;
                      v29.i64[0] = v135.i64[0];
                      v27.i64[0] = v139;
                      double v30 = v31 - v126;
                    }
                    double v32 = *(double *)v27.i64 - v30;
                    BOOL v33 = *(double *)v27.i64 - v30 > *(double *)v29.i64;
                    BOOL v34 = vabdd_f64(*(double *)v27.i64, v30) <= *(double *)v29.i64;
                    double v35 = -0.0;
                    if (!v34) {
                      double v35 = dbl_101D94400[v33];
                    }
                    *((double *)&v163 + 1) = (v20 * ((*(double *)v24.i64 + v32 + v35) * 57.2957795) + v14 * v26) / v23;
                    sub_10005B720(*((long double *)&v163 + 1));
                    *((void *)&v163 + 1) = v38;
                    if (*((double *)&v151 + 1) != -1.0 && *(double *)&v152 != -1.0)
                    {
                      double v39 = v20 * *((double *)&v151 + 1) + v137 * *((double *)&v164 + 1);
                      double v137 = v137 + v20;
                      *((double *)&v164 + 1) = v39 / v137;
                    }
                    if (v154.f64[0] != -1.0 && v154.f64[1] != -1.0)
                    {
                      double v40 = *(double *)&v166[24];
                      *(double *)v36.i64 = v154.f64[0] * 0.0174532925;
                      if (fabs(v154.f64[0] * 0.0174532925) <= *(double *)v135.i64)
                      {
                        int8x16_t v42 = v135;
                      }
                      else
                      {
                        double v140 = *(double *)vbslq_s8(v132, v135, v36).i64;
                        long double v41 = fmod(*(double *)v36.i64 + v140, 6.28318531);
                        int8x16_t v42 = v135;
                        *(double *)v36.i64 = v41 - v140;
                      }
                      *(double *)v37.i64 = v40 * 0.0174532925;
                      double v43 = v40 * 0.0174532925;
                      if (fabs(v40 * 0.0174532925) > *(double *)v42.i64)
                      {
                        double v127 = *(double *)vbslq_s8(v132, v42, v37).i64;
                        uint64_t v141 = v36.i64[0];
                        long double v44 = fmod(*(double *)v37.i64 + v127, 6.28318531);
                        *(double *)v37.i64 = v40 * 0.0174532925;
                        v42.i64[0] = v135.i64[0];
                        v36.i64[0] = v141;
                        double v43 = v44 - v127;
                      }
                      double v45 = *(double *)v36.i64 - v43;
                      double v46 = dbl_101D94400[*(double *)v36.i64 - v43 > *(double *)v42.i64];
                      BOOL v34 = vabdd_f64(*(double *)v36.i64, v43) <= *(double *)v42.i64;
                      double v47 = -0.0;
                      if (!v34) {
                        double v47 = v46;
                      }
                      double v48 = v20 * ((*(double *)v37.i64 + v45 + v47) * 57.2957795) + v134 * v40;
                      double v134 = v134 + v20;
                      *(double *)&v166[24] = v48 / v134;
                      sub_100142F58(v48 / v134);
                      *(void *)&v166[24] = v49;
                    }
                    if (v153.f64[0] != -1.0 && v153.f64[1] != -1.0)
                    {
                      double v50 = v20 * v153.f64[0] + v143 * *(double *)&v166[8];
                      double v143 = v143 + v20;
                      *(double *)&v166[8] = v50 / v143;
                    }
                  }
                  else
                  {
                    double v23 = v14;
                  }
                  double v14 = v23;
                }
              }
            }
            int v8 = (uint64_t *)*v8;
          }
          while (v8);
          if (v14 >= 0.00000001)
          {
            uint64_t v59 = *(uint64_t **)(a1 + 240);
            if (v59)
            {
              int v123 = 0;
              double v124 = 0.0;
              double v125 = 0.0;
              double v60 = -1.0;
              double v128 = 0.0;
              double v133 = 0.0;
              double v131 = 0.0;
              double v61 = v143;
              double v62 = v137;
              do
              {
                if ((*((_DWORD *)v59 + 167) & 0xFFFFFFFB) != 0)
                {
                  uint64_t v63 = v59[6];
                  if (v63)
                  {
                    if (*(unsigned char *)(*(void *)(v59[2] + 8 * ((v63 + v59[5] - 1) / 0x17uLL))
                                  + 176 * ((v63 + v59[5] - 1) % 0x17uLL)
                                  + 168))
                    {
                      int v147 = off_10232A710;
                      float64x2_t v148 = v144;
                      long long v151 = xmmword_101D1C320;
                      long long v152 = xmmword_101D1C320;
                      float64x2_t v153 = v144;
                      float64x2_t v154 = v144;
                      unint64_t v155 = 0xBFF0000000000000;
                      int v156 = 0;
                      char v157 = 0;
                      int v158 = 0;
                      double v136 = v60;
                      double v142 = v14;
                      if (*(unsigned char *)(a1 + 164))
                      {
                        if (qword_102419510 != -1) {
                          dispatch_once(&qword_102419510, &stru_1022FFA18);
                        }
                        long long v64 = qword_102419518;
                        if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
                        {
                          int v65 = *((_DWORD *)v59 + 165);
                          *(_DWORD *)std::string buf = 67109120;
                          int v171 = v65;
                          _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "#selection,Likelihood equal override setting likelihood to 1 for hID,%d", buf, 8u);
                        }
                        double v66 = 1.0;
                        if (sub_10013D1A0(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_102419510 != -1) {
                            dispatch_once(&qword_102419510, &stru_1022FFA18);
                          }
                          int v77 = *((_DWORD *)v59 + 165);
                          int v168 = 67109120;
                          int v169 = v77;
                          uint64_t v78 = (char *)_os_log_send_and_compose_impl();
                          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesesAveraging(const LCFusionProviderLocation &)", "%s\n", v78);
                          if (v78 != (char *)buf) {
                            free(v78);
                          }
                          double v61 = v143;
                          double v62 = v137;
                        }
                        else
                        {
                          double v61 = v143;
                        }
                      }
                      else
                      {
                        double v66 = *((double *)v59 + 80);
                      }
                      if (sub_100070DA0((uint64_t)(v59 + 7), (uint64_t)&v147))
                      {
                        double v67 = *(double *)&v151;
                        double v68 = sub_1004BB18C(v149, *(double *)&v163);
                        double v69 = *(double *)&v151;
                        double v70 = sub_1004BB18C(v150, *((double *)&v163 + 1));
                        double v71 = -1.0;
                        double v72 = v66;
                        double v73 = v66 / v142;
                        if (*((double *)&v151 + 1) == -1.0 || *(double *)&v152 == -1.0 || v62 <= 0.00000001)
                        {
                          double v74 = v66 / v142;
                        }
                        else
                        {
                          double v74 = v66 / v62;
                          double v128 = v128
                               + v74
                               * ((*((double *)&v151 + 1) - *((double *)&v164 + 1))
                                * (*((double *)&v151 + 1) - *((double *)&v164 + 1)))
                               + v74 * (*(double *)&v152 * *(double *)&v152);
                        }
                        if (v154.f64[0] != -1.0)
                        {
                          double v75 = v154.f64[1];
                          if (v154.f64[1] == -1.0 || v134 <= 0.00000001)
                          {
                            double v72 = v66;
                          }
                          else
                          {
                            double v76 = sub_1004BB18C(v154.f64[0], *(double *)&v166[24]);
                            double v72 = v66;
                            double v74 = v66 / v134;
                            double v124 = v124 + v66 / v134 * (v76 * v76) + v66 / v134 * (v75 * v75);
                            double v71 = -1.0;
                          }
                        }
                        double v14 = v142;
                        if (v153.f64[0] != v71 && v153.f64[1] != v71 && v143 > 0.00000001)
                        {
                          double v74 = v72 / v143;
                          double v125 = v125
                               + v74 * ((v153.f64[0] - *(double *)&v166[8]) * (v153.f64[0] - *(double *)&v166[8]))
                               + v74 * (v153.f64[1] * v153.f64[1]);
                        }
                        double v131 = v131 + v73 * (v130 * v68 * (v130 * v68)) + v73 * (v67 * v67) * 0.5;
                        double v133 = v133 + v73 * (v129 * v70 * (v129 * v70)) + v73 * (v69 * v69) * 0.5;
                        if (v74 <= v136)
                        {
                          double v74 = v136;
                        }
                        else
                        {
                          int v123 = sub_100022744((uint64_t)(v59 + 1), (double *)&v167);
                          sub_100188750(a1 + 248, (uint64_t)(v59 + 1));
                        }
                        double v61 = v143;
                      }
                      else
                      {
                        double v74 = v136;
                        double v14 = v142;
                      }
                      double v60 = v74;
                      double v62 = v137;
                    }
                  }
                }
                uint64_t v59 = (uint64_t *)*v59;
              }
              while (v59);
              double v87 = v131 + v133;
              int v88 = v123;
              double v90 = v124;
              double v89 = v125;
              double v91 = v128;
            }
            else
            {
              int v88 = 0;
              double v91 = 0.0;
              double v90 = 0.0;
              double v89 = 0.0;
              double v87 = 0.0;
              double v61 = v143;
              double v62 = v137;
            }
            *(void *)&long long v164 = sqrt(v87);
            if (v62 <= 0.00000001)
            {
              *((void *)&v164 + 1) = 0xBFF0000000000000;
              double v94 = -1.0;
            }
            else
            {
              double v94 = sqrt(v91);
            }
            *(double *)&long long v165 = v94;
            if (v134 <= 0.00000001 || v90 >= 3600.0)
            {
              *(void *)&v166[24] = 0xBFF0000000000000;
              double v95 = -1.0;
            }
            else
            {
              double v95 = sqrt(v90);
            }
            *(double *)&v166[32] = v95;
            if (v61 <= 0.00000001)
            {
              *(void *)&v166[8] = 0xBFF0000000000000;
              double v96 = -1.0;
            }
            else
            {
              double v96 = sqrt(v89);
            }
            *(_DWORD *)&v166[48] = *(_DWORD *)(a2 + 120);
            uint64_t v97 = *(void *)(a2 + 112);
            *(double *)&v166[16] = v96;
            *(void *)&v166[40] = v97;
            int v98 = *(_DWORD *)(a1 + 160);
            if (v98)
            {
              if (v98 == 4 || v98 == 1)
              {
                *(_DWORD *)&v166[56] = *(_DWORD *)(a1 + 160);
              }
              else
              {
                if (qword_102419510 != -1) {
                  dispatch_once(&qword_102419510, &stru_1022FFA18);
                }
                long long v99 = qword_102419518;
                if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)std::string buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEBUG, "#selection,Output default set to invalid type error. Setting type to unknown", buf, 2u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102419510 != -1) {
                    dispatch_once(&qword_102419510, &stru_1022FFA18);
                  }
                  LOWORD(v147) = 0;
                  uint64_t v122 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesesAveraging(const LCFusionProviderLocation &)", "%s\n", v122);
                  if (v122 != (char *)buf) {
                    free(v122);
                  }
                }
              }
            }
            else
            {
              *(_DWORD *)&v166[56] = v88;
            }
            *((void *)&v165 + 1) = *(void *)(a2 + 64);
            *(_DWORD *)int v166 = *(_DWORD *)(a2 + 72);
            long long v100 = v163;
            *(_OWORD *)(a1 + 976) = v162;
            *(_OWORD *)(a1 + 992) = v100;
            long long v101 = v165;
            long long v103 = v162;
            long long v102 = v163;
            *(_OWORD *)(a1 + 1008) = v164;
            *(_OWORD *)(a1 + 1024) = v101;
            *(_OWORD *)(a1 + 1084) = *(_OWORD *)&v166[44];
            long long v104 = *(_OWORD *)&v166[16];
            *(_OWORD *)(a1 + 1072) = *(_OWORD *)&v166[32];
            *(_OWORD *)(a1 + 1056) = v104;
            long long v106 = v164;
            long long v105 = v165;
            *(_OWORD *)(a1 + 1040) = *(_OWORD *)v166;
            unint64_t v107 = *(void *)(a1 + 288) + *(void *)(a1 + 280) - 1;
            unint64_t v108 = *(void *)(*(void *)(a1 + 256) + 8 * (v107 / 0x17)) + 176 * (v107 % 0x17);
            *(_OWORD *)(v108 + 88) = v105;
            *(_OWORD *)(v108 + 72) = v106;
            *(_OWORD *)(v108 + 56) = v102;
            *(_OWORD *)(v108 + 40) = v103;
            long long v109 = *(_OWORD *)v166;
            long long v110 = *(_OWORD *)&v166[16];
            long long v111 = *(_OWORD *)&v166[32];
            *(_OWORD *)(v108 + 148) = *(_OWORD *)&v166[44];
            *(_OWORD *)(v108 + 136) = v111;
            *(_OWORD *)(v108 + 120) = v110;
            *(_OWORD *)(v108 + 104) = v109;
            unint64_t v112 = *(void *)(a1 + 288) + *(void *)(a1 + 280) - 1;
            uint64_t v113 = *(void *)(*(void *)(a1 + 256) + 8 * (v112 / 0x17));
            uint64_t v114 = (char *)operator new(0xA0uLL);
            *((void *)v114 + 2) = 0;
            *(void *)uint64_t v114 = off_1022FFBB0;
            *((void *)v114 + 1) = 0;
            *((void *)v114 + 3) = off_10232A710;
            uint64_t v115 = v113 + 176 * (v112 % 0x17);
            long long v116 = *(_OWORD *)(v115 + 40);
            long long v117 = *(_OWORD *)(v115 + 56);
            long long v118 = *(_OWORD *)(v115 + 88);
            *((_OWORD *)v114 + 4) = *(_OWORD *)(v115 + 72);
            *((_OWORD *)v114 + 5) = v118;
            *((_OWORD *)v114 + 2) = v116;
            *((_OWORD *)v114 + 3) = v117;
            long long v119 = *(_OWORD *)(v115 + 104);
            long long v120 = *(_OWORD *)(v115 + 120);
            long long v121 = *(_OWORD *)(v115 + 136);
            *(_OWORD *)(v114 + 140) = *(_OWORD *)(v115 + 148);
            *((_OWORD *)v114 + 7) = v120;
            *((_OWORD *)v114 + 8) = v121;
            *((_OWORD *)v114 + 6) = v119;
            __n128 v145 = v114 + 24;
            int v146 = (std::__shared_weak_count *)v114;
            atomic_fetch_add_explicit((atomic_ullong *volatile)v114 + 2, 1uLL, memory_order_relaxed);
            sub_100025538(a1 + 296, v2, (uint64_t *)&v145);
            if (v146) {
              std::__shared_weak_count::__release_weak(v146);
            }
            sub_1000DB0A0((std::__shared_weak_count *)v114);
            return 1;
          }
        }
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        uint64_t v79 = qword_102419518;
        if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "#selection,No valid hypotheses with substantial likelihoods found", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          return 0;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        LOWORD(v147) = 0;
        uint64_t v56 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesesAveraging(const LCFusionProviderLocation &)", "%s\n", v56);
      }
      else
      {
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        long long v58 = qword_102419518;
        if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "#Error,fusion hypothesis selection, calc_dNdE failed", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          return 0;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419510 != -1) {
          dispatch_once(&qword_102419510, &stru_1022FFA18);
        }
        LOWORD(v161) = 0;
        uint64_t v56 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::performHypothesesAveraging(const LCFusionProviderLocation &)", "%s\n", v56);
      }
    }
    else
    {
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      unint64_t v55 = qword_102419518;
      if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "#selection, Failed to normalize likelihoods", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      LOWORD(v161) = 0;
      uint64_t v56 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::performHypothesesAveraging(const LCFusionProviderLocation &)", "%s\n", v56);
    }
LABEL_181:
    if (v56 != (char *)buf) {
      free(v56);
    }
    return 0;
  }
  int v52 = *(_DWORD *)(v3 + 668);
  if (!v52
    || (uint64_t v53 = *(void *)(v3 + 48)) == 0
    || !*(unsigned char *)(*(void *)(*(void *)(v3 + 16) + 8 * ((v53 + *(void *)(v3 + 40) - 1) / 0x17uLL))
                 + 176 * ((v53 + *(void *)(v3 + 40) - 1) % 0x17uLL)
                 + 168))
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    uint64_t v57 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "#selection,only available hypothesis is invalid fused hypothesis, rejecting", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419510 == -1) {
      goto LABEL_85;
    }
    goto LABEL_187;
  }
  if (v52 == 4)
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    uint64_t v54 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "#selection,only available hypothesis is a gross outlier, rejecting", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419510 == -1) {
      goto LABEL_85;
    }
LABEL_187:
    dispatch_once(&qword_102419510, &stru_1022FFA18);
LABEL_85:
    LOWORD(v161) = 0;
    uint64_t v56 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesesAveraging(const LCFusionProviderLocation &)", "%s\n", v56);
    goto LABEL_181;
  }
  long long v161 = off_10232A710;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v162 = _Q0;
  long long v164 = xmmword_101D1C320;
  long long v165 = xmmword_101D1C320;
  *(_OWORD *)&v166[8] = _Q0;
  *(_OWORD *)&v166[24] = _Q0;
  *(void *)&v166[40] = 0xBFF0000000000000;
  *(_DWORD *)&v166[48] = 0;
  v166[52] = 0;
  *(_DWORD *)&v166[56] = 0;
  BOOL v83 = sub_100074400(v3 + 56, (double *)&v167);
  uint64_t v80 = sub_100070DA0(v3 + 56, (uint64_t)&v161) & v83;
  if (v80)
  {
    *(_DWORD *)&v166[56] = sub_100022744(v3 + 8, (double *)&v167);
    long long v84 = *(_OWORD *)&v166[16];
    *(_OWORD *)(a1 + 1040) = *(_OWORD *)v166;
    *(_OWORD *)(a1 + 1056) = v84;
    *(_OWORD *)(a1 + 1072) = *(_OWORD *)&v166[32];
    long long v85 = v163;
    *(_OWORD *)(a1 + 976) = v162;
    *(_OWORD *)(a1 + 992) = v85;
    long long v86 = v165;
    *(_OWORD *)(a1 + 1008) = v164;
    *(_OWORD *)(a1 + 1024) = v86;
    *(_OWORD *)(a1 + 1084) = *(_OWORD *)&v166[44];
  }
  else
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    double v92 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEFAULT, "#selection,Failed to retrieve estimate from the only available hypothesis", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      LOWORD(v147) = 0;
      uint64_t v93 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::performHypothesesAveraging(const LCFusionProviderLocation &)", "%s\n", v93);
      if (v93 != (char *)buf) {
        free(v93);
      }
    }
  }
  return v80;
}

void sub_100EA00AC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

char *sub_100EA00C4(uint64_t a1, char *__src, _DWORD *a3)
{
  float v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    double v14 = *(unsigned char **)a1;
    unint64_t v15 = ((uint64_t)&v6[-*(void *)a1] >> 2) + 1;
    if (v15 >> 62) {
      sub_1001D7FD4();
    }
    uint64_t v16 = (__src - v14) >> 2;
    uint64_t v17 = v8 - (void)v14;
    if (v17 >> 1 > v15) {
      unint64_t v15 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v15;
    }
    uint64_t v25 = v7;
    if (v18) {
      int v19 = (char *)sub_10017EA34(v7, v18);
    }
    else {
      int v19 = 0;
    }
    std::string __p = v19;
    uint64_t v22 = &v19[4 * v16];
    double v23 = v22;
    int8x16_t v24 = &v19[4 * v18];
    sub_100EA3D74(&__p, a3);
    float v4 = sub_1001E08D8((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22) {
      v23 += (v22 - v23 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(_DWORD *)__src = *a3;
    *(void *)(a1 + 8) = __src + 4;
  }
  else
  {
    BOOL v10 = __src + 4;
    double v11 = v6 - 4;
    double v12 = v6;
    while (v11 < v6)
    {
      int v13 = *(_DWORD *)v11;
      v11 += 4;
      *(_DWORD *)double v12 = v13;
      v12 += 4;
    }
    *(void *)(a1 + 8) = v12;
    if (v6 != v10) {
      memmove(&v6[-4 * ((v6 - v10) >> 2)], __src, v6 - v10);
    }
    *(_DWORD *)float v4 = *a3;
  }
  return v4;
}

void sub_100EA0230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100EA0268(uint64_t a1)
{
  int v1 = *(double **)(a1 + 240);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(void **)(a1 + 240);
    do
    {
      ++v2;
      uint64_t v3 = (void *)*v3;
    }
    while (v3);
    double v4 = 1.0;
    double v5 = 1.0 / (double)v2;
    if (v5 <= 1.0) {
      double v4 = 1.0 / (double)v2;
    }
    if (v5 >= 0.00000001) {
      double v6 = v4;
    }
    else {
      double v6 = 0.00000001;
    }
    double v7 = log(v6);
    unint64_t v8 = v1;
    do
    {
      v8[80] = v6;
      v8[81] = v7;
      unint64_t v8 = *(double **)v8;
    }
    while (v8);
  }
  else
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    unint64_t v9 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#selection,reset hypotheses Likelihoods is called without any valid hypotheses available", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      double v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL cllcf::CLLCFusion::resetAllHypothesesLikelihoods()", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  return v1 != 0;
}

void sub_100EA046C(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100E9852C(a1);
  }
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022FFA18);
  }
  double v6 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
  {
    double v7 = *a2;
    int v8 = *(_DWORD *)(a3 + 8);
    int v9 = *(_DWORD *)(a3 + 12);
    *(_DWORD *)std::string buf = 134349568;
    unint64_t v15 = v7;
    __int16 v16 = 1026;
    int v17 = v8;
    __int16 v18 = 1026;
    int v19 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#fusion,fitness session update,mct,%{public}.3f,type,%{public}d,predicted,%{public}d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusion::fitnessActivityUpdate(const CFTimeInterval &, const CLWorkoutUpdate &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  BOOL v10 = *(double *)a3 <= 0.0;
  if (*(double *)a3 >= 1.0e11) {
    BOOL v10 = 1;
  }
  int v11 = *(_DWORD *)(a3 + 8);
  if ((v10 | (v11 == 71) ^ (v11 == 0)) != 1 || v11 == 0)
  {
    sub_10068DB78(a1 + 1840, a2, (long long *)a3);
    sub_100070FB0(a1, (double *)a2);
  }
}

void sub_100EA06D4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_100EA06E0(uint64_t a1, double *a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100E9852C(a1);
  }
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022FFA18);
  }
  double v6 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
  {
    double v7 = *a2;
    BOOL v8 = sub_101374E9C((void *)a3);
    BOOL v9 = sub_100178D5C(a3, *a2, 6.0);
    int v10 = *(_DWORD *)a3;
    BOOL v11 = *(_DWORD *)a3 == 0;
    BOOL v12 = *(_DWORD *)a3 == 3;
    *(_DWORD *)std::string buf = 134350336;
    *(double *)&uint8_t buf[4] = v7;
    __int16 v39 = 1026;
    BOOL v40 = v8;
    __int16 v41 = 1026;
    BOOL v42 = v9;
    __int16 v43 = 1026;
    BOOL v44 = v11;
    __int16 v45 = 1026;
    BOOL v46 = v12;
    __int16 v47 = 1026;
    BOOL v48 = v10 == 1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#fusion,received MapsRouteHintData,mct,%{public}.3f,goodConnectivity,%{public}d,timedout,%{public}d,isPedestrian,%{public}d,isBicycle,%{public}d,isVehicular,%{public}d", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    double v19 = *a2;
    BOOL v20 = sub_101374E9C((void *)a3);
    BOOL v21 = sub_100178D5C(a3, *a2, 6.0);
    int v22 = *(_DWORD *)a3;
    BOOL v23 = *(_DWORD *)a3 == 0;
    BOOL v24 = *(_DWORD *)a3 == 3;
    unsigned int v26 = 134350336;
    double v27 = v19;
    __int16 v28 = 1026;
    BOOL v29 = v20;
    __int16 v30 = 1026;
    BOOL v31 = v21;
    __int16 v32 = 1026;
    BOOL v33 = v23;
    __int16 v34 = 1026;
    BOOL v35 = v24;
    __int16 v36 = 1026;
    BOOL v37 = v22 == 1;
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusion::routeHintUpdate(const CFTimeInterval &, const CLMapsRouteHintData &)", "%s\n", v25);
    if (v25 != buf) {
      free(v25);
    }
  }
  *(void *)(a1 + 1968) = *(void *)a3;
  if (a1 + 1968 != a3) {
    sub_1008A9A00((char *)(a1 + 1976), *(char **)(a3 + 8), *(void *)(a3 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 3));
  }
  *(_OWORD *)(a1 + 2000) = *(_OWORD *)(a3 + 32);
  if (!sub_100178D5C(a3, *a2, 6.0))
  {
    int v13 = *(_DWORD *)a3;
    if (*(_DWORD *)a3 == 3)
    {
      if (*(_DWORD *)(a1 + 1912) != 6)
      {
        *(_DWORD *)(a1 + 1912) = 6;
        double v15 = *a2;
        unsigned int v26 = 6;
        *(void *)std::string buf = &v26;
        __int16 v16 = sub_100042490((uint64_t **)(a1 + 1888), &v26, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        goto LABEL_21;
      }
    }
    else if (v13 == 1)
    {
      int v17 = *(_DWORD *)(a1 + 1912);
      if ((v17 - 1) < 5 || v17 == 10)
      {
        *(_DWORD *)(a1 + 1912) = 7;
        double v15 = *a2;
        unsigned int v26 = 7;
        *(void *)std::string buf = &v26;
        __int16 v16 = sub_100042490((uint64_t **)(a1 + 1888), &v26, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        goto LABEL_21;
      }
    }
    else if (!v13)
    {
      unsigned int v14 = *(_DWORD *)(a1 + 1912);
      if (v14 <= 0xA && ((1 << v14) & 0x7C7) != 0)
      {
        *(_DWORD *)(a1 + 1912) = 3;
        double v15 = *a2;
        unsigned int v26 = 3;
        *(void *)std::string buf = &v26;
        __int16 v16 = sub_100042490((uint64_t **)(a1 + 1888), &v26, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
LABEL_21:
        *((double *)v16 + 5) = v15;
      }
    }
  }
  return sub_100070FB0(a1, a2);
}

void sub_100EA0AF8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_100EA0B04(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v15 = a3;
  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100E9852C(a1);
  }
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022FFA18);
  }
  double v6 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
  {
    double v7 = (a3 - 1) > 5 ? "Unavailable" : off_1022FFBF0[(int)a3 - 1];
    uint64_t v8 = *a2;
    sub_100134750(__p, v7);
    BOOL v9 = SBYTE3(v20) >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)std::string buf = 134349826;
    uint64_t v24 = v8;
    __int16 v25 = 1026;
    int v26 = a3;
    __int16 v27 = 2082;
    __int16 v28 = v9;
    __int16 v29 = 1026;
    int v30 = HIDWORD(a3);
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,signalEnvironment,%{public}d,name,%{public}s,fidelity,%{public}d", buf, 0x22u);
    if (SBYTE3(v20) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    uint64_t v10 = *a2;
    sub_100DC0794(a3, v13);
    if (v14 >= 0) {
      BOOL v11 = v13;
    }
    else {
      BOOL v11 = (void **)v13[0];
    }
    *(_DWORD *)std::string __p = 134349826;
    *(void *)&__p[4] = v10;
    __int16 v17 = 1026;
    int v18 = a3;
    __int16 v19 = 2082;
    BOOL v20 = v11;
    __int16 v21 = 1026;
    int v22 = HIDWORD(a3);
    BOOL v12 = (char *)_os_log_send_and_compose_impl();
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusion::signalEnvironmentUpdate(const CFTimeInterval &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  sub_10095CD60(a1 + 2272, (int *)&v15);
  if (v15) {
    *(void *)(a1 + 2064) = v15;
  }
}

void sub_100EA0DCC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_100EA0DD8(uint64_t a1, double *a2, int a3)
{
  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100E9852C(a1);
  }
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022FFA18);
  }
  double v6 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
  {
    double v7 = *a2;
    *(_DWORD *)std::string buf = 134349312;
    *(double *)&uint8_t buf[4] = v7;
    __int16 v19 = 1026;
    int v20 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,hasAirborneClient,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    uint64_t v12 = *(void *)a2;
    unsigned int v14 = 134349312;
    uint64_t v15 = v12;
    __int16 v16 = 1026;
    int v17 = a3;
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusion::airborneClientUpdate(const CFTimeInterval &, BOOL)", "%s\n", v13);
    if (v13 != buf) {
      free(v13);
    }
  }
  *(unsigned char *)(a1 + 2073) = a3;
  unsigned int v8 = *(_DWORD *)(a1 + 1912);
  if (a3)
  {
    if (v8 >= 8 && v8 != 10) {
      return sub_100070FB0(a1, a2);
    }
    *(_DWORD *)(a1 + 1912) = 8;
    double v9 = *a2;
    unsigned int v14 = 8;
    *(void *)std::string buf = &v14;
    uint64_t v10 = sub_100042490((uint64_t **)(a1 + 1888), &v14, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
LABEL_11:
    *((double *)v10 + 5) = v9;
    return sub_100070FB0(a1, a2);
  }
  if (v8 >= 8 && v8 != 10)
  {
    *(_DWORD *)(a1 + 1912) = 0;
    double v9 = *a2;
    unsigned int v14 = 0;
    *(void *)std::string buf = &v14;
    uint64_t v10 = sub_100042490((uint64_t **)(a1 + 1888), &v14, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    goto LABEL_11;
  }
  return sub_100070FB0(a1, a2);
}

void sub_100EA1078(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_100EA1084(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100E9852C(a1);
  }
  *(unsigned char *)(a1 + 2074) = a2;
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022FFA18);
  }
  double v4 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = sub_10016BA10();
    *(_DWORD *)std::string buf = 1;
    double v6 = sub_10016BA54(v5, buf);
    *(_DWORD *)std::string buf = 134349312;
    double v9 = v6;
    __int16 v10 = 1026;
    int v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#fusion,mct,%{public}.3f,hasFitnessClient,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    sub_1005B5034();
    double v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusion::fitnessClientUpdate(BOOL)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void sub_100EA1280(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_100EA128C(uint64_t a1, char a2)
{
  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100E9852C(a1);
  }
  *(unsigned char *)(a1 + 2096) = a2;
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022FFA18);
  }
  double v4 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(unsigned __int8 *)(a1 + 2096);
    uint64_t v6 = *(void *)(a1 + 2104);
    uint64_t v7 = sub_10016BA10();
    *(_DWORD *)std::string buf = 1;
    double v8 = sub_10016BA54(v7, buf);
    uint64_t v9 = sub_10016BA10();
    double v10 = sub_10018202C(v9);
    *(_DWORD *)std::string buf = 67240960;
    *(_DWORD *)__int16 v27 = v5;
    *(_WORD *)&v27[4] = 2050;
    *(void *)&v27[6] = v6;
    *(_WORD *)&v27[14] = 2050;
    *(double *)&v27[16] = v8;
    *(_WORD *)&v27[24] = 2050;
    *(double *)&v27[26] = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#fusion, update WiFi AP association state,associated,%{public}d,last association time mct,%{public}.3f,now_mct,%{public}.3f,propagation_us,%{public}.3f", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    int v16 = *(unsigned __int8 *)(a1 + 2096);
    uint64_t v17 = *(void *)(a1 + 2104);
    double v18 = sub_1005B5034();
    uint64_t v19 = sub_10016BA10();
    LODWORD(v22) = 67240960;
    HIDWORD(v22) = v16;
    *(_WORD *)BOOL v23 = 2050;
    *(void *)&_OWORD v23[2] = v17;
    __int16 v24 = 2050;
    *(double *)__int16 v25 = v18;
    *(_WORD *)&v25[8] = 2050;
    *(void *)&unsigned char v25[10] = sub_10018202C(v19);
    int v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusion::associatedWiFiAPStateUpdate(BOOL)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  *(void *)(a1 + 2128) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 2112) = 0u;
  if (*(unsigned char *)(a1 + 2096))
  {
    uint64_t v11 = sub_10016BA10();
    *(_DWORD *)std::string buf = 1;
    *(double *)(a1 + 2104) = sub_10016BA54(v11, buf);
    *(_OWORD *)(a1 + 2112) = *(_OWORD *)(a1 + 992);
    sub_1005A72FC(*(void *)(a1 + 1696) + 232);
  }
  else
  {
    sub_100E9D7D0(*(void *)(a1 + 1696), (uint64_t)&v22);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    uint64_t v12 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = sub_10016BA10();
      *(_DWORD *)std::string buf = 1;
      double v14 = sub_10016BA54(v13, buf);
      double v15 = *(double *)(a1 + 2104);
      *(_DWORD *)std::string buf = 134350336;
      *(double *)__int16 v27 = v14;
      *(_WORD *)&v27[8] = 2050;
      *(double *)&unsigned char v27[10] = v15;
      *(_WORD *)&v27[18] = 2050;
      *(void *)&v27[20] = *(void *)v23;
      *(_WORD *)&v27[28] = 2050;
      *(void *)&v27[30] = *(void *)&v25[4];
      __int16 v28 = 2050;
      double v29 = v22;
      __int16 v30 = 2050;
      double v31 = v22 - v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#fusion,now_mct,%{public}.3f,WiFi AP disassociates,last association time mct,%{public}.3f,IODistanceMoved_m,%{public}.1f,IODistanceMovedInterval_s,%{public}.1f,lastIOTimestamp_mct,%{public}.3f,IOAgeSinceAssociated_s,%{public}.2f", buf, 0x3Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022FFA18);
      }
      sub_1005B5034();
      __int16 v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusion::associatedWiFiAPStateUpdate(BOOL)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
}

void sub_100EA1714(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_100EA1720(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100E9852C(a1);
  }
  *(unsigned char *)(a1 + 2075) = a2;
  uint64_t v4 = sub_10016BA10();
  *(_DWORD *)std::string buf = 1;
  *(double *)(a1 + 2080) = sub_10016BA54(v4, buf);
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022FFA18);
  }
  int v5 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a1 + 2080);
    int v7 = *(unsigned __int8 *)(a1 + 2075);
    int v8 = *(unsigned __int8 *)(a1 + 2076);
    *(_DWORD *)std::string buf = 134349568;
    uint64_t v11 = v6;
    __int16 v12 = 1026;
    int v13 = v7;
    __int16 v14 = 1026;
    int v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#fusion,mct_now,%{public}.3f,IsInsideVisit,%{public}d,wasLikelyOutOfAVisit,%{public}d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusion::feedInAVisit(const BOOL)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  *(unsigned char *)(a1 + 2076) = 0;
  sub_10095C69C(a1 + 2272, a2);
}

void sub_100EA1950(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_100EA195C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100E9852C(a1);
  }
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022FFA18);
  }
  uint64_t v2 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = sub_10016BA10();
    *(_DWORD *)std::string buf = 1;
    double v4 = sub_10016BA54(v3, buf);
    uint64_t v5 = *(void *)(a1 + 2080);
    int v6 = *(unsigned __int8 *)(a1 + 2075);
    int v7 = *(unsigned __int8 *)(a1 + 2076);
    *(_DWORD *)std::string buf = 134349824;
    double v10 = v4;
    __int16 v11 = 2050;
    uint64_t v12 = v5;
    __int16 v13 = 1026;
    int v14 = v6;
    __int16 v15 = 1026;
    int v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#fusion,mct_now,%{public}.3f,received LikelyOutOfAVisit,mct_lastInsideVisit,%{public}.3f,wasInsideVisit,%{public}d,wasLikelyOutOfAVisit,%{public}d", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    sub_1005B5034();
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusion::feedLikelyOutOfAVisit()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  *(unsigned char *)(a1 + 2076) = 1;
  sub_10095C870(a1 + 2272);
}

void sub_100EA1BA0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_100EA1BAC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 2160) != 4) {
    sub_100E9852C(a1);
  }
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022FFA18);
  }
  uint64_t v2 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = sub_10016BA10();
    *(_DWORD *)std::string buf = 1;
    double v4 = sub_10016BA54(v3, buf);
    uint64_t v5 = *(void *)(a1 + 2080);
    int v6 = *(unsigned __int8 *)(a1 + 2075);
    int v7 = *(unsigned __int8 *)(a1 + 2076);
    *(_DWORD *)std::string buf = 134349824;
    double v10 = v4;
    __int16 v11 = 2050;
    uint64_t v12 = v5;
    __int16 v13 = 1026;
    int v14 = v6;
    __int16 v15 = 1026;
    int v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#fusion,mct_now,%{public}.3f,received OutOfAVisit,mct_lastInsideVisit,%{public}.3f,wasInsideVisit,%{public}d,wasLikelyOutOfAVisit,%{public}d", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    sub_1005B5034();
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void cllcf::CLLCFusion::feedOutOfAVisit()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  *(_WORD *)(a1 + 2075) = 0;
  sub_10095CB98(a1 + 2272);
}

void sub_100EA1DF0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

long double sub_100EA1DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F1648((double *)(a1 + 1800), *(double *)(a2 + 24), *(double *)(a2 + 32), *(double *)(a3 + 24), *(double *)(a3 + 32), 0.0);
}

BOOL sub_100EA1E28(uint64_t a1, double *a2, double *a3, double *a4)
{
  double v28 = 0.0;
  double v29 = 0.0;
  int v7 = (double *)(a1 + 1800);
  if (a2[7] <= 0.0) {
    int v8 = a3;
  }
  else {
    int v8 = a2;
  }
  if (sub_1001BD27C(v7, &v29, &v28, a2[3], v8[6]))
  {
    double v13 = a2[3];
    *(double *)v10.i64 = a2[4] * 0.0174532925;
    double v14 = a3[3];
    *(double *)v12.i64 = a3[4] * 0.0174532925;
    v11.i64[0] = 0x400921FB54442D18;
    int8x16_t v26 = v11;
    if (fabs(*(double *)v10.i64) > 3.14159265)
    {
      v15.f64[0] = NAN;
      v15.f64[1] = NAN;
      double v22 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v15), v11, v10).i64;
      int8x16_t v24 = v12;
      *(double *)v9.i64 = fmod(*(double *)v10.i64 + v22, 6.28318531);
      int8x16_t v12 = v24;
      int8x16_t v11 = v26;
      *(double *)v10.i64 = *(double *)v9.i64 - v22;
    }
    if (fabs(*(double *)v12.i64) > *(double *)v11.i64)
    {
      v16.f64[0] = NAN;
      v16.f64[1] = NAN;
      double v23 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v16), v11, v12).i64;
      uint64_t v25 = v10.i64[0];
      *(double *)v9.i64 = fmod(*(double *)v12.i64 + v23, 6.28318531);
      v10.i64[0] = v25;
      int8x16_t v11 = v26;
      *(double *)v12.i64 = *(double *)v9.i64 - v23;
    }
    *(double *)v9.i64 = *(double *)v10.i64 - *(double *)v12.i64;
    if (vabdd_f64(*(double *)v10.i64, *(double *)v12.i64) > *(double *)v11.i64)
    {
      v17.f64[0] = NAN;
      v17.f64[1] = NAN;
      double v27 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v17), v11, v9).i64;
      *(double *)v9.i64 = fmod(*(double *)v9.i64 + v27, 6.28318531) - v27;
    }
    double v18 = a2[5] * a2[5] * 0.5 + a3[5] * a3[5] * 0.5;
    if (v18 != 0.0)
    {
      *a4 = sqrt(1.0 / v18 * ((v13 - v14) * 0.0174532925 * v29 * ((v13 - v14) * 0.0174532925 * v29))+ *(double *)v9.i64* 57.2957795* 0.0174532925* v28* (*(double *)v9.i64* 57.2957795* 0.0174532925* v28)* (1.0/ v18));
      return 1;
    }
    return 0;
  }
  if (qword_102419510 != -1) {
    dispatch_once(&qword_102419510, &stru_1022FFA18);
  }
  int v20 = qword_102419518;
  if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#Error, calc_dNdE failed.", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022FFA18);
    }
    __int16 v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL cllcf::CLLCFusion::computeInterHypothesisMahalanobisDistance(const LCFusionProviderLocation &, const LCFusionProviderLocation &, double &)", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
    return 0;
  }
  return result;
}

void sub_100EA2140(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_100EA214C(uint64_t a1, double *a2, char **a3, double **a4)
{
  a3[1] = *a3;
  a4[1] = *a4;
  double v4 = *(uint64_t **)(a1 + 240);
  if (v4 && a2[5] > 0.0)
  {
    uint64_t v41 = (uint64_t)(a3 + 2);
    uint64_t v42 = (uint64_t)(a4 + 2);
    __asm { FMOV            V1.2D, #-1.0 }
    long long v14 = xmmword_101D1C320;
    long long v43 = _Q1;
    do
    {
      __int16 v45 = off_10232A710;
      long long v46 = _Q1;
      long long v47 = v14;
      long long v48 = v14;
      long long v49 = _Q1;
      long long v50 = _Q1;
      unint64_t v51 = 0xBFF0000000000000;
      int v52 = 0;
      char v53 = 0;
      int v54 = 0;
      if (*((_DWORD *)v4 + 167))
      {
        uint64_t v15 = v4[6];
        if (v15)
        {
          if (*(unsigned char *)(*(void *)(v4[2] + 8 * ((v15 + v4[5] - 1) / 0x17uLL))
                        + 176 * ((v15 + v4[5] - 1) % 0x17uLL)
                        + 168))
          {
            int v16 = sub_100070DA0((uint64_t)(v4 + 7), (uint64_t)&v45);
            long long v14 = xmmword_101D1C320;
            _Q1 = v43;
            if (v16)
            {
              if (*(double *)&v47 > 0.0)
              {
                double v44 = 0.0;
                if (sub_100EA1E28(a1, a2, (double *)&v45, &v44))
                {
                  double v18 = a3[1];
                  unint64_t v17 = (unint64_t)a3[2];
                  if ((unint64_t)v18 >= v17)
                  {
                    int v20 = *a3;
                    uint64_t v21 = (v18 - *a3) >> 3;
                    unint64_t v22 = v21 + 1;
                    if ((unint64_t)(v21 + 1) >> 61) {
                      goto LABEL_46;
                    }
                    uint64_t v23 = v17 - (void)v20;
                    if (v23 >> 2 > v22) {
                      unint64_t v22 = v23 >> 2;
                    }
                    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v24 = v22;
                    }
                    if (v24)
                    {
                      uint64_t v25 = (char *)sub_1000DA54C(v41, v24);
                      int v20 = *a3;
                      double v18 = a3[1];
                    }
                    else
                    {
                      uint64_t v25 = 0;
                    }
                    int8x16_t v26 = &v25[8 * v21];
                    *(double *)int8x16_t v26 = v44;
                    uint64_t v19 = v26 + 8;
                    while (v18 != v20)
                    {
                      uint64_t v27 = *((void *)v18 - 1);
                      v18 -= 8;
                      *((void *)v26 - 1) = v27;
                      v26 -= 8;
                    }
                    *a3 = v26;
                    a3[1] = v19;
                    a3[2] = &v25[8 * v24];
                    if (v20) {
                      operator delete(v20);
                    }
                  }
                  else
                  {
                    *(double *)double v18 = v44;
                    uint64_t v19 = v18 + 8;
                  }
                  a3[1] = v19;
                }
                double v28 = sub_100EA1DFC(a1, (uint64_t)a2, (uint64_t)&v45);
                double v29 = v28;
                double v44 = v28;
                double v31 = a4[1];
                unint64_t v30 = (unint64_t)a4[2];
                if ((unint64_t)v31 >= v30)
                {
                  BOOL v33 = *a4;
                  uint64_t v34 = v31 - *a4;
                  unint64_t v35 = v34 + 1;
                  if ((unint64_t)(v34 + 1) >> 61) {
LABEL_46:
                  }
                    sub_1001D7FD4();
                  uint64_t v36 = v30 - (void)v33;
                  if (v36 >> 2 > v35) {
                    unint64_t v35 = v36 >> 2;
                  }
                  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v37 = v35;
                  }
                  if (v37)
                  {
                    uint64_t v38 = (char *)sub_1000DA54C(v42, v37);
                    BOOL v33 = *a4;
                    double v31 = a4[1];
                  }
                  else
                  {
                    uint64_t v38 = 0;
                  }
                  __int16 v39 = (double *)&v38[8 * v34];
                  double *v39 = v29;
                  __int16 v32 = v39 + 1;
                  while (v31 != v33)
                  {
                    uint64_t v40 = *((void *)v31-- - 1);
                    *((void *)v39-- - 1) = v40;
                  }
                  *a4 = v39;
                  a4[1] = v32;
                  a4[2] = (double *)&v38[8 * v37];
                  if (v33) {
                    operator delete(v33);
                  }
                }
                else
                {
                  *double v31 = v28;
                  __int16 v32 = v31 + 1;
                }
                long long v14 = xmmword_101D1C320;
                _Q1 = v43;
                a4[1] = v32;
              }
            }
          }
        }
      }
      double v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
}

void sub_100EA2464(uint64_t a1, double *a2, char **a3, char **a4)
{
  a3[1] = *a3;
  a4[1] = *a4;
  double v4 = *(uint64_t **)(a1 + 240);
  if (v4 && a2[5] > 0.0)
  {
    uint64_t v46 = (uint64_t)(a3 + 2);
    uint64_t v47 = (uint64_t)(a4 + 2);
    __asm { FMOV            V1.2D, #-1.0 }
    long long v14 = xmmword_101D1C320;
    long long v48 = _Q1;
    do
    {
      long long v50 = off_10232A710;
      long long v51 = _Q1;
      long long v52 = v14;
      long long v53 = v14;
      long long v54 = _Q1;
      long long v55 = _Q1;
      unint64_t v56 = 0xBFF0000000000000;
      int v57 = 0;
      char v58 = 0;
      int v59 = 0;
      if (*((_DWORD *)v4 + 167))
      {
        uint64_t v15 = v4[6];
        if (v15)
        {
          if (*(unsigned char *)(*(void *)(v4[2] + 8 * ((v15 + v4[5] - 1) / 0x17uLL))
                        + 176 * ((v15 + v4[5] - 1) % 0x17uLL)
                        + 168))
          {
            int v16 = sub_100070DA0((uint64_t)(v4 + 7), (uint64_t)&v50);
            long long v14 = xmmword_101D1C320;
            _Q1 = v48;
            if (v16)
            {
              if (*(double *)&v52 > 0.0)
              {
                double v49 = 0.0;
                if (sub_100EA1E28(a1, a2, (double *)&v50, &v49))
                {
                  double v17 = v49;
                  uint64_t v18 = v52;
                  int v20 = a3[1];
                  unint64_t v19 = (unint64_t)a3[2];
                  if ((unint64_t)v20 >= v19)
                  {
                    uint64_t v22 = (v20 - *a3) >> 4;
                    unint64_t v23 = v22 + 1;
                    if ((unint64_t)(v22 + 1) >> 60) {
                      goto LABEL_46;
                    }
                    uint64_t v24 = v19 - (void)*a3;
                    if (v24 >> 3 > v23) {
                      unint64_t v23 = v24 >> 3;
                    }
                    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v25 = v23;
                    }
                    if (v25) {
                      int8x16_t v26 = (char *)sub_1000C571C(v46, v25);
                    }
                    else {
                      int8x16_t v26 = 0;
                    }
                    uint64_t v27 = &v26[16 * v22];
                    *(double *)uint64_t v27 = v17;
                    *((void *)v27 + 1) = v18;
                    double v29 = *a3;
                    double v28 = a3[1];
                    unint64_t v30 = v27;
                    if (v28 != *a3)
                    {
                      do
                      {
                        *((_OWORD *)v30 - 1) = *((_OWORD *)v28 - 1);
                        v30 -= 16;
                        v28 -= 16;
                      }
                      while (v28 != v29);
                      double v28 = *a3;
                    }
                    uint64_t v21 = v27 + 16;
                    *a3 = v30;
                    a3[1] = v27 + 16;
                    a3[2] = &v26[16 * v25];
                    if (v28) {
                      operator delete(v28);
                    }
                  }
                  else
                  {
                    *(double *)int v20 = v49;
                    *((void *)v20 + 1) = v18;
                    uint64_t v21 = v20 + 16;
                  }
                  a3[1] = v21;
                }
                double v31 = sub_100EA1DFC(a1, (uint64_t)a2, (uint64_t)&v50);
                double v32 = v31;
                double v49 = v31;
                uint64_t v33 = v52;
                unint64_t v35 = (unint64_t)a4[1];
                unint64_t v34 = (unint64_t)a4[2];
                if (v35 >= v34)
                {
                  uint64_t v37 = (uint64_t)(v35 - (void)*a4) >> 4;
                  unint64_t v38 = v37 + 1;
                  if ((unint64_t)(v37 + 1) >> 60) {
LABEL_46:
                  }
                    sub_1001D7FD4();
                  uint64_t v39 = v34 - (void)*a4;
                  if (v39 >> 3 > v38) {
                    unint64_t v38 = v39 >> 3;
                  }
                  if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v40 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v40 = v38;
                  }
                  if (v40) {
                    uint64_t v41 = (char *)sub_1000C571C(v47, v40);
                  }
                  else {
                    uint64_t v41 = 0;
                  }
                  uint64_t v42 = &v41[16 * v37];
                  *(double *)uint64_t v42 = v32;
                  *((void *)v42 + 1) = v33;
                  double v44 = *a4;
                  long long v43 = a4[1];
                  __int16 v45 = v42;
                  if (v43 != *a4)
                  {
                    do
                    {
                      *((_OWORD *)v45 - 1) = *((_OWORD *)v43 - 1);
                      v45 -= 16;
                      v43 -= 16;
                    }
                    while (v43 != v44);
                    long long v43 = *a4;
                  }
                  uint64_t v36 = v42 + 16;
                  *a4 = v45;
                  a4[1] = v42 + 16;
                  a4[2] = &v41[16 * v40];
                  if (v43) {
                    operator delete(v43);
                  }
                }
                else
                {
                  *(double *)unint64_t v35 = v31;
                  *(void *)(v35 + 8) = v33;
                  uint64_t v36 = (char *)(v35 + 16);
                }
                long long v14 = xmmword_101D1C320;
                _Q1 = v48;
                a4[1] = v36;
              }
            }
          }
        }
      }
      double v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
}

void sub_100EA27B0(id a1)
{
  qword_102419518 = (uint64_t)os_log_create("com.apple.locationd.Position", "LCFusion");
}

uint64_t sub_100EA27E0(uint64_t a1, uint64_t a2)
{
  double v4 = *(void ***)(a1 + 8);
  uint64_t v5 = *(void ***)(a1 + 16);
  if (v5 == v4)
  {
    int v6 = (void *)(a1 + 40);
    uint64_t v5 = *(void ***)(a1 + 8);
  }
  else
  {
    int v6 = (void *)(a1 + 40);
    unint64_t v7 = *(void *)(a1 + 32);
    int v8 = &v4[v7 / 0x17];
    unint64_t v9 = (unint64_t)*v8;
    unint64_t v10 = (unint64_t)*v8 + 176 * (v7 % 0x17);
    unint64_t v11 = (unint64_t)v4[(*(void *)(a1 + 40) + v7) / 0x17] + 176 * ((*(void *)(a1 + 40) + v7) % 0x17);
    if (v10 != v11)
    {
      do
      {
        int8x16_t v12 = *(std::__shared_weak_count **)(v10 + 24);
        if (v12)
        {
          std::__shared_weak_count::__release_weak(v12);
          unint64_t v9 = (unint64_t)*v8;
        }
        v10 += 176;
        if (v10 - v9 == 4048)
        {
          unint64_t v13 = (unint64_t)v8[1];
          ++v8;
          unint64_t v9 = v13;
          unint64_t v10 = v13;
        }
      }
      while (v10 != v11);
      double v4 = *(void ***)(a1 + 8);
      uint64_t v5 = *(void ***)(a1 + 16);
    }
  }
  *int v6 = 0;
  unint64_t v14 = (char *)v5 - (char *)v4;
  if ((unint64_t)((char *)v5 - (char *)v4) >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v15 = *(void *)(a1 + 16);
      double v4 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v4;
      unint64_t v14 = v15 - (void)v4;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    uint64_t v16 = 11;
    goto LABEL_16;
  }
  if (v14 >> 3 == 2)
  {
    uint64_t v16 = 23;
LABEL_16:
    *(void *)(a1 + 32) = v16;
  }
  sub_100EA2948((void **)a1);
  uint64_t result = sub_100EA2AA0(a1, a2);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100EA2948(void **a1)
{
  if (a1[5])
  {
    sub_100A31F9C((uint64_t)a1, 0);
    sub_100A31FFC(a1, 0);
  }
  else
  {
    uint64_t v3 = a1[1];
    for (uint64_t i = (uint64_t)a1[2]; (void *)i != v3; a1[2] = (void *)i)
    {
      operator delete(*(void **)(i - 8));
      uint64_t v3 = a1[1];
      uint64_t i = (uint64_t)a1[2] - 8;
    }
    a1[4] = 0;
  }

  sub_100EA29CC(a1);
}

void sub_100EA29CC(void **a1)
{
  uint64_t v3 = a1[3];
  uint64_t v2 = (uint64_t)(a1 + 3);
  double v4 = a1[1];
  uint64_t v5 = a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (unsigned char *)*a1) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    unint64_t v10 = 0;
    unint64_t v7 = 0;
    goto LABEL_8;
  }
  unint64_t v7 = (char *)sub_1000DA54C(v2, v6);
  int v8 = a1[1];
  uint64_t v5 = a1[2];
  unint64_t v10 = &v7[8 * v9];
  uint64_t v11 = v5 - v8;
  if (v5 == v8)
  {
LABEL_8:
    unint64_t v14 = v5;
    goto LABEL_9;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 8 * (v11 >> 3);
  do
  {
    *(void *)&v7[v12] = *(void *)&v8[v12];
    v12 += 8;
  }
  while (v13 != v12);
  uint64_t v5 = a1[1];
  unint64_t v14 = a1[2];
LABEL_9:
  int64_t v15 = v14 - v5;
  uint64_t v16 = *a1;
  *a1 = v7;
  a1[1] = v7;
  a1[2] = &v7[v15];
  a1[3] = v10;
  if (v16)
  {
    operator delete(v16);
  }
}

uint64_t sub_100EA2AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != v5) {
    *(void *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  sub_100EA29CC((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

uint64_t sub_100EA2B10(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3 = (void *)result;
  unint64_t v4 = *(void *)(result + 32);
  unint64_t v5 = v4 + *(void *)(result + 40);
  uint64_t v6 = *(void *)(result + 8);
  uint64_t v7 = *(void *)(result + 16);
  int v8 = (void *)(v6 + 8 * (v5 / 0x17));
  if (v7 == v6) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *v8 + 176 * (v5 % 0x17);
  }
  if (v9 != a3)
  {
    uint64_t v10 = (a3 - *a2) >> 4;
    uint64_t v11 = 23 * (v8 - a2) + 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v9 - *v8) >> 4) - 0x2E8BA2E8BA2E8BA3 * v10;
    if (v11 >= 1)
    {
      uint64_t v12 = (void *)(v6 + 8 * (v4 / 0x17));
      if (v7 == v6) {
        unint64_t v13 = 0;
      }
      else {
        unint64_t v13 = *v12 + 176 * (v4 % 0x17);
      }
      if (a3 == v13) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = 23 * (a2 - v12) + 0x2E8BA2E8BA2E8BA3 * v10 - 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v13 - *v12) >> 4);
      }
      unint64_t v19 = v12;
      unint64_t v20 = v13;
      sub_100174054(&v19, v14);
      unint64_t v15 = v20;
      if (v20 != v9)
      {
        uint64_t v16 = v19;
        do
        {
          double v17 = *(std::__shared_weak_count **)(v15 + 24);
          if (v17) {
            std::__shared_weak_count::__release_weak(v17);
          }
          v15 += 176;
          if (v15 - *v16 == 4048)
          {
            unint64_t v18 = v16[1];
            ++v16;
            unint64_t v15 = v18;
          }
        }
        while (v15 != v9);
      }
      v3[5] -= v11;
      do
        uint64_t result = sub_100A31FFC(v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

void sub_100EA2CFC(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if (v5 % 0x17) {
    unint64_t v6 = v5 / 0x17 + 1;
  }
  else {
    unint64_t v6 = v5 / 0x17;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 / 0x17) {
    unint64_t v8 = v7 / 0x17;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 / 0x17)
  {
    for (a1[4] = v7 - 23 * v8; v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      double v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          double v29 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v28);
          double v31 = &v29[8 * (v28 >> 2)];
          double v32 = (uint64_t *)a1[1];
          uint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            uint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            unint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)unint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          uint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            uint64_t v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          unint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            uint64_t v3 = (char *)a1[1];
          }
          uint64_t v27 = &v3[-8 * (v24 >> 1)];
          uint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)uint64_t v3 = v18;
      uint64_t v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0xFD0uLL);
          sub_10017F0B4(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0xFD0uLL);
          sub_1002D02D8((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 22;
          }
          else {
            uint64_t v64 = 23;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - 23 * v8;
      if (v8)
      {
        double v66 = (char *)a1[2];
        do
        {
          double v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          double v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              uint64_t v79 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v78);
              long long v81 = &v79[8 * (v78 >> 2)];
              long long v82 = (uint64_t *)a1[1];
              double v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                double v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                long long v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)long long v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              double v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                double v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              double v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                double v66 = (char *)a1[1];
              }
              int v77 = &v66[-8 * (v74 >> 1)];
              double v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)double v66 = v69;
          double v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      double v91 = a1 + 3;
      if (v13) {
        unint64_t v15 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v13);
      }
      else {
        unint64_t v15 = 0;
      }
      uint64_t v38 = -23 * v8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        int v88 = operator new(0xFD0uLL);
        sub_1000DA434(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        unint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              double v49 = (char *)sub_1000DA54C((uint64_t)v91, v48);
              long long v51 = (uint64_t *)__p[1];
              unint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                unint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                long long v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)long long v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              unint64_t v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                unint64_t v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              __int16 v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                unint64_t v40 = (char *)__p[1];
              }
              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              unint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)unint64_t v40 = *v39;
          unint64_t v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      int v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1002D03F8((uint64_t)__p, v57);
      }
      int v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] += v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_100EA3250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EA32C4(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x40;
  unint64_t v4 = v2 - 64;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    unint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  double v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100EA3590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_100EA35DC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_100EA3658(result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8 - 6);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100EA363C(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100EA3658(void *a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    sub_1001D7FD4();
  }
  uint64_t result = (char *)sub_10021D4B8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

uint64_t **sub_100EA36B0(uint64_t **a1, double *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    double v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        double v10 = *((double *)v6 + 4);
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = (uint64_t *)*v6;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = (uint64_t *)v6[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x78uLL);
    void v11[4] = **a4;
    *((_OWORD *)v11 + 3) = 0u;
    *((_OWORD *)v11 + 4) = 0u;
    void v11[14] = 0;
    double v11[5] = 0xBFF0000000000000;
    v11[7] = 0xBFF0000000000000;
    *((_OWORD *)v11 + 5) = 0u;
    *((_OWORD *)v11 + 6) = 0u;
    *((unsigned char *)v11 + 112) = 1;
    sub_1000EDF90(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_100EA3794(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022FFA48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100EA37B4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022FFA48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100EA3808(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

double sub_100EA3830(uint64_t a1)
{
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_OWORD *)(a1 + 40) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 56) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 80) = _Q0;
  *(_OWORD *)(a1 + 96) = _Q0;
  *(void *)(a1 + 112) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)a1 = off_1022FFA98;
  *(void *)(a1 + 152) = 0xBFF0000000000000;
  double result = 0.0;
  *(_OWORD *)(a1 + 160) = xmmword_101D94410;
  *(_DWORD *)(a1 + 176) = 0;
  return result;
}

void sub_100EA3894()
{
}

void sub_100EA38A8(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void ***)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10003E950(v2 + 5);
    }
    operator delete(v2);
  }
}

uint64_t *sub_100EA3900(uint64_t **a1, double *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    double v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        double v10 = *((double *)v6 + 4);
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = (uint64_t *)*v6;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = (uint64_t *)v6[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x38uLL);
    void v11[4] = **a4;
    double v11[5] = 0;
    v11[6] = 0;
    sub_1000EDF90(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

double sub_100EA39C4@<D0>(void *a1@<X8>)
{
  unint64_t v2 = (char *)operator new(0xC0uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)unint64_t v2 = off_1022FFB10;
  double result = 0.0;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *((_OWORD *)v2 + 2) = _Q1;
  *((_OWORD *)v2 + 3) = 0u;
  *((void *)v2 + 8) = 0xBFF0000000000000;
  *((void *)v2 + 10) = 0xBFF0000000000000;
  *(_OWORD *)(v2 + 104) = _Q1;
  *(_OWORD *)(v2 + 120) = _Q1;
  *((void *)v2 + 17) = 0xBFF0000000000000;
  *((void *)v2 + 3) = off_10232A780;
  *((_DWORD *)v2 + 41) = -1082130432;
  *((void *)v2 + 21) = 0;
  *((void *)v2 + 22) = 0;
  *((_DWORD *)v2 + 46) = 0;
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_100EA3A74(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022FFB10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100EA3A94(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022FFB10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100EA3AE8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100EA3B10(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022FFB60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100EA3B30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022FFB60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100EA3B84(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t **sub_100EA3BAC(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  double v8 = a1 + 1;
  unint64_t v9 = a1 + 1;
  if (v6)
  {
    int v10 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        int v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11) {
          break;
        }
        unint64_t v6 = *v9;
        double v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        double v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v12 = (uint64_t *)operator new(0x2F8uLL);
    v14[1] = v7;
    *((_DWORD *)v12 + 8) = **a4;
    bzero(v12 + 5, 0x2D0uLL);
    sub_1008A93D4((uint64_t)(v12 + 5));
    char v15 = 1;
    sub_1000EDF90(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    sub_100EA3CA8((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void sub_100EA3CA8(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1008A9614(v2 + 5);
    }
    operator delete(v2);
  }
}

void sub_100EA3D00(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022FFBB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100EA3D20(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022FFBB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100EA3D74(void *a1, _DWORD *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 1;
      }
      uint64_t v17 = (char *)sub_10017EA34(a1[4], v16);
      uint64_t v19 = &v17[v16 & 0xFFFFFFFFFFFFFFFCLL];
      int64_t v20 = (int *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFFCLL];
        uint64_t v22 = 4 * (v21 >> 2);
        uint64_t v23 = &v17[v16 & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
          int v24 = *v20++;
          *(_DWORD *)uint64_t v23 = v24;
          v23 += 4;
          v22 -= 4;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[4 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 2;
      BOOL v8 = v6 >> 2 < -1;
      uint64_t v9 = (v6 >> 2) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-4 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-4 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      char v15 = &v4[4 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
    }
  }
  *(_DWORD *)uint64_t v4 = *a2;
  a1[2] = v4 + 4;
}

uint64_t **sub_100EA3E84(uint64_t **a1, double *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    double v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        double v10 = *((double *)v6 + 4);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = (uint64_t *)*v6;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = (uint64_t *)v6[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (char *)operator new(0xB0uLL);
    *((void *)v11 + 4) = **a4;
    *((void *)v11 + 21) = 0;
    *(_OWORD *)(v11 + 152) = 0u;
    *(_OWORD *)(v11 + 136) = 0u;
    *(_OWORD *)(v11 + 120) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    sub_1000EDF90(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_100EA3F6C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D94490;
      v0[3] = unk_101D944A0;
      v0[4] = xmmword_101D944B0;
      v0[0] = xmmword_101D94470;
      v0[1] = unk_101D94480;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_100EA404C(_Unwind_Exception *a1)
{
}

void *sub_100EA4064(void *a1, int a2)
{
  sub_100134750(__p, "");
  sub_100EA4194((uint64_t)a1, "MaxMetsProcessingHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_1022FFC30;
  a1[9] = off_1022FFCE8;
  sub_100F03BA0(a1 + 43, 0, 0);
  sub_100F03BA0(a1 + 45, 0, 0);
  sub_100F03BA0(a1 + 47, 0, 0);
  (*(void (**)(void *))(*a1 + 112))(a1);
  return a1;
}

void sub_100EA4168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EA4194(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 8));
  *uint64_t v12 = &off_1022B2C68;
  *(void *)a1 = off_1022FFEC8;
  *(void *)(a1 + 72) = off_1022FFF70;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_1022FFEC8;
  *(void *)(a1 + 72) = off_1022FFF70;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 264) = 12000;
  *(void *)(a1 + 272) = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 280));
  *(void *)(a1 + 280) = &off_1022B2C68;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_100EA45A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  void *v27 = v30;
  sub_1003BE1F8(v31);
  sub_1003BE294(v29);
  sub_1011F8AE0(v28);
  void *v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_100EA4638()
{
}

void *sub_100EA4640(void *a1)
{
  *a1 = off_1022FFEC8;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_1022FFF70;
  a1[34] = off_1022B2C20;
  sub_1003BE1F8(a1 + 35);
  sub_1003BE294(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022B2C20;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_100EA4704(uint64_t a1)
{
  return sub_100EA4640((void *)(a1 - 72));
}

void sub_100EA470C(void *a1)
{
  sub_100EA4640(a1);

  operator delete();
}

void sub_100EA4744(uint64_t a1)
{
  sub_100EA4640((void *)(a1 - 72));

  operator delete();
}

uint64_t sub_100EA4780(uint64_t *a1, uint64_t a2)
{
  if (*(double *)(*(void *)(a2 + 8) - 16) != 1.79769313e308 || !sub_100082064(a1 + 9)) {
    return -1;
  }
  sub_10002B640(a1[10]);
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100082068(a1 + 43, &v13);
  uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(v13);
  if (sub_100055D58(v5, 1, Current - *(double *)(*(void *)(a2 + 8) - 24)))
  {
    uint64_t v6 = a1[10];
    uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(v13);
    sub_10001FEB0(v6, v7);
    uint64_t v8 = (*(int (**)(uint64_t *))(*a1 + 152))(a1);
  }
  else
  {
    uint64_t v8 = -1;
  }
  sub_100028FB4(a1[10]);
  uint64_t v9 = a1[10];
  if (*(uint64_t *)(v9 + 88) <= 0) {
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v10 = *(void *)(v9 + 88);
  }
  sub_10003CC68(v9, v10);
  uint64_t v11 = v13;
  uint64_t v13 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  return v8;
}

void sub_100EA48BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EA48D8(uint64_t a1, uint64_t a2)
{
  return sub_100EA4780((uint64_t *)(a1 - 72), a2);
}

uint64_t sub_100EA48E0(uint64_t a1, void *a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    a2[1] = *a2;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from MaxMetsProcessingHistory ORDER BY startTime ASC");
  }
  return result;
}

void sub_100EA4AD0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EA4B10(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)a2 = sqlite3_column_int(v6, 0);
  uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  uint64_t v8 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v8, 2);
  uint64_t v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 24) = sqlite3_column_double(v9, 3);
  uint64_t v10 = (sqlite3_stmt *)sub_10014D19C(*a1);
  double v11 = sqlite3_column_double(v10, 4);
  uint64_t result = 0;
  *(double *)(a2 + 32) = v11;
  return result;
}

uint64_t sub_100EA4BCC(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM MaxMetsProcessingHistory");
  }
  return 0xFFFFFFFFLL;
}

void sub_100EA4C88(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EA4CC4(uint64_t a1)
{
  return sub_100EA4BCC(a1 - 72);
}

uint64_t sub_100EA4CCC(uint64_t *a1)
{
  uint64_t result = sub_10014C3C0(a1[10]);
  if (result)
  {
    sub_100EA4D60((uint64_t)a1);
    sub_1005F7B0C(a1[10], "MaxMetsProcessingHistory", (const char **)&off_1022FFD78, (const std::string::value_type **)&off_102475140, 0);
    a1[43] = sub_100601D1C(a1[10], (uint64_t)"DELETE FROM MaxMetsProcessingHistory WHERE endTime < ?");
    a1[44] = v3;
    a1[45] = sub_100601D1C(a1[10], (uint64_t)"SELECT * FROM MaxMetsProcessingHistory ORDER BY id DESC LIMIT 1");
    a1[46] = v4;
    uint64_t result = sub_100601D1C(a1[10], (uint64_t)"UPDATE MaxMetsProcessingHistory SET startTime = ?, endTime = ?, maxMets = ?, lastUpdateTime = ? WHERE id = ?");
    a1[47] = result;
    a1[48] = v5;
  }
  return result;
}

uint64_t sub_100EA4D60(uint64_t a1)
{
  uint64_t result = sub_1005F93E4(*(void *)(a1 + 80), "MaxMetsProcessingHistory");
  if (result)
  {
    uint64_t v3 = "lastUpdateTime";
    int v4 = 5;
    __int16 v5 = 0;
    char v6 = 0;
    char v7 = 0;
    sub_1005FEC4C(*(void *)(a1 + 80), "MaxMetsProcessingHistory", (uint64_t)"lastUpdateTime", (uint64_t)&v3);
  }
  return result;
}

void sub_100EA5204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a19);
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
  }
  sub_101A129A8((uint64_t)&a57);
  _Unwind_Resume(a1);
}

uint64_t sub_100EA52AC(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM MaxMetsProcessingHistory");
  }
  return result;
}

void sub_100EA535C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EA5374(uint64_t a1)
{
  return sub_100EA52AC(a1 - 72);
}

uint64_t sub_100EA537C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10014D518(a1[10], (uint64_t)"DELETE FROM MaxMetsProcessingHistory WHERE startTime > ?");
  }
  return result;
}

void sub_100EA5478(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EA5490(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"UPDATE MaxMetsProcessingHistory SET startTime = startTime + ?, endTime = endTime + ?, lastUpdateTime = lastUpdateTime + ?");
  }
  return result;
}

void sub_100EA5574(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EA558C(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"INSERT INTO MaxMetsProcessingHistory (startTime, endTime, maxMets, lastUpdateTime) VALUES (?, ?, ?, ?)");
  }
  return result;
}

void sub_100EA5688(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EA56A0()
{
  return 0;
}

uint64_t sub_100EA56A8(uint64_t a1, uint64_t a2)
{
  if (!sub_100082064(a1 + 72)) {
    return 2;
  }
  sub_100082068((void *)(a1 + 360), &v10);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v5 = sub_100EA4B10(&v10, a2);
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022FFE98);
    }
    char v6 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "MaxMetsProcessingRecorderDb: failed to prepare getMostRecent #InvalidPreparedSQLStatement", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022FFE98);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CLActivityDB::ActivityCode CLMaxMetsProcessingRecorderDb::getMostRecentRecordUL(MaxMetsProcessing &) const", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    uint64_t v5 = 2;
  }
  uint64_t v7 = v10;
  uint64_t v10 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (!v4) {
    return 2;
  }
  return v5;
}

void sub_100EA58B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EA58FC(uint64_t a1, void *a2)
{
  if (!sub_1005F9734(*(void *)(a1 + 80), (char *)a2))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022FFFB0);
    }
    uint64_t v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022FFFB0);
      }
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      int64_t v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<MaxMetsProcessing>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = MaxMetsProcessing, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", (const char *)v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    memset(__p, 0, 24);
    sub_100134750(buf, (char *)a2);
    uint64_t v5 = std::string::append(buf, "AutoIncr");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t v22 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v21 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_100134750(buf, (char *)a2);
    uint64_t v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_10002B640(*(void *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v8 = HIBYTE(__p[2]);
    }
    else {
      size_t v8 = (size_t)__p[1];
    }
    uint64_t v9 = buf;
    sub_1001110E4((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v22 >= 0) {
      double v11 = v21;
    }
    else {
      double v11 = (void **)v21[0];
    }
    if (v22 >= 0) {
      std::string::size_type v12 = HIBYTE(v22);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v21[1];
    }
    uint64_t v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    int64_t v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v14;
    __p[1] = v23.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v23.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      char v15 = HIBYTE(__p[2]);
      int64_t v14 = __p[0];
    }
    if (v15 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)v14;
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)v16);
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = *(void *)(v17 + 88);
  }
  sub_10003CC68(v17, v18);
  return 0;
}

void sub_100EA6B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100EA6E88(void *a1)
{
  uint64_t v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17[0]) < 0)
  {
    uint64_t v10 = v16[1];
    operator delete(v16[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v16);
        uint64_t v4 = sub_100132EFC(v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0) {
          uint64_t v5 = __p;
        }
        else {
          uint64_t v5 = (void **)__p[0];
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v6 = v14;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        uint64_t v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((v14 & 0x80u) == 0) {
          uint64_t v9 = __p;
        }
        else {
          uint64_t v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17[0]))
  {
    goto LABEL_3;
  }
  sub_101A92BB0(v3);
  uint64_t v15 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v16
  v17[0] = v11;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_100EA72D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_100EA7354(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_100EA9280(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022FFFB0);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)&void v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022FFFB0);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)std::string buf = 134349056;
      *(void *)uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022FFFB0);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<MaxMetsProcessing>::setDatabaseAccessible() [T = MaxMetsProcessing, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_100EA7AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_100EA7B08(uint64_t a1, long long *a2, char a3)
{
  v31[0] = (id)os_transaction_create();
  v31[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v31);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  int v6 = (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 104))(a1, v29);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022FFFB0);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022FFFB0);
        }
        LOWORD(v32) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<MaxMetsProcessing>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = MaxMetsProcessing, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *((double *)a2 + 1);
    double v8 = v30;
    double v9 = v7 - v30;
    if (v7 - v30 < 0.0) {
      double v9 = -(v7 - v30);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022FFFB0);
      }
      uint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *((void *)a2 + 1);
        *(_DWORD *)std::string buf = 134349312;
        double v37 = v30;
        __int16 v38 = 2050;
        uint64_t v39 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022FFFB0);
        }
        uint64_t v23 = *((void *)a2 + 1);
        int v32 = 134349312;
        double v33 = v30;
        __int16 v34 = 2050;
        uint64_t v35 = v23;
        int v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<MaxMetsProcessing>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = MaxMetsProcessing, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
      CLWriteStackshot();
      double v7 = *((double *)a2 + 1);
      double v8 = v30;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022FFFB0);
        }
        std::string::size_type v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *((double *)a2 + 1);
          *(_DWORD *)std::string buf = 134217984;
          double v37 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022FFFB0);
          }
          double v25 = *((double *)a2 + 1);
          int v32 = 134217984;
          double v33 = v25;
          uint64_t v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<MaxMetsProcessing>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = MaxMetsProcessing, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v26);
          if (v26 != (char *)buf) {
            free(v26);
          }
        }
        (*(void (**)(uint64_t, long long *))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v28 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_1022FFFB0);
        double v17 = v28;
      }
      double v18 = v16 - v17;
      uint64_t v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 134217984;
        double v37 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022FFFB0);
        }
        int v32 = 134217984;
        double v33 = v18;
        uint64_t v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<MaxMetsProcessing>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = MaxMetsProcessing, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, char *, uint64_t, long long *))(*(void *)a1 + 144))(a1, v29, a1 + 224, a2);
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *a2;
  long long v21 = a2[1];
  *(void *)(a1 + 256) = *((void *)a2 + 4);
  *(_OWORD *)(a1 + 224) = v20;
  *(_OWORD *)(a1 + 240) = v21;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v31);
}

void sub_100EA8310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EA833C(uint64_t a1)
{
  return sub_100EA7354(a1 - 72);
}

void sub_100EA8344(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100EA8374(void *a1, void *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A92D20(v4);
    sub_1001D7FD4();
  }
  std::string::size_type v12 = v15[1];
  operator delete(v15[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v15);
    int v6 = sub_100132EFC(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_100EA877C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  sub_101A129A8((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_100EA87FC(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101A92E90(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  std::string::size_type v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_100EA8B70(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A93000(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_100EA8E9C(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A93170(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_100EA91C0(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100EA91F0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_100EA9280(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_100EA9300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EA931C(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_100EA934C(uint64_t a1, char *a2)
{
  sub_100134750(v4, a2);
  sub_100134750(&__p, "");
  sub_100EA93FC(a1, (uint64_t)v4);
}

void sub_100EA93C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EA93FC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)uint64_t v2 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  operator new();
}

void sub_100EA9504(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A932E0(&a15, a1, a2, v21 - 48);
  int v24 = *(_Unwind_Exception **)(v21 - 48);
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(v24);
}

void sub_100EA9558(uint64_t a1, long long *a2, int a3, uint64_t *a4, long long *a5)
{
  *(unsigned char *)a1 = 0;
  long long v8 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v8;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 40) = 0x100000002;
  double v9 = (void *)(a1 + 8);
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 49) = a3;
  if (*((char *)a5 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 56), *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v10 = *a5;
    *(void *)(a1 + 72) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 56) = v10;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v11 = *a4;
  *a4 = 0;
  *(void *)(a1 + 96) = v11;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102300040);
  }
  uint64_t v12 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    unsigned __int8 v13 = v9;
    if (*(char *)(a1 + 31) < 0) {
      unsigned __int8 v13 = (void *)*v9;
    }
    buf[0] = 136315650;
    *(void *)&buf[1] = v13;
    __int16 v19 = 1024;
    int v20 = a3;
    __int16 v21 = 1024;
    int v22 = 1;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Creating managed location database %s (count triggers %d, use cache %d)", (uint8_t *)buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102300040);
    }
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLManagedLocationDatabase<CLLteCellLocationDatabase, CLTelephonyService_Type::LteCell>::CLManagedLocationDatabase(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLLteCellLocationDatabase, DataType = CLTelephonyService_Type::LteCell]", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 96) + 16))(*(void *)(a1 + 96)))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102300040);
    }
    unsigned __int8 v14 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = v9;
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v15 = (void *)*v9;
      }
      buf[0] = 136315138;
      *(void *)&buf[1] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Data protection is enabled, creating in-memory database for table %s", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102300040);
      }
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLManagedLocationDatabase<CLLteCellLocationDatabase, CLTelephonyService_Type::LteCell>::CLManagedLocationDatabase(std::string, BOOL, std::unique_ptr<IExternal>, std::string) [Database = CLLteCellLocationDatabase, DataType = CLTelephonyService_Type::LteCell]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    sub_100EA9D28(a1, a3);
  }
  sub_1007013FC();
}

void sub_100EA9C74(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *(void *)(v1 + 96);
  *(void *)(v1 + 96) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v2);
  }
  uint64_t v6 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EA9D28(uint64_t a1, char a2)
{
  sub_100134750(__p, "");
  char v6 = 0;
  uint64_t v5 = 0;
  char v7 = a2;
  if (SHIBYTE(v4) < 0)
  {
    sub_1000DC48C(v8, __p[0], (unint64_t)__p[1]);
    uint64_t v9 = 0;
    if (SHIBYTE(v4) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)long long v8 = *(_OWORD *)__p;
    int v8[2] = v4;
    uint64_t v9 = 0;
  }
  sub_1007013FC();
}

void sub_100EA9DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EA9E40(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100EA9E70(uint64_t a1)
{
  if (*(void *)(a1 + 88)) {
    sub_101A93654();
  }
  if (*(char *)(a1 + 31) >= 0) {
    size_t v2 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    size_t v2 = *(void *)(a1 + 16);
  }
  uint64_t v3 = __p;
  sub_1001110E4((uint64_t)__p, v2 + 17);
  if (v10 < 0) {
    uint64_t v3 = (void **)__p[0];
  }
  if (v2)
  {
    if (*(char *)(a1 + 31) >= 0) {
      uint64_t v4 = (const void *)(a1 + 8);
    }
    else {
      uint64_t v4 = *(const void **)(a1 + 8);
    }
    memmove(v3, v4, v2);
  }
  strcpy((char *)v3 + v2, "-InMemoryDatabase");
  int v5 = v10;
  char v6 = (void **)__p[0];
  char v7 = [CLOSTransaction alloc];
  if (v5 >= 0) {
    long long v8 = __p;
  }
  else {
    long long v8 = v6;
  }
  *(void *)(a1 + 88) = [(CLOSTransaction *)v7 initWithDescription:v8];
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100EA9F78(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100EA9FA8(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, float *a7@<X8>)
{
  long long v8 = (const float *)&dword_102482008;
  int64x2_t v9 = (int64x2_t)xmmword_101D94800;
  int64x2_t v10 = (int64x2_t)xmmword_101D07560;
  float32x4_t v11 = vld1q_dup_f32(v8);
  uint64_t v12 = -512;
  int64x2_t v13 = vdupq_n_s64(4uLL);
  do
  {
    *(float32x4_t *)&v103[v12 + 1024] = vmulq_f32(v11, vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v10)), vcvtq_f64_u64((uint64x2_t)v9)));
    float32x4_t v14 = vmulq_f32(*(float32x4_t *)(a1 + v12 + 512), *(float32x4_t *)(a1 + v12 + 512));
    *(float32x4_t *)&v103[v12 + 512] = v14;
    float32x4_t v15 = vmulq_f32(*(float32x4_t *)(a2 + v12 + 512), *(float32x4_t *)(a2 + v12 + 512));
    float32x4_t v16 = vmulq_f32(*(float32x4_t *)(a3 + v12 + 512), *(float32x4_t *)(a3 + v12 + 512));
    *(float32x4_t *)&v103[v12] = vaddq_f32(v15, v16);
    *(float32x4_t *)&v100[v12 + 1024] = vaddq_f32(vaddq_f32(v14, v15), v16);
    *(float32x4_t *)&v100[v12 + 512] = vaddq_f32(vaddq_f32(vmulq_f32(*(float32x4_t *)(a4 + v12 + 512), *(float32x4_t *)(a4 + v12 + 512)), vmulq_f32(*(float32x4_t *)(a5 + v12 + 512), *(float32x4_t *)(a5 + v12 + 512))), vmulq_f32(*(float32x4_t *)(a6 + v12 + 512), *(float32x4_t *)(a6 + v12 + 512)));
    int64x2_t v9 = vaddq_s64(v9, v13);
    int64x2_t v10 = vaddq_s64(v10, v13);
    v12 += 16;
  }
  while (v12);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482018, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482018))
  {
    qword_102482010 = vcvtas_u32_f32(sub_100D6A9FC(50, 0x80uLL, 0.59));
    __cxa_guard_release(&qword_102482018);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482028, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482028))
  {
    qword_102482020 = vcvtas_u32_f32(sub_100D6A9FC(50, 0x80uLL, 4.3));
    __cxa_guard_release(&qword_102482028);
  }
  unint64_t v17 = qword_102482010;
  unint64_t v18 = qword_102482020;
  if (qword_102482010 <= (unint64_t)qword_102482020)
  {
    float v20 = 0.0;
    unint64_t v21 = qword_102482010;
    do
      float v20 = v20 + v101[v21++];
    while (v21 <= qword_102482020);
    *a7 = v20;
    float v19 = 0.0;
    if (v20 > 0.0)
    {
      do
        float v19 = v19 + *(float *)&v103[4 * v17++];
      while (v17 <= v18);
      float v19 = v19 / v20;
    }
  }
  else
  {
    *a7 = 0.0;
    float v19 = 0.0;
  }
  a7[1] = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482038, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482038))
  {
    qword_102482030 = vcvtas_u32_f32(sub_100D6A9FC(50, 0x80uLL, 0.39));
    __cxa_guard_release(&qword_102482038);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482048, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482048))
  {
    qword_102482040 = vcvtas_u32_f32(sub_100D6A9FC(50, 0x80uLL, 3.12));
    __cxa_guard_release(&qword_102482048);
  }
  unint64_t v22 = sub_100EAA93C(qword_102482030, qword_102482040, (uint64_t)v101, 128);
  unint64_t v23 = v22 - 1;
  unint64_t v24 = v22 + 1;
  if (v22 - 1 <= v22 + 1)
  {
    float v27 = 0.0;
    unint64_t v28 = v22 - 1;
    do
      float v27 = v27 + v101[v28++];
    while (v28 <= v24);
    float v26 = 0.0;
    float v25 = 0.0;
    if (v27 > 0.0)
    {
      float v29 = 0.0;
      unint64_t v30 = v22 - 1;
      do
      {
        float v29 = v29 + (float)(*(float *)&v103[4 * v30 + 512] * v101[v30]);
        ++v30;
      }
      while (v30 <= v24);
      float v25 = v29 / v27;
    }
    a7[2] = v25;
    unint64_t v31 = v22 - 1;
    do
      float v26 = v26 + v101[v31++];
    while (v31 <= v24);
  }
  else
  {
    a7[2] = 0.0;
    float v25 = 0.0;
    float v26 = 0.0;
  }
  a7[3] = v26;
  float v32 = (float)(v25 + v25) / *(float *)&dword_102482008;
  float v33 = (float)((float)(v25 * 3.0) * 0.5) / *(float *)&dword_102482008;
  unint64_t v34 = vcvtas_u32_f32(v32);
  unint64_t v35 = v34 - 1;
  unint64_t v36 = v34 + 1;
  unint64_t v37 = v34;
  if (v34 - 1 <= v34 + 1)
  {
    unint64_t v38 = v34 - 1;
    unint64_t v37 = v34;
    do
    {
      if (v101[v38] > v101[v37]) {
        unint64_t v37 = v38;
      }
      ++v38;
    }
    while (v38 <= v36);
  }
  float v39 = (float)(v22 + 3);
  unint64_t v40 = vcvtas_u32_f32(v33);
  unint64_t v41 = v40 - 1;
  unint64_t v42 = v40 + 1;
  unint64_t v43 = v40;
  if (v40 - 1 <= v40 + 1)
  {
    unint64_t v44 = v40 - 1;
    unint64_t v43 = v40;
    do
    {
      if (v101[v44] > v101[v43]) {
        unint64_t v43 = v44;
      }
      ++v44;
    }
    while (v44 <= v42);
  }
  float v45 = 0.0;
  float v46 = 0.0;
  if (v32 > v39)
  {
    unint64_t v47 = v37 - 1;
    for (unint64_t i = v37 + 1; v47 <= i; ++v47)
      float v46 = v46 + v101[v47];
  }
  if (v33 > v39)
  {
    unint64_t v49 = v43 - 1;
    unint64_t v50 = v43 + 1;
    if (v49 <= v50)
    {
      float v45 = 0.0;
      do
        float v45 = v45 + v101[v49++];
      while (v49 <= v50);
    }
  }
  float v51 = 0.0;
  if (v26 > 0.0)
  {
    if (v46 > v45) {
      float v45 = v46;
    }
    float v51 = v45 / v26;
  }
  a7[4] = v51;
  if (v23 <= v24)
  {
    unint64_t v52 = v22;
    do
    {
      if (*(float *)&v100[4 * v23] > *(float *)&v100[4 * v52]) {
        unint64_t v52 = v23;
      }
      ++v23;
    }
    while (v23 <= v24);
    unint64_t v23 = v52 - 1;
    unint64_t v24 = v52 + 1;
  }
  for (float j = 0.0; v23 <= v24; ++v23)
    float j = j + *(float *)&v100[4 * v23];
  for (a7[5] = j; v35 <= v36; ++v35)
  {
    if (*(float *)&v100[4 * v35] > *(float *)&v100[4 * v34]) {
      unint64_t v34 = v35;
    }
  }
  for (; v41 <= v42; ++v41)
  {
    if (*(float *)&v100[4 * v41] > *(float *)&v100[4 * v40]) {
      unint64_t v40 = v41;
    }
  }
  float v54 = 0.0;
  BOOL v55 = v32 > v39;
  float v56 = 0.0;
  if (v55)
  {
    for (unint64_t k = v34 - 1; k <= v34 + 1; ++k)
      float v56 = v56 + *(float *)&v100[4 * k];
  }
  if (v33 > v39)
  {
    unint64_t v58 = v40 - 1;
    if (v40 - 1 <= v40 + 1)
    {
      float v54 = 0.0;
      do
        float v54 = v54 + *(float *)&v100[4 * v58++];
      while (v58 <= v40 + 1);
    }
  }
  float v59 = 0.0;
  float v60 = 0.0;
  if (j > 0.0)
  {
    if (v56 <= v54) {
      float v56 = v54;
    }
    float v60 = v56 / j;
  }
  unint64_t v61 = v22 + 2;
  a7[6] = v60;
  for (uint64_t m = 1; m != 128; ++m)
    float v59 = v59 + v101[m];
  float v63 = 0.0;
  float v64 = v102 + 0.0;
  a7[7] = v59;
  a7[8] = v64;
  float v65 = v64 / v59;
  if (v59 <= 0.0) {
    float v65 = 0.0;
  }
  a7[9] = v65;
  float v66 = 0.0;
  if (v59 > 0.0) {
    float v66 = *a7 / v59;
  }
  a7[10] = v66;
  for (uint64_t n = 4; n != 512; n += 4)
    float v63 = v63 + *(float *)&v100[n + 512];
  float v68 = v26 / v59;
  float v69 = 0.0;
  if (v59 <= 0.0) {
    float v68 = 0.0;
  }
  float v70 = v26 / v63;
  if (v63 <= 0.0) {
    float v70 = 0.0;
  }
  a7[13] = v63;
  a7[14] = v70;
  a7[15] = v68;
  if (v61 >= 0xFF) {
    unint64_t v61 = 255;
  }
  float v71 = *(float *)&v100[4 * v22 + 1016];
  float v72 = 0.0;
  if (v71 > 0.0) {
    float v72 = v101[v22] / v71;
  }
  float v73 = v101[v61];
  if (v73 > 0.0) {
    float v69 = v101[v22] / v73;
  }
  if (v72 >= v69) {
    float v72 = v69;
  }
  a7[11] = v72;
  float v74 = 0.0;
  for (iunint64_t i = 4; ii != 512; ii += 4)
    float v74 = v74 + *(float *)&v100[ii];
  float v76 = v74 / v59;
  if (v59 <= 0.0) {
    float v76 = 0.0;
  }
  a7[12] = v76;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482058, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482058))
  {
    qword_102482050 = vcvtas_u32_f32(sub_100D6A9FC(50, 0x80uLL, 10.0));
    __cxa_guard_release(&qword_102482058);
  }
  unint64_t v77 = qword_102482050;
  uint64_t v78 = qword_102482050;
  if ((unint64_t)qword_102482050 <= 0x7E)
  {
    uint64_t v79 = &v101[qword_102482050];
    uint64_t v80 = qword_102482050;
    uint64_t v81 = qword_102482050;
    do
    {
      float v82 = *v79;
      if (*v79 <= *(v79 - 1) || v82 <= v79[1] || (uint64_t v78 = v80, v82 <= v101[v81])) {
        uint64_t v78 = v81;
      }
      ++v80;
      ++v79;
      uint64_t v81 = v78;
    }
    while (v80 != 127);
  }
  unint64_t v83 = v78 - 1;
  unint64_t v84 = v78 + 1;
  if (v78 - 1 <= (unint64_t)(v78 + 1))
  {
    float v86 = 0.0;
    unint64_t v87 = v78 - 1;
    do
      float v86 = v86 + v101[v87++];
    while (v87 <= v84);
    float v85 = 0.0;
    float v88 = 0.0;
    if (v86 > 0.0)
    {
      unint64_t v89 = v78 - 1;
      do
      {
        float v88 = v88 + (float)(*(float *)&v103[4 * v89 + 512] * v101[v89]);
        ++v89;
      }
      while (v89 <= v84);
      float v88 = v88 / v86;
    }
    a7[16] = v88;
    do
      float v85 = v85 + v101[v83++];
    while (v83 <= v84);
  }
  else
  {
    a7[16] = 0.0;
    float v85 = 0.0;
  }
  a7[17] = v85;
  if (v77 <= 0x7F)
  {
    float v91 = 0.0;
    for (jfloat j = v77; jj != 128; ++jj)
      float v91 = v91 + v101[jj];
    a7[18] = v91;
    float v93 = 0.0;
    do
      float v93 = v93 + *(float *)&v100[4 * v77++];
    while (v77 != 128);
    float v94 = v93 / v91;
    if (v91 <= 0.0) {
      float v94 = 0.0;
    }
    a7[19] = v93;
    a7[20] = v94;
    float v90 = v85 / v91;
    if (v91 <= 0.0) {
      float v90 = 0.0;
    }
  }
  else
  {
    *((void *)a7 + 9) = 0;
    float v90 = 0.0;
    a7[20] = 0.0;
  }
  a7[21] = v90;
  uint64_t v95 = v78 + 2;
  if ((unint64_t)(v78 + 2) >= 0xFF) {
    uint64_t v95 = 255;
  }
  float v96 = *(float *)&v100[4 * v78 + 1016];
  float v97 = 0.0;
  float v98 = 0.0;
  if (v96 > 0.0) {
    float v98 = v101[v78] / v96;
  }
  float v99 = v101[v95];
  if (v99 > 0.0) {
    float v97 = v101[v78] / v99;
  }
  if (v98 < v97) {
    float v97 = v98;
  }
  a7[22] = v97;
}

void sub_100EAA8DC(_Unwind_Exception *a1)
{
}

unint64_t sub_100EAA93C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 - 1 <= a2) {
    sub_101A93818();
  }
  if (a1 > a2) {
    return a1;
  }
  unint64_t v5 = a1;
  do
  {
    char v6 = (float *)(a3 + 4 * a1);
    float v7 = *v6;
    if (*v6 <= *(v6 - 1) || v7 <= v6[1] || (unint64_t v4 = a1, v7 <= *(float *)(a3 + 4 * v5))) {
      unint64_t v4 = v5;
    }
    ++a1;
    unint64_t v5 = v4;
  }
  while (a1 <= a2);
  return v4;
}

void sub_100EAA9B8(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100EAA9E8()
{
  dword_102482008 = sub_100D6AA2C(50, 0x80uLL);
}

uint64_t sub_100EAAA10(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 48) + 48))(*(void *)(a3 + 48));
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void, unsigned char *, double))(**(void **)(a3 + 48) + 24))(*(void *)(a3 + 48), v6, a1);
    if (v6[208])
    {
      sub_10046B90C(*(void *)(a3 + 8), *(double *)(*(void *)(a3 + 8) + 104), *(double *)(*(void *)(a3 + 8) + 112));
      return sub_100EAB128(*(void *)(a3 + 72), *(double *)(*(void *)(a3 + 72) + 104), *(double *)(*(void *)(a3 + 72) + 112));
    }
  }
  return result;
}

uint64_t sub_100EAAAEC(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 8) + 48))(*(void *)(a3 + 8));
  if (result)
  {
    float v7 = *(uint64_t (**)(__n128))(**(void **)(a3 + 72) + 48);
    v6.n128_f64[0] = a1;
    return v7(v6);
  }
  return result;
}

void sub_100EAAB8C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 3;
  *(_DWORD *)(a3 + 36) = 0;
  float v6 = *(float *)(a2 + 1368);
  float v7 = *(float *)(a2 + 1372);
  float v8 = *(double *)(a2 + 560);
  double v9 = (*(float *)(a2 + 1380) - v8) / (*(float *)(a2 + 1380) - *(float *)(a2 + 1376));
  int v10 = sub_1001860C8(a2);
  if (*(double *)(a2 + 600) < *(double *)a2) {
    int v11 = v10;
  }
  else {
    int v11 = 0;
  }
  float v12 = v9;
  float v13 = v6 * sub_101141BD8(v12, v7);
  sub_1014EFF94(a1 + 8, a2, (uint64_t)buf);
  float v14 = *(float *)((char *)&v40 + 2);
  BOOL v15 = *(_DWORD *)(a2 + 400) != 0;
  BOOL v16 = *(unsigned char *)(a2 + 1220) != 0;
  BOOL v17 = v15 && v16;
  if (v15 && v16) {
    int v18 = 2;
  }
  else {
    int v18 = *(_DWORD *)(a2 + 1216);
  }
  int isTypeStatic = CLMotionActivity::isTypeStatic();
  int v20 = isTypeStatic;
  *(void *)(a3 + 32) = 3;
  if (v18 == 1)
  {
    if ((v11 & 1) == 0)
    {
      int v25 = 0;
      *(void *)(a3 + 20) = 1082130432;
      *(void *)(a3 + 28) = 1082130432;
      float v13 = 0.0;
      float v28 = 4.0;
      float v24 = 4.0;
      float v27 = 4.0;
      goto LABEL_34;
    }
    float v24 = v13 * 0.6;
    *(float *)a3 = v13 * 0.6;
    *(float *)(a3 + 20) = v13 * 0.6;
    *(float *)(a3 + 28) = v13 * 0.6;
    int v25 = 1;
    *(_DWORD *)(a3 + 24) = 1;
    *(_DWORD *)(a3 + 32) = 1;
    float v28 = 4.0;
    float v27 = *(float *)"333@";
    if ((float)(v13 * 0.6) < 2.8)
    {
      uint64_t v29 = 1077097267;
LABEL_28:
      *(void *)(a3 + 20) = v29 & 0xFFFF0000FFFFFFFFLL | 0x300000000;
      int v25 = 3;
      float v13 = v24;
LABEL_34:
      *(float *)(a3 + 12) = v28;
      *(_DWORD *)(a3 + 36) = 7;
LABEL_35:
      float v21 = v13;
      *(float *)&int v22 = v24;
      if (v27 >= 2.1) {
        goto LABEL_37;
      }
      goto LABEL_36;
    }
LABEL_33:
    float v13 = v24;
    float v27 = v24;
    goto LABEL_34;
  }
  if (v18 == 3)
  {
    if ((v11 & 1) == 0)
    {
      int v25 = 0;
      *(void *)(a3 + 20) = 1084856730;
      *(void *)(a3 + 28) = 1084856730;
      float v13 = 0.0;
      float v28 = 5.3;
      float v24 = 5.3;
      float v27 = 5.3;
      goto LABEL_34;
    }
    float v24 = v13 * 0.8;
    *(float *)a3 = v13 * 0.8;
    *(float *)(a3 + 20) = v13 * 0.8;
    *(float *)(a3 + 28) = v13 * 0.8;
    int v25 = 1;
    *(_DWORD *)(a3 + 24) = 1;
    *(_DWORD *)(a3 + 32) = 1;
    float v28 = 5.3;
    float v27 = 3.2;
    if ((float)(v13 * 0.8) < 3.2)
    {
      uint64_t v29 = 1078774989;
      goto LABEL_28;
    }
    goto LABEL_33;
  }
  float v21 = 0.0;
  *(float *)&int v22 = 0.0;
  if (v18 != 2)
  {
LABEL_36:
    *(void *)(a3 + 20) = 0x340066666;
    int v25 = 3;
    float v27 = 2.1;
    float v13 = v21;
    float v24 = *(float *)&v22;
    goto LABEL_37;
  }
  *(float *)&int v22 = 1.6;
  float v23 = 6.5;
  if (isTypeStatic) {
    float v23 = 1.6;
  }
  if (v13 >= v14) {
    float v24 = v13;
  }
  else {
    float v24 = v14;
  }
  *(float *)(a3 + 12) = v23;
  *(float *)a3 = v13;
  *(float *)(a3 + 20) = v24;
  *(float *)(a3 + 28) = v24;
  int v25 = 1;
  *(_DWORD *)(a3 + 24) = 1;
  *(void *)(a3 + 32) = 0x700000001;
  if (v8 < 100.0) {
    int v26 = isTypeStatic;
  }
  else {
    int v26 = 0;
  }
  if (v26 == 1)
  {
    int v25 = 0;
    *(void *)(a3 + 20) = 1070386381;
    *(void *)(a3 + 28) = 1070386381;
    float v24 = 1.6;
  }
  if (v11)
  {
    float v27 = v24;
    goto LABEL_35;
  }
  *(float *)(a3 + 20) = v23;
  *(float *)(a3 + 28) = v23;
  *(_DWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  if (isTypeStatic)
  {
    float v21 = v13;
    goto LABEL_36;
  }
  int v25 = 0;
  float v24 = 6.5;
  float v27 = 6.5;
LABEL_37:
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_102300110);
  }
  unint64_t v30 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v31 = *(void *)(a2 + 128);
    *(_DWORD *)std::string buf = 67111424;
    int v34 = v18;
    __int16 v35 = 2048;
    double v36 = v13;
    __int16 v37 = 1024;
    int v38 = v11;
    __int16 v39 = 2048;
    double v40 = v27;
    __int16 v41 = 2048;
    double v42 = v24;
    __int16 v43 = 2048;
    uint64_t v44 = v31;
    __int16 v45 = 2048;
    double v46 = v14;
    __int16 v47 = 1024;
    int v48 = v25;
    __int16 v49 = 1024;
    int v50 = v17;
    __int16 v51 = 1024;
    int v52 = v20;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "FST, FSTMotionType, %d, metsHR, %f, useHR, %d, userMets, %f, truthMets, %f, endTime, %f, semiStatMets, %f, userMetSource, %d, isWalking, %d, isTypeStatic, %d", buf, 0x52u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102300110);
    }
    float v32 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLCalorieFunctionalStrengthModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v32);
    if (v32 != (char *)buf) {
      free(v32);
    }
  }
}

void sub_100EAB0F8(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

BOOL sub_100EAB128(uint64_t a1, double a2, double a3)
{
  if (*(unsigned char *)(a1 + 80))
  {
    BOOL result = 1;
  }
  else if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1))
  {
    *(double *)(a1 + 72) = a2;
    BOOL result = 1;
    *(unsigned char *)(a1 + 80) = 1;
    *(unsigned char *)(a1 + 120) = 0;
  }
  else
  {
    BOOL result = *(unsigned char *)(a1 + 80) != 0;
  }
  double v7 = a2 + a3;
  if (*(double *)(a1 + 88) >= a2 + a3) {
    double v7 = *(double *)(a1 + 88);
  }
  *(double *)(a1 + 88) = v7;
  return result;
}

uint64_t sub_100EAB1C8(uint64_t a1, int a2)
{
  sub_100134750(__p, "");
  sub_100EAB2EC(a1, "ColdStorageCloudKitMetadata", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = off_102300140;
  *(void *)(a1 + 72) = off_1023001E8;
  sub_100F03BA0((void *)(a1 + 336), 0, 0);
  sub_100F03BA0((void *)(a1 + 352), 0, 0);
  *(unsigned char *)(a1 + 368) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
  return a1;
}

void sub_100EAB2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EAB2EC(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  float v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 8));
  *float v12 = &off_1022B2C68;
  *(void *)a1 = off_102300398;
  *(void *)(a1 + 72) = off_102300440;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_102300398;
  *(void *)(a1 + 72) = off_102300440;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 224) = 0;
  *(int64x2_t *)(a1 + 232) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 12000;
  *(void *)(a1 + 264) = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 272));
  *(void *)(a1 + 272) = &off_1022B2C68;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_100EAB710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  void *v27 = v30;
  sub_1003BE1F8(v31);
  sub_1002CDF4C(v29);
  sub_1011F8AE0(v28);
  void *v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_100EAB7A4()
{
}

void *sub_100EAB7AC(void *a1)
{
  *a1 = off_102300398;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_102300440;
  a1[33] = off_1022B2C20;
  sub_1003BE1F8(a1 + 34);
  sub_1002CDF4C(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022B2C20;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_100EAB870(uint64_t a1)
{
  return sub_100EAB7AC((void *)(a1 - 72));
}

void sub_100EAB878(void *a1)
{
  sub_100EAB7AC(a1);

  operator delete();
}

void sub_100EAB8B0(uint64_t a1)
{
  sub_100EAB7AC((void *)(a1 - 72));

  operator delete();
}

void sub_100EAB8EC(void *a1, uint64_t a2)
{
  sqlite3_int64 v4 = 0;
  int64x2_t v5 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  uint64_t v6 = 0;
  if (sub_1004C6F5C(a1, (uint64_t)&v4))
  {
    *(void *)(a2 + 8) = v5.i64[0];
    sub_100EAB964((uint64_t)a1, a2, v4);
  }
  else
  {
    sub_100EABDF8(a1, a2, 1);
  }
}

void sub_100EAB964(uint64_t a1, uint64_t a2, sqlite3_int64 a3)
{
  if (sub_100082064(a1 + 72))
  {
    if (*(unsigned char *)(a1 + 368) || ((*(void (**)(uint64_t))(*(void *)a1 + 112))(a1), *(unsigned char *)(a1 + 368)))
    {
      uint64_t v7 = a1 + 112;
      uint64_t v6 = *(void *)(a1 + 112);
      uint64_t v20 = a1 + 112;
      (*(void (**)(uint64_t))(v6 + 16))(a1 + 112);
      __int16 v21 = 256;
      sub_100082068((void *)(a1 + 352), &v19);
      if (v19)
      {
        float v8 = (sqlite3_stmt *)sub_10014D19C(v19);
        if (sub_100055D58(v8, 1, *(double *)(a2 + 8)))
        {
          double v9 = (sqlite3_stmt *)sub_10014D19C(v19);
          if (sub_100055D58(v9, 2, *(double *)(a2 + 16)))
          {
            int v10 = (sqlite3_stmt *)sub_10014D19C(v19);
            if (sub_100604C54(v10, 3, *(void **)(a2 + 24)))
            {
              int v11 = (sqlite3_stmt *)sub_10014D19C(v19);
              if (sub_10014DBB4(v11, 4, a3))
              {
                uint64_t v12 = *(void *)(a1 + 80);
                uint64_t v13 = (sqlite3_stmt *)sub_10014D19C(v19);
                sub_10001FEB0(v12, v13);
              }
            }
          }
        }
      }
      else
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102300368);
        }
        float v14 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "[CloudKit] Invalid SQL statement", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102300368);
          }
          __int16 v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CMHealthColdStorageCloudKitMetadataDb::updateRecord(const HealthColdStorageCloudKitMetadata &, uint64_t)", "%s\n", v18);
          if (v18 != (char *)buf) {
            free(v18);
          }
        }
      }
      uint64_t v15 = v19;
      uint64_t v19 = 0;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
      (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
    }
    else
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102300368);
      }
      uint64_t v16 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "[CloudKit], Unable to initialize CloudKit metadata DB", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102300368);
        }
        LOWORD(v20) = 0;
        uint64_t v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CMHealthColdStorageCloudKitMetadataDb::updateRecord(const HealthColdStorageCloudKitMetadata &, uint64_t)", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
    }
  }
}

void sub_100EABD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (a5) {
    (*(void (**)(uint64_t))(*(void *)a5 + 8))(a5);
  }
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EABDF8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 14;
  (*(void (**)(void *))(a1[14] + 16))(a1 + 14);
  (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, a3);
  return (*(uint64_t (**)(void *))(*v6 + 24))(v6);
}

void sub_100EABEC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EABED8(uint64_t a1)
{
  uint64_t result = sub_10014C3C0(*(void *)(a1 + 80));
  if (result)
  {
    sub_100EABF60(a1);
    sub_1005F7B0C(*(void *)(a1 + 80), "ColdStorageCloudKitMetadata", (const char **)&off_102300278, (const std::string::value_type **)&off_102475150, 0);
    *(void *)(a1 + 336) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM ColdStorageCloudKitMetadata ORDER BY id DESC LIMIT 1");
    *(void *)(a1 + 344) = v3;
    uint64_t result = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"UPDATE ColdStorageCloudKitMetadata SET startTime = ?, lastUpdateTime = ?, metadata = ? WHERE id = ?");
    *(void *)(a1 + 352) = result;
    *(void *)(a1 + 360) = v4;
    *(unsigned char *)(a1 + 368) = 1;
  }
  return result;
}

uint64_t sub_100EABF60(uint64_t a1)
{
  uint64_t result = sub_1005F93E4(*(void *)(a1 + 80), "ColdStorageCloudKitMetadata");
  if (result)
  {
    uint64_t v3 = "startTime";
    int v4 = 5;
    __int16 v5 = 0;
    char v6 = 0;
    char v7 = 0;
    sub_1005FEC4C(*(void *)(a1 + 80), "ColdStorageCloudKitMetadata", (uint64_t)"startTime", (uint64_t)&v3);
  }
  return result;
}

void sub_100EAC458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a23);
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  sub_101A129A8((uint64_t)&a61);
  _Unwind_Resume(a1);
}

void *sub_100EAC500@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "ColdStorageCloudKitMetadata");
}

void *sub_100EAC510@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "ColdStorageCloudKitMetadata");
}

uint64_t sub_100EAC520(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"INSERT INTO ColdStorageCloudKitMetadata (startTime, lastUpdateTime, metadata) VALUES (?, ?, ?)");
  }
  return result;
}

void sub_100EAC764(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100EAC7A0(uint64_t a1, uint64_t a2)
{
  if (!sub_100082064(a1 + 72)) {
    return 2;
  }
  sub_100082068((void *)(a1 + 336), &v12);
  uint64_t v4 = v12;
  if (!v12)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102300368);
    }
    float v8 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[CloudKit] Invalid SQL statement", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102300368);
      }
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CLActivityDB::ActivityCode CMHealthColdStorageCloudKitMetadataDb::getMostRecentRecordUL(HealthColdStorageCloudKitMetadata &) const", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
LABEL_11:
    uint64_t v7 = 2;
    goto LABEL_13;
  }
  __int16 v5 = (sqlite3_stmt *)sub_10014D19C(v12);
  int v6 = sqlite3_step(v5);
  if (v6 != 101)
  {
    if (v6 == 100)
    {
      sub_100EADFB0(&v12, a2);
      uint64_t v7 = 0;
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  uint64_t v7 = 1;
LABEL_13:
  uint64_t v9 = v12;
  uint64_t v12 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  if (!v4) {
    return 2;
  }
  return v7;
}

void sub_100EAC9D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EACA18(uint64_t a1, void *a2)
{
  if (!sub_1005F9734(*(void *)(a1 + 80), (char *)a2))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102300368);
    }
    uint64_t v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102300368);
      }
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      uint64_t v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<HealthColdStorageCloudKitMetadata>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = HealthColdStorageCloudKitMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", (const char *)v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    memset(__p, 0, 24);
    sub_100134750(buf, (char *)a2);
    __int16 v5 = std::string::append(buf, "AutoIncr");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t v22 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)__int16 v21 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_100134750(buf, (char *)a2);
    uint64_t v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_10002B640(*(void *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v8 = HIBYTE(__p[2]);
    }
    else {
      size_t v8 = (size_t)__p[1];
    }
    uint64_t v9 = buf;
    sub_1001110E4((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0) {
        int v10 = __p;
      }
      else {
        int v10 = (void **)__p[0];
      }
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v22 >= 0) {
      int v11 = v21;
    }
    else {
      int v11 = (void **)v21[0];
    }
    if (v22 >= 0) {
      std::string::size_type v12 = HIBYTE(v22);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v21[1];
    }
    uint64_t v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    float v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v14;
    __p[1] = v23.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v23.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      char v15 = HIBYTE(__p[2]);
      float v14 = __p[0];
    }
    if (v15 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)v14;
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)v16);
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = *(void *)(v17 + 88);
  }
  sub_10003CC68(v17, v18);
  return 0;
}

void sub_100EADC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

id sub_100EADFA4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_100EADFB0(a2, a3);
}

id sub_100EADFB0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)a2 = sqlite3_column_int(v4, 0);
  __int16 v5 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v5, 1);
  long long v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v6, 2);
  uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  size_t v8 = sqlite3_column_blob(v7, 3);
  uint64_t v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
  id result = [objc_alloc((Class)NSData) initWithBytes:v8 length:sqlite3_column_bytes(v9, 3)];
  *(void *)(a2 + 24) = result;
  return result;
}

uint64_t sub_100EAE064(void *a1, void *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A939E8(v4);
    sub_1001D7FD4();
  }
  std::string::size_type v12 = v15[1];
  operator delete(v15[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v15);
    long long v6 = sub_100132EFC(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    uint64_t v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      int v11 = __p;
    }
    else {
      int v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_100EAE43C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  sub_101A129A8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100EAE4BC(void *a1)
{
  uint64_t v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17[0]) < 0)
  {
    uint64_t v10 = v16[1];
    operator delete(v16[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v16);
        uint64_t v4 = sub_100132EFC(v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0) {
          __int16 v5 = __p;
        }
        else {
          __int16 v5 = (void **)__p[0];
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v6 = v14;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        uint64_t v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((v14 & 0x80u) == 0) {
          uint64_t v9 = __p;
        }
        else {
          uint64_t v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17[0]))
  {
    goto LABEL_3;
  }
  sub_101A93B58(v3);
  uint64_t v15 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v16
  v17[0] = v11;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_100EAE8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100EAE958(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_100EB03AC(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102300368);
  }
  __int16 v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)&void v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102300368);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)std::string buf = 134349056;
      *(void *)uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102300368);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<HealthColdStorageCloudKitMetadata>::setDatabaseAccessible() [T = HealthColdStorageCloudKitMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_100EAF0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_100EAF0E0(uint64_t a1, uint64_t a2, char a3)
{
  v31[0] = (id)os_transaction_create();
  v31[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v31);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  uint64_t v28 = 0;
  int64x2_t v29 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  uint64_t v30 = 0;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 104))(a1, &v28);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102300368);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102300368);
        }
        LOWORD(v32) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<HealthColdStorageCloudKitMetadata>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HealthColdStorageCloudKitMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *(double *)(a2 + 8);
    double v8 = *(double *)v29.i64;
    double v9 = v7 - *(double *)v29.i64;
    if (v7 - *(double *)v29.i64 < 0.0) {
      double v9 = -(v7 - *(double *)v29.i64);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102300368);
      }
      uint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 8);
        *(_DWORD *)std::string buf = 134349312;
        double v37 = *(double *)v29.i64;
        __int16 v38 = 2050;
        uint64_t v39 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102300368);
        }
        uint64_t v22 = *(void *)(a2 + 8);
        int v32 = 134349312;
        double v33 = *(double *)v29.i64;
        __int16 v34 = 2050;
        uint64_t v35 = v22;
        std::string v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<HealthColdStorageCloudKitMetadata>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HealthColdStorageCloudKitMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
      CLWriteStackshot();
      double v7 = *(double *)(a2 + 8);
      double v8 = *(double *)v29.i64;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102300368);
        }
        std::string::size_type v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)(a2 + 8);
          *(_DWORD *)std::string buf = 134217984;
          double v37 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102300368);
          }
          double v24 = *(double *)(a2 + 8);
          int v32 = 134217984;
          double v33 = v24;
          int v25 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<HealthColdStorageCloudKitMetadata>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HealthColdStorageCloudKitMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v25);
          if (v25 != (char *)buf) {
            free(v25);
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v27 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_102300368);
        double v17 = v27;
      }
      double v18 = v16 - v17;
      uint64_t v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 134217984;
        double v37 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102300368);
        }
        int v32 = 134217984;
        double v33 = v18;
        int v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<HealthColdStorageCloudKitMetadata>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HealthColdStorageCloudKitMetadata, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, &v28, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v20;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v31);
}

void sub_100EAF8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EAF920(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101A93CC8(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  std::string::size_type v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_100EAFC94(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A93E38(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      __int16 v5 = __p;
    }
    else {
      __int16 v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_100EAFFC0(uint64_t a1)
{
  return sub_100EAE958(a1 - 72);
}

void sub_100EAFFC8(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100EAFFF8(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A93FA8(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

uint64_t sub_100EB031C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_100EB03AC(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_100EB042C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EB0448(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_100EB0478(unsigned int a1)
{
  return (a1 < 0x28) & (0x800000003FuLL >> a1);
}

uint64_t sub_100EB0494(uint64_t a1, char a2)
{
  *(void *)a1 = off_1023004B0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)std::string buf = xmmword_101D07560;
  sub_100EB0E74(a1 + 40, buf, 2);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 180;
  *(unsigned char *)(a1 + 92) = 1;
  *(unsigned char *)(a1 + 93) = a2;
  *(unsigned char *)(a1 + 94) = 1;
  sub_1001F6538((void **)(a1 + 64), 0xB4uLL);
  *(unsigned char *)(a1 + 94) = sub_100743F50() ^ 1;
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_102300550);
  }
  uint64_t v4 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 94);
    buf[0] = 67240192;
    buf[1] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#ilsa,CLStreamingAwareLocationProviderStateMachine,initializer,isLocationStreamingAllowed,%{public}d", (uint8_t *)buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_102300550);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLStreamingAwareLocationProviderStateMachine::CLStreamingAwareLocationProviderStateMachine(BOOL)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return a1;
}

void sub_100EB06F0(_Unwind_Exception *a1)
{
  int v7 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 72) = v7;
    operator delete(v7);
  }
  sub_1000F5BB0(v3, *(void **)(v1 + 48));
  sub_1000F5BB0(v2, *v5);
  _Unwind_Resume(a1);
}

uint64_t sub_100EB0730(uint64_t a1)
{
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_102300550);
  }
  uint64_t v2 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 94);
    *(_DWORD *)std::string buf = 67240192;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#ilsa,StreamingAwareLocationProviderStateMachine,isLocationStreamingAllowed,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_102300550);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLStreamingAwareLocationProviderStateMachine::isLocationStreamingAllowed() const", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return *(unsigned __int8 *)(a1 + 94);
}

void sub_100EB08E8(unsigned __int8 *a1, int a2)
{
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_102300550);
  }
  uint64_t v4 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a1[94];
    *(_DWORD *)std::string buf = 67240448;
    int v10 = v5;
    __int16 v11 = 1026;
    int v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ilsa,StreamingAwareLocationProviderStateMachine,isLocationStreamingAllowed,old,%{public}d,new,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_102300550);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLStreamingAwareLocationProviderStateMachine::setLocationStreamingAllowedState(const BOOL)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  int v6 = a1[94];
  a1[94] = a2;
  if (v6 != a2)
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    (*(void (**)(unsigned __int8 *, CFAbsoluteTime))(*(void *)a1 + 96))(a1, Current);
  }
}

uint64_t sub_100EB0AF4(uint64_t a1, double a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v4 = *(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 96);
  v5.n128_f64[0] = a2;

  return v4(a1, v5);
}

uint64_t sub_100EB0B7C(uint64_t a1, double a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 128))(a1);
  uint64_t v4 = *(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 96);
  v5.n128_f64[0] = a2;

  return v4(a1, v5);
}

uint64_t sub_100EB0C04(uint64_t a1, double a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 120))(a1);
  uint64_t v4 = *(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 96);
  v5.n128_f64[0] = a2;

  return v4(a1, v5);
}

uint64_t *sub_100EB0C8C(uint64_t a1, unsigned int a2)
{
  unsigned int v14 = a2;
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_102300550);
  }
  uint64_t v4 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2050;
    *(void *)&buf[20] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Stopping location for source\", \"source\":%{public, location:CLStreamingAwareLocationProviderStateMachine::LocationSource}lld}", buf, 0x1Cu);
  }
  uint64_t v5 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v13 = _Q0;
  do
  {
    __int16 v11 = *(void (****)(void))(a1 + 32);
    *(void *)&uint8_t buf[16] = 0;
    int v16 = 0;
    *(_OWORD *)std::string buf = v13;
    *(_DWORD *)&unsigned char buf[24] = 0;
    (**v11)();
    v5 += 4;
  }
  while (v5 != 12);
  *(void *)std::string buf = &v14;
  uint64_t result = sub_100125FD0((uint64_t **)(a1 + 40), (int *)&v14, (uint64_t)&unk_101D0B290, (unsigned int **)buf);
  *((_DWORD *)result + 8) = 0;
  return result;
}

void sub_100EB0E44(id a1)
{
  qword_102419548 = (uint64_t)os_log_create("com.apple.locationd.Core", "Streaming");
}

uint64_t sub_100EB0E74(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      sub_1007329F8((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_100EB0EDC(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100EB0FA4(id a1)
{
  qword_102482060 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLDataProtectionManagerSilo"];
}

uint64_t sub_100EB1064(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100EB17B0;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102482070 != -1) {
    dispatch_once(&qword_102482070, block);
  }
  return qword_10248AE00;
}

uint64_t sub_100EB13B4(_DWORD *a1)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_102300738);
  }
  uint64_t v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
  {
    int v3 = a1[28];
    *(_DWORD *)std::string buf = 67240192;
    int v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#dataprotection postDataAvailability, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102300738);
    }
    int v5 = a1[28];
    v7[0] = 67240192;
    v7[1] = v5;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDataProtectionManager::postDataAvailability()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  *(_DWORD *)std::string buf = a1[28];
  v7[0] = 0;
  return (*(uint64_t (**)(_DWORD *, _DWORD *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, v7, buf, 1, 0xFFFFFFFFLL, 0);
}

BOOL sub_100EB15F4()
{
  int v0 = MKBDeviceUnlockedSinceBoot();
  if (v0 < 0)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102300738);
    }
    uint64_t v1 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 67240192;
      int v5 = v0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "#dataprotection MKBDeviceUnlockedSinceBoot returned with an error, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_102300738);
      }
      int v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLDataProtectionManager::deviceUnlockedSinceBoot()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
  return v0 == 1;
}

void sub_100EB17B0()
{
}

void sub_100EB17FC()
{
}

uint64_t sub_100EB1820(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100EB1DF4(a1, "DataProtectionManager", a2);
  *(void *)uint64_t v3 = off_1023005A0;
  *(_DWORD *)(v3 + 112) = 1;
  *(void *)(v3 + 120) = 0;
  char v19 = 1;
  int v4 = MKBDeviceFormattedForContentProtection();
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_102300738);
  }
  int v5 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67240192;
    int v25 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#dataprotection init, content protection formatting, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102300738);
    }
    int v20 = 67240192;
    int v21 = v4;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLDataProtectionManager::CLDataProtectionManager(id<CLIntersiloUniverse>)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  if (v4)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, (const void *)a1, (CFNotificationCallback)sub_100EB1EA0, kMobileKeyBagLockStatusNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    int v7 = MKBGetDeviceLockState();
    int v8 = v7;
    if (v7 < 0)
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_102300738);
      }
      int v10 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67240192;
        int v25 = v8;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#dataprotection #warning MKBGetDeviceLockState returned with an error, %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_102300738);
        }
        int v20 = 67240192;
        int v21 = v8;
        uint64_t v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLDataProtectionManager::CLDataProtectionManager(id<CLIntersiloUniverse>)", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
      *(_DWORD *)(a1 + 112) = 0;
    }
    else if ((v7 - 1) <= 1)
    {
      *(_DWORD *)(a1 + 112) = 0;

      if (sub_100EB20DC()) {
        int v9 = [[CLOSTransaction alloc] initWithDescription:"CLDataProtectionManager::fLockedTransaction"];
      }
      else {
        int v9 = 0;
      }
      *(void *)(a1 + 120) = v9;
    }
    BOOL v11 = sub_100EB15F4();
    char v19 = v11;
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102300738);
    }
    int v12 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67240448;
      int v25 = v8;
      __int16 v26 = 1026;
      BOOL v27 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#dataprotection init, lockState, %{public}d, deviceUnlockedSinceBoot, %{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_102300738);
      }
      int v20 = 67240448;
      int v21 = v8;
      __int16 v22 = 1026;
      BOOL v23 = v11;
      int v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLDataProtectionManager::CLDataProtectionManager(id<CLIntersiloUniverse>)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    if (!v11)
    {
      long long v13 = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver(v13, (const void *)a1, (CFNotificationCallback)sub_100EB2160, @"com.apple.mobile.keybagd.first_unlock", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    }
  }
  *(_DWORD *)std::string buf = 1;
  (*(void (**)(uint64_t, uint8_t *, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, buf, v18, 1, 0xFFFFFFFFLL, 0);
  sub_100EB13B4((_DWORD *)a1);
  return a1;
}

void sub_100EB1DCC(_Unwind_Exception *a1)
{
  sub_100EB239C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100EB1DF4(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_102300768;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_100EB1E84(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EB1EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023006F8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    int v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDataProtectionManager::onKeybagStateChange", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023006F8);
    }
    BOOL v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      char v19 = "";
      __int16 v20 = 2082;
      int v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDataProtectionManager::onKeybagStateChange\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100EB4E9C;
  v13[3] = &unk_1022ACFE0;
  void v13[4] = a2;
  double v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_100EB20BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EB20DC()
{
  char v4 = 1;
  sub_1000C7F88(&v2);
  int v0 = sub_1000D2988(v2, "CLDataProtectionManager.LockedTransaction", (BOOL *)&v4);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  if (v4) {
    return 1;
  }
  else {
    return v0 ^ 1u;
  }
}

void sub_100EB2148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EB2160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023006F8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    int v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDataProtectionManager::onDeviceUnlockedSinceBoot", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023006F8);
    }
    BOOL v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      char v19 = "";
      __int16 v20 = 2082;
      int v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDataProtectionManager::onDeviceUnlockedSinceBoot\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100EB4EA4;
  v13[3] = &unk_1022ACFE0;
  void v13[4] = a2;
  double v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_100EB237C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EB239C(uint64_t a1)
{
  *(void *)a1 = off_102300768;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_100EB2420(id *a1)
{
  *a1 = off_1023005A0;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(DarwinNotifyCenter, a1);

  a1[15] = 0;

  return sub_100EB239C((uint64_t)a1);
}

void sub_100EB2490(id *a1)
{
  sub_100EB2420(a1);

  operator delete();
}

void *sub_100EB24C8@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_100EB2544()
{
  return 1;
}

uint64_t sub_100EB254C()
{
  return 1;
}

void sub_100EB2554(uint64_t a1)
{
  int v2 = MKBGetDeviceLockState();
  BOOL v3 = v2;
  if (!v2)
  {
    id v5 = *(id *)(a1 + 120);
    *(void *)(a1 + 120) = 0;
    uint64_t v6 = *(void **)(a1 + 40);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    _OWORD v19[2] = nullsub_1213;
    v19[3] = &unk_10229FED8;
    v19[4] = v5;
    [v6 afterInterval:v19 async:10.0];
    if (*(_DWORD *)(a1 + 112)) {
      goto LABEL_28;
    }
    *(_DWORD *)(a1 + 112) = 1;
    goto LABEL_27;
  }
  if (v2 == 2)
  {

    if (sub_100EB20DC()) {
      char v4 = [[CLOSTransaction alloc] initWithDescription:"CLDataProtectionManager::fLockedTransaction"];
    }
    else {
      char v4 = 0;
    }
    *(void *)(a1 + 120) = v4;
    *(_DWORD *)(a1 + 112) = 0;
LABEL_27:
    sub_100EB13B4((_DWORD *)a1);
    goto LABEL_28;
  }
  if (v2 < 0)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102300738);
    }
    int v7 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67240192;
      BOOL v27 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#dataprotection #warning MKBGetDeviceLockState returned with an error, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_102300738);
      }
      int v20 = 67240192;
      BOOL v21 = v3;
      int v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDataProtectionManager::onKeybagStateChange(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    *(_DWORD *)(a1 + 112) = 0;
    sub_100EB13B4((_DWORD *)a1);
    BOOL v8 = sub_100EB15F4();
    LOBYTE(v21) = v8;
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102300738);
    }
    int v9 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67240192;
      BOOL v27 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#dataprotection onKeybagStateChange, deviceUnlockedSinceBoot, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_102300738);
      }
      int v24 = 67240192;
      BOOL v25 = v8;
      int v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLDataProtectionManager::onKeybagStateChange(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    if (!v8)
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_102300738);
      }
      int v10 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67240192;
        BOOL v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#dataprotection #warning, reverting state back to not unlocked since first boot, %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_102300738);
        }
        int v24 = 67240192;
        BOOL v25 = 0;
        __int16 v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLDataProtectionManager::onKeybagStateChange(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver(DarwinNotifyCenter, (const void *)a1, (CFNotificationCallback)sub_100EB2160, @"com.apple.mobile.keybagd.first_unlock", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
      *(_DWORD *)std::string buf = 1;
      (*(void (**)(uint64_t, uint8_t *, int *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, buf, &v20, 1, 0xFFFFFFFFLL, 0);
    }
  }
LABEL_28:
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_102300738);
  }
  id v12 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
  {
    int v13 = *(_DWORD *)(a1 + 112);
    *(_DWORD *)std::string buf = 67240448;
    BOOL v27 = v3;
    __int16 v28 = 1026;
    int v29 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#dataprotection onKeybagStateChange, lock_state, %{public}d, data_availability, %{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102300738);
    }
    int v14 = *(_DWORD *)(a1 + 112);
    int v20 = 67240448;
    BOOL v21 = v3;
    __int16 v22 = 1026;
    int v23 = v14;
    char v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDataProtectionManager::onKeybagStateChange(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
}

uint64_t sub_100EB2C54(const void *a1)
{
  BOOL v2 = sub_100EB15F4();
  _DWORD v7[4] = v2;
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_102300738);
  }
  BOOL v3 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67240192;
    BOOL v11 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#dataprotection onDeviceUnlockedSinceBoot, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_102300738);
    }
    int v8 = 67240192;
    BOOL v9 = v2;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLDataProtectionManager::onDeviceUnlockedSinceBoot(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (v2)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, @"com.apple.mobile.keybagd.first_unlock", 0);
  }
  *(_DWORD *)std::string buf = 1;
  return (*(uint64_t (**)(const void *, uint8_t *, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, buf, v7, 1, 0xFFFFFFFFLL, 0);
}

void sub_100EB2E6C()
{
}

void sub_100EB2F28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_100EB2F64()
{
}

void sub_100EB3024(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_100EB3060(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &off_1023008B8;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    id v12 = a3;
  }
  else {
    id v12 = (uint64_t *)*a3;
  }
  id v13 = [[[a4 vendor] proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:objc_msgSend(a4, "silo")];
  return a1;
}

void sub_100EB3144(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        BOOL v9 = (uint64_t *)v4;
      }
      else {
        BOOL v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023006F8);
      }
      int v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        BOOL v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          BOOL v11 = (void *)*v11;
        }
        *(_DWORD *)std::string buf = 136446466;
        char v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1023006F8);
        }
        id v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          id v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        char v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_100EB33D4(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_100EB3488(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_100EB34D0(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_100EB3518(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_100EB3560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_102475220);
}

uint64_t sub_100EB358C(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)double v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          int v24 = (uint64_t *)v18;
        }
        else {
          int v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          int v29 = (uint64_t *)v25;
        }
        else {
          int v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)std::string buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        *(void *)std::string buf = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_100EB5DEC();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_102475221;
        int v39 = v17;
        *(void *)std::string buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)std::string buf = &v39;
        uint64_t v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        int v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)std::string buf = &v39;
        __int16 v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)std::string buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)std::string buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023006F8);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    char v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      char v15 = (void *)*v15;
    }
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v46 = 1026;
    int v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023006F8);
    }
    double v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      double v37 = (void *)*v37;
    }
    *(_DWORD *)double v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    __int16 v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_100EB3A30(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023006F8);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)std::string buf = 136446466;
      int v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023006F8);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_100EB3CB4(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1023006F8);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1023006F8);
                }
                int v29 = a1 + 8;
                if (a1[31] < 0) {
                  int v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                __int16 v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                uint64_t v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100EB4088(uint64_t a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = (uint64_t *)operator new(0x20uLL);
  v6[1] = 0;
  _DWORD v6[2] = 0;
  v6[3] = *a3;
  *uint64_t v6 = (uint64_t)off_102300848;
  int v10 = *a2;
  int v11 = &v10;
  int v7 = sub_10044715C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101D0B290, &v11);
  BOOL v8 = (std::__shared_weak_count *)v7[9];
  unsigned char v7[8] = v6 + 3;
  v7[9] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return 1;
}

void sub_100EB413C(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100EB4150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, &v5, a3, a4, 0);
}

void sub_100EB41A4(uint64_t a1, unsigned int *a2, uint64_t *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  BOOL v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023006F8);
  }
  int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)std::string buf = 68289794;
    int v22 = 0;
    __int16 v23 = 2082;
    *(void *)BOOL v24 = "";
    *(_WORD *)&v24[8] = 2082;
    *(void *)&v24[10] = "activity";
    __int16 v25 = 2082;
    int v26 = v10;
    __int16 v27 = 2050;
    BOOL v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    int v29 = v30;
    memset(v30, 0, sizeof(v30));
    uint64_t v31 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v29);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v28) {
      sub_1000DB0A0(v28);
    }
    sub_1000F5BB0((uint64_t)&v23, *(void **)&v24[6]);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v29, v30[0]);
  }
  if (a4)
  {
    BOOL v18 = (uint64_t *)operator new(0x20uLL);
    v18[1] = 0;
    v18[2] = 0;
    uint64_t *v18 = (uint64_t)off_102300848;
    v18[3] = *a3;
    int v19 = (std::__shared_weak_count *)v14[9];
    v14[8] = v18 + 3;
    v14[9] = v18;
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v19 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v19) {
LABEL_27:
  }
    sub_1000DB0A0(v19);
LABEL_28:
  if (v14[7]) {
    sub_100EB4EAC();
  }
  os_activity_scope_leave(&state);
}

void sub_100EB4788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100EB47D4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023006F8);
    }
    BOOL v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v3 = (void *)*v3;
      }
      *(_DWORD *)std::string buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023006F8);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023006F8);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1023006F8);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    BOOL v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1023006F8);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)std::string buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1023006F8);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            BOOL v8 = v19;
          }
          while (!v16);
        }
        BOOL v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_100EB4D84(uint64_t a1)
{
  sub_100EB5D7C(a1);

  operator delete();
}

id sub_100EB4DBC(uint64_t a1, int a2, void *a3)
{
  id result = sub_100EB54DC(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_100EB4E0C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100EB4E3C(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100EB4E6C(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

void sub_100EB4E9C(uint64_t a1)
{
}

uint64_t sub_100EB4EA4(uint64_t a1)
{
  return sub_100EB2C54(*(const void **)(a1 + 32));
}

void sub_100EB4EAC()
{
}

void sub_100EB4F58(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      int v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          int v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        __int16 v49 = v9;
        id v13 = sub_100EB54DC(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              int v48 = v19;
              sub_100EB5348(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              int v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  int v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              __int16 v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              int v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1023006F8);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::string buf = 136446466;
                BOOL v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1023006F8);
                }
                __int16 v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                __int16 v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                int v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_100EB5348(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_100EB54DC(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    id result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

void sub_100EB5440(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102300848;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100EB5460(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102300848;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100EB54BC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_100EB54DC(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_100EB5578(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_100EB5904(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_100EB5578(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_100EB5CC4((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_102300888);
    }
    uint64_t v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = 0x8000000101D94AC9 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_102300888);
  }
  int v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = 0x8000000101D94AC9 & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_102300888);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = 0x8000000101D94AC9 & 0x7FFFFFFFFFFFFFFFLL;
  int v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLDataProtectionManager_Type::NotificationData, Callbacunint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_100EB5904(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102300888);
      }
      int v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D94AC9 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLDataProtectionManager_Type::NotificationData, Callbacunint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102300888);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D94AC9 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_102300888);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_100EB5CC4(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_102393548))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)8) {
      sub_101A942AC();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_100EB5D4C(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_100EB5D7C(uint64_t a1)
{
  *(void *)a1 = &off_1023008B8;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *id v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_100EB5DEC()
{
}

uint64_t sub_100EB5E98(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

void *sub_100EB5EB8@<X0>(uint64_t a1@<X8>)
{
  v6[0] = off_102300900;
  v6[1] = sub_100EB6108;
  _DWORD v6[2] = 0;
  v6[3] = v6;
  sub_100134750(v7, "kCLConnectionMessageARSessionState");
  sub_100BEFD00((uint64_t)&v8, (uint64_t)v6);
  v5[0] = off_102300900;
  v5[1] = sub_100EB6384;
  void v5[2] = 0;
  void v5[3] = v5;
  sub_100134750(v9, "kCLConnectionMessageVIOEstimation");
  sub_100BEFD00((uint64_t)&v10, (uint64_t)v5);
  v4[0] = off_102300900;
  v4[1] = sub_100EB6600;
  void v4[2] = 0;
  void v4[3] = v4;
  sub_100134750(v11, "kCLConnectionMessageVLLocalizationResult");
  sub_100BEFD00((uint64_t)v12, (uint64_t)v4);
  sub_100EB6A7C(a1, (unsigned __int8 *)v7, 3);
  for (uint64_t i = 0; i != -21; i -= 7)
  {
    sub_100BF0280(&v12[i * 8]);
    if (SHIBYTE(v11[i + 2]) < 0) {
      operator delete((void *)v11[i]);
    }
  }
  sub_100BF0280(v4);
  sub_100BF0280(v5);
  return sub_100BF0280(v6);
}

void sub_100EB6080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  for (uint64_t i = 112; i != -56; i -= 56)
    sub_100EB687C((uint64_t)(&a21 + i));
  sub_100BF0280(&a9);
  sub_100BF0280(&a13);
  sub_100BF0280(&a17);
  _Unwind_Resume(a1);
}

void sub_100EB6108(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_100134750(&__p, "com.apple.locationd.trusted_ARKit_hinter");
  char v5 = sub_1010A4BAC(a1);
  char v6 = v5;
  if (SBYTE3(v15) < 0)
  {
    operator delete(__p);
    if (v6) {
      goto LABEL_3;
    }
  }
  else if (v5)
  {
LABEL_3:
    [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLVisionNotifier"), "sendARSessionState:fromClient:", objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", @"kCLConnectionMessageARSessionState"), objc_msgSend(*(id *)(a1 + 24), "legacyClientKey")];
    goto LABEL_12;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1023008D0);
  }
  char v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = *(void *)(a1 + 24);
    std::string __p = (void *)68289282;
    __int16 v12 = 2082;
    unint64_t v13 = "";
    __int16 v14 = 2114;
    uint64_t v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Client lacks proper entitlement to hint _CLARSessionState\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023008D0);
    }
  }
  __int16 v9 = qword_102419528;
  if (os_signpost_enabled((os_log_t)qword_102419528))
  {
    uint64_t v10 = *(void *)(a1 + 24);
    std::string __p = (void *)68289282;
    __int16 v12 = 2082;
    unint64_t v13 = "";
    __int16 v14 = 2114;
    uint64_t v15 = v10;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Client lacks proper entitlement to hint _CLARSessionState", "{\"msg%{public}.0s\":\"Client lacks proper entitlement to hint _CLARSessionState\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
  }
LABEL_12:
}

void sub_100EB6338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_100EB6384(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_100134750(&__p, "com.apple.locationd.trusted_ARKit_hinter");
  char v5 = sub_1010A4BAC(a1);
  char v6 = v5;
  if (SBYTE3(v15) < 0)
  {
    operator delete(__p);
    if (v6) {
      goto LABEL_3;
    }
  }
  else if (v5)
  {
LABEL_3:
    [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLVisionNotifier"), "sendVIOEstimation:fromClient:", objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", @"kCLConnectionMessageVIOEstimation"), objc_msgSend(*(id *)(a1 + 24), "legacyClientKey")];
    goto LABEL_12;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1023008D0);
  }
  char v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = *(void *)(a1 + 24);
    std::string __p = (void *)68289282;
    __int16 v12 = 2082;
    unint64_t v13 = "";
    __int16 v14 = 2114;
    uint64_t v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Client lacks proper entitlement to hint _CLVIOEstimation\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023008D0);
    }
  }
  __int16 v9 = qword_102419528;
  if (os_signpost_enabled((os_log_t)qword_102419528))
  {
    uint64_t v10 = *(void *)(a1 + 24);
    std::string __p = (void *)68289282;
    __int16 v12 = 2082;
    unint64_t v13 = "";
    __int16 v14 = 2114;
    uint64_t v15 = v10;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Client lacks proper entitlement to hint _CLVIOEstimation", "{\"msg%{public}.0s\":\"Client lacks proper entitlement to hint _CLVIOEstimation\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
  }
LABEL_12:
}

void sub_100EB65B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_100EB6600(uint64_t a1, CLConnectionMessage **a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_100134750(&__p, "com.apple.locationd.trusted_ARKit_hinter");
  char v5 = sub_1010A4BAC(a1);
  char v6 = v5;
  if (SBYTE3(v15) < 0)
  {
    operator delete(__p);
    if (v6) {
      goto LABEL_3;
    }
  }
  else if (v5)
  {
LABEL_3:
    [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLVisionNotifier"), "sendVLLocalizationResult:fromClient:", objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", @"kCLConnectionMessageVLLocalizationResult"), objc_msgSend(*(id *)(a1 + 24), "legacyClientKey"));
    goto LABEL_12;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1023008D0);
  }
  char v7 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = *(void *)(a1 + 24);
    std::string __p = (void *)68289282;
    __int16 v12 = 2082;
    unint64_t v13 = "";
    __int16 v14 = 2114;
    uint64_t v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Client lacks proper entitlement to hint _CLVLLocalizationResult\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1023008D0);
    }
  }
  __int16 v9 = qword_102419528;
  if (os_signpost_enabled((os_log_t)qword_102419528))
  {
    uint64_t v10 = *(void *)(a1 + 24);
    std::string __p = (void *)68289282;
    __int16 v12 = 2082;
    unint64_t v13 = "";
    __int16 v14 = 2114;
    uint64_t v15 = v10;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Client lacks proper entitlement to hint _CLVLLocalizationResult", "{\"msg%{public}.0s\":\"Client lacks proper entitlement to hint _CLVLLocalizationResult\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
  }
LABEL_12:
}

void sub_100EB6830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100EB687C(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100EB68B8(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_100EB68E8(uint64_t a1)
{
  id v2 = (char *)operator new(0x18uLL);
  *(void *)id v2 = off_102300900;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100EB6934(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102300900;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100EB6964(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100EB696C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100EB69AC()
{
}

void sub_100EB69B8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  id v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  char v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = (void *)(a2 + (v6 >> 1));
  if (v6) {
    char v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v8 = v3;
  __int16 v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v5(v7, &v8);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_100EB6A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EB6A7C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_100EB6AF8(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100EB6AE4(_Unwind_Exception *a1)
{
  sub_100BF0304(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100EB6AF8(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  char v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_100EB6D7C(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  int v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *int v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_100EB6E6C((uint64_t)v25, 0);
  return i;
}

void sub_100EB6D64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100EB6E6C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_100EB6D7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  __n128 result = sub_100EB6DF4(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_100EB6DDC(_Unwind_Exception *a1)
{
  sub_100EB6E6C(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_100EB6DF4(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__uuid_t dst = v4;
  }
  sub_100BEFA58((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100EB6E50(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EB6E6C(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100BF0384((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_100EB6EC4(unsigned int a1)
{
  return (a1 < 0x2D) & (0x10FE81F1BF80uLL >> a1);
}

void sub_100EB6EE4(uint64_t a1)
{
  if (qword_102482080 != -1) {
    dispatch_once(&qword_102482080, &stru_102300980);
  }
  int v2 = byte_102482078;
  *(unsigned char *)(a1 + 74) = byte_102482078;
  switch(v2)
  {
    case 1:
      *(_OWORD *)a1 = xmmword_101D950E0;
      *(_OWORD *)(a1 + 16) = xmmword_101D950F0;
      *(_DWORD *)(a1 + 32) = 1034147594;
      *(_OWORD *)(a1 + 36) = xmmword_101D94FA0;
      uint64_t v10 = 0x3F4CCCCD3F99999ALL;
      goto LABEL_32;
    case 2:
      *(_OWORD *)a1 = xmmword_101D950A0;
      *(_OWORD *)(a1 + 16) = xmmword_101D950B0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94FA0;
      *(void *)(a1 + 52) = 0x3ECCCCCD3F99999ALL;
      int v11 = 1056964608;
      goto LABEL_33;
    case 3:
      *(_OWORD *)a1 = xmmword_101D95080;
      *(_OWORD *)(a1 + 16) = xmmword_101D95090;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D00;
      uint64_t v12 = 0x3F0000003F99999ALL;
      goto LABEL_16;
    case 4:
      *(_OWORD *)a1 = xmmword_101D950C0;
      *(_OWORD *)(a1 + 16) = xmmword_101D950D0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D00;
      uint64_t v10 = 0x3E8F5C293F99999ALL;
      goto LABEL_32;
    case 5:
      *(_OWORD *)a1 = xmmword_101D95060;
      *(_OWORD *)(a1 + 16) = xmmword_101D95070;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D60;
      uint64_t v12 = 0x3F07AE143F99999ALL;
LABEL_16:
      *(void *)(a1 + 52) = v12;
      int v13 = 1050253722;
      goto LABEL_27;
    case 6:
      long long v14 = xmmword_101D94E80;
      long long v15 = xmmword_101D95050;
      goto LABEL_30;
    case 7:
      *(_OWORD *)a1 = xmmword_101D95010;
      *(_OWORD *)(a1 + 16) = xmmword_101D95020;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94FA0;
      *(void *)(a1 + 52) = 0x3EB333333F99999ALL;
      *(_DWORD *)(a1 + 68) = 1056964608;
      *(_WORD *)(a1 + 72) = 0;
      uint64_t v16 = 0x600000000;
      goto LABEL_98;
    case 8:
      *(_OWORD *)a1 = xmmword_101D94FB0;
      *(_OWORD *)(a1 + 16) = xmmword_101D94FC0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94FA0;
      *(void *)(a1 + 52) = 0x3ECCCCCD3F99999ALL;
      *(_DWORD *)(a1 + 68) = 1056964608;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0xB00000000;
      goto LABEL_98;
    case 9:
      *(_OWORD *)a1 = xmmword_101D94F80;
      *(_OWORD *)(a1 + 16) = xmmword_101D94F90;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94FA0;
      *(void *)(a1 + 52) = 0x3F3333333F99999ALL;
      *(_DWORD *)(a1 + 68) = 1045220557;
      *(_WORD *)(a1 + 72) = 257;
      uint64_t v16 = 0xC3F028F5CLL;
      goto LABEL_98;
    case 10:
    case 11:
      *(_OWORD *)a1 = xmmword_101D94FD0;
      *(_OWORD *)(a1 + 16) = xmmword_101D94FE0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D00;
      *(void *)(a1 + 52) = 0x3CCCCCCD3F99999ALL;
      int v5 = 1045220557;
      goto LABEL_47;
    case 12:
      *(_OWORD *)a1 = xmmword_101D94F60;
      *(_OWORD *)(a1 + 16) = xmmword_101D94F70;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D00;
      *(void *)(a1 + 52) = 0x3F147AE13F99999ALL;
      *(_DWORD *)(a1 + 68) = 1045220557;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0x1300000000;
      goto LABEL_98;
    case 13:
      *(_OWORD *)a1 = xmmword_101D94D40;
      *(_OWORD *)(a1 + 16) = xmmword_101D94F50;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D60;
      *(void *)(a1 + 52) = 0x3F19999A3F99999ALL;
      int v11 = 1045220557;
      goto LABEL_33;
    case 14:
      *(_OWORD *)a1 = xmmword_101D94EE0;
      *(_OWORD *)(a1 + 16) = xmmword_101D94EF0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D00;
      *(void *)(a1 + 52) = 0x3E428F5C3F99999ALL;
      *(_DWORD *)(a1 + 68) = 1050253722;
      *(_WORD *)(a1 + 72) = 0;
      goto LABEL_28;
    case 15:
      *(_OWORD *)a1 = xmmword_101D94FF0;
      *(_OWORD *)(a1 + 16) = xmmword_101D95000;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D60;
      uint64_t v17 = 0x3F3333333F99999ALL;
      goto LABEL_26;
    case 16:
      *(_OWORD *)a1 = xmmword_101D94FD0;
      *(_OWORD *)(a1 + 16) = xmmword_101D94FE0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D00;
      uint64_t v17 = 0x3CC49BA63F99999ALL;
LABEL_26:
      *(void *)(a1 + 52) = v17;
      int v13 = 1045220557;
LABEL_27:
      *(_DWORD *)(a1 + 68) = v13;
      *(_WORD *)(a1 + 72) = 1;
LABEL_28:
      uint64_t v16 = 0x900000000;
      goto LABEL_98;
    case 17:
      long long v14 = xmmword_101D94E80;
      long long v15 = xmmword_101D95030;
LABEL_30:
      *(_OWORD *)a1 = v14;
      *(_OWORD *)(a1 + 16) = v15;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D60;
      *(void *)(a1 + 52) = 0x3ED70A3D3F99999ALL;
      *(_DWORD *)(a1 + 68) = 1050253722;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0x500000000;
      goto LABEL_98;
    case 19:
      *(_OWORD *)a1 = xmmword_101D94E80;
      *(_OWORD *)(a1 + 16) = xmmword_101D95040;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D60;
      uint64_t v10 = 0x3ED70A3D3F99999ALL;
LABEL_32:
      *(void *)(a1 + 52) = v10;
      int v11 = 1050253722;
LABEL_33:
      *(_DWORD *)(a1 + 68) = v11;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0x800000000;
      goto LABEL_98;
    case 20:
      *(_OWORD *)a1 = xmmword_101D94F30;
      *(_OWORD *)(a1 + 16) = xmmword_101D94F40;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D60;
      *(void *)(a1 + 52) = 0x3E6147AE3F99999ALL;
      int v18 = 1045220557;
      goto LABEL_69;
    case 21:
      *(_OWORD *)a1 = xmmword_101D94D70;
      *(_OWORD *)(a1 + 16) = xmmword_101D94F20;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D60;
      uint64_t v3 = 0x3E8A3D713F99999ALL;
      goto LABEL_36;
    case 22:
      *(_OWORD *)a1 = xmmword_101D94DC0;
      *(_OWORD *)(a1 + 16) = xmmword_101D94F10;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D60;
      *(void *)(a1 + 52) = 0x3E19999A3F99999ALL;
      int v19 = 1045220557;
      goto LABEL_41;
    case 23:
      *(_OWORD *)a1 = xmmword_101D94D40;
      *(_OWORD *)(a1 + 16) = xmmword_101D94F00;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D60;
      *(void *)(a1 + 52) = 0x3F19999A3F99999ALL;
      *(_DWORD *)(a1 + 68) = 1045220557;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0x1C00000000;
      goto LABEL_98;
    case 24:
      *(_OWORD *)a1 = xmmword_101D94D40;
      *(_OWORD *)(a1 + 16) = xmmword_101D94E30;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D60;
      uint64_t v20 = 0x3F07AE143F99999ALL;
      goto LABEL_55;
    case 25:
      *(_OWORD *)a1 = xmmword_101D94EC0;
      *(_OWORD *)(a1 + 16) = xmmword_101D94ED0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D60;
      *(void *)(a1 + 52) = 0x3ECCCCCD3F99999ALL;
      int v19 = 1050253722;
LABEL_41:
      *(_DWORD *)(a1 + 68) = v19;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0xD00000000;
      goto LABEL_98;
    case 26:
      long long v21 = xmmword_101D94CE0;
      long long v22 = xmmword_101D94E40;
      goto LABEL_50;
    case 27:
      *(_OWORD *)a1 = xmmword_101D94E80;
      *(_OWORD *)(a1 + 16) = xmmword_101D94E90;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D60;
      uint64_t v23 = 0x3ED6C8B43F99999ALL;
      goto LABEL_51;
    case 28:
      *(_OWORD *)a1 = xmmword_101D94CE0;
      *(_OWORD *)(a1 + 16) = xmmword_101D94EB0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D00;
      *(void *)(a1 + 52) = 0x3E19999A3F99999ALL;
      *(_DWORD *)(a1 + 68) = 1050253722;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0xE00000000;
      goto LABEL_98;
    case 29:
      *(_OWORD *)a1 = xmmword_101D94CE0;
      *(_OWORD *)(a1 + 16) = xmmword_101D94E40;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D00;
      *(void *)(a1 + 52) = 0x3EA3D70A3F99999ALL;
      *(_DWORD *)(a1 + 68) = 1050253722;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0xA00000000;
      goto LABEL_98;
    case 30:
      *(_OWORD *)a1 = xmmword_101D94CE0;
      *(_OWORD *)(a1 + 16) = xmmword_101D94EA0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D00;
      *(void *)(a1 + 52) = 0x3EB333333F99999ALL;
      int v5 = 1050253722;
LABEL_47:
      *(_DWORD *)(a1 + 68) = v5;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0xC00000000;
      goto LABEL_98;
    case 31:
      long long v24 = xmmword_101D94D70;
      long long v25 = xmmword_101D94E70;
      goto LABEL_53;
    case 32:
      long long v21 = xmmword_101D94CE0;
      long long v22 = xmmword_101D94E60;
LABEL_50:
      *(_OWORD *)a1 = v21;
      *(_OWORD *)(a1 + 16) = v22;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D00;
      uint64_t v23 = 0x3EA3D70A3F99999ALL;
LABEL_51:
      *(void *)(a1 + 52) = v23;
      *(_DWORD *)(a1 + 68) = 1050253722;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0x1000000000;
      goto LABEL_98;
    case 33:
      long long v24 = xmmword_101D94D70;
      long long v25 = xmmword_101D94E50;
LABEL_53:
      *(_OWORD *)a1 = v24;
      *(_OWORD *)(a1 + 16) = v25;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D60;
      uint64_t v26 = 0x3E8000003F99999ALL;
      goto LABEL_57;
    case 34:
      *(_OWORD *)a1 = xmmword_101D94D40;
      *(_OWORD *)(a1 + 16) = xmmword_101D94E30;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D60;
      uint64_t v20 = 0x3E8000003F99999ALL;
LABEL_55:
      *(void *)(a1 + 52) = v20;
      *(_DWORD *)(a1 + 68) = 1045220557;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0x1600000000;
      goto LABEL_98;
    case 35:
      *(_OWORD *)a1 = xmmword_101D94D70;
      *(_OWORD *)(a1 + 16) = xmmword_101D94E20;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D60;
      uint64_t v26 = 0x3E1EB8523F99999ALL;
LABEL_57:
      *(void *)(a1 + 52) = v26;
      *(_DWORD *)(a1 + 68) = 1045220557;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0x1700000000;
      goto LABEL_98;
    case 36:
      *(_OWORD *)a1 = xmmword_101D94D40;
      *(_OWORD *)(a1 + 16) = xmmword_101D94DB0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D60;
      *(void *)(a1 + 52) = 0x3E051EB83F99999ALL;
      int v4 = 1040522936;
      goto LABEL_59;
    case 37:
      *(_OWORD *)a1 = xmmword_101D94D70;
      *(_OWORD *)(a1 + 16) = xmmword_101D94DA0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D60;
      *(void *)(a1 + 52) = 0x3E1EB8523F99999ALL;
      int v27 = 1042200658;
      goto LABEL_77;
    case 38:
      *(_OWORD *)a1 = xmmword_101D94D70;
      *(_OWORD *)(a1 + 16) = xmmword_101D94E10;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D60;
      uint64_t v28 = 0x3E8A3D713F99999ALL;
      goto LABEL_63;
    case 39:
      *(_OWORD *)a1 = xmmword_101D94D70;
      *(_OWORD *)(a1 + 16) = xmmword_101D94E00;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D60;
      uint64_t v28 = 0x3E75C28F3F99999ALL;
LABEL_63:
      *(void *)(a1 + 52) = v28;
      *(_DWORD *)(a1 + 68) = 1048576000;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0x1900000000;
      goto LABEL_98;
    case 40:
      *(_OWORD *)a1 = xmmword_101D94CE0;
      *(_OWORD *)(a1 + 16) = xmmword_101D94DF0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D00;
      *(void *)(a1 + 52) = 0x3E4CCCCD3F99999ALL;
      int v9 = 1050253722;
      goto LABEL_97;
    case 41:
      *(_OWORD *)a1 = xmmword_101D94CE0;
      *(_OWORD *)(a1 + 16) = xmmword_101D94DE0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D00;
      *(void *)(a1 + 52) = 0x3E4CCCCD3F99999ALL;
      int v6 = 1045220557;
      goto LABEL_75;
    case 42:
      long long v29 = xmmword_101D94CE0;
      long long v30 = xmmword_101D94CF0;
      goto LABEL_74;
    case 43:
      *(_OWORD *)a1 = xmmword_101D94CE0;
      *(_OWORD *)(a1 + 16) = xmmword_101D94CF0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D00;
      *(void *)(a1 + 52) = 0x3D8F5C293F99999ALL;
      int v6 = 1032805417;
      goto LABEL_75;
    case 44:
      *(_OWORD *)a1 = xmmword_101D94DC0;
      *(_OWORD *)(a1 + 16) = xmmword_101D94DD0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D60;
      *(void *)(a1 + 52) = 0x3E19999A3F99999ALL;
      int v18 = 1041865114;
LABEL_69:
      *(_DWORD *)(a1 + 68) = v18;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0xF00000000;
      goto LABEL_98;
    case 45:
    case 61:
      *(_OWORD *)a1 = xmmword_101D94CE0;
      *(_OWORD *)(a1 + 16) = xmmword_101D94CF0;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D00;
      *(void *)(a1 + 52) = 0x3DCCCCCD3F99999ALL;
      int v6 = 1036831949;
      goto LABEL_75;
    case 46:
    case 54:
    case 57:
      *(_OWORD *)a1 = xmmword_101D94CE0;
      *(_OWORD *)(a1 + 16) = xmmword_101D94D30;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D00;
      uint64_t v3 = 0x3E4CCCCD3F99999ALL;
LABEL_36:
      *(void *)(a1 + 52) = v3;
      int v9 = 1045220557;
      goto LABEL_97;
    case 47:
    case 53:
    case 59:
      *(_OWORD *)a1 = xmmword_101D94CE0;
      *(_OWORD *)(a1 + 16) = xmmword_101D94D10;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D00;
      *(void *)(a1 + 52) = 0x3CA3D70A3F99999ALL;
      int v4 = 1017370378;
LABEL_59:
      *(_DWORD *)(a1 + 68) = v4;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0x1500000000;
      goto LABEL_98;
    case 48:
    case 60:
      long long v7 = xmmword_101D94CE0;
      long long v8 = xmmword_101D94D10;
      goto LABEL_10;
    case 49:
      *(_OWORD *)a1 = xmmword_101D94D70;
      *(_OWORD *)(a1 + 16) = xmmword_101D94D90;
      *(_DWORD *)(a1 + 32) = 1092616192;
      long long v31 = xmmword_101D94D00;
      goto LABEL_72;
    case 50:
      *(_OWORD *)a1 = xmmword_101D94D70;
      *(_OWORD *)(a1 + 16) = xmmword_101D94D80;
      *(_DWORD *)(a1 + 32) = 1092616192;
      long long v31 = xmmword_101D94D60;
LABEL_72:
      *(_OWORD *)(a1 + 36) = v31;
      *(void *)(a1 + 52) = 0x3E75C28F3F99999ALL;
      int v27 = 1047904911;
      goto LABEL_77;
    case 51:
      long long v29 = xmmword_101D94CE0;
      long long v30 = xmmword_101D94D20;
LABEL_74:
      *(_OWORD *)a1 = v29;
      *(_OWORD *)(a1 + 16) = v30;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D00;
      *(void *)(a1 + 52) = 0x3E19999A3F99999ALL;
      int v6 = 1041865114;
LABEL_75:
      *(_DWORD *)(a1 + 68) = v6;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0x1200000000;
      goto LABEL_98;
    case 52:
      *(_OWORD *)a1 = xmmword_101D94D40;
      *(_OWORD *)(a1 + 16) = xmmword_101D94D50;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D60;
      *(void *)(a1 + 52) = 0x3E4CCCCD3F99999ALL;
      int v27 = 1045220557;
LABEL_77:
      *(_DWORD *)(a1 + 68) = v27;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0x1800000000;
      goto LABEL_98;
    case 55:
    case 58:
      long long v7 = xmmword_101D94CE0;
      long long v8 = xmmword_101D94D20;
LABEL_10:
      *(_OWORD *)a1 = v7;
      *(_OWORD *)(a1 + 16) = v8;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D00;
      *(void *)(a1 + 52) = 0x3E19999A3F99999ALL;
      int v9 = 1041865114;
      goto LABEL_97;
    case 56:
      *(_OWORD *)a1 = xmmword_101D94CE0;
      *(_OWORD *)(a1 + 16) = xmmword_101D94D10;
      *(_DWORD *)(a1 + 32) = 1092616192;
      *(_OWORD *)(a1 + 36) = xmmword_101D94D00;
      *(void *)(a1 + 52) = 0x3C23D70A3F99999ALL;
      int v9 = 1008981770;
LABEL_97:
      *(_DWORD *)(a1 + 68) = v9;
      *(_WORD *)(a1 + 72) = 1;
      uint64_t v16 = 0x1400000000;
LABEL_98:
      *(void *)(a1 + 60) = v16;
      break;
    default:
      if (qword_102419250 != -1) {
        dispatch_once(&qword_102419250, &stru_1023009A0);
      }
      int v32 = qword_102419258;
      if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v33 = sub_100103240();
        sub_10073B1A4(v33, (uint64_t)__p);
        uint64_t v34 = v43 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v34;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "No parameters for on body is available for %s", buf, 0xCu);
        if (v43 < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_102419250 != -1) {
          dispatch_once(&qword_102419250, &stru_1023009A0);
        }
        uint64_t v35 = sub_100103240();
        sub_10073B1A4(v35, (uint64_t)buf);
        if (v39 >= 0) {
          uint64_t v36 = buf;
        }
        else {
          uint64_t v36 = *(unsigned char **)buf;
        }
        int v40 = 136315138;
        BOOL v41 = v36;
        int v37 = (char *)_os_log_send_and_compose_impl();
        if (v39 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLOnBodyNotifier_Type::Params::init()", "%s\n", v37);
        if (v37 != (char *)__p) {
          free(v37);
        }
      }
      break;
  }
}

void sub_100EB7F3C(id a1)
{
  if ((sub_1000A16E8() & 0x800) != 0)
  {
    sub_100103240();
    unsigned int v1 = sub_1000B5AD4() - 16;
    if (v1 > 0xE3) {
      char v2 = 0;
    }
    else {
      char v2 = asc_101D951D8[v1];
    }
    byte_102482078 = v2;
  }
}

void sub_100EB7F88(_OWORD *a1@<X8>)
{
  *(_OWORD *)((char *)a1 + 61) = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  sub_100EB6EE4((uint64_t)a1);
}

void sub_100EB7FA0(uint64_t a1)
{
  if (qword_102419250 != -1) {
    dispatch_once(&qword_102419250, &stru_1023009A0);
  }
  char v2 = qword_102419258;
  if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_DEBUG))
  {
    double v3 = *(float *)a1;
    double v4 = *(float *)(a1 + 4);
    double v5 = *(float *)(a1 + 8);
    double v6 = *(float *)(a1 + 12);
    double v7 = *(float *)(a1 + 16);
    double v8 = *(float *)(a1 + 20);
    double v9 = *(float *)(a1 + 24);
    double v10 = *(float *)(a1 + 28);
    double v11 = *(float *)(a1 + 32);
    int v12 = *(_DWORD *)(a1 + 36);
    int v13 = *(_DWORD *)(a1 + 40);
    int v14 = *(_DWORD *)(a1 + 44);
    int v15 = *(_DWORD *)(a1 + 48);
    double v16 = *(float *)(a1 + 52);
    double v17 = *(float *)(a1 + 56);
    int v18 = *(_DWORD *)(a1 + 64);
    double v19 = *(float *)(a1 + 68);
    int v20 = *(unsigned __int8 *)(a1 + 72);
    int v21 = *(unsigned __int8 *)(a1 + 73);
    double v22 = *(float *)(a1 + 60);
    *(_DWORD *)std::string buf = 134222848;
    double v25 = v3;
    __int16 v26 = 2048;
    double v27 = v4;
    __int16 v28 = 2048;
    double v29 = v5;
    __int16 v30 = 2048;
    double v31 = v6;
    __int16 v32 = 2048;
    double v33 = v7;
    __int16 v34 = 2048;
    double v35 = v8;
    __int16 v36 = 2048;
    double v37 = v9;
    __int16 v38 = 2048;
    double v39 = v10;
    __int16 v40 = 2048;
    double v41 = v11;
    __int16 v42 = 1024;
    int v43 = v12;
    __int16 v44 = 1024;
    int v45 = v13;
    __int16 v46 = 1024;
    int v47 = v14;
    __int16 v48 = 1024;
    int v49 = v15;
    __int16 v50 = 2048;
    double v51 = v16;
    __int16 v52 = 2048;
    double v53 = v17;
    __int16 v54 = 1024;
    int v55 = v18;
    __int16 v56 = 2048;
    double v57 = v19;
    __int16 v58 = 1024;
    int v59 = v20;
    __int16 v60 = 1024;
    int v61 = v21;
    __int16 v62 = 2048;
    double v63 = v22;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Parameters: theta0, %f, theta1, %f, theta2, %f, theta3, %f, theta4, %f, theta5, %f, minLowPower, %f, maxLowPower, %f, maxHighPower, %f, lowBandStart, %d, lowBandStop, %d, highbandStart, %d, highBandStop, %d, wakeThreshold, %f, oddsThreshold, %f, medianFilterSize, %u, confidenceThreshold, %f, useHysteresis, %d, useAngleOverride, %d, angleMetricThreshold, %f", buf, 0xAEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419250 != -1) {
      dispatch_once(&qword_102419250, &stru_1023009A0);
    }
    uint64_t v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOnBodyNotifier_Type::Params::log() const", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
}

void sub_100EB8364(id a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 61) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  sub_100EB6EE4(a3);
  if (a2)
  {
    uint64_t v6 = CMOnBodyStatusManagerManufacturer;
    [a1 objectForKeyedSubscript:CMOnBodyStatusManagerManufacturer];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      if (sub_100EB8A84((uint64_t)objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", v6), "objectForKeyedSubscript:", a2)))
      {
        a1 = [a1[v6] objectForKeyedSubscript:a2];
        if (qword_102419250 != -1) {
          dispatch_once(&qword_102419250, &stru_1023009A0);
        }
        double v7 = qword_102419258;
        if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 136315394;
          id v27 = [a2 UTF8String];
          __int16 v28 = 2080;
          id v29 = [[objc_msgSend(a1, "description") UTF8String];
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Using the manufacturer specific parameters (%s): %s", buf, 0x16u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_18;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419250 != -1) {
          dispatch_once(&qword_102419250, &stru_1023009A0);
        }
        [a2 UTF8String];
        [objc_msgSend(a1, "description") UTF8String];
LABEL_28:
        long long v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static CLOnBodyNotifier_Type::Params CLOnBodyNotifier_Type::Params::getParams(NSDictionary *, NSString *)", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
LABEL_18:
        [objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierTheta0) floatValue];
        *(_DWORD *)a3 = v10;
        [objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierTheta1) floatValue];
        *(_DWORD *)(a3 + 4) = v11;
        [objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierTheta2) floatValue];
        *(_DWORD *)(a3 + 8) = v12;
        [objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierTheta3) floatValue];
        *(_DWORD *)(a3 + 12) = v13;
        [objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierTheta4) floatValue];
        *(_DWORD *)(a3 + 16) = v14;
        [objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierTheta5) floatValue];
        *(_DWORD *)(a3 + 20) = v15;
        [objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierMinLowPower) floatValue];
        *(_DWORD *)(a3 + 24) = v16;
        [objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierMaxLowPower) floatValue];
        *(_DWORD *)(a3 + 28) = v17;
        [objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerClassifierMaxHighPower) floatValue];
        *(_DWORD *)(a3 + 32) = v18;
        *(_DWORD *)(a3 + 36) = [objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerLowBandStart) intValue];
        *(_DWORD *)(a3 + 40) = [[objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerLowBandStop) intValue];
        *(_DWORD *)(a3 + 44) = [objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerHighBandStart) intValue];
        *(_DWORD *)(a3 + 48) = [objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerHighBandStop) intValue];
        [objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerWakeThreshold) floatValue];
        *(_DWORD *)(a3 + 52) = v19;
        [objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerOddsThreshold) floatValue];
        *(_DWORD *)(a3 + 56) = v20;
        *(_DWORD *)(a3 + 64) = [objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerMedianFilterSize) unsignedIntValue];
        [objc_msgSend(a1, "objectForKeyedSubscript:", CMOnBodyStatusManagerConfidenceThreshold) floatValue];
        *(_DWORD *)(a3 + 68) = v21;
        *(unsigned char *)(a3 + 72) = [[a1 objectForKeyedSubscript:CMOnBodyStatusManagerUseHysteresis] BOOLValue];
        *(unsigned char *)(a3 + 73) = [[a1 objectForKeyedSubscript:CMOnBodyStatusManagerUseAngleOverride] boolValue];
        [a1 objectForKeyedSubscript:CMOnBodyStatusManagerAngleMetricThreshold] floatValue];
        *(_DWORD *)(a3 + 60) = v22;
        return;
      }
    }
  }
  if (sub_100EB8A84((uint64_t)a1))
  {
    double v8 = +[NSMutableDictionary dictionaryWithDictionary:a1];
    [(NSMutableDictionary *)v8 removeObjectForKey:CMOnBodyStatusManagerManufacturer];
    if (qword_102419250 != -1) {
      dispatch_once(&qword_102419250, &stru_1023009A0);
    }
    double v9 = qword_102419258;
    if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315138;
      id v27 = [[-[NSMutableDictionary description](v8, "description") UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Using the default parameters: %s", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_18;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419250 != -1) {
      dispatch_once(&qword_102419250, &stru_1023009A0);
    }
    [(-[NSMutableDictionary description](v8, "description")) UTF8String];
    goto LABEL_28;
  }
  if (qword_102419250 != -1) {
    dispatch_once(&qword_102419250, &stru_1023009A0);
  }
  uint64_t v23 = qword_102419258;
  if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#Warning Using the hardcoded parameters", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419250 != -1) {
      dispatch_once(&qword_102419250, &stru_1023009A0);
    }
    double v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static CLOnBodyNotifier_Type::Params CLOnBodyNotifier_Type::Params::getParams(NSDictionary *, NSString *)", "%s\n", v25);
    if (v25 != (char *)buf) {
      free(v25);
    }
  }
}

uint64_t sub_100EB8A84(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = (void *)result;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerClassifierTheta0]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerClassifierTheta1]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerClassifierTheta2]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerClassifierTheta3]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerClassifierTheta4]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerClassifierTheta5]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerClassifierMinLowPower]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerClassifierMaxLowPower]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerClassifierMaxHighPower]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerLowBandStart]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerLowBandStop]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerHighBandStart]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerHighBandStop]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerWakeThreshold]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerOddsThreshold]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerMedianFilterSize]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerConfidenceThreshold]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerUseHysteresis]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerUseAngleOverride]
      && [v1 objectForKeyedSubscript:CMOnBodyStatusManagerAngleMetricThreshold])
    {
      return 1;
    }
    else
    {
      if (qword_102419250 != -1) {
        dispatch_once(&qword_102419250, &stru_1023009A0);
      }
      char v2 = qword_102419258;
      if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 136446210;
        id v6 = [[[v1 description] UTF8String];
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Invalid parameters received:\n%{public}s", buf, 0xCu);
      }
      BOOL v3 = sub_10013D1A0(115, 0);
      __n128 result = 0;
      if (v3)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419250 != -1) {
          dispatch_once(&qword_102419250, &stru_1023009A0);
        }
        [objc_msgSend(v1, "description") UTF8String];
        double v4 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLOnBodyNotifier_Type::Params::isValid(NSDictionary *)", "%s\n", v4);
        if (v4 != (char *)buf) {
          free(v4);
        }
        return 0;
      }
    }
  }
  return result;
}

void sub_100EB8E60(id a1)
{
  qword_102419258 = (uint64_t)os_log_create("com.apple.locationd.Motion", "OnBody");
}

uint64_t sub_100EB8E90(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)__n128 result = &off_1023009D0;
  *(unsigned char *)(result + 8) = 0;
  *(void *)(result + 16) = a3;
  *(void *)(result + 24) = a2;
  *(_WORD *)(result + 32) = 256;
  *(void *)(result + 40) = 0;
  *(unsigned char *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  return result;
}

void *sub_100EB8ECC(void *a1)
{
  *a1 = &off_1023009D0;
  sub_100EB8F14((uint64_t)a1);
  return a1;
}

void sub_100EB8F14(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(void *)(a1 + 16))
    {
      [*(id *)(a1 + 24) stopBackgroundInertialOdometryUpdatesForClient:];
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1023009F8);
      }
      char v2 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#pbio CLProactiveInertialOdometrySubscription::stopBackgroundInertialOdometrySession() stopping.", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_24;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1)
      {
LABEL_27:
        id v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveInertialOdometrySubscription::stopBackgroundInertialOdometrySession()", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
LABEL_24:
        *(unsigned char *)(a1 + 8) = 0;
        return;
      }
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1023009F8);
      }
      double v5 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#pbio CLProactiveInertialOdometrySubscription::stopBackgroundInertialOdometrySession() not-stopping due to uninitialized fBackgroundIntersiloDelegate.", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_24;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_27;
      }
    }
    dispatch_once(&qword_102419380, &stru_1023009F8);
    goto LABEL_27;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1023009F8);
  }
  BOOL v3 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#pbio CLProactiveInertialOdometrySubscription::stopBackgroundInertialOdometrySession(), not currently subscribed.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1023009F8);
    }
    double v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveInertialOdometrySubscription::stopBackgroundInertialOdometrySession()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

void sub_100EB92E8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1023009F8);
    }
    unsigned int v1 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "#pbio CLProactiveInertialOdometrySubscription::stopBackgroundInertialOdometrySession(), already subscribed.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1023009F8);
      }
      char v2 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveInertialOdometrySubscription::startBackgroundInertialOdometrySession()", "%s\n", v2);
      if (v2 != (char *)buf) {
        free(v2);
      }
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4)
    {
      [*(id *)(a1 + 24) startBackgroundInertialOdometryUpdatesForClient:v4 withIdentifier:@"CLLocationControllerClientIdentifier" usingReferenceFrame:1];
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1023009F8);
      }
      double v5 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#pbio CLProactiveInertialOdometrySubscription::startBackgroundInertialOdometrySession() starting with arbitrary reference frame.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1023009F8);
        }
        double v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveInertialOdometrySubscription::startBackgroundInertialOdometrySession()", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1023009F8);
      }
      id v6 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#pbio CLProactiveInertialOdometrySubscription::startBackgroundInertialOdometrySession() not-starting due to uninitialized fBackgroundIntersiloDelegate.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1023009F8);
        }
        double v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLProactiveInertialOdometrySubscription::startBackgroundInertialOdometrySession()", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
      *(unsigned char *)(a1 + 8) = 0;
    }
  }
}

void sub_100EB9710(uint64_t a1, char a2, double a3)
{
  *(double *)(a1 + 40) = a3;
  *(unsigned char *)(a1 + 33) = a2;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1023009F8);
  }
  uint64_t v4 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = *(unsigned __int8 *)(a1 + 33);
    *(_DWORD *)std::string buf = 134349312;
    uint64_t v9 = v5;
    __int16 v10 = 1026;
    int v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#pbio CLProactiveInertialOdometrySubscription::onVisit, fMachContinuousTimeOfLastVisitStateChange_s, %{public}.3f s, fIsInVisit, %{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1023009F8);
    }
    double v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveInertialOdometrySubscription::onVisit(const CFTimeInterval, const BOOL)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void sub_100EB98EC(uint64_t a1, char a2, double a3)
{
  *(double *)(a1 + 56) = a3;
  *(unsigned char *)(a1 + 48) = a2;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1023009F8);
  }
  uint64_t v4 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 56);
    int v6 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)std::string buf = 134349312;
    uint64_t v9 = v5;
    __int16 v10 = 1026;
    int v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#pbio CLProactiveInertialOdometrySubscription::onRhythmicStatus, fMachContinuousTimeOfLastActiveWakingRhythmicStatusChange_s, %{public}.3f s, fIsActiveWakingRhythmic, %{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1023009F8);
    }
    double v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveInertialOdometrySubscription::onRhythmicStatus(const CFTimeInterval, const BOOL)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void sub_100EB9AC8(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

double sub_100EB9AF8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482090, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482090))
  {
    sub_101A1F180(v1, "VO2MaxPowerBudgetEstimatorQueryLookbackInterval", &qword_101D952E8, 0);
    qword_102482088 = v2;
    __cxa_guard_release(&qword_102482090);
  }
  return *(double *)&qword_102482088;
}

void sub_100EB9B78(_Unwind_Exception *a1)
{
}

double sub_100EB9B90()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024820A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024820A0))
  {
    sub_101A1F180(v1, "VO2MaxOutOfSessionEstimateHoldoffInterval", &qword_101D952F0, 0);
    qword_102482098 = v2;
    __cxa_guard_release(&qword_1024820A0);
  }
  return *(double *)&qword_102482098;
}

void sub_100EB9C10(_Unwind_Exception *a1)
{
}

double sub_100EB9C28()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024820B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024820B0))
  {
    uint64_t v1 = 0x40BC200000000000;
    sub_101A1F180(v2, "VO2MaxOutOfSessionEstimateTimeSinceLastWorkoutHoldOffInterval", &v1, 0);
    qword_1024820A8 = v3;
    __cxa_guard_release(&qword_1024820B0);
  }
  return *(double *)&qword_1024820A8;
}

void sub_100EB9CB0(_Unwind_Exception *a1)
{
}

double sub_100EB9CC8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024820C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024820C0))
  {
    uint64_t v1 = 0x4092C00000000000;
    sub_101A1F180(v2, "VO2MaxPowerBudgetEstimatorBudgetAllowance", &v1, 0);
    qword_1024820B8 = v3;
    __cxa_guard_release(&qword_1024820C0);
  }
  return *(double *)&qword_1024820B8;
}

void sub_100EB9D50(_Unwind_Exception *a1)
{
}

double sub_100EB9D68()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024820D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024820D0))
  {
    uint64_t v1 = 0x40F5180000000000;
    sub_101A1F180(v2, "VO2MaxPowerBudgetEstimatorZeroBudgetRefreshInterval", &v1, 0);
    qword_1024820C8 = v3;
    __cxa_guard_release(&qword_1024820D0);
  }
  return *(double *)&qword_1024820C8;
}

void sub_100EB9DF0(_Unwind_Exception *a1)
{
}

uint64_t sub_100EB9E08()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024820E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024820E0))
  {
    __int16 v1 = 180;
    sub_100E655AC(v2, "SensitiveWalkingEscalationRulesLookbackTimeInSeconds", &v1, 0);
    word_1024820D8 = v3;
    __cxa_guard_release(&qword_1024820E0);
  }
  return (unsigned __int16)word_1024820D8;
}

void sub_100EB9E8C(_Unwind_Exception *a1)
{
}

uint64_t sub_100EB9EA4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024820F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024820F0))
  {
    __int16 v1 = 120;
    sub_100E655AC(v2, "SensitiveWalkingEscalationRulesActiveTimeInSeconds", &v1, 0);
    word_1024820E8 = v3;
    __cxa_guard_release(&qword_1024820F0);
  }
  return (unsigned __int16)word_1024820E8;
}

void sub_100EB9F28(_Unwind_Exception *a1)
{
}

float sub_100EB9F40()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482100, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482100))
  {
    int v1 = 1072064102;
    sub_101A22680(v2, "SensitiveWalkingEscalationRulesActiveSpeedInMPH", &v1, 0);
    dword_1024820F8 = v3;
    __cxa_guard_release(&qword_102482100);
  }
  return *(float *)&dword_1024820F8;
}

void sub_100EB9FC8(_Unwind_Exception *a1)
{
}

uint64_t sub_100EB9FE0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482110, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482110))
  {
    sub_10044FD20(v1, "VO2MaxDeescalatorMaxEscalationTimeSeconds", &dword_101D952F8, 0);
    dword_102482108 = v2;
    __cxa_guard_release(&qword_102482110);
  }
  return dword_102482108;
}

void sub_100EBA060(_Unwind_Exception *a1)
{
}

uint64_t sub_100EBA078()
{
  return sub_100EB9FE0() + 30;
}

float sub_100EBA094()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482120, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482120))
  {
    sub_101A22680(v1, "VO2MaxDeescalatorMaxPercentBadSamples", &dword_101D952FC, 0);
    dword_102482118 = v2;
    __cxa_guard_release(&qword_102482120);
  }
  return *(float *)&dword_102482118;
}

void sub_100EBA114(_Unwind_Exception *a1)
{
}

uint64_t sub_100EBA12C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482130, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482130))
  {
    unsigned __int8 v1 = 0;
    sub_10006ACBC(v2, "VO2MaxDeescalatorDisableWRCheck", &v1, 0);
    byte_102482128 = v2[1];
    __cxa_guard_release(&qword_102482130);
  }
  return byte_102482128;
}

void sub_100EBA1AC(_Unwind_Exception *a1)
{
}

uint64_t sub_100EBA1C4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482140, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482140))
  {
    unsigned __int8 v1 = 0;
    sub_10006ACBC(v2, "VO2MaxDeescalatorDisableHRCheck", &v1, 0);
    byte_102482138 = v2[1];
    __cxa_guard_release(&qword_102482140);
  }
  return byte_102482138;
}

void sub_100EBA244(_Unwind_Exception *a1)
{
}

uint64_t sub_100EBA25C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482150, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482150))
  {
    unsigned __int8 v1 = 0;
    sub_10006ACBC(v2, "VO2MaxDeescalatorDisableGPSCheck", &v1, 0);
    byte_102482148 = v2[1];
    __cxa_guard_release(&qword_102482150);
  }
  return byte_102482148;
}

void sub_100EBA2DC(_Unwind_Exception *a1)
{
}

uint64_t sub_100EBA2F4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482160, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482160))
  {
    unsigned __int8 v1 = 0;
    sub_10006ACBC(v2, "VO2MaxDeescalatorDisableSessionStatsCheck", &v1, 0);
    byte_102482158 = v2[1];
    __cxa_guard_release(&qword_102482160);
  }
  return byte_102482158;
}

void sub_100EBA374(_Unwind_Exception *a1)
{
}

uint64_t sub_100EBA38C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482170, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482170))
  {
    unsigned __int8 v1 = 0;
    sub_10006ACBC(v2, "VO2MaxDeescalatorDisableIODisambiguationCheck", &v1, 0);
    byte_102482168 = v2[1];
    __cxa_guard_release(&qword_102482170);
  }
  return byte_102482168;
}

void sub_100EBA40C(_Unwind_Exception *a1)
{
}

void sub_100EBA424(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  *(_DWORD *)(a5 + 48) = 0;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  *(double *)(a5 + 16) = a6;
  if (sub_100EBAADC(a2->f64))
  {
    int v11 = 4;
  }
  else
  {
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102300A38);
    }
    int v12 = qword_102418FA8;
    if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Rejection: ModelContinuousWalking missing required feature inputs", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_102300A38);
      }
      int v45 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "SteadinessModel::Result CLMobility::SteadinessModelContinuousWalking::runSteadinessModel(CFAbsoluteTime, const Features &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const", "%s\n", v45);
      if (v45 != (char *)buf) {
        free(v45);
      }
    }
    *(_DWORD *)(a5 + 48) = 8;
    int v11 = 12;
  }
  if (!*(unsigned char *)(a4 + 57)) {
    *(_DWORD *)(a5 + 48) = v11;
  }
  sub_100708114(a1, a5, a3);
  double v13 = sub_100A1CAFC(a2);
  *(double *)(a5 + 24) = v13;
  *(double *)(a5 + 32) = sub_100A1CC08(v13);
  *(void *)(a5 + 40) = v14;
  if (qword_102418FA0 != -1) {
    dispatch_once(&qword_102418FA0, &stru_102300A38);
  }
  int v15 = qword_102418FA8;
  if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEFAULT))
  {
    float64_t v16 = *(double *)(a5 + 32);
    float64_t v17 = *(double *)(a5 + 40);
    float64_t v18 = *(double *)(a5 + 16);
    float64_t v19 = *(double *)(a5 + 24);
    int v20 = *(_DWORD *)(a5 + 48);
    int v21 = *(_DWORD *)(a5 + 8);
    int v22 = *(_DWORD *)(a5 + 12);
    *(_DWORD *)std::string buf = 134350593;
    float64_t v47 = v18;
    __int16 v48 = 2050;
    float64_t v49 = v16;
    __int16 v50 = 2050;
    float64_t v51 = v17;
    __int16 v52 = 2049;
    float64_t v53 = v19;
    __int16 v54 = 1026;
    *(_DWORD *)int v55 = v20;
    *(_WORD *)&v55[4] = 1025;
    *(_DWORD *)&v55[6] = v21;
    LOWORD(v56) = 1025;
    *(_DWORD *)((char *)&v56 + 2) = v22;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "CLMobility::SteadinessModelContinuousWalking::Result,hkEndTime,%{public}.2f,likelihoodOK,%{public}.2f,likelihoodNotOK,%{public}.2f,rawSteadiness,%{private}.2f,rejectionStatus,%{public}d,numValidBouts7Days,%{private}d,numValidBouts28Days,%{private}d", buf, 0x3Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102300A38);
    }
    int v43 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "SteadinessModel::Result CLMobility::SteadinessModelContinuousWalking::runSteadinessModel(CFAbsoluteTime, const Features &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const", "%s\n", v43);
    if (v43 != (char *)buf) {
      free(v43);
    }
  }
  if (qword_102418FA0 != -1) {
    dispatch_once(&qword_102418FA0, &stru_102300A38);
  }
  uint64_t v23 = qword_102418FA8;
  if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEFAULT))
  {
    float64_t v24 = a2->f64[0];
    float64_t v25 = a2->f64[1];
    float64_t v26 = a2[4].f64[0];
    float64_t v27 = a2[4].f64[1];
    float64_t v28 = a2[1].f64[0];
    float64_t v29 = a2[1].f64[1];
    float64_t v31 = a2[3].f64[0];
    float64_t v30 = a2[3].f64[1];
    float64_t v32 = a2[2].f64[0];
    float64_t v33 = a2[2].f64[1];
    float64_t v35 = a2[8].f64[1];
    float64_t v34 = a2[9].f64[0];
    float64_t v36 = a2[6].f64[0];
    float64_t v37 = a2[6].f64[1];
    float64_t v39 = a2[7].f64[1];
    float64_t v38 = a2[8].f64[0];
    float64_t v40 = a2[7].f64[0];
    float64_t v42 = a2[5].f64[0];
    float64_t v41 = a2[5].f64[1];
    *(_DWORD *)std::string buf = 134288129;
    float64_t v47 = v24;
    __int16 v48 = 2049;
    float64_t v49 = v25;
    __int16 v50 = 2049;
    float64_t v51 = v28;
    __int16 v52 = 2049;
    float64_t v53 = v26;
    __int16 v54 = 2049;
    *(float64_t *)int v55 = v27;
    *(_WORD *)&v55[8] = 2049;
    float64_t v56 = v30;
    __int16 v57 = 2049;
    float64_t v58 = v29;
    __int16 v59 = 2049;
    float64_t v60 = v33;
    __int16 v61 = 2049;
    float64_t v62 = v31;
    __int16 v63 = 2049;
    float64_t v64 = v32;
    __int16 v65 = 2049;
    float64_t v66 = v35;
    __int16 v67 = 2049;
    float64_t v68 = v34;
    __int16 v69 = 2049;
    float64_t v70 = v39;
    __int16 v71 = 2049;
    float64_t v72 = v36;
    __int16 v73 = 2049;
    float64_t v74 = v37;
    __int16 v75 = 2049;
    float64_t v76 = v38;
    __int16 v77 = 2049;
    float64_t v78 = v41;
    __int16 v79 = 2049;
    float64_t v80 = v40;
    __int16 v81 = 2049;
    float64_t v82 = v42;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "CLMobility::SteadinessModelContinuousWalking::Features,allBoutsBoutDurationCv,%{private}.2f,allBoutsBoutDurationMedian,%{private}.2f,allBoutsCycleTimeCv,%{private}.2f,intermediateBoutsWalkingSpeedMedian,%{private}.2f,intermediateBoutsWalkingSpeedMedianSqrtheightnorm,%{private}.2f,intermediateBoutsWalkingSpeedCv,%{private}.2f,intermediateBoutsCycleTimeCv,%{private}.2f,intermediateBoutsStepLengthMedian,%{private}.2f,intermediateBoutsStepLengthMedianHeightnorm,%{private}.2f,intermediateBoutsDoubleSupportPercentageMedian,%{private}.2f,shortBoutsWalkingSpeedMedian,%{private}.2f,shortBoutsWalkingSpeedMedianSqrtheightnorm,%{private}.2f,shortBoutsStepLengthMedianHeightnorm,%{private}.2f,shortBoutsCycleTimeMedian,%{private}.2f,shortBoutsDoubleSupportPercentageMedian,%{private}.2f,shortBoutsWalkingSpeedCv,%{private}.2f,shortBoutsCycleTimeCv,%{private}.2f,shortBoutsStepLengthCv,%{private}.2f,longBoutsWalkingSpeedCountRatioLog,%{private}.2f", buf, 0xC0u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102300A38);
    }
    __int16 v44 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "SteadinessModel::Result CLMobility::SteadinessModelContinuousWalking::runSteadinessModel(CFAbsoluteTime, const Features &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const", "%s\n", v44);
    if (v44 != (char *)buf) {
      free(v44);
    }
  }
}

BOOL sub_100EBAADC(double *a1)
{
  return *a1 != -INFINITY
      && a1[1] != -INFINITY
      && a1[2] != -INFINITY
      && a1[3] != -INFINITY
      && a1[4] != -INFINITY
      && a1[5] != -INFINITY
      && a1[6] != -INFINITY
      && a1[7] != -INFINITY
      && a1[8] != -INFINITY
      && a1[9] != -INFINITY
      && a1[10] != -INFINITY
      && a1[11] != -INFINITY
      && a1[12] != -INFINITY
      && a1[13] != -INFINITY
      && a1[14] != -INFINITY
      && a1[15] != -INFINITY
      && a1[16] != -INFINITY
      && a1[17] != -INFINITY
      && a1[18] != -INFINITY;
}

void sub_100EBAC1C(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>)
{
  int64x2_t v7 = vdupq_n_s64(0xFFF0000000000000);
  *(int64x2_t *)a3 = v7;
  *(int64x2_t *)(a3 + 16) = v7;
  *(int64x2_t *)(a3 + 32) = v7;
  *(int64x2_t *)(a3 + 48) = v7;
  *(int64x2_t *)(a3 + 64) = v7;
  *(int64x2_t *)(a3 + 80) = v7;
  *(int64x2_t *)(a3 + 96) = v7;
  *(int64x2_t *)(a3 + 112) = v7;
  *(int64x2_t *)(a3 + 128) = v7;
  *(void *)(a3 + 144) = 0xFFF0000000000000;
  long long v175 = 0;
  uint64_t v176 = 0;
  uint64_t v177 = 0;
  uint64_t v9 = *a1;
  uint64_t v8 = a1[1];
  *(void *)std::string buf = &v175;
  if (v9 == v8)
  {
    int v12 = 0;
    double v13 = 0;
  }
  else
  {
    do
    {
      double v10 = *(double *)(v9 + 8);
      if (v10 < a4 && v10 >= a4 + -2419200.0) {
        sub_100708E0C((void ***)buf, (_OWORD *)v9);
      }
      v9 += 224;
    }
    while (v9 != v8);
    double v13 = (double *)v175;
    int v12 = v176;
  }
  uint64_t v144 = a2;
  std::string __p = 0;
  uint64_t v173 = 0;
  __n128 v174 = 0;
  int v169 = 0;
  double v170 = 0;
  int v171 = 0;
  int v166 = 0;
  uint64_t v167 = 0;
  int v168 = 0;
  long long v163 = 0;
  long long v164 = 0;
  long long v165 = 0;
  double v160 = 0;
  long long v161 = 0;
  long long v162 = 0;
  char v157 = 0;
  int v158 = 0;
  double v159 = 0;
  float64x2_t v154 = 0;
  unint64_t v155 = 0;
  int v156 = 0;
  long long v151 = 0;
  long long v152 = 0;
  float64x2_t v153 = 0;
  float64x2_t v148 = 0;
  double v149 = 0;
  double v150 = 0;
  __n128 v145 = 0;
  int v146 = 0;
  int v147 = 0;
  if (v13 == v12)
  {
    unint64_t v15 = 0;
    unint64_t v14 = 0;
  }
  else
  {
    unint64_t v14 = 0;
    unint64_t v15 = 0;
    do
    {
      double v16 = v13[2] - v13[1];
      if (v16 > 600.0 || v16 <= 60.0)
      {
        int v18 = *((_DWORD *)v13 + 13);
        if (v18) {
          int v19 = 42;
        }
        else {
          int v19 = -1;
        }
        int v20 = v19 & v13[24];
        if (v16 <= 60.0)
        {
          if (!v20)
          {
            float64_t v25 = v155;
            if (v155 >= v156)
            {
              float64_t v33 = (char *)v154;
              uint64_t v34 = (v155 - (unsigned char *)v154) >> 3;
              unint64_t v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 61) {
                goto LABEL_284;
              }
              uint64_t v36 = v156 - (unsigned char *)v154;
              if ((v156 - (unsigned char *)v154) >> 2 > v35) {
                unint64_t v35 = v36 >> 2;
              }
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v37 = v35;
              }
              if (v37)
              {
                float64_t v38 = (char *)sub_1000DA54C((uint64_t)&v156, v37);
                float64_t v33 = (char *)v154;
                float64_t v25 = v155;
              }
              else
              {
                float64_t v38 = 0;
              }
              __int16 v73 = &v38[8 * v34];
              *(double *)__int16 v73 = v13[14];
              float64_t v26 = v73 + 8;
              while (v25 != v33)
              {
                uint64_t v74 = *((void *)v25 - 1);
                v25 -= 8;
                *((void *)v73 - 1) = v74;
                v73 -= 8;
              }
              float64x2_t v154 = v73;
              unint64_t v155 = v26;
              int v156 = &v38[8 * v37];
              if (v33) {
                operator delete(v33);
              }
            }
            else
            {
              *(double *)unint64_t v155 = v13[14];
              float64_t v26 = v25 + 8;
            }
            unint64_t v155 = v26;
            int v18 = *((_DWORD *)v13 + 13);
          }
          if (v18) {
            int v75 = 42;
          }
          else {
            int v75 = -1;
          }
          if ((v75 & *((_DWORD *)v13 + 49)) == 0)
          {
            float64_t v76 = v152;
            if (v152 >= v153)
            {
              float64_t v78 = (char *)v151;
              uint64_t v79 = (v152 - (unsigned char *)v151) >> 3;
              unint64_t v80 = v79 + 1;
              if ((unint64_t)(v79 + 1) >> 61) {
                goto LABEL_284;
              }
              uint64_t v81 = v153 - (unsigned char *)v151;
              if ((v153 - (unsigned char *)v151) >> 2 > v80) {
                unint64_t v80 = v81 >> 2;
              }
              if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v82 = v80;
              }
              if (v82)
              {
                unint64_t v83 = (char *)sub_1000DA54C((uint64_t)&v153, v82);
                float64_t v78 = (char *)v151;
                float64_t v76 = v152;
              }
              else
              {
                unint64_t v83 = 0;
              }
              unint64_t v84 = &v83[8 * v79];
              *(double *)unint64_t v84 = v13[15];
              __int16 v77 = v84 + 8;
              while (v76 != v78)
              {
                uint64_t v85 = *((void *)v76 - 1);
                v76 -= 8;
                *((void *)v84 - 1) = v85;
                v84 -= 8;
              }
              long long v151 = v84;
              long long v152 = v77;
              float64x2_t v153 = &v83[8 * v82];
              if (v78) {
                operator delete(v78);
              }
            }
            else
            {
              *(double *)long long v152 = v13[15];
              __int16 v77 = v76 + 8;
            }
            long long v152 = v77;
            int v18 = *((_DWORD *)v13 + 13);
          }
          if (v18) {
            int v86 = 42;
          }
          else {
            int v86 = -1;
          }
          if ((v86 & v13[25]) == 0)
          {
            unint64_t v87 = v149;
            if (v149 >= v150)
            {
              unint64_t v89 = (char *)v148;
              uint64_t v90 = (v149 - (unsigned char *)v148) >> 3;
              unint64_t v91 = v90 + 1;
              if ((unint64_t)(v90 + 1) >> 61) {
                goto LABEL_284;
              }
              uint64_t v92 = v150 - (unsigned char *)v148;
              if ((v150 - (unsigned char *)v148) >> 2 > v91) {
                unint64_t v91 = v92 >> 2;
              }
              if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v93 = v91;
              }
              if (v93)
              {
                float v94 = (char *)sub_1000DA54C((uint64_t)&v150, v93);
                unint64_t v89 = (char *)v148;
                unint64_t v87 = v149;
              }
              else
              {
                float v94 = 0;
              }
              uint64_t v95 = &v94[8 * v90];
              *(double *)uint64_t v95 = v13[16];
              float v88 = v95 + 8;
              while (v87 != v89)
              {
                uint64_t v96 = *((void *)v87 - 1);
                v87 -= 8;
                *((void *)v95 - 1) = v96;
                v95 -= 8;
              }
              float64x2_t v148 = v95;
              double v149 = v88;
              double v150 = &v94[8 * v93];
              if (v89) {
                operator delete(v89);
              }
            }
            else
            {
              *(double *)double v149 = v13[16];
              float v88 = v87 + 8;
            }
            double v149 = v88;
            int v18 = *((_DWORD *)v13 + 13);
          }
          if (v18) {
            int v97 = 42;
          }
          else {
            int v97 = -1;
          }
          if ((v97 & v13[24]) == 0)
          {
            double v98 = v13[7];
            if (v98 > 0.0)
            {
              float v99 = v146;
              if (v146 >= v147)
              {
                long long v101 = (double *)v145;
                uint64_t v102 = ((char *)v146 - (unsigned char *)v145) >> 3;
                unint64_t v103 = v102 + 1;
                if ((unint64_t)(v102 + 1) >> 61) {
                  goto LABEL_284;
                }
                uint64_t v104 = (char *)v147 - (unsigned char *)v145;
                if (((char *)v147 - (unsigned char *)v145) >> 2 > v103) {
                  unint64_t v103 = v104 >> 2;
                }
                if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v105 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v105 = v103;
                }
                if (v105)
                {
                  long long v106 = (char *)sub_1000DA54C((uint64_t)&v147, v105);
                  long long v101 = (double *)v145;
                  float v99 = v146;
                  double v98 = v13[7];
                }
                else
                {
                  long long v106 = 0;
                }
                long long v109 = (double *)&v106[8 * v102];
                *long long v109 = v98;
                long long v100 = v109 + 1;
                while (v99 != v101)
                {
                  uint64_t v110 = *((void *)v99-- - 1);
                  *((void *)v109-- - 1) = v110;
                }
                __n128 v145 = v109;
                int v146 = v100;
                int v147 = (double *)&v106[8 * v105];
                if (v101) {
                  operator delete(v101);
                }
              }
              else
              {
                double *v146 = v98;
                long long v100 = v99 + 1;
              }
              int v146 = v100;
            }
          }
        }
        else if (!v20)
        {
          ++v14;
        }
      }
      else
      {
        int v21 = *((_DWORD *)v13 + 13);
        if (v21) {
          int v22 = 42;
        }
        else {
          int v22 = -1;
        }
        if ((v22 & v13[24]) == 0)
        {
          uint64_t v23 = v173;
          if (v173 >= v174)
          {
            float64_t v27 = (char *)__p;
            uint64_t v28 = (v173 - (unsigned char *)__p) >> 3;
            unint64_t v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 61) {
              goto LABEL_284;
            }
            uint64_t v30 = v174 - (unsigned char *)__p;
            if ((v174 - (unsigned char *)__p) >> 2 > v29) {
              unint64_t v29 = v30 >> 2;
            }
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v31 = v29;
            }
            if (v31)
            {
              float64_t v32 = (char *)sub_1000DA54C((uint64_t)&v174, v31);
              float64_t v27 = (char *)__p;
              uint64_t v23 = v173;
            }
            else
            {
              float64_t v32 = 0;
            }
            float64_t v39 = &v32[8 * v28];
            *(double *)float64_t v39 = v13[14];
            float64_t v24 = v39 + 8;
            while (v23 != v27)
            {
              uint64_t v40 = *((void *)v23 - 1);
              v23 -= 8;
              *((void *)v39 - 1) = v40;
              v39 -= 8;
            }
            std::string __p = v39;
            uint64_t v173 = v24;
            __n128 v174 = &v32[8 * v31];
            if (v27) {
              operator delete(v27);
            }
          }
          else
          {
            *(double *)uint64_t v173 = v13[14];
            float64_t v24 = v23 + 8;
          }
          uint64_t v173 = v24;
          int v21 = *((_DWORD *)v13 + 13);
        }
        if (v21) {
          int v41 = 42;
        }
        else {
          int v41 = -1;
        }
        if ((v41 & *((_DWORD *)v13 + 49)) == 0)
        {
          float64_t v42 = v170;
          if (v170 >= v171)
          {
            __int16 v44 = (char *)v169;
            uint64_t v45 = (v170 - (unsigned char *)v169) >> 3;
            unint64_t v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 61) {
              goto LABEL_284;
            }
            uint64_t v47 = v171 - (unsigned char *)v169;
            if ((v171 - (unsigned char *)v169) >> 2 > v46) {
              unint64_t v46 = v47 >> 2;
            }
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v48 = v46;
            }
            if (v48)
            {
              float64_t v49 = (char *)sub_1000DA54C((uint64_t)&v171, v48);
              __int16 v44 = (char *)v169;
              float64_t v42 = v170;
            }
            else
            {
              float64_t v49 = 0;
            }
            __int16 v50 = &v49[8 * v45];
            *(double *)__int16 v50 = v13[15];
            int v43 = v50 + 8;
            while (v42 != v44)
            {
              uint64_t v51 = *((void *)v42 - 1);
              v42 -= 8;
              *((void *)v50 - 1) = v51;
              v50 -= 8;
            }
            int v169 = v50;
            double v170 = v43;
            int v171 = &v49[8 * v48];
            if (v44) {
              operator delete(v44);
            }
          }
          else
          {
            *(double *)double v170 = v13[15];
            int v43 = v42 + 8;
          }
          double v170 = v43;
          int v21 = *((_DWORD *)v13 + 13);
        }
        if (v21) {
          int v52 = 42;
        }
        else {
          int v52 = -1;
        }
        if ((v52 & v13[25]) == 0)
        {
          float64_t v53 = v167;
          if (v167 >= v168)
          {
            int v55 = (char *)v166;
            uint64_t v56 = (v167 - (unsigned char *)v166) >> 3;
            unint64_t v57 = v56 + 1;
            if ((unint64_t)(v56 + 1) >> 61) {
              goto LABEL_284;
            }
            uint64_t v58 = v168 - (unsigned char *)v166;
            if ((v168 - (unsigned char *)v166) >> 2 > v57) {
              unint64_t v57 = v58 >> 2;
            }
            if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v59 = v57;
            }
            if (v59)
            {
              float64_t v60 = (char *)sub_1000DA54C((uint64_t)&v168, v59);
              int v55 = (char *)v166;
              float64_t v53 = v167;
            }
            else
            {
              float64_t v60 = 0;
            }
            __int16 v61 = &v60[8 * v56];
            *(double *)__int16 v61 = v13[16];
            __int16 v54 = v61 + 8;
            while (v53 != v55)
            {
              uint64_t v62 = *((void *)v53 - 1);
              v53 -= 8;
              *((void *)v61 - 1) = v62;
              v61 -= 8;
            }
            int v166 = v61;
            uint64_t v167 = v54;
            int v168 = &v60[8 * v59];
            if (v55) {
              operator delete(v55);
            }
          }
          else
          {
            *(double *)uint64_t v167 = v13[16];
            __int16 v54 = v53 + 8;
          }
          uint64_t v167 = v54;
          int v21 = *((_DWORD *)v13 + 13);
        }
        if (v21) {
          int v63 = 42;
        }
        else {
          int v63 = -1;
        }
        if ((v63 & v13[24]) == 0)
        {
          double v64 = v13[7];
          if (v64 > 0.0)
          {
            __int16 v65 = v158;
            if (v158 >= v159)
            {
              __int16 v67 = (double *)v157;
              uint64_t v68 = ((char *)v158 - (unsigned char *)v157) >> 3;
              unint64_t v69 = v68 + 1;
              if ((unint64_t)(v68 + 1) >> 61) {
                goto LABEL_284;
              }
              uint64_t v70 = (char *)v159 - (unsigned char *)v157;
              if (((char *)v159 - (unsigned char *)v157) >> 2 > v69) {
                unint64_t v69 = v70 >> 2;
              }
              if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v71 = v69;
              }
              if (v71)
              {
                float64_t v72 = (char *)sub_1000DA54C((uint64_t)&v159, v71);
                __int16 v67 = (double *)v157;
                __int16 v65 = v158;
                double v64 = v13[7];
              }
              else
              {
                float64_t v72 = 0;
              }
              unint64_t v107 = (double *)&v72[8 * v68];
              double *v107 = v64;
              float64_t v66 = v107 + 1;
              while (v65 != v67)
              {
                uint64_t v108 = *((void *)v65-- - 1);
                *((void *)v107-- - 1) = v108;
              }
              char v157 = v107;
              int v158 = v66;
              double v159 = (double *)&v72[8 * v71];
              if (v67) {
                operator delete(v67);
              }
            }
            else
            {
              *int v158 = v64;
              float64_t v66 = v65 + 1;
            }
            int v158 = v66;
          }
        }
      }
      if (*((_DWORD *)v13 + 9))
      {
        double v111 = v13[2] - v13[1];
        unint64_t v112 = v164;
        if (v164 >= v165)
        {
          uint64_t v114 = (double *)v163;
          uint64_t v115 = ((char *)v164 - (unsigned char *)v163) >> 3;
          unint64_t v116 = v115 + 1;
          if ((unint64_t)(v115 + 1) >> 61) {
            sub_1001D7FD4();
          }
          uint64_t v117 = (char *)v165 - (unsigned char *)v163;
          if (((char *)v165 - (unsigned char *)v163) >> 2 > v116) {
            unint64_t v116 = v117 >> 2;
          }
          if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v118 = v116;
          }
          if (v118)
          {
            long long v119 = (char *)sub_1000DA54C((uint64_t)&v165, v118);
            uint64_t v114 = (double *)v163;
            unint64_t v112 = v164;
          }
          else
          {
            long long v119 = 0;
          }
          long long v120 = (double *)&v119[8 * v115];
          double *v120 = v111;
          uint64_t v113 = v120 + 1;
          while (v112 != v114)
          {
            uint64_t v121 = *((void *)v112-- - 1);
            *((void *)v120-- - 1) = v121;
          }
          long long v163 = v120;
          long long v164 = v113;
          long long v165 = (double *)&v119[8 * v118];
          if (v114) {
            operator delete(v114);
          }
        }
        else
        {
          double *v164 = v111;
          uint64_t v113 = v112 + 1;
        }
        long long v164 = v113;
      }
      int v122 = *((_DWORD *)v13 + 48);
      int v123 = *((_DWORD *)v13 + 13);
      if (v123) {
        int v124 = 42;
      }
      else {
        int v124 = -1;
      }
      if ((v124 & v122) == 0)
      {
        double v125 = v13[7];
        if (v125 > 0.0)
        {
          double v126 = v161;
          if (v161 >= v162)
          {
            double v128 = (double *)v160;
            uint64_t v129 = ((char *)v161 - (unsigned char *)v160) >> 3;
            unint64_t v130 = v129 + 1;
            if ((unint64_t)(v129 + 1) >> 61) {
LABEL_284:
            }
              sub_1001D7FD4();
            uint64_t v131 = (char *)v162 - (unsigned char *)v160;
            if (((char *)v162 - (unsigned char *)v160) >> 2 > v130) {
              unint64_t v130 = v131 >> 2;
            }
            if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v132 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v132 = v130;
            }
            if (v132)
            {
              double v133 = (char *)sub_1000DA54C((uint64_t)&v162, v132);
              double v128 = (double *)v160;
              double v126 = v161;
              double v125 = v13[7];
            }
            else
            {
              double v133 = 0;
            }
            double v134 = (double *)&v133[8 * v129];
            double *v134 = v125;
            double v127 = v134 + 1;
            while (v126 != v128)
            {
              uint64_t v135 = *((void *)v126-- - 1);
              *((void *)v134-- - 1) = v135;
            }
            double v160 = v134;
            long long v161 = v127;
            long long v162 = (double *)&v133[8 * v132];
            if (v128) {
              operator delete(v128);
            }
          }
          else
          {
            double *v161 = v125;
            double v127 = v126 + 1;
          }
          long long v161 = v127;
          int v122 = *((_DWORD *)v13 + 48);
          int v123 = *((_DWORD *)v13 + 13);
        }
      }
      if (v123) {
        int v136 = 42;
      }
      else {
        int v136 = -1;
      }
      if ((v136 & v122) == 0) {
        ++v15;
      }
      v13 += 28;
    }
    while (v13 != v12);
  }
  if (qword_102418FA0 != -1) {
    dispatch_once(&qword_102418FA0, &stru_102300A38);
  }
  double v137 = qword_102418FA8;
  if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 134352384;
    *(double *)&uint8_t buf[4] = a4;
    __int16 v207 = 2050;
    uint64_t v208 = 0x6DB6DB6DB6DB6DB7 * (((char *)v176 - (unsigned char *)v175) >> 5);
    __int16 v209 = 2050;
    uint64_t v210 = (v173 - (unsigned char *)__p) >> 3;
    __int16 v211 = 2050;
    uint64_t v212 = (v170 - (unsigned char *)v169) >> 3;
    __int16 v213 = 2050;
    uint64_t v214 = (v167 - (unsigned char *)v166) >> 3;
    __int16 v215 = 2050;
    uint64_t v216 = ((char *)v164 - (unsigned char *)v163) >> 3;
    __int16 v217 = 2050;
    uint64_t v218 = ((char *)v161 - (unsigned char *)v160) >> 3;
    __int16 v219 = 2050;
    uint64_t v220 = ((char *)v158 - (unsigned char *)v157) >> 3;
    __int16 v221 = 2050;
    uint64_t v222 = (v155 - (unsigned char *)v154) >> 3;
    __int16 v223 = 2050;
    uint64_t v224 = (v152 - (unsigned char *)v151) >> 3;
    __int16 v225 = 2050;
    uint64_t v226 = (v149 - (unsigned char *)v148) >> 3;
    __int16 v227 = 2050;
    uint64_t v228 = ((char *)v146 - (unsigned char *)v145) >> 3;
    __int16 v229 = 2050;
    unint64_t v230 = v14;
    __int16 v231 = 2050;
    unint64_t v232 = v15;
    _os_log_impl((void *)&_mh_execute_header, v137, OS_LOG_TYPE_DEBUG, "SteadinessModelContinuousWalking::extractFeatures,classificationTime,%{public}.2f,numBouts,%{public}lu,numIntermediateWalkingSpeeds,%{public}lu,numIntermediateDST,%{public}lu,numIntermediateStepLengths,%{public}lu,numDurations,%{public}lu,numCycleTimes,%{public}lu,numIntermediateCycleTimes,%{public}lu,numShortWalkingSpeeds,%{public}lu,numShortDST,%{public}lu,numShortStepLengths,%{public}lu,numShortCycleTimes,%{public}lu,numLongBouts,%{public}lu,numAllBouts,%{public}lu", buf, 0x8Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102300A38);
    }
    int v178 = 134352384;
    double v179 = a4;
    __int16 v180 = 2050;
    uint64_t v181 = 0x6DB6DB6DB6DB6DB7 * (((char *)v176 - (unsigned char *)v175) >> 5);
    __int16 v182 = 2050;
    uint64_t v183 = (v173 - (unsigned char *)__p) >> 3;
    __int16 v184 = 2050;
    uint64_t v185 = (v170 - (unsigned char *)v169) >> 3;
    __int16 v186 = 2050;
    uint64_t v187 = (v167 - (unsigned char *)v166) >> 3;
    __int16 v188 = 2050;
    uint64_t v189 = ((char *)v164 - (unsigned char *)v163) >> 3;
    __int16 v190 = 2050;
    uint64_t v191 = ((char *)v161 - (unsigned char *)v160) >> 3;
    __int16 v192 = 2050;
    uint64_t v193 = ((char *)v158 - (unsigned char *)v157) >> 3;
    __int16 v194 = 2050;
    uint64_t v195 = (v155 - (unsigned char *)v154) >> 3;
    __int16 v196 = 2050;
    uint64_t v197 = (v152 - (unsigned char *)v151) >> 3;
    __int16 v198 = 2050;
    uint64_t v199 = (v149 - (unsigned char *)v148) >> 3;
    __int16 v200 = 2050;
    uint64_t v201 = ((char *)v146 - (unsigned char *)v145) >> 3;
    __int16 v202 = 2050;
    unint64_t v203 = v14;
    __int16 v204 = 2050;
    unint64_t v205 = v15;
    double v143 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "Features CLMobility::SteadinessModelContinuousWalking::extractFeatures(CFAbsoluteTime, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const", "%s\n", v143);
    if (v143 != buf) {
      free(v143);
    }
  }
  *(double *)a3 = sub_101136EBC((double **)&v163);
  *(double *)(a3 + 8) = sub_1011370E4((uint64_t *)&v163);
  *(double *)(a3 + 16) = sub_101136EBC((double **)&v160);
  double v138 = sub_1011370E4((uint64_t *)&__p);
  *(double *)(a3 + 64) = v138;
  if (v138 != -INFINITY) {
    *(double *)(a3 + 72) = v138 / sqrtf(*(float *)(v144 + 8) * 9.8067);
  }
  *(double *)(a3 + 56) = sub_101136EBC((double **)&__p);
  *(double *)(a3 + 24) = sub_101136EBC((double **)&v157);
  double v139 = sub_1011370E4((uint64_t *)&v166);
  *(double *)(a3 + 40) = v139;
  if (v139 != -INFINITY) {
    *(double *)(a3 + 48) = v139 / *(float *)(v144 + 8);
  }
  *(double *)(a3 + 32) = sub_1011370E4((uint64_t *)&v169);
  double v140 = sub_1011370E4((uint64_t *)&v154);
  *(double *)(a3 + 136) = v140;
  if (v140 != -INFINITY) {
    *(double *)(a3 + 144) = v140 / sqrtf(*(float *)(v144 + 8) * 9.8067);
  }
  double v141 = sub_1011370E4((uint64_t *)&v148);
  *(double *)(a3 + 120) = v141;
  if (v141 != -INFINITY) {
    *(double *)(a3 + 120) = v141 / *(float *)(v144 + 8);
  }
  *(double *)(a3 + 96) = sub_1011370E4((uint64_t *)&v145);
  *(double *)(a3 + 104) = sub_1011370E4((uint64_t *)&v151);
  *(double *)(a3 + 128) = sub_101136EBC((double **)&v154);
  *(double *)(a3 + 88) = sub_101136EBC((double **)&v145);
  *(double *)(a3 + 112) = sub_101136EBC((double **)&v148);
  if (v15)
  {
    double v142 = (double)v14;
    if (!v14) {
      double v142 = 0.5;
    }
    *(long double *)(a3 + 80) = log(v142 / (double)v15);
  }
  if (v145)
  {
    int v146 = (double *)v145;
    operator delete(v145);
  }
  if (v148)
  {
    double v149 = (char *)v148;
    operator delete(v148);
  }
  if (v151)
  {
    long long v152 = (char *)v151;
    operator delete(v151);
  }
  if (v154)
  {
    unint64_t v155 = (char *)v154;
    operator delete(v154);
  }
  if (v157)
  {
    int v158 = (double *)v157;
    operator delete(v157);
  }
  if (v160)
  {
    long long v161 = (double *)v160;
    operator delete(v160);
  }
  if (v163)
  {
    long long v164 = (double *)v163;
    operator delete(v163);
  }
  if (v166)
  {
    uint64_t v167 = (char *)v166;
    operator delete(v166);
  }
  if (v169)
  {
    double v170 = (char *)v169;
    operator delete(v169);
  }
  if (__p)
  {
    uint64_t v173 = (char *)__p;
    operator delete(__p);
  }
  if (v175)
  {
    uint64_t v176 = (double *)v175;
    operator delete(v175);
  }
}

void sub_100EBBBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53)
{
  if (__p) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  if (a28) {
    operator delete(a28);
  }
  if (a31) {
    operator delete(a31);
  }
  if (a34) {
    operator delete(a34);
  }
  if (a37) {
    operator delete(a37);
  }
  if (a40) {
    operator delete(a40);
  }
  if (a43) {
    operator delete(a43);
  }
  if (a46) {
    operator delete(a46);
  }
  if (a49) {
    operator delete(a49);
  }
  if (a52) {
    operator delete(a52);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EBBC80(id a1)
{
  qword_102418FA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

id *sub_100EBBCB0(id *a1)
{
  if (*a1)
  {

    *a1 = 0;
  }
  return a1;
}

uint64_t sub_100EBBCEC(id *a1, int a2, double *a3, double *a4, double *a5, int a6, double a7, double a8, double a9)
{
  *a3 = a7;
  *a4 = a8;
  *a5 = a9;
  if (a2 == 2) {
    return 2;
  }
  uint64_t result = sub_1003BFEDC(a7, a8);
  if (result)
  {
    uint64_t result = (uint64_t)+[GEOLocationShifter isLocationShiftRequiredForCoordinate:](GEOLocationShifter, "isLocationShiftRequiredForCoordinate:", a7, a8);
    if (result)
    {
      double v21 = a7;
      double v22 = a8;
      double v20 = a9;
      if (!*a1) {
        *a1 = objc_alloc_init((Class)GEOLocationShifter);
      }
      if (a6 >= 1)
      {
        int v18 = 0;
        while (!objc_msgSend(*a1, "shiftCoordinate:accuracy:shiftedCoordinate:shiftedAccuracy:", &v21, &v20, a7, a8, a9))
        {
          if (++v18 >= a6) {
            return 1;
          }
        }
        double v19 = v22;
        *a3 = v21;
        *a4 = v19;
        *a5 = v20;
        return 2;
      }
      return 1;
    }
  }
  return result;
}

BOOL sub_100EBBE00(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v17 = 0.0;
  double v18 = 0.0;
  double v16 = 0.0;
  BOOL result = sub_1000F17A8(a1, &v17, &v18, &v16, a6, a7, 0.0, a8, a9, 0.0);
  if (result)
  {
    uint64_t v15 = 0;
    return sub_10005B848(a1, a2, a3, (double *)&v15, a4, a5, 0.0, v17, v18, v16);
  }
  return result;
}

uint64_t sub_100EBBEB0(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_102300A68;
  *(double *)(a1 + 24) = a4 + 60.0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 16) = CFStringCreateWithFormat(0, 0, @"%s.%lx", a2, a3);
  return a1;
}

uint64_t sub_100EBBF2C(uint64_t a1)
{
  *(void *)a1 = off_102300A68;
  IOPMAssertionID v2 = *(_DWORD *)(a1 + 12);
  if (v2)
  {
    IOPMAssertionRelease(v2);
    *(_DWORD *)(a1 + 12) = 0;
  }
  int v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 16) = 0;
  }

  *(void *)(a1 + 40) = 0;
  return a1;
}

void sub_100EBBFA0(uint64_t a1)
{
  sub_100EBBF2C(a1);

  operator delete();
}

uint64_t sub_100EBBFD8(uint64_t a1, uint64_t *a2)
{
  if (*(int *)(a1 + 8) < 1) {
    goto LABEL_24;
  }
  if (*(double *)(a1 + 24) > 60.0 && CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 32) >= *(double *)(a1 + 24))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102300A88);
    }
    uint64_t v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 16);
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v37 = 2082;
      float64_t v38 = "";
      __int16 v39 = 2114;
      uint64_t v40 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Tried to take power assertion that has already timed out\", \"AssertionIdentifier\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102300A88);
      }
    }
    int v6 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v7 = *(void *)(a1 + 16);
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v37 = 2082;
      float64_t v38 = "";
      __int16 v39 = 2114;
      uint64_t v40 = v7;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Tried to take power assertion that has already timed out", "{\"msg%{public}.0s\":\"Tried to take power assertion that has already timed out\", \"AssertionIdentifier\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  int v8 = *(_DWORD *)(a1 + 8);
  if (v8 < 1)
  {
LABEL_24:
    unint64_t v14 = a2;
    if (*((char *)a2 + 23) < 0) {
      unint64_t v14 = (uint64_t *)*a2;
    }
    CFStringRef v15 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%@(%s)", *(void *)(a1 + 16), v14);
    double v16 = *(double *)(a1 + 24);
    *(_DWORD *)std::string buf = 0;
    if (v16 <= 60.0) {
      IOReturn v17 = IOPMAssertionCreateWithName(@"PreventUserIdleSystemSleep", 0xFFu, v15, (IOPMAssertionID *)buf);
    }
    else {
      IOReturn v17 = IOPMAssertionCreateWithDescription(@"PreventUserIdleSystemSleep", v15, 0, 0, 0, v16, @"TimeoutActionRelease", (IOPMAssertionID *)buf);
    }
    int v18 = *(_DWORD *)buf;
    if (v17) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = *(_DWORD *)buf == 0;
    }
    if (!v19)
    {
      *(_DWORD *)(a1 + 8) = 1;
      *(_DWORD *)(a1 + 12) = v18;
      *(CFAbsoluteTime *)(a1 + 32) = CFAbsoluteTimeGetCurrent();
      if (*((char *)a2 + 23) < 0) {
        a2 = (uint64_t *)*a2;
      }
      *(void *)(a1 + 40) = [[CLOSTransaction alloc] initWithDescription:a2];
    }
    int v20 = *(_DWORD *)(a1 + 8);
    BOOL v13 = v20 > 0;
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102300AA8);
    }
    double v21 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v22 = v20 <= 0 ? "Fail" : "Took";
      sub_1000FECE0(v15, (uint64_t)buf);
      uint64_t v23 = (v40 & 0x80000000) == 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = v22;
      *(_WORD *)&unsigned char __p[12] = 2080;
      *(void *)&__p[14] = v23;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "%s, %s", __p, 0x16u);
      if (SBYTE3(v40) < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102300AA8);
      }
      if (v20 <= 0) {
        float64_t v25 = "Fail";
      }
      else {
        float64_t v25 = "Took";
      }
      sub_1000FECE0(v15, (uint64_t)__p);
      if (__p[23] >= 0) {
        float64_t v26 = __p;
      }
      else {
        float64_t v26 = *(unsigned char **)__p;
      }
      *(_DWORD *)unint64_t v31 = 136315394;
      *(void *)&v31[4] = v25;
      __int16 v32 = 2080;
      float64_t v33 = v26;
      float64_t v27 = (char *)_os_log_send_and_compose_impl();
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPowerAssertion::takePowerAssertion(std::string)", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
    CFRelease(v15);
  }
  else
  {
    *(_DWORD *)(a1 + 8) = v8 + 1;
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102300AA8);
    }
    uint64_t v9 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v10 = *(_DWORD *)(a1 + 8);
      sub_1000FECE0(*(const __CFString **)(a1 + 16), (uint64_t)__p);
      if (__p[23] >= 0) {
        int v11 = __p;
      }
      else {
        int v11 = *(const char **)__p;
      }
      int v12 = a2;
      if (*((char *)a2 + 23) < 0) {
        int v12 = (uint64_t *)*a2;
      }
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v10;
      __int16 v37 = 2080;
      float64_t v38 = v11;
      __int16 v39 = 2080;
      uint64_t v40 = (uint64_t)v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Took, inc ref, %d, %s, thisReason, %s", buf, 0x1Cu);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102300AA8);
      }
      int v28 = *(_DWORD *)(a1 + 8);
      sub_1000FECE0(*(const __CFString **)(a1 + 16), (uint64_t)v31);
      if (v34 >= 0) {
        unint64_t v29 = v31;
      }
      else {
        unint64_t v29 = *(unsigned char **)v31;
      }
      if (*((char *)a2 + 23) < 0) {
        a2 = (uint64_t *)*a2;
      }
      *(_DWORD *)std::string __p = 67109634;
      *(_DWORD *)&__p[4] = v28;
      *(_WORD *)&__p[8] = 2080;
      *(void *)&__p[10] = v29;
      *(_WORD *)&__p[18] = 2080;
      *(void *)&__p[20] = a2;
      uint64_t v30 = (char *)_os_log_send_and_compose_impl();
      if (v34 < 0) {
        operator delete(*(void **)v31);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPowerAssertion::takePowerAssertion(std::string)", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
    return 1;
  }
  return v13;
}

BOOL sub_100EBC6AC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  BOOL v2 = __OFSUB__(v1, 1);
  int v3 = v1 - 1;
  if (v3 < 0 != v2) {
    return 0;
  }
  *(_DWORD *)(a1 + 8) = v3;
  if (v3)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102300AA8);
    }
    uint64_t v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v6 = *(_DWORD *)(a1 + 8);
      sub_1000FECE0(*(const __CFString **)(a1 + 16), (uint64_t)__p);
      uint64_t v7 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Release power assertion, dec ref, %d, %s", buf, 0x12u);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102300AA8);
      }
      int v9 = *(_DWORD *)(a1 + 8);
      sub_1000FECE0(*(const __CFString **)(a1 + 16), (uint64_t)buf);
      if (v21 >= 0) {
        int v10 = buf;
      }
      else {
        int v10 = *(unsigned char **)buf;
      }
      int v22 = 67109378;
      *(_DWORD *)uint64_t v23 = v9;
      *(_WORD *)&v23[4] = 2080;
      *(void *)&v23[6] = v10;
      int v11 = (char *)_os_log_send_and_compose_impl();
      if (v21 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPowerAssertion::releasePowerAssertion()", "%s\n", v11);
      if (v11 != (char *)__p) {
        free(v11);
      }
      return 0;
    }
  }
  else
  {
    IOPMAssertionRelease(*(_DWORD *)(a1 + 12));
    *(_DWORD *)(a1 + 12) = 0;

    *(void *)(a1 + 40) = 0;
    double Current = CFAbsoluteTimeGetCurrent();
    double v13 = *(double *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    if (qword_102419630 != -1)
    {
      double v19 = Current;
      dispatch_once(&qword_102419630, &stru_102300AA8);
      double Current = v19;
    }
    double v14 = Current - v13;
    CFStringRef v15 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      sub_1000FECE0(*(const __CFString **)(a1 + 16), (uint64_t)__p);
      double v16 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v16;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&unsigned char buf[14] = v14;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Release power assertion, %s, heldFor, %.2lf", buf, 0x16u);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102300AA8);
      }
      sub_1000FECE0(*(const __CFString **)(a1 + 16), (uint64_t)buf);
      if (v21 >= 0) {
        IOReturn v17 = buf;
      }
      else {
        IOReturn v17 = *(unsigned char **)buf;
      }
      int v22 = 136315394;
      *(void *)uint64_t v23 = v17;
      *(_WORD *)&v23[8] = 2048;
      *(double *)&unsigned char v23[10] = v14;
      int v18 = (char *)_os_log_send_and_compose_impl();
      if (v21 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPowerAssertion::releasePowerAssertion()", "%s\n", v18);
      if (v18 != (char *)__p) {
        free(v18);
      }
    }
    return 1;
  }
  return result;
}

void sub_100EBCB00(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100EBCB30(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100EBCEFC(id *a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        String = (void *)PBReaderReadString();

        a1[3] = String;
        goto LABEL_30;
      case 2u:
        double v14 = objc_alloc_init(CLCKVO2MaxSessionAttributes);

        a1[2] = v14;
        if (!PBReaderPlaceMark() || (sub_101140F2C((uint64_t)v14, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_29;
      case 3u:
        CFStringRef v15 = objc_alloc_init(CLCKVO2MaxEstimate);

        a1[1] = v15;
        if (!PBReaderPlaceMark() || (sub_100438B14((uint64_t)v15, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_29;
      case 4u:
        double v16 = objc_alloc_init(CLCKVO2MaxSummary);
        [a1 addSummaries:v16];

        if PBReaderPlaceMark() && (sub_100F6B04C((uint64_t)v16, a2))
        {
LABEL_29:
          PBReaderRecallMark();
LABEL_30:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_30;
    }
  }
}

double sub_100EBD890(uint64_t a1)
{
  double result = 7.59982549e15;
  *(_OWORD *)a1 = xmmword_101D95330;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_100EBD8A4(uint64_t result, float a2)
{
  float v2 = *(float *)result;
  if (*(float *)result >= 65.0) {
    int v3 = 1;
  }
  else {
    int v3 = 4;
  }
  *(_DWORD *)(result + 16) = v3;
  *(float *)(result + 4) = a2;
  *(float *)(result + 8) = fminf(v2, 65.0);
  *(float *)(result + 12) = a2;
  return result;
}

float sub_100EBD8D0(uint64_t a1, float a2)
{
  *(float *)a1 = a2;
  int v2 = *(_DWORD *)(a1 + 4);
  if (a2 >= 65.0) {
    int v3 = 1;
  }
  else {
    int v3 = 4;
  }
  *(_DWORD *)(a1 + 16) = v3;
  float result = fminf(a2, 65.0);
  *(float *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 12) = v2;
  return result;
}

uint64_t sub_100EBD8FC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  *(void *)a1 = off_102300AD8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  if (*(char *)(a3 + 39) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 24), *(void **)(a3 + 16), *(void *)(a3 + 24));
  }
  else
  {
    long long v10 = *(_OWORD *)(a3 + 16);
    *(void *)(a1 + 40) = *(void *)(a3 + 32);
    *(_OWORD *)(a1 + 24) = v10;
  }
  sub_1006AC1AC(a1 + 48, (void *)(a3 + 40));
  *(unsigned char *)(a1 + 96) = a4;
  *(void *)(a1 + 104) = a5;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 468) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 488) = 1;
  sub_100EBDAC4(a1, (unsigned __int8 *)a2);
  long long v11 = *(_OWORD *)(a2 + 144);
  long long v25 = *(_OWORD *)(a2 + 128);
  long long v26 = v11;
  uint64_t v27 = *(void *)(a2 + 160);
  long long v12 = *(_OWORD *)(a2 + 80);
  long long v21 = *(_OWORD *)(a2 + 64);
  long long v22 = v12;
  long long v13 = *(_OWORD *)(a2 + 112);
  long long v23 = *(_OWORD *)(a2 + 96);
  long long v24 = v13;
  long long v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uu1 = *(_OWORD *)a2;
  long long v18 = v14;
  long long v15 = *(_OWORD *)(a2 + 48);
  long long v19 = *(_OWORD *)(a2 + 32);
  long long v20 = v15;
  sub_100EBE058(a1, uu1);
  sub_100EBE614(a1, *(void *)(a2 + 48));
  return a1;
}

void sub_100EBDA8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(char *)(v10 + 47) < 0) {
    operator delete(*v11);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100EBDAC4(uint64_t a1, unsigned __int8 *uu2)
{
  unint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  unint64_t v7 = (void *)(v5 + 8 * (v4 / 0x18));
  if (v6 == v5)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v8 = *(void *)(v5 + 8 * (v4 / 0x18)) + 168 * (v4 % 0x18);
    unint64_t v9 = *(void *)(v5 + 8 * ((*(void *)(a1 + 88) + v4) / 0x18)) + 168 * ((*(void *)(a1 + 88) + v4) % 0x18);
    if (v8 != v9)
    {
      while (1)
      {
        long long v10 = *(_OWORD *)v8;
        long long v11 = *(_OWORD *)(v8 + 32);
        long long v49 = *(_OWORD *)(v8 + 16);
        long long v50 = v11;
        *(_OWORD *)uu1 = v10;
        long long v12 = *(_OWORD *)(v8 + 48);
        long long v13 = *(_OWORD *)(v8 + 64);
        long long v14 = *(_OWORD *)(v8 + 96);
        long long v53 = *(_OWORD *)(v8 + 80);
        long long v54 = v14;
        long long v51 = v12;
        long long v52 = v13;
        long long v15 = *(_OWORD *)(v8 + 112);
        long long v16 = *(_OWORD *)(v8 + 128);
        long long v17 = *(_OWORD *)(v8 + 144);
        uint64_t v58 = *(void *)(v8 + 160);
        long long v56 = v16;
        long long v57 = v17;
        long long v55 = v15;
        if (!uuid_compare(uu1, uu2)) {
          break;
        }
        v8 += 168;
        if (v8 - *v7 == 4032)
        {
          unint64_t v18 = v7[1];
          ++v7;
          unint64_t v8 = v18;
        }
        if (v8 == v9)
        {
          unint64_t v8 = v9;
          break;
        }
      }
      unint64_t v4 = *(void *)(a1 + 80);
      uint64_t v5 = *(void *)(a1 + 56);
      uint64_t v6 = *(void *)(a1 + 64);
    }
  }
  unint64_t v19 = v4 + *(void *)(a1 + 88);
  long long v20 = *(_OWORD *)uu2;
  long long v21 = *((_OWORD *)uu2 + 1);
  *(_OWORD *)(a1 + 168) = *((_OWORD *)uu2 + 2);
  *(_OWORD *)(a1 + 152) = v21;
  *(_OWORD *)(a1 + 136) = v20;
  long long v22 = *((_OWORD *)uu2 + 3);
  long long v23 = *((_OWORD *)uu2 + 4);
  long long v24 = *((_OWORD *)uu2 + 5);
  *(_OWORD *)(a1 + 232) = *((_OWORD *)uu2 + 6);
  *(_OWORD *)(a1 + 216) = v24;
  *(_OWORD *)(a1 + 200) = v23;
  *(_OWORD *)(a1 + 184) = v22;
  long long v25 = *((_OWORD *)uu2 + 7);
  long long v26 = *((_OWORD *)uu2 + 9);
  uint64_t v27 = *((void *)uu2 + 20);
  *(_OWORD *)(a1 + 264) = *((_OWORD *)uu2 + 8);
  *(_OWORD *)(a1 + 280) = v26;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(void *)(a1 + 296) = v27;
  *(_OWORD *)(a1 + 248) = v25;
  *(void *)(a1 + 472) = 0;
  int v28 = (uint64_t *)(v5 + 8 * (v19 / 0x18));
  *(_OWORD *)(a1 + 312) = 0u;
  if (v6 == v5)
  {
    if (!v8) {
      goto LABEL_17;
    }
    unint64_t v30 = 0;
    uint64_t v29 = *v28;
  }
  else
  {
    uint64_t v29 = *v28;
    unint64_t v30 = *v28 + 168 * (v19 % 0x18);
    if (v8 == v30)
    {
LABEL_17:
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102300B00);
      }
      char v34 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uu1 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "CLWorkoutSeriesDetectionModelController, confirmed workout is not in workout user prior list for auto-detection", uu1, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(uu1, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_102300B00);
        }
        uint64_t v36 = (unsigned __int8 *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutSeriesDetectionModelController::updateWorkingModelsFromUserPrior(const CLMotionStateMediator_Type::WorkoutSettings &)", "%s\n");
LABEL_37:
        if (v36 != uu1) {
          free(v36);
        }
        return result;
      }
      return result;
    }
  }
  uint64_t v31 = v30 - v29;
  unint64_t v32 = 0xCF3CF3CF3CF3CF3DLL * (v31 >> 3);
  if (v31 < 169) {
    unint64_t v33 = v28[-((24 - v32) / 0x18)] + 168 * (24 * ((24 - v32) / 0x18) - (24 - v32)) + 3864;
  }
  else {
    unint64_t v33 = v28[(v32 - 1) / 0x18] + 168 * ((v32 - 1) % 0x18);
  }
  if (v8 == v33)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102300B00);
    }
    uint64_t v40 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uu1 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesDetectionModelController, confirmed workout is the last workout in user prior list", uu1, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(uu1, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102300B00);
      }
      uint64_t v36 = (unsigned __int8 *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesDetectionModelController::updateWorkingModelsFromUserPrior(const CLMotionStateMediator_Type::WorkoutSettings &)", "%s\n");
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t v37 = v8 - *v7;
    unint64_t v38 = 0xCF3CF3CF3CF3CF3DLL * (v37 >> 3);
    if (v37 < -167) {
      unint64_t v39 = v7[-((22 - v38) / 0x18)] + 168 * (24 * ((22 - v38) / 0x18) - (22 - v38)) + 3864;
    }
    else {
      unint64_t v39 = v7[(v38 + 1) / 0x18] + 168 * ((v38 + 1) % 0x18);
    }
    long long v41 = *(_OWORD *)v39;
    long long v42 = *(_OWORD *)(v39 + 32);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(v39 + 16);
    *(_OWORD *)(a1 + 344) = v42;
    *(_OWORD *)(a1 + 312) = v41;
    long long v43 = *(_OWORD *)(v39 + 48);
    long long v44 = *(_OWORD *)(v39 + 64);
    long long v45 = *(_OWORD *)(v39 + 96);
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(v39 + 80);
    *(_OWORD *)(a1 + 408) = v45;
    *(_OWORD *)(a1 + 360) = v43;
    *(_OWORD *)(a1 + 376) = v44;
    __n128 result = *(__n128 *)(v39 + 112);
    long long v46 = *(_OWORD *)(v39 + 128);
    long long v47 = *(_OWORD *)(v39 + 144);
    *(void *)(a1 + 472) = *(void *)(v39 + 160);
    *(_OWORD *)(a1 + 440) = v46;
    *(_OWORD *)(a1 + 456) = v47;
    *(__n128 *)(a1 + 424) = result;
  }
  return result;
}

void sub_100EBE058(uint64_t a1, unsigned __int8 *uu1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    long long v4 = *(_OWORD *)(a1 + 248);
    uint64_t v57 = *(void *)(a1 + 296);
    long long v5 = *(_OWORD *)(a1 + 184);
    long long v6 = *(_OWORD *)(a1 + 216);
    long long v51 = *(_OWORD *)(a1 + 200);
    long long v52 = v6;
    long long v53 = *(_OWORD *)(a1 + 232);
    long long v54 = v4;
    long long v7 = *(_OWORD *)(a1 + 152);
    *(_OWORD *)uu2 = *(_OWORD *)(a1 + 136);
    long long v48 = v7;
    long long v49 = *(_OWORD *)(a1 + 168);
    long long v50 = v5;
    long long v8 = *(_OWORD *)(a1 + 280);
    long long v55 = *(_OWORD *)(a1 + 264);
    long long v56 = v8;
    long long v9 = *(_OWORD *)(a1 + 456);
    long long v44 = *(_OWORD *)(a1 + 440);
    long long v45 = v9;
    uint64_t v46 = *(void *)(a1 + 472);
    long long v10 = *(_OWORD *)(a1 + 392);
    long long v40 = *(_OWORD *)(a1 + 376);
    long long v41 = v10;
    long long v11 = *(_OWORD *)(a1 + 408);
    long long v43 = *(_OWORD *)(a1 + 424);
    long long v42 = v11;
    long long v12 = *(_OWORD *)(a1 + 328);
    *(_OWORD *)uint64_t v36 = *(_OWORD *)(a1 + 312);
    long long v37 = v12;
    long long v13 = *(_OWORD *)(a1 + 344);
    long long v39 = *(_OWORD *)(a1 + 360);
    long long v38 = v13;
    int v14 = uuid_compare(uu1, uu2);
    uint64_t v15 = *((void *)uu1 + 6);
    BOOL v16 = v15 != 14;
    if (*((void *)uu1 + 8) == (void)v51)
    {
      BOOL v16 = 1;
      BOOL v17 = 1;
    }
    else
    {
      BOOL v17 = v15 != 19;
    }
    BOOL v18 = v15 == (void)v50 && v16;
    if (v18 && v17 || !v14)
    {
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102300B00);
      }
      uint64_t v27 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 134218240;
        uint64_t v33 = v50;
        __int16 v34 = 2048;
        uint64_t v35 = v39;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesDetectionModelController, workout matches current model, high sensitivity for current model and medium sensitivity for  queued model, currentModel, %ld, queuedModel, %ld", buf, 0x16u);
      }
      int v25 = 2;
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_102300B00);
        }
        uint64_t v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesDetectionModelController::updateModelSensitivities(const CLMotionStateMediator_Type::WorkoutSettings)", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
      }
      int v26 = 1;
    }
    else
    {
      int v19 = uuid_compare(uu1, v36);
      uint64_t v20 = *((void *)uu1 + 6);
      BOOL v21 = v20 != 14;
      if (*((void *)uu1 + 8) == (void)v40)
      {
        BOOL v21 = 1;
        BOOL v22 = 1;
      }
      else
      {
        BOOL v22 = v20 != 19;
      }
      BOOL v23 = v20 == (void)v39 && v21;
      if (v23 && v22 || !v19)
      {
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_102300B00);
        }
        int v28 = qword_1024191C8;
        if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 134217984;
          uint64_t v33 = v39;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesDetectionModelController, workout matches queued model, high sensitivity for queued model, queuedModel, %ld", buf, 0xCu);
        }
        int v26 = 2;
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_102300B00);
          }
          uint64_t v31 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesDetectionModelController::updateModelSensitivities(const CLMotionStateMediator_Type::WorkoutSettings)", "%s\n", v31);
          if (v31 != (char *)buf) {
            free(v31);
          }
          int v25 = 0;
          int v26 = 2;
        }
        else
        {
          int v25 = 0;
        }
      }
      else
      {
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_102300B00);
        }
        long long v24 = qword_1024191C8;
        if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesDetectionModelController, workout does not match current or queued workouts, low sensitivity for all models", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_102300B00);
          }
          unint64_t v30 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesDetectionModelController::updateModelSensitivities(const CLMotionStateMediator_Type::WorkoutSettings)", "%s\n", v30);
          if (v30 != (char *)buf) {
            free(v30);
          }
        }
        int v25 = 0;
        int v26 = 0;
      }
    }
    *(_DWORD *)(a1 + 304) = v25;
    *(_DWORD *)(a1 + 480) = v26;
  }
  else
  {
    *(_DWORD *)(a1 + 304) = 0;
    *(_DWORD *)(a1 + 480) = 0;
  }
  sub_100EC00C0(a1);
}

void sub_100EBE614(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)(a1 + 112);
  long long v5 = *(void **)(a1 + 120);
  if (v4 == v5)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102300B00);
    }
    long long v6 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesDetectionModelController, bringing up workout detection models", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102300B00);
      }
      long long v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesDetectionModelController::bringupModels(CMWorkoutType)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    operator new();
  }
  while (v4 != v5)
  {
    (*(void (**)(void, uint64_t))(*(void *)*v4 + 16))(*v4, a2);
    ++v4;
  }
  sub_100EC00C0(a1);
}

void sub_100EBEC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100EC096C((void **)va);
  _Unwind_Resume(a1);
}

void sub_100EBECD8(void *a1, uint64_t a2, int a3)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102300B00);
  }
  long long v6 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a2 + 112);
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v30 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesDetectionModelController, receieved client workout confirmation, activeWorkout,%ld", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102300B00);
    }
    uint64_t v14 = *(void *)(a2 + 112);
    int v27 = 134217984;
    uint64_t v28 = v14;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesDetectionModelController::onWorkoutConfirmedEvent(const CLMotionStateMediator_Type::WorkoutEvent &, BOOL)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  sub_100EBDAC4((uint64_t)a1, (unsigned __int8 *)(a2 + 64));
  long long v8 = *(_OWORD *)(a2 + 208);
  long long v24 = *(_OWORD *)(a2 + 192);
  long long v25 = v8;
  uint64_t v26 = *(void *)(a2 + 224);
  long long v9 = *(_OWORD *)(a2 + 144);
  long long v20 = *(_OWORD *)(a2 + 128);
  long long v21 = v9;
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v22 = *(_OWORD *)(a2 + 160);
  long long v23 = v10;
  long long v11 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)uu1 = *(_OWORD *)(a2 + 64);
  long long v17 = v11;
  long long v12 = *(_OWORD *)(a2 + 112);
  long long v18 = *(_OWORD *)(a2 + 96);
  long long v19 = v12;
  sub_100EBE058((uint64_t)a1, uu1);
  if (a3)
  {
    uint64_t v13 = *(void *)(a2 + 112);
    sub_100EC049C(a1);
    sub_100EBE614((uint64_t)a1, v13);
  }
}

void sub_100EBEF04(void *a1, int a2)
{
  if (a2)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102300B00);
    }
    int v3 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesDetectionModelController, transition, resetting workout detection models", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102300B00);
      }
      long long v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesDetectionModelController::onTransitionConfirmedEvent(BOOL)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    sub_100EC049C(a1);
    sub_100EBE614((uint64_t)a1, 33);
  }
}

void sub_100EBF0B0(void *a1, uint64_t a2)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102300B00);
  }
  long long v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a2 + 112);
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v28 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesDetectionModelController, detected new segment, resetting models, activeWorkout,%ld", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102300B00);
    }
    uint64_t v12 = *(void *)(a2 + 112);
    int v25 = 134217984;
    uint64_t v26 = v12;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesDetectionModelController::onSegmentDetectionEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  if (*(void *)(a2 + 112) == 33)
  {
    uint64_t v6 = 33;
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 208);
    long long v22 = *(_OWORD *)(a2 + 192);
    long long v23 = v7;
    uint64_t v24 = *(void *)(a2 + 224);
    long long v8 = *(_OWORD *)(a2 + 144);
    long long v18 = *(_OWORD *)(a2 + 128);
    long long v19 = v8;
    long long v9 = *(_OWORD *)(a2 + 176);
    long long v20 = *(_OWORD *)(a2 + 160);
    long long v21 = v9;
    long long v10 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)uu1 = *(_OWORD *)(a2 + 64);
    long long v15 = v10;
    long long v11 = *(_OWORD *)(a2 + 112);
    long long v16 = *(_OWORD *)(a2 + 96);
    long long v17 = v11;
    sub_100EBE058((uint64_t)a1, uu1);
    uint64_t v6 = *(void *)(a2 + 112);
  }
  sub_100EC049C(a1);
  sub_100EBE614((uint64_t)a1, v6);
}

void sub_100EBF2DC(uint64_t a1@<X0>, uint64_t **a2@<X1>, void **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  long long v80 = *(_OWORD *)(a1 + 136);
  long long v81 = *(_OWORD *)(a1 + 152);
  long long v82 = *(_OWORD *)(a1 + 168);
  uint64_t v4 = *(void *)(a1 + 184);
  uint64_t v54 = *(void *)(a1 + 192);
  uint64_t v50 = *(void *)(a1 + 208);
  uint64_t v51 = *(void *)(a1 + 200);
  long long v76 = *(_OWORD *)(a1 + 248);
  long long v77 = *(_OWORD *)(a1 + 264);
  long long v78 = *(_OWORD *)(a1 + 280);
  uint64_t v79 = *(void *)(a1 + 296);
  long long v74 = *(_OWORD *)(a1 + 216);
  long long v75 = *(_OWORD *)(a1 + 232);
  long long v71 = *(_OWORD *)(a1 + 312);
  long long v72 = *(_OWORD *)(a1 + 328);
  long long v73 = *(_OWORD *)(a1 + 344);
  uint64_t v5 = *(void *)(a1 + 360);
  uint64_t v52 = *(void *)(a1 + 368);
  uint64_t v46 = *(void *)(a1 + 384);
  uint64_t v47 = *(void *)(a1 + 376);
  long long v67 = *(_OWORD *)(a1 + 424);
  long long v68 = *(_OWORD *)(a1 + 440);
  long long v69 = *(_OWORD *)(a1 + 456);
  uint64_t v70 = *(void *)(a1 + 472);
  long long v65 = *(_OWORD *)(a1 + 392);
  long long v66 = *(_OWORD *)(a1 + 408);
  uint64_t v6 = *a2;
  long long v55 = a2[1];
  if (*a2 != v55)
  {
    uint64_t v48 = (uint64_t)(a3 + 2);
    __asm { FMOV            V0.2D, #-1.0 }
    long long v53 = _Q0;
    while (1)
    {
      int v12 = *((_DWORD *)v6 + 5);
      if (v12) {
        break;
      }
LABEL_31:
      v6 += 4;
      if (v6 == v55) {
        return;
      }
    }
    long long v62 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    uint64_t v61 = 0;
    if (v12 == 2) {
      uint64_t v13 = 20;
    }
    else {
      uint64_t v13 = 21;
    }
    uint64_t v14 = *v6;
    if (sub_101014448(v6[3], v54) == v4)
    {
      uint64_t v15 = v4;
      uint64_t v16 = v51;
      long long v62 = v80;
      long long v63 = v81;
      long long v64 = v82;
      long long v58 = v76;
      long long v59 = v77;
      long long v60 = v78;
      uint64_t v61 = v79;
      long long v17 = v74;
      long long v18 = v75;
      uint64_t v19 = v54;
      uint64_t v20 = v50;
    }
    else
    {
      if (sub_101014448(v6[3], v52) != v5)
      {
        uint64_t v29 = v6[3];
        uint64_t v19 = sub_100EBF79C((void *)a1, v29);
        uint64_t v15 = sub_101014448(v29, v19);
        if (v15 == 19)
        {
          uint64_t v16 = sub_100EBF8EC((void *)a1, v19);
          uint64_t v20 = v30;
          uint64_t v15 = 19;
        }
        else
        {
          uint64_t v16 = 0;
          uint64_t v20 = 0;
        }
        goto LABEL_12;
      }
      uint64_t v15 = v5;
      uint64_t v19 = v52;
      long long v62 = v71;
      long long v63 = v72;
      long long v64 = v73;
      long long v58 = v67;
      long long v59 = v68;
      long long v60 = v69;
      uint64_t v61 = v70;
      long long v17 = v65;
      long long v18 = v66;
      uint64_t v20 = v46;
      uint64_t v16 = v47;
    }
    long long v56 = v17;
    long long v57 = v18;
LABEL_12:
    long long v21 = (char *)a3[1];
    long long v22 = (char *)a3[2];
    if (v21 >= v22)
    {
      uint64_t v24 = 0x34F72C234F72C235 * ((v21 - (unsigned char *)*a3) >> 3);
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) > 0x11A7B9611A7B961) {
        sub_1001D7FD4();
      }
      unint64_t v26 = 0x34F72C234F72C235 * ((v22 - (unsigned char *)*a3) >> 3);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x8D3DCB08D3DCB0) {
        unint64_t v27 = 0x11A7B9611A7B961;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27) {
        uint64_t v28 = (char *)sub_100EC0770(v48, v27);
      }
      else {
        uint64_t v28 = 0;
      }
      uint64_t v31 = &v28[232 * v24];
      *(_OWORD *)uint64_t v31 = v53;
      *((void *)v31 + 2) = v13;
      *((void *)v31 + 3) = v14;
      *((_OWORD *)v31 + 4) = v62;
      *((_OWORD *)v31 + 5) = v63;
      *((_OWORD *)v31 + 6) = v64;
      *((_OWORD *)v31 + 2) = 0u;
      *((_OWORD *)v31 + 3) = 0u;
      *((void *)v31 + 14) = v15;
      *((void *)v31 + 15) = v19;
      *((void *)v31 + 16) = v16;
      *((void *)v31 + 17) = v20;
      *((_OWORD *)v31 + 9) = v56;
      *((_OWORD *)v31 + 10) = v57;
      *((void *)v31 + 28) = v61;
      *((_OWORD *)v31 + 12) = v59;
      *((_OWORD *)v31 + 13) = v60;
      *((_OWORD *)v31 + 11) = v58;
      uint64_t v33 = (char *)*a3;
      unint64_t v32 = (char *)a3[1];
      __int16 v34 = v31;
      if (v32 != *a3)
      {
        do
        {
          long long v35 = *(_OWORD *)(v32 - 232);
          long long v36 = *(_OWORD *)(v32 - 216);
          *(_OWORD *)(v34 - 200) = *(_OWORD *)(v32 - 200);
          *(_OWORD *)(v34 - 216) = v36;
          *(_OWORD *)(v34 - 232) = v35;
          long long v37 = *(_OWORD *)(v32 - 184);
          long long v38 = *(_OWORD *)(v32 - 168);
          long long v39 = *(_OWORD *)(v32 - 152);
          *(_OWORD *)(v34 - 136) = *(_OWORD *)(v32 - 136);
          *(_OWORD *)(v34 - 152) = v39;
          *(_OWORD *)(v34 - 168) = v38;
          *(_OWORD *)(v34 - 184) = v37;
          long long v40 = *(_OWORD *)(v32 - 120);
          long long v41 = *(_OWORD *)(v32 - 104);
          long long v42 = *(_OWORD *)(v32 - 88);
          *(_OWORD *)(v34 - 72) = *(_OWORD *)(v32 - 72);
          *(_OWORD *)(v34 - 88) = v42;
          *(_OWORD *)(v34 - 104) = v41;
          *(_OWORD *)(v34 - 120) = v40;
          long long v43 = *(_OWORD *)(v32 - 56);
          long long v44 = *(_OWORD *)(v32 - 40);
          long long v45 = *(_OWORD *)(v32 - 24);
          *((void *)v34 - 1) = *((void *)v32 - 1);
          *(_OWORD *)(v34 - 24) = v45;
          *(_OWORD *)(v34 - 40) = v44;
          *(_OWORD *)(v34 - 56) = v43;
          v34 -= 232;
          v32 -= 232;
        }
        while (v32 != v33);
        unint64_t v32 = v33;
      }
      long long v23 = v31 + 232;
      *a3 = v34;
      a3[1] = v31 + 232;
      a3[2] = &v28[232 * v27];
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      *(_OWORD *)long long v21 = v53;
      *((void *)v21 + 2) = v13;
      *((void *)v21 + 3) = v14;
      *((_OWORD *)v21 + 4) = v62;
      *((_OWORD *)v21 + 5) = v63;
      *((_OWORD *)v21 + 6) = v64;
      *((_OWORD *)v21 + 2) = 0u;
      *((_OWORD *)v21 + 3) = 0u;
      *((void *)v21 + 14) = v15;
      *((void *)v21 + 15) = v19;
      *((void *)v21 + 16) = v16;
      *((void *)v21 + 17) = v20;
      *((_OWORD *)v21 + 9) = v56;
      *((_OWORD *)v21 + 10) = v57;
      *((void *)v21 + 28) = v61;
      long long v23 = v21 + 232;
      *((_OWORD *)v21 + 12) = v59;
      *((_OWORD *)v21 + 13) = v60;
      *((_OWORD *)v21 + 11) = v58;
    }
    a3[1] = v23;
    goto LABEL_31;
  }
}

void sub_100EBF774(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EBF79C(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[10];
  uint64_t v3 = a1[7];
  uint64_t v4 = a1[8];
  uint64_t v5 = (void *)(v3 + 8 * (v2 / 0x18));
  if (v4 == v3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = (void *)(*v5 + 168 * (v2 % 0x18));
  }
  int v7 = 0;
  int v8 = 0;
  int v9 = 0;
  int v10 = 0;
LABEL_5:
  long long v11 = v6 - 504;
  while (1)
  {
    unint64_t v12 = v4 == v3 ? 0 : *(void *)(v3 + 8 * ((a1[11] + v2) / 0x18)) + 168 * ((a1[11] + v2) % 0x18);
    if (v6 == (void *)v12) {
      break;
    }
    uint64_t v13 = v6[6];
    if (v13 == 19)
    {
      int v14 = a2 == 19;
      uint64_t v15 = v6[8];
      int v16 = v15 == 0;
      if (v15) {
        int v17 = 0;
      }
      else {
        int v17 = a2 == 19;
      }
      BOOL v18 = v15 == 1;
    }
    else
    {
      int v14 = v13 == a2;
      uint64_t v19 = v6[7];
      int v16 = v19 == 1;
      if (v19 == 1) {
        int v17 = v14;
      }
      else {
        int v17 = 0;
      }
      BOOL v18 = v19 == 2;
    }
    int v20 = v18;
    if (!v18) {
      int v14 = 0;
    }
    v10 += v17;
    v9 += v20;
    v8 += v16;
    v7 += v14;
    v11 += 21;
    v6 += 21;
    if ((void *)*v5 == v11)
    {
      long long v21 = (void *)v5[1];
      ++v5;
      uint64_t v6 = v21;
      goto LABEL_5;
    }
  }
  if (v10 && !v7) {
    return 1;
  }
  if (!v10 && v7) {
    return 2;
  }
  if (v8 && !v9) {
    return 1;
  }
  if (v9) {
    BOOL v23 = v8 == 0;
  }
  else {
    BOOL v23 = 0;
  }
  if (v23) {
    return 2;
  }
  else {
    return 0;
  }
}

uint64_t sub_100EBF8EC(void *a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 1) > 1) {
    return 1;
  }
  uint64_t result = (uint64_t)+[CMWorkout CMSwimWorkoutLocationFromCMWorkoutLocationType:a2];
  if (!result)
  {
    sub_100EC0644(a1);
    return 0;
  }
  return result;
}

void sub_100EBF954(uint64_t a1@<X0>, char **a2@<X8>)
{
  void (****v2)(long long *__return_ptr);
  void (****v3)(long long *__return_ptr);
  uint64_t v5;
  unint64_t v6;
  char *v7;
  long long v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  long long v16;
  char *v17;
  char *v18;
  long long v19;
  char *v20;
  long long v21;
  long long v22;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v2 = *(void (*****)(long long *__return_ptr))(a1 + 112);
  uint64_t v3 = *(void (*****)(long long *__return_ptr))(a1 + 120);
  if (v2 != v3)
  {
    uint64_t v5 = (uint64_t)(a2 + 2);
    do
    {
      (***v2)(&v21);
      int v7 = a2[1];
      uint64_t v6 = (unint64_t)a2[2];
      if ((unint64_t)v7 >= v6)
      {
        int v10 = *a2;
        long long v11 = (v7 - *a2) >> 5;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 59) {
          sub_1001D7FD4();
        }
        uint64_t v13 = v6 - (void)v10;
        if (v13 >> 4 > v12) {
          unint64_t v12 = v13 >> 4;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0) {
          int v14 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          int v14 = v12;
        }
        if (v14)
        {
          uint64_t v15 = (char *)sub_1001D9EDC(v5, v14);
          int v10 = *a2;
          int v7 = a2[1];
        }
        else
        {
          uint64_t v15 = 0;
        }
        int v16 = v22;
        int v17 = &v15[32 * v11];
        *(_OWORD *)int v17 = v21;
        *((_OWORD *)v17 + 1) = v16;
        if (v7 == v10)
        {
          int v20 = &v15[32 * v11];
        }
        else
        {
          BOOL v18 = &v15[32 * v11];
          do
          {
            uint64_t v19 = *((_OWORD *)v7 - 1);
            int v20 = v18 - 32;
            *((_OWORD *)v18 - 2) = *((_OWORD *)v7 - 2);
            *((_OWORD *)v18 - 1) = v19;
            v7 -= 32;
            v18 -= 32;
          }
          while (v7 != v10);
        }
        int v9 = v17 + 32;
        *a2 = v20;
        a2[1] = v17 + 32;
        a2[2] = &v15[32 * v14];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        int v8 = v22;
        *(_OWORD *)int v7 = v21;
        *((_OWORD *)v7 + 1) = v8;
        int v9 = v7 + 32;
      }
      a2[1] = v9;
      ++v2;
    }
    while (v2 != v3);
  }
}

void sub_100EBFAC4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EBFAE4(void *a1@<X0>, uint64_t a2@<X8>)
{
  long long v78 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v35 = 0u;
  long long v76 = 0u;
  uint64_t v77 = 0;
  long long v4 = *(_OWORD *)(a1 + 31);
  long long v5 = *(_OWORD *)(a1 + 35);
  long long v69 = *(_OWORD *)(a1 + 33);
  long long v70 = v5;
  uint64_t v71 = a1[37];
  long long v6 = *(_OWORD *)(a1 + 23);
  long long v7 = *(_OWORD *)(a1 + 27);
  long long v65 = *(_OWORD *)(a1 + 25);
  long long v66 = v7;
  long long v67 = *(_OWORD *)(a1 + 29);
  long long v68 = v4;
  long long v8 = *(_OWORD *)(a1 + 19);
  v63[0] = *(_OWORD *)(a1 + 17);
  v63[1] = v8;
  v63[2] = *(_OWORD *)(a1 + 21);
  long long v64 = v6;
  long long v9 = *(_OWORD *)(a1 + 57);
  long long v60 = *(_OWORD *)(a1 + 55);
  long long v61 = v9;
  uint64_t v62 = a1[59];
  long long v10 = *(_OWORD *)(a1 + 49);
  long long v56 = *(_OWORD *)(a1 + 47);
  long long v57 = v10;
  long long v11 = *(_OWORD *)(a1 + 53);
  long long v58 = *(_OWORD *)(a1 + 51);
  long long v59 = v11;
  long long v12 = *(_OWORD *)(a1 + 41);
  v54[0] = *(_OWORD *)(a1 + 39);
  v54[1] = v12;
  long long v13 = *(_OWORD *)(a1 + 45);
  v54[2] = *(_OWORD *)(a1 + 43);
  long long v55 = v13;
  (*(void (**)(void **__return_ptr))(*a1 + 16))(&__p);
  int v14 = (char *)__p;
  uint64_t v15 = v37;
  if (__p == v37)
  {
    uint64_t v17 = 0;
    uint64_t v16 = 0;
    goto LABEL_20;
  }
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = *((void *)&v64 + 1);
  uint64_t v19 = v64;
  uint64_t v20 = *((void *)&v55 + 1);
  uint64_t v33 = *((void *)&v64 + 1);
  uint64_t v34 = v55;
  long long v35 = 0u;
  uint64_t v32 = *((void *)&v55 + 1);
  while ((*((_DWORD *)v14 + 4) - 1) > 1)
  {
LABEL_14:
    v14 += 32;
    if (v14 == v15) {
      goto LABEL_20;
    }
  }
  if (sub_101014448(*((void *)v14 + 3), v18) == v19)
  {
    sub_100EBFED4((uint64_t)a1, (uint64_t)v14, (uint64_t)v63, (uint64_t)&v38);
    goto LABEL_19;
  }
  if (sub_101014448(*((void *)v14 + 3), v20) != v34)
  {
    if (!(void)v35)
    {
      uint64_t v21 = v19;
      uint64_t v22 = *((void *)v14 + 3);
      uint64_t v23 = sub_100EBF79C(a1, v22);
      if (*((_DWORD *)v14 + 4) == 1)
      {
        uint64_t v22 = 33;
      }
      else if (v22 == 2)
      {
        uint64_t v22 = sub_101014448(2, v23);
      }
      sub_100EBFFD0((uint64_t)a1, v22, (uint64_t)&v38, *((double *)v14 + 1), *(double *)v14);
      long long v82 = v42;
      long long v83 = v43;
      long long v84 = v44;
      long long v78 = v38;
      long long v79 = v39;
      long long v80 = v40;
      long long v81 = v41;
      long long v35 = v45;
      uint64_t v16 = v46;
      uint64_t v17 = v47;
      uint64_t v77 = v53;
      long long v75 = v51;
      long long v76 = v52;
      long long v73 = v49;
      long long v74 = v50;
      long long v72 = v48;
      if (v22 == 19)
      {
        uint64_t v24 = sub_100EBF8EC(a1, v23);
        uint64_t v19 = v21;
        uint64_t v20 = v32;
        uint64_t v18 = v33;
        uint64_t v16 = v24;
        uint64_t v17 = v25;
      }
      else
      {
        uint64_t v19 = v21;
        uint64_t v20 = v32;
        uint64_t v18 = v33;
      }
    }
    goto LABEL_14;
  }
  sub_100EBFED4((uint64_t)a1, (uint64_t)v14, (uint64_t)v54, (uint64_t)&v38);
LABEL_19:
  long long v82 = v42;
  long long v83 = v43;
  long long v84 = v44;
  long long v78 = v38;
  long long v79 = v39;
  long long v80 = v40;
  long long v81 = v41;
  long long v35 = v45;
  uint64_t v16 = v46;
  uint64_t v17 = v47;
  uint64_t v77 = v53;
  long long v75 = v51;
  long long v76 = v52;
  long long v73 = v49;
  long long v74 = v50;
  long long v72 = v48;
LABEL_20:
  long long v26 = v83;
  *(_OWORD *)(a2 + 64) = v82;
  *(_OWORD *)(a2 + 80) = v26;
  long long v27 = v79;
  *(_OWORD *)a2 = v78;
  *(_OWORD *)(a2 + 16) = v27;
  long long v28 = v81;
  *(_OWORD *)(a2 + 32) = v80;
  *(_OWORD *)(a2 + 48) = v28;
  *(_OWORD *)(a2 + 96) = v84;
  *(_OWORD *)(a2 + 112) = v35;
  *(void *)(a2 + 128) = v16;
  *(void *)(a2 + 136) = v17;
  long long v29 = v73;
  *(_OWORD *)(a2 + 144) = v72;
  *(_OWORD *)(a2 + 160) = v29;
  *(void *)(a2 + 224) = v77;
  long long v30 = v76;
  long long v31 = v74;
  *(_OWORD *)(a2 + 192) = v75;
  *(_OWORD *)(a2 + 208) = v30;
  *(_OWORD *)(a2 + 176) = v31;
  sub_100EBF2DC((uint64_t)a1, (uint64_t **)&__p, (void **)(a2 + 232));
  if (__p)
  {
    long long v37 = (char *)__p;
    operator delete(__p);
  }
}

void sub_100EBFE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100EBFED4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v6 = *(double *)a2;
  result.n128_u64[0] = *(void *)(a2 + 8);
  *(void *)a4 = result.n128_u64[0];
  *(void *)(a4 + 8) = 0xBFF0000000000000;
  *(void *)(a4 + 16) = 23;
  *(double *)(a4 + 24) = v6;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  long long v7 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(a4 + 192) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a4 + 208) = v7;
  *(void *)(a4 + 224) = *(void *)(a3 + 160);
  long long v8 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a4 + 128) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a4 + 144) = v8;
  long long v9 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(a4 + 160) = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(a4 + 176) = v9;
  long long v10 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a4 + 64) = *(_OWORD *)a3;
  *(_OWORD *)(a4 + 80) = v10;
  long long v11 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a4 + 96) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a4 + 112) = v11;
  if (*(_DWORD *)(a2 + 16) == 1)
  {
    sub_100EBFFD0(a1, 0x21uLL, (uint64_t)v18, result.n128_f64[0], v6);
    long long v12 = v18[13];
    *(_OWORD *)(a4 + 192) = v18[12];
    *(_OWORD *)(a4 + 208) = v12;
    *(void *)(a4 + 224) = v19;
    long long v13 = v18[9];
    *(_OWORD *)(a4 + 128) = v18[8];
    *(_OWORD *)(a4 + 144) = v13;
    long long v14 = v18[11];
    *(_OWORD *)(a4 + 160) = v18[10];
    *(_OWORD *)(a4 + 176) = v14;
    long long v15 = v18[5];
    *(_OWORD *)(a4 + 64) = v18[4];
    *(_OWORD *)(a4 + 80) = v15;
    long long v16 = v18[7];
    *(_OWORD *)(a4 + 96) = v18[6];
    *(_OWORD *)(a4 + 112) = v16;
    long long v17 = v18[1];
    *(_OWORD *)a4 = v18[0];
    *(_OWORD *)(a4 + 16) = v17;
    __n128 result = (__n128)v18[3];
    *(_OWORD *)(a4 + 32) = v18[2];
    *(__n128 *)(a4 + 48) = result;
  }
  return result;
}

void sub_100EBFFD0(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  memset(out, 0, sizeof(out));
  uuid_generate(out);
  *(void *)(a3 + 224) = 0;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(double *)a3 = a4;
  *(void *)(a3 + 8) = 0xBFF0000000000000;
  *(void *)(a3 + 16) = 23;
  *(double *)(a3 + 24) = a5;
  *(void *)(a3 + 112) = a2;
  *(void *)(a3 + 120) = sub_1010144C0(a2);
  uuid_copy((unsigned __int8 *)(a3 + 64), out);
  uuid_copy((unsigned __int8 *)(a3 + 80), (const unsigned __int8 *)(a1 + 8));
}

void sub_100EC00C0(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102300B00);
  }
  unint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 184);
    int v4 = *(_DWORD *)(a1 + 304);
    uint64_t v5 = *(void *)(a1 + 360);
    int v6 = *(_DWORD *)(a1 + 480);
    *(_DWORD *)std::string buf = 134218752;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = v4;
    *(_WORD *)&unsigned char buf[18] = 2048;
    *(void *)&buf[20] = v5;
    __int16 v31 = 1024;
    int v32 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesDetectionModelController,configuringModels,currentWorkout,%ld,currentModelSensitivity,%d,queuedWorkout,%ld,queuedModelSensitivity,%d", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102300B00);
    }
    long long v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesDetectionModelController::configureModels()", "%s\n", v29);
    if (v29 != buf) {
      free(v29);
    }
  }
  memset(buf, 0, 24);
  uint64_t v7 = *(void *)(a1 + 184);
  int v8 = *(_DWORD *)(a1 + 304);
  long long v10 = sub_1000C571C((uint64_t)&buf[16], 1uLL);
  long long v11 = *(char **)buf;
  long long v12 = *(char **)&buf[8];
  long long v13 = (char *)&v10[4 * v9];
  *(void *)long long v10 = v7;
  void v10[2] = v8;
  long long v14 = (char *)(v10 + 4);
  long long v15 = v10;
  if (v12 != v11)
  {
    do
    {
      *((_OWORD *)v15 - 1) = *((_OWORD *)v12 - 1);
      v15 -= 4;
      v12 -= 16;
    }
    while (v12 != v11);
    long long v11 = *(char **)buf;
  }
  *(void *)std::string buf = v15;
  *(void *)&uint8_t buf[8] = v10 + 4;
  *(void *)&uint8_t buf[16] = &v10[4 * v9];
  if (v11)
  {
    operator delete(v11);
    long long v13 = *(char **)&buf[16];
  }
  *(void *)&uint8_t buf[8] = v10 + 4;
  uint64_t v16 = *(void *)(a1 + 360);
  int v17 = *(_DWORD *)(a1 + 480);
  if (v14 >= v13)
  {
    uint64_t v19 = *(char **)buf;
    uint64_t v20 = (uint64_t)&v14[-*(void *)buf] >> 4;
    unint64_t v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v22 = (uint64_t)&v13[-*(void *)buf];
    if (v22 >> 3 > v21) {
      unint64_t v21 = v22 >> 3;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      uint64_t v24 = (char *)sub_1000C571C((uint64_t)&buf[16], v23);
      uint64_t v19 = *(char **)buf;
      long long v14 = *(char **)&buf[8];
    }
    else
    {
      uint64_t v24 = 0;
    }
    uint64_t v25 = &v24[16 * v20];
    long long v26 = &v24[16 * v23];
    *(void *)uint64_t v25 = v16;
    *((_DWORD *)v25 + 2) = v17;
    uint64_t v18 = v25 + 16;
    if (v14 != v19)
    {
      do
      {
        *((_OWORD *)v25 - 1) = *((_OWORD *)v14 - 1);
        v25 -= 16;
        v14 -= 16;
      }
      while (v14 != v19);
      uint64_t v19 = *(char **)buf;
    }
    *(void *)std::string buf = v25;
    *(void *)&uint8_t buf[8] = v18;
    *(void *)&uint8_t buf[16] = v26;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    *((void *)v10 + 2) = v16;
    v10[6] = v17;
    uint64_t v18 = (char *)(v10 + 8);
  }
  *(void *)&uint8_t buf[8] = v18;
  long long v28 = *(void **)(a1 + 112);
  long long v27 = *(void **)(a1 + 120);
  while (v28 != v27)
  {
    (*(void (**)(void, unsigned char *))(*(void *)*v28 + 8))(*v28, buf);
    ++v28;
  }
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
}

void sub_100EC0474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
}

void *sub_100EC049C(void *result)
{
  uint64_t v1 = result + 14;
  if (result[14] != result[15])
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102300B00);
    }
    unint64_t v2 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesDetectionModelController, tearing down workout detection models", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102300B00);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesDetectionModelController::teardownModels()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    return sub_1004F68F4(v1);
  }
  return result;
}

void *sub_100EC0644(void *result)
{
  unint64_t v1 = result[10];
  uint64_t v2 = result[7];
  uint64_t v3 = result[8];
  int v4 = (void *)(v2 + 8 * (v1 / 0x18));
  if (v3 == v2) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = *v4 + 168 * (v1 % 0x18);
  }
LABEL_4:
  unint64_t v6 = v5 - 4032;
  while (1)
  {
    unint64_t v7 = v3 == v2 ? 0 : *(void *)(v2 + 8 * ((result[11] + v1) / 0x18)) + 168 * ((result[11] + v1) % 0x18);
    if (v5 == v7) {
      return result;
    }
    v6 += 168;
    v5 += 168;
    if (*v4 == v6)
    {
      unint64_t v8 = v4[1];
      ++v4;
      unint64_t v5 = v8;
      goto LABEL_4;
    }
  }
}

void sub_100EC0708(uint64_t a1)
{
  sub_1004F59A0(a1);

  operator delete();
}

void sub_100EC0740(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void *sub_100EC0770(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x11A7B9611A7B962) {
    sub_1001D7FA0();
  }
  return operator new(232 * a2);
}

uint64_t sub_100EC07BC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100EC0834((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100EC0834(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_100EC08CC((uint64_t)v13);
  return v11;
}

uint64_t sub_100EC08CC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100EC0904((void *)a1);
  }
  return a1;
}

void *sub_100EC0904(void *result)
{
  unint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *unint64_t v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 32))(result);
    }
    ++v1;
  }
  return result;
}

void **sub_100EC096C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *sub_100EC09A4(void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    int v4 = result;
    do
    {
      void v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 32))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void sub_100EC0AC8(id a1)
{
  qword_102482190 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLStatusBarIconManagerSilo"];
}

void sub_100EC0B88()
{
}

void sub_100EC0BD0()
{
}

uint64_t sub_100EC0C6C(uint64_t a1)
{
  uint64_t v2 = (unsigned char *)(a1 + 112);
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  if (v2[32])
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102300D38);
    }
    uint64_t v3 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#sbim: E911 is active; forcing icon on.",
        buf,
        2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102300D38);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "StatusBarIconState CLStatusBarIconManager::iconState()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    uint64_t v4 = 2;
  }
  else if ((*(_DWORD *)(a1 + 192) & 2) != 0)
  {
    uint64_t v4 = 2;
  }
  else
  {
    uint64_t v4 = *(_DWORD *)(a1 + 192) & 1;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102300D38);
  }
  uint64_t v5 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = off_102300C70[v4];
    int v7 = *(unsigned __int8 *)(a1 + 148);
    *(_DWORD *)std::string buf = 68289538;
    int v11 = 0;
    __int16 v12 = 2082;
    long long v13 = "";
    __int16 v14 = 2082;
    long long v15 = v6;
    __int16 v16 = 1026;
    int v17 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sbim: Location icon should now be in state\", \"IconState\":%{public, location:escape_only}s, \"SystemServiceSwitchEnabled\":%{public}hhd}", buf, 0x22u);
  }
  (*(void (**)(unsigned char *))(*(void *)v2 + 24))(v2);
  return v4;
}

void sub_100EC0F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100EC0F98(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = a1 + 112;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  int v5 = *(unsigned __int8 *)(a1 + a2 + 145);
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return v5 != 0;
}

uint64_t sub_100EC106C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v3 = a3;
  if (a2 == 3) {
    sub_100EC1E64(a1, a3);
  }

  return sub_100EC1FE8(a1, a2, v3);
}

uint64_t sub_100EC1100(uint64_t a1, int a2)
{
  uint64_t v4 = a1 + 112;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  *(unsigned char *)(a1 + 144) = a2;
  sub_100EC1FE8(a1, 7u, a2);
  sub_10006F75C(a1);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_100EC11B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EC11D8(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)sub_100EC15E0(a1, "CLStatusBarIconManager", a2);
  *uint64_t v4 = off_102300B50;
  sub_100513074(v4 + 14, "CLStatusBarIconManager", 1, 1);
  *(void *)(a1 + 128) = a2;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(void *)(a1 + 192) = 0xFFFFFFFF00000000;
  [a2 silo];
  sub_1007E0344();
}

void sub_100EC1558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v25 = *(void *)(v22 + 136);
  *(void *)(v22 + 136) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  sub_10051310C(v23);
  sub_100EC1CEC(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_100EC15E0(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_102300D68;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_100EC1670(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EC168C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 128), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102300D18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    int v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStatusBarIconManager::onClientNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102300D18);
    }
    uint64_t v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStatusBarIconManager::onClientNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  sub_100EC2444(a4, v6, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_100EC1840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EC1860(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = _os_activity_create((void *)&_mh_execute_header, "CL: #SystemServiceSwitch Received sync darwin notification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v2, &v4);

  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102300D38);
  }
  int v3 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 68289282;
    int v6 = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    __int16 v9 = 2082;
    char v10 = "activity";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SystemServiceSwitch Received sync darwin notification\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  sub_100EC19A0(v1);
  os_activity_scope_leave(&v4);
}

void sub_100EC198C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t sub_100EC19A0(uint64_t a1)
{
  CFPreferencesSynchronize(@"com.apple.locationd.StatusBarIconManager", @"mobile", kCFPreferencesCurrentHost);
  uint64_t v2 = (id)CFPreferencesCopyValue(@"ShowSystemServices", @"com.apple.locationd.StatusBarIconManager", @"mobile", kCFPreferencesCurrentHost);
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  int v4 = *(unsigned __int8 *)(a1 + 148);
  int v5 = *(unsigned char *)(a1 + 148) != 0;
  if ((isKindOfClass & 1) != 0 && v2)
  {
    uint64_t result = (uint64_t)[v2 BOOLValue];
    int v5 = result;
    goto LABEL_5;
  }
  uint64_t result = sub_10010145C();
  if (result)
  {
LABEL_5:
    if (v4 != v5)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102300D38);
      }
      __int16 v7 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = 68289282;
        int v11 = 0;
        __int16 v12 = 2082;
        __int16 v13 = "";
        __int16 v14 = 1026;
        LODWORD(v15) = v5;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SystemServiceSwitch Detected mismatch between local state and sync state.  Deferring to sync state.\", \"newState\":%{public}hhd}", (uint8_t *)&v10, 0x18u);
      }
      return sub_100EC1FE8(a1, 3u, v5);
    }
    return result;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102300D38);
  }
  uint64_t v8 = qword_102419538;
  BOOL v9 = os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    int v10 = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    __int16 v13 = "";
    __int16 v14 = 2114;
    uint64_t v15 = objc_opt_class();
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SystemServiceSwitch invalid or missing switch sync state.  Initializing...\", \"oldValueClass\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x1Cu);
  }
  return (uint64_t)sub_100EC1E64(v9, v4 != 0);
}

uint64_t sub_100EC1BE8(unsigned char *a1)
{
  sub_1000E9354(v8);
  sub_1000C7F88(&v6);
  sub_100012960(v6, "StatusBarIconStates", v8);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  uint64_t v2 = 0;
  int v3 = a1 + 145;
  do
  {
    if ((sub_1000D2988((uint64_t)v8, off_102300C20[v2], &v3[v2]) & 1) == 0) {
      v3[v2] = 0;
    }
    *(_DWORD *)&a1[4 * v2++ + 156] = 0;
  }
  while (v2 != 9);
  char v4 = a1[148];
  a1[150] = v4;
  a1[151] = v4;
  sub_100EC19A0((uint64_t)a1);
  return sub_10013F3C4(v8);
}

void sub_100EC1CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EC1CE4(uint64_t a1)
{
  return sub_10006F75C(*(void *)(a1 + 32));
}

uint64_t sub_100EC1CEC(uint64_t a1)
{
  *(void *)a1 = off_102300D68;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_100EC1D70(uint64_t a1)
{
  *(void *)a1 = off_102300B50;
  for (uint64_t i = 200; i != 224; i += 8)
  {
    [*(id *)(a1 + i) invalidate];
  }
  notify_cancel(*(_DWORD *)(a1 + 196));
  uint64_t v3 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_10051310C(a1 + 112);

  return sub_100EC1CEC(a1);
}

void sub_100EC1E2C(uint64_t a1)
{
  sub_100EC1D70(a1);

  operator delete();
}

id sub_100EC1E64(uint64_t a1, uint64_t a2)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102300D38);
  }
  uint64_t v3 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    __int16 v6 = 2082;
    __int16 v7 = "";
    __int16 v8 = 1026;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SystemServiceSwitch setting sync state\", \"enabled\":%{public}hhd}", (uint8_t *)v5, 0x18u);
  }
  CFPreferencesSetValue(@"ShowSystemServices", +[NSNumber numberWithBool:a2], @"com.apple.locationd.StatusBarIconManager", @"mobile", kCFPreferencesCurrentHost);
  CFPreferencesSynchronize(@"com.apple.locationd.StatusBarIconManager", @"mobile", kCFPreferencesCurrentHost);
  return [objc_alloc_init((Class)NPSManager) synchronizeUserDefaultsDomain:@"com.apple.locationd.StatusBarIconManager" keys:[+[NSSet setWithObject:](NSSet, "setWithObject:", @"ShowSystemServices")]];
}

uint64_t sub_100EC1FE8(uint64_t a1, unsigned int a2, int a3)
{
  char v19 = a3;
  uint64_t v7 = a1 + 112;
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v6 + 16))(a1 + 112);
  __int16 v18 = 256;
  uint64_t v8 = a1 + a2;
  *(unsigned char *)(v8 + 145) = a3;
  int v9 = (unsigned __int8 *)(v8 + 145);
  char v10 = *(unsigned char *)(a1 + 148);
  *(unsigned char *)(a1 + 150) = v10;
  *(unsigned char *)(a1 + 151) = v10;
  if (a2 <= 7 && ((1 << a2) & 0x98) != 0)
  {
    LODWORD(buf) = a2;
    BYTE4(buf) = a3;
    switch(a2)
    {
      case 7u:
        LODWORD(v15) = 2;
        (*(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v15, &buf, 1, 0xFFFFFFFFLL, 0);
        break;
      case 4u:
        LODWORD(v15) = 1;
        (*(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v15, &buf, 1, 0xFFFFFFFFLL, 0);
        break;
      case 3u:
        LODWORD(v15) = 0;
        (*(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v15, &buf, 1, 0xFFFFFFFFLL, 0);
        break;
    }
  }
  if (*v9 == a3)
  {
    if (a2 != 9)
    {
      int v11 = off_102300C20[a2];
      sub_1000E9354(&buf);
      sub_1000C7F88(&v15);
      sub_100012960(v15, "StatusBarIconStates", &buf);
      if (v16) {
        sub_1000DB0A0(v16);
      }
      sub_1000EA238((uint64_t)&buf, v11, &v19);
      sub_1000C7F88(&v15);
      sub_1004D3878(v15, "StatusBarIconStates", (uint64_t)&buf);
      if (v16) {
        sub_1000DB0A0(v16);
      }
      sub_1000C7F88(&v15);
      sub_10051F604(v15);
      if (v16) {
        sub_1000DB0A0(v16);
      }
      sub_10013F3C4(&buf);
    }
    sub_10006F21C(a1, 1);
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102300D38);
    }
    __int16 v12 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      uint64_t buf = 68289538;
      __int16 v21 = 2082;
      uint64_t v22 = "";
      __int16 v23 = 1026;
      unsigned int v24 = a2;
      __int16 v25 = 1026;
      int v26 = a3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#sbim: unsupported attempt to set icon visibility\", \"class\":%{public}d, \"enabled\":%{public}hhd}", (uint8_t *)&buf, 0x1Eu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102300D38);
      }
    }
    __int16 v13 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t buf = 68289538;
      __int16 v21 = 2082;
      uint64_t v22 = "";
      __int16 v23 = 1026;
      unsigned int v24 = a2;
      __int16 v25 = 1026;
      int v26 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#sbim: unsupported attempt to set icon visibility", "{\"msg%{public}.0s\":\"#sbim: unsupported attempt to set icon visibility\", \"class\":%{public}d, \"enabled\":%{public}hhd}", (uint8_t *)&buf, 0x1Eu);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7);
}

void sub_100EC23D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EC2434(void *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  JUMPOUT(0x100EC242CLL);
}

void sub_100EC2444(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102300D38);
  }
  int v5 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 68289026;
    v8[1] = 0;
    __int16 v9 = 2082;
    char v10 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"sbim: Got client notification\"}", (uint8_t *)v8, 0x12u);
  }
  if (!*a3)
  {
    sub_100EC2584(a1);
    id v6 = [[objc_msgSend(*(id *)(a1 + 128), "vendor") proxyForService:@"CLClientManager"];
    if (byte_10248218F >= 0) {
      uint64_t v7 = &qword_102482178;
    }
    else {
      uint64_t v7 = (uint64_t *)qword_102482178;
    }
    [v6 resetNotificationConsumedForIdentifier:[NSString stringWithUTF8String:v7]];
  }
}

uint64_t sub_100EC2584(uint64_t a1)
{
  uint64_t v2 = a1 + 112;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102300D38);
  }
  uint64_t v3 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    LOWORD(v7[0]) = 2082;
    *(std::__shared_weak_count **)((char *)v7 + 2) = (std::__shared_weak_count *)"";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Clearing status bar icon enabled states\"}", buf, 0x12u);
  }
  for (uint64_t i = 0; i != 9; ++i)
  {
    sub_100EC106C(a1, i, 0);
    *(_DWORD *)(a1 + 4 * i + 156) = 0;
  }
  sub_1000C7F88(buf);
  sub_1004CF7DC(*(uint64_t *)buf, "StatusBarIconStates", 0xFFFFFFFFLL);
  if (v7[0]) {
    sub_1000DB0A0(v7[0]);
  }
  sub_1000C7F88(buf);
  sub_10051F604(*(uint64_t *)buf);
  if (v7[0]) {
    sub_1000DB0A0(v7[0]);
  }
  sub_10006F21C(a1, 1);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

void sub_100EC2740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EC2788()
{
  sub_1000E9354(v4);
  sub_1000C7F88(&v2);
  sub_100012960(v2, "StatusBarIconStates", v4);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  LOBYTE(v2) = 0;
  sub_1000D2988((uint64_t)v4, "SystemService", (BOOL *)&v2);
  uint64_t v0 = v2;
  sub_10013F3C4(v4);
  return v0;
}

void sub_100EC280C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_100EC2838(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(int *)(a1 + 40);
  if (*(unsigned char *)(v1 + v2 + 224))
  {
    int v4 = *(_DWORD *)(v1 + 192);
    if ((v4 & 2) != 0) {
      uint64_t v5 = 2;
    }
    else {
      uint64_t v5 = v4 & 1;
    }
    if (v2 == 2) {
      int v6 = -3;
    }
    else {
      int v6 = ~(v2 == 1);
    }
    *(_DWORD *)(v1 + 192) = v4 & v6;
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102300D38);
    }
    uint64_t v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *(int *)(a1 + 40);
      uint64_t v9 = *(unsigned int *)(v1 + 192);
      v11[0] = 68289794;
      v11[1] = 0;
      __int16 v12 = 2082;
      __int16 v13 = "";
      __int16 v14 = 2050;
      uint64_t v15 = v8;
      __int16 v16 = 2050;
      uint64_t v17 = v5;
      __int16 v18 = 2050;
      uint64_t v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#sbim: executing arrow demotion timer\", \"state\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld, \"previousState\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld, \"newMask\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld}", (uint8_t *)v11, 0x30u);
    }
    if ((*(_DWORD *)(v1 + 192) & 2) != 0) {
      int v10 = 2;
    }
    else {
      int v10 = *(_DWORD *)(v1 + 192) & 1;
    }
    if (v10 != v5) {
      sub_10006F75C(v1);
    }
  }
}

void sub_100EC29B0()
{
}

void sub_100EC2A6C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_100EC2AA8(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_102300EB8;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    __int16 v12 = a3;
  }
  else {
    __int16 v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(a4, "vendor") proxyForService:[NSString stringWithUTF8String:v12]];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:objc_msgSend(a4, "silo")];
  return a1;
}

void sub_100EC2B8C(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        uint64_t v9 = (uint64_t *)v4;
      }
      else {
        uint64_t v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)uint64_t buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102300D18);
      }
      int v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        int v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v11 = (void *)*v11;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        uint64_t v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_102300D18);
        }
        __int16 v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          __int16 v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        uint64_t v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLStatusBarIconManager_Type::Notification, CLStatusBarIconManager_Type::NotificationData>::removeClient(int) [Notification_T = CLStatusBarIconManager_Type::Notification, NotificationData_T = CLStatusBarIconManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_100EC2E1C(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_100EC2ED0(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_100EC2F18(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_100EC2F60(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_100EC2FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_1024752E8);
}

uint64_t sub_100EC2FD4(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)long long v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          unsigned int v24 = (uint64_t *)v18;
        }
        else {
          unsigned int v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          long long v29 = (uint64_t *)v25;
        }
        else {
          long long v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)uint64_t buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        *(void *)uint64_t buf = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_100EC57F4();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_1024752E9;
        int v39 = v17;
        *(void *)uint64_t buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)uint64_t buf = &v39;
        __int16 v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        int v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)uint64_t buf = &v39;
        uint64_t v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)uint64_t buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)uint64_t buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102300D18);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v15 = (void *)*v15;
    }
    *(_DWORD *)uint64_t buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v46 = 1026;
    int v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102300D18);
    }
    long long v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v37 = (void *)*v37;
    }
    *(_DWORD *)long long v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    long long v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLStatusBarIconManager_Type::Notification, CLStatusBarIconManager_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLStatusBarIconManager_Type::Notification, NotificationData_T = CLStatusBarIconManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_100EC3478(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102300D18);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      unsigned int v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102300D18);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLStatusBarIconManager_Type::Notification, CLStatusBarIconManager_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLStatusBarIconManager_Type::Notification, NotificationData_T = CLStatusBarIconManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_100EC36FC(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102300D18);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_102300D18);
                }
                long long v29 = a1 + 8;
                if (a1[31] < 0) {
                  long long v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                long long v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                __int16 v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLStatusBarIconManager_Type::Notification, CLStatusBarIconManager_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLStatusBarIconManager_Type::Notification, NotificationData_T = CLStatusBarIconManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100EC3AD0(uint64_t a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = (uint64_t *)operator new(0x20uLL);
  v6[1] = 0;
  _DWORD v6[2] = 0;
  v6[3] = *a3;
  *uint64_t v6 = (uint64_t)off_102300E48;
  int v10 = *a2;
  int v11 = &v10;
  int v7 = sub_10044715C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101D0B290, &v11);
  BOOL v8 = (std::__shared_weak_count *)v7[9];
  unsigned char v7[8] = v6 + 3;
  v7[9] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return 1;
}

void sub_100EC3B84(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100EC3B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, &v5, a3, a4, 0);
}

void sub_100EC3BEC(uint64_t a1, unsigned int *a2, uint64_t *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  BOOL v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102300D18);
  }
  int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)uint64_t buf = 68289794;
    int v22 = 0;
    __int16 v23 = 2082;
    *(void *)BOOL v24 = "";
    *(_WORD *)&v24[8] = 2082;
    *(void *)&v24[10] = "activity";
    __int16 v25 = 2082;
    int v26 = v10;
    __int16 v27 = 2050;
    BOOL v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    long long v29 = v30;
    memset(v30, 0, sizeof(v30));
    __int16 v31 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v29);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v28) {
      sub_1000DB0A0(v28);
    }
    sub_1000F5BB0((uint64_t)&v23, *(void **)&v24[6]);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v29, v30[0]);
  }
  if (a4)
  {
    BOOL v18 = (uint64_t *)operator new(0x20uLL);
    v18[1] = 0;
    v18[2] = 0;
    uint64_t *v18 = (uint64_t)off_102300E48;
    v18[3] = *a3;
    int v19 = (std::__shared_weak_count *)v14[9];
    v14[8] = v18 + 3;
    v14[9] = v18;
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v19 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v19) {
LABEL_27:
  }
    sub_1000DB0A0(v19);
LABEL_28:
  if (v14[7]) {
    sub_100EC48B4();
  }
  os_activity_scope_leave(&state);
}

void sub_100EC41D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100EC421C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102300D18);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v3 = (void *)*v3;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102300D18);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLStatusBarIconManager_Type::Notification, CLStatusBarIconManager_Type::NotificationData>::listClients() [Notification_T = CLStatusBarIconManager_Type::Notification, NotificationData_T = CLStatusBarIconManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102300D18);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102300D18);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLStatusBarIconManager_Type::Notification, CLStatusBarIconManager_Type::NotificationData>::listClients() [Notification_T = CLStatusBarIconManager_Type::Notification, NotificationData_T = CLStatusBarIconManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    BOOL v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_102300D18);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)uint64_t buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102300D18);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLStatusBarIconManager_Type::Notification, CLStatusBarIconManager_Type::NotificationData>::listClients() [Notification_T = CLStatusBarIconManager_Type::Notification, NotificationData_T = CLStatusBarIconManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            BOOL v8 = v19;
          }
          while (!v16);
        }
        BOOL v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_100EC47CC(uint64_t a1)
{
  sub_100EC5784(a1);

  operator delete();
}

id sub_100EC4804(uint64_t a1, int a2, void *a3)
{
  id result = sub_100EC4EE4(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_100EC4854(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100EC4884(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100EC48B4()
{
}

void sub_100EC4960(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      int v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          int v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        long long v49 = v9;
        id v13 = sub_100EC4EE4(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              long long v48 = v19;
              sub_100EC4D50(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              long long v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  long long v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              long long v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              long long v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102300D18);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)uint64_t buf = 136446466;
                long long v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_102300D18);
                }
                long long v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  long long v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                long long v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                int v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLStatusBarIconManager_Type::Notification, CLStatusBarIconManager_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLStatusBarIconManager_Type::Notification, NotificationData_T = CLStatusBarIconManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_100EC4D50(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_100EC4EE4(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    id result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4 v13];
    }
  }
  return result;
}

void sub_100EC4E48(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102300E48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100EC4E68(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102300E48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100EC4EC4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_100EC4EE4(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_100EC4F80(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_100EC530C(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_100EC4F80(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_100EC56CC((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_102300E88);
    }
    uint64_t v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = 0x8000000101D954C7 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_102300E88);
  }
  int v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = 0x8000000101D954C7 & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_102300E88);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = 0x8000000101D954C7 & 0x7FFFFFFFFFFFFFFFLL;
  int v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLStatusBarIconManager_Type::NotificationData, Callbacunint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_100EC530C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102300E88);
      }
      int v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D954C7 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLStatusBarIconManager_Type::NotificationData, Callbacunint64_t k = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102300E88);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D954C7 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_102300E88);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_100EC56CC(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_102393560))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)8) {
      sub_101A945C4();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_100EC5754(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_100EC5784(uint64_t a1)
{
  *(void *)a1 = off_102300EB8;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *id v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_100EC57F4()
{
}

uint64_t sub_100EC58A0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

void sub_100EC58C0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_100EC5940()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_100EC59D0(_Unwind_Exception *a1)
{
}

uint64_t sub_100EC59E8()
{
  sub_100134750(&qword_102482178, "StatusBarIconManager");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102482178, (void *)&_mh_execute_header);
}

void *sub_100EC5A48(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1000DC48C(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    uint64_t v10 = *(void *)(a3 + 16);
  }
  int v11 = *(_DWORD *)(a3 + 24);
  sub_100BCB368((uint64_t)a1, a2, (long long *)__p);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_102300EE0;
  sub_100EC6F5C((uint64_t)(a1 + 24), a4);
  return a1;
}

void sub_100EC5B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_100BCB73C(v14);
  _Unwind_Resume(a1);
}

unint64_t sub_100EC5B30(uint64_t a1)
{
  uint64_t v1 = a1;
  int v2 = *(_DWORD *)(a1 + 144);
  __chkstk_darwin(a1);
  unint64_t v116 = (char *)&v110 - v4;
  uint64_t v6 = sub_100BCAAD8(v3 + 48, (char *)&v110 - v4, v5);
  uint64_t v7 = v6;
  uint64_t v115 = (void *)(v1 + 120);
  float v8 = 1.0 / (float)v2;
  if (v6)
  {
    double v9 = (double)*(unint64_t *)(v116 + 42);
    double v10 = v9 - *(double *)(v1 + 224);
    uint64_t v11 = (int)v6 - 1;
    unint64_t v12 = (unint64_t *)&v116[50 * v11 + 42];
    double v13 = (double)*v12 - v9;
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_102300F10);
    }
    double v14 = v10 / 1000000.0;
    id v15 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v16 = v115;
      if (*(char *)(v1 + 143) < 0) {
        __int16 v16 = (void *)*v115;
      }
      uint64_t v17 = *(void *)(v116 + 42);
      unint64_t v18 = *v12;
      int v128 = 136447746;
      uint64_t v129 = v16;
      __int16 v130 = 1026;
      *(_DWORD *)uint64_t v131 = v7;
      *(_WORD *)&v131[4] = 2050;
      *(double *)&v131[6] = v14;
      *(_WORD *)&v131[14] = 2050;
      *(void *)&v131[16] = vabdd_f64(v14, v8);
      *(_WORD *)&v131[24] = 2050;
      *(void *)&v131[26] = v17;
      *(_WORD *)&v131[34] = 2050;
      *(void *)&v131[36] = v18;
      *(_WORD *)&v131[44] = 2050;
      *(double *)&v131[46] = v13 / 1000000.0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[manager-%{public}s] read %{public}d, timestamp from previous [%{public}f %{public}f], range [%{public}llu %{public}llu], time interval %{public}f", (uint8_t *)&v128, 0x44u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v128, 0x65CuLL);
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_102300F10);
      }
      uint64_t v85 = v115;
      if (*(char *)(v1 + 143) < 0) {
        uint64_t v85 = (void *)*v115;
      }
      uint64_t v86 = *(void *)(v116 + 42);
      unint64_t v87 = *v12;
      int v120 = 136447746;
      uint64_t v121 = v85;
      __int16 v122 = 1026;
      *(_DWORD *)int v123 = v7;
      *(_WORD *)&v123[4] = 2050;
      *(double *)&v123[6] = v14;
      *(_WORD *)&v123[14] = 2050;
      *(void *)&v123[16] = vabdd_f64(v14, v8);
      *(_WORD *)&v123[24] = 2050;
      *(void *)&v123[26] = v86;
      *(_WORD *)&v123[34] = 2050;
      *(void *)&v123[36] = v87;
      *(_WORD *)&v123[44] = 2050;
      *(double *)&v123[46] = v13 / 1000000.0;
      float v88 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual int CLBatchedDeviceMotionClient::Client::read()", "%s\n", v88);
      if (v88 != (char *)&v128) {
        free(v88);
      }
    }
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_102300F10);
    }
    unint64_t v19 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_INFO))
    {
      int v20 = v115;
      if (*(char *)(v1 + 143) < 0) {
        int v20 = (void *)*v115;
      }
      unint64_t v21 = *(void *)(v116 + 42);
      unint64_t v22 = *v12;
      double v23 = (double)*v12 * 0.000000999999997;
      double v24 = *((float *)v116 + 7);
      double v25 = *((float *)v116 + 8);
      double v26 = *((float *)v116 + 9);
      uint64_t v27 = (float *)&v116[50 * v11];
      double v28 = v27[7];
      double v29 = v27[8];
      double v30 = v27[9];
      int v128 = 136448770;
      uint64_t v129 = v20;
      __int16 v130 = 2050;
      *(void *)uint64_t v131 = v21;
      *(_WORD *)&v131[8] = 2050;
      *(void *)&v131[10] = v22;
      *(_WORD *)&v131[18] = 2050;
      *(double *)&v131[20] = (double)v21 * 0.000000999999997;
      *(_WORD *)&v131[28] = 2050;
      *(double *)&v131[30] = v23;
      *(_WORD *)&v131[38] = 2050;
      *(double *)&v131[40] = v24;
      *(_WORD *)&v131[48] = 2050;
      *(double *)&v131[50] = v25;
      *(_WORD *)&v131[58] = 2050;
      *(double *)unint64_t v132 = v26;
      v132[4] = 2050;
      *(double *)&v132[5] = v28;
      v132[9] = 2050;
      double v133 = v29;
      __int16 v134 = 2050;
      double v135 = v30;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "[manager-%{public}s] read [%{public}llu %{public}llu], timeS [%{public}f %{public}f], first sample [%{public}f %{public}f %{public}f], last sample [%{public}f %{public}f %{public}f]", (uint8_t *)&v128, 0x70u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v128, 0x65CuLL);
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_102300F10);
      }
      unint64_t v89 = v115;
      if (*(char *)(v1 + 143) < 0) {
        unint64_t v89 = (void *)*v115;
      }
      unint64_t v90 = *(void *)(v116 + 42);
      unint64_t v91 = *v12;
      double v92 = (double)*v12 * 0.000000999999997;
      double v93 = *((float *)v116 + 7);
      double v94 = *((float *)v116 + 8);
      double v95 = *((float *)v116 + 9);
      uint64_t v96 = (float *)&v116[50 * v11];
      double v97 = v96[7];
      double v98 = v96[8];
      double v99 = v96[9];
      int v120 = 136448770;
      uint64_t v121 = v89;
      __int16 v122 = 2050;
      *(void *)int v123 = v90;
      *(_WORD *)&v123[8] = 2050;
      *(void *)&v123[10] = v91;
      *(_WORD *)&v123[18] = 2050;
      *(double *)&v123[20] = (double)v90 * 0.000000999999997;
      *(_WORD *)&v123[28] = 2050;
      *(double *)&v123[30] = v92;
      *(_WORD *)&v123[38] = 2050;
      *(double *)&v123[40] = v93;
      *(_WORD *)&v123[48] = 2050;
      *(double *)&v123[50] = v94;
      *(_WORD *)&v123[58] = 2050;
      *(double *)int v124 = v95;
      v124[4] = 2050;
      *(double *)&v124[5] = v97;
      v124[9] = 2050;
      double v125 = v98;
      __int16 v126 = 2050;
      double v127 = v99;
      long long v100 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual int CLBatchedDeviceMotionClient::Client::read()", "%s\n", v100);
      if (v100 != (char *)&v128) {
        free(v100);
      }
    }
    *(double *)(v1 + 224) = (double)*v12;
  }
  uint64_t v117 = 0;
  unint64_t v118 = 0;
  long long v119 = 0;
  sub_100EC6C84((void **)&v117, (int)v7);
  uint64_t v111 = v7;
  if ((int)v7 >= 1)
  {
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    uint64_t v114 = &v119;
    uint64_t v34 = v111;
    *(void *)&long long v31 = 136446722;
    long long v113 = v31;
    *(void *)&long long v31 = 136446466;
    long long v112 = v31;
    uint64_t v35 = v1;
    while (1)
    {
      uint64_t v36 = &v116[50 * v32];
      unint64_t v37 = *(void *)(v36 + 42);
      if (*(double *)(v1 + 152) <= (float)((float)v37 * 0.000001)) {
        break;
      }
LABEL_63:
      if (++v32 == v34) {
        goto LABEL_72;
      }
    }
    if (v37 >= v33)
    {
      if (!v33)
      {
LABEL_44:
        unint64_t v33 = *(void *)(v36 + 42);
        long long v45 = v118;
        if (v118 >= v119)
        {
          int v50 = v117;
          unint64_t v51 = 0x8F5C28F5C28F5C29 * ((v118 - v117) >> 1);
          unint64_t v52 = v51 + 1;
          if (v51 + 1 > 0x51EB851EB851EB8) {
            sub_1001D7FD4();
          }
          if (0x1EB851EB851EB852 * ((v119 - v117) >> 1) > v52) {
            unint64_t v52 = 0x1EB851EB851EB852 * ((v119 - v117) >> 1);
          }
          if (0x8F5C28F5C28F5C29 * ((v119 - v117) >> 1) >= 0x28F5C28F5C28F5CLL) {
            unint64_t v53 = 0x51EB851EB851EB8;
          }
          else {
            unint64_t v53 = v52;
          }
          if (v53)
          {
            uint64_t v54 = (char *)sub_100EC6FF4((uint64_t)v114, v53);
            int v50 = v117;
            long long v45 = v118;
          }
          else
          {
            uint64_t v54 = 0;
          }
          long long v55 = &v54[50 * v51];
          long long v56 = *(_OWORD *)v36;
          long long v57 = *((_OWORD *)v36 + 1);
          long long v58 = *((_OWORD *)v36 + 2);
          *((_WORD *)v55 + 24) = *((_WORD *)v36 + 24);
          *((_OWORD *)v55 + 1) = v57;
          *((_OWORD *)v55 + 2) = v58;
          *(_OWORD *)long long v55 = v56;
          if (v45 == v50)
          {
            long long v63 = &v54[50 * v51];
          }
          else
          {
            long long v59 = &v54[50 * v51];
            do
            {
              long long v60 = *(_OWORD *)((char *)v45 - 50);
              long long v61 = *(_OWORD *)((char *)v45 - 34);
              long long v62 = *(_OWORD *)((char *)v45 - 18);
              long long v63 = v59 - 50;
              *((_WORD *)v59 - 1) = *((_WORD *)v45 - 1);
              *(_OWORD *)(v59 - 18) = v62;
              *(_OWORD *)(v59 - 34) = v61;
              *(_OWORD *)(v59 - 50) = v60;
              long long v45 = (_OWORD *)((char *)v45 - 50);
              v59 -= 50;
            }
            while (v45 != v50);
          }
          long long v49 = v55 + 50;
          uint64_t v117 = v63;
          unint64_t v118 = v55 + 50;
          long long v119 = &v54[50 * v53];
          if (v50) {
            operator delete(v50);
          }
        }
        else
        {
          long long v46 = *(_OWORD *)v36;
          long long v47 = *((_OWORD *)v36 + 1);
          long long v48 = *((_OWORD *)v36 + 2);
          *((_WORD *)v118 + 24) = *((_WORD *)v36 + 24);
          v45[1] = v47;
          v45[2] = v48;
          *long long v45 = v46;
          long long v49 = (char *)v45 + 50;
        }
        unint64_t v118 = v49;
        goto LABEL_63;
      }
    }
    else
    {
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_102300F10);
      }
      BOOL v38 = qword_102419318;
      if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
      {
        __int16 v39 = v115;
        if (*(char *)(v35 + 143) < 0) {
          __int16 v39 = (void *)*v115;
        }
        int v128 = v113;
        uint64_t v129 = v39;
        __int16 v130 = 2048;
        *(void *)uint64_t v131 = v37;
        *(_WORD *)&v131[8] = 2048;
        *(void *)&v131[10] = v33;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "[manager-%{public}s] time went backwards, current %llu, previous %llu", (uint8_t *)&v128, 0x20u);
      }
      uint64_t v1 = v35;
      if (sub_10013D1A0(115, 0))
      {
        bzero(&v128, 0x65CuLL);
        if (qword_102419310 != -1) {
          dispatch_once(&qword_102419310, &stru_102300F10);
        }
        int v40 = v115;
        if (*(char *)(v35 + 143) < 0) {
          int v40 = (void *)*v115;
        }
        int v120 = v113;
        uint64_t v121 = v40;
        __int16 v122 = 2048;
        *(void *)int v123 = v37;
        *(_WORD *)&v123[8] = 2048;
        *(void *)&v123[10] = v33;
        BOOL v41 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual int CLBatchedDeviceMotionClient::Client::read()", "%s\n", v41);
        if (v41 != (char *)&v128) {
          free(v41);
        }
        uint64_t v1 = v35;
      }
    }
    double v42 = (double)(v37 - v33) / 1000000.0;
    if (v42 > v8 * 1.5)
    {
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_102300F10);
      }
      __int16 v43 = qword_102419318;
      if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
      {
        BOOL v44 = v115;
        if (*(char *)(v35 + 143) < 0) {
          BOOL v44 = (void *)*v115;
        }
        int v128 = v112;
        uint64_t v129 = v44;
        __int16 v130 = 2050;
        *(double *)uint64_t v131 = 1.0 / v42;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "[manager-%{public}s] wrong frequency read, %{public}f", (uint8_t *)&v128, 0x16u);
      }
      uint64_t v1 = v35;
      if (sub_10013D1A0(115, 0))
      {
        bzero(&v128, 0x65CuLL);
        if (qword_102419310 != -1) {
          dispatch_once(&qword_102419310, &stru_102300F10);
        }
        long long v64 = v115;
        if (*(char *)(v35 + 143) < 0) {
          long long v64 = (void *)*v115;
        }
        int v120 = v112;
        uint64_t v121 = v64;
        __int16 v122 = 2050;
        *(double *)int v123 = 1.0 / v42;
        long long v65 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual int CLBatchedDeviceMotionClient::Client::read()", "%s\n", v65);
        if (v65 != (char *)&v128) {
          free(v65);
        }
        uint64_t v1 = v35;
      }
    }
    goto LABEL_44;
  }
LABEL_72:
  long long v66 = v117;
  long long v67 = v118;
  if (v117 == v118)
  {
    unint64_t v70 = 0;
  }
  else
  {
    double v68 = *(double *)(v1 + 160) * 1000000.0;
    long long v69 = v117;
    do
    {
      *(void *)(v69 + 42) -= (unint64_t)v68;
      v69 += 50;
    }
    while (v69 != v67);
    unint64_t v70 = 0x8F5C28F5C28F5C29 * ((v67 - v66) >> 1);
    uint64_t v71 = *(void *)(v1 + 176) + (int)v70;
    ++*(void *)(v1 + 168);
    *(void *)(v1 + 176) = v71;
    int v72 = v111;
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_102300F10);
    }
    long long v73 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_DEFAULT))
    {
      long long v74 = v115;
      if (*(char *)(v1 + 143) < 0) {
        long long v74 = (void *)*v115;
      }
      unint64_t v75 = *(void *)(v117 + 42);
      unint64_t v76 = *((void *)v118 - 1);
      uint64_t v77 = *(void *)(v1 + 168);
      uint64_t v78 = *(void *)(v1 + 176);
      int v128 = 136448258;
      uint64_t v129 = v74;
      __int16 v130 = 2050;
      *(void *)uint64_t v131 = v75;
      *(_WORD *)&v131[8] = 2050;
      *(void *)&v131[10] = v76;
      *(_WORD *)&v131[18] = 2050;
      *(double *)&v131[20] = (double)v75 * 0.000000999999997;
      *(_WORD *)&v131[28] = 2050;
      *(double *)&v131[30] = (double)v76 * 0.000000999999997;
      *(_WORD *)&v131[38] = 1026;
      *(_DWORD *)&v131[40] = v72;
      *(_WORD *)&v131[44] = 1026;
      *(_DWORD *)&v131[46] = v70;
      *(_WORD *)&v131[50] = 2050;
      *(void *)&v131[52] = v77;
      v132[0] = 2050;
      *(void *)&v132[1] = v78;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "[manager-%{public}s] notifying [%{public}llu %{public}llu], timeS [%{public}f %{public}f], trimmed from %{public}d to %{public}d, batch num %{public}llu, sample num %{public}llu", (uint8_t *)&v128, 0x54u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v128, 0x65CuLL);
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_102300F10);
      }
      long long v101 = v115;
      if (*(char *)(v1 + 143) < 0) {
        long long v101 = (void *)*v115;
      }
      unint64_t v102 = *(void *)(v117 + 42);
      unint64_t v103 = *((void *)v118 - 1);
      uint64_t v104 = *(void *)(v1 + 168);
      uint64_t v105 = *(void *)(v1 + 176);
      int v120 = 136448258;
      uint64_t v121 = v101;
      __int16 v122 = 2050;
      *(void *)int v123 = v102;
      *(_WORD *)&v123[8] = 2050;
      *(void *)&v123[10] = v103;
      *(_WORD *)&v123[18] = 2050;
      *(double *)&v123[20] = (double)v102 * 0.000000999999997;
      *(_WORD *)&v123[28] = 2050;
      *(double *)&v123[30] = (double)v103 * 0.000000999999997;
      *(_WORD *)&v123[38] = 1026;
      *(_DWORD *)&v123[40] = v72;
      *(_WORD *)&v123[44] = 1026;
      *(_DWORD *)&v123[46] = v70;
      *(_WORD *)&v123[50] = 2050;
      *(void *)&v123[52] = v104;
      v124[0] = 2050;
      *(void *)&v124[1] = v105;
      long long v106 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual int CLBatchedDeviceMotionClient::Client::read()", "%s\n", v106);
      if (v106 != (char *)&v128) {
        free(v106);
      }
    }
    double v79 = ((double)*(unint64_t *)(v117 + 42) - *(double *)(v1 + 184)) / 1000000.0;
    if (v79 > v8 * 1.5)
    {
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_102300F10);
      }
      long long v80 = qword_102419318;
      if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
      {
        long long v81 = v115;
        if (*(char *)(v1 + 143) < 0) {
          long long v81 = (void *)*v115;
        }
        double v82 = *(double *)(v1 + 184) * 0.000001;
        double v83 = (double)*((unint64_t *)v118 - 1) * 0.000001;
        int v128 = 136446978;
        uint64_t v129 = v81;
        __int16 v130 = 2050;
        *(double *)uint64_t v131 = v79;
        *(_WORD *)&v131[8] = 2050;
        *(double *)&v131[10] = v82;
        *(_WORD *)&v131[18] = 2050;
        *(double *)&v131[20] = v83;
        _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "[manager-%{public}s] gap between batches, %{public}f, last batch %{public}f, current batch %{public}f", (uint8_t *)&v128, 0x2Au);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&v128, 0x65CuLL);
        if (qword_102419310 != -1) {
          dispatch_once(&qword_102419310, &stru_102300F10);
        }
        if (*(char *)(v1 + 143) < 0) {
          uint64_t v115 = (void *)*v115;
        }
        double v107 = *(double *)(v1 + 184) * 0.000001;
        double v108 = (double)*((unint64_t *)v118 - 1) * 0.000001;
        int v120 = 136446978;
        uint64_t v121 = v115;
        __int16 v122 = 2050;
        *(double *)int v123 = v79;
        *(_WORD *)&v123[8] = 2050;
        *(double *)&v123[10] = v107;
        *(_WORD *)&v123[18] = 2050;
        *(double *)&v123[20] = v108;
        long long v109 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual int CLBatchedDeviceMotionClient::Client::read()", "%s\n", v109);
        if (v109 != (char *)&v128) {
          free(v109);
        }
      }
    }
    *(double *)(v1 + 184) = (double)*((unint64_t *)v118 - 1);
  }
  sub_100EC6D98(v1 + 192, (uint64_t)&v117, v70);
  if (v117)
  {
    unint64_t v118 = v117;
    operator delete(v117);
  }
  return v70;
}

void sub_100EC6C3C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 72);
  if (v3)
  {
    *(void *)(v1 + 80) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EC6C84(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0x8F5C28F5C28F5C29 * ((v4 - (unsigned char *)*a1) >> 1) < a2)
  {
    if (a2 >= 0x51EB851EB851EB9) {
      sub_1001D7FD4();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_100EC6FF4(v3, a2);
    uint64_t v7 = &v6[50 * (v5 / 50)];
    double v9 = &v6[50 * v8];
    uint64_t v11 = (char *)*a1;
    double v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 50);
        long long v14 = *(_OWORD *)(v10 - 34);
        long long v15 = *(_OWORD *)(v10 - 18);
        *((_WORD *)v12 - 1) = *((_WORD *)v10 - 1);
        *(_OWORD *)(v12 - 18) = v15;
        *(_OWORD *)(v12 - 34) = v14;
        *(_OWORD *)(v12 - 50) = v13;
        v12 -= 50;
        v10 -= 50;
      }
      while (v10 != v11);
      double v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t sub_100EC6D98(uint64_t a1, uint64_t a2, int a3)
{
  int v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)v3 + 48))(v3, a2, &v5);
}

uint64_t sub_100EC6DEC(void *a1)
{
  *a1 = off_102300EE0;
  sub_100EC6ED8(a1 + 24);

  return sub_100BCB73C((uint64_t)a1);
}

void sub_100EC6E40(void *a1)
{
  *a1 = off_102300EE0;
  sub_100EC6ED8(a1 + 24);
  sub_100BCB73C((uint64_t)a1);

  operator delete();
}

void sub_100EC6EA8(id a1)
{
  qword_102419318 = (uint64_t)os_log_create("com.apple.locationd.Motion", "BatchedSensor");
}

void *sub_100EC6ED8(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100EC6F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100EC6FF4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x51EB851EB851EB9) {
    sub_1001D7FA0();
  }
  return operator new(50 * a2);
}

uint64_t sub_100EC7040()
{
  sub_100134750(qword_1024821A0, "Acc800Fp");
  dword_1024821B8 = 800;
  __cxa_atexit((void (*)(void *))sub_10058C198, qword_1024821A0, (void *)&_mh_execute_header);
  sub_100134750(qword_1024821C0, "DmFp");
  dword_1024821D8 = 200;

  return __cxa_atexit((void (*)(void *))sub_10058C198, qword_1024821C0, (void *)&_mh_execute_header);
}

BOOL sub_100EC70E8(void *a1)
{
  return sub_10010448C(a1, 0) != 0;
}

void sub_100EC710C(void *a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1024821E0);

  qword_1024821E8 = (uint64_t)[a1 copy];

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1024821E0);
}

void sub_100EC7170(id a1)
{
  qword_1024821F0 = objc_opt_new();
}

BOOL sub_100EC7198(void *a1, void *a2)
{
  *a2 = 0x10000000000000;
  id v3 = [a1 objectForKey:@"TimeMissing"];
  id v4 = v3;
  if (v3)
  {
    [v3 doubleValue];
    *a2 = v5;
  }
  return v4 != 0;
}

uint64_t sub_100EC71E8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = a1;
  if (a1 == 4 && a2 == 4) {
    return 4;
  }
  if (a1 == 4 || a2 == 4)
  {
    if (a1 == 4) {
      return a2;
    }
    else {
      return a1;
    }
  }
  else if (a3 == 1)
  {
    id v6 = [off_1024752F0 indexOfObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1)];
    if (v6 <= [off_1024752F0 indexOfObject:[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2)])return v4; {
    else
    }
      return a2;
  }
  else if (!a3)
  {
    id v5 = [off_1024752F0 indexOfObject:[+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a1)];
    if (v5 >= [off_1024752F0 indexOfObject:[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2)])return v4; {
    else
    }
      return a2;
  }
  return v4;
}

id sub_100EC72FC(void *a1)
{
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id result = [&off_102397D88 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (result)
  {
    id v3 = result;
    uint64_t v4 = *(void *)v7;
    do
    {
      id v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(&off_102397D88);
        }
        [a1 removeObjectForKey:*(void *)(*((void *)&v6 + 1) + 8 * (void)v5)];
        id v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id result = [&off_102397D88 countByEnumeratingWithState:&v6 objects:v10 count:16];
      id v3 = result;
    }
    while (result);
  }
  return result;
}

void sub_100EC73F0(id a1)
{
  id v1 = [+[CLServiceVendor sharedInstance] proxyForService:@"CLCapabilityMonitor"];

  _[v1 syncgetForceCacheUpdate];
}

void sub_100EC742C(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

void sub_100EC745C(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_100EC748C()
{
  if (qword_102482210 != -1) {
    dispatch_once(&qword_102482210, &stru_102301078);
  }
  return qword_10248AE08;
}

void sub_100EC74D4()
{
  char v19 = 0;
  uint64_t v0 = sub_1000D3E78();
  sub_10006B564(v0, buf);
  char v1 = sub_1000D2988(*(uint64_t *)buf, "EnableMagnetometerCoexistenceCompensation", (BOOL *)&v19);
  if (v25[0]) {
    sub_1000DB0A0(v25[0]);
  }
  if ((v1 & 1) == 0) {
    char v19 = 1;
  }
  sub_1000D3E78();
  if (sub_1009E90AC())
  {
    CFDataRef v2 = (const __CFData *)sub_10087F1E0((int)buf);
  }
  else
  {
    sub_100EC7F98("kCLConnectionMessageCompassCalibrationData", buf);
    uint64_t v3 = objc_opt_class();
    uint64_t v4 = objc_opt_class();
    id v5 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v3, v4, objc_opt_class(), 0);
    uint64_t v17 = *(void *)buf;
    unint64_t v18 = v25[0];
    if (v25[0]) {
      atomic_fetch_add_explicit(&v25[0]->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    id v6 = +[CMMotionUtils sendMessage:&v17 withReplyClassesSync:v5];
    if (v18) {
      sub_1000DB0A0(v18);
    }
    CFDataRef v2 = (const __CFData *)[v6 objectForKeyedSubscript:CMCompassCalibrationData];
    if (v25[0]) {
      sub_1000DB0A0(v25[0]);
    }
  }
  if (v2)
  {
    if (!v19) {
      goto LABEL_36;
    }
    CFIndex Length = CFDataGetLength(v2);
    BytePtr = CFDataGetBytePtr(v2);
    if (BytePtr)
    {
      if (Length >= 2)
      {
        int v9 = *BytePtr;
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1023010F0);
        }
        double v10 = qword_1024190A8;
        if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v9;
          LOWORD(v25[0]) = 2048;
          *(std::__shared_weak_count **)((char *)v25 + 2) = (std::__shared_weak_count *)Length;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "cpas version is %u, length is %ld bytes", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190A0 != -1) {
            dispatch_once(&qword_1024190A0, &stru_1023010F0);
          }
          int v20 = 67109376;
          int v21 = v9;
          __int16 v22 = 2048;
          CFIndex v23 = Length;
          __int16 v16 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static void CLMagnetometerCoexistenceNotifier::create()", "%s\n", v16);
          if (v16 != (char *)buf) {
            free(v16);
          }
        }
        if (v9 == 5 && Length == 76) {
          operator new();
        }
        if (v9 == 6 && Length == 76) {
          operator new();
        }
        if (v9 == a40clmagnetomet[0] && Length == 76) {
          operator new();
        }
        if (v9 == a40clmagnetomet_0[0] && Length == 28) {
          operator new();
        }
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1023010F0);
        }
        long long v13 = qword_1024190A8;
        if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v9;
          LOWORD(v25[0]) = 2048;
          *(std::__shared_weak_count **)((char *)v25 + 2) = (std::__shared_weak_count *)Length;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Warning: cpas data was found but did not match any versions. version (%u) length (%ld)", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190A0 != -1) {
            dispatch_once(&qword_1024190A0, &stru_1023010F0);
          }
          int v20 = 67109376;
          int v21 = v9;
          __int16 v22 = 2048;
          CFIndex v23 = Length;
          long long v14 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static void CLMagnetometerCoexistenceNotifier::create()", "%s\n", v14);
LABEL_63:
          if (v14 != (char *)buf) {
            free(v14);
          }
        }
      }
    }
    else
    {
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1023010F0);
      }
      unint64_t v12 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning CPAS data is NULL", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1023010F0);
        }
        LOWORD(v20) = 0;
        long long v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLMagnetometerCoexistenceNotifier::create()", "%s\n", v14);
        goto LABEL_63;
      }
    }
  }
  else
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1023010F0);
    }
    uint64_t v11 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning CPAS data response was invaild.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1023010F0);
      }
      LOWORD(v20) = 0;
      long long v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLMagnetometerCoexistenceNotifier::create()", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    char v19 = 0;
  }
LABEL_36:
  if (!qword_10248AE08) {
    operator new();
  }
}

void sub_100EC7E4C()
{
}

void sub_100EC7EE8(uint64_t a1)
{
}

void sub_100EC7F30(void *a1)
{
  sub_1009D1DE4(a1);

  operator delete();
}

void sub_100EC7F68(id a1)
{
  qword_1024190A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void *sub_100EC7F98@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x70uLL);
  id result = sub_100EC7FF4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100EC7FE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100EC7FF4(void *a1, char *__s)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022B2330;
  sub_100EC8064((int)&v4, a1 + 24, __s);
  return a1;
}

void sub_100EC8050(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100EC8064(int a1, int a2, char *__s)
{
  sub_100134750(&__p, __s);
  CLConnectionMessage::CLConnectionMessage();
  if (v4 < 0) {
    operator delete(__p);
  }
}

void sub_100EC80B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100EC811C(uint64_t a1)
{
  *(void *)a1 = off_102301120;
  if (_os_feature_enabled_impl())
  {
    CFDataRef v2 = (const std::string *)sub_100EC824C(*(void **)(a1 + 32));
    uint64_t v3 = v2;
    if (v2)
    {
      if (sub_100186124(v2))
      {
        if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0)
        {
          sub_1000DC48C(__p, v3->__r_.__value_.__l.__data_, v3->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
          int64_t v9 = v3->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v4;
        }
        if (v9 >= 0) {
          id v5 = __p;
        }
        else {
          id v5 = (void **)__p[0];
        }
        id v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5, __p[0], __p[1], v9);
        if (SHIBYTE(v9) < 0) {
          operator delete(__p[0]);
        }
        [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "vendor"), "proxyForService:", @"CLClientManager"), "inUseAssertionInvalidatedDueToWatchConnectivityForClientKey:", v6];
      }
    }
  }
  [*(id *)(a1 + 32) invalidate];

  [*(id *)(a1 + 24) setValid:0];
  *(void *)(a1 + 24) = 0;
  return sub_100426880((void *)a1);
}

id sub_100EC824C(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_100EC84C4(a1);
}

void sub_100EC82B0(uint64_t a1)
{
  sub_100EC811C(a1);

  operator delete();
}

id sub_100EC82E8(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary];
  uint64_t v3 = (char *)sub_100EC824C(*(void **)(a1 + 32));
  if (v3)
  {
    long long v4 = v3;
    if (v3[23] < 0)
    {
      sub_1000DC48C(__p, *(void **)v3, *((void *)v3 + 1));
    }
    else
    {
      long long v5 = *(_OWORD *)v3;
      uint64_t v11 = *((void *)v3 + 2);
      *(_OWORD *)std::string __p = v5;
    }
    if (v11 >= 0) {
      id v6 = __p;
    }
    else {
      id v6 = (void **)__p[0];
    }
    [v2 setObject:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6) forKeyedSubscript:@"ClientKeyPath"];
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
    CLConnection::getAuditToken(v9, *(CLConnection **)(a1 + 8));
    [v2 setObject:-[CLClientKeyPath clientKey](sub_1000B5784(), "clientKey") forKeyedSubscript:@"NaturalConnectedIdentity"];
    if (v4[47] < 0)
    {
      sub_1000DC48C(__p, *((void **)v4 + 3), *((void *)v4 + 4));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(v4 + 24);
      uint64_t v11 = *((void *)v4 + 5);
    }
    if (v11 >= 0) {
      long long v7 = __p;
    }
    else {
      long long v7 = (void **)__p[0];
    }
    [v2 setObject:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7) forKeyedSubscript:@"Reason"];
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
    [v2 setObject:[NSNumber numberWithUnsignedInt:*((unsigned int *)v4 + 12)] forKeyedSubscript:@"AssertionLevel"];
  }
  return v2;
}

void sub_100EC8474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EC8494(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

id sub_100EC84C4(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1023011A0);
      }
      uint64_t v3 = qword_102418F98;
      if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      int v8 = 134218498;
      id v9 = v2;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      __int16 v12 = 2080;
      unint64_t v13 = 0x8000000101D95665 & 0x7FFFFFFFFFFFFFFFLL;
      long long v4 = v3;
      os_log_type_t v5 = OS_LOG_TYPE_ERROR;
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1023011A0);
      }
      uint64_t v7 = qword_102418F98;
      if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT)) {
        return 0;
      }
      int v8 = 134218498;
      id v9 = v2;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      __int16 v12 = 2080;
      unint64_t v13 = 0x8000000101D95665 & 0x7FFFFFFFFFFFFFFFLL;
      long long v4 = v7;
      os_log_type_t v5 = OS_LOG_TYPE_FAULT;
    }
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", (uint8_t *)&v8, 0x20u);
    return 0;
  }

  return [a1 cppObjectPtr];
}

void sub_100EC86AC(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_100EC86DC(uint64_t result, uint64_t *a2, uint64_t a3)
{
  *(void *)id result = off_1023011D0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  *(void *)(result + 32) = a3;
  *(void *)(result + 40) = v4;
  *(void *)(result + 48) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(result + 56) = 0;
  return result;
}

void sub_100EC8720(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  a1[3] = *a2;
  a1[1] = v2;
  uint64_t v3 = a2[1];
  a1[2] = v3;
  if (v2 == v3)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1023011F8);
    }
    __int16 v10 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLCyclingFTPCacheIterator, no cycling sessions found from db query", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1023011F8);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCyclingFTPCacheIterator::generateSessionHistoryIterators(std::vector<CLCyclingFTPHistory::Session> &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  else
  {
    uint64_t v4 = (double *)a1[5];
    if (*(double *)(v2 + 24) < *v4)
    {
      uint64_t v5 = v2 + 88;
      do
      {
        uint64_t v6 = v5 + 88;
        if (v5 == v3) {
          break;
        }
        double v7 = *(double *)(v5 + 24);
        v5 += 88;
      }
      while (v7 < *v4);
      uint64_t v2 = v6 - 88;
      a1[1] = v6 - 88;
    }
    double v8 = v4[1];
    if (*(double *)(v3 - 72) > v8)
    {
      do
      {
        if (v3 == v2) {
          break;
        }
        a1[2] = v3 - 88;
        double v9 = *(double *)(v3 - 160);
        v3 -= 88;
      }
      while (v9 > v8);
    }
  }
}

void sub_100EC8934(uint64_t a1)
{
  if (sub_1005D7F68(*(void *)(a1 + 32)) && sub_1005D8420(*(void *)(a1 + 32)))
  {
    uint64_t v2 = *(uint64_t **)(*(void *)(a1 + 40) + 40);
    if (v2)
    {
      sub_100EC8720((void *)a1, v2);
    }
    else
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1023011F8);
      }
      uint64_t v3 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLCyclingFTPCacheIterator, no CLCyclingFTPHistory record returned from db query", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_1023011F8);
        }
        uint64_t v4 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCyclingFTPCacheIterator::cache()", "%s\n", v4);
        if (v4 != (char *)buf) {
          free(v4);
        }
      }
    }
  }
  *(unsigned char *)(a1 + 56) = 1;
}

void sub_100EC8B00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    sub_1005D8930(v2, a1);
    *(void *)(a1 + 8) = *(void *)(a1 + 16);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  if (v3) {
    sub_1000DB0A0(v3);
  }
  *(unsigned char *)(a1 + 56) = 0;
}

void *sub_100EC8B4C(void *a1)
{
  *a1 = off_1023011D0;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

void sub_100EC8B98(void *a1)
{
  *a1 = off_1023011D0;
  char v1 = (std::__shared_weak_count *)a1[6];
  if (v1) {
    sub_1000DB0A0(v1);
  }

  operator delete();
}

void sub_100EC8C04(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100EC8C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_100EB8E90(a1, a2, a3);
  *(void *)uint64_t v4 = &off_102301228;
  *(unsigned char *)(v4 + 64) = 0;
  sub_1000C7F88(&v7);
  BOOL v9 = 0;
  int v5 = sub_1000D2988(v7, "CLProactiveInertialOdometryIsEnabled", &v9) ^ 1;
  if (v9) {
    LOBYTE(v5) = 1;
  }
  *(unsigned char *)(a1 + 64) = v5;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return a1;
}

void sub_100EC8CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  sub_100EB8ECC(v11);
  _Unwind_Resume(a1);
}

void sub_100EC8CF8(void *a1)
{
  sub_100EB8ECC(a1);

  operator delete();
}

void sub_100EC8D30(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100EC8E10(id a1)
{
  qword_102482248 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLStreamingAwareLocationProviderSilo"];
}

uint64_t sub_100EC8ED0(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100EC9494;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102482260 != -1) {
    dispatch_once(&qword_102482260, block);
  }
  return qword_102482258;
}

void sub_100EC90B8(void *a1, void *a2)
{
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_102301560);
  }
  uint64_t v4 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v15 = 68289282;
    __int16 v16 = 2082;
    uint64_t v17 = "";
    __int16 v18 = 2082;
    id v19 = [[objc_msgSend(a2, "description") UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Accuracy enablement assertion to be released\", \"client\":%{public, location:escape_only}s}", (uint8_t *)&v15, 0x1Cu);
  }
  int v5 = (void *)a1[32];
  if (!v5)
  {
LABEL_10:
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_102301560);
    }
    uint64_t v7 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = [[[a2 description] UTF8String];
      uint64_t v9 = a1[33];
      unint64_t v15 = 68289538;
      __int16 v16 = 2082;
      uint64_t v17 = "";
      __int16 v18 = 2082;
      id v19 = v8;
      __int16 v20 = 2050;
      uint64_t v21 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Accuracy enablement assertion not released\", \"client\":%{public, location:escape_only}s, \"fAccuracyAssertions size\":%{public}ld}", (uint8_t *)&v15, 0x26u);
    }
    return;
  }
  while (1)
  {
    unint64_t v6 = v5[4];
    if (v6 <= (unint64_t)a2) {
      break;
    }
LABEL_9:
    int v5 = (void *)*v5;
    if (!v5) {
      goto LABEL_10;
    }
  }
  if (v6 < (unint64_t)a2)
  {
    ++v5;
    goto LABEL_9;
  }
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_102301560);
  }
  __int16 v10 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = [[objc_msgSend(a2, "description") UTF8String];
    unint64_t v15 = 68289282;
    __int16 v16 = 2082;
    uint64_t v17 = "";
    __int16 v18 = 2082;
    id v19 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Accuracy enablement assertion released\", \"client\":%{public, location:escape_only}s}", (uint8_t *)&v15, 0x1Cu);
  }
  unint64_t v15 = (unint64_t)a2;
  sub_100700910((uint64_t)(a1 + 31), &v15);

  BOOL v12 = sub_10000B260((uint64_t)a1);
  unint64_t v13 = (unsigned char *)a1[16];
  double Current = CFAbsoluteTimeGetCurrent();
  sub_10000DE64(v13, v12, Current);
}

void sub_100EC93A0()
{
}

void sub_100EC9458(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_100EC9494()
{
}

void sub_100EC94E0()
{
}

void sub_100EC9504(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1006B766C(a1, "Streaming aware location provider", a2);
  *(void *)uint64_t v3 = off_1023012D0;
  *(void *)(v3 + 120) = off_102301440;
  *(void *)(v3 + 128) = 0;
  *(void *)(a1 + 136) = [objc_msgSend(*(id *)(v3 + 32), "vendor") proxyForService:@"CLRemoteMotionAlarm" forClient:@"CLStreamingAwareLocationProvider"];
  *(_OWORD *)uint64_t buf = xmmword_101D95738;
  *(void *)&uint8_t buf[16] = 2;
  sub_100732978(a1 + 144, (int *)buf, 3);
  sub_100ECB6C0((uint64_t *)(a1 + 168), a1 + 144);
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 248) = a1 + 256;
  *(void *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 224) = 0;
  sub_1000C7F88(buf);
  LOBYTE(v8) = 0;
  char v4 = sub_1000D2988(*(uint64_t *)buf, "ForceStreamingBehaviorNoLocalGPS", (BOOL *)&v8);
  if ((_BYTE)v8) {
    char v5 = v4;
  }
  else {
    char v5 = 0;
  }
  if (v5)
  {
    int v6 = 1;
  }
  else
  {
    sub_100103240();
    int v6 = sub_10073AAE4();
  }
  *(unsigned char *)(a1 + 232) = v6;
  if (*(void *)&buf[8])
  {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    int v6 = *(unsigned __int8 *)(a1 + 232);
  }
  if (v6)
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_102301560);
    }
    uint64_t v7 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"this platform will prefer streaming for GPS locations\"}", buf, 0x12u);
    }
  }
  sub_100103240();
  if ((sub_10010145C() & 1) != 0 || *(unsigned char *)(a1 + 232))
  {
    sub_100103240();
    if ((sub_1001073D0() & 8) != 0 && !*(unsigned char *)(a1 + 232)) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_100EC9C44(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

void sub_100EC9E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102301540);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v8 = 1;
    char v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStreamingAwareLocationProvider::onStepCountNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102301540);
    }
    int v6 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      BOOL v12 = "";
      __int16 v13 = 2082;
      long long v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStreamingAwareLocationProvider::onStepCountNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  sub_100ECB49C(a4);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_100ECA040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100ECA060(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102301540);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    char v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStreamingAwareLocationProvider::onStreamedLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102301540);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStreamingAwareLocationProvider::onStreamedLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100ECB26C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100ECA21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100ECA23C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102301540);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStreamingAwareLocationProvider::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102301540);
    }
    char v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStreamingAwareLocationProvider::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  sub_100ECB384(a4, v6, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_100ECA3F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100ECA418(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(a4[4], "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102301540);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStreamingAwareLocationProvider::onManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102301540);
    }
    char v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      __int16 v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStreamingAwareLocationProvider::onManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  sub_100ECB598(a4, v6, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_100ECA5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100ECA5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102301540);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    char v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStreamingAwareLocationProvider::onLocationStreamingControlStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102301540);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStreamingAwareLocationProvider::onLocationStreamingControlStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100ECAAD8(a4, v6, v7, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100ECA7A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100ECA7C0(uint64_t a1)
{
  *(void *)a1 = off_1023012D0;
  *(void *)(a1 + 120) = off_102301440;

  *(void *)(a1 + 136) = 0;
  uint64_t v2 = *(void *)(a1 + 240);
  if (v2)
  {
    [*(id *)(v2 + 16) unregister:*(void *)(v2 + 8) forNotification:42];
    uint64_t v3 = *(void *)(a1 + 240);
    *(void *)(a1 + 240) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  char v4 = *(void **)(a1 + 248);
  if (v4 != (void *)(a1 + 256))
  {
    do
    {

      char v5 = (void *)v4[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          char v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v4[2];
          BOOL v7 = *v6 == (void)v4;
          char v4 = v6;
        }
        while (!v7);
      }
      char v4 = v6;
    }
    while (v6 != (void *)(a1 + 256));
  }
  sub_1000F5BB0(a1 + 248, *(void **)(a1 + 256));
  uint64_t v8 = *(void *)(a1 + 240);
  *(void *)(a1 + 240) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  sub_1000F5BB0(a1 + 168, *(void **)(a1 + 176));
  sub_1000F5BB0(a1 + 144, *(void **)(a1 + 152));
  uint64_t v14 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }

  return sub_1006B7BEC(a1);
}

uint64_t sub_100ECAA5C(uint64_t a1)
{
  return sub_100ECA7C0(a1 - 120);
}

void sub_100ECAA64(uint64_t a1)
{
  sub_100ECA7C0(a1);

  operator delete();
}

void sub_100ECAA9C(uint64_t a1)
{
  sub_100ECA7C0(a1 - 120);

  operator delete();
}

void sub_100ECAAD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_102301560);
  }
  uint64_t v6 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(unsigned __int8 *)(a4 + 1480);
    v9[0] = 68289282;
    v9[1] = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    __int16 v12 = 1026;
    int v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ilsa,CLStreamingAwareLocationProvider,onLocationStreamingControlStateNotification\", \"allowStreaming\":%{public}d}", (uint8_t *)v9, 0x18u);
  }
  uint64_t v8 = *(unsigned __int8 **)(a1 + 128);
  if (v8) {
    sub_100EB08E8(v8, *(unsigned __int8 *)(a4 + 1480));
  }
}

uint64_t sub_100ECABE0(void *a1, unsigned int *a2)
{
  sub_1006B7E64((uint64_t)a1);
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_102301560);
  }
  char v4 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v5 = *a2;
    v12[0] = 68289282;
    v12[1] = 0;
    __int16 v13 = 2082;
    uint64_t v14 = "";
    __int16 v15 = 1026;
    unsigned int v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Stream clearing cached notification\", \"notification\":%{public}d}", (uint8_t *)v12, 0x18u);
  }
  (*(void (**)(void *, unsigned int *))(*a1 + 120))(a1, a2);
  int v6 = *a2;
  if (*a2 >= 3)
  {
    if (v6 != 9)
    {
      [*(id *)(a1[25] + 16) unregister:*(void *)(a1[25] + 8) forNotification:*a2];
      uint64_t v9 = 0;
      __int16 v10 = dword_101D95854;
      while (dword_101D95848[v9] != *a2)
      {
        if (++v9 == 3) {
          goto LABEL_13;
        }
      }
      __int16 v10 = &dword_101D95848[v9];
LABEL_13:
      if ((char *)v10 - (char *)dword_101D95848 != 12) {
        [*(id *)(a1[26] + 16) unregister:*(void *)(a1[26] + 8) forNotification:];
      }
    }
  }
  else
  {
    int v7 = (uint64_t **)a1[16];
    double Current = CFAbsoluteTimeGetCurrent();
    sub_100017358(v7, v6, 0, Current);
  }
  return 1;
}

uint64_t sub_100ECADA0(uint64_t a1, void *a2)
{
  *(void *)a1 = off_102301488;
  id v3 = a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0x7FEFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 56) = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100ECAE60;
  void v5[3] = &unk_1022A3020;
  void v5[4] = a1;
  [v3 setHandler:v5];
  return a1;
}

void sub_100ECAE4C(_Unwind_Exception *a1)
{
  sub_10043C994((void *)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t sub_100ECAE60(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  *(unsigned char *)(v1 + 56) = 0;
  *(void *)(v1 + 48) = 0x7FEFFFFFFFFFFFFFLL;
  if (*(void *)(v1 + 40))
  {
    uint64_t v2 = v1 + 16;
    double Current = CFAbsoluteTimeGetCurrent();
    return sub_10015E508(v2, Current);
  }
  return result;
}

uint64_t sub_100ECAEBC(uint64_t a1)
{
  *(void *)a1 = off_102301488;
  [*(id *)(a1 + 8) invalidate];

  sub_10043C994((void *)(a1 + 16));
  return a1;
}

void sub_100ECAF1C(uint64_t a1)
{
  sub_100ECAEBC(a1);

  operator delete();
}

id sub_100ECAF54(id result, double a2)
{
  *((double *)result + 6) = a2;
  if (*((unsigned char *)result + 56)) {
    return [*((id *)result + 1) setNextFireTime:];
  }
  return result;
}

void *sub_100ECAF6C(uint64_t a1, uint64_t a2)
{
  return sub_100ECB7A4((void *)(a1 + 16), a2);
}

id sub_100ECAF8C(uint64_t a1)
{
  *(unsigned char *)(a1 + 56) = 1;
  return [*(id *)(a1 + 8) setNextFireTime:*(double *)(a1 + 48)];
}

id sub_100ECAFA0(uint64_t a1)
{
  *(unsigned char *)(a1 + 56) = 0;
  return [*(id *)(a1 + 8) setNextFireDelay:1.79769313e308];
}

uint64_t sub_100ECAFB4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 == 39) {
    unsigned int v3 = 0;
  }
  else {
    unsigned int v3 = a2;
  }
  if (a2 < 6) {
    unsigned int v3 = 0;
  }
  unsigned int v5 = v3;
  return (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v5, a3, 1, 0xFFFFFFFFLL, 0);
}

id sub_100ECB018(uint64_t a1, int a2)
{
  uint64_t v2 = *(void **)(a1 + 136);
  if (a2) {
    return _[v2 registerClientForRemoteMotionAlarm:CLISP_ME_TOKEN];
  }
  else {
    return _[v2 unregisterClientForRemoteMotionAlarm:CLISP_ME_TOKEN];
  }
}

id sub_100ECB034(uint64_t a1, int a2)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (a2) {
    return _[v2 registerClientForRemoteMotionAlarm:CLISP_ME_TOKEN];
  }
  else {
    return _[v2 unregisterClientForRemoteMotionAlarm:CLISP_ME_TOKEN];
  }
}

void sub_100ECB050(uint64_t a1)
{
  id v1 = [[objc_msgSend(*(id *)(a1 + 32), "silo") newTimer];
  operator new();
}

void sub_100ECB0B4()
{
}

void sub_100ECB0D8(uint64_t a1)
{
}

id sub_100ECB0E0(uint64_t a1, int a2)
{
  if (a2)
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_102301560);
    }
    unsigned int v3 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 68289026;
      int v7 = 0;
      __int16 v8 = 2082;
      uint64_t v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Turning on step count notifications\"}", (uint8_t *)&v6, 0x12u);
    }
    return [*(id *)(*(void *)(a1 + 224) + 16) register:*(void *)(*(void *)(a1 + 224) + 8) forNotification:1 registrationInfo:0];
  }
  else
  {
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_102301560);
    }
    unsigned int v5 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 68289026;
      int v7 = 0;
      __int16 v8 = 2082;
      uint64_t v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Turning off step count notifications\"}", (uint8_t *)&v6, 0x12u);
    }
    return [*(id *)(*(void *)(a1 + 224) + 16) unregister:*(void *)(*(void *)(a1 + 224) + 8) forNotification:1];
  }
}

id sub_100ECB264(uint64_t a1, int a2)
{
  return sub_100ECB0E0(a1 - 120, a2);
}

uint64_t sub_100ECB26C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_102301560);
  }
  int v7 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = (int)*a3;
    v12[0] = 68289282;
    v12[1] = 0;
    __int16 v13 = 2082;
    uint64_t v14 = "";
    __int16 v15 = 2050;
    uint64_t v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received streamed notification\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld}", (uint8_t *)v12, 0x1Cu);
  }
  uint64_t v9 = *(void *)(a1 + 128);
  double Current = CFAbsoluteTimeGetCurrent();
  return sub_100125880(v9, 1, a3, a4, Current);
}

uint64_t sub_100ECB384(uint64_t result, uint64_t a2, _DWORD *a3)
{
  if (*a3 == 1)
  {
    uint64_t v3 = result;
    if (qword_102419540 != -1) {
      dispatch_once(&qword_102419540, &stru_102301560);
    }
    char v4 = qword_102419548;
    if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
    {
      v7[0] = 68289026;
      v7[1] = 0;
      __int16 v8 = 2082;
      uint64_t v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received motion mediator notification\"}", (uint8_t *)v7, 0x12u);
    }
    uint64_t v5 = *(void *)(v3 + 128);
    double Current = CFAbsoluteTimeGetCurrent();
    return sub_100EB0AF4(v5, Current);
  }
  return result;
}

uint64_t sub_100ECB49C(uint64_t a1)
{
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_102301560);
  }
  uint64_t v2 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    __int16 v7 = 2082;
    __int16 v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received step count notification\"}", (uint8_t *)v6, 0x12u);
  }
  uint64_t v3 = *(void *)(a1 + 128);
  double Current = CFAbsoluteTimeGetCurrent();
  return sub_100EB0C04(v3, Current);
}

id *sub_100ECB598(id *result, uint64_t a2, _DWORD *a3)
{
  if ((*a3 | 4) == 4)
  {
    char v4 = result;
    id result = (id *)(*((uint64_t (**)(id *))*result + 38))(result);
    if (!*a3)
    {
      id v5 = [[[v4[4] vendor] proxyForService:@"CLClientManager"];
      if (byte_102482247 >= 0) {
        int v6 = &qword_102482230;
      }
      else {
        int v6 = (uint64_t *)qword_102482230;
      }
      __int16 v7 = +[NSString stringWithUTF8String:v6];
      return (id *)[v5 resetNotificationConsumedForIdentifier:v7];
    }
  }
  return result;
}

void sub_100ECB660(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100ECB690(id a1)
{
  qword_102419548 = (uint64_t)os_log_create("com.apple.locationd.Core", "Streaming");
}

uint64_t *sub_100ECB6C0(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100ECB718(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_100ECB700(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100ECB718(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    char v4 = a2;
    id v5 = (uint64_t **)result;
    int v6 = result + 1;
    do
    {
      id result = sub_1007329F8(v5, v6, v4 + 7, (uint64_t *)(v4 + 7));
      __int16 v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          __int16 v8 = v7;
          __int16 v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          __int16 v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          char v4 = v8;
        }
        while (!v9);
      }
      char v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void *sub_100ECB7A4(void *a1, uint64_t a2)
{
  sub_100ECB828(a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *sub_100ECB828(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100ECB8B0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D95700;
      v0[3] = unk_101D95710;
      v0[4] = xmmword_101D95720;
      v0[0] = xmmword_101D956E0;
      v0[1] = unk_101D956F0;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_100ECB990(_Unwind_Exception *a1)
{
}

uint64_t sub_100ECB9A8()
{
  sub_100134750(qword_102482218, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102482218, (void *)&_mh_execute_header);
  sub_100134750(&qword_102482230, "StreamingAwareLocationProvider");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102482230, (void *)&_mh_execute_header);
}

void sub_100ECBA40(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_1000DEF58(a2, a1);
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_102301580);
  }
  uint64_t v4 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "WsbReproc, timer", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_102301580);
    }
    id v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::NewReprocessWsbRequest::HandleEvent::operator()(const Events::Client::WsbTimer &) const", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (*(void *)(a1 + 6288) != *(void *)(a1 + 6280))
  {
    sub_100134750(buf, "Timer");
    sub_100ECBC54((uint64_t)(a2 + 746), (long long *)buf);
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_100ECBC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_10050BAA0(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_100ECBC54(uint64_t a1, long long *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v4 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((unsigned char *)a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_100ECBCD0(uint64_t a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  sub_1000DEF58(a3, a1);
  if (*(void *)(a1 + 6280) != *(void *)(a1 + 6288) && *a2 == *(_DWORD *)(a1 + 6344))
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_102301580);
    }
    int v6 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = a2[1];
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "WsbAls, reply, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102301580);
      }
      __int16 v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::NewReprocessWsbRequest::HandleEvent::operator()(const Events::Network::AlsFinished &) const", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    sub_100134750(buf, "ALS");
    sub_100ECBC54((uint64_t)(a3 + 746), (long long *)buf);
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_100ECBEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_10050BAA0(v18);
  _Unwind_Resume(a1);
}

void sub_100ECBF18(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_100ECBFE8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_100ECC0A0(_Unwind_Exception *a1)
{
}

void sub_100ECC0B8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_100ECC160(_Unwind_Exception *a1)
{
}

uint64_t sub_100ECC178(uint64_t a1)
{
  uint64_t v2 = sub_101187CA8(a1);
  *(void *)uint64_t v2 = off_1023015B0;
  *(_DWORD *)(v2 + 2648) = 1;
  sub_1010AD834(v2);
  sub_100103240();
  if (sub_10010145C()) {
    goto LABEL_8;
  }
  sub_1000C7F88(buf);
  LOBYTE(v11[0]) = 0;
  int v3 = sub_1000D2988(*(uint64_t *)buf, "UseMapsBuildingTileStyleBasic", (BOOL *)v11);
  if (LOBYTE(v11[0])) {
    int v4 = v3;
  }
  else {
    int v4 = 0;
  }
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v4) {
LABEL_8:
  }
    int v5 = 0;
  else {
    int v5 = 1;
  }
  *(_DWORD *)(a1 + 2648) = v5;
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102301640);
  }
  int v6 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(a1 + 2648);
    *(_DWORD *)uint64_t buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLMM,using maps API for building data, mapsBuildingTileStyleToUse,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102301640);
    }
    int v9 = *(_DWORD *)(a1 + 2648);
    v11[0] = 67240192;
    v11[1] = v9;
    __int16 v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLGeoFeatureAccess3dBuildingGeometry::CLGeoFeatureAccess3dBuildingGeometry()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  return a1;
}

void sub_100ECC3B8(_Unwind_Exception *a1)
{
  sub_101187DE8(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100ECC3EC(uint64_t a1, uint64_t *a2, double *a3, double *a4, uint64_t *a5)
{
  if ([*(id *)(a1 + 2600) allowNetworkTileLoad] && sub_101188738((void *)a1)) {
    [*(id *)(a1 + 2600) setAllowNetworkTileLoad:0];
  }
  double v9 = *a3;
  double v10 = *a4;
  v72[0] = _NSConcreteStackBlock;
  v72[1] = 3221225472;
  v72[2] = sub_100ECCE94;
  v72[3] = &unk_1022CFF58;
  obfloat j = +[NSMutableArray array];
  v72[4] = obj;
  uint64_t v11 = *a5;
  __int16 v12 = (double *)operator new(0x30uLL);
  *(void *)__int16 v12 = off_102301698;
  *((void *)v12 + 1) = a1;
  _DWORD v12[2] = v9;
  void v12[3] = v10;
  *((void *)v12 + 4) = v11;
  *((void *)v12 + 5) = v72;
  v94[3] = v12;
  uint64_t v88 = 0;
  unint64_t v89 = &v88;
  uint64_t v90 = 0x2020000000;
  char v91 = 0;
  uint64_t v82 = 0;
  double v83 = &v82;
  uint64_t v84 = 0x3052000000;
  uint64_t v85 = sub_100177E3C;
  uint64_t v86 = sub_1001775F8;
  dispatch_group_t v87 = 0;
  dispatch_group_t v87 = dispatch_group_create();
  uint64_t v78 = 0;
  double v79 = &v78;
  uint64_t v80 = 0x2020000000;
  uint64_t v81 = 0;
  *(void *)&long long v73 = _NSConcreteStackBlock;
  *((void *)&v73 + 1) = 3221225472;
  *(void *)&long long v74 = sub_100ECCF90;
  *((void *)&v74 + 1) = &unk_102301668;
  unint64_t v75 = &v88;
  unint64_t v76 = &v82;
  uint64_t v77 = &v78;
  dispatch_group_enter((dispatch_group_t)v83[5]);
  __int16 v13 = (void *)sub_100ECD600((uint64_t)v94, (uint64_t)&v73);
  uint64_t v14 = v83[5];
  dispatch_time_t v15 = dispatch_time(0, 100000000);
  intptr_t v16 = dispatch_group_wait(v14, v15);
  v79[3] = v16;
  if (v16)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102301640);
    }
    __int16 v17 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = v79[3];
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#Warning CLMM, GeoMapFeatureAccess query timed out,%{public}lu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102301640);
      }
      uint64_t v49 = v79[3];
      int v95 = 134349056;
      uint64_t v96 = v49;
      int v50 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)", "%s\n", v50);
      if (v50 != (char *)buf) {
        free(v50);
      }
    }
    [v13 cancel];
  }
  else if (v83[5])
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102301640);
    }
    uint64_t v19 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "CLMM,clearing dispatchGroup", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102301640);
      }
      LOWORD(v95) = 0;
      unint64_t v52 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)", "%s\n", v52);
      if (v52 != (char *)buf) {
        free(v52);
      }
    }

    v83[5] = 0;
  }
  if (v79[3]) {
    BOOL v20 = 0;
  }
  else {
    BOOL v20 = *((unsigned char *)v89 + 24) == 0;
  }
  _Block_object_dispose(&v78, 8);
  _Block_object_dispose(&v82, 8);
  _Block_object_dispose(&v88, 8);
  sub_100ECD778(v94);
  BOOL v53 = v20;
  if (v20)
  {
    *(_DWORD *)(a1 + 40) = 0;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    id v57 = [obj countByEnumeratingWithState:&v68 objects:v93 count:16];
    if (v57)
    {
      uint64_t v56 = *(void *)v69;
      do
      {
        for (uint64_t i = 0; i != v57; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v69 != v56) {
            objc_enumerationMutation(obj);
          }
          uint64_t v21 = *(void **)(*((void *)&v68 + 1) + 8 * i);
          long long v64 = 0u;
          long long v65 = 0u;
          long long v66 = 0u;
          long long v67 = 0u;
          long long v63 = v21;
          id v59 = [v21 sections];
          id v62 = [v59 countByEnumeratingWithState:&v64 objects:v92 count:16];
          if (v62)
          {
            uint64_t v61 = *(void *)v65;
            do
            {
              for (float j = 0; j != v62; float j = (char *)j + 1)
              {
                if (*(void *)v65 != v61) {
                  objc_enumerationMutation(v59);
                }
                CFIndex v23 = *(void **)(*((void *)&v64 + 1) + 8 * (void)j);
                long long v99 = 0u;
                long long v100 = 0u;
                *(_OWORD *)uint64_t buf = 0u;
                long long v98 = 0u;
                unsigned int v24 = [v63 tileSetStyle];
                if (!v24)
                {
                  [v23 height];
LABEL_38:
                  *(double *)uint64_t buf = v28;
                  goto LABEL_39;
                }
                if (v24 == 1)
                {
                  if ([v63 hasTerrainElevation])
                  {
                    [v23 topHeight];
                    double v26 = v25;
                    [v23 terrainElevation];
                    double v28 = v26 - v27;
                  }
                  else
                  {
                    [v23 topHeight];
                  }
                  goto LABEL_38;
                }
LABEL_39:
                for (unint64_t k = 0; (unint64_t)[v23 coordinateCount] > k; ++k)
                {
                  *(void *)&long long v73 = 0;
                  uint64_t v82 = 0;
                  uint64_t v88 = 0;
                  sub_1000F17A8((double *)(a1 + 56), (double *)&v82, (double *)&v88, (double *)&v73, *a3, *a4, 0.0, *((double *)[v23 coordinates] + 2 * k), *((double *)objc_msgSend(v23, "coordinates") + 2 * k + 1), 0.0);
                  uint64_t v30 = v88;
                  uint64_t v31 = v82;
                  uint64_t v32 = v98;
                  if ((unint64_t)v98 >= *((void *)&v98 + 1))
                  {
                    uint64_t v34 = (uint64_t)(v98 - *(void *)&buf[8]) >> 4;
                    unint64_t v35 = v34 + 1;
                    if ((unint64_t)(v34 + 1) >> 60) {
                      sub_1001D7FD4();
                    }
                    uint64_t v36 = *((void *)&v98 + 1) - *(void *)&buf[8];
                    if ((uint64_t)(*((void *)&v98 + 1) - *(void *)&buf[8]) >> 3 > v35) {
                      unint64_t v35 = v36 >> 3;
                    }
                    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v37 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v37 = v35;
                    }
                    __int16 v39 = (char *)sub_1000C571C((uint64_t)&v98 + 8, v37);
                    int v40 = &v39[16 * v34];
                    *(void *)int v40 = v30;
                    *((void *)v40 + 1) = v31;
                    BOOL v41 = (void *)v98;
                    double v42 = *(void **)&buf[8];
                    __int16 v43 = v40;
                    while (v41 != v42)
                    {
                      uint64_t v44 = *(v41 - 2);
                      v41 -= 2;
                      *((void *)v43 - 2) = v44;
                      v43 -= 16;
                      *((void *)v43 + 1) = v41[1];
                    }
                    unint64_t v33 = v40 + 16;
                    *(void *)&uint8_t buf[8] = v43;
                    *(void *)&long long v98 = v40 + 16;
                    *((void *)&v98 + 1) = &v39[16 * v38];
                    if (v42) {
                      operator delete(v42);
                    }
                  }
                  else
                  {
                    *(void *)long long v98 = v88;
                    *(void *)(v32 + 8) = v31;
                    unint64_t v33 = (void *)(v32 + 16);
                  }
                  *(void *)&long long v98 = v33;
                }
                sub_100E17D30((double **)&buf[8], (uint64_t)&v73);
                long long v99 = v73;
                long long v100 = v74;
                unint64_t v45 = a2[1];
                if (v45 >= a2[2])
                {
                  uint64_t v46 = sub_100D2E498(a2, (uint64_t)buf);
                }
                else
                {
                  *(void *)unint64_t v45 = *(void *)buf;
                  *(void *)(v45 + 16) = 0;
                  *(void *)(v45 + 24) = 0;
                  *(void *)(v45 + 8) = 0;
                  sub_100D2E5F0((char *)(v45 + 8), *(void **)&buf[8], (void *)v98, (uint64_t)(v98 - *(void *)&buf[8]) >> 4);
                  *(_OWORD *)(v45 + 32) = v99;
                  *(_OWORD *)(v45 + 48) = v100;
                  uint64_t v46 = v45 + 64;
                  a2[1] = v45 + 64;
                }
                a2[1] = v46;
                if (*(void *)&buf[8])
                {
                  *(void *)&long long v98 = *(void *)&buf[8];
                  operator delete(*(void **)&buf[8]);
                }
              }
              id v62 = [v59 countByEnumeratingWithState:&v64 objects:v92 count:16];
            }
            while (v62);
          }
        }
        id v57 = [obj countByEnumeratingWithState:&v68 objects:v93 count:16];
      }
      while (v57);
    }
  }
  else
  {
    ++*(_DWORD *)(a1 + 40);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102301640);
    }
    long long v47 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "CLMM,query failed (buildingsWithinDistance)", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102301640);
      }
      LOWORD(v73) = 0;
      unint64_t v51 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoFeatureAccess3dBuildingGeometry::buildingsWithinDistance(ExtrudedFootprintsList &, const double &, const double &, const double &)", "%s\n", v51);
      if (v51 != (char *)buf) {
        free(v51);
      }
    }
  }
  return v53;
}

void sub_100ECCE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

id sub_100ECCE94(uint64_t a1, void *a2)
{
  id result = [[[a2 sections] count];
  if (result)
  {
    int v5 = *(void **)(a1 + 32);
    return [v5 addObject:a2];
  }
  return result;
}

BOOL sub_100ECCEEC(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  double v8 = a4;
  uint64_t v4 = *(void *)(a3 + 56);
  uint64_t v6 = *(void *)(a3 + 64);
  uint64_t v7 = v4;
  return sub_100ECC3EC(a1, a2, (double *)&v7, (double *)&v6, (uint64_t *)&v8);
}

void sub_100ECCF28(uint64_t a1)
{
  sub_101187DE8(a1);

  operator delete();
}

void sub_100ECCF60(id a1)
{
  qword_102419438 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_100ECCF90(void *a1, void *a2)
{
  if (a2)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102301640);
    }
    uint64_t v4 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134349571;
      id v15 = [a2 code];
      __int16 v16 = 2114;
      id v17 = [a2 domain];
      __int16 v18 = 2113;
      id v19 = [a2 localizedDescription];
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning CLMM,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102301640);
      }
      [a2 code];
      [a2 domain];
      [a2 localizedDescription];
      double v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  }
  if (*(void *)(*(void *)(a1[5] + 8) + 40))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102301640);
    }
    int v5 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void **)(*(void *)(a1[6] + 8) + 24);
      int v7 = *(unsigned __int8 *)(*(void *)(a1[4] + 8) + 24);
      *(_DWORD *)uint64_t buf = 134349312;
      id v15 = v6;
      __int16 v16 = 1026;
      LODWORD(v17) = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,releasing dispatch_group,%{public}lu,errorReported,%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102301640);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1[5] + 8) + 40));
  }
  if (*(void *)(*(void *)(a1[6] + 8) + 24))
  {
    if (*(void *)(*(void *)(a1[5] + 8) + 40))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102301640);
      }
      double v8 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLMM,clearing dispatchGroup when time-out has happened", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102301640);
        }
        __int16 v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }

      *(void *)(*(void *)(a1[5] + 8) + 40) = 0;
    }
    else
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102301640);
      }
      double v9 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLMM,dispatchGroup is unexpectedly nil", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102301640);
        }
        __int16 v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_100ECD600(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_100ECD658()
{
}

__n128 sub_100ECD66C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = off_102301698;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_100ECD6C8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102301698;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

id sub_100ECD708(uint64_t a1, void *a2)
{
  return [*(id *)(*(void *)(a1 + 8) + 2600) findBuildingsNear:*(unsigned int *)(*(void *)(a1 + 8) + 2648) tileSetStyle:*(void *)(a1 + 40) handler:*(void *)(a1 + 36) completionHandler:*(double *)(a1 + 16)];
}

uint64_t sub_100ECD72C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100ECD76C()
{
}

void *sub_100ECD778(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100ECD7FC(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102301770);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: beginSeries", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102301770);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiServerResponseListener::beginSeries()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  uint64_t v4 = *(char **)(a1 + 24);
  long long v3 = (void *)(a1 + 24);
  sub_10014F400((uint64_t)(v3 - 1), v4);
  *(v3 - 1) = v3;
  void *v3 = 0;
  v3[1] = 0;
}

void sub_100ECD9A4(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102301770);
  }
  uint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)uint64_t buf = 134217984;
    *(void *)uint64_t v38 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: endSeries, size, %lu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102301770);
    }
    uint64_t v27 = *(void *)(a1 + 32);
    int v35 = 134217984;
    *(void *)uint64_t v36 = v27;
    double v28 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiServerResponseListener::endSeries()", "%s\n", v28);
    if (v28 != (char *)buf) {
      free(v28);
    }
  }
  uint64_t v4 = *(void **)(a1 + 16);
  int v5 = (void *)(a1 + 24);
  if (v4 != (void *)(a1 + 24))
  {
    do
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102301770);
      }
      uint64_t v6 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        int v7 = *((_DWORD *)v4 + 24);
        uint64_t v8 = v4[10];
        uint64_t v9 = v4[11];
        *(_DWORD *)uint64_t buf = 67109632;
        *(_DWORD *)uint64_t v38 = v7;
        *(_WORD *)&void v38[4] = 2048;
        *(void *)&v38[6] = v8;
        *(_WORD *)&v38[14] = 2048;
        *(void *)&v38[16] = v9;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILE: endSeries, checking tile, count, %u,  localLocation, %14.8lf, %14.8lf", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102301770);
        }
        int v20 = *((_DWORD *)v4 + 24);
        uint64_t v21 = v4[10];
        uint64_t v22 = v4[11];
        int v35 = 67109632;
        *(_DWORD *)uint64_t v36 = v20;
        *(_WORD *)&void v36[4] = 2048;
        *(void *)&v36[6] = v21;
        *(_WORD *)&v36[14] = 2048;
        *(void *)&unsigned __int8 v36[16] = v22;
        CFIndex v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiServerResponseListener::endSeries()", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
      if (*((int *)v4 + 24) >= 2)
      {
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_102301770);
        }
        uint64_t v11 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v12 = v4[10];
          uint64_t v13 = v4[11];
          *(_DWORD *)uint64_t buf = 134218240;
          *(void *)uint64_t v38 = v12;
          *(_WORD *)&v38[8] = 2048;
          *(void *)&v38[10] = v13;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TILES: requestDownload, %.8f, %.8f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_102301770);
          }
          uint64_t v24 = v4[10];
          uint64_t v25 = v4[11];
          int v35 = 134218240;
          *(void *)uint64_t v36 = v24;
          *(_WORD *)&v36[8] = 2048;
          *(void *)&unsigned char v36[10] = v25;
          double v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiServerResponseListener::endSeries()", "%s\n", v26);
          if (v26 != (char *)buf) {
            free(v26);
          }
        }
        id v14 = [objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLWifiTilesManager"];
        double v15 = *((double *)v4 + 10);
        double v16 = *((double *)v4 + 11);
        __int16 v29 = 0;
        char v30 = 0;
        unint64_t v31 = 0xBFF0000000000000;
        int v32 = 3;
        CFAbsoluteTime v33 = Current;
        __int16 v34 = 1;
        [v14 requestTileDownloadForLat:&v29 lon:v15 details:v16];
      }
      id v17 = (void *)v4[1];
      if (v17)
      {
        do
        {
          __int16 v18 = v17;
          id v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          __int16 v18 = (void *)v4[2];
          BOOL v19 = *v18 == (void)v4;
          uint64_t v4 = v18;
        }
        while (!v19);
      }
      uint64_t v4 = v18;
    }
    while (v18 != v5);
  }
  sub_10014F400(a1 + 16, *(char **)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = v5;
}

void sub_100ECDF0C(uint64_t a1, uint64_t *a2, char a3)
{
  sub_100ECD7FC(a1);
  if ((a3 & 1) == 0)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_102301790);
    }
    uint64_t v6 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      unint64_t v7 = 0xD37A6F4DE9BD37A7 * ((a2[1] - *a2) >> 3);
      *(_DWORD *)uint64_t buf = 134349312;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&unsigned char buf[14] = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "@WifiAps, als, %{public}lu, isNearby, %{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_102301790);
      }
      unint64_t v15 = 0xD37A6F4DE9BD37A7 * ((a2[1] - *a2) >> 3);
      int v21 = 134349312;
      unint64_t v22 = v15;
      __int16 v23 = 1026;
      int v24 = 0;
      double v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLWifiServerResponseListener::onWifiAlsResponse(const std::vector<CLAlsWifiAccessPoint>, BOOL)", "%s\n", v16);
      if (v16 != buf) {
        free(v16);
      }
    }
    uint64_t v8 = *a2;
    uint64_t v9 = a2[1];
    if (*a2 != v9)
    {
      do
      {
        if (*(double *)(v8 + 20) >= 0.0)
        {
          sub_1010832A8((uint64_t)&v21, *(double *)(v8 + 4), *(double *)(v8 + 12));
          if (sub_1001449D8((uint64_t)&v21))
          {
            double v10 = sub_100144248(a1 + 16, (uint64_t)&v21);
            if ((void *)(a1 + 24) == v10)
            {
              *(_OWORD *)uint64_t buf = *(_OWORD *)(v8 + 4);
              *(_DWORD *)&uint8_t buf[16] = 1;
              sub_100ECE50C((uint64_t **)(a1 + 16), (uint64_t)&v21, (uint64_t)&v21, (__n128 *)buf);
            }
            else
            {
              ++*((_DWORD *)v10 + 24);
            }
          }
          else
          {
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_102301770);
            }
            uint64_t v11 = qword_102419638;
            if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
            {
              sub_100C094CC((uint64_t)&v21);
              uint64_t v12 = buf;
              if (v28 < 0) {
                uint64_t v12 = *(unsigned char **)buf;
              }
              *(_DWORD *)id v17 = 136315138;
              *(void *)&void v17[4] = v12;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "TILE: macAddressResolved, invalid hash value, %s", v17, 0xCu);
              if (v28 < 0) {
                operator delete(*(void **)buf);
              }
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_102301770);
              }
              sub_100C094CC((uint64_t)&v21);
              uint64_t v13 = v17;
              if (v18 < 0) {
                uint64_t v13 = *(unsigned char **)v17;
              }
              int v19 = 136315138;
              int v20 = v13;
              id v14 = (char *)_os_log_send_and_compose_impl();
              if (v18 < 0) {
                operator delete(*(void **)v17);
              }
              sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLWifiServerResponseListener::onWifiAlsResponse(const std::vector<CLAlsWifiAccessPoint>, BOOL)", "%s\n", v14);
              if (v14 != buf) {
                free(v14);
              }
            }
          }
          if (v26 < 0) {
            operator delete(__p);
          }
        }
        v8 += 184;
      }
      while (v8 != v9);
    }
    sub_100ECD9A4(a1);
  }
}

void sub_100ECE390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100ECE3C8(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 24);
  sub_10014F400(a1 + 16, *(char **)(a1 + 24));
  *(v1 - 1) = v1;
  *uint64_t v1 = 0;
  v1[1] = 0;
}

uint64_t sub_100ECE3FC(uint64_t a1)
{
  *(void *)a1 = off_102301728;
  sub_10014F400(a1 + 16, *(char **)(a1 + 24));
  return a1;
}

void sub_100ECE444(uint64_t a1)
{
  *(void *)a1 = off_102301728;
  sub_10014F400(a1 + 16, *(char **)(a1 + 24));

  operator delete();
}

void sub_100ECE4AC(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100ECE4DC(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t *sub_100ECE50C(uint64_t **a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v7 = (uint64_t **)sub_10014F4E4((uint64_t)a1, &v10, a2);
  __n128 result = *v7;
  if (!*v7)
  {
    sub_100ECE594((uint64_t)a1, a3, a4, (uint64_t)&v9);
    sub_1000EDF90(a1, v10, v7, v9);
    return v9;
  }
  return result;
}

__n128 sub_100ECE594@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = (char *)operator new(0x68uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *((_OWORD *)v8 + 2) = *(_OWORD *)a2;
  *((void *)v8 + 6) = *(void *)(a2 + 16);
  uint64_t v9 = v8 + 56;
  if (*(char *)(a2 + 47) < 0)
  {
    sub_1000DC48C(v9, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)(a2 + 24);
    *((void *)v8 + 9) = *(void *)(a2 + 40);
  }
  __n128 result = *a3;
  *((__n128 *)v8 + 5) = *a3;
  *((void *)v8 + 12) = a3[1].n128_u64[0];
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_100ECE640(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_1008B4750(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100ECE65C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_100ECE6DC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_100ECE76C(_Unwind_Exception *a1)
{
}

void *sub_100ECE784(void *a1, char *a2, void *a3)
{
  if (!a2)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301950);
    }
    unint64_t v22 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int v35 = 68289026;
      int v36 = 0;
      __int16 v37 = 2082;
      uint64_t v38 = "";
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Attempting to create service location provider with NULL service name\"}", v35, 0x12u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301950);
      }
    }
    uint64_t v23 = qword_102419538;
    if (!os_signpost_enabled((os_log_t)qword_102419538)) {
      goto LABEL_28;
    }
    *(_DWORD *)int v35 = 68289026;
    int v36 = 0;
    __int16 v37 = 2082;
    uint64_t v38 = "";
    id v17 = "Attempting to create service location provider with NULL service name";
    char v18 = "{\"msg%{public}.0s\":\"Attempting to create service location provider with NULL service name\"}";
    int v19 = v35;
    int v20 = v23;
    uint32_t v21 = 18;
    goto LABEL_27;
  }
  v39[0] = @"LocationBundles/";
  v39[1] = +[NSString stringWithUTF8String:a2];
  uint64_t v6 = [+[NSString pathWithComponents:](NSString, "pathWithComponents:", +[NSArray arrayWithObjects:v39 count:2]) stringByAppendingPathExtension:@"bundle"];
  uint64_t v7 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 0x408uLL, 0);
  uint64_t v8 = +[NSFileManager defaultManager];
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v9 = [(NSArray *)v7 countByEnumeratingWithState:&v25 objects:v35 count:16];
  if (!v9)
  {
LABEL_13:
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301950);
    }
    unint64_t v15 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v30 = 0;
      __int16 v31 = 2082;
      int v32 = "";
      __int16 v33 = 2082;
      __int16 v34 = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unable to resolve bundle path for service\", \"serviceName\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301950);
      }
    }
    uint64_t v16 = qword_102419538;
    if (!os_signpost_enabled((os_log_t)qword_102419538)) {
      goto LABEL_28;
    }
    *(_DWORD *)uint64_t buf = 68289282;
    int v30 = 0;
    __int16 v31 = 2082;
    int v32 = "";
    __int16 v33 = 2082;
    __int16 v34 = a2;
    id v17 = "Unable to resolve bundle path for service";
    char v18 = "{\"msg%{public}.0s\":\"Unable to resolve bundle path for service\", \"serviceName\":%{public, location:escape_only}s}";
    int v19 = buf;
    int v20 = v16;
    uint32_t v21 = 28;
LABEL_27:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v17, v18, v19, v21);
LABEL_28:
    id v14 = 0;
    goto LABEL_29;
  }
  id v10 = v9;
  uint64_t v11 = *(void *)v26;
LABEL_4:
  uint64_t v12 = 0;
  while (1)
  {
    if (*(void *)v26 != v11) {
      objc_enumerationMutation(v7);
    }
    uint64_t v13 = *(void **)(*((void *)&v25 + 1) + 8 * v12);
    if (-[NSFileManager fileExistsAtPath:](v8, "fileExistsAtPath:", [v13 stringByAppendingPathComponent:v6]))
    {
      break;
    }
    if (v10 == (id)++v12)
    {
      id v10 = [(NSArray *)v7 countByEnumeratingWithState:&v25 objects:v35 count:16];
      if (v10) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  if (!v13) {
    goto LABEL_13;
  }
  id v14 = [v13 stringByAppendingPathComponent:v6];
LABEL_29:
  sub_100C0A258((uint64_t)a1, a2, a3, 0, (unint64_t)v14);
  *a1 = &off_1023017C0;
  return a1;
}

void sub_100ECEB9C()
{
}

void sub_100ECEC2C()
{
}

void sub_100ECEC54(uint64_t a1)
{
  sub_100C0AB60(a1);

  operator delete();
}

void sub_100ECEC8C(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void *sub_100ECED18@<X0>(uint64_t a1@<X8>)
{
  v10[0] = off_102301C08;
  v10[1] = sub_100ECF050;
  void v10[2] = 0;
  v10[3] = v10;
  sub_100134750(v11, "kCLConnectionMessageTranscriptSession");
  sub_100BEE270((uint64_t)&v12, (uint64_t)v10);
  uint64_t v7 = off_102301C08;
  v8[0] = sub_100ECF530;
  v8[1] = 0;
  id v9 = &v7;
  sub_100134750(v13, "kCLConnectionMessageTranscriptFetch");
  sub_100BEE270((uint64_t)&v14, (uint64_t)&v7);
  v6[0] = off_102301C08;
  v6[1] = sub_100ECFE44;
  _DWORD v6[2] = 0;
  v6[3] = v6;
  sub_100134750(v15, "kCLConnectionMessageRequestHistoricalLocations");
  sub_100BEE270((uint64_t)&v16, (uint64_t)v6);
  v5[0] = off_102301C08;
  v5[1] = sub_100ED0BA0;
  _DWORD v5[2] = 0;
  void v5[3] = v5;
  sub_100134750(v17, "kCLConnectionMessageWillPromptForTranscriptSession");
  sub_100BEE270((uint64_t)&v18, (uint64_t)v5);
  v4[0] = off_102301C08;
  v4[1] = sub_100ED101C;
  void v4[2] = 0;
  void v4[3] = v4;
  sub_100134750(v19, "kCLConnectionMessageIsConsideredInRemoteArea");
  sub_100BEE270((uint64_t)&v20, (uint64_t)v4);
  sub_100ED6824(a1, (unsigned __int8 *)v11, 5);
  uint64_t v2 = 35;
  do
  {
    sub_100BEE960(&v10[v2]);
    if (SHIBYTE((&v9)[v2]) < 0) {
      operator delete((void *)v8[v2]);
    }
    v2 -= 7;
  }
  while (v2 * 8);
  sub_100BEE960(v4);
  sub_100BEE960(v5);
  sub_100BEE960(v6);
  sub_100BEE960(&v7);
  return sub_100BEE960(v10);
}

void sub_100ECEFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  for (uint64_t i = 224; i != -56; i -= 56)
    sub_100ED13F4((uint64_t)(&a29 + i));
  sub_100BEE960(&a9);
  sub_100BEE960(&a13);
  sub_100BEE960(&a17);
  sub_100BEE960(&a21);
  sub_100BEE960(&a25);
  _Unwind_Resume(a1);
}

void sub_100ECF050(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  CFDictionaryRef Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
  sub_10013FA80((int)v24, Dictionary);
  BOOL v23 = 0;
  if ((sub_1000D2988((uint64_t)v24, "kCLConnectionMessageSubscribeKey", &v23) & 1) == 0)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102301BB8);
    }
    uint64_t v8 = qword_102419528;
    if (!os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_24;
    }
    uint64_t v11 = *(void *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v26 = 2082;
    long long v27 = "";
    __int16 v28 = 2114;
    uint64_t v29 = v11;
    id v10 = "{\"msg%{public}.0s\":\"#transcriptSession couldn't get value for kCLConnectionMessageSubscribeKey key for clie"
          "nt\", \"client\":%{public, location:escape_only}@}";
    goto LABEL_15;
  }
  sub_100134750(buf, "com.apple.locationd.transcript-session");
  char isEntitled = CLConnectionMessage::isEntitled();
  char v7 = isEntitled;
  if (SBYTE3(v29) < 0)
  {
    operator delete(*(void **)buf);
    if (v7) {
      goto LABEL_4;
    }
LABEL_17:
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102301BB8);
    }
    uint64_t v12 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 64);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v26 = 2082;
      long long v27 = "";
      __int16 v28 = 2114;
      uint64_t v29 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession #warning entitlement is required to start/stop transcript session\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102301BB8);
      }
    }
    uint64_t v14 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      uint64_t v15 = *(void *)(a1 + 64);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v26 = 2082;
      long long v27 = "";
      __int16 v28 = 2114;
      uint64_t v29 = v15;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession #warning entitlement is required to start/stop transcript session", "{\"msg%{public}.0s\":\"#transcriptSession #warning entitlement is required to start/stop transcript session\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    goto LABEL_24;
  }
  if ((isEntitled & 1) == 0) {
    goto LABEL_17;
  }
LABEL_4:
  if (v23 && (sub_10009AD44((void *)a1, @"startDate") || *(unsigned char *)(a1 + 255)))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102301BB8);
    }
    uint64_t v8 = qword_102419528;
    if (!os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_24;
    }
    uint64_t v9 = *(void *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v26 = 2082;
    long long v27 = "";
    __int16 v28 = 2114;
    uint64_t v29 = v9;
    id v10 = "{\"msg%{public}.0s\":\"#transcriptSession has already started or requested to start.\", \"client\":%{public, l"
          "ocation:escape_only}@}";
LABEL_15:
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v10, buf, 0x1Cu);
LABEL_24:
    CLConnectionMessage::sendReply();
    goto LABEL_25;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_102301BB8);
  }
  uint64_t v16 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(void *)(a1 + 64);
    int v18 = *(unsigned __int8 *)(a1 + 256);
    int v19 = *(unsigned __int8 *)(a1 + 250);
    *(_DWORD *)uint64_t buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v26 = 2082;
    long long v27 = "";
    __int16 v28 = 2114;
    uint64_t v29 = v17;
    __int16 v30 = 1026;
    int v31 = v18;
    __int16 v32 = 1026;
    int v33 = v19;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession handleMessageTranscriptSession is called\", \"client\":%{public, location:escape_only}@, \"fShouldPrompt\":%{public}hhd, \"fNeedSession\":%{public}hhd}", buf, 0x28u);
  }
  sub_1000D2988((uint64_t)v24, "kCLConnectionMessageTranscriptShouldPromptKey", (BOOL *)(a1 + 256));
  *(unsigned char *)(a1 + 250) = v23;
  uint32_t v21 = *(CLConnectionMessage **)a2;
  uint64_t v20 = *(void *)(a2 + 8);
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v22 = *(std::__shared_weak_count **)(a1 + 312);
  *(void *)(a1 + 304) = v21;
  *(void *)(a1 + 312) = v20;
  if (v22) {
    sub_1000DB0A0(v22);
  }
  sub_100ED184C(a1);
LABEL_25:
  sub_10013F3C4(v24);
}

void sub_100ECF4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_10013F3C4(&a11);

  _Unwind_Resume(a1);
}

void sub_100ECF530(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (sub_10009AD44((void *)a1, @"startDate"))
  {
    if ([*(id *)(a1 + 136) isNonProvisionallyAuthorizedForServiceTypeMask:4112])
    {
      CFDictionaryRef Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
      [Dictionary[@"kCLConnectionMessageTranscriptFetchRadiusKey"] doubleValue];
      double v7 = v6;
      unsigned int v8 = [[Dictionary objectForKeyedSubscript:@"kCLConnectionMessageTranscriptFetchSampleCountKey"] intValue];
      if ([Dictionary objectForKey:@"kCLConnectionMessageTranscriptFetchCenterLatitudeKey"]
        && [Dictionary objectForKey:@"kCLConnectionMessageTranscriptFetchCenterLongitudeKey"])
      {
        [Dictionary[@"kCLConnectionMessageTranscriptFetchCenterLatitudeKey"] doubleValue];
        double v10 = v9;
        [Dictionary[@"kCLConnectionMessageTranscriptFetchCenterLongitudeKey"] doubleValue];
        id v12 = [objc_alloc((Class)CLLocation) initWithCoordinate:sub_100ED2244((void *)a1) altitude:v10 horizontalAccuracy:v11 verticalAccuracy:-1.0 timestamp:v7];
      }
      else
      {
        id v12 = 0;
      }
      if (v7 < 0.0)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102301BD8);
        }
        long long v27 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
        {
          uint64_t v28 = *(void *)(a1 + 64);
          *(_DWORD *)uint64_t buf = 68289282;
          int v56 = 0;
          __int16 v57 = 2082;
          long long v58 = "";
          __int16 v59 = 2114;
          uint64_t v60 = v28;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession #warning Radius must be 0 or greater\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_102301BD8);
          }
        }
        uint64_t v29 = qword_102419538;
        if (os_signpost_enabled((os_log_t)qword_102419538))
        {
          uint64_t v30 = *(void *)(a1 + 64);
          *(_DWORD *)uint64_t buf = 68289282;
          int v56 = 0;
          __int16 v57 = 2082;
          long long v58 = "";
          __int16 v59 = 2114;
          uint64_t v60 = v30;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession #warning Radius must be 0 or greater", "{\"msg%{public}.0s\":\"#transcriptSession #warning Radius must be 0 or greater\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        __int16 v32 = *(CLConnectionMessage **)a2;
        uint64_t v31 = *(void *)(a2 + 8);
        if (v31) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
        }
        int v33 = *(std::__shared_weak_count **)(a1 + 296);
        *(void *)(a1 + 288) = v32;
        *(void *)(a1 + 296) = v31;
        if (v33) {
          sub_1000DB0A0(v33);
        }
        NSErrorUserInfoKey v51 = NSLocalizedDescriptionKey;
        CFStringRef v52 = @"radius must be 0 or greater";
        __int16 v34 = +[NSDictionary dictionaryWithObjects:&v52 forKeys:&v51 count:1];
LABEL_65:
        sub_100ED22A0(a1, (uint64_t)+[NSError errorWithDomain:kCLErrorDomain code:19 userInfo:v34]);
        goto LABEL_66;
      }
      if ((v8 & 0x80000000) != 0)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102301BD8);
        }
        int v40 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
        {
          uint64_t v41 = *(void *)(a1 + 64);
          *(_DWORD *)uint64_t buf = 68289282;
          int v56 = 0;
          __int16 v57 = 2082;
          long long v58 = "";
          __int16 v59 = 2114;
          uint64_t v60 = v41;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession #warning sampleCount must 0 or greater\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_102301BD8);
          }
        }
        double v42 = qword_102419538;
        if (os_signpost_enabled((os_log_t)qword_102419538))
        {
          uint64_t v43 = *(void *)(a1 + 64);
          *(_DWORD *)uint64_t buf = 68289282;
          int v56 = 0;
          __int16 v57 = 2082;
          long long v58 = "";
          __int16 v59 = 2114;
          uint64_t v60 = v43;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession #warning sampleCount must 0 or greater", "{\"msg%{public}.0s\":\"#transcriptSession #warning sampleCount must 0 or greater\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        unint64_t v45 = *(CLConnectionMessage **)a2;
        uint64_t v44 = *(void *)(a2 + 8);
        if (v44) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v46 = *(std::__shared_weak_count **)(a1 + 296);
        *(void *)(a1 + 288) = v45;
        *(void *)(a1 + 296) = v44;
        if (v46) {
          sub_1000DB0A0(v46);
        }
        NSErrorUserInfoKey v49 = NSLocalizedDescriptionKey;
        CFStringRef v50 = @"sampleCount must 0 or greater";
        __int16 v34 = +[NSDictionary dictionaryWithObjects:&v50 forKeys:&v49 count:1];
        goto LABEL_65;
      }
      int v35 = sub_100ED2244((void *)a1);
      if (v8 - 3001 >= 0xFFFFF448) {
        int v36 = v8;
      }
      else {
        int v36 = 3000;
      }
      double v37 = *(double *)(a1 + 344);
      v47[0] = _NSConcreteStackBlock;
      v47[1] = 3321888768;
      v47[2] = sub_100ED2954;
      v47[3] = &unk_1023019C8;
      __int16 v39 = *(CLConnectionMessage **)a2;
      uint64_t v38 = *(std::__shared_weak_count **)(a2 + 8);
      v47[4] = a1;
      v47[5] = v39;
      long long v48 = v38;
      if (v38) {
        atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_100ED24F8(a1, (const __CFDate *)v35, v36, (uint64_t)v12, (uint64_t)v47, v37);
      int v19 = v48;
      if (v48) {
        goto LABEL_52;
      }
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
      uint64_t v20 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = *(void *)(a1 + 64);
        *(_DWORD *)uint64_t buf = 68289282;
        int v56 = 0;
        __int16 v57 = 2082;
        long long v58 = "";
        __int16 v59 = 2114;
        uint64_t v60 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession Error: attempting to fetch transcript locations -- CommencementDate is set but client is not authorized for precise location\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102301BD8);
        }
      }
      unint64_t v22 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        uint64_t v23 = *(void *)(a1 + 64);
        *(_DWORD *)uint64_t buf = 68289282;
        int v56 = 0;
        __int16 v57 = 2082;
        long long v58 = "";
        __int16 v59 = 2114;
        uint64_t v60 = v23;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession Error: attempting to fetch transcript locations -- CommencementDate is set but client is not authorized for precise location", "{\"msg%{public}.0s\":\"#transcriptSession Error: attempting to fetch transcript locations -- CommencementDate is set but client is not authorized for precise location\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
      long long v25 = *(CLConnectionMessage **)a2;
      uint64_t v24 = *(void *)(a2 + 8);
      if (v24) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
      }
      __int16 v26 = *(std::__shared_weak_count **)(a1 + 296);
      *(void *)(a1 + 288) = v25;
      *(void *)(a1 + 296) = v24;
      if (v26) {
        sub_1000DB0A0(v26);
      }
      sub_100ED22A0(a1, 0);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
    uint64_t v13 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 64);
      *(_DWORD *)uint64_t buf = 68289282;
      int v56 = 0;
      __int16 v57 = 2082;
      long long v58 = "";
      __int16 v59 = 2114;
      uint64_t v60 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession a transcript session has not yet started\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
    }
    uint64_t v15 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v16 = *(void *)(a1 + 64);
      *(_DWORD *)uint64_t buf = 68289282;
      int v56 = 0;
      __int16 v57 = 2082;
      long long v58 = "";
      __int16 v59 = 2114;
      uint64_t v60 = v16;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession a transcript session has not yet started", "{\"msg%{public}.0s\":\"#transcriptSession a transcript session has not yet started\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    if (*(void *)(a1 + 288))
    {
      NSErrorUserInfoKey v53 = NSLocalizedDescriptionKey;
      CFStringRef v54 = @"Unauthorized for receiving historical locations.";
      sub_100ED22A0(a1, (uint64_t)+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 0, +[NSDictionary dictionaryWithObjects:&v54 forKeys:&v53 count:1]));
    }
    int v18 = *(CLConnectionMessage **)a2;
    uint64_t v17 = *(void *)(a2 + 8);
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    int v19 = *(std::__shared_weak_count **)(a1 + 296);
    *(void *)(a1 + 288) = v18;
    *(void *)(a1 + 296) = v17;
    if (v19) {
LABEL_52:
    }
      sub_1000DB0A0(v19);
  }
LABEL_66:
}

void sub_100ECFDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }

  _Unwind_Resume(a1);
}

void sub_100ECFE44(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  CFDictionaryRef Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
  CFStringRef v6 = (const __CFString *)[Dictionary objectForKeyedSubscript:@"kCLConnectionMessagePurposeIdentifierKey"];
  *(_DWORD *)(a1 + 336) = [[Dictionary objectForKeyedSubscript:@"kCLConnectionMessageTranscriptFetchSampleCountKey"] intValue];
  unsigned int v8 = *(CLConnectionMessage **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  double v9 = *(std::__shared_weak_count **)(a1 + 296);
  *(void *)(a1 + 288) = v8;
  *(void *)(a1 + 296) = v7;
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (!v6)
  {
LABEL_65:
    int v36 = *(_DWORD *)(a1 + 336);
    if (v36 <= 0)
    {
      *(_DWORD *)(a1 + 336) = 3;
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102301BB8);
      }
      uint64_t v43 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v44 = *(void *)(a1 + 64);
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2114;
        *(void *)&unsigned char buf[20] = v44;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession sampleCount is clamping to MIN sample count\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_102301BB8);
        }
      }
      __int16 v39 = qword_102419528;
      if (os_signpost_enabled((os_log_t)qword_102419528))
      {
        uint64_t v45 = *(void *)(a1 + 64);
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2114;
        *(void *)&unsigned char buf[20] = v45;
        uint64_t v41 = "#transcriptSession sampleCount is clamping to MIN sample count";
        double v42 = "{\"msg%{public}.0s\":\"#transcriptSession sampleCount is clamping to MIN sample count\", \"client\":%{publ"
              "ic, location:escape_only}@}";
        goto LABEL_81;
      }
    }
    else if (v36 >= 0xBB9)
    {
      *(_DWORD *)(a1 + 336) = 3000;
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102301BB8);
      }
      double v37 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v38 = *(void *)(a1 + 64);
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2114;
        *(void *)&unsigned char buf[20] = v38;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession sampleCount is clamping to MAX sample count\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_102301BB8);
        }
      }
      __int16 v39 = qword_102419528;
      if (os_signpost_enabled((os_log_t)qword_102419528))
      {
        uint64_t v40 = *(void *)(a1 + 64);
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2114;
        *(void *)&unsigned char buf[20] = v40;
        uint64_t v41 = "#transcriptSession sampleCount is clamping to MAX sample count";
        double v42 = "{\"msg%{public}.0s\":\"#transcriptSession sampleCount is clamping to MAX sample count\", \"client\":%{publ"
              "ic, location:escape_only}@}";
LABEL_81:
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v39, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v41, v42, buf, 0x1Cu);
      }
    }
    if ([*(id *)(a1 + 136) isNonProvisionallyAuthorizedForServiceTypeMask:4112])
    {
      *(unsigned char *)(a1 + 252) = 1;
      sub_100ED184C(a1);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
      uint64_t v46 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v47 = *(void *)(a1 + 64);
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2114;
        *(void *)&unsigned char buf[20] = v47;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession a request for historical locations has been made.\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102301BD8);
        }
      }
      uint64_t v18 = qword_102419538;
      if (!os_signpost_enabled((os_log_t)qword_102419538)) {
        goto LABEL_99;
      }
      uint64_t v48 = *(void *)(a1 + 64);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2114;
      *(void *)&unsigned char buf[20] = v48;
      uint64_t v20 = "#transcriptSession a request for historical locations has been made.";
      uint64_t v21 = "{\"msg%{public}.0s\":\"#transcriptSession a request for historical locations has been made.\", \"client\":%{"
            "public, location:escape_only}@}";
    }
    else
    {
      NSErrorUserInfoKey v52 = NSLocalizedDescriptionKey;
      CFStringRef v53 = @"App is not sufficiently authorized.";
      sub_100ED22A0(a1, (uint64_t)+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 19, +[NSDictionary dictionaryWithObjects:&v53 forKeys:&v52 count:1]));
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102301BB8);
      }
      NSErrorUserInfoKey v49 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_ERROR))
      {
        uint64_t v50 = *(void *)(a1 + 64);
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&unsigned char buf[18] = 2114;
        *(void *)&unsigned char buf[20] = v50;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession #warning request for historical was made but app is not authorized for precise locations\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_102301BB8);
        }
      }
      uint64_t v18 = qword_102419528;
      if (!os_signpost_enabled((os_log_t)qword_102419528)) {
        goto LABEL_99;
      }
      uint64_t v51 = *(void *)(a1 + 64);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2114;
      *(void *)&unsigned char buf[20] = v51;
      uint64_t v20 = "#transcriptSession #warning request for historical was made but app is not authorized for precise locations";
      uint64_t v21 = "{\"msg%{public}.0s\":\"#transcriptSession #warning request for historical was made but app is not authorized"
            " for precise locations\", \"client\":%{public, location:escape_only}@}";
    }
    goto LABEL_97;
  }
  double v10 = *(void **)(a1 + 64);
  if (v10)
  {
    [v10 clientName];
  }
  else
  {
    uint64_t v73 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    *(_OWORD *)long long v70 = 0u;
    long long v67 = 0u;
    *(_OWORD *)long long v68 = 0u;
    *(_OWORD *)long long v65 = 0u;
    *(_OWORD *)long long v66 = 0u;
    memset(buf, 0, sizeof(buf));
  }
  CFBundleRef v11 = sub_10120A0D4((uint64_t)buf);
  if (SHIBYTE(v72) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v70[0]);
  }
  if (SHIBYTE(v69) < 0) {
    operator delete(v68[1]);
  }
  if (SHIBYTE(v67) < 0) {
    operator delete(v66[1]);
  }
  if (SHIBYTE(v66[0]) < 0) {
    operator delete(v65[0]);
  }
  if ((char)buf[47] < 0) {
    operator delete(*(void **)&buf[24]);
  }
  if (((char)buf[23] & 0x80000000) == 0)
  {
    if (v11) {
      goto LABEL_23;
    }
LABEL_32:
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102301BB8);
    }
    uint64_t v16 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      uint64_t v17 = *(void *)(a1 + 64);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2114;
      *(void *)&unsigned char buf[20] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#transcriptSession couldn't get bundle for client\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_102301BB8);
      }
    }
    uint64_t v18 = qword_102419528;
    if (!os_signpost_enabled((os_log_t)qword_102419528)) {
      goto LABEL_99;
    }
    uint64_t v19 = *(void *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2114;
    *(void *)&unsigned char buf[20] = v19;
    uint64_t v20 = "#transcriptSession couldn't get bundle for client";
    uint64_t v21 = "{\"msg%{public}.0s\":\"#transcriptSession couldn't get bundle for client\", \"client\":%{public, location:escape_only}@}";
LABEL_97:
    __int16 v34 = v18;
    uint32_t v35 = 28;
    goto LABEL_98;
  }
  operator delete(*(void **)buf);
  if (!v11) {
    goto LABEL_32;
  }
LABEL_23:
  CFAutorelease(v11);
  id v12 = [(__CFDictionary *)CFBundleGetInfoDictionary(v11) objectForKeyedSubscript:@"NSLocationWildernessSafetyUsageDescriptionDictionary"];
  id v13 = [v12 objectForKeyedSubscript:v6];
  if (v12)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      if (!v13)
      {
        NSErrorUserInfoKey v58 = NSLocalizedDescriptionKey;
        CFStringRef v59 = @"The purposeKey provided isn't present in the app's Info.plist dictionary of temporary usage descriptions";
        uint64_t v15 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 19, +[NSDictionary dictionaryWithObjects:&v59 forKeys:&v58 count:1]);
        goto LABEL_55;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        sub_100134750(buf, "com.apple.developer.corelocation.wilderness-safety");
        char isEntitled = CLConnectionMessage::isEntitled();
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
        if (isEntitled)
        {
          uint64_t v15 = 0;
LABEL_54:
          *(void *)(a1 + 328) = v13;
          goto LABEL_55;
        }
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_102301BB8);
        }
        uint64_t v24 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_ERROR))
        {
          uint64_t v25 = *(void *)(a1 + 64);
          *(_DWORD *)uint64_t buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&unsigned char buf[18] = 2114;
          *(void *)&unsigned char buf[20] = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession will not request historical prompt because the client lacks the required API entitlement\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_102301BB8);
          }
        }
        __int16 v26 = qword_102419528;
        if (os_signpost_enabled((os_log_t)qword_102419528))
        {
          uint64_t v27 = *(void *)(a1 + 64);
          *(_DWORD *)uint64_t buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&unsigned char buf[18] = 2114;
          *(void *)&unsigned char buf[20] = v27;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v26, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession will not request historical prompt because the client lacks the required API entitlement", "{\"msg%{public}.0s\":\"#transcriptSession will not request historical prompt because the client lacks the required API entitlement\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        NSErrorUserInfoKey v54 = NSLocalizedDescriptionKey;
        CFStringRef v55 = @"Lacks the required API entitlement";
        uint64_t v23 = +[NSDictionary dictionaryWithObjects:&v55 forKeys:&v54 count:1];
      }
      else
      {
        NSErrorUserInfoKey v56 = NSLocalizedDescriptionKey;
        CFStringRef v57 = @"The purposeKey provided names an entry in Info.plist which isn't a string";
        uint64_t v23 = +[NSDictionary dictionaryWithObjects:&v57 forKeys:&v56 count:1];
      }
      uint64_t v15 = +[NSError errorWithDomain:kCLErrorDomain code:19 userInfo:v23];
      goto LABEL_54;
    }
    NSErrorUserInfoKey v60 = NSLocalizedDescriptionKey;
    CFStringRef v61 = @"Info.plist value for %@ key is not a dictionary";
    unint64_t v22 = +[NSDictionary dictionaryWithObjects:&v61 forKeys:&v60 count:1];
  }
  else
  {
    NSErrorUserInfoKey v62 = NSLocalizedDescriptionKey;
    CFStringRef v63 = @"Info.plist is missing the NSLocationWildernessSafetyUsageDescriptionDictionary key";
    unint64_t v22 = +[NSDictionary dictionaryWithObjects:&v63 forKeys:&v62 count:1];
  }
  uint64_t v15 = +[NSError errorWithDomain:kCLErrorDomain code:19 userInfo:v22];
  if (v13) {
    goto LABEL_54;
  }
LABEL_55:
  uint64_t v28 = sub_1001BA55C();
  CFStringRef v29 = sub_100041DC4(v28, v11, v6, 1);
  if (v29) {
    *(void *)(a1 + 328) = CFAutorelease(v29);
  }
  if (!v15) {
    goto LABEL_65;
  }
  sub_100ED22A0(a1, (uint64_t)v15);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_102301BB8);
  }
  uint64_t v30 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_ERROR))
  {
    uint64_t v31 = *(void *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2114;
    *(void *)&unsigned char buf[20] = v31;
    *(_WORD *)&unsigned char buf[28] = 2114;
    *(void *)&buf[30] = v15;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession app is not configured correctly for requesting historical locations\", \"client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x26u);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102301BB8);
    }
  }
  uint64_t v32 = qword_102419528;
  if (os_signpost_enabled((os_log_t)qword_102419528))
  {
    uint64_t v33 = *(void *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2114;
    *(void *)&unsigned char buf[20] = v33;
    *(_WORD *)&unsigned char buf[28] = 2114;
    *(void *)&buf[30] = v15;
    uint64_t v20 = "#transcriptSession app is not configured correctly for requesting historical locations";
    uint64_t v21 = "{\"msg%{public}.0s\":\"#transcriptSession app is not configured correctly for requesting historical locations\""
          ", \"client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}";
    __int16 v34 = v32;
    uint32_t v35 = 38;
LABEL_98:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v34, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v20, v21, buf, v35);
  }
LABEL_99:
}

void sub_100ED0B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100ED0BA0(uint64_t a1, uint64_t *a2)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102301BD8);
  }
  id v4 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 64);
    *(void *)uint64_t buf = 68289282;
    *(_WORD *)unint64_t v22 = 2082;
    *(void *)&v22[2] = "";
    *(_WORD *)&v22[10] = 2114;
    *(void *)&v22[12] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession handleMessageWillPromptForTranscriptSession\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
  }
  CFStringRef v6 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    uint64_t v7 = *(void *)(a1 + 64);
    *(void *)uint64_t buf = 68289282;
    *(_WORD *)unint64_t v22 = 2082;
    *(void *)&v22[2] = "";
    *(_WORD *)&v22[10] = 2114;
    *(void *)&v22[12] = v7;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession handleMessageWillPromptForTranscriptSession", "{\"msg%{public}.0s\":\"#transcriptSession handleMessageWillPromptForTranscriptSession\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  sub_100134750(buf, "com.apple.locationd.transcript-session");
  char isEntitled = CLConnectionMessage::isEntitled();
  char v9 = isEntitled;
  if ((v22[15] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (v9) {
      goto LABEL_10;
    }
  }
  else if (isEntitled)
  {
LABEL_10:
    *(void *)uint64_t buf = 0;
    *(void *)unint64_t v22 = buf;
    *(void *)&v22[8] = 0x2020000000;
    v22[16] = 0;
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3321888768;
    _OWORD v19[2] = sub_100ED57A8;
    void v19[3] = &unk_102301A98;
    v19[4] = buf;
    void v19[5] = a1;
    uint64_t v10 = *a2;
    CFBundleRef v11 = (std::__shared_weak_count *)a2[1];
    v19[6] = *a2;
    uint64_t v20 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v10 = *a2;
      CFBundleRef v11 = (std::__shared_weak_count *)a2[1];
    }
    id v12 = *(void **)(a1 + 272);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3321888768;
    v17[2] = sub_100ED5A10;
    void v17[3] = &unk_102301AD0;
    v17[5] = a1;
    v17[6] = v10;
    uint64_t v18 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    void v17[4] = v19;
    [v12 fetchLookbackWindowStartDateWithReply:v17];
    if (v18) {
      sub_1000DB0A0(v18);
    }
    if (v20) {
      sub_1000DB0A0(v20);
    }
    _Block_object_dispose(buf, 8);
    return;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_102301BB8);
  }
  id v13 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_ERROR))
  {
    uint64_t v14 = *(void *)(a1 + 64);
    *(void *)uint64_t buf = 68289282;
    *(_WORD *)unint64_t v22 = 2082;
    *(void *)&v22[2] = "";
    *(_WORD *)&v22[10] = 2114;
    *(void *)&v22[12] = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession #warning entitlement is required to access WillPromptForTranscriptSession\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102301BB8);
    }
  }
  uint64_t v15 = qword_102419528;
  if (os_signpost_enabled((os_log_t)qword_102419528))
  {
    uint64_t v16 = *(void *)(a1 + 64);
    *(void *)uint64_t buf = 68289282;
    *(_WORD *)unint64_t v22 = 2082;
    *(void *)&v22[2] = "";
    *(_WORD *)&v22[10] = 2114;
    *(void *)&v22[12] = v16;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession #warning entitlement is required to access WillPromptForTranscriptSession", "{\"msg%{public}.0s\":\"#transcriptSession #warning entitlement is required to access WillPromptForTranscriptSession\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  CLConnectionMessage::sendReply();
}

void sub_100ED0FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  sub_101A94FC4(v16, (void *)(v17 - 96));
  _Unwind_Resume(a1);
}

void sub_100ED101C(uint64_t a1, uint64_t *a2)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102301BD8);
  }
  id v4 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v20 = 2082;
    uint64_t v21 = "";
    __int16 v22 = 2114;
    uint64_t v23 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession handleMessageIsConsideredInRemoteArea\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
  }
  CFStringRef v6 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    uint64_t v7 = *(void *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v20 = 2082;
    uint64_t v21 = "";
    __int16 v22 = 2114;
    uint64_t v23 = v7;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession handleMessageIsConsideredInRemoteArea", "{\"msg%{public}.0s\":\"#transcriptSession handleMessageIsConsideredInRemoteArea\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  sub_100134750(buf, "com.apple.locationd.transcript-session");
  char isEntitled = CLConnectionMessage::isEntitled();
  char v9 = isEntitled;
  if (SBYTE3(v23) < 0)
  {
    operator delete(*(void **)buf);
    if (v9) {
      goto LABEL_10;
    }
  }
  else if (isEntitled)
  {
LABEL_10:
    uint64_t v10 = *(void **)(a1 + 272);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3321888768;
    v17[2] = sub_100ED607C;
    void v17[3] = &unk_102301B00;
    uint64_t v12 = *a2;
    CFBundleRef v11 = (std::__shared_weak_count *)a2[1];
    void v17[4] = a1;
    v17[5] = v12;
    uint64_t v18 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    [v10 fetchRemoteStatusWithReply:v17];
    if (v18) {
      sub_1000DB0A0(v18);
    }
    return;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_102301BB8);
  }
  id v13 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_ERROR))
  {
    uint64_t v14 = *(void *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v20 = 2082;
    uint64_t v21 = "";
    __int16 v22 = 2114;
    uint64_t v23 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession #warning entitlement is required to access isConsideredInRemoteArea\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102301BB8);
    }
  }
  uint64_t v15 = qword_102419528;
  if (os_signpost_enabled((os_log_t)qword_102419528))
  {
    uint64_t v16 = *(void *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v20 = 2082;
    uint64_t v21 = "";
    __int16 v22 = 2114;
    uint64_t v23 = v16;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession #warning entitlement is required to access isConsideredInRemoteArea", "{\"msg%{public}.0s\":\"#transcriptSession #warning entitlement is required to access isConsideredInRemoteArea\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  CLConnectionMessage::sendReply();
}

void sub_100ED13BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100ED13F4(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100ED1430(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  if (*(char *)(a5 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a5, *(void *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)__uuid_t dst = *(_OWORD *)a5;
    uint64_t v15 = *(void *)(a5 + 16);
  }
  if (*(char *)(a5 + 47) < 0)
  {
    sub_1000DC48C(&__p, *(void **)(a5 + 24), *(void *)(a5 + 32));
  }
  else
  {
    long long __p = *(_OWORD *)(a5 + 24);
    uint64_t v17 = *(void *)(a5 + 40);
  }
  uint64_t v18 = *(void *)(a5 + 48);
  sub_10001FAF4(a1, a2, a3, a4, (long long *)__dst);
  *(void *)a1 = off_102301B70;
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(__dst[0]);
  }
  *(void *)a1 = off_102301980;
  *(_DWORD *)(a1 + 250) = 0;
  *(_WORD *)(a1 + 254) = 0;
  *(void *)(a1 + 264) = objc_alloc_init(CLTranscriptSubscriptionAdapter);
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 344) = 0x404E000000000000;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0xBFF0000000000000;
  id v10 = [[objc_msgSend(*(id *)(a1 + 128), "vendor") proxyForService:@"CLRoutineMonitor"];
  *(void *)(a1 + 272) = v10;
  [v10 registerDelegate:*(void *)(a1 + 264) inSilo:[*(id *)(a1 + 128) silo]];
  id v11 = [objc_alloc((Class)CLSettingsMirror) initInUniverse:a2];
  *(void *)(a1 + 320) = v11;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100ED1690;
  void v13[3] = &unk_1022C94A8;
  void v13[4] = a1;
  [v11 setSettingsChangeHandler:v13];
  *(void *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = 3000;
  return a1;
}

void sub_100ED1634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100ED1690(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  [*(id *)(v1 + 320) doubleForKey:@"CLTS.HorizontalAccuracyValue" defaultValue:60.0];
  *(void *)(v1 + 344) = v2;
  id result = [*(id *)(v1 + 320) doubleForKey:@"CLTS.SmoothingFactorValue" defaultValue:0.0];
  *(void *)(v1 + 352) = v4;
  return result;
}

uint64_t sub_100ED16E8(uint64_t a1)
{
  *(void *)a1 = off_102301980;

  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 272) = 0;
  [*(id *)(a1 + 264) invalidate];

  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 360) = 0;
  [*(id *)(a1 + 320) invalidate];

  *(void *)(a1 + 320) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 312);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 296);
  if (v3) {
    sub_1000DB0A0(v3);
  }

  return sub_100702CC8(a1);
}

void sub_100ED17A4(uint64_t a1)
{
  sub_100ED16E8(a1);

  operator delete();
}

uint64_t sub_100ED17DC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 280);
  if (!result)
  {
    id v3 = [objc_msgSend(*(id *)(a1 + 128), "vendor") proxyForService:@"CLClientManager"];
    *(void *)(a1 + 280) = v3;
    [v3 registerDelegate:*(void *)(a1 + 264) inSilo:[*(id *)(a1 + 128) silo]];
    return *(void *)(a1 + 280);
  }
  return result;
}

void sub_100ED184C(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 136) isNonProvisionallyAuthorizedForServiceTypeMask:4112];
  if ((v2 & 1) == 0)
  {
    BOOL v9 = sub_10009AD44((void *)a1, @"startDate") != 0;
    goto LABEL_10;
  }
  int v3 = *(unsigned __int8 *)(a1 + 250);
  BOOL v4 = *(unsigned char *)(a1 + 250) != 0;
  int v5 = *(unsigned __int8 *)(a1 + 252);
  BOOL v6 = *(unsigned char *)(a1 + 252) != 0;
  uint64_t v7 = sub_10009AD44((void *)a1, @"startDate");
  uint64_t v8 = v7;
  BOOL v9 = v7 != 0;
  if (v3 && !*(unsigned char *)(a1 + 255))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102301BB8);
    }
    uint64_t v18 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = *(void *)(a1 + 64);
      int v20 = *(unsigned __int8 *)(a1 + 256);
      int v21 = *(unsigned __int8 *)(a1 + 250);
      *(_DWORD *)uint64_t buf = 68290818;
      int v57 = 0;
      __int16 v58 = 2082;
      CFStringRef v59 = "";
      __int16 v60 = 2114;
      uint64_t v61 = v19;
      __int16 v62 = 1026;
      *(_DWORD *)CFStringRef v63 = v20;
      *(_WORD *)&v63[4] = 1026;
      *(_DWORD *)&v63[6] = v21;
      __int16 v64 = 1026;
      int v65 = v3;
      __int16 v66 = 1026;
      int v67 = v5;
      __int16 v68 = 1026;
      BOOL v69 = v8 != 0;
      __int16 v70 = 1026;
      int v71 = 1;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession attempting to startTranscriptSession\", \"client\":%{public, location:escape_only}@, \"fShouldPrompt\":%{public}hhd, \"fNeedSession\":%{public}hhd, \"shouldBeStarted\":%{public}hhd, \"shouldSendSingleRequest\":%{public}hhd, \"hasBeenStarted\":%{public}hhd, \"authorized\":%{public}hhd}", buf, 0x40u);
    }
    *(unsigned char *)(a1 + 255) = 1;
    sub_100ED3474(a1);
    BOOL v4 = 1;
    if (!v8) {
      goto LABEL_36;
    }
    goto LABEL_32;
  }
  if (v5)
  {
    if (!*(unsigned char *)(a1 + 253)) {
      sub_100ED3DF0(a1);
    }
    BOOL v6 = 1;
    if (!v8) {
      goto LABEL_36;
    }
    goto LABEL_32;
  }
  if (!v3)
  {
LABEL_10:
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_102301BB8);
    }
    id v10 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 64);
      int v12 = *(unsigned __int8 *)(a1 + 256);
      int v13 = *(unsigned __int8 *)(a1 + 250);
      *(_DWORD *)uint64_t buf = 68290818;
      __int16 v58 = 2082;
      int v57 = 0;
      CFStringRef v59 = "";
      __int16 v60 = 2114;
      uint64_t v61 = v11;
      __int16 v62 = 1026;
      *(_DWORD *)CFStringRef v63 = v12;
      *(_WORD *)&v63[4] = 1026;
      *(_DWORD *)&v63[6] = v13;
      __int16 v64 = 1026;
      int v65 = 0;
      __int16 v66 = 1026;
      int v67 = 0;
      __int16 v68 = 1026;
      BOOL v69 = v9;
      __int16 v70 = 1026;
      int v71 = v2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession attempting to stopTranscriptSession\", \"client\":%{public, location:escape_only}@, \"fShouldPrompt\":%{public}hhd, \"fNeedSession\":%{public}hhd, \"shouldBeStarted\":%{public}hhd, \"shouldSendSingleRequest\":%{public}hhd, \"hasBeenStarted\":%{public}hhd, \"authorized\":%{public}hhd}", buf, 0x40u);
    }
    if ((v2 & 1) == 0)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
      uint64_t v14 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = *(void *)(a1 + 64);
        *(_DWORD *)uint64_t buf = 68289282;
        int v57 = 0;
        __int16 v58 = 2082;
        CFStringRef v59 = "";
        __int16 v60 = 2114;
        uint64_t v61 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession #warning client is not authorized for locations\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102301BD8);
        }
      }
      uint64_t v16 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        uint64_t v17 = *(void *)(a1 + 64);
        *(_DWORD *)uint64_t buf = 68289282;
        int v57 = 0;
        __int16 v58 = 2082;
        CFStringRef v59 = "";
        __int16 v60 = 2114;
        uint64_t v61 = v17;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession #warning client is not authorized for locations", "{\"msg%{public}.0s\":\"#transcriptSession #warning client is not authorized for locations\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
    }
    sub_100ED39A4((void *)a1);
    BOOL v4 = 0;
    BOOL v6 = 0;
    if (!v9) {
      goto LABEL_36;
    }
    goto LABEL_32;
  }
  BOOL v6 = 0;
  BOOL v4 = 1;
  if (!v7) {
    goto LABEL_36;
  }
LABEL_32:
  __int16 v22 = *(CLConnectionMessage **)(a1 + 288);
  if (v22)
  {
    uint64_t v23 = (void *)(a1 + 288);
    uint64_t v24 = *(std::__shared_weak_count **)(a1 + 296);
    if (v24)
    {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v25 = *(std::__shared_weak_count **)(a1 + 296);
      void *v23 = 0;
      *(void *)(a1 + 296) = 0;
      if (v25) {
        sub_1000DB0A0(v25);
      }
    }
    else
    {
      void *v23 = 0;
      *(void *)(a1 + 296) = 0;
    }
    CFDictionaryRef Dictionary = (void *)CLConnectionMessage::getDictionary(v22);
    [Dictionary[@"kCLConnectionMessageTranscriptFetchRadiusKey"] doubleValue];
    double v30 = v29;
    int v31 = [[Dictionary objectForKeyedSubscript:@"kCLConnectionMessageTranscriptFetchSampleCountKey"] intValue];
    [Dictionary[@"kCLConnectionMessageTranscriptFetchCenterLatitudeKey"] doubleValue];
    double v33 = v32;
    [Dictionary[@"kCLConnectionMessageTranscriptFetchCenterLongitudeKey"] doubleValue];
    double v35 = v34;
    if ([Dictionary objectForKey:@"kCLConnectionMessageTranscriptFetchCenterLatitudeKey"]
      && [Dictionary objectForKey:@"kCLConnectionMessageTranscriptFetchCenterLongitudeKey"])
    {
      id v36 = [objc_alloc((Class)CLLocation) initWithCoordinate:sub_100ED2244((void *)a1) altitude:v33 horizontalAccuracy:v35 verticalAccuracy:-1.0 timestamp:v30];
    }
    else
    {
      id v36 = 0;
    }
    double v37 = sub_100ED2244((void *)a1);
    double v38 = *(double *)(a1 + 344);
    v52[0] = _NSConcreteStackBlock;
    v52[1] = 3321888768;
    v52[2] = sub_100ED3F8C;
    v52[3] = &unk_1023019C8;
    v52[4] = a1;
    v52[5] = v22;
    CFStringRef v53 = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100ED24F8(a1, (const __CFDate *)v37, v31, (uint64_t)v36, (uint64_t)v52, v38);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
    __int16 v39 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v40 = *(void *)(a1 + 64);
      *(_DWORD *)uint64_t buf = 68289282;
      int v57 = 0;
      __int16 v58 = 2082;
      CFStringRef v59 = "";
      __int16 v60 = 2114;
      uint64_t v61 = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession a message was stashed, but now able to send transcript locations to client\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
    }
    uint64_t v41 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v42 = *(void *)(a1 + 64);
      *(_DWORD *)uint64_t buf = 68289282;
      int v57 = 0;
      __int16 v58 = 2082;
      CFStringRef v59 = "";
      __int16 v60 = 2114;
      uint64_t v61 = v42;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v41, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession a message was stashed, but now able to send transcript locations to client", "{\"msg%{public}.0s\":\"#transcriptSession a message was stashed, but now able to send transcript locations to client\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    if (v53) {
      sub_1000DB0A0(v53);
    }
    goto LABEL_72;
  }
LABEL_36:
  if (*(void *)(a1 + 288) && *(unsigned char *)(a1 + 254))
  {
    __int16 v26 = (void *)(a1 + 288);
    uint64_t v24 = *(std::__shared_weak_count **)(a1 + 296);
    if (v24)
    {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v27 = *(std::__shared_weak_count **)(a1 + 296);
      void *v26 = 0;
      *(void *)(a1 + 296) = 0;
      if (v27) {
        sub_1000DB0A0(v27);
      }
    }
    else
    {
      void *v26 = 0;
      *(void *)(a1 + 296) = 0;
    }
    if ([*(id *)(a1 + 360) count])
    {
      uint64_t v43 = *(void *)(a1 + 360);
      CFStringRef v54 = @"kCLConnectionMessageTranscriptFetchLocationsKey";
      uint64_t v55 = v43;
      +[NSDictionary dictionaryWithObjects:&v55 forKeys:&v54 count:1];
      CLConnectionMessage::sendReply();
    }
    else if (![*(id *)(a1 + 360) count])
    {
      sub_101A94FFC();
      abort_report_np();
      __break(1u);
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
    uint64_t v44 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v45 = *(void *)(a1 + 64);
      id v46 = [*(id *)(a1 + 360) count];
      *(_DWORD *)uint64_t buf = 68289538;
      int v57 = 0;
      __int16 v58 = 2082;
      CFStringRef v59 = "";
      __int16 v60 = 2114;
      uint64_t v61 = v45;
      __int16 v62 = 2050;
      *(void *)CFStringRef v63 = v46;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession historical request has responded\", \"client\":%{public, location:escape_only}@, \"locations\":%{public}ld}", buf, 0x26u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
    }
    uint64_t v47 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v48 = *(void *)(a1 + 64);
      id v49 = [*(id *)(a1 + 360) count];
      *(_DWORD *)uint64_t buf = 68289538;
      int v57 = 0;
      __int16 v58 = 2082;
      CFStringRef v59 = "";
      __int16 v60 = 2114;
      uint64_t v61 = v48;
      __int16 v62 = 2050;
      *(void *)CFStringRef v63 = v49;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v47, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession historical request has responded", "{\"msg%{public}.0s\":\"#transcriptSession historical request has responded\", \"client\":%{public, location:escape_only}@, \"locations\":%{public}ld}", buf, 0x26u);
    }
    sub_100ED4188(a1);
LABEL_72:
    if (v24) {
      sub_1000DB0A0(v24);
    }
    goto LABEL_74;
  }
  if ((v4 || v6) && *(unsigned char *)(a1 + 251)) {
    sub_100ED22A0(a1, 0);
  }
LABEL_74:
  unsigned __int8 v50 = [*(id *)(a1 + 136) inUseLevelIsAtLeast:5];
  double v51 = -1.0;
  if ((v50 & 1) == 0)
  {
    if (*(double *)(a1 + 368) != -1.0) {
      return;
    }
    double v51 = sub_1004BE230();
  }
  *(double *)(a1 + 368) = v51;
}

void sub_100ED21F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (v18) {
    sub_1000DB0A0(v18);
  }
  _Unwind_Resume(exception_object);
}

NSDate *sub_100ED2244(void *a1)
{
  uint64_t result = (NSDate *)sub_10009AD44(a1, @"startDate");
  if (result)
  {
    [(NSDate *)result doubleValue];
    return +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");
  }
  return result;
}

void sub_100ED22A0(uint64_t a1, uint64_t a2)
{
  BOOL v4 = (void *)(a1 + 288);
  uint64_t v6 = *(void *)(a1 + 288);
  int v5 = *(std::__shared_weak_count **)(a1 + 296);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 296);
    *BOOL v4 = 0;
    v4[1] = 0;
    if (v7) {
      sub_1000DB0A0(v7);
    }
  }
  else
  {
    *BOOL v4 = 0;
    *(void *)(a1 + 296) = 0;
  }
  *(unsigned char *)(a1 + 251) = 0;
  if (v6)
  {
    id v8 = +[NSMutableDictionary dictionary];
    id v9 = v8;
    if (a2) {
      [v8 setObject:a2 forKeyedSubscript:@"kCLConnectionMessageTranscriptError"];
    }
    +[NSDictionary dictionaryWithDictionary:v9];
    CLConnectionMessage::sendReply();
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
    id v10 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 64);
      int v14 = 68289282;
      int v15 = 0;
      __int16 v16 = 2082;
      uint64_t v17 = "";
      __int16 v18 = 2114;
      uint64_t v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession sent empty locations\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
    }
    int v12 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v13 = *(void *)(a1 + 64);
      int v14 = 68289282;
      int v15 = 0;
      __int16 v16 = 2082;
      uint64_t v17 = "";
      __int16 v18 = 2114;
      uint64_t v19 = v13;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession sent empty locations", "{\"msg%{public}.0s\":\"#transcriptSession sent empty locations\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);
    }
  }
  if (*(unsigned char *)(a1 + 252)) {
    sub_100ED4188(a1);
  }
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_100ED24D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100ED24F8(uint64_t a1, const __CFDate *a2, int a3, uint64_t a4, uint64_t a5, double a6)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102301BD8);
  }
  int v12 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 68290306;
    int v27 = 0;
    __int16 v28 = 2082;
    double v29 = "";
    __int16 v30 = 2114;
    CFDateRef v31 = a2;
    __int16 v32 = 2050;
    double v33 = a6;
    __int16 v34 = 2050;
    uint64_t v35 = a3;
    __int16 v36 = 2114;
    uint64_t v37 = a4;
    __int16 v38 = 2114;
    uint64_t v39 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession Fetching Transcript Locations from Routine\", \"startDate\":%{public, location:escape_only}@, \"horizontalAcc\":\"%{public}f\", \"sampleCount\":%{public}ld, \"locationCenter\":%{public, location:escape_only}@, \"client\":%{public, location:escape_only}@}", buf, 0x44u);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
  }
  int v14 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    uint64_t v15 = *(void *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 68290306;
    int v27 = 0;
    __int16 v28 = 2082;
    double v29 = "";
    __int16 v30 = 2114;
    CFDateRef v31 = a2;
    __int16 v32 = 2050;
    double v33 = a6;
    __int16 v34 = 2050;
    uint64_t v35 = a3;
    __int16 v36 = 2114;
    uint64_t v37 = a4;
    __int16 v38 = 2114;
    uint64_t v39 = v15;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession Fetching Transcript Locations from Routine", "{\"msg%{public}.0s\":\"#transcriptSession Fetching Transcript Locations from Routine\", \"startDate\":%{public, location:escape_only}@, \"horizontalAcc\":\"%{public}f\", \"sampleCount\":%{public}ld, \"locationCenter\":%{public, location:escape_only}@, \"client\":%{public, location:escape_only}@}", buf, 0x44u);
  }
  __int16 v16 = +[NSDate now];
  if (a2 && (id)[(NSDate *)v16 compare:a2] == (id)1)
  {
    id v17 = [objc_alloc((Class)NSDateInterval) initWithStartDate:a2 endDate:[NSDate now]];
    double AbsoluteTime = CFDateGetAbsoluteTime(a2);
    if (AbsoluteTime < CFAbsoluteTimeGetCurrent())
    {
      id v19 = [objc_alloc((Class)RTStoredLocationEnumerationOptions) initWithDateInterval:v17 horizontalAccuracy:a3 batchSize:a4 boundingBoxLocation:14 type:1 downsampleRequired:a6 smoothingErrorThreshold:*(double *)(a1 + 352)];
      [v19 setSmoothingRequired:1];
      int v20 = *(void **)(a1 + 272);
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      _OWORD v25[2] = sub_100ED2D70;
      void v25[3] = &unk_102301A00;
      v25[4] = a5;
      double v25[5] = a1;
      [v20 enumerateStoredLocationsWithOptions:v19 withReply:v25];
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
    int v21 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      CFDateRef v22 = *(const __CFDate **)(a1 + 64);
      *(_DWORD *)uint64_t buf = 68289538;
      int v27 = 0;
      __int16 v28 = 2082;
      double v29 = "";
      __int16 v30 = 2114;
      CFDateRef v31 = v22;
      __int16 v32 = 2114;
      double v33 = *(double *)&a2;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession #error date range is invalid\", \"client\":%{public, location:escape_only}@, \"startDate\":%{public, location:escape_only}@}", buf, 0x26u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
    }
    uint64_t v23 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      CFDateRef v24 = *(const __CFDate **)(a1 + 64);
      *(_DWORD *)uint64_t buf = 68289538;
      int v27 = 0;
      __int16 v28 = 2082;
      double v29 = "";
      __int16 v30 = 2114;
      CFDateRef v31 = v24;
      __int16 v32 = 2114;
      double v33 = *(double *)&a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession #error date range is invalid", "{\"msg%{public}.0s\":\"#transcriptSession #error date range is invalid\", \"client\":%{public, location:escape_only}@, \"startDate\":%{public, location:escape_only}@}", buf, 0x26u);
    }
    (*(void (**)(uint64_t, void *, void, uint64_t))(a5 + 16))(a5, &__NSArray0__struct, 0, 1);
  }
}

void sub_100ED2954(uint64_t a1, void *a2, NSError *a3, char a4)
{
  int v5 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  if (a3)
  {
    id v8 = [(NSError *)a3 localizedFailureReason];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
    id v9 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      id v10 = [(NSString *)v8 UTF8String];
      NSInteger v11 = [(NSError *)v5 code];
      uint64_t v12 = *(void *)(v7 + 64);
      *(_DWORD *)uint64_t buf = 68289794;
      int v27 = 0;
      __int16 v28 = 2082;
      double v29 = "";
      __int16 v30 = 2082;
      CFDateRef v31 = v10;
      __int16 v32 = 2050;
      NSInteger v33 = v11;
      __int16 v34 = 2114;
      uint64_t v35 = v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession Error when getting locations from CoreRoutine\", \"error\":%{public, location:escape_only}s, \"errorCode\":%{public}ld, \"client\":%{public, location:escape_only}@}", buf, 0x30u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
    }
    uint64_t v13 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v14 = [(NSString *)v8 UTF8String];
      NSInteger v15 = [(NSError *)v5 code];
      uint64_t v16 = *(void *)(v7 + 64);
      *(_DWORD *)uint64_t buf = 68289794;
      int v27 = 0;
      __int16 v28 = 2082;
      double v29 = "";
      __int16 v30 = 2082;
      CFDateRef v31 = v14;
      __int16 v32 = 2050;
      NSInteger v33 = v15;
      __int16 v34 = 2114;
      uint64_t v35 = v16;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession Error when getting locations from CoreRoutine", "{\"msg%{public}.0s\":\"#transcriptSession Error when getting locations from CoreRoutine\", \"error\":%{public, location:escape_only}s, \"errorCode\":%{public}ld, \"client\":%{public, location:escape_only}@}", buf, 0x30u);
    }
    NSErrorUserInfoKey v24 = NSLocalizedDescriptionKey;
    CFStringRef v25 = @"Error fetching locations.";
    int v5 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 0, +[NSDictionary dictionaryWithObjects:&v25 forKeys:&v24 count:1]);
  }
  if ((a4 & 1) == 0)
  {
    id v17 = +[NSMutableDictionary dictionary];
    [v17 setObject:a2 forKeyedSubscript:@"kCLConnectionMessageTranscriptFetchLocationsKey"];
    if (v5) {
      [v17 setObject:v5 forKeyedSubscript:@"kCLConnectionMessageTranscriptError"];
    }
    CLConnectionMessage::sendReply();
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
    __int16 v18 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      id v19 = *(const char **)(v7 + 64);
      id v20 = [a2 count];
      *(_DWORD *)uint64_t buf = 68289538;
      int v27 = 0;
      __int16 v28 = 2082;
      double v29 = "";
      __int16 v30 = 2114;
      CFDateRef v31 = v19;
      __int16 v32 = 2050;
      NSInteger v33 = (NSInteger)v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession locations sent to client\", \"client\":%{public, location:escape_only}@, \"locationsCount\":%{public}ld}", buf, 0x26u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
    }
    int v21 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      CFDateRef v22 = *(const char **)(v7 + 64);
      id v23 = [a2 count];
      *(_DWORD *)uint64_t buf = 68289538;
      int v27 = 0;
      __int16 v28 = 2082;
      double v29 = "";
      __int16 v30 = 2114;
      CFDateRef v31 = v22;
      __int16 v32 = 2050;
      NSInteger v33 = (NSInteger)v23;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession locations sent to client", "{\"msg%{public}.0s\":\"#transcriptSession locations sent to client\", \"client\":%{public, location:escape_only}@, \"locationsCount\":%{public}ld}", buf, 0x26u);
    }
  }
}

uint64_t sub_100ED2D70(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 40);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102301BD8);
  }
  id v9 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(v8 + 64);
    int v16 = 68289794;
    int v17 = 0;
    __int16 v18 = 2082;
    id v19 = "";
    __int16 v20 = 2114;
    uint64_t v21 = v10;
    __int16 v22 = 2050;
    id v23 = [a2 count];
    __int16 v24 = 1026;
    int v25 = a4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession Routine's enumerateStoredLocationsWithOptions handler is called with locations\", \"client\":%{public, location:escape_only}@, \"locationsCount\":%{public}ld, \"enumerationCompleted\":%{public}hhd}", (uint8_t *)&v16, 0x2Cu);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
  }
  NSInteger v11 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    uint64_t v12 = *(void *)(v8 + 64);
    id v13 = [a2 count];
    int v16 = 68289794;
    int v17 = 0;
    __int16 v18 = 2082;
    id v19 = "";
    __int16 v20 = 2114;
    uint64_t v21 = v12;
    __int16 v22 = 2050;
    id v23 = v13;
    __int16 v24 = 1026;
    int v25 = a4;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession Routine's enumerateStoredLocationsWithOptions handler is called with locations", "{\"msg%{public}.0s\":\"#transcriptSession Routine's enumerateStoredLocationsWithOptions handler is called with locations\", \"client\":%{public, location:escape_only}@, \"locationsCount\":%{public}ld, \"enumerationCompleted\":%{public}hhd}", (uint8_t *)&v16, 0x2Cu);
  }
  if (a2) {
    int v14 = a2;
  }
  else {
    int v14 = &__NSArray0__struct;
  }
  return (*(uint64_t (**)(void, void *, uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), v14, a3, a4);
}

void sub_100ED2F90(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 250) && !sub_10009AD44((void *)a1, @"startDate"))
  {
    [a2 timeIntervalSinceReferenceDate];
    sub_10009A6F0(a1, @"startDate", (uint64_t)+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
    sub_100196178(a1);
    sub_100ED17DC(a1);
    BOOL v4 = *(void **)(a1 + 64);
    if (v4) {
      [v4 clientName];
    }
    sub_1001C203C();
  }
  if (sub_10009AD44((void *)a1, @"startDate"))
  {
    if (*(void *)(a1 + 304))
    {
      CLConnectionMessage::sendReply();
      int v5 = *(std::__shared_weak_count **)(a1 + 312);
      *(void *)(a1 + 304) = 0;
      *(void *)(a1 + 312) = 0;
      if (v5) {
        sub_1000DB0A0(v5);
      }
    }
  }
}

void sub_100ED3280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100ED329C(void *a1, void *a2)
{
  if (!a2) {
    sub_101A95190();
  }
  if (sub_10009AD44(a1, @"startDate"))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
    BOOL v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 68289026;
      int v7 = 0;
      __int16 v8 = 2082;
      id v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession #Warning Can't set commencement date because a session has already started\"}", (uint8_t *)&v6, 0x12u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
    }
    int v5 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v6 = 68289026;
      int v7 = 0;
      __int16 v8 = 2082;
      id v9 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession #Warning Can't set commencement date because a session has already started", "{\"msg%{public}.0s\":\"#transcriptSession #Warning Can't set commencement date because a session has already started\"}", (uint8_t *)&v6, 0x12u);
    }
  }
  else
  {
    sub_100ED2F90((uint64_t)a1, a2);
  }
}

void sub_100ED3474(uint64_t a1)
{
  if (sub_10009AD44((void *)a1, @"startDate"))
  {
    if (*(void *)(a1 + 304))
    {
      CLConnectionMessage::sendReply();
      unsigned int v2 = *(std::__shared_weak_count **)(a1 + 312);
      *(void *)(a1 + 304) = 0;
      *(void *)(a1 + 312) = 0;
      if (v2) {
        sub_1000DB0A0(v2);
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
      int v3 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = *(void *)(a1 + 64);
        int v11 = 68289282;
        int v12 = 0;
        __int16 v13 = 2082;
        int v14 = "";
        __int16 v15 = 2114;
        uint64_t v16 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"a #transcriptSession has already started so sending an empty reply\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v11, 0x1Cu);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102301BD8);
        }
      }
      int v5 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        uint64_t v6 = *(void *)(a1 + 64);
        int v11 = 68289282;
        int v12 = 0;
        __int16 v13 = 2082;
        int v14 = "";
        __int16 v15 = 2114;
        uint64_t v16 = v6;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "a #transcriptSession has already started so sending an empty reply", "{\"msg%{public}.0s\":\"a #transcriptSession has already started so sending an empty reply\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v11, 0x1Cu);
      }
    }
    *(unsigned char *)(a1 + 255) = 0;
  }
  else
  {
    if (*(unsigned char *)(a1 + 256)) {
      sub_100ED37C0(a1);
    }
    else {
      sub_100ED329C((void *)a1, +[NSDate now]);
    }
    if (*(double *)(a1 + 368) != -1.0) {
      *(double *)(a1 + 368) = sub_1004BE230();
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
    int v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 64);
      int v11 = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      int v14 = "";
      __int16 v15 = 2114;
      uint64_t v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession attempts to start\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v11, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
    }
    id v9 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v10 = *(void *)(a1 + 64);
      int v11 = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      int v14 = "";
      __int16 v15 = 2114;
      uint64_t v16 = v10;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession attempts to start", "{\"msg%{public}.0s\":\"#transcriptSession attempts to start\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v11, 0x1Cu);
    }
  }
}

id sub_100ED37C0(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102301BD8);
  }
  unsigned int v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 68289282;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2114;
    uint64_t v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession locationd requesting fetchLookbackWindowStartDate.\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
  }
  uint64_t v4 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    uint64_t v5 = *(void *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 68289282;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2114;
    uint64_t v14 = v5;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession locationd requesting fetchLookbackWindowStartDate.", "{\"msg%{public}.0s\":\"#transcriptSession locationd requesting fetchLookbackWindowStartDate.\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  uint64_t v6 = *(void **)(a1 + 272);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_100ED4488;
  v8[3] = &unk_102301A20;
  void v8[4] = a1;
  return [v6 fetchLookbackWindowStartDateWithReply:v8];
}

void sub_100ED39A4(void *a1)
{
  if (sub_10009AD44(a1, @"startDate"))
  {
    sub_100ED17DC((uint64_t)a1);
    unsigned int v2 = (void *)a1[8];
    if (v2)
    {
      [v2 clientName];
    }
    else
    {
      uint64_t v18 = 0;
      *(_OWORD *)long long __p = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      *(_OWORD *)__int16 v15 = 0u;
      long long v12 = 0u;
      *(_OWORD *)__int16 v13 = 0u;
      *(_OWORD *)int v10 = 0u;
      *(_OWORD *)__int16 v11 = 0u;
      long long v9 = 0u;
      memset(v8, 0, sizeof(v8));
    }
    sub_1001C203C();
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102301BD8);
  }
  uint64_t v3 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)a1[8];
    v8[0] = (void *)68289282;
    LOWORD(v8[1]) = 2082;
    *(void **)((char *)&v8[1] + 2) = "";
    WORD1(v8[2]) = 2114;
    *(void **)((char *)&v8[2] + 4) = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession #warning transcript session has not started\", \"client\":%{public, location:escape_only}@}", (uint8_t *)v8, 0x1Cu);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
  }
  uint64_t v5 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    uint64_t v6 = (void *)a1[8];
    v8[0] = (void *)68289282;
    LOWORD(v8[1]) = 2082;
    *(void **)((char *)&v8[1] + 2) = "";
    WORD1(v8[2]) = 2114;
    *(void **)((char *)&v8[2] + 4) = v6;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession #warning transcript session has not started", "{\"msg%{public}.0s\":\"#transcriptSession #warning transcript session has not started\", \"client\":%{public, location:escape_only}@}", (uint8_t *)v8, 0x1Cu);
  }
  if (a1[38])
  {
    CLConnectionMessage::sendReply();
    int v7 = (std::__shared_weak_count *)a1[39];
    a1[38] = 0;
    a1[39] = 0;
    if (v7) {
      sub_1000DB0A0(v7);
    }
  }
}

void sub_100ED3DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100ED3DC8(uint64_t result)
{
  if (*(unsigned char *)(result + 248)) {
    sub_101A95328();
  }
  return result;
}

void sub_100ED3DF0(uint64_t a1)
{
  *(unsigned char *)(a1 + 253) = 1;
  sub_100ED37C0(a1);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102301BD8);
  }
  unsigned int v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 64);
    int v6 = 68289282;
    int v7 = 0;
    __int16 v8 = 2082;
    long long v9 = "";
    __int16 v10 = 2114;
    uint64_t v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession a request for historical locations has been made, attempting to prompt for historical locations if exists.\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v6, 0x1Cu);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
  }
  uint64_t v4 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    uint64_t v5 = *(void *)(a1 + 64);
    int v6 = 68289282;
    int v7 = 0;
    __int16 v8 = 2082;
    long long v9 = "";
    __int16 v10 = 2114;
    uint64_t v11 = v5;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession a request for historical locations has been made, attempting to prompt for historical locations if exists.", "{\"msg%{public}.0s\":\"#transcriptSession a request for historical locations has been made, attempting to prompt for historical locations if exists.\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v6, 0x1Cu);
  }
}

void sub_100ED3F8C(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    CFStringRef v19 = @"kCLConnectionMessageTranscriptFetchLocationsKey";
    __int16 v20 = a2;
    +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
    CLConnectionMessage::sendReply();
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
    int v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(v5 + 64);
      int v11 = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      long long v14 = "";
      __int16 v15 = 2114;
      uint64_t v16 = v7;
      __int16 v17 = 2050;
      id v18 = [a2 count];
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession locations sent to client\", \"client\":%{public, location:escape_only}@, \"locationsCount\":%{public}ld}", (uint8_t *)&v11, 0x26u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
    }
    __int16 v8 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v9 = *(void *)(v5 + 64);
      id v10 = [a2 count];
      int v11 = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      long long v14 = "";
      __int16 v15 = 2114;
      uint64_t v16 = v9;
      __int16 v17 = 2050;
      id v18 = v10;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession locations sent to client", "{\"msg%{public}.0s\":\"#transcriptSession locations sent to client\", \"client\":%{public, location:escape_only}@, \"locationsCount\":%{public}ld}", (uint8_t *)&v11, 0x26u);
    }
  }
}

void sub_100ED4188(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 252))
  {
    *(_DWORD *)(a1 + 252) = 0;
    unsigned int v2 = *(std::__shared_weak_count **)(a1 + 296);
    *(void *)(a1 + 288) = 0;
    *(void *)(a1 + 296) = 0;
    if (v2) {
      sub_1000DB0A0(v2);
    }
    *(void *)(a1 + 328) = 0;

    *(void *)(a1 + 360) = 0;
    sub_1001960EC(a1);
    sub_100196178(a1);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
    uint64_t v3 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 64);
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      id v10 = "";
      __int16 v11 = 2114;
      uint64_t v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession cleaned up historical locations request\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v7, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
    }
    uint64_t v5 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v6 = *(void *)(a1 + 64);
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      id v10 = "";
      __int16 v11 = 2114;
      uint64_t v12 = v6;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession cleaned up historical locations request", "{\"msg%{public}.0s\":\"#transcriptSession cleaned up historical locations request\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v7, 0x1Cu);
    }
  }
}

void sub_100ED4358(uint64_t a1)
{
  *(unsigned char *)(a1 + 250) = sub_10009AD44((void *)a1, @"startDate") != 0;
  sub_100ED17DC(a1);
  unsigned int v2 = *(void **)(a1 + 64);
  if (v2) {
    [v2 clientName];
  }
  sub_1001C203C();
}

void sub_100ED4474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100ED4488(uint64_t a1, const __CFDate *a2, const __CFDate *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  if (sub_10009AD44(v5, @"startDate")) {
    return;
  }
  if (a3)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
    uint64_t v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = v5[8];
      int v14 = 68289538;
      int v15 = 0;
      __int16 v16 = 2082;
      __int16 v17 = "";
      __int16 v18 = 2114;
      uint64_t v19 = v7;
      __int16 v20 = 2114;
      CFDateRef v21 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession #warning an error occurred when getting fetchLookbackWindowStartDate from CoreRoutine.  But continuing to attempt to prompt.\", \"client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x26u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
    }
    int v8 = qword_102419538;
    if (!os_signpost_enabled((os_log_t)qword_102419538)) {
      goto LABEL_12;
    }
    uint64_t v9 = v5[8];
    int v14 = 68289538;
    int v15 = 0;
    __int16 v16 = 2082;
    __int16 v17 = "";
    __int16 v18 = 2114;
    uint64_t v19 = v9;
    __int16 v20 = 2114;
    CFDateRef v21 = a3;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession #warning an error occurred when getting fetchLookbackWindowStartDate from CoreRoutine.  But continuing to attempt to prompt.", "{\"msg%{public}.0s\":\"#transcriptSession #warning an error occurred when getting fetchLookbackWindowStartDate from CoreRoutine.  But continuing to attempt to prompt.\", \"client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x26u);
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102301BD8);
  }
LABEL_12:
  id v10 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = v5[8];
    int v14 = 68289538;
    int v15 = 0;
    __int16 v16 = 2082;
    __int16 v17 = "";
    __int16 v18 = 2114;
    uint64_t v19 = v11;
    __int16 v20 = 2114;
    CFDateRef v21 = a2;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession Routine invokes fetchLookbackWindowStartDate handler with date\", \"client\":%{public, location:escape_only}@, \"Date\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x26u);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
  }
  uint64_t v12 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    uint64_t v13 = v5[8];
    int v14 = 68289538;
    int v15 = 0;
    __int16 v16 = 2082;
    __int16 v17 = "";
    __int16 v18 = 2114;
    uint64_t v19 = v13;
    __int16 v20 = 2114;
    CFDateRef v21 = a2;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession Routine invokes fetchLookbackWindowStartDate handler with date", "{\"msg%{public}.0s\":\"#transcriptSession Routine invokes fetchLookbackWindowStartDate handler with date\", \"client\":%{public, location:escape_only}@, \"Date\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x26u);
  }
  sub_100ED4788((uint64_t)v5, a2);
}

void sub_100ED4788(uint64_t a1, const __CFDate *a2)
{
  id v4 = [*(id *)(a1 + 64) legacyClientKey];
  int v5 = *(_DWORD *)(a1 + 336);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100ED4824;
  v6[3] = &unk_102301A70;
  void v6[5] = v4;
  v6[6] = a1;
  void v6[4] = a2;
  sub_100ED24F8(a1, a2, v5, 0, (uint64_t)v6, 0.0);
}

id sub_100ED4824(id result, NSArray *a2, void *a3, char a4)
{
  if ((a4 & 1) == 0)
  {
    id v4 = a2;
    int v5 = result;
    uint64_t v6 = *((void *)result + 6);
    uint64_t result = (id)sub_100ED4B68(v6, *((void **)result + 4), a2, a3);
    if (result)
    {
      if (*(unsigned char *)(v6 + 253))
      {

        id v4 = +[NSArray arrayWithArray:v4];
        *(void *)(v6 + 360) = v4;
      }
      id v7 = +[NSMutableArray array];
      if ([(NSArray *)v4 count])
      {
        unint64_t v8 = 0;
        do
        {
          uint64_t v9 = [CLUsageReportCoordinate alloc];
          [v4 objectAtIndexedSubscript:v8].coordinate
          double v11 = v10;
          [v4[v8 coordinate]];
          [v7 addObject:[[CLUsageReportCoordinate alloc] initWithLatitude:v11 longitude:v9]];
          ++v8;
        }
        while ([(NSArray *)v4 count] > v8);
      }
      id v12 = +[NSMutableDictionary dictionary];
      [v12 setObject:v7 forKeyedSubscript:@"Locations"];
      [v12 setObject:*(void *)(v6 + 328) forKeyedSubscript:@"UsageDescription"];
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
      uint64_t v13 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        NSUInteger v14 = [(NSArray *)v4 count];
        uint64_t v15 = *(void *)(v6 + 64);
        *(_DWORD *)uint64_t buf = 68289538;
        int v23 = 0;
        __int16 v24 = 2082;
        int v25 = "";
        __int16 v26 = 2050;
        NSUInteger v27 = v14;
        __int16 v28 = 2114;
        uint64_t v29 = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession attempting to prompt\", \"locationsCount\":%{public}ld, \"client\":%{public, location:escape_only}@}", buf, 0x26u);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102301BD8);
        }
      }
      __int16 v16 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        NSUInteger v17 = [(NSArray *)v4 count];
        uint64_t v18 = *(void *)(v6 + 64);
        *(_DWORD *)uint64_t buf = 68289538;
        int v23 = 0;
        __int16 v24 = 2082;
        int v25 = "";
        __int16 v26 = 2050;
        NSUInteger v27 = v17;
        __int16 v28 = 2114;
        uint64_t v29 = v18;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession attempting to prompt", "{\"msg%{public}.0s\":\"#transcriptSession attempting to prompt\", \"locationsCount\":%{public}ld, \"client\":%{public, location:escape_only}@}", buf, 0x26u);
      }
      uint64_t v19 = (void *)sub_100ED17DC(v6);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      void v21[2] = sub_100ED5108;
      v21[3] = &unk_102301A48;
      void v21[5] = v4;
      v21[6] = v6;
      uint64_t v20 = v5[5];
      v21[4] = v5[4];
      return [v19 considerPromptingForTranscriptSession:v20 dictionary:v12 requestType:16 withReply:v21];
    }
  }
  return result;
}

uint64_t sub_100ED4B68(uint64_t a1, void *a2, void *a3, void *a4)
{
  unint64_t v8 = [+[NSDate now] dateByAddingTimeInterval:-180.0];
  if (![*(id *)(a1 + 136) inUseLevelIsAtLeast:5])
  {
LABEL_27:
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
    goto LABEL_29;
  }
  [a2 timeIntervalSinceDate:v8];
  if (v9 > 0.0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
    double v10 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      double v11 = *(void **)(a1 + 64);
      int v32 = 68289282;
      int v33 = 0;
      __int16 v34 = 2082;
      uint64_t v35 = "";
      __int16 v36 = 2114;
      id v37 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession Lookback window start date is too recent. No prompt will be shown.\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v32, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
    }
    uint64_t v12 = qword_102419538;
    if (!os_signpost_enabled((os_log_t)qword_102419538)) {
      goto LABEL_29;
    }
    uint64_t v13 = *(void **)(a1 + 64);
    int v32 = 68289282;
    int v33 = 0;
    __int16 v34 = 2082;
    uint64_t v35 = "";
    __int16 v36 = 2114;
    id v37 = v13;
    NSUInteger v14 = "#transcriptSession Lookback window start date is too recent. No prompt will be shown.";
    uint64_t v15 = "{\"msg%{public}.0s\":\"#transcriptSession Lookback window start date is too recent. No prompt will be shown.\""
          ", \"client\":%{public, location:escape_only}@}";
    __int16 v16 = v12;
    uint32_t v17 = 28;
    goto LABEL_26;
  }
  if (a4)
  {
    id v18 = [a4 localizedFailureReason];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
    uint64_t v19 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      id v20 = [v18 UTF8String];
      uint64_t v21 = *(void *)(a1 + 64);
      int v32 = 68289538;
      int v33 = 0;
      __int16 v34 = 2082;
      uint64_t v35 = "";
      __int16 v36 = 2082;
      id v37 = v20;
      __int16 v38 = 2114;
      uint64_t v39 = v21;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession an error is being returned\", \"error\":%{public, location:escape_only}s, \"client\":%{public, location:escape_only}@}", (uint8_t *)&v32, 0x26u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
    }
    uint64_t v22 = qword_102419538;
    if (!os_signpost_enabled((os_log_t)qword_102419538)) {
      goto LABEL_29;
    }
    id v23 = [v18 UTF8String];
    uint64_t v24 = *(void *)(a1 + 64);
    int v32 = 68289538;
    int v33 = 0;
    __int16 v34 = 2082;
    uint64_t v35 = "";
    __int16 v36 = 2082;
    id v37 = v23;
    __int16 v38 = 2114;
    uint64_t v39 = v24;
    NSUInteger v14 = "#transcriptSession an error is being returned";
    uint64_t v15 = "{\"msg%{public}.0s\":\"#transcriptSession an error is being returned\", \"error\":%{public, location:escape_on"
          "ly}s, \"client\":%{public, location:escape_only}@}";
    __int16 v16 = v22;
    uint32_t v17 = 38;
    goto LABEL_26;
  }
  if ((unint64_t)[a3 count] > 2) {
    return 1;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102301BD8);
  }
  int v25 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
  {
    int v32 = 68289026;
    int v33 = 0;
    __int16 v34 = 2082;
    uint64_t v35 = "";
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession historical data has too few locations. No prompt will be shown.\"}", (uint8_t *)&v32, 0x12u);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
  }
  uint64_t v26 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    int v32 = 68289026;
    int v33 = 0;
    __int16 v34 = 2082;
    uint64_t v35 = "";
    NSUInteger v14 = "#transcriptSession historical data has too few locations. No prompt will be shown.";
    uint64_t v15 = "{\"msg%{public}.0s\":\"#transcriptSession historical data has too few locations. No prompt will be shown.\"}";
    __int16 v16 = v26;
    uint32_t v17 = 18;
LABEL_26:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v14, v15, (uint8_t *)&v32, v17);
    goto LABEL_27;
  }
LABEL_29:
  NSUInteger v27 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
  {
    __int16 v28 = *(void **)(a1 + 64);
    int v32 = 68289282;
    int v33 = 0;
    __int16 v34 = 2082;
    uint64_t v35 = "";
    __int16 v36 = 2114;
    id v37 = v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession failure during prompting stage - no locations will be sent.\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v32, 0x1Cu);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
  }
  uint64_t v29 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    __int16 v30 = *(void **)(a1 + 64);
    int v32 = 68289282;
    int v33 = 0;
    __int16 v34 = 2082;
    uint64_t v35 = "";
    __int16 v36 = 2114;
    id v37 = v30;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession failure during prompting stage - no locations will be sent.", "{\"msg%{public}.0s\":\"#transcriptSession failure during prompting stage - no locations will be sent.\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&v32, 0x1Cu);
  }
  if (*(unsigned char *)(a1 + 250))
  {
    sub_100ED329C((void *)a1, +[NSDate now]);
  }
  else if (*(unsigned char *)(a1 + 253))
  {
    *(unsigned char *)(a1 + 251) = 1;
  }
  sub_100ED184C(a1);
  return 0;
}

uint64_t sub_100ED5108(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t result = sub_100ED4B68(v5, *(void **)(a1 + 32), *(void **)(a1 + 40), a3);
  if (result)
  {
    if ([a2 BOOLValue])
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
      id v7 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(v5 + 64);
        uint64_t buf = 68289282;
        __int16 v37 = 2082;
        __int16 v38 = "";
        __int16 v39 = 2114;
        uint64_t v40 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession User has selected 'Allow'.\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102301BD8);
        }
      }
      double v9 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        uint64_t v10 = *(void *)(v5 + 64);
        uint64_t buf = 68289282;
        __int16 v37 = 2082;
        __int16 v38 = "";
        __int16 v39 = 2114;
        uint64_t v40 = v10;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession User has selected 'Allow'.", "{\"msg%{public}.0s\":\"#transcriptSession User has selected 'Allow'.\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
      }
      if (*(unsigned char *)(v5 + 253))
      {
        *(unsigned char *)(v5 + 254) = 1;
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102301BD8);
        }
        double v11 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
        {
          uint64_t v12 = *(void *)(v5 + 64);
          uint64_t buf = 68289282;
          __int16 v37 = 2082;
          __int16 v38 = "";
          __int16 v39 = 2114;
          uint64_t v40 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"markReceivingLocationInformation\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
        }
        uint64_t v13 = (void *)sub_100ED17DC(v5);
        NSUInteger v14 = *(void **)(v5 + 64);
        if (v14)
        {
          [v14 clientName];
        }
        else
        {
          uint64_t v35 = 0;
          *(_OWORD *)long long __p = 0u;
          long long v34 = 0u;
          long long v31 = 0u;
          *(_OWORD *)int v32 = 0u;
          long long v29 = 0u;
          *(_OWORD *)__int16 v30 = 0u;
          *(_OWORD *)NSUInteger v27 = 0u;
          *(_OWORD *)__int16 v28 = 0u;
          *(_OWORD *)int v25 = 0u;
          long long v26 = 0u;
          *(_OWORD *)uint64_t v24 = 0u;
        }
        [v13 markReceivingLocationInformation:sub_1000376D4((long long *)v24)];
        if (SHIBYTE(v34) < 0) {
          operator delete(__p[1]);
        }
        if (SHIBYTE(__p[0]) < 0) {
          operator delete(v32[0]);
        }
        if (SHIBYTE(v31) < 0) {
          operator delete(v30[1]);
        }
        if (SHIBYTE(v29) < 0) {
          operator delete(v28[1]);
        }
        if (SHIBYTE(v28[0]) < 0) {
          operator delete(v27[0]);
        }
        if (SHIBYTE(v26) < 0) {
          operator delete(v25[1]);
        }
        if (SHIBYTE(v25[0]) < 0) {
          operator delete(v24[0]);
        }
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102301BD8);
        }
        id v23 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t buf = 68289026;
          __int16 v37 = 2082;
          __int16 v38 = "";
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession Approving Single Request for historical locations - will send locations\"}", (uint8_t *)&buf, 0x12u);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_102301BD8);
          }
        }
        id v20 = qword_102419538;
        if (!os_signpost_enabled((os_log_t)qword_102419538)) {
          return sub_100ED184C(v5);
        }
        uint64_t buf = 68289026;
        __int16 v37 = 2082;
        __int16 v38 = "";
        uint64_t v21 = "#transcriptSession Approving Single Request for historical locations - will send locations";
        uint64_t v22 = "{\"msg%{public}.0s\":\"#transcriptSession Approving Single Request for historical locations - will send locations\"}";
        goto LABEL_56;
      }
      sub_100ED329C((void *)v5, *(void **)(a1 + 32));
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
      uint64_t v15 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *(void *)(v5 + 64);
        uint64_t buf = 68289282;
        __int16 v37 = 2082;
        __int16 v38 = "";
        __int16 v39 = 2114;
        uint64_t v40 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession User has selected 'Not Now'.\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102301BD8);
        }
      }
      uint32_t v17 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        uint64_t v18 = *(void *)(v5 + 64);
        uint64_t buf = 68289282;
        __int16 v37 = 2082;
        __int16 v38 = "";
        __int16 v39 = 2114;
        uint64_t v40 = v18;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession User has selected 'Not Now'.", "{\"msg%{public}.0s\":\"#transcriptSession User has selected 'Not Now'.\", \"client\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
      }
      if (*(unsigned char *)(v5 + 253))
      {
        *(unsigned char *)(v5 + 251) = 1;
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_102301BD8);
        }
        uint64_t v19 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t buf = 68289026;
          __int16 v37 = 2082;
          __int16 v38 = "";
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession Not approving Single Request for historical locations - Sending no locations\"}", (uint8_t *)&buf, 0x12u);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_102301BD8);
          }
        }
        id v20 = qword_102419538;
        if (!os_signpost_enabled((os_log_t)qword_102419538)) {
          return sub_100ED184C(v5);
        }
        uint64_t buf = 68289026;
        __int16 v37 = 2082;
        __int16 v38 = "";
        uint64_t v21 = "#transcriptSession Not approving Single Request for historical locations - Sending no locations";
        uint64_t v22 = "{\"msg%{public}.0s\":\"#transcriptSession Not approving Single Request for historical locations - Sending no locations\"}";
LABEL_56:
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v21, v22, (uint8_t *)&buf, 0x12u);
        return sub_100ED184C(v5);
      }
      sub_100ED329C((void *)v5, +[NSDate now]);
    }
    return sub_100ED184C(v5);
  }
  return result;
}

void sub_100ED578C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100ED57A8(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v7 = *(void *)(a1 + 40);
  if ((unint64_t)[a2 count] >= 4) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  if (a4)
  {
    id v8 = +[NSMutableDictionary dictionary];
    double v9 = v8;
    if (a3) {
      [v8 setObject:a3 forKeyedSubscript:@"kCLConnectionMessageTranscriptError"];
    }
    [v9 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))] forKeyedSubscript:@"kCLConnectionMessageWillPromptForTranscriptSessionKey"];
    CLConnectionMessage::sendReply();
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
    uint64_t v10 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(v7 + 64);
      int v12 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      int v16 = 68289794;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2114;
      uint64_t v21 = v11;
      __int16 v22 = 1026;
      int v23 = v12;
      __int16 v24 = 2114;
      uint64_t v25 = a3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession sent reply\", \"client\":%{public, location:escape_only}@, \"willPrompt\":%{public}hhd, \"error\":%{public, location:escape_only}@}", (uint8_t *)&v16, 0x2Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
    }
    uint64_t v13 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v14 = *(void *)(v7 + 64);
      int v15 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      int v16 = 68289794;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2114;
      uint64_t v21 = v14;
      __int16 v22 = 1026;
      int v23 = v15;
      __int16 v24 = 2114;
      uint64_t v25 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession sent reply", "{\"msg%{public}.0s\":\"#transcriptSession sent reply\", \"client\":%{public, location:escape_only}@, \"willPrompt\":%{public}hhd, \"error\":%{public, location:escape_only}@}", (uint8_t *)&v16, 0x2Cu);
    }
  }
}

void sub_100ED5A10(uint64_t a1, const __CFDate *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if (a3)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
    uint64_t v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(v5 + 64);
      *(_DWORD *)uint64_t buf = 68289794;
      int v27 = 0;
      __int16 v28 = 2082;
      long long v29 = "";
      __int16 v30 = 2114;
      uint64_t v31 = v8;
      __int16 v32 = 2114;
      CFDateRef v33 = a2;
      __int16 v34 = 2114;
      uint64_t v35 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession #warning WillPromptForTranscriptSession has an error with lookbackWindow startDate. Try again for an accurate result.\", \"client\":%{public, location:escape_only}@, \"date\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x30u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
    }
    double v9 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v10 = *(void *)(v5 + 64);
      *(_DWORD *)uint64_t buf = 68289794;
      int v27 = 0;
      __int16 v28 = 2082;
      long long v29 = "";
      __int16 v30 = 2114;
      uint64_t v31 = v10;
      __int16 v32 = 2114;
      CFDateRef v33 = a2;
      __int16 v34 = 2114;
      uint64_t v35 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession #warning WillPromptForTranscriptSession has an error with lookbackWindow startDate. Try again for an accurate result.", "{\"msg%{public}.0s\":\"#transcriptSession #warning WillPromptForTranscriptSession has an error with lookbackWindow startDate. Try again for an accurate result.\", \"client\":%{public, location:escape_only}@, \"date\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x30u);
    }
    v24[0] = @"kCLConnectionMessageWillPromptForTranscriptSessionKey";
    v24[1] = @"kCLConnectionMessageTranscriptError";
    v25[0] = &__kCFBooleanFalse;
    v25[1] = a3;
    +[NSDictionary dictionaryWithObjects:v25 forKeys:v24 count:2];
LABEL_10:
    CLConnectionMessage::sendReply();
    return;
  }
  if (!a2)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
    int v16 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)(v5 + 64);
      *(_DWORD *)uint64_t buf = 68289794;
      int v27 = 0;
      __int16 v28 = 2082;
      long long v29 = "";
      __int16 v30 = 2114;
      uint64_t v31 = v17;
      __int16 v32 = 2114;
      CFDateRef v33 = 0;
      __int16 v34 = 2114;
      uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession lookback window start date null\", \"client\":%{public, location:escape_only}@, \"date\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x30u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
    }
    __int16 v18 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v19 = *(void *)(v5 + 64);
      *(_DWORD *)uint64_t buf = 68289794;
      int v27 = 0;
      __int16 v28 = 2082;
      long long v29 = "";
      __int16 v30 = 2114;
      uint64_t v31 = v19;
      __int16 v32 = 2114;
      CFDateRef v33 = 0;
      __int16 v34 = 2114;
      uint64_t v35 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession lookback window start date null", "{\"msg%{public}.0s\":\"#transcriptSession lookback window start date null\", \"client\":%{public, location:escape_only}@, \"date\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x30u);
    }
    goto LABEL_10;
  }
  [+[NSDate now] timeIntervalSinceDate:a2];
  if (v11 < 180.0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
    int v12 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(v5 + 64);
      *(_DWORD *)uint64_t buf = 68289794;
      int v27 = 0;
      __int16 v28 = 2082;
      long long v29 = "";
      __int16 v30 = 2114;
      uint64_t v31 = v13;
      __int16 v32 = 2114;
      CFDateRef v33 = a2;
      __int16 v34 = 2114;
      uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#transcriptSession lookback window start date is too recent. Will not prompt right now.\", \"client\":%{public, location:escape_only}@, \"date\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x30u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_102301BD8);
      }
    }
    uint64_t v14 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v15 = *(void *)(v5 + 64);
      *(_DWORD *)uint64_t buf = 68289794;
      int v27 = 0;
      __int16 v28 = 2082;
      long long v29 = "";
      __int16 v30 = 2114;
      uint64_t v31 = v15;
      __int16 v32 = 2114;
      CFDateRef v33 = a2;
      __int16 v34 = 2114;
      uint64_t v35 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession lookback window start date is too recent. Will not prompt right now.", "{\"msg%{public}.0s\":\"#transcriptSession lookback window start date is too recent. Will not prompt right now.\", \"client\":%{public, location:escape_only}@, \"date\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x30u);
    }
    goto LABEL_10;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102301BD8);
  }
  __int16 v20 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = *(void *)(v5 + 64);
    *(_DWORD *)uint64_t buf = 68289538;
    int v27 = 0;
    __int16 v28 = 2082;
    long long v29 = "";
    __int16 v30 = 2114;
    uint64_t v31 = v21;
    __int16 v32 = 2114;
    CFDateRef v33 = a2;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession Routine invokes fetchLookbackWindowStartDate handler with date\", \"client\":%{public, location:escape_only}@, \"Date\":%{public, location:escape_only}@}", buf, 0x26u);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
  }
  __int16 v22 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    uint64_t v23 = *(void *)(v5 + 64);
    *(_DWORD *)uint64_t buf = 68289538;
    int v27 = 0;
    __int16 v28 = 2082;
    long long v29 = "";
    __int16 v30 = 2114;
    uint64_t v31 = v23;
    __int16 v32 = 2114;
    CFDateRef v33 = a2;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession Routine invokes fetchLookbackWindowStartDate handler with date", "{\"msg%{public}.0s\":\"#transcriptSession Routine invokes fetchLookbackWindowStartDate handler with date\", \"client\":%{public, location:escape_only}@, \"Date\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  sub_100ED24F8(v5, a2, 3000, 0, *(void *)(a1 + 32), *(double *)(v5 + 344));
}

void sub_100ED607C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = +[NSMutableDictionary dictionary];
  uint64_t v7 = v6;
  if (a3) {
    [v6 setObject:a3 forKeyedSubscript:@"kCLConnectionMessageTranscriptError"];
  }
  [v7 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2 == 2)] forKeyedSubscript:@"kCLConnectionMessageIsConsideredInRemoteAreaKey"];
  CLConnectionMessage::sendReply();
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_102301BD8);
  }
  uint64_t v8 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(v5 + 64);
    int v12 = 68289794;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    __int16 v16 = 2114;
    uint64_t v17 = v9;
    __int16 v18 = 1026;
    BOOL v19 = a2 == 2;
    __int16 v20 = 2114;
    uint64_t v21 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession sent reply\", \"client\":%{public, location:escape_only}@, \"isRemote\":%{public}hhd, \"error\":%{public, location:escape_only}@}", (uint8_t *)&v12, 0x2Cu);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_102301BD8);
    }
  }
  uint64_t v10 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    uint64_t v11 = *(void *)(v5 + 64);
    int v12 = 68289794;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    __int16 v16 = 2114;
    uint64_t v17 = v11;
    __int16 v18 = 1026;
    BOOL v19 = a2 == 2;
    __int16 v20 = 2114;
    uint64_t v21 = a3;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#transcriptSession sent reply", "{\"msg%{public}.0s\":\"#transcriptSession sent reply\", \"client\":%{public, location:escape_only}@, \"isRemote\":%{public}hhd, \"error\":%{public, location:escape_only}@}", (uint8_t *)&v12, 0x2Cu);
  }
}

id sub_100ED62B4(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary];
  [v2 setObject:*(id *)(a1 + 64) forKeyedSubscript:@"ClientKeyPath"];
  uint64_t v3 = (void *)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    uint64_t v3 = (void *)*v3;
  }
  [v2 setObject:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3) forKeyedSubscript:@"SubscriptionStorageName"];
  [v2 setObject:+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(void *)(a1 + 136)) forKeyedSubscript:@"AuthContext"];
  [v2 setObject:[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 250)] forKeyedSubscript:@"NeedSession"];
  [v2 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 251))] forKeyedSubscript:@"ShouldSendEmptyLocations"];
  [v2 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 252)) forKeyedSubscript:@"NeedSingleRequest"];
  [v2 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 253)) forKeyedSubscript:@"HasSingleRequested"];
  [v2 setObject:[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 254)] forKeyedSubscript:@"ApprovedSingleRequest"];
  [v2 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 255))] forKeyedSubscript:@"HasRequestedToStart"];
  [v2 setObject:[NSNumber numberWithBool:*((unsigned __int8 *)(a1 + 256))] forKeyedSubscript:@"ShouldPrompt"];
  [v2 setObject:+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 336)) forKeyedSubscript:@"SampleCount"];
  [v2 setObject:[NSNumber numberWithDouble:*((double *)(a1 + 344))] forKeyedSubscript:@"HAccRequirement"];
  [v2 setObject:[NSNumber numberWithDouble:*((double *)(a1 + 352))] forKeyedSubscript:@"SmoothingErrorThreshold"];
  id v4 = *(CLConnectionMessage **)(a1 + 288);
  if (v4)
  {
    uint64_t v5 = CLConnectionMessage::name(v4);
    if (*(char *)(v5 + 23) >= 0) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = *(void *)v5;
    }
    [v2 setObject:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6) forKeyedSubscript:@"StashedMessage"];
  }
  uint64_t v7 = *(CLConnectionMessage **)(a1 + 304);
  if (v7)
  {
    uint64_t v8 = CLConnectionMessage::name(v7);
    if (*(char *)(v8 + 23) >= 0) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = *(void *)v8;
    }
    [v2 setObject:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9) forKeyedSubscript:@"SessionConnectionMessage"];
  }
  uint64_t v10 = *(void *)(a1 + 328);
  if (v10) {
    [v2 setObject:v10 forKeyedSubscript:@"PurposeString"];
  }
  if (*(unsigned char *)(a1 + 256))
  {
    id v11 = +[NSMutableArray array];
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    int v12 = *(void **)(a1 + 360);
    id v13 = [v12 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v15) {
            objc_enumerationMutation(v12);
          }
          [v11 addObject:[*(id *)(*((void *)&v18 + 1) + 8 * i) description]];
        }
        id v14 = [v12 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v14);
    }
    [v2 setObject:v11 forKeyedSubscript:@"SavedPromptedCoordinates"];
  }
  return v2;
}

void sub_100ED6630(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100ED6660(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

__n128 sub_100ED6690(uint64_t a1)
{
  id v2 = (char *)operator new(0x18uLL);
  *(void *)id v2 = off_102301C08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100ED66DC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102301C08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100ED670C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100ED6714(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100ED6754()
{
}

void sub_100ED6760(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  id v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)(a2 + (v6 >> 1));
  if (v6) {
    uint64_t v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v5(v7, &v8);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_100ED6800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100ED6824(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_100ED68A0(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100ED688C(_Unwind_Exception *a1)
{
  sub_100BEE9E4(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100ED68A0(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    id v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_100ED6B24(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  __int16 v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *__int16 v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_100ED6C14((uint64_t)v25, 0);
  return i;
}

void sub_100ED6B0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100ED6C14((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_100ED6B24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  __n128 result = sub_100ED6B9C(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_100ED6B84(_Unwind_Exception *a1)
{
  sub_100ED6C14(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_100ED6B9C(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__uuid_t dst = v4;
  }
  sub_100BEE004((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100ED6BF8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100ED6C14(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100BEEA64((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_100ED6C6C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = sub_100134750((void *)a1, "VO2MaxPowerBudgetEstimatorBudgetRefreshTime") + 3;
  sub_100134750(v10, "VO2MaxPowerBudgetEstimatorExtendedBudgetRefreshTime");
  sub_100134750((void *)(a1 + 48), "VO2MaxPowerBudgetEstimatorStairsBudgetRefreshTime");
  sub_100134750((void *)(a1 + 72), "VO2MaxPowerBudgetEstimatorTimeOfLastVO2MaxSessionEstimate");
  *(void *)(a1 + 96) = a2;
  *(void *)(a1 + 104) = [objc_msgSend(objc_msgSend(a2, "silo"), "newTimer")];
  [*(id *)(a1 + 96) silo] newTimer];
  *(unsigned char *)(a1 + 120) = 0;
  sub_100ED9118(a1 + 128, a3);
  sub_100ED9118(a1 + 160, a4);
  sub_100ED9118(a1 + 192, a5);
  uint64_t v11 = *(void *)(a1 + 104);
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1000DC48C(__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a1;
    uint64_t v19 = *(void *)(a1 + 16);
  }
  sub_1008AF654((void *)(a1 + 224), v11, (long long *)__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v12 = *(void *)(a1 + 112);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_1000DC48C(__dst, *(void **)(a1 + 24), *(void *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)__uuid_t dst = *(_OWORD *)v10;
    uint64_t v17 = v10[2];
  }
  sub_1008AF654((void *)(a1 + 280), v12, (long long *)__dst);
  if (SHIBYTE(v17) < 0) {
    operator delete(__dst[0]);
  }
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  _DWORD v15[2] = sub_100ED6FA0;
  void v15[3] = &unk_1022A3020;
  void v15[4] = a1;
  [*(id *)(a1 + 104) setHandler:v15];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  int v14[2] = sub_100ED7358;
  v14[3] = &unk_1022A3020;
  void v14[4] = a1;
  [*(id *)(a1 + 112) setHandler:v14];
  sub_1008AF65C(a1 + 224);
  sub_1008AF65C(a1 + 280);
  return a1;
}

void sub_100ED6EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_1008AF658(v38);
  sub_10043C994(v37);
  sub_10043C994(v36);
  sub_10043C994(v35);
  if (*(char *)(v31 + 95) < 0) {
    operator delete(*v34);
  }
  if (*(char *)(v31 + 71) < 0) {
    operator delete(*v33);
  }
  if (*(char *)(v31 + 47) < 0) {
    operator delete(*v32);
  }
  if (*(char *)(v31 + 23) < 0) {
    operator delete(*(void **)v31);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100ED6FA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102301CB8);
  }
  id v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLBackgroundEscalationsPowerBudgetEstimator, budgetRefreshTimer fire", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102301CB8);
    }
    long long v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLBackgroundEscalationsPowerBudgetEstimator::CLBackgroundEscalationsPowerBudgetEstimator(id<CLIntersiloUniverse>, PowerBudgetEstimateHandler, PowerBudgetEstimateHandler, PowerBudgetEstimateHandler)_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return sub_100ED713C(v1);
}

uint64_t sub_100ED713C(uint64_t result)
{
  if (*(unsigned char *)(result + 120))
  {
    uint64_t v1 = result;
    if (sub_1008AF88C(result + 224) || (__n128 result = sub_1008AF88C(v1 + 280), result))
    {
      double v2 = sub_100ED7D08();
      double Current = CFAbsoluteTimeGetCurrent();
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102301CB8);
      }
      long long v4 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 134349312;
        double v7 = Current - v2;
        __int16 v8 = 2050;
        double v9 = Current;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLBackgroundEscalationsPowerBudgetEstimator, kicking off historical data query, startTime, %{public}.2f, endTime, %{public}.2f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_102301CB8);
        }
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBackgroundEscalationsPowerBudgetEstimator::kickoffHKQuery()", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
      return (uint64_t)sub_100ED84E4(v1, Current - v2, Current, v2);
    }
  }
  return result;
}

void sub_100ED7358(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102301CB8);
  }
  double v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLBackgroundEscalationsPowerBudgetEstimator, extendedBudgetRefreshTimer fire", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102301CB8);
    }
    unint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLBackgroundEscalationsPowerBudgetEstimator::CLBackgroundEscalationsPowerBudgetEstimator(id<CLIntersiloUniverse>, PowerBudgetEstimateHandler, PowerBudgetEstimateHandler, PowerBudgetEstimateHandler)_block_invoke", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_100ED74F4(v1);
}

void sub_100ED74F4(uint64_t a1)
{
  uint64_t v2 = a1 + 280;
  if (sub_1008AF88C(a1 + 280))
  {
    if (objc_opt_class()
      && objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed"))
    {
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102301CB8);
      }
      unint64_t v3 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "IHA authorized to enable stairs escalation", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_102301CB8);
        }
        LOWORD(v34) = 0;
        int v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBackgroundEscalationsPowerBudgetEstimator::extendedBudgetHandler()", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
      }
      int v4 = 1;
    }
    else
    {
      int v4 = 0;
    }
    double v5 = sub_1004BE230();
    double v32 = 0.0;
    double v33 = 0.0;
    double v30 = 0.0;
    double v31 = 0.0;
    int v29 = 0;
    uint64_t v6 = sub_1000D3E78();
    sub_10006B564(v6, buf);
    sub_1000A699C(*(uint64_t *)buf, "BackgroundEscalationsExtendedBudgetAllowance", &v33);
    if (*(void *)v45) {
      sub_1000DB0A0(*(std::__shared_weak_count **)v45);
    }
    uint64_t v7 = sub_1000D3E78();
    sub_10006B564(v7, buf);
    sub_1000A699C(*(uint64_t *)buf, "ExtendedPowerBudgetRefreshInterval", &v32);
    if (*(void *)v45) {
      sub_1000DB0A0(*(std::__shared_weak_count **)v45);
    }
    uint64_t v8 = sub_1000D3E78();
    sub_10006B564(v8, buf);
    sub_10006EF84(*(uint64_t *)buf, "StairsEscalationDisable", &v29);
    if (*(void *)v45) {
      sub_1000DB0A0(*(std::__shared_weak_count **)v45);
    }
    uint64_t v9 = sub_1000D3E78();
    sub_10006B564(v9, buf);
    sub_1000A699C(*(uint64_t *)buf, "StairsBudgetForAllRefreshInterval", &v30);
    if (*(void *)v45) {
      sub_1000DB0A0(*(std::__shared_weak_count **)v45);
    }
    uint64_t v10 = sub_1000D3E78();
    sub_10006B564(v10, buf);
    sub_1000A699C(*(uint64_t *)buf, "StairsBudgetAllowanceForAll", &v31);
    if (*(void *)v45) {
      sub_1000DB0A0(*(std::__shared_weak_count **)v45);
    }
    uint64_t v11 = sub_100F8CC8C();
    sub_100F8CCD4(v11, @"SensitiveEscalationExtendedBudgetRefreshInterval", (void **)&v32);
    uint64_t v12 = sub_100F8CC8C();
    sub_100F8CCD4(v12, @"SensitiveEscalationExtendedBudgetAllowanceSeconds", (void **)&v33);
    uint64_t v13 = sub_100F8CC8C();
    sub_100F8CCD4(v13, @"SensitiveEscalationGeneralStairsBudgetAllowanceSeconds", (void **)&v31);
    uint64_t v14 = sub_100F8CC8C();
    sub_100F8CCD4(v14, @"SensitiveEscalationGeneralStairsBudgetRefreshInterval", (void **)&v30);
    int v28 = 0;
    uint64_t v15 = sub_1000A6958();
    if (byte_10248227F >= 0) {
      float v16 = (const char *)&qword_102482268;
    }
    else {
      float v16 = (const char *)qword_102482268;
    }
    sub_10006EF84(v15, v16, &v28);
    int v17 = v28;
    if (v33 <= 0.0 || (double v18 = v32, v32 <= 0.0))
    {
      if (v4 && (sub_100103240(), sub_100036A60()))
      {
        double v20 = v30;
        if (v30 == 0.0)
        {
          double v31 = 65.0;
          double v30 = 201312.0;
          double v20 = 201312.0;
        }
        double v21 = v5 + v20;
        sub_1008AF928(v2, v5 + v20);
        sub_10015E508(a1 + 192, v31);
        int v17 = 3;
      }
      else
      {
        double v21 = 0.0;
        sub_10015E508(a1 + 192, 0.0);
      }
      sub_10015E508(a1 + 160, 0.0);
    }
    else
    {
      sub_100103240();
      if (!sub_100036A60() || v17 == 1 || v29 == 1)
      {
        sub_10015E508(a1 + 160, v33);
        uint64_t v19 = a1 + 192;
        int v17 = 2;
      }
      else
      {
        sub_10015E508(a1 + 192, v33);
        uint64_t v19 = a1 + 160;
        int v17 = 1;
      }
      sub_10015E508(v19, 0.0);
      double v21 = v5 + v18;
      sub_1008AF928(v2, v21);
    }
    int v28 = v17;
    uint64_t v22 = sub_1000A6958();
    if (byte_10248227F >= 0) {
      unint64_t v23 = (const char *)&qword_102482268;
    }
    else {
      unint64_t v23 = (const char *)qword_102482268;
    }
    sub_1000EA838(v22, v23, &v28);
    uint64_t v24 = sub_1000A6958();
    (*(void (**)(uint64_t))(*(void *)v24 + 944))(v24);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102301CB8);
    }
    uint64_t v25 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67241216;
      *(_DWORD *)&uint8_t buf[4] = v28;
      *(_WORD *)uint64_t v45 = 2050;
      *(double *)&v45[2] = v33;
      __int16 v46 = 2050;
      double v47 = v31;
      __int16 v48 = 2050;
      double v49 = v5;
      __int16 v50 = 2050;
      double v51 = v21;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "CLBackgroundEscalationsPowerBudgetEstimator, new extended budget awarded for sensitive escalation type : %{public}d, ExtendedBudget, %{public}.2f, stairsBudgetForAll, %{public}.2f, now, %{public}.2f, nextRefreshTime, %{public}.2f", buf, 0x30u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102301CB8);
      }
      int v34 = 67241216;
      int v35 = v28;
      __int16 v36 = 2050;
      double v37 = v33;
      __int16 v38 = 2050;
      double v39 = v31;
      __int16 v40 = 2050;
      double v41 = v5;
      __int16 v42 = 2050;
      double v43 = v21;
      long long v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBackgroundEscalationsPowerBudgetEstimator::extendedBudgetHandler()", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
  }
}

void sub_100ED7B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    sub_1000DB0A0(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100ED7B74(uint64_t a1)
{
  *(void *)(a1 + 104) = 0;
  [*(id *)(a1 + 112) invalidate];

  *(void *)(a1 + 112) = 0;
  sub_1008AF658(a1 + 280);
  sub_1008AF658(a1 + 224);
  sub_10043C994((void *)(a1 + 192));
  sub_10043C994((void *)(a1 + 160));
  sub_10043C994((void *)(a1 + 128));
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

double sub_100ED7C30(uint64_t a1)
{
  double v5 = -1.79769313e308;
  uint64_t v2 = sub_1000A6958();
  unint64_t v3 = (const char *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    unint64_t v3 = *(const char **)v3;
  }
  sub_1000A699C(v2, v3, &v5);
  return v5;
}

uint64_t sub_100ED7C84(uint64_t a1, double a2)
{
  double v7 = a2;
  uint64_t v3 = sub_1000A6958();
  int v4 = (const char *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    int v4 = *(const char **)v4;
  }
  sub_10016332C(v3, v4, &v7);
  uint64_t v5 = *(void *)sub_1000A6958();
  return (*(uint64_t (**)(void))(v5 + 944))();
}

double sub_100ED7D08()
{
  double v4 = sub_100EB9AF8();
  uint64_t v0 = sub_100F8CC8C();
  sub_100F8CCD4(v0, @"VO2MaxPowerBudgetEstimatorQueryLookbackInterval", (void **)&v4);
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102301CB8);
  }
  uint64_t v1 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134217984;
    double v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "CLBackgroundEscalationsPowerBudgetEstimator, getting sensitiveEscalationHoldoffInterval, %.2f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102301CB8);
    }
    int v5 = 134217984;
    double v6 = v4;
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval CLBackgroundEscalationsPowerBudgetEstimator::getSensitiveEscalationHoldoffInterval() const", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  return v4;
}

id sub_100ED7ED0(id result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24) && *(double *)(a2 + 16) != -1.0 && *(unsigned char *)(a2 + 27))
  {
    uint64_t v2 = (uint64_t)result;
    double v3 = sub_1004BE230();
    double v4 = sub_100EB9D68();
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102301CB8);
    }
    double v5 = v3 + v4;
    double v6 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 134349312;
      double v9 = v3;
      __int16 v10 = 2050;
      double v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "CLBackgroundEscalationsPowerBudgetEstimator, zeroing budget on VO2MaxEstimate, now, %{public}.2f, nextRefreshTime, %{public}.2f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102301CB8);
      }
      double v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBackgroundEscalationsPowerBudgetEstimator::feedVO2MaxEstimate(VO2MaxResult)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    sub_100ED7C84(v2, v3);
    sub_10015E508(v2 + 128, 0.0);
    return sub_1008AF928(v2 + 224, v5);
  }
  return result;
}

id sub_100ED80F4(id result, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 112);
  BOOL v3 = v2 > 0x18;
  uint64_t v4 = (1 << v2) & 0x1028000;
  BOOL v5 = v3 || v4 == 0;
  if (!v5 && *(double *)(a2 + 8) - *(double *)a2 >= 600.0)
  {
    id v6 = result;
    double v7 = sub_1004BE230();
    double v8 = sub_100EB9D68();
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102301CB8);
    }
    double v9 = v7 + v8;
    __int16 v10 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 134349312;
      double v13 = v7;
      __int16 v14 = 2050;
      double v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "CLBackgroundEscalationsPowerBudgetEstimator, zeroing budget on workout stop event, now, %{public}.2f, nextRefreshTime, %{public}.2f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102301CB8);
      }
      double v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBackgroundEscalationsPowerBudgetEstimator::feedWorkoutStopEvent(CLMotionStateMediator_Type::WorkoutEvent)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    sub_10015E508((uint64_t)v6 + 128, 0.0);
    return sub_1008AF928((uint64_t)v6 + 224, v9);
  }
  return result;
}

uint64_t sub_100ED8328(uint64_t a1, int a2)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102301CB8);
  }
  uint64_t v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLBackgroundEscalationsPowerBudgetEstimator, encrypted data available notification, isAvailable, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102301CB8);
    }
    id v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBackgroundEscalationsPowerBudgetEstimator::feedEncryptedDataAvailability(BOOL)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  *(unsigned char *)(a1 + 120) = a2;
  return sub_100ED713C(a1);
}

void *sub_100ED84E4(uint64_t a1, double a2, double a3, double a4)
{
  int v8 = (double *)operator new(0x28uLL);
  *(void *)int v8 = off_102301CE8;
  *((void *)v8 + 1) = a1;
  void v8[2] = a2;
  v8[3] = a3;
  void v8[4] = a4;
  v10[3] = v8;
  sub_100AD6898((uint64_t)v10, a2, a3);
  return sub_100AD70B4(v10);
}

void sub_100ED859C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100AD70B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100ED85B0(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  id v10 = [*(id *)(a1 + 96) silo];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3321888768;
  _DWORD v11[2] = sub_100ED86B0;
  void v11[3] = &unk_102301C88;
  _DWORD v11[4] = a1;
  *(double *)&double v11[5] = a5;
  double v13 = 0;
  uint64_t v14 = 0;
  long long __p = 0;
  sub_1004EC468(&__p, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  double v15 = a3;
  double v16 = a4;
  [v10 async:v11];
  if (__p)
  {
    double v13 = __p;
    operator delete(__p);
  }
}

void sub_100ED8694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100ED86B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id result = (id)sub_1008AF88C(v2 + 224);
  if (result)
  {
    double v4 = sub_1004BE230();
    double v5 = sub_100EB9D68();
    double v6 = *(double *)(a1 + 40);
    double v7 = sub_1004BE230();
    if (v7 >= v6 + sub_100ED7C30(v2) && sub_100ED8AFC(v8, (uint64_t *)(a1 + 48)))
    {
      id result = (id)sub_1008AF88C(v2 + 224);
      if (!result) {
        return result;
      }
      double v26 = sub_100EB9CC8();
      uint64_t v9 = sub_100F8CC8C();
      sub_100F8CCD4(v9, @"SensitiveEscalationBudgetAllowanceSeconds", (void **)&v26);
      double v10 = *(double *)(a1 + 40);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102301CB8);
      }
      double v11 = v4 + v10;
      uint64_t v12 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(a1 + 72);
        uint64_t v14 = *(void *)(a1 + 80);
        *(_DWORD *)uint64_t buf = 134350080;
        uint64_t v38 = v13;
        __int16 v39 = 2050;
        uint64_t v40 = v14;
        __int16 v41 = 2050;
        double v42 = v26;
        __int16 v43 = 2050;
        double v44 = v4;
        __int16 v45 = 2050;
        double v46 = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "CLBackgroundEscalationsPowerBudgetEstimator, new budget awarded on HK query and VO2Max results, startTime, %{public}.2f, endTime, %{public}.2f, budget, %{public}.2f, now, %{public}.2f, nextRefreshTime, %{public}.2f", buf, 0x34u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_102301CB8);
        }
        uint64_t v23 = *(void *)(a1 + 72);
        uint64_t v24 = *(void *)(a1 + 80);
        int v27 = 134350080;
        uint64_t v28 = v23;
        __int16 v29 = 2050;
        uint64_t v30 = v24;
        __int16 v31 = 2050;
        double v32 = v26;
        __int16 v33 = 2050;
        double v34 = v4;
        __int16 v35 = 2050;
        double v36 = v11;
        uint64_t v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBackgroundEscalationsPowerBudgetEstimator::evaluateQueryResults(CFTimeInterval, CFTimeInterval, std::vector<CLHKHealthStoreAccessUtils::CLHKWorkout>, CFTimeInterval)_block_invoke", "%s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
      uint64_t v15 = v2 + 128;
      double v16 = v26;
    }
    else
    {
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102301CB8);
      }
      double v11 = v4 + v5;
      int v17 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = *(void *)(a1 + 72);
        uint64_t v19 = *(void *)(a1 + 80);
        *(_DWORD *)uint64_t buf = 134349824;
        uint64_t v38 = v18;
        __int16 v39 = 2050;
        uint64_t v40 = v19;
        __int16 v41 = 2050;
        double v42 = v4;
        __int16 v43 = 2050;
        double v44 = v11;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "CLBackgroundEscalationsPowerBudgetEstimator, zeroing budget on HK query and VO2Max results, startTime, %{public}.2f, endTime, %{public}.2f, now, %{public}.2f, nextRefreshTime, %{public}.2f", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_102301CB8);
        }
        uint64_t v20 = *(void *)(a1 + 72);
        uint64_t v21 = *(void *)(a1 + 80);
        int v27 = 134349824;
        uint64_t v28 = v20;
        __int16 v29 = 2050;
        uint64_t v30 = v21;
        __int16 v31 = 2050;
        double v32 = v4;
        __int16 v33 = 2050;
        double v34 = v11;
        uint64_t v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBackgroundEscalationsPowerBudgetEstimator::evaluateQueryResults(CFTimeInterval, CFTimeInterval, std::vector<CLHKHealthStoreAccessUtils::CLHKWorkout>, CFTimeInterval)_block_invoke", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      uint64_t v15 = v2 + 128;
      double v16 = 0.0;
    }
    sub_10015E508(v15, v16);
    return sub_1008AF928(v2 + 224, v11);
  }
  return result;
}

uint64_t sub_100ED8AFC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102301CB8);
    }
    uint64_t v24 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "CLBackgroundEscalationsPowerBudgetEstimator, Workout query returned empty", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102301CB8);
      }
      int v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBackgroundEscalationsPowerBudgetEstimator::isWorkoutPowerAvailable(const std::vector<CLHKHealthStoreAccessUtils::CLHKWorkout> &) const", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
    char v23 = 1;
  }
  else
  {
    char v4 = 0;
    do
    {
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102301CB8);
      }
      double v5 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
      {
        double v6 = *(double *)v2;
        uint64_t v7 = *(void *)(v2 + 8);
        int v8 = *(_DWORD *)(v2 + 16);
        int v9 = *(unsigned __int8 *)(v2 + 20);
        int v10 = *(unsigned __int8 *)(v2 + 21);
        uint64_t v11 = *(void *)(v2 + 24);
        *(_DWORD *)uint64_t buf = 134350337;
        double v30 = v6;
        __int16 v31 = 2050;
        uint64_t v32 = v7;
        __int16 v33 = 1025;
        int v34 = v8;
        __int16 v35 = 1025;
        int v36 = v9;
        __int16 v37 = 1025;
        int v38 = v10;
        __int16 v39 = 2049;
        uint64_t v40 = v11;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLBackgroundEscalationsPowerBudgetEstimator, Workouts query result, startTime, %{public}.2f, endTime, %{public}.2f, hkWorkoutType, %{private}d, isPedestrian, %{private}d, isIndoorWorkout, %{private}d, calories, %{private}.2f", buf, 0x32u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_102301CB8);
        }
        uint64_t v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBackgroundEscalationsPowerBudgetEstimator::isWorkoutPowerAvailable(const std::vector<CLHKHealthStoreAccessUtils::CLHKWorkout> &) const", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      if (*(double *)(v2 + 8) - *(double *)v2 >= 600.0)
      {
        if (*(unsigned char *)(v2 + 20)) {
          BOOL v12 = *(unsigned char *)(v2 + 21) == 0;
        }
        else {
          BOOL v12 = 0;
        }
        char v13 = v12;
        v4 |= v13;
      }
      v2 += 32;
    }
    while (v2 != v3);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102301CB8);
    }
    uint64_t v15 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = a2[1];
      double v17 = *(double *)(v16 - 32);
      uint64_t v18 = *(void *)(v16 - 24);
      int v19 = *(_DWORD *)(v16 - 16);
      int v20 = *(unsigned __int8 *)(v16 - 12);
      int v21 = *(unsigned __int8 *)(v16 - 11);
      uint64_t v22 = *(void *)(v16 - 8);
      *(_DWORD *)uint64_t buf = 134350337;
      double v30 = v17;
      __int16 v31 = 2050;
      uint64_t v32 = v18;
      __int16 v33 = 1025;
      int v34 = v19;
      __int16 v35 = 1025;
      int v36 = v20;
      __int16 v37 = 1025;
      int v38 = v21;
      __int16 v39 = 2049;
      uint64_t v40 = v22;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "CLBackgroundEscalationsPowerBudgetEstimator, Workouts query last result, startTime, %{public}.2f, endTime, %{public}.2f, hkWorkoutType, %{private}d, isPedestrian, %{private}d, isIndoorWorkout, %{private}d, calories, %{private}.2f", buf, 0x32u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102301CB8);
      }
      double v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBackgroundEscalationsPowerBudgetEstimator::isWorkoutPowerAvailable(const std::vector<CLHKHealthStoreAccessUtils::CLHKWorkout> &) const", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
    char v23 = v4 ^ 1;
  }
  return v23 & 1;
}

void *sub_100ED90B4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v2 = (void *)(a1 + 48);
  unsigned __int8 v2[2] = 0;
  return sub_1004EC468(v2, *(const void **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 5);
}

void sub_100ED90D0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_100ED90E8(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

uint64_t sub_100ED9118(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_100ED91B4()
{
}

__n128 sub_100ED91C8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_102301CE8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100ED921C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102301CE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100ED9254(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v4 = *a2;
  double v5 = *(void **)a3;
  uint64_t v6 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102301CB8);
    }
    int v8 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      *(_DWORD *)uint64_t buf = 134349312;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&unsigned char buf[14] = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLBackgroundEscalationsPowerBudgetEstimator, Workout query succeeded, startTime, %{public}.2f, endTime, %{public}.2f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102301CB8);
      }
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLBackgroundEscalationsPowerBudgetEstimator::queryWorkouts(CFAbsoluteTime, CFAbsoluteTime, CFTimeInterval)::(anonymous class)::operator()(BOOL, std::vector<CLHKHealthStoreAccessUtils::CLHKWorkout>) const", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    double v11 = *(double *)(a1 + 16);
    double v12 = *(double *)(a1 + 24);
    memset(buf, 0, 24);
    sub_1004EC468(buf, v5, v6, (v6 - (uint64_t)v5) >> 5);
    sub_100ED85B0(v7, (uint64_t)buf, v11, v12, *(double *)(a1 + 32));
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }
  else
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102301CB8);
    }
    char v13 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 16);
      uint64_t v15 = *(void *)(a1 + 24);
      *(_DWORD *)uint64_t buf = 134349312;
      *(void *)&uint8_t buf[4] = v14;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&unsigned char buf[14] = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "CLBackgroundEscalationsPowerBudgetEstimator, Workout query failed, startTime, %{public}.2f, endTime, %{public}.2f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102301CB8);
      }
      double v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLBackgroundEscalationsPowerBudgetEstimator::queryWorkouts(CFAbsoluteTime, CFAbsoluteTime, CFTimeInterval)::(anonymous class)::operator()(BOOL, std::vector<CLHKHealthStoreAccessUtils::CLHKWorkout>) const", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
  if (v5) {
    operator delete(v5);
  }
}

void sub_100ED9604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (v16) {
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100ED9634(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100ED9674()
{
}

NSDictionary *sub_100ED9680()
{
  sub_100134750(&qword_102482268, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102482268, (void *)&_mh_execute_header);
  v1[0] = +[NSString stringWithUTF8String:"VO2MaxPowerBudgetEstimatorQueryLookbackInterval"];
  v2[0] = &off_102397DA0;
  v1[1] = +[NSString stringWithUTF8String:"SensitiveEscalationExtendedBudgetRefreshInterval"];
  v2[1] = &off_102397DB8;
  v1[2] = +[NSString stringWithUTF8String:"VO2MaxDeescalatorExtendAfterHighExertionTimeSeconds"];
  unsigned __int8 v2[2] = &off_102397DD0;
  v1[3] = +[NSString stringWithUTF8String:"SensitiveEscalationBudgetAllowanceSeconds"];
  unsigned __int8 v2[3] = &off_102397DE8;
  unsigned __int8 v1[4] = +[NSString stringWithUTF8String:"SensitiveEscalationExtendedBudgetAllowanceSeconds"];
  unsigned __int8 v2[4] = &off_102397E00;
  v1[5] = +[NSString stringWithUTF8String:"SensitiveEscalationGeneralStairsBudgetAllowanceSeconds"];
  v2[5] = &off_102397E18;
  v1[6] = +[NSString stringWithUTF8String:"SensitiveEscalationGeneralStairsBudgetRefreshInterval"];
  v2[6] = &off_102397E30;
  __n128 result = +[NSDictionary dictionaryWithObjects:v2 forKeys:v1 count:7];
  qword_102482280 = (uint64_t)result;
  return result;
}

uint64_t sub_100ED980C(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 48) + 48))(*(void *)(a3 + 48));
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void, unsigned char *, double))(**(void **)(a3 + 48) + 24))(*(void *)(a3 + 48), v6, a1);
    if (v6[208]) {
      return sub_100528B3C(*(void *)(a3 + 16), *(double *)(*(void *)(a3 + 16) + 104), *(double *)(*(void *)(a3 + 16) + 112));
    }
  }
  return result;
}

uint64_t sub_100ED98DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a3 + 352)) {
    return a2;
  }
  double v5 = *(double *)(a3 + 648);
  long long v6 = *(_OWORD *)(a3 + 232);
  long long v7 = *(_OWORD *)(a3 + 248);
  uint64_t v23 = *(void *)(a3 + 280);
  long long v8 = *(_OWORD *)(a3 + 168);
  long long v9 = *(_OWORD *)(a3 + 200);
  *(_OWORD *)&buf.isStanding = *(_OWORD *)(a3 + 184);
  *(_OWORD *)&buf.isVehicleConnected = v9;
  *(_OWORD *)&buf.vehicleType = *(_OWORD *)(a3 + 216);
  long long v20 = v6;
  *(_OWORD *)&buf.type = *(_OWORD *)(a3 + 152);
  *(_OWORD *)&buf.mountedConfidence = v8;
  long long v10 = *(_OWORD *)(a3 + 264);
  long long v21 = v7;
  long long v22 = v10;
  if (!CLMotionActivity::isCycling(&buf)) {
    return a2;
  }
  float v11 = v5;
  float v12 = v11 * 2.2369;
  if ((float)(v11 * 2.2369) <= 2.0) {
    return a2;
  }
  uint64_t v13 = sub_100779764(a2, 2u);
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_102301DB0);
  }
  double v14 = v12;
  uint64_t v15 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_INFO))
  {
    uint64_t v16 = *(void *)(a3 + 120);
    buf.type = 134218752;
    *(void *)&buf.confidence = v16;
    LOWORD(buf.mountedState) = 1026;
    *(int *)((char *)&buf.mountedState + 2) = a2;
    HIWORD(buf.mountedConfidence) = 1026;
    buf.conservativeMountedState = v13;
    LOWORD(buf.conservativeMountedProbability) = 2050;
    *(double *)((char *)&buf.conservativeMountedProbability + 2) = v14;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Overriding youth type for outdoor cycling , beginTime, %f, before, %{public}d, after, %{public}d, speed, %{public}f", (uint8_t *)&buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102301DB0);
    }
    double v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMotionActivity::TypeYouth CLFitnessYouthOutdoorCyclingOverride::doOverride(CLMotionActivity::TypeYouth, const CLNatalieModelInput &)", "%s\n", v17);
    if (v17 != (char *)&buf) {
      free(v17);
    }
  }
  return v13;
}

void sub_100ED9B70(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100ED9BA0()
{
  if (qword_102482288 != -1) {
    dispatch_once(&qword_102482288, &stru_102301DD0);
  }
  return qword_10248AE10;
}

void sub_100ED9BE4(id a1)
{
}

void sub_100ED9C1C(uint64_t a1)
{
  *(CFAbsoluteTime *)(a1 + 8) = CFAbsoluteTimeGetCurrent();
}

NSDictionary *sub_100ED9CA4(uint64_t a1)
{
  v17[0] = @"currentState";
  uint64_t v2 = *(double **)(a1 + 32);
  v18[0] = +[NSNumber numberWithInt:*(unsigned __int8 *)(*(void *)(a1 + 40) + 1)];
  v17[1] = @"didWakeCount";
  v18[1] = +[NSNumber numberWithInt:*(unsigned __int8 *)(*(void *)(a1 + 40) + 21)];
  v17[2] = @"isSharingSubscribed";
  v18[2] = +[NSNumber numberWithBool:*((unsigned __int8 *)v2 + 1)];
  void v17[3] = @"isSpringBoardSubscribed";
  v18[3] = +[NSNumber numberWithBool:*(unsigned __int8 *)v2];
  void v17[4] = @"transitionLikelyToPossibleCount";
  unsigned char v18[4] = +[NSNumber numberWithInt:*(unsigned __int8 *)(*(void *)(a1 + 40) + 2)];
  v17[5] = @"transitionLikelyToUnmountedCount";
  _OWORD v18[5] = +[NSNumber numberWithInt:*(unsigned __int8 *)(*(void *)(a1 + 40) + 4)];
  void v17[6] = @"transitionPossibleToLikelyCount";
  v18[6] = +[NSNumber numberWithInt:*(unsigned __int8 *)(*(void *)(a1 + 40) + 3)];
  void v17[7] = @"transitionPossibleToUnmountedCount";
  v18[7] = +[NSNumber numberWithInt:*(unsigned __int16 *)(*(void *)(a1 + 40) + 5)];
  v17[8] = @"transitionUnmountedToPossibleCount";
  v18[8] = +[NSNumber numberWithInt:*(unsigned __int16 *)(*(void *)(a1 + 40) + 7)];
  v17[9] = @"cameraRollAngle";
  uint64_t v4 = *(void *)(a1 + 40);
  if (*(unsigned char *)(v4 + 1) == 4)
  {
    LOWORD(_D0) = *(_WORD *)(v4 + 19);
    __asm { FCVT            S0, H0 }
    *(float *)&_D0 = *(float *)&_D0 * 57.296;
    long long v9 = +[NSNumber numberWithFloat:_D0];
  }
  else
  {
    long long v9 = +[NSNull null];
  }
  v18[9] = v9;
  unsigned char v17[10] = @"landscapeAngle";
  uint64_t v11 = *(void *)(a1 + 40);
  if (*(unsigned char *)(v11 + 1) == 4)
  {
    LOWORD(_D0) = *(_WORD *)(v11 + 17);
    __asm { FCVT            S0, H0 }
    *(float *)&_D0 = *(float *)&_D0 * 57.296;
    float v12 = +[NSNumber numberWithFloat:_D0];
  }
  else
  {
    float v12 = +[NSNull null];
  }
  v18[10] = v12;
  void v17[11] = @"timeSinceLandscape";
  uint64_t v13 = *(void *)(a1 + 40);
  if (*(unsigned char *)(v13 + 1) == 4) {
    double v14 = +[NSNumber numberWithDouble:(double)*(unint64_t *)(v13 + 9) / 1000000.0];
  }
  else {
    double v14 = +[NSNull null];
  }
  v18[11] = v14;
  unsigned char v17[12] = @"timeSinceLastEvent";
  if (v2[1] == 0.0) {
    uint64_t v15 = +[NSNull null];
  }
  else {
    uint64_t v15 = +[NSNumber numberWithDouble:CFAbsoluteTimeGetCurrent() - v2[1]];
  }
  v18[12] = v15;
  return +[NSDictionary dictionaryWithObjects:v18 forKeys:v17 count:13];
}

void sub_100ED9F54(unsigned char *a1, uint64_t a2, char a3)
{
  long long v6 = &v25;
  sub_1000372B8(a2, &v25);
  int64_t size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  int v8 = SHIBYTE(v25.__r_.__value_.__r.__words[2]);
  long long v9 = (void *)v25.__r_.__value_.__r.__words[0];
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    int64_t size = v25.__r_.__value_.__l.__size_;
    long long v6 = (std::string *)v25.__r_.__value_.__r.__words[0];
  }
  long long v10 = (char *)v6 + size;
  if (size >= 11)
  {
    uint64_t v11 = v6;
    do
    {
      float v12 = (char *)memchr(v11, 115, size - 10);
      if (!v12) {
        break;
      }
      if (*(void *)v12 == 0x6F62676E69727073 && *(void *)(v12 + 3) == 0x6472616F62676E69) {
        goto LABEL_12;
      }
      uint64_t v11 = (std::string *)(v12 + 1);
      int64_t size = v10 - (char *)v11;
    }
    while (v10 - (char *)v11 > 10);
  }
  float v12 = v10;
LABEL_12:
  BOOL v15 = v12 == v10 || v12 - (char *)v6 == -1;
  if ((v8 & 0x80000000) == 0)
  {
    if (v15) {
      goto LABEL_20;
    }
LABEL_38:
    *a1 = a3;
    return;
  }
  operator delete(v9);
  if (!v15) {
    goto LABEL_38;
  }
LABEL_20:
  uint64_t v16 = &v25;
  sub_1000372B8(a2, &v25);
  int64_t v17 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  int v18 = SHIBYTE(v25.__r_.__value_.__r.__words[2]);
  int v19 = (void *)v25.__r_.__value_.__r.__words[0];
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    int64_t v17 = v25.__r_.__value_.__l.__size_;
    uint64_t v16 = (std::string *)v25.__r_.__value_.__r.__words[0];
  }
  long long v20 = (char *)v16 + v17;
  if (v17 >= 8)
  {
    long long v21 = v16;
    do
    {
      long long v22 = (char *)memchr(v21, 115, v17 - 7);
      if (!v22) {
        break;
      }
      if (*(void *)v22 == 0x64676E6972616873) {
        goto LABEL_28;
      }
      long long v21 = (std::string *)(v22 + 1);
      int64_t v17 = v20 - (char *)v21;
    }
    while (v20 - (char *)v21 > 7);
  }
  long long v22 = v20;
LABEL_28:
  BOOL v24 = v22 == v20 || v22 - (char *)v16 == -1;
  if (v18 < 0)
  {
    operator delete(v19);
    if (v24) {
      return;
    }
    goto LABEL_40;
  }
  if (!v24) {
LABEL_40:
  }
    a1[1] = a3;
}

uint64_t sub_100EDA104(uint64_t a1)
{
  *(void *)a1 = off_102301E00;
  *(void *)(a1 + 8) = off_1022C3DA0;
  *(_DWORD *)(a1 + 16) = 3;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = a1 + 80;
  *(void *)(a1 + 96) = off_1022AD0A0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = off_1022AD0A0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 240) = -1082130432;
  *(_DWORD *)(a1 + 268) = 0;
  *(void *)(a1 + 252) = 0;
  *(void *)(a1 + 244) = 0;
  *(void *)(a1 + 260) = 0;
  *(void *)(a1 + 104) = 12;
  sub_1003A7544((void *)(a1 + 96));
  *(void *)(a1 + 176) = 4;
  sub_1003A7544((void *)(a1 + 168));
  return a1;
}

uint64_t sub_100EDA218(uint64_t a1)
{
  *(void *)a1 = off_102301E00;
  *(void *)(a1 + 168) = off_1022AD0A0;
  sub_1003A7340((void *)(a1 + 192));
  *(void *)(a1 + 96) = off_1022AD0A0;
  sub_1003A7340((void *)(a1 + 120));
  *(void *)(a1 + 8) = off_1022C3DA0;
  sub_1000F5BB0(a1 + 72, *(void **)(a1 + 80));
  sub_10041F48C((void *)(a1 + 24));
  return a1;
}

void sub_100EDA2E0(uint64_t a1)
{
  sub_100EDA218(a1);

  operator delete();
}

void sub_100EDA318(uint64_t a1)
{
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 240) = -1082130432;
  sub_10041F400((void *)(a1 + 8));
  sub_1003A7544((void *)(a1 + 96));
  sub_1003A7544((void *)(a1 + 168));
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
}

void sub_100EDA360(uint64_t a1, float *a2, float *a3, double *a4, int a5)
{
  v49[0] = *a2;
  if (v49[0] >= 0.0)
  {
    float v10 = *(float *)(a1 + 244);
    uint64_t v11 = (float *)(a1 + 240);
    float v12 = *(float *)(a1 + 240);
    float v13 = 0.0;
    if (v12 >= 0.0)
    {
      float v13 = *a4 - *(double *)(a1 + 248);
      if (v13 > 4.0 || v13 < 0.0)
      {
        sub_100EDA318(a1);
        float v12 = *(float *)(a1 + 240);
      }
    }
    if (v12 < 0.0)
    {
      *(float *)(a1 + 240) = *a2;
      *(_DWORD *)(a1 + 244) = 1061997773;
      *(double *)(a1 + 248) = *a4;
      sub_1006B4700(a1 + 8, v49);
LABEL_14:
      sub_1001A44F4(a1 + 168, v49);
      sub_1001A44F4(a1 + 96, v49);
      return;
    }
    sub_1006B4700(a1 + 8, v49);
    char v14 = sub_100A6E134((void *)(a1 + 8), 2, v49);
    float v15 = *a2;
    if ((v14 & 1) == 0)
    {
      *(float *)(a1 + 240) = v15;
      *(_DWORD *)(a1 + 244) = 1061997773;
      *(double *)(a1 + 248) = *a4;
      *(float *)(a1 + 240) = *a2;
      goto LABEL_14;
    }
    if (v15 < 0.25)
    {
      v49[0] = *a2;
      *(double *)(a1 + 256) = *a4;
    }
    if (!a5)
    {
      float v16 = *a3;
      float v17 = 0.1;
      if (*a3 >= 0.1) {
        float v17 = *a3;
      }
      float v18 = 0.0;
      if (v49[0] > 7.0 && v16 > 0.0 && v16 < 0.8) {
        float v21 = v17;
      }
      else {
        float v21 = 0.8;
      }
      sub_1001A44F4(a1 + 168, v49);
      unint64_t v22 = *(void *)(a1 + 160);
      float v23 = 0.0;
      if (v22) {
        float v23 = *(float *)(a1 + 112) / (float)v22;
      }
      unint64_t v24 = *(void *)(a1 + 232);
      if (v24) {
        float v18 = *(float *)(a1 + 184) / (float)v24;
      }
      float v25 = 0.15;
      if (v23 >= 7.0) {
        float v25 = 3.0;
      }
      double v26 = *a4;
      float v27 = 5.0;
      if (*a4 - *(double *)(a1 + 264) >= 4.0) {
        float v28 = v25;
      }
      else {
        float v28 = 5.0;
      }
      float v29 = v49[0];
      if (v28 < 5.0)
      {
        if (v49[0] != 0.0 && v18 >= 0.5 && v26 - *(double *)(a1 + 256) >= 10.0)
        {
          float v30 = vabds_f32(v18, v23);
          if (v30 <= 3.0)
          {
            if (v30 <= 1.5)
            {
              if (v30 <= 1.0) {
                float v27 = v28;
              }
              else {
                float v27 = v28 + v28;
              }
            }
            else
            {
              float v27 = v28 + 1.0;
            }
          }
          else
          {
            *(double *)(a1 + 264) = v26;
          }
        }
        if (v18 > 7.0 && v23 < 7.0) {
          float v28 = 5.0;
        }
        else {
          float v28 = v27;
        }
      }
      float v32 = v10 + (float)(v13 * (float)(v28 * v28));
      float v33 = v29 - *v11;
      float v34 = v21 + v32;
      if (v28 < 0.6 && (float)((float)(v33 * v33) / v34) > 25.0)
      {
        float v32 = (float)(v13 * 25.0) + v32;
        float v34 = v21 + v32;
        float v28 = 5.0;
      }
      float v35 = v32 / v34;
      float v36 = v33 * v35;
      float v37 = v32 - (float)(v35 * v32);
      if (v37 >= 0.01) {
        float v38 = v37;
      }
      else {
        float v38 = 0.01;
      }
      BOOL v39 = v29 == 0.0;
      float v40 = 0.0;
      if (!v39) {
        float v40 = *v11 + v36;
      }
      *(float *)(a1 + 240) = v40;
      *(float *)(a1 + 244) = v38;
      *(double *)(a1 + 248) = *a4;
      sub_1001A44F4(a1 + 96, v11);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102301E40);
      }
      __int16 v41 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        double v42 = *a4;
        double v43 = *a2;
        double v44 = *v11;
        *(_DWORD *)CLMotionActivity buf = 134219776;
        double v66 = v42;
        __int16 v67 = 2048;
        double v68 = v43;
        __int16 v69 = 2048;
        double v70 = v49[0];
        __int16 v71 = 2048;
        double v72 = v44;
        __int16 v73 = 2048;
        double v74 = v18;
        __int16 v75 = 2048;
        double v76 = v23;
        __int16 v77 = 2048;
        double v78 = v28;
        __int16 v79 = 2048;
        double v80 = v38;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "%.2lf,rawGpsSpeed,%.3f,medFiltSpeed,%.3f,filterSpeed,%.3f,meanShortTerm,%.3f,meanLongTerm,%.3f,qV,%.3f,P,%.3f", buf, 0x52u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102301E40);
        }
        double v45 = *a4;
        double v46 = *a2;
        double v47 = *v11;
        v49[1] = 3.8528e-34;
        double v50 = v45;
        __int16 v51 = 2048;
        double v52 = v46;
        __int16 v53 = 2048;
        double v54 = v49[0];
        __int16 v55 = 2048;
        double v56 = v47;
        __int16 v57 = 2048;
        double v58 = v18;
        __int16 v59 = 2048;
        double v60 = v23;
        __int16 v61 = 2048;
        double v62 = v28;
        __int16 v63 = 2048;
        double v64 = v38;
        __int16 v48 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "float CLGpsSpeedFilter::update(const float &, const float &, const CFAbsoluteTime &, BOOL)", "%s\n", v48);
        if (v48 != (char *)buf) {
          free(v48);
        }
      }
    }
  }
}

void sub_100EDA8E8(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100EDA918(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  sub_1000C7F88(buf);
  double v32 = 0.0;
  int v7 = sub_1000A699C(*(uint64_t *)buf, "ProactiveLocPositionUncThreshold", &v32);
  double v8 = v32;
  if (!v7) {
    double v8 = 30.0;
  }
  *(double *)(a1 + 8) = v8;
  sub_1000C7F88(&v32);
  double v29 = 0.0;
  int v9 = sub_1000A699C(*(uint64_t *)&v32, "ProactiveLocSpeedUncThreshold", &v29);
  double v10 = v29;
  if (!v9) {
    double v10 = 4.0;
  }
  *(double *)(a1 + 16) = v10;
  sub_1000C7F88(&v29);
  double v27 = 0.0;
  int v11 = sub_1000A699C(*(uint64_t *)&v29, "ProactiveLocCourseUncThreshold", &v27);
  double v12 = v27;
  if (!v11) {
    double v12 = 45.0;
  }
  *(double *)(a1 + 24) = v12;
  sub_1000C7F88(&v27);
  double v31 = 0.0;
  int v13 = sub_1000A699C(*(uint64_t *)&v27, "ProactiveLocMaxSessionDuration", &v31);
  double v14 = v31;
  if (!v13) {
    double v14 = 18.0;
  }
  *(double *)(a1 + 32) = v14;
  long long v26 = xmmword_101D96010;
  *(_OWORD *)(a1 + 40) = xmmword_101D96010;
  *(_DWORD *)(a1 + 56) = 3;
  *(void *)(a1 + 64) = 0x4020000000000000;
  if (v28) {
    sub_1000DB0A0(v28);
  }
  if (v30) {
    sub_1000DB0A0(v30);
  }
  if (v33) {
    sub_1000DB0A0(v33);
  }
  if (v35) {
    sub_1000DB0A0(v35);
  }
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 140) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(unsigned char *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 75) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 121) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  v37[0] = off_102301EB0;
  v37[1] = a1;
  v37[3] = v37;
  v36[0] = off_102301F30;
  v36[1] = a1;
  v36[3] = v36;
  sub_1013C3BD0(a1 + 352, v37, v36);
  sub_10068280C(v36);
  sub_10065ABCC(v37);
  *(unsigned char *)(a1 + 568) = 0;
  sub_100EDF840(a1 + 576, a3);
  sub_10084F794(a1 + 608, a4);
  *(void *)(a1 + 640) = 0xBFF0000000000000;
  uint64_t v15 = sub_10016BA10();
  *(_DWORD *)CLMotionActivity buf = 1;
  double v16 = sub_10016BA54(v15, buf);
  *(double *)(a1 + 160) = v16;
  *(double *)(a1 + 168) = v16;
  *(void *)(a1 + 40) = 0x7FEFFFFFFFFFFFFFLL;
  if sub_10016CCBC() && (sub_100743E04())
  {
    long long v26 = xmmword_101D96020;
  }
  else if (!sub_10016CCBC())
  {
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 40) = v26;
LABEL_22:
  sub_1000C7F88(buf);
  double v17 = *(double *)(a1 + 40);
  double v32 = 0.0;
  int v18 = sub_1000A699C(*(uint64_t *)buf, "ProactiveLocMinInterval", &v32);
  double v19 = v32;
  if (!v18) {
    double v19 = v17;
  }
  *(double *)(a1 + 40) = v19;
  if (v35) {
    sub_1000DB0A0(v35);
  }
  sub_1000C7F88(buf);
  double v20 = *(double *)(a1 + 48);
  double v32 = 0.0;
  int v21 = sub_1000A699C(*(uint64_t *)buf, "ProactiveLocGnssDailyLimit", &v32);
  double v22 = v32;
  if (!v21) {
    double v22 = v20;
  }
  *(double *)(a1 + 48) = v22;
  if (v35) {
    sub_1000DB0A0(v35);
  }
  sub_1000C7F88(buf);
  double v23 = *(double *)(a1 + 64);
  double v32 = 0.0;
  int v24 = sub_1000A699C(*(uint64_t *)buf, "ProactiveLocRateOverrideMaxSessionDuration", &v32);
  double v25 = v32;
  if (!v24) {
    double v25 = v23;
  }
  *(double *)(a1 + 64) = v25;
  if (v35) {
    sub_1000DB0A0(v35);
  }
  *(void *)(a1 + 640) = *(void *)(a1 + 40);
  sub_100E92BC0();
}

void sub_100EDB110(_Unwind_Exception *a1)
{
  sub_10068280C(v3);
  sub_100682890(v2);
  sub_1013C3C40(v1);
  uint64_t v6 = *v4;
  *uint64_t v4 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  _Unwind_Resume(a1);
}

void sub_100EDB22C(uint64_t a1)
{
}

void sub_100EDB234(uint64_t a1)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102301E60);
  }
  uint64_t v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 72);
    *(_DWORD *)CLMotionActivity buf = 67240192;
    int v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#CLProactiveLoc,active,%{public}d,onProactiveLocationTimer", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102301E60);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::onProactiveLocationTimer()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  [*(id *)(a1 + 80) setNextFireDelay:1.79769313e308];
  if (*(unsigned char *)(a1 + 72))
  {
    sub_100EDB628(a1, 2);
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102301E60);
    }
    uint64_t v4 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)CLMotionActivity buf = 67240192;
      int v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,onProactiveLocationTimer,startTrigger", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102301E60);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::onProactiveLocationTimer()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    sub_100EDBBE4(a1);
  }
}

uint64_t sub_100EDB564(uint64_t a1)
{
  sub_100EDB628(a1, 0);
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    [v2 invalidate];

    *(void *)(a1 + 80) = 0;
  }
  sub_100EDF8D8((void *)(a1 + 576));
  sub_100EDF960((void *)(a1 + 608));

  *(void *)a1 = 0;
  sub_10068280C((void *)(a1 + 608));
  sub_100682890((void *)(a1 + 576));
  sub_1013C3C40(a1 + 352);
  uint64_t v3 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_100EDB628(uint64_t a1, int a2)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102301E60);
  }
  uint64_t v4 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(unsigned __int8 *)(a1 + 72);
    *(_DWORD *)CLMotionActivity buf = 67240448;
    int v14 = v5;
    __int16 v15 = 1026;
    int v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#CLProactiveLoc,active,%{public}d,reason,%{public}d,stopPositionRequest", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102301E60);
    }
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::stopPositionRequest(ProactiveLocationSessionEndReason)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  uint64_t v6 = *(void *)(a1 + 152);
  if (v6 && *(unsigned char *)(a1 + 72))
  {
    [*(id *)(v6 + 16) unregister:*(void *)(v6 + 8) forNotification:0];
    *(unsigned char *)(a1 + 72) = 0;
    uint64_t v7 = sub_10016BA10();
    *(_DWORD *)CLMotionActivity buf = 1;
    *(double *)(a1 + 120) = sub_10016BA54(v7, buf);
    *(_DWORD *)(a1 + 144) = a2;
    *(unsigned char *)(a1 + 75) = *(unsigned char *)(a1 + 74);
    sub_100EDB9D4(a1, *(double *)(a1 + 40));
    sub_100EDCE00(a1);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102301E80);
    }
    double v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(unsigned __int8 *)(a1 + 72);
      int v10 = *(unsigned __int8 *)(a1 + 75);
      *(_DWORD *)CLMotionActivity buf = 67240704;
      int v14 = v9;
      __int16 v15 = 1026;
      int v16 = a2;
      __int16 v17 = 1026;
      int v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#wigo,off,#CLProactiveLoc,active,%{public}d,reason,%{public}d,staticCheckpoint,%{public}d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102301E80);
      }
      double v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::stopPositionRequest(ProactiveLocationSessionEndReason)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
}

id sub_100EDB9D4(uint64_t a1, double a2)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102301E60);
  }
  uint64_t v4 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 72);
    double v6 = 0.0;
    if (a2 < 1.79769313e308) {
      double v6 = a2;
    }
    *(_DWORD *)CLMotionActivity buf = 67240448;
    int v10 = v5;
    __int16 v11 = 2050;
    double v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,updateTimer,%{public}0.2f", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102301E60);
    }
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::updateTimer(const double)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  id result = *(id *)(a1 + 80);
  if (result) {
    return [result setNextFireDelay:a2];
  }
  return result;
}

void sub_100EDBBE4(uint64_t a1)
{
  uint64_t v2 = sub_10016BA10();
  *(_DWORD *)CLMotionActivity buf = 1;
  double v3 = sub_10016BA54(v2, buf);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102301E60);
  }
  uint64_t v4 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(unsigned __int8 *)(a1 + 72);
    uint64_t v6 = sub_10016BA10();
    double v7 = sub_10018202C(v6);
    *(_DWORD *)CLMotionActivity buf = 67240704;
    int v40 = v5;
    __int16 v41 = 2050;
    *(double *)double v42 = v3;
    *(_WORD *)&v42[8] = 2050;
    double v43 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#CLProactiveLoc,active,%{public}d,proactiveLocationStartCheck,mct,%{public}.3f,propagation_us,%{public}.3f", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102301E60);
    }
    uint64_t v35 = sub_10016BA10();
    sub_10018202C(v35);
    float v36 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::proactiveLocationStartCheck()", "%s\n", v36);
    if (v36 != (char *)buf) {
      free(v36);
    }
  }
  sub_100EDC780(a1, v3);
  if (*(double *)(a1 + 48) <= *(double *)(a1 + 216))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102301E60);
    }
    int v14 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = *(unsigned __int8 *)(a1 + 72);
      uint64_t v16 = *(void *)(a1 + 48);
      double v17 = *(double *)(a1 + 216);
      *(_DWORD *)CLMotionActivity buf = 67240704;
      int v40 = v15;
      __int16 v41 = 2050;
      *(void *)double v42 = v16;
      *(_WORD *)&v42[8] = 2050;
      double v43 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,dailyGNSSLimitReached,limit,%{public}0.2f,usage,%{public}0.2f", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102301E60);
      }
      int v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::proactiveLocationStartCheck()", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
  else
  {
    if (v3 - *(double *)(a1 + 96) >= 0.0) {
      double v8 = v3 - *(double *)(a1 + 96);
    }
    else {
      double v8 = 0.0;
    }
    if (v3 - *(double *)(a1 + 120) >= 0.0) {
      double v9 = v3 - *(double *)(a1 + 120);
    }
    else {
      double v9 = 0.0;
    }
    double v10 = *(double *)(a1 + 40);
    BOOL v11 = v9 > v10 && v8 > v10;
    if (v11)
    {
      int v12 = 0;
      int v13 = 1;
    }
    else
    {
      int v13 = sub_100EDC484(a1);
      int v12 = v13;
    }
    BOOL v19 = (*(unsigned char *)(a1 + 73) || *(unsigned char *)(a1 + 344))
       && !*(unsigned char *)(a1 + 76)
       && !*(unsigned char *)(a1 + 77)
       && !*(unsigned char *)(a1 + 78)
       && !*(unsigned char *)(a1 + 75)
       && *(unsigned char *)(a1 + 568) == 0;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102301E60);
    }
    double v20 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = *(unsigned __int8 *)(a1 + 72);
      int v22 = *(unsigned __int8 *)(a1 + 73);
      int v23 = *(unsigned __int8 *)(a1 + 76);
      BOOL v24 = *(unsigned char *)(a1 + 77) == 0;
      BOOL v25 = *(unsigned char *)(a1 + 78) == 0;
      int v26 = *(unsigned __int8 *)(a1 + 344);
      int v27 = *(unsigned __int8 *)(a1 + 75);
      int v28 = *(unsigned __int8 *)(a1 + 568);
      *(_DWORD *)CLMotionActivity buf = 67243265;
      int v40 = v21;
      __int16 v41 = 1025;
      *(_DWORD *)double v42 = v22;
      *(_WORD *)&v42[4] = 1026;
      *(_DWORD *)&v42[6] = v11;
      LOWORD(v43) = 1026;
      *(_DWORD *)((char *)&v43 + 2) = v23;
      HIWORD(v43) = 1026;
      BOOL v44 = v24;
      __int16 v45 = 1026;
      BOOL v46 = v25;
      __int16 v47 = 1026;
      int v48 = 1;
      __int16 v49 = 2050;
      double v50 = v8;
      __int16 v51 = 2050;
      double v52 = v9;
      __int16 v53 = 1026;
      int v54 = v26;
      __int16 v55 = 1026;
      int v56 = v12;
      __int16 v57 = 1026;
      int v58 = v27;
      __int16 v59 = 1026;
      int v60 = v28;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,startCheck,outVisit,%{private}d,rate,%{public}d,lowPower,%{public}d,locService,%{public}d,MA,%{public}d,posUnc,%{public}d,secFromLastConvergedFix,%{public}0.2f,secFromLastProactiveLoc,%{public}0.2f,inVisitOverride,%{public}d,rateOverride,%{public}d,staticOverride,%{public}d,pendingAPSleep,%{public}d", buf, 0x58u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102301E60);
      }
      float v37 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::proactiveLocationStartCheck()", "%s\n", v37);
      if (v37 != (char *)buf) {
        free(v37);
      }
    }
    if (v19)
    {
      if (v13)
      {
        sub_100EDC99C(a1);
      }
      else
      {
        double v29 = *(double *)(a1 + 40);
        if (v8 >= v29) {
          double v30 = 0.0;
        }
        else {
          double v30 = v29 - v8;
        }
        if (v9 >= v29) {
          double v31 = 0.0;
        }
        else {
          double v31 = v29 - v9;
        }
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102301E60);
        }
        double v32 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
        {
          int v33 = *(unsigned __int8 *)(a1 + 72);
          *(_DWORD *)CLMotionActivity buf = 67240704;
          int v40 = v33;
          __int16 v41 = 2050;
          *(double *)double v42 = v30;
          *(_WORD *)&v42[8] = 2050;
          double v43 = v31;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,deltaWrtConvergedFix,%{public}0.2f,deltaWrtProactiveSess,%{public}0.2f", buf, 0x1Cu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102301E60);
          }
          float v38 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::proactiveLocationStartCheck()", "%s\n", v38);
          if (v38 != (char *)buf) {
            free(v38);
          }
        }
        if (v30 >= v31) {
          double v34 = v30;
        }
        else {
          double v34 = v31;
        }
        if (v34 < 0.2) {
          double v34 = 0.2;
        }
        sub_100EDB9D4(a1, v34);
      }
    }
  }
}

uint64_t sub_100EDC484(uint64_t a1)
{
  if (sub_100743E04()) {
    unsigned int v2 = sub_10016CCBC();
  }
  else {
    unsigned int v2 = 0;
  }
  double v3 = *(double *)(a1 + 112);
  int v4 = *(unsigned __int8 *)(a1 + 136);
  if (v3 > 0.0) {
    unsigned int v5 = v2;
  }
  else {
    unsigned int v5 = 0;
  }
  double v6 = *(double *)(a1 + 120) - v3;
  double v7 = *(double *)(a1 + 64);
  if (*(unsigned char *)(a1 + 136)) {
    unsigned int v5 = 0;
  }
  if (v6 <= v7) {
    unsigned int v8 = v5;
  }
  else {
    unsigned int v8 = 0;
  }
  int v9 = *(_DWORD *)(a1 + 140);
  int v10 = *(_DWORD *)(a1 + 144);
  if (v10 != 1) {
    unsigned int v8 = 0;
  }
  if (v9 > 0) {
    uint64_t v11 = v8;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v11 == 1) {
    *(_DWORD *)(a1 + 140) = v9 - 1;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102301E60);
  }
  int v12 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = *(unsigned __int8 *)(a1 + 72);
    int v14 = *(_DWORD *)(a1 + 140);
    *(_DWORD *)CLMotionActivity buf = 67241984;
    int v18 = v13;
    __int16 v19 = 1026;
    int v20 = v11;
    __int16 v21 = 1026;
    unsigned int v22 = v2;
    __int16 v23 = 1026;
    BOOL v24 = v3 > 0.0;
    __int16 v25 = 1026;
    BOOL v26 = v4 == 0;
    __int16 v27 = 1026;
    BOOL v28 = v6 <= v7;
    __int16 v29 = 1026;
    BOOL v30 = v10 == 1;
    __int16 v31 = 1026;
    int v32 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,isRateOverrideTrue,%{public}d,isSessRtryAllowed,%{public}d,notFirstSession,%{public}d,prevNoYield,%{public}d,prevSessionDurationSmall,%{public}d,prevAPSleep,%{public}d,remainingAttempts,%{public}d", buf, 0x32u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102301E60);
    }
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLProactiveLocation::isRateOverrideTrue()", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  return v11;
}

void sub_100EDC780(uint64_t a1, double a2)
{
  double v3 = *(double *)(a1 + 160);
  if (v3 <= a2)
  {
    if (a2 - v3 >= 86400.0)
    {
      sub_1013C55E8(a1 + 352, a1 + 168);
      sub_1012482B0(a1 + 168);
      sub_100EDF374(a1);
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102301E60);
    }
    int v4 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CLMotionActivity buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#LCStats,submitMetrics,CurrentMCT < CA baseline time", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102301E60);
      }
      unsigned int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLProactiveLocation::statsSubmission(const CFTimeInterval)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    sub_100EDF374(a1);
  }
}

void sub_100EDC99C(uint64_t a1)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102301E60);
  }
  unsigned int v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 72);
    *(_DWORD *)CLMotionActivity buf = 67240192;
    int v19 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#CLProactiveLoc,active,%{public}d,startPositionRequest", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102301E60);
    }
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::startPositionRequest()", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  if (*(void *)(a1 + 152) && !*(unsigned char *)(a1 + 72))
  {
    *(unsigned char *)(a1 + 72) = 1;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102301E80);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)CLMotionActivity buf = 67240192;
      int v19 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#wigo,on,#CLProactiveLoc,active,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102301E80);
      }
      double v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::startPositionRequest()", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    *(_OWORD *)(a1 + 104) = 0u;
    int v6 = *(_DWORD *)(a1 + 140);
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 132) = 0u;
    uint64_t v7 = sub_10016BA10();
    *(_DWORD *)CLMotionActivity buf = 1;
    double v8 = sub_10016BA54(v7, buf);
    *(double *)(a1 + 112) = v8;
    *(_DWORD *)(a1 + 140) = v6;
    double v9 = v8 - *(double *)(a1 + 96);
    double v10 = v8 - *(double *)(a1 + 88);
    if (v10 >= v9) {
      double v10 = v9;
    }
    *(double *)(a1 + 104) = v10;
    __asm { FMOV            V0.2D, #-1.0 }
    sub_10012F770();
  }
}

void sub_100EDCDD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EDCE00(uint64_t a1)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102301E60);
  }
  unsigned int v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 72);
    *(_DWORD *)CLMotionActivity buf = 67240192;
    int v51 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,statsUpdateOnSessionEnd", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102301E60);
    }
    BOOL v44 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::statsUpdateOnSessionEnd()", "%s\n", v44);
    if (v44 != (char *)buf) {
      free(v44);
    }
  }
  double v5 = *(double *)(a1 + 112);
  double v4 = *(double *)(a1 + 120);
  if (v4 > v5)
  {
    double v6 = v4 - v5;
    *(double *)(a1 + 216) = v4 - v5 + *(double *)(a1 + 216);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102301E60);
    }
    uint64_t v7 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(unsigned __int8 *)(a1 + 72);
      uint64_t v9 = *(void *)(a1 + 216);
      *(_DWORD *)CLMotionActivity buf = 67240705;
      int v51 = v8;
      __int16 v52 = 2049;
      *(double *)__int16 v53 = v6;
      *(_WORD *)&v53[8] = 2049;
      *(void *)int v54 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,stats,dailyPositionReqActiveSec,%{private}0.2f,total,%{private}0.2f", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102301E60);
      }
      __int16 v49 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::statsUpdateOnSessionEnd()", "%s\n", v49);
      if (v49 != (char *)buf) {
        free(v49);
      }
    }
    if (*(void *)(a1 + 600))
    {
      sub_1000DB3D4((uint64_t)buf);
      int v67 = 1;
      double v68 = v6;
      uint64_t v10 = *(void *)(a1 + 600);
      if (!v10) {
        sub_10015E48C();
      }
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v10 + 48))(v10, buf);

      if (v65) {
        sub_1000DB0A0(v65);
      }
      if (v64 < 0) {
        operator delete(__p);
      }
      if (v62) {
        sub_1000DB0A0(v62);
      }
      if (v61) {
        sub_1000DB0A0(v61);
      }
    }
    ++*(_DWORD *)(a1 + 184);
    if (!*(unsigned char *)(a1 + 136)) {
      ++*(_DWORD *)(a1 + 192);
    }
    switch(*(_DWORD *)(a1 + 144))
    {
      case 1:
        ++*(_DWORD *)(a1 + 200);
        break;
      case 2:
        ++*(_DWORD *)(a1 + 196);
        break;
      case 3:
        ++*(_DWORD *)(a1 + 204);
        break;
      case 4:
        ++*(_DWORD *)(a1 + 208);
        break;
      case 5:
        ++*(_DWORD *)(a1 + 212);
        break;
      case 7:
        ++*(_DWORD *)(a1 + 188);
        if (v6 >= 3.0)
        {
          if (v6 >= 5.0)
          {
            if (v6 >= 8.0)
            {
              if (v6 >= 10.0)
              {
                if (v6 >= 15.0) {
                  ++*(_DWORD *)(a1 + 244);
                }
                else {
                  ++*(_DWORD *)(a1 + 240);
                }
              }
              else
              {
                ++*(_DWORD *)(a1 + 236);
              }
            }
            else
            {
              ++*(_DWORD *)(a1 + 232);
            }
          }
          else
          {
            ++*(_DWORD *)(a1 + 228);
          }
        }
        else
        {
          ++*(_DWORD *)(a1 + 224);
        }
        break;
      default:
        break;
    }
    double v11 = *(double *)(a1 + 104);
    if (v11 >= 180.0)
    {
      if (v11 >= 300.0)
      {
        if (v11 >= 600.0)
        {
          if (v11 >= 900.0)
          {
            if (v11 >= 1200.0)
            {
              if (v11 >= 1800.0) {
                ++*(_DWORD *)(a1 + 272);
              }
              else {
                ++*(_DWORD *)(a1 + 268);
              }
            }
            else
            {
              ++*(_DWORD *)(a1 + 264);
            }
          }
          else
          {
            ++*(_DWORD *)(a1 + 260);
          }
        }
        else
        {
          ++*(_DWORD *)(a1 + 256);
        }
      }
      else
      {
        ++*(_DWORD *)(a1 + 252);
      }
    }
    else
    {
      ++*(_DWORD *)(a1 + 248);
    }
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102301E60);
  }
  int v12 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = *(unsigned __int8 *)(a1 + 72);
    int v14 = *(_DWORD *)(a1 + 200);
    int v15 = *(_DWORD *)(a1 + 204);
    int v16 = *(_DWORD *)(a1 + 208);
    int v17 = *(_DWORD *)(a1 + 184);
    int v18 = *(_DWORD *)(a1 + 188);
    int v20 = *(_DWORD *)(a1 + 192);
    int v19 = *(_DWORD *)(a1 + 196);
    uint64_t v21 = *(void *)(a1 + 216);
    *(_DWORD *)CLMotionActivity buf = 67242240;
    int v51 = v13;
    __int16 v52 = 1026;
    *(_DWORD *)__int16 v53 = v17;
    *(_WORD *)&v53[4] = 1026;
    *(_DWORD *)&v53[6] = v14;
    *(_WORD *)int v54 = 1026;
    *(_DWORD *)&v54[2] = v19;
    *(_WORD *)&v54[6] = 1026;
    *(_DWORD *)&v54[8] = v15;
    *(_WORD *)__int16 v55 = 1026;
    *(_DWORD *)&v55[2] = v16;
    *(_WORD *)int v56 = 1026;
    *(_DWORD *)&v56[2] = v18;
    __int16 v57 = 1026;
    int v58 = v20;
    __int16 v59 = 2050;
    uint64_t v60 = v21;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,overallStats,count,%{public}d,APSleep,%{public}d,Timeout,%{public}d,VisitEnd,%{public}d,lowPowerMode,%{public}d,converged,%{public}d,noYield,%{public}d,total,%{public}0.2f", buf, 0x3Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102301E60);
    }
    __int16 v45 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::statsUpdateOnSessionEnd()", "%s\n", v45);
    if (v45 != (char *)buf) {
      free(v45);
    }
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102301E60);
  }
  unsigned int v22 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    int v23 = *(_DWORD *)(a1 + 224);
    int v24 = *(_DWORD *)(a1 + 228);
    int v25 = *(_DWORD *)(a1 + 232);
    int v26 = *(_DWORD *)(a1 + 236);
    int v27 = *(_DWORD *)(a1 + 240);
    int v28 = *(_DWORD *)(a1 + 244);
    *(_DWORD *)CLMotionActivity buf = 67241472;
    int v51 = v23;
    __int16 v52 = 1026;
    *(_DWORD *)__int16 v53 = v24;
    *(_WORD *)&v53[4] = 1026;
    *(_DWORD *)&v53[6] = v25;
    *(_WORD *)int v54 = 1026;
    *(_DWORD *)&v54[2] = v26;
    *(_WORD *)&v54[6] = 1026;
    *(_DWORD *)&v54[8] = v27;
    *(_WORD *)__int16 v55 = 1026;
    *(_DWORD *)&v55[2] = v28;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,convergedFixSessDurationStats,[0,3),%{public}d,[3,5),%{public}d,[5,8),%{public}d,[8,10),%{public}d,[10,15),%{public}d,[15,),%{public}d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102301E60);
    }
    BOOL v46 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::statsUpdateOnSessionEnd()", "%s\n", v46);
    if (v46 != (char *)buf) {
      free(v46);
    }
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102301E60);
  }
  __int16 v29 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    int v30 = *(_DWORD *)(a1 + 248);
    int v31 = *(_DWORD *)(a1 + 252);
    int v32 = *(_DWORD *)(a1 + 256);
    int v33 = *(_DWORD *)(a1 + 260);
    int v34 = *(_DWORD *)(a1 + 264);
    int v35 = *(_DWORD *)(a1 + 268);
    int v36 = *(_DWORD *)(a1 + 272);
    *(_DWORD *)CLMotionActivity buf = 67241728;
    int v51 = v30;
    __int16 v52 = 1026;
    *(_DWORD *)__int16 v53 = v31;
    *(_WORD *)&v53[4] = 1026;
    *(_DWORD *)&v53[6] = v32;
    *(_WORD *)int v54 = 1026;
    *(_DWORD *)&v54[2] = v33;
    *(_WORD *)&v54[6] = 1026;
    *(_DWORD *)&v54[8] = v34;
    *(_WORD *)__int16 v55 = 1026;
    *(_DWORD *)&v55[2] = v35;
    *(_WORD *)int v56 = 1026;
    *(_DWORD *)&v56[2] = v36;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,sessIntervalStats,[0,3),%{public}d,[3,5),%{public}d,[5,10),%{public}d,[10,15),%{public}d,[15,20),%{public}d,[20,30),%{public}d,[30,),%{public}d", buf, 0x2Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102301E60);
    }
    __int16 v47 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::statsUpdateOnSessionEnd()", "%s\n", v47);
    if (v47 != (char *)buf) {
      free(v47);
    }
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102301E60);
  }
  float v37 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    int v38 = *(_DWORD *)(a1 + 288);
    uint64_t v39 = *(void *)(a1 + 280);
    int v40 = *(_DWORD *)(a1 + 292);
    int v41 = *(_DWORD *)(a1 + 296);
    int v42 = *(_DWORD *)(a1 + 300);
    int v43 = *(_DWORD *)(a1 + 304);
    *(_DWORD *)CLMotionActivity buf = 67241472;
    int v51 = v38;
    __int16 v52 = 2050;
    *(void *)__int16 v53 = v39;
    *(_WORD *)&v53[8] = 1026;
    *(_DWORD *)int v54 = v40;
    *(_WORD *)&v54[4] = 1026;
    *(_DWORD *)&v54[6] = v41;
    *(_WORD *)&v54[10] = 1026;
    *(_DWORD *)__int16 v55 = v42;
    *(_WORD *)&v55[4] = 1026;
    *(_DWORD *)int v56 = v43;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,APWakeStats,count,%{public}d,totalDuration,%{public}0.2f,[0,10),%{public}d,[10,20),%{public}d,[20,30),%{public}d,[30,),%{public}d", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102301E60);
    }
    int v48 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::statsUpdateOnSessionEnd()", "%s\n", v48);
    if (v48 != (char *)buf) {
      free(v48);
    }
  }
}

void sub_100EDDB4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EDDB94(uint64_t a1, void *a2)
{
  if (a2)
  {
    if ([a2 hasDepartureDate]) {
      int v4 = 0;
    }
    else {
      int v4 = [a2 hasArrivalDate];
    }
    int v5 = v4 ^ 1;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102301E60);
    }
    double v6 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)CLMotionActivity buf = 67240449;
      int v12 = v7;
      __int16 v13 = 1025;
      int v14 = v4 ^ 1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,feedVisit,isOutsideVisit,%{private}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102301E60);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::feedVisit(const CLVisit *)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    if (*(unsigned __int8 *)(a1 + 73) != v5)
    {
      *(unsigned char *)(a1 + 73) = v5;
      uint64_t v8 = sub_10016BA10();
      *(_DWORD *)CLMotionActivity buf = 1;
      *(double *)(a1 + 88) = sub_10016BA54(v8, buf);
      if (*(unsigned char *)(a1 + 73))
      {
        *(unsigned char *)(a1 + 344) = 0;
        sub_100EDBBE4(a1);
      }
      else
      {
        sub_100EDB628(a1, 3);
        sub_100EDB9D4(a1, *(double *)(a1 + 40));
        if (!objc_msgSend(objc_msgSend(a2, "_placeInference"), "userType"))
        {
          char v9 = [objc_msgSend(objc_msgSend(a2, "_placeInference"), "placeType") != (id)2];
          goto LABEL_15;
        }
      }
    }
    char v9 = 0;
LABEL_15:
    sub_1013C4344(a1 + 352, v4, v9);
  }
}

void sub_100EDDE24(uint64_t a1, int *a2, unsigned __int8 *a3)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102301E60);
  }
  double v6 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(unsigned __int8 *)(a1 + 72);
    int v8 = *a2;
    *(_DWORD *)CLMotionActivity buf = 67240448;
    int v15 = v7;
    __int16 v16 = 1026;
    int v17 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#CLProactiveLoc,active,%{public}d,feedDaemonStatus,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102301E60);
    }
    __int16 v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::feedDaemonStatus(const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  int v9 = *a2;
  if (*a2 == 15)
  {
    int v11 = *a3;
    *(unsigned char *)(a1 + 76) = v11;
    if (v11)
    {
      sub_100EDB628(a1, 4);
      sub_100EDB9D4(a1, 1.79769313e308);
    }
    else
    {
      sub_100EDBBE4(a1);
    }
  }
  else if (v9 == 3)
  {
    ++*(_DWORD *)(a1 + 288);
    uint64_t v12 = sub_10016BA10();
    *(_DWORD *)CLMotionActivity buf = 1;
    *(double *)(a1 + 168) = sub_10016BA54(v12, buf);
    sub_100EDE4AC(a1);
    *(unsigned char *)(a1 + 568) = 0;
    if (!*(unsigned char *)(a1 + 72))
    {
      sub_100EDBBE4(a1);
      sub_1013C55D8(a1 + 352);
    }
  }
  else if (v9 == 2)
  {
    uint64_t v10 = sub_10016BA10();
    *(_DWORD *)CLMotionActivity buf = 1;
    *(double *)(a1 + 176) = sub_10016BA54(v10, buf);
    sub_100EDE0D8(a1);
    *(unsigned char *)(a1 + 568) = 1;
    sub_100EDB628(a1, 1);
  }
}

void sub_100EDE0D8(uint64_t a1)
{
  double v3 = *(double *)(a1 + 168);
  double v2 = *(double *)(a1 + 176);
  if (v2 >= v3)
  {
    double v9 = v2 - v3;
    *(double *)(a1 + 280) = v2 - v3 + *(double *)(a1 + 280);
    if (v2 - v3 >= 10.0)
    {
      if (v9 >= 20.0)
      {
        if (v9 >= 30.0) {
          ++*(_DWORD *)(a1 + 304);
        }
        else {
          ++*(_DWORD *)(a1 + 300);
        }
      }
      else
      {
        ++*(_DWORD *)(a1 + 296);
      }
    }
    else
    {
      ++*(_DWORD *)(a1 + 292);
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102301E60);
    }
    uint64_t v10 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = *(unsigned __int8 *)(a1 + 72);
      uint64_t v12 = *(void *)(a1 + 280);
      *(_DWORD *)CLMotionActivity buf = 67240704;
      int v14 = v11;
      __int16 v15 = 2050;
      double v16 = v9;
      __int16 v17 = 2050;
      uint64_t v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,APWakeSec,wake,%{public}0.2f,total,%{public}0.2f", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102301E60);
      }
      int v8 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::updateAPWakeStats()", "%s\n");
      goto LABEL_26;
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102301E60);
    }
    int v4 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      int v5 = *(unsigned __int8 *)(a1 + 72);
      uint64_t v7 = *(void *)(a1 + 168);
      double v6 = *(double *)(a1 + 176);
      *(_DWORD *)CLMotionActivity buf = 67240704;
      int v14 = v5;
      __int16 v15 = 2050;
      double v16 = v6;
      __int16 v17 = 2050;
      uint64_t v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#CLProactiveLoc,active,%{public}d,updateAPWakeStats,sleep,%{public}0.2f,wake,%{public}0.2f", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102301E60);
      }
      int v8 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLProactiveLocation::updateAPWakeStats()", "%s\n");
LABEL_26:
      if (v8 != buf) {
        free(v8);
      }
    }
  }
}

void sub_100EDE4AC(uint64_t a1)
{
  double v3 = *(double *)(a1 + 168);
  double v2 = *(double *)(a1 + 176);
  if (v2 <= v3)
  {
    double v9 = v3 - v2;
    if (v3 - v2 >= 120.0)
    {
      if (v9 >= 300.0)
      {
        float v12 = v9 + *(float *)(a1 + 336);
        *(float *)(a1 + 336) = v12;
      }
      else
      {
        float v11 = v9 + *(float *)(a1 + 332);
        *(float *)(a1 + 332) = v11;
      }
    }
    else
    {
      float v10 = v9 + *(float *)(a1 + 328);
      *(float *)(a1 + 328) = v10;
    }
    float v13 = (float)(*(float *)(a1 + 328) + *(float *)(a1 + 332)) + *(float *)(a1 + 336);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102301E60);
    }
    double v14 = v13;
    __int16 v15 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)CLMotionActivity buf = 67240704;
      int v18 = v16;
      __int16 v19 = 2050;
      double v20 = v9;
      __int16 v21 = 2050;
      double v22 = v14;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,sleepDur,%{public}0.2f,total,%{public}0.2f", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102301E60);
      }
      int v8 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::updateAPSleepStats()", "%s\n");
      goto LABEL_24;
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102301E60);
    }
    int v4 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      int v5 = *(unsigned __int8 *)(a1 + 72);
      double v7 = *(double *)(a1 + 168);
      double v6 = *(double *)(a1 + 176);
      *(_DWORD *)CLMotionActivity buf = 67240704;
      int v18 = v5;
      __int16 v19 = 2050;
      double v20 = v6;
      __int16 v21 = 2050;
      double v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#CLProactiveLoc,active,%{public}d,updateAPSleepStats,sleep,%{public}0.2f,wake,%{public}0.2f", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102301E60);
      }
      int v8 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLProactiveLocation::updateAPSleepStats()", "%s\n");
LABEL_24:
      if (v8 != buf) {
        free(v8);
      }
    }
  }
}

void sub_100EDE888(unsigned __int8 *a1, _DWORD *a2, _DWORD *a3)
{
  if ((*a2 - 1) <= 1)
  {
    unsigned int v6 = *a3 - 1;
    a1[74] = v6 < 2;
    if (a1[75]) {
      BOOL v7 = v6 >= 2;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      a1[75] = 0;
      sub_100EDBBE4((uint64_t)a1);
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102301E60);
    }
    int v8 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v9 = a1[72];
      int v10 = a1[74];
      int v11 = a1[75];
      *(_DWORD *)CLMotionActivity buf = 67240704;
      int v14 = v9;
      __int16 v15 = 1026;
      int v16 = v10;
      __int16 v17 = 1026;
      int v18 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#CLProactiveLoc,active,%{public}d,feedMotionNotification,static,%{public}d,staticCheckpoint,%{public}d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102301E60);
      }
      float v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::feedMotionNotification(const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    sub_1013C494C((uint64_t)(a1 + 352), (uint64_t)a2, a3);
  }
}

void sub_100EDEAD4(uint64_t a1, int a2)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102301E60);
  }
  int v4 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 72);
    *(_DWORD *)CLMotionActivity buf = 67240448;
    int v9 = v5;
    __int16 v10 = 1026;
    int v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,feedLocationServicesEnablementStatus,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102301E60);
    }
    BOOL v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::feedLocationServicesEnablementStatus(const BOOL)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  int v6 = *(unsigned __int8 *)(a1 + 77);
  *(unsigned char *)(a1 + 77) = a2 ^ 1;
  if (v6 && a2)
  {
    sub_100EDBBE4(a1);
  }
  else if (!v6 && (a2 & 1) == 0)
  {
    sub_100EDB628(a1, 5);
    sub_100EDB9D4(a1, 1.79769313e308);
  }
}

void sub_100EDECE8(uint64_t a1, int *a2, uint64_t a3)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102301E60);
  }
  int v6 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(a1 + 72);
    int v8 = *a2;
    *(_DWORD *)CLMotionActivity buf = 67240448;
    int v34 = v7;
    __int16 v35 = 1026;
    int v36 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,feedMobileAssetNotification,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102301E60);
    }
    int v19 = *(unsigned __int8 *)(a1 + 72);
    int v20 = *a2;
    LODWORD(v30) = 67240448;
    HIDWORD(v30) = v19;
    __int16 v31 = 1026;
    int v32 = v20;
    __int16 v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::feedMobileAssetNotification(const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
  if (*a2 == 2)
  {
    sub_1000E9354(&v30);
    if (sub_100012960(a3, "ProactiveGnssAllowedAsset_v2", &v30))
    {
      BOOL v25 = 0;
      if (sub_1000D2988((uint64_t)&v30, "ProactiveGnssEnable", &v25))
      {
        *(unsigned char *)(a1 + 78) = !v25;
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102301E60);
        }
        int v9 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
        {
          int v10 = *(unsigned __int8 *)(a1 + 72);
          int v11 = *(unsigned __int8 *)(a1 + 78);
          *(_DWORD *)CLMotionActivity buf = 67240448;
          int v34 = v10;
          __int16 v35 = 1026;
          int v36 = v11;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,MA-OTA,ProactiveLocationDisabled,%{public}d", buf, 0xEu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102301E60);
          }
          int v22 = *(unsigned __int8 *)(a1 + 72);
          int v23 = *(unsigned __int8 *)(a1 + 78);
          int v26 = 67240448;
          int v27 = v22;
          __int16 v28 = 1026;
          int v29 = v23;
          int v24 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::feedMobileAssetNotification(const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v24);
          if (v24 != (char *)buf) {
            free(v24);
          }
        }
        if (*(unsigned char *)(a1 + 78))
        {
          sub_100EDB628(a1, 6);
          sub_100EDB9D4(a1, 1.79769313e308);
        }
        else
        {
          sub_100EDBBE4(a1);
        }
LABEL_35:
        sub_10013F3C4(&v30);
        return;
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102301E60);
      }
      int v16 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = *(unsigned __int8 *)(a1 + 72);
        *(_DWORD *)CLMotionActivity buf = 67240192;
        int v34 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,MA-OTA,ProactiveGnssEnable,no config", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_35;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102301E60);
      }
      int v18 = *(unsigned __int8 *)(a1 + 72);
      int v26 = 67240192;
      int v27 = v18;
      __int16 v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::feedMobileAssetNotification(const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v15);
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102301E60);
      }
      float v12 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = *(unsigned __int8 *)(a1 + 72);
        *(_DWORD *)CLMotionActivity buf = 67240192;
        int v34 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,active,%{public}d,MA-OTA,ProactiveGnssAllowedAsset_v2 not available", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_35;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102301E60);
      }
      int v14 = *(unsigned __int8 *)(a1 + 72);
      int v26 = 67240192;
      int v27 = v14;
      __int16 v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLProactiveLocation::feedMobileAssetNotification(const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v15);
    }
    if (v15 != (char *)buf) {
      free(v15);
    }
    goto LABEL_35;
  }
}

void sub_100EDF348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_100EDF374(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 168);
  uint64_t v3 = *(void *)(a1 + 176);
  uint64_t v1 = (double *)(a1 + 168);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  uint64_t v4 = sub_10016BA10();
  int v5 = 1;
  *(v1 - 1) = sub_10016BA54(v4, &v5);
  *(void *)uint64_t v1 = v2;
  *((void *)v1 + 1) = v3;
}

void sub_100EDF3E0(uint64_t a1, _DWORD *a2, uint64_t a3)
{
}

void sub_100EDF3E8(uint64_t a1, uint64_t *a2, double a3, __n128 a4)
{
}

uint64_t sub_100EDF3F0(uint64_t a1, double a2)
{
  if (a2 < 0.0 || *(double *)(a1 + 40) < a2) {
    return 0;
  }
  *(double *)(a1 + 40) = a2;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102301E60);
  }
  uint64_t v4 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    *(_DWORD *)CLMotionActivity buf = 134349056;
    uint64_t v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLProactiveLoc,Minimum session interval changed,proactiveLocationMinIntersessionInterval,%{public}.2f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102301E60);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLProactiveLocation::requestProactiveMinSessionInterval(double)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return 1;
}

BOOL sub_100EDF5C8(uint64_t a1)
{
  double v1 = *(double *)(a1 + 640);
  if (v1 >= 0.0) {
    *(double *)(a1 + 40) = v1;
  }
  return v1 >= 0.0;
}

void sub_100EDF5E4(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100EDF614(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100EDF648()
{
}

void *sub_100EDF65C(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_102301EB0;
  result[1] = v3;
  return result;
}

uint64_t sub_100EDF6A4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102301EB0;
  a2[1] = v2;
  return result;
}

void sub_100EDF6D0(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  *(unsigned char *)(v3 + 344) = v2;
  if (v2) {
    sub_100EDBBE4(v3);
  }
}

uint64_t sub_100EDF6E8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100EDF728()
{
}

void sub_100EDF738()
{
}

void *sub_100EDF74C(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_102301F30;
  result[1] = v3;
  return result;
}

uint64_t sub_100EDF794(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102301F30;
  a2[1] = v2;
  return result;
}

uint64_t sub_100EDF7C0(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 8) + 632);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

uint64_t sub_100EDF7F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100EDF834()
{
}

uint64_t sub_100EDF840(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100EDF8D8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100EDF960(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100EDF9E8(uint64_t a1)
{
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)a1 = _Q0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  int v9 = 0;
  sub_100EDFD28((void *)(a1 + 32), 1uLL, &v9);
  int v8 = 0;
  sub_100EDFD28((void *)(a1 + 56), 1uLL, &v8);
  *(_DWORD *)(a1 + 80) = 1082130432;
  return a1;
}

void sub_100EDFA60(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100EDFA80(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

double sub_100EDFAC8(uint64_t a1, double *a2, _DWORD *a3, double a4)
{
  uint64_t v9 = *(void *)(a1 + 24);
  int v8 = (dispatch_once_t *)(a1 + 24);
  double v10 = *a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100EDFD18;
  block[3] = &unk_102301FA0;
  block[4] = a1;
  *(double *)&void block[5] = a4;
  if (v9 != -1) {
    dispatch_once(v8, block);
  }
  if ((*a3 - 1) < 2 || *a3 == 3 && !a3[1])
  {
    double v11 = a4 - *(double *)(a1 + 8);
    float v12 = 1.0;
    if (v11 > 3.0)
    {
      float v12 = exp((v11 + -3.0) * -0.5);
      if (v12 < 0.1) {
        float v12 = 0.1;
      }
    }
  }
  else
  {
    *(double *)(a1 + 8) = a4;
    float v12 = 1.0;
  }
  double v13 = a4 - *(double *)a1;
  uint64_t v28 = 0;
  sub_1001DCEDC(__p, 1uLL, &v28);
  *(double *)a1 = a4;
  if (v13 <= 10.0)
  {
    double v18 = *a2;
    float v19 = *a2;
    *(float *)(a1 + 80) = v19;
    int v17 = *(float **)(a1 + 32);
    float v20 = *v17;
    double v21 = (float)(*v17 / (float)(*v17 + v19));
    int v22 = *(float **)(a1 + 56);
    double v14 = *v22 + v21 * (v18 - *v22);
    __int16 v15 = __p[0];
    *(double *)__p[0] = v14;
    double v23 = v20 - v21 * v20;
    float v24 = v14;
    *int v22 = v24;
    float v16 = v23 + v13 * v13 * 0.349999994 * 0.5 * v12;
  }
  else
  {
    *(double *)(a1 + 8) = a4;
    **(_DWORD **)(a1 + 32) = 1092616192;
    double v14 = *a2;
    __int16 v15 = __p[0];
    *(double *)__p[0] = *a2;
    float v16 = v14;
    int v17 = *(float **)(a1 + 56);
  }
  *int v17 = v16;
  if (v14 - *a2 <= 25.0)
  {
    *(_DWORD *)(a1 + 16) = 0;
    double v10 = v14;
  }
  else
  {
    int v25 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v25 + 1;
    if (v25 >= 3)
    {
      *(double *)(a1 + 8) = a4;
      **(_DWORD **)(a1 + 32) = 1092616192;
      double v26 = *a2;
      *__int16 v15 = *(void *)a2;
      *(float *)&double v26 = v26;
      **(_DWORD **)(a1 + 56) = LODWORD(v26);
    }
  }
  __p[1] = v15;
  operator delete(v15);
  return v10;
}

double sub_100EDFD18(uint64_t a1)
{
  double result = *(double *)(a1 + 40);
  *(double *)(*(void *)(a1 + 32) + 8) = result;
  return result;
}

void *sub_100EDFD28(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10017C6FC(a1, a2);
    int v6 = (_DWORD *)a1[1];
    int v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_100EDFD90(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EDFDAC(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  sub_1006B144C((void *)(a1 + 16));
  sub_100134750(&__p, "OutdoorService");
  sub_100AD7878((void *)(a1 + 2504));
  if (v5 < 0) {
    operator delete(__p);
  }
  sub_1010A093C(a1 + 2544, a1 + 2504);
  *(_OWORD *)(a1 + 6344) = 0u;
  sub_10144B388(a1 + 6368, a1 + 2504);
  *(_OWORD *)(a1 + 8976) = 0u;
  *(_OWORD *)(a1 + 8960) = 0u;
  *(_OWORD *)(a1 + 8944) = 0u;
  return a1;
}

void sub_100EDFE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  double v21 = v18;
  double v23 = (void *)*v21;
  void *v21 = 0;
  if (v23) {
    sub_100EE1CA4((uint64_t)v21, v23);
  }
  sub_101A95620(v20, v19);
  if (*(char *)(v16 + 2527) < 0) {
    operator delete(*v17);
  }
  sub_1006B3580(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100EDFEE4(uint64_t a1)
{
  sub_10134D2DC(a1 + 3520);
  uint64_t v2 = *(void **)(a1 + 3160);
  if (v2)
  {
    *(void *)(a1 + 3168) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 3088);
  if (v3)
  {
    *(void *)(a1 + 3096) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 3087) < 0) {
    operator delete(*(void **)(a1 + 3064));
  }
  sub_10054EAC4(a1 + 2960);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_100EDFF5C(unsigned char *a1)
{
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_102301FC0);
  }
  uint64_t v2 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)CLMotionActivity buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Pausing for historical events from AOP to be processed", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_102301FC0);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorManager::pause()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  *a1 = 1;
}

void sub_100EE00F8(unsigned char *a1)
{
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_102301FC0);
  }
  uint64_t v2 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)CLMotionActivity buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Resuming after historical events from AOP have been processed", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_102301FC0);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorManager::resume()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  *a1 = 0;
}

void sub_100EE0290(uint64_t a1, long long *a2)
{
}

void sub_100EE0298(uint64_t a1, uint64_t *a2)
{
  if (a2[1] != a2[2]) {
    sub_1010A0A7C(a1 + 2544, a2);
  }
}

void sub_100EE02B0(uint64_t a1, uint64_t a2)
{
}

void sub_100EE02B8(uint64_t a1, uint64_t a2)
{
  double v23 = 0;
  uint64_t v24 = 0;
  long long v20 = *(_OWORD *)a2;
  uint64_t v21 = *(void *)(a2 + 16);
  long long __p = 0;
  if (&v20 != (long long *)a2) {
    sub_100ADA2D8((char *)&__p, *(char **)(a2 + 24), *(void *)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2));
  }
  uint64_t v3 = *(void *)(a1 + 168);
  if (v3) {
    (*(void (**)(uint64_t, long long *))(*(void *)v3 + 48))(v3, &v20);
  }
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4)
  {
    unint64_t v5 = *(void *)(a1 + 48);
    int v6 = *(void ***)(a1 + 24);
    double v7 = *((double *)v6[(v4 + v5 - 1) / 0x55] + 6 * ((v4 + v5 - 1) % 0x55));
    if (v7 > *(double *)&v20)
    {
      uint64_t v8 = *(void ***)(a1 + 32);
      if (v8 == v6)
      {
        uint64_t v8 = *(void ***)(a1 + 24);
      }
      else
      {
        uint64_t v9 = &v6[v5 / 0x55];
        unint64_t v10 = (unint64_t)*v9;
        unint64_t v11 = (unint64_t)*v9 + 48 * (v5 % 0x55);
        unint64_t v12 = (unint64_t)v6[(v5 + v4) / 0x55] + 48 * ((v5 + v4) % 0x55);
        if (v11 != v12)
        {
          do
          {
            double v13 = *(void **)(v11 + 24);
            if (v13)
            {
              *(void *)(v11 + 32) = v13;
              operator delete(v13);
              unint64_t v10 = (unint64_t)*v9;
            }
            v11 += 48;
            if (v11 - v10 == 4080)
            {
              unint64_t v14 = (unint64_t)v9[1];
              ++v9;
              unint64_t v10 = v14;
              unint64_t v11 = v14;
            }
          }
          while (v11 != v12);
          int v6 = *(void ***)(a1 + 24);
          uint64_t v8 = *(void ***)(a1 + 32);
        }
      }
      *(void *)(a1 + 56) = 0;
      unint64_t v15 = (char *)v8 - (char *)v6;
      if ((unint64_t)((char *)v8 - (char *)v6) >= 0x11)
      {
        do
        {
          operator delete(*v6);
          uint64_t v16 = *(void *)(a1 + 32);
          int v6 = (void **)(*(void *)(a1 + 24) + 8);
          *(void *)(a1 + 24) = v6;
          unint64_t v15 = v16 - (void)v6;
        }
        while (v15 > 0x10);
      }
      if (v15 >> 3 == 1)
      {
        uint64_t v17 = 42;
      }
      else
      {
        if (v15 >> 3 != 2)
        {
LABEL_23:
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102301FE0);
          }
          double v18 = qword_102418FD8;
          if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)CLMotionActivity buf = 134218240;
            uint64_t v30 = v20;
            __int16 v31 = 2048;
            double v32 = v7;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "time rollback on add, newItemTime, %f, lastItemTime, %f", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FD0 != -1) {
              dispatch_once(&qword_102418FD0, &stru_102301FE0);
            }
            int v25 = 134218240;
            uint64_t v26 = v20;
            __int16 v27 = 2048;
            double v28 = v7;
            uint64_t v19 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLSourceBuffer<CLOutdoorGnssLeechLocation>::add(const T &) [T = CLOutdoorGnssLeechLocation]", "%s\n", v19);
            if (v19 != (char *)buf) {
              free(v19);
            }
          }
          goto LABEL_28;
        }
        uint64_t v17 = 85;
      }
      *(void *)(a1 + 48) = v17;
      goto LABEL_23;
    }
  }
LABEL_28:
  sub_100EE1598((void *)(a1 + 16), &v20);
  *(_OWORD *)(a1 + 96) = v20;
  *(void *)(a1 + 112) = v21;
  if ((long long *)(a1 + 96) != &v20) {
    sub_100ADA2D8((char *)(a1 + 120), (char *)__p, (uint64_t)v23, 0x6DB6DB6DB6DB6DB7 * ((v23 - (unsigned char *)__p) >> 2));
  }
  if (__p)
  {
    double v23 = __p;
    operator delete(__p);
  }
}

void sub_100EE06A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EE06C4(uint64_t a1, int *a2)
{
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_102301FC0);
  }
  uint64_t v4 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a2;
    int v6 = a2[1];
    *(_DWORD *)CLMotionActivity buf = 67109376;
    int v9 = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "SignalEnvironment, type, %d, fidelityLevel, %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_102301FC0);
    }
    double v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorManager::feedSignalEnvironment(const CLOutdoorSignalEnvironment &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_1010A0A74(a1 + 2544, a2);
}

double sub_100EE08A0(uint64_t a1, uint64_t *a2)
{
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_102301FC0);
  }
  uint64_t v4 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    uint64_t v7 = a2[2];
    uint64_t v8 = a2[3];
    uint64_t v9 = a2[14];
    uint64_t v10 = a2[15];
    *(_DWORD *)CLMotionActivity buf = 134219264;
    uint64_t v14 = v5;
    __int16 v15 = 2048;
    uint64_t v16 = v6;
    __int16 v17 = 2048;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = v8;
    __int16 v21 = 2048;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "WorkoutEvent, startTime, %f, endTime, %f, eventType, %ld, eventTime, %f, workoutType, %ld, workoutLocationType, %ld", buf, 0x3Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_102301FC0);
    }
    unint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorManager::feedWorkoutEvent(const CLOutdoorWorkoutEvent &)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  return sub_10144B464(a1 + 6368, (uint64_t)a2);
}

void sub_100EE0AD0(uint64_t a1, int a2)
{
  uint64_t v3 = (unsigned char *)(a1 + 6360);
  if (*(unsigned __int8 *)(a1 + 6360) == a2)
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_102301FC0);
    }
    uint64_t v4 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)CLMotionActivity buf = 67109120;
      int v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "HK Privacy toggle unchanged, shouldWriteDaylightTime, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_102301FC0);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorManager::setShouldWriteDaylightTimeToHealthKit(BOOL)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  else
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_102301FC0);
    }
    uint64_t v7 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CLMotionActivity buf = 67109120;
      int v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "HK privacy toggle changed, shouldWriteDaylightTime, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_102301FC0);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorManager::setShouldWriteDaylightTimeToHealthKit(BOOL)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    unsigned char *v3 = a2;
    if (a2) {
      operator new();
    }
    uint64_t v8 = *(void **)(a1 + 6352);
    *(void *)(a1 + 6352) = 0;
    if (v8) {
      sub_100EE1CA4(a1 + 6352, v8);
    }
    uint64_t v9 = *(void *)(a1 + 6344);
    *(void *)(a1 + 6344) = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
  }
}

void sub_100EE0EC0()
{
}

void sub_100EE0F08(id a1)
{
  qword_1024194F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

void sub_100EE0F38(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100EE0F68(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000DA54C(v5, v33);
      __int16 v35 = &v34[8 * (v33 >> 2)];
      float v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    __int16 v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    BOOL v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      float v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      int v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  __int16 v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  int v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100EE1234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100EE1280(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000DA54C(v5, v33);
      __int16 v35 = &v34[8 * (v33 >> 2)];
      float v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    __int16 v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    BOOL v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      float v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      int v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  __int16 v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  int v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100EE154C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_100EE1598(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 85 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100EE1674(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x55)) + 48 * (v7 % 0x55);
  long long v9 = *a2;
  *(void *)(v8 + 16) = *((void *)a2 + 2);
  *(_OWORD *)unint64_t v8 = v9;
  *(void *)(v8 + 32) = 0;
  *(void *)(v8 + 40) = 0;
  *(void *)(v8 + 24) = 0;
  double result = sub_100D69FEC((void *)(v8 + 24), *((const void **)a2 + 3), *((void *)a2 + 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 2));
  ++a1[5];
  return result;
}

void sub_100EE1674(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x55;
  unint64_t v4 = v2 - 85;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000DA54C(v5, v33);
      __int16 v35 = &v34[8 * (v33 >> 2)];
      float v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    __int16 v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    BOOL v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      float v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      int v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  __int16 v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  int v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100EE1940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100EE198C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000DA54C(v5, v33);
      __int16 v35 = &v34[8 * (v33 >> 2)];
      float v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    __int16 v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    BOOL v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      float v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      int v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  __int16 v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  int v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100EE1C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100EE1CA4(uint64_t a1, void *a2)
{
  if (a2)
  {
    BOOL v3 = (void *)a2[6];
    if (v3)
    {
      a2[7] = v3;
      operator delete(v3);
    }
    unint64_t v4 = (void *)a2[3];
    if (v4)
    {
      a2[4] = v4;
      operator delete(v4);
    }
    operator delete();
  }
}

void sub_100EE1D10()
{
}

void sub_100EE1D54()
{
}

uint64_t sub_100EE1D7C(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  sub_100513074(a1 + 24, "SqliteDatabaseManager", 1, 1);
  sub_1000C7F88(buf);
  LOBYTE(v9) = 0;
  char v2 = sub_1000D2988(*(uint64_t *)buf, "_SqliteDatabaseUseSecureDelete", (BOOL *)&v9);
  if ((_BYTE)v9) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  if (*(void *)v11) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v11);
  }
  *(unsigned char *)(a1 + 40) = v3;
  sub_1000C7F88(buf);
  int v4 = *(unsigned __int8 *)(a1 + 40);
  LOBYTE(v9) = 0;
  if (sub_1000D2988(*(uint64_t *)buf, "_SqliteDatabaseUseIncrementalVacuum", (BOOL *)&v9)) {
    BOOL v5 = (_BYTE)v9 != 0;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (*(void *)v11) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v11);
  }
  *(unsigned char *)(a1 + 41) = v5;
  int v9 = sqlite3_config(13, 512, 125);
  if (v9)
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_102302020);
    }
    uint64_t v6 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CLMotionActivity buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint64_t v11 = 2082;
      *(void *)&_DWORD v11[2] = "";
      __int16 v12 = 1040;
      int v13 = 4;
      __int16 v14 = 2098;
      uint64_t v15 = &v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Can't set the sqlite lookaside buffers size to 64K\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_102302020);
      }
    }
    unint64_t v7 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)CLMotionActivity buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint64_t v11 = 2082;
      *(void *)&_DWORD v11[2] = "";
      __int16 v12 = 1040;
      int v13 = 4;
      __int16 v14 = 2098;
      uint64_t v15 = &v9;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Can't set the sqlite lookaside buffers size to 64K", "{\"msg%{public}.0s\":\"Can't set the sqlite lookaside buffers size to 64K\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
    }
  }
  return a1;
}

void sub_100EE200C(_Unwind_Exception *a1)
{
  sub_10051310C(v2);
  sub_100EE42A8(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100EE204C()
{
}

void sub_100EE2054(uint64_t a1, uint64_t a2)
{
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_102302020);
  }
  char v3 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289283;
    v4[1] = 0;
    __int16 v5 = 2082;
    uint64_t v6 = "";
    __int16 v7 = 2081;
    uint64_t v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"sqlite3_trace\", \"query\":%{private, location:escape_only}s}", (uint8_t *)v4, 0x1Cu);
  }
}

void sub_100EE213C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  label = dispatch_queue_get_label(0);
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_102302020);
  }
  __int16 v7 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *a1;
    int v9 = a1 + 3;
    if (*((char *)a1 + 47) < 0) {
      int v9 = (void *)*v9;
    }
    v10[0] = 68290307;
    v10[1] = 0;
    __int16 v11 = 2082;
    __int16 v12 = "";
    __int16 v13 = 2050;
    uint64_t v14 = v8;
    __int16 v15 = 2082;
    uint64_t v16 = v9;
    __int16 v17 = 2081;
    uint64_t v18 = a2;
    __int16 v19 = 2050;
    uint64_t v20 = a3;
    __int16 v21 = 2082;
    unint64_t v22 = label;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"sqlite3_profile\", \"db_ptr\":\"%{public}p\", \"db_name\":%{public, location:escape_only}s, \"query\":%{private, location:escape_only}s, \"elapsed_ns\":%{public}llu, \"queue\":%{public, location:escape_only}s}", (uint8_t *)v10, 0x44u);
  }
}

uint64_t sub_100EE2280(uint64_t a1, int *a2, const char *a3, sqlite3 **a4)
{
  if (!sub_10014DB48(a1 + 24)) {
    sub_101A9567C();
  }
  if (*((unsigned char *)a2 + 8)) {
    int v7 = 1;
  }
  else {
    int v7 = 6;
  }
  int v8 = *a2;
  if (*a2 == 3)
  {
    char v56 = 0;
    int v13 = 3145728;
  }
  else if (v8 == 2)
  {
    char v56 = 0;
    int v13 = 0x200000;
  }
  else if (v8 == 1)
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_102302020);
    }
    int v9 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v10 = a3[23] >= 0 ? (uint64_t)a3 : *(void *)a3;
      *(_DWORD *)CLMotionActivity buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v78 = 2082;
      *(void *)__int16 v79 = "";
      *(_WORD *)&v79[8] = 2082;
      *(void *)&v79[10] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Attempted to open an encrypted database\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_102302020);
      }
    }
    __int16 v11 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      if (a3[23] >= 0) {
        __int16 v12 = a3;
      }
      else {
        __int16 v12 = *(const char **)a3;
      }
      *(_DWORD *)CLMotionActivity buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v78 = 2082;
      *(void *)__int16 v79 = "";
      *(_WORD *)&v79[8] = 2082;
      *(void *)&v79[10] = v12;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Attempted to open an encrypted database", "{\"msg%{public}.0s\":\"Attempted to open an encrypted database\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    char v56 = 0;
    int v13 = 0x100000;
  }
  else
  {
    char v56 = 1;
    int v13 = 0x400000;
  }
  int flags = v7 | v13 | 0x20000;
  unsigned int v66 = 1;
  while (1)
  {
    if (a3[23] >= 0) {
      uint64_t v14 = a3;
    }
    else {
      uint64_t v14 = *(const char **)a3;
    }
    unsigned int v66 = sqlite3_open_v2(v14, a4, flags, 0);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_102302020);
    }
    __int16 v15 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
    {
      if (a3[23] >= 0) {
        uint64_t v16 = a3;
      }
      else {
        uint64_t v16 = *(const char **)a3;
      }
      *(_DWORD *)CLMotionActivity buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v78 = 2082;
      *(void *)__int16 v79 = "";
      *(_WORD *)&v79[8] = 1040;
      *(_DWORD *)&v79[10] = 4;
      *(_WORD *)&v79[14] = 2098;
      *(void *)&v79[16] = &v66;
      *(_WORD *)&v79[24] = 2082;
      *(void *)&v79[26] = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"openDatabase\", \"rc\":%{public, location:SqliteResult}.*P, \"path\":%{public, location:escape_only}s}", buf, 0x2Cu);
    }
    if (!v66)
    {
      if (*((unsigned char *)a2 + 8)) {
        goto LABEL_38;
      }
      __int16 v19 = *a4;
      uint64_t v61 = *(void *)a2;
      __int16 v62 = *((_WORD *)a2 + 4);
      if (*((char *)a2 + 39) < 0)
      {
        sub_1000DC48C(&__p, *((void **)a2 + 2), *((void *)a2 + 3));
      }
      else
      {
        long long __p = *((_OWORD *)a2 + 1);
        uint64_t v64 = *((void *)a2 + 4);
      }
      uint64_t v65 = *((void *)a2 + 5);
      sub_1006047A4(v19, &v61, *(unsigned __int8 *)(a1 + 41));
      if (SHIBYTE(v64) < 0) {
        operator delete((void *)__p);
      }
      if (!v66)
      {
LABEL_38:
        unsigned int v66 = sqlite3_exec(*a4, "pragma page_size = 4096;", 0, 0, 0);
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_102302020);
        }
        __int16 v17 = off_1024195E8;
        if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)CLMotionActivity buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v78 = 2082;
          *(void *)__int16 v79 = "";
          *(_WORD *)&v79[8] = 1040;
          *(_DWORD *)&v79[10] = 4;
          *(_WORD *)&v79[14] = 2098;
          *(void *)&v79[16] = &v66;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"pragma page_int64_t size = 4096\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
        }
        if (!v66 && !*((unsigned char *)a2 + 8))
        {
          unsigned int v66 = sqlite3_exec(*a4, "pragma journal_mode=WAL;", 0, 0, 0);
          if (qword_1024195E0 != -1) {
            dispatch_once(&qword_1024195E0, &stru_102302020);
          }
          uint64_t v18 = off_1024195E8;
          if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)CLMotionActivity buf = 68289538;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v78 = 2082;
            *(void *)__int16 v79 = "";
            *(_WORD *)&v79[8] = 1040;
            *(_DWORD *)&v79[10] = 4;
            *(_WORD *)&v79[14] = 2098;
            *(void *)&v79[16] = &v66;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"pragma journal_mode=WAL\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
          }
        }
      }
    }
    unsigned int v20 = v66;
    char v21 = v56;
    if (v66) {
      char v21 = 1;
    }
    if ((v21 & 1) == 0)
    {
      sub_10010F274((uint64_t)buf);
      int v22 = *(unsigned __int8 *)(a1 + 40);
      sub_100132EFC(&v79[6], (uint64_t)"pragma secure_delete = ", 23);
      uint64_t v23 = (void *)std::ostream::operator<<();
      sub_100132EFC(v23, (uint64_t)";", 1);
      std::stringbuf::str();
      if (v60 >= 0) {
        uint64_t v24 = v59;
      }
      else {
        uint64_t v24 = (void **)v59[0];
      }
      unsigned int v66 = sqlite3_exec(*a4, (const char *)v24, 0, 0, 0);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_102302020);
      }
      unint64_t v25 = off_1024195E8;
      if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int v67 = 68289794;
        int v68 = 0;
        __int16 v69 = 2082;
        double v70 = "";
        __int16 v71 = 1026;
        int v72 = v22;
        __int16 v73 = 1040;
        int v74 = 4;
        __int16 v75 = 2098;
        double v76 = &v66;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"pragma secure_delete\", \"useSecureDelete\":%{public}hhd, \"rc\":%{public, location:SqliteResult}.*P}", v67, 0x28u);
      }
      if (v60 < 0) {
        operator delete(v59[0]);
      }
      *(void *)CLMotionActivity buf = v54;
      *(void *)&buf[*(void *)(v54 - 24)] = v53;
      *(void *)&v79[6] = v52;
      if (v82 < 0) {
        operator delete(v81);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      std::ios::~ios();
      unsigned int v20 = v66;
    }
    if (!v20)
    {
      int v41 = *a4;
      if (*((unsigned char *)a2 + 8))
      {
        unsigned int v66 = sqlite3_exec(v41, "pragma cache_size = 5;", 0, 0, 0);
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_102302020);
        }
        uint64_t v42 = off_1024195E8;
        if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)CLMotionActivity buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v78 = 2082;
          *(void *)__int16 v79 = "";
          *(_WORD *)&v79[8] = 1040;
          *(_DWORD *)&v79[10] = 4;
          *(_WORD *)&v79[14] = 2098;
          *(void *)&v79[16] = &v66;
          int v43 = v42;
          BOOL v44 = "{\"msg%{public}.0s\":\"pragma cache_size = 5\", \"rc\":%{public, location:SqliteResult}.*P}";
LABEL_118:
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, v44, buf, 0x22u);
        }
      }
      else
      {
        unsigned int v66 = sqlite3_exec(v41, "pragma cache_size = 50;", 0, 0, 0);
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_102302020);
        }
        uint64_t v45 = off_1024195E8;
        if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)CLMotionActivity buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v78 = 2082;
          *(void *)__int16 v79 = "";
          *(_WORD *)&v79[8] = 1040;
          *(_DWORD *)&v79[10] = 4;
          *(_WORD *)&v79[14] = 2098;
          *(void *)&v79[16] = &v66;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"pragma cache_int64_t size = 50\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
        }
        if (v66)
        {
LABEL_124:
          char v40 = 0;
          goto LABEL_125;
        }
        unsigned int v66 = sqlite3_exec(*a4, "pragma cache_spill = 500;", 0, 0, 0);
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_102302020);
        }
        int v51 = off_1024195E8;
        if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)CLMotionActivity buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v78 = 2082;
          *(void *)__int16 v79 = "";
          *(_WORD *)&v79[8] = 1040;
          *(_DWORD *)&v79[10] = 4;
          *(_WORD *)&v79[14] = 2098;
          *(void *)&v79[16] = &v66;
          int v43 = v51;
          BOOL v44 = "{\"msg%{public}.0s\":\"pragma cache_spill = 500\", \"rc\":%{public, location:SqliteResult}.*P}";
          goto LABEL_118;
        }
      }
    }
    if (v66) {
      goto LABEL_124;
    }
    unsigned int v66 = sqlite3_exec(*a4, "pragma recursive_triggers = true;", 0, 0, 0);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_102302020);
    }
    uint64_t v26 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)CLMotionActivity buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v78 = 2082;
      *(void *)__int16 v79 = "";
      *(_WORD *)&v79[8] = 1040;
      *(_DWORD *)&v79[10] = 4;
      *(_WORD *)&v79[14] = 2098;
      *(void *)&v79[16] = &v66;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"pragma recursive_triggers = true\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
    }
    if (v66) {
      goto LABEL_124;
    }
    sqlite3_limit(*a4, 10, 10);
    int v27 = sqlite3_limit(*a4, 10, -1);
    if (v27 != 10)
    {
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_102302020);
      }
      uint64_t v28 = off_1024195E8;
      if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)CLMotionActivity buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v78 = 2082;
        *(void *)__int16 v79 = "";
        *(_WORD *)&v79[8] = 1026;
        *(_DWORD *)&v79[10] = 10;
        *(_WORD *)&v79[14] = 1026;
        *(_DWORD *)&v79[16] = v27;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Trigger depth\", \"expected\":%{public}d, \"actual\":%{public}d}", buf, 0x1Eu);
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_102302020);
        }
      }
      int v29 = off_1024195E8;
      if (os_signpost_enabled((os_log_t)off_1024195E8))
      {
        *(_DWORD *)CLMotionActivity buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v78 = 2082;
        *(void *)__int16 v79 = "";
        *(_WORD *)&v79[8] = 1026;
        *(_DWORD *)&v79[10] = 10;
        *(_WORD *)&v79[14] = 1026;
        *(_DWORD *)&v79[16] = v27;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Trigger depth", "{\"msg%{public}.0s\":\"Trigger depth\", \"expected\":%{public}d, \"actual\":%{public}d}", buf, 0x1Eu);
      }
    }
    if (v66) {
      goto LABEL_124;
    }
    unsigned int v66 = sqlite3_extended_result_codes(*a4, 1);
    if (v66)
    {
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_102302020);
      }
      long long v30 = off_1024195E8;
      if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)CLMotionActivity buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v78 = 2082;
        *(void *)__int16 v79 = "";
        *(_WORD *)&v79[8] = 1040;
        *(_DWORD *)&v79[10] = 4;
        *(_WORD *)&v79[14] = 2098;
        *(void *)&v79[16] = &v66;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Failed to enable extended result codes\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_102302020);
        }
      }
      long long v31 = off_1024195E8;
      if (os_signpost_enabled((os_log_t)off_1024195E8))
      {
        *(_DWORD *)CLMotionActivity buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v78 = 2082;
        *(void *)__int16 v79 = "";
        *(_WORD *)&v79[8] = 1040;
        *(_DWORD *)&v79[10] = 4;
        *(_WORD *)&v79[14] = 2098;
        *(void *)&v79[16] = &v66;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v31, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to enable extended result codes", "{\"msg%{public}.0s\":\"Failed to enable extended result codes\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
      }
      if (v66) {
        goto LABEL_124;
      }
    }
    *(_DWORD *)int v67 = -1;
    LODWORD(v59[0]) = 0;
    LODWORD(v59[0]) = sqlite3_file_control(*a4, "main", 4, v67);
    int v32 = sqlite3_db_readonly(*a4, "main");
    if (*((unsigned char *)a2 + 8)) {
      break;
    }
    int v33 = v32;
    if (v32 < 1) {
      break;
    }
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_102302020);
    }
    int v34 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      int v35 = *((unsigned __int8 *)a2 + 8);
      *(_DWORD *)CLMotionActivity buf = 68290306;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v78 = 2082;
      *(void *)__int16 v79 = "";
      *(_WORD *)&v79[8] = 1026;
      *(_DWORD *)&v79[10] = v35;
      *(_WORD *)&v79[14] = 1026;
      *(_DWORD *)&v79[16] = v33;
      *(_WORD *)&v79[20] = 1026;
      *(_DWORD *)&v79[22] = *(_DWORD *)v67;
      *(_WORD *)&v79[26] = 1040;
      *(_DWORD *)&v79[28] = 4;
      *(_WORD *)&v79[32] = 2098;
      double v80 = v59;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Database opened with read/write access was found to be read-only.\", \"properties.readOnly\":%{public}d, \"sqlite3_db_readonly\":%{public}d, \"last POSIX errNo\":%{public}d, \"File control rc\":%{public, location:SqliteResult}.*P}", buf, 0x34u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_102302020);
      }
    }
    uint64_t v36 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      int v37 = *((unsigned __int8 *)a2 + 8);
      *(_DWORD *)CLMotionActivity buf = 68290306;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v78 = 2082;
      *(void *)__int16 v79 = "";
      *(_WORD *)&v79[8] = 1026;
      *(_DWORD *)&v79[10] = v37;
      *(_WORD *)&v79[14] = 1026;
      *(_DWORD *)&v79[16] = v33;
      *(_WORD *)&v79[20] = 1026;
      *(_DWORD *)&v79[22] = *(_DWORD *)v67;
      *(_WORD *)&v79[26] = 1040;
      *(_DWORD *)&v79[28] = 4;
      *(_WORD *)&v79[32] = 2098;
      double v80 = v59;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v36, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Database opened with read/write access was found to be read-only.", "{\"msg%{public}.0s\":\"Database opened with read/write access was found to be read-only.\", \"properties.readOnly\":%{public}d, \"sqlite3_db_readonly\":%{public}d, \"last POSIX errNo\":%{public}d, \"File control rc\":%{public, location:SqliteResult}.*P}", buf, 0x34u);
    }
    int v58 = 0;
    int v58 = sqlite3_close(*a4);
    if (v58)
    {
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_102302020);
      }
      int v38 = off_1024195E8;
      if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)CLMotionActivity buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v78 = 2082;
        *(void *)__int16 v79 = "";
        *(_WORD *)&v79[8] = 1040;
        *(_DWORD *)&v79[10] = 4;
        *(_WORD *)&v79[14] = 2098;
        *(void *)&v79[16] = &v58;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Failed to close partially opened database\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_102302020);
        }
      }
      uint64_t v39 = off_1024195E8;
      if (os_signpost_enabled((os_log_t)off_1024195E8))
      {
        *(_DWORD *)CLMotionActivity buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v78 = 2082;
        *(void *)__int16 v79 = "";
        *(_WORD *)&v79[8] = 1040;
        *(_DWORD *)&v79[10] = 4;
        *(_WORD *)&v79[14] = 2098;
        *(void *)&v79[16] = &v58;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v39, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to close partially opened database", "{\"msg%{public}.0s\":\"Failed to close partially opened database\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
      }
    }
    *a4 = 0;
    sub_100EE35F0();
    if (v66)
    {
      char v40 = 1;
LABEL_125:
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_102302020);
      }
      unint64_t v46 = off_1024195E8;
      if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
      {
        int v47 = *__error();
        *(_DWORD *)CLMotionActivity buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v78 = 2082;
        *(void *)__int16 v79 = "";
        *(_WORD *)&v79[8] = 1026;
        *(_DWORD *)&v79[10] = v47;
        *(_WORD *)&v79[14] = 1040;
        *(_DWORD *)&v79[16] = 4;
        *(_WORD *)&v79[20] = 2098;
        *(void *)&v79[22] = &v66;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"failed to obtain database handle\", \"errno\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x28u);
      }
      *(_DWORD *)int v67 = 0;
      *(_DWORD *)int v67 = sqlite3_close(*a4);
      if (*(_DWORD *)v67)
      {
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_102302020);
        }
        int v48 = off_1024195E8;
        if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)CLMotionActivity buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v78 = 2082;
          *(void *)__int16 v79 = "";
          *(_WORD *)&v79[8] = 1040;
          *(_DWORD *)&v79[10] = 4;
          *(_WORD *)&v79[14] = 2098;
          *(void *)&v79[16] = v67;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Failed to close partially opened database\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
          if (qword_1024195E0 != -1) {
            dispatch_once(&qword_1024195E0, &stru_102302020);
          }
        }
        uint64_t v49 = off_1024195E8;
        if (os_signpost_enabled((os_log_t)off_1024195E8))
        {
          *(_DWORD *)CLMotionActivity buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v78 = 2082;
          *(void *)__int16 v79 = "";
          *(_WORD *)&v79[8] = 1040;
          *(_DWORD *)&v79[10] = 4;
          *(_WORD *)&v79[14] = 2098;
          *(void *)&v79[16] = v67;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v49, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to close partially opened database", "{\"msg%{public}.0s\":\"Failed to close partially opened database\", \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x22u);
        }
      }
      *a4 = 0;
      uint64_t result = v66;
      if (v66 == 10 || v66 == 13)
      {
        sub_100EE35F0();
      }
      else if ((v40 & 1) == 0)
      {
        return result;
      }
    }
  }
  char v40 = 0;
  if (v66) {
    goto LABEL_125;
  }
  return 0;
}

void sub_100EE35A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EE35F0()
{
  return sleep(5u);
}

uint64_t sub_100EE360C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1005F7250((gid_t *)a2, &v13);
  uint64_t v8 = *(void *)a2;
  __int16 v9 = *(_WORD *)(a2 + 8);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_1000DC48C(&__p, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long __p = *(_OWORD *)(a2 + 16);
    uint64_t v11 = *(void *)(a2 + 32);
  }
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v6 = sub_100EE3708(a1, &v8, (const void **)&v13.__r_.__value_.__l.__data_, a3);
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_100EE36D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EE3708(uint64_t a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v33 = a1 + 24;
  (*(void (**)(void))(v8 + 16))();
  __int16 v35 = 256;
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_102302020);
  }
  __int16 v9 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = *a3;
    }
    *(_DWORD *)CLMotionActivity buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    v37[0] = 2082;
    *(void *)&v37[1] = "";
    __int16 v38 = 2082;
    uint64_t v39 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Opening database\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v11 = sub_10012FFE0(a1, a3);
  uint64_t v12 = a1 + 8;
  if (a1 + 8 != v11)
  {
    uint64_t v13 = 0;
    goto LABEL_29;
  }
  memset(&v32, 0, sizeof(v32));
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  int v31 = 0;
  std::string::operator=(&v32, (const std::string *)a3);
  int v27 = 0;
  uint64_t v22 = *a2;
  __int16 v23 = *((_WORD *)a2 + 4);
  if (*((char *)a2 + 39) < 0)
  {
    sub_1000DC48C(&__p, (void *)a2[2], a2[3]);
  }
  else
  {
    long long __p = *((_OWORD *)a2 + 1);
    uint64_t v25 = a2[4];
  }
  uint64_t v26 = a2[5];
  uint64_t v14 = sub_100EE2280(a1, (int *)&v22, (const char *)a3, &v27);
  uint64_t v13 = v14;
  if (SHIBYTE(v25) < 0)
  {
    operator delete((void *)__p);
    if (v13) {
      goto LABEL_15;
    }
LABEL_24:
    operator new();
  }
  if (!v14) {
    goto LABEL_24;
  }
LABEL_15:
  if (v27)
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_102302020);
    }
    __int16 v15 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)CLMotionActivity buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      v37[0] = 2082;
      *(void *)&v37[1] = "";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"openDatabase failed to open a connection and then to clean up after itself\"}", buf, 0x12u);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_102302020);
      }
    }
    uint64_t v16 = off_1024195E8;
    if (os_signpost_enabled((os_log_t)off_1024195E8))
    {
      *(_DWORD *)CLMotionActivity buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      v37[0] = 2082;
      *(void *)&v37[1] = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "openDatabase failed to open a connection and then to clean up after itself", "{\"msg%{public}.0s\":\"openDatabase failed to open a connection and then to clean up after itself\"}", buf, 0x12u);
    }
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(v28);
  }
LABEL_29:
  if (v11 != v12)
  {
    long long v17 = *(_OWORD *)(v11 + 56);
    *(void *)(a4 + 16) = *(void *)(v11 + 72);
    *(_OWORD *)a4 = v17;
    std::string::operator=((std::string *)(a4 + 24), (const std::string *)(v11 + 80));
    ++*(_DWORD *)(v11 + 104);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_102302020);
    }
    uint64_t v18 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a3 + 23) >= 0) {
        __int16 v19 = a3;
      }
      else {
        __int16 v19 = *a3;
      }
      int v20 = *(_DWORD *)(v11 + 104);
      *(_DWORD *)CLMotionActivity buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      v37[0] = 2082;
      *(void *)&v37[1] = "";
      __int16 v38 = 2082;
      uint64_t v39 = v19;
      __int16 v40 = 1026;
      int v41 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Reference count increased\", \"path\":%{public, location:escape_only}s, \"referenceCount\":%{public}d}", buf, 0x22u);
    }
  }
  if (HIBYTE(v35))
  {
    if ((_BYTE)v35) {
      pthread_mutex_unlock(v34);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v33 + 24))(v33);
    }
  }
  return v13;
}

void sub_100EE3CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,std::__shared_weak_count *a33)
{
  if (a33) {
    sub_1000DB0A0(a33);
  }
  sub_100EE3DD8((uint64_t)&a18);
  sub_1019DB560((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_100EE3D84(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100EE3DD8(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void sub_100EE3E1C(uint64_t a1, sqlite3 *a2)
{
  uint64_t v14 = a1 + 24;
  (*(void (**)(void))(*(void *)(a1 + 24) + 16))();
  int v4 = *(uint64_t **)a1;
  if (*(void *)a1 != a1 + 8)
  {
    while ((sqlite3 *)v4[7] != a2)
    {
      __int16 v5 = (uint64_t *)v4[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          __int16 v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (uint64_t *)v4[2];
          BOOL v7 = *v6 == (void)v4;
          int v4 = v6;
        }
        while (!v7);
      }
      int v4 = v6;
      if (v6 == (uint64_t *)(a1 + 8)) {
        goto LABEL_28;
      }
    }
    --*((_DWORD *)v4 + 26);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_102302020);
    }
    uint64_t v8 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_INFO))
    {
      __int16 v9 = v4 + 14;
      if (*((char *)v4 + 135) < 0) {
        __int16 v9 = (void *)*v9;
      }
      int v10 = *((_DWORD *)v4 + 26);
      *(_DWORD *)CLMotionActivity buf = 68289538;
      int v16 = 0;
      __int16 v17 = 2082;
      uint64_t v18 = "";
      __int16 v19 = 2082;
      int v20 = v9;
      __int16 v21 = 1026;
      int v22 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Reference count decreased\", \"path\":%{public, location:escape_only}s, \"referenceCount\":%{public}d}", buf, 0x22u);
    }
    if (!*((_DWORD *)v4 + 26))
    {
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_102302020);
      }
      uint64_t v11 = off_1024195E8;
      if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = v4 + 14;
        if (*((char *)v4 + 135) < 0) {
          uint64_t v12 = (void *)*v12;
        }
        *(_DWORD *)CLMotionActivity buf = 68289282;
        int v16 = 0;
        __int16 v17 = 2082;
        uint64_t v18 = "";
        __int16 v19 = 2082;
        int v20 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Destroying database\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      sqlite3_close(a2);
      uint64_t v13 = v4[8];
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      if (v4[9]) {
        operator delete();
      }
      sub_1000F0A30((uint64_t **)a1, v4);
      sub_100EE4304((uint64_t)(v4 + 4));
      operator delete(v4);
    }
  }
LABEL_28:
  (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
}

void sub_100EE411C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100EE4144(id a1)
{
  off_1024195E8 = os_log_create("com.apple.locationd.Utility", "Database");
}

void sub_100EE4174(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

char *sub_100EE41A4(char *__dst, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__uuid_t dst = v5;
  }
  long long v6 = *a3;
  *((void *)__dst + 5) = *((void *)a3 + 2);
  *(_OWORD *)(__dst + 24) = v6;
  if (*((char *)a3 + 47) < 0)
  {
    sub_1000DC48C(__dst + 48, *((void **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v7 = *(long long *)((char *)a3 + 24);
    *((void *)__dst + 8) = *((void *)a3 + 5);
    *((_OWORD *)__dst + 3) = v7;
  }
  *((_DWORD *)__dst + 18) = *((_DWORD *)a3 + 12);
  uint64_t v8 = __dst + 80;
  if (*((char *)a3 + 79) < 0)
  {
    sub_1000DC48C(v8, *((void **)a3 + 7), *((void *)a3 + 8));
  }
  else
  {
    long long v9 = *(long long *)((char *)a3 + 56);
    *((void *)__dst + 12) = *((void *)a3 + 9);
    *(_OWORD *)uint64_t v8 = v9;
  }
  return __dst;
}

void sub_100EE4274(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EE42A8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100EE42A8(a1, *a2);
    sub_100EE42A8(a1, a2[1]);
    sub_100EE4304((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100EE4304(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

_OWORD *sub_100EE436C(uint64_t **a1, const void **a2, uint64_t a3)
{
  long long v5 = (void **)sub_1001070AC((uint64_t)a1, &v12, a2);
  long long v6 = *v5;
  if (!*v5)
  {
    long long v7 = (uint64_t **)v5;
    long long v6 = operator new(0x88uLL);
    v10[1] = a1 + 1;
    _DWORD v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *((void *)v6 + 9) = *(void *)(a3 + 40);
    *((void *)v6 + 12) = *(void *)(a3 + 64);
    void v6[5] = *(_OWORD *)(a3 + 48);
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 48) = 0;
    *((_DWORD *)v6 + 26) = *(_DWORD *)(a3 + 72);
    long long v8 = *(_OWORD *)(a3 + 80);
    *((void *)v6 + 16) = *(void *)(a3 + 96);
    void v6[7] = v8;
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 96) = 0;
    char v11 = 1;
    sub_1000EDF90(a1, v12, v7, (uint64_t *)v6);
    v10[0] = 0;
    sub_100EE4470((uint64_t)v10, 0);
  }
  return v6;
}

void sub_100EE4470(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100EE4304((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_100EE44C8(void *a1)
{
  *a1 = off_102302070;
  operator new();
}

void sub_100EE4560()
{
}

uint64_t sub_100EE45C4(uint64_t a1, uint64_t a2)
{
  return sub_100EE45CC(a2);
}

uint64_t sub_100EE45CC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 352)) {
    return CLMotionActivity::isTypeRunning();
  }
  double v1 = *(double *)(a1 + 448);
  double v2 = fmax(((float)(*(float *)(a1 + 1360) * 39.37) + -59.0) * 0.0375 + 4.2, 4.2);
  double v3 = 2.23693991 / v2;
  BOOL v4 = v2 <= 4.8;
  double v5 = 0.466029147;
  if (v4) {
    double v5 = v3;
  }
  return v5 > v1 && v1 > 0.0;
}

double sub_100EE4650(double a1)
{
  float v1 = a1 * 39.3700981;
  double result = fmax((v1 + -59.0) * 0.0375 + 4.2, 4.2);
  if (result > 4.8) {
    return 4.8;
  }
  return result;
}

void sub_100EE46A0(void *a1)
{
  sub_100528AE4(a1);

  operator delete();
}

void sub_100EE46D8(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100EE4708(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100EE4770(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EE4788(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100EE47B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100EE47FC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100EE4864(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A69258(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EE487C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100EE48AC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *sub_100EE48F0(void *result, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  *uint64_t result = *a2;
  result[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a3[1];
  result[2] = *a3;
  result[3] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

BOOL sub_100EE4924(void *a1)
{
  int v28 = 0;
  long long v29 = 0u;
  int v31 = 0;
  long long v30 = 0u;
  int v2 = (*(uint64_t (**)(void, int *))(*(void *)*a1 + 32))(*a1, &v28);
  if (v2 != 109)
  {
    double v3 = *(double *)&v29;
    double Current = CFAbsoluteTimeGetCurrent();
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    long long __p = 0;
    __int16 v23 = 0;
    uint64_t v24 = 0;
    uint64_t v5 = (*(uint64_t (**)(void, void **, double, double))(*(void *)a1[2] + 24))(a1[2], &v25, v3 + 5.0, Current);
    if (v25 != v26)
    {
      sub_100EE4F3C(v5, (uint64_t *)&v25, (uint64_t)&__p);
      long long v6 = (char *)__p;
      if (__p == v23)
      {
LABEL_28:
        if (v6)
        {
          __int16 v23 = v6;
          operator delete(v6);
        }
        if (v25)
        {
          uint64_t v26 = v25;
          operator delete(v25);
        }
        return v2 != 109;
      }
      if (Current - *((double *)v23 - 5) < 30.0)
      {
        v23 -= 48;
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1023021E8);
        }
        long long v7 = qword_1024191F8;
        if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v8 = *((void *)v23 - 5);
          *(_DWORD *)CLMotionActivity buf = 134349312;
          uint64_t v37 = v8;
          __int16 v38 = 2050;
          double v39 = Current;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "[SmoothedGaitMetricsProcessor]: Skipping last entry since we may not yet have all gait metrics entries, startTime : %{public}f, now : %{public}f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191F0 != -1) {
            dispatch_once(&qword_1024191F0, &stru_1023021E8);
          }
          uint64_t v20 = *((void *)v23 - 5);
          int v32 = 134349312;
          uint64_t v33 = v20;
          __int16 v34 = 2050;
          double v35 = Current;
          __int16 v21 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMobility::SmoothedGaitMetricsProcessor::processGaitMetrics()", "%s\n", v21);
          if (v21 != (char *)buf) {
            free(v21);
          }
        }
      }
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1023021E8);
      }
      long long v9 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v10 = *((void *)__p + 1);
        double v11 = *((double *)v23 - 5);
        *(_DWORD *)CLMotionActivity buf = 134349312;
        uint64_t v37 = v10;
        __int16 v38 = 2050;
        double v39 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "[SmoothedGaitMetricsProcessor]: Processed smoothed gait matrics, first entry startTime : %{public}f, last entry startTime : %{public}f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1023021E8);
        }
        uint64_t v17 = *((void *)__p + 1);
        double v18 = *((double *)v23 - 5);
        int v32 = 134349312;
        uint64_t v33 = v17;
        __int16 v34 = 2050;
        double v35 = v18;
        __int16 v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMobility::SmoothedGaitMetricsProcessor::processGaitMetrics()", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      uint64_t v12 = (char *)__p;
      uint64_t v13 = v23;
      while (v12 != v13)
      {
        (*(void (**)(void, char *))(*(void *)*a1 + 16))(*a1, v12);
        v12 += 48;
      }
    }
    long long v6 = (char *)__p;
    goto LABEL_28;
  }
  if (qword_1024191F0 != -1) {
    dispatch_once(&qword_1024191F0, &stru_1023021E8);
  }
  uint64_t v14 = qword_1024191F8;
  if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)CLMotionActivity buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[SmoothedGaitMetricsProcessor]: Could not access db", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1023021E8);
    }
    LOWORD(v25) = 0;
    __int16 v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMobility::SmoothedGaitMetricsProcessor::processGaitMetrics()", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  return v2 != 109;
}

void sub_100EE4EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EE4F3C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    float32x4_t v7 = 0uLL;
    float v8 = 0.0;
    float v9 = 0.0;
    do
    {
      unsigned int v10 = 0;
      double v11 = *(double *)(v6 + 8);
      double v12 = v11 + 5.0;
      while (*(double *)(v6 + 8) < v12)
      {
        float v13 = *(float *)(v6 + 48);
        float v9 = v9 + v13;
        float32x4_t v14 = *(float32x4_t *)(v6 + 24);
        float v8 = vmlas_n_f32(v8, v13, v14.f32[0]);
        float32x4_t v7 = vaddq_f32(v7, v14);
        ++v10;
        v6 += 96;
        if (v6 == v5)
        {
          uint64_t v6 = v5;
          break;
        }
      }
      if (v10)
      {
        *(float *)&double v12 = (float)v10;
        float v15 = v9 / (float)v10;
        float v16 = v8 / (float)v10;
        float32x4_t v17 = vdivq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v12, 0));
        __int16 v19 = *(_DWORD **)(a3 + 8);
        unint64_t v18 = *(void *)(a3 + 16);
        if ((unint64_t)v19 >= v18)
        {
          __int16 v21 = *(_DWORD **)a3;
          unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v19 - *(void *)a3) >> 4);
          unint64_t v23 = v22 + 1;
          if (v22 + 1 > 0x555555555555555) {
            sub_1001D7FD4();
          }
          unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (void)v21) >> 4);
          if (2 * v24 > v23) {
            unint64_t v23 = 2 * v24;
          }
          if (v24 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v25 = 0x555555555555555;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25)
          {
            float32x4_t v36 = v17;
            uint64_t v26 = (char *)sub_10014F86C(a3 + 16, v25);
            float32x4_t v17 = v36;
            uint64_t v27 = v26;
            __int16 v21 = *(_DWORD **)a3;
            __int16 v19 = *(_DWORD **)(a3 + 8);
          }
          else
          {
            uint64_t v27 = 0;
          }
          int v28 = &v27[48 * v22];
          *(_DWORD *)int v28 = 0;
          *((double *)v28 + 1) = v11;
          *((float32x4_t *)v28 + 1) = v17;
          *((float *)v28 + 8) = v16;
          *((float *)v28 + 9) = v15;
          *((_DWORD *)v28 + 10) = v10;
          long long v29 = v28;
          if (v19 != v21)
          {
            do
            {
              long long v30 = *((_OWORD *)v19 - 3);
              long long v31 = *((_OWORD *)v19 - 2);
              *(_OWORD *)(v29 - 20) = *(_OWORD *)(v19 - 5);
              *((_OWORD *)v29 - 3) = v30;
              *((_OWORD *)v29 - 2) = v31;
              v29 -= 48;
              v19 -= 12;
            }
            while (v19 != v21);
            __int16 v21 = *(_DWORD **)a3;
          }
          uint64_t v20 = v28 + 48;
          *(void *)a3 = v29;
          *(void *)(a3 + 8) = v28 + 48;
          *(void *)(a3 + 16) = &v27[48 * v25];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *__int16 v19 = 0;
          *((double *)v19 + 1) = v11;
          *((float32x4_t *)v19 + 1) = v17;
          *((float *)v19 + 8) = v16;
          *((float *)v19 + 9) = v15;
          uint64_t v20 = v19 + 12;
          v19[10] = v10;
        }
        *(void *)(a3 + 8) = v20;
        uint64_t v5 = a2[1];
        float32x4_t v7 = 0uLL;
        float v9 = 0.0;
        float v8 = 0.0;
      }
    }
    while (v6 != v5);
  }
  if (qword_1024191F0 != -1) {
    dispatch_once(&qword_1024191F0, &stru_1023021E8);
  }
  int v32 = qword_1024191F8;
  if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5);
    unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
    *(_DWORD *)CLMotionActivity buf = 134349312;
    unint64_t v38 = v33;
    __int16 v39 = 2050;
    unint64_t v40 = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "[SmoothedGaitMetricsProcessor]: Processed %{public}ld gait metrics entries, resulting in %{public}ld smoothed gait metrics entries", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1023021E8);
    }
    double v35 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::SmoothedGaitMetricsProcessor::calculateSmoothedGaitMetrics(const std::vector<GaitMetrics> &, std::vector<SmoothedGaitMetrics> &)", "%s\n", v35);
    if (v35 != (char *)buf) {
      free(v35);
    }
  }
}

void sub_100EE5318(id a1)
{
  qword_1024191F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

void sub_100EE5348(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  *(_DWORD *)(a5 + 48) = 0;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  *(double *)(a5 + 16) = a6;
  float64x2_t v11 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
  if (vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*a2, v11), (int32x4_t)vceqq_f64(a2[1], v11)))))
  {
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102302228);
    }
    double v12 = qword_102418FA8;
    if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)CLMotionActivity buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Rejection: SteadinessModelGaitBaseline missing required feature inputs", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_102302228);
      }
      long long v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "SteadinessModel::Result CLMobility::SteadinessModelGaitBaseline::runSteadinessModel(CFAbsoluteTime, const SteadinessModelGaitBaseline_Generated::Features &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const", "%s\n", v31);
      if (v31 != (char *)buf) {
        free(v31);
      }
    }
    *(_DWORD *)(a5 + 48) = 8;
    int v13 = 12;
  }
  else
  {
    int v13 = 4;
  }
  if (!*(unsigned char *)(a4 + 57)) {
    *(_DWORD *)(a5 + 48) = v13;
  }
  sub_100708114(a1, a5, a3);
  double v14 = sub_100A1CD40(a2);
  *(double *)(a5 + 24) = v14;
  *(double *)(a5 + 32) = sub_100A1CDC4(v14);
  *(void *)(a5 + 40) = v15;
  if (qword_102418FA0 != -1) {
    dispatch_once(&qword_102418FA0, &stru_102302228);
  }
  float v16 = qword_102418FA8;
  if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEFAULT))
  {
    float64_t v17 = *(double *)(a5 + 32);
    float64_t v18 = *(double *)(a5 + 40);
    float64_t v19 = *(double *)(a5 + 16);
    float64_t v20 = *(double *)(a5 + 24);
    int v21 = *(_DWORD *)(a5 + 48);
    int v22 = *(_DWORD *)(a5 + 8);
    int v23 = *(_DWORD *)(a5 + 12);
    *(_DWORD *)CLMotionActivity buf = 134350593;
    float64_t v33 = v19;
    __int16 v34 = 2050;
    float64_t v35 = v17;
    __int16 v36 = 2050;
    float64_t v37 = v18;
    __int16 v38 = 2050;
    float64_t v39 = v20;
    __int16 v40 = 1026;
    int v41 = v21;
    __int16 v42 = 1025;
    int v43 = v22;
    __int16 v44 = 1025;
    int v45 = v23;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "CLMobility::SteadinessModelGaitBaseline::Result,hkEndTime,%{public}.2f,likelihoodOK,%{public}.2f,likelihoodNotOK,%{public}.2f,rawSteadiness,%{public}.2f,rejectionStatus,%{public}d,numValidBouts7Days,%{private}d,numValidBouts28Days,%{private}d", buf, 0x3Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102302228);
    }
    long long v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "SteadinessModel::Result CLMobility::SteadinessModelGaitBaseline::runSteadinessModel(CFAbsoluteTime, const SteadinessModelGaitBaseline_Generated::Features &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const", "%s\n", v29);
    if (v29 != (char *)buf) {
      free(v29);
    }
  }
  if (qword_102418FA0 != -1) {
    dispatch_once(&qword_102418FA0, &stru_102302228);
  }
  unint64_t v24 = qword_102418FA8;
  if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEFAULT))
  {
    float64_t v26 = a2[1].f64[0];
    float64_t v25 = a2[1].f64[1];
    float64_t v28 = a2->f64[0];
    float64_t v27 = a2->f64[1];
    *(_DWORD *)CLMotionActivity buf = 134284289;
    float64_t v33 = v25;
    __int16 v34 = 2049;
    float64_t v35 = v27;
    __int16 v36 = 2049;
    float64_t v37 = v26;
    __int16 v38 = 2049;
    float64_t v39 = v28;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "CLMobility::SteadinessModelGaitBaseline::Features,balancePrior,%{private}.3f,intermediateBoutsStepLengthQ95Heightnorm,%{private}.3f,intermediateBoutsWalkingSpeedQ95Sqrtheightnorm,%{private}.3f,height,%{private}.2f", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102302228);
    }
    long long v30 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "SteadinessModel::Result CLMobility::SteadinessModelGaitBaseline::runSteadinessModel(CFAbsoluteTime, const SteadinessModelGaitBaseline_Generated::Features &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const", "%s\n", v30);
    if (v30 != (char *)buf) {
      free(v30);
    }
  }
}

double sub_100EE58DC(double a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  int v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  *(void *)CLMotionActivity buf = &v48;
  if (v6 == v7)
  {
    long long __p = 0;
    unint64_t v46 = 0;
    int v47 = 0;
    __int16 v42 = 0;
    int v43 = 0;
    __int16 v44 = 0;
  }
  else
  {
    double v8 = a1 + -2419200.0;
    do
    {
      double v9 = *(double *)(v6 + 8);
      if (v9 < a1 && v9 >= v8) {
        sub_100708E0C((void ***)buf, (_OWORD *)v6);
      }
      v6 += 224;
    }
    while (v6 != v7);
    float64x2_t v11 = (double *)v48;
    double v12 = v49;
    long long __p = 0;
    unint64_t v46 = 0;
    int v47 = 0;
    __int16 v42 = 0;
    int v43 = 0;
    __int16 v44 = 0;
    if (v48 != v49)
    {
      do
      {
        double v13 = v11[2] - v11[1];
        if (v13 <= 600.0 && v13 > 60.0)
        {
          int v15 = *((_DWORD *)v11 + 13);
          if (v15) {
            int v16 = 42;
          }
          else {
            int v16 = -1;
          }
          if ((v16 & v11[24]) == 0)
          {
            float64_t v17 = v46;
            if (v46 >= v47)
            {
              float64_t v19 = (char *)__p;
              uint64_t v20 = (v46 - (unsigned char *)__p) >> 3;
              unint64_t v21 = v20 + 1;
              if ((unint64_t)(v20 + 1) >> 61) {
                goto LABEL_75;
              }
              uint64_t v22 = v47 - (unsigned char *)__p;
              if ((v47 - (unsigned char *)__p) >> 2 > v21) {
                unint64_t v21 = v22 >> 2;
              }
              if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v23 = v21;
              }
              if (v23)
              {
                unint64_t v24 = (char *)sub_1000DA54C((uint64_t)&v47, v23);
                float64_t v19 = (char *)__p;
                float64_t v17 = v46;
              }
              else
              {
                unint64_t v24 = 0;
              }
              float64_t v25 = &v24[8 * v20];
              *(double *)float64_t v25 = v11[14];
              float64_t v18 = v25 + 8;
              while (v17 != v19)
              {
                uint64_t v26 = *((void *)v17 - 1);
                v17 -= 8;
                *((void *)v25 - 1) = v26;
                v25 -= 8;
              }
              long long __p = v25;
              unint64_t v46 = v18;
              int v47 = &v24[8 * v23];
              if (v19) {
                operator delete(v19);
              }
            }
            else
            {
              *(double *)unint64_t v46 = v11[14];
              float64_t v18 = v17 + 8;
            }
            unint64_t v46 = v18;
            int v15 = *((_DWORD *)v11 + 13);
          }
          if (v15) {
            int v27 = 42;
          }
          else {
            int v27 = -1;
          }
          if ((v27 & v11[25]) == 0)
          {
            float64_t v28 = v43;
            if (v43 >= v44)
            {
              long long v30 = (char *)v42;
              uint64_t v31 = (v43 - (unsigned char *)v42) >> 3;
              unint64_t v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 61) {
LABEL_75:
              }
                sub_1001D7FD4();
              uint64_t v33 = v44 - (unsigned char *)v42;
              if ((v44 - (unsigned char *)v42) >> 2 > v32) {
                unint64_t v32 = v33 >> 2;
              }
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v34 = v32;
              }
              if (v34)
              {
                float64_t v35 = (char *)sub_1000DA54C((uint64_t)&v44, v34);
                long long v30 = (char *)v42;
                float64_t v28 = v43;
              }
              else
              {
                float64_t v35 = 0;
              }
              __int16 v36 = &v35[8 * v31];
              *(double *)__int16 v36 = v11[16];
              long long v29 = v36 + 8;
              while (v28 != v30)
              {
                uint64_t v37 = *((void *)v28 - 1);
                v28 -= 8;
                *((void *)v36 - 1) = v37;
                v36 -= 8;
              }
              __int16 v42 = v36;
              int v43 = v29;
              __int16 v44 = &v35[8 * v34];
              if (v30) {
                operator delete(v30);
              }
            }
            else
            {
              *(double *)int v43 = v11[16];
              long long v29 = v28 + 8;
            }
            int v43 = v29;
          }
        }
        v11 += 28;
      }
      while (v11 != v12);
    }
  }
  if (qword_102418FA0 != -1) {
    dispatch_once(&qword_102418FA0, &stru_102302228);
  }
  __int16 v38 = qword_102418FA8;
  if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)CLMotionActivity buf = 134349824;
    *(double *)&uint8_t buf[4] = a1;
    __int16 v60 = 2050;
    uint64_t v61 = 0x6DB6DB6DB6DB6DB7 * (((char *)v49 - (unsigned char *)v48) >> 5);
    __int16 v62 = 2050;
    uint64_t v63 = (v46 - (unsigned char *)__p) >> 3;
    __int16 v64 = 2050;
    uint64_t v65 = (v43 - (unsigned char *)v42) >> 3;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "SteadinessModelGaitBaseline::extractFeatures,classificationTime,%{public}.2f,numBouts,%{public}lu,numIntermediateWalkingSpeeds,%{public}lu,numIntermediateStepLengths,%{public}lu", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_102302228);
    }
    int v51 = 134349824;
    double v52 = a1;
    __int16 v53 = 2050;
    uint64_t v54 = 0x6DB6DB6DB6DB6DB7 * (((char *)v49 - (unsigned char *)v48) >> 5);
    __int16 v55 = 2050;
    uint64_t v56 = (v46 - (unsigned char *)__p) >> 3;
    __int16 v57 = 2050;
    uint64_t v58 = (v43 - (unsigned char *)v42) >> 3;
    int v41 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "Features CLMobility::SteadinessModelGaitBaseline::extractFeatures(CFAbsoluteTime, const std::vector<BoutMetrics> &, const CLBodyMetrics &, double) const", "%s\n", v41);
    if (v41 != buf) {
      free(v41);
    }
  }
  sub_10126DBE0((uint64_t)&v42, 95);
  sub_10126DBE0((uint64_t)&__p, 95);
  float v39 = *(float *)(a4 + 8);
  if (v42)
  {
    int v43 = (char *)v42;
    operator delete(v42);
  }
  if (__p)
  {
    unint64_t v46 = (char *)__p;
    operator delete(__p);
  }
  if (v48)
  {
    uint64_t v49 = (double *)v48;
    operator delete(v48);
  }
  return v39;
}

void sub_100EE5E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EE5E8C(id a1)
{
  qword_102418FA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

void sub_100EE5F6C(id a1)
{
  qword_1024822B0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLOutdoorServiceSilo"];
}

void sub_100EE60B8(id a1)
{
  if (sub_10010145C() && (sub_1000A16E8() & 0x400000000000000) != 0
    || (sub_100103240(), sub_10016CCBC()))
  {
    if (sub_100C60EC0()) {
      byte_1024822C0 = 1;
    }
  }
}

void sub_100EE657C()
{
}

id sub_100EE65BC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onDaemonStatusNotification:a2 data:a3];
}

id sub_100EE65CC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onFitnessTrackingNotification:a2 data:a3];
}

void sub_100EE65DC(id a1, BPSCompletion *a2)
{
  if ([(BPSCompletion *)a2 state])
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102302348);
    }
    double v3 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)CLMotionActivity buf = 136315138;
      id v7 = [[-[BPSCompletion error](a2, "error") description] UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Registering for Biome stream UserFocus.SleepMode with error: %s\n", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102302348);
    }
    [objc_msgSend(-[BPSCompletion error](a2, "error"), "description") UTF8String];
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLOutdoorService beginService]_block_invoke", "%s\n", v4);
    if (v4 == (char *)buf) {
      return;
    }
LABEL_20:
    free(v4);
    return;
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102302348);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)CLMotionActivity buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Registering for Biome stream UserFocus.SleepMode", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102302348);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLOutdoorService beginService]_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      goto LABEL_20;
    }
  }
}

id sub_100EE68D4(uint64_t a1, void *a2)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = [a2 eventBody];

  return _[v2 onBiomeUserFocusSleepModeEvent:v3];
}

uint64_t *sub_100EE6B14(uint64_t **a1, uint64_t *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10087DE70(result);
    operator delete();
  }
  return result;
}

void sub_100EE6BDC()
{
}

uint64_t sub_100EE6C00()
{
  if (qword_1024822D0 != -1) {
    dispatch_once(&qword_1024822D0, &stru_102302388);
  }
  if (!qword_1024822D8 || !off_1024753C0[0]() || !off_1024753C8()) {
    return 1;
  }
  CFStringRef v0 = (const __CFString *)off_1024753C8();
  CFStringRef v1 = (const __CFString *)off_1024753C0[0]();
  CFBooleanRef v2 = (const __CFBoolean *)CFPreferencesCopyValue(v0, v1, @"mobile", kCFPreferencesAnyHost);
  if (!v2)
  {
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_102302368);
    }
    id v7 = qword_1024194F8;
    if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CLMotionActivity buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Daylight time using default", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194F0 != -1) {
        dispatch_once(&qword_1024194F0, &stru_102302368);
      }
      unsigned int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL getHKPrivacyPreferencesEnableDaylightTime()", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    return 1;
  }
  CFBooleanRef v3 = v2;
  int Value = CFBooleanGetValue(v2);
  BOOL v5 = Value != 0;
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_102302368);
  }
  uint64_t v6 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CLMotionActivity buf = 67240192;
    BOOL v12 = Value != 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Daylight time setting update, enabled %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_102302368);
    }
    double v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL getHKPrivacyPreferencesEnableDaylightTime()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  CFRelease(v3);
  return v5;
}

void sub_100EE767C()
{
}

id sub_100EE76A4(uint64_t a1, void *a2)
{
  return _[a2 onOldMotionCoprocessorData:a1];
}

id sub_100EE76B0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onBacklightStateNotification:a2 data:a3];
}

id sub_100EE76C0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onOdometerNotification:a2 data:a3];
}

id sub_100EE76D0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onWifiNotification:a2 data:a3];
}

id sub_100EE76E0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onSignalEnvironmentNotification:a2 data:a3];
}

id sub_100EE76F0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onGnssLeechLocationNotification:a2 data:a3];
}

id sub_100EE8050(uint64_t a1, void *a2)
{
  id v3 = [a2 isAuthorizedForServiceTypeMask:16];
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_102302368);
  }
  uint64_t v4 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CLMotionActivity buf = 67240192;
    int v8 = (int)v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Motion calibration service authorization update, enabled %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_102302368);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLOutdoorService updateLocationAuthorization]_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return [*(id *)(a1 + 32) toggleManagerBySettingFlag:*(void *)(a1 + 32) + 154 toState:v3];
}

void sub_100EE8430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1000D7F78((void ***)va);
  _Unwind_Resume(a1);
}

void sub_100EE8554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100EE8C34(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_100EE6C00();

  return _[a2 onHKPrivacyPreferencesEnableDaylightTime:v3];
}

void sub_100EE9410(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100EE9440(id a1)
{
  qword_1024194F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

uint64_t sub_100EE9470(uint64_t a1)
{
  sub_10041F48C((void *)(a1 + 8944));
  sub_10144B460(a1 + 6368);
  CFBooleanRef v2 = *(void **)(a1 + 6352);
  *(void *)(a1 + 6352) = 0;
  if (v2) {
    sub_100EE1CA4(a1 + 6352, v2);
  }
  uint64_t v3 = *(void *)(a1 + 6344);
  *(void *)(a1 + 6344) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_10134D2DC(a1 + 6064);
  uint64_t v4 = *(void **)(a1 + 5704);
  if (v4)
  {
    *(void *)(a1 + 5712) = v4;
    operator delete(v4);
  }
  BOOL v5 = *(void **)(a1 + 5632);
  if (v5)
  {
    *(void *)(a1 + 5640) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 5631) < 0) {
    operator delete(*(void **)(a1 + 5608));
  }
  sub_10054EAC4(a1 + 5504);
  if (*(char *)(a1 + 2575) < 0) {
    operator delete(*(void **)(a1 + 2552));
  }
  if (*(char *)(a1 + 2527) < 0) {
    operator delete(*(void **)(a1 + 2504));
  }
  sub_1006B3580((void *)(a1 + 16));
  return a1;
}

void sub_100EE9568(id a1)
{
  qword_1024822D8 = (uint64_t)dlopen("/System/Library/Frameworks/HealthKit.framework/HealthKit", 2);
}

uint64_t sub_100EE9594()
{
  if (qword_1024822D0 != -1) {
    dispatch_once(&qword_1024822D0, &stru_102302388);
  }
  CFStringRef v0 = (uint64_t *)dlsym((void *)qword_1024822D8, "kHKNanoLifestylePrivacyPreferencesChangedNotification");
  if (v0)
  {
    uint64_t result = *v0;
    qword_1024822E0 = result;
  }
  else
  {
    uint64_t result = qword_1024822E0;
  }
  off_1024753B8[0] = sub_100EE9614;
  return result;
}

uint64_t sub_100EE9614()
{
  return qword_1024822E0;
}

uint64_t sub_100EE9620()
{
  if (qword_1024822D0 != -1) {
    dispatch_once(&qword_1024822D0, &stru_102302388);
  }
  CFStringRef v0 = (uint64_t *)dlsym((void *)qword_1024822D8, "kHKPrivacyPreferencesDomain");
  if (v0)
  {
    uint64_t result = *v0;
    qword_1024822E8 = result;
  }
  else
  {
    uint64_t result = qword_1024822E8;
  }
  off_1024753C0[0] = sub_100EE96A0;
  return result;
}

uint64_t sub_100EE96A0()
{
  return qword_1024822E8;
}

uint64_t sub_100EE96AC()
{
  if (qword_1024822D0 != -1) {
    dispatch_once(&qword_1024822D0, &stru_102302388);
  }
  CFStringRef v0 = (uint64_t *)dlsym((void *)qword_1024822D8, "kHKPrivacyPreferencesKeyEnableDaylightTime");
  if (v0)
  {
    uint64_t result = *v0;
    qword_1024822F0 = result;
  }
  else
  {
    uint64_t result = qword_1024822F0;
  }
  off_1024753C8 = sub_100EE972C;
  return result;
}

uint64_t sub_100EE972C()
{
  return qword_1024822F0;
}

void sub_100EE9738()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_100EE97B8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_100EE9848(_Unwind_Exception *a1)
{
}

uint64_t sub_100EE9860()
{
  sub_100134750(qword_102482298, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102482298, (void *)&_mh_execute_header);
}

id *sub_100EE9948(id *result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 8)
  {
    BOOL v5 = result;
    if (qword_1024194B0 != -1) {
      dispatch_once(&qword_1024194B0, &stru_1023023C8);
    }
    uint64_t v6 = qword_1024194B8;
    if (os_log_type_enabled((os_log_t)qword_1024194B8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)CLMotionActivity buf = 138477827;
      uint64_t v9 = sub_1000E9358(a4);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLGatheringRoutineOTASubscription Mobile asset notification data: %{private}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024194B0 != -1) {
        dispatch_once(&qword_1024194B0, &stru_1023023C8);
      }
      sub_1000E9358(a4);
      id v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGatheringRoutineOTASubscription::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    return (id *)[v5[1] onUpdatedSettings:sub_1000E9358(a4)];
  }
  return result;
}

id sub_100EE9B30(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    sub_1014CC69C();
  }
  return [*(id *)(v1 + 16) register:*(void *)(v1 + 8) forNotification:8 registrationInfo:0];
}

void sub_100EE9BFC(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023023E8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGatheringRoutineOTASubscription::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023023E8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)CLMotionActivity buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      float64_t v17 = "activity";
      __int16 v18 = 2050;
      float64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGatheringRoutineOTASubscription::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100EE9948(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100EE9DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100EE9DD8(void *result)
{
  uint64_t v1 = result[2];
  if (v1)
  {
    CFBooleanRef v2 = result;
    [*(id *)(v1 + 16) unregister:*(void *)(v1 + 8) forNotification:8];
    uint64_t result = (void *)v2[2];
    unsigned __int8 v2[2] = 0;
    if (result)
    {
      uint64_t v3 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v3();
    }
  }
  return result;
}

void sub_100EE9E54(id a1)
{
  qword_1024194B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gathering");
}

void sub_100EE9E84(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void *sub_100EE9EB4(void *a1, int a2)
{
  if (byte_10248230F >= 0) {
    uint64_t v4 = (char *)&xmmword_1024822F8;
  }
  else {
    uint64_t v4 = (char *)xmmword_1024822F8;
  }
  sub_100134750(__p, "");
  sub_100EE9FF0((uint64_t)a1, v4, a2, (uint64_t)__p, 1, 30.0);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_102302418;
  a1[9] = off_1023024D0;
  sub_100F03BA0(a1 + 41, 0, 0);
  sub_100F03BA0(a1 + 43, 0, 0);
  (*(void (**)(void *))(*a1 + 112))(a1);
  return a1;
}

void sub_100EE9FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EE9FF0(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  BOOL v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 8));
  *BOOL v12 = off_1022ADB08;
  *(void *)a1 = off_102302650;
  *(void *)(a1 + 72) = off_1023026F8;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_102302650;
  *(void *)(a1 + 72) = off_1023026F8;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 248) = 12000;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 256) = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 264));
  *(void *)(a1 + 264) = off_1022ADB08;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_100EEA408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  *a11 = v29;
  sub_1003BE1F8(v30);
  sub_1000D816C(v28);
  sub_1011F8AE0(v27);
  void *v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_100EEA4A0()
{
}

void *sub_100EEA4A8(void *a1)
{
  *a1 = off_102302650;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_1023026F8;
  a1[32] = off_1022ADAD8;
  sub_1003BE1F8(a1 + 33);
  sub_1000D816C(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022ADAD8;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_100EEA56C(uint64_t a1)
{
  return sub_100EEA4A8((void *)(a1 - 72));
}

void sub_100EEA574(void *a1)
{
  sub_100EEA4A8(a1);

  operator delete();
}

void sub_100EEA5AC(uint64_t a1)
{
  sub_100EEA4A8((void *)(a1 - 72));

  operator delete();
}

uint64_t sub_100EEA5E8(uint64_t *a1, uint64_t a2)
{
  if (*(double *)(*(void *)(a2 + 8) - 16) != 1.79769313e308 || !sub_100082064(a1 + 9)) {
    return -1;
  }
  sub_10002B640(a1[10]);
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100082068(a1 + 41, &v13);
  BOOL v5 = (sqlite3_stmt *)sub_10014D19C(v13);
  if (sub_100055D58(v5, 1, Current - *(double *)(*(void *)(a2 + 8) - 24)))
  {
    uint64_t v6 = a1[10];
    char v7 = (sqlite3_stmt *)sub_10014D19C(v13);
    sub_10001FEB0(v6, v7);
    uint64_t v8 = (*(int (**)(uint64_t *))(*a1 + 152))(a1);
  }
  else
  {
    uint64_t v8 = -1;
  }
  sub_100028FB4(a1[10]);
  uint64_t v9 = a1[10];
  if (*(uint64_t *)(v9 + 88) <= 0) {
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v10 = *(void *)(v9 + 88);
  }
  sub_10003CC68(v9, v10);
  uint64_t v11 = v13;
  uint64_t v13 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  return v8;
}

void sub_100EEA724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EEA740(uint64_t a1, uint64_t a2)
{
  return sub_100EEA5E8((uint64_t *)(a1 - 72), a2);
}

uint64_t sub_100EEA748(uint64_t a1, void *a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    a2[1] = *a2;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from ElevationGradeHistory ORDER BY startTime ASC");
  }
  return result;
}

void sub_100EEA928(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EEA968(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)a2 = sqlite3_column_int(v6, 0);
  char v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  uint64_t v8 = (sqlite3_stmt *)sub_10014D19C(*a1);
  double v9 = sqlite3_column_double(v8, 2);
  uint64_t result = 0;
  *(double *)(a2 + 16) = v9;
  return result;
}

uint64_t sub_100EEA9FC(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM ElevationGradeHistory");
  }
  return 0xFFFFFFFFLL;
}

void sub_100EEAAB8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EEAAF4(uint64_t a1)
{
  return sub_100EEA9FC(a1 - 72);
}

void *sub_100EEAAFC@<X0>(uint64_t a1@<X8>)
{
  if (byte_10248230F < 0) {
    return sub_1000DC48C((unsigned char *)a1, (void *)xmmword_1024822F8, *((unint64_t *)&xmmword_1024822F8 + 1));
  }
  *(_OWORD *)a1 = xmmword_1024822F8;
  *(void *)(a1 + 16) = unk_102482308;
  return result;
}

void *sub_100EEAB38@<X0>(uint64_t a1@<X8>)
{
  if (byte_10248230F < 0) {
    return sub_1000DC48C((unsigned char *)a1, (void *)xmmword_1024822F8, *((unint64_t *)&xmmword_1024822F8 + 1));
  }
  *(_OWORD *)a1 = xmmword_1024822F8;
  *(void *)(a1 + 16) = unk_102482308;
  return result;
}

uint64_t sub_100EEAB74(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v5 = a1 + 112;
  uint64_t v7 = v5 - 40;
  uint64_t v11 = v5;
  (*(void (**)(void))(v6 + 16))();
  if (sub_100082064(v7))
  {
    a3[1] = *a3;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM ElevationGradeHistory WHERE startTime > ? and startTime < ? ORDER BY startTime ASC LIMIT ?");
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_102302560);
  }
  uint64_t v8 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)CLMotionActivity buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "ElevationGradeHistory, DB not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102302560);
    }
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLElevationGradeRecorderDb::queryInTimeRange(const CFAbsoluteTime, const CFAbsoluteTime, int, std::vector<CLElevationGradeEntry> &) const", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 109;
}

void sub_100EEB0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EEB138(uint64_t *a1)
{
  uint64_t result = sub_10014C3C0(a1[10]);
  if (result)
  {
    sub_100EEB1B8((uint64_t)a1);
    sub_1005F7B0C(a1[10], "ElevationGradeHistory", (const char **)&off_102302580, (const std::string::value_type **)&off_1024753D0, 0);
    a1[41] = sub_100601D1C(a1[10], (uint64_t)"DELETE FROM ElevationGradeHistory WHERE startTime < ?");
    a1[42] = v3;
    uint64_t result = sub_100601D1C(a1[10], (uint64_t)"INSERT INTO ElevationGradeHistory (startTime, fractionalGrade) VALUES (?, ?)");
    a1[43] = result;
    a1[44] = v4;
  }
  return result;
}

uint64_t sub_100EEB1B8(uint64_t a1)
{
  uint64_t result = sub_1005F93E4(*(void *)(a1 + 80), "ElevationGradeHistory");
  if (result)
  {
    uint64_t result = sub_100EEB844(a1, "ElevationGradeHistory");
    if (result)
    {
      uint64_t v3 = *(void *)(a1 + 80);
      return sub_100601DF8(v3, "ElevationGradeHistory");
    }
  }
  return result;
}

uint64_t sub_100EEB238(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM ElevationGradeHistory");
  }
  return result;
}

void sub_100EEB2E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EEB300(uint64_t a1)
{
  return sub_100EEB238(a1 - 72);
}

uint64_t sub_100EEB308(uint64_t *a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10014D518(a1[10], (uint64_t)"DELETE FROM ElevationGradeHistory WHERE startTime > ?");
  }
  return result;
}

void sub_100EEB404(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EEB41C(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"UPDATE ElevationGradeHistory SET startTime = startTime + ?");
  }
  return result;
}

void sub_100EEB4D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

id *sub_100EEB4E8(uint64_t a1, uint64_t a2)
{
  v13[0] = (id)os_transaction_create();
  v13[1] = 0;
  if (sub_100082064(a1 + 72))
  {
    sub_100082068((void *)(a1 + 344), &v12);
    if (v12 && sub_10014D19C(v12))
    {
      uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(v12);
      if (sub_100055D58(v4, 1, *(double *)(a2 + 8)))
      {
        uint64_t v5 = (sqlite3_stmt *)sub_10014D19C(v12);
        if (sub_100055D58(v5, 2, *(double *)(a2 + 16)))
        {
          uint64_t v6 = *(void *)(a1 + 80);
          uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(v12);
          sub_10001FEB0(v6, v7);
        }
      }
    }
    else
    {
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_102302560);
      }
      uint64_t v8 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)CLMotionActivity buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "ElevationGradeHistory, insert statement is NULL", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_102302560);
        }
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLElevationGradeRecorderDb::insertRecordUL(const CLElevationGradeEntry &, BOOL)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
    }
    uint64_t v9 = v12;
    uint64_t v12 = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
  }
  return sub_1000E1098(v13);
}

void sub_100EEB734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (a5) {
    (*(void (**)(uint64_t))(*(void *)a5 + 8))(a5);
  }
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EEB788()
{
  return 0;
}

uint64_t sub_100EEB790(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM ElevationGradeHistory ORDER BY id DESC LIMIT 1");
  }
  return 2;
}

void sub_100EEB82C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EEB844(uint64_t a1, void *a2)
{
  if (!sub_1005F9734(*(void *)(a1 + 80), (char *)a2))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102302738);
    }
    uint64_t v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102302738);
      }
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      uint64_t v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", (const char *)v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    memset(__p, 0, 24);
    sub_100134750(buf, (char *)a2);
    uint64_t v5 = std::string::append(buf, "AutoIncr");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t v22 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)unint64_t v21 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_100134750(buf, (char *)a2);
    uint64_t v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_10002B640(*(void *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v8 = HIBYTE(__p[2]);
    }
    else {
      size_t v8 = (size_t)__p[1];
    }
    uint64_t v9 = buf;
    sub_1001110E4((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v22 >= 0) {
      uint64_t v11 = v21;
    }
    else {
      uint64_t v11 = (void **)v21[0];
    }
    if (v22 >= 0) {
      std::string::size_type v12 = HIBYTE(v22);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v21[1];
    }
    uint64_t v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    __int16 v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v14;
    __p[1] = v23.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v23.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      char v15 = HIBYTE(__p[2]);
      __int16 v14 = __p[0];
    }
    if (v15 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)v14;
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)v16);
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = *(void *)(v17 + 88);
  }
  sub_10003CC68(v17, v18);
  return 0;
}

void sub_100EECA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100EECDD0(void *a1)
{
  uint64_t v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if (SHIBYTE(v16[0]) < 0)
  {
    uint64_t v10 = v15[1];
    operator delete(v15[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v15);
        uint64_t v4 = sub_100132EFC(v16, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0) {
          uint64_t v5 = __p;
        }
        else {
          uint64_t v5 = (void **)__p[0];
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v6 = v14;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        uint64_t v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((v14 & 0x80u) == 0) {
          uint64_t v9 = __p;
        }
        else {
          uint64_t v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v16[0]))
  {
    goto LABEL_3;
  }
  sub_101A95854(v3);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v15
  v16[0] = v11;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_100EED214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_100EED294(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_100EEF1B8(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102302738);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)CLMotionActivity buf = 68289282;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)&void v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    char v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102302738);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)CLMotionActivity buf = 134349056;
      *(void *)uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102302738);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_100EEDA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_100EEDA40(uint64_t a1, long long *a2, char a3)
{
  v31[0] = (id)os_transaction_create();
  v31[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v31);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  uint64_t v28 = 0;
  double v29 = 0.0;
  uint64_t v30 = 0;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 104))(a1, &v28);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102302738);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)CLMotionActivity buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102302738);
        }
        LOWORD(v32) = 0;
        char v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *((double *)a2 + 1);
    double v8 = v29;
    double v9 = v7 - v29;
    if (v7 - v29 < 0.0) {
      double v9 = -(v7 - v29);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102302738);
      }
      uint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *((void *)a2 + 1);
        *(_DWORD *)CLMotionActivity buf = 134349312;
        double v37 = v29;
        __int16 v38 = 2050;
        uint64_t v39 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102302738);
        }
        uint64_t v22 = *((void *)a2 + 1);
        int v32 = 134349312;
        double v33 = v29;
        __int16 v34 = 2050;
        uint64_t v35 = v22;
        std::string v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
      CLWriteStackshot();
      double v7 = *((double *)a2 + 1);
      double v8 = v29;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102302738);
        }
        std::string::size_type v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *((double *)a2 + 1);
          *(_DWORD *)CLMotionActivity buf = 134217984;
          double v37 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102302738);
          }
          double v24 = *((double *)a2 + 1);
          int v32 = 134217984;
          double v33 = v24;
          float64_t v25 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v25);
          if (v25 != (char *)buf) {
            free(v25);
          }
        }
        (*(void (**)(uint64_t, long long *))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v27 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_102302738);
        double v17 = v27;
      }
      double v18 = v16 - v17;
      float64_t v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)CLMotionActivity buf = 134217984;
        double v37 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102302738);
        }
        int v32 = 134217984;
        double v33 = v18;
        uint64_t v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLElevationGradeEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLElevationGradeEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, long long *))(*(void *)a1 + 144))(a1, &v28, a1 + 224, a2);
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *a2;
  *(void *)(a1 + 240) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 224) = v20;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v31);
}

void sub_100EEE250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EEE27C(uint64_t a1)
{
  return sub_100EED294(a1 - 72);
}

void sub_100EEE284(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_100EEE2B4(void *a1, void *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A959C4(v4);
    sub_1001D7FD4();
  }
  std::string::size_type v12 = v15[1];
  operator delete(v15[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v15);
    int v6 = sub_100132EFC(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_100EEE6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  sub_101A129A8((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_100EEE734(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101A95B34(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  std::string::size_type v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_100EEEAA8(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A95CA4(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_100EEEDD4(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A95E14(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_100EEF0F8(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100EEF128(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_100EEF1B8(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_100EEF238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EEF254(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_100EEF284()
{
  sub_100134750(&xmmword_1024822F8, "ElevationGradeHistory");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_1024822F8, (void *)&_mh_execute_header);
}

BOOL sub_100EEF2E4(uint64_t a1, id *a2)
{
  if (!sub_1000EF668(*(double *)(a1 + 160), *(double *)(a1 + 168)) && *(double *)(a1 + 176) > 0.0) {
    return 1;
  }
  double v4 = *(double *)(a1 + 4);
  double v12 = *(double *)(a1 + 12);
  double v13 = v4;
  double v11 = *(double *)(a1 + 20);
  int v5 = sub_100EBBCEC(a2, *(_DWORD *)(a1 + 132), &v13, &v12, &v11, 5, v4, v12, v11);
  if (v5)
  {
    if (v5 == 1)
    {
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_102302778);
      }
      uint64_t v6 = qword_102419368;
      if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)CLMotionActivity buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "CLAccessory,shift,coordinate shifting failed", buf, 2u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419360 == -1) {
          goto LABEL_18;
        }
        goto LABEL_24;
      }
      return result;
    }
    double v10 = v12;
    *(double *)(a1 + 160) = v13;
    *(double *)(a1 + 168) = v10;
    *(double *)(a1 + 176) = v11;
    return 1;
  }
  if (qword_102419360 != -1) {
    dispatch_once(&qword_102419360, &stru_102302778);
  }
  uint64_t v8 = qword_102419368;
  if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)CLMotionActivity buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLAccessory,shift,coordinate shifting not required", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419360 == -1)
    {
LABEL_18:
      double v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLChinaShiftedDataStructure::computeShiftedCoordinate(CLGeoLocationShifter &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
      return 0;
    }
LABEL_24:
    dispatch_once(&qword_102419360, &stru_102302778);
    goto LABEL_18;
  }
  return result;
}

__n128 sub_100EEF5CC(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 132) != 2)
  {
    uint64_t v3 = (_DWORD *)(a2 + 96);
    if (*(_DWORD *)(a2 + 96) != 3 && !sub_1000EF668(*(double *)(a2 + 4), *(double *)(a2 + 12)))
    {
      long long v13 = *(_OWORD *)(a2 + 96);
      long long v14 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)uint64_t v15 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)&v15[12] = *(_OWORD *)(a2 + 140);
      long long v9 = *(_OWORD *)(a2 + 32);
      long long v10 = *(_OWORD *)(a2 + 48);
      long long v11 = *(_OWORD *)(a2 + 64);
      long long v12 = *(_OWORD *)(a2 + 80);
      __n128 v7 = *(__n128 *)a2;
      long long v8 = *(_OWORD *)(a2 + 16);
      uint64_t v16 = v3;
      uint64_t v6 = sub_100EF0440(a1 + 232, v3, (uint64_t)&unk_101D0B290, &v16);
      *(_OWORD *)(v6 + 17) = v14;
      *(_OWORD *)(v6 + 19) = *(_OWORD *)v15;
      *(_OWORD *)(v6 + 21) = *(_OWORD *)&v15[16];
      *(_OWORD *)(v6 + 23) = 0uLL;
      *(_OWORD *)(v6 + 9) = v10;
      *(_OWORD *)(v6 + 11) = v11;
      *(_OWORD *)(v6 + 13) = v12;
      *(_OWORD *)(v6 + 15) = v13;
      __n128 result = v7;
      *(__n128 *)(v6 + 3) = v7;
      *(_OWORD *)(v6 + 5) = v8;
      *(_OWORD *)(v6 + 7) = v9;
      v6[25] = 0xBFF0000000000000;
    }
  }
  return result;
}

BOOL sub_100EEF6CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (unsigned int *)(a2 + 96);
  if (*(_DWORD *)(a2 + 96) != 3 || *(_DWORD *)(a2 + 132) != 2) {
    return 0;
  }
  if (sub_1000EF668(*(double *)(a2 + 4), *(double *)(a2 + 12)))
  {
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_102302778);
    }
    int v5 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)CLMotionActivity buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLAccessory,shift,null coordinate", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_102302778);
    }
    *(_WORD *)int v67 = 0;
    __n128 v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAccessoryChinaShiftedDataProcessor::handleShiftedAccessoryData(CLDaemonLocation &)", "%s\n", v7);
    if (v7 != buf) {
      free(v7);
    }
    return 0;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482328, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482328))
  {
    *(_DWORD *)&uint8_t buf[16] = 4;
    *(_OWORD *)CLMotionActivity buf = xmmword_101D96698;
    sub_100EF0358(qword_102482310, buf, 5uLL);
    __cxa_atexit((void (*)(void *))sub_100EF03DC, qword_102482310, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102482328);
  }
  long long v8 = (unsigned int *)qword_102482310[0];
  long long v9 = (unsigned int *)unk_102482318;
  if (qword_102482310[0] == unk_102482318) {
    return 0;
  }
  uint64_t v10 = a1 + 232;
  while (1)
  {
    long long v11 = sub_1001EF6E0((void *)(a1 + 232), v8);
    long long v12 = v11;
    if (v11)
    {
      if (!sub_1000EF668(*(double *)((char *)v11 + 28), *(double *)((char *)v11 + 36)))
      {
        long long v13 = v12 + 3;
        double v14 = *(double *)(a2 + 76);
        double v15 = *(double *)((char *)v12 + 100);
        if (sub_100EEF2E4((uint64_t)(v12 + 3), (id *)a1))
        {
          double v16 = vabdd_f64(v14, v15);
          long long v17 = *(_OWORD *)v13;
          long long v18 = *(_OWORD *)(v12 + 5);
          long long v19 = *(_OWORD *)(v12 + 9);
          *(_OWORD *)(a1 + 80) = *(_OWORD *)(v12 + 7);
          *(_OWORD *)(a1 + 96) = v19;
          *(_OWORD *)(a1 + 48) = v17;
          *(_OWORD *)(a1 + 64) = v18;
          long long v20 = *(_OWORD *)(v12 + 11);
          long long v21 = *(_OWORD *)(v12 + 13);
          long long v22 = *(_OWORD *)(v12 + 17);
          *(_OWORD *)(a1 + 144) = *(_OWORD *)(v12 + 15);
          *(_OWORD *)(a1 + 160) = v22;
          *(_OWORD *)(a1 + 112) = v20;
          *(_OWORD *)(a1 + 128) = v21;
          long long v23 = *(_OWORD *)(v12 + 19);
          long long v24 = *(_OWORD *)(v12 + 21);
          long long v25 = *(_OWORD *)(v12 + 23);
          *(void *)(a1 + 224) = v12[25];
          *(_OWORD *)(a1 + 192) = v24;
          *(_OWORD *)(a1 + 208) = v25;
          *(_OWORD *)(a1 + 176) = v23;
        }
        else
        {
          if (sub_1000EF668(*(double *)(a1 + 208), *(double *)(a1 + 216)) || *(double *)(a1 + 224) <= 0.0)
          {
            if (qword_102419360 != -1) {
              dispatch_once(&qword_102419360, &stru_102302778);
            }
            double v33 = qword_102419368;
            if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v34 = *(void *)(a2 + 76);
              *(_DWORD *)CLMotionActivity buf = 134349056;
              *(void *)&uint8_t buf[4] = v34;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "CLAccessory,shift,%{public}.1lf,coordinate not shifted", buf, 0xCu);
            }
            if (!sub_10013D1A0(115, 2)) {
              goto LABEL_44;
            }
            bzero(buf, 0x65CuLL);
            if (qword_102419360 == -1) {
              goto LABEL_54;
            }
LABEL_61:
            dispatch_once(&qword_102419360, &stru_102302778);
            goto LABEL_54;
          }
          double v16 = vabdd_f64(*(double *)(a2 + 76), *(double *)(a1 + 124));
          if (v16 >= 45.0)
          {
            if (qword_102419360 != -1) {
              dispatch_once(&qword_102419360, &stru_102302778);
            }
            uint64_t v35 = qword_102419368;
            if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_INFO))
            {
              uint64_t v36 = *(void *)(a2 + 76);
              *(_DWORD *)CLMotionActivity buf = 134349056;
              *(void *)&uint8_t buf[4] = v36;
              _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "CLAccessory,shift,%{public}.1lf,shifted coordinate not available", buf, 0xCu);
            }
            if (!sub_10013D1A0(115, 2)) {
              goto LABEL_44;
            }
            bzero(buf, 0x65CuLL);
            if (qword_102419360 != -1) {
              goto LABEL_61;
            }
LABEL_54:
            uint64_t v37 = *(void *)(a2 + 76);
            *(_DWORD *)int v67 = 134349056;
            *(void *)&uint8_t v67[4] = v37;
            uint64_t v30 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAccessoryChinaShiftedDataProcessor::handleShiftedAccessoryData(CLDaemonLocation &)", "%s\n", v30);
LABEL_55:
            if (v30 != buf) {
              free(v30);
            }
            goto LABEL_44;
          }
          if (qword_102419360 != -1) {
            dispatch_once(&qword_102419360, &stru_102302778);
          }
          uint64_t v31 = qword_102419368;
          if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_INFO))
          {
            uint64_t v32 = *(void *)(a2 + 76);
            *(_DWORD *)CLMotionActivity buf = 134349312;
            *(void *)&uint8_t buf[4] = v32;
            *(_WORD *)&unsigned char buf[12] = 2050;
            *(double *)&unsigned char buf[14] = v16;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "CLAccessory,shift,%{public}.1lf,usingPriorShiftedLocation,%{public}.1lf", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419360 != -1) {
              dispatch_once(&qword_102419360, &stru_102302778);
            }
            uint64_t v38 = *(void *)(a2 + 76);
            *(_DWORD *)int v67 = 134349312;
            *(void *)&uint8_t v67[4] = v38;
            __int16 v68 = 2050;
            double v69 = v16;
            uint64_t v39 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAccessoryChinaShiftedDataProcessor::handleShiftedAccessoryData(CLDaemonLocation &)", "%s\n", v39);
            if (v39 != buf) {
              free(v39);
            }
          }
          long long v13 = (uint64_t *)(a1 + 48);
        }
        double v26 = sub_101171EA0((double *)(a1 + 8), a2, *((double *)v13 + 20), *((double *)v13 + 21));
        if (v26 < v16 * 40.0 + 500.0) {
          break;
        }
      }
    }
LABEL_44:
    if (++v8 == v9) {
      return 0;
    }
  }
  uint64_t v65 = 0;
  double v66 = 0.0;
  if (!sub_100EBBE00((double *)(a1 + 8), &v66, (double *)&v65, *(double *)((char *)v13 + 4), *(double *)((char *)v13 + 12), *((double *)v13 + 20), *((double *)v13 + 21), *(double *)(a2 + 4), *(double *)(a2 + 12)))
  {
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_102302778);
    }
    double v27 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_INFO))
    {
      int v28 = *((_DWORD *)v13 + 24);
      *(_DWORD *)CLMotionActivity buf = 67174657;
      *(_DWORD *)&uint8_t buf[4] = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "CLAccessory,shift,computeCorrectedCoordinate failed using location of type,%{private}d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_44;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_102302778);
    }
    int v29 = *((_DWORD *)v13 + 24);
    *(_DWORD *)int v67 = 67174657;
    *(_DWORD *)&uint8_t v67[4] = v29;
    uint64_t v30 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAccessoryChinaShiftedDataProcessor::handleShiftedAccessoryData(CLDaemonLocation &)", "%s\n", v30);
    goto LABEL_55;
  }
  if (qword_102419360 != -1) {
    dispatch_once(&qword_102419360, &stru_102302778);
  }
  __int16 v40 = qword_102419368;
  if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v41 = *(void *)(a2 + 76);
    uint64_t v42 = *(void *)(a2 + 4);
    uint64_t v43 = *(void *)(a2 + 12);
    uint64_t v44 = *(uint64_t *)((char *)v13 + 76);
    int v45 = *((_DWORD *)v13 + 24);
    uint64_t v46 = *(uint64_t *)((char *)v13 + 4);
    uint64_t v47 = *(uint64_t *)((char *)v13 + 12);
    uint64_t v48 = v13[20];
    uint64_t v49 = v13[21];
    *(_DWORD *)CLMotionActivity buf = 134352129;
    *(void *)&uint8_t buf[4] = v41;
    *(_WORD *)&unsigned char buf[12] = 2049;
    *(void *)&unsigned char buf[14] = v42;
    *(_WORD *)&unsigned char buf[22] = 2049;
    *(void *)&unsigned char buf[24] = v43;
    LOWORD(v93) = 2049;
    *(void *)((char *)&v93 + 2) = v44;
    WORD5(v93) = 1025;
    HIDWORD(v93) = v45;
    *(_WORD *)double v94 = 2049;
    *(void *)&v94[2] = v46;
    *(_WORD *)&v94[10] = 2049;
    *(void *)&v94[12] = v47;
    *(_WORD *)&v94[20] = 2049;
    *(void *)&v94[22] = v48;
    *(_WORD *)&v94[30] = 2049;
    *(void *)int v95 = v49;
    *(_WORD *)&v95[8] = 2049;
    *(double *)&v95[10] = v66;
    *(_WORD *)&v95[18] = 2049;
    *(void *)&v95[20] = v65;
    *(_WORD *)&v95[28] = 2049;
    *(double *)&v95[30] = v26;
    *(_WORD *)&v95[38] = 2050;
    *(double *)&v95[40] = v16;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "CLAccessory,shift,%{public}.1lf,accessoryLL,%{private}.7lf,%{private}.7lf,posTime,%{private}.3lf,posType,%{private}d,posLL,%{private}.7lf,%{private}.7lf,posLLMod,%{private}.7lf,%{private}.7lf,posCorrected,%{private}.7lf,%{private}.7lf,distance,%{private}.3lf,timeDiff,%{public}.3lf", buf, 0x80u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_102302778);
    }
    uint64_t v55 = *(void *)(a2 + 76);
    double v56 = *(double *)(a2 + 4);
    uint64_t v57 = *(void *)(a2 + 12);
    uint64_t v58 = *(uint64_t *)((char *)v13 + 76);
    int v59 = *((_DWORD *)v13 + 24);
    uint64_t v60 = *(uint64_t *)((char *)v13 + 4);
    uint64_t v61 = *(uint64_t *)((char *)v13 + 12);
    uint64_t v62 = v13[20];
    uint64_t v63 = v13[21];
    *(_DWORD *)int v67 = 134352129;
    *(void *)&uint8_t v67[4] = v55;
    __int16 v68 = 2049;
    double v69 = v56;
    __int16 v70 = 2049;
    uint64_t v71 = v57;
    __int16 v72 = 2049;
    uint64_t v73 = v58;
    __int16 v74 = 1025;
    int v75 = v59;
    __int16 v76 = 2049;
    uint64_t v77 = v60;
    __int16 v78 = 2049;
    uint64_t v79 = v61;
    __int16 v80 = 2049;
    uint64_t v81 = v62;
    __int16 v82 = 2049;
    uint64_t v83 = v63;
    __int16 v84 = 2049;
    double v85 = v66;
    __int16 v86 = 2049;
    uint64_t v87 = v65;
    __int16 v88 = 2049;
    double v89 = v26;
    __int16 v90 = 2050;
    double v91 = v16;
    __int16 v64 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLAccessoryChinaShiftedDataProcessor::handleShiftedAccessoryData(CLDaemonLocation &)", "%s\n", v64);
    if (v64 != buf) {
      free(v64);
    }
  }
  *(double *)(a2 + 4) = v66;
  *(void *)(a2 + 12) = v65;
  *(_DWORD *)(a2 + 132) = 1;
  long long v50 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)&v95[16] = *(_OWORD *)(a2 + 96);
  *(_OWORD *)&v95[32] = v50;
  v96[0] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)v96 + 12) = *(_OWORD *)(a2 + 140);
  long long v51 = *(_OWORD *)(a2 + 48);
  long long v93 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)double v94 = v51;
  long long v52 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)&v94[16] = *(_OWORD *)(a2 + 64);
  *(_OWORD *)int v95 = v52;
  long long v53 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)CLMotionActivity buf = *(_OWORD *)a2;
  *(_OWORD *)&uint8_t buf[16] = v53;
  long long v97 = 0uLL;
  *(void *)int v67 = v2;
  uint64_t v54 = sub_100EF0440(v10, v2, (uint64_t)&unk_101D0B290, (_DWORD **)v67);
  *(_OWORD *)(v54 + 17) = *(_OWORD *)&v95[32];
  *(_OWORD *)(v54 + 19) = v96[0];
  *(_OWORD *)(v54 + 21) = v96[1];
  *(_OWORD *)(v54 + 23) = v97;
  *(_OWORD *)(v54 + 9) = *(_OWORD *)v94;
  *(_OWORD *)(v54 + 11) = *(_OWORD *)&v94[16];
  *(_OWORD *)(v54 + 13) = *(_OWORD *)v95;
  *(_OWORD *)(v54 + 15) = *(_OWORD *)&v95[16];
  *(_OWORD *)(v54 + 3) = *(_OWORD *)buf;
  *(_OWORD *)(v54 + 5) = *(_OWORD *)&buf[16];
  *(_OWORD *)(v54 + 7) = v93;
  v54[25] = 0xBFF0000000000000;
  return 1;
}

void sub_100EF0338(_Unwind_Exception *a1)
{
}

void *sub_100EF0358(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_10017C6FC(a1, a3);
    uint64_t v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }
  return a1;
}

void sub_100EF03C0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EF03DC(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100EF0410(id a1)
{
  qword_102419368 = (uint64_t)os_log_create("com.apple.locationd.Position", "GpsAccessory");
}

uint64_t *sub_100EF0440(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 <= v6) {
        unint64_t v4 = v6 % v7;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
    long long v9 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      for (BOOL result = *v9; result; BOOL result = (uint64_t *)*result)
      {
        unint64_t v11 = result[1];
        if (v11 == v6)
        {
          if (*((_DWORD *)result + 4) == v6) {
            return result;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_100EF0674(a1, *a2, a4, (uint64_t)v20);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_100100330(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v4 = v6 % v7;
      }
      else {
        unint64_t v4 = v6;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
  }
  long long v18 = *(void **)(*(void *)a1 + 8 * v4);
  if (v18)
  {
    *(void *)v20[0] = *v18;
    void *v18 = v20[0];
  }
  else
  {
    *(void *)v20[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v20[0])
    {
      unint64_t v19 = *(void *)(*(void *)v20[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v20[0];
    }
  }
  BOOL result = (uint64_t *)v20[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_100EF0658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100EF0674@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = (char *)operator new(0xD0uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(void *)uint8x8_t v8 = 0;
  *((void *)v8 + 1) = a2;
  *((_DWORD *)v8 + 4) = **a3;
  *((_DWORD *)v8 + 6) = 0xFFFF;
  *(void *)(v8 + 28) = 0;
  *(void *)(v8 + 36) = 0;
  *(_OWORD *)(v8 + 44) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(v8 + 60) = result;
  *(__n128 *)(v8 + 76) = result;
  *(__n128 *)(v8 + 92) = result;
  *((_DWORD *)v8 + 27) = 0;
  *((_DWORD *)v8 + 34) = 0;
  *((void *)v8 + 14) = 0xBFF0000000000000;
  *((void *)v8 + 15) = 0;
  *((void *)v8 + 16) = 0;
  *(void *)(v8 + 140) = 0xBFF0000000000000;
  *((_DWORD *)v8 + 37) = 0x7FFFFFFF;
  *((void *)v8 + 21) = 0;
  *((void *)v8 + 22) = 0;
  *((void *)v8 + 19) = 0;
  *((void *)v8 + 20) = 0;
  v8[176] = 0;
  *((void *)v8 + 23) = 0;
  *((void *)v8 + 24) = 0;
  *((void *)v8 + 25) = 0xBFF0000000000000;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_100EF072C(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  *(_DWORD *)(a5 + 48) = 0;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  *(double *)(a5 + 16) = a6;
  BOOL v11 = sub_100EF0DA8(a2->f64);
  int v12 = 0;
  if (!v11)
  {
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_1023027B8);
    }
    float v13 = qword_102418FA8;
    if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)CLMotionActivity buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Rejection: ModelTemporalEntropy missing required feature inputs", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_1023027B8);
      }
      LOWORD(v60) = 0;
      double v56 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "SteadinessModel::Result CLMobility::SteadinessModelTemporalEntropy::runSteadinessModel(CFAbsoluteTime, const Features &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const", "%s\n", v56);
      if (v56 != buf) {
        free(v56);
      }
    }
    int v12 = *(_DWORD *)(a5 + 48) | 8;
    *(_DWORD *)(a5 + 48) = v12;
  }
  if (!*(unsigned char *)(a4 + 57)) {
    *(_DWORD *)(a5 + 48) = v12 | 4;
  }
  long long __p = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v15 = *a3;
  uint64_t v14 = a3[1];
  *(void *)CLMotionActivity buf = &__p;
  while (v15 != v14)
  {
    if (*(double *)(v15 + 72) != 0.0) {
      sub_100708E0C((void ***)buf, (_OWORD *)v15);
    }
    v15 += 224;
  }
  sub_100708114(a1, a5, (uint64_t *)&__p);
  double v16 = sub_100A1CC48(a2);
  *(double *)(a5 + 24) = v16;
  *(double *)(a5 + 32) = sub_100A1CD00(v16);
  *(void *)(a5 + 40) = v17;
  if (qword_102418FA0 != -1) {
    dispatch_once(&qword_102418FA0, &stru_1023027B8);
  }
  long long v18 = qword_102418FA8;
  if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEFAULT))
  {
    float64_t v19 = *(double *)(a5 + 32);
    float64_t v20 = *(double *)(a5 + 40);
    uint64_t v21 = *(void *)(a5 + 16);
    float64_t v22 = *(double *)(a5 + 24);
    int v23 = *(_DWORD *)(a5 + 48);
    int v24 = *(_DWORD *)(a5 + 8);
    int v25 = *(_DWORD *)(a5 + 12);
    *(_DWORD *)CLMotionActivity buf = 134350593;
    *(void *)&uint8_t buf[4] = v21;
    __int16 v80 = 2050;
    float64_t v81 = v19;
    __int16 v82 = 2050;
    float64_t v83 = v20;
    __int16 v84 = 2049;
    float64_t v85 = v22;
    __int16 v86 = 1026;
    *(_DWORD *)uint64_t v87 = v23;
    *(_WORD *)&v87[4] = 1025;
    *(_DWORD *)&v87[6] = v24;
    LOWORD(v88) = 1025;
    *(_DWORD *)((char *)&v88 + 2) = v25;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "CLMobility::SteadinessModelTemporalEntropy::Result,hkEndTime,%{public}.2f,likelihoodOK,%{public}.2f,likelihoodNotOK,%{public}.2f,rawSteadiness,%{private}.2f,rejectionStatus,%{public}d,numValidBouts7Days,%{private}d,numValidBouts28Days,%{private}d", buf, 0x3Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_1023027B8);
    }
    float64_t v37 = *(double *)(a5 + 32);
    float64_t v38 = *(double *)(a5 + 40);
    float64_t v39 = *(double *)(a5 + 16);
    float64_t v40 = *(double *)(a5 + 24);
    int v41 = *(_DWORD *)(a5 + 48);
    int v42 = *(_DWORD *)(a5 + 8);
    int v43 = *(_DWORD *)(a5 + 12);
    int v60 = 134350593;
    float64_t v61 = v39;
    __int16 v62 = 2050;
    float64_t v63 = v37;
    __int16 v64 = 2050;
    float64_t v65 = v38;
    __int16 v66 = 2049;
    float64_t v67 = v40;
    __int16 v68 = 1026;
    *(_DWORD *)double v69 = v41;
    *(_WORD *)&v69[4] = 1025;
    *(_DWORD *)&v69[6] = v42;
    LOWORD(v70) = 1025;
    *(_DWORD *)((char *)&v70 + 2) = v43;
    uint64_t v44 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "SteadinessModel::Result CLMobility::SteadinessModelTemporalEntropy::runSteadinessModel(CFAbsoluteTime, const Features &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const", "%s\n", v44);
    if (v44 != buf) {
      free(v44);
    }
  }
  if (qword_102418FA0 != -1) {
    dispatch_once(&qword_102418FA0, &stru_1023027B8);
  }
  double v26 = qword_102418FA8;
  if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEFAULT))
  {
    float64_t v28 = a2->f64[0];
    float64_t v27 = a2->f64[1];
    float64_t v29 = a2[3].f64[0];
    float64_t v30 = a2[3].f64[1];
    float64_t v32 = a2[4].f64[0];
    float64_t v31 = a2[4].f64[1];
    float64_t v33 = a2[1].f64[0];
    float64_t v34 = a2[1].f64[1];
    float64_t v36 = a2[2].f64[0];
    float64_t v35 = a2[2].f64[1];
    *(_DWORD *)CLMotionActivity buf = 134285825;
    *(float64_t *)&uint8_t buf[4] = v35;
    __int16 v80 = 2049;
    float64_t v81 = v27;
    __int16 v82 = 2049;
    float64_t v83 = v28;
    __int16 v84 = 2049;
    float64_t v85 = v33;
    __int16 v86 = 2049;
    *(float64_t *)uint64_t v87 = v29;
    *(_WORD *)&v87[8] = 2049;
    float64_t v88 = v30;
    __int16 v89 = 2049;
    float64_t v90 = v31;
    __int16 v91 = 2049;
    float64_t v92 = v32;
    __int16 v93 = 2049;
    float64_t v94 = v34;
    __int16 v95 = 2049;
    float64_t v96 = v36;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "CLMobility::SteadinessModelTemporalEntropy::Features,allBoutsMinGaitMetrics21StepLengthEntropyMeanLog,%{private}.2f,allBoutsMinGaitMetrics21CycleTimeEntropyMeanLog,%{private}.2f,allBoutsMinGaitMetrics21CycleTimeEntropy5thTo95thLog,%{private}.2f,allBoutsMinGaitMetrics21CycleTimeEntropyP5Log,%{private}.2f,allBoutsMinGaitMetrics21StepLengthPoincareSd1P5Log,%{private}.2f,allBoutsMinGaitMetrics21StepLengthPoincareSd1P95Log,%{private}.2f,allBoutsMinGaitMetrics21StepLengthPoincareSd2P5Log,%{private}.2f,allBoutsMinGaitMetrics21StepLengthPoincareSd2MeanLog,%{private}.2f,allBoutsMinGaitMetrics21CycleTimePoincareSd1P5Log,%{private}.2f,allBoutsMinGaitMetrics21CycleTimePoincareSd2P5Log,%{private}.2f", buf, 0x66u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_1023027B8);
    }
    float64_t v46 = a2->f64[0];
    float64_t v45 = a2->f64[1];
    float64_t v47 = a2[3].f64[0];
    float64_t v48 = a2[3].f64[1];
    float64_t v50 = a2[4].f64[0];
    float64_t v49 = a2[4].f64[1];
    float64_t v51 = a2[1].f64[0];
    float64_t v52 = a2[1].f64[1];
    float64_t v54 = a2[2].f64[0];
    float64_t v53 = a2[2].f64[1];
    int v60 = 134285825;
    float64_t v61 = v53;
    __int16 v62 = 2049;
    float64_t v63 = v45;
    __int16 v64 = 2049;
    float64_t v65 = v46;
    __int16 v66 = 2049;
    float64_t v67 = v51;
    __int16 v68 = 2049;
    *(float64_t *)double v69 = v47;
    *(_WORD *)&v69[8] = 2049;
    float64_t v70 = v48;
    __int16 v71 = 2049;
    float64_t v72 = v49;
    __int16 v73 = 2049;
    float64_t v74 = v50;
    __int16 v75 = 2049;
    float64_t v76 = v52;
    __int16 v77 = 2049;
    float64_t v78 = v54;
    uint64_t v55 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "SteadinessModel::Result CLMobility::SteadinessModelTemporalEntropy::runSteadinessModel(CFAbsoluteTime, const Features &, const std::vector<BoutMetrics> &, const CLBodyMetrics &) const", "%s\n", v55);
    if (v55 != buf) {
      free(v55);
    }
  }
  if (__p)
  {
    uint64_t v58 = __p;
    operator delete(__p);
  }
}

void sub_100EF0D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100EF0DA8(double *a1)
{
  return *a1 != -INFINITY
      && a1[1] != -INFINITY
      && a1[2] != -INFINITY
      && a1[3] != -INFINITY
      && a1[4] != -INFINITY
      && a1[5] != -INFINITY
      && a1[6] != -INFINITY
      && a1[7] != -INFINITY
      && a1[8] != -INFINITY
      && a1[9] != -INFINITY;
}

void sub_100EF0E58(uint64_t *a1@<X1>, uint64_t a2@<X8>, double a3@<D0>)
{
  int64x2_t v5 = vdupq_n_s64(0xFFF0000000000000);
  *(int64x2_t *)a2 = v5;
  *(int64x2_t *)(a2 + 16) = v5;
  *(int64x2_t *)(a2 + 32) = v5;
  *(int64x2_t *)(a2 + 48) = v5;
  *(int64x2_t *)(a2 + 64) = v5;
  uint64_t v129 = 0;
  __int16 v130 = 0;
  uint64_t v131 = 0;
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  *(void *)CLMotionActivity buf = &v129;
  if (v6 == v7)
  {
    BOOL v11 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    do
    {
      double v8 = *(double *)(v6 + 8);
      if (v8 < a3 && v8 >= a3 + -2419200.0) {
        sub_100708E0C((void ***)buf, (_OWORD *)v6);
      }
      v6 += 224;
    }
    while (v6 != v7);
    uint64_t v10 = v129;
    BOOL v11 = v130;
  }
  long long __p = 0;
  double v127 = 0;
  int v128 = 0;
  int v123 = 0;
  int v124 = 0;
  double v125 = 0;
  int v120 = 0;
  uint64_t v121 = 0;
  __int16 v122 = 0;
  uint64_t v117 = 0;
  unint64_t v118 = 0;
  long long v119 = 0;
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  unint64_t v116 = 0;
  uint64_t v111 = 0;
  long long v112 = 0;
  long long v113 = 0;
  if (v10 == v11)
  {
    long long v97 = 0;
    float64_t v96 = 0;
  }
  else
  {
    do
    {
      if (*((_DWORD *)v10 + 9) >= 0x15u)
      {
        uint64_t v12 = v10[8];
        if (((v12 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
          || (v12 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001
          || v12 == 0x7FF0000000000000
          || (v12 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          double v16 = v127;
          if (v127 >= v128)
          {
            long long v18 = (char *)__p;
            uint64_t v19 = (v127 - (unsigned char *)__p) >> 3;
            unint64_t v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 61) {
              goto LABEL_213;
            }
            uint64_t v21 = v128 - (unsigned char *)__p;
            if ((v128 - (unsigned char *)__p) >> 2 > v20) {
              unint64_t v20 = v21 >> 2;
            }
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v22 = v20;
            }
            if (v22)
            {
              int v23 = (char *)sub_1000DA54C((uint64_t)&v128, v22);
              long long v18 = (char *)__p;
              double v16 = v127;
              uint64_t v12 = v10[8];
            }
            else
            {
              int v23 = 0;
            }
            int v24 = &v23[8 * v19];
            *(void *)int v24 = v12;
            uint64_t v17 = v24 + 8;
            while (v16 != v18)
            {
              uint64_t v25 = *((void *)v16 - 1);
              v16 -= 8;
              *((void *)v24 - 1) = v25;
              v24 -= 8;
            }
            long long __p = v24;
            double v127 = v17;
            int v128 = &v23[8 * v22];
            if (v18) {
              operator delete(v18);
            }
          }
          else
          {
            *(void *)double v127 = v12;
            uint64_t v17 = v16 + 8;
          }
          double v127 = v17;
        }
        uint64_t v26 = v10[9];
        if (((v26 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
          || (v26 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001
          || v26 == 0x7FF0000000000000
          || (v26 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          float64_t v30 = v124;
          if (v124 >= v125)
          {
            float64_t v32 = (char *)v123;
            uint64_t v33 = (v124 - (unsigned char *)v123) >> 3;
            unint64_t v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 61) {
              goto LABEL_213;
            }
            uint64_t v35 = v125 - (unsigned char *)v123;
            if ((v125 - (unsigned char *)v123) >> 2 > v34) {
              unint64_t v34 = v35 >> 2;
            }
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v36 = v34;
            }
            if (v36)
            {
              float64_t v37 = (char *)sub_1000DA54C((uint64_t)&v125, v36);
              float64_t v32 = (char *)v123;
              float64_t v30 = v124;
              uint64_t v26 = v10[9];
            }
            else
            {
              float64_t v37 = 0;
            }
            float64_t v38 = &v37[8 * v33];
            *(void *)float64_t v38 = v26;
            float64_t v31 = v38 + 8;
            while (v30 != v32)
            {
              uint64_t v39 = *((void *)v30 - 1);
              v30 -= 8;
              *((void *)v38 - 1) = v39;
              v38 -= 8;
            }
            int v123 = v38;
            int v124 = v31;
            double v125 = &v37[8 * v36];
            if (v32) {
              operator delete(v32);
            }
          }
          else
          {
            *(void *)int v124 = v26;
            float64_t v31 = v30 + 8;
          }
          int v124 = v31;
        }
        uint64_t v40 = v10[10];
        if (((v40 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
          || (v40 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001
          || v40 == 0x7FF0000000000000
          || (v40 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          uint64_t v44 = v121;
          if (v121 >= v122)
          {
            float64_t v46 = (char *)v120;
            uint64_t v47 = (v121 - (unsigned char *)v120) >> 3;
            unint64_t v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 61) {
              goto LABEL_213;
            }
            uint64_t v49 = v122 - (unsigned char *)v120;
            if ((v122 - (unsigned char *)v120) >> 2 > v48) {
              unint64_t v48 = v49 >> 2;
            }
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v50 = v48;
            }
            if (v50)
            {
              float64_t v51 = (char *)sub_1000DA54C((uint64_t)&v122, v50);
              float64_t v46 = (char *)v120;
              uint64_t v44 = v121;
              uint64_t v40 = v10[10];
            }
            else
            {
              float64_t v51 = 0;
            }
            float64_t v52 = &v51[8 * v47];
            *(void *)float64_t v52 = v40;
            float64_t v45 = v52 + 8;
            while (v44 != v46)
            {
              uint64_t v53 = *((void *)v44 - 1);
              v44 -= 8;
              *((void *)v52 - 1) = v53;
              v52 -= 8;
            }
            int v120 = v52;
            uint64_t v121 = v45;
            __int16 v122 = &v51[8 * v50];
            if (v46) {
              operator delete(v46);
            }
          }
          else
          {
            *(void *)uint64_t v121 = v40;
            float64_t v45 = v44 + 8;
          }
          uint64_t v121 = v45;
        }
        uint64_t v54 = v10[11];
        if (((v54 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
          || (v54 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001
          || v54 == 0x7FF0000000000000
          || (v54 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          uint64_t v58 = v118;
          if (v118 >= v119)
          {
            int v60 = (char *)v117;
            uint64_t v61 = (v118 - (unsigned char *)v117) >> 3;
            unint64_t v62 = v61 + 1;
            if ((unint64_t)(v61 + 1) >> 61) {
              goto LABEL_213;
            }
            uint64_t v63 = v119 - (unsigned char *)v117;
            if ((v119 - (unsigned char *)v117) >> 2 > v62) {
              unint64_t v62 = v63 >> 2;
            }
            if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v64 = v62;
            }
            if (v64)
            {
              float64_t v65 = (char *)sub_1000DA54C((uint64_t)&v119, v64);
              int v60 = (char *)v117;
              uint64_t v58 = v118;
              uint64_t v54 = v10[11];
            }
            else
            {
              float64_t v65 = 0;
            }
            __int16 v66 = &v65[8 * v61];
            *(void *)__int16 v66 = v54;
            uint64_t v59 = v66 + 8;
            while (v58 != v60)
            {
              uint64_t v67 = *((void *)v58 - 1);
              v58 -= 8;
              *((void *)v66 - 1) = v67;
              v66 -= 8;
            }
            uint64_t v117 = v66;
            unint64_t v118 = v59;
            long long v119 = &v65[8 * v64];
            if (v60) {
              operator delete(v60);
            }
          }
          else
          {
            *(void *)unint64_t v118 = v54;
            uint64_t v59 = v58 + 8;
          }
          unint64_t v118 = v59;
        }
        uint64_t v68 = v10[12];
        if (((v68 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
          || (v68 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001
          || v68 == 0x7FF0000000000000
          || (v68 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          float64_t v72 = v115;
          if (v115 >= v116)
          {
            float64_t v74 = (char *)v114;
            uint64_t v75 = (v115 - (unsigned char *)v114) >> 3;
            unint64_t v76 = v75 + 1;
            if ((unint64_t)(v75 + 1) >> 61) {
              goto LABEL_213;
            }
            uint64_t v77 = v116 - (unsigned char *)v114;
            if ((v116 - (unsigned char *)v114) >> 2 > v76) {
              unint64_t v76 = v77 >> 2;
            }
            if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v78 = v76;
            }
            if (v78)
            {
              uint64_t v79 = (char *)sub_1000DA54C((uint64_t)&v116, v78);
              float64_t v74 = (char *)v114;
              float64_t v72 = v115;
              uint64_t v68 = v10[12];
            }
            else
            {
              uint64_t v79 = 0;
            }
            __int16 v80 = &v79[8 * v75];
            *(void *)__int16 v80 = v68;
            __int16 v73 = v80 + 8;
            while (v72 != v74)
            {
              uint64_t v81 = *((void *)v72 - 1);
              v72 -= 8;
              *((void *)v80 - 1) = v81;
              v80 -= 8;
            }
            uint64_t v114 = v80;
            uint64_t v115 = v73;
            unint64_t v116 = &v79[8 * v78];
            if (v74) {
              operator delete(v74);
            }
          }
          else
          {
            *(void *)uint64_t v115 = v68;
            __int16 v73 = v72 + 8;
          }
          uint64_t v115 = v73;
        }
        uint64_t v82 = v10[13];
        if (((v82 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
          || (v82 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001
          || v82 == 0x7FF0000000000000
          || (v82 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          __int16 v86 = v112;
          if (v112 >= v113)
          {
            float64_t v88 = (char *)v111;
            uint64_t v89 = (v112 - (unsigned char *)v111) >> 3;
            unint64_t v90 = v89 + 1;
            if ((unint64_t)(v89 + 1) >> 61) {
LABEL_213:
            }
              sub_1001D7FD4();
            uint64_t v91 = v113 - (unsigned char *)v111;
            if ((v113 - (unsigned char *)v111) >> 2 > v90) {
              unint64_t v90 = v91 >> 2;
            }
            if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v92 = v90;
            }
            if (v92)
            {
              __int16 v93 = (char *)sub_1000DA54C((uint64_t)&v113, v92);
              float64_t v88 = (char *)v111;
              __int16 v86 = v112;
              uint64_t v82 = v10[13];
            }
            else
            {
              __int16 v93 = 0;
            }
            float64_t v94 = &v93[8 * v89];
            *(void *)float64_t v94 = v82;
            uint64_t v87 = v94 + 8;
            while (v86 != v88)
            {
              uint64_t v95 = *((void *)v86 - 1);
              v86 -= 8;
              *((void *)v94 - 1) = v95;
              v94 -= 8;
            }
            uint64_t v111 = v94;
            long long v112 = v87;
            long long v113 = &v93[8 * v92];
            if (v88) {
              operator delete(v88);
            }
          }
          else
          {
            *(void *)long long v112 = v82;
            uint64_t v87 = v86 + 8;
          }
          long long v112 = v87;
        }
      }
      v10 += 28;
    }
    while (v10 != v11);
    long long v97 = __p;
    float64_t v96 = v127;
  }
  if ((unint64_t)(v96 - v97) > 8)
  {
    double v98 = sub_101136E84((double **)&__p);
    *(long double *)(a2 + 40) = log(v98);
  }
  if ((unint64_t)(v118 - (unsigned char *)v117) >= 9)
  {
    double v99 = sub_101136E84((double **)&v117);
    *(long double *)(a2 + 8) = log(v99);
    double v100 = sub_10126DBE0((uint64_t)&v117, 95);
    double v101 = sub_10126DBE0((uint64_t)&v117, 5);
    *(long double *)a2 = log(v100 - v101);
    double v102 = sub_10126DBE0((uint64_t)&v117, 5);
    *(long double *)(a2 + 16) = log(v102);
  }
  if ((unint64_t)(v124 - (unsigned char *)v123) >= 9)
  {
    double v103 = sub_10126DBE0((uint64_t)&v123, 5);
    *(long double *)(a2 + 48) = log(v103);
    double v104 = sub_10126DBE0((uint64_t)&v123, 95);
    *(long double *)(a2 + 56) = log(v104);
  }
  if ((unint64_t)(v121 - (unsigned char *)v120) >= 9)
  {
    double v105 = sub_10126DBE0((uint64_t)&v120, 5);
    *(long double *)(a2 + 72) = log(v105);
    double v106 = sub_101136E84((double **)&v120);
    *(long double *)(a2 + 64) = log(v106);
  }
  if ((unint64_t)(v115 - (unsigned char *)v114) >= 9)
  {
    double v107 = sub_10126DBE0((uint64_t)&v114, 5);
    *(long double *)(a2 + 24) = log(v107);
  }
  if ((unint64_t)(v112 - (unsigned char *)v111) >= 9)
  {
    double v108 = sub_10126DBE0((uint64_t)&v111, 5);
    *(long double *)(a2 + 32) = log(v108);
  }
  if (qword_102418FA0 != -1) {
    dispatch_once(&qword_102418FA0, &stru_1023027B8);
  }
  long long v109 = qword_102418FA8;
  if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)CLMotionActivity buf = 134349824;
    *(double *)&uint8_t buf[4] = a3;
    __int16 v141 = 2050;
    uint64_t v142 = 0x6DB6DB6DB6DB6DB7 * ((v130 - (unsigned char *)v129) >> 5);
    __int16 v143 = 2050;
    uint64_t v144 = (v127 - (unsigned char *)__p) >> 3;
    __int16 v145 = 2050;
    uint64_t v146 = (v118 - (unsigned char *)v117) >> 3;
    _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEBUG, "SteadinessModelTemporalEntropy::extractFeatures,classificationTime,%{public}.2f,numBouts,%{public}lu,numStepLengthEntropy,%{public}lu,cycleTimeEntropy,%{public}lu", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_1023027B8);
    }
    int v132 = 134349824;
    double v133 = a3;
    __int16 v134 = 2050;
    uint64_t v135 = 0x6DB6DB6DB6DB6DB7 * ((v130 - (unsigned char *)v129) >> 5);
    __int16 v136 = 2050;
    uint64_t v137 = (v127 - (unsigned char *)__p) >> 3;
    __int16 v138 = 2050;
    uint64_t v139 = (v118 - (unsigned char *)v117) >> 3;
    uint64_t v110 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "Features CLMobility::SteadinessModelTemporalEntropy::extractFeatures(CFAbsoluteTime, const std::vector<BoutMetrics> &) const", "%s\n", v110);
    if (v110 != buf) {
      free(v110);
    }
  }
  if (v111)
  {
    long long v112 = (char *)v111;
    operator delete(v111);
  }
  if (v114)
  {
    uint64_t v115 = (char *)v114;
    operator delete(v114);
  }
  if (v117)
  {
    unint64_t v118 = (char *)v117;
    operator delete(v117);
  }
  if (v120)
  {
    uint64_t v121 = (char *)v120;
    operator delete(v120);
  }
  if (v123)
  {
    int v124 = (char *)v123;
    operator delete(v123);
  }
  if (__p)
  {
    double v127 = (char *)__p;
    operator delete(__p);
  }
  if (v129)
  {
    __int16 v130 = v129;
    operator delete(v129);
  }
}

void sub_100EF1890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a24) {
    operator delete(a24);
  }
  if (a27) {
    operator delete(a27);
  }
  if (a30) {
    operator delete(a30);
  }
  if (a33) {
    operator delete(a33);
  }
  if (a36) {
    operator delete(a36);
  }
  _Unwind_Resume(exception_object);
}

void sub_100EF1920(id a1)
{
  qword_102418FA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

void sub_100EF1950(uint64_t a1)
{
}

void sub_100EF19A0(_Unwind_Exception *a1)
{
  sub_101039104(v1);
  _Unwind_Resume(a1);
}

void sub_100EF19B4(float32x2_t *a1, long long *a2)
{
  long long v3 = a2[1];
  long long v16 = *a2;
  long long v17 = v3;
  v18[0] = a2[2];
  *(_OWORD *)((char *)v18 + 13) = *(long long *)((char *)a2 + 45);
  if (sub_10103A350())
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_102302848);
    }
    unint64_t v4 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)CLMotionActivity buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Device still has original rear camera. Using unit-specific calibration info", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_102302848);
      }
      LOWORD(v19) = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV5::initializeCalibrationParamaters(const UInt8 *, int)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    int64x2_t v5 = (__int16 *)((char *)&v16 + 7);
LABEL_27:
    sub_101039F24(a1, v5);
    return;
  }
  unsigned int v6 = sub_10103A470();
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_102302848);
  }
  uint64_t v7 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)CLMotionActivity buf = 67109120;
    unsigned int v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Rear camera was replaced. VCM actuator ID is %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_102302848);
    }
    int v19 = 67109120;
    unsigned int v20 = v6;
    float v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV5::initializeCalibrationParamaters(const UInt8 *, int)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  if (v6 == 4)
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_102302848);
    }
    long long v9 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)CLMotionActivity buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Using generic Alps calibration info", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_102302848);
      }
      LOWORD(v19) = 0;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV5::initializeCalibrationParamaters(const UInt8 *, int)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    int64x2_t v5 = (__int16 *)((char *)v18 + 11);
    goto LABEL_27;
  }
  if (v6 == 3)
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_102302848);
    }
    double v8 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)CLMotionActivity buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Using generic Mitsumi calibration info", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_102302848);
      }
      LOWORD(v19) = 0;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV5::initializeCalibrationParamaters(const UInt8 *, int)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    int64x2_t v5 = (__int16 *)((char *)&v17 + 9);
    goto LABEL_27;
  }
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_102302848);
  }
  uint64_t v10 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)CLMotionActivity buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Unrecongized VCM actuator. Not performing compensation", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_102302848);
    }
    LOWORD(v19) = 0;
    BOOL v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMagnetometerCoexistenceNotifierCpasV5::initializeCalibrationParamaters(const UInt8 *, int)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
}

void sub_100EF2078(_DWORD *a1)
{
  sub_101039104(a1);

  operator delete();
}

void sub_100EF20B0(id a1)
{
  qword_1024190A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_100EF230C(uint64_t a1, void *a2)
{
  if (vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 256)) < *(double *)(a1 + 272) || !*(unsigned char *)(a1 + 288)) {
    return;
  }
  [a2 accuracy];
  if (v4 > 140.0)
  {
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_102302980);
    }
    int64x2_t v5 = qword_1024191E8;
    if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
    {
      [a2 accuracy];
      *(_DWORD *)CLMotionActivity buf = 134217984;
      uint64_t v55 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "phone, not sending altitude to watch, uncertainty %f", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_102302980);
    }
    [a2 accuracy];
    *(_DWORD *)int v42 = 134217984;
    *(void *)&v42[4] = v7;
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompanionNotifierCompanion::onAbsoluteAltitudeUpdate(CLBarometerCalibrationAbsoluteAltitude *)", "%s\n", v8);
    if (v8 == (char *)buf) {
      return;
    }
LABEL_49:
    free(v8);
    return;
  }
  [a2 altitude];
  if (v9 <= -900.0 || ([a2 altitude], v10 >= 10000.0))
  {
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_102302980);
    }
    float v13 = qword_1024191E8;
    if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CLMotionActivity buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "invalid altitude, not sending to watch", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_102302980);
      }
      *(_WORD *)int v42 = 0;
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCompanionNotifierCompanion::onAbsoluteAltitudeUpdate(CLBarometerCalibrationAbsoluteAltitude *)", "%s\n");
LABEL_48:
      if (v8 == (char *)buf) {
        return;
      }
      goto LABEL_49;
    }
  }
  else
  {
    [a2 timestamp];
    v53[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    [a2 altitude];
    v53[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    [a2 accuracy];
    v53[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    [a2 precision];
    v53[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    v53[4] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [a2 statusInfo]);
    uint64_t v40 = 0;
    BOOL v11 = +[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", +[NSArray arrayWithObjects:v53 count:5], 0, &v40);
    if (v40)
    {
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_102302980);
      }
      uint64_t v12 = qword_1024191E8;
      if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)CLMotionActivity buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning error serializing Absolute Altitude entry", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191E0 != -1) {
          dispatch_once(&qword_1024191E0, &stru_102302980);
        }
        *(_WORD *)int v42 = 0;
LABEL_43:
        double v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompanionNotifierCompanion::onAbsoluteAltitudeUpdate(CLBarometerCalibrationAbsoluteAltitude *)", "%s\n");
        goto LABEL_48;
      }
    }
    else
    {
      uint64_t v14 = v11;
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_102302980);
      }
      uint64_t v15 = qword_1024191E8;
      if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEBUG))
      {
        [a2 timestamp];
        uint64_t v17 = v16;
        [a2 altitude];
        uint64_t v19 = v18;
        [a2 accuracy];
        uint64_t v21 = v20;
        [a2 precision];
        uint64_t v23 = v22;
        id v24 = [a2 statusInfo];
        [a2 filteredPressure];
        *(_DWORD *)CLMotionActivity buf = 134219264;
        uint64_t v55 = v17;
        __int16 v56 = 2048;
        uint64_t v57 = v19;
        __int16 v58 = 2048;
        uint64_t v59 = v21;
        __int16 v60 = 2048;
        uint64_t v61 = v23;
        __int16 v62 = 2048;
        id v63 = v24;
        __int16 v64 = 2048;
        uint64_t v65 = v25;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "sending altimeter data to watch: timestamp %f, altitude %f, accuracy %f, precision %f, status info %lu, filteredPressure, %f", buf, 0x3Eu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191E0 != -1) {
          dispatch_once(&qword_1024191E0, &stru_102302980);
        }
        [a2 timestamp];
        uint64_t v30 = v29;
        [a2 altitude];
        uint64_t v32 = v31;
        [a2 accuracy];
        uint64_t v34 = v33;
        [a2 precision];
        uint64_t v36 = v35;
        id v37 = [a2 statusInfo];
        [a2 filteredPressure];
        *(_DWORD *)int v42 = 134219264;
        *(void *)&v42[4] = v30;
        __int16 v43 = 2048;
        uint64_t v44 = v32;
        __int16 v45 = 2048;
        uint64_t v46 = v34;
        __int16 v47 = 2048;
        uint64_t v48 = v36;
        __int16 v49 = 2048;
        id v50 = v37;
        __int16 v51 = 2048;
        uint64_t v52 = v38;
        uint64_t v39 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompanionNotifierCompanion::onAbsoluteAltitudeUpdate(CLBarometerCalibrationAbsoluteAltitude *)", "%s\n", v39);
        if (v39 != (char *)buf) {
          free(v39);
        }
      }
      sub_1005E26F4(120.0, a1, 20, v14, 300, 1, 0, 0, 0, 0);
      *(CFAbsoluteTime *)(a1 + 256) = CFAbsoluteTimeGetCurrent();
      v41[0] = +[NSNumber numberWithDouble:CFAbsoluteTimeGetCurrent()];
      [a2 filteredPressure];
      v41[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
      uint64_t v26 = +[NSArray arrayWithObjects:v41 count:2];
      *(void *)int v42 = 0;
      float64_t v27 = +[NSJSONSerialization dataWithJSONObject:v26 options:0 error:v42];
      if (!*(void *)v42)
      {
        sub_1005E26F4(120.0, a1, 36, v27, 300, 1, 0, 0, 0, 0);
        return;
      }
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_102302980);
      }
      float64_t v28 = qword_1024191E8;
      if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)CLMotionActivity buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#Warning error serializing Filtered Pressure entry", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191E0 != -1) {
          dispatch_once(&qword_1024191E0, &stru_102302980);
        }
        goto LABEL_43;
      }
    }
  }
}

void sub_100EF2C3C(uint64_t a1, void *a2)
{
}

void sub_100EF2F14(_Unwind_Exception *a1)
{
  double v4 = *(std::__shared_weak_count **)(v2 - 56);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  uint64_t v5 = v1[20];
  v1[20] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_1005E2398(v1);
  _Unwind_Resume(a1);
}

void sub_100EF2F88(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023029A0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    double v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCompanionNotifierCompanion::onOdometerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023029A0);
    }
    double v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)CLMotionActivity buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCompanionNotifierCompanion::onOdometerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100EF46D8((unsigned char *)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100EF3144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_100EF3164(uint64_t a1)
{
  return sub_100EF316C(*(void *)(a1 + 32));
}

id sub_100EF316C(uint64_t a1)
{
  id result = sub_1005E2384();
  if (result && !*(unsigned char *)(a1 + 200) && *(unsigned char *)(a1 + 109))
  {
    if (*(unsigned char *)(a1 + 110))
    {
      sub_1005E26F4(120.0, a1, 15, 0, 300, 0, 0, 0, 0, 0);
      id result = [*(id *)(a1 + 208) invalidate];
      *(unsigned char *)(a1 + 200) = 1;
    }
  }
  return result;
}

void sub_100EF31F4(uint64_t a1)
{
}

void sub_100EF31FC(uint64_t a1)
{
  if (sub_1005E2384())
  {
    sub_100EF41A8(a1, *(unsigned __int8 *)(a1 + 224));
    uint64_t v2 = *(void **)(a1 + 216);
    double v3 = 1.79769313e308;
LABEL_11:
    [v2 setNextFireDelay:v3];
    return;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  [(id)qword_10248A0E8 pairedDeviceLastSeenTimestamp];
  if (Current - v5 <= 3599.0)
  {
    uint64_t v2 = *(void **)(a1 + 216);
    double v3 = 3600.0;
    goto LABEL_11;
  }
  if (qword_102419210 != -1) {
    dispatch_once(&qword_102419210, &stru_1023029C0);
  }
  uint64_t v6 = qword_102419218;
  if (os_log_type_enabled((os_log_t)qword_102419218, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CLMotionActivity buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Spectator subscriptions expired", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419210 != -1) {
      dispatch_once(&qword_102419210, &stru_1023029C0);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompanionNotifierCompanion::checkAndToggleSpectatorSources()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_100EF41A8(a1, 0);
  *(unsigned char *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 289) = 0;
  sub_100EF4438(a1, 0);
}

uint64_t sub_100EF3474(uint64_t a1)
{
  *(void *)a1 = off_102302878;
  uint64_t v2 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  *(void *)(a1 + 248) = 0;
  uint64_t v3 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return sub_1005E2398((void *)a1);
}

void sub_100EF3548(uint64_t a1)
{
  sub_100EF3474(a1);

  operator delete();
}

void sub_100EF3580(uint64_t a1, int a2, void *a3)
{
  if (qword_102419210 != -1) {
    dispatch_once(&qword_102419210, &stru_1023029C0);
  }
  uint64_t v6 = qword_102419218;
  if (os_log_type_enabled((os_log_t)qword_102419218, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)CLMotionActivity buf = 67109376;
    LODWORD(v52[0]) = a2;
    WORD2(v52[0]) = 2048;
    *(void *)((char *)v52 + 6) = [a3 length];
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Received message,type,%d,size,%lu", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419210 != -1) {
      dispatch_once(&qword_102419210, &stru_1023029C0);
    }
    int v49 = 67109376;
    LODWORD(v50[0]) = a2;
    WORD2(v50[0]) = 2048;
    *(void *)((char *)v50 + 6) = [a3 length];
    int v42 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCompanionNotifierCompanion::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)", "%s\n", v42);
    if (v42 != (char *)buf) {
      free(v42);
    }
  }
  *(CFAbsoluteTime *)(a1 + 192) = CFAbsoluteTimeGetCurrent();
  switch(a2)
  {
    case 0:
      if (!*(unsigned char *)(a1 + 168))
      {
        [*(id *)(*(void *)(a1 + 160) + 16) register:*(void *)(*(void *)(a1 + 160) + 8) forNotification:2 registrationInfo:0];
        [*(id *)(*(void *)(a1 + 160) + 16) register:*(void *)(*(void *)(a1 + 160) + 8) forNotification:4 registrationInfo:0];
        *(unsigned char *)(a1 + 168) = 1;
      }
      goto LABEL_69;
    case 1:
      if (*(unsigned char *)(a1 + 168))
      {
        [*(id *)(*(void *)(a1 + 160) + 16) unregister:*(void *)(*(void *)(a1 + 160) + 8) forNotification:2];
        [*(id *)(*(void *)(a1 + 160) + 16) unregister:*(void *)(*(void *)(a1 + 160) + 8) forNotification:4];
        *(unsigned char *)(a1 + 168) = 0;
      }
      goto LABEL_69;
    case 4:
      if (!*(unsigned char *)(a1 + 169))
      {
        [*(id *)(*(void *)(a1 + 160) + 16) register:*(void *)(*(void *)(a1 + 160) + 8) forNotification:3 registrationInfo:0];
        [*(id *)(*(void *)(a1 + 160) + 16) register:*(void *)(*(void *)(a1 + 160) + 8) forNotification:7 registrationInfo:0];
        *(unsigned char *)(a1 + 169) = 1;
      }
      goto LABEL_69;
    case 5:
      if (*(unsigned char *)(a1 + 169))
      {
        [*(id *)(*(void *)(a1 + 160) + 16) unregister:*(void *)(*(void *)(a1 + 160) + 8) forNotification:3];
        [*(id *)(*(void *)(a1 + 160) + 16) unregister:*(void *)(*(void *)(a1 + 160) + 8) forNotification:7];
        *(unsigned char *)(a1 + 169) = 0;
      }
      goto LABEL_69;
    case 7:
      id v48 = 0;
      id v9 = +[NSJSONSerialization JSONObjectWithData:a3 options:0 error:&v48];
      if (!v48)
      {
        double v10 = v9;
        if ([v9 count] == (id)1)
        {
          id v11 = [[v10 firstObject] integerValue];
          *(void *)(a1 + 176) = v11;
          uint64_t v12 = *(void **)(a1 + 232);
          if (v12) {
            [v12 setSession:v11];
          }
          else {
            [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor", v11), "proxyForService:", @"CLStepCountNotifier"), "strideCalibratorSetSession:", *(void *)(a1 + 176)];
          }
          id v39 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLRunningAggregatorAWD"];
          uint64_t v40 = *(void *)(a1 + 176);
LABEL_67:
          [v39 updateSession:v40];
          goto LABEL_69;
        }
      }
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1023029E0);
      }
      uint64_t v35 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
      {
        id v36 = [[objc_msgSend(v48, "description") UTF8String];
        *(_DWORD *)CLMotionActivity buf = 136315138;
        v52[0] = v36;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "#Warning Error deserializing session override: %s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_1023029E0);
        }
        id v37 = [[objc_msgSend(v48, "description") UTF8String];
        int v49 = 136315138;
        v50[0] = v37;
        goto LABEL_63;
      }
      break;
    case 8:
      *(void *)(a1 + 176) = 0;
      int v13 = *(void **)(a1 + 232);
      if (v13) {
        [v13 setSession:0];
      }
      else {
        [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLStepCountNotifier"), "strideCalibratorSetSession:", 0];
      }
      id v39 = [objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLRunningAggregatorAWD"];
      uint64_t v40 = 0;
      goto LABEL_67;
    case 11:
      *(unsigned char *)(a1 + 224) = 1;
      uint64_t v14 = a1;
      int v15 = 1;
      goto LABEL_24;
    case 12:
      *(unsigned char *)(a1 + 224) = 0;
      uint64_t v14 = a1;
      int v15 = 0;
LABEL_24:
      sub_100EF41A8(v14, v15);
      goto LABEL_69;
    case 14:
      uint64_t v16 = objc_opt_class();
      uint64_t v17 = objc_opt_class();
      uint64_t v18 = objc_opt_class();
      uint64_t v19 = objc_opt_class();
      id v20 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", +[NSSet setWithObjects:](NSSet, "setWithObjects:", v16, v17, v18, v19, objc_opt_class(), 0), a3, 0);
      id v21 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLMotionSyncStore"];
      v47[0] = _NSConcreteStackBlock;
      v47[1] = 3221225472;
      v47[2] = sub_100EF43D8;
      v47[3] = &unk_1022CA588;
      v47[4] = v20;
      uint64_t v22 = v47;
      goto LABEL_27;
    case 18:
      id v21 = [[[*(id *)(a1 + 32) vendor] proxyForService:@"CLMotionStateObserver"];
      v46[0] = _NSConcreteStackBlock;
      v46[1] = 3221225472;
      v46[2] = sub_100EF4408;
      v46[3] = &unk_1022CA588;
      v46[4] = a3;
      uint64_t v22 = v46;
LABEL_27:
      [v21 doAsync:v22];
      goto LABEL_69;
    case 21:
      [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLPredictedWalkDistanceServiceCompanion"), "receivePredictedWalkDistanceBout:", a3];
      goto LABEL_69;
    case 22:
      sub_100EF4438(a1, 1);
      goto LABEL_69;
    case 24:
      if (sub_101523584()) {
        goto LABEL_69;
      }
      id v23 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLKappaNotifier"];
      uint64_t v24 = 65793;
LABEL_37:
      [v23 collect:v24 isLocal:0];
      goto LABEL_69;
    case 25:
      if (sub_101523584()) {
        goto LABEL_69;
      }
      id v7 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLKappaNotifier"];
      uint64_t v8 = 257;
LABEL_34:
      [v7 dontcollect:v8 isLocal:0];
      goto LABEL_69;
    case 26:
      id v23 = [[[*(id *)(a1 + 32) vendor] proxyForService:@"CLKappaNotifier"];
      uint64_t v24 = 0x101000001;
      goto LABEL_37;
    case 27:
    case 29:
      id v7 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLKappaNotifier"];
      uint64_t v8 = 16777217;
      goto LABEL_34;
    case 28:
      id v23 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLKappaNotifier"];
      uint64_t v24 = 0x100000101000001;
      goto LABEL_37;
    case 30:
      [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLKappaNotifier"), "companionHeartbeat:", a3];
      goto LABEL_69;
    case 31:
      [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLVO2MaxCloudKitManager"), "receiveVO2MaxCloudKitDailyStatsFromWatch:", a3];
      goto LABEL_69;
    case 34:
      id v48 = 0;
      uint64_t v45 = objc_opt_class();
      uint64_t v44 = objc_opt_class();
      uint64_t v27 = objc_opt_class();
      uint64_t v28 = objc_opt_class();
      uint64_t v29 = objc_opt_class();
      uint64_t v30 = objc_opt_class();
      uint64_t v31 = objc_opt_class();
      uint64_t v32 = objc_opt_class();
      id v33 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", +[NSSet setWithObjects:](NSSet, "setWithObjects:", v45, v44, v27, v28, v29, v30, v31, v32, objc_opt_class(), 0), a3, &v48);
      if (v48)
      {
        if (qword_102419210 != -1) {
          dispatch_once(&qword_102419210, &stru_1023029C0);
        }
        uint64_t v34 = qword_102419218;
        if (os_log_type_enabled((os_log_t)qword_102419218, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CLMotionActivity buf = 138412290;
          v52[0] = v48;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "Failed to deserialize healthColdStorageUpdate : %@ ", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419210 != -1) {
            dispatch_once(&qword_102419210, &stru_1023029C0);
          }
          int v49 = 138412290;
          v50[0] = v48;
LABEL_63:
          uint64_t v38 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLCompanionNotifierCompanion::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)", "%s\n", v38);
          if (v38 != (char *)buf) {
            free(v38);
          }
        }
      }
      else
      {
        [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CMHealthColdStorageCompanionSyncService"), "receiveColdStorageDataUpdate:", v33];
LABEL_69:
        int v41 = *(unsigned char *)(a1 + 168) || *(unsigned char *)(a1 + 169) || *(void *)(a1 + 176) != 0;
        sub_1005E2A74(a1, v41);
      }
      break;
    case 37:
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_1023029E0);
      }
      uint64_t v25 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v26 = [a3 length];
        *(_DWORD *)CLMotionActivity buf = 67109120;
        LODWORD(v52[0]) = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Phone received workout distance core analytics data from watch. Message size: %d bytes", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_1023029E0);
        }
        int v49 = 67109120;
        LODWORD(v50[0]) = [a3 length];
        __int16 v43 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCompanionNotifierCompanion::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)", "%s\n", v43);
        if (v43 != (char *)buf) {
          free(v43);
        }
      }
      [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLStepCountNotifier"), "receiveWorkoutDistanceAnalyticsMessage:", a3];
      goto LABEL_69;
    default:
      goto LABEL_69;
  }
}

void sub_100EF41A8(uint64_t a1, int a2)
{
  if (sub_10073F24C())
  {
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_102302A20);
    }
    double v4 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(unsigned __int8 *)(a1 + 224);
      int v6 = *(unsigned __int8 *)(a1 + 110);
      *(_DWORD *)CLMotionActivity buf = 67109632;
      int v9 = a2;
      __int16 v10 = 1024;
      int v11 = v5;
      __int16 v12 = 1024;
      int v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "coarse elevation src,enable,%d,elevationSpectator,%d,fitnessTracking,%d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_102302A20);
      }
      id v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompanionNotifierCompanion::toggleCoarseElevationSource(BOOL)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    if (a2)
    {
      if (*(unsigned char *)(a1 + 224))
      {
        if (*(unsigned char *)(a1 + 110))
        {
          [*(id *)(*(void *)(a1 + 160) + 16) register:*(void *)(*(void *)(a1 + 160) + 8) forNotification:5 registrationInfo:0];
          return;
        }
      }
      else if (*(unsigned char *)(a1 + 110))
      {
        return;
      }
    }
    [*(id *)(*(void *)(a1 + 160) + 16) unregister:*(void *)(*(void *)(a1 + 160) + 8) forNotification:5];
  }
}

uint64_t sub_100EF43D8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 224))(a2, *(void *)(a1 + 32));
}

uint64_t sub_100EF4408(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 208))(a2, *(void *)(a1 + 32));
}

void sub_100EF4438(uint64_t a1, int a2)
{
  if (a2)
  {
    if (!*(unsigned char *)(a1 + 288) && sub_1005E2384())
    {
      [*(id *)(a1 + 248) registerClient:*(void *)(a1 + 240) forNotification:1];
      *(unsigned char *)(a1 + 288) = 1;
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_102302980);
      }
      uint64_t v3 = qword_1024191E8;
      if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)CLMotionActivity buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "supported watch connected, phone subscribes to absolute altitude updates", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191E0 == -1)
        {
LABEL_19:
          int v5 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompanionNotifierCompanion::toggleBarometerCalibration(BOOL)", "%s\n", v5);
          if (v5 != (char *)buf) {
            free(v5);
          }
          return;
        }
LABEL_21:
        dispatch_once(&qword_1024191E0, &stru_102302980);
        goto LABEL_19;
      }
    }
  }
  else if (*(unsigned char *)(a1 + 288))
  {
    [*(id *)(a1 + 248) unregisterClient:*(void *)(a1 + 240) forNotification:1];
    *(unsigned char *)(a1 + 288) = 0;
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_102302980);
    }
    double v4 = qword_1024191E8;
    if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CLMotionActivity buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "supported watch disconnected, phone unsubscribes from absolute altitude updates", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191E0 == -1) {
        goto LABEL_19;
      }
      goto LABEL_21;
    }
  }
}

void sub_100EF46D8(unsigned char *a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v6 = *a3;
  if (*a3 != 7)
  {
    if (v6 == 5)
    {
      if (!a1[224])
      {
        sub_100EF41A8((uint64_t)a1, 0);
        return;
      }
      v21[0] = +[NSNumber numberWithDouble:*(double *)a4];
      v21[1] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a4 + 8)];
      uint64_t v20 = 0;
      int v11 = +[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", +[NSArray arrayWithObjects:v21 count:2], 0, &v20);
      if (v20)
      {
        if (qword_102419150 != -1) {
          dispatch_once(&qword_102419150, &stru_102302A00);
        }
        __int16 v12 = qword_102419158;
        if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)CLMotionActivity buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning error serializing Odometer(Coarse Elevation) entry", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419150 == -1) {
            goto LABEL_30;
          }
          goto LABEL_41;
        }
        return;
      }
      uint64_t v14 = v11;
      double v15 = 180.0;
      uint64_t v16 = (uint64_t)a1;
      int v17 = 13;
      uint64_t v18 = 0;
      uint64_t v19 = 1;
LABEL_39:
      sub_1005E26F4(v15, v16, v17, v14, 300, v18, 0, v19, 0, 0);
      return;
    }
    if (v6 != 4 || !a1[168]) {
      return;
    }
    v24[0] = +[NSNumber numberWithDouble:*(double *)a4];
    v24[1] = +[NSNumber numberWithDouble:*(double *)(a4 + 8)];
    void v24[2] = +[NSNumber numberWithDouble:*(double *)(a4 + 24)];
    v24[3] = +[NSNumber numberWithDouble:*(double *)(a4 + 32)];
    v24[4] = +[NSNumber numberWithDouble:*(double *)(a4 + 48)];
    v24[5] = +[NSNumber numberWithDouble:*(double *)(a4 + 16)];
    void v24[6] = +[NSNumber numberWithDouble:*(double *)(a4 + 56)];
    void v24[7] = +[NSNumber numberWithDouble:*(double *)(a4 + 64)];
    v24[8] = +[NSNumber numberWithDouble:*(double *)(a4 + 40)];
    uint64_t v20 = 0;
    id v7 = +[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", +[NSArray arrayWithObjects:v24 count:9], 0, &v20);
    if (v20)
    {
      if (qword_102419150 != -1) {
        dispatch_once(&qword_102419150, &stru_102302A00);
      }
      uint64_t v8 = qword_102419158;
      if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)CLMotionActivity buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning error serializing Odometer(GPS) entry", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419150 == -1) {
          goto LABEL_30;
        }
        goto LABEL_41;
      }
      return;
    }
    uint64_t v14 = v7;
    double v15 = 120.0;
    uint64_t v16 = (uint64_t)a1;
    int v17 = 2;
LABEL_37:
    uint64_t v18 = 1;
    uint64_t v19 = 0;
    goto LABEL_39;
  }
  if (!a1[169]) {
    return;
  }
  v22[0] = +[NSNumber numberWithDouble:*(double *)(a4 + 8)];
  v22[1] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a4 + 16)];
  v22[2] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a4 + 20)];
  uint64_t v20 = 0;
  int v9 = +[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", +[NSArray arrayWithObjects:v22 count:3], 0, &v20);
  if (!v20)
  {
    uint64_t v14 = v9;
    double v15 = 120.0;
    uint64_t v16 = (uint64_t)a1;
    int v17 = 6;
    goto LABEL_37;
  }
  if (qword_102419150 != -1) {
    dispatch_once(&qword_102419150, &stru_102302A00);
  }
  __int16 v10 = qword_102419158;
  if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CLMotionActivity buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning error serializing Odometer(Elevation) entry", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419150 == -1)
    {
LABEL_30:
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompanionNotifierCompanion::onOdometerNotification(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
      return;
    }
LABEL_41:
    dispatch_once(&qword_102419150, &stru_102302A00);
    goto LABEL_30;
  }
}

id sub_100EF4C94(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    [*(id *)(*(void *)(a1 + 160) + 16) unregister:*(void *)(*(void *)(a1 + 160) + 8) forNotification:2];
    [*(id *)(*(void *)(a1 + 160) + 16) unregister:*(void *)(*(void *)(a1 + 160) + 8) forNotification:4];
    [*(id *)(*(void *)(a1 + 160) + 16) unregister:*(void *)(*(void *)(a1 + 160) + 8) forNotification:3];
    [*(id *)(*(void *)(a1 + 160) + 16) unregister:*(void *)(*(void *)(a1 + 160) + 8) forNotification:7];
    *(_WORD *)(a1 + 168) = 0;
  }
  sub_100EF316C(a1);
  sub_100EF31FC(a1);

  return sub_100EF4D20(a1);
}

id sub_100EF4D20(uint64_t a1)
{
  id result = sub_1005E2384();
  if (result && !*(unsigned char *)(a1 + 289))
  {
    if (*(unsigned char *)(a1 + 109))
    {
      id result = sub_1005E26F4(120.0, a1, 23, 0, 300, 0, 0, 0, 0, 0);
      *(unsigned char *)(a1 + 289) = 1;
    }
  }
  return result;
}

void sub_100EF4D98(uint64_t a1)
{
  if (CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 192) > *(double *)(a1 + 184))
  {
    if (qword_102419210 != -1) {
      dispatch_once(&qword_102419210, &stru_1023029C0);
    }
    uint64_t v2 = qword_102419218;
    if (os_log_type_enabled((os_log_t)qword_102419218, OS_LOG_TYPE_DEBUG))
    {
      CFAbsoluteTime v3 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 192);
      *(_DWORD *)CLMotionActivity buf = 134217984;
      CFAbsoluteTime v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Time to the last received message from Watch is %lf. Lost connection to Watch.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419210 != -1) {
        dispatch_once(&qword_102419210, &stru_1023029C0);
      }
      CFAbsoluteTimeGetCurrent();
      double v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCompanionNotifierCompanion::handleStateSyncTimerExpiry()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    sub_1005E1AF0(a1, 0);
  }
}

id sub_100EF4F80(id result, _DWORD *a2, long long *a3)
{
  if (*a2 == 1)
  {
    int v4 = 1;
    long long v3 = a3[1];
    long long v5 = *a3;
    long long v6 = v3;
    int v7 = *((_DWORD *)a3 + 8);
    return sub_1005E26F4(120.0, (uint64_t)result, 18, +[NSData dataWithBytes:&v4 length:40], 300, 0, 0, 0, 0, 0);
  }
  return result;
}

void sub_100EF503C(id a1)
{
  qword_1024191E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_100EF506C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100EF509C(id a1)
{
  qword_102419218 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Transport");
}

void sub_100EF50CC(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_100EF50FC(id a1)
{
  qword_102419158 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Odometer");
}

void sub_100EF512C(id a1)
{
  qword_1024190D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

uint64_t sub_100EF515C()
{
  sub_100134750(qword_102482330, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102482330, (void *)&_mh_execute_header);
}

_DWORD *sub_100EF51BC(_DWORD *result, uint64_t a2)
{
  long long v3 = result;
  if (*(unsigned char *)(a2 + 1))
  {
    *result += *(_DWORD *)(a2 + 66);
  }
  else
  {
    int v4 = *(unsigned __int8 *)(a2 + 87);
    double Current = CFAbsoluteTimeGetCurrent();
    uint64_t v6 = *(void *)(a2 + 58);
    uint64_t v7 = *(void *)(a2 + 10);
    if (v6) {
      BOOL v8 = v4 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    double v9 = Current * 1000000.0;
    if (v8) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = v7 - v6;
    }
    unint64_t v11 = *((void *)v3 + 1);
    if (v11) {
      unint64_t v12 = (unint64_t)(v9 - (double)v11);
    }
    else {
      unint64_t v12 = 0;
    }
    float v13 = *(float *)(a2 + 70);
    if (qword_102418FC0 != -1) {
      dispatch_once(&qword_102418FC0, &stru_102302A60);
    }
    uint64_t v14 = qword_102418FC8;
    if (os_log_type_enabled((os_log_t)qword_102418FC8, OS_LOG_TYPE_DEBUG))
    {
      int v15 = *v3;
      *(_DWORD *)CLMotionActivity buf = 67110656;
      int v18 = v4;
      __int16 v19 = 2048;
      double v20 = v13;
      __int16 v21 = 2048;
      uint64_t v22 = v10;
      __int16 v23 = 1024;
      int v24 = v15;
      __int16 v25 = 2048;
      unint64_t v26 = v12;
      __int16 v27 = 1024;
      BOOL v28 = v7 == v6;
      __int16 v29 = 2048;
      double v30 = v9;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "[CLSensorControlMetricsLogger] faceDownFlag: %u, lastPocketProbability: %f, detectionLatency: %llu, numberOfEICQueriesSinceLastReport: %u, timeSinceLastStateChange: %llu, isAccelUpdateStale: %u, timestamp: %f", buf, 0x3Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FC0 != -1) {
        dispatch_once(&qword_102418FC0, &stru_102302A60);
      }
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorControlMetricsLogger::feedFaceDownMetrics(const CMMotionCoprocessorReply::FaceDown *)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    id result = (_DWORD *)AnalyticsSendEventLazy();
    _DWORD *v3 = 0;
    *((void *)v3 + 1) = (unint64_t)v9;
  }
  return result;
}

NSDictionary *sub_100EF5504(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 32);
  v5[0] = @"timestamp";
  v6[0] = +[NSNumber numberWithUnsignedLongLong:(unint64_t)*(double *)(a1 + 40)];
  v5[1] = @"faceDownFlag";
  v6[1] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 48) + 87)];
  _DWORD v5[2] = @"lastPocketProbability";
  LODWORD(v3) = *(_DWORD *)(a1 + 72);
  _DWORD v6[2] = +[NSNumber numberWithFloat:v3];
  void v5[3] = @"detectionLatency";
  v6[3] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 56)];
  void v5[4] = @"numberOfEICQueriesSinceLastReport";
  void v6[4] = +[NSNumber numberWithUnsignedLong:*v2];
  void v5[5] = @"timeSinceLastStateChange";
  void v6[5] = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 64)];
  v5[6] = @"isAccelUpdateStale";
  v6[6] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 76)];
  return +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:7];
}

void sub_100EF564C(id a1)
{
  qword_102418FC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Eclipse");
}

void *sub_100EF567C(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = off_102302A90;
  a1[1] = a2;
  sub_1008A9B9C((uint64_t)(a1 + 2), a3);
  return a1;
}

double sub_100EF56F4()
{
  return 0.0;
}

uint64_t sub_100EF5700()
{
  return 0;
}

uint64_t sub_100EF5708()
{
  return 0;
}

uint64_t sub_100EF5710()
{
  return 0;
}

uint64_t sub_100EF5718()
{
  return 0;
}

uint64_t sub_100EF5720()
{
  return 0;
}

uint64_t sub_100EF5734()
{
  return 0;
}

uint64_t sub_100EF573C()
{
  return 0;
}

uint64_t sub_100EF5748()
{
  return 0;
}

uint64_t sub_100EF5750()
{
  return 0;
}

uint64_t sub_100EF5758()
{
  return 0;
}

uint64_t sub_100EF5760()
{
  return 0;
}

uint64_t sub_100EF5790()
{
  return 0;
}

uint64_t sub_100EF5798()
{
  return 0;
}

uint64_t sub_100EF57A8()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_100EF57B0()
{
  return 0;
}

uint64_t sub_100EF57B8()
{
  return 0;
}

uint64_t sub_100EF57E0()
{
  return 0;
}

uint64_t sub_100EF57EC()
{
  return 0;
}

uint64_t sub_100EF57F4()
{
  return 0;
}

uint64_t sub_100EF580C()
{
  return 0x7FFFFFFFLL;
}

void *sub_100EF5814(void *a1)
{
  *a1 = off_102302A90;
  sub_100681F74(a1 + 2);
  return a1;
}

void sub_100EF5858(void *a1)
{
  *a1 = off_102302A90;
  sub_100681F74(a1 + 2);

  operator delete();
}

void *sub_100EF58BC(void *a1, int a2)
{
  sub_100134750(__p, "");
  sub_100EF59D0((uint64_t)a1, "CyclingFTPInputHistory", a2, (uint64_t)__p, 1, 2.56);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_102302CC0;
  a1[9] = off_102302D78;
  sub_100F03BA0(a1 + 46, 0, 0);
  (*(void (**)(void *))(*a1 + 112))(a1);
  return a1;
}

void sub_100EF59A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EF59D0(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 8));
  *unint64_t v12 = off_1022ADB08;
  *(void *)a1 = off_102303008;
  *(void *)(a1 + 72) = off_1023030B0;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_102303008;
  *(void *)(a1 + 72) = off_1023030B0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 240) = xmmword_101D56670;
  *(_DWORD *)(a1 + 256) = -1082130432;
  *(void *)(a1 + 264) = 0xBFF0000000000000;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 272) = _Q0;
  *(_DWORD *)(a1 + 288) = 12000;
  *(void *)(a1 + 296) = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 304));
  *(void *)(a1 + 304) = off_1022ADB08;
  uint64_t v18 = *(void *)(a1 + 112);
  uint64_t v22 = a1 + 112;
  (*(void (**)(uint64_t))(v18 + 16))(a1 + 112);
  __int16 v23 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)a4;
      uint64_t v21 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_100EF5E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  void *v27 = v30;
  sub_1003BE1F8(v31);
  sub_100507624(v29);
  sub_1011F8AE0(v28);
  void *v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_100EF5E9C()
{
}

void *sub_100EF5EA4(void *a1)
{
  *a1 = off_102303008;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_1023030B0;
  a1[37] = off_1022ADAD8;
  sub_1003BE1F8(a1 + 38);
  sub_100507624(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022ADAD8;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_100EF5F68(uint64_t a1)
{
  return sub_100EF5EA4((void *)(a1 - 72));
}

void sub_100EF5F70(void *a1)
{
  sub_100EF5EA4(a1);

  operator delete();
}

void sub_100EF5FA8(uint64_t a1)
{
  sub_100EF5EA4((void *)(a1 - 72));

  operator delete();
}

uint64_t sub_100EF5FE4(uint64_t *a1, uint64_t a2, double a3)
{
  uint64_t v7 = a1 + 14;
  uint64_t v6 = a1[14];
  v16[1] = (uint64_t)(a1 + 14);
  (*(void (**)(uint64_t *))(v6 + 16))(a1 + 14);
  __int16 v17 = 256;
  if (*(double *)(*(void *)(a2 + 8) - 16) == 1.79769313e308 && sub_100082064(a1 + 9))
  {
    sub_10002B640(a1[10]);
    sub_100082068(a1 + 46, v16);
    BOOL v8 = (sqlite3_stmt *)sub_10014D19C(v16[0]);
    if (sub_100055D58(v8, 1, a3 - *(double *)(*(void *)(a2 + 8) - 24)))
    {
      uint64_t v9 = a1[10];
      uint64_t v10 = (sqlite3_stmt *)sub_10014D19C(v16[0]);
      sub_10001FEB0(v9, v10);
      uint64_t v11 = (*(int (**)(uint64_t *))(*a1 + 152))(a1);
    }
    else
    {
      uint64_t v11 = -1;
    }
    sub_100028FB4(a1[10]);
    uint64_t v12 = a1[10];
    if (*(uint64_t *)(v12 + 88) <= 0) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = *(void *)(v12 + 88);
    }
    sub_10003CC68(v12, v13);
    uint64_t v14 = v16[0];
    v16[0] = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  else
  {
    uint64_t v11 = -1;
  }
  (*(void (**)(uint64_t *))(*v7 + 24))(v7);
  return v11;
}

void sub_100EF6184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EF61B8(uint64_t *a1, uint64_t a2)
{
  double Current = CFAbsoluteTimeGetCurrent();

  return sub_100EF5FE4(a1, a2, Current);
}

uint64_t sub_100EF61F8(uint64_t a1, uint64_t a2)
{
  double v3 = (uint64_t *)(a1 - 72);
  double Current = CFAbsoluteTimeGetCurrent();

  return sub_100EF5FE4(v3, a2, Current);
}

uint64_t sub_100EF6238(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM CyclingFTPInputHistory");
  }
  return 0xFFFFFFFFLL;
}

void sub_100EF62F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EF6330(uint64_t a1)
{
  return sub_100EF6238(a1 - 72);
}

uint64_t sub_100EF633C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  *(void *)&v19[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v20 = 256;
  v19[0] = *(double *)(a2 + 8);
  if (sub_10018360C(v6, v19))
  {
    if (sub_100082064(v6))
    {
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 80))(a1, a2, 0);
    }
    else if (!*(unsigned char *)(a1 + 128))
    {
      uint64_t v12 = (void *)(a1 + 176);
      unint64_t v13 = *(void *)(a1 + 216);
      if (v13 > *(int *)(a1 + 288))
      {
        ++*(void *)(a1 + 208);
        *(void *)(a1 + 216) = v13 - 1;
        sub_10017E0A8(a1 + 176, 1);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1023030F0);
        }
        uint64_t v14 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)CLMotionActivity buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Maximum number of entries exceeded, throwing out oldest entry.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1023030F0);
          }
          uint64_t v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLCyclingFTPInput, CLActivityDB::ClassBDataProtectionPolicy>::addSuspectRecord(const T &) [T = CLCyclingFTPInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v18);
          if (v18 != (char *)buf) {
            free(v18);
          }
        }
      }
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102303110);
      }
      int v15 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)CLMotionActivity buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Buffer was added to since db was inaccesible.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_102303110);
        }
        __int16 v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLCyclingFTPInput, CLActivityDB::ClassBDataProtectionPolicy>::addSuspectRecord(const T &) [T = CLCyclingFTPInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
      __n128 v7 = sub_100EF9B74(v12, a2);
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1023030F0);
    }
    BOOL v8 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = (void *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0) {
        uint64_t v9 = (void *)*v9;
      }
      *(_DWORD *)CLMotionActivity buf = 68289538;
      int v22 = 0;
      __int16 v23 = 2082;
      int v24 = "";
      __int16 v25 = 1026;
      int v26 = (int)v19[0];
      __int16 v27 = 2082;
      uint64_t v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023030F0);
      }
    }
    uint64_t v10 = qword_102418FD8;
    if (os_signpost_enabled((os_log_t)qword_102418FD8))
    {
      uint64_t v11 = (void *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0) {
        uint64_t v11 = (void *)*v11;
      }
      *(_DWORD *)CLMotionActivity buf = 68289538;
      int v22 = 0;
      __int16 v23 = 2082;
      int v24 = "";
      __int16 v25 = 1026;
      int v26 = (int)v19[0];
      __int16 v27 = 2082;
      uint64_t v28 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CL database error, record contains invalid time", "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
    }
  }
  return (*(uint64_t (**)(uint64_t, __n128))(*(void *)v5 + 24))(v5, v7);
}

void sub_100EF6880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EF68AC(uint64_t a1, void *a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  uint64_t v8 = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v9 = 256;
  if (sub_100082064(v6))
  {
    a2[1] = *a2;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from CyclingFTPInputHistory ORDER BY start_time ASC");
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
}

void sub_100EF6B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EF6B5C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)a2 = sqlite3_column_int64(v6, 0);
  __n128 v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  uint64_t v8 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v9 = sqlite3_column_double(v8, 2);
  *(float *)(a2 + 16) = v9;
  uint64_t v10 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v11 = sqlite3_column_double(v10, 3);
  *(float *)(a2 + 20) = v11;
  uint64_t v12 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v13 = sqlite3_column_double(v12, 4);
  *(float *)(a2 + 24) = v13;
  uint64_t v14 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v15 = sqlite3_column_double(v14, 5);
  *(float *)(a2 + 28) = v15;
  uint64_t v16 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v17 = sqlite3_column_double(v16, 6);
  *(float *)(a2 + 32) = v17;
  uint64_t v18 = (sqlite3_stmt *)sub_10014D19C(*a1);
  double v19 = sqlite3_column_double(v18, 7);
  uint64_t result = 0;
  *(double *)(a2 + 40) = v19;
  return result;
}

uint64_t sub_100EF6C64(uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 112;
  uint64_t v5 = a1 + 72;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  if (sub_100082064(v5))
  {
    a2[1] = *a2;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM CyclingFTPInputHistory WHERE start_time >= ? and start_time <= ? ORDER BY start_time ASC");
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_102302E08);
  }
  uint64_t v6 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)CLMotionActivity buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CyclingFTPInputHistory, DB not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_102302E08);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLCyclingFTPInputDb::queryInTimeRange(const CFAbsoluteTime, const CFAbsoluteTime, std::vector<CLCyclingFTPInput> &) const", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return 109;
}

void sub_100EF7058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EF70BC(uint64_t *a1)
{
  uint64_t result = sub_10014C3C0(a1[10]);
  if (result)
  {
    sub_1005F7B0C(a1[10], "CyclingFTPInputHistory", (const char **)&off_102302E28, (const std::string::value_type **)&off_1024753E0, 0);
    uint64_t result = sub_100601D1C(a1[10], (uint64_t)"DELETE FROM CyclingFTPInputHistory WHERE start_time < ?");
    a1[46] = result;
    a1[47] = v3;
  }
  return result;
}

uint64_t sub_100EF7120(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM CyclingFTPInputHistory");
  }
  return result;
}

void sub_100EF71D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EF71E8(uint64_t a1)
{
  return sub_100EF7120(a1 - 72);
}

void sub_100EF71F8(uint64_t a1, uint64_t a2)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"INSERT INTO CyclingFTPInputHistory (start_time, hr, hr_confidence, vertical_speed, external_cadence, external_power, raw_gps_speed) VALUES (?, ?, ?, ?, ?, ?, ?)");
  }
  if (qword_1024192F0 != -1) {
    dispatch_once(&qword_1024192F0, &stru_102302FD8);
  }
  uint64_t v4 = qword_1024192F8;
  if (os_log_type_enabled((os_log_t)qword_1024192F8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    *(_DWORD *)CLMotionActivity buf = 134349056;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CyclingFTPInputHistory, database isn't available for entry with startTime, %{public}f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192F0 != -1) {
      dispatch_once(&qword_1024192F0, &stru_102302FD8);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLCyclingFTPInputDb::insertRecordUL(const CLCyclingFTPInput &, BOOL)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_100EF760C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EF7650(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 120))(a1, a2, 0);
}

uint64_t sub_100EF7678()
{
  return 0;
}

uint64_t sub_100EF7680(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM CyclingFTPInputHistory ORDER BY id DESC LIMIT 1");
  }
  return 2;
}

void sub_100EF771C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100EF7734(void *a1)
{
  uint64_t v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17[0]) < 0)
  {
    uint64_t v10 = v16[1];
    operator delete(v16[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v16);
        uint64_t v4 = sub_100132EFC(v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0) {
          uint64_t v5 = __p;
        }
        else {
          uint64_t v5 = (void **)__p[0];
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v6 = v14;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        __n128 v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((v14 & 0x80u) == 0) {
          float v9 = __p;
        }
        else {
          float v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17[0]))
  {
    goto LABEL_3;
  }
  sub_101A95F84(v3);
  uint64_t v15 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v16
  v17[0] = v11;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_100EF7B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_100EF7C04(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_100EF9F54(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1023030F0);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)CLMotionActivity buf = 68289282;
    *(_DWORD *)float v13 = 0;
    *(_WORD *)&void v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1023030F0);
    }
    __n128 v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)CLMotionActivity buf = 134349056;
      *(void *)float v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023030F0);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLCyclingFTPInput, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = CLCyclingFTPInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_100EF8358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_100EF838C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  long long v5 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 48) = v5;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

uint64_t sub_100EF83A0(uint64_t a1)
{
  return sub_100EF7C04(a1 - 72);
}

void sub_100EF83A8(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_100EF83D8(id a1)
{
  qword_1024192F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CyclingPower");
}

uint64_t sub_100EF8408(void *a1, void *a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A960F4(v4);
    sub_1001D7FD4();
  }
  uint64_t v12 = v15[1];
  operator delete(v15[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v15);
    uint64_t v6 = sub_100132EFC(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      __n128 v7 = __p;
    }
    else {
      __n128 v7 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    float v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_100EF8814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  sub_101A129A8((uint64_t)&a23);
  _Unwind_Resume(a1);
}

id *sub_100EF8894(uint64_t a1, long long *a2, char a3)
{
  v41[0] = (id)os_transaction_create();
  v41[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v41);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  double v36 = -1.0;
  long long v37 = xmmword_101D56670;
  int v38 = -1082130432;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v39 = _Q0;
  unint64_t v40 = 0xBFF0000000000000;
  int v11 = (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 104))(a1, v35);
  if (v11 == 1)
  {
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v11)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023030F0);
      }
      double v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)CLMotionActivity buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1023030F0);
        }
        LOWORD(v42) = 0;
        __int16 v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLCyclingFTPInput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCyclingFTPInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
      goto LABEL_43;
    }
    double v12 = *((double *)a2 + 1);
    double v13 = v36;
    double v14 = v12 - v36;
    if (v12 - v36 < 0.0) {
      double v14 = -(v12 - v36);
    }
    if (v14 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1023030F0);
      }
      uint64_t v15 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *((void *)a2 + 1);
        *(_DWORD *)CLMotionActivity buf = 134349312;
        double v47 = v36;
        __int16 v48 = 2050;
        uint64_t v49 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1023030F0);
        }
        uint64_t v29 = *((void *)a2 + 1);
        int v42 = 134349312;
        double v43 = v36;
        __int16 v44 = 2050;
        uint64_t v45 = v29;
        uint64_t v30 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCyclingFTPInput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCyclingFTPInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v30);
        if (v30 != (char *)buf) {
          free(v30);
        }
      }
      CLWriteStackshot();
      double v12 = *((double *)a2 + 1);
      double v13 = v36;
    }
    if (v12 < v13)
    {
      if (v13 - v12 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1023030F0);
        }
        float v17 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v18 = *((double *)a2 + 1);
          *(_DWORD *)CLMotionActivity buf = 134217984;
          double v47 = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1023030F0);
          }
          double v31 = *((double *)a2 + 1);
          int v42 = 134217984;
          double v43 = v31;
          uint64_t v32 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCyclingFTPInput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCyclingFTPInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v32);
          if (v32 != (char *)buf) {
            free(v32);
          }
        }
        (*(void (**)(uint64_t, long long *))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v21 = v12 - v13;
      double v22 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v34 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_1023030F0);
        double v22 = v34;
      }
      double v23 = v21 - v22;
      int v24 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)CLMotionActivity buf = 134217984;
        double v47 = v23;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1023030F0);
        }
        int v42 = 134217984;
        double v43 = v23;
        id v33 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCyclingFTPInput, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCyclingFTPInput, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v33);
        if (v33 != (char *)buf) {
          free(v33);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v23);
    }
    (*(void (**)(uint64_t, char *, uint64_t, long long *))(*(void *)a1 + 144))(a1, v35, a1 + 224, a2);
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v25 = *a2;
  long long v26 = a2[1];
  long long v27 = a2[3];
  *(_OWORD *)(a1 + 256) = a2[2];
  *(_OWORD *)(a1 + 272) = v27;
  *(_OWORD *)(a1 + 224) = v25;
  *(_OWORD *)(a1 + 240) = v26;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v41);
}

void sub_100EF90C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100EF90F0(void *a1, uint64_t a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101A96264(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  double v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    uint64_t v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      __n128 v7 = __p;
    }
    else {
      __n128 v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    float v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      int v11 = __p;
    }
    else {
      int v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_100EF9464(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    int v11 = (_Unwind_Exception *)sub_101A963D4(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    long long v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    __n128 v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      float v9 = __p;
    }
    else {
      float v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}