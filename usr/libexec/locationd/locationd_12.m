void sub_1007EEF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a63 = (uint64_t)&a18;
  sub_100682B1C((void ***)&a63);
  sub_1007EA7E4((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_1007EF004(uint64_t a1)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022C9D98);
  }
  v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 56) UTF8String];
    *(_DWORD *)buf = 136380675;
    *(void *)v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,reporting asset version info", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    [*(id *)(a1 + 56) UTF8String];
    v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::reportVersionInfoAwd()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  *(void *)&v11[4] = 0xBFF0000000000000;
  *(_OWORD *)v12 = 0u;
  long long v13 = 0u;
  int v14 = 0;
  uint64_t v15 = -1;
  int v16 = -2;
  uint64_t v17 = -1;
  uint64_t v18 = -1;
  unsigned int v19 = -1;
  __int16 v20 = 0;
  v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = -1;
  uint64_t v25 = -1;
  char v26 = 0;
  v27 = 0;
  uint64_t v28 = 0;
  uint64_t v30 = -1;
  uint64_t v31 = -1;
  uint64_t v29 = 0;
  char v32 = 0;
  v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = -1;
  uint64_t v37 = -1;
  char v38 = 0;
  __p = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = -1;
  uint64_t v43 = -1;
  char v44 = 0;
  buf[0] = 1;
  *(void *)&v11[4] = CFAbsoluteTimeGetCurrent();
  std::string::assign((std::string *)v12, "com.apple.locationd");
  int v4 = *(_DWORD *)(a1 + 72);
  DWORD2(v13) = 6;
  HIDWORD(v13) = v4;
  if (*(double *)&v11[4] > 0.0)
  {
    double v5 = *(double *)(a1 + 104);
    if (v5 > 0.0) {
      HIDWORD(v17) = llround((*(double *)&v11[4] - v5) / 86400.0);
    }
  }
  if (*(double *)&v11[4] > 0.0)
  {
    double v6 = *(double *)(a1 + 112);
    if (v6 > 0.0) {
      LODWORD(v18) = llround((*(double *)&v11[4] - v6) / 86400.0);
    }
  }
  if (*(double *)&v11[4] > 0.0)
  {
    double v7 = *(double *)(a1 + 120);
    if (v7 > 0.0) {
      HIDWORD(v18) = llround((*(double *)&v11[4] - v7) / 86400.0);
    }
  }
  if (*(double *)&v11[4] > 0.0)
  {
    double v8 = *(double *)(a1 + 128);
    if (v8 > 0.0) {
      unsigned int v19 = llround((*(double *)&v11[4] - v8) / 86400.0);
    }
  }
  (*(void (**)(uint64_t, uint8_t *))(*(void *)a1 + 40))(a1, buf);
  if (SHIBYTE(v41) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v35) < 0) {
    operator delete(v33);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(v27);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(v21);
  }
  if (SBYTE7(v13) < 0) {
    operator delete(v12[0]);
  }
}

void sub_1007EF38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_1007EF3A8(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

char *sub_1007EF3D8@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[55] < 0) {
    return (char *)sub_1000DC48C((unsigned char *)a2, *((void **)result + 4), *((void *)result + 5));
  }
  *(_OWORD *)a2 = *((_OWORD *)result + 2);
  *(void *)(a2 + 16) = *((void *)result + 6);
  return result;
}

void *sub_1007EF404(uint64_t a1, uint64_t a2)
{
  result = (void *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0) {
    return sub_1000DC48C(result, *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  long long v3 = *(_OWORD *)(a2 + 32);
  result[2] = *(void *)(a2 + 48);
  *(_OWORD *)result = v3;
  return result;
}

void sub_1007EF434(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
}

uint64_t sub_1007EF448(void *a1, unsigned char *a2, int a3)
{
  *a2 = 0;
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 4)) <= 0x2A)
  {
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022C9E18);
    }
    long long v3 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLRS,CLRTD,too few points to detect", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022C9E18);
      }
      LOWORD(v28) = 0;
      unsigned int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLRunningTrackDetector::detectRunningTrack(const std::vector<swan::RouteSmootherEpoch> &, BOOL &, const CLMotionActivity::Type)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    return 0;
  }
  __p = 0;
  char v26 = 0;
  uint64_t v27 = 0;
  if ((sub_1007EFBC8(a1, &__p) & 1) == 0)
  {
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022C9E18);
    }
    uint64_t v15 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLRS,CLRTD,failed to convert input points to enu coordinates", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_35;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022C9E18);
    }
    LOWORD(v28) = 0;
    int v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLRunningTrackDetector::detectRunningTrack(const std::vector<swan::RouteSmootherEpoch> &, BOOL &, const CLMotionActivity::Type)", "%s\n", v16);
    goto LABEL_46;
  }
  unint64_t v23 = 0;
  unint64_t v24 = 0;
  if (!sub_1007EFF58((float64x2_t **)&__p, &v24, &v23))
  {
LABEL_29:
    *a2 = 0;
    uint64_t v4 = 1;
    goto LABEL_36;
  }
  unint64_t v8 = v24;
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v26 - (unsigned char *)__p) >> 3);
  if (v24 < v9)
  {
    unint64_t v10 = v23;
    if (v23 < v9)
    {
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022C9E18);
      }
      v11 = qword_102419418;
      if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v12 = *(void *)(*a1 + 112 * v8);
        uint64_t v13 = *(void *)(*a1 + 112 * v10);
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v12;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLRS,CLRTD,loop detected from,%.1lf,to,%.1lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419410 != -1) {
          dispatch_once(&qword_102419410, &stru_1022C9E18);
        }
        unint64_t v20 = *(void *)(*a1 + 112 * v8);
        unint64_t v21 = *(void *)(*a1 + 112 * v10);
        int v28 = 134218240;
        unint64_t v29 = v20;
        __int16 v30 = 2048;
        unint64_t v31 = v21;
        uint64_t v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLRunningTrackDetector::detectRunningTrack(const std::vector<swan::RouteSmootherEpoch> &, BOOL &, const CLMotionActivity::Type)", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      memset(buf, 0, sizeof(buf));
      sub_1001F703C(buf, (char *)__p + 24 * v8, (uint64_t)__p + 24 * v10, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(24 * (v10 - v8)) >> 3));
      BOOL v14 = sub_1007F00D8((float64x2_t **)buf);
      if (*(void *)buf)
      {
        *(void *)&buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
      if (v14)
      {
        uint64_t v4 = 1;
        *a2 = 1;
        sub_1007F058C(*a1 + 112 * v8, a3);
        goto LABEL_36;
      }
      goto LABEL_29;
    }
  }
  if (qword_102419410 != -1) {
    dispatch_once(&qword_102419410, &stru_1022C9E18);
  }
  uint64_t v17 = qword_102419418;
  if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134218496;
    *(void *)&uint8_t buf[4] = v8;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v23;
    *(_WORD *)&buf[22] = 2048;
    unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((v26 - (unsigned char *)__p) >> 3);
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "CLRS,CLRTD,loopStartIndex,%lu,loopEndIndex,%lu,out of enuCoordinates size,%lu", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022C9E18);
    }
    int v28 = 134218496;
    unint64_t v29 = v8;
    __int16 v30 = 2048;
    unint64_t v31 = v23;
    __int16 v32 = 2048;
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v26 - (unsigned char *)__p) >> 3);
    int v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLRunningTrackDetector::detectRunningTrack(const std::vector<swan::RouteSmootherEpoch> &, BOOL &, const CLMotionActivity::Type)", "%s\n", v16);
LABEL_46:
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
LABEL_35:
  uint64_t v4 = 0;
LABEL_36:
  if (__p)
  {
    char v26 = __p;
    operator delete(__p);
  }
  return v4;
}

void sub_1007EFB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007EFBC8(void *a1, void **a2)
{
  double v4 = *(double *)(*a1 + 8);
  double v5 = *(double *)(*a1 + 16);
  sub_1007F0828(a2, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 4));
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 == v7) {
    return 1;
  }
  while (1)
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v31 = 0;
    if (!sub_1000F17A8(dbl_10247E190, (double *)&v33, (double *)&v32, (double *)&v31, v4, v5, 0.0, *(double *)(v6 + 8), *(double *)(v6 + 16), 0.0))break; {
    uint64_t v8 = v32;
    }
    uint64_t v9 = v33;
    uint64_t v10 = v31;
    uint64_t v12 = (char *)a2[1];
    unint64_t v11 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v11)
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (unsigned char *)*a2) >> 3);
      unint64_t v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)*a2) >> 3);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x555555555555555) {
        unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16) {
        uint64_t v17 = (char *)sub_1000DA5D8((uint64_t)(a2 + 2), v16);
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = &v17[24 * v13];
      *(void *)uint64_t v18 = v9;
      *((void *)v18 + 1) = v8;
      *((void *)v18 + 2) = v10;
      unint64_t v20 = (char *)*a2;
      unsigned int v19 = (char *)a2[1];
      unint64_t v21 = v18;
      if (v19 != *a2)
      {
        do
        {
          long long v22 = *(_OWORD *)(v19 - 24);
          *((void *)v21 - 1) = *((void *)v19 - 1);
          *(_OWORD *)(v21 - 24) = v22;
          v21 -= 24;
          v19 -= 24;
        }
        while (v19 != v20);
        unsigned int v19 = (char *)*a2;
      }
      unint64_t v23 = v18 + 24;
      *a2 = v21;
      a2[1] = v18 + 24;
      a2[2] = &v17[24 * v16];
      if (v19) {
        operator delete(v19);
      }
      a2[1] = v23;
    }
    else
    {
      *(void *)uint64_t v12 = v33;
      *((void *)v12 + 1) = v8;
      *((void *)v12 + 2) = v10;
      a2[1] = v12 + 24;
    }
    v6 += 112;
    if (v6 == v7) {
      return 1;
    }
  }
  if (qword_102419410 != -1) {
    dispatch_once(&qword_102419410, &stru_1022C9E18);
  }
  uint64_t v25 = qword_102419418;
  if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_INFO))
  {
    uint64_t v26 = *(void *)(v6 + 8);
    uint64_t v27 = *(void *)(v6 + 16);
    *(_DWORD *)buf = 134283777;
    uint64_t v39 = v26;
    __int16 v40 = 2049;
    uint64_t v41 = v27;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "CLRS,CLRTD,Warning,Could not convert LLA Coordinate %{private}.7lf,%{private}.7lf to ENU", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022C9E18);
    }
    uint64_t v28 = *(void *)(v6 + 8);
    uint64_t v29 = *(void *)(v6 + 16);
    int v34 = 134283777;
    uint64_t v35 = v28;
    __int16 v36 = 2049;
    uint64_t v37 = v29;
    __int16 v30 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLRunningTrackDetector::convertLLA2ENU(const std::vector<swan::RouteSmootherEpoch> &, std::vector<std::array<double, 3>> &)", "%s\n", v30);
    if (v30 != (char *)buf) {
      free(v30);
    }
  }
  return 0;
}

uint64_t sub_1007EFF58(float64x2_t **a1, unint64_t *a2, unint64_t *a3)
{
  long long v3 = *a1;
  double v4 = a1[1];
  unint64_t v5 = ((char *)v4 - (char *)*a1) / 24;
  unsigned int v6 = 0;
  if (v4 == *a1)
  {
LABEL_9:
    if (v4 == v3)
    {
      BOOL v11 = 0;
    }
    else
    {
      unint64_t v9 = 0;
      uint64_t v10 = *a1;
      do
      {
        BOOL v11 = v5 <= v9;
        if (v5 <= v9) {
          break;
        }
        if (v5 <= v6)
        {
          double v16 = (double)v5 + -100.0;
          if (v16 <= 0.0)
          {
LABEL_24:
            int v15 = 0;
            BOOL v11 = 1;
            return v11 & v15;
          }
          unint64_t v12 = v5 - 1;
          float64x2_t v17 = *(float64x2_t *)((char *)v3 + 24 * v5 - 24);
          int v18 = 1;
          while (1)
          {
            float64x2_t v19 = vsubq_f64(v17, *v3);
            if (vaddvq_f64(vmulq_f64(v19, v19)) < 400.0) {
              break;
            }
            double v20 = (double)v18;
            long long v3 = (float64x2_t *)((char *)v3 + 24);
            ++v18;
            if (v16 <= v20) {
              goto LABEL_24;
            }
          }
LABEL_25:
          *a2 = v9;
          *a3 = v12;
          BOOL v11 = 1;
          int v15 = 1;
          return v11 & v15;
        }
        unint64_t v12 = v6;
        float64x2_t v13 = vsubq_f64(v3[24 * v6 / 0x10], *v10);
        if (vaddvq_f64(vmulq_f64(v13, v13)) < 400.0 && v9 > 0x64) {
          goto LABEL_25;
        }
        v6 += 2;
        ++v9;
        uint64_t v10 = (float64x2_t *)((char *)v10 + 24);
      }
      while (v5 > v9);
    }
    int v15 = 0;
    return v11 & v15;
  }
  else
  {
    if (v5 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = ((char *)v4 - (char *)*a1) / 24;
    }
    while (v5 > v6)
    {
      float64x2_t v8 = vsubq_f64(v3[24 * v6 / 0x10], *v3);
      if (vaddvq_f64(vmulq_f64(v8, v8)) < 400.0) {
        v6 += 2;
      }
      if (!--v7) {
        goto LABEL_9;
      }
    }
    return 0;
  }
}

BOOL sub_1007F00D8(float64x2_t **a1)
{
  v2 = *a1;
  v1 = a1[1];
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1 - (char *)*a1) >> 3);
  if (v3 >= 0x64)
  {
    if (v2 == v1) {
      goto LABEL_21;
    }
    float64x2_t v7 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v3), 0);
    float64x2_t v8 = 0uLL;
    unint64_t v9 = *a1;
    do
    {
      float64x2_t v10 = *v9;
      unint64_t v9 = (float64x2_t *)((char *)v9 + 24);
      float64x2_t v8 = vaddq_f64(v8, vdivq_f64(v10, v7));
    }
    while (v9 != v1);
    if (v2 == v1)
    {
LABEL_21:
      unsigned int v11 = 0;
LABEL_22:
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022C9E18);
      }
      unint64_t v14 = qword_102419418;
      if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109376;
        unsigned int v18 = v11;
        __int16 v19 = 2048;
        unint64_t v20 = v3;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLRS,CLRTD,track detected,numOutOfBoundaryPoints,%d,numOfPoints,%lu", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419410 != -1) {
          dispatch_once(&qword_102419410, &stru_1022C9E18);
        }
        double v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLRunningTrackDetector::isRunningTrackByDistToCenter(const std::vector<std::array<double, 3>> &)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      return 1;
    }
    else
    {
      unsigned int v11 = 0;
      while (1)
      {
        float64x2_t v12 = vsubq_f64(*v2, v8);
        v12.f64[0] = vaddvq_f64(vmulq_f64(v12, v12));
        int v13 = v12.f64[0] < *(double *)&qword_10247E188;
        if (v12.f64[0] > *(double *)&qword_10247E180) {
          int v13 = 1;
        }
        v11 += v13;
        if ((double)v11 / (double)v3 > 0.1) {
          break;
        }
        v2 = (float64x2_t *)((char *)v2 + 24);
        if (v2 == v1) {
          goto LABEL_22;
        }
      }
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022C9E18);
      }
      int v15 = qword_102419418;
      if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109376;
        unsigned int v18 = v11;
        __int16 v19 = 2048;
        unint64_t v20 = v3;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLRS,CLRTD,non-track detected,numOutOfBoundaryPoints,%d,numOfPoints,%lu", buf, 0x12u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419410 == -1) {
          goto LABEL_8;
        }
        goto LABEL_40;
      }
    }
  }
  else
  {
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022C9E18);
    }
    double v4 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLRS,CLRTD,Not enough points to detect loop", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 == -1)
      {
LABEL_8:
        unsigned int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLRunningTrackDetector::isRunningTrackByDistToCenter(const std::vector<std::array<double, 3>> &)", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
LABEL_40:
      dispatch_once(&qword_102419410, &stru_1022C9E18);
      goto LABEL_8;
    }
  }
  return result;
}

void sub_1007F058C(uint64_t a1, int a2)
{
  *(_DWORD *)((char *)v21 + 3) = 0;
  v21[0] = 0;
  if (!sub_1000EF68C(*(double *)(a1 + 8), *(double *)(a1 + 16))
    || sub_1000EF668(*(double *)(a1 + 8), *(double *)(a1 + 16)))
  {
    LOBYTE(v4) = 0;
    unint64_t v5 = 0;
    unsigned int v6 = 0;
    goto LABEL_16;
  }
  double v7 = *(double *)(a1 + 16);
  std::to_string(&v19, round(*(double *)(a1 + 8) * 1000.0) / 1000.0);
  float64x2_t v8 = std::string::append(&v19, ",");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v18, round(v7 * 1000.0) / 1000.0);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float64x2_t v10 = &v18;
  }
  else {
    float64x2_t v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v18.__r_.__value_.__l.__size_;
  }
  float64x2_t v12 = std::string::append(&v20, (const std::string::value_type *)v10, size);
  unsigned int v6 = (void *)v12->__r_.__value_.__r.__words[0];
  unint64_t v5 = (void *)v12->__r_.__value_.__l.__size_;
  v21[0] = v12->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v21 + 3) = *(_DWORD *)((char *)&v12->__r_.__value_.__r.__words[2] + 3);
  int v4 = SHIBYTE(v12->__r_.__value_.__r.__words[2]);
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_16;
    }
LABEL_26:
    int v13 = 1;
    if (!v5) {
      goto LABEL_22;
    }
    goto LABEL_17;
  }
  operator delete(v19.__r_.__value_.__l.__data_);
  if (v4 < 0) {
    goto LABEL_26;
  }
LABEL_16:
  int v13 = 0;
  if (!(_BYTE)v4) {
    goto LABEL_22;
  }
LABEL_17:
  if (v13)
  {
    sub_1000DC48C(__p, v6, (unint64_t)v5);
  }
  else
  {
    __p[0] = v6;
    __p[1] = v5;
    *(_DWORD *)int v15 = v21[0];
    *(_DWORD *)&v15[3] = *(_DWORD *)((char *)v21 + 3);
    char v16 = v4;
  }
  int v17 = a2;
  AnalyticsSendEventLazy();
  if (v16 < 0) {
    operator delete(__p[0]);
  }
LABEL_22:
  if (v13) {
    operator delete(v6);
  }
}

void sub_1007F07AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v31 - 73) < 0) {
    operator delete(*(void **)(v31 - 96));
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007F0828(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_1001D7FD4();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 24;
    unsigned int v6 = (char *)sub_1000DA5D8(v3, a2);
    double v7 = &v6[24 * v5];
    long long v9 = &v6[24 * v8];
    unsigned int v11 = (char *)*a1;
    float64x2_t v10 = (char *)a1[1];
    float64x2_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 24);
        *((void *)v12 - 1) = *((void *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      float64x2_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

NSDictionary *sub_1007F0918(uint64_t a1)
{
  v4[0] = @"tll";
  v2 = (void *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    v2 = (void *)*v2;
  }
  v4[1] = @"workoutActivityType";
  v5[0] = +[NSString stringWithUTF8String:v2];
  v5[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];
}

void sub_1007F09CC(id a1)
{
  qword_102419418 = (uint64_t)os_log_create("com.apple.locationd.Position", "RouteSmoother");
}

double sub_1007F09FC()
{
  qword_10247E180 = 0x40C500D851EB851FLL;
  qword_10247E188 = 0x407CE40000000000;
  return sub_101171D90((uint64_t)&unk_10247E190);
}

void sub_1007F0A30(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    getpid();
    proc_disable_cpumon();
    operator new();
  }
  sub_101A6F274();
}

void sub_1007F0C90()
{
}

void sub_1007F0CBC(_OWORD *a1)
{
  *a1 = 0u;
  a1[1] = 0u;
  sub_1007F0A30((uint64_t)a1);
}

uint64_t sub_1007F0CEC(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    sub_101A6F3F4();
  }
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    char v4 = v3;
    uint64_t v5 = a1 + 8 * v2;
    uint64_t v8 = *(void *)(v5 + 16);
    double v7 = (uint64_t *)(v5 + 16);
    uint64_t v6 = v8;
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
    uint64_t v9 = *v7;
    *(unsigned char *)(*v7 + 20) = 1;
    if (!*(void *)(a1 + 8 * v2))
    {
      sub_10051310C(v9);
      operator delete();
    }
    *(void *)(a1 + 8 * v2) = 0;
    *double v7 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
    char v3 = 0;
    uint64_t v2 = 1;
  }
  while ((v4 & 1) != 0);
  uint64_t v10 = getpid();

  return _proc_set_cpumon_defaults(v10);
}

uint64_t sub_1007F0DE8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1007F0E14(uint64_t a1, float a2)
{
  if (qword_102419090 != -1) {
    dispatch_once(&qword_102419090, &stru_1022C9E38);
  }
  char v4 = qword_102419098;
  if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    double v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "dutyCycle,%f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022C9E38);
    }
    unsigned int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSensorTemperatureController::setLoad(float)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  if (!*(void *)(a1 + 16)) {
    sub_101A6F574();
  }
  uint64_t v5 = 0;
  char v6 = 1;
  do
  {
    char v7 = v6;
    uint64_t v8 = a1 + 8 * v5;
    uint64_t v9 = *(void *)(v8 + 16);
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    *(float *)(*(void *)(v8 + 16) + 16) = a2;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
    char v6 = 0;
    uint64_t v5 = 1;
  }
  while ((v7 & 1) != 0);
  return result;
}

void sub_1007F105C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1007F1068(uint64_t a1)
{
  uint64_t v2 = malloc_type_malloc(0x9007uLL, 0x186FBABEuLL);
  unint64_t v3 = ((unint64_t)v2 + 4103) & 0xFFFFFFFFFFFFF000;
  *(void *)(v3 - 8) = v2;
  char v4 = malloc_type_malloc(0x77uLL, 0x186FBABEuLL);
  uint64_t v5 = (_OWORD *)(((unint64_t)v4 + 71) & 0xFFFFFFFFFFFFFFC0);
  *((void *)v5 - 1) = v4;
  char v6 = malloc_type_malloc(0x9007uLL, 0x186FBABEuLL);
  unint64_t v7 = ((unint64_t)v6 + 4103) & 0xFFFFFFFFFFFFF000;
  *(void *)(v7 - 8) = v6;
  uint64_t v8 = malloc_type_malloc(0x247uLL, 0x186FBABEuLL);
  unint64_t v9 = 0;
  unint64_t v10 = ((unint64_t)v8 + 71) & 0xFFFFFFFFFFFFFFC0;
  *(void *)(v10 - 8) = v8;
  unsigned int v11 = (_OWORD *)(v3 | 0x20);
  *(void *)&long long v12 = 0x5A5A5A5A5A5A5A5ALL;
  *((void *)&v12 + 1) = 0x5A5A5A5A5A5A5A5ALL;
  *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  do
  {
    *(v11 - 2) = v12;
    *(v11 - 1) = v13;
    _OWORD *v11 = v13;
    v11[1] = v12;
    v11 += 4;
    v9 += 8;
  }
  while (v9 < 0xFF9);
  *uint64_t v5 = xmmword_101D2E120;
  v5[1] = xmmword_101D2E130;
  void v5[2] = xmmword_101D2E140;
  do
  {
    while (1)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
      int v14 = *(unsigned __int8 *)(a1 + 20);
      if (*(unsigned char *)(a1 + 20))
      {
        int v15 = 2;
        float v16 = 0.0;
      }
      else
      {
        int v15 = 0;
        float v16 = fminf(fmaxf(*(float *)(a1 + 16), 0.01), 1.0);
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
      if (v14) {
        break;
      }
      double v17 = sub_1000D3E50();
      sub_101445C90();
      double v18 = sub_1000D3E50();
      usleep(((v18 - v17) * (float)(1.0 - v16) * 1000000.0 / v16));
    }
  }
  while (!v15);
  if (v3) {
    free(*(void **)(v3 - 8));
  }
  free(*((void **)v5 - 1));
  if (v7) {
    free(*(void **)(v7 - 8));
  }
  if (v10) {
    free(*(void **)(v10 - 8));
  }
  sub_10051310C(a1);
  operator delete();
}

void sub_1007F12B4(id a1)
{
  qword_102419098 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Sensors");
}

BOOL sub_1007F12E4()
{
  v1 = qword_102419098;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

BOOL sub_1007F1304()
{
  uint64_t v2 = *(NSObject **)(v0 + 152);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

void *sub_1007F1320(void *a1, int a2)
{
  sub_100134750(__p, "");
  sub_1007F1450((uint64_t)a1, "VO2MaxRetrocomputeHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_1022C9E68;
  a1[9] = off_1022C9F18;
  sub_100F03BA0(a1 + 57, 0, 0);
  sub_100F03BA0(a1 + 59, 0, 0);
  sub_100F03BA0(a1 + 61, 0, 0);
  (*(void (**)(void *))(*a1 + 112))(a1);
  return a1;
}

void sub_1007F1424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007F1450(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  long long v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 8));
  *long long v12 = &off_1022B2C68;
  *(void *)a1 = off_1022CA3F8;
  *(void *)(a1 + 72) = off_1022CA4A0;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_1022CA3F8;
  *(void *)(a1 + 72) = off_1022CA4A0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 240) = 3;
  *(void *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 348) = 0u;
  *(_DWORD *)(a1 + 376) = 12000;
  *(void *)(a1 + 384) = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 392));
  *(void *)(a1 + 392) = &off_1022B2C68;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_1007F188C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  void *v27 = v30;
  sub_1003BE1F8(v31);
  sub_1000D801C(v29);
  sub_1011F8AE0(v28);
  *uint64_t v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_1007F1920()
{
}

void *sub_1007F1928(void *a1)
{
  *a1 = off_1022CA3F8;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_1022CA4A0;
  a1[48] = off_1022B2C20;
  sub_1003BE1F8(a1 + 49);
  sub_1000D801C(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022B2C20;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_1007F19EC(uint64_t a1)
{
  return sub_1007F1928((void *)(a1 - 72));
}

void sub_1007F19F4(void *a1)
{
  sub_1007F1928(a1);

  operator delete();
}

void sub_1007F1A2C(uint64_t a1)
{
  sub_1007F1928((void *)(a1 - 72));

  operator delete();
}

uint64_t sub_1007F1A68(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 120))(a1, a2, 0);
}

uint64_t sub_1007F1A90(uint64_t a1, uint64_t a2, sqlite3_int64 a3)
{
  uint64_t v5 = a1;
  if (!sub_100082064(a1 + 72)) {
    goto LABEL_28;
  }
  sub_100082068((void *)(v5 + 472), &v31);
  memset(out, 0, 37);
  uuid_unparse((const unsigned __int8 *)(a2 + 64), out);
  char v6 = (sqlite3_stmt *)sub_10014D19C(v31);
  if (!sub_100055D58(v6, 1, *(double *)(a2 + 8))) {
    goto LABEL_24;
  }
  unint64_t v7 = (sqlite3_stmt *)sub_10014D19C(v31);
  if (!sub_10014D1A4(v7, 2, *(_DWORD *)(a2 + 16))) {
    goto LABEL_24;
  }
  uint64_t v8 = (sqlite3_stmt *)sub_10014D19C(v31);
  if (!sub_10014D1A4(v8, 3, *(_DWORD *)(a2 + 20))) {
    goto LABEL_24;
  }
  unint64_t v9 = (sqlite3_stmt *)sub_10014D19C(v31);
  if (!sub_100055D58(v9, 4, *(double *)(a2 + 24))) {
    goto LABEL_24;
  }
  unint64_t v10 = (sqlite3_stmt *)sub_10014D19C(v31);
  if (!sub_100055D58(v10, 5, *(double *)(a2 + 40))) {
    goto LABEL_24;
  }
  unsigned int v11 = (sqlite3_stmt *)sub_10014D19C(v31);
  if (!sub_100055D58(v11, 6, *(double *)(a2 + 56))) {
    goto LABEL_24;
  }
  long long v12 = (sqlite3_stmt *)sub_10014D19C(v31);
  if (!sub_100133F10(v12, 7, out)) {
    goto LABEL_24;
  }
  uint64_t v13 = (sqlite3_stmt *)sub_10014D19C(v31);
  if (!sub_100055D58(v13, 8, *(double *)(a2 + 80))) {
    goto LABEL_24;
  }
  int v14 = (sqlite3_stmt *)sub_10014D19C(v31);
  if (!sub_100055D58(v14, 9, *(double *)(a2 + 48))) {
    goto LABEL_24;
  }
  int v15 = (sqlite3_stmt *)sub_10014D19C(v31);
  if (!sub_100055B20(v15, 10, *(_DWORD *)(a2 + 96))) {
    goto LABEL_24;
  }
  uint64_t v16 = (sqlite3_stmt *)sub_10014D19C(v31);
  if (!sub_100055B20(v16, 11, *(_DWORD *)(a2 + 100))) {
    goto LABEL_24;
  }
  uint64_t v17 = (sqlite3_stmt *)sub_10014D19C(v31);
  if (!sub_100055B20(v17, 12, *(_DWORD *)(a2 + 104))) {
    goto LABEL_24;
  }
  __int16 v18 = (sqlite3_stmt *)sub_10014D19C(v31);
  if (!sub_100055B20(v18, 13, *(_DWORD *)(a2 + 108))) {
    goto LABEL_24;
  }
  std::string v19 = (sqlite3_stmt *)sub_10014D19C(v31);
  if (!sub_100055D58(v19, 14, *(double *)(a2 + 32))) {
    goto LABEL_24;
  }
  std::string v20 = (sqlite3_stmt *)sub_10014D19C(v31);
  if (sub_100055D58(v20, 15, *(double *)(a2 + 112))
    && (unint64_t v21 = (sqlite3_stmt *)sub_10014D19C(v31), sub_100055D58(v21, 16, *(double *)(a2 + 88)))
    && (long long v22 = (sqlite3_stmt *)sub_10014D19C(v31), sub_100055D58(v22, 17, *(double *)(a2 + 120)))
    && (unint64_t v23 = (sqlite3_stmt *)sub_10014D19C(v31), sub_100055D58(v23, 18, *(double *)(a2 + 128)))
    && (unint64_t v24 = (sqlite3_stmt *)sub_10014D19C(v31), sub_100055B20(v24, 19, *(_DWORD *)(a2 + 136)))
    && (uint64_t v25 = (sqlite3_stmt *)sub_10014D19C(v31), sub_100055D58(v25, 20, *(double *)(a2 + 144)))
    && (uint64_t v26 = (sqlite3_stmt *)sub_10014D19C(v31), sub_10014DBB4(v26, 21, a3)))
  {
    uint64_t v5 = *(void *)(v5 + 80);
    uint64_t v27 = (sqlite3_stmt *)sub_10014D19C(v31);
    LOBYTE(v5) = sub_10001FEB0(v5, v27);
    int v28 = 0;
  }
  else
  {
LABEL_24:
    int v28 = 1;
  }
  uint64_t v29 = v31;
  uint64_t v31 = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  if (v28) {
LABEL_28:
  }
    LOBYTE(v5) = 0;
  return v5 & 1;
}

void sub_1007F1D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007F1DA4(uint64_t *a1)
{
  uint64_t result = sub_10014C3C0(a1[10]);
  if (result)
  {
    sub_1007F1E38((uint64_t)a1);
    sub_1005F7B0C(a1[10], "VO2MaxRetrocomputeHistory", (const char **)&off_1022C9FA8, (const std::string::value_type **)&off_10241DB48, 0);
    a1[61] = sub_100601D1C(a1[10], (uint64_t)"SELECT * FROM VO2MaxRetrocomputeHistory WHERE algVersion = ? LIMIT 1");
    a1[62] = v3;
    a1[57] = sub_100601D1C(a1[10], (uint64_t)"INSERT INTO VO2MaxRetrocomputeHistory (startTime, algVersion, status, firstSampleDate, lastSampleDate, lastSessionTimestamp, lastSessionId, meanDelta, lastSampleDatePrevAlg, numUpdatedEstimates, numNewEstimates, numLostEstimates, numLostEstimatesAfterLastSession, firstSummaryDate, lastTimestampToHealthKit, meanPercentileDelta, highPercentileMaxDelta, estimateVariabilityDelta, unavailableReasons, availableStartTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    a1[58] = v4;
    uint64_t result = sub_100601D1C(a1[10], (uint64_t)"UPDATE VO2MaxRetrocomputeHistory SET startTime = ?, algVersion =?, status = ?, firstSampleDate = ?, lastSampleDate = ?, lastSessionTimestamp = ?, lastSessionId = ?, meanDelta = ?, lastSampleDatePrevAlg = ?, numUpdatedEstimates = ?, numNewEstimates = ?, numLostEstimates = ?, numLostEstimatesAfterLastSession = ?, firstSummaryDate = ?, lastTimestampToHealthKit = ?, meanPercentileDelta = ?, highPercentileMaxDelta = ?, estimateVariabilityDelta = ?, unavailableReasons = ?, availableStartTime = ? WHERE id = ?");
    a1[59] = result;
    a1[60] = v5;
  }
  return result;
}

uint64_t sub_1007F1E38(uint64_t a1)
{
  uint64_t result = sub_1005F93E4(*(void *)(a1 + 80), "VO2MaxRetrocomputeHistory");
  if (result)
  {
    uint64_t v3 = "startTime";
    int v4 = 5;
    __int16 v5 = 0;
    char v6 = 0;
    char v7 = 0;
    sub_1005FEC4C(*(void *)(a1 + 80), "VO2MaxRetrocomputeHistory", (uint64_t)"startTime", (uint64_t)&v3);
  }
  return result;
}

void sub_1007F2330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a23);
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  sub_101A129A8((uint64_t)&a61);
  _Unwind_Resume(a1);
}

void sub_1007F23D8(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM VO2MaxRetrocomputeHistory");
  }
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_1022CA3C8);
  }
  uint64_t v2 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[VO2MaxRetrocomputeHistory] Database inaccessible, unable to delete records.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_1022CA3C8);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLVO2MaxRetrocomputeRecorderDb::deleteAllRecordsUL()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
}

void sub_1007F25EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

void sub_1007F260C(uint64_t a1)
{
}

uint64_t sub_1007F2614(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 456), &v27);
    memset(out, 0, 37);
    uuid_unparse((const unsigned __int8 *)(a2 + 64), out);
    __int16 v5 = (sqlite3_stmt *)sub_10014D19C(v27);
    if (sub_100055D58(v5, 1, *(double *)(a2 + 8)))
    {
      char v6 = (sqlite3_stmt *)sub_10014D19C(v27);
      if (sub_10014D1A4(v6, 2, *(_DWORD *)(a2 + 16)))
      {
        char v7 = (sqlite3_stmt *)sub_10014D19C(v27);
        if (sub_10014D1A4(v7, 3, *(_DWORD *)(a2 + 20)))
        {
          uint64_t v8 = (sqlite3_stmt *)sub_10014D19C(v27);
          if (sub_100055D58(v8, 4, *(double *)(a2 + 24)))
          {
            unint64_t v9 = (sqlite3_stmt *)sub_10014D19C(v27);
            if (sub_100055D58(v9, 5, *(double *)(a2 + 40)))
            {
              unint64_t v10 = (sqlite3_stmt *)sub_10014D19C(v27);
              if (sub_100055D58(v10, 6, *(double *)(a2 + 56)))
              {
                unsigned int v11 = (sqlite3_stmt *)sub_10014D19C(v27);
                if (sub_100133F10(v11, 7, out))
                {
                  long long v12 = (sqlite3_stmt *)sub_10014D19C(v27);
                  if (sub_100055D58(v12, 8, *(double *)(a2 + 80)))
                  {
                    uint64_t v13 = (sqlite3_stmt *)sub_10014D19C(v27);
                    if (sub_100055D58(v13, 9, *(double *)(a2 + 48)))
                    {
                      int v14 = (sqlite3_stmt *)sub_10014D19C(v27);
                      if (sub_100055B20(v14, 10, *(_DWORD *)(a2 + 96)))
                      {
                        int v15 = (sqlite3_stmt *)sub_10014D19C(v27);
                        if (sub_100055B20(v15, 11, *(_DWORD *)(a2 + 100)))
                        {
                          uint64_t v16 = (sqlite3_stmt *)sub_10014D19C(v27);
                          if (sub_100055B20(v16, 12, *(_DWORD *)(a2 + 104)))
                          {
                            uint64_t v17 = (sqlite3_stmt *)sub_10014D19C(v27);
                            if (sub_100055B20(v17, 13, *(_DWORD *)(a2 + 108)))
                            {
                              __int16 v18 = (sqlite3_stmt *)sub_10014D19C(v27);
                              if (sub_100055D58(v18, 14, *(double *)(a2 + 32)))
                              {
                                std::string v19 = (sqlite3_stmt *)sub_10014D19C(v27);
                                if (sub_100055D58(v19, 15, *(double *)(a2 + 112)))
                                {
                                  std::string v20 = (sqlite3_stmt *)sub_10014D19C(v27);
                                  if (sub_100055D58(v20, 16, *(double *)(a2 + 88)))
                                  {
                                    unint64_t v21 = (sqlite3_stmt *)sub_10014D19C(v27);
                                    if (sub_100055D58(v21, 17, *(double *)(a2 + 120)))
                                    {
                                      long long v22 = (sqlite3_stmt *)sub_10014D19C(v27);
                                      if (sub_100055D58(v22, 18, *(double *)(a2 + 128)))
                                      {
                                        unint64_t v23 = (sqlite3_stmt *)sub_10014D19C(v27);
                                        if (sub_100055B20(v23, 19, *(_DWORD *)(a2 + 136)))
                                        {
                                          unint64_t v24 = (sqlite3_stmt *)sub_10014D19C(v27);
                                          if (sub_100055D58(v24, 20, *(double *)(a2 + 144)))
                                          {
                                            uint64_t v25 = *(void *)(a1 + 80);
                                            uint64_t v26 = (sqlite3_stmt *)sub_10014D19C(v27);
                                            sub_10001FEB0(v25, v26);
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = v27;
    uint64_t v27 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_1007F28C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007F28E8(uint64_t a1, void *a2)
{
  if (!sub_1005F9734(*(void *)(a1 + 80), (char *)a2))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022CA4E0);
    }
    int v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022CA4E0);
      }
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      std::string v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<VO2MaxRetrocomputeHistory>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = VO2MaxRetrocomputeHistory, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", (const char *)v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    memset(__p, 0, 24);
    sub_100134750(buf, (char *)a2);
    __int16 v5 = std::string::append(buf, "AutoIncr");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t v22 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)unint64_t v21 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_100134750(buf, (char *)a2);
    char v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_10002B640(*(void *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v8 = HIBYTE(__p[2]);
    }
    else {
      size_t v8 = (size_t)__p[1];
    }
    unint64_t v9 = buf;
    sub_1001110E4((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v22 >= 0) {
      unsigned int v11 = v21;
    }
    else {
      unsigned int v11 = (void **)v21[0];
    }
    if (v22 >= 0) {
      std::string::size_type v12 = HIBYTE(v22);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v21[1];
    }
    uint64_t v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    int v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v14;
    __p[1] = v23.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v23.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      char v15 = HIBYTE(__p[2]);
      int v14 = __p[0];
    }
    if (v15 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)v14;
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)v16);
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = *(void *)(v17 + 88);
  }
  sub_10003CC68(v17, v18);
  return 0;
}

void sub_1007F3B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1007F3E74(void *a1, void *a2)
{
  int v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A6F6F4(v4);
    __break(1u);
  }
  std::string::size_type v12 = v13[1];
  operator delete(v13[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v13);
    long long v6 = sub_100132EFC(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(v15, a1);
    if ((v16 & 0x80u) == 0) {
      char v7 = v15;
    }
    else {
      char v7 = (void **)v15[0];
    }
    if ((v16 & 0x80u) == 0) {
      uint64_t v8 = v16;
    }
    else {
      uint64_t v8 = (uint64_t)v15[1];
    }
    unint64_t v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v16 < 0) {
      operator delete(v15[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v16 & 0x80u) == 0) {
      unsigned int v11 = v15;
    }
    else {
      unsigned int v11 = (void **)v15[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_1007F436C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1007F43F4(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A6F864(v2);
    __break(1u);
  }
  unint64_t v9 = v11[1];
  operator delete(v11[0]);
  if (!v9) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v11);
    uint64_t v3 = sub_100132EFC(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      int v4 = __p;
    }
    else {
      int v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    long long v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_1007F4928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1007F49B0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_1007F6448(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022CA4E0);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    long long v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      long long v6 = (void *)*v6;
    }
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)&v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    char v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022CA4E0);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(void *)uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022CA4E0);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<VO2MaxRetrocomputeHistory>::setDatabaseAccessible() [T = VO2MaxRetrocomputeHistory, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_1007F5130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1007F5164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v3;
  long long v4 = *(_OWORD *)(a3 + 32);
  long long v5 = *(_OWORD *)(a3 + 48);
  long long v6 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 48) = v5;
  __n128 result = *(__n128 *)(a3 + 96);
  long long v8 = *(_OWORD *)(a3 + 112);
  long long v9 = *(_OWORD *)(a3 + 128);
  *(void *)(a2 + 144) = *(void *)(a3 + 144);
  *(_OWORD *)(a2 + 112) = v8;
  *(_OWORD *)(a2 + 128) = v9;
  *(__n128 *)(a2 + 96) = result;
  return result;
}

id *sub_1007F5198(uint64_t a1, uint64_t a2, char a3)
{
  v34[0] = (id)os_transaction_create();
  v34[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v34);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  uint64_t v43 = 0;
  double v44 = 0.0;
  int v45 = 3;
  uint64_t v51 = 0;
  long long v46 = 0u;
  memset(v47, 0, sizeof(v47));
  long long v49 = 0u;
  memset(v50, 0, sizeof(v50));
  long long v48 = 0u;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 104))(a1, &v43);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022CA4E0);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022CA4E0);
        }
        LOWORD(v35) = 0;
        char v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<VO2MaxRetrocomputeHistory>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxRetrocomputeHistory, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *(double *)(a2 + 8);
    double v8 = v44;
    double v9 = v7 - v44;
    if (v7 - v44 < 0.0) {
      double v9 = -(v7 - v44);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022CA4E0);
      }
      uint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 8);
        *(_DWORD *)buf = 134349312;
        double v40 = v44;
        __int16 v41 = 2050;
        uint64_t v42 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022CA4E0);
        }
        uint64_t v28 = *(void *)(a2 + 8);
        int v35 = 134349312;
        double v36 = v44;
        __int16 v37 = 2050;
        uint64_t v38 = v28;
        uint64_t v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxRetrocomputeHistory>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxRetrocomputeHistory, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
      }
      CLWriteStackshot();
      double v7 = *(double *)(a2 + 8);
      double v8 = v44;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022CA4E0);
        }
        uint64_t v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)(a2 + 8);
          *(_DWORD *)buf = 134217984;
          double v40 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022CA4E0);
          }
          double v30 = *(double *)(a2 + 8);
          int v35 = 134217984;
          double v36 = v30;
          uint64_t v31 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxRetrocomputeHistory>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxRetrocomputeHistory, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v31);
          if (v31 != (char *)buf) {
            free(v31);
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v33 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_1022CA4E0);
        double v17 = v33;
      }
      double v18 = v16 - v17;
      std::string v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        double v40 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022CA4E0);
        }
        int v35 = 134217984;
        double v36 = v18;
        uint64_t v32 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<VO2MaxRetrocomputeHistory>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = VO2MaxRetrocomputeHistory, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v32);
        if (v32 != (char *)buf) {
          free(v32);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, &v43, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v20;
  long long v21 = *(_OWORD *)(a2 + 32);
  long long v22 = *(_OWORD *)(a2 + 48);
  long long v23 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 304) = v23;
  *(_OWORD *)(a1 + 256) = v21;
  *(_OWORD *)(a1 + 272) = v22;
  long long v24 = *(_OWORD *)(a2 + 96);
  long long v25 = *(_OWORD *)(a2 + 112);
  long long v26 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 368) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 336) = v25;
  *(_OWORD *)(a1 + 352) = v26;
  *(_OWORD *)(a1 + 320) = v24;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v34);
}

void sub_1007F59F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1007F5A1C(void *a1, uint64_t a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101A6F9D4(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  uint64_t v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_1007F5D90(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A6FB44(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    long long v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_1007F60BC(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A6FCB4(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    long long v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      long long v4 = __p;
    }
    else {
      long long v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

uint64_t sub_1007F63E0(uint64_t a1)
{
  return sub_1007F49B0(a1 - 72);
}

void sub_1007F63E8(id a1)
{
  qword_102419228 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

void sub_1007F6418(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1007F6448(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_1007F64C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007F64E4(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_1007F6514(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void *sub_1007F65A4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1AF286BCA1AF287) {
    sub_1001D7FA0();
  }
  return operator new(152 * a2);
}

uint64_t sub_1007F6B34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 6472) + 32))(*(void *)(a1 + 6472), a2);
}

void sub_1007F6B9C(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1007F6BB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 6472) + 40))(*(void *)(a1 + 6472), a2);
}

void sub_1007F6C18(_Unwind_Exception *a1)
{
  sub_10050BAA0(v1);
  _Unwind_Resume(a1);
}

void sub_1007F6CCC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_1007F6D84(_Unwind_Exception *a1)
{
}

void sub_1007F6D9C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *uint64_t v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_1007F6E44(_Unwind_Exception *a1)
{
}

id sub_1007F6FD4(id a1, SEL a2, id a3, id a4)
{
  if (!a4) {
    return 0;
  }
  if (objc_msgSend(objc_msgSend(a3, "departureDate"), "compare:", objc_msgSend(a3, "arrivalDate")) == (id)-1)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022CA5A8);
    }
    double v18 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      int v20 = 68289283;
      int v21 = 0;
      __int16 v22 = 2082;
      long long v23 = "";
      __int16 v24 = 2113;
      id v25 = a3;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#slv Malformed visit\", \"visit\":%{private, location:escape_only}@}", (uint8_t *)&v20, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CA5A8);
      }
    }
    std::string v19 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v20 = 68289283;
      int v21 = 0;
      __int16 v22 = 2082;
      long long v23 = "";
      __int16 v24 = 2113;
      id v25 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#slv Malformed visit", "{\"msg%{public}.0s\":\"#slv Malformed visit\", \"visit\":%{private, location:escape_only}@}", (uint8_t *)&v20, 0x1Cu);
    }
    return 0;
  }
  id v6 = [a4 compare:[a3 departureDate]];
  id v7 = [a4 compare:[a3 arrivalDate]];
  unint64_t v8 = 0;
  if ([a3 hasArrivalDate] && v7 == (id)-1) {
    unint64_t v8 = (unint64_t)[a3 arrivalDate];
  }
  unint64_t v9 = 0;
  if ([a3 hasDepartureDate] && v6 == (id)-1) {
    unint64_t v9 = (unint64_t)[a3 departureDate];
  }
  if (!(v8 | v9)) {
    return 0;
  }
  id v10 = objc_alloc((Class)CLVisit);
  [a3 coordinate];
  double v12 = v11;
  double v14 = v13;
  [a3 horizontalAccuracy];
  id v16 = [v10 initWithCoordinate:v8 horizontalAccuracy:v9 arrivalDate:objc_msgSend(a3, "detectionDate") departureDate:objc_msgSend(a3, "_placeInference") detectionDate:v12 placeInference:v14];

  return v16;
}

void sub_1007F7388(id a1)
{
  qword_10247E1D0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLSignificantVisitManagerSilo"];
}

void sub_1007F7A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1007F7ADC(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) settingsDidChange:a2];
}

void sub_1007F7AE8(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *a2;
  sub_100089AE0((char *)v7, (long long *)a3);
  uint64_t v21 = *(void *)(a3 + 184);
  [a4 onClientManagerNotification:v6 data:v7];
  if (v20 < 0) {
    operator delete(__p);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
}

void sub_1007F7BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_1007F7BC8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1007FC080;
  v3[3] = &unk_10229FED8;
  v3[4] = v1;
  return [v1 universe].silo.async:v3;
}

id sub_1007F7C4C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1007FC088;
  v3[3] = &unk_10229FED8;
  v3[4] = v1;
  return [v1 universe].silo.async:v3;
}

id sub_1007F7CD0(uint64_t a1)
{
  [*(id *)(a1 + 32) setArmed:1];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 checkForMonitoring];
}

BOOL sub_1007F89A8(id a1, id a2, NSDictionary *a3)
{
  [objc_msgSend(a2, "detectionDate", a3) timeIntervalSinceNow];
  double v5 = v4;
  if (v4 <= -15.0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022CA5A8);
    }
    uint64_t v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      v8[0] = 68289283;
      v8[1] = 0;
      __int16 v9 = 2082;
      char v10 = "";
      __int16 v11 = 2113;
      id v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#slv Dropping old visit\", \"visit\":%{private, location:escape_only}@}", (uint8_t *)v8, 0x1Cu);
    }
  }
  return v5 > -15.0;
}

void sub_1007F909C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) keyForClient:*(void *)(a1 + 40)];
  if (v2)
  {
    long long v3 = v2;
    if ([*(id *)(a1 + 32) isClientWithKeyInterested:v2])
    {
      id v4 = [*(id *)(a1 + 32) authorizationDateForClientWithKey:v3];
      id v5 = +[CLVisit _visitWithVisit:*(void *)(a1 + 48) authDate:v4];
      if (v5)
      {
        id v6 = v5;
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022CA5A8);
        }
        id v7 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          id v8 = [v3 UTF8String];
          [v4 timeIntervalSinceReferenceDate];
          int v20 = 68289795;
          int v21 = 0;
          __int16 v22 = 2082;
          long long v23 = "";
          __int16 v24 = 2082;
          id v25 = v8;
          __int16 v26 = 2050;
          uint64_t v27 = v9;
          __int16 v28 = 2113;
          id v29 = v6;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#slv Delivering visit to client\", \"key\":%{public, location:escape_only}s, \"authDate_s\":\"%{public}.09f\", \"mangled\":%{private, location:escape_only}@}", (uint8_t *)&v20, 0x30u);
        }
        [*(id *)(a1 + 40) onSignificantLocationVisit:v6];
        return;
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CA5A8);
      }
      uint64_t v17 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        id v18 = [v3 UTF8String];
        [v4 timeIntervalSinceReferenceDate];
        int v20 = 68289538;
        int v21 = 0;
        __int16 v22 = 2082;
        long long v23 = "";
        __int16 v24 = 2082;
        id v25 = v18;
        __int16 v26 = 2050;
        uint64_t v27 = v19;
        double v13 = "{\"msg%{public}.0s\":\"#slv Client not authorized for visit\", \"key\":%{public, location:escape_only}s, \""
              "authDate_s\":\"%{public}.09f\"}";
        char v14 = v17;
        os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
        uint32_t v16 = 38;
        goto LABEL_24;
      }
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CA5A8);
      }
      uint64_t v12 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        int v20 = 68289282;
        int v21 = 0;
        __int16 v22 = 2082;
        long long v23 = "";
        __int16 v24 = 2082;
        id v25 = [v3 UTF8String];
        double v13 = "{\"msg%{public}.0s\":\"#slv Not delivering visit to client... not interested\", \"key\":%{public, location:escape_only}s}";
        char v14 = v12;
        os_log_type_t v15 = OS_LOG_TYPE_DEBUG;
        uint32_t v16 = 28;
LABEL_24:
        _os_log_impl((void *)&_mh_execute_header, v14, v15, v13, (uint8_t *)&v20, v16);
      }
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022CA5A8);
    }
    char v10 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      int v20 = 68289026;
      int v21 = 0;
      __int16 v22 = 2082;
      long long v23 = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#slv Cannot deliver a visit to a client without a key\"}", (uint8_t *)&v20, 0x12u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CA5A8);
      }
    }
    __int16 v11 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v20 = 68289026;
      int v21 = 0;
      __int16 v22 = 2082;
      long long v23 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#slv Cannot deliver a visit to a client without a key", "{\"msg%{public}.0s\":\"#slv Cannot deliver a visit to a client without a key\"}", (uint8_t *)&v20, 0x12u);
    }
  }
}

void sub_1007F9A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007F9E5C(uint64_t a1, uint64_t a2)
{
  long long v3 = +[CLClientKeyPath clientKeyPathWithLegacyClientKey:*(void *)(a1 + 32)];

  return sub_1007A9928(a2, (uint64_t)v3, 0);
}

id sub_1007F9EAC(uint64_t a1)
{
  int v3 = 0;
  id result = [*(id *)(a1 + 32) interestForClientKey:[*(id *)(a1 + 40) UTF8String] outInterest:&v3];
  if (v3 == 2)
  {
    sub_1004CF7DC([*(id *)(a1 + 32) clientInterest], [*(id *)(a1 + 40) UTF8String], 0xFFFFFFFFLL);
    sub_1004CF7DC([*(id *)(a1 + 32) clientAuthDate], [*(id *)(a1 + 40) UTF8String], 0xFFFFFFFFLL);
    return [*(id *)(a1 + 32) flushAll];
  }
  return result;
}

void sub_1007FA18C(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022CA5A8);
  }
  id v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2113;
    uint64_t v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#slv Sending out visit\", \"visit\":%{private, location:escape_only}@}", buf, 0x1Cu);
  }
  [objc_msgSend(*(id *)(a1 + 40), "recentVisits") addObject:*(void *)(a1 + 32)];
  [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "universe"), "vendor"), "proxyForService:", @"CLApplicationLifecycleManager");
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  sub_1004CFF34((uint64_t)[*(id *)(a1 + 40) clientInterest]);
}

void sub_1007FA618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a14;
  sub_1000A7B4C(&a17);
  _Unwind_Resume(a1);
}

void sub_1007FAE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void **a39)
{
  a39 = (void **)&a36;
  sub_1000A7B4C(&a39);
  _Unwind_Resume(a1);
}

void sub_1007FB3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a16;
  sub_1000A7B4C(&a19);
  _Unwind_Resume(a1);
}

void sub_1007FB56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1007FB624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_1007FBB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void sub_1007FC020(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1007FC050(id a1)
{
  qword_1024195A8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Simulation");
}

id sub_1007FC080(uint64_t a1)
{
  return _[*(id *)(a1 + 32) onInterestStoreTimer];
}

id sub_1007FC088(uint64_t a1)
{
  return _[*(id *)(a1 + 32) onAuthDateStoreTimer];
}

void sub_1007FC090()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D2E228;
      v0[3] = unk_101D2E238;
      v0[4] = xmmword_101D2E248;
      v0[0] = xmmword_101D2E208;
      v0[1] = unk_101D2E218;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_1007FC170(_Unwind_Exception *a1)
{
}

uint64_t sub_1007FC188()
{
  sub_100134750(qword_10247E1B8, "SignificantVisitManager");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247E1B8, (void *)&_mh_execute_header);
}

uint64_t sub_1007FC1E8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = sub_1010455A4(a1, a2, a3, a4);
  *(void *)uint64_t v5 = off_1022CA5F8;
  *(void *)(v5 + 304) = "";
  *(_WORD *)(v5 + 312) = 0;
  *(void *)(a1 + 320) = nullsub_41(0, v6);
  return a1;
}

void sub_1007FC248(_Unwind_Exception *a1)
{
  sub_1010456D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1007FC25C(uint64_t a1, size_t *a2, int *a3)
{
  sub_101048050(a1, &v60);
  uint64_t v6 = (const std::string *)(a1 + 8);
  id v7 = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0) {
    id v7 = (const char *)v6->__r_.__value_.__r.__words[0];
  }
  if (sub_1000A569C(v7))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
    __int16 v8 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = a1 + 8;
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v9 = v6->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315138;
      v67 = (std::string *)v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "TILE: mmapTile, prefer local file name because it exists, %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022CA6C0);
      }
      uint64_t v41 = a1 + 8;
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v41 = v6->__r_.__value_.__r.__words[0];
      }
      int v62 = 136315138;
      v63 = (std::string *)v41;
      uint64_t v42 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void *CLTileFileWithTraversal::mmapTile(size_t &, int &)", "%s\n", v42);
      if (v42 != (char *)buf) {
        free(v42);
      }
    }
    std::string::operator=(&v60, v6);
  }
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v10 = &v60;
  }
  else {
    __int16 v10 = (std::string *)v60.__r_.__value_.__r.__words[0];
  }
  int v11 = open((const char *)v10, 0);
  *a3 = v11;
  if (v11 < 0)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
    long long v23 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v24 = &v60;
      }
      else {
        __int16 v24 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      int v25 = *__error();
      __int16 v26 = __error();
      uint64_t v27 = strerror(*v26);
      *(_DWORD *)buf = 136315650;
      v67 = v24;
      __int16 v68 = 1024;
      *(_DWORD *)v69 = v25;
      *(_WORD *)&v69[4] = 2080;
      *(void *)&v69[6] = v27;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "TILE: mmapTile, can't open, %s, errno, %d, %s", buf, 0x1Cu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_59;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v28 = &v60;
    }
    else {
      __int16 v28 = (std::string *)v60.__r_.__value_.__r.__words[0];
    }
    goto LABEL_86;
  }
  if (fstat(v11, &v61) == -1)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
    id v29 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v30 = &v60;
      }
      else {
        double v30 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      int v31 = *__error();
      uint64_t v32 = __error();
      double v33 = strerror(*v32);
      *(_DWORD *)buf = 136315650;
      v67 = v30;
      __int16 v68 = 1024;
      *(_DWORD *)v69 = v31;
      *(_WORD *)&v69[4] = 2080;
      *(void *)&v69[6] = v33;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "TILE: can't stat, %s, errno, %d, %s", buf, 0x1Cu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_59;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v28 = &v60;
    }
    else {
      __int16 v28 = (std::string *)v60.__r_.__value_.__r.__words[0];
    }
LABEL_86:
    int v43 = *__error();
    double v44 = __error();
    int v45 = strerror(*v44);
    int v62 = 136315650;
    v63 = v28;
    __int16 v64 = 1024;
    *(_DWORD *)v65 = v43;
    *(_WORD *)&v65[4] = 2080;
    *(void *)&v65[6] = v45;
    long long v46 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void *CLTileFileWithTraversal::mmapTile(size_t &, int &)", "%s\n", v46);
    if (v46 != (char *)buf) {
      free(v46);
    }
LABEL_59:
    uint64_t v12 = 0;
    *a2 = 0;
    goto LABEL_60;
  }
  *a2 = 0;
  uint64_t v12 = (uint64_t)mmap(0, v61.st_size, 1, 2, *a3, 0);
  st_std::string::size_type size = v61.st_size;
  int v14 = fstat(*a3, &v61);
  BOOL v15 = v14 != -1;
  if (v14 == -1)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022CA6E0);
    }
    uint32_t v16 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
    {
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v17 = &v60;
      }
      else {
        uint64_t v17 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      int v18 = *__error();
      uint64_t v19 = __error();
      int v20 = strerror(*v19);
      *(_DWORD *)buf = 136446722;
      v67 = v17;
      __int16 v68 = 1026;
      *(_DWORD *)v69 = v18;
      *(_WORD *)&v69[4] = 2082;
      *(void *)&v69[6] = v20;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "TILE: can't stat, %{public}s, errno, %{public}d, %{public}s", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022CA6E0);
      }
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v49 = &v60;
      }
      else {
        long long v49 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      int v50 = *__error();
      uint64_t v51 = __error();
      v52 = strerror(*v51);
      int v62 = 136446722;
      v63 = v49;
      __int16 v64 = 1026;
      *(_DWORD *)v65 = v50;
      *(_WORD *)&v65[4] = 2082;
      *(void *)&v65[6] = v52;
      v53 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void *CLTileFileWithTraversal::mmapTile(size_t &, int &)", "%s\n", v53);
      if (v53 != (char *)buf) {
        free(v53);
      }
    }
  }
  if (st_size != v61.st_size)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022CA6E0);
    }
    int v21 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
    {
      __int16 v22 = &v60;
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        __int16 v22 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136446722;
      v67 = v22;
      __int16 v68 = 2050;
      *(void *)v69 = st_size;
      *(_WORD *)&v69[8] = 2050;
      *(void *)&v69[10] = v61.st_size;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "TILE: mmap file size changed, %{public}s, size before mmap, %{public}ld, size after mmap, %{public}lld", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022CA6E0);
      }
      v47 = &v60;
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        v47 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      int v62 = 136446722;
      v63 = v47;
      __int16 v64 = 2050;
      *(void *)v65 = st_size;
      *(_WORD *)&v65[8] = 2050;
      *(void *)&v65[10] = v61.st_size;
      long long v48 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void *CLTileFileWithTraversal::mmapTile(size_t &, int &)", "%s\n", v48);
      if (v48 != (char *)buf) {
        free(v48);
      }
    }
    BOOL v15 = 0;
  }
  *a2 = v61.st_size;
  if (v12 == -1)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
    int v35 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v36 = &v60;
      }
      else {
        double v36 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      off_t v37 = v61.st_size;
      int v38 = *__error();
      uint64_t v39 = __error();
      double v40 = strerror(*v39);
      *(_DWORD *)buf = 136315906;
      v67 = v36;
      __int16 v68 = 2048;
      *(void *)v69 = v37;
      *(_WORD *)&v69[8] = 1024;
      *(_DWORD *)&v69[10] = v38;
      *(_WORD *)&v69[14] = 2080;
      *(void *)&v69[16] = v40;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_FAULT, "TILE: mmap failed, %s, size, %lld, errno, %d, %s", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022CA6C0);
      }
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v54 = &v60;
      }
      else {
        v54 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      off_t v55 = v61.st_size;
      int v56 = *__error();
      v57 = __error();
      v58 = strerror(*v57);
      int v62 = 136315906;
      v63 = v54;
      __int16 v64 = 2048;
      *(void *)v65 = v55;
      *(_WORD *)&v65[8] = 1024;
      *(_DWORD *)&v65[10] = v56;
      *(_WORD *)&v65[14] = 2080;
      *(void *)&v65[16] = v58;
      v59 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void *CLTileFileWithTraversal::mmapTile(size_t &, int &)", "%s\n", v59);
      if (v59 != (char *)buf) {
        free(v59);
      }
    }
    uint64_t v12 = -1;
  }
  else if (v15)
  {
    goto LABEL_63;
  }
LABEL_60:
  close(*a3);
  *a3 = -1;
  if (v12 != -1) {
    munmap((void *)v12, *a2);
  }
  uint64_t v12 = 0;
  *a2 = 0;
LABEL_63:
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  return v12;
}

void sub_1007FCE44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007FCEA4(int a1, void *a2, size_t a3, int a4)
{
  if ((a4 & 0x80000000) == 0) {
    close(a4);
  }
  if (a2)
  {
    munmap(a2, a3);
  }
}

uint64_t sub_1007FCEFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_OWORD *)(a2 + 24);
  uint64_t v5 = sub_1007FC25C(a1, (size_t *)(a2 + 24), (int *)(a2 + 32));
  *(void *)(a2 + 40) = v5;
  if (v5) {
    BOOL v6 = *(void *)(a2 + 24) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  uint64_t v7 = !v6;
  if (v6)
  {
    sub_100134750(&v10, "");
    *(void *)&long long v11 = 0;
    DWORD2(v11) = -1;
    long long v12 = 0uLL;
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(std::string *)a2 = v10;
    long long v8 = v12;
    *uint64_t v4 = v11;
    v4[1] = v8;
  }
  else
  {
    *(void *)(a2 + 48) = 0;
    sub_101048050(a1, &v10);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(std::string *)a2 = v10;
  }
  return v7;
}

uint64_t sub_1007FCFE0(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a2 + 40);
  if (v2)
  {
    uint64_t v5 = (_OWORD *)(a2 + 24);
    size_t v4 = *(void *)(a2 + 24);
    int v6 = *(_DWORD *)(a2 + 32);
    if ((v6 & 0x80000000) == 0) {
      close(v6);
    }
    munmap(v2, v4);
    sub_100134750(&v9, "");
    *(void *)&long long v11 = 0;
    DWORD2(v11) = -1;
    long long v12 = 0uLL;
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = v9;
    *(void *)(a2 + 16) = v10;
    long long v7 = v12;
    *uint64_t v5 = v11;
    v5[1] = v7;
  }
  return 1;
}

uint64_t sub_1007FD08C(uint64_t a1, void *a2, _DWORD *a3)
{
  unint64_t v4 = a2[6];
  unint64_t v5 = a2[3];
  if (v4 >= v5)
  {
    uint64_t result = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 43962;
  }
  else if (v5 >= v4 + 12)
  {
    sub_100D33DF8((unsigned __int16 *)(a2[5] + v4), (uint64_t)a3);
    a2[6] += a3[1] + (unint64_t)a3[2] + 12;
    return 1;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
    long long v8 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      uint64_t v9 = a2[3];
      uint64_t v10 = a2[6];
      *(_DWORD *)buf = 134218496;
      uint64_t v14 = v9;
      __int16 v15 = 2048;
      uint64_t v16 = v10;
      __int16 v17 = 1024;
      int v18 = 12;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "TILE: corrupt header, fileGetNextSection, size, %zd, readto, %lld, %d", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022CA6C0);
      }
      long long v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTileFileWithTraversal::fileGetNextSection(CLMappedFile &, CLTilesManager_Type::SectionHeader &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    sub_10104D928(a1);
    return 0;
  }
  return result;
}

uint64_t sub_1007FD2F8(uint64_t a1, FILE *a2, uint64_t *a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v96 = v6;
  (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  __int16 v97 = 256;
  uint64_t v7 = a3[2];
  *(_OWORD *)(v5 + 304) = *(_OWORD *)a3;
  *(void *)(v5 + 320) = v7;
  *(unsigned char *)(v5 + 296) = 1;
  long long v8 = &qword_102419000;
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022CA6C0);
  }
  uint64_t v9 = &qword_102419000;
  uint64_t v10 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v11 = *a3;
    int v12 = *((unsigned __int8 *)a3 + 8);
    int v13 = *((unsigned __int8 *)a3 + 9);
    *(_DWORD *)buf = 136315906;
    v121[0] = v11;
    LOWORD(v121[1]) = 1024;
    *(_DWORD *)((char *)&v121[1] + 2) = v12;
    HIWORD(v121[1]) = 1024;
    LODWORD(v121[2]) = v13;
    WORD2(v121[2]) = 2048;
    *(void *)((char *)&v121[2] + 6) = sub_1000D8908((uint64_t)(a3 + 2));
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: traverseTileFile, start, message, %s, isHeadersOnly, %d, isBinarySearch, %d, macAddressToSearch, %012llx", buf, 0x22u);
    uint64_t v9 = &qword_102419000;
    long long v8 = &qword_102419000;
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
    uint64_t v80 = *a3;
    int v81 = *((unsigned __int8 *)a3 + 8);
    int v82 = *((unsigned __int8 *)a3 + 9);
    LODWORD(v119[0]) = 136315906;
    *(void *)((char *)v119 + 4) = v80;
    WORD6(v119[0]) = 1024;
    *(_DWORD *)((char *)v119 + 14) = v81;
    WORD1(v119[1]) = 1024;
    DWORD1(v119[1]) = v82;
    WORD4(v119[1]) = 2048;
    *(void *)((char *)&v119[1] + 10) = sub_1000D8908((uint64_t)(a3 + 2));
    v83 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLTileFileWithTraversal::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v83);
    uint64_t v9 = &qword_102419000;
    long long v8 = &qword_102419000;
    if (v83 != (char *)buf) {
      free(v83);
    }
  }
  if (!a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
    __int16 v15 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "TILE: traverseTileFile, can't open tile", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_21;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
    goto LABEL_115;
  }
  if (feof(a2))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
    uint64_t v14 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "TILE: traverseTileFile, file is empty", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_21;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
LABEL_115:
    LOWORD(v119[0]) = 0;
    v84 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLTileFileWithTraversal::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v84);
    if (v84 != (char *)buf) {
      free(v84);
    }
LABEL_21:
    uint64_t v16 = 0;
    goto LABEL_108;
  }
  *(void *)((char *)v119 + 4) = 192;
  LODWORD(v119[0]) = 109498;
  HIDWORD(v119[0]) = 381;
  memset(&v119[1], 0, 28);
  *(int32x2_t *)((char *)&v119[2] + 12) = vdup_n_s32(0xC47A0000);
  DWORD1(v119[3]) = -998637568;
  memset((char *)&v119[3] + 8, 0, 148);
  LODWORD(v108) = 306106;
  *(void *)((char *)&v108 + 4) = 176;
  HIDWORD(v108) = 381;
  *(_DWORD *)&v118[16] = 0;
  *(void *)&v118[20] = 0;
  long long v109 = 0u;
  long long v110 = 0u;
  uint64_t v91 = v6;
  if (!*(unsigned char *)(v5 + 296))
  {
LABEL_61:
    uint64_t v16 = 1;
    goto LABEL_103;
  }
  v89 = a2;
  uint64_t v90 = v5;
  while (1)
  {
    if (feof(a2)) {
      goto LABEL_61;
    }
    uint64_t v94 = 0;
    unsigned int v95 = 0;
    uint64_t __ptr = 0;
    int v93 = 0;
    size_t v17 = fread(&__ptr, 1uLL, 0xCuLL, a2);
    sub_100D33DF8((unsigned __int16 *)&__ptr, (uint64_t)&v94);
    BOOL v18 = v17 == 12;
    uint64_t v16 = v17 != 12;
    if (!v18) {
      goto LABEL_103;
    }
    if (v8[198] != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
    uint64_t v19 = v9[199];
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v20 = v16;
      int v21 = v8;
      __int16 v22 = v9;
      uint64_t v23 = *a3;
      int v24 = (unsigned __int16)v94;
      int v25 = WORD1(v94);
      int v27 = HIDWORD(v94);
      unsigned int v26 = v95;
      __int16 v28 = sub_101043C80(WORD1(v94));
      *(_DWORD *)buf = 136316674;
      v121[0] = v23;
      LOWORD(v121[1]) = 2048;
      *(void *)((char *)&v121[1] + 2) = 12;
      WORD1(v121[2]) = 1024;
      HIDWORD(v121[2]) = v24;
      LOWORD(v121[3]) = 1024;
      *(_DWORD *)((char *)&v121[3] + 2) = v25;
      HIWORD(v121[3]) = 1024;
      LODWORD(v121[4]) = v26;
      WORD2(v121[4]) = 1024;
      *(_DWORD *)((char *)&v121[4] + 6) = v27;
      WORD1(v121[5]) = 2080;
      *(void *)((char *)&v121[5] + 4) = v28;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "TILE: thisSection, message, %s, readBytes, %lu, section, signature, 0x%x, sectionId, %d, sizeBytes, %d, headerSizeBytes, %d, name, %s", buf, 0x38u);
      uint64_t v6 = v91;
      uint64_t v9 = v22;
      long long v8 = v21;
      uint64_t v16 = v20;
      a2 = v89;
      uint64_t v5 = v90;
    }
    if (sub_10013D1A0(115, 2))
    {
      unsigned int v88 = v16;
      bzero(buf, 0x65CuLL);
      v59 = v8;
      if (v8[198] != -1) {
        dispatch_once(&qword_102419630, &stru_1022CA6C0);
      }
      uint64_t v60 = *a3;
      int v61 = (unsigned __int16)v94;
      int v62 = WORD1(v94);
      int v64 = HIDWORD(v94);
      unsigned int v63 = v95;
      v65 = sub_101043C80(WORD1(v94));
      int v98 = 136316674;
      *(void *)v99 = v60;
      *(_WORD *)&v99[8] = 2048;
      *(void *)&long long v100 = 12;
      WORD4(v100) = 1024;
      *(_DWORD *)((char *)&v100 + 10) = v61;
      HIWORD(v100) = 1024;
      int v101 = v62;
      __int16 v102 = 1024;
      unsigned int v103 = v63;
      __int16 v104 = 1024;
      int v105 = v64;
      __int16 v106 = 2080;
      v107 = v65;
      v66 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLTileFileWithTraversal::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v66);
      uint64_t v6 = v91;
      uint64_t v9 = &qword_102419000;
      long long v8 = v59;
      if (v66 != (char *)buf) {
        free(v66);
      }
      uint64_t v16 = v88;
    }
    if ((unsigned __int16)v94 != 43962) {
      break;
    }
    size_t v29 = HIDWORD(v94);
    uint64_t v30 = HIDWORD(v94) + 12;
    unint64_t v31 = v30 + v95;
    if (v31 > 0x640000B)
    {
      if (v8[198] != -1) {
        dispatch_once(&qword_102419630, &stru_1022CA6C0);
      }
      v72 = v9[199];
      if (os_log_type_enabled(v72, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134218240;
        v121[0] = v31;
        LOWORD(v121[1]) = 2048;
        *(void *)((char *)&v121[1] + 2) = 104857612;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_FAULT, "TILE: invalid tile file, bad allocation size, totalBytesInSection, %lu, maxAllocationSize, %lu", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        uint64_t v69 = v16;
        bzero(buf, 0x65CuLL);
        v70 = v8;
        if (v8[198] != -1) {
          dispatch_once(&qword_102419630, &stru_1022CA6C0);
        }
        int v98 = 134218240;
        *(void *)v99 = v31;
        *(_WORD *)&v99[8] = 2048;
        *(void *)&long long v100 = 104857612;
        v71 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLTileFileWithTraversal::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v71);
LABEL_78:
        if (v71 != (char *)buf) {
          free(v71);
        }
        uint64_t v6 = v91;
        long long v8 = v70;
        uint64_t v5 = v90;
        uint64_t v16 = v69;
        goto LABEL_103;
      }
      goto LABEL_103;
    }
    uint64_t v32 = malloc_type_malloc(HIDWORD(v94) + 12, 0xDF19E55uLL);
    double v33 = v32;
    if (!v32)
    {
      if (v8[198] != -1) {
        dispatch_once(&qword_102419630, &stru_1022CA6C0);
      }
      v73 = v9[199];
      if (os_log_type_enabled(v73, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134217984;
        v121[0] = v30;
        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_FAULT, "TILE: failed to allocate memory for, %lu", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (v8[198] != -1) {
          dispatch_once(&qword_102419630, &stru_1022CA6C0);
        }
        int v98 = 134217984;
        *(void *)v99 = v30;
        v74 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLTileFileWithTraversal::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v74);
        if (v74 != (char *)buf) {
          free(v74);
        }
        uint64_t v6 = v91;
        uint64_t v5 = v90;
      }
      goto LABEL_103;
    }
    size_t v34 = fread((char *)v32 + 12, 1uLL, v29, a2);
    if (v34 != v29)
    {
      size_t v75 = v34;
      if (v8[198] != -1) {
        dispatch_once(&qword_102419630, &stru_1022CA6C0);
      }
      v76 = v9[199];
      if (os_log_type_enabled(v76, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134218240;
        v121[0] = v75;
        LOWORD(v121[1]) = 2048;
        *(void *)((char *)&v121[1] + 2) = v29;
        _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_FAULT, "TILE: failed to read pSectionH, %lu, %lu", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (v8[198] != -1) {
          dispatch_once(&qword_102419630, &stru_1022CA6C0);
        }
        int v98 = 134218240;
        *(void *)v99 = v75;
        *(_WORD *)&v99[8] = 2048;
        *(void *)&long long v100 = v29;
        v86 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLTileFileWithTraversal::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v86);
        if (v86 != (char *)buf) {
          free(v86);
        }
        uint64_t v6 = v91;
        uint64_t v5 = v90;
      }
      free(v33);
      goto LABEL_102;
    }
    uint64_t v35 = __ptr;
    *((_DWORD *)v33 + 2) = v93;
    void *v33 = v35;
    if (v8[198] != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
    double v36 = v9[199];
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109888;
      LODWORD(v121[0]) = (unsigned __int16)v94;
      WORD2(v121[0]) = 1024;
      *(_DWORD *)((char *)v121 + 6) = WORD1(v94);
      WORD1(v121[1]) = 1024;
      HIDWORD(v121[1]) = HIDWORD(v94);
      LOWORD(v121[2]) = 1024;
      *(_DWORD *)((char *)&v121[2] + 2) = v95;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "TILE: section, signature, 0x%x, sectionId, %d, headerSizeBytes, %u, sizeBytes, %u", buf, 0x1Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v8[198] != -1) {
        dispatch_once(&qword_102419630, &stru_1022CA6C0);
      }
      int v98 = 67109888;
      *(_DWORD *)v99 = (unsigned __int16)v94;
      *(_WORD *)&v99[4] = 1024;
      *(_DWORD *)&v99[6] = WORD1(v94);
      LOWORD(v100) = 1024;
      *(_DWORD *)((char *)&v100 + 2) = HIDWORD(v94);
      WORD3(v100) = 1024;
      DWORD2(v100) = v95;
      v67 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLTileFileWithTraversal::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v67);
      if (v67 != (char *)buf) {
        free(v67);
      }
    }
    uint64_t v37 = ftell(a2);
    (*(void (**)(uint64_t, FILE *, uint64_t *, void *, uint64_t *))(*(void *)v5 + 112))(v5, a2, &v94, v33, a3);
    switch(WORD1(v94))
    {
      case 1u:
        v119[0] = *(_OWORD *)v33;
        long long v49 = *((_OWORD *)v33 + 1);
        long long v50 = *((_OWORD *)v33 + 2);
        long long v51 = *((_OWORD *)v33 + 4);
        v119[3] = *((_OWORD *)v33 + 3);
        v119[4] = v51;
        v119[1] = v49;
        v119[2] = v50;
        long long v52 = *((_OWORD *)v33 + 5);
        long long v53 = *((_OWORD *)v33 + 6);
        long long v54 = *((_OWORD *)v33 + 8);
        v119[7] = *((_OWORD *)v33 + 7);
        v119[8] = v54;
        v119[5] = v52;
        v119[6] = v53;
        long long v55 = *((_OWORD *)v33 + 9);
        long long v56 = *((_OWORD *)v33 + 10);
        long long v57 = *((_OWORD *)v33 + 11);
        *(_OWORD *)((char *)&v119[11] + 12) = *(_OWORD *)((char *)v33 + 188);
        v119[10] = v56;
        v119[11] = v57;
        v119[9] = v55;
        *(int8x8_t *)&double v58 = sub_100D33DFC((uint64_t)v119, (uint64_t)v119);
        (*(void (**)(uint64_t, _OWORD *, double))(*(void *)v5 + 120))(v5, v119, v58);
        break;
      case 4u:
        long long v39 = *(_OWORD *)v33;
        long long v40 = *((_OWORD *)v33 + 1);
        long long v41 = *((_OWORD *)v33 + 3);
        long long v110 = *((_OWORD *)v33 + 2);
        long long v111 = v41;
        long long v109 = v40;
        long long v108 = v39;
        long long v42 = *((_OWORD *)v33 + 4);
        long long v43 = *((_OWORD *)v33 + 5);
        long long v44 = *((_OWORD *)v33 + 7);
        long long v114 = *((_OWORD *)v33 + 6);
        long long v115 = v44;
        long long v112 = v42;
        long long v113 = v43;
        long long v45 = *((_OWORD *)v33 + 8);
        long long v46 = *((_OWORD *)v33 + 9);
        long long v47 = *((_OWORD *)v33 + 10);
        *(_OWORD *)&v118[12] = *(_OWORD *)((char *)v33 + 172);
        long long v117 = v46;
        *(_OWORD *)v118 = v47;
        long long v116 = v45;
        int8x16_t v48 = sub_100D33EAC((unsigned __int16 *)&v108, (uint64_t)&v108);
        (*(void (**)(uint64_t, long long *, int8x16_t))(*(void *)v5 + 128))(v5, &v108, v48);
        break;
      case 5u:
        v121[0] = 184;
        *(_DWORD *)buf = 371642;
        LODWORD(v121[1]) = 381;
        memset((char *)&v121[1] + 4, 0, 32);
        memset((char *)&v121[21] + 4, 0, 20);
        *(int8x8_t *)&double v38 = sub_101043CA4((uint64_t)v33, (uint64_t)buf);
        (*(void (**)(uint64_t, uint8_t *, double))(*(void *)v5 + 168))(v5, buf, v38);
        break;
      default:
        goto LABEL_49;
    }
    if (*((unsigned char *)a3 + 8)) {
      *(unsigned char *)(v5 + 296) = 0;
    }
LABEL_49:
    free(v33);
    if (fseek(a2, v37 + v95, 0))
    {
      if (v8[198] != -1) {
        dispatch_once(&qword_102419630, &stru_1022CA6C0);
      }
      v77 = v9[199];
      if (os_log_type_enabled(v77, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134218240;
        v121[0] = v37;
        LOWORD(v121[1]) = 1024;
        *(_DWORD *)((char *)&v121[1] + 2) = v95;
        _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_FAULT, "TILE: ERROR: failed to fseek to, currentFileOffset, %lu, %u", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (v8[198] != -1) {
          dispatch_once(&qword_102419630, &stru_1022CA6C0);
        }
        int v98 = 134218240;
        *(void *)v99 = v37;
        *(_WORD *)&v99[8] = 1024;
        LODWORD(v100) = v95;
        v87 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLTileFileWithTraversal::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v87);
        if (v87 != (char *)buf) {
          free(v87);
        }
        uint64_t v6 = v91;
        uint64_t v5 = v90;
      }
LABEL_102:
      uint64_t v16 = 0;
      goto LABEL_103;
    }
    if (!*(unsigned char *)(v5 + 296)) {
      goto LABEL_61;
    }
  }
  if (v8[198] != -1) {
    dispatch_once(&qword_102419630, &stru_1022CA6C0);
  }
  __int16 v68 = v9[199];
  if (os_log_type_enabled(v68, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 134218752;
    v121[0] = 12;
    LOWORD(v121[1]) = 1024;
    *(_DWORD *)((char *)&v121[1] + 2) = (unsigned __int16)v94;
    HIWORD(v121[1]) = 1024;
    LODWORD(v121[2]) = WORD1(v94);
    WORD2(v121[2]) = 1024;
    *(_DWORD *)((char *)&v121[2] + 6) = v95;
    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_FAULT, "TILE: Invalid section signature, readBytes, %lu, section, signature, 0x%x, sectionId, %d, sizeBytes, %d", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 0))
  {
    uint64_t v69 = v16;
    bzero(buf, 0x65CuLL);
    v70 = v8;
    if (v8[198] != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
    int v98 = 134218752;
    *(void *)v99 = 12;
    *(_WORD *)&v99[8] = 1024;
    LODWORD(v100) = (unsigned __int16)v94;
    WORD2(v100) = 1024;
    *(_DWORD *)((char *)&v100 + 6) = WORD1(v94);
    WORD5(v100) = 1024;
    HIDWORD(v100) = v95;
    v71 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLTileFileWithTraversal::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v71);
    goto LABEL_78;
  }
LABEL_103:
  *(unsigned char *)(v5 + 296) = 0;
  if (v8[198] != -1) {
    dispatch_once(&qword_102419630, &stru_1022CA6C0);
  }
  v78 = v9[199];
  if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEBUG, "TILE: traverseTileFile, done", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v8[198] != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
    LOWORD(v98) = 0;
    v85 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLTileFileWithTraversal::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v85);
    if (v85 != (char *)buf) {
      free(v85);
    }
    uint64_t v6 = v91;
  }
LABEL_108:
  (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  return v16;
}

void sub_1007FE824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007FE8A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022CA6C0);
  }
  unint64_t v4 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v5 = *(unsigned __int16 *)(a3 + 2);
    *(_DWORD *)buf = 67109378;
    unsigned int v8 = v5;
    __int16 v9 = 2080;
    uint64_t v10 = sub_101043C80(v5);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: CLTileFile, sectionId, %d, %s", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
    sub_101043C80(*(unsigned __int16 *)(a3 + 2));
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLTileFileWithTraversal::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const TraverseDetails &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_1007FEA84(uint64_t a1, uint64_t a2)
{
  double v4 = (double)*(unint64_t *)(a2 + 56) - kCFAbsoluteTimeIntervalSince1970;
  int v5 = *(_DWORD *)(a2 + 192);
  if (v5 < 1) {
    int v5 = 1209600;
  }
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 12);
  *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a2 + 16));
  *(void *)(a1 + 64) = -1;
  *(double *)(a1 + 176) = v4;
  *(_DWORD *)(a1 + 200) = v5;
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022CA6C0);
  }
  uint64_t v6 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(_DWORD *)(a2 + 12);
    int v8 = *(_DWORD *)(a2 + 16);
    double v9 = *(float *)(a2 + 28);
    double v10 = *(float *)(a2 + 32);
    double v11 = *(float *)(a2 + 36);
    double v12 = *(float *)(a2 + 40);
    double v13 = *(float *)(a2 + 44);
    double v14 = *(float *)(a2 + 48);
    double v15 = *(float *)(a2 + 52);
    int v16 = *(_DWORD *)(a2 + 20);
    int v17 = *(_DWORD *)(a2 + 24);
    double v18 = *(double *)(a1 + 176);
    int v19 = *(_DWORD *)(a2 + 192);
    int v21 = *(_DWORD *)(a1 + 200);
    *(_DWORD *)buf = 67112704;
    int v23 = v7;
    __int16 v24 = 1024;
    int v25 = v8;
    __int16 v26 = 1024;
    int v27 = v16;
    __int16 v28 = 2048;
    double v29 = v9;
    __int16 v30 = 2048;
    double v31 = v10;
    __int16 v32 = 2048;
    double v33 = v11;
    __int16 v34 = 2048;
    double v35 = v12;
    __int16 v36 = 2048;
    double v37 = v13;
    __int16 v38 = 2048;
    double v39 = v14;
    __int16 v40 = 2048;
    double v41 = v15;
    __int16 v42 = 1024;
    int v43 = v17;
    __int16 v44 = 2048;
    double v45 = v18;
    __int16 v46 = 1024;
    int v47 = v19;
    __int16 v48 = 1024;
    int v49 = v21;
    __int16 v50 = 2048;
    double v51 = CFAbsoluteTimeGetCurrent() - v18;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILE: tile, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, altitude, %f,  minAltitude, %f, maxAltitude, %f, numOfInputPoints, %d, generationTime, %.1f, expirationAge, %d, %d, age, %.1lf", buf, 0x80u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
    CFAbsoluteTimeGetCurrent();
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLTileFileWithTraversal::onTraversingTileHeader(const CLTilesManager_Type::TileHeader &)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
}

void sub_1007FEE58(uint64_t a1, uint64_t a2)
{
  double v4 = (double)*(unint64_t *)(a2 + 40) - kCFAbsoluteTimeIntervalSince1970;
  uint64_t v5 = *(void *)(a2 + 188);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = -1;
  }
  int v7 = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 12);
  *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a2 + 16));
  *(void *)(a1 + 64) = v6;
  *(double *)(a1 + 176) = v4;
  *(_DWORD *)(a1 + 200) = v7;
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022CA6C0);
  }
  int v8 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_100C094CC(a1 + 48);
    double v9 = (SBYTE1(v65) & 0x80u) == 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "TILE: onTraversingTileHeaderKeyLatLon, tileid, %s", buf, 0xCu);
    if (SBYTE1(v65) < 0) {
      operator delete(__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
    sub_100C094CC(a1 + 48);
    if ((SBYTE1(v42) & 0x80u) == 0) {
      int v23 = buf;
    }
    else {
      int v23 = *(unsigned char **)buf;
    }
    int v57 = 136315138;
    double v58 = v23;
    __int16 v24 = (char *)_os_log_send_and_compose_impl();
    if (SBYTE1(v42) < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLTileFileWithTraversal::onTraversingTileHeaderKeyLatLon(const CLTilesManager_Type::TileHeaderKeyLatLon &)", "%s\n", v24);
    if (v24 != (char *)&__p) {
      free(v24);
    }
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022CA6C0);
  }
  double v10 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v12 = *(_DWORD *)(a2 + 12);
    int v11 = *(_DWORD *)(a2 + 16);
    int v13 = *(_DWORD *)(a2 + 20);
    float v14 = *(float *)(a2 + 24);
    float v15 = *(float *)(a2 + 28);
    float v16 = *(float *)(a2 + 32);
    float v17 = *(float *)(a2 + 36);
    uint64_t v18 = *(void *)(a1 + 176);
    int v19 = *(_DWORD *)(a2 + 176);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v21 = *(void *)(a2 + 188);
    double v22 = Current - *(double *)(a1 + 176);
    LODWORD(__p) = 67111680;
    HIDWORD(__p) = v12;
    __int16 v60 = 1024;
    int v61 = v11;
    __int16 v62 = 1024;
    int v63 = v13;
    __int16 v64 = 2048;
    double v65 = v14;
    __int16 v66 = 2048;
    double v67 = v15;
    __int16 v68 = 2048;
    double v69 = v16;
    __int16 v70 = 2048;
    double v71 = v17;
    __int16 v72 = 2048;
    uint64_t v73 = v18;
    __int16 v74 = 1024;
    int v75 = v19;
    __int16 v76 = 2048;
    double v77 = v22;
    __int16 v78 = 2048;
    uint64_t v79 = v21;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: tile.keylatlon, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, generationTime, %.1f, expirationAge, %d, age, %.1lf, sec_key, %016llx", (uint8_t *)&__p, 0x60u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
    int v26 = *(_DWORD *)(a2 + 12);
    int v25 = *(_DWORD *)(a2 + 16);
    int v27 = *(_DWORD *)(a2 + 20);
    float v29 = *(float *)(a2 + 24);
    float v28 = *(float *)(a2 + 28);
    float v31 = *(float *)(a2 + 32);
    float v30 = *(float *)(a2 + 36);
    uint64_t v32 = *(void *)(a1 + 176);
    int v33 = *(_DWORD *)(a2 + 176);
    CFAbsoluteTime v34 = CFAbsoluteTimeGetCurrent();
    uint64_t v35 = *(void *)(a2 + 188);
    double v36 = v34 - *(double *)(a1 + 176);
    *(_DWORD *)buf = 67111680;
    *(_DWORD *)&uint8_t buf[4] = v26;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v25;
    __int16 v39 = 1024;
    int v40 = v27;
    __int16 v41 = 2048;
    double v42 = v29;
    __int16 v43 = 2048;
    double v44 = v28;
    __int16 v45 = 2048;
    double v46 = v31;
    __int16 v47 = 2048;
    double v48 = v30;
    __int16 v49 = 2048;
    uint64_t v50 = v32;
    __int16 v51 = 1024;
    int v52 = v33;
    __int16 v53 = 2048;
    double v54 = v36;
    __int16 v55 = 2048;
    uint64_t v56 = v35;
    double v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLTileFileWithTraversal::onTraversingTileHeaderKeyLatLon(const CLTilesManager_Type::TileHeaderKeyLatLon &)", "%s\n", v37);
    if (v37 != (char *)&__p) {
      free(v37);
    }
  }
}

void sub_1007FF374(uint64_t a1, uint64_t a2)
{
  double v4 = (double)*(unint64_t *)(a2 + 40) - kCFAbsoluteTimeIntervalSince1970;
  int v5 = *(_DWORD *)(a2 + 176);
  int v6 = rand();
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 12);
  *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a2 + 16));
  *(void *)(a1 + 64) = -1;
  *(double *)(a1 + 176) = v4;
  *(_DWORD *)(a1 + 200) = v6 % 86400 + v5;
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022CA6C0);
  }
  int v7 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    sub_100C094CC(a1 + 48);
    int v8 = SBYTE1(v74);
    double v9 = *(uint8_t **)v68;
    sub_100C09A14(a1 + 48, &__p);
    double v10 = v68;
    if (v8 < 0) {
      double v10 = v9;
    }
    if ((SBYTE1(v47) & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v10;
    __int16 v61 = 2080;
    __int16 v62 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: tile.location, tileid, %s, serverName, %s", buf, 0x16u);
    if (SBYTE1(v47) < 0) {
      operator delete(__p);
    }
    if (SBYTE1(v74) < 0) {
      operator delete(*(void **)v68);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(v68, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
    sub_100C094CC(a1 + 48);
    int v24 = SBYTE1(v47);
    int v25 = (void **)__p;
    sub_100C09A14(a1 + 48, buf);
    int v26 = &__p;
    if (v24 < 0) {
      int v26 = v25;
    }
    if (v63 >= 0) {
      int v27 = buf;
    }
    else {
      int v27 = *(unsigned char **)buf;
    }
    int v64 = 136315394;
    double v65 = v26;
    __int16 v66 = 2080;
    double v67 = v27;
    float v28 = (char *)_os_log_send_and_compose_impl();
    if (v63 < 0) {
      operator delete(*(void **)buf);
    }
    if (SBYTE1(v47) < 0) {
      operator delete(__p);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLTileFileWithTraversal::onTraversingTileHeaderLocation(const CLTilesManager_Type::TileHeaderLocation &)", "%s\n", v28);
    if (v28 != (char *)v68) {
      free(v28);
    }
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022CA6C0);
  }
  int v12 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v13 = *(_DWORD *)(a2 + 12);
    int v14 = *(_DWORD *)(a2 + 16);
    int v15 = *(_DWORD *)(a2 + 20);
    float v16 = *(float *)(a2 + 24);
    float v17 = *(float *)(a2 + 28);
    float v18 = *(float *)(a2 + 32);
    float v19 = *(float *)(a2 + 36);
    uint64_t v20 = *(void *)(a1 + 176);
    int v21 = *(_DWORD *)(a2 + 176);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)__int16 v68 = 67111424;
    double v23 = Current - *(double *)(a1 + 176);
    *(_DWORD *)&v68[4] = v13;
    __int16 v69 = 1024;
    int v70 = v14;
    __int16 v71 = 1024;
    int v72 = v15;
    __int16 v73 = 2048;
    double v74 = v16;
    __int16 v75 = 2048;
    double v76 = v17;
    __int16 v77 = 2048;
    double v78 = v18;
    __int16 v79 = 2048;
    double v80 = v19;
    __int16 v81 = 2048;
    uint64_t v82 = v20;
    __int16 v83 = 1024;
    int v84 = v21;
    __int16 v85 = 2048;
    double v86 = v23;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "TILE: tile.location, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, generationTime, %.1f, expirationAge, %d, age, %.1lf", v68, 0x56u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(v68, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
    int v30 = *(_DWORD *)(a2 + 12);
    int v29 = *(_DWORD *)(a2 + 16);
    int v31 = *(_DWORD *)(a2 + 20);
    float v32 = *(float *)(a2 + 24);
    float v33 = *(float *)(a2 + 28);
    float v34 = *(float *)(a2 + 32);
    float v35 = *(float *)(a2 + 36);
    uint64_t v36 = *(void *)(a1 + 176);
    int v37 = *(_DWORD *)(a2 + 176);
    CFAbsoluteTime v38 = CFAbsoluteTimeGetCurrent();
    LODWORD(__p) = 67111424;
    double v39 = v38 - *(double *)(a1 + 176);
    HIDWORD(__p) = v30;
    __int16 v42 = 1024;
    int v43 = v29;
    __int16 v44 = 1024;
    int v45 = v31;
    __int16 v46 = 2048;
    double v47 = v32;
    __int16 v48 = 2048;
    double v49 = v33;
    __int16 v50 = 2048;
    double v51 = v34;
    __int16 v52 = 2048;
    double v53 = v35;
    __int16 v54 = 2048;
    uint64_t v55 = v36;
    __int16 v56 = 1024;
    int v57 = v37;
    __int16 v58 = 2048;
    double v59 = v39;
    int v40 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLTileFileWithTraversal::onTraversingTileHeaderLocation(const CLTilesManager_Type::TileHeaderLocation &)", "%s\n", v40);
    if (v40 != (char *)v68) {
      free(v40);
    }
  }
}

void sub_1007FF904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007FF93C(uint64_t a1, _DWORD *a2)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022CA6C0);
  }
  double v4 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v5 = a2[1];
    int v7 = a2[3];
    int v6 = a2[4];
    *(_DWORD *)buf = 67109632;
    int v10 = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: tileMacIndexHeader, headerSizeBytes, %u, tileMacIndexHeader, entrySizeInBytes, %u, numOfEntries, %u", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLTileFileWithTraversal::onTraversingTileIndexHeader(const CLTilesManager_Type::TileIndexMacHeader &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  *(_DWORD *)(a1 + 292) = 0;
}

void sub_1007FFB28(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022CA6C0);
  }
  double v4 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 292);
    int v6 = *a2;
    int v7 = a2[1];
    int v8 = a2[2];
    int v9 = a2[3];
    int v10 = a2[4];
    int v11 = a2[5];
    int v12 = *(_DWORD *)(a2 + 6);
    *(_DWORD *)buf = 67110912;
    int v15 = v5;
    __int16 v16 = 1024;
    int v17 = v6;
    __int16 v18 = 1024;
    int v19 = v7;
    __int16 v20 = 1024;
    int v21 = v8;
    __int16 v22 = 1024;
    int v23 = v9;
    __int16 v24 = 1024;
    int v25 = v10;
    __int16 v26 = 1024;
    int v27 = v11;
    __int16 v28 = 1024;
    int v29 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: idx, %3u, mac,%x:%x:%x:%x:%x:%x, offset, %u", buf, 0x32u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
    __int16 v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLTileFileWithTraversal::onTraversingTileIndexEntry(const CLTilesManager_Type::AccessPointIndexEntry &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  ++*(_DWORD *)(a1 + 292);
}

void sub_1007FFD9C(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(a1 + 292) = 0;
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022CA6C0);
  }
  uint64_t v3 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v4 = a2[1];
    int v6 = a2[3];
    int v5 = a2[4];
    *(_DWORD *)buf = 67109632;
    int v9 = v4;
    __int16 v10 = 1024;
    int v11 = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "TILE: tileAccessPointTable, headerSizeBytes, %u, tileAccessPointTable, entrySizeInBytes, %u, numOfEntries, %u", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLTileFileWithTraversal::onTraversingTileAPTableHeader(const CLTilesManager_Type::TileAccessPointTable &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void sub_1007FFF84(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  sub_10104C204(a1, *(_DWORD *)(a2 + 6) & 0xFFF, (*(_DWORD *)(a2 + 6) >> 12) & 0xFFF, (double *)&v23, (double *)&v22);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022CA6C0);
  }
  int v4 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 292);
    int v6 = *a2;
    int v7 = a2[1];
    int v8 = a2[2];
    int v9 = a2[3];
    int v10 = a2[4];
    int v11 = a2[5];
    unsigned int v12 = *(_DWORD *)(a2 + 6);
    *(_DWORD *)buf = 67111680;
    int v47 = v5;
    __int16 v48 = 1024;
    int v49 = v6;
    __int16 v50 = 1024;
    int v51 = v7;
    __int16 v52 = 1024;
    int v53 = v8;
    __int16 v54 = 1024;
    int v55 = v9;
    __int16 v56 = 1024;
    int v57 = v10;
    __int16 v58 = 1024;
    int v59 = v11;
    __int16 v60 = 1024;
    int v61 = v12 & 0xFFF;
    __int16 v62 = 1024;
    int v63 = (v12 >> 12) & 0xFFF;
    __int16 v64 = 2048;
    uint64_t v65 = v23;
    __int16 v66 = 2048;
    uint64_t v67 = v22;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: mac, %3u, mac,%x:%x:%x:%x:%x:%x, y, %3d, x, %3d, loc, %14.10lf, %14.10lf", buf, 0x4Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
    int v13 = *(_DWORD *)(a1 + 292);
    int v14 = *a2;
    int v15 = a2[1];
    int v16 = a2[2];
    int v17 = a2[3];
    int v18 = a2[4];
    int v19 = a2[5];
    unsigned int v20 = *(_DWORD *)(a2 + 6);
    int v24 = 67111680;
    int v25 = v13;
    __int16 v26 = 1024;
    int v27 = v14;
    __int16 v28 = 1024;
    int v29 = v15;
    __int16 v30 = 1024;
    int v31 = v16;
    __int16 v32 = 1024;
    int v33 = v17;
    __int16 v34 = 1024;
    int v35 = v18;
    __int16 v36 = 1024;
    int v37 = v19;
    __int16 v38 = 1024;
    int v39 = v20 & 0xFFF;
    __int16 v40 = 1024;
    int v41 = (v20 >> 12) & 0xFFF;
    __int16 v42 = 2048;
    uint64_t v43 = v23;
    __int16 v44 = 2048;
    uint64_t v45 = v22;
    int v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLTileFileWithTraversal::onTraversingTileAPTableEntry(const CLTilesManager_Type::AccessPointEntry &)", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
  ++*(_DWORD *)(a1 + 292);
}

void *sub_100800268(uint64_t a1, FILE *a2, uint64_t a3, int a4, int a5, int a6)
{
  size_t v11 = (a6 * a5);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022CA6C0);
  }
  unsigned int v12 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v13 = *(unsigned __int16 *)(a3 + 2);
    *(_DWORD *)buf = 67109632;
    int v25 = v13;
    __int16 v26 = 1024;
    int v27 = a4;
    __int16 v28 = 1024;
    int v29 = a5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "TILE: read data, sectionId, %d, entriesOffset, %u, entriesNumToRead, %u", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
    }
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void *CLTileFileWithTraversal::readDataEntries(FILE *, const CLTilesManager_Type::SectionHeader &, unsigned int, unsigned int, unsigned int)", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  int v14 = malloc_type_malloc(v11, 0x734C1C5EuLL);
  if (v14)
  {
    int v15 = fseek(a2, (a6 * a4), 1);
    if (v15)
    {
      int v16 = v15;
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022CA6C0);
      }
      int v17 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109376;
        int v25 = a4;
        __int16 v26 = 1024;
        int v27 = v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "TILE: ERROR: failed to skip entries pre read, %u, ret, %d", buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_21;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1)
      {
LABEL_28:
        uint64_t v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void *CLTileFileWithTraversal::readDataEntries(FILE *, const CLTilesManager_Type::SectionHeader &, unsigned int, unsigned int, unsigned int)", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
LABEL_21:
        free(v14);
        return 0;
      }
LABEL_30:
      dispatch_once(&qword_102419630, &stru_1022CA6C0);
      goto LABEL_28;
    }
    size_t v18 = fread(v14, 1uLL, v11, a2);
    if (v18 != v11)
    {
      int v19 = v18;
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022CA6C0);
      }
      unsigned int v20 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109376;
        int v25 = v19;
        __int16 v26 = 1024;
        int v27 = v11;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "TILE: ERROR: failed to read bytes, %u, %u", buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_21;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419630 == -1) {
        goto LABEL_28;
      }
      goto LABEL_30;
    }
  }
  return v14;
}

void sub_10080071C(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10080074C(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100801414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008018B4(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1008018E4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D2E2BC;
      v0[3] = unk_101D2E2CC;
      v0[4] = xmmword_101D2E2DC;
      v0[0] = xmmword_101D2E29C;
      v0[1] = unk_101D2E2AC;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_1008019C4(_Unwind_Exception *a1)
{
}

void sub_100802100(id a1)
{
  qword_1024191E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_100802130(void *a1@<X8>)
{
  id v2 = (char *)operator new(0xB8uLL);
  sub_10080217C((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
}

void sub_100802168(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_10080217C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1022CA750;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 176) = 0;
  int64x2_t v1 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 24) = v1;
  *(int64x2_t *)(a1 + 40) = v1;
  *(int64x2_t *)(a1 + 56) = v1;
  *(int64x2_t *)(a1 + 72) = v1;
  *(int64x2_t *)(a1 + 88) = v1;
  *(int64x2_t *)(a1 + 104) = v1;
  *(void *)(a1 + 120) = -1;
  *(_DWORD *)(a1 + 128) = -1;
  *(int64x2_t *)(a1 + 136) = v1;
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(a1 + 160) = result;
  return result;
}

void sub_1008021E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022CA750;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100802208(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022CA750;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100802264()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D2E320;
      v0[3] = unk_101D2E330;
      v0[4] = xmmword_101D2E340;
      v0[0] = xmmword_101D2E300;
      v0[1] = unk_101D2E310;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_100802344(_Unwind_Exception *a1)
{
}

void sub_10080235C(id a1)
{
}

void sub_1008023A0()
{
}

const void *sub_1008023C4(const void *a1)
{
  uint64_t v2 = sub_100513074(a1, "CLLocalization", 1, 1);
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  uint64_t v3 = (CFBundleRef *)(v2 + 16);
  sub_10053BEF8(&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  CFStringRef v5 = sub_1000B73E0((char *)p_p);
  CFStringRef v6 = v5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v6) {
      goto LABEL_12;
    }
  }
  else if (!v5)
  {
    goto LABEL_12;
  }
  CFTypeID v7 = CFGetTypeID(v6);
  if (v7 == CFStringGetTypeID())
  {
    CFURLRef v8 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v6, kCFURLPOSIXPathStyle, 0);
    if (v8)
    {
      *uint64_t v3 = CFBundleCreate(kCFAllocatorDefault, v8);
      CFRelease(v8);
    }
  }
  CFRelease(v6);
LABEL_12:
  sub_100802524((uint64_t)a1);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_100802560, @"com.apple.language.changed", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  return a1;
}

void sub_1008024F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_10051310C(v15);
  _Unwind_Resume(a1);
}

CFStringRef sub_100802524(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  CFStringRef result = sub_10005FB58(a1, *(__CFBundle **)(a1 + 16));
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t sub_100802560(uint64_t a1, uint64_t a2)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022CA7B0);
  }
  uint64_t v3 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "language changed - refreshing", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA7B0);
    }
    CFStringRef v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLLocalization::onLanguageChanged(CFNotificationCenterRef, void *, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  *(void *)buf = a2;
  (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
  __int16 v7 = 256;
  CFPreferencesSynchronize(@".GlobalPreferences", @"mobile", kCFPreferencesAnyHost);
  sub_100802524(a2);
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

void sub_10080277C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef sub_1008027A8(uint64_t a1, __CFBundle *a2, const __CFString *a3, const __CFString *a4, int a5)
{
  if (qword_10247E1E0 != -1) {
    dispatch_once(&qword_10247E1E0, &stru_1022CA790);
  }
  CFStringRef result = sub_100041DC4(qword_10248A3B8, a2, a4, a5);
  if (!a5 && !result)
  {
    id v10 = [(__CFDictionary *)CFBundleGetInfoDictionary(a2) objectForKey:a3];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v11 = [v10 objectForKey:a4];
      if (v11)
      {
        unsigned int v12 = v11;
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          return (const __CFString *)[v12 copy];
        }
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022CA7D0);
        }
        int v24 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
        {
          sub_1000FECE0(a4, (uint64_t)__p);
          if (v28 >= 0) {
            int v25 = __p;
          }
          else {
            int v25 = (void **)__p[0];
          }
          *(_DWORD *)buf = 68289282;
          int v30 = 0;
          __int16 v31 = 2082;
          __int16 v32 = "";
          __int16 v33 = 2082;
          __int16 v34 = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"key does not contain a string value\", \"key\":%{public, location:escape_only}s}", buf, 0x1Cu);
          if (v28 < 0) {
            operator delete(__p[0]);
          }
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022CA7D0);
          }
        }
        uint64_t v22 = qword_102419538;
        if (!os_signpost_enabled((os_log_t)qword_102419538)) {
          return 0;
        }
        sub_1000FECE0(a4, (uint64_t)__p);
        if (v28 >= 0) {
          __int16 v26 = __p;
        }
        else {
          __int16 v26 = (void **)__p[0];
        }
        *(_DWORD *)buf = 68289282;
        int v30 = 0;
        __int16 v31 = 2082;
        __int16 v32 = "";
        __int16 v33 = 2082;
        __int16 v34 = v26;
        int v17 = "key does not contain a string value";
        size_t v18 = "{\"msg%{public}.0s\":\"key does not contain a string value\", \"key\":%{public, location:escape_only}s}";
      }
      else
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022CA7D0);
        }
        unsigned int v20 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
        {
          sub_1000FECE0(a4, (uint64_t)__p);
          if (v28 >= 0) {
            int v21 = __p;
          }
          else {
            int v21 = (void **)__p[0];
          }
          *(_DWORD *)buf = 68289282;
          int v30 = 0;
          __int16 v31 = 2082;
          __int16 v32 = "";
          __int16 v33 = 2082;
          __int16 v34 = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"key is not present\", \"key\":%{public, location:escape_only}s}", buf, 0x1Cu);
          if (v28 < 0) {
            operator delete(__p[0]);
          }
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022CA7D0);
          }
        }
        uint64_t v22 = qword_102419538;
        if (!os_signpost_enabled((os_log_t)qword_102419538)) {
          return 0;
        }
        sub_1000FECE0(a4, (uint64_t)__p);
        if (v28 >= 0) {
          uint64_t v23 = __p;
        }
        else {
          uint64_t v23 = (void **)__p[0];
        }
        *(_DWORD *)buf = 68289282;
        int v30 = 0;
        __int16 v31 = 2082;
        __int16 v32 = "";
        __int16 v33 = 2082;
        __int16 v34 = v23;
        int v17 = "key is not present";
        size_t v18 = "{\"msg%{public}.0s\":\"key is not present\", \"key\":%{public, location:escape_only}s}";
      }
      int v19 = v22;
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CA7D0);
      }
      int v13 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        sub_1000FECE0(a3, (uint64_t)__p);
        if (v28 >= 0) {
          int v14 = __p;
        }
        else {
          int v14 = (void **)__p[0];
        }
        *(_DWORD *)buf = 68289282;
        int v30 = 0;
        __int16 v31 = 2082;
        __int16 v32 = "";
        __int16 v33 = 2082;
        __int16 v34 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"description dictionary key does not contain a dictionary value\", \"key\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (v28 < 0) {
          operator delete(__p[0]);
        }
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022CA7D0);
        }
      }
      uint64_t v15 = qword_102419538;
      if (!os_signpost_enabled((os_log_t)qword_102419538)) {
        return 0;
      }
      sub_1000FECE0(a3, (uint64_t)__p);
      if (v28 >= 0) {
        int v16 = __p;
      }
      else {
        int v16 = (void **)__p[0];
      }
      *(_DWORD *)buf = 68289282;
      int v30 = 0;
      __int16 v31 = 2082;
      __int16 v32 = "";
      __int16 v33 = 2082;
      __int16 v34 = v16;
      int v17 = "description dictionary key does not contain a dictionary value";
      size_t v18 = "{\"msg%{public}.0s\":\"description dictionary key does not contain a dictionary value\", \"key\":%{public, l"
            "ocation:escape_only}s}";
      int v19 = v15;
    }
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v17, v18, buf, 0x1Cu);
    if (v28 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return result;
}

CFStringRef sub_100802D58(void *a1, const __CFString *a2)
{
  uint64_t v4 = a1[3];
  (*(void (**)(void *))(*a1 + 16))(a1);
  if (!a1[2])
  {
    CFStringRef v6 = 0;
    goto LABEL_12;
  }
  if (!v4) {
    sub_100802524((uint64_t)a1);
  }
  CFStringRef v5 = (const __CFString *)CFBundleCopyLocalizedStringForLocalization();
  CFStringRef v6 = v5;
  if (v5)
  {
    if (CFStringCompare(v5, a2, 0x100uLL)) {
      goto LABEL_8;
    }
    CFRelease(v6);
  }
  CFStringRef v6 = (const __CFString *)CFBundleCopyLocalizedStringForLocalization();
  if (!v6)
  {
LABEL_10:
    CFStringRef v6 = (const __CFString *)CFBundleCopyLocalizedStringForLocalization();
    goto LABEL_12;
  }
LABEL_8:
  if (CFStringCompare(v6, a2, 0x100uLL) == kCFCompareEqualTo)
  {
    CFRelease(v6);
    goto LABEL_10;
  }
LABEL_12:
  (*(void (**)(void *))(*a1 + 24))(a1);
  return v6;
}

void sub_100802EAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

const void *sub_100802EC0(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  CFArrayRef v2 = (const __CFArray *)CFPreferencesCopyValue(@"AppleLanguages", @".GlobalPreferences", @"mobile", kCFPreferencesAnyHost);
  CFArrayRef v3 = v2;
  if (v2)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v2, 0);
    CFRetain(ValueAtIndex);
    CFRelease(v3);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CA7B0);
    }
    CFStringRef v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning could not get apple languages array", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022CA7B0);
      }
      __int16 v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CFStringRef CLLocalization::copyUserPreferredLanguage()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    ValueAtIndex = 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  return ValueAtIndex;
}

void sub_100803108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100803130(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100803160(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_100803190(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = &off_1022CA7F0;
  *(void *)(a1 + 16) = 20;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = &off_1022CA930;
  *(void *)a1 = off_1022CAAE0;
  *(_DWORD *)(a1 + 40) = 1056964608;
  *(_DWORD *)(a1 + 48) = 0;
  uint64_t v4 = a1 + 2528;
  bzero((void *)(a1 + 56), 0x9A8uLL);
  *(_OWORD *)(a1 + 2528) = xmmword_101D2E480;
  *(_OWORD *)(a1 + 2544) = unk_101D2E490;
  *(_OWORD *)(a1 + 2560) = xmmword_101D2E4A0;
  *(_OWORD *)(v4 + 44) = *(long long *)((char *)&xmmword_101D2E4A0 + 12);
  *(void *)(a1 + 2592) = 0;
  *(void *)(a1 + 2600) = a2;
  *(_DWORD *)(a1 + 2608) = 0;
  unsigned __int8 v7 = 0;
  sub_10006ACBC(v8, "RunningFormBypassIsRunning", &v7, 0);
  *(unsigned char *)(a1 + 2612) = v8[1];
  *(_WORD *)(a1 + 2613) = 0;
  nullsub_41(a1 + 2615, v5);
  *(_OWORD *)(a1 + 2632) = 0u;
  *(_OWORD *)(a1 + 2648) = 0u;
  *(_OWORD *)(a1 + 2616) = 0u;
  *(void *)(a1 + 2664) = 0x200000002;
  return a1;
}

void sub_1008032B4(_Unwind_Exception *a1)
{
  sub_10080DBC4(v2 + 43);
  sub_10080DB1C(v2 + 37);
  sub_1000D80C4(v2 + 31);
  sub_1000D80C4(v2 + 25);
  sub_1000D816C(v2 + 19);
  sub_1000D816C(v2 + 13);
  sub_1000D816C(v1);
  _Unwind_Resume(a1);
}

void sub_100803314(uint64_t a1)
{
  LOBYTE(v6) = 0;
  sub_10006ACBC(buf, "RunningFormBypassIsRunning", (unsigned __int8 *)&v6, 0);
  *(unsigned char *)(a1 + 2612) = buf[1];
  if (qword_102419290 != -1) {
    dispatch_once(&qword_102419290, &stru_1022CAA70);
  }
  CFArrayRef v2 = qword_102419298;
  if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 2612);
    *(_DWORD *)buf = 136446466;
    id v11 = "RunningFormBypassIsRunning";
    __int16 v12 = 1026;
    int v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[FormModels] default - %{public}s: %{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1022CAA70);
    }
    int v4 = *(unsigned __int8 *)(a1 + 2612);
    int v6 = 136446466;
    unsigned __int8 v7 = "RunningFormBypassIsRunning";
    __int16 v8 = 1026;
    int v9 = v4;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRunning::FormModels::enableFormMetrics()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_100803508(uint64_t a1)
{
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  bzero((void *)(a1 + 456), 0x818uLL);
  CFArrayRef v2 = *(void ***)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  *(void *)(a1 + 96) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *(void *)(a1 + 72);
      CFArrayRef v2 = (void **)(*(void *)(a1 + 64) + 8);
      *(void *)(a1 + 64) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 85;
  }
  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v6 = 170;
  }
  *(void *)(a1 + 88) = v6;
LABEL_8:
  unsigned __int8 v7 = *(void ***)(a1 + 112);
  uint64_t v8 = *(void *)(a1 + 120);
  *(void *)(a1 + 144) = 0;
  unint64_t v9 = v8 - (void)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      uint64_t v10 = *(void *)(a1 + 120);
      unsigned __int8 v7 = (void **)(*(void *)(a1 + 112) + 8);
      *(void *)(a1 + 112) = v7;
      unint64_t v9 = v10 - (void)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    uint64_t v11 = 85;
  }
  else
  {
    if (v9 >> 3 != 2) {
      goto LABEL_15;
    }
    uint64_t v11 = 170;
  }
  *(void *)(a1 + 136) = v11;
LABEL_15:
  __int16 v12 = *(void ***)(a1 + 160);
  uint64_t v13 = *(void *)(a1 + 168);
  *(void *)(a1 + 192) = 0;
  unint64_t v14 = v13 - (void)v12;
  if (v14 >= 0x11)
  {
    do
    {
      operator delete(*v12);
      uint64_t v15 = *(void *)(a1 + 168);
      __int16 v12 = (void **)(*(void *)(a1 + 160) + 8);
      *(void *)(a1 + 160) = v12;
      unint64_t v14 = v15 - (void)v12;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    uint64_t v16 = 85;
  }
  else
  {
    if (v14 >> 3 != 2) {
      goto LABEL_22;
    }
    uint64_t v16 = 170;
  }
  *(void *)(a1 + 184) = v16;
LABEL_22:
  int v17 = *(void ***)(a1 + 208);
  uint64_t v18 = *(void *)(a1 + 216);
  *(void *)(a1 + 240) = 0;
  unint64_t v19 = v18 - (void)v17;
  if (v19 >= 0x11)
  {
    do
    {
      operator delete(*v17);
      uint64_t v20 = *(void *)(a1 + 216);
      int v17 = (void **)(*(void *)(a1 + 208) + 8);
      *(void *)(a1 + 208) = v17;
      unint64_t v19 = v20 - (void)v17;
    }
    while (v19 > 0x10);
  }
  if (v19 >> 3 == 1)
  {
    uint64_t v21 = 128;
  }
  else
  {
    if (v19 >> 3 != 2) {
      goto LABEL_29;
    }
    uint64_t v21 = 256;
  }
  *(void *)(a1 + 232) = v21;
LABEL_29:
  uint64_t v22 = *(void ***)(a1 + 256);
  uint64_t v23 = *(void *)(a1 + 264);
  *(void *)(a1 + 288) = 0;
  unint64_t v24 = v23 - (void)v22;
  if (v24 >= 0x11)
  {
    do
    {
      operator delete(*v22);
      uint64_t v25 = *(void *)(a1 + 264);
      uint64_t v22 = (void **)(*(void *)(a1 + 256) + 8);
      *(void *)(a1 + 256) = v22;
      unint64_t v24 = v25 - (void)v22;
    }
    while (v24 > 0x10);
  }
  if (v24 >> 3 == 1)
  {
    uint64_t v26 = 128;
  }
  else
  {
    if (v24 >> 3 != 2) {
      return;
    }
    uint64_t v26 = 256;
  }
  *(void *)(a1 + 280) = v26;
}

uint64_t sub_100803700(uint64_t result, void *a2)
{
  *(void *)(result + 2664) = *a2;
  return result;
}

void sub_10080370C(uint64_t a1, void *a2, void *a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = a2[1];
  if (a2[2] == v6)
  {
    uint64_t v8 = a2 + 5;
    unint64_t v7 = a2[5];
    goto LABEL_11;
  }
  uint64_t v8 = a2 + 5;
  unint64_t v7 = a2[5];
  unint64_t v9 = a2[4];
  uint64_t v10 = (unint64_t *)(v6 + 8 * (v9 / 0x49));
  unint64_t v11 = *v10;
  unint64_t v12 = *v10 + 56 * (v9 % 0x49);
  unint64_t v13 = *(void *)(v6 + 8 * ((v7 + v9) / 0x49)) + 56 * ((v7 + v9) % 0x49);
  if (v12 == v13)
  {
LABEL_11:
    double v14 = 0.0;
    goto LABEL_12;
  }
  double v14 = 0.0;
  do
  {
    double v15 = *(double *)(v12 + 48) - *(double *)(v12 + 40);
    if (v15 <= 0.0) {
      double v15 = -0.0;
    }
    v12 += 56;
    if (v12 - v11 == 4088)
    {
      unint64_t v16 = v10[1];
      ++v10;
      unint64_t v11 = v16;
      unint64_t v12 = v16;
    }
    double v14 = v14 + v15;
  }
  while (v12 != v13);
LABEL_12:
  *(double *)(a1 + 448) = v14 / (double)v7;
  sub_100805B24(a1);
  uint64_t v17 = a3[5];
  if (v17) {
    char v392 = sub_100DE6008(*(double *)(a1 + 464), *(double *)(*(void *)(a3[1] + 8 * ((v17 + a3[4] - 1) / 0x17uLL))+ 176 * ((v17 + a3[4] - 1) % 0x17uLL)+ 72), *(float *)(a1 + 2536));
  }
  else {
    char v392 = 0;
  }
  int v18 = *(_DWORD *)(a1 + 48) + 1;
  *(_DWORD *)(a1 + 48) = v18;
  if (*v8 >= 0x101uLL && (v18 & 0xF) == 0)
  {
    *(_DWORD *)(a1 + 48) = 0;
    memset(v416, 0, 20);
    if (sub_100805E90(v4, (uint64_t)v416))
    {
      sub_10080636C((void *)(a1 + 104), v416);
    }
    else
    {
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_1022CAA70);
      }
      unint64_t v19 = qword_102419298;
      if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "[FormModels] Failed to compute axis of rotation", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419290 != -1) {
          dispatch_once(&qword_102419290, &stru_1022CAA70);
        }
        *(_WORD *)v411 = 0;
        v333 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLRunning::FormModels::feedDeviceMotion(const DeviceMotionQueue &, const StepQueue &)", "%s\n", v333);
        if (v333 != buf) {
          free(v333);
        }
      }
    }
  }
  if (*(double *)(a1 + 464) > 0.0 && *v8 >= 0x201uLL)
  {
    unint64_t v20 = v4[4] + *v8;
    uint64_t v21 = v4[1];
    uint64_t v22 = v4[2];
    uint64_t v23 = (void *)(v21 + 8 * (v20 / 0x49));
    unint64_t v24 = *v23 + 56 * (v20 % 0x49);
    if (v22 == v21) {
      unint64_t v24 = 0;
    }
    uint64_t v25 = v24 - *v23;
    uint64_t v26 = 0x6DB6DB6DB6DB6DB7 * (v25 >> 3);
    if (v25 < 28729)
    {
      unint64_t v45 = 585 - v26;
      char v28 = &v23[-(v45 / 0x49)];
      unint64_t v29 = *v28 + 56 * (73 * (v45 / 0x49) - v45) + 4032;
    }
    else
    {
      unint64_t v27 = v26 - 513;
      char v28 = &v23[v27 / 0x49];
      unint64_t v29 = *v28 + 56 * (v27 % 0x49);
    }
    v416[0].n128_u64[0] = (unint64_t)v28;
    v416[0].n128_u64[1] = v29;
    if (v22 == v21) {
      unint64_t v46 = 0;
    }
    else {
      unint64_t v46 = *v23 + 56 * (v20 % 0x49);
    }
    *(void *)v411 = v23;
    *(void *)&v411[8] = v46;
    sub_10080641C((uint64_t)v416, (uint64_t)v411, a1 + 1500, (uint64_t)buf);
    sub_1008065C0((void *)(a1 + 56), (__n128 *)buf);
    goto LABEL_56;
  }
  *(void *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  int v30 = *(void ***)(a1 + 64);
  uint64_t v31 = *(void *)(a1 + 72);
  *(void *)(a1 + 96) = 0;
  unint64_t v32 = v31 - (void)v30;
  if (v32 >= 0x11)
  {
    do
    {
      operator delete(*v30);
      uint64_t v33 = *(void *)(a1 + 72);
      int v30 = (void **)(*(void *)(a1 + 64) + 8);
      *(void *)(a1 + 64) = v30;
      unint64_t v32 = v33 - (void)v30;
    }
    while (v32 > 0x10);
  }
  if (v32 >> 3 == 1)
  {
    uint64_t v34 = 85;
  }
  else
  {
    if (v32 >> 3 != 2) {
      goto LABEL_37;
    }
    uint64_t v34 = 170;
  }
  *(void *)(a1 + 88) = v34;
LABEL_37:
  int v35 = *(void ***)(a1 + 160);
  uint64_t v36 = *(void *)(a1 + 168);
  *(void *)(a1 + 192) = 0;
  unint64_t v37 = v36 - (void)v35;
  if (v37 >= 0x11)
  {
    do
    {
      operator delete(*v35);
      uint64_t v38 = *(void *)(a1 + 168);
      int v35 = (void **)(*(void *)(a1 + 160) + 8);
      *(void *)(a1 + 160) = v35;
      unint64_t v37 = v38 - (void)v35;
    }
    while (v37 > 0x10);
  }
  if (v37 >> 3 == 1)
  {
    uint64_t v39 = 85;
    goto LABEL_43;
  }
  if (v37 >> 3 == 2)
  {
    uint64_t v39 = 170;
LABEL_43:
    *(void *)(a1 + 184) = v39;
  }
  __int16 v40 = *(void ***)(a1 + 208);
  uint64_t v41 = *(void *)(a1 + 216);
  *(void *)(a1 + 240) = 0;
  unint64_t v42 = v41 - (void)v40;
  if (v42 >= 0x11)
  {
    do
    {
      operator delete(*v40);
      uint64_t v43 = *(void *)(a1 + 216);
      __int16 v40 = (void **)(*(void *)(a1 + 208) + 8);
      *(void *)(a1 + 208) = v40;
      unint64_t v42 = v43 - (void)v40;
    }
    while (v42 > 0x10);
  }
  if (v42 >> 3 == 1)
  {
    uint64_t v44 = 128;
  }
  else
  {
    if (v42 >> 3 != 2) {
      goto LABEL_56;
    }
    uint64_t v44 = 256;
  }
  *(void *)(a1 + 232) = v44;
LABEL_56:
  unint64_t v47 = *(void *)(a1 + 96);
  v396 = v4;
  if (v47 < 2) {
    goto LABEL_70;
  }
  unint64_t v48 = *(void *)(a1 + 88);
  unint64_t v49 = v48 + v47;
  uint64_t v50 = *(void *)(a1 + 64);
  uint64_t v51 = *(void *)(a1 + 72);
  __int16 v52 = (void *)(v50 + 8 * (v49 / 0xAA));
  unint64_t v53 = *v52 + 24 * (v49 % 0xAA);
  if (v51 == v50) {
    unint64_t v53 = 0;
  }
  uint64_t v54 = v53 - *v52;
  unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * (v54 >> 3);
  if (v54 < 25)
  {
    unint64_t v61 = 170 - v55;
    unint64_t v62 = (170 - v55) / 0xAA;
    __int16 v58 = &v52[-v62];
    uint64_t v59 = *v58;
    uint64_t v60 = *v58 + 24 * (170 * v62 - v61) + 4056;
  }
  else
  {
    unint64_t v56 = v55 - 1;
    unint64_t v57 = (v55 - 1) / 0xAA;
    __int16 v58 = &v52[v57];
    uint64_t v59 = *v58;
    uint64_t v60 = *v58 + 24 * (v56 - 170 * v57);
  }
  uint64_t v63 = v60 - v59;
  unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((v60 - v59) >> 3);
  if (v63 < 25) {
    unint64_t v65 = v58[-((170 - v64) / 0xAA)] + 24 * (170 * ((170 - v64) / 0xAA) - (170 - v64)) + 4056;
  }
  else {
    unint64_t v65 = v58[(v64 - 1) / 0xAA] + 24 * ((v64 - 1) % 0xAA);
  }
  float v66 = *(float *)(v65 + 8);
  float v67 = *(float *)(v60 + 8);
  if (v66 <= 0.0 && v67 > 0.0)
  {
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a1 + 416);
    *(void *)(a1 + 408) = *(void *)(a1 + 432);
    *(void *)(a1 + 416) = *(void *)v60;
    *(void *)(a1 + 424) = 0;
    *(void *)(a1 + 432) = 0;
    goto LABEL_68;
  }
  if (v66 < 0.0
    || v67 >= 0.0
    || *(double *)(a1 + 392) <= 0.0
    || *(double *)(a1 + 408) <= 0.0
    || *(double *)(a1 + 416) <= 0.0
    || *(double *)(a1 + 432) <= 0.0)
  {
    goto LABEL_68;
  }
  uint64_t v342 = v60;
  char v422 = 0;
  long long v420 = 0u;
  long long v421 = 0u;
  long long v418 = 0u;
  long long v419 = 0u;
  long long v417 = 0u;
  memset(v416, 0, sizeof(v416));
  v125 = (void *)(v50 + 8 * (v48 / 0xAA));
  if (v51 == v50)
  {
    v126 = 0;
    v127 = 0;
  }
  else
  {
    v126 = (double *)(*v125 + 24 * (v48 % 0xAA));
    v127 = (double *)(*v52 + 24 * (v49 % 0xAA));
  }
  v138 = sub_100806670(v125, v126, v52, v127, (double *)(a1 + 400));
  v140 = v138;
  uint64_t v141 = (uint64_t)v139;
  unint64_t v142 = *(void *)(a1 + 88) + *(void *)(a1 + 96);
  uint64_t v143 = *(void *)(a1 + 64);
  v144 = (void *)(v143 + 8 * (v142 / 0xAA));
  if (*(void *)(a1 + 72) == v143) {
    v145 = 0;
  }
  else {
    v145 = (double *)(*v144 + 24 * (v142 % 0xAA));
  }
  v146 = sub_100806758(v138, v139, v144, v145, (double *)(a1 + 424));
  unint64_t v148 = v147;
  unint64_t v149 = v4[4];
  uint64_t v150 = v4[1];
  v151 = (void *)(v150 + 8 * (v149 / 0x49));
  if (v4[2] == v150)
  {
    uint64_t v152 = 0;
    uint64_t v155 = 0;
    v154 = (void *)(v150
                    + (((unint64_t)(((*v8 + v149) * (unsigned __int128)0x70381C0E070381C1uLL) >> 64) >> 2) & 0x1FFFFFFFFFFFFFF8));
  }
  else
  {
    uint64_t v152 = *(void *)(v150 + 8 * (v149 / 0x49)) + 56 * (v149 % 0x49);
    unint64_t v153 = *v8 + v149;
    v154 = (void *)(v150 + 8 * (v153 / 0x49));
    uint64_t v155 = *v154 + 56 * (v153 % 0x49);
  }
  v373 = sub_10080683C(v151, v152, v154, v155, (double *)(a1 + 400));
  uint64_t v157 = v156;
  int v158 = *(_DWORD *)(a1 + 2664);
  if (v158 == 1)
  {
    if (*(_DWORD *)(a1 + 2668) != 1)
    {
LABEL_167:
      v159 = sub_1008069EC(v140, v141, (uint64_t)v146, v148, a1);
      goto LABEL_170;
    }
  }
  else if (v158 || *(_DWORD *)(a1 + 2668))
  {
    goto LABEL_167;
  }
  v159 = sub_100806938(v140, v141, (uint64_t)v146, v148, a1);
LABEL_170:
  float v353 = v67;
  v344 = (double *)v141;
  v345 = (double *)v148;
  v366 = v160;
  if (v159 >= v146 && (v159 != v146 || (unint64_t)v160 >= v148) || v160 == (double *)v141)
  {
    v161 = v146;
    v162 = v140;
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1022CAA70);
    }
    v163 = qword_102419298;
    if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_ERROR))
    {
      int v164 = *(_DWORD *)(a1 + 2664);
      int v165 = *(_DWORD *)(a1 + 2668);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v164;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v165;
      _os_log_impl((void *)&_mh_execute_header, v163, OS_LOG_TYPE_ERROR, "[FormModels] Unable to determine swing extrema. Verify correct watch orientation: Wrist=%{public}d, Crown=%{public}d", buf, 0xEu);
    }
    v140 = v162;
    v146 = v161;
    if (sub_10013D1A0(115, 0))
    {
      v335 = v140;
      bzero(buf, 0x65CuLL);
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_1022CAA70);
      }
      int v336 = *(_DWORD *)(a1 + 2664);
      int v337 = *(_DWORD *)(a1 + 2668);
      *(_DWORD *)v411 = 67240448;
      *(_DWORD *)&v411[4] = v336;
      *(_WORD *)&v411[8] = 1026;
      *(_DWORD *)&v411[10] = v337;
      v338 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLRunning::FormModels::feedDeviceMotion(const DeviceMotionQueue &, const StepQueue &)", "%s\n", v338);
      if (v338 != buf) {
        free(v338);
      }
      v140 = v335;
      v146 = v161;
    }
  }
  else
  {
    char v422 = 1;
  }
  int v166 = 0;
  uint64_t v167 = *(void *)(a1 + 64);
  double v168 = -1.79769313e308;
  double v169 = 1.79769313e308;
  double v170 = 0.0;
  double v374 = 0.0;
  v171 = v140;
  uint64_t v172 = v141;
LABEL_181:
  uint64_t v173 = v172 - 4080;
  while (1)
  {
    if (*(void *)(a1 + 72) == v167)
    {
      unint64_t v175 = 0;
    }
    else
    {
      unint64_t v174 = *(void *)(a1 + 96) + *(void *)(a1 + 88);
      unint64_t v175 = *(void *)(v167 + 8 * (v174 / 0xAA)) + 24 * (v174 % 0xAA);
    }
    if (v172 == v175 || (double *)v172 == v345) {
      break;
    }
    double v170 = *(double *)v172;
    if (*(double *)v172 >= *v366)
    {
      float v176 = fabsf(*(float *)(v172 + 8));
      double v177 = *(float *)(v172 + 12);
      if (v168 < v177) {
        double v168 = *(float *)(v172 + 12);
      }
      if (v169 > v177) {
        double v169 = *(float *)(v172 + 12);
      }
      double v170 = v176;
      double v374 = v374 + v170;
      ++v166;
    }
    v172 += 24;
    v173 += 24;
    if (*v171 == v173)
    {
      uint64_t v178 = v171[1];
      ++v171;
      uint64_t v172 = v178;
      goto LABEL_181;
    }
  }
  double v340 = v169;
  double v341 = v168;
  v409 = 0;
  std::string __p = 0;
  uint64_t v410 = 0;
  *(void *)buf = v140;
  *(void *)&uint8_t buf[8] = v141;
  *(void *)v411 = v146;
  *(void *)&v411[8] = v345;
  sub_100806AA0((uint64_t **)buf, (uint64_t)v411, (float32x2_t **)&__p, v170);
  int v339 = v166;
  if (v345 == (double *)v141) {
    uint64_t v179 = 0;
  }
  else {
    uint64_t v179 = 170 * (v146 - v140)
  }
         - 0x5555555555555555 * (((uint64_t)v345 - *v146) >> 3)
         + 0x5555555555555555 * ((v141 - *v140) >> 3);
  uint64_t v343 = v179;
  unint64_t v180 = *(void *)(a1 + 136);
  uint64_t v181 = *(void *)(a1 + 112);
  v182 = (void *)(v181 + 8 * (v180 / 0xAA));
  if (*(void *)(a1 + 120) == v181) {
    v183 = 0;
  }
  else {
    v183 = (float *)(*v182 + 24 * (v180 % 0xAA));
  }
  v407[0] = v181 + 8 * (v180 / 0xAA);
  v407[1] = v183;
  uint64_t v184 = v4[1];
  if (v4[2] == v184)
  {
    unint64_t v186 = 0;
  }
  else
  {
    unint64_t v185 = v4[5] + v4[4];
    unint64_t v186 = *(void *)(v184 + 8 * (v185 / 0x49)) + 56 * (v185 % 0x49);
  }
  if (v186 == v157) {
    double v187 = 0.0;
  }
  else {
    double v187 = *(double *)(v157 + 40);
  }
  if (v343 < 1)
  {
    double v188 = -1.79769313e308;
    double v189 = 1.79769313e308;
    v310 = v344;
    v303 = v345;
    v307.i32[0] = *(_DWORD *)(a1 + 2536);
    double v325 = *(double *)(a1 + 448);
    double v326 = -1.0;
    goto LABEL_308;
  }
  uint64_t v398 = 0;
  int v365 = 0;
  double v188 = -1.79769313e308;
  double v189 = 1.79769313e308;
  double v190 = 0.0;
  double v400 = 0.0;
  double v191 = 0.0;
  double v351 = 0.0;
  double v352 = 0.0;
  double v361 = 0.0;
  double v362 = 0.0;
  double v355 = 0.0;
  double v356 = 0.0;
  double v357 = -1.79769313e308;
  double v358 = 0.0;
  double v363 = 1.79769313e308;
  double v364 = -1.79769313e308;
  double v397 = 0.0;
  double v192 = 0.0;
  double v193 = 0.0;
  double v359 = 0.0;
  double v360 = -1.79769313e308;
  double v194 = 0.0;
  double v347 = 0.0;
  double v348 = 0.0;
  double v349 = 0.0;
  double v350 = 0.0;
  double v195 = 0.0;
  uint64_t v354 = v343 & ~(v343 >> 63);
  double v196 = 0.0;
  double v197 = 0.0;
  double v346 = 0.0;
  v399 = (float *)v344;
  do
  {
    double v388 = v190;
    double v390 = v196;
    double v393 = v195;
    double v394 = v197;
    double v406 = *(double *)(v157 + 40);
    float v198 = sub_100B9BC00((float *)v157);
    float v201 = v198;
    float v202 = v199;
    float v203 = v200;
    unint64_t v204 = *(void *)(a1 + 136) + *(void *)(a1 + 144);
    uint64_t v205 = *(void *)(a1 + 112);
    v206 = (void *)(v205 + 8 * (v204 / 0xAA));
    double v387 = v189;
    double v385 = v191;
    double v382 = v192;
    double v383 = v194;
    if (*(void *)(a1 + 120) == v205) {
      unint64_t v207 = 0;
    }
    else {
      unint64_t v207 = *v206 + 24 * (v204 % 0xAA);
    }
    float v208 = *(float *)(v157 + 28);
    float v209 = *(float *)(v157 + 32);
    float v210 = *(float *)(v157 + 36);
    double v211 = v406;
    double v386 = v188;
    double v384 = v193;
    if ((float *)v207 == v183
      || (unint64_t v212 = 170 * (v206 - v182)
               - 0x5555555555555555 * ((uint64_t)(v207 - *v206) >> 3)
               + 0x5555555555555555 * (((uint64_t)v183 - *v182) >> 3)) == 0)
    {
      float v219 = *(float *)(v157 + 36);
      float v217 = *(float *)(v157 + 32);
      float v218 = *(float *)(v157 + 28);
      double v220 = v400;
    }
    else
    {
      float v376 = v200;
      float v213 = v199;
      float v214 = v198;
      v379 = v140;
      do
      {
        unint64_t v215 = v212 >> 1;
        *(void *)buf = v182;
        *(void *)&uint8_t buf[8] = v183;
        sub_1000D9CF8(buf, v212 >> 1);
        uint64_t v216 = *(void *)&buf[8];
        if (**(double **)&buf[8] < *(double *)(a1 + 400))
        {
          v183 = (float *)(*(void *)&buf[8] + 24);
          *(void *)&buf[8] += 24;
          v182 = *(void **)buf;
          if (v216 + 24 - **(void **)buf == 4080)
          {
            v182 = (void *)(*(void *)buf + 8);
            v183 = *(float **)(*(void *)buf + 8);
          }
          unint64_t v215 = v212 + ~v215;
        }
        unint64_t v212 = v215;
      }
      while (v215);
      float v218 = *(float *)(v157 + 28);
      float v217 = *(float *)(v157 + 32);
      float v219 = *(float *)(v157 + 36);
      v140 = v379;
      float v201 = v214;
      float v202 = v213;
      double v220 = v400;
      float v203 = v376;
    }
    double v401 = v220;
    uint64_t v221 = 0;
    double v370 = vabds_f32(v210, v203 * (float)((float)((float)(v203 * v210) + (float)(v202 * v209)) + (float)(v201 * v208)));
    double v371 = v210;
    double v372 = fabsf(v209);
    double v222 = v211 - v187;
    float v223 = v183[2];
    float v224 = v183[3];
    float v225 = v183[4];
    float v226 = (float)((float)(v225 * v219) + (float)(v224 * v217)) + (float)(v223 * v218);
    float v369 = v223 * v226;
    float v380 = fabsf((float)((float)(v203 * (float)(v225 * v226)) + (float)(v202 * (float)(v224 * v226)))+ (float)(v201 * (float)(v223 * v226)));
    float v368 = 1.0 - v380;
    float v227 = *(float *)(v157 + 16);
    float v228 = *(float *)(v157 + 20);
    float v229 = *(float *)(v157 + 24);
    float v230 = (float)((float)(v203 * v229) + (float)(v202 * v228)) + (float)(v201 * v227);
    float v367 = v227 - (float)(v201 * v230);
    *(float *)v411 = v367;
    *(float *)&v411[4] = v228 - (float)(v202 * v230);
    *(float *)&v411[8] = v229 - (float)(v203 * v230);
    float v231 = 0.0;
    do
    {
      float v231 = v231 + (float)(*(float *)&v411[v221] * *(float *)&v411[v221]);
      v221 += 4;
    }
    while (v221 != 12);
    float v377 = v399[2];
    float v232 = v399[4];
    float v375 = v399[3];
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247E1F8, memory_order_acquire) & 1) == 0)
    {
      float v299 = v201;
      float v300 = v202;
      float v301 = v203;
      int v302 = __cxa_guard_acquire(&qword_10247E1F8);
      float v203 = v301;
      float v202 = v300;
      float v201 = v299;
      if (v302)
      {
        qword_10247E1E8 = 0x3F80000000000000;
        dword_10247E1F0 = 0;
        __cxa_guard_release(&qword_10247E1F8);
        float v203 = v301;
        float v202 = v300;
        float v201 = v299;
      }
    }
    float v233 = v201;
    float v234 = v202;
    float v235 = v203;
    double v236 = sub_100806EAC(*(float *)&qword_10247E1E8, *((float *)&qword_10247E1E8 + 1), *(float *)&dword_10247E1F0, v201, v202, v203);
    float v237 = fabsf(v228);
    float v238 = vabds_f32(v232, v232 * (float)((float)((float)(v235 * v232) + (float)(v375 * v234)) + (float)(v377 * v233)));
    double v239 = (float)(*(float *)&v236 * 57.296);
    double v240 = v380;
    if (v222 <= 0.0) {
      double v241 = 0.0;
    }
    else {
      double v241 = v222 * (v388 + v380) * 0.5;
    }
    double v389 = v237;
    if (v222 <= 0.0) {
      double v242 = 0.0;
    }
    else {
      double v242 = v222 * (v390 + v389) * 0.5;
    }
    double v391 = v230;
    double v243 = v222 * (v393 + v230) * 0.5;
    if (v222 <= 0.0) {
      double v243 = 0.0;
    }
    double v244 = v397 + v243;
    if (v222 <= 0.0) {
      double v245 = 0.0;
    }
    else {
      double v245 = v222 * (v394 + v239) * 0.5;
    }
    double v246 = v238;
    double v397 = v397 + v243;
    double v247 = fabs(v244);
    float v248 = v233;
    float v249 = v235;
    double v378 = v239;
    double v381 = v380;
    if (v406 >= *v366)
    {
      float v260 = fabsf(v367);
      double v261 = v222 * (v346 + v239) * 0.5;
      if (v222 <= 0.0) {
        double v261 = 0.0;
      }
      double v359 = v359 + v261;
      double v262 = v222 * (v348 + v372) * 0.5;
      if (v222 <= 0.0) {
        double v262 = 0.0;
      }
      double v362 = v362 + v262;
      double v352 = v352 + v260;
      ++v365;
      double v263 = v222 * (v351 + v247) * 0.5;
      if (v222 <= 0.0) {
        double v263 = 0.0;
      }
      double v356 = v356 + v263;
      double v346 = v239;
      double v351 = v247;
      double v348 = v372;
    }
    else
    {
      float v250 = fabsf(sqrtf(v231));
      double v251 = (float)(v369 * v368);
      if (v364 >= v251) {
        double v252 = v364;
      }
      else {
        double v252 = (float)(v369 * v368);
      }
      double v253 = v363;
      if (v363 > v251) {
        double v253 = (float)(v369 * v368);
      }
      double v363 = v253;
      double v364 = v252;
      double v254 = v357;
      if (v357 < v370) {
        double v254 = v370;
      }
      double v357 = v254;
      double v255 = v360;
      if (v360 < v371) {
        double v255 = v371;
      }
      double v360 = v255;
      double v256 = v250;
      double v257 = v222 * (v347 + v250) * 0.5;
      if (v222 <= 0.0) {
        double v257 = 0.0;
      }
      double v361 = v361 + v257;
      double v258 = v222 * (v349 + v240) * 0.5;
      if (v222 <= 0.0) {
        double v258 = 0.0;
      }
      double v358 = v358 + v258;
      double v259 = v222 * (v350 + v247) * 0.5;
      if (v222 <= 0.0) {
        double v259 = 0.0;
      }
      double v355 = v355 + v259;
      double v349 = v240;
      double v350 = v247;
      double v347 = v256;
    }
    float v67 = v353;
    double v188 = v386;
    double v189 = v387;
    uint64_t v264 = 0;
    double v194 = v383 + v241;
    double v192 = v382 + v242;
    double v193 = v384 + v245;
    double v265 = v401 + v246;
    uint64_t v266 = v398 + 1;
    float v267 = *(float *)(v157 + 16);
    float v268 = *(float *)(v157 + 20);
    float v269 = *(float *)(v157 + 24);
    float v270 = (float)((float)(v249 * v269) + (float)(v268 * v234)) + (float)(v267 * v248);
    *(float *)&long long v402 = v267 - (float)(v248 * v270);
    *((float *)&v402 + 1) = v268 - (float)(v234 * v270);
    *((float *)&v402 + 2) = v269 - (float)(v249 * v270);
    float v271 = 0.0;
    do
    {
      float v271 = v271 + (float)(*(float *)((char *)&v402 + v264) * *(float *)((char *)&v402 + v264));
      v264 += 4;
    }
    while (v264 != 12);
    uint64_t v272 = 0;
    double v395 = sqrtf(v271);
    float v273 = 0.0;
    do
    {
      float v273 = v273 + (float)(*(float *)(v157 + 28 + v272) * *(float *)(v157 + 28 + v272));
      v272 += 4;
    }
    while (v272 != 12);
    double v274 = sqrtf(v273);
    if (v387 > v274) {
      double v189 = v274;
    }
    float v275 = (float)(v249 * *(float *)(v157 + 36)) + (float)(*(float *)(v157 + 32) * v234);
    if (v386 < (float)(v275 + (float)(*(float *)(v157 + 28) * v248))) {
      double v188 = (float)(v275 + (float)(*(float *)(v157 + 28) * v248));
    }
    memset(v405, 0, 12);
    unint64_t v276 = *(void *)(a1 + 136) + *(void *)(a1 + 144);
    uint64_t v277 = *(void *)(a1 + 112);
    v278 = (void *)(v277 + 8 * (v276 / 0xAA));
    if (*(void *)(a1 + 120) == v277) {
      v279 = 0;
    }
    else {
      v279 = (double *)(*v278 + 24 * (v276 % 0xAA));
    }
    if ((sub_100807088(v407, v406, (uint64_t)v278, v279, v405) & 1) == 0)
    {
      v280 = v140;
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_1022CAA70);
      }
      v281 = qword_102419298;
      if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v281, OS_LOG_TYPE_ERROR, "[FormModels] Failed to get primary axis of rotation", buf, 2u);
      }
      v140 = v280;
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419290 != -1) {
          dispatch_once(&qword_102419290, &stru_1022CAA70);
        }
        __int16 v404 = 0;
        v298 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLRunning::FormModels::feedDeviceMotion(const DeviceMotionQueue &, const StepQueue &)", "%s\n", v298);
        if (v298 != buf) {
          free(v298);
        }
        float v67 = v353;
        v140 = v280;
      }
    }
    v282 = (char *)__p + 12 * v398;
    float v283 = vmlas_n_f32(vmuls_lane_f32(*(float *)(v157 + 36), *(float32x2_t *)((char *)v405 + 4), 1), *(float *)(v157 + 32), *((float *)v405 + 1))+ (float)(*(float *)v405 * *(float *)(v157 + 28));
    float v284 = *(float *)v405 * v283;
    float32x2_t v285 = vmul_n_f32(*(float32x2_t *)((char *)v405 + 4), v283);
    float32x2_t v286 = *(float32x2_t *)(v282 + 4);
    v287.i32[0] = vdup_lane_s32((int32x2_t)v285, 1).u32[0];
    v287.f32[1] = v284;
    v288.i32[0] = vdup_lane_s32((int32x2_t)v286, 1).u32[0];
    v288.i32[1] = *(_DWORD *)v282;
    float32x2_t v289 = vmla_f32(vmul_f32(v286, vneg_f32(v287)), v288, v285);
    v285.f32[0] = (float)(*(float *)(v157 + 24) * 9.8067)
                - vmlas_n_f32(-(float)(v285.f32[0] * *(float *)v282), v284, v286.f32[0]);
    *(float32x2_t *)buf = vsub_f32(vmul_f32(*(float32x2_t *)(v157 + 16), (float32x2_t)vdup_n_s32(0x411CE80Au)), v289);
    *(_DWORD *)&uint8_t buf[8] = v285.i32[0];
    uint64_t v290 = *(void *)(a1 + 192);
    if (v290)
    {
      unint64_t v291 = v290 + *(void *)(a1 + 184) - 1;
      v292 = *(void ***)(a1 + 160);
      if (*((double *)v292[v291 / 0xAA] + 3 * (v291 % 0xAA)) - v406 > 0.1)
      {
        uint64_t v293 = *(void *)(a1 + 168);
        *(void *)(a1 + 192) = 0;
        unint64_t v294 = v293 - (void)v292;
        if (v294 >= 0x11)
        {
          do
          {
            operator delete(*v292);
            uint64_t v295 = *(void *)(a1 + 168);
            v292 = (void **)(*(void *)(a1 + 160) + 8);
            *(void *)(a1 + 160) = v292;
            unint64_t v294 = v295 - (void)v292;
          }
          while (v294 > 0x10);
        }
        if (v294 >> 3 == 1)
        {
          uint64_t v296 = 85;
        }
        else
        {
          if (v294 >> 3 != 2) {
            goto LABEL_286;
          }
          uint64_t v296 = 170;
        }
        *(void *)(a1 + 184) = v296;
      }
    }
LABEL_286:
    sub_1008072C0((void *)(a1 + 152), &v406, (uint64_t *)buf);
    v399 += 6;
    if ((float *)((char *)v399 - *v140) == (float *)4080)
    {
      v297 = (float *)v140[1];
      ++v140;
      v399 = v297;
    }
    v157 += 56;
    double v400 = v265;
    if (v157 - *v373 == 4088)
    {
      uint64_t v157 = v373[1];
      ++v373;
    }
    double v191 = v385 + v395;
    ++v398;
    double v196 = v389;
    double v195 = v391;
    double v187 = v406;
    double v197 = v378;
    double v190 = v381;
  }
  while (v266 != v354);
  v303 = v345;
  *(float *)&unsigned int v304 = v355 + v356;
  *(float *)&unsigned int v305 = v355;
  *(void *)((char *)&v419 + 4) = __PAIR64__(v305, v304);
  float v306 = v356;
  *((float *)&v419 + 3) = v306;
  int32x2_t v307 = *(int32x2_t *)(a1 + 2536);
  v416[0].n128_u64[0] = (unint64_t)vrev64_s32(v307);
  double v308 = 0.0;
  double v309 = 0.0;
  v310 = v344;
  if (v339 >= 1) {
    double v309 = v374 / (double)v339;
  }
  *(float *)&unsigned int v311 = v309;
  *(float *)&unsigned int v312 = v341 - v340;
  *(void *)&long long v417 = __PAIR64__(v312, v311);
  float v313 = v357;
  float v314 = v364 - v363;
  v416[1].n128_f32[3] = v313;
  v416[1].n128_f32[0] = v314;
  float v315 = v192;
  *(float *)&unsigned int v316 = v358;
  *(float *)&unsigned int v317 = v194;
  v416[0].n128_u64[1] = __PAIR64__(v316, v317);
  float v318 = v359;
  *((float *)&v417 + 2) = v315;
  *((float *)&v418 + 2) = v318;
  if (v365 >= 1) {
    double v308 = v352 / (double)v365;
  }
  *(float *)&unsigned int v319 = v308;
  *(float *)&unsigned int v320 = v361;
  *(unint64_t *)((char *)v416[1].n128_u64 + 4) = __PAIR64__(v319, v320);
  float v321 = v360;
  float v322 = v362;
  *((float *)&v417 + 3) = v321;
  *(float *)&long long v418 = v322;
  float v323 = v193;
  *((float *)&v418 + 1) = v323;
  if (v354) {
    double v324 = v400 / (double)(int)v354;
  }
  else {
    double v324 = 0.0;
  }
  float v327 = v324;
  *(float *)&long long v420 = v327;
  double v325 = *(double *)(a1 + 448);
  *((double *)&v420 + 1) = *v366 + v325;
  double v326 = sqrt(v191 / (double)v354);
LABEL_308:
  double v328 = *(float *)v307.i32 * 100.0;
  *(double *)&long long v402 = v328;
  *((double *)&v402 + 1) = v326;
  *(double *)&long long v403 = v189;
  *((double *)&v403 + 1) = v188;
  double v329 = *v310 + v325;
  double v330 = v325 + *v303;
  if (v330 - v329 > 0.0)
  {
    float v331 = 2.0 / (v330 - v329);
    *((float *)&v420 + 1) = v331;
  }
  v405[0] = 0.0;
  if (sub_1008073BC((double *)&v402, v405))
  {
    *(double *)buf = v405[0];
    *(double *)&uint8_t buf[8] = v330;
    *(_OWORD *)&uint8_t buf[16] = v402;
    long long v424 = v403;
    sub_10080747C((void *)(a1 + 344), (uint64_t)buf);
  }
  else
  {
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1022CAA70);
    }
    v332 = qword_102419298;
    if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218752;
      *(double *)&uint8_t buf[4] = v328;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&unsigned char buf[14] = v326;
      *(_WORD *)&buf[22] = 2048;
      *(double *)&uint8_t buf[24] = v189;
      LOWORD(v424) = 2048;
      *(double *)((char *)&v424 + 2) = v188;
      _os_log_impl((void *)&_mh_execute_header, v332, OS_LOG_TYPE_ERROR, "[FormModels] Invalid StrideLength features (%.f,%.f,%.f,%.f)", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_1022CAA70);
      }
      *(_DWORD *)v411 = 134218752;
      *(double *)&v411[4] = v328;
      *(_WORD *)&v411[12] = 2048;
      *(double *)&v411[14] = v326;
      __int16 v412 = 2048;
      double v413 = v189;
      __int16 v414 = 2048;
      double v415 = v188;
      v334 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLRunning::FormModels::feedDeviceMotion(const DeviceMotionQueue &, const StepQueue &)", "%s\n", v334);
      if (v334 != buf) {
        free(v334);
      }
      float v67 = v353;
    }
  }
  *(double *)&long long v421 = v329;
  *((double *)&v421 + 1) = v330;
  sub_10080752C((void *)(a1 + 296), (long long *)v416);
  if (__p)
  {
    v409 = __p;
    operator delete(__p);
  }
  uint64_t v60 = v342;
LABEL_68:
  if (*(double *)(a1 + 432) < v67)
  {
    *(double *)(a1 + 432) = v67;
    *(void *)(a1 + 424) = *(void *)v60;
  }
LABEL_70:
  unint64_t v68 = *(void *)(a1 + 192);
  if (v68 >= 0x101)
  {
    __int16 v69 = (int64x2_t *)(a1 + 328);
    do
    {
      if (!*(void *)(a1 + 336)) {
        break;
      }
      uint64_t v70 = *(void *)(a1 + 304);
      if (*(void *)(a1 + 312) == v70) {
        uint64_t v71 = 0;
      }
      else {
        uint64_t v71 = *(void *)(v70 + 8 * (v69->i64[0] / 0x22uLL)) + 120 * (v69->i64[0] % 0x22uLL);
      }
      unint64_t v72 = *(void *)(a1 + 184);
      unint64_t v73 = v72 / 0xAA;
      uint64_t v74 = *(void *)(a1 + 160);
      if (*(void *)(a1 + 168) == v74)
      {
        unint64_t v78 = 0;
        *(void *)buf = v74 + 8 * (v72 / 0xAA);
        *(void *)&uint8_t buf[8] = 0;
        __int16 v77 = (void *)(v74 + 8 * ((v72 + v68) / 0xAA));
      }
      else
      {
        uint64_t v75 = *(void *)(v74 + 8 * v73);
        *(void *)buf = v74 + 8 * v73;
        *(void *)&uint8_t buf[8] = v75 + 24 * (v72 % 0xAA);
        unint64_t v76 = v72 + v68;
        __int16 v77 = (void *)(v74 + 8 * (v76 / 0xAA));
        unint64_t v78 = *v77 + 24 * (v76 % 0xAA);
      }
      v416[0].n128_u64[0] = (unint64_t)v77;
      v416[0].n128_u64[1] = v78;
      sub_100807630((uint64_t)buf, (uint64_t)v416, a1 + 472, (uint64_t)v411);
      unint64_t v79 = v4[4];
      unint64_t v80 = v79 / 0x49;
      uint64_t v81 = v4[1];
      if (v4[2] == v81)
      {
        uint64_t v82 = 0;
        unint64_t v85 = 0;
        int v84 = (void *)(v81
                       + (((unint64_t)(((*v8 + v79) * (unsigned __int128)0x70381C0E070381C1uLL) >> 64) >> 2) & 0x1FFFFFFFFFFFFFF8));
      }
      else
      {
        uint64_t v82 = (float *)(*(void *)(v81 + 8 * (v79 / 0x49)) + 56 * (v79 % 0x49));
        unint64_t v83 = *v8 + v79;
        int v84 = (void *)(v81 + 8 * (v83 / 0x49));
        unint64_t v85 = *v84 + 56 * (v83 % 0x49);
      }
      unint64_t v86 = *(unint64_t *)(*(void *)(*(void *)(a1 + 160) + 8 * ((*(void *)(a1 + 184) + 128) / 0xAAuLL))
                                + 24 * ((*(void *)(a1 + 184) + 128) % 0xAAuLL));
      if ((float *)v85 != v82)
      {
        v87 = v8;
        unsigned int v88 = (void *)(v81 + 8 * v80);
        unint64_t v89 = 73 * (v84 - v88)
            + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v85 - *v84) >> 3)
            - 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v82 - *v88) >> 3);
        if (v89)
        {
          do
          {
            unint64_t v90 = v89 >> 1;
            *(void *)buf = v88;
            *(void *)&uint8_t buf[8] = v82;
            sub_10080DF84(buf, v89 >> 1);
            uint64_t v91 = *(void *)&buf[8];
            if (*(double *)(*(void *)&buf[8] + 40) < *(double *)&v86)
            {
              uint64_t v82 = (float *)(*(void *)&buf[8] + 56);
              *(void *)&buf[8] += 56;
              unsigned int v88 = *(void **)buf;
              if (v91 + 56 - **(void **)buf == 4088)
              {
                unsigned int v88 = (void *)(*(void *)buf + 8);
                uint64_t v82 = *(float **)(*(void *)buf + 8);
              }
              unint64_t v90 = v89 + ~v90;
            }
            unint64_t v89 = v90;
          }
          while (v90);
          unint64_t v4 = v396;
        }
        uint64_t v8 = v87;
      }
      float v92 = sub_100B9BC00(v82);
      double v95 = *(double *)&v86 + *(double *)(a1 + 448);
      if (v95 > *(double *)(v71 + 88))
      {
        float v96 = (float)((float)(v94 * *(float *)&v411[16]) + (float)(*(float *)&v411[12] * v93))
            + (float)(*(float *)&v411[8] * v92);
        float v97 = fabsf(v96);
        if (*(double *)&qword_10247E208 <= 0.0)
        {
          double v98 = v97;
        }
        else
        {
          double v98 = v97;
          if (*(double *)&v86 - *(double *)&qword_10247E208 <= 0.0) {
            double v99 = 0.0;
          }
          else {
            double v99 = (*(double *)&v86 - *(double *)&qword_10247E208) * (*(double *)&qword_10247E200 + v98) * 0.5;
          }
          *(double *)&qword_10247E210 = *(double *)&qword_10247E210 + v99;
          *(double *)&uint64_t v100 = v96;
          if (*(double *)&qword_10241DC78 < *(double *)&v100) {
            qword_10241DC78 = v100;
          }
          if (*(double *)&qword_10241DC80 > *(double *)&v100) {
            qword_10241DC80 = v100;
          }
        }
        qword_10247E200 = *(void *)&v98;
        qword_10247E208 = v86;
      }
      if (v95 >= *(double *)(v71 + 104))
      {
        float v101 = *(double *)&qword_10247E210;
        float v102 = *(double *)&qword_10241DC78 - *(double *)&qword_10241DC80;
        *(float *)(v71 + 60) = v102;
        *(float *)(v71 + 64) = v101;
        float v103 = sub_1008077B8(a1, v71);
        if (qword_102419290 != -1) {
          dispatch_once(&qword_102419290, &stru_1022CAA70);
        }
        double v104 = (float)(v103 * 0.001);
        int v105 = qword_102419298;
        if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v106 = *(void *)(v71 + 96);
          double v107 = *(double *)&v86 + *(double *)(a1 + 448);
          *(_DWORD *)buf = 134349824;
          *(void *)&uint8_t buf[4] = v106;
          *(_WORD *)&unsigned char buf[12] = 2050;
          *(double *)&unsigned char buf[14] = v107;
          *(_WORD *)&buf[22] = 2050;
          *(void *)&uint8_t buf[24] = v86;
          LOWORD(v424) = 2048;
          *(double *)((char *)&v424 + 2) = v104;
          _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEBUG, "[FormModels] VerticalOscillationEvent,startTime,%{public}.2f,endTime,%{public}.2f,timestamp,%{public}.2f,displacement,%.3f", buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419290 != -1) {
            dispatch_once(&qword_102419290, &stru_1022CAA70);
          }
          unint64_t v108 = *(void *)(v71 + 96);
          double v109 = *(double *)&v86 + *(double *)(a1 + 448);
          v416[0].n128_u32[0] = 134349824;
          *(unint64_t *)((char *)v416[0].n128_u64 + 4) = v108;
          v416[0].n128_u16[6] = 2050;
          *(double *)((char *)&v416[0].n128_f64[1] + 6) = v109;
          v416[1].n128_u16[3] = 2050;
          v416[1].n128_u64[1] = v86;
          LOWORD(v417) = 2048;
          *(double *)((char *)&v417 + 2) = v104;
          long long v110 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRunning::FormModels::feedDeviceMotion(const DeviceMotionQueue &, const StepQueue &)", "%s\n", v110);
          if (v110 != buf) {
            free(v110);
          }
        }
        *__int16 v69 = vaddq_s64(*v69, (int64x2_t)xmmword_101D0A740);
        sub_10080EFBC(a1 + 296, 1);
        if (*(void *)(a1 + 336)) {
          uint64_t v71 = *(void *)(*(void *)(a1 + 304) + 8 * (*(void *)(a1 + 328) / 0x22uLL))
        }
              + 120 * (*(void *)(a1 + 328) % 0x22uLL);
        if (*(unsigned char *)(v71 + 112))
        {
          *(void *)buf = v86;
          *(double *)&uint8_t buf[8] = v104;
          sub_10080799C((void *)(a1 + 248), buf);
        }
        qword_10241DC78 = 0xFFEFFFFFFFFFFFFFLL;
        qword_10241DC80 = 0x7FEFFFFFFFFFFFFFLL;
        qword_10247E200 = 0;
        qword_10247E208 = 0;
        qword_10247E210 = 0;
      }
      *(int64x2_t *)(a1 + 184) = vaddq_s64(*(int64x2_t *)(a1 + 184), (int64x2_t)xmmword_101D0A740);
      sub_10041FD7C(a1 + 152, 1);
      unint64_t v68 = *(void *)(a1 + 192);
    }
    while (v68 > 0x100);
  }
  int v111 = *(_DWORD *)(a1 + 2608) + 1;
  *(_DWORD *)(a1 + 2608) = v111;
  int v112 = v111 & 7;
  if (*v8 >= 0x80uLL && v112 == 0)
  {
    unint64_t v114 = v4[4] + *v8;
    uint64_t v115 = v4[1];
    uint64_t v116 = v4[2];
    long long v117 = (uint64_t *)(v115 + 8 * (v114 / 0x49));
    uint64_t v118 = *v117;
    unint64_t v119 = *v117 + 56 * (v114 % 0x49);
    if (v116 == v115) {
      unint64_t v119 = 0;
    }
    uint64_t v120 = v119 - v118;
    uint64_t v121 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v119 - v118) >> 3);
    if (v120 < 7169)
    {
      unint64_t v128 = 200 - v121;
      v123 = &v117[-(v128 / 0x49)];
      uint64_t v124 = *v123 + 56 * (73 * (v128 / 0x49) - v128) + 4032;
    }
    else
    {
      unint64_t v122 = v121 - 128;
      v123 = &v117[v122 / 0x49];
      uint64_t v124 = *v123 + 56 * (v122 % 0x49);
    }
    uint64_t v129 = v118 + 56 * (v114 % 0x49);
    if (v116 == v115) {
      uint64_t v130 = 0;
    }
    else {
      uint64_t v130 = v129;
    }
    sub_10080F334((uint64_t)buf, v123, v124, v117, v130);
    *(_DWORD *)(a1 + 2608) = 0;
    if ((v392 & 1) != 0 || *(unsigned char *)(a1 + 2612)) {
      sub_100807A5C(a1, buf);
    }
    sub_10058D17C(buf);
  }
  unint64_t v131 = *(void *)(a1 + 96);
  if (v131 >= 0x101)
  {
    do
    {
      *(void *)(a1 + 96) = v131 - 1;
      ++*(void *)(a1 + 88);
      sub_10041FD7C(a1 + 56, 1);
      unint64_t v131 = *(void *)(a1 + 96);
    }
    while (v131 > 0x100);
  }
  unint64_t v132 = *(void *)(a1 + 144);
  if (v132 >= 0x51)
  {
    do
    {
      *(void *)(a1 + 144) = v132 - 1;
      ++*(void *)(a1 + 136);
      sub_10041FD7C(a1 + 104, 1);
      unint64_t v132 = *(void *)(a1 + 144);
    }
    while (v132 > 0x50);
  }
  unint64_t v133 = *(void *)(a1 + 240);
  if (v133 >= 0x101)
  {
    do
    {
      *(void *)(a1 + 240) = v133 - 1;
      ++*(void *)(a1 + 232);
      sub_100096314(a1 + 200, 1);
      unint64_t v133 = *(void *)(a1 + 240);
    }
    while (v133 > 0x100);
  }
  unint64_t v134 = *(void *)(a1 + 288);
  if (v134 >= 0x23)
  {
    do
    {
      ++*(void *)(a1 + 280);
      *(void *)(a1 + 288) = v134 - 1;
      sub_100096314(a1 + 248, 1);
      unint64_t v134 = *(void *)(a1 + 288);
    }
    while (v134 > 0x22);
  }
  unint64_t v135 = *(void *)(a1 + 384);
  if (v135 >= 0x23)
  {
    do
    {
      ++*(void *)(a1 + 376);
      *(void *)(a1 + 384) = v135 - 1;
      sub_1004465E8(a1 + 344, 1);
      unint64_t v135 = *(void *)(a1 + 384);
    }
    while (v135 > 0x22);
  }
  unint64_t v136 = *(void *)(a1 + 2656);
  if (v136 >= 0x441)
  {
    do
    {
      uint64_t v137 = *(void *)(a1 + 2648);
      *(void *)(a1 + 2656) = v136 - 1;
      *(void *)(a1 + 2648) = v137 + 1;
      sub_10080FB24(a1 + 2616, 1);
      unint64_t v136 = *(void *)(a1 + 2656);
    }
    while (v136 > 0x440);
  }
}

void sub_100805AD0(_Unwind_Exception *a1)
{
  CFArrayRef v2 = (void *)STACK[0x248];
  if (STACK[0x248])
  {
    STACK[0x250] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void sub_100805B24(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v4 = v1[5];
  if (v4)
  {
    unint64_t v5 = v1[4];
    uint64_t v6 = v1[1];
    double v7 = *(double *)(*(void *)(v6 + 8 * ((v4 + v5 - 1) / 0x17)) + 176 * ((v4 + v5 - 1) % 0x17) + 8);
    if (*v2 != v7)
    {
      if (v1[2] == v6)
      {
        uint64_t v8 = 0;
        uint64_t v11 = 0;
        uint64_t v10 = (void *)(v6 + 8 * ((v5 + v4) / 0x17));
      }
      else
      {
        uint64_t v8 = *(void *)(v6 + 8 * (v5 / 0x17)) + 176 * (v5 % 0x17);
        unint64_t v9 = v5 + v4;
        uint64_t v10 = (void *)(v6 + 8 * (v9 / 0x17));
        uint64_t v11 = *v10 + 176 * (v9 % 0x17);
      }
      double v13 = sub_10080A2A4((void *)(v6 + 8 * (v5 / 0x17)), v8, v10, v11);
      if (v13 <= 0.0)
      {
        bzero(__src, 0x404uLL);
        bzero(v20, 0x404uLL);
      }
      else
      {
        sub_10080AC6C(v12);
        memset(v18, 0, 512);
        sub_10080AC6C(v14);
        memset(v17, 0, 512);
        sub_10080AC6C(v15);
        for (uint64_t i = 0; i != 1028; i += 4)
          *(float *)&__src[i] = *(float *)((char *)v18 + i) + *(float *)((char *)v17 + i);
      }
      memcpy(v3 + 2, __src, 0x404uLL);
      memcpy((char *)v3 + 1044, v20, 0x404uLL);
      *uint64_t v3 = v7;
      v3[1] = v13;
    }
  }
  else
  {
    bzero(v2, 0x818uLL);
  }
}

BOOL sub_100805E90(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[5];
  if (v2 >= 0x100)
  {
    std::string __p = 0;
    float v66 = 0;
    float v67 = 0;
    float32x2_t v63 = 0;
    float v64 = 0.0;
    unint64_t v4 = a1[4] + v2;
    uint64_t v5 = a1[1];
    uint64_t v6 = a1[2];
    double v7 = (uint64_t *)(v5 + 8 * (v4 / 0x49));
    uint64_t v8 = *v7;
    unint64_t v9 = *v7 + 56 * (v4 % 0x49);
    if (v6 == v5) {
      unint64_t v9 = 0;
    }
    uint64_t v10 = v9 - v8;
    uint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v9 - v8) >> 3);
    unint64_t v58 = v2;
    if (v10 < 14337)
    {
      unint64_t v15 = 328 - v11;
      double v13 = &v7[-(v15 / 0x49)];
      unint64_t v14 = *v13 + 56 * (73 * (v15 / 0x49) - v15) + 4032;
    }
    else
    {
      unint64_t v12 = v11 - 256;
      double v13 = &v7[v12 / 0x49];
      unint64_t v14 = *v13 + 56 * (v12 % 0x49);
    }
    while (1)
    {
      if (v6 == v5)
      {
        unint64_t v17 = 0;
      }
      else
      {
        unint64_t v16 = a1[5] + a1[4];
        unint64_t v17 = *(void *)(v5 + 8 * (v16 / 0x49)) + 56 * (v16 % 0x49);
      }
      if (v14 == v17) {
        break;
      }
      int v18 = (uint64_t *)(v14 + 28);
      unint64_t v19 = v66;
      if (v66 >= (_DWORD *)v67)
      {
        unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (unsigned char *)__p) >> 2);
        unint64_t v23 = v22 + 1;
        if (v22 + 1 > 0x1555555555555555) {
          sub_1001D7FD4();
        }
        if (0x5555555555555556 * ((v67 - (unsigned char *)__p) >> 2) > v23) {
          unint64_t v23 = 0x5555555555555556 * ((v67 - (unsigned char *)__p) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v67 - (unsigned char *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v24 = 0x1555555555555555;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24) {
          uint64_t v25 = (char *)sub_10080FC80((uint64_t)&v67, v24);
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v26 = &v25[12 * v22];
        uint64_t v27 = *v18;
        *((_DWORD *)v26 + 2) = *(_DWORD *)(v14 + 36);
        *(void *)uint64_t v26 = v27;
        unint64_t v29 = __p;
        char v28 = v66;
        int v30 = v26;
        if (v66 != __p)
        {
          do
          {
            uint64_t v31 = *(void *)(v28 - 3);
            v28 -= 3;
            int v32 = v28[2];
            *(void *)(v30 - 12) = v31;
            v30 -= 12;
            *((_DWORD *)v30 + 2) = v32;
          }
          while (v28 != v29);
          char v28 = __p;
        }
        uint64_t v21 = v26 + 12;
        std::string __p = v30;
        float v66 = v26 + 12;
        float v67 = &v25[12 * v24];
        if (v28) {
          operator delete(v28);
        }
      }
      else
      {
        uint64_t v20 = *v18;
        v66[2] = *(_DWORD *)(v14 + 36);
        *unint64_t v19 = v20;
        uint64_t v21 = (_DWORD *)v19 + 3;
      }
      unint64_t v33 = 0;
      float v66 = v21;
      do
      {
        float v34 = sub_1004E30E4(v14 + 28, v33);
        int v35 = (float *)sub_1004E4930((uint64_t)&v63, v33);
        *int v35 = v34 + *v35;
        ++v33;
      }
      while (v33 != 3);
      v14 += 56;
      if (v14 - *v13 == 4088)
      {
        unint64_t v36 = v13[1];
        ++v13;
        unint64_t v14 = v36;
      }
      uint64_t v5 = a1[1];
      uint64_t v6 = a1[2];
    }
    float32x2_t v61 = vmul_f32(v63, (float32x2_t)vdup_n_s32(0x3B800000u));
    float v62 = v64 * 0.0039062;
    sub_10080AB20((uint64_t *)&__p, &v61, (uint64_t)&v59);
    unint64_t v37 = a1[4] + a1[5];
    uint64_t v38 = a1[1];
    uint64_t v39 = (uint64_t *)(v38 + 8 * (v37 / 0x49));
    uint64_t v40 = *v39;
    unint64_t v41 = *v39 + 56 * (v37 % 0x49);
    if (a1[2] == v38) {
      unint64_t v41 = 0;
    }
    uint64_t v42 = v41 - v40;
    uint64_t v43 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v41 - v40) >> 3);
    unint64_t v2 = v58;
    if (v42 < 7169)
    {
      uint64_t v49 = 200 - v43;
      unint64_t v50 = (200 - v43) / 0x49uLL;
      unint64_t v46 = &v39[-v50];
      uint64_t v47 = *v46;
      uint64_t v48 = *v46 + 56 * (73 * v50 - v49) + 4032;
    }
    else
    {
      uint64_t v44 = v43 - 128;
      unint64_t v45 = (v43 - 128) / 0x49uLL;
      unint64_t v46 = &v39[v45];
      uint64_t v47 = *v46;
      uint64_t v48 = *v46 + 56 * (v44 - 73 * v45);
    }
    uint64_t v51 = v59;
    int v52 = v60;
    uint64_t v53 = v48 - v47;
    uint64_t v54 = 0x6DB6DB6DB6DB6DB7 * ((v48 - v47) >> 3);
    if (v53 < -55) {
      unint64_t v55 = v46[-((71 - v54) / 0x49uLL)] + 56 * (73 * ((71 - v54) / 0x49uLL) - (71 - v54)) + 4032;
    }
    else {
      unint64_t v55 = v46[(v54 + 1) / 0x49uLL] + 56 * ((v54 + 1) % 0x49uLL);
    }
    *(double *)a2 = (*(double *)(v48 + 40) + *(double *)(v55 + 40)) * 0.5;
    *(void *)(a2 + 8) = v51;
    *(_DWORD *)(a2 + 16) = v52;
    if (__p)
    {
      float v66 = __p;
      operator delete(__p);
    }
  }
  return v2 > 0xFF;
}

void sub_100806344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10080636C(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10080DC6C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  uint64_t v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *uint64_t v8 = result;
  ++a1[5];
  return result;
}

void sub_10080641C(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = v8 - **(void **)a1;
  uint64_t v10 = 0x6DB6DB6DB6DB6DB7 * (v9 >> 3);
  if (v9 < -7167) {
    unint64_t v11 = v7[-((-56 - v10) / 0x49uLL)] + 56 * (73 * ((-56 - v10) / 0x49uLL) - (-56 - v10)) + 4032;
  }
  else {
    unint64_t v11 = v7[(v10 + 128) / 0x49uLL] + 56 * ((v10 + 128) % 0x49uLL);
  }
  uint64_t v12 = 0;
  long long v18 = *(unint64_t *)(v11 + 40);
  LODWORD(v19) = 0;
  while (v8 != *(void *)(a2 + 8))
  {
    for (unint64_t i = 0; i != 3; ++i)
    {
      float v14 = sub_1004E30E4(v8 + 16, i);
      float v15 = *(float *)(a3 + 4 * v12);
      unint64_t v16 = (float *)sub_1004E4930((uint64_t)&v18 + 8, i);
      *unint64_t v16 = *v16 + (float)(v14 * v15);
    }
    v8 += 56;
    if (v8 - *v7 == 4088)
    {
      uint64_t v17 = v7[1];
      ++v7;
      uint64_t v8 = v17;
    }
    if (++v12 == 257)
    {
      *(_OWORD *)a4 = v18;
      *(void *)(a4 + 16) = v19;
      return;
    }
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
}

__n128 sub_1008065C0(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10080E038(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  uint64_t v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *uint64_t v8 = result;
  ++a1[5];
  return result;
}

void *sub_100806670(void *a1, double *a2, void *a3, double *a4, double *a5)
{
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  if (a4 != a2)
  {
    unint64_t v7 = 170 * (a3 - a1)
       - 0x5555555555555555 * (((uint64_t)a4 - *a3) >> 3)
       + 0x5555555555555555 * (((uint64_t)a2 - *a1) >> 3);
    if (v7)
    {
      do
      {
        unint64_t v9 = v7 >> 1;
        uint64_t v12 = v6;
        double v13 = v5;
        sub_1000D9CF8(&v12, v7 >> 1);
        uint64_t v10 = v13;
        if (*v13 < *a5)
        {
          uint64_t v5 = v13 + 3;
          v13 += 3;
          uint64_t v6 = v12;
          if ((double *)((char *)v10 - *v12 + 24) == (double *)4080)
          {
            uint64_t v6 = v12 + 1;
            uint64_t v5 = (double *)v12[1];
          }
          unint64_t v9 = v7 + ~v9;
        }
        unint64_t v7 = v9;
      }
      while (v9);
    }
  }
  return v6;
}

void *sub_100806758(void *a1, double *a2, void *a3, double *a4, double *a5)
{
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  if (a4 != a2)
  {
    unint64_t v7 = 170 * (a3 - a1)
       - 0x5555555555555555 * (((uint64_t)a4 - *a3) >> 3)
       + 0x5555555555555555 * (((uint64_t)a2 - *a1) >> 3);
    if (v7)
    {
      do
      {
        unint64_t v9 = v7 >> 1;
        unint64_t v11 = v6;
        uint64_t v12 = v5;
        sub_1000D9CF8(&v11, v7 >> 1);
        if (*v12 < *a5)
        {
          uint64_t v6 = v11;
          uint64_t v5 = v12 + 3;
          if ((double *)((char *)v12 - *v11 + 24) == (double *)4080)
          {
            uint64_t v6 = v11 + 1;
            uint64_t v5 = (double *)v11[1];
          }
          unint64_t v9 = v7 + ~v9;
        }
        unint64_t v7 = v9;
      }
      while (v9);
    }
  }
  return v6;
}

void *sub_10080683C(void *a1, uint64_t a2, void *a3, uint64_t a4, double *a5)
{
  uint64_t v5 = a2;
  uint64_t v6 = a1;
  if (a4 != a2)
  {
    unint64_t v7 = 73 * (a3 - a1) + 0x6DB6DB6DB6DB6DB7 * ((a4 - *a3) >> 3) - 0x6DB6DB6DB6DB6DB7 * ((a2 - *a1) >> 3);
    if (v7)
    {
      do
      {
        unint64_t v9 = v7 >> 1;
        uint64_t v12 = v6;
        uint64_t v13 = v5;
        sub_10080DF84(&v12, v7 >> 1);
        uint64_t v10 = v13;
        if (*(double *)(v13 + 40) < *a5)
        {
          uint64_t v5 = v13 + 56;
          v13 += 56;
          uint64_t v6 = v12;
          if (v10 + 56 - *v12 == 4088)
          {
            uint64_t v6 = v12 + 1;
            uint64_t v5 = v12[1];
          }
          unint64_t v9 = v7 + ~v9;
        }
        unint64_t v7 = v9;
      }
      while (v9);
    }
  }
  return v6;
}

void *sub_100806938(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 != a4)
  {
    uint64_t v5 = *result;
    uint64_t v6 = a2;
    unint64_t v7 = result;
    while (1)
    {
      v6 += 24;
      if (v6 - v5 == 4080)
      {
        uint64_t v8 = v7[1];
        ++v7;
        uint64_t v5 = v8;
        uint64_t v6 = v8;
      }
      if (v6 == a4) {
        return result;
      }
      double v9 = *(float *)(a2 + 8);
      int v10 = *(_DWORD *)(a5 + 2664);
      if (v10 == 1)
      {
        if (*(_DWORD *)(a5 + 2668) != 1)
        {
LABEL_9:
          double v11 = *(float *)(v6 + 8);
          goto LABEL_18;
        }
      }
      else
      {
        if (v10) {
          goto LABEL_12;
        }
        if (*(_DWORD *)(a5 + 2668)) {
          goto LABEL_9;
        }
      }
      double v9 = -v9;
LABEL_12:
      double v11 = *(float *)(v6 + 8);
      if (v10 == 1)
      {
        if (*(_DWORD *)(a5 + 2668) == 1) {
          goto LABEL_17;
        }
      }
      else if (!v10 && !*(_DWORD *)(a5 + 2668))
      {
LABEL_17:
        double v11 = -v11;
      }
LABEL_18:
      if (v9 <= v11)
      {
        __n128 result = v7;
        a2 = v6;
      }
    }
  }
  return result;
}

void *sub_1008069EC(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 != a4)
  {
    uint64_t v5 = *result;
    uint64_t v6 = a2;
    unint64_t v7 = result;
    while (1)
    {
      v6 += 24;
      if (v6 - v5 == 4080)
      {
        uint64_t v8 = v7[1];
        ++v7;
        uint64_t v5 = v8;
        uint64_t v6 = v8;
      }
      if (v6 == a4) {
        return result;
      }
      double v9 = *(float *)(v6 + 8);
      int v10 = *(_DWORD *)(a5 + 2664);
      if (v10 == 1)
      {
        if (*(_DWORD *)(a5 + 2668) != 1)
        {
LABEL_9:
          double v11 = *(float *)(a2 + 8);
          goto LABEL_18;
        }
      }
      else
      {
        if (v10) {
          goto LABEL_12;
        }
        if (*(_DWORD *)(a5 + 2668)) {
          goto LABEL_9;
        }
      }
      double v9 = -v9;
LABEL_12:
      double v11 = *(float *)(a2 + 8);
      if (v10 == 1)
      {
        if (*(_DWORD *)(a5 + 2668) == 1) {
          goto LABEL_17;
        }
      }
      else if (!v10 && !*(_DWORD *)(a5 + 2668))
      {
LABEL_17:
        double v11 = -v11;
      }
LABEL_18:
      if (v9 <= v11)
      {
        __n128 result = v7;
        a2 = v6;
      }
    }
  }
  return result;
}

BOOL sub_100806AA0(uint64_t **a1, uint64_t a2, float32x2_t **a3, double a4)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = *(uint64_t **)(a2 + 8);
  if (v4 != v5)
  {
    uint64_t v48 = *(uint64_t **)(a2 + 8);
    uint64_t v8 = 0;
    std::string __p = 0;
    uint64_t v51 = 0;
    int v52 = 0;
    double v9 = *a1;
    int v10 = (uint64_t *)**a1;
    float32x2_t v11 = 0;
    float v12 = 0.0;
    float32x2_t v13 = (float32x2_t)vdup_n_s32(0x409CE80Au);
    float v14 = 0.0;
    uint64_t v49 = v4;
    float32x2_t v15 = 0;
    do
    {
      uint64_t v16 = (char *)v4 - (char *)v10;
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (v4 - v10);
      if (v16 < 25) {
        unint64_t v18 = v9[-((170 - v17) / 0xAA)] + 24 * (170 * ((170 - v17) / 0xAA) - (170 - v17)) + 4056;
      }
      else {
        unint64_t v18 = v9[(v17 - 1) / 0xAA] + 24 * ((v17 - 1) % 0xAA);
      }
      float v19 = *(double *)v4 - *(double *)v18;
      float32x2_t v15 = vadd_f32(v15, vmul_f32(vmul_n_f32(vadd_f32(*(float32x2_t *)(v18 + 8), (float32x2_t)v4[1]), v19), v13));
      float v12 = v12 + (float)((float)((float)(*(float *)(v18 + 16) + *((float *)v4 + 4)) * v19) * 4.9033);
      if (v8 >= v52)
      {
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)__p) >> 2);
        unint64_t v21 = v20 + 1;
        if (v20 + 1 > 0x1555555555555555) {
          sub_1001D7FD4();
        }
        if (0x5555555555555556 * (((char *)v52 - (char *)__p) >> 2) > v21) {
          unint64_t v21 = 0x5555555555555556 * (((char *)v52 - (char *)__p) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v52 - (char *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v22 = 0x1555555555555555;
        }
        else {
          unint64_t v22 = v21;
        }
        if (v22) {
          unint64_t v23 = (char *)sub_10080FC80((uint64_t)&v52, v22);
        }
        else {
          unint64_t v23 = 0;
        }
        unint64_t v24 = (float32x2_t *)&v23[12 * v20];
        *unint64_t v24 = v15;
        v24[1].f32[0] = v12;
        uint64_t v25 = v51;
        uint64_t v26 = v24;
        if (v51 != __p)
        {
          do
          {
            float32x2_t v27 = *(float32x2_t *)((char *)v25 - 12);
            uint64_t v25 = (float32x2_t *)((char *)v25 - 12);
            __int32 v28 = v25[1].i32[0];
            *(float32x2_t *)((char *)v26 - 12) = v27;
            uint64_t v26 = (float32x2_t *)((char *)v26 - 12);
            v26[1].i32[0] = v28;
          }
          while (v25 != __p);
          uint64_t v25 = __p;
        }
        uint64_t v8 = (float32x2_t *)((char *)v24 + 12);
        std::string __p = v26;
        int v52 = (float32x2_t *)&v23[12 * v22];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *uint64_t v8 = v15;
        v8[1].f32[0] = v12;
        uint64_t v8 = (float32x2_t *)((char *)v8 + 12);
      }
      uint64_t v51 = v8;
      v4 += 3;
      int v10 = (uint64_t *)*v9;
      if ((uint64_t *)((char *)v4 - *v9) == (uint64_t *)4080)
      {
        unint64_t v29 = (uint64_t *)v9[1];
        ++v9;
        int v10 = v29;
        uint64_t v4 = v29;
      }
      float32x2_t v11 = vadd_f32(v11, v15);
      float v14 = v14 + v12;
    }
    while (v4 != *(uint64_t **)(a2 + 8));
    int v30 = __p;
    if (v8 != __p)
    {
      *(float *)&a4 = (float)(0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)__p) >> 2));
      float32x2_t v31 = vdiv_f32(v11, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a4, 0));
      float v32 = v14 / *(float *)&a4;
      unint64_t v33 = a3 + 2;
      float v34 = a3[1];
      do
      {
        float32x2_t v35 = vsub_f32(*v30, v31);
        float v36 = v30[1].f32[0] - v32;
        if ((unint64_t)v34 >= *v33)
        {
          unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)*a3) >> 2);
          unint64_t v38 = v37 + 1;
          if (v37 + 1 > 0x1555555555555555) {
            sub_1001D7FD4();
          }
          if (0x5555555555555556 * ((uint64_t)(*v33 - (void)*a3) >> 2) > v38) {
            unint64_t v38 = 0x5555555555555556 * ((uint64_t)(*v33 - (void)*a3) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v33 - (void)*a3) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v39 = 0x1555555555555555;
          }
          else {
            unint64_t v39 = v38;
          }
          if (v39) {
            uint64_t v40 = (char *)sub_10080FC80((uint64_t)(a3 + 2), v39);
          }
          else {
            uint64_t v40 = 0;
          }
          unint64_t v41 = (float32x2_t *)&v40[12 * v37];
          *unint64_t v41 = v35;
          v41[1].f32[0] = v36;
          uint64_t v43 = *a3;
          uint64_t v42 = a3[1];
          uint64_t v44 = v41;
          if (v42 != *a3)
          {
            do
            {
              float32x2_t v45 = *(float32x2_t *)((char *)v42 - 12);
              uint64_t v42 = (float32x2_t *)((char *)v42 - 12);
              __int32 v46 = v42[1].i32[0];
              *(float32x2_t *)((char *)v44 - 12) = v45;
              uint64_t v44 = (float32x2_t *)((char *)v44 - 12);
              v44[1].i32[0] = v46;
            }
            while (v42 != v43);
            uint64_t v42 = *a3;
          }
          float v34 = (float32x2_t *)((char *)v41 + 12);
          *a3 = v44;
          a3[1] = (float32x2_t *)((char *)v41 + 12);
          a3[2] = (float32x2_t *)&v40[12 * v39];
          if (v42) {
            operator delete(v42);
          }
        }
        else
        {
          *float v34 = v35;
          v34[1].f32[0] = v36;
          float v34 = (float32x2_t *)((char *)v34 + 12);
        }
        a3[1] = v34;
        int v30 = (float32x2_t *)((char *)v30 + 12);
      }
      while (v30 != v8);
      int v30 = __p;
    }
    uint64_t v5 = v48;
    uint64_t v4 = v49;
    if (v30) {
      operator delete(v30);
    }
  }
  return v4 != v5;
}

void sub_100806E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_100806EAC(float a1, float a2, float a3, float a4, float a5, float a6)
{
  float v6 = a6;
  float v7 = a5;
  float v8 = a4;
  float v9 = a3;
  float v10 = a2;
  float v11 = a1;
  uint64_t v12 = 0;
  float v26 = a1;
  float v27 = a2;
  float v28 = a3;
  float v13 = 0.0;
  do
  {
    float v13 = v13 + (float)(*(float *)((char *)&v26 + v12) * *(float *)((char *)&v26 + v12));
    v12 += 4;
  }
  while (v12 != 12);
  if (sqrtf(v13) > 0.00000011921)
  {
    uint64_t v14 = 0;
    float v15 = 0.0;
    do
    {
      float v15 = v15 + (float)(*(float *)((char *)&v26 + v14) * *(float *)((char *)&v26 + v14));
      v14 += 4;
    }
    while (v14 != 12);
    float v16 = sqrtf(v15);
    float v11 = v11 / v16;
    float v10 = a2 / v16;
    float v9 = a3 / v16;
  }
  uint64_t v17 = 0;
  float v26 = a4;
  float v27 = a5;
  float v18 = 0.0;
  float v28 = a6;
  do
  {
    float v18 = v18 + (float)(*(float *)((char *)&v26 + v17) * *(float *)((char *)&v26 + v17));
    v17 += 4;
  }
  while (v17 != 12);
  if (sqrtf(v18) > 0.00000011921)
  {
    uint64_t v19 = 0;
    float v20 = 0.0;
    do
    {
      float v20 = v20 + (float)(*(float *)((char *)&v26 + v19) * *(float *)((char *)&v26 + v19));
      v19 += 4;
    }
    while (v19 != 12);
    float v21 = sqrtf(v20);
    float v8 = a4 / v21;
    float v7 = a5 / v21;
    float v6 = a6 / v21;
  }
  *(float *)&double result = acosf(fmaxf(fminf((float)((float)(v9 * v6) + (float)(v10 * v7)) + (float)(v11 * v8), 1.0), -1.0));
  if (*(float *)&result < 0.7854)
  {
    uint64_t v23 = 0;
    float v26 = (float)(v10 * v6) - (float)(v9 * v7);
    float v27 = (float)(v9 * v8) - (float)(v11 * v6);
    float v28 = (float)(v11 * v7) - (float)(v10 * v8);
    float v24 = 0.0;
    do
    {
      float v24 = v24 + (float)(*(float *)((char *)&v26 + v23) * *(float *)((char *)&v26 + v23));
      v23 += 4;
    }
    while (v23 != 12);
    float v25 = fmaxf(fminf(sqrtf(v24), 1.0), -1.0);
    *(float *)&double result = asinf(v25);
  }
  return result;
}

uint64_t sub_100807088(void *a1, double a2, uint64_t a3, double *a4, _DWORD *a5)
{
  uint64_t v5 = (double *)a1[1];
  if (v5 == a4) {
    return 0;
  }
  float v8 = (void *)*a1;
  uint64_t v9 = (uint64_t)v5 - *(void *)*a1;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
  if (v9 < -23)
  {
    unint64_t v15 = 168 - v10;
    unint64_t v16 = 168 - v10;
    uint64_t v12 = &v8[-((168 - v10) / 0xAA)];
    uint64_t v13 = *v12;
    uint64_t v14 = (double *)(*v12 + 24 * (170 * (v16 / 0xAA) - v15) + 4056);
  }
  else
  {
    unint64_t v11 = v10 + 1;
    uint64_t v12 = &v8[(v10 + 1) / 0xAA];
    uint64_t v13 = *v12;
    uint64_t v14 = (double *)(*v12 + 24 * (v11 % 0xAA));
  }
  if (v14 != a4)
  {
    while (*v14 <= a2)
    {
      float v8 = v12;
      uint64_t v5 = v14;
      uint64_t v17 = (uint64_t)v14 - v13;
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (v17 >> 3);
      if (v17 < -23)
      {
        unint64_t v21 = 168 - v18;
        unint64_t v22 = (168 - v18) / 0xAA;
        uint64_t v12 = &v8[-v22];
        uint64_t v13 = *v12;
        uint64_t v14 = (double *)(*v12 + 24 * (170 * v22 - v21) + 4056);
      }
      else
      {
        unint64_t v19 = v18 + 1;
        unint64_t v20 = (v18 + 1) / 0xAA;
        uint64_t v12 = &v8[v20];
        uint64_t v13 = *v12;
        uint64_t v14 = (double *)(*v12 + 24 * (v19 - 170 * v20));
      }
      if (v14 == a4) {
        goto LABEL_18;
      }
    }
    *a1 = v8;
    a1[1] = v5;
    if (*v5 <= a2 && *v14 > a2)
    {
      for (unint64_t i = 0; i != 3; ++i)
      {
        double v24 = *v5;
        double v25 = *(float *)sub_1004E4930((uint64_t)(v5 + 1), i);
        double v26 = *v14;
        float v27 = (float *)sub_1004E4930((uint64_t)(v14 + 1), i);
        *(float *)&double v24 = sub_1001BF26C(v24, v25, v26, *v27, a2);
        *(_DWORD *)sub_1004E4930((uint64_t)a5, i) = LODWORD(v24);
      }
      return 1;
    }
    return 0;
  }
LABEL_18:
  *a1 = v8;
  a1[1] = v5;
  *a5 = *((_DWORD *)v5 + 2);
  a5[1] = *((_DWORD *)v5 + 3);
  a5[2] = *((_DWORD *)v5 + 4);
  return 1;
}

uint64_t sub_1008072C0(void *a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[1];
  uint64_t v8 = 170 * ((v6 - v7) >> 3) - 1;
  if (v6 == v7) {
    uint64_t v8 = 0;
  }
  unint64_t v9 = a1[5] + a1[4];
  if (v8 == v9)
  {
    sub_10080E350(a1);
    uint64_t v7 = a1[1];
    unint64_t v9 = a1[5] + a1[4];
  }
  unint64_t v10 = *(void *)(v7 + 8 * (v9 / 0xAA)) + 24 * (v9 % 0xAA);
  int v11 = *((_DWORD *)a3 + 2);
  uint64_t v12 = *a3;
  *(void *)unint64_t v10 = *a2;
  *(void *)(v10 + 8) = v12;
  *(_DWORD *)(v10 + 16) = v11;
  uint64_t v13 = a1[4];
  uint64_t v14 = a1[5] + 1;
  a1[5] = v14;
  unint64_t v15 = v13 + v14;
  uint64_t v16 = a1[1];
  uint64_t v17 = (void *)(v16 + 8 * (v15 / 0xAA));
  uint64_t v18 = *v17 + 24 * (v15 % 0xAA);
  if (a1[2] == v16) {
    uint64_t v18 = 0;
  }
  if (v18 == *v17) {
    uint64_t v18 = *(v17 - 1) + 4080;
  }
  return v18 - 24;
}

uint64_t sub_1008073BC(double *a1, double *a2)
{
  double v2 = *a1;
  if (*a1 == -1.0) {
    return 0;
  }
  double v3 = a1[1];
  if (v3 == -1.0) {
    return 0;
  }
  double v4 = a1[2];
  if (v4 == -1.0) {
    return 0;
  }
  double v5 = a1[3];
  if (v5 == -1.0) {
    return 0;
  }
  uint64_t v7 = 0;
  v9[0] = 0xC0013D70A3D70A3DLL;
  *(double *)&v9[1] = v2 * 0.01287;
  *(double *)&v9[2] = v3 * 1.742;
  *(double *)&v9[3] = v4 * 0.08599;
  *(double *)&v9[4] = v5 * -0.007325;
  double v8 = 0.0;
  do
    double v8 = v8 + *(double *)&v9[v7++];
  while (v7 != 5);
  *a2 = v8;
  return 1;
}

__n128 sub_10080747C(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 85 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10080E668(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x55)) + 48 * (v7 % 0x55);
  __n128 result = *(__n128 *)a2;
  long long v10 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 32) = v10;
  *(__n128 *)unint64_t v8 = result;
  ++a1[5];
  return result;
}

uint64_t sub_10080752C(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 34 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10080E980(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x22)) + 120 * (v7 % 0x22);
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[3];
  *(_OWORD *)(v8 + 32) = a2[2];
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)unint64_t v8 = v9;
  *(_OWORD *)(v8 + 16) = v10;
  long long v12 = a2[4];
  long long v13 = a2[5];
  long long v14 = a2[6];
  *(void *)(v8 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(v8 + 80) = v13;
  *(_OWORD *)(v8 + 96) = v14;
  *(_OWORD *)(v8 + 64) = v12;
  uint64_t v15 = a1[4];
  uint64_t v16 = a1[5] + 1;
  a1[5] = v16;
  unint64_t v17 = v15 + v16;
  uint64_t v18 = a1[1];
  unint64_t v19 = (void *)(v18 + 8 * (v17 / 0x22));
  uint64_t v20 = *v19 + 120 * (v17 % 0x22);
  if (a1[2] == v18) {
    uint64_t v20 = 0;
  }
  if (v20 == *v19) {
    uint64_t v20 = *(v19 - 1) + 4080;
  }
  return v20 - 120;
}

void sub_100807630(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = v8 - **(void **)a1;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
  if (v9 < -3071) {
    long long v11 = (unint64_t *)(v7[-((41 - v10) / 0xAA)] + 24 * (170 * ((41 - v10) / 0xAA) - (41 - v10)) + 4056);
  }
  else {
    long long v11 = (unint64_t *)(v7[(v10 + 128) / 0xAA] + 24 * ((v10 + 128) % 0xAA));
  }
  uint64_t v12 = 0;
  long long v18 = *v11;
  LODWORD(v19) = 0;
  while (v8 != *(void *)(a2 + 8))
  {
    for (unint64_t i = 0; i != 3; ++i)
    {
      float v14 = *(float *)sub_1004E4930(v8 + 8, i);
      float v15 = *(float *)(a3 + 4 * v12);
      uint64_t v16 = (float *)sub_1004E4930((uint64_t)&v18 + 8, i);
      *uint64_t v16 = *v16 + (float)(v14 * v15);
    }
    v8 += 24;
    if (v8 - *v7 == 4080)
    {
      uint64_t v17 = v7[1];
      ++v7;
      uint64_t v8 = v17;
    }
    if (++v12 == 257)
    {
      *(_OWORD *)a4 = v18;
      *(void *)(a4 + 16) = v19;
      return;
    }
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
}

float sub_1008077B8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16))
  {
    unint64_t v4 = 0;
    float v5 = 0.0;
    do
    {
      float v5 = v5 + sub_10080EC98((void *)a1, a2, v4++);
      unint64_t v6 = *(void *)(a1 + 16);
    }
    while (v4 < v6);
    if (v6) {
      return v5 + *(float *)(a1 + 40);
    }
  }
  else
  {
    float v5 = 0.0;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022CAAB0);
  }
  uint64_t v8 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Assertion failed: this->fForestSize > 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMRandomForestXGBoostedRegression.h, line 49,fForestSize is 0.", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CAAB0);
    }
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "float CMRandomForestXGBoostedRegression<22>::evaluateForest(const float (&)[NFeat]) const [NFeat = 22]", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  return v5 + *(float *)(a1 + 40);
}

uint64_t sub_10080799C(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10080F01C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(_OWORD *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5] + 1;
  a1[5] = v9;
  unint64_t v10 = v8 + v9;
  uint64_t v11 = a1[1];
  uint64_t v12 = (void *)(v11 + 8 * (v10 >> 8));
  uint64_t v13 = *v12 + 16 * v10;
  if (a1[2] == v11) {
    uint64_t v13 = 0;
  }
  if (v13 == *v12) {
    uint64_t v13 = *(v12 - 1) + 4096;
  }
  return v13 - 16;
}

BOOL sub_100807A5C(uint64_t a1, void *a2)
{
  if (a2[5] < 0x80uLL)
  {
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1022CAA70);
    }
    double v26 = qword_102419298;
    if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "[FormController] Has not received enough DeviceMotion samples", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419290 == -1) {
        goto LABEL_50;
      }
      goto LABEL_92;
    }
  }
  else
  {
    uint64_t v4 = (int *)(a1 + 2664);
    nullsub_41(a1 + 2615, a2);
    sub_1011E106C((uint64_t)buf);
    unsigned __int8 v5 = v107[16];
    if (v107[16])
    {
      unint64_t v7 = *(void **)buf;
      uint64_t v6 = *(void **)v107;
      uint64_t v8 = *(void **)&v107[8];
      if ([*(id *)v107 count])
      {
        if ([v8 count])
        {
          if ([v7 count])
          {
            [v7[0] doubleValue];
            double v10 = v9;
            [objc_msgSend(v6, "objectAtIndexedSubscript:", 0) doubleValue];
            double v12 = v11;
            [objc_msgSend(v8, "objectAtIndexedSubscript:", 0) doubleValue];
            double v13 = v12 * 0.119790152 + 0.838394225;
            double v15 = v14 * 0.10670507 + 1.08953965;
            if (v13 < v15)
            {
              v79[0] = 0;
              v79[1] = 0x3F80000000000000;
              unint64_t v16 = a2[4];
              uint64_t v17 = a2[1];
              uint64_t v18 = a2[2];
              uint64_t v19 = (uint64_t *)(v17 + 8 * (v16 / 0x49));
              unint64_t v20 = 56 * (v16 % 0x49);
              *(double *)&v79[5] = v13 + *(double *)(*v19 + v20 + 40);
              v79[6] = 0;
              v78[0] = 0;
              v78[1] = 0x3F80000000000000;
              uint64_t v21 = *v19;
              *(double *)&v78[5] = v15 + *(double *)(*v19 + v20 + 40);
              v78[6] = 0;
              if (v18 == v17)
              {
                uint64_t v22 = 0;
                uint64_t v25 = 0;
                double v24 = (void *)(v17
                               + (((unint64_t)(((a2[5] + v16) * (unsigned __int128)0x70381C0E070381C1uLL) >> 64) >> 2) & 0x1FFFFFFFFFFFFFF8));
              }
              else
              {
                uint64_t v22 = v21 + 56 * (v16 % 0x49);
                unint64_t v23 = a2[5] + v16;
                double v24 = (void *)(v17 + 8 * (v23 / 0x49));
                uint64_t v25 = *v24 + 56 * (v23 % 0x49);
              }
              LOBYTE(v80) = 0;
              float v34 = sub_1008107A8(v19, v22, v24, v25, (uint64_t)v79);
              float v36 = v34;
              uint64_t v37 = v35;
              unint64_t v38 = a2[4] + a2[5];
              uint64_t v39 = a2[1];
              uint64_t v40 = (void *)(v39 + 8 * (v38 / 0x49));
              if (a2[2] == v39) {
                uint64_t v41 = 0;
              }
              else {
                uint64_t v41 = *v40 + 56 * (v38 % 0x49);
              }
              uint64_t v42 = sub_1008108A4(v34, v35, v40, v41, (uint64_t)v78);
              uint64_t v44 = v43;
              if (v37 == v43) {
                goto LABEL_64;
              }
              float32x2_t v45 = v42;
              double v46 = 0.0;
              uint64_t v47 = v36;
              uint64_t v48 = v37;
              do
              {
                sub_1011E1200(v48, (uint64_t)buf);
                v48 += 56;
                if (v48 - *v47 == 4088)
                {
                  uint64_t v49 = v47[1];
                  ++v47;
                  uint64_t v48 = v49;
                }
                double v46 = v46 + *(float *)&v109[6];
              }
              while (v48 != v44);
              uint64_t v50 = 73 * (v45 - v36)
                  + 0x6DB6DB6DB6DB6DB7 * ((v44 - *v45) >> 3)
                  - 0x6DB6DB6DB6DB6DB7 * ((v37 - *v36) >> 3);
              if (!v50) {
LABEL_64:
              }
                double v51 = 0.0;
              else {
                double v51 = v46 / (double)(unint64_t)v50;
              }
              int v53 = *v4;
              if (*v4 != 2)
              {
                if (v53 == 1)
                {
                  if (v51 > 0.0) {
                    goto LABEL_69;
                  }
                  goto LABEL_74;
                }
                if (v53)
                {
                  char v55 = 0;
                  int v54 = 0;
                  goto LABEL_75;
                }
              }
              if (v51 < 0.0)
              {
LABEL_69:
                int v54 = 2;
                char v55 = 1;
LABEL_75:
                float v52 = v10 * 0.0446596108 + 0.251163363;
                double v64 = v52;
                uint64_t v56 = a2[1];
                unint64_t v57 = a2[4];
                uint64_t v58 = a2[5];
                double v59 = *(double *)(*(void *)(v56 + 8 * (v57 / 0x49)) + 56 * (v57 % 0x49) + 40);
                double v65 = v13 + v59;
                double v66 = v15 + v59;
                double v67 = v13;
                double v68 = v15;
                double v60 = *(double *)(a1 + 448);
                double v69 = v59 + v60;
                double v70 = v60
                    + *(double *)(*(void *)(v56 + 8 * ((v57 + v58 - 1) / 0x49)) + 56 * ((v57 + v58 - 1) % 0x49) + 40);
                double v71 = v51;
                int v72 = v54;
                unsigned __int8 v73 = v5;
                unsigned __int8 v74 = v55;
                unsigned __int8 v75 = 1;
                int v61 = *(_DWORD *)(a1 + 2668);
                int v76 = v53;
                int v77 = v61;
                sub_10080D1D8((void *)(a1 + 2616), (uint64_t)&v64);
                if (qword_102419290 != -1) {
                  dispatch_once(&qword_102419290, &stru_1022CAA70);
                }
                float v62 = qword_102419298;
                if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 67112192;
                  *(_DWORD *)&uint8_t buf[4] = v73;
                  *(_WORD *)double v107 = 2048;
                  *(double *)&v107[2] = v64;
                  *(_WORD *)&v107[10] = 2048;
                  *(double *)&v107[12] = v65;
                  __int16 v108 = 2048;
                  *(double *)double v109 = v66;
                  *(_WORD *)&v109[8] = 2048;
                  double v110 = v67;
                  __int16 v111 = 2048;
                  double v112 = v68;
                  __int16 v113 = 2048;
                  double v114 = v69;
                  __int16 v115 = 1024;
                  int v116 = v72;
                  __int16 v117 = 1024;
                  int v118 = v74;
                  __int16 v119 = 1024;
                  int v120 = v75;
                  __int16 v121 = 1024;
                  int v122 = v76;
                  __int16 v123 = 1024;
                  int v124 = v77;
                  __int16 v125 = 2048;
                  double v126 = v71;
                  _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "[FormController] GCT Prediction,isSuccessful,%d,groundContactTime,%.2f,initialContactTime,%.2f,toeOffTime,%.2f,relativeInitialContactTime,%.2f,relativeToeOffTime,%.2f,windowStartTime,%.2f,stepSide,%d,isValidSide,%d,isValidToeOff,%d,wristOrientation,%d,crownOrientation,%d, meanRotationZ, %.2f", buf, 0x6Cu);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102419290 != -1) {
                    dispatch_once(&qword_102419290, &stru_1022CAA70);
                  }
                  int v80 = 67112192;
                  int v81 = v73;
                  __int16 v82 = 2048;
                  double v83 = v64;
                  __int16 v84 = 2048;
                  double v85 = v65;
                  __int16 v86 = 2048;
                  double v87 = v66;
                  __int16 v88 = 2048;
                  double v89 = v67;
                  __int16 v90 = 2048;
                  double v91 = v68;
                  __int16 v92 = 2048;
                  double v93 = v69;
                  __int16 v94 = 1024;
                  int v95 = v72;
                  __int16 v96 = 1024;
                  int v97 = v74;
                  __int16 v98 = 1024;
                  int v99 = v75;
                  __int16 v100 = 1024;
                  int v101 = v76;
                  __int16 v102 = 1024;
                  int v103 = v77;
                  __int16 v104 = 2048;
                  double v105 = v71;
                  float32x2_t v63 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRunning::FormModels::calculateGroundContactTime(const DeviceMotionQueue &)", "%s\n", v63);
                  if (v63 != (char *)buf) {
                    free(v63);
                  }
                }
                if (sub_10080B024(a1))
                {
                  sub_101763268((uint64_t)&v64, (uint64_t)buf);
                  if (qword_10248AF88 != -1) {
                    dispatch_once(&qword_10248AF88, &stru_1022CAA90);
                  }
                  if (qword_10248AF90) {
                    operator new();
                  }
                  PB::Base::~Base((PB::Base *)buf);
                }
                return 1;
              }
LABEL_74:
              char v55 = 1;
              int v54 = 1;
              goto LABEL_75;
            }
            if (qword_102419290 != -1) {
              dispatch_once(&qword_102419290, &stru_1022CAA70);
            }
            float v32 = qword_102419298;
            if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "[FormController] Just rejected a step prediction, TO before IC prediction", buf, 2u);
            }
            BOOL result = sub_10013D1A0(115, 2);
            if (result)
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419290 == -1)
              {
LABEL_50:
                LOWORD(v80) = 0;
                unint64_t v33 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRunning::FormModels::calculateGroundContactTime(const DeviceMotionQueue &)", "%s\n", v33);
                if (v33 != (char *)buf) {
                  free(v33);
                }
                return 0;
              }
LABEL_92:
              dispatch_once(&qword_102419290, &stru_1022CAA70);
              goto LABEL_50;
            }
          }
          else
          {
            if (qword_102419290 != -1) {
              dispatch_once(&qword_102419290, &stru_1022CAA70);
            }
            float32x2_t v31 = qword_102419298;
            if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "[FormController] Ground contact time prediction failed", buf, 2u);
            }
            BOOL result = sub_10013D1A0(115, 2);
            if (result)
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419290 == -1) {
                goto LABEL_50;
              }
              goto LABEL_92;
            }
          }
        }
        else
        {
          if (qword_102419290 != -1) {
            dispatch_once(&qword_102419290, &stru_1022CAA70);
          }
          int v30 = qword_102419298;
          if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "[FormController] Toe off prediction failed", buf, 2u);
          }
          BOOL result = sub_10013D1A0(115, 2);
          if (result)
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419290 == -1) {
              goto LABEL_50;
            }
            goto LABEL_92;
          }
        }
      }
      else
      {
        if (qword_102419290 != -1) {
          dispatch_once(&qword_102419290, &stru_1022CAA70);
        }
        unint64_t v29 = qword_102419298;
        if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "[FormController] Initial contact prediction failed", buf, 2u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419290 == -1) {
            goto LABEL_50;
          }
          goto LABEL_92;
        }
      }
    }
    else
    {
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_1022CAA70);
      }
      float v28 = qword_102419298;
      if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "[FormController] GroundContactTime - Classification Failed!", buf, 2u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419290 == -1) {
          goto LABEL_50;
        }
        goto LABEL_92;
      }
    }
  }
  return result;
}

void sub_1008088CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_100808900(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5)
  {
    int v6 = 0;
LABEL_18:
    double v12 = 0.0;
    goto LABEL_19;
  }
  int v6 = 0;
  double v7 = 0.0;
  do
  {
    int v8 = *(_DWORD *)(v4 + 64);
    if (v8 >= 1)
    {
      double v9 = *(double *)(v4 + 48) - *(double *)(v4 + 8);
      if (v9 > 0.0 && (double)*(int *)(v4 + 112) * 5.12 / v9 >= 0.5)
      {
        double v7 = v7 + *(double *)(v4 + 56) / (double)v8 - *(double *)(v4 + 104);
        ++v6;
      }
    }
    v4 += 120;
  }
  while (v4 != v5);
  if (v6 <= 0) {
    goto LABEL_18;
  }
  double v10 = v7 / (double)v6;
  if (v10 <= 2.0)
  {
    if (v10 >= -2.0)
    {
      double v12 = v7 / (double)v6;
      goto LABEL_19;
    }
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1022CAA70);
    }
    unint64_t v16 = qword_102419298;
    if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      double v20 = v10;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "[FormModels] StrideLength: Below min bias offset (%.2f)", buf, 0xCu);
    }
    double v12 = -2.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419290 == -1) {
        goto LABEL_32;
      }
      goto LABEL_39;
    }
  }
  else
  {
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1022CAA70);
    }
    double v11 = qword_102419298;
    if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      double v20 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "[FormModels] StrideLength: Above max bias offset (%.2f)", buf, 0xCu);
    }
    double v12 = 2.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419290 == -1)
      {
LABEL_32:
        uint64_t v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLRunning::FormModels::feedCalibrationTracks(const std::vector<CLStrideCalEntry> &)", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
        goto LABEL_19;
      }
LABEL_39:
      dispatch_once(&qword_102419290, &stru_1022CAA70);
      goto LABEL_32;
    }
  }
LABEL_19:
  if (qword_102419290 != -1) {
    dispatch_once(&qword_102419290, &stru_1022CAA70);
  }
  double v13 = qword_102419298;
  if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_DEBUG))
  {
    double v14 = *(double *)(a1 + 2592);
    unint64_t v15 = 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 3);
    *(_DWORD *)buf = 134218752;
    double v20 = v14;
    __int16 v21 = 2048;
    double v22 = v12;
    __int16 v23 = 1026;
    int v24 = v6;
    __int16 v25 = 2050;
    unint64_t v26 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[FormModels] StrideLengthCalibration,prevStrideLengthBiasOffset,%.2f,newStrideLengthBiasOffset,%.2f,validCalibrationsCount,%{public}d,totalCalibrationTracks,%{public}lu,", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1022CAA70);
    }
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRunning::FormModels::feedCalibrationTracks(const std::vector<CLStrideCalEntry> &)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  *(double *)(a1 + 2592) = v12;
}

void sub_100808E28(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v5 = a2[5];
  if (v5)
  {
    double v46 = a4 + -3.1225;
    double v45 = a4 + -3.1225 + -5.12;
    unint64_t v8 = a2[4];
    uint64_t v9 = a2[1];
    if (a2[2] == v9)
    {
      uint64_t v10 = 0;
      uint64_t v13 = 0;
      double v12 = (void *)(v9 + 8 * ((v8 + v5) / 0x17));
    }
    else
    {
      uint64_t v10 = *(void *)(v9 + 8 * (v8 / 0x17)) + 176 * (v8 % 0x17);
      unint64_t v11 = v8 + v5;
      double v12 = (void *)(v9 + 8 * (v11 / 0x17));
      uint64_t v13 = *v12 + 176 * (v11 % 0x17);
    }
    LOBYTE(v42) = 0;
    double v14 = sub_10080FB84((void *)(v9 + 8 * (v8 / 0x17)), v10, v12, v13, &v45);
    unint64_t v16 = v14;
    unint64_t v17 = v15;
    unint64_t v18 = a2[4] + a2[5];
    uint64_t v19 = a2[1];
    double v20 = (void *)(v19 + 8 * (v18 / 0x17));
    if (a2[2] == v19) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = *v20 + 176 * (v18 % 0x17);
    }
    LOBYTE(v42) = 0;
    double v22 = sub_10080FB84(v14, v15, v20, v21, &v46);
    unint64_t v24 = v23;
    unint64_t v25 = a2[4];
    uint64_t v26 = a2[1];
    uint64_t v27 = a2[2];
    float v28 = (void *)(v26 + 8 * (v25 / 0x17));
    if (v27 == v26) {
      unint64_t v29 = 0;
    }
    else {
      unint64_t v29 = *v28 + 176 * (v25 % 0x17);
    }
    if (v29 == v24)
    {
      unint64_t v33 = &v46;
    }
    else
    {
      uint64_t v30 = v24 - *v22;
      uint64_t v31 = 0x2E8BA2E8BA2E8BA3 * (v30 >> 4);
      if (v30 < 177) {
        unint64_t v32 = v22[-((23 - v31) / 0x17uLL)] + 176 * (23 * ((23 - v31) / 0x17uLL) - (23 - v31)) + 3872;
      }
      else {
        unint64_t v32 = v22[(v31 - 1) / 0x17uLL] + 176 * ((v31 - 1) % 0x17uLL);
      }
      unint64_t v33 = (double *)(v32 + 8);
    }
    if (v27 == v26) {
      uint64_t v34 = 0;
    }
    else {
      uint64_t v34 = *v28 + 176 * (v25 % 0x17);
    }
    uint64_t v35 = *(void *)v33;
    sub_100809370(a1, v28, v34, v16, v17, v22, v24, (void *)(a1 + 248), (uint64_t)&v42);
    if ((v44 - 1) < 2)
    {
      unint64_t v37 = a2[5] + a2[4] - 1;
      unint64_t v38 = *(void *)(a2[1] + 8 * (v37 / 0x17)) + 176 * (v37 % 0x17);
      if (sub_100DE6008(*(double *)(v38 + 80), *(double *)(v38 + 72), *(float *)(a1 + 2536))) {
        int v36 = 1;
      }
      else {
        int v36 = 3;
      }
    }
    else if (v44 == 3)
    {
      int v36 = 2;
    }
    else if (v44 == 4)
    {
      int v36 = 512;
    }
    else
    {
      int v36 = 0;
    }
    double v39 = sub_100CAFB50(v43, 0.001);
    if (v39 < 0.0 || v39 > 0.25)
    {
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_1022CAA70);
      }
      uint64_t v40 = qword_102419298;
      if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        double v50 = v39;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "[FormModels] #warning: VerticalOscillation value out of range (%.2f)", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419290 != -1) {
          dispatch_once(&qword_102419290, &stru_1022CAA70);
        }
        int v47 = 134217984;
        double v48 = v39;
        uint64_t v41 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "VerticalOscillationHKResult CLRunning::FormModels::aggregatedVerticalOscillationInWindow(const StepQueue &, CFAbsoluteTime) const", "%s\n", v41);
        if (v41 != (char *)buf) {
          free(v41);
        }
      }
      v36 |= 8u;
    }
    *(_DWORD *)a3 = v36;
    *(double *)(a3 + 8) = v39;
    *(_OWORD *)(a3 + 16) = v42;
    *(void *)(a3 + 32) = v35;
  }
  else
  {
    *(_DWORD *)a3 = 32;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
  }
}

void sub_100809370(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, unint64_t a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>)
{
  unint64_t v11 = a5;
  double v12 = a4;
  if (a4 < a6 || a4 == a6 && a5 < a7)
  {
    if (a8[5])
    {
      *(void *)a9 = 0;
      *(void *)(a9 + 8) = 0;
      *(void *)(a9 + 16) = 0;
      *(_DWORD *)(a9 + 24) = 2;
      unint64_t v16 = a8[4];
      uint64_t v17 = a8[1];
      unint64_t v18 = (void *)(v17 + 8 * (v16 >> 8));
      if (a8[2] == v17) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = *v18 + 16 * v16;
      }
      if (a5 == a7)
      {
        uint64_t v48 = a9;
        *(void *)a9 = 0;
        *(void *)(a9 + 8) = 0;
LABEL_53:
        int v49 = 3;
LABEL_54:
        *(_DWORD *)(v48 + 24) = v49;
        return;
      }
      int v22 = 0;
      int v23 = 0;
      unint64_t v24 = *a4;
      char v53 = 1;
      BOOL v54 = 0;
      double v25 = 0.0;
      double v26 = 0.0;
      double v27 = 0.0;
      do
      {
        if (v11 != a3)
        {
          uint64_t v28 = v11 - v24;
          uint64_t v29 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - v24) >> 4);
          if (v28 < -175)
          {
            unint64_t v33 = 21 - v29;
            uint64_t v31 = &v12[-(v33 / 0x17)];
            uint64_t v32 = *v31 + 176 * (23 * (v33 / 0x17) - v33) + 3872;
          }
          else
          {
            unint64_t v30 = v29 + 1;
            uint64_t v31 = &v12[v30 / 0x17];
            uint64_t v32 = *v31 + 176 * (v30 % 0x17);
          }
          double v26 = sub_10080A2A4(a2, a3, v31, v32);
          double v34 = *(double *)(v11 + 72);
          double v25 = v25 + v34;
          ++v22;
          BOOL v54 = (*(unsigned char *)(v11 + 152) & 0xFD) == 1;
          int v35 = sub_100DE6008(v26, v34, *(float *)(a1 + 2536));
          unint64_t v24 = *v12;
          if (v35)
          {
            uint64_t v36 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - v24) >> 4);
            if ((uint64_t)(v11 - v24) < 177) {
              unint64_t v37 = v12[-((23 - v36) / 0x17uLL)] + 176 * (23 * ((23 - v36) / 0x17uLL) - (23 - v36)) + 3872;
            }
            else {
              unint64_t v37 = v12[(v36 - 1) / 0x17uLL] + 176 * ((v36 - 1) % 0x17uLL);
            }
            double v38 = *(double *)(v37 + 8);
            uint64_t v39 = a8[1];
            uint64_t v40 = (double *)v19;
            uint64_t v41 = v18;
LABEL_31:
            long long v42 = v40;
            while (1)
            {
              uint64_t v43 = a8[2] == v39
                  ? 0
                  : *(void *)(v39 + 8 * ((a8[5] + a8[4]) >> 8))
                  + 16 * (*((unsigned char *)a8 + 40) + *((unsigned char *)a8 + 32));
              if (v42 == (double *)v43) {
                break;
              }
              double v44 = *v42 + *(double *)(a1 + 448);
              if (v44 >= v38 && v44 < *(double *)(v11 + 8))
              {
                double v27 = v27 + v42[1];
                ++v23;
                uint64_t v19 = (uint64_t)v40;
                unint64_t v18 = v41;
              }
              v42 += 2;
              v40 += 2;
              if ((double *)(*v41 + 4096) == v40)
              {
                double v46 = (double *)v41[1];
                ++v41;
                uint64_t v40 = v46;
                goto LABEL_31;
              }
            }
            char v53 = 0;
          }
        }
        v11 += 176;
        if (v11 - v24 == 4048)
        {
          unint64_t v47 = v12[1];
          ++v12;
          unint64_t v24 = v47;
          unint64_t v11 = v47;
        }
      }
      while (v11 != a7);
      uint64_t v48 = a9;
      *(double *)a9 = v26;
      if (v22 <= 0) {
        *(void *)(a9 + 8) = 0;
      }
      else {
        *(double *)(a9 + 8) = v25 / (double)v22;
      }
      if (v53) {
        goto LABEL_53;
      }
      if (v23 <= 0)
      {
        int v49 = 2;
        goto LABEL_54;
      }
      if (v54)
      {
        int v49 = 4;
        goto LABEL_54;
      }
      *(double *)(a9 + 16) = v27 / (double)v23;
      *(_DWORD *)(a9 + 24) = 0;
    }
    else
    {
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_1022CAA70);
      }
      double v20 = qword_102419298;
      if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "[FormModels] computeMeanBetween - Not enough metrics in window", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419290 != -1) {
          dispatch_once(&qword_102419290, &stru_1022CAA70);
        }
        double v50 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "FormModels::StepRangeAggregationResult CLRunning::FormModels::stepRangeMean(StepQueue::const_iterator, StepQueue::const_iterator, StepQueue::const_iterator, const deque<Timeseries> &) const", "%s\n", v50);
        if (v50 != (char *)buf) {
          free(v50);
        }
      }
      *(void *)a9 = 0;
      *(void *)(a9 + 8) = 0;
      *(void *)(a9 + 16) = 0;
      *(_DWORD *)(a9 + 24) = 2;
    }
  }
  else
  {
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1022CAA70);
    }
    uint64_t v21 = qword_102419298;
    if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "[FormModels] computeMeanBetween - Invalid pedometer range", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_1022CAA70);
      }
      double v51 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "FormModels::StepRangeAggregationResult CLRunning::FormModels::stepRangeMean(StepQueue::const_iterator, StepQueue::const_iterator, StepQueue::const_iterator, const deque<Timeseries> &) const", "%s\n", v51);
      if (v51 != (char *)buf) {
        free(v51);
      }
    }
    *(void *)a9 = 0;
    *(void *)(a9 + 8) = 0;
    *(void *)(a9 + 16) = 0;
    *(_DWORD *)(a9 + 24) = 1;
  }
}

void sub_1008099E4(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4 = a2[5];
  if (!v4)
  {
    *(_DWORD *)a3 = 32;
    *(void *)(a3 + 48) = 0;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(unsigned char *)(a3 + 40) = 0;
    return;
  }
  double v92 = a4;
  double v91 = a4 + -5.12;
  unint64_t v5 = a2[4];
  uint64_t v6 = a2[1];
  if (a2[2] == v6)
  {
    uint64_t v7 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = ((v5 + v4) * (unsigned __int128)0x642C8590B21642C9uLL) >> 64;
    uint64_t v10 = (void *)(v6 + 8 * ((v12 + ((v5 + v4 - v12) >> 1)) >> 4));
  }
  else
  {
    uint64_t v7 = *(void *)(v6 + 8 * (v5 / 0x17)) + 176 * (v5 % 0x17);
    uint64_t v8 = ((v5 + v4) * (unsigned __int128)0x642C8590B21642C9uLL) >> 64;
    unint64_t v9 = (v8 + ((v5 + v4 - v8) >> 1)) >> 4;
    uint64_t v10 = (void *)(v6 + 8 * v9);
    uint64_t v11 = *v10 + 176 * (v5 + v4 - 23 * v9);
  }
  LOBYTE(v105[0]) = 0;
  uint64_t v13 = sub_10080FB84((void *)(v6 + 8 * (v5 / 0x17)), v7, v10, v11, &v91);
  uint64_t v15 = v13;
  uint64_t v16 = v14;
  unint64_t v17 = a2[4] + a2[5];
  uint64_t v18 = a2[1];
  uint64_t v19 = (void *)(v18 + 8 * (v17 / 0x17));
  if (a2[2] == v18) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = *v19 + 176 * (v17 % 0x17);
  }
  LOBYTE(v105[0]) = 0;
  uint64_t v21 = sub_10080FB84(v13, v14, v19, v20, &v92);
  uint64_t v87 = v22;
  int v23 = a2;
  uint64_t v24 = a2[1];
  if (a2[2] == v24) {
    unint64_t v25 = 0;
  }
  else {
    unint64_t v25 = *(void *)(v24 + 8 * (a2[4] / 0x17uLL)) + 176 * (a2[4] % 0x17uLL);
  }
  if (v25 == v22)
  {
    uint64_t v29 = &v92;
    unint64_t v30 = v15;
  }
  else
  {
    uint64_t v26 = v22 - *v21;
    uint64_t v27 = 0x2E8BA2E8BA2E8BA3 * (v26 >> 4);
    if (v26 < 177) {
      unint64_t v28 = v21[-((23 - v27) / 0x17uLL)] + 176 * (23 * ((23 - v27) / 0x17uLL) - (23 - v27)) + 3872;
    }
    else {
      unint64_t v28 = v21[(v27 - 1) / 0x17uLL] + 176 * ((v27 - 1) % 0x17uLL);
    }
    unint64_t v30 = v15;
    uint64_t v29 = (double *)(v28 + 8);
  }
  uint64_t v31 = *(void *)v29;
  if (v16 != v22)
  {
    uint64_t v84 = *(void *)v29;
    int v32 = 0;
    int v33 = 0;
    int v34 = 0;
    int v35 = 0;
    uint64_t v36 = *v30;
    double v37 = 0.0;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v86 = _Q0;
    double v43 = 0.0;
    double v44 = 0.0;
    do
    {
      uint64_t v45 = v16 - v36;
      uint64_t v46 = 0x2E8BA2E8BA2E8BA3 * ((v16 - v36) >> 4);
      if (v45 < -175)
      {
        uint64_t v50 = ((unint64_t)(21 - v46) * (unsigned __int128)0x642C8590B21642C9uLL) >> 64;
        unint64_t v51 = (v50 + ((unint64_t)(21 - v46 - v50) >> 1)) >> 4;
        uint64_t v49 = v30[-v51] + 176 * (v46 - 21 + 23 * v51) + 3872;
      }
      else
      {
        uint64_t v47 = ((unint64_t)(v46 + 1) * (unsigned __int128)0x642C8590B21642C9uLL) >> 64;
        unint64_t v48 = (v47 + ((unint64_t)(v46 + 1 - v47) >> 1)) >> 4;
        uint64_t v49 = v30[v48] + 176 * (v46 + 1 - 23 * v48);
      }
      unint64_t v52 = v23[4];
      uint64_t v53 = v23[1];
      if (v23[2] == v53)
      {
        if (!v49) {
          break;
        }
        uint64_t v55 = 0;
        BOOL v54 = (void *)(v53 + 8 * (v52 / 0x17));
      }
      else
      {
        if (v49 == *(void *)(v53 + 8 * ((v23[5] + v52) / 0x17)) + 176 * ((v23[5] + v52) % 0x17)) {
          break;
        }
        BOOL v54 = (void *)(v53 + 8 * (v52 / 0x17));
        uint64_t v55 = *v54 + 176 * (v52 % 0x17);
      }
      double v89 = v37;
      if (v45 < -351)
      {
        unint64_t v60 = 20 - v46;
        unint64_t v57 = v30;
        uint64_t v58 = &v30[-(v60 / 0x17)];
        uint64_t v59 = *v58 + 176 * (23 * (v60 / 0x17) - v60) + 3872;
      }
      else
      {
        unint64_t v56 = v46 + 2;
        unint64_t v57 = v30;
        uint64_t v58 = &v30[v56 / 0x17];
        uint64_t v59 = *v58 + 176 * (v56 % 0x17);
      }
      uint64_t v61 = *(void *)(v16 + 8);
      double v62 = *(double *)(v16 + 72);
      double v63 = sub_10080A2A4(v54, v55, v58, v59);
      long long v106 = 0u;
      long long v107 = 0u;
      memset(v105, 0, sizeof(v105));
      DWORD2(v106) = 1000;
      LODWORD(v107) = -1082130432;
      uint64_t v64 = *(void *)(a1 + 2600);
      double v65 = 0.0;
      double v66 = 0.0;
      if (*(unsigned char *)(v64 + 80))
      {
        int v67 = sub_10080A5F0((uint64_t)v105, (void *)v64, *(double *)(v16 + 8));
        int v68 = v62 > 0.0 ? v67 : 0;
        if (v68 == 1) {
          double v66 = sub_100DE6130(1.0 / v62 * 2.23693991, *(double *)&v106 * 2.23693991);
        }
      }
      if (*(_DWORD *)(v16 + 168) == 3 && v62 > 0.0)
      {
        double v69 = 0.0;
        if (v63 > 0.0)
        {
          double v69 = 1.0 / v62;
          double v65 = 1.0 / v62 / v63 + 1.0 / v62 / v63;
        }
      }
      else
      {
        double v69 = 0.0;
      }
      uint64_t v70 = sub_100DE5FAC(v63, 1.0 / v69, *(float *)(a1 + 2536));
      int v71 = v70;
      int v72 = 0;
      BOOL v73 = v63 <= 0.0;
      if (v69 <= 0.0) {
        BOOL v73 = 1;
      }
      if (!v73 && v65 > 0.0)
      {
        if (v65 < 6.0) {
          int v72 = v70;
        }
        else {
          int v72 = 0;
        }
      }
      *(_OWORD *)buf = v86;
      long long v94 = v86;
      long long v101 = 0u;
      uint64_t v96 = 0;
      long long v98 = 0u;
      double v99 = v65;
      double v100 = v69;
      uint64_t v102 = v61;
      *(double *)&long long v101 = v63;
      double v95 = v66;
      double v97 = v65;
      char v104 = v72;
      int v103 = 1;
      sub_10080A878(v70, (uint64_t *)buf);
      if ((*(unsigned char *)(v16 + 152) & 0xFD) == 1) {
        ++v34;
      }
      double v74 = -0.0;
      if (v72) {
        double v74 = v65;
      }
      v16 += 176;
      unint64_t v30 = v57;
      uint64_t v36 = *v57;
      if (v16 - *v57 == 4048)
      {
        unint64_t v30 = v57 + 1;
        uint64_t v36 = v57[1];
        uint64_t v16 = v36;
      }
      int v23 = a2;
      v32 += v71 ^ 1;
      double v43 = v43 + v63;
      double v44 = v44 + v69;
      v35 += v72;
      double v37 = v89 + v74;
      ++v33;
    }
    while (v16 != v87);
    if (v35) {
      double v75 = v37 / (double)v35;
    }
    else {
      double v75 = 0.0;
    }
    uint64_t v31 = v84;
    if (v33)
    {
      double v76 = v44 / (double)v33;
      if (v76 <= 0.0) {
        double v77 = 0.0;
      }
      else {
        double v77 = 1.0 / v76;
      }
      if (v35)
      {
        double v78 = v43 / (double)v33;
        goto LABEL_66;
      }
    }
    else
    {
      double v77 = 0.0;
      double v78 = 0.0;
      if (v35)
      {
LABEL_66:
        double v79 = 0.0;
        if (v32)
        {
          int v80 = 10;
        }
        else if (v34)
        {
          int v80 = 520;
        }
        else
        {
          int v80 = 8;
          if (v75 > 0.0 && v75 <= 6.0)
          {
            int v80 = 0;
            double v79 = v75;
            uint64_t v81 = a3;
LABEL_81:
            *(_DWORD *)uint64_t v81 = v80;
            *(void *)(v81 + 8) = 0;
            *(double *)(v81 + 16) = v79;
            *(double *)(v81 + 24) = v78;
            *(double *)(v81 + 32) = v77;
            goto LABEL_82;
          }
          double v79 = v75;
        }
        if (qword_102419290 != -1) {
          dispatch_once(&qword_102419290, &stru_1022CAA70);
        }
        __int16 v82 = qword_102419298;
        if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          *(double *)&uint8_t buf[4] = v79;
          _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_INFO, "[FormModels] #warning: StrideLength value out of range (%.2f)", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419290 != -1) {
            dispatch_once(&qword_102419290, &stru_1022CAA70);
          }
          LODWORD(v105[0]) = 134217984;
          *(double *)((char *)v105 + 4) = v79;
          double v83 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "StrideLengthHKResult CLRunning::FormModels::aggregatedStrideLengthInWindow(const StepQueue &, CFAbsoluteTime) const", "%s\n", v83);
          if (v83 != (char *)buf) {
            free(v83);
          }
        }
        uint64_t v81 = a3;
        uint64_t v31 = v84;
        goto LABEL_81;
      }
    }
  }
  uint64_t v81 = a3;
  *(_DWORD *)a3 = 1;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
LABEL_82:
  *(unsigned char *)(v81 + 40) = 0;
  *(void *)(v81 + 48) = v31;
}

double sub_10080A2A4(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  double v4 = 0.0;
  if (a4 == a2) {
    return v4;
  }
  uint64_t v8 = a4 - *a3;
  uint64_t v9 = 0x2E8BA2E8BA2E8BA3 * (v8 >> 4);
  if (v9 + 23 * (a3 - a1) - 0x2E8BA2E8BA2E8BA3 * ((a2 - *a1) >> 4) < 4) {
    return v4;
  }
  unint64_t v10 = v9 - 1;
  if (v8 <= 176)
  {
    uint64_t v14 = ((unint64_t)(23 - v9) * (unsigned __int128)0x642C8590B21642C9uLL) >> 64;
    unint64_t v15 = (v14 + ((unint64_t)(23 - v9 - v14) >> 1)) >> 4;
    double v11 = *(double *)(a3[-v15] + 176 * (v9 - 23 + 23 * v15) + 3872);
    unint64_t v12 = v9 - 3;
    goto LABEL_7;
  }
  double v11 = *(double *)(a3[v10 / 0x17] + 176 * (v10 % 0x17));
  unint64_t v12 = v9 - 3;
  if ((unint64_t)v8 < 0x211)
  {
LABEL_7:
    uint64_t v13 = (double *)(a3[-((22 - v12) / 0x17)] + 176 * (23 * ((22 - v12) / 0x17) - (22 - v12)) + 3872);
    goto LABEL_8;
  }
  uint64_t v13 = (double *)(a3[v12 / 0x17] + 176 * (v12 % 0x17));
LABEL_8:
  if (v11 - *v13 <= 10.24)
  {
    double v16 = sub_10080ADF4(a1, a2, a3, a4);
    if (v8 < 177)
    {
      uint64_t v19 = ((unint64_t)(23 - v9) * (unsigned __int128)0x642C8590B21642C9uLL) >> 64;
      unint64_t v20 = (v19 + ((unint64_t)(23 - v9 - v19) >> 1)) >> 4;
      unint64_t v17 = &a3[-v20];
      uint64_t v18 = *v17 + 176 * (v9 - 23 + 23 * v20) + 3872;
    }
    else
    {
      unint64_t v17 = &a3[v10 / 0x17];
      uint64_t v18 = *v17 + 176 * (v10 % 0x17);
    }
    double v21 = sub_10080ADF4(a1, a2, v17, v18);
    if (v8 < 353)
    {
      uint64_t v26 = ((unint64_t)(24 - v9) * (unsigned __int128)0x642C8590B21642C9uLL) >> 64;
      unint64_t v27 = (v26 + ((unint64_t)(24 - v9 - v26) >> 1)) >> 4;
      uint64_t v24 = &a3[-v27];
      uint64_t v25 = *v24 + 176 * (v9 - 24 + 23 * v27) + 3872;
    }
    else
    {
      uint64_t v22 = ((unint64_t)(v9 - 2) * (unsigned __int128)0x642C8590B21642C9uLL) >> 64;
      unint64_t v23 = (v22 + ((unint64_t)(v9 - 2 - v22) >> 1)) >> 4;
      uint64_t v24 = &a3[v23];
      uint64_t v25 = *v24 + 176 * (v9 - 2 - 23 * v23);
    }
    double v28 = sub_10080ADF4(a1, a2, v24, v25);
    if (v16 > 0.0 && v21 > 0.0 && v28 > 0.0)
    {
      if (v16 >= v21) {
        double v29 = v21;
      }
      else {
        double v29 = v16;
      }
      if (v16 <= v21) {
        double v30 = v21;
      }
      else {
        double v30 = v16;
      }
      if (v30 < v28) {
        double v28 = v30;
      }
      if (v29 <= v28) {
        return v28;
      }
      else {
        return v29;
      }
    }
  }
  return v4;
}

uint64_t sub_10080A5F0(uint64_t a1, void *a2, double a3)
{
  uint64_t v5 = (*(uint64_t (**)(void *, uint64_t))(*a2 + 24))(a2, a1);
  if ((v5 & 1) == 0)
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    DWORD2(v12) = 1000;
    LODWORD(v13) = -1082130432;
    int v6 = sub_10080AFB4(a2, &v10);
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1022CAA70);
    }
    uint64_t v7 = qword_102419298;
    if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134350080;
      double v25 = a3;
      __int16 v26 = 1026;
      int v27 = v6;
      __int16 v28 = 2050;
      uint64_t v29 = *((void *)&v10 + 1);
      __int16 v30 = 1026;
      int v31 = DWORD2(v11);
      __int16 v32 = 1026;
      int v33 = DWORD2(v12);
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[FormController] #warning: Elevation lookup failed at t=%{public}.2f. lastEntry={exists,%{public}d,startTime,%{public}.2f,gradeType,%{public}d,source,%{public}d}", buf, 0x28u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_1022CAA70);
      }
      int v14 = 134350080;
      double v15 = a3;
      __int16 v16 = 1026;
      int v17 = v6;
      __int16 v18 = 2050;
      uint64_t v19 = *((void *)&v10 + 1);
      __int16 v20 = 1026;
      int v21 = DWORD2(v11);
      __int16 v22 = 1026;
      int v23 = DWORD2(v12);
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLRunning::FormModels::elevationLookup(CFAbsoluteTime, CLElevationChangeEntry &, const CLNatalieInput<CLElevationChangeEntry> &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  return v5;
}

void sub_10080A878(uint64_t a1, uint64_t *a2)
{
  if (qword_102419290 != -1) {
    dispatch_once(&qword_102419290, &stru_1022CAA70);
  }
  double v3 = qword_102419298;
  if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = a2[12];
    uint64_t v4 = a2[13];
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    uint64_t v8 = a2[2];
    uint64_t v9 = a2[3];
    uint64_t v10 = a2[7];
    uint64_t v11 = a2[8];
    uint64_t v12 = a2[4];
    uint64_t v14 = a2[10];
    uint64_t v13 = a2[11];
    uint64_t v15 = a2[9];
    *(_DWORD *)buf = 134351872;
    uint64_t v18 = v5;
    __int16 v19 = 2050;
    uint64_t v20 = v4;
    __int16 v21 = 2048;
    uint64_t v22 = v10;
    __int16 v23 = 2048;
    uint64_t v24 = v6;
    __int16 v25 = 2048;
    uint64_t v26 = v7;
    __int16 v27 = 2048;
    uint64_t v28 = v8;
    __int16 v29 = 2048;
    uint64_t v30 = v9;
    __int16 v31 = 2048;
    uint64_t v32 = v15;
    __int16 v33 = 2048;
    uint64_t v34 = v11;
    __int16 v35 = 2048;
    uint64_t v36 = v12;
    __int16 v37 = 2048;
    uint64_t v38 = v13;
    __int16 v39 = 2048;
    uint64_t v40 = v14;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[FormModels] StrideLengthEvent,startTime,%{public}.2f,endTime,%{public}.2f,strideLengthFormBasedUncal,%.3f,heightCM,%.2f,horizontalAccelMagnitudeMeanSqrt,%.2f,rotationRateMagnitudeMin,%.2f,rotationRateGravityProjectionMax,%.2f,strideLengthSpeedBased,%.3f,strideLengthFormBasedCalibrated,%.3f,grade,%.2f,cadence,%.2f,speed,%.2f", buf, 0x7Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1022CAA70);
    }
    __int16 v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRunning::FormModels::logStrideLengthResult(const StrideLengthResult &) const", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
}

float sub_10080AB20(uint64_t *a1, float32x2_t *a2, uint64_t a3)
{
  int v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v4 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = (float32x2_t *)(v4 + 12 * v7);
      float v9 = v8[1].f32[0] - a2[1].f32[0];
      uint64_t v18 = (_DWORD *)vsub_f32(*v8, *a2);
      *(float *)&uint64_t v19 = v9;
      sub_10080FCC8((uint64_t)&v18, (uint64_t)v20);
      for (unint64_t i = 0; i != 9; ++i)
        *((float *)&v15 + i) = sub_10080FD50((uint64_t)v20, i) + *((float *)&v15 + i);
      ++v7;
      uint64_t v4 = *a1;
    }
    while (v7 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2));
  }
  v20[0] = v15;
  v20[1] = v16;
  int v21 = v17;
  sub_10080FF2C((uint64_t)v20, a3);
  v22[0] = v11;
  v22[1] = v12;
  v22[2] = v13;
  uint64_t v18 = v22;
  uint64_t v19 = a3;
  sub_1008104F0((uint64_t *)&v18, 0, 1uLL);
  sub_1008104F0((uint64_t *)&v18, 0, 2uLL);
  sub_1008104F0((uint64_t *)&v18, 1uLL, 2uLL);
  return *(float *)v22;
}

void sub_10080AC6C(uint64_t a1)
{
  double v1 = __chkstk_darwin(a1);
  double v3 = v2;
  double v17 = v1 * 0.02;
  double v5 = v4 * 0.02;
  bzero(v19, 0x808uLL);
  bzero(v18, 0x808uLL);
  uint64_t v6 = 0;
  double v7 = 0.0;
  double v8 = 0.0;
  do
  {
    double v9 = (float)((float)(cosf((float)(int)v6 * 0.024544) * -0.46) + 0.54);
    double v10 = (double)((int)v6 - 128);
    sub_10126DDC4(v17 * v10);
    double v12 = v11 * v9;
    v19[v6] = v12;
    double v8 = v8 + v12;
    sub_10126DDC4(v5 * v10);
    double v14 = v13 * v9;
    v18[v6] = v14;
    double v7 = v7 + v14;
    ++v6;
  }
  while (v6 != 257);
  bzero(v3, 0x404uLL);
  for (uint64_t i = 0; i != 257; ++i)
  {
    float v16 = v18[i] / v7 - v19[i] / v8;
    *((float *)v3 + i) = v16;
  }
}

double sub_10080ADF4(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  double result = 0.0;
  if (a4 != a2)
  {
    uint64_t v5 = a4 - *a3;
    uint64_t v6 = 0x2E8BA2E8BA2E8BA3 * (v5 >> 4);
    if (v6 + 23 * (a3 - a1) - 0x2E8BA2E8BA2E8BA3 * ((a2 - *a1) >> 4) >= 2)
    {
      if (v5 < 177)
      {
        unint64_t v11 = 23 - v6;
        double v8 = &a3[-(v11 / 0x17)];
        uint64_t v9 = *v8;
        unint64_t v10 = *v8 + 176 * (23 * (v11 / 0x17) - v11) + 3872;
      }
      else
      {
        unint64_t v7 = v6 - 1;
        double v8 = &a3[v7 / 0x17];
        uint64_t v9 = *v8;
        unint64_t v10 = *v8 + 176 * (v7 % 0x17);
      }
      uint64_t v12 = v10 - v9;
      uint64_t v13 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v10 - v9) >> 4);
      if (v12 < 177) {
        unint64_t v14 = v8[-((23 - v13) / 0x17uLL)] + 176 * (23 * ((23 - v13) / 0x17uLL) - (23 - v13)) + 3872;
      }
      else {
        unint64_t v14 = v8[(v13 - 1) / 0x17uLL] + 176 * ((v13 - 1) % 0x17uLL);
      }
      double v15 = *(double *)(v10 + 88) - *(double *)(v14 + 88);
      if (v15 > 0.0) {
        return (double)(*(_DWORD *)(v10 + 24) - *(_DWORD *)(v14 + 24)) / v15;
      }
    }
  }
  return result;
}

uint64_t sub_10080AFB4(void *a1, _OWORD *a2)
{
  uint64_t v2 = a1[4];
  if (a1[5] == v2) {
    return 0;
  }
  unint64_t v3 = a1[7] + a1[8];
  double v4 = (void *)(v2 + 8 * (v3 >> 6));
  uint64_t v5 = v3 & 0x3F;
  uint64_t v6 = *v4 + (v5 << 6);
  if (v6 == *(void *)(v2 + ((a1[7] >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((a1[7] & 0x3FLL) << 6)) {
    return 0;
  }
  if (!v5) {
    uint64_t v6 = *(v4 - 1) + 4096;
  }
  long long v7 = *(_OWORD *)(v6 - 64);
  long long v8 = *(_OWORD *)(v6 - 48);
  long long v9 = *(_OWORD *)(v6 - 16);
  a2[2] = *(_OWORD *)(v6 - 32);
  a2[3] = v9;
  *a2 = v7;
  a2[1] = v8;
  return 1;
}

uint64_t sub_10080B024(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 2613))
  {
    uint64_t v2 = sub_1000D3E78();
    sub_10006B564(v2, &v4);
    sub_1000D2988(v4, "MotionLoggerLogGaitEvents", (BOOL *)(a1 + 2614));
    if (v5) {
      sub_1000DB0A0(v5);
    }
    *(unsigned char *)(a1 + 2613) = 1;
  }
  return *(unsigned __int8 *)(a1 + 2614);
}

void sub_10080B090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10080B0A8(uint64_t result, uint64_t a2, _DWORD *a3, void *a4)
{
  int v5 = *(_DWORD *)(a2 + 24);
  if ((v5 - 1) < 2)
  {
    *a3 |= 1u;
    unint64_t v7 = a4[5] + a4[4] - 1;
    unint64_t v8 = *(void *)(a4[1] + 8 * (v7 / 0x17)) + 176 * (v7 % 0x17);
    double result = sub_100DE6008(*(double *)(v8 + 80), *(double *)(v8 + 72), *(float *)(result + 2536));
    if (result) {
      return result;
    }
  }
  else if (v5 != 3)
  {
    if (v5 != 4) {
      return result;
    }
    int v6 = 512;
    goto LABEL_7;
  }
  int v6 = 2;
LABEL_7:
  *a3 |= v6;
  return result;
}

uint64_t sub_10080B164@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v5 = a2[5];
  if (v5)
  {
    unint64_t v7 = (void *)result;
    double v84 = a4;
    double v83 = a4 + -5.12;
    unint64_t v8 = a2[4];
    uint64_t v9 = a2[1];
    if (a2[2] == v9)
    {
      uint64_t v10 = 0;
      uint64_t v13 = 0;
      uint64_t v12 = (void *)(v9 + 8 * ((v8 + v5) / 0x17));
    }
    else
    {
      uint64_t v10 = *(void *)(v9 + 8 * (v8 / 0x17)) + 176 * (v8 % 0x17);
      unint64_t v11 = v8 + v5;
      uint64_t v12 = (void *)(v9 + 8 * (v11 / 0x17));
      uint64_t v13 = *v12 + 176 * (v11 % 0x17);
    }
    LOBYTE(v79) = 0;
    unint64_t v14 = sub_10080FB84((void *)(v9 + 8 * (v8 / 0x17)), v10, v12, v13, &v83);
    float v16 = v14;
    unint64_t v17 = v15;
    unint64_t v18 = a2[4] + a2[5];
    uint64_t v19 = a2[1];
    uint64_t v20 = (void *)(v19 + 8 * (v18 / 0x17));
    if (a2[2] == v19) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = *v20 + 176 * (v18 % 0x17);
    }
    LOBYTE(v79) = 0;
    uint64_t v22 = sub_10080FB84(v14, v15, v20, v21, &v84);
    uint64_t v24 = v23 - *v22;
    uint64_t v25 = 0x2E8BA2E8BA2E8BA3 * (v24 >> 4);
    if (v24 < -175)
    {
      unint64_t v29 = 21 - v25;
      __int16 v27 = &v22[-(v29 / 0x17)];
      unint64_t v28 = *v27 + 176 * (23 * (v29 / 0x17) - v29) + 3872;
    }
    else
    {
      unint64_t v26 = v25 + 1;
      __int16 v27 = &v22[v26 / 0x17];
      unint64_t v28 = *v27 + 176 * (v26 % 0x17);
    }
    long long v80 = 0u;
    memset(v81, 0, 28);
    long long v78 = 0u;
    long long v79 = 0u;
    long long v82 = 0uLL;
    memset(v77, 0, sizeof(v77));
    long long v76 = 0u;
    memset(v75, 0, sizeof(v75));
    uint64_t v30 = v7[328];
    unint64_t v31 = v7[331];
    uint64_t v32 = (void *)(v30 + 8 * (v31 / 0x33));
    if (v7[329] == v30)
    {
      uint64_t v33 = 0;
      uint64_t v36 = 0;
      __int16 v35 = (void *)(v30 + 8 * ((v7[332] + v31) / 0x33));
    }
    else
    {
      uint64_t v33 = *(void *)(v30 + 8 * (v31 / 0x33)) + 80 * (v31 % 0x33);
      unint64_t v34 = v7[332] + v31;
      __int16 v35 = (void *)(v30 + 8 * (v34 / 0x33));
      uint64_t v36 = *v35 + 80 * (v34 % 0x33);
    }
    LOBYTE(v85) = 0;
    __int16 v37 = sub_100810614(v32, v33, v35, v36, &v83);
    __int16 v39 = v37;
    unint64_t v40 = v38;
    unint64_t v41 = v7[331] + v7[332];
    uint64_t v42 = v7[328];
    double v43 = (void *)(v42 + 8 * (v41 / 0x33));
    if (v7[329] == v42) {
      uint64_t v44 = 0;
    }
    else {
      uint64_t v44 = *v43 + 80 * (v41 % 0x33);
    }
    LOBYTE(v85) = 0;
    uint64_t v45 = sub_100810614(v37, v38, v43, v44, &v84);
    if (sub_10080BB80((uint64_t)v7, v77, v75, v39, v40, v45, v46))
    {
      unint64_t v47 = a2[4];
      uint64_t v48 = a2[1];
      uint64_t v49 = (void *)(v48 + 8 * (v47 / 0x17));
      if (a2[2] == v48) {
        uint64_t v50 = 0;
      }
      else {
        uint64_t v50 = *v49 + 176 * (v47 % 0x17);
      }
      sub_100809370((uint64_t)v7, v49, v50, v16, v17, v27, v28, v77, (uint64_t)v73);
      unint64_t v52 = a2[4];
      uint64_t v53 = a2[1];
      BOOL v54 = (void *)(v53 + 8 * (v52 / 0x17));
      if (a2[2] == v53) {
        uint64_t v55 = 0;
      }
      else {
        uint64_t v55 = *v54 + 176 * (v52 % 0x17);
      }
      sub_100809370((uint64_t)v7, v54, v55, v16, v17, v27, v28, v75, (uint64_t)v70);
      sub_10080B0A8((uint64_t)v7, (uint64_t)v73, &v81[24], a2);
      sub_10080B0A8((uint64_t)v7, (uint64_t)v70, &v81[24], a2);
      if ((v81[24] & 1) == 0)
      {
        double v56 = v74;
        double v57 = v72;
        double v58 = (v74 + v72) * 0.5;
        double v59 = v74 / (v74 + v72);
        *(void *)&long long v82 = v73[0];
        *((double *)&v82 + 1) = v71;
        double v60 = v72 / (v74 + v72);
        if (*((void *)&v78 + 1) | *((void *)&v76 + 1))
        {
          double v62 = 0.0;
          if (v71 > 0.0) {
            double v62 = 1.0 / v71;
          }
          if (v62 >= 4.0 || v58 >= 0.15 || v58 <= 0.05 || v62 <= 0.0)
          {
            if (v58 <= 0.4 && v58 > 0.05) {
              int v61 = 0;
            }
            else {
              int v61 = 8;
            }
          }
          else
          {
            int v61 = 256;
          }
        }
        else
        {
          int v61 = 1;
        }
        *((double *)&v79 + 1) = v74;
        *(double *)&long long v80 = v72;
        *((double *)&v80 + 1) = v74 / (v74 + v72);
        *(double *)uint64_t v81 = v72 / (v74 + v72);
        *(double *)&v81[8] = v83;
        *(double *)&v81[16] = v84;
        *(_DWORD *)&v81[24] = v61;
        double v64 = sub_100CAFB50(v58, 0.001);
        *(double *)&long long v79 = v64;
        if (qword_102419290 != -1) {
          dispatch_once(&qword_102419290, &stru_1022CAA70);
        }
        double v65 = qword_102419298;
        if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67241472;
          int v98 = v61;
          __int16 v99 = 2048;
          double v100 = v56;
          __int16 v101 = 2048;
          double v102 = v57;
          __int16 v103 = 2048;
          double v104 = v59;
          __int16 v105 = 2048;
          double v106 = v60;
          __int16 v107 = 2048;
          double v108 = v64;
          _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "[FormController] CLGaitEvents::HealthKitResult, groundContactTimeRejectionStatus,%{public}d,leftGroundContactTime,%.2f,rightGroundContactTime,%.2f,leftGroundContactTimePercentage,%.2f,rightGroundContactTimePercentage,%.2f,groundContactTime,%.2f", buf, 0x3Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419290 != -1) {
            dispatch_once(&qword_102419290, &stru_1022CAA70);
          }
          int v85 = 67241472;
          int v86 = v61;
          __int16 v87 = 2048;
          double v88 = v56;
          __int16 v89 = 2048;
          double v90 = v57;
          __int16 v91 = 2048;
          double v92 = v59;
          __int16 v93 = 2048;
          double v94 = v60;
          __int16 v95 = 2048;
          double v96 = v64;
          double v69 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "GroundContactTimeHKResult CLRunning::FormModels::aggregatedGroundContactTimeInWindow(const StepQueue &, CFAbsoluteTime)", "%s\n", v69);
          if (v69 != (char *)buf) {
            free(v69);
          }
        }
        if (sub_10080B024((uint64_t)v7))
        {
          sub_101763338(&v79, (uint64_t)buf);
          if (qword_10248AF88 != -1) {
            dispatch_once(&qword_10248AF88, &stru_1022CAA90);
          }
          if (qword_10248AF90) {
            operator new();
          }
          PB::Base::~Base((PB::Base *)buf);
        }
      }
      long long v66 = *(_OWORD *)&v81[16];
      *(_OWORD *)(a3 + 32) = *(_OWORD *)v81;
      *(_OWORD *)(a3 + 48) = v66;
      *(_OWORD *)(a3 + 64) = v82;
      long long v67 = v80;
      *(_OWORD *)a3 = v79;
      *(_OWORD *)(a3 + 16) = v67;
    }
    else
    {
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_1022CAA70);
      }
      unint64_t v51 = qword_102419298;
      if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "[FormController] step aggregation failed", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419290 != -1) {
          dispatch_once(&qword_102419290, &stru_1022CAA70);
        }
        LOWORD(v85) = 0;
        int v68 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "GroundContactTimeHKResult CLRunning::FormModels::aggregatedGroundContactTimeInWindow(const StepQueue &, CFAbsoluteTime)", "%s\n", v68);
        if (v68 != (char *)buf) {
          free(v68);
        }
      }
      *(void *)(a3 + 48) = 0;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_DWORD *)(a3 + 56) = 1;
      *(void *)(a3 + 64) = 0;
      *(void *)(a3 + 72) = 0;
    }
    sub_1000D80C4(v75);
    return sub_1000D80C4(v77);
  }
  else
  {
    *(void *)(a3 + 48) = 0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_DWORD *)(a3 + 56) = 32;
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
  }
  return result;
}

void sub_10080BB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_1000D80C4((uint64_t *)va);
  sub_1000D80C4(va1);
  _Unwind_Resume(a1);
}

BOOL sub_10080BB80(uint64_t a1, void *a2, void *a3, void *a4, unint64_t a5, void *a6, uint64_t *a7)
{
  if (a7 == (uint64_t *)a5
    || 51 * (a6 - a4)
     - 0x3333333333333333 * (((uint64_t)a7 - *a6) >> 4)
     + 0x3333333333333333 * ((uint64_t)(a5 - *a4) >> 4) <= 3)
  {
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1022CAA70);
    }
    unint64_t v7 = qword_102419298;
    if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[FormController] Insufficient number of samples to aggregate", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_1022CAA70);
      }
      LOWORD(__p) = 0;
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRunning::FormModels::aggregateEventsOverStride(std::deque<Timeseries> &, std::deque<Timeseries> &, const std::deque<CLGaitEvents::LoggingModelOutput>::const_iterator, const std::deque<CLGaitEvents::LoggingModelOutput>::const_iterator)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
      return 0;
    }
    return result;
  }
  BOOL v73 = 0;
  double v74 = 0;
  uint64_t v75 = 0;
  uint64_t v70 = 0;
  double v71 = 0;
  uint64_t v72 = 0;
  BOOL v61 = sub_10080C688((void *)a1, 0, (char **)&v73, &v70, a4, a5, a6, a7);
  if (!v61)
  {
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1022CAA70);
    }
    double v59 = qword_102419298;
    if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "[FormController] Cannot process candidates for aggregation", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_1022CAA70);
      }
      LOWORD(__p) = 0;
      double v60 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRunning::FormModels::aggregateEventsOverStride(std::deque<Timeseries> &, std::deque<Timeseries> &, const std::deque<CLGaitEvents::LoggingModelOutput>::const_iterator, const std::deque<CLGaitEvents::LoggingModelOutput>::const_iterator)", "%s\n", v60);
      if (v60 != (char *)buf) {
        free(v60);
      }
    }
LABEL_104:
    unint64_t v11 = v70;
    goto LABEL_105;
  }
  unint64_t v11 = v70;
  double v63 = v71;
  if (v70 != v71)
  {
    do
    {
      int v12 = *(_DWORD *)v11;
      int v13 = *((_DWORD *)v11 + 2);
      uint64_t v14 = (char *)v73 + 48 * *(int *)v11;
      uint64_t v15 = *((int *)v11 + 1) + 1;
      uint64_t v16 = (char *)v73 + 48 * v15;
      uint64_t v17 = (double *)(v74 - 48);
      if (v16 < v74) {
        uint64_t v17 = (double *)((char *)v73 + 48 * v15);
      }
      double v18 = v17[3];
      std::string __p = 0;
      *(void *)long long v80 = 0;
      *(void *)&v80[8] = 0;
      double v65 = 0;
      uint64_t v66 = 0;
      v67[0] = 0;
      long long v76 = 0;
      double v77 = 0;
      unint64_t v78 = 0;
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v14) >> 4);
      sub_10017C3FC(&__p, v19);
      sub_10017C3FC(&v65, v19);
      sub_10017C3FC(&v76, v19);
      if (v12 != v15)
      {
        do
        {
          uint64_t v20 = *(char **)v80;
          if (*(void *)v80 >= *(void *)&v80[8])
          {
            uint64_t v22 = (char *)__p;
            uint64_t v23 = (uint64_t)(*(void *)v80 - (void)__p) >> 3;
            unint64_t v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 61) {
              goto LABEL_115;
            }
            uint64_t v25 = *(void *)&v80[8] - (void)__p;
            if ((uint64_t)(*(void *)&v80[8] - (void)__p) >> 2 > v24) {
              unint64_t v24 = v25 >> 2;
            }
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v26 = v24;
            }
            if (v26)
            {
              __int16 v27 = (char *)sub_1000DA54C((uint64_t)&v80[8], v26);
              uint64_t v22 = (char *)__p;
              uint64_t v20 = *(char **)v80;
            }
            else
            {
              __int16 v27 = 0;
            }
            unint64_t v28 = &v27[8 * v23];
            *(void *)unint64_t v28 = *(void *)v14;
            uint64_t v21 = v28 + 8;
            while (v20 != v22)
            {
              uint64_t v29 = *((void *)v20 - 1);
              v20 -= 8;
              *((void *)v28 - 1) = v29;
              v28 -= 8;
            }
            std::string __p = v28;
            *(void *)long long v80 = v21;
            *(void *)&v80[8] = &v27[8 * v26];
            if (v22) {
              operator delete(v22);
            }
          }
          else
          {
            **(void **)long long v80 = *(void *)v14;
            uint64_t v21 = v20 + 8;
          }
          *(void *)long long v80 = v21;
          uint64_t v30 = (void *)v66;
          if ((unint64_t)v66 >= v67[0])
          {
            uint64_t v32 = v65;
            uint64_t v33 = (v66 - (uint64_t)v65) >> 3;
            unint64_t v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 61) {
              goto LABEL_115;
            }
            uint64_t v35 = v67[0] - (void)v65;
            if ((uint64_t)(v67[0] - (void)v65) >> 2 > v34) {
              unint64_t v34 = v35 >> 2;
            }
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v36 = v34;
            }
            if (v36)
            {
              __int16 v37 = (char *)sub_1000DA54C((uint64_t)v67, v36);
              uint64_t v32 = v65;
              uint64_t v30 = (void *)v66;
            }
            else
            {
              __int16 v37 = 0;
            }
            uint64_t v38 = &v37[8 * v33];
            *(void *)uint64_t v38 = *((void *)v14 + 1);
            unint64_t v31 = v38 + 8;
            while (v30 != v32)
            {
              uint64_t v39 = *--v30;
              *((void *)v38 - 1) = v39;
              v38 -= 8;
            }
            double v65 = v38;
            uint64_t v66 = (uint64_t)v31;
            v67[0] = &v37[8 * v36];
            if (v32) {
              operator delete(v32);
            }
          }
          else
          {
            *(void *)uint64_t v66 = *((void *)v14 + 1);
            unint64_t v31 = v30 + 1;
          }
          uint64_t v66 = (uint64_t)v31;
          unint64_t v40 = v77;
          if ((unint64_t)v77 >= v78)
          {
            uint64_t v42 = v76;
            uint64_t v43 = ((char *)v77 - (unsigned char *)v76) >> 3;
            unint64_t v44 = v43 + 1;
            if ((unint64_t)(v43 + 1) >> 61) {
LABEL_115:
            }
              sub_1001D7FD4();
            uint64_t v45 = v78 - (void)v76;
            if ((uint64_t)(v78 - (void)v76) >> 2 > v44) {
              unint64_t v44 = v45 >> 2;
            }
            if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v46 = v44;
            }
            if (v46)
            {
              unint64_t v47 = (char *)sub_1000DA54C((uint64_t)&v78, v46);
              uint64_t v42 = v76;
              unint64_t v40 = v77;
            }
            else
            {
              unint64_t v47 = 0;
            }
            uint64_t v48 = &v47[8 * v43];
            *(void *)uint64_t v48 = *((void *)v14 + 2);
            unint64_t v41 = v48 + 8;
            while (v40 != v42)
            {
              uint64_t v49 = *--v40;
              *((void *)v48 - 1) = v49;
              v48 -= 8;
            }
            long long v76 = v48;
            double v77 = v41;
            unint64_t v78 = (unint64_t)&v47[8 * v46];
            if (v42) {
              operator delete(v42);
            }
          }
          else
          {
            void *v77 = *((void *)v14 + 2);
            unint64_t v41 = v40 + 1;
          }
          double v77 = v41;
          v14 += 48;
        }
        while (v14 != v16);
      }
      *(double *)buf = 0.0;
      *(void *)int v86 = 0;
      *(void *)&v86[8] = 0;
      sub_1001DD364(buf, __p, *(uint64_t *)v80, (uint64_t)(*(void *)v80 - (void)__p) >> 3);
      double v51 = sub_10080D2CC(*(double **)buf, *(double **)v86, v50);
      if (*(double *)buf != 0.0)
      {
        *(void *)int v86 = *(void *)buf;
        operator delete(*(void **)buf);
      }
      *(double *)buf = 0.0;
      *(void *)int v86 = 0;
      *(void *)&v86[8] = 0;
      sub_1001DD364(buf, v65, v66, (v66 - (uint64_t)v65) >> 3);
      double v53 = sub_10080D2CC(*(double **)buf, *(double **)v86, v52);
      if (*(double *)buf != 0.0)
      {
        *(void *)int v86 = *(void *)buf;
        operator delete(*(void **)buf);
      }
      *(double *)buf = 0.0;
      *(void *)int v86 = 0;
      *(void *)&v86[8] = 0;
      sub_1001DD364(buf, v76, (uint64_t)v77, ((char *)v77 - (unsigned char *)v76) >> 3);
      double v55 = sub_10080D2CC(*(double **)buf, *(double **)v86, v54);
      if (*(double *)buf != 0.0)
      {
        *(void *)int v86 = *(void *)buf;
        operator delete(*(void **)buf);
      }
      if (v76)
      {
        double v77 = v76;
        operator delete(v76);
      }
      if (v65)
      {
        uint64_t v66 = (uint64_t)v65;
        operator delete(v65);
      }
      if (__p)
      {
        *(void *)long long v80 = __p;
        operator delete(__p);
      }
      double v65 = *(void **)&v55;
      uint64_t v66 = *(void *)&v51;
      *(double *)long long v67 = v53;
      *(double *)&v67[1] = v18;
      int v68 = v13;
      unsigned __int8 v69 = 1;
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_1022CAA70);
      }
      double v56 = qword_102419298;
      if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67110144;
        *(_DWORD *)&uint8_t buf[4] = v69;
        *(_WORD *)int v86 = 2048;
        *(void *)&v86[2] = v65;
        *(_WORD *)&v86[10] = 2048;
        *(void *)&v86[12] = v66;
        __int16 v87 = 2048;
        uint64_t v88 = v67[0];
        __int16 v89 = 1024;
        int v90 = v68;
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "[FormController] AggregatedGCT,isSuccessful,%d,groundContactTime,%.2f,initialContactTime,%.2f,toeOffTime,%.2f,stepSide,%d.", buf, 0x2Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419290 != -1) {
          dispatch_once(&qword_102419290, &stru_1022CAA70);
        }
        LODWORD(__p) = 67110144;
        HIDWORD(__p) = v69;
        *(_WORD *)long long v80 = 2048;
        *(void *)&v80[2] = v65;
        *(_WORD *)&v80[10] = 2048;
        *(void *)&v80[12] = v66;
        __int16 v81 = 2048;
        uint64_t v82 = v67[0];
        __int16 v83 = 1024;
        int v84 = v68;
        double v58 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRunning::FormModels::aggregateEventsOverStride(std::deque<Timeseries> &, std::deque<Timeseries> &, const std::deque<CLGaitEvents::LoggingModelOutput>::const_iterator, const std::deque<CLGaitEvents::LoggingModelOutput>::const_iterator)", "%s\n", v58);
        if (v58 != (char *)buf) {
          free(v58);
        }
      }
      if (sub_10080B024(a1))
      {
        sub_1017632E8((uint64_t)&v65, (uint64_t)buf);
        if (qword_10248AF88 != -1) {
          dispatch_once(&qword_10248AF88, &stru_1022CAA90);
        }
        if (qword_10248AF90) {
          operator new();
        }
        PB::Base::~Base((PB::Base *)buf);
      }
      *(double *)buf = v18 - *(double *)(a1 + 448);
      double v57 = a2;
      if (v68 == 2 || (double v57 = a3, v68 == 1)) {
        sub_10080D114(v57, buf, (uint64_t *)&v65);
      }
      v11 += 12;
    }
    while (v11 != v63);
    goto LABEL_104;
  }
LABEL_105:
  if (v11)
  {
    double v71 = v11;
    operator delete(v11);
  }
  if (v73)
  {
    double v74 = (char *)v73;
    operator delete(v73);
  }
  return v61;
}

void sub_10080C5B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10080C688(void *a1, int a2, char **a3, char **a4, void *a5, unint64_t a6, void *a7, uint64_t *a8)
{
  if (a8 == (uint64_t *)a6)
  {
    LODWORD(v8) = 0;
    goto LABEL_80;
  }
  uint64_t v8 = 51 * (a7 - a5)
     - 0x3333333333333333 * (((uint64_t)a8 - *a7) >> 4)
     + 0x3333333333333333 * ((uint64_t)(a6 - *a5) >> 4);
  if ((v8 - 1) >= 0x440)
  {
LABEL_80:
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1022CAA70);
    }
    long long v79 = qword_102419298;
    if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      int v137 = v8;
      _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_ERROR, "[FormController] GCT Buffer Overload - numSamples: %d", buf, 8u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_1022CAA70);
      }
      int v122 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRunning::FormModels::processCandidates(AggregateType, std::vector<CLGaitEvents::PredictionCandidate> &, std::vector<CLGaitEvents::AggregationCandidate> &, const std::deque<CLGaitEvents::LoggingModelOutput>::const_iterator, const std::deque<CLGaitEvents::LoggingModelOutput>::const_iterator)", "%s\n", v122);
      if (v122 != (char *)buf) {
        free(v122);
      }
      return 0;
    }
    return result;
  }
  int v123 = v8 - 1;
  sub_10080D040((void **)a3, 51 * (a7 - a5)- 858993459 * (((uint64_t)a8 - *a7) >> 4)+ 858993459 * ((uint64_t)(a6 - *a5) >> 4));
  int v13 = a5;
  unint64_t v12 = a6;
  uint64_t v15 = a7;
  uint64_t v14 = a8;
  int v16 = 0;
  int v132 = 0;
  uint64_t v17 = 0;
  int v18 = 0;
  uint64_t v125 = (uint64_t)(a4 + 2);
  uint64_t v126 = (uint64_t)(a3 + 2);
  unint64_t v19 = a5;
  unint64_t v20 = a6;
  int v21 = 1;
  unint64_t v133 = a4;
LABEL_4:
  uint64_t v127 = 51 * (v19 - v13);
  while (1)
  {
    int v22 = v21;
    uint64_t v23 = (uint64_t)v14 - *v15;
    unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * (v23 >> 4);
    if (v23 < 81)
    {
      unint64_t v29 = 51 - v24;
      unint64_t v30 = (51 - v24) / 0x33;
      __int16 v27 = &v15[-v30];
      unint64_t v28 = *v27 + 80 * (51 * v30 - v29) + 4000;
    }
    else
    {
      unint64_t v25 = v24 - 1;
      unint64_t v26 = (v24 - 1) / 0x33;
      __int16 v27 = &v15[v26];
      unint64_t v28 = *v27 + 80 * (v25 - 51 * v26);
    }
    if (v19 >= v27 && (v19 != v27 || v20 >= v28)) {
      break;
    }
    uint64_t v32 = v20 - *v19;
    unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * (v32 >> 4);
    if (v32 < -79) {
      unint64_t v34 = (double *)(v19[-((49 - v33) / 0x33)] + 80 * (v33 - 49 + 51 * ((49 - v33) / 0x33)) + 4000);
    }
    else {
      unint64_t v34 = (double *)(v19[(v33 + 1) / 0x33] + 80 * ((v33 + 1) % 0x33));
    }
    if (v20 == v12) {
      LODWORD(v35) = 0;
    }
    else {
      uint64_t v35 = v33 + v127 + 0x3333333333333333 * ((uint64_t)(v12 - *v13) >> 4);
    }
    if (a2 == 2)
    {
      __int16 v37 = (double *)v20;
      goto LABEL_25;
    }
    if (a2 == 1)
    {
      __int16 v37 = (double *)(v20 + 16);
      v34 += 2;
      goto LABEL_25;
    }
    double v36 = 0.0;
    if (!a2)
    {
      __int16 v37 = (double *)(v20 + 8);
      ++v34;
LABEL_25:
      double v36 = *v34 - *v37;
    }
    double v38 = fabs(v36);
    if (v38 > 0.03) {
      ++v21;
    }
    int v39 = *(_DWORD *)(v20 + 64);
    if (v38 <= 0.03)
    {
      ++v16;
      if (v39 == 2)
      {
        uint64_t v17 = (v17 + 1);
      }
      else if (v39 == 1)
      {
        ++v18;
      }
    }
    else
    {
      if (v16 >= 1)
      {
        if (v18 > (int)v17) {
          int v40 = 1;
        }
        else {
          int v40 = 2;
        }
        if (v18 == v17) {
          BOOL v41 = v17 != 0;
        }
        else {
          BOOL v41 = v40;
        }
        uint64_t v43 = v133[1];
        unint64_t v42 = (unint64_t)v133[2];
        if ((unint64_t)v43 >= v42)
        {
          uint64_t v45 = *v133;
          unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((v43 - *v133) >> 2);
          unint64_t v47 = v46 + 1;
          if (v46 + 1 > 0x1555555555555555) {
            sub_1001D7FD4();
          }
          int v134 = v22;
          int v48 = v21;
          unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - (void)v45) >> 2);
          if (2 * v49 > v47) {
            unint64_t v47 = 2 * v49;
          }
          if (v49 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v50 = 0x1555555555555555;
          }
          else {
            unint64_t v50 = v47;
          }
          if (v50)
          {
            double v51 = (char *)sub_10080FC80(v125, v50);
            uint64_t v45 = *v133;
            uint64_t v43 = v133[1];
          }
          else
          {
            double v51 = 0;
          }
          double v52 = &v51[12 * v46];
          *(_DWORD *)double v52 = v132;
          *((_DWORD *)v52 + 1) = v35;
          *((_DWORD *)v52 + 2) = v41;
          double v53 = v52;
          if (v43 == v45)
          {
            double v56 = v133;
          }
          else
          {
            do
            {
              uint64_t v54 = *(void *)(v43 - 12);
              v43 -= 12;
              int v55 = *((_DWORD *)v43 + 2);
              *(void *)(v53 - 12) = v54;
              v53 -= 12;
              *((_DWORD *)v53 + 2) = v55;
            }
            while (v43 != v45);
            double v56 = v133;
            uint64_t v45 = *v133;
          }
          unint64_t v44 = v52 + 12;
          *double v56 = v53;
          v56[1] = v52 + 12;
          v56[2] = &v51[12 * v50];
          if (v45) {
            operator delete(v45);
          }
          uint64_t v15 = a7;
          uint64_t v14 = a8;
          int v13 = a5;
          unint64_t v12 = a6;
          int v21 = v48;
          int v22 = v134;
        }
        else
        {
          *(_DWORD *)uint64_t v43 = v132;
          *((_DWORD *)v43 + 1) = v35;
          unint64_t v44 = v43 + 12;
          *((_DWORD *)v43 + 2) = v41;
        }
        v133[1] = v44;
      }
      int v16 = 0;
      uint64_t v17 = 0;
      int v18 = 0;
      int v132 = v35 + 1;
    }
    uint64_t v58 = *(void *)(v20 + 8);
    uint64_t v57 = *(void *)(v20 + 16);
    double v59 = *(double *)v20;
    uint64_t v60 = *(void *)(v20 + 48);
    BOOL v61 = a3[1];
    double v62 = a3[2];
    if (v61 >= v62)
    {
      unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((v61 - *a3) >> 4);
      unint64_t v65 = v64 + 1;
      if (v64 + 1 > 0x555555555555555) {
        goto LABEL_137;
      }
      int v135 = v21;
      uint64_t v66 = v17;
      unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * ((v62 - *a3) >> 4);
      if (2 * v67 > v65) {
        unint64_t v65 = 2 * v67;
      }
      if (v67 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v68 = 0x555555555555555;
      }
      else {
        unint64_t v68 = v65;
      }
      if (v68)
      {
        unsigned __int8 v69 = v19;
        int v70 = v22;
        double v71 = (char *)sub_10014F86C(v126, v68);
        int v22 = v70;
        unint64_t v19 = v69;
      }
      else
      {
        double v71 = 0;
      }
      uint64_t v72 = &v71[48 * v64];
      *(void *)uint64_t v72 = v58;
      *((void *)v72 + 1) = v57;
      *((double *)v72 + 2) = v59;
      *((void *)v72 + 3) = v60;
      *((_DWORD *)v72 + 8) = v39;
      *((_DWORD *)v72 + 9) = 0;
      *((_DWORD *)v72 + 10) = v22;
      double v74 = *a3;
      BOOL v73 = a3[1];
      uint64_t v75 = v72;
      if (v73 != *a3)
      {
        do
        {
          long long v76 = *((_OWORD *)v73 - 3);
          long long v77 = *((_OWORD *)v73 - 2);
          *(_OWORD *)(v75 - 20) = *(_OWORD *)(v73 - 20);
          *((_OWORD *)v75 - 3) = v76;
          *((_OWORD *)v75 - 2) = v77;
          v75 -= 48;
          v73 -= 48;
        }
        while (v73 != v74);
        BOOL v73 = *a3;
      }
      double v63 = v72 + 48;
      *a3 = v75;
      a3[1] = v72 + 48;
      a3[2] = &v71[48 * v68];
      if (v73) {
        operator delete(v73);
      }
      uint64_t v15 = a7;
      uint64_t v14 = a8;
      uint64_t v17 = v66;
      int v13 = a5;
      unint64_t v12 = a6;
      int v21 = v135;
    }
    else
    {
      *(void *)BOOL v61 = v58;
      *((void *)v61 + 1) = v57;
      *((double *)v61 + 2) = v59;
      *((void *)v61 + 3) = v60;
      *((_DWORD *)v61 + 8) = v39;
      *((_DWORD *)v61 + 9) = 0;
      double v63 = v61 + 48;
      *((_DWORD *)v61 + 10) = v22;
    }
    a3[1] = v63;
    v20 += 80;
    if (v20 - *v19 == 4080)
    {
      unint64_t v78 = v19[1];
      ++v19;
      unint64_t v20 = v78;
      goto LABEL_4;
    }
  }
  uint64_t v81 = a1[328];
  if (a1[329] == v81)
  {
    unint64_t v83 = 0;
  }
  else
  {
    unint64_t v82 = a1[332] + a1[331];
    unint64_t v83 = *(void *)(v81 + 8 * (v82 / 0x33)) + 80 * (v82 % 0x33);
  }
  if ((uint64_t *)v83 != v14)
  {
    uint64_t v85 = v14[1];
    uint64_t v84 = v14[2];
    uint64_t v86 = *v14;
    uint64_t v87 = v14[6];
    int v88 = *((_DWORD *)v14 + 16);
    __int16 v89 = a3[1];
    int v90 = a3[2];
    if (v89 >= v90)
    {
      unint64_t v92 = 0xAAAAAAAAAAAAAAABLL * ((v89 - *a3) >> 4);
      unint64_t v93 = v92 + 1;
      if (v92 + 1 > 0x555555555555555) {
LABEL_137:
      }
        sub_1001D7FD4();
      int v94 = v17;
      unint64_t v95 = 0xAAAAAAAAAAAAAAABLL * ((v90 - *a3) >> 4);
      if (2 * v95 > v93) {
        unint64_t v93 = 2 * v95;
      }
      if (v95 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v96 = 0x555555555555555;
      }
      else {
        unint64_t v96 = v93;
      }
      if (v96)
      {
        int v97 = v21;
        int v98 = (char *)sub_10014F86C(v126, v96);
        int v22 = v97;
      }
      else
      {
        int v98 = 0;
      }
      __int16 v99 = &v98[48 * v92];
      double v100 = &v98[48 * v96];
      *(void *)__int16 v99 = v85;
      *((void *)v99 + 1) = v84;
      *((void *)v99 + 2) = v86;
      *((void *)v99 + 3) = v87;
      *((_DWORD *)v99 + 8) = v88;
      v99[36] = 1;
      *((_DWORD *)v99 + 10) = v22;
      __int16 v91 = v99 + 48;
      double v102 = *a3;
      __int16 v101 = a3[1];
      if (v101 != *a3)
      {
        do
        {
          long long v103 = *((_OWORD *)v101 - 3);
          long long v104 = *((_OWORD *)v101 - 2);
          *(_OWORD *)(v99 - 20) = *(_OWORD *)(v101 - 20);
          *((_OWORD *)v99 - 3) = v103;
          *((_OWORD *)v99 - 2) = v104;
          v99 -= 48;
          v101 -= 48;
        }
        while (v101 != v102);
        __int16 v101 = *a3;
      }
      *a3 = v99;
      a3[1] = v91;
      a3[2] = v100;
      if (v101) {
        operator delete(v101);
      }
      LODWORD(v17) = v94;
    }
    else
    {
      *(void *)__int16 v89 = v85;
      *((void *)v89 + 1) = v84;
      *((void *)v89 + 2) = v86;
      *((void *)v89 + 3) = v87;
      *((_DWORD *)v89 + 8) = v88;
      v89[36] = 1;
      __int16 v91 = v89 + 48;
      *((_DWORD *)v89 + 10) = v21;
    }
    a3[1] = v91;
  }
  BOOL result = 1;
  if (v16 >= 2)
  {
    if (v18 > (int)v17) {
      int v105 = 1;
    }
    else {
      int v105 = 2;
    }
    if (v18 == v17) {
      BOOL v106 = v17 != 0;
    }
    else {
      BOOL v106 = v105;
    }
    __int16 v107 = v133;
    double v109 = v133[1];
    unint64_t v108 = (unint64_t)v133[2];
    if ((unint64_t)v109 >= v108)
    {
      __int16 v111 = *v133;
      unint64_t v112 = 0xAAAAAAAAAAAAAAABLL * ((v109 - *v133) >> 2);
      unint64_t v113 = v112 + 1;
      if (v112 + 1 > 0x1555555555555555) {
        sub_1001D7FD4();
      }
      unint64_t v114 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v108 - (void)v111) >> 2);
      if (2 * v114 > v113) {
        unint64_t v113 = 2 * v114;
      }
      if (v114 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v115 = 0x1555555555555555;
      }
      else {
        unint64_t v115 = v113;
      }
      if (v115)
      {
        int v116 = (char *)sub_10080FC80(v125, v115);
        __int16 v107 = v133;
        __int16 v117 = v116;
        __int16 v111 = *v133;
        double v109 = v133[1];
      }
      else
      {
        __int16 v117 = 0;
      }
      int v118 = &v117[12 * v112];
      __int16 v119 = &v117[12 * v115];
      *(_DWORD *)int v118 = v132;
      *((_DWORD *)v118 + 1) = v123;
      *((_DWORD *)v118 + 2) = v106;
      double v110 = v118 + 12;
      if (v109 != v111)
      {
        do
        {
          uint64_t v120 = *(void *)(v109 - 12);
          v109 -= 12;
          int v121 = *((_DWORD *)v109 + 2);
          *(void *)(v118 - 12) = v120;
          v118 -= 12;
          *((_DWORD *)v118 + 2) = v121;
        }
        while (v109 != v111);
        __int16 v111 = *v107;
      }
      const char *v107 = v118;
      v107[1] = v110;
      v107[2] = v119;
      if (v111)
      {
        operator delete(v111);
        __int16 v107 = v133;
      }
    }
    else
    {
      *(_DWORD *)double v109 = v132;
      *((_DWORD *)v109 + 1) = v123;
      double v110 = v109 + 12;
      *((_DWORD *)v109 + 2) = v106;
    }
    v107[1] = v110;
    return 1;
  }
  return result;
}

void sub_10080D040(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      sub_1001D7FD4();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    int v6 = (char *)sub_10014F86C(v3, a2);
    unint64_t v7 = &v6[v5];
    uint64_t v9 = &v6[48 * v8];
    unint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 3);
        long long v14 = *((_OWORD *)v10 - 2);
        *(_OWORD *)(v12 - 20) = *(_OWORD *)(v10 - 20);
        *((_OWORD *)v12 - 3) = v13;
        *((_OWORD *)v12 - 2) = v14;
        v12 -= 48;
        v10 -= 48;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t sub_10080D114(void *a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[1];
  if (v6 == v7) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = 32 * (v6 - v7) - 1;
  }
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5];
  unint64_t v11 = v10 + v9;
  if (v8 == v10 + v9)
  {
    sub_10080F01C(a1);
    uint64_t v9 = a1[4];
    uint64_t v10 = a1[5];
    uint64_t v7 = a1[1];
    unint64_t v11 = v9 + v10;
  }
  unint64_t v12 = (void *)(*(void *)(v7 + ((v11 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v11);
  uint64_t v13 = *a3;
  *unint64_t v12 = *a2;
  v12[1] = v13;
  uint64_t v14 = v10 + 1;
  a1[5] = v14;
  unint64_t v15 = v9 + v14;
  int v16 = (void *)(v7 + 8 * (v15 >> 8));
  if ((_BYTE)v15) {
    uint64_t v17 = *v16 + 16 * v15;
  }
  else {
    uint64_t v17 = *(v16 - 1) + 4096;
  }
  return v17 - 16;
}

__n128 sub_10080D1D8(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 51 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10081099C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x33)) + 80 * (v7 % 0x33);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v10 = *(_OWORD *)(a2 + 32);
  long long v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 64) = v11;
  *(__n128 *)(v8 + 16) = result;
  *(_OWORD *)(v8 + 32) = v10;
  ++a1[5];
  return result;
}

void sub_10080D298(id a1)
{
  qword_102419298 = (uint64_t)os_log_create("com.apple.locationd.Motion", "RunningForm");
}

double sub_10080D2CC(double *a1, double *a2, double a3)
{
  uint64_t v3 = (char *)a2 - (char *)a1;
  if ((char *)a2 - (char *)a1 <= 7) {
    sub_101A62948();
  }
  uint64_t v4 = a1;
  unint64_t v5 = (unint64_t)(v3 >> 3) >> 1;
  uint64_t v6 = &a1[v5];
  if (v6 != a2) {
    sub_10039BFC4(a1, &a1[v5], a2, a3);
  }
  if (((v3 >> 3) & 0x8000000000000001) == 1) {
    return *v6;
  }
  if ((unint64_t)v3 >= 0x10 && v5 != 1)
  {
    unint64_t v8 = v4 + 1;
    double v9 = *v4;
    uint64_t v10 = 8 * v5 - 8;
    long long v11 = v4 + 1;
    do
    {
      double v12 = *v11++;
      double v13 = v12;
      if (v9 < v12)
      {
        double v9 = v13;
        uint64_t v4 = v8;
      }
      unint64_t v8 = v11;
      v10 -= 8;
    }
    while (v10);
  }
  return *v4 + (*v6 - *v4) * 0.5;
}

void sub_10080D3A8(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10080D3D8()
{
}

uint64_t sub_10080D3EC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a1 + 16) <= a3)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CAAB0);
    }
    unint64_t v15 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Assertion failed: false, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMRandomForest.h, line 56,Index exceeds ensemble size.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022CAAB0);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual int16_t CMRandomForest<22>::findLeaf(const float (&)[NFeat], size_t) const [NFeat = 22]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CAAB0);
    }
    int v16 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Error: Index exceeds ensemble size", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return -1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
LABEL_65:
    }
      dispatch_once(&qword_102419630, &stru_1022CAAB0);
  }
  else
  {
    unint64_t v3 = 0;
    uint64_t v4 = (void *)(*(void *)(a1 + 8) + 16 * a3);
    while (v3 < v4[1])
    {
      unint64_t v5 = *(unsigned __int16 *)(*v4 + 10 * v3 + 4);
      if (v5 >= 0x16)
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022CAAB0);
        }
        unint64_t v19 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Assertion failed: false, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMRandomForest.h, line 65,Invalid decision tree, feature index exceeds feature array.", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_1022CAAB0);
          }
          unint64_t v24 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "virtual int16_t CMRandomForest<22>::findLeaf(const float (&)[NFeat], size_t) const [NFeat = 22]", "%s\n", v24);
          if (v24 != (char *)buf) {
            free(v24);
          }
        }
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022CAAB0);
        }
        unint64_t v20 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Error: Invalid decision tree, feature index exceeds feature array", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          return -1;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          goto LABEL_65;
        }
        goto LABEL_63;
      }
      uint64_t v6 = (float *)(*v4 + 10 * v3);
      float v7 = *(float *)(a2 + 4 * v5);
      unint64_t v8 = (unsigned __int16 *)v6 + 3;
      float v10 = *v6;
      double v9 = (unsigned __int16 *)(v6 + 2);
      BOOL v11 = v7 > v10;
      if (v7 >= v10) {
        double v12 = v9;
      }
      else {
        double v12 = v8;
      }
      if (!v11) {
        double v9 = v8;
      }
      if (*(unsigned char *)(a1 + 24)) {
        double v9 = v12;
      }
      int v13 = (__int16)*v9;
      unint64_t v3 = *v9;
      if (v13 < 0) {
        return (__int16)~(_WORD)v3;
      }
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CAAB0);
    }
    uint64_t v17 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Assertion failed: false, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMRandomForest.h, line 91,Invalid decision tree, child index exceeds node array.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022CAAB0);
      }
      uint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual int16_t CMRandomForest<22>::findLeaf(const float (&)[NFeat], size_t) const [NFeat = 22]", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CAAB0);
    }
    int v18 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Error: Invalid decision tree, child index exceeds node array", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return -1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      goto LABEL_65;
    }
  }
LABEL_63:
  unint64_t v25 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 2, "virtual int16_t CMRandomForest<22>::findLeaf(const float (&)[NFeat], size_t) const [NFeat = 22]", "%s\n", v25);
  if (v25 != (char *)buf) {
    free(v25);
  }
  return -1;
}

uint64_t sub_10080DB1C(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 17;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 34;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    float v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

uint64_t sub_10080DBC4(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 42;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 85;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    float v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

void sub_10080DC6C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    float v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    double v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      __int16 v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      double v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    double v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      __int16 v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10080DF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_10080DF84(void *result, uint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = (void *)*result;
    unint64_t v3 = a2 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(result[1] - *(void *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 72 - v3;
      uint64_t v6 = &v2[-(v5 / 0x49)];
      void *result = v6;
      unint64_t v4 = *v6 + 56 * (73 * (v5 / 0x49) - v5) + 4032;
    }
    else
    {
      void *result = &v2[v3 / 0x49];
      unint64_t v4 = v2[v3 / 0x49] + 56 * (v3 % 0x49);
    }
    result[1] = v4;
  }
  return result;
}

void sub_10080E038(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    float v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    double v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      __int16 v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      double v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    double v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      __int16 v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10080E304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10080E350(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    float v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    double v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      __int16 v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      double v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    double v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      __int16 v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10080E61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10080E668(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x55;
  unint64_t v4 = v2 - 85;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    float v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    double v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      __int16 v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      double v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    double v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      __int16 v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10080E934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10080E980(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x22;
  unint64_t v4 = v2 - 34;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    float v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    double v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      __int16 v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      double v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    double v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      __int16 v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10080EC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float sub_10080EC98(void *a1, uint64_t a2, uint64_t a3)
{
  int v5 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  float v6 = 0.0;
  if (v5 != -1)
  {
    uint64_t v7 = a1[4];
    if (*(void *)(v7 + 16 * a3 + 8) <= (unint64_t)(unsigned __int16)v5)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022CAAB0);
      }
      unint64_t v8 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Assertion failed: false, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMRandomForestRegression.h, line 58,Invalid decision tree, regression index exceeds array length.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022CAAB0);
        }
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "float CMRandomForestRegression<22>::evaluateTree(const float (&)[NFeat], size_t) const [NFeat = 22]", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022CAAB0);
      }
      double v9 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Error: Invalid decision tree, regression index exceeds array length", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022CAAB0);
        }
        uint64_t v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "float CMRandomForestRegression<22>::evaluateTree(const float (&)[NFeat], size_t) const [NFeat = 22]", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
    }
    else
    {
      return *(float *)(*(void *)(v7 + 16 * a3) + 4 * (unsigned __int16)v5);
    }
  }
  return v6;
}

uint64_t sub_10080EFBC(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x22) {
    a2 = 1;
  }
  if (v2 < 0x44) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 34;
  }
  return v4 ^ 1u;
}

void sub_10080F01C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    float v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    double v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      __int16 v37 = &v34[8 * v36];
      double v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      double v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    double v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      __int16 v37 = &v34[8 * v47];
      int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10080F2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10080F334(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  sub_10080F37C((void *)a1, a2, a3, a4, a5);
  return a1;
}

void sub_10080F368(_Unwind_Exception *a1)
{
  sub_1000D7EB4(v1);
  _Unwind_Resume(a1);
}

void *sub_10080F37C(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = 73 * (a4 - a2) + 0x6DB6DB6DB6DB6DB7 * ((a5 - *a4) >> 3) - 0x6DB6DB6DB6DB6DB7 * ((a3 - *a2) >> 3);
  }
  return sub_10080F3E0(a1, a2, a3, v5);
}

void *sub_10080F3E0(void *a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = 73 * ((v9 - v8) >> 3) - 1;
  }
  unint64_t v11 = a1[5] + a1[4];
  unint64_t v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_10080F56C(a1, a4 - v12);
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[4] + a1[5];
  }
  uint64_t v13 = (void *)(v8 + 8 * (v11 / 0x49));
  if (v9 == v8) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = *v13 + 56 * (v11 % 0x49);
  }
  uint64_t v24 = (void *)(v8 + 8 * (v11 / 0x49));
  unint64_t v25 = v14;
  __n128 result = sub_10080DF84(&v24, a4);
  uint64_t v16 = v25;
  if (v14 != v25)
  {
    uint64_t v17 = v24;
    do
    {
      if (v13 == v17) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = *v13 + 4088;
      }
      if (v14 == v18)
      {
        uint64_t v18 = v14;
      }
      else
      {
        unint64_t v19 = v14;
        do
        {
          *(_OWORD *)unint64_t v19 = *(_OWORD *)a3;
          long long v20 = *(_OWORD *)(a3 + 16);
          long long v21 = *(_OWORD *)(a3 + 32);
          *(void *)(v19 + 48) = *(void *)(a3 + 48);
          *(_OWORD *)(v19 + 16) = v20;
          *(_OWORD *)(v19 + 32) = v21;
          a3 += 56;
          if (a3 - *a2 == 4088)
          {
            uint64_t v22 = a2[1];
            ++a2;
            a3 = v22;
          }
          v19 += 56;
        }
        while (v19 != v18);
      }
      a1[5] += 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v18 - v14) >> 3);
      if (v13 == v17) {
        break;
      }
      unint64_t v23 = v13[1];
      ++v13;
      unint64_t v14 = v23;
    }
    while (v23 != v16);
  }
  return result;
}

void sub_10080F56C(void *a1, unint64_t a2)
{
  BOOL v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if (v5 % 0x49) {
    unint64_t v6 = v5 / 0x49 + 1;
  }
  else {
    unint64_t v6 = v5 / 0x49;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 / 0x49) {
    unint64_t v8 = v7 / 0x49;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 / 0x49)
  {
    for (a1[4] = v7 - 73 * v8; v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          unint64_t v29 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v28);
          long long v31 = &v29[8 * (v28 >> 2)];
          long long v32 = (uint64_t *)a1[1];
          BOOL v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            BOOL v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            uint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)uint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          __int16 v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            BOOL v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          unint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            BOOL v3 = (char *)a1[1];
          }
          __int16 v27 = &v3[-8 * (v24 >> 1)];
          BOOL v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)BOOL v3 = v18;
      BOOL v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0xFF8uLL);
          sub_10017F0B4(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0xFF8uLL);
          sub_1002D02D8((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 72;
          }
          else {
            uint64_t v64 = 73;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - 73 * v8;
      if (v8)
      {
        uint64_t v66 = (char *)a1[2];
        do
        {
          unint64_t v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          unint64_t v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              long long v79 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v78);
              uint64_t v81 = &v79[8 * (v78 >> 2)];
              unint64_t v82 = (uint64_t *)a1[1];
              uint64_t v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                uint64_t v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                uint64_t v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)uint64_t v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              uint64_t v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                uint64_t v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              uint64_t v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                uint64_t v66 = (char *)a1[1];
              }
              long long v77 = &v66[-8 * (v74 >> 1)];
              uint64_t v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)uint64_t v66 = v69;
          uint64_t v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      __int16 v91 = a1 + 3;
      if (v13) {
        uint64_t v15 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v13);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v38 = -73 * v8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        int v88 = operator new(0xFF8uLL);
        sub_1000DA434(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)sub_1000DA54C((uint64_t)v91, v48);
              double v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                long long v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)long long v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              double v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              uint64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }
              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      uint64_t v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1002D03F8((uint64_t)__p, v57);
      }
      double v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] += v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_10080FAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10080FB24(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x33) {
    a2 = 1;
  }
  if (v2 < 0x66) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 51;
  }
  return v4 ^ 1u;
}

void *sub_10080FB84(void *a1, uint64_t a2, void *a3, uint64_t a4, double *a5)
{
  uint64_t v5 = a2;
  unint64_t v6 = a1;
  if (a4 != a2)
  {
    unint64_t v7 = 23 * (a3 - a1) + 0x2E8BA2E8BA2E8BA3 * ((a4 - *a3) >> 4) - 0x2E8BA2E8BA2E8BA3 * ((a2 - *a1) >> 4);
    if (v7)
    {
      do
      {
        unint64_t v9 = v7 >> 1;
        unint64_t v12 = v6;
        uint64_t v13 = v5;
        sub_100174054(&v12, v7 >> 1);
        uint64_t v10 = v13;
        if (*(double *)(v13 + 8) < *a5)
        {
          uint64_t v5 = v13 + 176;
          v13 += 176;
          unint64_t v6 = v12;
          if (v10 + 176 - *v12 == 4048)
          {
            unint64_t v6 = v12 + 1;
            uint64_t v5 = v12[1];
          }
          unint64_t v9 = v7 + ~v9;
        }
        unint64_t v7 = v9;
      }
      while (v9);
    }
  }
  return v6;
}

void *sub_10080FC80(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    sub_1001D7FA0();
  }
  return operator new(12 * a2);
}

float *sub_10080FCC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  for (unint64_t i = 0; i != 3; ++i)
  {
    for (unint64_t j = 0; j != 3; ++j)
    {
      float v6 = sub_1004E30E4(a1, i);
      float v7 = v6 * sub_1004E30E4(a1, j);
      __n128 result = (float *)sub_1004E45A0(a2, i, j);
      float *result = v7;
    }
  }
  return result;
}

float sub_10080FD50(uint64_t a1, unint64_t a2)
{
  if (a2 >= 9)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CAAB0);
    }
    uint64_t v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      unint64_t v8 = a2;
      __int16 v9 = 2048;
      uint64_t v10 = 9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: ldx < M*N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 84,invalid element %zu >= %zu.", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022CAAB0);
      }
      float v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T CMMatrix<float, 3>::operator[](size_t) const [T = float, M = 3, N = 3]", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return *(float *)(a1 + 4 * a2);
}

float *sub_10080FF2C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0;
  *(_DWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  do
  {
    *(_DWORD *)sub_1004E45A0(a2, v4, v4) = 1065353216;
    int v5 = *(_DWORD *)sub_1004E45A0(a1, v4, v4);
    *(_DWORD *)sub_1004E4930((uint64_t)&v69, v4) = v5;
    int v6 = *(_DWORD *)sub_1004E45A0(a1, v4, v4);
    *(_DWORD *)sub_1004E4930((uint64_t)&v67, v4) = v6;
    *(_DWORD *)sub_1004E4930((uint64_t)&v65, v4++) = 0;
  }
  while (v4 != 3);
  unint64_t v7 = 0;
  do
  {
    unint64_t v8 = 0;
    char v9 = 1;
    float v10 = 0.0;
    do
    {
      char v11 = v9;
      unint64_t v12 = v8 + 1;
      do
      {
        __n128 result = (float *)sub_1004E45A0(a1, v8, v12);
        float v14 = *result;
        if (*result <= 0.0) {
          float v14 = -*result;
        }
        float v10 = v10 + v14;
        ++v12;
      }
      while (v12 != 3);
      char v9 = 0;
      unint64_t v8 = 1;
    }
    while ((v11 & 1) != 0);
    if (v10 == 0.0) {
      break;
    }
    float v15 = 0.0;
    if (v7 <= 2) {
      float v15 = (float)(v10 * 0.2) / 9.0;
    }
    char v16 = 0;
    unint64_t v17 = 0;
    unint64_t v64 = v7 + 1;
    char v18 = 1;
    do
    {
      char v19 = v18;
      unint64_t v20 = v17 + 1;
      do
      {
        uint64_t v21 = (float *)sub_1004E45A0(a1, v17, v20);
        float v22 = *v21;
        if (*v21 <= 0.0) {
          float v22 = -*v21;
        }
        float v23 = v22 * 100.0;
        if (v7 < 4) {
          goto LABEL_31;
        }
        uint64_t v24 = (float *)sub_1004E4930((uint64_t)&v69, v17);
        float v25 = v23 + *v24;
        if (v25 <= 0.0) {
          float v26 = -v25;
        }
        else {
          float v26 = v23 + *v24;
        }
        __int16 v27 = (float *)sub_1004E4930((uint64_t)&v69, v17);
        float v28 = *v27;
        if (*v27 <= 0.0) {
          float v28 = -*v27;
        }
        if (v26 != v28) {
          goto LABEL_31;
        }
        unint64_t v29 = (float *)sub_1004E4930((uint64_t)&v69, v20);
        float v30 = v23 + *v29;
        if (v30 <= 0.0) {
          float v31 = -v30;
        }
        else {
          float v31 = v23 + *v29;
        }
        long long v32 = (float *)sub_1004E4930((uint64_t)&v69, v20);
        float v33 = *v32;
        if (*v32 <= 0.0) {
          float v33 = -*v32;
        }
        if (v31 == v33)
        {
          __n128 result = (float *)sub_1004E45A0(a1, v17, v20);
          float *result = 0.0;
        }
        else
        {
LABEL_31:
          __n128 result = (float *)sub_1004E45A0(a1, v17, v20);
          float v34 = *result;
          if (*result <= 0.0) {
            float v34 = -*result;
          }
          if (v34 > v15)
          {
            float v35 = *(float *)sub_1004E4930((uint64_t)&v69, v20);
            float v36 = v35 - *(float *)sub_1004E4930((uint64_t)&v69, v17);
            float v37 = v23 + v36;
            if ((float)(v23 + v36) <= 0.0) {
              float v37 = -(float)(v23 + v36);
            }
            float v38 = -v36;
            if (v36 > 0.0) {
              float v38 = v36;
            }
            if (v37 == v38)
            {
              float v39 = *(float *)sub_1004E45A0(a1, v17, v20) / v36;
            }
            else
            {
              uint64_t v40 = (float *)sub_1004E45A0(a1, v17, v20);
              float v41 = (float)(v36 * 0.5) / *v40;
              float v42 = -v41;
              BOOL v43 = v41 < 0.0;
              if (v41 > 0.0) {
                float v42 = (float)(v36 * 0.5) / *v40;
              }
              float v44 = 1.0 / (float)(v42 + sqrtf((float)(v41 * v41) + 1.0));
              if (v43) {
                float v39 = -v44;
              }
              else {
                float v39 = v44;
              }
            }
            float v45 = 1.0 / sqrtf((float)(v39 * v39) + 1.0);
            float v46 = v39 * v45;
            float v47 = (float)(v39 * v45) / (float)(v45 + 1.0);
            float v48 = v39 * *(float *)sub_1004E45A0(a1, v17, v20);
            uint64_t v49 = (float *)sub_1004E4930((uint64_t)&v65, v17);
            *uint64_t v49 = *v49 - v48;
            uint64_t v50 = (float *)sub_1004E4930((uint64_t)&v65, v20);
            *uint64_t v50 = v48 + *v50;
            double v51 = (float *)sub_1004E4930((uint64_t)&v69, v17);
            *double v51 = *v51 - v48;
            uint64_t v52 = (float *)sub_1004E4930((uint64_t)&v69, v20);
            float *v52 = v48 + *v52;
            *(_DWORD *)sub_1004E45A0(a1, v17, v20) = 0;
            if (v16)
            {
              float v53 = *(float *)(a1 + 12);
              long long v54 = (float *)sub_1004E45A0(a1, 0, v20);
              float v55 = *v54;
              *(float *)(a1 + 12) = v53 - (float)(v46 * (float)(*v54 + (float)(v53 * v47)));
              *(float *)sub_1004E45A0(a1, 0, v20) = v55 + (float)(v46 * (float)(v53 - (float)(v55 * v47)));
            }
            float v56 = -v46;
            if (v17 + 1 < v20)
            {
              do
              {
                float v57 = *(float *)sub_1004E45A0(a1, v17, 1uLL);
                float v58 = *(float *)(a1 + 28);
                *(float *)sub_1004E45A0(a1, v17, 1uLL) = v57 + (float)(v56 * (float)(v58 + (float)(v57 * v47)));
                *(float *)(a1 + 28) = v58 + (float)(v46 * (float)(v57 - (float)(v58 * v47)));
              }
              while (v20 > 2);
            }
            if (v20 <= 1)
            {
              float v59 = *(float *)sub_1004E45A0(a1, v17, 2uLL);
              float v60 = *(float *)sub_1004E45A0(a1, v20, 2uLL);
              *(float *)sub_1004E45A0(a1, v17, 2uLL) = v59 + (float)(v56 * (float)(v60 + (float)(v59 * v47)));
              *(float *)sub_1004E45A0(a1, v20, 2uLL) = v60 + (float)(v46 * (float)(v59 - (float)(v60 * v47)));
            }
            for (unint64_t i = 0; i != 3; ++i)
            {
              float v62 = *(float *)sub_1004E45A0(a2, i, v17);
              float v63 = *(float *)sub_1004E45A0(a2, i, v20);
              *(float *)sub_1004E45A0(a2, i, v17) = v62 + (float)(v56 * (float)(v63 + (float)(v62 * v47)));
              __n128 result = (float *)sub_1004E45A0(a2, i, v20);
              float *result = v63 + (float)(v46 * (float)(v62 - (float)(v63 * v47)));
            }
          }
        }
        ++v20;
      }
      while (v20 != 3);
      char v18 = 0;
      char v16 = 1;
      unint64_t v17 = 1;
    }
    while ((v19 & 1) != 0);
    float32x2_t v67 = vadd_f32(v65, v67);
    float v68 = v66 + v68;
    float32x2_t v69 = v67;
    float v70 = v68;
    float v66 = 0.0;
    float32x2_t v65 = 0;
    ++v7;
  }
  while (v64 != 10);
  return result;
}

int *sub_1008104F0(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  float v6 = *(float *)sub_1004E4930(*a1, a2);
  __n128 result = (int *)sub_1004E4930(*a1, a3);
  if (v6 < *(float *)result)
  {
    unint64_t v8 = (int *)sub_1004E4930(*a1, a2);
    char v9 = (int *)sub_1004E4930(*a1, a3);
    int v10 = *v8;
    *unint64_t v8 = *v9;
    int *v9 = v10;
    char v11 = (int *)sub_1004E45A0(a1[1], 0, a2);
    unint64_t v12 = (int *)sub_1004E45A0(a1[1], 0, a3);
    int v13 = *v11;
    int *v11 = *v12;
    *unint64_t v12 = v13;
    float v14 = (int *)sub_1004E45A0(a1[1], 1uLL, a2);
    float v15 = (int *)sub_1004E45A0(a1[1], 1uLL, a3);
    int v16 = *v14;
    *float v14 = *v15;
    *float v15 = v16;
    unint64_t v17 = (int *)sub_1004E45A0(a1[1], 2uLL, a2);
    __n128 result = (int *)sub_1004E45A0(a1[1], 2uLL, a3);
    int v18 = *v17;
    *unint64_t v17 = *result;
    int *result = v18;
  }
  return result;
}

void *sub_100810614(void *a1, uint64_t a2, void *a3, uint64_t a4, double *a5)
{
  uint64_t v5 = a2;
  float v6 = a1;
  if (a4 != a2)
  {
    unint64_t v7 = 51 * (a3 - a1) - 0x3333333333333333 * ((a4 - *a3) >> 4) + 0x3333333333333333 * ((a2 - *a1) >> 4);
    if (v7)
    {
      do
      {
        unint64_t v9 = v7 >> 1;
        unint64_t v12 = v6;
        uint64_t v13 = v5;
        sub_1008106FC(&v12, v7 >> 1);
        uint64_t v10 = v13;
        if (*(double *)(v13 + 48) < *a5)
        {
          uint64_t v5 = v13 + 80;
          v13 += 80;
          float v6 = v12;
          if (v10 + 80 - *v12 == 4080)
          {
            float v6 = v12 + 1;
            uint64_t v5 = v12[1];
          }
          unint64_t v9 = v7 + ~v9;
        }
        unint64_t v7 = v9;
      }
      while (v9);
    }
  }
  return v6;
}

void *sub_1008106FC(void *result, uint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = (void *)*result;
    unint64_t v3 = a2 - 0x3333333333333333 * ((uint64_t)(result[1] - *(void *)*result) >> 4);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 50 - v3;
      float v6 = &v2[-(v5 / 0x33)];
      int *result = v6;
      unint64_t v4 = *v6 + 80 * (51 * (v5 / 0x33) - v5) + 4000;
    }
    else
    {
      int *result = &v2[v3 / 0x33];
      unint64_t v4 = v2[v3 / 0x33] + 80 * (v3 % 0x33);
    }
    result[1] = v4;
  }
  return result;
}

void *sub_1008107A8(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  float v6 = a1;
  if (a4 != a2)
  {
    unint64_t v7 = 73 * (a3 - a1) + 0x6DB6DB6DB6DB6DB7 * ((a4 - *a3) >> 3) - 0x6DB6DB6DB6DB6DB7 * ((a2 - *a1) >> 3);
    if (v7)
    {
      do
      {
        unint64_t v9 = v7 >> 1;
        unint64_t v12 = v6;
        uint64_t v13 = v5;
        sub_10080DF84(&v12, v7 >> 1);
        uint64_t v10 = v13;
        if (*(double *)(v13 + 40) <= *(double *)(a5 + 40))
        {
          uint64_t v5 = v13 + 56;
          v13 += 56;
          float v6 = v12;
          if (v10 + 56 - *v12 == 4088)
          {
            float v6 = v12 + 1;
            uint64_t v5 = v12[1];
          }
          unint64_t v9 = v7 + ~v9;
        }
        unint64_t v7 = v9;
      }
      while (v9);
    }
  }
  return v6;
}

void *sub_1008108A4(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  float v6 = a1;
  if (a4 != a2)
  {
    unint64_t v7 = 73 * (a3 - a1) + 0x6DB6DB6DB6DB6DB7 * ((a4 - *a3) >> 3) - 0x6DB6DB6DB6DB6DB7 * ((a2 - *a1) >> 3);
    if (v7)
    {
      do
      {
        unint64_t v9 = v7 >> 1;
        char v11 = v6;
        uint64_t v12 = v5;
        sub_10080DF84(&v11, v7 >> 1);
        if (*(double *)(a5 + 40) > *(double *)(v12 + 40))
        {
          float v6 = v11;
          uint64_t v5 = v12 + 56;
          if (v12 + 56 - *v11 == 4088)
          {
            float v6 = v11 + 1;
            uint64_t v5 = v11[1];
          }
          unint64_t v9 = v7 + ~v9;
        }
        unint64_t v7 = v9;
      }
      while (v9);
    }
  }
  return v6;
}

void sub_10081099C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x33;
  unint64_t v4 = v2 - 51;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    float v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      float v34 = (char *)sub_1000DA54C(v5, v33);
      float v35 = &v34[8 * (v33 >> 2)];
      float v37 = &v34[8 * v36];
      float v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        float v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)float v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    char v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    float v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      float v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      float v35 = &v34[8 * (v46 >> 2)];
      float v37 = &v34[8 * v47];
      float v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      BOOL v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  float v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  float v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_100810C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100810CB4(uint64_t a1, void *a2)
{
  *(void *)sub_1008B86EC((const void *)a1, a2) = off_1022CAB48;
  *(void *)(a1 + 128) = [(Class)off_10241DC88[0]() sharedInstance];
  *(unsigned char *)(a1 + 136) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 208))(a1);
  *(unsigned char *)(a1 + 137) = sub_100811030();
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 140) = 0;
  sub_10051F6A8(a1 + 160, @"com.apple.nanolifestyle.sessiontrackerapp", 1, @"mobile");
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 316) = 0;
  *(unsigned char *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 324) = 0;
  int v11 = 0;
  sub_10044FD20((unsigned __int8 *)(a1 + 328), "OverrideFitnessTrackingChargerWithType", &v11, 0);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, (const void *)a1, (CFNotificationCallback)sub_100811098, @"NanoLifestylePrivacyPreferencesChangedNotification", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  unint64_t v4 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v4, (const void *)a1, (CFNotificationCallback)sub_1008112D4, @"NanoLifestyleSessionTrackerAppPreferencesChangedNotification", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  uint64_t v5 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v5, (const void *)a1, (CFNotificationCallback)sub_100811510, @"NanoLifestyleEnableFitnessDataCollectionSettingDidChangeNotification", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  char v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
  sub_1008B8F80(a1, v6);
  unint64_t v7 = CFNotificationCenterGetDarwinNotifyCenter();
  CFStringRef v8 = (const __CFString *)off_10241DC90[0]();
  CFNotificationCenterAddObserver(v7, (const void *)a1, (CFNotificationCallback)sub_10081174C, v8, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  unint64_t v9 = CFNotificationCenterGetDarwinNotifyCenter();
  CFStringRef v10 = (const __CFString *)off_10241DC98();
  CFNotificationCenterAddObserver(v9, (const void *)a1, (CFNotificationCallback)sub_10081174C, v10, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  sub_10060F068();
}

void sub_100810FCC(_Unwind_Exception *a1)
{
  uint64_t v4 = v1[37];
  v1[37] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_10051F740(v2);
  sub_1008B8BE0(v1);
  _Unwind_Resume(a1);
}

id sub_100811030()
{
  id v0 = [[[off_10241DC88[0]() sharedInstance] getActivePairedDevice];
  id v1 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"C5DDE5DD-2FF7-4735-80A3-0108488556DE"];

  return [v0 supportsCapability:v1];
}

void sub_100811098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CAC78);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    CFStringRef v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFitnessTrackingNotifier::fitnessTrackingStateChanged", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CAC78);
    }
    int v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      char v19 = "";
      __int16 v20 = 2082;
      uint64_t v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFitnessTrackingNotifier::fitnessTrackingStateChanged\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100815038;
  v13[3] = &unk_1022ACFE0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008112B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008112D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CAC78);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    CFStringRef v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFitnessTrackingNotifierWatch::nanoLifestyleSessionTrackerAppPreferencesChanged", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CAC78);
    }
    int v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      char v19 = "";
      __int16 v20 = 2082;
      uint64_t v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFitnessTrackingNotifierWatch::nanoLifestyleSessionTrackerAppPreferencesChanged\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10081507C;
  v13[3] = &unk_1022ACFE0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008114F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100811510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CAC78);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    CFStringRef v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFitnessTrackingNotifierWatch::nanoLifestyleEnableFitnessDataCollectionSettingChanged", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CAC78);
    }
    int v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      char v19 = "";
      __int16 v20 = 2082;
      uint64_t v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFitnessTrackingNotifierWatch::nanoLifestyleEnableFitnessDataCollectionSettingChanged\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100815084;
  v13[3] = &unk_1022ACFE0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_10081172C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10081174C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CAC78);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    CFStringRef v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFitnessTrackingNotifierWatch::pairingStateChanged", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CAC78);
    }
    int v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      char v19 = "";
      __int16 v20 = 2082;
      uint64_t v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFitnessTrackingNotifierWatch::pairingStateChanged\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1008150EC;
  v13[3] = &unk_1022ACFE0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_100811968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100811988(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CAC78);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    CFStringRef v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFitnessTrackingNotifierWatch::onBatteryNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CAC78);
    }
    unint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFitnessTrackingNotifierWatch::onBatteryNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100812AF8((_DWORD *)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100811B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_100811B64(_DWORD *a1)
{
  id result = +[CMFitnessShared isDeviceSatellitePaired];
  if (result) {
    int v3 = 2;
  }
  else {
    int v3 = 1;
  }
  if (a1[38] != v3)
  {
    a1[38] = v3;
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022CAC98);
    }
    uint64_t v4 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = a1[38];
      *(_DWORD *)buf = 67240192;
      int v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CM Satellite Pairing State,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022CAC98);
      }
      char v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessTrackingNotifierWatch::updateSatellitePairingState()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    return (id)sub_100811D48(a1);
  }
  return result;
}

uint64_t sub_100811D48(_DWORD *a1)
{
  if (sub_100812FA0((uint64_t)a1)) {
    int v2 = 2;
  }
  else {
    int v2 = 1;
  }
  sub_100813120((uint64_t)a1, a1 + 35, v2, 1);
  if (sub_100813028((uint64_t)a1)) {
    int v3 = 2;
  }
  else {
    int v3 = 1;
  }
  sub_100813120((uint64_t)a1, a1 + 36, v3, 2);
  if (sub_1008130A4((uint64_t)a1)) {
    int v4 = 2;
  }
  else {
    int v4 = 1;
  }

  return sub_100813120((uint64_t)a1, a1 + 37, v4, 7);
}

uint64_t sub_100811DD8(void *a1)
{
  *a1 = off_1022CAB48;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, @"NanoLifestylePrivacyPreferencesChangedNotification", 0);
  int v3 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(v3, a1, @"NanoLifestyleSessionTrackerAppPreferencesChangedNotification", 0);
  int v4 = CFNotificationCenterGetDarwinNotifyCenter();
  CFStringRef v5 = (const __CFString *)off_10241DC90[0]();
  CFNotificationCenterRemoveObserver(v4, a1, v5, 0);
  char v6 = CFNotificationCenterGetDarwinNotifyCenter();
  CFStringRef v7 = (const __CFString *)off_10241DC98();
  CFNotificationCenterRemoveObserver(v6, a1, v7, 0);

  a1[16] = 0;
  uint64_t v8 = a1[37];
  a1[37] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  sub_10051F740(a1 + 20);

  return sub_1008B8BE0(a1);
}

void sub_100811EF4(void *a1)
{
  sub_100811DD8(a1);

  operator delete();
}

BOOL sub_100811F2C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 109))
  {
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022CAC98);
    }
    id v1 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#SystemState, Overriding device activation status check.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022CAC98);
      }
      CFStringRef v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLFitnessTrackingNotifierWatch::isDeviceActivated() const", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    return 1;
  }
  int v3 = *(void **)(a1 + 128);
  if (v3)
  {
    if ([v3 pairingID]) {
      return 1;
    }
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022CAC98);
    }
    int v4 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#SystemState, Unable to obtain pairing id, suspending activity tracking.", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 == -1) {
        goto LABEL_24;
      }
      goto LABEL_31;
    }
  }
  else
  {
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022CAC98);
    }
    CFStringRef v5 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#SystemState, Unable to query pairing id, suspending activity tracking.", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 == -1)
      {
LABEL_24:
        char v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLFitnessTrackingNotifierWatch::isDeviceActivated() const", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
LABEL_31:
      dispatch_once(&qword_102419270, &stru_1022CAC98);
      goto LABEL_24;
    }
  }
  return result;
}

BOOL sub_1008122D8()
{
  CFBooleanRef v0 = (const __CFBoolean *)CFPreferencesCopyValue(@"EnableFitnessTracking", @"com.apple.nanolifestyle.privacy", @"mobile", kCFPreferencesAnyHost);
  if (!v0)
  {
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022CAC98);
    }
    char v6 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#SystemState, Failed to get fitness tracking state in Bridge->Motion&Fitness. It may not have been set yet. Assuming default.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022CAC98);
      }
      CFStringRef v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLFitnessTrackingNotifierWatch::isFitnessTrackingEnabled() const", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    return 1;
  }
  CFBooleanRef v1 = v0;
  int Value = CFBooleanGetValue(v0);
  CFRelease(v1);
  if (Value) {
    return 1;
  }
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022CAC98);
  }
  int v3 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#SystemState, Fitness tracking is disabled, suspending activity tracking.", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022CAC98);
    }
    CFStringRef v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLFitnessTrackingNotifierWatch::isFitnessTrackingEnabled() const", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 0;
  }
  return result;
}

void sub_1008125DC(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 316);
  int v3 = sub_1008B86E4(a1);
  unsigned __int8 v12 = v3;
  unsigned __int8 v13 = *(unsigned char *)(a1 + 136);
  char v14 = *(unsigned char *)(a1 + 137);
  if (v13)
  {
    int v4 = sub_1008B86E4(a1);
    if (v2 == 3) {
      int v5 = 0;
    }
    else {
      int v5 = v4;
    }
  }
  else
  {
    int v5 = 0;
  }
  char v15 = v5;
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022CAC98);
  }
  char v6 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(a1 + 316);
    *(_DWORD *)buf = 67240960;
    int v25 = v3;
    __int16 v26 = 1026;
    int v27 = v13;
    __int16 v28 = 1026;
    int v29 = v7;
    __int16 v30 = 1026;
    int v31 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#SystemState, Watch, Enabled, %{public}d, DeviceActivated, %{public}d, OnCharger, %{public}d, allowed, %{public}d", buf, 0x1Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022CAC98);
    }
    int v10 = *(_DWORD *)(a1 + 316);
    int v16 = 67240960;
    int v17 = v3;
    __int16 v18 = 1026;
    int v19 = v13;
    __int16 v20 = 1026;
    int v21 = v10;
    __int16 v22 = 1026;
    int v23 = v5;
    char v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFitnessTrackingNotifierWatch::notifyClients()", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  *(_DWORD *)buf = 0;
  if (sub_1001072EC(a1, (int *)buf, 1))
  {
    *(_DWORD *)buf = 0;
    (*(void (**)(uint64_t, uint8_t *, unsigned __int8 *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, buf, &v12, 1, 0xFFFFFFFFLL, 0);
  }
  unint64_t v9 = objc_alloc_init(ALActivityLog);
  [(ALActivityLog *)v9 setTimestamp:CFAbsoluteTimeGetCurrent()];
  [(ALActivityLog *)v9 setFitnessTracking:objc_alloc_init(ALCMFitnessTracking)];
  [(ALCMFitnessTracking *)[(ALActivityLog *)v9 fitnessTracking] setFitnessTrackingEnabled:v12];
  [(ALCMFitnessTracking *)[(ALActivityLog *)v9 fitnessTracking] setPowerSource:v2];
  [[+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance") proxyForService:@"CLActivityLogger"] logData:v9];
}

id sub_100812900(unsigned char *a1)
{
  if (qword_102419270 != -1) {
    dispatch_once(&qword_102419270, &stru_1022CAC98);
  }
  uint64_t v2 = qword_102419278;
  if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#SystemState, Pairing state changed", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022CAC98);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessTrackingNotifierWatch::pairingStateChanged(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  a1[136] = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 208))(a1);
  a1[137] = sub_100811030();
  (*(void (**)(unsigned char *))(*(void *)a1 + 224))(a1);
  return sub_100811B64(a1);
}

void sub_100812AF8(_DWORD *a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 == 7)
  {
    int v5 = a1[83];
    int v6 = a1[79];
    if (v6 != *(_DWORD *)(a4 + 12) || v5 != 0)
    {
      if (v5) {
        int v8 = a1[83];
      }
      else {
        int v8 = *(_DWORD *)(a4 + 12);
      }
      a1[79] = v8;
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022CAC98);
      }
      unint64_t v9 = qword_102419278;
      if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = a1[83];
        int v11 = a1[79];
        *(_DWORD *)buf = 67240448;
        int v19 = v10;
        __int16 v20 = 1026;
        int v21 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#SystemState, OverrideChargerType, %{public}d, NotifyChargerType, %{public}d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419270 != -1) {
          dispatch_once(&qword_102419270, &stru_1022CAC98);
        }
        int v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessTrackingNotifierWatch::onBatteryNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
      (*(void (**)(_DWORD *))(*(void *)a1 + 224))(a1);
      int v6 = a1[79];
    }
    if (v6 == 3)
    {
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022CAC98);
      }
      unsigned __int8 v12 = qword_102419278;
      if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#SystemState, Device on-charger, suspending activity tracking.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419270 != -1) {
          dispatch_once(&qword_102419270, &stru_1022CAC98);
        }
        unsigned __int8 v13 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessTrackingNotifierWatch::onBatteryNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n");
LABEL_33:
        if (v13 != buf) {
          free(v13);
        }
      }
    }
  }
  else
  {
    if (qword_102419270 != -1) {
      dispatch_once(&qword_102419270, &stru_1022CAC98);
    }
    char v15 = qword_102419278;
    if (os_log_type_enabled((os_log_t)qword_102419278, OS_LOG_TYPE_ERROR))
    {
      int v16 = *a3;
      *(_DWORD *)buf = 67240192;
      int v19 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#SystemState, Un-handled notification,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419270 != -1) {
        dispatch_once(&qword_102419270, &stru_1022CAC98);
      }
      unsigned __int8 v13 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLFitnessTrackingNotifierWatch::onBatteryNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n");
      goto LABEL_33;
    }
  }
}

id sub_100812FA0(uint64_t a1)
{
  BOOL v4 = 0;
  if (sub_1000D29FC(a1 + 160, @"NLPredictedActivityStartEnableNotification", &v4)) {
    uint64_t v2 = +[NSNumber numberWithBool:v4];
  }
  else {
    uint64_t v2 = 0;
  }
  return +[CMFitnessShared isWorkoutStartReminderEnabledWhenDeviceIsSatellitePaired:*(_DWORD *)(a1 + 152) == 2 isInMoveTimeMode:*(_DWORD *)(a1 + 116) == 2 withCurrentSetting:v2];
}

id sub_100813028(uint64_t a1)
{
  BOOL v4 = 0;
  if (sub_1000D29FC(a1 + 160, @"NLPredictedActivityEndEnableNotification", &v4)) {
    uint64_t v2 = +[NSNumber numberWithBool:v4];
  }
  else {
    uint64_t v2 = 0;
  }
  return +[CMFitnessShared isWorkoutEndReminderEnabledWhenDeviceIsInMoveTimeMode:*(_DWORD *)(a1 + 116) == 2 withCurrentSetting:v2];
}

id sub_1008130A4(uint64_t a1)
{
  BOOL v4 = 0;
  if (sub_1000D29FC(a1 + 160, @"NLPredictedActivityResumeEnableNotification", &v4)) {
    uint64_t v2 = +[NSNumber numberWithBool:v4];
  }
  else {
    uint64_t v2 = 0;
  }
  return +[CMFitnessShared isWorkoutResumeReminderEnabledWhenDeviceIsInMoveTimeMode:*(_DWORD *)(a1 + 116) == 2 withCurrentSetting:v2];
}

uint64_t sub_100813120(uint64_t result, _DWORD *a2, int a3, int a4)
{
  int v9 = a4;
  if (*a2 != a3)
  {
    uint64_t v6 = result;
    *a2 = a3;
    BOOL v8 = a3 == 2;
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022CACB8);
    }
    int v7 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      unsigned __int8 v13 = "";
      __int16 v14 = 1026;
      int v15 = a4;
      __int16 v16 = 1026;
      BOOL v17 = a3 == 2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Workout Alert Flag\", \"notification\":%{public}d, \"enabled\":%{public}hhd}", buf, 0x1Eu);
    }
    return (*(uint64_t (**)(uint64_t, int *, BOOL *, uint64_t, uint64_t, void))(*(void *)v6 + 152))(v6, &v9, &v8, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

uint64_t sub_100813288(_DWORD *a1)
{
  sub_1008B9248(a1);

  return sub_100811D48(a1);
}

uint64_t sub_1008132C0()
{
  sub_100103240();
  if (!sub_10073E30C()) {
    return 0;
  }
  sub_10051F6A8((uint64_t)v3, @"com.apple.nanolifestyle", 1, @"mobile");
  BOOL v4 = 0;
  unsigned int v0 = sub_1000D2988((uint64_t)v3, "AlwaysOnMotionSensorLogging", &v4);
  if (v4) {
    uint64_t v1 = v0;
  }
  else {
    uint64_t v1 = 0;
  }
  sub_10051F740(v3);
  return v1;
}

void sub_10081334C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100813360(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        int v9 = (uint64_t *)v4;
      }
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022CAC78);
      }
      int v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        int v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v11 = (void *)*v11;
        }
        *(_DWORD *)buf = 136446466;
        int v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022CAC78);
        }
        __int16 v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          __int16 v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        int v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        unsigned __int8 v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_1008135F0(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_1008136A4(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_1008136EC(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_100813734(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_10081377C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_10241DCA0);
}

uint64_t sub_1008137A8(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        unsigned __int8 v13 = (uint64_t *)v7;
      }
      else {
        unsigned __int8 v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)uint64_t v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          uint64_t v24 = (uint64_t *)v18;
        }
        else {
          uint64_t v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          int v29 = (uint64_t *)v25;
        }
        else {
          int v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        *(_DWORD *)buf = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_10081613C();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_10241DCA1;
        int v39 = v17;
        *(void *)buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)buf = &v39;
        int v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        long long v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)buf = &v39;
        float v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CAC78);
  }
  __int16 v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    int v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v15 = (void *)*v15;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v46 = 1026;
    int v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CAC78);
    }
    float v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      float v37 = (void *)*v37;
    }
    *(_DWORD *)uint64_t v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    float v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_100813C4C(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CAC78);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022CAC78);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_100813ED0(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        unsigned __int8 v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            unsigned __int8 v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022CAC78);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022CAC78);
                }
                int v29 = a1 + 8;
                if (a1[31] < 0) {
                  int v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                float v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                int v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1008142A4(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v6 = operator new(0x20uLL);
  v6[1] = 0;
  v6[2] = 0;
  *((_DWORD *)v6 + 6) = *a3;
  *uint64_t v6 = off_1022CACE8;
  int v10 = *a2;
  int v11 = &v10;
  int v7 = sub_10044715C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101D0B290, &v11);
  BOOL v8 = (std::__shared_weak_count *)v7[9];
  v7[8] = v6 + 3;
  v7[9] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return 1;
}

void sub_100814358(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10081436C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, &v5, a3, a4, 0);
}

void sub_1008143C0(uint64_t a1, unsigned int *a2, _DWORD *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  BOOL v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CAC78);
  }
  int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)buf = 68289794;
    int v22 = 0;
    __int16 v23 = 2082;
    *(void *)BOOL v24 = "";
    *(_WORD *)&v24[8] = 2082;
    *(void *)&v24[10] = "activity";
    __int16 v25 = 2082;
    int v26 = v10;
    __int16 v27 = 2050;
    BOOL v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    int v29 = v30;
    memset(v30, 0, sizeof(v30));
    int v31 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v29);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v28) {
      sub_1000DB0A0(v28);
    }
    sub_1000F5BB0((uint64_t)&v23, *(void **)&v24[6]);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v29, v30[0]);
  }
  if (a4)
  {
    BOOL v18 = operator new(0x20uLL);
    v18[1] = 0;
    v18[2] = 0;
    *BOOL v18 = off_1022CACE8;
    *((_DWORD *)v18 + 6) = *a3;
    int v19 = (std::__shared_weak_count *)v14[9];
    v14[8] = v18 + 3;
    v14[9] = v18;
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v19 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v19) {
LABEL_27:
  }
    sub_1000DB0A0(v19);
LABEL_28:
  if (v14[7]) {
    sub_10081526C();
  }
  os_activity_scope_leave(&state);
}

void sub_1008149A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_1008149F0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CAC78);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v3 = (void *)*v3;
      }
      *(_DWORD *)buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022CAC78);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData>::listClients() [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CAC78);
    }
    int v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022CAC78);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData>::listClients() [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    BOOL v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022CAC78);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022CAC78);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData>::listClients() [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            BOOL v8 = v19;
          }
          while (!v16);
        }
        BOOL v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

Class sub_100814F9C()
{
  if (qword_10247E220 != -1) {
    dispatch_once(&qword_10247E220, &stru_1022CAC58);
  }
  Class result = objc_getClass("NRPairedDeviceRegistry");
  qword_10247E218 = (uint64_t)result;
  off_10241DC88[0] = sub_100815000;
  return result;
}

uint64_t sub_100815000()
{
  return qword_10247E218;
}

void sub_10081500C(id a1)
{
  qword_10247E228 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry", 2);
}

uint64_t sub_100815038(uint64_t a1)
{
  return sub_1008B90E8(*(unsigned char **)(a1 + 32));
}

void sub_10081504C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_10081507C(uint64_t a1)
{
  return sub_100811D48(*(_DWORD **)(a1 + 32));
}

uint64_t sub_100815084(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v1 + 232))(v1)) {
    int v2 = 2;
  }
  else {
    int v2 = 1;
  }

  return sub_1008B8F88(v1, v2);
}

id sub_1008150EC(uint64_t a1)
{
  return sub_100812900(*(unsigned char **)(a1 + 32));
}

uint64_t sub_1008150F4()
{
  if (qword_10247E220 != -1) {
    dispatch_once(&qword_10247E220, &stru_1022CAC58);
  }
  unsigned int v0 = (uint64_t *)dlsym((void *)qword_10247E228, "NRPairedDeviceRegistryDeviceDidPairDarwinNotification");
  if (v0)
  {
    uint64_t result = *v0;
    qword_10247E230 = result;
  }
  else
  {
    uint64_t result = qword_10247E230;
  }
  off_10241DC90[0] = sub_100815174;
  return result;
}

uint64_t sub_100815174()
{
  return qword_10247E230;
}

uint64_t sub_100815180()
{
  if (qword_10247E220 != -1) {
    dispatch_once(&qword_10247E220, &stru_1022CAC58);
  }
  unsigned int v0 = (uint64_t *)dlsym((void *)qword_10247E228, "NRPairedDeviceRegistryDeviceDidUnpairDarwinNotification");
  if (v0)
  {
    uint64_t result = *v0;
    qword_10247E238 = result;
  }
  else
  {
    uint64_t result = qword_10247E238;
  }
  off_10241DC98 = sub_100815200;
  return result;
}

uint64_t sub_100815200()
{
  return qword_10247E238;
}

void sub_10081520C(id a1)
{
  qword_102419278 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fitness");
}

void sub_10081523C(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_10081526C()
{
}

void sub_100815318(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    int v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      int v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          int v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v49 = v9;
        id v13 = sub_10081589C(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              float v48 = v19;
              sub_100815708(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              int v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  int v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              float v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022CAC78);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                long long v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022CAC78);
                }
                uint64_t v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  uint64_t v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                double v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                int v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_100815708(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_10081589C(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

void sub_100815800(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022CACE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100815820(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022CACE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10081587C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_10081589C(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_100815938(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_100815CC4(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_100815938(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_100816084((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1022CAD28);
    }
    int v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = 0x8000000101D47462 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_1022CAD28);
  }
  int v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = 0x8000000101D47462 & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_1022CAD28);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = 0x8000000101D47462 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLFitnessTrackingNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_100815CC4(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022CAD28);
      }
      int v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D47462 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        uint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLFitnessTrackingNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022CAD28);
      }
      int v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D47462 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022CAD28);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_100816084(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_102392AE0))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)4) {
      sub_101A70164();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_10081610C(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_10081613C()
{
}

uint64_t sub_1008161E8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

uint64_t sub_1008164BC(void *a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        LODWORD(v6) = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v6) = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 & 0x7FFF8) == 8)
    {
      unint64_t v12 = objc_alloc_init(TRANSITPbLocationFingerprint);
      [a1 addLocationFingerprint:v12];

      if (!PBReaderPlaceMark() || (sub_100BA21DC((uint64_t)v12, a2) & 1) == 0) {
        return 0;
      }
      PBReaderRecallMark();
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100816ABC(uint64_t **a1, uint64_t *a2)
{
  id v2 = *a1;
  int v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      unsigned int v5 = qword_102419418;
      if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)a2 + 23) >= 0) {
          uint64_t v6 = a2;
        }
        else {
          uint64_t v6 = (uint64_t *)*a2;
        }
        uint64_t v7 = *v2;
        uint64_t v8 = v2[1];
        uint64_t v9 = v2[2];
        uint64_t v10 = v2[3];
        uint64_t v11 = v2[4];
        uint64_t v12 = v2[5];
        uint64_t v13 = v2[8];
        uint64_t v14 = v2[9];
        uint64_t v16 = v2[6];
        uint64_t v15 = v2[7];
        int v17 = *((unsigned __int8 *)v2 + 104);
        *(_DWORD *)buf = 134351875;
        uint64_t v20 = v7;
        __int16 v21 = 2082;
        int v22 = v6;
        __int16 v23 = 2049;
        uint64_t v24 = v8;
        __int16 v25 = 2049;
        uint64_t v26 = v9;
        __int16 v27 = 2049;
        uint64_t v28 = v11;
        __int16 v29 = 2050;
        uint64_t v30 = v13;
        __int16 v31 = 2049;
        uint64_t v32 = v16;
        __int16 v33 = 2050;
        uint64_t v34 = v10;
        __int16 v35 = 2050;
        uint64_t v36 = v12;
        __int16 v37 = 2050;
        uint64_t v38 = v14;
        __int16 v39 = 2050;
        uint64_t v40 = v15;
        __int16 v41 = 1026;
        int v42 = v17;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLRS,%{public}.1lf,%{public}s,latitude,%{private}.8lf,longitude,%{private}.8lf,altitude,%{private}.2lf,speed,%{public}.2lf,course,%{private}.2lf,hunc,%{public}.2lf,vunc,%{public}.2lf,speedUnc,%{public}.2lf,courseUnc,%{public}.2lf,signalEnvironment,%{public}d", buf, 0x76u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419410 != -1) {
          dispatch_once(&qword_102419410, &stru_1022CADF0);
        }
        __int16 v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRouteSmoother::outputPerEpochLog(const std::vector<swan::RouteSmootherEpoch> &, const std::string &)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
      v2 += 14;
    }
    while (v2 != v3);
  }
}

id sub_100816DB4(id result, uint64_t *a2)
{
  obunint64_t j = result;
  if (result)
  {
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    uint64_t result = [result countByEnumeratingWithState:&v58 objects:v114 count:16];
    if (result)
    {
      id v3 = result;
      char v4 = &qword_102419000;
      unsigned int v5 = &qword_102419000;
      uint64_t v6 = *(void *)v59;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v59 != v6) {
            objc_enumerationMutation(obj);
          }
          uint64_t v8 = *(void **)(*((void *)&v58 + 1) + 8 * (void)v7);
          if (v8)
          {
            if (v4[130] != -1) {
              dispatch_once(&qword_102419410, &stru_1022CADF0);
            }
            uint64_t v9 = v5[131];
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              [objc_msgSend(v8, "timestamp") timeIntervalSinceReferenceDate];
              uint64_t v56 = v10;
              if (*((char *)a2 + 23) >= 0) {
                uint64_t v11 = a2;
              }
              else {
                uint64_t v11 = (uint64_t *)*a2;
              }
              [v8 latitude];
              uint64_t v54 = v12;
              [v8 longitude];
              uint64_t v14 = v13;
              [v8 altitude];
              uint64_t v16 = v15;
              [v8 speed];
              uint64_t v18 = v17;
              [v8 course];
              uint64_t v20 = v19;
              [v8 horizontalAccuracy];
              uint64_t v22 = v21;
              [v8 altitudeAccuracy];
              uint64_t v24 = v23;
              [v8 speedAccuracy];
              uint64_t v26 = v25;
              [v8 courseAccuracy];
              uint64_t v28 = v27;
              unsigned int v29 = [v8 signalEnvironmentType];
              unsigned int v30 = [v8 locType];
              *(_DWORD *)buf = 134352131;
              uint64_t v89 = v56;
              __int16 v90 = 2082;
              __int16 v91 = v11;
              char v4 = &qword_102419000;
              __int16 v92 = 2049;
              uint64_t v93 = v54;
              __int16 v94 = 2049;
              uint64_t v95 = v14;
              __int16 v96 = 2049;
              uint64_t v97 = v16;
              __int16 v98 = 2050;
              uint64_t v99 = v18;
              __int16 v100 = 2049;
              uint64_t v101 = v20;
              __int16 v102 = 2050;
              uint64_t v103 = v22;
              __int16 v104 = 2050;
              uint64_t v105 = v24;
              __int16 v106 = 2050;
              uint64_t v107 = v26;
              __int16 v108 = 2050;
              uint64_t v109 = v28;
              __int16 v110 = 1026;
              unsigned int v111 = v29;
              unsigned int v5 = &qword_102419000;
              __int16 v112 = 1026;
              unsigned int v113 = v30;
              _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLRS,%{public}.1lf,%{public}s,latitude,%{private}.8lf,longitude,%{private}.8lf,altitude,%{private}.2lf,speed,%{public}.2lf,course,%{private}.2lf,hunc,%{public}.2lf,vunc,%{public}.2lf,speedUnc,%{public}.2lf,courseUnc,%{public}.2lf,signalEnvironment,%{public}d,locType,%{public}d", buf, 0x7Cu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (v4[130] != -1) {
                dispatch_once(&qword_102419410, &stru_1022CADF0);
              }
              [objc_msgSend(v8, "timestamp") timeIntervalSinceReferenceDate];
              uint64_t v57 = v31;
              if (*((char *)a2 + 23) >= 0) {
                uint64_t v32 = a2;
              }
              else {
                uint64_t v32 = (uint64_t *)*a2;
              }
              [v8 latitude];
              uint64_t v55 = v33;
              [v8 longitude];
              uint64_t v35 = v34;
              [v8 altitude];
              uint64_t v37 = v36;
              [v8 speed];
              uint64_t v39 = v38;
              [v8 course];
              uint64_t v41 = v40;
              [v8 horizontalAccuracy];
              uint64_t v43 = v42;
              [v8 altitudeAccuracy];
              uint64_t v45 = v44;
              [v8 speedAccuracy];
              uint64_t v47 = v46;
              [v8 courseAccuracy];
              uint64_t v49 = v48;
              unsigned int v50 = [v8 signalEnvironmentType];
              unsigned int v51 = [v8 locType];
              int v62 = 134352131;
              uint64_t v63 = v57;
              __int16 v64 = 2082;
              float32x2_t v65 = v32;
              __int16 v66 = 2049;
              uint64_t v67 = v55;
              __int16 v68 = 2049;
              uint64_t v69 = v35;
              __int16 v70 = 2049;
              uint64_t v71 = v37;
              __int16 v72 = 2050;
              uint64_t v73 = v39;
              __int16 v74 = 2049;
              uint64_t v75 = v41;
              __int16 v76 = 2050;
              uint64_t v77 = v43;
              __int16 v78 = 2050;
              uint64_t v79 = v45;
              __int16 v80 = 2050;
              uint64_t v81 = v47;
              __int16 v82 = 2050;
              uint64_t v83 = v49;
              __int16 v84 = 1026;
              unsigned int v85 = v50;
              __int16 v86 = 1026;
              unsigned int v87 = v51;
              __int16 v52 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRouteSmoother::outputPerEpochLog(NSArray<CLTripSegmentLocation *> *, const std::string &)", "%s\n", v52);
              if (v52 != (char *)buf) {
                free(v52);
              }
              char v4 = &qword_102419000;
              unsigned int v5 = &qword_102419000;
            }
          }
          uint64_t v7 = (char *)v7 + 1;
        }
        while (v3 != v7);
        uint64_t result = [obj countByEnumeratingWithState:&v58 objects:v114 count:16];
        id v3 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_100817264(uint64_t a1)
{
  sub_1000C7F88(buf);
  char v2 = *(unsigned char *)(a1 + 40);
  LOBYTE(v66[0]) = 0;
  int v3 = sub_1000D2988(*(uint64_t *)buf, "EnablePerEpochSmoothLogOutput", (BOOL *)v66);
  char v4 = v66[0];
  if (!v3) {
    char v4 = v2;
  }
  *(unsigned char *)(a1 + 40) = v4;
  if (v90) {
    sub_1000DB0A0(v90);
  }
  sub_1000C7F88(buf);
  char v5 = *(unsigned char *)(a1 + 41);
  LOBYTE(v66[0]) = 0;
  int v6 = sub_1000D2988(*(uint64_t *)buf, "EnableMapMatchingBeforeSmoothing", (BOOL *)v66);
  char v7 = v66[0];
  if (!v6) {
    char v7 = v5;
  }
  *(unsigned char *)(a1 + 41) = v7;
  if (v90) {
    sub_1000DB0A0(v90);
  }
  sub_1000C7F88(buf);
  char v8 = *(unsigned char *)(a1 + 42);
  LOBYTE(v66[0]) = 0;
  int v9 = sub_1000D2988(*(uint64_t *)buf, "CLRSAllowRouteReconstruction", (BOOL *)v66);
  char v10 = v66[0];
  if (!v9) {
    char v10 = v8;
  }
  *(unsigned char *)(a1 + 42) = v10;
  if (v90) {
    sub_1000DB0A0(v90);
  }
  sub_1000C7F88(buf);
  char v11 = *(unsigned char *)(a1 + 51);
  LOBYTE(v66[0]) = 0;
  int v12 = sub_1000D2988(*(uint64_t *)buf, "fUseTripSegmentProcessorForReconstruction", (BOOL *)v66);
  char v13 = v66[0];
  if (!v12) {
    char v13 = v11;
  }
  *(unsigned char *)(a1 + 51) = v13;
  if (v90) {
    sub_1000DB0A0(v90);
  }
  sub_1000C7F88(buf);
  char v14 = *(unsigned char *)(a1 + 49);
  LOBYTE(v66[0]) = 0;
  int v15 = sub_1000D2988(*(uint64_t *)buf, "CLRSForceRouteReconstruction", (BOOL *)v66);
  char v16 = v66[0];
  if (!v15) {
    char v16 = v14;
  }
  *(unsigned char *)(a1 + 49) = v16;
  if (v90) {
    sub_1000DB0A0(v90);
  }
  sub_1000C7F88(buf);
  char v17 = *(unsigned char *)(a1 + 50);
  LOBYTE(v66[0]) = 0;
  int v18 = sub_1000D2988(*(uint64_t *)buf, "CLRSPreferCachedMapData", (BOOL *)v66);
  char v19 = v66[0];
  if (!v18) {
    char v19 = v17;
  }
  *(unsigned char *)(a1 + 50) = v19;
  if (v90) {
    sub_1000DB0A0(v90);
  }
  sub_1000C7F88(buf);
  char v20 = *(unsigned char *)(a1 + 48);
  LOBYTE(v66[0]) = 0;
  int v21 = sub_1000D2988(*(uint64_t *)buf, "EnableRunningTrackDetectionDuringSmoothing", (BOOL *)v66);
  char v22 = v66[0];
  if (!v21) {
    char v22 = v20;
  }
  *(unsigned char *)(a1 + 48) = v22;
  if (v90) {
    sub_1000DB0A0(v90);
  }
  sub_1000C7F88(buf);
  char v23 = *(unsigned char *)(a1 + 43);
  LOBYTE(v66[0]) = 0;
  int v24 = sub_1000D2988(*(uint64_t *)buf, "CLRSEnablePTSDuringReconstruction", (BOOL *)v66);
  char v25 = v66[0];
  if (!v24) {
    char v25 = v23;
  }
  *(unsigned char *)(a1 + 43) = v25;
  if (v90) {
    sub_1000DB0A0(v90);
  }
  sub_1000C7F88(buf);
  char v26 = *(unsigned char *)(a1 + 44);
  LOBYTE(v66[0]) = 0;
  int v27 = sub_1000D2988(*(uint64_t *)buf, "CLRSEnableMapMatchingDuringReconstruction", (BOOL *)v66);
  char v28 = v66[0];
  if (!v27) {
    char v28 = v26;
  }
  *(unsigned char *)(a1 + 44) = v28;
  if (v90) {
    sub_1000DB0A0(v90);
  }
  sub_1000C7F88(buf);
  char v29 = *(unsigned char *)(a1 + 52);
  LOBYTE(v66[0]) = 0;
  int v30 = sub_1000D2988(*(uint64_t *)buf, "CLRSUseXPCServiceForMapQuery", (BOOL *)v66);
  char v31 = v66[0];
  if (!v30) {
    char v31 = v29;
  }
  *(unsigned char *)(a1 + 52) = v31;
  if (v90) {
    sub_1000DB0A0(v90);
  }
  if (!*(unsigned char *)(a1 + 41))
  {
    sub_1000C7F88(buf);
    char v32 = *(unsigned char *)(a1 + 45);
    LOBYTE(v66[0]) = 0;
    int v33 = sub_1000D2988(*(uint64_t *)buf, "EnableMapMatchingAfterSmoothing", (BOOL *)v66);
    char v34 = v66[0];
    if (!v33) {
      char v34 = v32;
    }
    *(unsigned char *)(a1 + 45) = v34;
    if (v90) {
      sub_1000DB0A0(v90);
    }
    sub_1000C7F88(buf);
    char v35 = *(unsigned char *)(a1 + 46);
    LOBYTE(v66[0]) = 0;
    int v36 = sub_1000D2988(*(uint64_t *)buf, "EnableReSmoothingAfterMapMatching", (BOOL *)v66);
    char v37 = v66[0];
    if (!v36) {
      char v37 = v35;
    }
    *(unsigned char *)(a1 + 46) = v37;
    if (v90) {
      sub_1000DB0A0(v90);
    }
  }
  uint64_t v65 = 0x3FF0000000000000;
  sub_1000C7F88(buf);
  int v38 = sub_1000A699C(*(uint64_t *)buf, "CLRSDesiredTimeBetweenReconstructedPointsSeconds", &v65);
  if (v90) {
    sub_1000DB0A0(v90);
  }
  if (v38)
  {
    *(void *)(a1 + 56) = v65;
    *(unsigned char *)(a1 + 64) = 1;
  }
  if (qword_102419410 != -1) {
    dispatch_once(&qword_102419410, &stru_1022CADF0);
  }
  uint64_t v39 = qword_102419418;
  if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_INFO))
  {
    int v40 = *(unsigned __int8 *)(a1 + 41);
    int v41 = *(unsigned __int8 *)(a1 + 42);
    int v42 = *(unsigned __int8 *)(a1 + 49);
    int v43 = *(unsigned __int8 *)(a1 + 45);
    int v44 = *(unsigned __int8 *)(a1 + 46);
    int v45 = *(unsigned __int8 *)(a1 + 40);
    int v46 = *(unsigned __int8 *)(a1 + 47);
    int v47 = *(unsigned __int8 *)(a1 + 48);
    int v48 = *(unsigned __int8 *)(a1 + 51);
    int v49 = *(unsigned __int8 *)(a1 + 43);
    int v50 = *(unsigned __int8 *)(a1 + 44);
    int v51 = *(unsigned __int8 *)(a1 + 52);
    *(_DWORD *)buf = 67243008;
    *(_DWORD *)&uint8_t buf[4] = v40;
    LOWORD(v90) = 1026;
    *(_DWORD *)((char *)&v90 + 2) = v41;
    HIWORD(v90) = 1026;
    int v91 = v42;
    __int16 v92 = 1026;
    int v93 = v43;
    __int16 v94 = 1026;
    int v95 = v44;
    __int16 v96 = 1026;
    int v97 = v45;
    __int16 v98 = 1026;
    int v99 = v46;
    __int16 v100 = 1026;
    int v101 = v47;
    __int16 v102 = 1026;
    int v103 = v48;
    __int16 v104 = 1026;
    int v105 = v49;
    __int16 v106 = 1026;
    int v107 = v50;
    __int16 v108 = 1026;
    int v109 = v51;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "CLRS,EnableMapMatchingBeforeSmoothing,%{public}d,AllowRouteReconstruction,%{public}d,ForceRouteReconstruction,%{public}d,EnableMapMatchingAfterSmoothing,%{public}d,EnableReSmoothingAfterMapMatching,%{public}d,EnablePerEpochSmoothLogOutput,%{public}d,EnableCornerDetectionDuringSmoothing,%{public}d,EnableRunningTrackDetectionDuringSmoothing,%{public}d,UseTripSegmentProcessorForReconstruction_,%{public}d,EnablePTSDuringReconstruction,%{public}d,EnableMapMatchingDuringReconstruction,%{public}d,fUseXPCServiceForMapQuery,%{public}d", buf, 0x4Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    int v52 = *(unsigned __int8 *)(a1 + 41);
    int v53 = *(unsigned __int8 *)(a1 + 42);
    int v54 = *(unsigned __int8 *)(a1 + 49);
    int v55 = *(unsigned __int8 *)(a1 + 45);
    int v56 = *(unsigned __int8 *)(a1 + 46);
    int v57 = *(unsigned __int8 *)(a1 + 40);
    int v58 = *(unsigned __int8 *)(a1 + 47);
    int v59 = *(unsigned __int8 *)(a1 + 48);
    int v60 = *(unsigned __int8 *)(a1 + 51);
    int v61 = *(unsigned __int8 *)(a1 + 43);
    int v62 = *(unsigned __int8 *)(a1 + 44);
    int v63 = *(unsigned __int8 *)(a1 + 52);
    v66[0] = 67243008;
    v66[1] = v52;
    __int16 v67 = 1026;
    int v68 = v53;
    __int16 v69 = 1026;
    int v70 = v54;
    __int16 v71 = 1026;
    int v72 = v55;
    __int16 v73 = 1026;
    int v74 = v56;
    __int16 v75 = 1026;
    int v76 = v57;
    __int16 v77 = 1026;
    int v78 = v58;
    __int16 v79 = 1026;
    int v80 = v59;
    __int16 v81 = 1026;
    int v82 = v60;
    __int16 v83 = 1026;
    int v84 = v61;
    __int16 v85 = 1026;
    int v86 = v62;
    __int16 v87 = 1026;
    int v88 = v63;
    __int16 v64 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRouteSmoother::readDefaultSettings()", "%s\n", v64);
    if (v64 != (char *)buf) {
      free(v64);
    }
  }
}

void sub_1008178B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    sub_1000DB0A0(a24);
  }
  _Unwind_Resume(exception_object);
}

id sub_100817900()
{
  id result = (id)objc_opt_class();
  if (result)
  {
    id v1 = +[MCProfileConnection sharedConnection];
    return [v1 isHealthDataSubmissionAllowed];
  }
  return result;
}

uint64_t sub_100817950(unsigned char *a1, uint64_t a2, uint64_t a3, void **a4, int a5, int a6, unsigned int a7, id **a8)
{
  sub_100134750(__p, "CLRouteSmoother.smoothPoints");
  int v12 = v163;
  char v13 = (void **)__p[0];
  char v14 = [CLOSTransaction alloc];
  if (v12 >= 0) {
    int v15 = __p;
  }
  else {
    int v15 = v13;
  }
  char v16 = [(CLOSTransaction *)v14 initWithDescription:v15];
  if (v163 < 0) {
    operator delete(__p[0]);
  }
  sub_100817264((uint64_t)a1);
  if (qword_102419410 != -1) {
    dispatch_once(&qword_102419410, &stru_1022CADF0);
  }
  char v17 = qword_102419418;
  if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
    uint64_t v19 = ((char *)a8[1] - (char *)*a8) >> 4;
    *(_DWORD *)buf = 67241216;
    *(_DWORD *)&uint8_t buf[4] = a5;
    *(_WORD *)&uint8_t buf[8] = 2050;
    *(void *)&buf[10] = v18;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = a6;
    *(_WORD *)&uint8_t buf[24] = 1026;
    *(_DWORD *)&buf[26] = a7;
    *(_WORD *)uint64_t v173 = 2050;
    *(void *)&v173[2] = v19;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "CLRS,Starting smoother for workoutActivity,%{public}u,count,%{public}zu,shouldReconstructRoute,%{public}d,networkAccessAllowed,%{public}d,reconstructionIntervalData.size(),%{public}zu", buf, 0x28u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    uint64_t v119 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
    uint64_t v120 = ((char *)a8[1] - (char *)*a8) >> 4;
    *(_DWORD *)int v164 = 67241216;
    *(_DWORD *)&v164[4] = a5;
    *(_WORD *)&v164[8] = 2050;
    *(void *)&v164[10] = v119;
    *(_WORD *)&v164[18] = 1026;
    *(_DWORD *)&v164[20] = a6;
    *(_WORD *)&v164[24] = 1026;
    *(_DWORD *)&v164[26] = a7;
    *(_WORD *)int v165 = 2050;
    *(void *)&v165[2] = v120;
    int v121 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPoints(dispatch_queue_t, std::vector<swan::RouteSmootherEpoch> &, std::vector<CLClientLocation> &, CLMotionActivity::Type, const BOOL, const BOOL, std::vector<ReconstructionIntervalData> &)", "%s\n", v121);
    if (v121 != buf) {
      free(v121);
    }
  }
  double v20 = sub_10016C458();
  double v21 = 1.0;
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4)) >= 2) {
    double v21 = vabdd_f64(*(double *)(*(void *)a3 + 16 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4) - 112), **(double **)a3);
  }
  sub_100134750(&v161, "Input");
  sub_100134750(&v160, "PreSmt");
  char v22 = sub_100134750(v158, "Sparse");
  if (a1[41])
  {
    if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
      char v22 = sub_1000DC48C(&v157, v160.__r_.__value_.__l.__data_, v160.__r_.__value_.__l.__size_);
    }
    else {
      std::string v157 = v160;
    }
    BOOL v23 = sub_100819938((uint64_t)v22, (uint64_t *)&v157, a5, (void *)a3);
    BOOL v24 = v23;
    if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v157.__r_.__value_.__l.__data_);
      if (v24) {
        goto LABEL_19;
      }
    }
    else if (v23)
    {
LABEL_19:
      std::string::assign(&v161, "PostMM");
      goto LABEL_26;
    }
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    char v25 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLRS,CLMM mapMatching before smoothing failed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      *(_WORD *)int v164 = 0;
      int v124 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPoints(dispatch_queue_t, std::vector<swan::RouteSmootherEpoch> &, std::vector<CLClientLocation> &, CLMotionActivity::Type, const BOOL, const BOOL, std::vector<ReconstructionIntervalData> &)", "%s\n", v124);
      if (v124 != buf) {
        free(v124);
      }
    }
  }
LABEL_26:
  if (qword_102419410 != -1) {
    dispatch_once(&qword_102419410, &stru_1022CADF0);
  }
  char v26 = qword_102419418;
  if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v27 = ((char *)a8[1] - (char *)*a8) >> 4;
    *(_DWORD *)buf = 134349056;
    *(void *)&uint8_t buf[4] = v27;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CLRS,reconstructionIntervalData,size,%{public}zu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    uint64_t v122 = ((char *)a8[1] - (char *)*a8) >> 4;
    *(_DWORD *)int v164 = 134349056;
    *(void *)&v164[4] = v122;
    int v123 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPoints(dispatch_queue_t, std::vector<swan::RouteSmootherEpoch> &, std::vector<CLClientLocation> &, CLMotionActivity::Type, const BOOL, const BOOL, std::vector<ReconstructionIntervalData> &)", "%s\n", v123);
    if (v123 != buf) {
      free(v123);
    }
  }
  char v134 = a6;
  if ((a6 & 1) == 0 && !a1[49] || !a1[42])
  {
    if (*a8 == a8[1]) {
      goto LABEL_143;
    }
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    char v28 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v29 = ((char *)a8[1] - (char *)*a8) >> 4;
      *(_DWORD *)buf = 134349056;
      *(void *)&uint8_t buf[4] = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "CLRS,reconstructionIntervalData,size,%{public}zu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      uint64_t v125 = ((char *)a8[1] - (char *)*a8) >> 4;
      *(_DWORD *)int v164 = 134349056;
      *(void *)&v164[4] = v125;
      uint64_t v126 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPoints(dispatch_queue_t, std::vector<swan::RouteSmootherEpoch> &, std::vector<CLClientLocation> &, CLMotionActivity::Type, const BOOL, const BOOL, std::vector<ReconstructionIntervalData> &)", "%s\n", v126);
      if (v126 != buf) {
        free(v126);
      }
    }
    int v132 = v16;
    a1[51] = 1;
    memset(v164, 0, 24);
    char v31 = *a8;
    int v30 = a8[1];
    if (*a8 == v30)
    {
      uint64_t v33 = 0;
LABEL_114:
      sub_1008297D4(__dst, v33 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4));
      int v58 = *(double **)a3;
      int v57 = *(double **)(a3 + 8);
      if (v57 == *(double **)a3)
      {
        *(void *)&__dst[8] = *(void *)__dst;
        char v16 = v132;
        if (a8[1] != *a8)
        {
          uint64_t v90 = 0;
          unint64_t v91 = 0;
          do
          {
            sub_1008299EC((uint64_t)__dst, *(uint64_t *)&__dst[8], *(char **)(*(void *)v164 + v90), *(char **)(*(void *)v164 + v90 + 8), 0x6DB6DB6DB6DB6DB7* ((uint64_t)(*(void *)(*(void *)v164 + v90 + 8) - *(void *)(*(void *)v164 + v90)) >> 4));
            ++v91;
            v90 += 24;
          }
          while (v91 < ((char *)a8[1] - (char *)*a8) >> 4);
        }
      }
      else
      {
        unint64_t v59 = 0;
        unint64_t v60 = 0;
        uint64_t v61 = *(void *)v164;
        do
        {
          if (v60 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)&v164[8] - v61) >> 3))
          {
            uint64_t v62 = *(void *)(v61 + 24 * v60 + 8);
            uint64_t v63 = v62 - *(void *)(v61 + 24 * v60);
            if (v63)
            {
              if (*v58 >= *(double *)(v62 - 112))
              {
                sub_10081D60C(__dst, 0x6DB6DB6DB6DB6DB7 * (v63 >> 4) + v59);
                uint64_t v61 = *(void *)v164;
                __int16 v64 = (long long **)(*(void *)v164 + 24 * v60);
                uint64_t v65 = *v64;
                __int16 v66 = v64[1];
                if (v65 != v66)
                {
                  __int16 v67 = (_OWORD *)(*(void *)__dst + 112 * v59);
                  do
                  {
                    long long v68 = *v65;
                    long long v69 = v65[2];
                    v67[1] = v65[1];
                    void v67[2] = v69;
                    _OWORD *v67 = v68;
                    long long v70 = v65[3];
                    long long v71 = v65[4];
                    long long v72 = v65[5];
                    *(_OWORD *)((char *)v67 + 89) = *(long long *)((char *)v65 + 89);
                    v67[4] = v71;
                    v67[5] = v72;
                    v67[3] = v70;
                    ++v59;
                    v65 += 7;
                    v67 += 7;
                  }
                  while (v65 != v66);
                }
                ++v60;
              }
            }
          }
          uint64_t v73 = *(void *)__dst;
          int v74 = (_OWORD *)(*(void *)__dst + 112 * v59);
          long long v75 = *(_OWORD *)v58;
          long long v76 = *((_OWORD *)v58 + 1);
          v74[2] = *((_OWORD *)v58 + 2);
          long long v78 = *((_OWORD *)v58 + 4);
          long long v77 = *((_OWORD *)v58 + 5);
          long long v79 = *((_OWORD *)v58 + 3);
          *(_OWORD *)((char *)v74 + 89) = *(_OWORD *)((char *)v58 + 89);
          v74[4] = v78;
          v74[5] = v77;
          v74[3] = v79;
          _OWORD *v74 = v75;
          v74[1] = v76;
          ++v59;
          v58 += 14;
        }
        while (v58 != v57);
        if (v60 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)&v164[8] - v61) >> 3))
        {
          do
          {
            sub_10081D60C(__dst, v59+ 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v61 + 24 * v60 + 8) - *(void *)(v61 + 24 * v60)) >> 4));
            uint64_t v61 = *(void *)v164;
            int v80 = (long long **)(*(void *)v164 + 24 * v60);
            __int16 v81 = *v80;
            int v82 = v80[1];
            if (v81 != v82)
            {
              __int16 v83 = (_OWORD *)(*(void *)__dst + 112 * v59);
              do
              {
                long long v84 = *v81;
                long long v85 = v81[2];
                v83[1] = v81[1];
                v83[2] = v85;
                _OWORD *v83 = v84;
                long long v86 = v81[3];
                long long v87 = v81[4];
                long long v88 = v81[5];
                *(_OWORD *)((char *)v83 + 89) = *(long long *)((char *)v81 + 89);
                v83[4] = v87;
                v83[5] = v88;
                v83[3] = v86;
                ++v59;
                v81 += 7;
                v83 += 7;
              }
              while (v81 != v82);
            }
            ++v60;
          }
          while (v60 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)&v164[8] - v61) >> 3));
          uint64_t v73 = *(void *)__dst;
        }
        char v16 = v132;
        if (v59 != 0x6DB6DB6DB6DB6DB7 * ((*(void *)&__dst[8] - v73) >> 4))
        {
          if (qword_102419410 != -1) {
            dispatch_once(&qword_102419410, &stru_1022CADF0);
          }
          uint64_t v89 = qword_102419418;
          if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 134218240;
            *(void *)&uint8_t buf[4] = v59;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&unsigned char buf[14] = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)&__dst[8] - *(void *)__dst) >> 4);
            _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_ERROR, "CLRS,Unexpected need to resize route_epochs_expanded_vector,new size,%zu,original size,%zu", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419410 != -1) {
              dispatch_once(&qword_102419410, &stru_1022CADF0);
            }
            int v167 = 134218240;
            unint64_t v168 = v59;
            __int16 v169 = 2048;
            uint64_t v170 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)&__dst[8] - *(void *)__dst) >> 4);
            unint64_t v131 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "CLSmootherErrorCode CLRouteSmoother::smoothPoints(dispatch_queue_t, std::vector<swan::RouteSmootherEpoch> &, std::vector<CLClientLocation> &, CLMotionActivity::Type, const BOOL, const BOOL, std::vector<ReconstructionIntervalData> &)", "%s\n", v131);
            if (v131 != buf) {
              free(v131);
            }
            char v16 = v132;
          }
          sub_10081D848((uint64_t)__dst, v59);
        }
      }
      sub_100816ABC((uint64_t **)a3, (uint64_t *)&v161);
      __int16 v92 = *(double **)a3;
      *(_OWORD *)a3 = *(_OWORD *)__dst;
      *(void *)__dst = v92;
      *(void *)&__dst[8] = v92;
      uint64_t v93 = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = *(void *)&__dst[16];
      *(void *)&__dst[16] = v93;
      std::string::assign(&v161, "CombinedPreSmoothed");
      if (*(void *)__dst)
      {
        *(void *)&__dst[8] = *(void *)__dst;
        operator delete(*(void **)__dst);
      }
      *(void *)buf = v164;
      sub_1001DCABC((void ***)buf);
      goto LABEL_143;
    }
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    unint64_t v34 = 0;
    while (1)
    {
      memset(buf, 0, 24);
      sub_10081D4CC((uint64_t *)v164, (uint64_t)buf);
      if (*(void *)buf)
      {
        *(void *)&uint8_t buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
      if ((unint64_t)[*v31 count] > 1) {
        break;
      }
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      char v35 = qword_102419418;
      if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
      {
        id v36 = [*v31 count];
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v34;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&unsigned char buf[14] = v36;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "CLRS,warning,interval %zu has fewer than 2 location samples, cannot reconstruct route,count,%zu", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419410 != -1) {
          dispatch_once(&qword_102419410, &stru_1022CADF0);
        }
        id v37 = [*v31 count];
        *(_DWORD *)__dst = 134218240;
        *(void *)&__dst[4] = v34;
        *(_WORD *)&__dst[12] = 2048;
        *(void *)&__dst[14] = v37;
        int v38 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPoints(dispatch_queue_t, std::vector<swan::RouteSmootherEpoch> &, std::vector<CLClientLocation> &, CLMotionActivity::Type, const BOOL, const BOOL, std::vector<ReconstructionIntervalData> &)", "%s\n", v38);
        if (v38 != buf) {
          free(v38);
        }
      }
LABEL_87:
      ++v34;
      v31 += 2;
      v32 += 24;
      if (v31 == v30) {
        goto LABEL_114;
      }
    }
    sub_100134750(__dst, "Interval-");
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    uint64_t v39 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
    {
      if (*v31) {
        id v40 = [*v31 count];
      }
      else {
        id v40 = 0;
      }
      id v41 = v31[1];
      if (v41) {
        id v41 = [v41 count];
      }
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = v40;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&unsigned char buf[14] = v41;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "CLRS,reconstructRoute,intervalEpochs,locationSamples,size,%zu,odometrySamples,size,%zu", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      if (*v31) {
        id v50 = [*v31 count];
      }
      else {
        id v50 = 0;
      }
      id v52 = v31[1];
      if (v52) {
        id v52 = [v52 count];
      }
      int v167 = 134218240;
      unint64_t v168 = (unint64_t)v50;
      __int16 v169 = 2048;
      uint64_t v170 = (uint64_t)v52;
      int v53 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPoints(dispatch_queue_t, std::vector<swan::RouteSmootherEpoch> &, std::vector<CLClientLocation> &, CLMotionActivity::Type, const BOOL, const BOOL, std::vector<ReconstructionIntervalData> &)", "%s\n", v53);
      if (v53 != buf) {
        free(v53);
      }
    }
    std::to_string((std::string *)buf, v34);
    if (__dst[23] >= 0) {
      int v42 = __dst;
    }
    else {
      int v42 = *(const std::string::value_type **)__dst;
    }
    if (__dst[23] >= 0) {
      std::string::size_type v43 = __dst[23];
    }
    else {
      std::string::size_type v43 = *(void *)&__dst[8];
    }
    int v44 = std::string::insert((std::string *)buf, 0, v42, v43);
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    std::string::size_type v154 = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)unint64_t v153 = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    BOOL v46 = sub_10081A744((uint64_t)a1, (uint64_t)v153, a5, *(void *)v164 + v32, v31, a7);
    if (SHIBYTE(v154) < 0) {
      operator delete(v153[0]);
    }
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if (v46)
      {
LABEL_84:
        uint64_t v49 = *(void *)(*(void *)v164 + v32);
        uint64_t v48 = *(void *)(*(void *)v164 + v32 + 8);
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
        v33 += 0x6DB6DB6DB6DB6DB7 * ((v48 - v49) >> 4);
        goto LABEL_87;
      }
    }
    else if (v46)
    {
      goto LABEL_84;
    }
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    int v47 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = v34;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "CLRS,Interval Route Reconstruction before smoothing failed,interval,%zu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      int v167 = 134217984;
      unint64_t v168 = v34;
      int v51 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLSmootherErrorCode CLRouteSmoother::smoothPoints(dispatch_queue_t, std::vector<swan::RouteSmootherEpoch> &, std::vector<CLClientLocation> &, CLMotionActivity::Type, const BOOL, const BOOL, std::vector<ReconstructionIntervalData> &)", "%s\n", v51);
      if (v51 != buf) {
        free(v51);
      }
    }
    sub_10187A1C8(a2, (uint64_t)"routesmoother", (uint64_t)"autostart_reconstruction_failure", 0);
    goto LABEL_84;
  }
  a1[51] = 0;
  *(void *)&v164[8] = 0;
  *(void *)int v164 = 0;
  if (SHIBYTE(v159) < 0)
  {
    sub_1000DC48C(v155, v158[0], (unint64_t)v158[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v155 = *(_OWORD *)v158;
    uint64_t v156 = v159;
  }
  BOOL v54 = sub_10081A744((uint64_t)a1, (uint64_t)v155, a5, a3, (id *)v164, a7);
  BOOL v55 = v54;
  if (SHIBYTE(v156) < 0)
  {
    operator delete(v155[0]);
    if (v55) {
      goto LABEL_105;
    }
  }
  else if (v54)
  {
LABEL_105:
    std::string::assign(&v161, "Reconstructed");
    goto LABEL_143;
  }
  if (qword_102419410 != -1) {
    dispatch_once(&qword_102419410, &stru_1022CADF0);
  }
  int v56 = qword_102419418;
  if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "CLRS,Route Reconstruction before smoothing failed", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    *(_WORD *)__dst = 0;
    uint64_t v129 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLSmootherErrorCode CLRouteSmoother::smoothPoints(dispatch_queue_t, std::vector<swan::RouteSmootherEpoch> &, std::vector<CLClientLocation> &, CLMotionActivity::Type, const BOOL, const BOOL, std::vector<ReconstructionIntervalData> &)", "%s\n", v129);
    if (v129 != buf) {
      free(v129);
    }
  }
  sub_10187A1C8(a2, (uint64_t)"routesmoother", (uint64_t)"pasture_reconstruction_failure", 0);
LABEL_143:
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
    sub_1000DC48C(&v152, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
  }
  else {
    std::string v152 = v161;
  }
  uint64_t v94 = sub_10081D88C((uint64_t)a1);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
  int v95 = *a8;
  __int16 v96 = a8[1];
  if (*a8 != v96)
  {
    do
    {
      int v97 = *(double **)a3;
      __int16 v98 = *(double **)(a3 + 8);
      while (v97 != v98)
      {
        if ((unint64_t)[v95[1] count] >= 2)
        {
          double v99 = *v97;
          [[[v95[1] firstObject] cfAbsTimestamp] timeIntervalSinceReferenceDate];
          if (v99 >= v100)
          {
            double v101 = *v97;
            [objc_msgSend(objc_msgSend(objc_msgSend(v95[1], "lastObject"), "cfAbsTimestamp"), "timeIntervalSinceReferenceDate"]
            if (v101 <= v102) {
              *((_OWORD *)v97 + 2) = xmmword_101D1C570;
            }
          }
        }
        if ((unint64_t)[*v95 count] >= 2)
        {
          double v103 = *v97;
          [objc_msgSend(objc_msgSend(*v95, "firstObject"), "timestamp") timeIntervalSinceReferenceDate];
          if (v103 >= v104)
          {
            double v105 = *v97;
            [objc_msgSend(objc_msgSend(*v95, "lastObject"), "timestamp") timeIntervalSinceReferenceDate];
            if (v105 <= v106) {
              *((_OWORD *)v97 + 2) = xmmword_101D1C570;
            }
          }
        }
        v97 += 14;
      }
      v95 += 2;
    }
    while (v95 != v96);
  }
  if (a1[40]
    && (sub_100134750(buf, "Smoothed"), sub_100816ABC((uint64_t **)a3, (uint64_t *)buf), (buf[23] & 0x80000000) != 0))
  {
    operator delete(*(void **)buf);
    if (v94) {
      goto LABEL_164;
    }
  }
  else if (v94)
  {
LABEL_164:
    double v107 = 0.0;
    if (v20 >= 0.0) {
      double v107 = vabdd_f64(sub_10016C458(), v20) * 1000.0;
    }
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    __int16 v108 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(void *)&buf[20] = v94;
      *(_WORD *)&buf[28] = 1026;
      *(_DWORD *)uint64_t v173 = (int)v107;
      _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRS,warning,smoother returned error\", \"smootherErrorCode\":%{public, location:CLSmootherErrorCode}lld, \"elapsedTime,msec\":%{public}d}", buf, 0x22u);
    }
    if (sub_100817900())
    {
      v140 = _NSConcreteStackBlock;
      uint64_t v141 = 3221225472;
      unint64_t v142 = sub_100820AB4;
      uint64_t v143 = &unk_1022CAD48;
      int v149 = a5;
      double v144 = v21;
      uint64_t v145 = a3;
      double v146 = v107;
      char v150 = v134;
      char v151 = a7;
      uint64_t v147 = v94;
      unint64_t v148 = a8;
      AnalyticsSendEventLazy();
    }
    goto LABEL_198;
  }
  if (!a1[45]) {
    goto LABEL_182;
  }
  int v109 = std::string::assign(&v160, "PostSmt");
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
    int v109 = sub_1000DC48C(&v139, v160.__r_.__value_.__l.__data_, v160.__r_.__value_.__l.__size_);
  }
  else {
    std::string v139 = v160;
  }
  BOOL v110 = sub_100819938((uint64_t)v109, (uint64_t *)&v139, a5, (void *)a3);
  BOOL v111 = v110;
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v139.__r_.__value_.__l.__data_);
    if (v111)
    {
LABEL_179:
      if (a1[46])
      {
        std::string::assign(&v161, "PostMMRe");
        if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
          sub_1000DC48C(&v138, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
        }
        else {
          std::string v138 = v161;
        }
        uint64_t v94 = sub_10081D88C((uint64_t)a1);
        if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v138.__r_.__value_.__l.__data_);
        }
        if (v94)
        {
          if (qword_102419410 != -1) {
            dispatch_once(&qword_102419410, &stru_1022CADF0);
          }
          __int16 v117 = qword_102419418;
          if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEBUG, "CLRS,resmoother returned error", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419410 != -1) {
              dispatch_once(&qword_102419410, &stru_1022CADF0);
            }
            *(_WORD *)int v164 = 0;
            int v118 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPoints(dispatch_queue_t, std::vector<swan::RouteSmootherEpoch> &, std::vector<CLClientLocation> &, CLMotionActivity::Type, const BOOL, const BOOL, std::vector<ReconstructionIntervalData> &)", "%s\n", v118);
            if (v118 != buf) {
              free(v118);
            }
          }
        }
        goto LABEL_183;
      }
LABEL_182:
      uint64_t v94 = 0;
LABEL_183:
      sub_100820CF0((uint64_t **)a3, a4);
      double v112 = 0.0;
      if (v20 >= 0.0) {
        double v112 = vabdd_f64(sub_10016C458(), v20) * 1000.0;
      }
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      unsigned int v113 = qword_102419418;
      if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v114 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
        *(_DWORD *)buf = 67241216;
        *(_DWORD *)&uint8_t buf[4] = a5;
        *(_WORD *)&uint8_t buf[8] = 2050;
        *(double *)&buf[10] = v21;
        *(_WORD *)&buf[18] = 2050;
        *(void *)&buf[20] = v114;
        *(_WORD *)&buf[28] = 2048;
        *(void *)uint64_t v173 = v94;
        *(_WORD *)&v173[8] = 2050;
        double v174 = v112;
        _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEFAULT, "CLRS,Finished smoothing for workoutActivity,%{public}u,workoutDuration,%{public}.0lf,dataCount,%{public}zu,returnCode,%ld,elapsedTime,%{public}.0f,msec", buf, 0x30u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419410 != -1) {
          dispatch_once(&qword_102419410, &stru_1022CADF0);
        }
        uint64_t v127 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
        *(_DWORD *)int v164 = 67241216;
        *(_DWORD *)&v164[4] = a5;
        *(_WORD *)&v164[8] = 2050;
        *(double *)&v164[10] = v21;
        *(_WORD *)&v164[18] = 2050;
        *(void *)&v164[20] = v127;
        *(_WORD *)&v164[28] = 2048;
        *(void *)int v165 = v94;
        *(_WORD *)&v165[8] = 2050;
        double v166 = v112;
        unint64_t v128 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPoints(dispatch_queue_t, std::vector<swan::RouteSmootherEpoch> &, std::vector<CLClientLocation> &, CLMotionActivity::Type, const BOOL, const BOOL, std::vector<ReconstructionIntervalData> &)", "%s\n", v128);
        if (v128 != buf) {
          free(v128);
        }
      }
      AnalyticsSendEventLazy();
      goto LABEL_198;
    }
  }
  else if (v110)
  {
    goto LABEL_179;
  }
  if (qword_102419410 != -1) {
    dispatch_once(&qword_102419410, &stru_1022CADF0);
  }
  unint64_t v115 = qword_102419418;
  if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEBUG, "CLRS,CLMM mapMatching after smoothing failed", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    *(_WORD *)int v164 = 0;
    uint64_t v130 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPoints(dispatch_queue_t, std::vector<swan::RouteSmootherEpoch> &, std::vector<CLClientLocation> &, CLMotionActivity::Type, const BOOL, const BOOL, std::vector<ReconstructionIntervalData> &)", "%s\n", v130);
    if (v130 != buf) {
      free(v130);
    }
  }
  uint64_t v94 = 0;
LABEL_198:
  if (SHIBYTE(v159) < 0) {
    operator delete(v158[0]);
  }
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v160.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v161.__r_.__value_.__l.__data_);
  }

  return v94;
}

void sub_100819720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a70 < 0) {
    operator delete(__p);
  }
  if (a72 < 0) {
    operator delete(a71);
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a73);
  }

  _Unwind_Resume(a1);
}

BOOL sub_100819938(uint64_t a1, uint64_t *a2, int a3, void *a4)
{
  if (qword_102419410 != -1) {
    dispatch_once(&qword_102419410, &stru_1022CADF0);
  }
  int v6 = qword_102419418;
  if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
  {
    char v7 = a2;
    if (*((char *)a2 + 23) < 0) {
      char v7 = (uint64_t *)*a2;
    }
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a4[1] - *a4) >> 4);
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = a3;
    __int16 v31 = 2050;
    uint64_t v32 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLRS,CLMM mapMatching,%{public}s,workout,%{public}u,dataCount,%{public}zu", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    char v16 = a2;
    if (*((char *)a2 + 23) < 0) {
      char v16 = (uint64_t *)*a2;
    }
    uint64_t v17 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a4[1] - *a4) >> 4);
    int v24 = 136446722;
    char v25 = v16;
    __int16 v26 = 1026;
    int v27 = a3;
    __int16 v28 = 2050;
    uint64_t v29 = v17;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRouteSmoother::mapMatchPoints(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &)", "%s\n", v18);
    if (v18 != buf) {
      free(v18);
    }
  }
  char isTypeCycling = CLMotionActivity::isTypeCycling();
  char isTypePedestrian = CLMotionActivity::isTypePedestrian();
  if (isTypeCycling) {
    char v10 = 1;
  }
  else {
    char v10 = isTypePedestrian;
  }
  if (v10)
  {
    sub_10016C458();
    sub_10082B2C8(&isTypeCycling, buf);
    char v11 = *(std::__shared_weak_count **)&buf[8];
    uint64_t v22 = 0;
    BOOL v12 = *(void *)buf != 0;
    if (*(void *)buf)
    {
      sub_101188110(*(uint64_t *)buf, 0, 0, 350);
      operator new();
    }
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    char v14 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLRS,CLMM,Failed to create geometry pointer", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      LOWORD(v24) = 0;
      double v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRouteSmoother::mapMatchPoints(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &)", "%s\n", v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    sub_100EBBCE8(&v22);
    if (v11) {
      sub_1000DB0A0(v11);
    }
  }
  else
  {
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    char v13 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLRS,CLMM,Unsupported activity type", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      LOWORD(v24) = 0;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRouteSmoother::mapMatchPoints(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &)", "%s\n", v19);
      if (v19 != buf) {
        free(v19);
      }
    }
    return 0;
  }
  return v12;
}

void sub_10081A654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_100EBBCE8(&a31);
  if (v31) {
    sub_1000DB0A0(v31);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10081A744(uint64_t a1, uint64_t a2, int a3, uint64_t a4, id *a5, unsigned int a6)
{
  int v334 = a3;
  double v285 = sub_10016C458();
  double v8 = 1.0;
  double v9 = 1.0;
  if ((unint64_t)[a5[1] count] >= 2)
  {
    [objc_msgSend(objc_msgSend(objc_msgSend(a5[1], "lastObject"), "cfAbsTimestamp"), "timeIntervalSinceReferenceDate");
    double v11 = v10;
    [objc_msgSend(objc_msgSend(objc_msgSend(a5[1], "firstObject"), "cfAbsTimestamp"), "timeIntervalSinceReferenceDate"]
    double v9 = vabdd_f64(v11, v12);
  }
  if ((unint64_t)[*a5 count] >= 2)
  {
    [objc_msgSend(objc_msgSend(objc_msgSend(*a5, "lastObject"), "timestamp"), "timeIntervalSinceReferenceDate");
    double v14 = v13;
    [[[*a5 firstObject] timestamp] timeIntervalSinceReferenceDate];
    double v8 = vabdd_f64(v14, v15);
  }
  double v292 = 1.0;
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4)) >= 2) {
    double v292 = vabdd_f64(*(double *)(*(void *)a4 + 16 * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4) - 112), **(double **)a4);
  }
  if (*(unsigned char *)(a1 + 51))
  {
    if (v9 >= v8) {
      double v16 = v9;
    }
    else {
      double v16 = v8;
    }
    double v292 = v16;
    [*a5 count];
  }
  if (!*(unsigned char *)(a1 + 64) || *(double *)(a1 + 56) < 1.0)
  {
    double v17 = v292 / 10000.0;
    if (v292 / 10000.0 < 1.0) {
      double v17 = 1.0;
    }
    if (v17 > 5.0) {
      double v17 = 5.0;
    }
    *(double *)(a1 + 56) = v17;
    *(unsigned char *)(a1 + 64) = 1;
  }
  if (qword_102419410 != -1) {
    dispatch_once(&qword_102419410, &stru_1022CADF0);
  }
  uint64_t v18 = qword_102419418;
  if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = a2;
    if (*(char *)(a2 + 23) < 0) {
      uint64_t v19 = *(void *)a2;
    }
    int v20 = *(unsigned __int8 *)(a1 + 51);
    if (*a5) {
      id v21 = [*a5 count];
    }
    else {
      id v21 = 0;
    }
    id v22 = a5[1];
    if (v22) {
      id v22 = [v22 count];
    }
    if (*(unsigned char *)(a1 + 64)) {
      double v23 = *(double *)(a1 + 56);
    }
    else {
      double v23 = 1.0;
    }
    *(_DWORD *)buf = 136447746;
    *(void *)&uint8_t buf[4] = v19;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = v20;
    *(_WORD *)&unsigned char buf[18] = 1026;
    *(_DWORD *)&buf[20] = a3;
    *(_WORD *)double v357 = 2050;
    *(void *)&v357[2] = v21;
    *(_WORD *)&v357[10] = 2050;
    *(void *)&v357[12] = v22;
    *(_WORD *)double v358 = 2050;
    *(double *)&v358[2] = v292;
    *(_WORD *)&v358[10] = 2050;
    *(double *)&v358[12] = v23;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "CLRS,%{public}s,reconstructRoute,useTsp,%{public}d,workout,%{public}u,locationSamples,count,%{public}zu,odometrySamples,count,%{public}zu,workoutDurationSec,%{public}.1lf,fTimeBetweenReconstructedPointsSeconds,%{public}.1lf", buf, 0x40u);
  }
  uint64_t v290 = a5;
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    uint64_t v262 = a2;
    double v261 = a5;
    if (*(char *)(a2 + 23) < 0) {
      uint64_t v262 = *(void *)a2;
    }
    int v263 = *(unsigned __int8 *)(a1 + 51);
    if (*a5)
    {
      id v264 = [*a5 count];
      double v261 = a5;
    }
    else
    {
      id v264 = 0;
    }
    id v265 = v261[1];
    if (v265) {
      id v265 = [v265 count];
    }
    if (*(unsigned char *)(a1 + 64)) {
      double v266 = *(double *)(a1 + 56);
    }
    else {
      double v266 = 1.0;
    }
    *(_DWORD *)double v347 = 136447746;
    *(void *)&v347[4] = v262;
    *(_WORD *)&v347[12] = 1026;
    *(_DWORD *)&v347[14] = v263;
    *(_WORD *)&v347[18] = 1026;
    *(_DWORD *)&v347[20] = a3;
    *(_WORD *)&v347[24] = 2050;
    *(void *)&v347[26] = v264;
    *(_WORD *)&v347[34] = 2050;
    *(void *)&v347[36] = v265;
    *(_WORD *)&v347[44] = 2050;
    *(double *)&v347[46] = v292;
    *(_WORD *)&v347[54] = 2050;
    *(double *)&v347[56] = v266;
    float v267 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)", "%s\n", v267);
    if (v267 != buf) {
      free(v267);
    }
  }
  id v24 = objc_alloc_init((Class)NSMutableArray);
  if (*(unsigned char *)(a1 + 51))
  {
    long long v332 = 0u;
    long long v333 = 0u;
    long long v330 = 0u;
    long long v331 = 0u;
    id v25 = *a5;
    id v26 = [*a5 countByEnumeratingWithState:&v330 objects:v355 count:16];
    if (v26)
    {
      uint64_t v27 = *(void *)v331;
      do
      {
        for (unint64_t i = 0; i != v26; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v331 != v27) {
            objc_enumerationMutation(v25);
          }
          uint64_t v29 = *(void **)(*((void *)&v330 + 1) + 8 * i);
          id v30 = objc_alloc((Class)CLTripSegmentLocation);
          id v31 = [v29 timestamp];
          [v29 coordinate];
          double v295 = v32;
          [v29 coordinate];
          double v34 = v33;
          [v29 horizontalAccuracy];
          double v36 = v35;
          [v29 course];
          double v38 = v37;
          [v29 courseAccuracy];
          double v40 = v39;
          [v29 speed];
          double v42 = v41;
          [v29 speedAccuracy];
          double v44 = v43;
          [v29 altitude];
          double v46 = v45;
          [v29 verticalAccuracy];
          id v48 = [v30 initWithTime:v31 type:[v29 type] latitude:v295 horizontalAccuracy:v34 course:v36 courseAccuracy:v38 speed:v40 speedAccuracy:v42 altitude:v44 altitudeAccuracy:v46 locType:v47];
          [v48 setSignalEnvironmentType:[v29 signalEnvironmentType]];
          [v24 addObject:v48];
        }
        id v26 = [v25 countByEnumeratingWithState:&v330 objects:v355 count:16];
      }
      while (v26);
    }
  }
  uint64_t v49 = a1;
  if (*(unsigned char *)(a1 + 40))
  {
    if (*(unsigned char *)(a1 + 51)) {
      sub_100816DB4(v24, (uint64_t *)a2);
    }
    else {
      sub_100816ABC((uint64_t **)a4, (uint64_t *)a2);
    }
    uint64_t v49 = a1;
  }
  uint64_t v326 = 0;
  float v327 = &v326;
  uint64_t v328 = 0x2020000000;
  char v329 = 0;
  if (*(unsigned char *)(v49 + 51))
  {
    if (a3 == 4)
    {
      if ([v24 count])
      {
        id v234 = [objc_alloc((Class)CLTripSegmentInputData) initWithTripSegmentID:objc_alloc_init((Class)NSUUID) isFinalPart:1 modeOfTransport:2 tripLocations:v24 startTripLocation:[v24 firstObject] stopTripLocation:[v24 lastObject] inertialOdometryData:v290[1]];
        *(void *)&v347[*(void *)(*(void *)v347 - 24)] = v235;
        double v236 = (std::ios_base *)&v347[*(void *)(*(void *)v347 - 24)];
        std::ios_base::init(v236, &v347[8]);
        v236[1].__vftable = 0;
        v236[1].__fmtflags_ = -1;
        std::filebuf::basic_filebuf();
        float v237 = v290;
        v309.__r_.__value_.__r.__words[0] = 0;
        v309.__r_.__value_.__l.__size_ = (std::string::size_type)&v309;
        v309.__r_.__value_.__r.__words[2] = 0x3052000000;
        v310 = sub_100177AC8;
        uint64_t v311 = (uint64_t)sub_100177404;
        dispatch_semaphore_t v312 = 0;
        dispatch_semaphore_t v312 = dispatch_semaphore_create(0);
        id v238 = objc_alloc_init((Class)CLTripSegmentProcessorOptions);
        [v238 setNetworkAccessAllowed:a6];
        [v238 setRunInertialIntegrator:*(unsigned __int8 *)(a1 + 43)];
        [v238 setRunMapIntegrator:*(unsigned __int8 *)(a1 + 44)];
        if (!*(unsigned char *)(a1 + 64)) {
          sub_10020D700();
        }
        [v238 setTimeBetweenReconstructedPointsSeconds:*(double *)(a1 + 56)];
        [v238 setTripSegmentRecorderLoggingDirectory:@"/var/mobile/Library/Logs/locationd/routesmoother"];
        [v238 setUseParticleMapMatcherForSnappingInMapIntegrator:1];
        [v238 setUseXPCService:*(unsigned __int8 *)(a1 + 52)];
        v325[0] = _NSConcreteStackBlock;
        v325[1] = 3221225472;
        v325[2] = sub_100821ADC;
        v325[3] = &unk_1022CAD70;
        v325[4] = &v326;
        v325[5] = a4;
        v324[0] = _NSConcreteStackBlock;
        v324[1] = 3221225472;
        v324[2] = sub_100822500;
        v324[3] = &unk_1022CAD98;
        v324[4] = &v326;
        v324[5] = &v309;
        [objc_alloc_init((Class)CLTripSegmentProcessorManager) processTripSegmentData:v234 withOptions:v238 outputHandler:v325 completionHandler:v324];
        double v239 = *(NSObject **)(v309.__r_.__value_.__l.__size_ + 40);
        dispatch_time_t v240 = dispatch_time(0, 25000000000);
        if (dispatch_semaphore_wait(v239, v240))
        {
          *((unsigned char *)v327 + 24) = 1;
          if (qword_102419410 != -1) {
            dispatch_once(&qword_102419410, &stru_1022CADF0);
          }
          double v241 = qword_102419418;
          if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v241, OS_LOG_TYPE_ERROR, "CLRS,CLTSP,processTripSegmentData timed out", buf, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419410 != -1) {
              dispatch_once(&qword_102419410, &stru_1022CADF0);
            }
            LOWORD(v335) = 0;
            v280 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)", "%s\n", v280);
            if (v280 != buf) {
              free(v280);
            }
            float v237 = v290;
          }
        }
        if (*((unsigned char *)v327 + 24)) {
          sub_10082172C(*v237, (char **)a4);
        }
        double v242 = *(NSObject **)(v309.__r_.__value_.__l.__size_ + 40);
        if (v242) {
          dispatch_release(v242);
        }
        _Block_object_dispose(&v309, 8);
        std::filebuf::~filebuf();
        std::ostream::~ostream();
        std::ios::~ios();
        double v243 = (void **)a2;
        goto LABEL_286;
      }
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      float v249 = qword_102419418;
      if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v249, OS_LOG_TYPE_ERROR, "CLRS,tslSampleArray count < 1, cannot reconstruct", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_284;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      *(_WORD *)double v347 = 0;
      float v233 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)", "%s\n", v233);
    }
    else
    {
      if (a3 == 8 || a3 == 6)
      {
        sub_10082172C(*v290, (char **)a4);
        BOOL v50 = 1;
        goto LABEL_285;
      }
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      double v244 = qword_102419418;
      if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = a3;
        _os_log_impl((void *)&_mh_execute_header, v244, OS_LOG_TYPE_DEFAULT, "CLRS,will not reconstruct route,not a supported workout type,%{public}u", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_284;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      *(_DWORD *)double v347 = 67240192;
      *(_DWORD *)&v347[4] = a3;
      float v233 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)", "%s\n", v233);
    }
LABEL_263:
    if (v233 != buf) {
      free(v233);
    }
    goto LABEL_284;
  }
  int isTypeCycling = CLMotionActivity::isTypeCycling();
  if (((CLMotionActivity::isTypePedestrian() | isTypeCycling) & 1) == 0)
  {
    *((unsigned char *)v327 + 24) = 1;
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    float v232 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v232, OS_LOG_TYPE_DEBUG, "CLRS,reconstruction failed,unsupported activity type", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_284;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    *(_WORD *)double v347 = 0;
    float v233 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)", "%s\n", v233);
    goto LABEL_263;
  }
  float v322 = 0;
  std::string __p = 0;
  unint64_t v323 = 0;
  float v318 = 0;
  unsigned int v319 = 0;
  unint64_t v320 = 0;
  memset(&v309, 0, sizeof(v309));
  LODWORD(v310) = 0;
  uint64_t v311 = 0x3FE0000000000000;
  LOWORD(v312) = 0;
  long long v313 = xmmword_101D474D0;
  __int16 v314 = 1;
  long long v315 = xmmword_101D474E0;
  __int16 v316 = 1;
  int v317 = 0;
  std::string::assign(&v309, "CLRouteSmootherPedestrian");
  LODWORD(v310) = 2;
  uint64_t v311 = 0x3FE0000000000000;
  LOWORD(v312) = 1;
  LOBYTE(v314) = a6;
  HIBYTE(v314) = *(unsigned char *)(a1 + 50);
  long long v315 = xmmword_101D474F0;
  if (qword_102419410 != -1) {
    dispatch_once(&qword_102419410, &stru_1022CADF0);
  }
  id v52 = qword_102419418;
  if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240960;
    *(_DWORD *)&uint8_t buf[4] = BYTE1(v312);
    *(_WORD *)&uint8_t buf[8] = 2050;
    *(void *)&buf[10] = v311;
    *(_WORD *)&unsigned char buf[18] = 1026;
    *(_DWORD *)&buf[20] = v312;
    *(_WORD *)double v357 = 1026;
    *(_DWORD *)&v357[2] = v314;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "CLRS,reconstruction,CLGeoMapFeatureGeometrySettings,fUseXPCServiceForDataQuery,%{public}d,fIntersectionRoadSearchDistance,%{public}.1lf,fStoringRoadConnectionEnabled,%{public}d,fAllowNetworkTileDownload,%{public}d", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    *(_DWORD *)double v347 = 67240960;
    *(_DWORD *)&v347[4] = BYTE1(v312);
    *(_WORD *)&v347[8] = 2050;
    *(void *)&v347[10] = v311;
    *(_WORD *)&v347[18] = 1026;
    *(_DWORD *)&v347[20] = v312;
    *(_WORD *)&v347[24] = 1026;
    *(_DWORD *)&v347[26] = v314;
    float v268 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)", "%s\n", v268);
    if (v268 != buf) {
      free(v268);
    }
  }
  sub_10082AB54((uint64_t **)&v309, &v307);
  sub_10016C458();
  int v53 = *(double **)a4;
  double v54 = 0.0;
  double v283 = 0.0;
  double v55 = 0.0;
  double v56 = 0.0;
  double v57 = 0.0;
  double v58 = 0.0;
  uint64_t v59 = *(void *)(a4 + 8) - *(void *)a4;
  if (!v59)
  {
LABEL_246:
    double v243 = (void **)a2;
    if (v285 >= 0.0) {
      double v283 = vabdd_f64(sub_10016C458(), v285) * 1000.0;
    }
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    double v245 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v246 = a2;
      if (*(char *)(a2 + 23) < 0) {
        uint64_t v246 = *(void *)a2;
      }
      uint64_t v247 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4);
      if (*(unsigned char *)(a1 + 64)) {
        double v248 = *(double *)(a1 + 56);
      }
      else {
        double v248 = 1.0;
      }
      *(_DWORD *)buf = 136448514;
      *(void *)&uint8_t buf[4] = v246;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&unsigned char buf[14] = v247;
      *(_WORD *)&buf[22] = 2050;
      *(double *)double v357 = v283;
      *(_WORD *)&v357[8] = 2050;
      *(double *)&v357[10] = v55;
      *(_WORD *)&v357[18] = 2050;
      *(double *)double v358 = v56;
      *(_WORD *)&v358[8] = 2050;
      *(double *)&v358[10] = v57;
      *(_WORD *)&v358[18] = 2050;
      double v359 = v58;
      *(_WORD *)double v360 = 1026;
      *(_DWORD *)&v360[2] = v334;
      __int16 v361 = 2050;
      double v362 = v248;
      __int16 v363 = 2050;
      double v364 = v292;
      _os_log_impl((void *)&_mh_execute_header, v245, OS_LOG_TYPE_DEFAULT, "CLRS,type,%{public}s,reconstruction complete,dataCount,%{public}zu,totalElapsedTime,%{public}.0lf,msec,bufferMapDataElapsedTime,%{public}.0lf,msec,findRoadsNearElapsedTime,%{public}.0lf,msec,snapLocationsElapsedTime,%{public}.0lf,msec,buildRouteElapsedTime,%{public}.0lf,msec,workout,%{public}u,timeBetweenSamplesS,%{public}.1lf,workoutDurationSec,%{public}.1lf", buf, 0x62u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      uint64_t v277 = a2;
      if (*(char *)(a2 + 23) < 0) {
        uint64_t v277 = *(void *)a2;
      }
      uint64_t v278 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4);
      if (*(unsigned char *)(a1 + 64)) {
        double v279 = *(double *)(a1 + 56);
      }
      else {
        double v279 = 1.0;
      }
      *(_DWORD *)double v347 = 136448514;
      *(void *)&v347[4] = v277;
      *(_WORD *)&v347[12] = 2050;
      *(void *)&v347[14] = v278;
      *(_WORD *)&v347[22] = 2050;
      *(double *)&v347[24] = v283;
      *(_WORD *)&v347[32] = 2050;
      *(double *)&v347[34] = v55;
      *(_WORD *)&v347[42] = 2050;
      *(double *)&v347[44] = v56;
      *(_WORD *)&v347[52] = 2050;
      *(double *)&v347[54] = v57;
      *(_WORD *)&v347[62] = 2050;
      *(double *)&long long v348 = v58;
      WORD4(v348) = 1026;
      *(_DWORD *)((char *)&v348 + 10) = v334;
      HIWORD(v348) = 2050;
      *(double *)double v349 = v279;
      *(_WORD *)&v349[8] = 2050;
      *(double *)&v349[10] = v292;
      v281 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)", "%s\n", v281);
      if (v281 != buf) {
        free(v281);
      }
      double v243 = (void **)a2;
    }
    if (&__p != (void **)a4) {
      sub_10082A950((char *)a4, (char *)__p, (uint64_t)v322, 0x6DB6DB6DB6DB6DB7 * ((v322 - (unsigned char *)__p) >> 4));
    }
    int v114 = 0;
    goto LABEL_277;
  }
  uint64_t v60 = 0;
  unint64_t v287 = 0;
  unint64_t v61 = 0x6DB6DB6DB6DB6DB7 * (v59 >> 4);
  while (1)
  {
    uint64_t v62 = &v53[14 * v60];
    unint64_t v296 = v60 + 1;
    if (v61 <= v60 + 1)
    {
      double v63 = v54;
    }
    else
    {
      double v63 = *v62;
      double v64 = vabdd_f64(v53[14 * v60 + 14], *v62);
      double v65 = vabdd_f64(*v62, v54);
      if (v64 < 2.0) {
        unint64_t v66 = v287 + 1;
      }
      else {
        unint64_t v66 = 0;
      }
      BOOL v67 = v64 < 5.0;
      unint64_t v287 = v66;
      if (v66 > 0x1E) {
        BOOL v67 = v65 < 30.0;
      }
      if (v67)
      {
        double v63 = v54;
        goto LABEL_202;
      }
    }
    int v68 = sub_100821338(&v334);
    double v69 = 800.0;
    if (v68 == 3) {
      double v69 = 1600.0;
    }
    double v70 = v68 == 1 ? 400.0 : v69;
    double v71 = sub_10016C458();
    long long v72 = &v53[14 * v60];
    CLLocationDegrees v74 = v72[1];
    uint64_t v73 = v72 + 1;
    long long v75 = v73 + 1;
    if ((sub_100D20C24(v307, 1, 0, 0, *v62, v74, v73[1], v70) & 1) == 0) {
      break;
    }
    double v76 = 0.0;
    if (v71 >= 0.0) {
      double v76 = vabdd_f64(sub_10016C458(), v71) * 1000.0;
    }
    double v77 = sub_10016C458();
    uint64_t v304 = 0;
    uint64_t v305 = 0;
    uint64_t v306 = 0;
    sub_100D213E0(v307, &v304, 1, *v73, *v75, v70);
    double v291 = 0.0;
    if (v77 >= 0.0) {
      double v291 = vabdd_f64(sub_10016C458(), v77) * 1000.0;
    }
    if (v304 == v305)
    {
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      long long v84 = qword_102419418;
      if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_INFO))
      {
        double v85 = *v73;
        double v86 = *v75;
        *(_DWORD *)buf = 134283777;
        *(double *)&uint8_t buf[4] = v85;
        *(_WORD *)&unsigned char buf[12] = 2049;
        *(double *)&unsigned char buf[14] = v86;
        _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_INFO, "CLRS,no roads near location,%{private}.7lf,%{private}.7lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419410 != -1) {
          dispatch_once(&qword_102419410, &stru_1022CADF0);
        }
        double v228 = *v73;
        double v229 = *v75;
        *(_DWORD *)double v347 = 134283777;
        *(double *)&v347[4] = v228;
        *(_WORD *)&v347[12] = 2049;
        *(double *)&v347[14] = v229;
        __int16 v83 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)", "%s\n", v83);
        goto LABEL_211;
      }
    }
    else
    {
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      long long v78 = qword_102419418;
      if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_INFO))
      {
        double v79 = *v73;
        double v80 = *v75;
        *(_DWORD *)buf = 134349569;
        *(void *)&uint8_t buf[4] = (v305 - v304) >> 4;
        *(_WORD *)&unsigned char buf[12] = 2049;
        *(double *)&unsigned char buf[14] = v79;
        *(_WORD *)&buf[22] = 2049;
        *(double *)double v357 = v80;
        _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_INFO, "CLRS,%{public}lu roads near location,%{private}.7lf,%{private}.7lf", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419410 != -1) {
          dispatch_once(&qword_102419410, &stru_1022CADF0);
        }
        double v81 = *v73;
        double v82 = *v75;
        *(_DWORD *)double v347 = 134349569;
        *(void *)&v347[4] = (v305 - v304) >> 4;
        *(_WORD *)&v347[12] = 2049;
        *(double *)&v347[14] = v81;
        *(_WORD *)&v347[22] = 2049;
        *(double *)&v347[24] = v82;
        __int16 v83 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)", "%s\n", v83);
LABEL_211:
        if (v83 != buf) {
          free(v83);
        }
      }
    }
    double v87 = sub_10016C458();
    int v302 = 0;
    v303 = 0;
    long long v88 = &v53[14 * v60];
    double v90 = v88[6];
    uint64_t v89 = v88 + 6;
    sub_100D21964(v307, (uint64_t *)&v302, 1, *v62, *v73, *v75, v90, *(v89 - 3), v89[1]);
    unint64_t v91 = v302;
    if (v302)
    {
      uint64_t v92 = v302[1];
      *(void *)double v347 = *v302;
      *(void *)&v347[8] = v92;
      if (v92) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v92 + 8), 1uLL, memory_order_relaxed);
      }
      long long v93 = *((_OWORD *)v91 + 2);
      *(_OWORD *)&v347[16] = *((_OWORD *)v91 + 1);
      *(_OWORD *)&v347[32] = v93;
      long long v94 = *((_OWORD *)v91 + 3);
      long long v95 = *((_OWORD *)v91 + 4);
      long long v96 = *((_OWORD *)v91 + 6);
      *(_OWORD *)double v349 = *((_OWORD *)v91 + 5);
      *(_OWORD *)&v349[16] = v96;
      *(_OWORD *)&v347[48] = v94;
      long long v348 = v95;
      long long v97 = *((_OWORD *)v91 + 7);
      long long v98 = *((_OWORD *)v91 + 8);
      long long v99 = *((_OWORD *)v91 + 9);
      int v353 = *((_DWORD *)v91 + 40);
      long long v351 = v98;
      long long v352 = v99;
      long long v350 = v97;
      sub_100132EFC(&std::cout, (uint64_t)"getSingleShotSnap,", 18);
      double v100 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v100 + *(void *)(*v100 - 24)));
      double v101 = std::locale::use_facet((const std::locale *)buf, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v101->__vftable[2].~facet_0)(v101, 10);
      std::locale::~locale((std::locale *)buf);
      std::ostream::put();
      std::ostream::flush();
      double v102 = 0.0;
      if (v87 >= 0.0) {
        double v102 = vabdd_f64(sub_10016C458(), v87) * 1000.0;
      }
      *(double *)&v349[24] = v53[14 * v60 + 8];
      DWORD2(v350) = 1;
      if ((_BYTE)v348 && *(double *)&v347[16] > 0.0 && *(void *)v347 && sub_100829690((uint64_t)v347))
      {
        double v104 = (double *)&v347[32];
        double v103 = (double *)&v347[24];
        double v105 = (double *)&v347[40];
      }
      else
      {
        double v103 = v73;
        double v104 = v73 + 1;
        long long v75 = (double *)&v347[32];
        uint64_t v73 = (double *)&v347[24];
        double v105 = v89;
        uint64_t v89 = (double *)&v347[40];
      }
      double *v73 = *v103;
      *long long v75 = *v104;
      double *v89 = *v105;
      double v106 = v319;
      if (v319 == v318)
      {
        if ((unint64_t)v319 >= v320)
        {
          unint64_t v124 = 0xCF3CF3CF3CF3CF3DLL * (v319 - v318);
          if (0x9E79E79E79E79E7ALL * ((uint64_t)(v320 - (void)v318) >> 3) <= v124 + 1) {
            unint64_t v125 = v124 + 1;
          }
          else {
            unint64_t v125 = 0x9E79E79E79E79E7ALL * ((uint64_t)(v320 - (void)v318) >> 3);
          }
          if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v320 - (void)v318) >> 3) >= 0xC30C30C30C30C3) {
            unint64_t v126 = 0x186186186186186;
          }
          else {
            unint64_t v126 = v125;
          }
          *(void *)&v357[8] = &v320;
          uint64_t v127 = (char *)sub_10082B0B4((uint64_t)&v320, v126);
          unint64_t v128 = &v127[168 * v124];
          *(void *)buf = v127;
          *(void *)&uint8_t buf[8] = v128;
          *(void *)double v357 = &v127[168 * v129];
          *(void *)unint64_t v128 = *(void *)v347;
          uint64_t v130 = *(void *)&v347[8];
          *((void *)v128 + 1) = *(void *)&v347[8];
          if (v130) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v130 + 8), 1uLL, memory_order_relaxed);
          }
          unint64_t v131 = &v127[168 * v124];
          long long v132 = *(_OWORD *)&v347[32];
          *((_OWORD *)v131 + 1) = *(_OWORD *)&v347[16];
          *((_OWORD *)v131 + 2) = v132;
          long long v133 = *(_OWORD *)&v347[48];
          long long v134 = v348;
          long long v135 = *(_OWORD *)&v349[16];
          *((_OWORD *)v131 + 5) = *(_OWORD *)v349;
          *((_OWORD *)v131 + 6) = v135;
          *((_OWORD *)v131 + 3) = v133;
          *((_OWORD *)v131 + 4) = v134;
          long long v136 = v350;
          long long v137 = v351;
          long long v138 = v352;
          *((_DWORD *)v131 + 40) = v353;
          *((_OWORD *)v131 + 8) = v137;
          *((_OWORD *)v131 + 9) = v138;
          *((_OWORD *)v131 + 7) = v136;
          *(void *)&uint8_t buf[16] = v128 + 168;
          sub_10082B03C((uint64_t *)&v318, buf);
          int v123 = v319;
          sub_10082B240((void **)buf);
        }
        else
        {
          *unsigned int v319 = *(double *)v347;
          uint64_t v115 = *(void *)&v347[8];
          v106[1] = *(double *)&v347[8];
          if (v115) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v115 + 8), 1uLL, memory_order_relaxed);
          }
          long long v116 = *(_OWORD *)&v347[32];
          *((_OWORD *)v106 + 1) = *(_OWORD *)&v347[16];
          *((_OWORD *)v106 + 2) = v116;
          long long v117 = *(_OWORD *)&v347[48];
          long long v118 = v348;
          long long v119 = *(_OWORD *)&v349[16];
          *((_OWORD *)v106 + 5) = *(_OWORD *)v349;
          *((_OWORD *)v106 + 6) = v119;
          *((_OWORD *)v106 + 3) = v117;
          *((_OWORD *)v106 + 4) = v118;
          long long v120 = v350;
          long long v121 = v351;
          long long v122 = v352;
          *((_DWORD *)v106 + 40) = v353;
          *((_OWORD *)v106 + 8) = v121;
          *((_OWORD *)v106 + 9) = v122;
          *((_OWORD *)v106 + 7) = v120;
          int v123 = v106 + 21;
        }
        unsigned int v319 = v123;
        std::string v139 = v322;
        if ((unint64_t)v322 >= v323)
        {
          double v146 = __p;
          uint64_t v147 = 0x6DB6DB6DB6DB6DB7 * ((v322 - (unsigned char *)__p) >> 4);
          unint64_t v148 = v147 + 1;
          if ((unint64_t)(v147 + 1) > 0x249249249249249) {
            sub_1001D7FD4();
          }
          if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v323 - (void)__p) >> 4) > v148) {
            unint64_t v148 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v323 - (void)__p) >> 4);
          }
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v323 - (void)__p) >> 4)) >= 0x124924924924924) {
            unint64_t v149 = 0x249249249249249;
          }
          else {
            unint64_t v149 = v148;
          }
          if (v149)
          {
            char v150 = (char *)sub_100227C5C((uint64_t)&v323, v149);
            std::string v139 = v322;
            double v146 = __p;
          }
          else
          {
            char v150 = 0;
          }
          double v211 = &v150[112 * v147];
          long long v212 = *(_OWORD *)v62;
          long long v213 = *((_OWORD *)v62 + 2);
          *((_OWORD *)v211 + 1) = *((_OWORD *)v62 + 1);
          *((_OWORD *)v211 + 2) = v213;
          *(_OWORD *)double v211 = v212;
          long long v214 = *((_OWORD *)v62 + 3);
          long long v215 = *((_OWORD *)v62 + 4);
          long long v216 = *((_OWORD *)v62 + 6);
          *((_OWORD *)v211 + 5) = *((_OWORD *)v62 + 5);
          *((_OWORD *)v211 + 6) = v216;
          *((_OWORD *)v211 + 3) = v214;
          *((_OWORD *)v211 + 4) = v215;
          if (v139 == v146)
          {
            float v223 = &v150[112 * v147];
          }
          else
          {
            float v217 = &v150[112 * v147];
            do
            {
              long long v218 = *(v139 - 7);
              long long v219 = *(v139 - 5);
              *((_OWORD *)v217 - 6) = *(v139 - 6);
              *((_OWORD *)v217 - 5) = v219;
              *((_OWORD *)v217 - 7) = v218;
              long long v220 = *(v139 - 4);
              long long v221 = *(v139 - 3);
              long long v222 = *(v139 - 2);
              float v223 = v217 - 112;
              *(_OWORD *)(v217 - 23) = *(_OWORD *)((char *)v139 - 23);
              *((_OWORD *)v217 - 3) = v221;
              *((_OWORD *)v217 - 2) = v222;
              *((_OWORD *)v217 - 4) = v220;
              v139 -= 7;
              v217 -= 112;
            }
            while (v139 != v146);
          }
          uint64_t v145 = v211 + 112;
          std::string __p = v223;
          float v322 = v211 + 112;
          unint64_t v323 = (unint64_t)&v150[112 * v149];
          if (v146) {
            operator delete(v146);
          }
        }
        else
        {
          long long v140 = *(_OWORD *)v62;
          long long v141 = *((_OWORD *)v62 + 2);
          *((_OWORD *)v322 + 1) = *((_OWORD *)v62 + 1);
          v139[2] = v141;
          _OWORD *v139 = v140;
          long long v142 = *((_OWORD *)v62 + 3);
          long long v143 = *((_OWORD *)v62 + 4);
          long long v144 = *((_OWORD *)v62 + 6);
          v139[5] = *((_OWORD *)v62 + 5);
          v139[6] = v144;
          v139[3] = v142;
          v139[4] = v143;
          uint64_t v145 = v139 + 7;
        }
        float v322 = v145;
        int v114 = 43;
      }
      else
      {
        double v107 = sub_10016C458();
        __int16 v108 = v319;
        double v109 = *(double *)&v347[16];
        if (vabdd_f64(*(double *)&v347[16], *(v319 - 19)) < 5.0) {
          goto LABEL_143;
        }
        BOOL v110 = v308;
        v301[0] = v307;
        v301[1] = (uint64_t)v308;
        if (v308) {
          atomic_fetch_add_explicit(&v308->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (*(unsigned char *)(a1 + 64)) {
          double v111 = *(double *)(a1 + 56);
        }
        else {
          double v111 = 1.0;
        }
        BOOL v151 = sub_100822AF8((double *)a1, v108 - 21, (uint64_t)v347, v301, (uint64_t)&__p, LOBYTE(v53[14 * v60 + 13]), v109, v111);
        if (v110) {
          sub_1000DB0A0(v110);
        }
        if (!v151)
        {
LABEL_143:
          std::string v152 = v322;
          if ((unint64_t)v322 >= v323)
          {
            uint64_t v159 = __p;
            uint64_t v160 = 0x6DB6DB6DB6DB6DB7 * ((v322 - (unsigned char *)__p) >> 4);
            unint64_t v161 = v160 + 1;
            if ((unint64_t)(v160 + 1) > 0x249249249249249) {
              sub_1001D7FD4();
            }
            if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v323 - (void)__p) >> 4) > v161) {
              unint64_t v161 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v323 - (void)__p) >> 4);
            }
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v323 - (void)__p) >> 4)) >= 0x124924924924924) {
              unint64_t v162 = 0x249249249249249;
            }
            else {
              unint64_t v162 = v161;
            }
            if (v162)
            {
              char v163 = (char *)sub_100227C5C((uint64_t)&v323, v162);
              std::string v152 = v322;
              uint64_t v159 = __p;
            }
            else
            {
              char v163 = 0;
            }
            int v164 = &v163[112 * v160];
            long long v165 = *(_OWORD *)v62;
            long long v166 = *((_OWORD *)v62 + 2);
            *((_OWORD *)v164 + 1) = *((_OWORD *)v62 + 1);
            *((_OWORD *)v164 + 2) = v166;
            *(_OWORD *)int v164 = v165;
            long long v167 = *((_OWORD *)v62 + 3);
            long long v168 = *((_OWORD *)v62 + 4);
            long long v169 = *((_OWORD *)v62 + 6);
            *((_OWORD *)v164 + 5) = *((_OWORD *)v62 + 5);
            *((_OWORD *)v164 + 6) = v169;
            *((_OWORD *)v164 + 3) = v167;
            *((_OWORD *)v164 + 4) = v168;
            if (v152 == v159)
            {
              float v176 = &v163[112 * v160];
            }
            else
            {
              uint64_t v170 = &v163[112 * v160];
              do
              {
                long long v171 = *(v152 - 7);
                long long v172 = *(v152 - 5);
                *((_OWORD *)v170 - 6) = *(v152 - 6);
                *((_OWORD *)v170 - 5) = v172;
                *((_OWORD *)v170 - 7) = v171;
                long long v173 = *(v152 - 4);
                long long v174 = *(v152 - 3);
                long long v175 = *(v152 - 2);
                float v176 = v170 - 112;
                *(_OWORD *)(v170 - 23) = *(_OWORD *)((char *)v152 - 23);
                *((_OWORD *)v170 - 3) = v174;
                *((_OWORD *)v170 - 2) = v175;
                *((_OWORD *)v170 - 4) = v173;
                v152 -= 7;
                v170 -= 112;
              }
              while (v152 != v159);
            }
            int v158 = v164 + 112;
            std::string __p = v176;
            float v322 = v164 + 112;
            unint64_t v323 = (unint64_t)&v163[112 * v162];
            if (v159) {
              operator delete(v159);
            }
          }
          else
          {
            long long v153 = *(_OWORD *)v62;
            long long v154 = *((_OWORD *)v62 + 2);
            *((_OWORD *)v322 + 1) = *((_OWORD *)v62 + 1);
            v152[2] = v154;
            *std::string v152 = v153;
            long long v155 = *((_OWORD *)v62 + 3);
            long long v156 = *((_OWORD *)v62 + 4);
            long long v157 = *((_OWORD *)v62 + 6);
            v152[5] = *((_OWORD *)v62 + 5);
            v152[6] = v157;
            v152[3] = v155;
            v152[4] = v156;
            int v158 = v152 + 7;
          }
          float v322 = v158;
        }
        double v284 = v102;
        double v177 = v76;
        double v178 = v55;
        double v179 = v56;
        double v180 = v57;
        double v181 = v58;
        double v182 = 0.0;
        if (v107 >= 0.0) {
          double v182 = vabdd_f64(sub_10016C458(), v107) * 1000.0;
        }
        v183 = v319;
        if ((unint64_t)v319 >= v320)
        {
          unint64_t v193 = 0xCF3CF3CF3CF3CF3DLL * (v319 - v318);
          unint64_t v194 = v193 + 1;
          if (v193 + 1 > 0x186186186186186) {
            sub_1001D7FD4();
          }
          if (0x9E79E79E79E79E7ALL * ((uint64_t)(v320 - (void)v318) >> 3) > v194) {
            unint64_t v194 = 0x9E79E79E79E79E7ALL * ((uint64_t)(v320 - (void)v318) >> 3);
          }
          if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v320 - (void)v318) >> 3) >= 0xC30C30C30C30C3) {
            unint64_t v195 = 0x186186186186186;
          }
          else {
            unint64_t v195 = v194;
          }
          *(void *)&v357[8] = &v320;
          if (v195) {
            double v196 = (char *)sub_10082B0B4((uint64_t)&v320, v195);
          }
          else {
            double v196 = 0;
          }
          double v197 = &v196[168 * v193];
          *(void *)buf = v196;
          *(void *)&uint8_t buf[8] = v197;
          *(void *)double v357 = &v196[168 * v195];
          *(void *)double v197 = *(void *)v347;
          uint64_t v198 = *(void *)&v347[8];
          *((void *)v197 + 1) = *(void *)&v347[8];
          if (v198) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v198 + 8), 1uLL, memory_order_relaxed);
          }
          float v199 = &v196[168 * v193];
          long long v200 = *(_OWORD *)&v347[32];
          *((_OWORD *)v199 + 1) = *(_OWORD *)&v347[16];
          *((_OWORD *)v199 + 2) = v200;
          long long v201 = *(_OWORD *)&v347[48];
          long long v202 = v348;
          long long v203 = *(_OWORD *)&v349[16];
          *((_OWORD *)v199 + 5) = *(_OWORD *)v349;
          *((_OWORD *)v199 + 6) = v203;
          *((_OWORD *)v199 + 3) = v201;
          *((_OWORD *)v199 + 4) = v202;
          long long v204 = v350;
          long long v205 = v351;
          long long v206 = v352;
          *((_DWORD *)v199 + 40) = v353;
          *((_OWORD *)v199 + 8) = v205;
          *((_OWORD *)v199 + 9) = v206;
          *((_OWORD *)v199 + 7) = v204;
          *(void *)&uint8_t buf[16] = v197 + 168;
          sub_10082B03C((uint64_t *)&v318, buf);
          double v192 = v319;
          sub_10082B240((void **)buf);
        }
        else
        {
          *unsigned int v319 = *(double *)v347;
          uint64_t v184 = *(void *)&v347[8];
          v183[1] = *(double *)&v347[8];
          if (v184) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v184 + 8), 1uLL, memory_order_relaxed);
          }
          long long v185 = *(_OWORD *)&v347[32];
          *((_OWORD *)v183 + 1) = *(_OWORD *)&v347[16];
          *((_OWORD *)v183 + 2) = v185;
          long long v186 = *(_OWORD *)&v347[48];
          long long v187 = v348;
          long long v188 = *(_OWORD *)&v349[16];
          *((_OWORD *)v183 + 5) = *(_OWORD *)v349;
          *((_OWORD *)v183 + 6) = v188;
          *((_OWORD *)v183 + 3) = v186;
          *((_OWORD *)v183 + 4) = v187;
          long long v189 = v350;
          long long v190 = v351;
          long long v191 = v352;
          *((_DWORD *)v183 + 40) = v353;
          *((_OWORD *)v183 + 8) = v190;
          *((_OWORD *)v183 + 9) = v191;
          *((_OWORD *)v183 + 7) = v189;
          double v192 = v183 + 21;
        }
        unsigned int v319 = v192;
        if (qword_102419410 != -1) {
          dispatch_once(&qword_102419410, &stru_1022CADF0);
        }
        unint64_t v207 = qword_102419418;
        if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_INFO))
        {
          uint64_t v208 = *((void *)v319 - 18);
          uint64_t v209 = *((void *)v319 - 17);
          uint64_t v210 = *((void *)v319 - 16);
          *(_DWORD *)buf = 134284801;
          *(void *)&uint8_t buf[4] = v208;
          *(_WORD *)&unsigned char buf[12] = 2049;
          *(void *)&unsigned char buf[14] = v209;
          *(_WORD *)&buf[22] = 2049;
          *(void *)double v357 = v210;
          *(_WORD *)&v357[8] = 2049;
          *(void *)&v357[10] = *(void *)&v347[24];
          *(_WORD *)&v357[18] = 2049;
          *(void *)double v358 = *(void *)&v347[32];
          *(_WORD *)&v358[8] = 2049;
          *(void *)&v358[10] = *(void *)&v347[40];
          _os_log_impl((void *)&_mh_execute_header, v207, OS_LOG_TYPE_INFO, "CLRS,startSnap,%{private}.8lf,%{private}.8lf,startCourse,%{private}.1lf,destSnap,%{private}.8lf,%{private}.8lf,destCourse,%{private}.2lf", buf, 0x3Eu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419410 != -1) {
            dispatch_once(&qword_102419410, &stru_1022CADF0);
          }
          uint64_t v224 = *((void *)v319 - 18);
          uint64_t v225 = *((void *)v319 - 17);
          uint64_t v226 = *((void *)v319 - 16);
          int v335 = 134284801;
          uint64_t v336 = v224;
          __int16 v337 = 2049;
          uint64_t v338 = v225;
          __int16 v339 = 2049;
          uint64_t v340 = v226;
          __int16 v341 = 2049;
          uint64_t v342 = *(void *)&v347[24];
          __int16 v343 = 2049;
          uint64_t v344 = *(void *)&v347[32];
          __int16 v345 = 2049;
          uint64_t v346 = *(void *)&v347[40];
          float v227 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)", "%s\n", v227);
          if (v227 != buf) {
            free(v227);
          }
        }
        sub_100D205A0(v307);
        int v114 = 0;
        double v58 = v181 + v182;
        double v57 = v180;
        double v56 = v179;
        double v55 = v178;
        double v76 = v177;
        double v102 = v284;
      }
      if (*(void *)&v347[8]) {
        sub_1000DB0A0(*(std::__shared_weak_count **)&v347[8]);
      }
      double v57 = v57 + v102;
    }
    else
    {
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      double v112 = qword_102419418;
      if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
      {
        double v113 = *v62;
        *(_DWORD *)buf = 134349056;
        *(double *)&uint8_t buf[4] = v113;
        _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEFAULT, "CLRS,%{public}.1lf, destinationSnapPtr is null", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419410 != -1) {
          dispatch_once(&qword_102419410, &stru_1022CADF0);
        }
        double v230 = *v62;
        *(_DWORD *)double v347 = 134349056;
        *(double *)&v347[4] = v230;
        float v231 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)", "%s\n", v231);
        if (v231 != buf) {
          free(v231);
        }
      }
      int v114 = 1;
    }
    if (v303) {
      sub_1000DB0A0(v303);
    }
    double v55 = v55 + v76;
    double v56 = v56 + v291;
    *(void *)buf = &v304;
    sub_1000C5954((void ***)buf);
    if (v114 != 43 && v114) {
      goto LABEL_346;
    }
LABEL_202:
    int v53 = *(double **)a4;
    unint64_t v61 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4);
    ++v60;
    double v54 = v63;
    if (v61 <= v296) {
      goto LABEL_246;
    }
  }
  *((unsigned char *)v327 + 24) = 1;
  if (qword_102419410 != -1) {
    dispatch_once(&qword_102419410, &stru_1022CADF0);
  }
  double v243 = (void **)a2;
  float v250 = qword_102419418;
  if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v250, OS_LOG_TYPE_DEFAULT, "CLRS,reconstruction failed,bufferMapData failed", buf, 2u);
  }
  if (!sub_10013D1A0(115, 2))
  {
    int v114 = 1;
    goto LABEL_277;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102419410 != -1) {
    dispatch_once(&qword_102419410, &stru_1022CADF0);
  }
  *(_WORD *)double v347 = 0;
  v282 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)", "%s\n", v282);
  if (v282 != buf) {
    free(v282);
  }
  int v114 = 1;
LABEL_346:
  double v243 = (void **)a2;
LABEL_277:
  if (v308) {
    sub_1000DB0A0(v308);
  }
  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v309.__r_.__value_.__l.__data_);
  }
  *(void *)buf = &v318;
  sub_10082AAB4((void ***)buf);
  if (__p)
  {
    float v322 = __p;
    operator delete(__p);
  }
  if (v114)
  {
LABEL_284:
    BOOL v50 = 0;
    goto LABEL_285;
  }
LABEL_286:
  double v252 = 0.0;
  if (v285 >= 0.0) {
    double v252 = vabdd_f64(sub_10016C458(), v285) * 1000.0;
  }
  if (qword_102419410 != -1) {
    dispatch_once(&qword_102419410, &stru_1022CADF0);
  }
  double v253 = qword_102419418;
  if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
  {
    double v254 = v243;
    if (*((char *)v243 + 23) < 0) {
      double v254 = *v243;
    }
    double v256 = *(double **)a4;
    uint64_t v255 = *(void *)(a4 + 8);
    id v257 = [v290[1] count];
    int v258 = *(unsigned __int8 *)(a1 + 51);
    int v259 = *((unsigned __int8 *)v327 + 24);
    *(_DWORD *)buf = 136448258;
    *(void *)&uint8_t buf[4] = v254;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(void *)&unsigned char buf[14] = 0x6DB6DB6DB6DB6DB7 * ((v255 - (uint64_t)v256) >> 4);
    *(_WORD *)&buf[22] = 2050;
    *(void *)double v357 = v257;
    *(_WORD *)&v357[8] = 2050;
    *(double *)&v357[10] = v252;
    *(_WORD *)&v357[18] = 1026;
    *(_DWORD *)double v358 = v334;
    *(_WORD *)&v358[4] = 2050;
    *(double *)&v358[6] = v292;
    *(_WORD *)&v358[14] = 1026;
    *(_DWORD *)&v358[16] = v258;
    LOWORD(v359) = 1026;
    *(_DWORD *)((char *)&v359 + 2) = a6;
    HIWORD(v359) = 1026;
    *(_DWORD *)double v360 = v259;
    _os_log_impl((void *)&_mh_execute_header, v253, OS_LOG_TYPE_DEFAULT, "CLRS,type,%{public}s,reconstruction complete,locationCount,%{public}zu,inertialOdometryCount,%{public}zu,totalElapsedTimeMs,%{public}.0lf,workout,%{public}u,workoutDurationSec,%{public}.1lf,fUseTripSegmentProcessorForReconstruction,%{public}d,networkAccessAllowed,%{public}d,reconstructionFailed,%{public}d", buf, 0x4Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    uint64_t v269 = a2;
    if (*(char *)(a2 + 23) < 0) {
      uint64_t v269 = *(void *)a2;
    }
    float v271 = *(double **)a4;
    uint64_t v270 = *(void *)(a4 + 8);
    id v272 = [v290[1] count];
    uint64_t v273 = v270 - (void)v271;
    int v260 = v334;
    int v274 = *(unsigned __int8 *)(a1 + 51);
    int v275 = *((unsigned __int8 *)v327 + 24);
    *(_DWORD *)double v347 = 136448258;
    *(void *)&v347[4] = v269;
    *(_WORD *)&v347[12] = 2050;
    *(void *)&v347[14] = 0x6DB6DB6DB6DB6DB7 * (v273 >> 4);
    *(_WORD *)&v347[22] = 2050;
    *(void *)&v347[24] = v272;
    *(_WORD *)&v347[32] = 2050;
    *(double *)&v347[34] = v252;
    *(_WORD *)&v347[42] = 1026;
    *(_DWORD *)&v347[44] = v334;
    *(_WORD *)&v347[48] = 2050;
    *(double *)&v347[50] = v292;
    *(_WORD *)&v347[58] = 1026;
    *(_DWORD *)&v347[60] = v274;
    LOWORD(v348) = 1026;
    *(_DWORD *)((char *)&v348 + 2) = a6;
    WORD3(v348) = 1026;
    DWORD2(v348) = v275;
    unint64_t v276 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)", "%s\n", v276);
    if (v276 != buf) {
      free(v276);
    }
    double v243 = (void **)a2;
  }
  else
  {
    int v260 = v334;
  }
  int v299 = v260;
  char v300 = a6;
  if (*((char *)v243 + 23) < 0)
  {
    sub_1000DC48C(&v297, *v243, (unint64_t)v243[1]);
  }
  else
  {
    long long v297 = *(_OWORD *)v243;
    v298 = v243[2];
  }
  AnalyticsSendEventLazy();
  BOOL v50 = *((unsigned char *)v327 + 24) == 0;
  if (SHIBYTE(v298) < 0) {
    operator delete((void *)v297);
  }
LABEL_285:
  _Block_object_dispose(&v326, 8);
  return v50;
}

void sub_10081D31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,std::__shared_weak_count *a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a58) {
    sub_1000DB0A0(a58);
  }
  if (a64 < 0) {
    operator delete(__p);
  }
  STACK[0x330] = (unint64_t)&a72;
  sub_10082AAB4((void ***)&STACK[0x330]);
  uint64_t v73 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v73;
    operator delete(v73);
  }
  _Block_object_dispose(&STACK[0x280], 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10081D4CC(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  char v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1001D7FD4();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    double v13 = (char *)sub_1000DA5D8(result, v12);
    double v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)double v14 = 0;
    *(_OWORD *)double v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    sub_100829898(a1, v16);
    double v8 = (void *)a1[1];
    uint64_t result = sub_1001DD2D0((uint64_t)v16);
  }
  else
  {
    *char v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)char v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    double v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_10081D5F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001DD2D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10081D60C(void *a1, unint64_t a2)
{
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 4) < a2)
  {
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    char v4 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 4);
      *(_DWORD *)buf = 134218240;
      unint64_t v8 = a2;
      __int16 v9 = 2048;
      uint64_t v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CLRS,Unexpected need to increase size of route_epochs_expanded_vector,new size,%zu,original size,%zu", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      unint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLRouteSmoother::smoothPoints(dispatch_queue_t, std::vector<swan::RouteSmootherEpoch> &, std::vector<CLClientLocation> &, CLMotionActivity::Type, const BOOL, const BOOL, std::vector<ReconstructionIntervalData> &)::(anonymous class)::operator()(std::vector<swan::RouteSmootherEpoch> &, const size_t) const", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    sub_10081D848((uint64_t)a1, a2);
  }
}

void sub_10081D848(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_100829DF0((char **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 112 * a2;
  }
}

uint64_t sub_10081D88C(uint64_t a1)
{
  __chkstk_darwin(a1);
  int v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v189 = v7;
  __int16 v9 = v8;
  int v242 = v1;
  double v10 = sub_10016C458();
  if (qword_102419410 != -1) {
    dispatch_once(&qword_102419410, &stru_1022CADF0);
  }
  unint64_t v11 = qword_102419418;
  if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = v6;
    if (*(char *)(v6 + 23) < 0) {
      uint64_t v12 = *(void *)v6;
    }
    uint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 4);
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(void *)&unsigned char buf[14] = v13;
    *(_WORD *)&buf[22] = 1026;
    *(_DWORD *)&unsigned char buf[24] = v2;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "CLRS,Smoothing,%{public}s,dataCount,%{public}zu,workout,%{public}u", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    uint64_t v173 = v6;
    if (*(char *)(v6 + 23) < 0) {
      uint64_t v173 = *(void *)v6;
    }
    uint64_t v174 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 4);
    *(_DWORD *)double v248 = 136446722;
    *(void *)&v248[4] = v173;
    *(_WORD *)&v248[12] = 2050;
    *(void *)&v248[14] = v174;
    *(_WORD *)&v248[22] = 1026;
    *(_DWORD *)&v248[24] = v2;
    long long v175 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v175);
    if (v175 != buf) {
      free(v175);
    }
  }
  if (v9[40]) {
    sub_100816ABC((uint64_t **)v4, (uint64_t *)v6);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 4)) <= 9)
  {
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    double v14 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLRS,too few points to smooth", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      *(_WORD *)double v248 = 0;
      float v176 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v176);
      if (v176 != buf) {
        free(v176);
      }
    }
    return 2;
  }
  dispatch_time_t v240 = 0;
  std::string __p = 0;
  double v241 = 0;
  sub_10016C458();
  long long v190 = (void **)v4;
  if (v9[47])
  {
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    double v16 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "CLRS,CLCF,corner detection started", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      *(_WORD *)double v248 = 0;
      double v181 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v181);
      if (v181 != buf) {
        free(v181);
      }
    }
    if ((sub_100AC6EC8(v4) & 1) == 0)
    {
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      double v17 = qword_102419418;
      if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "CLRS,CLCF,corner detection failed", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419410 != -1) {
          dispatch_once(&qword_102419410, &stru_1022CADF0);
        }
        *(_WORD *)double v248 = 0;
        long long v186 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v186);
        if (v186 != buf) {
          free(v186);
        }
      }
    }
    double v18 = 0.0;
    if (v10 >= 0.0) {
      double v18 = vabdd_f64(sub_10016C458(), v10) * 1000.0;
    }
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    uint64_t v19 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v20 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 4);
      *(_DWORD *)buf = 134349312;
      *(void *)&uint8_t buf[4] = v20;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(double *)&unsigned char buf[14] = v18;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "CLRS,CLCF,corner detection completed,dataCount,%{public}zu,elapsedTime,%{public}.1f,msec", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      uint64_t v21 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 4);
      *(_DWORD *)double v248 = 134349312;
      *(void *)&v248[4] = v21;
      *(_WORD *)&v248[12] = 2050;
      *(double *)&v248[14] = v18;
      id v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v22);
      if (v22 != buf) {
        free(v22);
      }
    }
  }
  else
  {
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    double v23 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLRS,CLCF,corner detection disabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      *(_WORD *)double v248 = 0;
      long long v185 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v185);
      if (v185 != buf) {
        free(v185);
      }
    }
  }
  if (qword_102419410 != -1) {
    dispatch_once(&qword_102419410, &stru_1022CADF0);
  }
  id v24 = qword_102419418;
  if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLRS,gap detection started", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    *(_WORD *)double v248 = 0;
    double v177 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v177);
    if (v177 != buf) {
      free(v177);
    }
  }
  id v25 = *(uint64_t **)v4;
  id v26 = *(unsigned char **)(v4 + 8);
  if (v26 != *(unsigned char **)v4)
  {
    unint64_t v27 = 0;
    __int16 v28 = (double *)v25;
    do
    {
      double v29 = vabdd_f64(*(double *)&v25[14 * v27], *v28);
      if (v29 > 20.0)
      {
        if (qword_102419410 != -1) {
          dispatch_once(&qword_102419410, &stru_1022CADF0);
        }
        id v30 = qword_102419418;
        if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
        {
          id v31 = (uint64_t *)((char *)*v190 + 112 * v27);
          uint64_t v32 = *v31;
          uint64_t v33 = v31[1];
          uint64_t v34 = v31[2];
          *(_DWORD *)buf = 67241217;
          *(_DWORD *)&uint8_t buf[4] = v27;
          *(_WORD *)&uint8_t buf[8] = 2050;
          *(void *)&buf[10] = v32;
          *(_WORD *)&unsigned char buf[18] = 2050;
          *(double *)&buf[20] = v29;
          *(_WORD *)&buf[28] = 2049;
          *(void *)&unsigned char buf[30] = v33;
          *(_WORD *)&buf[38] = 2049;
          *(void *)&buf[40] = v34;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CLRS,gap found,index,%{public}d,time,%{public}.1lf,gap,%{public}.1lf,lat,%{private}.7f,lon,%{private}.7f", buf, 0x30u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419410 != -1) {
            dispatch_once(&qword_102419410, &stru_1022CADF0);
          }
          double v45 = (uint64_t *)((char *)*v190 + 112 * v27);
          uint64_t v46 = *v45;
          uint64_t v47 = v45[1];
          uint64_t v48 = v45[2];
          *(_DWORD *)double v248 = 67241217;
          *(_DWORD *)&v248[4] = v27;
          *(_WORD *)&v248[8] = 2050;
          *(void *)&v248[10] = v46;
          *(_WORD *)&v248[18] = 2050;
          *(double *)&v248[20] = v29;
          *(_WORD *)&v248[28] = 2049;
          *(void *)&v248[30] = v47;
          __int16 v249 = 2049;
          uint64_t v250 = v48;
          uint64_t v49 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v49);
          if (v49 != buf) {
            free(v49);
          }
        }
        double v35 = v240;
        if (v240 >= v241)
        {
          double v37 = (char *)__p;
          uint64_t v38 = (v240 - (unsigned char *)__p) >> 2;
          unint64_t v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 62) {
            sub_1001D7FD4();
          }
          uint64_t v40 = v241 - (unsigned char *)__p;
          if ((v241 - (unsigned char *)__p) >> 1 > v39) {
            unint64_t v39 = v40 >> 1;
          }
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v39;
          }
          if (v41)
          {
            double v42 = (char *)sub_10017EA34((uint64_t)&v241, v41);
            double v35 = v240;
            double v37 = (char *)__p;
          }
          else
          {
            double v42 = 0;
          }
          double v43 = &v42[4 * v38];
          *(_DWORD *)double v43 = v27;
          double v36 = v43 + 4;
          while (v35 != v37)
          {
            int v44 = *((_DWORD *)v35 - 1);
            v35 -= 4;
            *((_DWORD *)v43 - 1) = v44;
            v43 -= 4;
          }
          std::string __p = v43;
          dispatch_time_t v240 = v36;
          double v241 = &v42[4 * v41];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          *(_DWORD *)dispatch_time_t v240 = v27;
          double v36 = v35 + 4;
        }
        dispatch_time_t v240 = v36;
        id v25 = (uint64_t *)*v190;
        id v26 = v190[1];
      }
      __int16 v28 = (double *)&v25[14 * v27++];
    }
    while (0x6DB6DB6DB6DB6DB7 * ((v26 - (unsigned char *)v25) >> 4) > v27);
  }
  char v238 = 0;
  if (v9[48])
  {
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    BOOL v50 = qword_102419418;
    int v51 = v190;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "CLRS,CLRTD,running track detection started", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      *(_WORD *)double v248 = 0;
      double v182 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v182);
      if (v182 != buf) {
        free(v182);
      }
    }
    double v52 = sub_10016C458();
    if ((sub_1007EF448(v190, &v238, v2) & 1) == 0)
    {
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      int v53 = qword_102419418;
      if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "CLRS,CLRTD,Running track detection failed", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419410 != -1) {
          dispatch_once(&qword_102419410, &stru_1022CADF0);
        }
        *(_WORD *)double v248 = 0;
        long long v187 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v187);
        if (v187 != buf) {
          free(v187);
        }
        int v51 = v190;
      }
    }
    double v54 = 0.0;
    if (v52 >= 0.0) {
      double v54 = vabdd_f64(sub_10016C458(), v52) * 1000.0;
    }
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    double v55 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v56 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)v51[1] - (unsigned char *)*v51) >> 4);
      *(_DWORD *)buf = 134349312;
      *(void *)&uint8_t buf[4] = v56;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(double *)&unsigned char buf[14] = v54;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "CLRS,CLRTD,running track detection completed,dataCount,%{public}zu,elapsedTime,%{public}.0lf,msec", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      uint64_t v183 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)v51[1] - (unsigned char *)*v51) >> 4);
      *(_DWORD *)double v248 = 134349312;
      *(void *)&v248[4] = v183;
      *(_WORD *)&v248[12] = 2050;
      *(double *)&v248[14] = v54;
      uint64_t v184 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v184);
      if (v184 != buf) {
        free(v184);
      }
    }
    if (v238)
    {
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      double v57 = qword_102419418;
      if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "CLRS,CLRTD,Running track detected!", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419410 != -1) {
          dispatch_once(&qword_102419410, &stru_1022CADF0);
        }
        *(_WORD *)double v248 = 0;
        double v58 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v58);
LABEL_375:
        if (v58 != buf) {
          free(v58);
        }
        int v51 = v190;
      }
    }
  }
  else
  {
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    uint64_t v59 = qword_102419418;
    int v51 = v190;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "CLRS,CLRTD,running track detection disabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      *(_WORD *)double v248 = 0;
      double v58 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v58);
      goto LABEL_375;
    }
  }
  sub_1008250E8((uint64_t)v231);
  long long v253 = xmmword_101D475E0;
  long long v254 = unk_101D475F0;
  long long v255 = xmmword_101D47600;
  *(_OWORD *)buf = xmmword_101D475A0;
  *(_OWORD *)&uint8_t buf[16] = unk_101D475B0;
  long long v252 = unk_101D475D0;
  *(_OWORD *)&unsigned char buf[32] = xmmword_101D475C0;
  sub_10082A328((uint64_t)&v229, buf, 7);
  long long v253 = xmmword_101D47650;
  long long v254 = unk_101D47660;
  long long v255 = xmmword_101D47670;
  *(_OWORD *)buf = xmmword_101D47610;
  *(_OWORD *)&uint8_t buf[16] = unk_101D47620;
  long long v252 = unk_101D47640;
  *(_OWORD *)&unsigned char buf[32] = xmmword_101D47630;
  sub_10082A328((uint64_t)&v227, buf, 7);
  long long v253 = xmmword_101D476C0;
  long long v254 = unk_101D476D0;
  long long v255 = xmmword_101D476E0;
  *(_OWORD *)buf = xmmword_101D47680;
  *(_OWORD *)&uint8_t buf[16] = unk_101D47690;
  long long v252 = unk_101D476B0;
  *(_OWORD *)&unsigned char buf[32] = xmmword_101D476A0;
  sub_10082A328((uint64_t)&v225, buf, 7);
  long long v253 = xmmword_101D47730;
  long long v254 = unk_101D47740;
  long long v255 = xmmword_101D47750;
  *(_OWORD *)buf = xmmword_101D476F0;
  *(_OWORD *)&uint8_t buf[16] = unk_101D47700;
  long long v252 = unk_101D47720;
  *(_OWORD *)&unsigned char buf[32] = xmmword_101D47710;
  sub_10082A328((uint64_t)&v223, buf, 7);
  v243[0] = 1;
  *(void *)buf = v243;
  uint64_t v60 = sub_100829704(v237, v243, (uint64_t)&unk_101D0B290, (unsigned char **)buf) + 5;
  if (v60 != &v229) {
    sub_10082A3A8(v60, v229, &v230);
  }
  v243[0] = 2;
  *(void *)buf = v243;
  unint64_t v61 = sub_100829704(v237, v243, (uint64_t)&unk_101D0B290, (unsigned char **)buf) + 5;
  if (v61 != &v227) {
    sub_10082A3A8(v61, v227, &v228);
  }
  v243[0] = 3;
  *(void *)buf = v243;
  uint64_t v62 = sub_100829704(v237, v243, (uint64_t)&unk_101D0B290, (unsigned char **)buf) + 5;
  if (v62 != &v225) {
    sub_10082A3A8(v62, v225, &v226);
  }
  v243[0] = 6;
  *(void *)buf = v243;
  double v63 = sub_100829704(v237, v243, (uint64_t)&unk_101D0B290, (unsigned char **)buf) + 5;
  if (v63 != &v223) {
    sub_10082A3A8(v63, v223, &v224);
  }
  *(_OWORD *)buf = xmmword_101D47864;
  *(_OWORD *)&uint8_t buf[16] = unk_101D47874;
  *(_OWORD *)&unsigned char buf[32] = xmmword_101D47884;
  *(void *)&long long v252 = 0xA00000006;
  sub_10082A078((uint64_t)v221, buf, 7);
  *(_OWORD *)buf = xmmword_101D47760;
  *(_OWORD *)&uint8_t buf[16] = unk_101D47770;
  *(_OWORD *)&unsigned char buf[32] = xmmword_101D47780;
  *(void *)&long long v252 = 0xA00000006;
  sub_10082A078((uint64_t)v219, buf, 7);
  *(_OWORD *)buf = xmmword_101D47760;
  *(_OWORD *)&uint8_t buf[16] = unk_101D47770;
  *(_OWORD *)&unsigned char buf[32] = xmmword_101D47780;
  *(void *)&long long v252 = 0xA00000006;
  sub_10082A078((uint64_t)v217, buf, 7);
  *(_OWORD *)buf = xmmword_101D47798;
  *(_OWORD *)&uint8_t buf[16] = unk_101D477A8;
  *(_OWORD *)&unsigned char buf[32] = xmmword_101D477B8;
  *(void *)&long long v252 = 0x3200000006;
  sub_10082A078((uint64_t)v215, buf, 7);
  *(_OWORD *)buf = xmmword_101D477D0;
  *(_OWORD *)&uint8_t buf[16] = unk_101D477E0;
  *(_OWORD *)&unsigned char buf[32] = xmmword_101D477F0;
  *(void *)&long long v252 = 0xA00000006;
  sub_10082A078((uint64_t)v213, buf, 7);
  int v64 = sub_100821338(&v242);
  unsigned __int8 v212 = v64;
  double v65 = &v220;
  unint64_t v66 = v219;
  switch(v64)
  {
    case 1:
      break;
    case 2:
      double v65 = &v218;
      unint64_t v66 = v217;
      break;
    case 3:
      double v65 = &v216;
      unint64_t v66 = v215;
      break;
    case 6:
      double v65 = &v214;
      unint64_t v66 = v213;
      break;
    default:
      double v65 = &v222;
      unint64_t v66 = v221;
      break;
  }
  sub_10082A61C(v235, *(void **)v66, v65);
  unint64_t v67 = 0;
  unint64_t v68 = 0;
  uint64_t v209 = 0;
  uint64_t v210 = 0;
  double v211 = 0;
  long long v206 = 0;
  unint64_t v207 = 0;
  uint64_t v208 = 0;
  long long v203 = 0;
  long long v204 = 0;
  long long v205 = 0;
  unint64_t v69 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)v51[1] - (unsigned char *)*v51) >> 4);
  double v70 = (int *)__p;
  long long v200 = 0;
  long long v201 = 0;
  unint64_t v71 = (v240 - (unsigned char *)__p) >> 2;
  long long v202 = 0;
  do
  {
    unint64_t v72 = v68;
    unint64_t v73 = v69;
    unint64_t v68 = v69;
    if (v71 != v67)
    {
      unint64_t v68 = v70[v67];
      if (v69 >= v68) {
        unint64_t v73 = v70[v67];
      }
      else {
        unint64_t v73 = v69;
      }
    }
    CLLocationDegrees v74 = v210;
    if (v210 >= v211)
    {
      double v76 = (char *)v209;
      uint64_t v77 = (v210 - (unsigned char *)v209) >> 3;
      unint64_t v78 = v77 + 1;
      if ((unint64_t)(v77 + 1) >> 61) {
        goto LABEL_388;
      }
      uint64_t v79 = v211 - (unsigned char *)v209;
      if ((v211 - (unsigned char *)v209) >> 2 > v78) {
        unint64_t v78 = v79 >> 2;
      }
      if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v80 = v78;
      }
      if (v80)
      {
        double v81 = (char *)sub_1000DA54C((uint64_t)&v211, v80);
        double v76 = (char *)v209;
        CLLocationDegrees v74 = v210;
      }
      else
      {
        double v81 = 0;
      }
      double v82 = &v81[8 * v77];
      *(void *)double v82 = v72;
      long long v75 = v82 + 8;
      while (v74 != v76)
      {
        uint64_t v83 = *((void *)v74 - 1);
        v74 -= 8;
        *((void *)v82 - 1) = v83;
        v82 -= 8;
      }
      uint64_t v209 = v82;
      uint64_t v210 = v75;
      double v211 = &v81[8 * v80];
      if (v76) {
        operator delete(v76);
      }
    }
    else
    {
      *(void *)uint64_t v210 = v72;
      long long v75 = v74 + 8;
    }
    uint64_t v210 = v75;
    long long v84 = v207;
    if (v207 >= v208)
    {
      double v86 = (char *)v206;
      uint64_t v87 = (v207 - (unsigned char *)v206) >> 3;
      unint64_t v88 = v87 + 1;
      if ((unint64_t)(v87 + 1) >> 61) {
        goto LABEL_388;
      }
      uint64_t v89 = v208 - (unsigned char *)v206;
      if ((v208 - (unsigned char *)v206) >> 2 > v88) {
        unint64_t v88 = v89 >> 2;
      }
      if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v90 = v88;
      }
      if (v90)
      {
        unint64_t v91 = (char *)sub_1000DA54C((uint64_t)&v208, v90);
        double v86 = (char *)v206;
        long long v84 = v207;
      }
      else
      {
        unint64_t v91 = 0;
      }
      uint64_t v92 = &v91[8 * v87];
      *(void *)uint64_t v92 = v72;
      double v85 = v92 + 8;
      while (v84 != v86)
      {
        uint64_t v93 = *((void *)v84 - 1);
        v84 -= 8;
        *((void *)v92 - 1) = v93;
        v92 -= 8;
      }
      long long v206 = v92;
      unint64_t v207 = v85;
      uint64_t v208 = &v91[8 * v90];
      if (v86) {
        operator delete(v86);
      }
    }
    else
    {
      *(void *)unint64_t v207 = v72;
      double v85 = v84 + 8;
    }
    unint64_t v207 = v85;
    long long v94 = v204;
    if (v204 >= v205)
    {
      long long v96 = (char *)v203;
      uint64_t v97 = (v204 - (unsigned char *)v203) >> 3;
      unint64_t v98 = v97 + 1;
      if ((unint64_t)(v97 + 1) >> 61) {
        goto LABEL_388;
      }
      uint64_t v99 = v205 - (unsigned char *)v203;
      if ((v205 - (unsigned char *)v203) >> 2 > v98) {
        unint64_t v98 = v99 >> 2;
      }
      if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v100 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v100 = v98;
      }
      if (v100)
      {
        double v101 = (char *)sub_1000DA54C((uint64_t)&v205, v100);
        long long v96 = (char *)v203;
        long long v94 = v204;
      }
      else
      {
        double v101 = 0;
      }
      double v102 = (unint64_t *)&v101[8 * v97];
      *double v102 = v73;
      long long v95 = (char *)(v102 + 1);
      while (v94 != v96)
      {
        unint64_t v103 = *((void *)v94 - 1);
        v94 -= 8;
        *--double v102 = v103;
      }
      long long v203 = v102;
      long long v204 = v95;
      long long v205 = &v101[8 * v100];
      if (v96) {
        operator delete(v96);
      }
    }
    else
    {
      *(void *)long long v204 = v73;
      long long v95 = v94 + 8;
    }
    long long v204 = v95;
    double v104 = v201;
    if (v201 >= v202)
    {
      double v106 = (char *)v200;
      uint64_t v107 = (v201 - (unsigned char *)v200) >> 3;
      unint64_t v108 = v107 + 1;
      if ((unint64_t)(v107 + 1) >> 61) {
LABEL_388:
      }
        sub_1001D7FD4();
      uint64_t v109 = v202 - (unsigned char *)v200;
      if ((v202 - (unsigned char *)v200) >> 2 > v108) {
        unint64_t v108 = v109 >> 2;
      }
      if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v110 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v110 = v108;
      }
      if (v110)
      {
        double v111 = (char *)sub_1000DA54C((uint64_t)&v202, v110);
        double v106 = (char *)v200;
        double v104 = v201;
      }
      else
      {
        double v111 = 0;
      }
      double v112 = (unint64_t *)&v111[8 * v107];
      *double v112 = v68;
      double v105 = (char *)(v112 + 1);
      while (v104 != v106)
      {
        unint64_t v113 = *((void *)v104 - 1);
        v104 -= 8;
        *--double v112 = v113;
      }
      long long v200 = v112;
      long long v201 = v105;
      long long v202 = &v111[8 * v110];
      if (v106) {
        operator delete(v106);
      }
    }
    else
    {
      *(void *)long long v201 = v68;
      double v105 = v104 + 8;
    }
    long long v201 = v105;
    double v70 = (int *)__p;
    unint64_t v71 = (v240 - (unsigned char *)__p) >> 2;
  }
  while (v71 > v67++);
  double v115 = sub_10016C458();
  double v197 = 0;
  uint64_t v198 = 0;
  uint64_t v199 = 0;
  unint64_t v194 = 0;
  __dst = 0;
  uint64_t v196 = 0;
  sub_100821594(&v194, 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)v190[1] - (unsigned char *)*v190) >> 4));
  if (v207 == v206)
  {
LABEL_292:
    double v165 = 0.0;
    uint64_t v166 = v6;
    if (v115 >= 0.0) {
      double v165 = vabdd_f64(sub_10016C458(), v115) * 1000.0;
    }
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    long long v167 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349312;
      *(void *)&uint8_t buf[4] = (v207 - (unsigned char *)v206) >> 3;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(double *)&unsigned char buf[14] = v165;
      _os_log_impl((void *)&_mh_execute_header, v167, OS_LOG_TYPE_DEBUG, "CLRS,smoothing all segments completed,segmentCount,%{public}zu,elapsedTime,%{public}.0lf,msec", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      *(_DWORD *)double v248 = 134349312;
      *(void *)&v248[4] = (v207 - (unsigned char *)v206) >> 3;
      *(_WORD *)&v248[12] = 2050;
      *(double *)&v248[14] = v165;
      double v178 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v178);
      if (v178 != buf) {
        free(v178);
      }
    }
    double v168 = 0.0;
    if (v10 >= 0.0) {
      double v168 = vabdd_f64(sub_10016C458(), v10) * 1000.0;
    }
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    long long v169 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v170 = v6;
      if (*(char *)(v6 + 23) < 0) {
        uint64_t v170 = *(void *)v6;
      }
      uint64_t v171 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)v190[1] - (unsigned char *)*v190) >> 4);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = v170;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&unsigned char buf[14] = v171;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&unsigned char buf[24] = v168;
      *(_WORD *)&unsigned char buf[32] = 1026;
      *(_DWORD *)&buf[34] = v242;
      _os_log_impl((void *)&_mh_execute_header, v169, OS_LOG_TYPE_DEFAULT, "CLRS,Smoother,type,%{public}s,dataCount,%{public}zu,elapsedTime,%{public}.0lf,msec,workout,%{public}u", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      if (*(char *)(v6 + 23) < 0) {
        uint64_t v166 = *(void *)v6;
      }
      uint64_t v179 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)v190[1] - (unsigned char *)*v190) >> 4);
      *(_DWORD *)double v248 = 136446978;
      *(void *)&v248[4] = v166;
      *(_WORD *)&v248[12] = 2050;
      *(void *)&v248[14] = v179;
      *(_WORD *)&v248[22] = 2050;
      *(double *)&v248[24] = v168;
      *(_WORD *)&v248[32] = 1026;
      *(_DWORD *)&v248[34] = v242;
      double v180 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v180);
      if (v180 != buf) {
        free(v180);
      }
    }
    if (&v194 != v190) {
      sub_10082A950((char *)v190, (char *)v194, (uint64_t)__dst, 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)__dst - (unsigned char *)v194) >> 4));
    }
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v116 = 0;
    uint64_t v188 = 3;
    while (1)
    {
      long long v191 = 0;
      double v192 = 0;
      unint64_t v193 = 0;
      uint64_t v117 = *((void *)v209 + v116);
      if (v117 >= *((void *)v203 + v116))
      {
LABEL_222:
        sub_10016C458();
        uint64_t v198 = v197;
        sub_100821594(&v197, 0x6DB6DB6DB6DB6DB7 * ((v192 - (char *)v191) >> 4));
        sub_1008250E8((uint64_t)buf);
        sub_100829160((uint64_t)&v256);
        swan::RouteSmoother::Configure();
        for (unint64_t i = v191; i != (unsigned __int8 *)v192; i += 112)
        {
          *(void *)double v243 = 0;
          if (v238)
          {
            *(void *)double v248 = &v212;
            long long v144 = sub_100829704(v237, &v212, (uint64_t)&unk_101D0B290, (unsigned char **)v248);
            *(void *)double v248 = i + 104;
            uint64_t v145 = sub_10082A88C(v144 + 5, i + 104, (uint64_t)&unk_101D0B290, (unsigned char **)v248);
            double v147 = *((double *)v145 + 5);
            double v146 = v145 + 5;
            unint64_t v148 = (uint64_t **)&unk_101D47808;
            if (v147 > 2.0) {
              unint64_t v148 = v146;
            }
          }
          else
          {
            *(void *)double v248 = &v212;
            unint64_t v149 = sub_100829704(v237, &v212, (uint64_t)&unk_101D0B290, (unsigned char **)v248);
            *(void *)double v248 = i + 104;
            unint64_t v148 = sub_10082A88C(v149 + 5, i + 104, (uint64_t)&unk_101D0B290, (unsigned char **)v248) + 5;
          }
          *(void *)double v243 = *v148;
          if (swan::RouteSmoother::Update())
          {
            if (qword_102419410 != -1) {
              dispatch_once(&qword_102419410, &stru_1022CADF0);
            }
            long long v153 = qword_102419418;
            if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)double v248 = 0;
              _os_log_impl((void *)&_mh_execute_header, v153, OS_LOG_TYPE_ERROR, "CLRS,smoother is unhealthy", v248, 2u);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(v248, 0x65CuLL);
              if (qword_102419410 != -1) {
                dispatch_once(&qword_102419410, &stru_1022CADF0);
              }
              unint64_t v162 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v162);
              if (v162 != v248) {
                goto LABEL_283;
              }
            }
            goto LABEL_249;
          }
        }
        if (swan::RouteSmoother::Finish())
        {
          if (qword_102419410 != -1) {
            dispatch_once(&qword_102419410, &stru_1022CADF0);
          }
          char v150 = qword_102419418;
          if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)double v248 = 0;
            _os_log_impl((void *)&_mh_execute_header, v150, OS_LOG_TYPE_ERROR, "CLRS,smoother is unhealthy,could not finish", v248, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(v248, 0x65CuLL);
            if (qword_102419410 != -1) {
              dispatch_once(&qword_102419410, &stru_1022CADF0);
            }
            *(_WORD *)double v243 = 0;
            unint64_t v162 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v162);
            if (v162 != v248) {
LABEL_283:
            }
              free(v162);
          }
LABEL_249:
          sub_10187A1C8(v189, (uint64_t)"routesmoother", (uint64_t)"smoother_failure", 0);
          int v152 = 1;
          uint64_t v188 = 3;
          goto LABEL_250;
        }
        uint64_t v154 = *((void *)v209 + v116);
        unint64_t v155 = *((void *)v206 + v116) - v154;
        unint64_t v156 = *((void *)v200 + v116) - v154;
        unint64_t v157 = 0x6DB6DB6DB6DB6DB7 * ((v198 - (unsigned char *)v197) >> 4);
        if (v155 >= v157 || v156 > v157)
        {
          if (qword_102419410 != -1) {
            dispatch_once(&qword_102419410, &stru_1022CADF0);
          }
          uint64_t v160 = qword_102419418;
          if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)double v248 = 134218496;
            *(void *)&v248[4] = v155;
            *(_WORD *)&v248[12] = 2048;
            *(void *)&v248[14] = v156;
            *(_WORD *)&v248[22] = 2048;
            *(void *)&v248[24] = 0x6DB6DB6DB6DB6DB7 * ((v198 - (unsigned char *)v197) >> 4);
            _os_log_impl((void *)&_mh_execute_header, v160, OS_LOG_TYPE_ERROR, "CLRS,Indexing error,startToOutput,%zu,endToOutput,%zu,smoothedSegment,%zu", v248, 0x20u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(v248, 0x65CuLL);
            if (qword_102419410 != -1) {
              dispatch_once(&qword_102419410, &stru_1022CADF0);
            }
            *(_DWORD *)double v243 = 134218496;
            *(void *)&v243[4] = v155;
            __int16 v244 = 2048;
            uint64_t v245 = v156;
            __int16 v246 = 2048;
            uint64_t v247 = 0x6DB6DB6DB6DB6DB7 * ((v198 - (unsigned char *)v197) >> 4);
            char v163 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v163);
            if (v163 != v248) {
              free(v163);
            }
          }
          sub_10187A1C8(v189, (uint64_t)"routesmoother", (uint64_t)"segment_indexing_error", 0);
          int v152 = 1;
          uint64_t v188 = 3;
        }
        else
        {
          sub_1008299EC((uint64_t)&v194, (uint64_t)__dst, (char *)v197 + 112 * v155, (char *)v197 + 112 * v156, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(112 * (v156 - v155)) >> 4));
          double v158 = 0.0;
          if (v10 >= 0.0) {
            double v158 = vabdd_f64(sub_10016C458(), v10) * 1000.0;
          }
          if (qword_102419410 != -1) {
            dispatch_once(&qword_102419410, &stru_1022CADF0);
          }
          uint64_t v159 = qword_102419418;
          if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)double v248 = 134349568;
            *(void *)&v248[4] = v116 + 1;
            *(_WORD *)&v248[12] = 2050;
            *(void *)&v248[14] = 0x6DB6DB6DB6DB6DB7 * ((v192 - (char *)v191) >> 4);
            *(_WORD *)&v248[22] = 2050;
            *(double *)&v248[24] = v158;
            _os_log_impl((void *)&_mh_execute_header, v159, OS_LOG_TYPE_DEBUG, "CLRS,smoothed segment,#%{public}zu,dataCount,%{public}zu,elapsedTime,%{public}.0lf,msec", v248, 0x20u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(v248, 0x65CuLL);
            if (qword_102419410 != -1) {
              dispatch_once(&qword_102419410, &stru_1022CADF0);
            }
            *(_DWORD *)double v243 = 134349568;
            *(void *)&v243[4] = v116 + 1;
            __int16 v244 = 2050;
            uint64_t v245 = 0x6DB6DB6DB6DB6DB7 * ((v192 - (char *)v191) >> 4);
            __int16 v246 = 2050;
            uint64_t v247 = *(void *)&v158;
            int v164 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v164);
            if (v164 != v248) {
              free(v164);
            }
          }
          int v152 = 0;
        }
LABEL_250:
        sub_1008294E0((uint64_t)buf);
      }
      else
      {
        unint64_t v118 = (unint64_t)*v190 + 112 * v117;
        while (!sub_1000EF668(*(double *)(v118 + 8), *(double *)(v118 + 16)) && *(double *)(v118 + 24) > 0.0)
        {
          long long v119 = (unsigned __int8 *)v192;
          if (v192 >= v193)
          {
            unint64_t v126 = v191;
            unint64_t v127 = 0x6DB6DB6DB6DB6DB7 * ((v192 - (char *)v191) >> 4) + 1;
            if (v127 > 0x249249249249249) {
              sub_1001D7FD4();
            }
            if (0xDB6DB6DB6DB6DB6ELL * ((v193 - (char *)v191) >> 4) > v127) {
              unint64_t v127 = 0xDB6DB6DB6DB6DB6ELL * ((v193 - (char *)v191) >> 4);
            }
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v193 - (char *)v191) >> 4)) >= 0x124924924924924) {
              unint64_t v128 = 0x249249249249249;
            }
            else {
              unint64_t v128 = v127;
            }
            if (v128)
            {
              uint64_t v129 = (char *)sub_100227C5C((uint64_t)&v193, v128);
              unint64_t v126 = v191;
              long long v119 = (unsigned __int8 *)v192;
            }
            else
            {
              uint64_t v129 = 0;
            }
            uint64_t v130 = &v129[16 * ((v192 - (char *)v191) >> 4)];
            long long v131 = *(_OWORD *)v118;
            long long v132 = *(_OWORD *)(v118 + 32);
            *((_OWORD *)v130 + 1) = *(_OWORD *)(v118 + 16);
            *((_OWORD *)v130 + 2) = v132;
            *(_OWORD *)uint64_t v130 = v131;
            long long v133 = *(_OWORD *)(v118 + 48);
            long long v134 = *(_OWORD *)(v118 + 64);
            long long v135 = *(_OWORD *)(v118 + 96);
            *((_OWORD *)v130 + 5) = *(_OWORD *)(v118 + 80);
            *((_OWORD *)v130 + 6) = v135;
            *((_OWORD *)v130 + 3) = v133;
            *((_OWORD *)v130 + 4) = v134;
            if (v119 == v126)
            {
              long long v142 = &v129[16 * ((v192 - (char *)v191) >> 4)];
            }
            else
            {
              long long v136 = &v129[16 * ((v192 - (char *)v191) >> 4)];
              do
              {
                long long v137 = *((_OWORD *)v119 - 7);
                long long v138 = *((_OWORD *)v119 - 5);
                *((_OWORD *)v136 - 6) = *((_OWORD *)v119 - 6);
                *((_OWORD *)v136 - 5) = v138;
                *((_OWORD *)v136 - 7) = v137;
                long long v139 = *((_OWORD *)v119 - 4);
                long long v140 = *((_OWORD *)v119 - 3);
                long long v141 = *((_OWORD *)v119 - 2);
                long long v142 = v136 - 112;
                *(_OWORD *)(v136 - 23) = *(_OWORD *)(v119 - 23);
                *((_OWORD *)v136 - 3) = v140;
                *((_OWORD *)v136 - 2) = v141;
                *((_OWORD *)v136 - 4) = v139;
                v119 -= 112;
                v136 -= 112;
              }
              while (v119 != v126);
            }
            unint64_t v125 = v130 + 112;
            long long v191 = (unsigned __int8 *)v142;
            unint64_t v193 = &v129[112 * v128];
            if (v126) {
              operator delete(v126);
            }
          }
          else
          {
            long long v120 = *(_OWORD *)v118;
            long long v121 = *(_OWORD *)(v118 + 32);
            *((_OWORD *)v192 + 1) = *(_OWORD *)(v118 + 16);
            *((_OWORD *)v192 + 2) = v121;
            *(_OWORD *)double v192 = v120;
            long long v122 = *(_OWORD *)(v118 + 48);
            long long v123 = *(_OWORD *)(v118 + 64);
            long long v124 = *(_OWORD *)(v118 + 96);
            *((_OWORD *)v192 + 5) = *(_OWORD *)(v118 + 80);
            *((_OWORD *)v192 + 6) = v124;
            *((_OWORD *)v192 + 3) = v122;
            *((_OWORD *)v192 + 4) = v123;
            unint64_t v125 = v192 + 112;
          }
          double v192 = v125;
          v118 += 112;
          if (v118 >= (unint64_t)*v190 + 112 * *((void *)v203 + v116)) {
            goto LABEL_222;
          }
        }
        if (qword_102419410 != -1) {
          dispatch_once(&qword_102419410, &stru_1022CADF0);
        }
        BOOL v151 = qword_102419418;
        if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_ERROR, "CLRS,input data contains Null Island or non-positive horizontal uncertainty. Will not attempt to smooth.", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419410 != -1) {
            dispatch_once(&qword_102419410, &stru_1022CADF0);
          }
          *(_WORD *)double v248 = 0;
          unint64_t v161 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "CLSmootherErrorCode CLRouteSmoother::smoothPointsInternal(dispatch_queue_t, std::string, std::vector<swan::RouteSmootherEpoch> &, CLMotionActivity::Type)", "%s\n", v161);
          if (v161 != buf) {
            free(v161);
          }
        }
        sub_10187A1C8(v189, (uint64_t)"routesmoother", (uint64_t)"input_data_corrupted", 0);
        int v152 = 1;
        uint64_t v188 = 1;
      }
      if (v191) {
        operator delete(v191);
      }
      if (v152) {
        break;
      }
      if (++v116 >= (unint64_t)((v207 - (unsigned char *)v206) >> 3)) {
        goto LABEL_292;
      }
    }
    uint64_t v15 = v188;
  }
  if (v194)
  {
    __dst = v194;
    operator delete(v194);
  }
  if (v197)
  {
    uint64_t v198 = v197;
    operator delete(v197);
  }
  if (v200)
  {
    long long v201 = (char *)v200;
    operator delete(v200);
  }
  if (v203)
  {
    long long v204 = (char *)v203;
    operator delete(v203);
  }
  if (v206)
  {
    unint64_t v207 = (char *)v206;
    operator delete(v206);
  }
  if (v209)
  {
    uint64_t v210 = (char *)v209;
    operator delete(v209);
  }
  sub_1000F5BB0((uint64_t)v213, v214);
  sub_1000F5BB0((uint64_t)v215, v216);
  sub_1000F5BB0((uint64_t)v217, v218);
  sub_1000F5BB0((uint64_t)v219, v220);
  sub_1000F5BB0((uint64_t)v221, v222);
  sub_1000F5BB0((uint64_t)&v223, v224);
  sub_1000F5BB0((uint64_t)&v225, v226);
  sub_1000F5BB0((uint64_t)&v227, v228);
  sub_1000F5BB0((uint64_t)&v229, v230);
  v231[0] = off_1022CAE20;
  sub_1004459BC((uint64_t)v237, v237[1]);
  sub_1000F5BB0((uint64_t)v236, v236[1]);
  sub_1000F5BB0((uint64_t)v235, v235[1]);
  if (v234 < 0) {
    operator delete(v233);
  }
  v231[0] = off_1022CAE80;
  if (v232 < 0) {
    operator delete((void *)v231[1]);
  }
  if (__p)
  {
    dispatch_time_t v240 = (char *)__p;
    operator delete(__p);
  }
  return v15;
}

void sub_1008207DC(_Unwind_Exception *a1)
{
  int v2 = (void *)STACK[0x360];
  if (STACK[0x360])
  {
    STACK[0x368] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

NSDictionary *sub_100820AB4(uint64_t a1)
{
  v7[0] = @"workoutActivity";
  v8[0] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 72)];
  v7[1] = @"workoutDurationSeconds";
  v8[1] = +[NSNumber numberWithDouble:*(double *)(a1 + 32)];
  v7[2] = @"outputDataCount";
  _DWORD v8[2] = +[NSNumber numberWithUnsignedLong:0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*(void *)(a1 + 40) + 8) - **(void **)(a1 + 40)) >> 4)];
  v7[3] = @"processingTimeMsec";
  unsigned __int8 v8[3] = +[NSNumber numberWithInt:(int)*(double *)(a1 + 48)];
  v7[4] = @"numEpochs";
  v8[4] = +[NSNumber numberWithUnsignedLong:0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*(void *)(a1 + 40) + 8) - **(void **)(a1 + 40)) >> 4)];
  v7[5] = @"smootherErrorCode";
  v8[5] = +[NSNumber numberWithLong:*(void *)(a1 + 56)];
  v7[6] = @"shouldReconstructRoute";
  v8[6] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 76)];
  v7[7] = @"networkAccessAllowed";
  v8[7] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 77)];
  v7[8] = @"numReconstructionIntervals";
  v8[8] = +[NSNumber numberWithUnsignedLong:(uint64_t)(*(void *)(*(void *)(a1 + 64) + 8) - **(void **)(a1 + 64)) >> 4];
  v7[9] = @"numBackgroundIOSamplesForFirstReconstructionInterval";
  uint64_t v2 = **(void **)(a1 + 64);
  if ((unint64_t)(*(void *)(*(void *)(a1 + 64) + 8) - v2) < 0x11) {
    id v3 = 0;
  }
  else {
    id v3 = [*(id *)(v2 + 8) count];
  }
  v8[9] = +[NSNumber numberWithUnsignedInteger:v3];
  v7[10] = @"numLocationSamplesForFirstReconstructionInterval";
  uint64_t v4 = **(id ***)(a1 + 64);
  if (*(void *)(*(void *)(a1 + 64) + 8) - (void)v4 < 0x11uLL) {
    id v5 = 0;
  }
  else {
    id v5 = [*v4 count];
  }
  v8[10] = +[NSNumber numberWithUnsignedInteger:v5];
  return +[NSDictionary dictionaryWithObjects:v8 forKeys:v7 count:11];
}

void sub_100820CF0(uint64_t **a1, void **a2)
{
  a2[1] = *a2;
  sub_100823940(a2, 0x6DB6DB6DB6DB6DB7 * (((char *)a1[1] - (char *)*a1) >> 4));
  uint64_t v4 = *a1;
  id v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      uint64_t v6 = v4[1];
      uint64_t v8 = v4[2];
      uint64_t v7 = v4[3];
      uint64_t v10 = v4[8];
      uint64_t v9 = v4[9];
      uint64_t v11 = v4[6];
      uint64_t v37 = v4[7];
      uint64_t v38 = *v4;
      uint64_t v13 = v4[4];
      uint64_t v12 = v4[5];
      unint64_t v14 = *((char *)v4 + 104);
      if (v14 < 7 && ((0x5Fu >> v14) & 1) != 0)
      {
        int v16 = dword_101D47B54[v14];
      }
      else
      {
        if (qword_102419410 != -1) {
          dispatch_once(&qword_102419410, &stru_1022CADF0);
        }
        uint64_t v15 = qword_102419418;
        if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLRS,Unhandled signal environment type", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419410 != -1) {
            dispatch_once(&qword_102419410, &stru_1022CADF0);
          }
          double v36 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "CLClientSignalEnvironmentType convertSignalEnvironmentToCLClientSignalEnvironmentType(const swan::SignalEnvironment)", "%s\n", v36);
          if (v36 != (char *)buf) {
            free(v36);
          }
        }
        int v16 = 0;
      }
      double v17 = (char *)a2[1];
      double v18 = (char *)a2[2];
      if (v17 >= v18)
      {
        uint64_t v20 = 0x6F96F96F96F96F97 * ((v17 - (unsigned char *)*a2) >> 2);
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) > 0x1A41A41A41A41A4) {
          sub_1001D7FD4();
        }
        unint64_t v22 = 0x6F96F96F96F96F97 * ((v18 - (unsigned char *)*a2) >> 2);
        if (2 * v22 > v21) {
          unint64_t v21 = 2 * v22;
        }
        if (v22 >= 0xD20D20D20D20D2) {
          unint64_t v23 = 0x1A41A41A41A41A4;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23) {
          id v24 = (char *)sub_10050FC98((uint64_t)(a2 + 2), v23);
        }
        else {
          id v24 = 0;
        }
        id v25 = &v24[156 * v20];
        *(void *)(v25 + 4) = v6;
        *(void *)(v25 + 12) = v8;
        *(void *)(v25 + 20) = v7;
        *(void *)(v25 + 28) = v13;
        *(void *)(v25 + 36) = v12;
        *(void *)(v25 + 44) = v10;
        *(void *)(v25 + 52) = v9;
        *(void *)(v25 + 60) = v11;
        *(void *)(v25 + 68) = v37;
        *(void *)(v25 + 76) = v38;
        *((_DWORD *)v25 + 35) = v16;
        unint64_t v27 = (char *)*a2;
        id v26 = (char *)a2[1];
        __int16 v28 = v25;
        if (v26 != *a2)
        {
          do
          {
            long long v29 = *(_OWORD *)(v26 - 156);
            *(_OWORD *)(v28 - 140) = *(_OWORD *)(v26 - 140);
            *(_OWORD *)(v28 - 156) = v29;
            long long v30 = *(_OWORD *)(v26 - 124);
            long long v31 = *(_OWORD *)(v26 - 108);
            long long v32 = *(_OWORD *)(v26 - 92);
            *(_OWORD *)(v28 - 76) = *(_OWORD *)(v26 - 76);
            *(_OWORD *)(v28 - 92) = v32;
            *(_OWORD *)(v28 - 108) = v31;
            *(_OWORD *)(v28 - 124) = v30;
            long long v33 = *(_OWORD *)(v26 - 60);
            long long v34 = *(_OWORD *)(v26 - 44);
            long long v35 = *(_OWORD *)(v26 - 28);
            *((_OWORD *)v28 - 1) = *((_OWORD *)v26 - 1);
            *(_OWORD *)(v28 - 28) = v35;
            *(_OWORD *)(v28 - 44) = v34;
            *(_OWORD *)(v28 - 60) = v33;
            v28 -= 156;
            v26 -= 156;
          }
          while (v26 != v27);
          id v26 = (char *)*a2;
        }
        uint64_t v19 = v25 + 156;
        *a2 = v28;
        a2[1] = v25 + 156;
        a2[2] = &v24[156 * v23];
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        *(void *)(v17 + 4) = v6;
        *(void *)(v17 + 12) = v8;
        *(void *)(v17 + 20) = v7;
        *(void *)(v17 + 28) = v13;
        *(void *)(v17 + 36) = v12;
        *(void *)(v17 + 44) = v10;
        *(void *)(v17 + 52) = v9;
        *(void *)(v17 + 60) = v11;
        *(void *)(v17 + 68) = v37;
        *(void *)(v17 + 76) = v38;
        uint64_t v19 = v17 + 156;
        *((_DWORD *)v17 + 35) = v16;
      }
      a2[1] = v19;
      v4 += 14;
    }
    while (v4 != v5);
  }
}

NSDictionary *sub_1008210FC(uint64_t a1)
{
  v7[0] = @"workoutActivity";
  v8[0] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 72)];
  v7[1] = @"workoutDurationSeconds";
  v8[1] = +[NSNumber numberWithDouble:*(double *)(a1 + 32)];
  v7[2] = @"outputDataCount";
  _DWORD v8[2] = +[NSNumber numberWithUnsignedLong:0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*(void *)(a1 + 40) + 8) - **(void **)(a1 + 40)) >> 4)];
  v7[3] = @"processingTimeMsec";
  unsigned __int8 v8[3] = +[NSNumber numberWithInt:(int)*(double *)(a1 + 48)];
  v7[4] = @"numEpochs";
  v8[4] = +[NSNumber numberWithUnsignedLong:0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*(void *)(a1 + 40) + 8) - **(void **)(a1 + 40)) >> 4)];
  v7[5] = @"smootherErrorCode";
  v8[5] = +[NSNumber numberWithLong:*(void *)(a1 + 56)];
  v7[6] = @"shouldReconstructRoute";
  v8[6] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 76)];
  v7[7] = @"networkAccessAllowed";
  v8[7] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 77)];
  v7[8] = @"numReconstructionIntervals";
  v8[8] = +[NSNumber numberWithUnsignedLong:(uint64_t)(*(void *)(*(void *)(a1 + 64) + 8) - **(void **)(a1 + 64)) >> 4];
  v7[9] = @"numBackgroundIOSamplesForFirstReconstructionInterval";
  uint64_t v2 = **(void **)(a1 + 64);
  if ((unint64_t)(*(void *)(*(void *)(a1 + 64) + 8) - v2) < 0x11) {
    id v3 = 0;
  }
  else {
    id v3 = [*(id *)(v2 + 8) count];
  }
  v8[9] = +[NSNumber numberWithUnsignedInteger:v3];
  v7[10] = @"numLocationSamplesForFirstReconstructionInterval";
  uint64_t v4 = **(id ***)(a1 + 64);
  if (*(void *)(*(void *)(a1 + 64) + 8) - (void)v4 < 0x11uLL) {
    id v5 = 0;
  }
  else {
    id v5 = [*v4 count];
  }
  v8[10] = +[NSNumber numberWithUnsignedInteger:v5];
  return +[NSDictionary dictionaryWithObjects:v8 forKeys:v7 count:11];
}

uint64_t sub_100821338(int *a1)
{
  int v2 = *a1;
  if (*a1 <= 18239)
  {
    switch(v2)
    {
      case 4:
        return 1;
      case 6:
        return 3;
      case 8:
        return 2;
    }
  }
  else
  {
    if (v2 > 90602)
    {
      if (v2 == 90603) {
        return 7;
      }
      int v3 = 519150;
    }
    else
    {
      if (v2 == 18240) {
        return 4;
      }
      int v3 = 19150;
    }
    if (v2 == v3) {
      return 6;
    }
  }
  if (qword_102419410 != -1) {
    dispatch_once(&qword_102419410, &stru_1022CADF0);
  }
  id v5 = qword_102419418;
  if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
  {
    int v6 = *a1;
    *(_DWORD *)buf = 67240192;
    int v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLRS,Unhandled CLMotionActivity workout type,%{public}d", buf, 8u);
  }
  BOOL v7 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v7)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "swan::WorkoutType convertCLMotionActivityToWorkoutType(const CLMotionActivity::Type &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
    return 0;
  }
  return result;
}

void sub_100821594(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - (unsigned char *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x24924924924924ALL) {
      sub_1001D7FD4();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    int v6 = (char *)sub_100227C5C(v3, a2);
    BOOL v7 = &v6[v5];
    uint64_t v9 = &v6[112 * v8];
    uint64_t v11 = (char *)*a1;
    int v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 7);
        long long v14 = *((_OWORD *)v10 - 5);
        *((_OWORD *)v12 - 6) = *((_OWORD *)v10 - 6);
        *((_OWORD *)v12 - 5) = v14;
        *((_OWORD *)v12 - 7) = v13;
        long long v15 = *((_OWORD *)v10 - 4);
        long long v16 = *((_OWORD *)v10 - 3);
        long long v17 = *((_OWORD *)v10 - 2);
        *(_OWORD *)(v12 - 23) = *(_OWORD *)(v10 - 23);
        *((_OWORD *)v12 - 3) = v16;
        *((_OWORD *)v12 - 2) = v17;
        *((_OWORD *)v12 - 4) = v15;
        v12 -= 112;
        v10 -= 112;
      }
      while (v10 != v11);
      int v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t sub_100821690(uint64_t a1)
{
  *(void *)a1 = off_1022CAE20;
  sub_1004459BC(a1 + 200, *(void **)(a1 + 208));
  sub_1000F5BB0(a1 + 176, *(void **)(a1 + 184));
  sub_1000F5BB0(a1 + 152, *(void **)(a1 + 160));
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  *(void *)a1 = off_1022CAE80;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

id sub_10082172C(void *a1, char **a2)
{
  a2[1] = *a2;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  id result = [a1 countByEnumeratingWithState:&v57 objects:v61 count:16];
  id v5 = result;
  if (result)
  {
    uint64_t v6 = *(void *)v58;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v53 = _Q0;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v58 != v6) {
          objc_enumerationMutation(a1);
        }
        long long v13 = *(void **)(*((void *)&v57 + 1) + 8 * (void)v12);
        if ([v13 type] == 1
          || [v13 type] == 9
          || [v13 type] == 3
          || [v13 type] == 11)
        {
          [v13 horizontalAccuracy];
          if (v14 <= 50.0)
          {
            [objc_msgSend(v13, "timestamp") timeIntervalSinceReferenceDate];
            uint64_t v55 = v15;
            [v13 coordinate];
            uint64_t v54 = v16;
            [v13 coordinate];
            uint64_t v18 = v17;
            [v13 altitude];
            uint64_t v20 = v19;
            [v13 speed];
            uint64_t v22 = v21;
            [v13 course];
            uint64_t v24 = v23;
            [v13 courseAccuracy];
            uint64_t v26 = v25;
            [v13 verticalAccuracy];
            uint64_t v27 = 0x40B3880000000000;
            if (v28 > 0.0)
            {
              [v13 verticalAccuracy];
              uint64_t v27 = v29;
            }
            [v13 horizontalAccuracy];
            uint64_t v31 = v30;
            [v13 speedAccuracy];
            uint64_t v33 = v32;
            unsigned int v56 = [v13 signalEnvironmentType];
            char v34 = sub_10082233C((int *)&v56);
            char v35 = v34;
            unint64_t v36 = (unint64_t)a2[1];
            unint64_t v37 = (unint64_t)a2[2];
            if (v36 >= v37)
            {
              uint64_t v39 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v36 - (void)*a2) >> 4);
              unint64_t v40 = v39 + 1;
              if ((unint64_t)(v39 + 1) > 0x249249249249249) {
                sub_1001D7FD4();
              }
              unint64_t v41 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v37 - (void)*a2) >> 4);
              if (2 * v41 > v40) {
                unint64_t v40 = 2 * v41;
              }
              if (v41 >= 0x124924924924924) {
                unint64_t v42 = 0x249249249249249;
              }
              else {
                unint64_t v42 = v40;
              }
              if (v42) {
                double v43 = (char *)sub_100227C5C((uint64_t)(a2 + 2), v42);
              }
              else {
                double v43 = 0;
              }
              int v44 = &v43[112 * v39];
              *(void *)int v44 = v55;
              *((void *)v44 + 1) = v54;
              *((void *)v44 + 2) = v18;
              *((void *)v44 + 3) = v31;
              *((void *)v44 + 4) = v20;
              *((void *)v44 + 5) = v27;
              *((void *)v44 + 6) = v24;
              *((void *)v44 + 7) = v26;
              *((void *)v44 + 8) = v22;
              *((void *)v44 + 9) = v33;
              *((_OWORD *)v44 + 5) = v53;
              *((void *)v44 + 12) = 0xBFF0000000000000;
              v44[104] = v35;
              uint64_t v46 = *a2;
              double v45 = a2[1];
              uint64_t v47 = v44;
              if (v45 != *a2)
              {
                do
                {
                  long long v48 = *((_OWORD *)v45 - 7);
                  long long v49 = *((_OWORD *)v45 - 5);
                  *((_OWORD *)v47 - 6) = *((_OWORD *)v45 - 6);
                  *((_OWORD *)v47 - 5) = v49;
                  *((_OWORD *)v47 - 7) = v48;
                  long long v50 = *((_OWORD *)v45 - 4);
                  long long v51 = *((_OWORD *)v45 - 3);
                  long long v52 = *((_OWORD *)v45 - 2);
                  *(_OWORD *)(v47 - 23) = *(_OWORD *)(v45 - 23);
                  *((_OWORD *)v47 - 3) = v51;
                  *((_OWORD *)v47 - 2) = v52;
                  *((_OWORD *)v47 - 4) = v50;
                  v47 -= 112;
                  v45 -= 112;
                }
                while (v45 != v46);
                double v45 = *a2;
              }
              uint64_t v38 = v44 + 112;
              *a2 = v47;
              a2[1] = v44 + 112;
              a2[2] = &v43[112 * v42];
              if (v45) {
                operator delete(v45);
              }
            }
            else
            {
              *(void *)unint64_t v36 = v55;
              *(void *)(v36 + 8) = v54;
              *(void *)(v36 + 16) = v18;
              *(void *)(v36 + 24) = v31;
              *(void *)(v36 + 32) = v20;
              *(void *)(v36 + 40) = v27;
              *(void *)(v36 + 48) = v24;
              *(void *)(v36 + 56) = v26;
              *(void *)(v36 + 64) = v22;
              *(void *)(v36 + 72) = v33;
              *(_OWORD *)(v36 + 80) = v53;
              *(void *)(v36 + 96) = 0xBFF0000000000000;
              uint64_t v38 = (char *)(v36 + 112);
              *(unsigned char *)(v36 + 104) = v34;
            }
            a2[1] = v38;
          }
        }
        uint64_t v12 = (char *)v12 + 1;
      }
      while (v12 != v5);
      id result = [a1 countByEnumeratingWithState:&v57 objects:v61 count:16];
      id v5 = result;
    }
    while (result);
  }
  return result;
}

void sub_100821ADC(uint64_t a1, void *a2)
{
  if (a2 && objc_msgSend(objc_msgSend(a2, "tripLocations"), "count"))
  {
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      uint64_t v4 = qword_102419418;
      if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLRS,output received after timeout", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419410 == -1)
        {
LABEL_49:
          LOWORD(v82) = 0;
          double v63 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)_block_invoke", "%s\n", v63);
          if (v63 != (char *)buf) {
            free(v63);
          }
          return;
        }
LABEL_56:
        dispatch_once(&qword_102419410, &stru_1022CADF0);
        goto LABEL_49;
      }
    }
    else
    {
      uint64_t v74 = a1;
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      uint64_t v6 = qword_102419418;
      if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
      {
        id v7 = [[[objc_msgSend(objc_msgSend(a2, "tripSegmentID"), "UUIDString") UTF8String];
        [a2 distance_m];
        uint64_t v9 = v8;
        [a2 distanceUnc_m];
        uint64_t v11 = v10;
        [objc_msgSend(a2, "startDate") timeIntervalSinceReferenceDate];
        uint64_t v13 = v12;
        [objc_msgSend(a2, "endDate") timeIntervalSinceReferenceDate];
        *(_DWORD *)buf = 136447746;
        id v97 = v7;
        __int16 v98 = 2050;
        uint64_t v99 = v9;
        __int16 v100 = 2050;
        uint64_t v101 = v11;
        __int16 v102 = 2050;
        uint64_t v103 = v13;
        __int16 v104 = 2050;
        uint64_t v105 = v14;
        __int16 v106 = 1026;
        unsigned int v107 = [a2 modeOfTransport];
        __int16 v108 = 1026;
        unsigned int v109 = [[[a2 tripLocations] count];
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLRS,Received trip output Data,ID,%{public}s,distance,%{public}.2lf,distance unc,%{public}.2lf,startTime,%{public}.2lf,endTime, %{public}.2lf,modeOfTransport,%{public}d,locations,%{public}d", buf, 0x40u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419410 != -1) {
          dispatch_once(&qword_102419410, &stru_1022CADF0);
        }
        id v64 = [[[a2 tripSegmentID] UUIDString] UTF8String];
        [a2 distance_m];
        uint64_t v66 = v65;
        [a2 distanceUnc_m];
        uint64_t v68 = v67;
        [objc_msgSend(a2, "startDate") timeIntervalSinceReferenceDate];
        uint64_t v70 = v69;
        [objc_msgSend(a2, "endDate") timeIntervalSinceReferenceDate];
        int v82 = 136447746;
        id v83 = v64;
        __int16 v84 = 2050;
        uint64_t v85 = v66;
        __int16 v86 = 2050;
        uint64_t v87 = v68;
        __int16 v88 = 2050;
        uint64_t v89 = v70;
        __int16 v90 = 2050;
        uint64_t v91 = v71;
        __int16 v92 = 1026;
        unsigned int v93 = [a2 modeOfTransport];
        __int16 v94 = 1026;
        unsigned int v95 = [[[a2 tripLocations] count];
        unint64_t v72 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)_block_invoke", "%s\n", v72);
        if (v72 != (char *)buf) {
          free(v72);
        }
      }
      *(void *)(*(void *)(a1 + 40) + 8) = **(void **)(a1 + 40);
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      id v15 = [a2 tripLocations];
      id v16 = [v15 countByEnumeratingWithState:&v77 objects:v81 count:16];
      if (v16)
      {
        uint64_t v17 = *(void *)v78;
        __asm { FMOV            V0.2D, #-1.0 }
        long long v73 = _Q0;
        do
        {
          for (unint64_t i = 0; i != v16; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v78 != v17) {
              objc_enumerationMutation(v15);
            }
            uint64_t v24 = *(void **)(*((void *)&v77 + 1) + 8 * i);
            [objc_msgSend(v24, "timestamp") timeIntervalSinceReferenceDate];
            uint64_t v76 = v25;
            [v24 latitude];
            uint64_t v75 = v26;
            [v24 longitude];
            uint64_t v28 = v27;
            [v24 altitude];
            uint64_t v30 = v29;
            [v24 speed];
            uint64_t v32 = v31;
            [v24 course];
            uint64_t v34 = v33;
            [v24 courseAccuracy];
            uint64_t v36 = v35;
            [v24 altitudeAccuracy];
            uint64_t v37 = 0x40B3880000000000;
            if (v38 > 0.0)
            {
              [v24 altitudeAccuracy];
              uint64_t v37 = v39;
            }
            [v24 horizontalAccuracy];
            uint64_t v41 = v40;
            [v24 speedAccuracy];
            uint64_t v43 = v42;
            *(_DWORD *)buf = [v24 signalEnvironmentType];
            char v44 = sub_10082233C((int *)buf);
            double v45 = *(void ***)(v74 + 40);
            uint64_t v46 = (char *)v45[1];
            uint64_t v47 = (char *)v45[2];
            if (v46 >= v47)
            {
              uint64_t v49 = 0x6DB6DB6DB6DB6DB7 * ((v46 - (unsigned char *)*v45) >> 4);
              unint64_t v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) > 0x249249249249249) {
                sub_1001D7FD4();
              }
              unint64_t v51 = 0x6DB6DB6DB6DB6DB7 * ((v47 - (unsigned char *)*v45) >> 4);
              if (2 * v51 > v50) {
                unint64_t v50 = 2 * v51;
              }
              if (v51 >= 0x124924924924924) {
                unint64_t v52 = 0x249249249249249;
              }
              else {
                unint64_t v52 = v50;
              }
              if (v52) {
                long long v53 = (char *)sub_100227C5C((uint64_t)(v45 + 2), v52);
              }
              else {
                long long v53 = 0;
              }
              uint64_t v54 = &v53[112 * v49];
              *(void *)uint64_t v54 = v76;
              *((void *)v54 + 1) = v75;
              *((void *)v54 + 2) = v28;
              *((void *)v54 + 3) = v41;
              *((void *)v54 + 4) = v30;
              *((void *)v54 + 5) = v37;
              *((void *)v54 + 6) = v34;
              *((void *)v54 + 7) = v36;
              *((void *)v54 + 8) = v32;
              *((void *)v54 + 9) = v43;
              *((_OWORD *)v54 + 5) = v73;
              *((void *)v54 + 12) = 0xBFF0000000000000;
              v54[104] = v44;
              unsigned int v56 = (char *)*v45;
              uint64_t v55 = (char *)v45[1];
              long long v57 = v54;
              if (v55 != *v45)
              {
                do
                {
                  long long v58 = *((_OWORD *)v55 - 7);
                  long long v59 = *((_OWORD *)v55 - 5);
                  *((_OWORD *)v57 - 6) = *((_OWORD *)v55 - 6);
                  *((_OWORD *)v57 - 5) = v59;
                  *((_OWORD *)v57 - 7) = v58;
                  long long v60 = *((_OWORD *)v55 - 4);
                  long long v61 = *((_OWORD *)v55 - 3);
                  long long v62 = *((_OWORD *)v55 - 2);
                  *(_OWORD *)(v57 - 23) = *(_OWORD *)(v55 - 23);
                  *((_OWORD *)v57 - 3) = v61;
                  *((_OWORD *)v57 - 2) = v62;
                  *((_OWORD *)v57 - 4) = v60;
                  v57 -= 112;
                  v55 -= 112;
                }
                while (v55 != v56);
                uint64_t v55 = (char *)*v45;
              }
              long long v48 = v54 + 112;
              *double v45 = v57;
              v45[1] = v54 + 112;
              v45[2] = &v53[112 * v52];
              if (v55) {
                operator delete(v55);
              }
            }
            else
            {
              *(void *)uint64_t v46 = v76;
              *((void *)v46 + 1) = v75;
              *((void *)v46 + 2) = v28;
              *((void *)v46 + 3) = v41;
              *((void *)v46 + 4) = v30;
              *((void *)v46 + 5) = v37;
              *((void *)v46 + 6) = v34;
              *((void *)v46 + 7) = v36;
              *((void *)v46 + 8) = v32;
              *((void *)v46 + 9) = v43;
              *((_OWORD *)v46 + 5) = v73;
              *((void *)v46 + 12) = 0xBFF0000000000000;
              long long v48 = v46 + 112;
              v46[104] = v44;
            }
            v45[1] = v48;
          }
          id v16 = [v15 countByEnumeratingWithState:&v77 objects:v81 count:16];
        }
        while (v16);
      }
    }
  }
  else
  {
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    id v5 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLRS,Received trip output Data,nil", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 == -1) {
        goto LABEL_49;
      }
      goto LABEL_56;
    }
  }
}

uint64_t sub_10082233C(int *a1)
{
  int v1 = *a1;
  if *a1 < 7 && ((0x5Fu >> v1))
  {
    return (0x6000403020100uLL >> (8 * v1));
  }
  else
  {
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    int v2 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "CLRS,Unhandled CLClient signal environment type", buf, 2u);
    }
    BOOL v3 = sub_10013D1A0(115, 0);
    LOBYTE(v4) = 0;
    if (v3)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      id v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "swan::SignalEnvironment convertCLClientSignalEnvironmentTypeToSignalEnvironment(const CLClientSignalEnvironmentType &)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
      LOBYTE(v4) = 0;
    }
  }
  return v4;
}

void sub_100822500(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(unsigned char *)(v3 + 24))
  {
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    uint64_t v4 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLRS,Received completionHandler after timeout", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 == -1)
      {
LABEL_8:
        id v5 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)_block_invoke", "%s\n");
LABEL_18:
        if (v5 != buf) {
          free(v5);
        }
        goto LABEL_25;
      }
LABEL_39:
      dispatch_once(&qword_102419410, &stru_1022CADF0);
      goto LABEL_8;
    }
  }
  else if (a2)
  {
    *(unsigned char *)(v3 + 24) = 1;
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    id v7 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v13 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLRS,Received error completionHandler,%@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      id v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)_block_invoke", "%s\n");
      goto LABEL_18;
    }
  }
  else
  {
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    uint64_t v8 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLRS,Received completionHandler", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 == -1) {
        goto LABEL_8;
      }
      goto LABEL_39;
    }
  }
LABEL_25:
  uint64_t v9 = *(NSObject **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (v9)
  {
    dispatch_semaphore_signal(v9);
  }
  else
  {
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    uint64_t v10 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "CLRS,Received completionHandler, semaphone is NULL", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRouteSmoother::reconstructRoute(std::string, const CLMotionActivity::Type, std::vector<swan::RouteSmootherEpoch> &, ReconstructionIntervalData &, const BOOL)_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

void *sub_100822A04(void *a1)
{
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return a1;
}

BOOL sub_100822AD0(uint64_t a1)
{
  return *(unsigned char *)(a1 + 64) && *(double *)(a1 + 16) > 0.0 && *(void *)a1 && sub_100829690(a1);
}

BOOL sub_100822AF8(double *a1, double *a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6, double a7, double a8)
{
  if (!*a4)
  {
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    uint64_t v28 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "CLRS,buildUserRouteSegmentUsingAstar,mapGeometryRoadBuffer is nullptr", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    LOWORD(v86[0]) = 0;
    uint64_t v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRouteSmoother::buildUserRouteSegmentUsingAstar(const CFAbsoluteTime, const CLGeoMapSnapData &, const CLGeoMapSnapData &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::vector<swan::RouteSmootherEpoch> &, const double, const swan::SignalEnvironment)", "%s\n", v27);
    goto LABEL_111;
  }
  if (a7 >= 0.0 && *((unsigned char *)a2 + 64) != 0)
  {
    BOOL v12 = a2[2] <= 0.0 || *(void *)a2 == 0;
    if (!v12 && sub_100829690((uint64_t)a2) && *(unsigned char *)(a3 + 64))
    {
      BOOL v18 = *(double *)(a3 + 16) <= 0.0 || *(void *)a3 == 0;
      if (!v18 && sub_100829690(a3))
      {
        double v19 = a2[13];
        double v20 = *(double *)(a3 + 104);
        if (v19 <= 0.5)
        {
          if (v20 <= 0.5)
          {
            sub_101171D90((uint64_t)buf);
            double v31 = sub_1000F1648((double *)buf, a2[3], a2[4], *(double *)(a3 + 24), *(double *)(a3 + 32), 0.0);
LABEL_50:
            double v32 = v31 + v31;
            memset(v86, 0, 36);
            *(_OWORD *)((char *)&v86[2] + 8) = 0u;
            *(_OWORD *)((char *)&v86[3] + 8) = 0u;
            long long v81 = *(_OWORD *)(a3 + 24);
            uint64_t v33 = (std::__shared_weak_count *)a4[1];
            uint64_t v79 = *a4;
            long long v80 = v33;
            if (v33) {
              atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            char v34 = sub_100E7A3AC((uint64_t)v86, a1, a2, (void **)a3, &v79, (double *)&v81, *(uint64_t *)&v32, 1u, a7, a2[6], *(double *)(a3 + 48));
            if (v80) {
              sub_1000DB0A0(v80);
            }
            if (v34)
            {
              uint64_t v35 = *((void *)&v86[0] + 1);
              uint64_t v36 = *(void *)&v86[0];
              if (*((void *)&v86[0] + 1) - *(void *)&v86[0] < 0x11uLL)
              {
                *(unsigned char *)(**(void **)&v86[0] + 16) = *(double *)(a3 + 48) > a2[6];
              }
              else
              {
                sub_100E7D070((uint64_t *)v86, a1);
                uint64_t v35 = *((void *)&v86[0] + 1);
                uint64_t v36 = *(void *)&v86[0];
              }
              uint64_t v39 = v35;
              if (v36 == v35) {
                goto LABEL_105;
              }
              uint64_t v75 = a5;
              uint64_t v40 = 0;
              int v41 = 0;
              long long __p = 0uLL;
              uint64_t v85 = 0;
              double v42 = *(double *)(a3 + 16) - a2[2];
              int v43 = llround(v42 / a8);
              if (v43 <= 1) {
                int v44 = 1;
              }
              else {
                int v44 = v43;
              }
              int64x2_t v77 = vdupq_n_s64(0x7FF8000000000000uLL);
              __asm { FMOV            V0.2D, #-1.0 }
              long long v76 = _Q0;
              do
              {
                double v49 = v42 * (double)++v41 / (double)v44 + a2[2];
                if (v40 >= v85)
                {
                  uint64_t v50 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v40[-__p] >> 4);
                  unint64_t v51 = v50 + 1;
                  if ((unint64_t)(v50 + 1) > 0x249249249249249) {
                    sub_1001D7FD4();
                  }
                  if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)&v85[-__p] >> 4) > v51) {
                    unint64_t v51 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)&v85[-__p] >> 4);
                  }
                  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v85[-__p] >> 4)) >= 0x124924924924924) {
                    unint64_t v52 = 0x249249249249249;
                  }
                  else {
                    unint64_t v52 = v51;
                  }
                  if (v52) {
                    long long v53 = (char *)sub_100227C5C((uint64_t)&v85, v52);
                  }
                  else {
                    long long v53 = 0;
                  }
                  uint64_t v54 = &v53[112 * v50];
                  *(double *)uint64_t v54 = v49;
                  *(int64x2_t *)(v54 + 8) = v77;
                  *(_OWORD *)(v54 + 24) = xmmword_101D47500;
                  *(_OWORD *)(v54 + 40) = v76;
                  *(_OWORD *)(v54 + 56) = v76;
                  *(_OWORD *)(v54 + 72) = v76;
                  *(_OWORD *)(v54 + 88) = v76;
                  v54[104] = a6;
                  uint64_t v55 = (char *)*((void *)&__p + 1);
                  unsigned int v56 = (char *)__p;
                  long long v57 = v54;
                  if (*((void *)&__p + 1) != (void)__p)
                  {
                    do
                    {
                      long long v58 = *((_OWORD *)v55 - 7);
                      long long v59 = *((_OWORD *)v55 - 5);
                      *((_OWORD *)v57 - 6) = *((_OWORD *)v55 - 6);
                      *((_OWORD *)v57 - 5) = v59;
                      *((_OWORD *)v57 - 7) = v58;
                      long long v60 = *((_OWORD *)v55 - 4);
                      long long v61 = *((_OWORD *)v55 - 3);
                      long long v62 = *((_OWORD *)v55 - 2);
                      *(_OWORD *)(v57 - 23) = *(_OWORD *)(v55 - 23);
                      *((_OWORD *)v57 - 3) = v61;
                      *((_OWORD *)v57 - 2) = v62;
                      *((_OWORD *)v57 - 4) = v60;
                      v57 -= 112;
                      v55 -= 112;
                    }
                    while (v55 != v56);
                    uint64_t v55 = v56;
                  }
                  uint64_t v40 = v54 + 112;
                  *(void *)&long long __p = v57;
                  *((void *)&__p + 1) = v54 + 112;
                  uint64_t v85 = &v53[112 * v52];
                  if (v55) {
                    operator delete(v55);
                  }
                }
                else
                {
                  *(double *)uint64_t v40 = v49;
                  *(int64x2_t *)(v40 + 8) = v77;
                  *(_OWORD *)(v40 + 24) = xmmword_101D47500;
                  *(_OWORD *)(v40 + 40) = v76;
                  *(_OWORD *)(v40 + 56) = v76;
                  *(_OWORD *)(v40 + 72) = v76;
                  *(_OWORD *)(v40 + 88) = v76;
                  v40[104] = a6;
                  v40 += 112;
                }
                *((void *)&__p + 1) = v40;
              }
              while (v41 != v44);
              double v63 = sub_100823A80((uint64_t *)v86, 0.0);
              int v64 = *(unsigned __int8 *)(**(void **)&v86[0] + 16);
              double v65 = a2[6];
              double v66 = *a2;
              sub_10039C4B4(*(void **)a2);
              if (!v64) {
                double v65 = 1.0 - v65;
              }
              double v67 = *(double *)(*(void *)&v66 + 40);
              if (*(unsigned char *)(*(void *)(*((void *)&v86[0] + 1) - 16) + 16)) {
                double v68 = 1.0 - *(double *)(a3 + 48);
              }
              else {
                double v68 = *(double *)(a3 + 48);
              }
              uint64_t v69 = *(double **)a3;
              sub_10039C4B4(v69);
              double v70 = v69[5];
              memset(v78, 0, sizeof(v78));
              sub_10082B91C(v78, *(void **)&v86[0], *((void **)&v86[0] + 1), (uint64_t)(*((void *)&v86[0] + 1) - *(void *)&v86[0]) >> 4);
              BOOL v71 = sub_100823C1C(a1, (uint64_t *)&__p, v78, a2[6], v63 - v65 * v67 - v68 * v70, a8);
              *(void *)buf = v78;
              sub_1000C5954((void ***)buf);
              if (v71)
              {
                sub_100825060(v72, (char **)&__p, (uint64_t)a2, v75);
              }
              else
              {
                if (qword_102419410 != -1) {
                  dispatch_once(&qword_102419410, &stru_1022CADF0);
                }
                long long v73 = qword_102419418;
                if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 134349056;
                  *(double *)&uint8_t buf[4] = a7;
                  _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_ERROR, "CLRS,%{public}.1lf,unable to compute snap on constructed route", buf, 0xCu);
                }
                if (sub_10013D1A0(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_102419410 != -1) {
                    dispatch_once(&qword_102419410, &stru_1022CADF0);
                  }
                  int v82 = 134349056;
                  double v83 = a7;
                  uint64_t v74 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRouteSmoother::buildUserRouteSegmentUsingAstar(const CFAbsoluteTime, const CLGeoMapSnapData &, const CLGeoMapSnapData &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::vector<swan::RouteSmootherEpoch> &, const double, const swan::SignalEnvironment)", "%s\n", v74);
                  if (v74 != buf) {
                    free(v74);
                  }
                }
              }
              if ((void)__p)
              {
                *((void *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
              if (v71)
              {
                uint64_t v35 = *((void *)&v86[0] + 1);
                uint64_t v39 = *(void *)&v86[0];
LABEL_105:
                BOOL v29 = v39 != v35;
LABEL_107:
                *(void *)buf = v86;
                sub_1000C5954((void ***)buf);
                return v29;
              }
            }
            else
            {
              if (qword_102419410 != -1) {
                dispatch_once(&qword_102419410, &stru_1022CADF0);
              }
              uint64_t v37 = qword_102419418;
              if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134349056;
                *(double *)&uint8_t buf[4] = a7;
                _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "CLRS,%{public}.1lf,unable to construct route", buf, 0xCu);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419410 != -1) {
                  dispatch_once(&qword_102419410, &stru_1022CADF0);
                }
                LODWORD(__p) = 134349056;
                *(double *)((char *)&__p + 4) = a7;
                double v38 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRouteSmoother::buildUserRouteSegmentUsingAstar(const CFAbsoluteTime, const CLGeoMapSnapData &, const CLGeoMapSnapData &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::vector<swan::RouteSmootherEpoch> &, const double, const swan::SignalEnvironment)", "%s\n", v38);
                if (v38 != buf) {
                  free(v38);
                }
              }
            }
            BOOL v29 = 0;
            goto LABEL_107;
          }
        }
        else
        {
          if (v19 >= v20) {
            double v21 = a2[13];
          }
          else {
            double v21 = *(double *)(a3 + 104);
          }
          if (v20 > 0.5) {
            double v20 = v21;
          }
          else {
            double v20 = a2[13];
          }
        }
        double v31 = v20 * vabdd_f64(*(double *)(a3 + 16), a2[2]);
        goto LABEL_50;
      }
    }
  }
  if (qword_102419410 != -1) {
    dispatch_once(&qword_102419410, &stru_1022CADF0);
  }
  uint64_t v22 = qword_102419418;
  if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v23 = 0;
    double v24 = a2[2];
    if (*((unsigned char *)a2 + 64) && v24 > 0.0 && *(void *)a2) {
      BOOL v23 = sub_100829690((uint64_t)a2);
    }
    BOOL v25 = 0;
    if (*(unsigned char *)(a3 + 64) && *(double *)(a3 + 16) > 0.0 && *(void *)a3) {
      BOOL v25 = sub_100829690(a3);
    }
    *(_DWORD *)buf = 134349824;
    *(double *)&uint8_t buf[4] = a7;
    __int16 v88 = 2050;
    double v89 = v24;
    __int16 v90 = 1026;
    BOOL v91 = v23;
    __int16 v92 = 1026;
    BOOL v93 = v25;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "CLRS,%{public}.3lf,buildUserRouteSegmentUsingAstar,invalid snap data,snapTime,%{public}.3lf,startSnapValid,%{public}d,destinationSnapValid,%{public}d", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    uint64_t v26 = (void *)*((void *)a2 + 2);
    LODWORD(v86[0]) = 134349824;
    *(double *)((char *)v86 + 4) = a7;
    WORD6(v86[0]) = 2050;
    *(void *)((char *)v86 + 14) = v26;
    WORD3(v86[1]) = 1026;
    DWORD2(v86[1]) = sub_100822AD0((uint64_t)a2);
    WORD6(v86[1]) = 1026;
    *(_DWORD *)((char *)&v86[1] + 14) = sub_100822AD0(a3);
    uint64_t v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRouteSmoother::buildUserRouteSegmentUsingAstar(const CFAbsoluteTime, const CLGeoMapSnapData &, const CLGeoMapSnapData &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::vector<swan::RouteSmootherEpoch> &, const double, const swan::SignalEnvironment)", "%s\n", v27);
LABEL_111:
    if (v27 != buf) {
      free(v27);
    }
  }
  return 0;
}

void sub_1008235E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char *a43)
{
  if (__p) {
    operator delete(__p);
  }
  a43 = &a33;
  sub_1000C5954((void ***)&a43);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100823660(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  v7[0] = @"workoutActivity";
  v8[0] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 112)];
  v7[1] = @"reconstructedIntervalDurationSeconds";
  v8[1] = +[NSNumber numberWithDouble:*(double *)(a1 + 48)];
  v7[2] = @"processingTimeMsec";
  _DWORD v8[2] = +[NSNumber numberWithInt:(int)*(double *)(a1 + 56)];
  v7[3] = @"numLocationSamplesInput";
  unsigned __int8 v8[3] = +[NSNumber numberWithUnsignedLong:*(void *)(a1 + 64)];
  v7[4] = @"numBackgroundIOSamplesInput";
  v8[4] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(*(void *)(a1 + 72) + 8) count]);
  v7[5] = @"numReconstructedLocationSamplesOutput";
  v8[5] = +[NSNumber numberWithUnsignedLong:0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*(void *)(a1 + 80) + 8) - **(void **)(a1 + 80)) >> 4)];
  v7[6] = @"reconstructionYield";
  double v3 = *(double *)(a1 + 48);
  double v4 = 1.0;
  if (v3 > 0.0) {
    double v4 = (double)(unint64_t)(0x6DB6DB6DB6DB6DB7
  }
                                  * ((uint64_t)(*(void *)(*(void *)(a1 + 80) + 8) - **(void **)(a1 + 80)) >> 4))
       / v3;
  v8[6] = +[NSNumber numberWithDouble:v4];
  v7[7] = @"useTripSegmentProcessor";
  v8[7] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v2 + 51)];
  v7[8] = @"networkAccessAllowed";
  v8[8] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 116)];
  v7[9] = @"intervalLabel";
  id v5 = (void *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0) {
    id v5 = (void *)*v5;
  }
  v8[9] = +[NSString stringWithUTF8String:v5];
  v7[10] = @"reconstructionFailed";
  v8[10] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)];
  return +[NSDictionary dictionaryWithObjects:v8 forKeys:v7 count:11];
}

void *sub_100823884(uint64_t a1, uint64_t a2)
{
  id result = (void *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0) {
    return sub_1000DC48C(result, *(void **)(a2 + 88), *(void *)(a2 + 96));
  }
  long long v3 = *(_OWORD *)(a2 + 88);
  result[2] = *(void *)(a2 + 104);
  *(_OWORD *)id result = v3;
  return result;
}

void sub_1008238B4(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
}

double sub_1008238C8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)(a1 + 76);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 4);
  *(void *)(a2 + 64) = *(void *)(a1 + 44);
  *(void *)(a2 + 48) = *(void *)(a1 + 60);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 20);
  *(void *)(a2 + 40) = *(void *)(a1 + 36);
  *(void *)(a2 + 72) = *(void *)(a1 + 52);
  *(void *)(a2 + 56) = *(void *)(a1 + 68);
  *(unsigned char *)(a2 + 104) = sub_10082233C((int *)(a1 + 140));
  double result = 0.0;
  *(_OWORD *)(a2 + 80) = xmmword_101D47510;
  return result;
}

void sub_100823940(void **a1, unint64_t a2)
{
  double v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0x6F96F96F96F96F97 * ((v4 - (unsigned char *)*a1) >> 2) < a2)
  {
    if (a2 >= 0x1A41A41A41A41A5) {
      sub_1001D7FD4();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 156;
    uint64_t v6 = (char *)sub_10050FC98(v3, a2);
    id v7 = &v6[156 * v5];
    uint64_t v9 = &v6[156 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    BOOL v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 156);
        *(_OWORD *)(v12 - 140) = *(_OWORD *)(v10 - 140);
        *(_OWORD *)(v12 - 156) = v13;
        long long v14 = *(_OWORD *)(v10 - 124);
        long long v15 = *(_OWORD *)(v10 - 108);
        long long v16 = *(_OWORD *)(v10 - 92);
        *(_OWORD *)(v12 - 76) = *(_OWORD *)(v10 - 76);
        *(_OWORD *)(v12 - 92) = v16;
        *(_OWORD *)(v12 - 108) = v15;
        *(_OWORD *)(v12 - 124) = v14;
        long long v17 = *(_OWORD *)(v10 - 60);
        long long v18 = *(_OWORD *)(v10 - 44);
        long long v19 = *(_OWORD *)(v10 - 28);
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        *(_OWORD *)(v12 - 28) = v19;
        *(_OWORD *)(v12 - 44) = v18;
        *(_OWORD *)(v12 - 60) = v17;
        v12 -= 156;
        v10 -= 156;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

double sub_100823A80(uint64_t *a1, double a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 == *a1) {
    return 0.0;
  }
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  unint64_t v8 = (v2 - *a1) >> 4;
  double v9 = 0.0;
  do
  {
    uint64_t v10 = *(void ***)(v3 + v6);
    if (v10)
    {
      if (a2 != 0.0 && v7 < v8 - 1 && *(void *)(v3 + v6 + 16))
      {
        double v11 = sub_100E79FBC((uint64_t)v10, 1);
        double v12 = sub_100E79FBC(*(void *)(v3 + v6 + 16), 0);
        double v13 = fmod(v11 + -90.0 + 90.0 - v12 + 180.0, 360.0);
        if (v13 < 0.0) {
          double v13 = v13 + 360.0;
        }
        double v14 = v13 + -360.0;
        if (v13 <= 180.0) {
          double v14 = v13;
        }
        double v15 = fabs(v14);
        double v16 = 0.0;
        if (v15 > 5.0 && v15 < 180.0) {
          double v16 = a2 / tan(v14 * 0.0174532925 * 0.5);
        }
        double v9 = v9 + v16 * -2.0;
        uint64_t v10 = *(void ***)(v3 + v6);
      }
      uint64_t v17 = (uint64_t)*v10;
      sub_10039C4B4(*v10);
      double v9 = v9 + *(double *)(v17 + 40);
      uint64_t v3 = *a1;
      uint64_t v2 = a1[1];
    }
    ++v7;
    unint64_t v8 = (v2 - v3) >> 4;
    v6 += 16;
  }
  while (v7 < v8);
  return v9;
}

BOOL sub_100823C1C(double *a1, uint64_t *a2, uint64_t *a3, double a4, double a5, double a6)
{
  uint64_t v8 = a2[1];
  if (*a2 == v8 || a4 > 1.0 || ((uint64_t v9 = *a3, v10 = a3[1], a4 >= 0.0) ? (v11 = v9 == v10) : (v11 = 1), v11))
  {
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    BOOL v93 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
    {
      int v94 = -1227133513 * ((unint64_t)(a2[1] - *a2) >> 4);
      unint64_t v95 = (unint64_t)(a3[1] - *a3) >> 4;
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)&uint8_t buf[4] = v94;
      __int16 v124 = 1026;
      *(_DWORD *)unint64_t v125 = v95;
      *(_WORD *)&v125[4] = 2050;
      *(double *)&v125[6] = a4;
      _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_ERROR, "CLRS,snapLocationsOnRoads,invalid input,locations,%{public}d,roadVectors,%{public}d,startRoadProjection,%{public}.3lf", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      int v110 = -1227133513 * ((unint64_t)(a2[1] - *a2) >> 4);
      unint64_t v111 = (unint64_t)(a3[1] - *a3) >> 4;
      LODWORD(__y) = 67240704;
      HIDWORD(__y) = v110;
      __int16 v121 = 1026;
      *(_DWORD *)long long v122 = v111;
      *(_WORD *)&v122[4] = 2050;
      *(double *)&v122[6] = a4;
      uint64_t v105 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRouteSmoother::snapLocationsOnRoads(std::vector<swan::RouteSmootherEpoch> &, const std::vector<CLRouteRoadPtr>, const double, const double, const double, const swan::SignalEnvironment)", "%s\n", v105);
LABEL_168:
      if (v105 != (char *)buf) {
LABEL_169:
      }
        free(v105);
    }
    return 0;
  }
  unint64_t v12 = 0;
  unint64_t v13 = (unint64_t)(v10 - v9) >> 4;
  double v14 = a5 / (double)(unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v8 - *a2) >> 4));
  double v116 = v14 / a6;
LABEL_8:
  uint64_t v15 = *a2;
  unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4);
  BOOL v17 = v16 <= v12;
  if (v16 > v12)
  {
    int v18 = 0;
    unint64_t v118 = (uint64_t *)(v15 + 112 * v12);
    double v19 = v14 * (double)((int)v12 + 1);
    double v20 = a4;
    while (1)
    {
      uint64_t v21 = *a3;
      if (v19 <= 0.0) {
        goto LABEL_54;
      }
      uint64_t v22 = *(uint64_t **)(v21 + 16 * v18);
      uint64_t v24 = *v22;
      BOOL v23 = (std::__shared_weak_count *)v22[1];
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v24) {
        break;
      }
      sub_10039C4B4((void *)v24);
      double v25 = 1.0 - v20;
      if (!*(unsigned char *)(*(void *)(*a3 + 16 * v18) + 16)) {
        double v25 = v20;
      }
      double v26 = *(double *)(v24 + 40) * v25;
      if (v19 > v26 + 0.000000001)
      {
        uint64_t v27 = v18 + 1;
        if ((int)v27 >= (int)v13)
        {
          if (qword_102419410 != -1) {
            dispatch_once(&qword_102419410, &stru_1022CADF0);
          }
          double v31 = qword_102419418;
          if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
          {
            uint64_t v32 = *v118;
            *(_DWORD *)buf = 67240448;
            *(_DWORD *)&uint8_t buf[4] = v13;
            __int16 v124 = 2050;
            *(void *)unint64_t v125 = v32;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "CLRS,currentRoadIndex over candidate road size,count,%{public}d,locationTime,%{public}.3lf", buf, 0x12u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419410 != -1) {
              dispatch_once(&qword_102419410, &stru_1022CADF0);
            }
            uint64_t v35 = *v118;
            LODWORD(__y) = 67240448;
            HIDWORD(__y) = v13;
            __int16 v121 = 2050;
            *(void *)long long v122 = v35;
            uint64_t v36 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRouteSmoother::snapLocationsOnRoads(std::vector<swan::RouteSmootherEpoch> &, const std::vector<CLRouteRoadPtr>, const double, const double, const double, const swan::SignalEnvironment)", "%s\n", v36);
            if (v36 != (char *)buf) {
              free(v36);
            }
          }
          int v28 = 0;
          double v19 = 0.0;
          if (*(unsigned char *)(*(void *)(*a3 + 16 * v18) + 16)) {
            double v20 = 1.0;
          }
          else {
            double v20 = 0.0;
          }
          if (!v23) {
            goto LABEL_32;
          }
        }
        else
        {
          int v28 = 0;
          double v19 = v19 - v26;
          if (*(unsigned char *)(*(void *)(*a3 + 16 * v27) + 16)) {
            double v20 = 0.0;
          }
          else {
            double v20 = 1.0;
          }
          ++v18;
          if (!v23) {
            goto LABEL_32;
          }
        }
        goto LABEL_31;
      }
      int v28 = 12;
      if (v23) {
        goto LABEL_31;
      }
LABEL_32:
      if (v28)
      {
        if (v28 != 12) {
          goto LABEL_98;
        }
        uint64_t v21 = *a3;
LABEL_54:
        uint64_t v37 = v18;
        double v38 = *(void ***)(v21 + 16 * v18);
        uint64_t v39 = (uint64_t)*v38;
        if (!*v38 || (sub_10039C4B4(*v38), *(double *)(v39 + 40) == 0.0))
        {
          if (qword_102419410 != -1) {
            dispatch_once(&qword_102419410, &stru_1022CADF0);
          }
          id v97 = qword_102419418;
          if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
          {
            uint64_t v98 = *v118;
            uint64_t v99 = *(void ***)(*a3 + 16 * v37);
            uint64_t v100 = (uint64_t)*v99;
            if (*v99)
            {
              sub_10039C4B4(*v99);
              unint64_t v101 = *(void *)(v100 + 40);
            }
            else
            {
              unint64_t v101 = 0xBFF0000000000000;
            }
            *(_DWORD *)buf = 67240704;
            *(_DWORD *)&uint8_t buf[4] = v13;
            __int16 v124 = 2050;
            *(void *)unint64_t v125 = v98;
            *(_WORD *)&v125[8] = 2050;
            *(void *)&v125[10] = v101;
            _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_ERROR, "CLRS,road pointer invalid or zero length,count,%{public}d,locationTime,%{public}.3lf,roadLength,%{public}.2lf", buf, 0x1Cu);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419410 != -1) {
              dispatch_once(&qword_102419410, &stru_1022CADF0);
            }
            uint64_t v106 = *v118;
            unsigned int v107 = *(void ***)(*a3 + 16 * v37);
            uint64_t v108 = (uint64_t)*v107;
            if (*v107)
            {
              sub_10039C4B4(*v107);
              unint64_t v109 = *(void *)(v108 + 40);
            }
            else
            {
              unint64_t v109 = 0xBFF0000000000000;
            }
            LODWORD(__y) = 67240704;
            HIDWORD(__y) = v13;
            __int16 v121 = 2050;
            *(void *)long long v122 = v106;
            *(_WORD *)&v122[8] = 2050;
            *(void *)&v122[10] = v109;
            uint64_t v105 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRouteSmoother::snapLocationsOnRoads(std::vector<swan::RouteSmootherEpoch> &, const std::vector<CLRouteRoadPtr>, const double, const double, const double, const swan::SignalEnvironment)", "%s\n", v105);
            if (v105 != (char *)buf) {
              goto LABEL_169;
            }
          }
          return 0;
        }
        uint64_t v40 = 16 * v18;
        uint64_t v41 = **(void **)(*a3 + 16 * v37);
        sub_10039C4B4((void *)v41);
        double v42 = *(uint64_t **)(*a3 + 16 * v37);
        if (*((unsigned char *)v42 + 16)) {
          double v43 = v19 / *(double *)(v41 + 40);
        }
        else {
          double v43 = -(v19 / *(double *)(v41 + 40));
        }
        uint64_t v45 = *v42;
        int v44 = (std::__shared_weak_count *)v42[1];
        if (v44) {
          atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!v45)
        {
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1022CB098);
          }
          unint64_t v51 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "CLMM, NULL road", buf, 2u);
          }
          double v47 = 0.0;
          if (!sub_10013D1A0(115, 0)) {
            goto LABEL_91;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419430 == -1) {
            goto LABEL_72;
          }
          goto LABEL_134;
        }
        uint64_t v46 = (*(void *)(v45 + 144) - *(void *)(v45 + 136)) >> 4;
        if ((int)v46 <= 0)
        {
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1022CB098);
          }
          long long v53 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", buf, 2u);
          }
          double v47 = 0.0;
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_91;
          }
          bzero(buf, 0x65CuLL);
          if (qword_102419430 == -1) {
            goto LABEL_131;
          }
        }
        else
        {
          double v47 = 0.0;
          if (v46 == 1)
          {
            char v48 = 1;
            double v49 = 0.0;
            double v50 = 0.0;
            if (!v44)
            {
LABEL_94:
              if (v48)
              {
                int v28 = 0;
                double v61 = v47 + 180.0;
                if (*(unsigned char *)(*(void *)(*a3 + v40) + 16)) {
                  double v61 = v47;
                }
                uint64_t v62 = v15 + 112 * v12;
                *(double *)(v62 + 8) = v50;
                *(double *)(v62 + 16) = v49;
                *(double *)(v62 + 48) = v61;
                *(void *)(v62 + 56) = 0x4024000000000000;
                *(double *)(v62 + 64) = v116;
                *(_OWORD *)(v62 + 24) = xmmword_101D47520;
                *(void *)(v62 + 40) = 0x4008000000000000;
                *(_OWORD *)(v62 + 72) = xmmword_101D47530;
LABEL_98:
                ++v12;
                if (!v28) {
                  goto LABEL_8;
                }
                return v17;
              }
              if (qword_102419410 != -1) {
                dispatch_once(&qword_102419410, &stru_1022CADF0);
              }
              __int16 v102 = qword_102419418;
              if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
              {
                uint64_t v103 = *v118;
                *(_DWORD *)buf = 67240448;
                *(_DWORD *)&uint8_t buf[4] = v13;
                __int16 v124 = 2050;
                *(void *)unint64_t v125 = v103;
                _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_ERROR, "CLRS,interpolateOnRoad,interpolateProjections returned false,count,%{public}d,locationTime,%{public}.3lf", buf, 0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419410 != -1) {
                  dispatch_once(&qword_102419410, &stru_1022CADF0);
                }
                uint64_t v104 = *v118;
                LODWORD(__y) = 67240448;
                HIDWORD(__y) = v13;
                __int16 v121 = 2050;
                *(void *)long long v122 = v104;
                uint64_t v105 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRouteSmoother::snapLocationsOnRoads(std::vector<swan::RouteSmootherEpoch> &, const std::vector<CLRouteRoadPtr>, const double, const double, const double, const swan::SignalEnvironment)", "%s\n", v105);
                goto LABEL_168;
              }
              return 0;
            }
LABEL_93:
            sub_1000DB0A0(v44);
            goto LABEL_94;
          }
          sub_10039C4B4((void *)v45);
          uint64_t v54 = (uint64_t)(*(void *)(v45 + 168) - *(void *)(v45 + 160)) >> 3;
          if (v54 == v46 - 1)
          {
            sub_10039C4B4((void *)v45);
            double v55 = v20 + v43;
            if (v55 < 0.000001)
            {
              unsigned int v56 = *(double **)(v45 + 136);
              double v50 = *v56;
              double v49 = v56[1];
              double v57 = v56[2];
              double v58 = v56[3];
              *(double *)buf = 0.0;
              uint64_t v119 = 0;
              long double __y = 0.0;
              sub_1000F17A8(a1, (double *)buf, &__y, (double *)&v119, v50, v49, 0.0, v57, v58, 0.0);
LABEL_83:
              double v59 = atan2(__y, *(long double *)buf);
              if (v59 < 0.0) {
                double v59 = v59 + 6.28318531;
              }
              double v47 = v59 * 57.2957795;
LABEL_115:
              char v48 = 1;
LABEL_92:
              if (!v44) {
                goto LABEL_94;
              }
              goto LABEL_93;
            }
            if (v55 >= 0.999999)
            {
              uint64_t v70 = *(void *)(v45 + 136) + 16 * v54;
              double v50 = *(double *)v70;
              double v49 = *(double *)(v70 + 8);
              double v71 = sub_10071B58C(a1, *(double *)(v70 - 16), *(double *)(v70 - 8), *(double *)v70, v49);
LABEL_114:
              double v47 = v71;
              goto LABEL_115;
            }
            double v63 = *(double **)(v45 + 160);
            int v64 = *(double **)(v45 + 168);
            if (v63 != v64)
            {
              double v65 = 0.0;
              int v66 = 2;
              uint64_t v67 = 24;
              while (1)
              {
                double v68 = *v63 / *(double *)(v45 + 40);
                if (vabdd_f64(v55, v65 + v68) < 0.000001) {
                  break;
                }
                if (v65 + v68 > v55)
                {
                  int v82 = (double *)(*(void *)(v45 + 136) + v67);
                  double v83 = *(v82 - 2);
                  double v112 = *(v82 - 1);
                  double v114 = *(v82 - 3);
                  double v84 = sub_1011717B4(v83, *v82);
                  double v85 = (v55 - v65) / v68;
                  sub_10005B720(v83 + v84 * v85);
                  double v49 = v86;
                  uint64_t v87 = (double *)(*(void *)(v45 + 136) + v67);
                  double v88 = *(v87 - 3);
                  double v89 = *(v87 - 2);
                  double v90 = *(v87 - 1);
                  double v91 = *v87;
                  *(double *)buf = 0.0;
                  uint64_t v119 = 0;
                  long double __y = 0.0;
                  sub_1000F17A8(a1, (double *)buf, &__y, (double *)&v119, v88, v89, 0.0, v90, v91, 0.0);
                  double v50 = v114 + (v112 - v114) * v85;
                  goto LABEL_83;
                }
                ++v63;
                v67 += 16;
                ++v66;
                double v65 = v65 + v68;
                if (v63 == v64) {
                  goto LABEL_106;
                }
              }
              if (v66 < (int)v46)
              {
                int v72 = (double *)(*(void *)(v45 + 136) + v67);
                double v50 = *(v72 - 1);
                double v49 = *v72;
                double v73 = *(v72 - 3);
                double v74 = *(v72 - 2);
                *(double *)buf = 0.0;
                uint64_t v119 = 0;
                long double __y = 0.0;
                sub_1000F17A8(a1, (double *)buf, &__y, (double *)&v119, v73, v74, 0.0, v50, v49, 0.0);
                long double v75 = __y;
                long double v76 = *(double *)buf;
                uint64_t v77 = *(void *)(v45 + 136) + v67;
                double v78 = *(double *)(v77 + 8);
                double v79 = *(double *)(v77 + 16);
                *(double *)buf = 0.0;
                uint64_t v119 = 0;
                long double __y = 0.0;
                sub_1000F17A8(a1, (double *)buf, &__y, (double *)&v119, v50, v49, 0.0, v78, v79, 0.0);
                double v80 = atan2(v75, v76);
                if (v80 < 0.0) {
                  double v80 = v80 + 6.28318531;
                }
                double v113 = v80 * 57.2957795;
                double v81 = atan2(__y, *(long double *)buf);
                if (v81 < 0.0) {
                  double v81 = v81 + 6.28318531;
                }
                sub_1004BAC08(v113, v81 * 57.2957795);
                goto LABEL_114;
              }
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1022CB098);
              }
              __int16 v92 = qword_102419438;
              if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", buf, 2u);
              }
              double v47 = 0.0;
              if (!sub_10013D1A0(115, 0)) {
                goto LABEL_91;
              }
              bzero(buf, 0x65CuLL);
              if (qword_102419430 == -1)
              {
LABEL_72:
                LOWORD(__y) = 0;
                unint64_t v52 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v52);
LABEL_132:
                if (v52 != (char *)buf) {
                  free(v52);
                }
LABEL_91:
                char v48 = 0;
                double v49 = 0.0;
                double v50 = 0.0;
                goto LABEL_92;
              }
LABEL_134:
              dispatch_once(&qword_102419430, &stru_1022CB098);
              goto LABEL_72;
            }
LABEL_106:
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1022CB098);
            }
            uint64_t v69 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", buf, 2u);
            }
            if (!sub_10013D1A0(115, 2)) {
              goto LABEL_91;
            }
            bzero(buf, 0x65CuLL);
            if (qword_102419430 == -1)
            {
LABEL_131:
              LOWORD(__y) = 0;
              unint64_t v52 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n", v52);
              goto LABEL_132;
            }
          }
          else
          {
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1022CB098);
            }
            long long v60 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", buf, 2u);
            }
            if (!sub_10013D1A0(115, 2)) {
              goto LABEL_91;
            }
            bzero(buf, 0x65CuLL);
            if (qword_102419430 == -1) {
              goto LABEL_131;
            }
          }
        }
        dispatch_once(&qword_102419430, &stru_1022CB098);
        goto LABEL_131;
      }
    }
    if (qword_102419410 != -1) {
      dispatch_once(&qword_102419410, &stru_1022CADF0);
    }
    BOOL v29 = qword_102419418;
    if (os_log_type_enabled((os_log_t)qword_102419418, OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = *v118;
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v13;
      __int16 v124 = 2050;
      *(void *)unint64_t v125 = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "CLRS,road pointer invalid,count,%{public}d,locationTime,%{public}.3lf", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419410 != -1) {
        dispatch_once(&qword_102419410, &stru_1022CADF0);
      }
      uint64_t v33 = *v118;
      LODWORD(__y) = 67240448;
      HIDWORD(__y) = v13;
      __int16 v121 = 2050;
      *(void *)long long v122 = v33;
      char v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRouteSmoother::snapLocationsOnRoads(std::vector<swan::RouteSmootherEpoch> &, const std::vector<CLRouteRoadPtr>, const double, const double, const double, const swan::SignalEnvironment)", "%s\n", v34);
      if (v34 != (char *)buf) {
        free(v34);
      }
    }
    int v28 = 1;
    if (!v23) {
      goto LABEL_32;
    }
LABEL_31:
    sub_1000DB0A0(v23);
    goto LABEL_32;
  }
  return v17;
}

void sub_100825030(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100825060(int a1, char **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    while (*(double *)(a3 + 16) >= *(double *)v6)
    {
      v6 += 112;
      if (v6 == v7)
      {
        uint64_t v6 = a2[1];
        return sub_1008299EC(a4, *(void *)(a4 + 8), v6, v7, 0x6DB6DB6DB6DB6DB7 * ((v7 - v6) >> 4));
      }
    }
  }
  return sub_1008299EC(a4, *(void *)(a4 + 8), v6, v7, 0x6DB6DB6DB6DB6DB7 * ((v7 - v6) >> 4));
}

void sub_1008250B8(id a1)
{
  qword_102419418 = (uint64_t)os_log_create("com.apple.locationd.Position", "RouteSmoother");
}

uint64_t sub_1008250E8(uint64_t a1)
{
  *(void *)a1 = off_1022CAE80;
  sub_100134750((void *)(a1 + 8), "");
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = off_1022CAE20;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 112) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 64) = xmmword_101D47810;
  *(_OWORD *)(a1 + 80) = unk_101D47820;
  *(_OWORD *)(a1 + 96) = xmmword_101D47830;
  *(_OWORD *)(a1 + 120) = xmmword_101D47848;
  *(_OWORD *)(a1 + 132) = *(long long *)((char *)&xmmword_101D47848 + 12);
  *(void *)&long long v7 = 0xA00000006;
  long long v4 = xmmword_101D47864;
  long long v5 = unk_101D47874;
  long long v6 = xmmword_101D47884;
  sub_10082A078(a1 + 152, (unsigned __int8 *)&v4, 7);
  v8[0] = xmmword_101D478E0;
  v8[1] = unk_101D478F0;
  long long v9 = xmmword_101D47900;
  long long v4 = xmmword_101D478A0;
  long long v5 = unk_101D478B0;
  long long v6 = xmmword_101D478C0;
  long long v7 = unk_101D478D0;
  sub_10082A328(a1 + 176, (unsigned __int8 *)&v4, 7);
  LOBYTE(v4) = 0;
  sub_1008268E8((uint64_t *)&v4 + 1, a1 + 176);
  LOBYTE(v6) = 1;
  sub_1008268E8((uint64_t *)&v6 + 1, a1 + 176);
  LOBYTE(v8[0]) = 2;
  sub_1008268E8((uint64_t *)v8 + 1, a1 + 176);
  LOBYTE(v9) = 3;
  sub_1008268E8((uint64_t *)&v9 + 1, a1 + 176);
  char v10 = 4;
  sub_1008268E8(v11, a1 + 176);
  char v12 = 5;
  sub_1008268E8(v13, a1 + 176);
  char v14 = 6;
  sub_1008268E8(v15, a1 + 176);
  char v16 = 7;
  sub_1008268E8(v17, a1 + 176);
  sub_100826BFC(a1 + 200, (unsigned __int8 *)&v4, 8);
  for (uint64_t i = 0; i != -32; i -= 4)
    sub_1000F5BB0((uint64_t)&v17[i], (void *)v17[i + 1]);
  *(unsigned char *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 232) = xmmword_101D47540;
  *(_OWORD *)(a1 + 248) = xmmword_101D47550;
  *(void *)(a1 + 264) = 0x4006A09E667F3BCCLL;
  *(_OWORD *)(a1 + 272) = xmmword_101D47560;
  *(void *)(a1 + 288) = 0x3FF921FF2E48E8A7;
  *(unsigned char *)(a1 + 296) = 0;
  return a1;
}

void sub_1008253C8(_Unwind_Exception *a1)
{
  for (uint64_t i = 0; i != -256; i -= 32)
    sub_1000F5BB0(v7 + i + 232, *(void **)(v7 + i + 240));
  sub_1000F5BB0(v5, *(void **)(v1 + 184));
  sub_1000F5BB0(v4, *(void **)(v1 + 160));
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v6);
  }
  *(void *)uint64_t v1 = v3;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void sub_100825470()
{
}

void sub_100825478()
{
}

void sub_100825480()
{
}

void sub_100825488(uint64_t a1)
{
  *(void *)a1 = off_1022CAE20;
  sub_1004459BC(a1 + 200, *(void **)(a1 + 208));
  sub_1000F5BB0(a1 + 176, *(void **)(a1 + 184));
  sub_1000F5BB0(a1 + 152, *(void **)(a1 + 160));
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  *(void *)a1 = off_1022CAE80;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  operator delete();
}

uint64_t sub_100825544(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(a1 + 32) = a3;
  sub_100826DE8(v24);
  if ((*((unsigned char *)&v24[4] + (unint64_t)*(v24[0] - 3)) & 5) != 0)
  {
    LOWORD(__str.__r_.__value_.__l.__data_) = 0;
    v21.__r_.__value_.__s.__data_[0] = 2;
    cnprint::CNPrinter::Print();
  }
  else
  {
    std::string::assign((std::string *)(a1 + 8), "");
    memset(&__str, 0, sizeof(__str));
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v24 + (unint64_t)*(v24[0] - 3)));
      uint64_t v4 = std::locale::use_facet((const std::locale *)&v21, &std::ctype<char>::id);
      unsigned __int8 v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
      std::locale::~locale((std::locale *)&v21);
      long long v6 = sub_10044F5DC(v24, (uint64_t)&__str, v5);
      std::string::size_type v7 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      LOBYTE(v8) = *((unsigned char *)&__str.__r_.__value_.__s + 23);
      if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0) {
        break;
      }
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        int64_t v10 = __str.__r_.__value_.__l.__size_;
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (v10 >= 1)
      {
        char v12 = (char *)p_str + v10;
        unint64_t v13 = p_str;
        do
        {
          char v14 = memchr(v13, 35, v10);
          if (!v14) {
            break;
          }
          if (*v14 == 35)
          {
            if (v14 != v12 && v14 - (unsigned char *)p_str != -1)
            {
              std::string::basic_string(&v21, &__str, 0, v14 - (unsigned char *)p_str, (std::allocator<char> *)&v23);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              std::string __str = v21;
              std::string::size_type v7 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
              std::string::size_type size = v21.__r_.__value_.__l.__size_;
              std::string::size_type v8 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
            }
            break;
          }
          unint64_t v13 = (std::string *)(v14 + 1);
          int64_t v10 = v12 - (unsigned char *)v13;
        }
        while (v12 - (unsigned char *)v13 >= 1);
      }
      if ((v8 & 0x80u) != 0) {
        std::string::size_type v7 = size;
      }
      sub_1001110E4((uint64_t)&v21, v7 + 1);
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v15 = &v21;
      }
      else {
        uint64_t v15 = (std::string *)v21.__r_.__value_.__r.__words[0];
      }
      if (v7)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v16 = &__str;
        }
        else {
          char v16 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        memmove(v15, v16, v7);
      }
      *(_WORD *)((char *)&v15->__r_.__value_.__l.__data_ + v7) = 10;
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v17 = &v21;
      }
      else {
        BOOL v17 = (std::string *)v21.__r_.__value_.__r.__words[0];
      }
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v18 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v18 = v21.__r_.__value_.__l.__size_;
      }
      std::string::append((std::string *)(a1 + 8), (const std::string::value_type *)v17, v18);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  std::filebuf::~filebuf();
  std::istream::~istream();
  std::ios::~ios();
  return v19;
}

void sub_100825900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
}

uint64_t sub_100825968(uint64_t a1, const std::string::value_type *a2, char a3)
{
  *(unsigned char *)(a1 + 32) = a3;
  std::string::assign((std::string *)(a1 + 8), a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 32);

  return v4(a1);
}

uint64_t sub_1008259C8(uint64_t a1)
{
  if ((sub_100827078(a1, (std::string *)(a1 + 40), "input_locationd_data_file", "") & 1) == 0)
  {
    std::string::size_type v7 = sub_100132EFC(&std::cout, (uint64_t)"Invalid input_locationd_data_file", 33);
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
    std::string::size_type v8 = std::locale::use_facet(v112, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(v112);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v9 = 0;
    *(unsigned char *)(a1 + 296) = 0;
    return v9;
  }
  int v2 = sub_100827A44(a1, (void *)(a1 + 232), "vertical_process_noise_sigma_mps2");
  if ((v2 & 1) == 0) {
    *(void *)(a1 + 232) = 0x3FB999999999999ALL;
  }
  v112[0].__locale_ = 0;
  v112[1].__locale_ = 0;
  DWORD2(v113) = 0;
  *(void *)&long long v113 = 0;
  if (sub_100827110(a1, v112, 7, "desired_lag_per_environment_array") != -1)
  {
    uint64_t v3 = *(void **)(a1 + 152);
    if (v3 == (void *)(a1 + 160)) {
      goto LABEL_16;
    }
    while (1)
    {
      unint64_t v4 = *((unsigned __int8 *)v3 + 28);
      if (v4 > 6) {
        break;
      }
      *((_DWORD *)v3 + 8) = *((_DWORD *)&v112[0].__locale_ + v4);
      unsigned __int8 v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          long long v6 = v5;
          unsigned __int8 v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          long long v6 = (void *)v3[2];
          BOOL v73 = *v6 == (void)v3;
          uint64_t v3 = v6;
        }
        while (!v73);
      }
      uint64_t v3 = v6;
      if (v6 == (void *)(a1 + 160)) {
        goto LABEL_16;
      }
    }
  }
  int v2 = 0;
LABEL_16:
  sub_100134750(__p, "horizontal_process_noise_sigma_mps2_unknown");
  unsigned __int8 v109 = 0;
  v112[0].__locale_ = (std::locale::__imp *)&v109;
  int64_t v10 = sub_100829704((uint64_t **)(a1 + 200), &v109, (uint64_t)&unk_101D0B290, v112);
  uint64_t v115 = 0;
  long long v113 = 0u;
  long long v114 = 0u;
  *(_OWORD *)&v112[0].__locale_ = 0u;
  if (v111 >= 0) {
    BOOL v11 = __p;
  }
  else {
    BOOL v11 = (void **)__p[0];
  }
  if (sub_100828D58(a1, (uint64_t)v112, 7, (const std::string::value_type *)v11) == -1)
  {
    BOOL v14 = 0;
  }
  else
  {
    char v12 = v10[5];
    if (v12 == (uint64_t *)(v10 + 6))
    {
      BOOL v14 = 1;
    }
    else
    {
      do
      {
        unint64_t v13 = *((unsigned __int8 *)v12 + 32);
        BOOL v14 = v13 < 7;
        if (v13 > 6) {
          break;
        }
        v12[5] = (uint64_t)v112[v13].__locale_;
        uint64_t v15 = (uint64_t *)v12[1];
        if (v15)
        {
          do
          {
            char v16 = (uint64_t **)v15;
            uint64_t v15 = (uint64_t *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            char v16 = (uint64_t **)v12[2];
            BOOL v73 = *v16 == v12;
            char v12 = (uint64_t *)v16;
          }
          while (!v73);
        }
        char v12 = (uint64_t *)v16;
      }
      while (v16 != v10 + 6);
    }
  }
  if (v111 < 0) {
    operator delete(__p[0]);
  }
  sub_100134750(v107, "horizontal_process_noise_sigma_mps2_walking");
  unsigned __int8 v109 = 1;
  v112[0].__locale_ = (std::locale::__imp *)&v109;
  BOOL v17 = sub_100829704((uint64_t **)(a1 + 200), &v109, (uint64_t)&unk_101D0B290, v112);
  uint64_t v115 = 0;
  long long v113 = 0u;
  long long v114 = 0u;
  *(_OWORD *)&v112[0].__locale_ = 0u;
  if (v108 >= 0) {
    std::string::size_type v18 = v107;
  }
  else {
    std::string::size_type v18 = (void **)v107[0];
  }
  if (sub_100828D58(a1, (uint64_t)v112, 7, (const std::string::value_type *)v18) == -1)
  {
    BOOL v21 = 0;
  }
  else
  {
    uint64_t v19 = v17[5];
    if (v19 == (uint64_t *)(v17 + 6))
    {
      BOOL v21 = 1;
    }
    else
    {
      do
      {
        unint64_t v20 = *((unsigned __int8 *)v19 + 32);
        BOOL v21 = v20 < 7;
        if (v20 > 6) {
          break;
        }
        v19[5] = (uint64_t)v112[v20].__locale_;
        uint64_t v22 = (uint64_t *)v19[1];
        if (v22)
        {
          do
          {
            char v23 = (uint64_t **)v22;
            uint64_t v22 = (uint64_t *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            char v23 = (uint64_t **)v19[2];
            BOOL v73 = *v23 == v19;
            uint64_t v19 = (uint64_t *)v23;
          }
          while (!v73);
        }
        uint64_t v19 = (uint64_t *)v23;
      }
      while (v23 != v17 + 6);
    }
  }
  if (v108 < 0) {
    operator delete(v107[0]);
  }
  sub_100134750(v105, "horizontal_process_noise_sigma_mps2_running");
  unsigned __int8 v109 = 2;
  v112[0].__locale_ = (std::locale::__imp *)&v109;
  uint64_t v24 = sub_100829704((uint64_t **)(a1 + 200), &v109, (uint64_t)&unk_101D0B290, v112);
  uint64_t v115 = 0;
  long long v113 = 0u;
  long long v114 = 0u;
  *(_OWORD *)&v112[0].__locale_ = 0u;
  if (v106 >= 0) {
    double v25 = v105;
  }
  else {
    double v25 = (void **)v105[0];
  }
  if (sub_100828D58(a1, (uint64_t)v112, 7, (const std::string::value_type *)v25) == -1)
  {
    BOOL v28 = 0;
  }
  else
  {
    double v26 = v24[5];
    if (v26 == (uint64_t *)(v24 + 6))
    {
      BOOL v28 = 1;
    }
    else
    {
      do
      {
        unint64_t v27 = *((unsigned __int8 *)v26 + 32);
        BOOL v28 = v27 < 7;
        if (v27 > 6) {
          break;
        }
        v26[5] = (uint64_t)v112[v27].__locale_;
        BOOL v29 = (uint64_t *)v26[1];
        if (v29)
        {
          do
          {
            uint64_t v30 = (uint64_t **)v29;
            BOOL v29 = (uint64_t *)*v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            uint64_t v30 = (uint64_t **)v26[2];
            BOOL v73 = *v30 == v26;
            double v26 = (uint64_t *)v30;
          }
          while (!v73);
        }
        double v26 = (uint64_t *)v30;
      }
      while (v30 != v24 + 6);
    }
  }
  if (v106 < 0) {
    operator delete(v105[0]);
  }
  sub_100134750(v103, "horizontal_process_noise_sigma_mps2_cycling");
  unsigned __int8 v109 = 3;
  v112[0].__locale_ = (std::locale::__imp *)&v109;
  double v31 = sub_100829704((uint64_t **)(a1 + 200), &v109, (uint64_t)&unk_101D0B290, v112);
  uint64_t v115 = 0;
  long long v113 = 0u;
  long long v114 = 0u;
  *(_OWORD *)&v112[0].__locale_ = 0u;
  if (v104 >= 0) {
    uint64_t v32 = v103;
  }
  else {
    uint64_t v32 = (void **)v103[0];
  }
  if (sub_100828D58(a1, (uint64_t)v112, 7, (const std::string::value_type *)v32) == -1)
  {
    BOOL v35 = 0;
  }
  else
  {
    uint64_t v33 = v31[5];
    if (v33 == (uint64_t *)(v31 + 6))
    {
      BOOL v35 = 1;
    }
    else
    {
      do
      {
        unint64_t v34 = *((unsigned __int8 *)v33 + 32);
        BOOL v35 = v34 < 7;
        if (v34 > 6) {
          break;
        }
        v33[5] = (uint64_t)v112[v34].__locale_;
        uint64_t v36 = (uint64_t *)v33[1];
        if (v36)
        {
          do
          {
            uint64_t v37 = (uint64_t **)v36;
            uint64_t v36 = (uint64_t *)*v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            uint64_t v37 = (uint64_t **)v33[2];
            BOOL v73 = *v37 == v33;
            uint64_t v33 = (uint64_t *)v37;
          }
          while (!v73);
        }
        uint64_t v33 = (uint64_t *)v37;
      }
      while (v37 != v31 + 6);
    }
  }
  if (v104 < 0) {
    operator delete(v103[0]);
  }
  sub_100134750(v101, "horizontal_process_noise_sigma_mps2_swimming");
  unsigned __int8 v109 = 4;
  v112[0].__locale_ = (std::locale::__imp *)&v109;
  double v38 = sub_100829704((uint64_t **)(a1 + 200), &v109, (uint64_t)&unk_101D0B290, v112);
  uint64_t v115 = 0;
  long long v113 = 0u;
  long long v114 = 0u;
  *(_OWORD *)&v112[0].__locale_ = 0u;
  if (v102 >= 0) {
    uint64_t v39 = v101;
  }
  else {
    uint64_t v39 = (void **)v101[0];
  }
  if (sub_100828D58(a1, (uint64_t)v112, 7, (const std::string::value_type *)v39) == -1)
  {
    BOOL v42 = 0;
  }
  else
  {
    uint64_t v40 = v38[5];
    if (v40 == (uint64_t *)(v38 + 6))
    {
      BOOL v42 = 1;
    }
    else
    {
      do
      {
        unint64_t v41 = *((unsigned __int8 *)v40 + 32);
        BOOL v42 = v41 < 7;
        if (v41 > 6) {
          break;
        }
        v40[5] = (uint64_t)v112[v41].__locale_;
        double v43 = (uint64_t *)v40[1];
        if (v43)
        {
          do
          {
            int v44 = (uint64_t **)v43;
            double v43 = (uint64_t *)*v43;
          }
          while (v43);
        }
        else
        {
          do
          {
            int v44 = (uint64_t **)v40[2];
            BOOL v73 = *v44 == v40;
            uint64_t v40 = (uint64_t *)v44;
          }
          while (!v73);
        }
        uint64_t v40 = (uint64_t *)v44;
      }
      while (v44 != v38 + 6);
    }
  }
  if (v102 < 0) {
    operator delete(v101[0]);
  }
  sub_100134750(v99, "horizontal_process_noise_sigma_mps2_golfing");
  unsigned __int8 v109 = 5;
  v112[0].__locale_ = (std::locale::__imp *)&v109;
  uint64_t v45 = sub_100829704((uint64_t **)(a1 + 200), &v109, (uint64_t)&unk_101D0B290, v112);
  uint64_t v115 = 0;
  long long v113 = 0u;
  long long v114 = 0u;
  *(_OWORD *)&v112[0].__locale_ = 0u;
  if (v100 >= 0) {
    uint64_t v46 = v99;
  }
  else {
    uint64_t v46 = (void **)v99[0];
  }
  if (sub_100828D58(a1, (uint64_t)v112, 7, (const std::string::value_type *)v46) == -1)
  {
    BOOL v49 = 0;
  }
  else
  {
    double v47 = v45[5];
    if (v47 == (uint64_t *)(v45 + 6))
    {
      BOOL v49 = 1;
    }
    else
    {
      do
      {
        unint64_t v48 = *((unsigned __int8 *)v47 + 32);
        BOOL v49 = v48 < 7;
        if (v48 > 6) {
          break;
        }
        v47[5] = (uint64_t)v112[v48].__locale_;
        double v50 = (uint64_t *)v47[1];
        if (v50)
        {
          do
          {
            unint64_t v51 = (uint64_t **)v50;
            double v50 = (uint64_t *)*v50;
          }
          while (v50);
        }
        else
        {
          do
          {
            unint64_t v51 = (uint64_t **)v47[2];
            BOOL v73 = *v51 == v47;
            double v47 = (uint64_t *)v51;
          }
          while (!v73);
        }
        double v47 = (uint64_t *)v51;
      }
      while (v51 != v45 + 6);
    }
  }
  if (v100 < 0) {
    operator delete(v99[0]);
  }
  sub_100134750(v97, "horizontal_process_noise_sigma_mps2_downhillskiing");
  unsigned __int8 v109 = 6;
  v112[0].__locale_ = (std::locale::__imp *)&v109;
  unint64_t v52 = sub_100829704((uint64_t **)(a1 + 200), &v109, (uint64_t)&unk_101D0B290, v112);
  uint64_t v115 = 0;
  long long v113 = 0u;
  long long v114 = 0u;
  *(_OWORD *)&v112[0].__locale_ = 0u;
  if (v98 >= 0) {
    long long v53 = v97;
  }
  else {
    long long v53 = (void **)v97[0];
  }
  if (sub_100828D58(a1, (uint64_t)v112, 7, (const std::string::value_type *)v53) == -1)
  {
    BOOL v57 = 0;
  }
  else
  {
    uint64_t v54 = v52[5];
    double v55 = v52 + 6;
    if (v54 == (uint64_t *)(v52 + 6))
    {
      BOOL v57 = 1;
    }
    else
    {
      do
      {
        unint64_t v56 = *((unsigned __int8 *)v54 + 32);
        BOOL v57 = v56 < 7;
        if (v56 > 6) {
          break;
        }
        v54[5] = (uint64_t)v112[v56].__locale_;
        double v58 = (uint64_t *)v54[1];
        if (v58)
        {
          do
          {
            double v59 = v58;
            double v58 = (uint64_t *)*v58;
          }
          while (v58);
        }
        else
        {
          do
          {
            double v59 = (uint64_t *)v54[2];
            BOOL v73 = *v59 == (void)v54;
            uint64_t v54 = v59;
          }
          while (!v73);
        }
        uint64_t v54 = v59;
      }
      while (v59 != (uint64_t *)v55);
    }
  }
  if (v98 < 0) {
    operator delete(v97[0]);
  }
  sub_100134750(v95, "horizontal_process_noise_sigma_mps2_outdoorwheelchair");
  unsigned __int8 v109 = 7;
  v112[0].__locale_ = (std::locale::__imp *)&v109;
  long long v60 = sub_100829704((uint64_t **)(a1 + 200), &v109, (uint64_t)&unk_101D0B290, v112);
  uint64_t v115 = 0;
  long long v113 = 0u;
  long long v114 = 0u;
  *(_OWORD *)&v112[0].__locale_ = 0u;
  if (v96 >= 0) {
    double v61 = v95;
  }
  else {
    double v61 = (void **)v95[0];
  }
  if (sub_100828D58(a1, (uint64_t)v112, 7, (const std::string::value_type *)v61) == -1)
  {
    BOOL v65 = 0;
  }
  else
  {
    uint64_t v62 = v60[5];
    double v63 = v60 + 6;
    if (v62 == (uint64_t *)(v60 + 6))
    {
      BOOL v65 = 1;
    }
    else
    {
      do
      {
        unint64_t v64 = *((unsigned __int8 *)v62 + 32);
        BOOL v65 = v64 < 7;
        if (v64 > 6) {
          break;
        }
        v62[5] = (uint64_t)v112[v64].__locale_;
        int v66 = (uint64_t *)v62[1];
        if (v66)
        {
          do
          {
            uint64_t v67 = v66;
            int v66 = (uint64_t *)*v66;
          }
          while (v66);
        }
        else
        {
          do
          {
            uint64_t v67 = (uint64_t *)v62[2];
            BOOL v73 = *v67 == (void)v62;
            uint64_t v62 = v67;
          }
          while (!v73);
        }
        uint64_t v62 = v67;
      }
      while (v67 != (uint64_t *)v63);
    }
  }
  if (v96 < 0) {
    operator delete(v95[0]);
  }
  v112[0].__locale_ = 0;
  v112[1].__locale_ = 0;
  *(void *)&long long v113 = 0;
  if ((v2 & v14 & v21 & v28 & v35 & v42 & v49 & v57 & v65 & sub_100827078(a1, (std::string *)v112, "workout_type", "")) != 1)goto LABEL_211; {
  char v68 = BYTE7(v113);
  }
  if ((SBYTE7(v113) & 0x80u) == 0) {
    uint64_t v69 = (char *)v112 + BYTE7(v113);
  }
  else {
    uint64_t v69 = (char *)v112[0].__locale_ + (unint64_t)v112[1].__locale_;
  }
  if ((SBYTE7(v113) & 0x80u) == 0) {
    locale = (char *)v112;
  }
  else {
    locale = (char *)v112[0].__locale_;
  }
  if (locale != v69)
  {
    do
    {
      char *locale = __tolower(*locale);
      ++locale;
    }
    while (locale != v69);
    char v68 = BYTE7(v113);
  }
  if ((v68 & 0x80) == 0)
  {
    if (v68 != 7)
    {
      if (v68 != 8)
      {
        if (v68 != 14) {
          goto LABEL_209;
        }
        double v71 = (std::locale::__imp *)v112;
        goto LABEL_179;
      }
      if (v112[0].__locale_ != (std::locale::__imp *)0x676E696D6D697773) {
        goto LABEL_209;
      }
LABEL_208:
      char v77 = 4;
      goto LABEL_234;
    }
    if (LODWORD(v112[0].__locale_) != 1852534389 || *(_DWORD *)((char *)&v112[0].__locale_ + 3) != 1853321070)
    {
      if (LODWORD(v112[0].__locale_) != 1802264951 || *(_DWORD *)((char *)&v112[0].__locale_ + 3) != 1735289195)
      {
        if (LODWORD(v112[0].__locale_) != 1852732786 || *(_DWORD *)((char *)&v112[0].__locale_ + 3) != 1735289198)
        {
          if (LODWORD(v112[0].__locale_) != 1818458467 || *(_DWORD *)((char *)&v112[0].__locale_ + 3) != 1735289196)
          {
            if (LODWORD(v112[0].__locale_) != 1718382439 || *(_DWORD *)((char *)&v112[0].__locale_ + 3) != 1735289190)
            {
              if ((v68 & 0x80) == 0) {
                goto LABEL_209;
              }
              goto LABEL_176;
            }
            goto LABEL_232;
          }
LABEL_229:
          char v77 = 3;
          goto LABEL_234;
        }
LABEL_233:
        char v77 = 2;
        goto LABEL_234;
      }
LABEL_231:
      char v77 = 1;
      goto LABEL_234;
    }
LABEL_230:
    char v77 = 0;
    goto LABEL_234;
  }
  int v72 = v112[1].__locale_;
  if (v112[1].__locale_ == (std::locale::__imp *)7)
  {
    if (*(_DWORD *)v112[0].__locale_ == 1852534389 && *(_DWORD *)((char *)v112[0].__locale_ + 3) == 1853321070) {
      goto LABEL_230;
    }
    if (*(_DWORD *)v112[0].__locale_ == 1802264951 && *(_DWORD *)((char *)v112[0].__locale_ + 3) == 1735289195) {
      goto LABEL_231;
    }
    if (*(_DWORD *)v112[0].__locale_ == 1852732786 && *(_DWORD *)((char *)v112[0].__locale_ + 3) == 1735289198) {
      goto LABEL_233;
    }
    if (*(_DWORD *)v112[0].__locale_ == 1818458467 && *(_DWORD *)((char *)v112[0].__locale_ + 3) == 1735289196) {
      goto LABEL_229;
    }
  }
  if (v112[1].__locale_ == (std::locale::__imp *)8)
  {
    if (*(void *)v112[0].__locale_ == 0x676E696D6D697773) {
      goto LABEL_208;
    }
    int v72 = v112[1].__locale_;
  }
  if (v72 == (std::locale::__imp *)7)
  {
    BOOL v73 = *(_DWORD *)v112[0].__locale_ == 1718382439 && *(_DWORD *)((char *)v112[0].__locale_ + 3) == 1735289190;
    if (!v73)
    {
LABEL_176:
      int v72 = v112[1].__locale_;
      goto LABEL_177;
    }
LABEL_232:
    char v77 = 5;
    goto LABEL_234;
  }
LABEL_177:
  if (v72 != (std::locale::__imp *)14) {
    goto LABEL_209;
  }
  double v71 = v112[0].__locale_;
LABEL_179:
  uint64_t v74 = *(void *)v71;
  uint64_t v75 = *(void *)((char *)v71 + 6);
  if (v74 == 0x6C6C69686E776F64 && v75 == 0x676E69696B736C6CLL)
  {
    char v77 = 6;
LABEL_234:
    *(unsigned char *)(a1 + 224) = v77;
    int v83 = 1;
    goto LABEL_235;
  }
LABEL_209:
  if (sub_1000F03F8(v112, "outdoorwheelchair"))
  {
    char v77 = 7;
    goto LABEL_234;
  }
LABEL_211:
  int v83 = 0;
LABEL_235:
  int v88 = sub_100827A44(a1, (void *)(a1 + 240), "velocity_uncertainty_scale_factor");
  if ((v88 & 1) == 0) {
    *(void *)(a1 + 240) = 0x3FF0000000000000;
  }
  int v89 = sub_100827A44(a1, (void *)(a1 + 248), "vertical_speed_limit_mps");
  if ((v89 & 1) == 0) {
    *(void *)(a1 + 248) = 0x4049000000000000;
  }
  int v90 = sub_100827A44(a1, (void *)(a1 + 256), "minimum_driving_speed_that_requires_speed_uncertainty_floor_mps");
  if ((v90 & 1) == 0) {
    *(void *)(a1 + 256) = 0x4024000000000000;
  }
  int v91 = sub_100827A44(a1, (void *)(a1 + 264), "minimum_driving_speed_uncertainty_mps");
  if ((v91 & 1) == 0) {
    *(void *)(a1 + 264) = 0x4006A09E667F3BCCLL;
  }
  int v92 = sub_100827A44(a1, (void *)(a1 + 280), "speed_uncertainty_threshold_multiplier");
  if ((v92 & 1) == 0) {
    *(void *)(a1 + 280) = 0x4000000000000000;
  }
  unsigned int v93 = sub_100827A44(a1, (void *)(a1 + 288), "course_uncertainty_threshold_rad");
  if ((v93 & 1) == 0) {
    *(void *)(a1 + 288) = 0x3FF921FF2E48E8A7;
  }
  uint64_t v9 = v83 & v88 & v89 & v90 & v91 & v92 & v93;
  *(unsigned char *)(a1 + 296) = v9;
  if (SBYTE7(v113) < 0) {
    operator delete(v112[0].__locale_);
  }
  return v9;
}

void sub_100826818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1008268E8(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100826940(a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_100826928(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100826940(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    unsigned __int8 v5 = (uint64_t **)result;
    long long v6 = result + 1;
    do
    {
      double result = sub_1008269CC(v5, v6, v4 + 32, (_OWORD *)v4 + 2);
      std::string::size_type v7 = (unsigned __int8 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          std::string::size_type v8 = v7;
          std::string::size_type v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          std::string::size_type v8 = (unsigned __int8 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          unint64_t v4 = v8;
        }
        while (!v9);
      }
      unint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1008269CC(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, _OWORD *a4)
{
  long long v6 = sub_100826A54(a1, a2, &v11, &v10, a3);
  std::string::size_type v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    std::string::size_type v8 = (uint64_t **)v6;
    std::string::size_type v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_1000EDF90(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_100826A54(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int8 *a5)
{
  unsigned __int8 v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((unsigned __int8 *)a2 + 32), v6 < v7))
  {
    std::string::size_type v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      unint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        unint64_t v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((unsigned __int8 *)v10 + 32) < v15) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          BOOL v17 = (uint64_t *)v16;
          unsigned int v18 = *(unsigned __int8 *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          unsigned __int8 v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        unsigned __int8 v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      BOOL v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    char v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      char v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int8 *)a4 + 32))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          BOOL v21 = (uint64_t *)v20;
          unsigned int v22 = *(unsigned __int8 *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          unsigned __int8 v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        unsigned __int8 v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      BOOL v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t sub_100826BFC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  unint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      sub_100826C7C((uint64_t **)a1, v4, a2, a2);
      a2 += 32;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_100826C64(_Unwind_Exception *a1)
{
  sub_1004459BC(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100826C7C(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, unsigned char *a4)
{
  uint64_t v6 = (uint64_t **)sub_100826A54(a1, a2, &v10, &v9, a3);
  double result = *v6;
  if (!*v6)
  {
    sub_100826D00((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000EDF90(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *sub_100826D00@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x40uLL);
  *(void *)(a3 + 8) = v5;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *((unsigned char *)v6 + 32) = *a2;
  double result = sub_1008268E8((uint64_t *)v6 + 5, (uint64_t)(a2 + 8));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100826D70(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_100826D8C(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100826D8C(uint64_t a1, void **a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_1000F5BB0((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

void (__cdecl ***sub_100826DE8(void (__cdecl ***a1)(std::ifstream *__hidden this)))(std::ifstream *__hidden this)
{
  *a1 = v3;
  *(void *)((char *)*(v3 - 3) + (void)a1) = v2;
  a1[1] = 0;
  unint64_t v4 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v4, a1 + 2);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)*(*a1 - 3) + (void)a1), *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
  }
  return a1;
}

void sub_100826F74(_Unwind_Exception *a1)
{
}

void *sub_100826FAC(void *a1)
{
  std::filebuf::~filebuf();
  std::istream::~istream();
  std::ios::~ios();
  return a1;
}

uint64_t sub_100827078(uint64_t a1, std::string *a2, const std::string::value_type *a3, char *__s)
{
  sub_100134750(&__str, __s);
  uint64_t v7 = sub_100827518(a1, (uint64_t)a2, a3);
  if ((v7 & 1) == 0) {
    std::string::operator=(a2, &__str);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_1008270F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100827110(uint64_t a1, _DWORD *a2, int a3, const std::string::value_type *a4)
{
  if (!sub_10082759C(a1, __s, a4, ""))
  {
    if (*(unsigned char *)(a1 + 32))
    {
      LOWORD(v20[0]) = 0;
      v12.__r_.__value_.__s.__data_[0] = 2;
      cnprint::CNPrinter::Print();
    }
    return 0xFFFFFFFFLL;
  }
  sub_100134750(v38, __s);
  sub_100828384((uint64_t)&v34, " ,;", 0, 0);
  sub_10082841C((uint64_t)v29, (uint64_t *)v38, &v34);
  sub_100828028((uint64_t)v29, (char *)v20);
  for (uint64_t i = 0; ; ++i)
  {
    sub_10082811C((uint64_t)v29, (char *)&v12);
    if (v17 && v26)
    {
      if (v15 != v24)
      {
        BOOL v8 = 0;
        goto LABEL_11;
      }
      BOOL v9 = v16 == v25;
    }
    else
    {
      BOOL v9 = v17 == v26;
    }
    BOOL v8 = v9;
LABEL_11:
    if (v19 < 0) {
      operator delete(__p);
    }
    if (v14 < 0) {
      operator delete(v13);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    if (v8) {
      goto LABEL_36;
    }
    if ((a3 & ~(a3 >> 31)) == i)
    {
      LOWORD(v12.__r_.__value_.__l.__data_) = 0;
      cnprint::CNPrinter::Print();
      goto LABEL_35;
    }
    if (!v26) {
      __assert_rtn("dereference", "token_iterator.hpp", 59, "valid_");
    }
    uint64_t v10 = v28 >= 0 ? (char *)&v27 : (char *)v27;
    if ((sub_100828268(a1, a2, v10) & 1) == 0) {
      break;
    }
    if (*(unsigned char *)(a1 + 32))
    {
      std::to_string(&v12, a2[1]);
      cnprint::CNPrinter::Print();
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v12.__r_.__value_.__l.__data_);
      }
    }
    ++a2;
    sub_100828D18((uint64_t)v20);
  }
  LOWORD(v12.__r_.__value_.__l.__data_) = 0;
  if (!v26) {
    __assert_rtn("dereference", "token_iterator.hpp", 59, "valid_");
  }
  cnprint::CNPrinter::Print();
LABEL_35:
  uint64_t i = 0xFFFFFFFFLL;
LABEL_36:
  if (v28 < 0) {
    operator delete(v27);
  }
  if (v23 < 0) {
    operator delete(v22);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (v33 < 0) {
    operator delete(v32);
  }
  if (v31 < 0) {
    operator delete(v30);
  }
  if (v37 < 0) {
    operator delete(v36);
  }
  if (v35 < 0) {
    operator delete((void *)v34);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  return i;
}

void sub_100827498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,int a62,__int16 a63)
{
  sub_100828214((uint64_t)&a28);
  sub_1005471B8((uint64_t)&a42);
  sub_100286A7C((uint64_t)&a52);
  if (a65 < 0) {
    operator delete(*(void **)(v65 + 256));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100827518(uint64_t a1, uint64_t a2, const std::string::value_type *a3)
{
  int v4 = a1;
  uint64_t result = sub_10082759C(a1, __s, a3, "");
  if (result) {
    return sub_100827970(v4, a2, __s);
  }
  return result;
}

uint64_t sub_10082759C(uint64_t a1, char *__dst, const std::string::value_type *a3, char *__src)
{
  int v4 = __src;
  if (*(char *)(a1 + 31) < 0)
  {
    if (!*(void *)(a1 + 16)) {
      goto LABEL_71;
    }
  }
  else if (!*(unsigned char *)(a1 + 31))
  {
    goto LABEL_71;
  }
  sub_100134750(&v43, "\n");
  BOOL v8 = std::string::append(&v43, a3);
  BOOL v9 = std::string::append(v8, ":");
  std::string::size_type v10 = *(unsigned __int8 *)(a1 + 31);
  __s = (std::string::value_type *)a3;
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v11 = *(char **)(a1 + 8);
    uint64_t v12 = *(void *)(a1 + 16);
  }
  else
  {
    uint64_t v11 = (char *)(a1 + 8);
    uint64_t v12 = *(unsigned __int8 *)(a1 + 31);
  }
  int v13 = SHIBYTE(v9->__r_.__value_.__r.__words[2]);
  if (v13 >= 0) {
    char v14 = v9;
  }
  else {
    char v14 = (std::string *)v9->__r_.__value_.__r.__words[0];
  }
  if (v13 >= 0) {
    int64_t size = HIBYTE(v9->__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t size = v9->__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_45;
  }
  if (v12 >= size)
  {
    char v19 = &v11[v12];
    int v20 = v14->__r_.__value_.__s.__data_[0];
    char v21 = v11;
    do
    {
      uint64_t v22 = v12 - size;
      if (v22 == -1) {
        break;
      }
      char v23 = (char *)memchr(v21, v20, v22 + 1);
      if (!v23) {
        break;
      }
      uint64_t v24 = v23;
      if (!memcmp(v23, v14, size))
      {
        if (v24 != v19)
        {
          int64_t v35 = v24 - v11;
          if (v24 - v11 != -1) {
            goto LABEL_46;
          }
        }
        break;
      }
      char v21 = v24 + 1;
      uint64_t v12 = v19 - (v24 + 1);
    }
    while (v12 >= size);
  }
  std::string::assign(&v43, __s);
  uint64_t v16 = std::string::append(&v43, ":");
  std::string::size_type v10 = *(unsigned __int8 *)(a1 + 31);
  if (*(char *)(a1 + 31) < 0)
  {
    char v17 = *(char **)(a1 + 8);
    uint64_t v18 = *(void *)(a1 + 16);
  }
  else
  {
    char v17 = (char *)(a1 + 8);
    uint64_t v18 = *(unsigned __int8 *)(a1 + 31);
  }
  int v25 = SHIBYTE(v16->__r_.__value_.__r.__words[2]);
  char v26 = v25 >= 0 ? v16 : (std::string *)v16->__r_.__value_.__r.__words[0];
  int64_t v27 = v25 >= 0 ? HIBYTE(v16->__r_.__value_.__r.__words[2]) : v16->__r_.__value_.__l.__size_;
  if (v27)
  {
    if (v18 >= v27)
    {
      BOOL v29 = &v17[v18];
      int v30 = v26->__r_.__value_.__s.__data_[0];
      char v31 = v17;
      do
      {
        uint64_t v32 = v18 - v27;
        if (v32 == -1) {
          break;
        }
        char v33 = (char *)memchr(v31, v30, v32 + 1);
        if (!v33) {
          break;
        }
        long long v34 = v33;
        if (!memcmp(v33, v26, v27))
        {
          char v28 = 1;
          if (v34 == v29 || v34 != v17) {
            goto LABEL_68;
          }
          goto LABEL_45;
        }
        char v31 = v34 + 1;
        uint64_t v18 = v29 - (v34 + 1);
      }
      while (v18 >= v27);
    }
    char v28 = 1;
  }
  else
  {
LABEL_45:
    int64_t v35 = 0;
LABEL_46:
    std::string::size_type v36 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v36 = v43.__r_.__value_.__l.__size_;
    }
    std::string::size_type v37 = v36 + v35;
    if ((v10 & 0x80) != 0) {
LABEL_54:
    }
      std::string::size_type v10 = *(void *)(a1 + 16);
    while (v37 < v10
         && (*std::string::at((std::string *)(a1 + 8), v37) == 58
          || *std::string::at((std::string *)(a1 + 8), v37) == 32
          || *std::string::at((std::string *)(a1 + 8), v37) == 9))
    {
      ++v37;
      std::string::size_type v10 = *(unsigned __int8 *)(a1 + 31);
      if ((v10 & 0x80) != 0) {
        goto LABEL_54;
      }
    }
    for (uint64_t i = 0; i != 255; ++i)
    {
      if (*(char *)(a1 + 31) < 0) {
        std::string::size_type v39 = *(void *)(a1 + 16);
      }
      else {
        std::string::size_type v39 = *(unsigned __int8 *)(a1 + 31);
      }
      if (v37 + i >= v39) {
        break;
      }
      if (*std::string::at((std::string *)(a1 + 8), v37 + i) == 10) {
        break;
      }
      if (*std::string::at((std::string *)(a1 + 8), v37 + i) == 13) {
        break;
      }
      __dst[i] = *std::string::at((std::string *)(a1 + 8), v37 + i);
    }
    __dst[i] = 0;
    if (*(unsigned char *)(a1 + 32)) {
      cnprint::CNPrinter::Print();
    }
    char v28 = 0;
  }
LABEL_68:
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  int v4 = __src;
  if ((v28 & 1) == 0) {
    return 1;
  }
LABEL_71:
  strncpy(__dst, v4, 0x100uLL);
  if (*(unsigned char *)(a1 + 32))
  {
    LOWORD(v43.__r_.__value_.__l.__data_) = 0;
    cnprint::CNPrinter::Print();
  }
  return 0;
}

void sub_100827948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100827970(int a1, uint64_t a2, std::string::value_type *__s)
{
  memset(&v5, 0, sizeof(v5));
  std::string::assign(&v5, __s);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(std::string *)a2 = v5;
  return 1;
}

void sub_1008279D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void (**__p)(std::bad_cast *__hidden this), long long a11)
{
  if (SHIBYTE(a11) < 0) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    exception_ptr = (char *)__cxa_get_exception_ptr(exception_object);
    long long __p = &off_10229E8C8;
    a11 = *(_OWORD *)(exception_ptr + 8);
    __cxa_begin_catch(exception_object);
    std::bad_cast::~bad_cast((std::bad_cast *)&__p);
    __cxa_end_catch();
    JUMPOUT(0x1008279C0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100827A44(uint64_t a1, void *a2, const std::string::value_type *a3)
{
  int v4 = a1;
  uint64_t result = sub_10082759C(a1, __dst, a3, "");
  if (result) {
    return sub_100827AC8(v4, a2, __dst);
  }
  return result;
}

uint64_t sub_100827AC8(int a1, void *a2, char *__s)
{
  uint64_t v5 = 0;
  v6[0] = (unsigned __int8 *)__s;
  v6[1] = (unsigned __int8 *)&__s[strlen(__s)];
  if ((sub_100827BE4(v6, (double *)&v5) & 1) == 0)
  {
    std::bad_cast::bad_cast(&v7);
    v7.__vftable = (std::bad_cast_vtbl *)&off_10229E8C8;
    sub_1001E91E8((uint64_t)&v7);
  }
  *a2 = v5;
  return 1;
}

void sub_100827B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::bad_cast a12, long long a13)
{
  std::bad_cast::~bad_cast(&a12);
  if (a2 == 1)
  {
    exception_ptr = (char *)__cxa_get_exception_ptr(a1);
    a12.__vftable = (std::bad_cast_vtbl *)&off_10229E8C8;
    a13 = *(_OWORD *)(exception_ptr + 8);
    __cxa_begin_catch(a1);
    std::bad_cast::~bad_cast(&a12);
    __cxa_end_catch();
    JUMPOUT(0x100827B14);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100827BE4(unsigned __int8 **a1, double *a2)
{
  if (sub_100827C5C(*a1, a1[1], a2)) {
    return 1;
  }
  uint64_t result = sub_100827DF4((uint64_t *)a1);
  if (result)
  {
    unsigned int v4 = *(a1[1] - 1) - 43;
    if (v4 <= 0x3A)
    {
      if ((0x400000004000005uLL >> v4)) {
        return 0;
      }
      else {
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_100827C5C(unsigned __int8 *a1, unsigned __int8 *a2, double *a3)
{
  if (a1 == a2) {
    return 0;
  }
  int v3 = *a1;
  BOOL v4 = v3 == 45 || v3 == 43;
  uint64_t v5 = (uint64_t)(v4 ? a1 + 1 : a1);
  uint64_t v6 = &a2[-v5];
  if ((uint64_t)&a2[-v5] < 3) {
    return 0;
  }
  unint64_t v8 = 0;
  BOOL v9 = 0;
  do
  {
    int v10 = *(unsigned __int8 *)(v5 + v8);
    if (v10 != aNan_0[v8] && v10 != aNan[v8]) {
      break;
    }
    BOOL v9 = v8++ > 1;
  }
  while (v8 != 3);
  if (!v9)
  {
    if (v6 == (unsigned __int8 *)3)
    {
      unint64_t v18 = 0;
      BOOL v16 = 0;
      do
      {
        int v19 = *(unsigned __int8 *)(v5 + v18);
        if (v19 != aInfinity_0[v18] && v19 != aInfinity[v18]) {
          break;
        }
        BOOL v16 = v18++ > 1;
      }
      while (v18 != 3);
    }
    else
    {
      if (v6 != (unsigned __int8 *)8) {
        return 0;
      }
      unint64_t v15 = 0;
      BOOL v16 = 0;
      do
      {
        int v17 = *(unsigned __int8 *)(v5 + v15);
        if (v17 != aInfinity_0[v15] && v17 != aInfinity[v15]) {
          break;
        }
        BOOL v16 = v15++ > 6;
      }
      while (v15 != 8);
    }
    if (v16)
    {
      BOOL v12 = v3 == 45;
      double v13 = INFINITY;
      double v14 = -INFINITY;
      goto LABEL_33;
    }
    return 0;
  }
  uint64_t v11 = (unsigned __int8 *)(v5 + 3);
  if (v11 != a2 && (a2 - v11 < 2 || *v11 != 40 || *(a2 - 1) != 41)) {
    return 0;
  }
  BOOL v12 = v3 == 45;
  double v13 = NAN;
  double v14 = NAN;
LABEL_33:
  if (v12) {
    double v13 = v14;
  }
  *a3 = v13;
  return 1;
}

BOOL sub_100827DF4(uint64_t *a1)
{
  std::streambuf::basic_streambuf();
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  __sb[0] = off_1022CAEB8;
  __sb[2] = v2;
  __sb[3] = v2;
  __sb[4] = v3;
  v9[1] = 0;
  std::ios_base::init(&v10, __sb);
  uint64_t v11 = 0;
  int v12 = -1;
  v4->__exceptions_ = 1;
  std::ios_base::clear(v4, v4->__rdstate_);
  uint64_t v5 = v9[0];
  *(_DWORD *)((char *)&v9[1] + *(void *)(v9[0] - 24)) &= ~0x1000u;
  *(void *)((char *)&v9[2] + *(void *)(v5 - 24)) = 17;
  uint64_t v6 = (void *)std::istream::operator>>();
  BOOL v7 = (*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) == 0 && std::istream::get() == -1;
  std::istream::~istream();
  std::streambuf::~streambuf();
  return v7;
}

void sub_100827FA0(_Unwind_Exception *a1)
{
}

void sub_100827FF0()
{
  std::streambuf::~streambuf();

  operator delete();
}

void sub_100828028(uint64_t a1@<X0>, char *a2@<X8>)
{
  if (*(char *)(a1 + 39) < 0)
  {
    sub_1000DC48C(v4, *(void **)(a1 + 16), *(void *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)BOOL v4 = *(_OWORD *)(a1 + 16);
    uint64_t v5 = *(void *)(a1 + 32);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    sub_1000DC48C(&__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
  }
  else
  {
    long long __p = *(_OWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 56);
  }
  uint64_t v8 = *(void *)(a1 + 64);
  char v9 = *(unsigned char *)(a1 + 72);
  sub_100828504(a2, (long long *)v4, *(void *)a1, *(void *)(a1 + 8));
  if (SHIBYTE(v7) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4[0]);
  }
}

void sub_1008280F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10082811C(uint64_t a1@<X0>, char *a2@<X8>)
{
  if (*(char *)(a1 + 39) < 0)
  {
    sub_1000DC48C(v4, *(void **)(a1 + 16), *(void *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)BOOL v4 = *(_OWORD *)(a1 + 16);
    uint64_t v5 = *(void *)(a1 + 32);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    sub_1000DC48C(&__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
  }
  else
  {
    long long __p = *(_OWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 56);
  }
  uint64_t v8 = *(void *)(a1 + 64);
  char v9 = *(unsigned char *)(a1 + 72);
  sub_100828504(a2, (long long *)v4, *(void *)(a1 + 8), *(void *)(a1 + 8));
  if (SHIBYTE(v7) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4[0]);
  }
}

void sub_1008281E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100828214(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100828268(int a1, _DWORD *a2, char *__s)
{
  int v5 = 0;
  v6[0] = (unsigned __int8 *)__s;
  v6[1] = (unsigned __int8 *)&__s[strlen(__s)];
  if ((sub_100828928(v6, &v5) & 1) == 0)
  {
    std::bad_cast::bad_cast(&v7);
    v7.__vftable = (std::bad_cast_vtbl *)&off_10229E8C8;
    sub_1001E91E8((uint64_t)&v7);
  }
  *a2 = v5;
  return 1;
}

void sub_10082830C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::bad_cast a12, long long a13)
{
  std::bad_cast::~bad_cast(&a12);
  if (a2 == 1)
  {
    exception_ptr = (char *)__cxa_get_exception_ptr(a1);
    a12.__vftable = (std::bad_cast_vtbl *)&off_10229E8C8;
    a13 = *(_OWORD *)(exception_ptr + 8);
    __cxa_begin_catch(a1);
    std::bad_cast::~bad_cast(&a12);
    __cxa_end_catch();
    JUMPOUT(0x1008282B4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100828384(uint64_t a1, char *a2, const std::string::value_type *a3, int a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_100134750((void *)(a1 + 24), a2);
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = a4;
  *(unsigned char *)(a1 + 56) = 0;
  if (a3) {
    std::string::assign((std::string *)a1, a3);
  }
  return a1;
}

void sub_1008283E8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10082841C(uint64_t a1, uint64_t *a2, long long *a3)
{
  if (*((char *)a2 + 23) >= 0) {
    int v5 = a2;
  }
  else {
    int v5 = (uint64_t *)*a2;
  }
  *(void *)a1 = v5;
  uint64_t v6 = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) == 0) {
    std::bad_cast v7 = a2;
  }
  else {
    std::bad_cast v7 = (uint64_t *)*a2;
  }
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = a2[1];
  }
  *(void *)(a1 + 8) = (char *)v7 + v6;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 16), *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *(void *)(a1 + 32) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 16) = v8;
  }
  char v9 = (unsigned char *)(a1 + 40);
  if (*((char *)a3 + 47) < 0)
  {
    sub_1000DC48C(v9, *((void **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v10 = *(long long *)((char *)a3 + 24);
    *(void *)(a1 + 56) = *((void *)a3 + 5);
    *(_OWORD *)char v9 = v10;
  }
  uint64_t v11 = *((void *)a3 + 6);
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a3 + 56);
  *(void *)(a1 + 64) = v11;
  return a1;
}

void sub_1008284E8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100828504(char *__dst, long long *a2, uint64_t a3, uint64_t a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v8;
  }
  char v9 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_1000DC48C(v9, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v10 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)char v9 = v10;
  }
  uint64_t v11 = *((void *)a2 + 6);
  __dst[56] = *((unsigned char *)a2 + 56);
  *((void *)__dst + 6) = v11;
  *((void *)__dst + 8) = a3;
  *((void *)__dst + 9) = a4;
  __dst[80] = 0;
  *((void *)__dst + 11) = 0;
  *((void *)__dst + 12) = 0;
  *((void *)__dst + 13) = 0;
  sub_1008285F8((uint64_t)__dst);
  return __dst;
}

void sub_1008285BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008285F8(uint64_t result)
{
  if (!*(unsigned char *)(result + 80))
  {
    uint64_t v1 = result;
    uint64_t v2 = *(std::string::value_type **)(result + 72);
    if (*(std::string::value_type **)(result + 64) == v2) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = sub_100828648(result, (std::string::value_type **)(result + 64), v2, (std::string *)(result + 88));
    }
    *(unsigned char *)(v1 + 80) = result;
  }
  return result;
}

uint64_t sub_100828648(uint64_t a1, std::string::value_type **a2, std::string::value_type *a3, std::string *this)
{
  long long v8 = *a2;
  if (*(_DWORD *)(a1 + 52)) {
    goto LABEL_2;
  }
  if (v8 == a3) {
    return 0;
  }
  while (1)
  {
    BOOL v9 = sub_10082882C(a1, *v8);
    long long v8 = *a2;
    if (!v9) {
      break;
    }
    *a2 = ++v8;
    if (v8 == a3)
    {
      long long v8 = a3;
      break;
    }
  }
  if (*(_DWORD *)(a1 + 52))
  {
LABEL_2:
    if (v8 != a3)
    {
      if (sub_1008288AC(a1, *v8))
      {
        if (*(unsigned char *)(a1 + 56))
        {
          ++*a2;
          *(unsigned char *)(a1 + 56) = 0;
LABEL_25:
          sub_1001E9118(this, v8, *a2, *a2 - v8);
          return 1;
        }
      }
      else if (*(unsigned char *)(a1 + 56) || !sub_10082882C(a1, **a2))
      {
        BOOL v13 = sub_10082882C(a1, **a2);
        double v14 = *a2;
        if (v13)
        {
          *a2 = ++v14;
          long long v8 = v14;
        }
        while (v14 != a3 && !sub_10082882C(a1, *v14) && !sub_1008288AC(a1, **a2))
        {
          double v14 = *a2 + 1;
          *a2 = v14;
        }
      }
      *(unsigned char *)(a1 + 56) = 1;
      goto LABEL_25;
    }
    if (!*(unsigned char *)(a1 + 56))
    {
      uint64_t v12 = 1;
      *(unsigned char *)(a1 + 56) = 1;
      sub_1001E9118(this, a3, a3, 0);
      return v12;
    }
  }
  else if (v8 != a3)
  {
    BOOL v10 = sub_1008288AC(a1, *v8);
    uint64_t v11 = *a2;
    if (v10)
    {
      *a2 = v11 + 1;
    }
    else
    {
      while (v11 != a3 && !sub_10082882C(a1, *v11) && !sub_1008288AC(a1, **a2))
      {
        uint64_t v11 = *a2 + 1;
        *a2 = v11;
      }
    }
    goto LABEL_25;
  }
  return 0;
}

BOOL sub_10082882C(uint64_t a1, __darwin_ct_rune_t a2)
{
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(void *)(a1 + 32)) {
      goto LABEL_3;
    }
  }
  else if (*(unsigned char *)(a1 + 47))
  {
LABEL_3:
    BOOL v2 = std::string::find((const std::string *)(a1 + 24), a2, 0) == -1;
    return !v2;
  }
  if (!*(unsigned char *)(a1 + 49)) {
    return 0;
  }
  if (a2 < 0) {
    __uint32_t v3 = __maskrune(a2, 0x4000uLL);
  }
  else {
    __uint32_t v3 = _DefaultRuneLocale.__runetype[a2] & 0x4000;
  }
  BOOL v2 = v3 == 0;
  return !v2;
}

BOOL sub_1008288AC(uint64_t a1, __darwin_ct_rune_t a2)
{
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(void *)(a1 + 8)) {
      goto LABEL_3;
    }
  }
  else if (*(unsigned char *)(a1 + 23))
  {
LABEL_3:
    BOOL v2 = std::string::find((const std::string *)a1, a2, 0) == -1;
    return !v2;
  }
  if (!*(unsigned char *)(a1 + 48)) {
    return 0;
  }
  if (a2 < 0) {
    __uint32_t v3 = __maskrune(a2, 0x2000uLL);
  }
  else {
    __uint32_t v3 = _DefaultRuneLocale.__runetype[a2] & 0x2000;
  }
  BOOL v2 = v3 == 0;
  return !v2;
}

uint64_t sub_100828928(unsigned __int8 **a1, _DWORD *a2)
{
  __uint32_t v3 = *a1;
  BOOL v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  int v5 = *v3;
  if (v5 == 45 || v5 == 43) {
    *a1 = ++v3;
  }
  v7[0] = 0;
  int v8 = 1;
  BOOL v9 = a2;
  BOOL v10 = v3;
  uint64_t v11 = v2;
  uint64_t result = sub_1008289B0((uint64_t)v7);
  if (v5 == 45) {
    *a2 = -*a2;
  }
  return result;
}

uint64_t sub_1008289B0(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v2 - 1;
  __uint32_t v3 = *(_DWORD **)(a1 + 8);
  *__uint32_t v3 = 0;
  if (*(void *)(a1 + 16) <= (unint64_t)(v2 - 1))
  {
    int v4 = *(unsigned __int8 *)(v2 - 1);
    if ((v4 - 58) < 0xFFFFFFF6) {
      return 0;
    }
    *__uint32_t v3 = v4 - 48;
    *(void *)(a1 + 24) = v2 - 2;
    std::locale::locale(&v30);
    uint64_t v6 = std::locale::classic();
    if (std::locale::operator==(&v30, v6))
    {
      uint64_t v1 = sub_100828C5C(a1);
LABEL_45:
      std::locale::~locale(&v30);
      return v1;
    }
    std::bad_cast v7 = std::locale::use_facet(&v30, &std::numpunct<char>::id);
    ((void (*)(void **__return_ptr))v7->__vftable[1].__on_zero_shared)(&__p);
    if ((char)v29 < 0)
    {
      uint64_t v8 = v28;
      if (!v28) {
        goto LABEL_42;
      }
      p_p = (char *)__p;
    }
    else
    {
      uint64_t v8 = v29;
      if (!v29) {
        goto LABEL_42;
      }
      p_p = (char *)&__p;
    }
    if (*p_p >= 1)
    {
      char v10 = ((uint64_t (*)(const std::locale::facet *))v7->__vftable[1].~facet_0)(v7);
      uint64_t v11 = *(unsigned char **)(a1 + 16);
      uint64_t v12 = *(unsigned char **)(a1 + 24);
      if (v12 >= v11)
      {
        unsigned __int8 v13 = 0;
        double v14 = __p;
        if ((v29 & 0x80u) == 0) {
          double v14 = &__p;
        }
        char v15 = *v14 - 1;
        do
        {
          if (v15)
          {
            unsigned int v16 = *(_DWORD *)(a1 + 4);
            if (*(unsigned char *)a1) {
              BOOL v17 = 1;
            }
            else {
              BOOL v17 = v16 > 0x19999999;
            }
            char v18 = v17;
            *(unsigned char *)a1 = v18;
            unsigned int v19 = 10 * v16;
            *(_DWORD *)(a1 + 4) = 10 * v16;
            int v20 = (char)*v12;
            if ((*v12 - 58) < 0xF6u) {
              goto LABEL_47;
            }
            unsigned int v21 = v20 - 48;
            int v22 = (v20 - 48) * v19;
            if (v21)
            {
              if (v18) {
                goto LABEL_47;
              }
              if (((v21 * (unint64_t)v19) & 0xFFFFFFFF00000000) != 0) {
                goto LABEL_47;
              }
              char v23 = *(_DWORD **)(a1 + 8);
              int v24 = *v23;
              if (__CFADD__(v22, *v23)) {
                goto LABEL_47;
              }
            }
            else
            {
              char v23 = *(_DWORD **)(a1 + 8);
              int v24 = *v23;
            }
            *char v23 = v24 + v22;
            --v15;
          }
          else
          {
            if (*v12 != v10) {
              goto LABEL_42;
            }
            if (v12 == v11)
            {
LABEL_47:
              uint64_t v1 = 0;
              goto LABEL_43;
            }
            if (v8 - 1 > (unint64_t)v13) {
              ++v13;
            }
            if ((v29 & 0x80u) == 0) {
              int v25 = &__p;
            }
            else {
              int v25 = __p;
            }
            char v15 = v25[v13];
          }
          *(void *)(a1 + 24) = --v12;
        }
        while (v12 >= v11);
      }
      uint64_t v1 = 1;
      goto LABEL_43;
    }
LABEL_42:
    uint64_t v1 = sub_100828C5C(a1);
LABEL_43:
    if ((char)v29 < 0) {
      operator delete(__p);
    }
    goto LABEL_45;
  }
  return v1;
}

void sub_100828C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::locale::~locale(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100828C5C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(unsigned char **)(a1 + 24);
  if ((unint64_t)v2 < v1) {
    return 1;
  }
  char v4 = *(unsigned char *)a1 != 0;
  while (1)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 4);
    v4 |= v5 > 0x19999999;
    *(unsigned char *)a1 = v4 & 1;
    unsigned int v6 = 10 * v5;
    *(_DWORD *)(a1 + 4) = 10 * v5;
    int v7 = (char)*v2;
    if ((*v2 - 58) < 0xF6u) {
      break;
    }
    unsigned int v8 = v7 - 48;
    int v9 = (v7 - 48) * v6;
    if (v8)
    {
      if (v4) {
        return 0;
      }
      if (((v8 * (unint64_t)v6) & 0xFFFFFFFF00000000) != 0) {
        return 0;
      }
      char v10 = *(_DWORD **)(a1 + 8);
      int v11 = *v10;
      if (__CFADD__(v9, *v10)) {
        return 0;
      }
    }
    else
    {
      char v10 = *(_DWORD **)(a1 + 8);
      int v11 = *v10;
    }
    *char v10 = v11 + v9;
    *(void *)(a1 + 24) = --v2;
    if ((unint64_t)v2 < v1) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_100828D18(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 80)) {
    sub_101A702E8();
  }
  uint64_t result = sub_100828648(a1, (std::string::value_type **)(a1 + 64), *(std::string::value_type **)(a1 + 72), (std::string *)(a1 + 88));
  *(unsigned char *)(a1 + 80) = result;
  return result;
}

uint64_t sub_100828D58(uint64_t a1, uint64_t a2, int a3, const std::string::value_type *a4)
{
  if (!sub_10082759C(a1, __s, a4, ""))
  {
    if (*(unsigned char *)(a1 + 32))
    {
      LOWORD(v20[0]) = 0;
      v12.__r_.__value_.__s.__data_[0] = 2;
      cnprint::CNPrinter::Print();
    }
    return 0xFFFFFFFFLL;
  }
  sub_100134750(v38, __s);
  sub_100828384((uint64_t)&v34, " ,;", 0, 0);
  sub_10082841C((uint64_t)v29, (uint64_t *)v38, &v34);
  sub_100828028((uint64_t)v29, (char *)v20);
  for (uint64_t i = 0; ; ++i)
  {
    sub_10082811C((uint64_t)v29, (char *)&v12);
    if (v17 && v26)
    {
      if (v15 != v24)
      {
        BOOL v8 = 0;
        goto LABEL_11;
      }
      BOOL v9 = v16 == v25;
    }
    else
    {
      BOOL v9 = v17 == v26;
    }
    BOOL v8 = v9;
LABEL_11:
    if (v19 < 0) {
      operator delete(__p);
    }
    if (v14 < 0) {
      operator delete(v13);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    if (v8) {
      goto LABEL_36;
    }
    if ((a3 & ~(a3 >> 31)) == i)
    {
      LOWORD(v12.__r_.__value_.__l.__data_) = 0;
      cnprint::CNPrinter::Print();
      goto LABEL_35;
    }
    if (!v26) {
      __assert_rtn("dereference", "token_iterator.hpp", 59, "valid_");
    }
    char v10 = v28 >= 0 ? (char *)&v27 : (char *)v27;
    if ((sub_100827AC8(a1, (void *)a2, v10) & 1) == 0) {
      break;
    }
    if (*(unsigned char *)(a1 + 32))
    {
      std::to_string(&v12, *(double *)(a2 + 8));
      cnprint::CNPrinter::Print();
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v12.__r_.__value_.__l.__data_);
      }
    }
    a2 += 8;
    sub_100828D18((uint64_t)v20);
  }
  LOWORD(v12.__r_.__value_.__l.__data_) = 0;
  if (!v26) {
    __assert_rtn("dereference", "token_iterator.hpp", 59, "valid_");
  }
  cnprint::CNPrinter::Print();
LABEL_35:
  uint64_t i = 0xFFFFFFFFLL;
LABEL_36:
  if (v28 < 0) {
    operator delete(v27);
  }
  if (v23 < 0) {
    operator delete(v22);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (v33 < 0) {
    operator delete(v32);
  }
  if (v31 < 0) {
    operator delete(v30);
  }
  if (v37 < 0) {
    operator delete(v36);
  }
  if (v35 < 0) {
    operator delete((void *)v34);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  return i;
}

void sub_1008290E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,int a62,__int16 a63)
{
  sub_100828214((uint64_t)&a28);
  sub_1005471B8((uint64_t)&a42);
  sub_100286A7C((uint64_t)&a52);
  if (a65 < 0) {
    operator delete(*(void **)(v65 + 256));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100829160(uint64_t result)
{
  uint64_t v1 = 0;
  uint64_t v2 = 102;
  do
  {
    uint64_t v3 = result + v1;
    *(void *)(v3 + 24) = 0x600000006;
    *(void *)uint64_t v3 = off_1022CAFF0;
    *(_OWORD *)(v3 + 8) = xmmword_101D47570;
    *(void *)(v3 + 32) = result + v1 + 40;
    *(void *)(v3 + 352) = 0x100000006;
    *(void *)(v3 + 328) = off_1022CAF68;
    *(_OWORD *)(v3 + 336) = xmmword_101D47580;
    *(void *)(v3 + 360) = result + v1 + 368;
    *(void *)(v3 + 440) = 0x600000006;
    *(void *)(v3 + 416) = off_1022CAFF0;
    *(_OWORD *)(result + v1 + 424) = xmmword_101D47570;
    *(void *)(v3 + 448) = result + v1 + 456;
    *(void *)(v3 + 768) = 0x600000006;
    *(void *)(v3 + 744) = off_1022CAFF0;
    *(_OWORD *)(v3 + 752) = xmmword_101D47570;
    *(void *)(v3 + 776) = result + v1 + 784;
    v1 += 1104;
    --v2;
  }
  while (v2);
  *(unsigned char *)(result + 112608) = 0;
  *(void *)(result + 112640) = 0x600000006;
  *(void *)(result + 112616) = off_1022CAFF0;
  *(_OWORD *)(result + 112624) = xmmword_101D47570;
  *(void *)(result + 112648) = result + 112656;
  *(void *)(result + 112968) = 0x600000006;
  *(void *)(result + 112944) = off_1022CAFF0;
  *(_OWORD *)(result + 112952) = xmmword_101D47570;
  *(void *)(result + 112976) = result + 112984;
  *(void *)(result + 113296) = 0x100000006;
  *(void *)(result + 113272) = off_1022CAF68;
  *(_OWORD *)(result + 113280) = xmmword_101D47580;
  *(void *)(result + 113304) = result + 113312;
  return result;
}

void *sub_10082930C(void *result)
{
  uint64_t *result = off_1022CAFC0;
  return result;
}

void sub_10082932C(void *a1)
{
  *a1 = off_1022CAFC0;
  operator delete();
}

uint64_t sub_10082935C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_100829368(uint64_t a1)
{
  sub_10082938C(a1, v1);
}

void sub_10082938C(uint64_t a1, char *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      if (!a2) {
        sub_101A70314();
      }
      int v6 = v4 + v2 - *(_DWORD *)(a1 + 20);
      if (v6 <= 0) {
        sub_101A70340();
      }
      bzero(a2, *(unsigned int *)(a1 + 16));
      int v7 = *(_DWORD *)(a1 + 16);
      if (v7 >= 3)
      {
        uint64_t v8 = (v7 - 1);
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = 1;
        do
        {
          int v11 = &a2[v10];
          if (!a2[v10])
          {
            uint64_t v12 = *(void *)(v9 + 8 * v10);
            int v13 = v10;
            do
            {
              int v13 = v13 * v6 % (int)v8;
              uint64_t v14 = *(void *)(v9 + 8 * v13);
              *(void *)(v9 + 8 * v13) = v12;
              char *v11 = 1;
              int v11 = &a2[v13];
              uint64_t v12 = v14;
            }
            while (!*v11);
          }
          ++v10;
        }
        while (v10 != v8);
      }
    }
  }
}

void sub_100829460(void *a1)
{
  *a1 = off_1022CAFC0;
  operator delete();
}

void sub_100829490(uint64_t a1)
{
  sub_10082938C(a1, v1);
}

uint64_t sub_1008294E0(uint64_t a1)
{
  uint64_t v2 = 111808;
  *(void *)(a1 + 113576) = off_1022CAFC0;
  *(void *)(a1 + 113248) = off_1022CAFC0;
  *(void *)(a1 + 112920) = off_1022CAFC0;
  uint64_t v3 = a1 + 111808;
  uint64_t v4 = -112608;
  do
  {
    unsigned int v5 = (void *)(a1 + v2);
    v5[93] = off_1022CAFC0;
    v5[52] = off_1022CAFC0;
    v5[41] = off_1022CAFC0;
    *unsigned int v5 = off_1022CAFC0;
    v3 -= 1104;
    v2 -= 1104;
    v4 += 1104;
  }
  while (v4);
  *(void *)a1 = off_1022CAE20;
  sub_1004459BC(a1 + 200, *(void **)(a1 + 208));
  sub_1000F5BB0(a1 + 176, *(void **)(a1 + 184));
  sub_1000F5BB0(a1 + 152, *(void **)(a1 + 160));
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  *(void *)a1 = off_1022CAE80;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

BOOL sub_100829690(uint64_t a1)
{
  return !sub_1000EF668(*(double *)(a1 + 24), *(double *)(a1 + 32))
      && sub_1000EF68C(*(double *)(a1 + 24), *(double *)(a1 + 32));
}

void sub_1008296D4(id a1)
{
  qword_102419368 = (uint64_t)os_log_create("com.apple.locationd.Position", "GpsAccessory");
}

uint64_t **sub_100829704(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, unsigned char **a4)
{
  int v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int8 *)v6 + 32);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    int v11 = operator new(0x40uLL);
    v11[32] = **a4;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 5) = v11 + 48;
    sub_1000EDF90(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void *sub_1008297D4(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100420644(a1, a2);
    sub_100829838((uint64_t)a1, a2);
  }
  return a1;
}

void sub_10082981C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100829838(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (a2)
  {
    uint64_t v3 = v2 + 112 * a2;
    uint64_t v4 = v2 + 64;
    __asm { FMOV            V2.2D, #-1.0 }
    uint64_t v10 = 112 * a2;
    do
    {
      *(_OWORD *)(v4 - 64) = xmmword_101D47500;
      *(_OWORD *)(v4 - 48) = xmmword_101D47590;
      *(_OWORD *)(v4 - 32) = xmmword_101D47590;
      *(_OWORD *)(v4 - 16) = _Q2;
      *(_OWORD *)uint64_t v4 = _Q2;
      *(_OWORD *)(v4 + 16) = _Q2;
      *(void *)(v4 + 32) = 0xBFF0000000000000;
      *(void *)(v4 + 40) = 0;
      v4 += 112;
      v10 -= 112;
    }
    while (v10);
  }
  else
  {
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(result + 8) = v3;
  return result;
}

uint64_t sub_100829898(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100829910((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100829910(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_1008299B4((uint64_t)v11);
  return v9;
}

uint64_t sub_1008299B4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1001DD288(a1);
  }
  return a1;
}

char *sub_1008299EC(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 4) < a5)
  {
    long long v13 = *(void **)a1;
    unint64_t v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *(void *)a1) >> 4);
    if (v14 > 0x249249249249249) {
      sub_1001D7FD4();
    }
    uint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((__dst - (uint64_t)v13) >> 4);
    unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - (uint64_t)v13) >> 4);
    uint64_t v17 = 2 * v16;
    if (2 * v16 <= v14) {
      uint64_t v17 = v14;
    }
    if (v16 >= 0x124924924924924) {
      unint64_t v18 = 0x249249249249249;
    }
    else {
      unint64_t v18 = v17;
    }
    uint64_t v45 = v9;
    if (v18) {
      char v19 = (char *)sub_100227C5C(v9, v18);
    }
    else {
      char v19 = 0;
    }
    uint64_t v32 = &v19[112 * v15];
    long long __p = v19;
    BOOL v42 = v32;
    int v44 = &v19[112 * v18];
    uint64_t v33 = 112 * a5;
    long long v34 = &v32[112 * a5];
    do
    {
      long long v35 = *(_OWORD *)v7;
      long long v36 = *((_OWORD *)v7 + 2);
      *((_OWORD *)v32 + 1) = *((_OWORD *)v7 + 1);
      *((_OWORD *)v32 + 2) = v36;
      *(_OWORD *)uint64_t v32 = v35;
      long long v37 = *((_OWORD *)v7 + 3);
      long long v38 = *((_OWORD *)v7 + 4);
      long long v39 = *((_OWORD *)v7 + 6);
      *((_OWORD *)v32 + 5) = *((_OWORD *)v7 + 5);
      *((_OWORD *)v32 + 6) = v39;
      *((_OWORD *)v32 + 3) = v37;
      *((_OWORD *)v32 + 4) = v38;
      v32 += 112;
      v7 += 112;
      v33 -= 112;
    }
    while (v33);
    std::string v43 = v34;
    uint64_t v5 = (char *)sub_100829CF4((void **)a1, (uint64_t)&__p, v5);
    if (v43 != v42) {
      v43 += -112
    }
           - 112 * ((((unint64_t)(v43 - v42 - 112) >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64);
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v20 = v12 - __dst;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - __dst) >> 4) >= a5)
  {
    char v21 = &__src[112 * a5];
    char v23 = *(char **)(v9 - 8);
LABEL_17:
    uint64_t v24 = &v5[112 * a5];
    uint64_t v25 = &v23[-112 * a5];
    char v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      char v26 = v23;
      do
      {
        long long v27 = *(_OWORD *)v25;
        long long v28 = *((_OWORD *)v25 + 2);
        *((_OWORD *)v26 + 1) = *((_OWORD *)v25 + 1);
        *((_OWORD *)v26 + 2) = v28;
        *(_OWORD *)char v26 = v27;
        long long v29 = *((_OWORD *)v25 + 3);
        long long v30 = *((_OWORD *)v25 + 4);
        long long v31 = *((_OWORD *)v25 + 6);
        *((_OWORD *)v26 + 5) = *((_OWORD *)v25 + 5);
        *((_OWORD *)v26 + 6) = v31;
        *((_OWORD *)v26 + 3) = v29;
        *((_OWORD *)v26 + 4) = v30;
        v25 += 112;
        v26 += 112;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(v24, v5, v23 - v24 - 7);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7 - 7);
    }
    return v5;
  }
  char v21 = &__src[16 * ((uint64_t)(v12 - __dst) >> 4)];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[16 * ((uint64_t)(v12 - __dst) >> 4)], v22 - 7);
  }
  char v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v20 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_100829CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100829CF4(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(void **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    long long v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      long long v10 = *((_OWORD *)v8 - 7);
      long long v11 = *((_OWORD *)v8 - 5);
      *(_OWORD *)(v9 - 96) = *((_OWORD *)v8 - 6);
      *(_OWORD *)(v9 - 80) = v11;
      *(_OWORD *)(v9 - 112) = v10;
      long long v12 = *((_OWORD *)v8 - 4);
      long long v13 = *((_OWORD *)v8 - 3);
      long long v14 = *((_OWORD *)v8 - 2);
      uint64_t v7 = (void *)(v9 - 112);
      *(_OWORD *)(v9 - 23) = *(_OWORD *)(v8 - 23);
      *(_OWORD *)(v9 - 48) = v13;
      *(_OWORD *)(v9 - 32) = v14;
      *(_OWORD *)(v9 - 64) = v12;
      v8 -= 112;
      v9 -= 112;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v15 = a1[1];
  uint64_t v16 = *(void *)(a2 + 16);
  int64_t v17 = v15 - __src;
  if (v15 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v17 - 7);
    uint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v16 + v17;
  unint64_t v18 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v18;
  char v19 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v19;
  uint64_t v20 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v20;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void sub_100829DF0(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v6[-v7] >> 4) >= a2)
  {
    sub_100829838((uint64_t)a1, a2);
  }
  else
  {
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - (uint64_t)*a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x249249249249249) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x124924924924924) {
      unint64_t v11 = 0x249249249249249;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v26 = v4;
    if (v11) {
      long long v12 = (char *)sub_100227C5C(v4, v11);
    }
    else {
      long long v12 = 0;
    }
    char v23 = v12;
    uint64_t v24 = &v12[112 * v8];
    *(void *)&long long v25 = v24;
    *((void *)&v25 + 1) = &v12[112 * v11];
    sub_10082A018((uint64_t)&v23, a2);
    long long v14 = *a1;
    long long v13 = a1[1];
    uint64_t v15 = v24;
    if (v13 == *a1)
    {
      char v21 = a1[1];
    }
    else
    {
      do
      {
        long long v16 = *((_OWORD *)v13 - 7);
        long long v17 = *((_OWORD *)v13 - 5);
        *((_OWORD *)v15 - 6) = *((_OWORD *)v13 - 6);
        *((_OWORD *)v15 - 5) = v17;
        *((_OWORD *)v15 - 7) = v16;
        long long v18 = *((_OWORD *)v13 - 4);
        long long v19 = *((_OWORD *)v13 - 3);
        long long v20 = *((_OWORD *)v13 - 2);
        *(_OWORD *)(v15 - 23) = *(_OWORD *)(v13 - 23);
        *((_OWORD *)v15 - 3) = v19;
        *((_OWORD *)v15 - 2) = v20;
        *((_OWORD *)v15 - 4) = v18;
        v15 -= 112;
        v13 -= 112;
      }
      while (v13 != v14);
      char v21 = *a1;
      long long v13 = a1[1];
    }
    *a1 = v15;
    int64_t v22 = a1[2];
    *(_OWORD *)(a1 + 1) = v25;
    *(void *)&long long v25 = v13;
    *((void *)&v25 + 1) = v22;
    char v23 = v21;
    uint64_t v24 = v21;
    if (v13 != v21) {
      *(void *)&long long v25 = &v13[-112
    }
                           - 112
                           * ((((unint64_t)(v13 - v21 - 112) >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64)];
    if (v21) {
      operator delete(v21);
    }
  }
}

void sub_100829FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10082A018(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (a2)
  {
    uint64_t v3 = v2 + 112 * a2;
    uint64_t v4 = v2 + 64;
    __asm { FMOV            V2.2D, #-1.0 }
    uint64_t v10 = 112 * a2;
    do
    {
      *(_OWORD *)(v4 - 64) = xmmword_101D47500;
      *(_OWORD *)(v4 - 48) = xmmword_101D47590;
      *(_OWORD *)(v4 - 32) = xmmword_101D47590;
      *(_OWORD *)(v4 - 16) = _Q2;
      *(_OWORD *)uint64_t v4 = _Q2;
      *(_OWORD *)(v4 + 16) = _Q2;
      *(void *)(v4 + 32) = 0xBFF0000000000000;
      *(void *)(v4 + 40) = 0;
      v4 += 112;
      v10 -= 112;
    }
    while (v10);
  }
  else
  {
    uint64_t v3 = *(void *)(result + 16);
  }
  *(void *)(result + 16) = v3;
  return result;
}

uint64_t sub_10082A078(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      sub_10082A0F8((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_10082A0E0(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10082A0F8(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t v6 = sub_10082A180(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    sub_1000EDF90(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_10082A180(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((unsigned __int8 *)a2 + 28), v6 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      unint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        unint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      long long v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        long long v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((unsigned __int8 *)v10 + 28) < v15) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v17 = (uint64_t *)v16;
          unsigned int v18 = *(unsigned __int8 *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      long long v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    long long v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      long long v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    long long v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      long long v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int8 *)a4 + 28))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          char v21 = (uint64_t *)v20;
          unsigned int v22 = *(unsigned __int8 *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      char v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t sub_10082A328(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      sub_1008269CC((uint64_t **)a1, v4, a2, a2);
      a2 += 16;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_10082A390(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t **sub_10082A3A8(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    unsigned int v7 = result[1];
    uint64_t *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    BOOL v14 = result;
    unsigned int v15 = v8;
    uint64_t v16 = v8;
    if (v8)
    {
      unsigned int v15 = sub_1002FABD8((uint64_t)v8);
      if (a2 != a3)
      {
        unint64_t v9 = a2;
        do
        {
          *((unsigned char *)v8 + 32) = *((unsigned char *)v9 + 32);
          v8[5] = v9[5];
          sub_10082A514(v5, (uint64_t)v8);
          uint64_t v8 = v15;
          uint64_t v16 = v15;
          if (v15) {
            unsigned int v15 = sub_1002FABD8((uint64_t)v15);
          }
          uint64_t v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              uint64_t v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              unint64_t v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          unint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)sub_1002FAC2C((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_10082A584(v5, (_OWORD *)a2 + 2);
      long long v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          long long v13 = v12;
          long long v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          long long v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_10082A500(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002FAC2C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10082A514(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*(unsigned __int8 *)(a2 + 32) >= *((unsigned __int8 *)v4 + 32)) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = a1 + 1;
  }
LABEL_8:
  sub_1000EDF90(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

unsigned __int8 *sub_10082A584(uint64_t **a1, _OWORD *a2)
{
  uint64_t v4 = (unsigned __int8 *)operator new(0x30uLL);
  uint64_t v5 = v4;
  *((_OWORD *)v4 + 2) = *a2;
  uint64_t v6 = a1 + 1;
  unsigned int v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v7;
        if (v4[32] >= *((unsigned __int8 *)v7 + 32)) {
          break;
        }
        unsigned int v7 = (uint64_t *)*v7;
        uint64_t v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      unsigned int v7 = (uint64_t *)v7[1];
    }
    while (v7);
    uint64_t v8 = v6 + 1;
  }
  else
  {
    uint64_t v8 = a1 + 1;
  }
LABEL_8:
  sub_1000EDF90(a1, (uint64_t)v6, v8, (uint64_t *)v4);
  return v5;
}

uint64_t **sub_10082A61C(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    unsigned int v7 = result[1];
    uint64_t *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    BOOL v14 = result;
    unsigned int v15 = v8;
    uint64_t v16 = v8;
    if (v8)
    {
      unsigned int v15 = sub_1002FABD8((uint64_t)v8);
      if (a2 != a3)
      {
        unint64_t v9 = a2;
        do
        {
          *((unsigned char *)v8 + 28) = *((unsigned char *)v9 + 28);
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          sub_10082A788(v5, (uint64_t)v8);
          uint64_t v8 = v15;
          uint64_t v16 = v15;
          if (v15) {
            unsigned int v15 = sub_1002FABD8((uint64_t)v15);
          }
          uint64_t v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              uint64_t v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              unint64_t v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          unint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)sub_1002FAC2C((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_10082A7F8(v5, (void *)((char *)a2 + 28));
      long long v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          long long v13 = v12;
          long long v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          long long v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_10082A774(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002FAC2C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10082A788(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*(unsigned __int8 *)(a2 + 28) >= *((unsigned __int8 *)v4 + 28)) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = a1 + 1;
  }
LABEL_8:
  sub_1000EDF90(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

uint64_t *sub_10082A7F8(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x28uLL);
  uint64_t v5 = *a2;
  *(uint64_t *)((char *)v4 + 28) = *a2;
  uint64_t v6 = a1 + 1;
  unsigned int v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v7;
        if (*((unsigned __int8 *)v7 + 28) <= v5) {
          break;
        }
        unsigned int v7 = (uint64_t *)*v7;
        uint64_t v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      unsigned int v7 = (uint64_t *)v7[1];
    }
    while (v7);
    uint64_t v8 = v6 + 1;
  }
  else
  {
    uint64_t v8 = a1 + 1;
  }
LABEL_8:
  sub_1000EDF90(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t **sub_10082A88C(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, unsigned char **a4)
{
  unsigned int v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int8 *)v6 + 32);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        unsigned int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unsigned int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    BOOL v11 = operator new(0x30uLL);
    v11[32] = **a4;
    *((void *)v11 + 5) = 0;
    sub_1000EDF90(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

char *sub_10082A950(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unsigned int v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *(void *)result) >> 4) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unsigned int v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x249249249249249) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x124924924924924) {
      unint64_t v12 = 0x249249249249249;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = sub_100420644(v7, v12);
    BOOL v14 = (char *)v7[1];
    long long v13 = (void **)(v7 + 1);
    unint64_t v9 = v14;
LABEL_16:
    uint64_t v17 = a3 - (void)__src;
    if (v17)
    {
      size_t v18 = v17 - 7;
      long long v19 = v9;
      uint64_t v20 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  long long v13 = (void **)(result + 8);
  unsigned int v15 = (unsigned char *)*((void *)result + 1);
  if (0x6DB6DB6DB6DB6DB7 * ((v15 - v9) >> 4) >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[16 * ((v15 - v9) >> 4)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9 - 7);
    unint64_t v9 = (char *)*v13;
  }
  uint64_t v17 = a3 - (void)v16;
  if (v17)
  {
    size_t v18 = v17 - 7;
    long long v19 = v9;
    uint64_t v20 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v19, v20, v18);
  }
LABEL_19:
  *long long v13 = &v9[v17];
  return result;
}

void sub_10082AAB4(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10082AB08((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_10082AB08(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 168)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 160);
    if (v4) {
      sub_1000DB0A0(v4);
    }
  }
  a1[1] = v2;
}

void *sub_10082AB54@<X0>(uint64_t **a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x178uLL);
  uint64_t result = sub_10082ABB0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10082AB9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10082ABB0(void *a1, uint64_t **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022CB058;
  uint64_t v3 = sub_100D200F0((uint64_t)(a1 + 3), a2);
  a1[34] = 0;
  a1[35] = 0;
  a1[32] = 0;
  a1[33] = a1 + 34;
  a1[36] = a1 + 37;
  a1[37] = 0;
  a1[40] = 0;
  a1[41] = 0;
  a1[38] = 0;
  a1[39] = a1 + 40;
  a1[42] = 0xBFF0000000000000;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  return a1;
}

void sub_10082AC28(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10082AC3C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022CB058;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10082AC5C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022CB058;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10082ACB0(uint64_t a1)
{
  return sub_10082ACDC((uint64_t)&v2, a1 + 24);
}

uint64_t sub_10082ACDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void **)(a2 + 328);
  sub_1000C5954(&v4);
  sub_10082AF3C(a2 + 288, *(char **)(a2 + 296));
  sub_10082AFAC(a2 + 264, *(void **)(a2 + 272));
  sub_10082AFAC(a2 + 240, *(void **)(a2 + 248));
  sub_100EBBCE8(a2 + 232);
  return sub_10082AD48(a2);
}

uint64_t sub_10082AD48(uint64_t a1)
{
  if (*(void *)(a1 + 88))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022CB098);
    }
    char v2 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGCZ,destroy geocodec malloc zone,~CLGeoMapGeometry()", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022CB098);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLGeoMapGeometry::~CLGeoMapGeometry()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    GEOResetGeoCodecsAllocator();

    *(void *)(a1 + 88) = 0;
  }
  uint64_t v3 = *(void **)(a1 + 96);
  if (v3)
  {

    *(void *)(a1 + 96) = 0;
  }
  uint64_t v4 = *(void **)(a1 + 104);
  if (v4)
  {

    *(void *)(a1 + 104) = 0;
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  sub_10051310C(a1);
  return a1;
}

void sub_10082AF30(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_10082AF3C(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_10082AF3C(a1, *(void *)a2);
    sub_10082AF3C(a1, *((void *)a2 + 1));
    uint64_t v4 = (void **)(a2 + 80);
    sub_1000C5954(&v4);
    uint64_t v4 = (void **)(a2 + 56);
    sub_1000C5954(&v4);
    operator delete(a2);
  }
}

void sub_10082AFAC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10082AFAC(a1, *a2);
    sub_10082AFAC(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[7];
    if (v4) {
      sub_1000DB0A0(v4);
    }
    operator delete(a2);
  }
}

void sub_10082B00C(id a1)
{
  qword_102419438 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

uint64_t sub_10082B03C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10082B100((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10082B0B4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x186186186186187) {
    sub_1001D7FA0();
  }
  return operator new(168 * a2);
}

uint64_t sub_10082B100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v22 = a6;
  *((void *)&v22 + 1) = a7;
  long long v21 = v22;
  v19[0] = a1;
  v19[1] = &v21;
  v19[2] = &v22;
  if (a3 == a5)
  {
    uint64_t v17 = a6;
  }
  else
  {
    uint64_t v8 = a7 - 168;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 168);
      a3 -= 168;
      *(_OWORD *)uint64_t v8 = v9;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      long long v10 = *(_OWORD *)(a3 + 96);
      long long v12 = *(_OWORD *)(a3 + 48);
      long long v11 = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(v8 + 80) = *(_OWORD *)(a3 + 80);
      *(_OWORD *)(v8 + 96) = v10;
      *(_OWORD *)(v8 + 48) = v12;
      *(_OWORD *)(v8 + 64) = v11;
      long long v14 = *(_OWORD *)(a3 + 128);
      long long v13 = *(_OWORD *)(a3 + 144);
      long long v15 = *(_OWORD *)(a3 + 112);
      *(_DWORD *)(v8 + 160) = *(_DWORD *)(a3 + 160);
      *(_OWORD *)(v8 + 128) = v14;
      *(_OWORD *)(v8 + 144) = v13;
      *(_OWORD *)(v8 + 112) = v15;
      long long v16 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(v8 + 16) = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v8 + 32) = v16;
      *((void *)&v22 + 1) = v8;
      v8 -= 168;
      v7 -= 168;
    }
    while (a3 != a5);
    uint64_t v17 = v22;
  }
  char v20 = 1;
  sub_10082B1C4((uint64_t)v19);
  return v17;
}

uint64_t sub_10082B1C4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10082B1FC(a1);
  }
  return a1;
}

void sub_10082B1FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      sub_1000DB0A0(v3);
    }
    v1 += 168;
  }
}

void **sub_10082B240(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10082B274(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 168;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 160);
    if (v4)
    {
      sub_1000DB0A0(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 168;
    }
  }
}

uint64_t sub_10082B2C8@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0xA78uLL);
  uint64_t result = sub_10082B324((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_10082B310(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10082B324(uint64_t a1, char *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1022CB0C8;
  char v3 = *a2;
  sub_101187CA8(a1 + 24);
  *(void *)(a1 + 24) = &off_102322A58;
  *(unsigned char *)(a1 + 2672) = v3;
  return a1;
}

void sub_10082B390(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10082B3A4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022CB0C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10082B3C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022CB0C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10082B418(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_10082B440(void *a1, uint64_t *a2)
{
  char v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1013581FC((uint64_t)a1, &v5);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  *a1 = off_102321830;
  sub_101171D90((uint64_t)(a1 + 276));
  a1[282] = 0;
  a1[281] = 0;
  a1[283] = 0;
  a1[284] = 0xBFF0000000000000;
  return a1;
}

void sub_10082B4D4(_Unwind_Exception *a1)
{
  sub_10082B4FC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10082B4FC(uint64_t a1)
{
  *(void *)a1 = off_1022CB118;
  uint64_t v2 = *(void **)(a1 + 2176);
  if (v2)
  {
    *(void *)(a1 + 2184) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void *)(a1 + 2088);
  *(void *)(a1 + 2088) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 2080);
  *(void *)(a1 + 2080) = 0;
  if (v4) {
    sub_10082B694(a1 + 2080, v4);
  }
  long long v15 = (void **)(a1 + 1928);
  sub_10082B6F0(&v15);
  long long v15 = (void **)(a1 + 1904);
  sub_10082B6F0(&v15);
  long long v15 = (void **)(a1 + 1880);
  sub_10082B790(&v15);
  uint64_t v5 = *(void **)(a1 + 1840);
  if (v5)
  {
    *(void *)(a1 + 1848) = v5;
    operator delete(v5);
  }
  sub_10017FF2C((uint64_t *)(a1 + 1808));
  sub_10017FF2C((uint64_t *)(a1 + 1784));
  if (*(char *)(a1 + 1431) < 0) {
    operator delete(*(void **)(a1 + 1408));
  }
  uint64_t v6 = *(void **)(a1 + 1176);
  if (v6)
  {
    *(void *)(a1 + 1184) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 1096);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  sub_1003B2350((void *)(a1 + 1040));
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 1000);
  if (v8) {
    sub_1000DB0A0(v8);
  }
  if (*(char *)(a1 + 655) < 0) {
    operator delete(*(void **)(a1 + 632));
  }
  long long v9 = *(void **)(a1 + 472);
  if (v9)
  {
    *(void *)(a1 + 480) = v9;
    operator delete(v9);
  }
  long long v10 = *(std::__shared_weak_count **)(a1 + 392);
  if (v10) {
    sub_1000DB0A0(v10);
  }
  long long v11 = *(void **)(a1 + 352);
  if (v11)
  {
    *(void *)(a1 + 360) = v11;
    operator delete(v11);
  }
  long long v12 = *(std::__shared_weak_count **)(a1 + 272);
  if (v12) {
    sub_1000DB0A0(v12);
  }
  long long v15 = (void **)(a1 + 240);
  sub_10082B830(&v15);
  long long v13 = *(std::__shared_weak_count **)(a1 + 216);
  if (v13) {
    sub_1000DB0A0(v13);
  }
  return a1;
}

uint64_t sub_10082B68C(uint64_t a1)
{
  return a1 + 384;
}

void sub_10082B694(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = (void **)(a2 + 232);
    sub_1000C5954(&v3);
    sub_10082AD48(a2);
    operator delete();
  }
}

void sub_10082B6F0(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10082B744((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_10082B744(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 264)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 48);
    if (v4) {
      sub_1000DB0A0(v4);
    }
  }
  a1[1] = v2;
}

void sub_10082B790(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10082B7E4((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_10082B7E4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 56)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 48);
    if (v4) {
      sub_1000DB0A0(v4);
    }
  }
  a1[1] = v2;
}

void sub_10082B830(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 14;
        sub_10082B8C8((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10082B8C8(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[11];
  if (v3)
  {
    a2[12] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    sub_1000DB0A0(v4);
  }
}

void *sub_10082B91C(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_10022F168(result, a4);
    uint64_t result = sub_10082B9A4((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10082B984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1000C5954(&a9);
  _Unwind_Resume(a1);
}

void *sub_10082B9A4(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_10082BA34((uint64_t)v7);
  return v4;
}

uint64_t sub_10082BA34(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100223AE4(a1);
  }
  return a1;
}

BOOL sub_10082BA6C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  sub_10082BAF4(a1, a2, a3);
  unsigned int v7 = *(unsigned __int16 *)(a1 + 6);
  if (v7 >= 0x100)
  {
    double v8 = *(double *)(a2 + 48);
    *(double *)a4 = v8;
    memset(v10, 0, sizeof(v10));
    sub_10082BCC8(a1, (uint64_t)v10, v8);
    *(_DWORD *)(a4 + 8) = sub_100E167CC(a1 + 3256, (uint64_t *)v10);
    *(unsigned char *)(a4 + 12) = sub_100E16F40((uint64_t)v10);
  }
  return v7 > 0xFF;
}

float sub_10082BAF4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  float v6 = sub_100B9BC00((float *)a2);
  float v8 = v7;
  float v10 = v9;
  uint64_t v29 = *(void *)(a2 + 16);
  float v30 = *(float *)(a2 + 24);
  sub_100B9BD60((float *)a2, v25);
  float v26 = sub_10126D71C((uint64_t)v25);
  float v27 = v11;
  float v28 = v12;
  uint64_t v13 = v29;
  float v14 = v30;
  float v15 = sub_10082BE54((float *)a1, (float *)a2);
  uint64_t v16 = 0;
  float v17 = 0.0;
  do
  {
    float v17 = v17 + (float)(*(float *)((char *)&v29 + v16) * *(float *)((char *)&v29 + v16));
    v16 += 4;
  }
  while (v16 != 12);
  float v18 = sqrtf(v17);
  float v19 = -v6;
  if (*a3 == a3[1]) {
    float v19 = v6;
  }
  float v24 = v19;
  float v20 = (float)((float)(v8 * *((float *)&v13 + 1)) + (float)(v6 * *(float *)&v13)) + (float)(v10 * v14);
  sub_100659A48((unsigned __int16 *)(a1 + 4), (uint64_t)&v26);
  float v21 = v27;
  *(float *)(a1 + 3088) = v26 + *(float *)(a1 + 3088);
  ++*(void *)(a1 + 3096);
  *(float *)(a1 + 3104) = v21 + *(float *)(a1 + 3104);
  ++*(void *)(a1 + 3112);
  *(float *)(a1 + 3120) = v28 + *(float *)(a1 + 3120);
  ++*(void *)(a1 + 3128);
  *(float *)(a1 + 3136) = v18 + *(float *)(a1 + 3136);
  ++*(void *)(a1 + 3144);
  *(float *)(a1 + 3168) = fabsf(v15) + *(float *)(a1 + 3168);
  ++*(void *)(a1 + 3176);
  float v22 = fabsf(v20) + *(float *)(a1 + 3152);
  ++*(void *)(a1 + 3160);
  *(float *)(a1 + 3152) = v22;
  sub_10082BF38(a1 + 3200, v15, -v20);
  float result = v24 + *(float *)(a1 + 3184);
  *(float *)(a1 + 3184) = result;
  ++*(void *)(a1 + 3192);
  return result;
}

void sub_10082BCC8(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(double *)a2 = a3;
  uint64_t v5 = (unsigned __int16 *)(a1 + 4);
  sub_10082C118();
  unint64_t v23 = __PAIR64__(v7, v6);
  int v24 = v8;
  float v9 = sub_10082BFE8(v5, (float32x2_t *)&v23, (uint64_t)v26);
  uint64_t v11 = 0;
  *(float *)long long v25 = v9;
  v25[1] = v12;
  *(float *)&v25[2] = v10;
  float v13 = 0.0;
  do
  {
    float v14 = *(float *)&v25[v11];
    if (v14 < 0.0) {
      float v14 = -v14;
    }
    float v13 = v13 + v14;
    ++v11;
  }
  while (v11 != 3);
  *(float *)(a2 + 24) = (float)(1.0 - (float)(fabsf(v10) / v13)) * 100.0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 3088) = 0;
  *(void *)(a1 + 3096) = 0;
  *(_DWORD *)(a1 + 3104) = 0;
  *(void *)(a1 + 3112) = 0;
  *(_DWORD *)(a1 + 3120) = 0;
  *(void *)(a1 + 3128) = 0;
  unint64_t v15 = *(void *)(a1 + 3144);
  float v16 = 0.0;
  float v17 = 0.0;
  if (v15) {
    float v17 = *(float *)(a1 + 3136) / (float)v15;
  }
  *(float *)(a2 + 8) = v17;
  *(_DWORD *)(a1 + 3136) = 0;
  *(void *)(a1 + 3144) = 0;
  unint64_t v18 = *(void *)(a1 + 3176);
  if (v18) {
    float v16 = *(float *)(a1 + 3168) / (float)v18;
  }
  *(float *)(a2 + 16) = v16;
  *(_DWORD *)(a1 + 3168) = 0;
  *(void *)(a1 + 3176) = 0;
  float v19 = 0.0;
  float v20 = 0.0;
  unint64_t v21 = *(void *)(a1 + 3160);
  if (v21) {
    float v20 = *(float *)(a1 + 3152) / (float)v21;
  }
  *(float *)(a2 + 12) = v20;
  *(_DWORD *)(a1 + 3152) = 0;
  *(void *)(a1 + 3160) = 0;
  *(float *)(a2 + 20) = fabsf(sub_10082C168(a1 + 3200));
  *(void *)(a1 + 3248) = 0;
  *(_OWORD *)(a1 + 3200) = 0u;
  *(_OWORD *)(a1 + 3216) = 0u;
  *(_OWORD *)(a1 + 3228) = 0u;
  unint64_t v22 = *(void *)(a1 + 3192);
  if (v22) {
    float v19 = *(float *)(a1 + 3184) / (float)v22;
  }
  *(float *)(a2 + 28) = v19;
  *(_DWORD *)(a1 + 3184) = 0;
  *(void *)(a1 + 3192) = 0;
}

float sub_10082BE54(float *a1, float *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247E250, memory_order_acquire) & 1) == 0)
  {
    unint64_t v15 = a2;
    int v14 = __cxa_guard_acquire(&qword_10247E250);
    a2 = v15;
    if (v14)
    {
      qword_10247E240 = 1065353216;
      dword_10247E248 = 0;
      __cxa_guard_release(&qword_10247E250);
      a2 = v15;
    }
  }
  float v4 = a2[8];
  float v3 = a2[9];
  float v5 = a2[7];
  float v6 = (float)(v4 * *(float *)&dword_10247E248) - (float)(v3 * *((float *)&qword_10247E240 + 1));
  float v7 = (float)(v3 * *(float *)&qword_10247E240) - (float)(v5 * *(float *)&dword_10247E248);
  float v8 = (float)(v5 * *((float *)&qword_10247E240 + 1)) - (float)(v4 * *(float *)&qword_10247E240);
  float v9 = sub_100B9BC00(a2);
  float v12 = -(float)((float)((float)(v7 * v10) + (float)(v9 * v6)) + (float)(v11 * v8));
  float result = v12 - *a1;
  *a1 = v12;
  return result;
}

float sub_10082BF38(uint64_t a1, float a2, float a3)
{
  float v3 = *(float *)(a1 + 8);
  float v4 = a2 - v3;
  uint64_t v5 = *(void *)a1 + 1;
  float v6 = v3 + (float)((float)(a2 - v3) / (float)(unint64_t)v5);
  float v7 = *(float *)(a1 + 12) + (float)(v4 * (float)(a2 - v6));
  float v8 = *(float *)(a1 + 24);
  float v9 = a3 - v8;
  uint64_t v10 = *(void *)(a1 + 16) + 1;
  float v11 = v8 + (float)((float)(a3 - v8) / (float)(unint64_t)v10);
  float v12 = *(float *)(a1 + 28) + (float)(v9 * (float)(a3 - v11));
  *(void *)a1 = v5;
  *(float *)(a1 + 8) = v6;
  *(float *)(a1 + 12) = v7;
  *(void *)(a1 + 16) = v10;
  *(float *)(a1 + 24) = v11;
  *(float *)(a1 + 28) = v12;
  uint64_t v13 = *(void *)(a1 + 48) + 1;
  *(void *)(a1 + 48) = v13;
  float v14 = *(float *)(a1 + 32);
  float v15 = *(float *)(a1 + 36);
  float v16 = (float)(a2 - v14) / (float)(unint64_t)v13;
  float v17 = (float)(a3 - v15) / (float)(unint64_t)v13;
  *(float *)(a1 + 32) = v14 + v16;
  *(float *)(a1 + 36) = v15 + v17;
  float result = *(float *)(a1 + 40)
         + (float)((float)((float)-*(float *)(a1 + 40) / (float)(unint64_t)v13)
                 + (float)((float)((float)((float)(unint64_t)v13 + -1.0) * v16) * v17));
  *(float *)(a1 + 40) = result;
  return result;
}

float sub_10082BFE8(unsigned __int16 *a1, float32x2_t *a2, uint64_t a3)
{
  int v16 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  if (a1[1])
  {
    unint64_t v6 = 0;
    do
    {
      float v7 = (float32x2_t *)sub_100659D10(a1, v6);
      float v8 = v7[1].f32[0] - a2[1].f32[0];
      float v17 = (_DWORD *)vsub_f32(*v7, *a2);
      *(float *)&uint64_t v18 = v8;
      sub_10080FCC8((uint64_t)&v17, (uint64_t)v19);
      for (unint64_t i = 0; i != 9; ++i)
        *((float *)&v14 + i) = sub_10080FD50((uint64_t)v19, i) + *((float *)&v14 + i);
      ++v6;
    }
    while (v6 < a1[1]);
  }
  v19[0] = v14;
  v19[1] = v15;
  int v20 = v16;
  sub_10080FF2C((uint64_t)v19, a3);
  v21[0] = v10;
  v21[1] = v11;
  _DWORD v21[2] = v12;
  float v17 = v21;
  uint64_t v18 = a3;
  sub_1008104F0((uint64_t *)&v17, 0, 1uLL);
  sub_1008104F0((uint64_t *)&v17, 0, 2uLL);
  sub_1008104F0((uint64_t *)&v17, 1uLL, 2uLL);
  return *(float *)v21;
}

float sub_10082C168(uint64_t a1)
{
  float v1 = 0.0;
  float v2 = 0.0;
  if (*(void *)a1 >= 2uLL) {
    float v2 = *(float *)(a1 + 12) / (float)(unint64_t)(*(void *)a1 - 1);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 2) {
    float v1 = *(float *)(a1 + 28) / (float)(v3 - 1);
  }
  float v4 = v2 * v1;
  float result = 0.0;
  if (v4 > 0.0)
  {
    unint64_t v6 = *(void *)(a1 + 48);
    if (v6 >= 2) {
      float result = (float)((float)v6 / (float)((float)v6 + -1.0)) * *(float *)(a1 + 40);
    }
    return result / sqrtf(v4);
  }
  return result;
}

void *sub_10082C1E8(void *a1)
{
  *a1 = 0;
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.CoreMotion.CLPressureBiasProxy", 0);
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = v2;
  return a1;
}

uint64_t sub_10082C228(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(a1 + 8));
  dispatch_queue_t v2 = *(NSObject **)(a1 + 16);
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = *(const void **)(a1 + 24);
  if (v3) {
    _Block_release(v3);
  }
  sub_10082C534((CLConnectionClient **)a1, 0);
  return a1;
}

void sub_10082C280(uint64_t a1)
{
  float v1 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10082C2F4;
  block[3] = &unk_1022A3020;
  block[4] = a1;
  dispatch_sync(v1, block);
}

uint64_t sub_10082C2F4(uint64_t result)
{
  if (!**(void **)(result + 32)) {
    operator new();
  }
  return result;
}

void sub_10082C4B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, std::__shared_weak_count *a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (a18) {
    sub_1000DB0A0(a18);
  }
  _Unwind_Resume(exception_object);
}

CLConnectionClient *sub_10082C534(CLConnectionClient **a1, CLConnectionClient *a2)
{
  float result = *a1;
  *a1 = a2;
  if (result)
  {
    CLConnectionClient::~CLConnectionClient(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10082C584(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CFDictionaryRef Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_10013FA80((int)v11, Dictionary);
  if (*(void *)(v2 + 16)
    && *(void *)(v2 + 24)
    && !sub_1004D5EE4((uint64_t)v11)
    && sub_100D6A54C(v10, (uint64_t)v11))
  {
    float v4 = *(NSObject **)(v2 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10082C7E0;
    block[3] = &unk_1022CB1A0;
    block[4] = v2;
    v9[0] = *(_OWORD *)v10;
    *(_OWORD *)((char *)v9 + 13) = *(_OWORD *)&v10[13];
    dispatch_async(v4, block);
  }
  else
  {
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022CB1E8);
    }
    uint64_t v5 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Bad pressure bias from daemon.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_1022CB1E8);
      }
      float v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLPressureBiasProxy::start()_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  return sub_10013F3C4(v11);
}

void sub_10082C7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10082C7E0(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(*(void *)(a1 + 32) + 24) + 16))(*(void *)(*(void *)(a1 + 32) + 24), a1 + 40);
}

void sub_10082C7FC(uint64_t a1)
{
  float v1 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10082C870;
  block[3] = &unk_1022A3020;
  block[4] = a1;
  dispatch_sync(v1, block);
}

CLConnectionClient *sub_10082C870(uint64_t a1)
{
  return sub_10082C534(*(CLConnectionClient ***)(a1 + 32), 0);
}

void sub_10082C87C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10082C8F4;
  block[3] = &unk_1022CB1C8;
  void block[5] = a3;
  block[6] = a1;
  block[4] = a2;
  dispatch_sync(v3, block);
}

void sub_10082C8F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  unint64_t v3 = *(const void **)(v2 + 24);
  if (v3) {
    _Block_release(v3);
  }
  *(void *)(v2 + 24) = _Block_copy(*(const void **)(a1 + 40));
  float v4 = *(NSObject **)(v2 + 16);
  if (v4) {
    dispatch_release(v4);
  }
  *(void *)(v2 + 16) = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(a1 + 32);

  dispatch_retain(v5);
}

void sub_10082C958(id a1)
{
  qword_1024190D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

void *sub_10082C988@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  float v4 = operator new(0x70uLL);
  float result = sub_10017E9C0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10082C9D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10082C9EC(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_101D47BA0;
  *(_OWORD *)(a1 + 32) = unk_101D47BB0;
  *(_OWORD *)(a1 + 80) = xmmword_101D47B70;
  float v4 = (uint64_t *)(a1 + 80);
  *(_OWORD *)(a1 + 48) = xmmword_101D47BC0;
  *(void *)(a1 + 96) = 0x415BAF8000000000;
  uint64_t v5 = (uint64_t *)(a1 + 96);
  *(_OWORD *)(a1 + 60) = *(long long *)((char *)&xmmword_101D47BC0 + 12);
  *(_OWORD *)(a1 + 104) = xmmword_101D47B80;
  unint64_t v6 = (int *)(a1 + 104);
  uint64_t v7 = sub_1000D3E78();
  sub_10006B564(v7, buf);
  sub_1000A699C(*(uint64_t *)buf, "VO2MaxAlertBlackoutDuration", v4);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v8 = sub_1000D3E78();
  sub_10006B564(v8, buf);
  sub_1000A699C(*(uint64_t *)buf, "VO2MaxRepeatAlertWindow", (void *)(a1 + 88));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v9 = sub_1000D3E78();
  sub_10006B564(v9, buf);
  sub_1000A699C(*(uint64_t *)buf, "VO2MaxAlertHistoricalEstimateWindow", v5);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v10 = sub_1000D3E78();
  sub_10006B564(v10, buf);
  sub_10006EF84(*(uint64_t *)buf, "VO2MaxAlertMaxHistoricalEstimates", v6);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v11 = sub_1000D3E78();
  sub_10006B564(v11, buf);
  sub_10006EF84(*(uint64_t *)buf, "VO2MaxAlertMinDaysWithEstimate", (_DWORD *)(a1 + 108));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v12 = sub_1000D3E78();
  sub_10006B564(v12, buf);
  sub_10006EF84(*(uint64_t *)buf, "VO2MaxAlertMinWorkoutsContrToEstimate", (_DWORD *)(a1 + 112));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v13 = sub_1000D3E78();
  sub_10006B564(v13, buf);
  sub_10006EF84(*(uint64_t *)buf, "VO2MaxAlertMinEstimatesSinceAlgChange", (_DWORD *)(a1 + 116));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022CB208);
  }
  long long v14 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v15 = *v4;
    uint64_t v16 = *(void *)(a1 + 88);
    uint64_t v17 = *v5;
    int v18 = *v6;
    int v19 = *(_DWORD *)(a1 + 108);
    int v20 = *(_DWORD *)(a1 + 116);
    *(_DWORD *)buf = 134284801;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 2049;
    *(void *)&unsigned char buf[14] = v16;
    __int16 v27 = 2049;
    uint64_t v28 = v17;
    __int16 v29 = 1025;
    int v30 = v18;
    __int16 v31 = 1025;
    int v32 = v19;
    __int16 v33 = 1025;
    int v34 = v20;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "VO2MaxAlert,fAlertBlackoutDuration,%{private}.3f,fRepeatAlertWindow,%{private}.3f,fHistoricalEstimateWindow,%{private}.3f,fMaxHistoricalEstimatesForAlert,%{private}d,fMinDaysWithEstimate,%{private}d,fMinEstimatesSinceAlgChange,%{private}d", buf, 0x32u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022CB208);
    }
    long long v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLVO2MaxAlertEvaluator::CLVO2MaxAlertEvaluator(std::shared_ptr<CLVO2MaxAlertRecorderDb>)", "%s\n", v25);
    if (v25 != buf) {
      free(v25);
    }
  }
  uint64_t v22 = *a2;
  uint64_t v21 = a2[1];
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v23 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v22;
  *(void *)(a1 + 8) = v21;
  if (v23) {
    sub_1000DB0A0(v23);
  }
  return a1;
}

void sub_10082CE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  int v24 = *(std::__shared_weak_count **)(v22 + 8);
  if (v24) {
    sub_1000DB0A0(v24);
  }
  _Unwind_Resume(exception_object);
}

void sub_10082CE84(_OWORD *a1, long long *a2)
{
  long long v3 = *a2;
  long long v4 = a2[1];
  long long v5 = a2[2];
  *(_OWORD *)((char *)a1 + 60) = *(long long *)((char *)a2 + 44);
  a1[2] = v4;
  a1[3] = v5;
  a1[1] = v3;
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022CB208);
  }
  unint64_t v6 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_INFO))
  {
    double v7 = *((float *)a2 + 5);
    int v8 = *(_DWORD *)a2;
    int v9 = *((_DWORD *)a2 + 1);
    *(_DWORD *)buf = 67175169;
    int v12 = v8;
    __int16 v13 = 2049;
    double v14 = v7;
    __int16 v15 = 1025;
    int v16 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "VO2MaxAlert,gender,%{private}d,age,%{private}f,biologicalSex,%{private}d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022CB208);
    }
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVO2MaxAlertEvaluator::feedBodyMetrics(const CLBodyMetrics &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
}

void sub_10082D090(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  BOOL v8 = sub_100D37AC4((int)*(float *)(a1 + 36));
  BOOL v9 = sub_10082D8B4(*(void **)a1, (uint64_t)v61);
  BOOL v10 = v9 && v62 + *(double *)(a1 + 80) > a3;
  double v11 = *(double *)(a1 + 96);
  long long __p = 0;
  double v59 = 0;
  uint64_t v60 = 0;
  uint64_t v12 = sub_1011E124C();
  double v13 = a3 - v11;
  uint64_t v14 = sub_1011E1B04(v12, &__p, 1);
  double v15 = sub_10082D998(v14, 0);
  double v17 = sub_10082D998(v16, 1);
  double v18 = sub_1014084AC(*(_DWORD *)(a1 + 20), (int)*(float *)(a1 + 36));
  int v19 = (double *)__p;
  int v20 = v59;
  BOOL v55 = v9;
  if (v59 == __p)
  {
    int v23 = 0;
    int v24 = 0;
    unsigned int v52 = 0;
    BOOL v53 = *(_DWORD *)(a1 + 108) < 1;
  }
  else
  {
    double v21 = v18;
    BOOL v51 = v10;
    signed int v22 = 0;
    int v23 = 0;
    int v24 = 0;
    do
    {
      double v25 = *(v20 - 15);
      signed int v26 = vcvtmd_s64_f64((v25 + a4) / 86400.0);
      if (v22 < v26) {
        ++v23;
      }
      if (v22 <= v26) {
        signed int v22 = v26;
      }
      if (v25 >= v15) {
        ++v24;
      }
      if (v21 > 0.0 && v25 < v17)
      {
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_1022CB208);
        }
        __int16 v27 = qword_102418FF8;
        if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v28 = *((void *)v20 - 15);
          uint64_t v29 = *((void *)v20 - 14);
          *(_DWORD *)buf = 134349568;
          *(void *)&uint8_t buf[4] = v28;
          *(_WORD *)&unsigned char buf[12] = 2050;
          *(void *)&unsigned char buf[14] = v29;
          *(_WORD *)&unsigned char buf[22] = 2050;
          *(double *)uint64_t v99 = v21;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "VO2MaxAlert,HistoricalEstimateBiasAdjustment,startTime,%{public}.3f,estimatedVO2Max,%{public}.3f,biasAdjustment,%{public}.3f", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FF0 != -1) {
            dispatch_once(&qword_102418FF0, &stru_1022CB208);
          }
          uint64_t v30 = *((void *)v20 - 15);
          uint64_t v31 = *((void *)v20 - 14);
          int v63 = 134349568;
          *(void *)unint64_t v64 = v30;
          *(_WORD *)&v64[8] = 2050;
          *(void *)&v64[10] = v31;
          *(_WORD *)&v64[18] = 2050;
          *(double *)uint64_t v65 = v21;
          int v32 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "VO2MaxAlertResult CLVO2MaxAlertEvaluator::evaluateForAlert(CFAbsoluteTime, CFTimeInterval)", "%s\n", v32);
          if (v32 != buf) {
            free(v32);
          }
        }
        *(v20 - 14) = v21 + *(v20 - 14);
        int v19 = (double *)__p;
      }
      v20 -= 18;
    }
    while (v20 != v19);
    BOOL v53 = v23 >= *(_DWORD *)(a1 + 108);
    BOOL v10 = v51;
    if (v20 == v59) {
      unsigned int v52 = 0;
    }
    else {
      unsigned int v52 = *((_DWORD *)v20 + 28);
    }
  }
  BOOL v33 = 0;
  int v34 = !v8;
  int v35 = *(_DWORD *)(a1 + 116);
  if (((v34 | v10) & 1) == 0)
  {
    BOOL v36 = v53 && v52 >= *(_DWORD *)(a1 + 112);
    if (v36 && v24 >= v35) {
      BOOL v33 = sub_10082DB64(a1, &__p);
    }
  }
  BOOL v56 = v55 && v62 + *(double *)(a1 + 88) > a3;
  if (__p == v59) {
    unint64_t v38 = 0xBFF0000000000000;
  }
  else {
    unint64_t v38 = *((void *)__p + 4);
  }
  unint64_t v54 = v38;
  sub_100D378AC(v57);
  double v39 = sub_100D37CBC(v57, *(_DWORD *)(a1 + 20), (int)*(float *)(a1 + 36));
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022CB208);
  }
  uint64_t v40 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    double v41 = v62;
    double v42 = *(float *)(a1 + 36);
    if (!v55) {
      double v41 = 0.0;
    }
    uint64_t v43 = *(void *)(a1 + 80);
    uint64_t v44 = *(void *)(a1 + 88);
    *(_DWORD *)buf = 67245057;
    *(_DWORD *)&uint8_t buf[4] = v34;
    *(_WORD *)&uint8_t buf[8] = 2049;
    *(double *)&buf[10] = v42;
    *(_WORD *)&unsigned char buf[18] = 1026;
    *(_DWORD *)&buf[20] = v10;
    *(_WORD *)uint64_t v99 = 2049;
    *(double *)&v99[2] = v41;
    __int16 v100 = 2049;
    uint64_t v101 = v43;
    __int16 v102 = 2050;
    double v103 = a3;
    __int16 v104 = 1026;
    BOOL v105 = v53;
    __int16 v106 = 2050;
    double v107 = v13;
    __int16 v108 = 2050;
    unint64_t v109 = 0x8E38E38E38E38E39 * (((char *)v59 - (unsigned char *)__p) >> 4);
    __int16 v110 = 1026;
    int v111 = v23;
    __int16 v112 = 1026;
    unsigned int v113 = v52;
    __int16 v114 = 1026;
    BOOL v115 = v24 >= v35;
    __int16 v116 = 2050;
    double v117 = v15;
    __int16 v118 = 1026;
    int v119 = v24;
    __int16 v120 = 2050;
    double v121 = v17;
    __int16 v122 = 2049;
    unint64_t v123 = v54;
    __int16 v124 = 2049;
    double v125 = v39;
    __int16 v126 = 1025;
    BOOL v127 = v33;
    __int16 v128 = 1025;
    BOOL v129 = v56;
    __int16 v130 = 2049;
    uint64_t v131 = v44;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "VO2MaxAlert,ageOutOfRange,%{public}d,age,%{private}.3f,inBlackoutPeriod,%{public}d,mostRecentAlertStartTime,%{private}.3f,alertBlackoutDuration,%{private}.3f,estimateTime,%{public}.3f, sufficientDaysWithEstimate,%{public}d,queryFromTime,%{public}.3f,numberOfEstimates,%{public}lu,countDaysWithEstimate,%{public}d,numWorkoutsContrToLatestEstimate,%{public}d,sufficientEstimatesSinceAdaptiveModel,%{public}d, earliestTimestampSinceAdaptiveModel,%{public}.3f,countEstimatesSinceAdaptiveModel,%{public}d,earliestTimestampSinceHunterC,%{public}.3f,latestVO2Max,%{private}.3f,lowClassificationThreshold,%{private}.3f, shouldTriggerAlert,%{private}d,isRepeatAlert,%{private}d,repeatAlertWindow,%{private}.3f", buf, 0xA6u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022CB208);
    }
    double v46 = *(float *)(a1 + 36);
    double v47 = v62;
    if (!v55) {
      double v47 = 0.0;
    }
    uint64_t v48 = *(void *)(a1 + 80);
    uint64_t v49 = *(void *)(a1 + 88);
    int v63 = 67245057;
    *(_DWORD *)unint64_t v64 = v34;
    *(_WORD *)&v64[4] = 2049;
    *(double *)&v64[6] = v46;
    *(_WORD *)&v64[14] = 1026;
    *(_DWORD *)&v64[16] = v10;
    *(_WORD *)uint64_t v65 = 2049;
    *(double *)&v65[2] = v47;
    __int16 v66 = 2049;
    uint64_t v67 = v48;
    __int16 v68 = 2050;
    double v69 = a3;
    __int16 v70 = 1026;
    BOOL v71 = v53;
    __int16 v72 = 2050;
    double v73 = v13;
    __int16 v74 = 2050;
    unint64_t v75 = 0x8E38E38E38E38E39 * (((char *)v59 - (unsigned char *)__p) >> 4);
    __int16 v76 = 1026;
    int v77 = v23;
    __int16 v78 = 1026;
    unsigned int v79 = v52;
    __int16 v80 = 1026;
    BOOL v81 = v24 >= v35;
    __int16 v82 = 2050;
    double v83 = v15;
    __int16 v84 = 1026;
    int v85 = v24;
    __int16 v86 = 2050;
    double v87 = v17;
    __int16 v88 = 2049;
    unint64_t v89 = v54;
    __int16 v90 = 2049;
    double v91 = v39;
    __int16 v92 = 1025;
    BOOL v93 = v33;
    __int16 v94 = 1025;
    BOOL v95 = v56;
    __int16 v96 = 2049;
    uint64_t v97 = v49;
    double v50 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "VO2MaxAlertResult CLVO2MaxAlertEvaluator::evaluateForAlert(CFAbsoluteTime, CFTimeInterval)", "%s\n", v50);
    if (v50 != buf) {
      free(v50);
    }
  }
  *(unsigned char *)a2 = v33;
  *(void *)(a2 + 8) = v54;
  *(double *)(a2 + 16) = v39;
  double v45 = a3;
  if (__p != v59) {
    double v45 = *(v59 - 15);
  }
  *(double *)(a2 + 24) = v45;
  *(double *)(a2 + 32) = a3;
  *(unsigned char *)(a2 + 40) = v56;
  *(void *)buf = v57;
  sub_1001DCABC((void ***)buf);
  if (__p)
  {
    double v59 = (double *)__p;
    operator delete(__p);
  }
}

void sub_10082D858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char *a47)
{
  a47 = &a17;
  sub_1001DCABC((void ***)&a47);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10082D8B4(void *a1, uint64_t a2)
{
  long long v4 = a1 + 14;
  (*(void (**)(void *))(a1[14] + 16))(a1 + 14);
  LODWORD(a2) = (*(uint64_t (**)(void *, uint64_t))(*a1 + 104))(a1, a2);
  (*(void (**)(void *))(*v4 + 24))(v4);
  return a2 == 0;
}

void sub_10082D984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_10082D998(uint64_t a1, int a2)
{
  uint64_t v3 = sub_1011E124C();
  if ((sub_1011E1D14(v3) & 1) == 0)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022CB208);
    }
    long long v4 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      int v8 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "VO2MaxAlert,Unexpectedly not able to retrieve a session record since algorithm version %{public}.3d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022CB208);
      }
      unint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CFAbsoluteTime CLVO2MaxAlertEvaluator::getEarliestStartTimeSinceAlgorithmVersion(VO2MaxAlgorithmVersion) const", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return 1.79769313e308;
}

BOOL sub_10082DB64(uint64_t a1, void *a2)
{
  sub_100D378AC(v27);
  double v4 = sub_100D37AD4(v27, *(_DWORD *)(a1 + 20), (int)*(float *)(a1 + 36));
  int v23 = 0;
  __asm { FMOV            V0.2D, #1.0 }
  long long v24 = xmmword_101D21A00;
  long long v25 = _Q0;
  double v26 = 0.0;
  uint64_t v10 = a2[1];
  double v11 = 0.0;
  if (v10 == *a2) {
    goto LABEL_7;
  }
  do
  {
    double v12 = *(double *)(v10 - 112);
    v10 -= 144;
    sub_1004D90CC((uint64_t)&v23, v12);
  }
  while (v10 != *a2);
  if (v23 < 1)
  {
LABEL_7:
    double v13 = 0.0;
  }
  else
  {
    double v13 = *((double *)&v24 + 1);
    if (v23 != 1)
    {
      double v14 = *(double *)&v25 * *(double *)&v25 - *((double *)&v25 + 1);
      if (v14 > 0.0) {
        double v11 = sqrt(*(double *)&v25 * *(double *)&v25 / v14 * v26);
      }
    }
  }
  double v15 = *(double *)(v10 + 32);
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022CB208);
  }
  double v16 = v13 + v11;
  double v17 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = *(void *)(*a2 + 24);
    *(_DWORD *)buf = 134350337;
    *(void *)&uint8_t buf[4] = v18;
    __int16 v41 = 1025;
    BOOL v42 = v15 < v4;
    __int16 v43 = 1025;
    BOOL v44 = v16 < v4;
    __int16 v45 = 2049;
    double v46 = v13;
    __int16 v47 = 2049;
    double v48 = v11;
    __int16 v49 = 2049;
    double v50 = v4;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "VO2MaxAlert,estimateTime,%{public}.3f,isCurrentEstimateLow,%{private}d,isRecentActivityLow,%{private}d,weightedAvg,%{private}.3f,std,%{private}.3f,lowAlertThreshold,%{private}.3f", buf, 0x36u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022CB208);
    }
    uint64_t v21 = *(void *)(*a2 + 24);
    int v28 = 134350337;
    uint64_t v29 = v21;
    __int16 v30 = 1025;
    BOOL v31 = v15 < v4;
    __int16 v32 = 1025;
    BOOL v33 = v16 < v4;
    __int16 v34 = 2049;
    double v35 = v13;
    __int16 v36 = 2049;
    double v37 = v11;
    __int16 v38 = 2049;
    double v39 = v4;
    signed int v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLVO2MaxAlertEvaluator::assessWhetherLow(const std::vector<VO2MaxOutput> &) const", "%s\n", v22);
    if (v22 != buf) {
      free(v22);
    }
  }
  BOOL v19 = v16 < v4 && v15 < v4;
  *(void *)buf = v27;
  sub_1001DCABC((void ***)buf);
  return v19;
}

void sub_10082DE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  a29 = (void **)&a18;
  sub_1001DCABC(&a29);
  _Unwind_Resume(a1);
}

void sub_10082DEBC(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_10082DEEC(uint64_t a1, char *a2, uint64_t *a3, double a4)
{
  double v10 = a4;
  sub_10064DE4C(a1, a3, &v10);
  *(void *)a1 = off_1022CB238;
  sub_100134750((void *)(a1 + 232), a2);
  sub_100F03BA0((void *)(a1 + 256), a1 + 64, 0);
  if (sub_10014C3C0(a1 + 64))
  {
    unint64_t v6 = (char *)(a1 + 232);
    if (*(char *)(a1 + 255) < 0) {
      unint64_t v6 = *(char **)(a1 + 232);
    }
    sub_1005F7B0C(a1 + 64, v6, (const char **)&qword_10247E258, 0, 0);
    sub_10064DFA4(a1);
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CB268);
    }
    double v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning Database is not valid; not initializing",
        buf,
        2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022CB268);
      }
      BOOL v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLNrCellLocationDatabase::CLNrCellLocationDatabase(const char *, const CLSqliteDatabase::SqliteProperties &, double)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  return a1;
}

void sub_10082E11C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 255) < 0) {
    operator delete(*v2);
  }
  sub_10064DF48(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10082E158(uint64_t a1)
{
  *(void *)a1 = off_1022CB238;
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }

  return sub_10064DF48(a1);
}

void sub_10082E1BC(uint64_t a1)
{
  sub_10082E158(a1);

  operator delete();
}

char *sub_10082E1F4@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[255] < 0) {
    return (char *)sub_1000DC48C((unsigned char *)a2, *((void **)result + 29), *((void *)result + 30));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 232);
  *(void *)(a2 + 16) = *((void *)result + 31);
  return result;
}

void sub_10082E220(uint64_t a1)
{
}

void sub_10082E29C(uint64_t a1)
{
  sub_10010F274((uint64_t)&v18);
  uint64_t v2 = sub_100132EFC(&v19, (uint64_t)"SELECT ", 7);
  size_t v3 = strlen("ROWID");
  double v4 = sub_100132EFC(v2, (uint64_t)"ROWID", v3);
  long long v5 = sub_100132EFC(v4, (uint64_t)" FROM ", 6);
  unint64_t v6 = (const char *)(a1 + 232);
  if (*(char *)(a1 + 255) < 0) {
    unint64_t v6 = *(const char **)v6;
  }
  size_t v7 = strlen(v6);
  int v8 = sub_100132EFC(v5, (uint64_t)v6, v7);
  BOOL v9 = sub_100132EFC(v8, (uint64_t)" WHERE ", 7);
  double v10 = sub_100132EFC(v9, (uint64_t)"MCC", 3);
  double v11 = sub_100132EFC(v10, (uint64_t)"=? AND ", 7);
  double v12 = sub_100132EFC(v11, (uint64_t)"MNC", 3);
  double v13 = sub_100132EFC(v12, (uint64_t)"=? AND ", 7);
  double v14 = sub_100132EFC(v13, (uint64_t)"TAC", 3);
  double v15 = sub_100132EFC(v14, (uint64_t)"=? AND ", 7);
  double v16 = sub_100132EFC(v15, (uint64_t)"CI", 2);
  sub_100132EFC(v16, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if (v21 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1 + 64, (uint64_t)p_p);
}

void sub_10082E814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
  }
  sub_101A129A8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_10082E88C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sqlite3_int64 v53 = 0;
  unint64_t v6 = (void *)(a1 + 256);
  if (sub_100F03BA8((void *)(a1 + 256)))
  {
LABEL_22:
    sub_100082068(v6, v58);
    int v28 = (sqlite3_stmt *)sub_10014D19C(v58[0]);
    if (sub_10014D1A4(v28, 1, *(_DWORD *)a2)
      && (uint64_t v29 = (sqlite3_stmt *)sub_10014D19C(v58[0]), sub_10014D1A4(v29, 2, *(_DWORD *)(a2 + 4)))
      && (__int16 v30 = (sqlite3_stmt *)sub_10014D19C(v58[0]), sub_10014D1A4(v30, 3, *(_DWORD *)(a2 + 8)))
      && (BOOL v31 = (sqlite3_stmt *)sub_10014D19C(v58[0]), sub_10014DBB4(v31, 4, *(void *)(a2 + 16)))
      && (__int16 v32 = (sqlite3_stmt *)sub_10014D19C(v58[0]), sub_10014D1A4(v32, 5, *(_DWORD *)(a2 + 24)))
      && (BOOL v33 = (sqlite3_stmt *)sub_10014D19C(v58[0]), sub_10014D1A4(v33, 6, *(_DWORD *)(a2 + 28))))
    {
      __int16 v34 = (sqlite3_stmt *)sub_10014D19C(v58[0]);
      sub_10001FEB0(a1 + 64, v34);
      sqlite3_int64 v35 = sub_1006037D0(a1 + 64);
      sqlite3_int64 v53 = v35;
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022CB268);
      }
      __int16 v36 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        sub_100614EB8(__p);
        double v37 = v60 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)double v61 = 136315394;
        *(void *)&v61[4] = v37;
        __int16 v62 = 2048;
        *(void *)int v63 = v35;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "CELL_CEN: adding cell, %s, rowid, %lld", v61, 0x16u);
        if (v60 < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022CB268);
        }
        sub_100614EB8(v61);
        if (v63[9] >= 0) {
          BOOL v51 = v61;
        }
        else {
          BOOL v51 = *(unsigned char **)v61;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = v51;
        __int16 v55 = 2048;
        sqlite3_int64 v56 = v35;
        unsigned int v52 = (char *)_os_log_send_and_compose_impl();
        if ((v63[9] & 0x80000000) != 0) {
          operator delete(*(void **)v61);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLNrCellLocationDatabase::setLocation(const CLTelephonyService_Type::NrCell &, const CLDaemonLocation &)", "%s\n", v52);
        if (v52 != (char *)__p) {
          free(v52);
        }
      }
      uint64_t v38 = sub_10064F1E8((void *)a1, &v53, a3);
    }
    else
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022CB268);
      }
      double v39 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
      {
        sub_100614EB8(__p);
        uint64_t v40 = v60 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)double v61 = 136315138;
        *(void *)&v61[4] = v40;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_FAULT, "CELL_LOC: failed to bind %s", v61, 0xCu);
        if (v60 < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_1022CB268);
        }
        sub_100614EB8(v61);
        if (v63[9] >= 0) {
          double v46 = v61;
        }
        else {
          double v46 = *(unsigned char **)v61;
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v46;
        __int16 v47 = (char *)_os_log_send_and_compose_impl();
        if ((v63[9] & 0x80000000) != 0) {
          operator delete(*(void **)v61);
        }
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLNrCellLocationDatabase::setLocation(const CLTelephonyService_Type::NrCell &, const CLDaemonLocation &)", "%s\n", v47);
        if (v47 != (char *)__p) {
          free(v47);
        }
      }
      __int16 v41 = (sqlite3_stmt *)sub_10014D19C(v58[0]);
      sqlite3_reset(v41);
      uint64_t v38 = 0;
    }
    uint64_t v42 = v58[0];
    v58[0] = 0;
    if (v42) {
      (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
    }
    return v38;
  }
  sub_10010F274((uint64_t)v61);
  size_t v7 = sub_100132EFC(&v63[2], (uint64_t)"INSERT OR REPLACE INTO ", 23);
  int v8 = (const char *)(a1 + 232);
  if (*(char *)(a1 + 255) < 0) {
    int v8 = *(const char **)v8;
  }
  size_t v9 = strlen(v8);
  double v10 = sub_100132EFC(v7, (uint64_t)v8, v9);
  double v11 = sub_100132EFC(v10, (uint64_t)" (", 2);
  double v12 = sub_100132EFC(v11, (uint64_t)"MCC", 3);
  double v13 = sub_100132EFC(v12, (uint64_t)", ", 2);
  double v14 = sub_100132EFC(v13, (uint64_t)"MNC", 3);
  double v15 = sub_100132EFC(v14, (uint64_t)", ", 2);
  double v16 = sub_100132EFC(v15, (uint64_t)"TAC", 3);
  double v17 = sub_100132EFC(v16, (uint64_t)", ", 2);
  uint64_t v18 = sub_100132EFC(v17, (uint64_t)"CI", 2);
  uint64_t v19 = sub_100132EFC(v18, (uint64_t)", ", 2);
  int v20 = sub_100132EFC(v19, (uint64_t)"NRARFCN", 7);
  char v21 = sub_100132EFC(v20, (uint64_t)", ", 2);
  signed int v22 = sub_100132EFC(v21, (uint64_t)"PID", 3);
  sub_100132EFC(v22, (uint64_t)") VALUES (?, ?, ?, ?, ?, ?)", 27);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022CB268);
  }
  int v23 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    std::stringbuf::str();
    long long v24 = v60 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CELL_LOC: fInsertStatement [%s]", buf, 0xCu);
    if (v60 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CB268);
    }
    std::stringbuf::str();
    if (v57 >= 0) {
      double v48 = buf;
    }
    else {
      double v48 = *(unsigned char **)buf;
    }
    LODWORD(v58[0]) = 136315138;
    *(uint64_t *)((char *)v58 + 4) = (uint64_t)v48;
    __int16 v49 = (char *)_os_log_send_and_compose_impl();
    if (v57 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLNrCellLocationDatabase::setLocation(const CLTelephonyService_Type::NrCell &, const CLDaemonLocation &)", "%s\n", v49);
    if (v49 != (char *)__p) {
      free(v49);
    }
  }
  std::stringbuf::str();
  if (v60 >= 0) {
    long long v25 = __p;
  }
  else {
    long long v25 = (void **)__p[0];
  }
  *(void *)(a1 + 256) = sub_100601D1C(a1 + 64, (uint64_t)v25);
  *(void *)(a1 + 264) = v26;
  if (v60 < 0) {
    operator delete(__p[0]);
  }
  if (sub_100F03BA8(v6))
  {
    *(void *)&v63[2] = v27;
    if (v66 < 0) {
      operator delete(v65);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
    goto LABEL_22;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022CB268);
  }
  __int16 v43 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_FAULT, "Could not prepare cached insert statement", (uint8_t *)__p, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CB268);
    }
    *(_WORD *)buf = 0;
    double v50 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLNrCellLocationDatabase::setLocation(const CLTelephonyService_Type::NrCell &, const CLDaemonLocation &)", "%s\n", v50);
    if (v50 != (char *)__p) {
      free(v50);
    }
  }
  *(void *)&v63[2] = v44;
  if (v66 < 0) {
    operator delete(v65);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 0;
}

void sub_10082F404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  _Unwind_Resume(a1);
}

void sub_10082F49C(uint64_t a1)
{
}

void sub_10082F4E0(uint64_t a1)
{
  sub_10010F274((uint64_t)&v18);
  uint64_t v2 = sub_100132EFC(&v19, (uint64_t)"SELECT ", 7);
  size_t v3 = sub_100132EFC(v2, (uint64_t)"MCC", 3);
  double v4 = sub_100132EFC(v3, (uint64_t)", ", 2);
  long long v5 = sub_100132EFC(v4, (uint64_t)"MNC", 3);
  unint64_t v6 = sub_100132EFC(v5, (uint64_t)", ", 2);
  size_t v7 = sub_100132EFC(v6, (uint64_t)"TAC", 3);
  int v8 = sub_100132EFC(v7, (uint64_t)", ", 2);
  size_t v9 = sub_100132EFC(v8, (uint64_t)"CI", 2);
  double v10 = sub_100132EFC(v9, (uint64_t)" FROM ", 6);
  double v11 = (const char *)(a1 + 232);
  if (*(char *)(a1 + 255) < 0) {
    double v11 = *(const char **)v11;
  }
  size_t v12 = strlen(v11);
  double v13 = sub_100132EFC(v10, (uint64_t)v11, v12);
  double v14 = sub_100132EFC(v13, (uint64_t)" WHERE ", 7);
  size_t v15 = strlen("ROWID");
  double v16 = sub_100132EFC(v14, (uint64_t)"ROWID", v15);
  sub_100132EFC(v16, (uint64_t)"=?", 2);
  std::stringbuf::str();
  if (v21 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  sub_10014D518(a1 + 64, (uint64_t)p_p);
}

void sub_10082F9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }
  sub_101A129A8((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_10082FA38(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10082FA68()
{
  qword_10247E258 = (uint64_t)"MCC";
  dword_10247E260 = 1;
  word_10247E264 = 1;
  byte_10247E268 = 0;
  byte_10247E280 = 0;
  qword_10247E288 = (uint64_t)"MNC";
  dword_10247E290 = 1;
  word_10247E294 = 1;
  byte_10247E298 = 0;
  byte_10247E2B0 = 0;
  qword_10247E2B8 = (uint64_t)"TAC";
  dword_10247E2C0 = 1;
  word_10247E2C4 = 1;
  byte_10247E2C8 = 0;
  byte_10247E2E0 = 0;
  qword_10247E2E8 = (uint64_t)"CI";
  dword_10247E2F0 = 1;
  word_10247E2F4 = 1;
  byte_10247E2F8 = 0;
  byte_10247E310 = 0;
  qword_10247E318 = (uint64_t)"NRARFCN";
  dword_10247E320 = 1;
  word_10247E324 = 1;
  byte_10247E328 = 0;
  byte_10247E340 = 0;
  qword_10247E348 = (uint64_t)"PID";
  dword_10247E350 = 1;
  word_10247E354 = 1;
  byte_10247E358 = 0;
  byte_10247E370 = 0;
  qword_10247E378 = (uint64_t)"Timestamp";
  dword_10247E380 = 2;
  word_10247E384 = 0;
  byte_10247E388 = 0;
  byte_10247E3A0 = 0;
  qword_10247E3A8 = (uint64_t)"Latitude";
  dword_10247E3B0 = 2;
  word_10247E3B4 = 0;
  byte_10247E3B8 = 0;
  byte_10247E3D0 = 0;
  qword_10247E3D8 = (uint64_t)"Longitude";
  dword_10247E3E0 = 2;
  word_10247E3E4 = 0;
  byte_10247E3E8 = 0;
  byte_10247E400 = 0;
  qword_10247E408 = (uint64_t)"HorizontalAccuracy";
  dword_10247E410 = 2;
  word_10247E414 = 0;
  byte_10247E418 = 0;
  byte_10247E430 = 0;
  qword_10247E438 = (uint64_t)"Altitude";
  dword_10247E440 = 2;
  word_10247E444 = 0;
  byte_10247E448 = 0;
  byte_10247E460 = 0;
  qword_10247E468 = (uint64_t)"VerticalAccuracy";
  dword_10247E470 = 2;
  word_10247E474 = 0;
  byte_10247E478 = 0;
  byte_10247E490 = 0;
  qword_10247E498 = (uint64_t)"Speed";
  dword_10247E4A0 = 2;
  word_10247E4A4 = 0;
  byte_10247E4A8 = 0;
  byte_10247E4C0 = 0;
  qword_10247E4C8 = (uint64_t)"Course";
  dword_10247E4D0 = 2;
  word_10247E4D4 = 0;
  byte_10247E4D8 = 0;
  byte_10247E4F0 = 0;
  qword_10247E4F8 = (uint64_t)"Confidence";
  dword_10247E500 = 1;
  word_10247E504 = 0;
  byte_10247E508 = 0;
  byte_10247E520 = 0;
  qword_10247E528 = 0;
  dword_10247E530 = 5;
  word_10247E534 = 0;
  byte_10247E538 = 0;
  byte_10247E550 = 0;
}

void sub_10082FC5C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 24) = 0xC00000046;
  *(_DWORD *)(a1 + 32) = 56;
  *(void *)(a1 + 36) = 0x3851B7173727C5ACLL;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 16) = a2;
  operator new();
}

void sub_10082FD14(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 144);
  *(void *)(v1 + 144) = 0;
  if (v3) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

id sub_10082FD44(uint64_t a1)
{
  id result = [objc_alloc((Class)CMNoMovementStateUpdate) initWithState:0 startTime:CFAbsoluteTimeGetCurrent()];
  *(void *)a1 = result;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  uint64_t v3 = *(void *)(a1 + 144);
  if (v3) {
    *(_DWORD *)(v3 + 16) = 0;
  }
  return result;
}

uint64_t sub_10082FDBC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  if (v2) {
    operator delete();
  }
  return a1;
}

void sub_10082FE10(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 4);
  *(_OWORD *)(a1 + 24) = v3;
  sub_10082FD44(a1);
  if (qword_102419340 != -1) {
    dispatch_once(&qword_102419340, &stru_1022CB288);
  }
  double v4 = qword_102419348;
  if (os_log_type_enabled((os_log_t)qword_102419348, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 24);
    int v6 = *(_DWORD *)(a1 + 28);
    int v7 = *(_DWORD *)(a1 + 32);
    double v8 = *(float *)(a1 + 36);
    double v9 = *(float *)(a1 + 40);
    *(_DWORD *)buf = 67110144;
    int v12 = v5;
    __int16 v13 = 1024;
    int v14 = v6;
    __int16 v15 = 1024;
    int v16 = v7;
    __int16 v17 = 2048;
    double v18 = v8;
    __int16 v19 = 2048;
    double v20 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[CLNoMovement] detector: parameters,epochsPerWindow,%d,epochStepSize,%d,detectionEpochThreshold,%d,userAccelVarSumThreshold,%f,rotationRateVarSumThreshold,%f", buf, 0x28u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419340 != -1) {
      dispatch_once(&qword_102419340, &stru_1022CB288);
    }
    double v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNoMovementDetector::setParameters(const CLNoMovement::Parameters)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
}

void sub_100830048(float *a1, uint64_t a2)
{
  int v5 = a1 + 12;
  unint64_t v4 = *((void *)a1 + 6);
  float v6 = *(float *)a2;
  float v7 = a1[14];
  float v8 = a1[15];
  float v9 = *(float *)a2 - v7;
  *((void *)a1 + 6) = v4 + 1;
  float v10 = v7 + (float)(v9 / (float)(v4 + 1));
  float v11 = v8 + (float)(v9 * (float)(v6 - v10));
  a1[14] = v10;
  a1[15] = v11;
  float v12 = *(float *)(a2 + 4);
  float v13 = a1[18];
  float v14 = a1[19];
  float v15 = v12 - v13;
  unint64_t v16 = *((void *)a1 + 8);
  *((void *)a1 + 8) = v16 + 1;
  float v17 = v13 + (float)((float)(v12 - v13) / (float)(v16 + 1));
  float v18 = v14 + (float)(v15 * (float)(v12 - v17));
  a1[18] = v17;
  a1[19] = v18;
  float v19 = *(float *)(a2 + 8);
  float v20 = a1[22];
  float v21 = a1[23];
  float v22 = v19 - v20;
  unint64_t v23 = *((void *)a1 + 10);
  *((void *)a1 + 10) = v23 + 1;
  float v24 = v20 + (float)((float)(v19 - v20) / (float)(v23 + 1));
  float v25 = v21 + (float)(v22 * (float)(v19 - v24));
  a1[22] = v24;
  a1[23] = v25;
  float v26 = *(float *)(a2 + 12);
  float v27 = a1[26];
  float v28 = a1[27];
  float v29 = v26 - v27;
  unint64_t v30 = *((void *)a1 + 12);
  *((void *)a1 + 12) = v30 + 1;
  float v31 = v27 + (float)((float)(v26 - v27) / (float)(v30 + 1));
  float v32 = v28 + (float)(v29 * (float)(v26 - v31));
  a1[26] = v31;
  a1[27] = v32;
  float v33 = *(float *)(a2 + 16);
  float v34 = a1[30];
  float v35 = a1[31];
  float v36 = v33 - v34;
  unint64_t v37 = *((void *)a1 + 14);
  *((void *)a1 + 14) = v37 + 1;
  float v38 = v34 + (float)((float)(v33 - v34) / (float)(v37 + 1));
  float v39 = v35 + (float)(v36 * (float)(v33 - v38));
  a1[30] = v38;
  a1[31] = v39;
  float v40 = *(float *)(a2 + 20);
  float v41 = a1[34];
  float v42 = a1[35];
  float v43 = v40 - v41;
  unint64_t v44 = *((void *)a1 + 16);
  float v45 = v41 + (float)((float)(v40 - v41) / (float)(v44 + 1));
  *((void *)v5 + 10) = v44 + 1;
  float v46 = v42 + (float)(v43 * (float)(v40 - v45));
  v5[22] = v45;
  v5[23] = v46;
  if (v4 + 1 < 0xFF) {
    return;
  }
  ++*((_DWORD *)a1 + 2);
  float v47 = v11 / (float)v4;
  float v48 = 0.0;
  float v49 = v18 / (float)v16;
  if (v16 + 1 < 2) {
    float v49 = 0.0;
  }
  float v50 = v47 + v49;
  float v51 = 0.0;
  if (v23 + 1 >= 2) {
    float v51 = v25 / (float)v23;
  }
  float v52 = v50 + v51;
  if (v30 + 1 >= 2) {
    float v48 = v32 / (float)v30;
  }
  float v53 = 0.0;
  float v54 = v39 / (float)v37;
  if (v37 + 1 < 2) {
    float v54 = 0.0;
  }
  float v55 = v48 + v54;
  if (v44 + 1 >= 2) {
    float v53 = v46 / (float)v44;
  }
  float v56 = v55 + v53;
  uint64_t v57 = *((void *)a1 + 18);
  BOOL v58 = v52 < a1[9] && v56 < a1[10];
  *(_DWORD *)buf = v58;
  sub_1000C0D88((unsigned __int16 *)(v57 + 16), buf);
  *(unsigned char *)uint64_t v57 = 1;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  *(_OWORD *)int v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  if (qword_102419340 != -1) {
    dispatch_once(&qword_102419340, &stru_1022CB288);
  }
  uint64_t v59 = qword_102419348;
  if (os_log_type_enabled((os_log_t)qword_102419348, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v60 = *(void *)(a2 + 32);
    *(_DWORD *)buf = 134218496;
    uint64_t v82 = v60;
    __int16 v83 = 2048;
    *(double *)__int16 v84 = v52;
    *(_WORD *)&v84[8] = 2048;
    double v85 = v56;
    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "[CLNoMovement] detector: epoch stats,startTime,%f,accelVarSum,%f,rotationVarSum,%f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419340 != -1) {
      dispatch_once(&qword_102419340, &stru_1022CB288);
    }
    unsigned int v79 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNoMovementDetector::computeWindowState(const CLNoMovement::DeviceMotionInput &)", "%s\n", v79);
    if (v79 != (char *)buf) {
      free(v79);
    }
  }
  if (*((_DWORD *)a1 + 2) >= *((_DWORD *)a1 + 7))
  {
    a1[2] = 0.0;
    uint64_t v61 = *((void *)a1 + 18);
    unint64_t v62 = *((int *)a1 + 6);
    int v63 = (unsigned __int16 *)(v61 + 16);
    unint64_t v64 = *(unsigned __int16 *)(v61 + 18);
    if (v64 >= v62)
    {
      if (v64 - v62 < v64)
      {
        int v66 = 0;
        do
          v66 += *(_DWORD *)sub_1000C0E4C((unsigned __int16 *)(v61 + 16), --v64);
        while (*(unsigned __int16 *)(v61 + 18) - v62 < v64);
LABEL_31:
        if (v66 < *((_DWORD *)a1 + 8)) {
          uint64_t v67 = 1;
        }
        else {
          uint64_t v67 = 2;
        }

        id v68 = [objc_alloc((Class)CMNoMovementStateUpdate) initWithState:v67 startTime:*(double *)(a2 + 32)];
        *(void *)a1 = v68;
        if (qword_102419340 != -1) {
          dispatch_once(&qword_102419340, &stru_1022CB288);
        }
        double v69 = qword_102419348;
        if (os_log_type_enabled((os_log_t)qword_102419348, OS_LOG_TYPE_DEBUG))
        {
          [v68 startTime];
          uint64_t v71 = v70;
          unsigned int v72 = [v68 state];
          int v73 = *(unsigned __int16 *)(*((void *)a1 + 18) + 18);
          *(_DWORD *)buf = 134218752;
          uint64_t v82 = v71;
          __int16 v83 = 1024;
          *(_DWORD *)__int16 v84 = v72;
          *(_WORD *)&v84[4] = 1024;
          *(_DWORD *)&v84[6] = v66;
          LOWORD(v85) = 1024;
          *(_DWORD *)((char *)&v85 + 2) = v73;
          _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "[CLNoMovement] detector: compute window-state,startTime,%f,state,%d,bufferSum,%d,bufferSize,%d", buf, 0x1Eu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419340 != -1) {
            dispatch_once(&qword_102419340, &stru_1022CB288);
          }
          [v68 startTime];
          [v68 state];
          __int16 v80 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLNoMovementDetector::computeWindowState(const CLNoMovement::DeviceMotionInput &)", "%s\n", v80);
          if (v80 != (char *)buf) {
            free(v80);
          }
        }
        __int16 v74 = (void (***)(void, void))*((void *)a1 + 2);
        if (v74) {
          (**v74)(v74, *(void *)a1);
        }
        goto LABEL_41;
      }
    }
    else if (*(_WORD *)(v61 + 18))
    {
      unint64_t v65 = 0;
      int v66 = 0;
      do
        v66 += *(_DWORD *)sub_1000C0E4C(v63, v65++);
      while (v64 != v65);
      goto LABEL_31;
    }
    int v66 = 0;
    goto LABEL_31;
  }
LABEL_41:
  uint64_t v75 = *((void *)a1 + 2);
  if (v75)
  {
    id v76 = *(id *)a1;
    uint64_t v77 = *((void *)a1 + 18);
    if (*(_WORD *)(v77 + 18)) {
      uint64_t v78 = *(unsigned int *)sub_1000C0E4C((unsigned __int16 *)(v77 + 16), *(unsigned __int16 *)(v77 + 18) - 1);
    }
    else {
      uint64_t v78 = 0;
    }
    (*(void (**)(uint64_t, id, uint64_t))(*(void *)v75 + 8))(v75, v76, v78);
  }
}

void sub_100830760(id a1)
{
  qword_102419348 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CheckIn");
}

void sub_100830790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __chkstk_darwin(a1);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  *(void *)uint64_t v19 = 0;
  *(unsigned char *)(v19 + 8) = 0;
  *(void *)(v19 + 12) = 0x20000000000;
  *(_OWORD *)(v19 + 88) = 0u;
  *(_OWORD *)(v19 + 104) = 0u;
  *(_OWORD *)(v19 + 32) = 0u;
  *(_OWORD *)(v19 + 48) = 0u;
  *(_OWORD *)(v19 + 64) = 0u;
  *(unsigned char *)(v19 + 80) = 0;
  *(_DWORD *)(v19 + 120) = 1;
  *(_OWORD *)(v19 + 128) = 0u;
  *(_OWORD *)(v19 + 144) = 0u;
  *(_OWORD *)(v19 + 160) = 0u;
  *(unsigned char *)(v19 + 176) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(v19 + 184) = _Q1;
  *(unsigned char *)(v19 + 200) = 0;
  *(_OWORD *)(v19 + 208) = _Q1;
  *(unsigned char *)(v19 + 224) = 0;
  *(_OWORD *)(v19 + 232) = _Q1;
  *(unsigned char *)(v19 + 248) = 0;
  *(void *)(v19 + 304) = 0;
  *(_OWORD *)(v19 + 272) = 0u;
  *(_OWORD *)(v19 + 288) = 0u;
  *(_OWORD *)(v19 + 256) = 0u;
  *(_DWORD *)(v19 + 312) = 1065353216;
  *(void *)(v19 + 320) = 0x100000005;
  *(void *)(v19 + 328) = 0;
  sub_10084F5CC(v19 + 336, v26);
  sub_10084F664(v20 + 368, v16);
  sub_10084F6FC(v20 + 400, v14);
  sub_10084F5CC(v20 + 432, v12);
  sub_10084F794(v20 + 464, a10);
  sub_10084F82C(v20 + 496, a11);
  *(void *)(v20 + 552) = 0;
  *(void *)(v20 + 584) = 0;
  *(unsigned char *)(v20 + 592) = 0;
  *(void *)(v20 + 640) = 0;
  *(void *)(v20 + 600) = 0;
  *(_WORD *)(v20 + 608) = 0;
  *(void *)(v20 + 720) = 0;
  *(void *)(v20 + 680) = 0;
  *(void *)(v20 + 672) = 0;
  *(_WORD *)(v20 + 688) = 0;
  *(void *)(v20 + 752) = 0;
  *(void *)(v20 + 768) = 0;
  *(void *)(v20 + 760) = 0;
  *(unsigned char *)(v20 + 776) = 0;
  *(_DWORD *)(v20 + 780) = 1;
  *(unsigned char *)(v20 + 784) = 0;
  *(void *)(v20 + 792) = v18;
  *(_WORD *)(v20 + 800) = 0;
  *(_DWORD *)(v20 + 804) = 0;
  *(void *)(v20 + 808) = 0;
  *(void *)(v20 + 816) = 0xBFF0000000000000;
  *(_DWORD *)(v20 + 824) = 5;
  *(void *)(v20 + 832) = 0;
  *(void *)(v20 + 840) = sub_10084C5AC;
  *(void *)(v20 + 848) = 0;
  *(void *)(v20 + 856) = sub_10084C8B4;
  *(_DWORD *)(v20 + 1040) = 0;
  *(_OWORD *)(v20 + 1008) = 0u;
  *(_OWORD *)(v20 + 1024) = 0u;
  *(_OWORD *)(v20 + 976) = 0u;
  *(_OWORD *)(v20 + 992) = 0u;
  *(_OWORD *)(v20 + 944) = 0u;
  *(_OWORD *)(v20 + 960) = 0u;
  *(_OWORD *)(v20 + 912) = 0u;
  *(_OWORD *)(v20 + 928) = 0u;
  *(_OWORD *)(v20 + 880) = 0u;
  *(_OWORD *)(v20 + 896) = 0u;
  *(_OWORD *)(v20 + 864) = 0u;
  *(_OWORD *)(v20 + 1048) = 0u;
  *(_OWORD *)(v20 + 1064) = 0u;
  *(_OWORD *)(v20 + 1080) = 0u;
  *(_OWORD *)(v20 + 1096) = 0u;
  *(void *)(v20 + 1112) = 0;
  *(_OWORD *)(v20 + 1144) = 0u;
  *(_OWORD *)(v20 + 1160) = 0u;
  *(_OWORD *)(v20 + 1176) = 0u;
  *(_OWORD *)(v20 + 1192) = 0u;
  *(_OWORD *)(v20 + 1208) = 0u;
  *(_OWORD *)(v20 + 1224) = 0u;
  *(_OWORD *)(v20 + 1240) = 0u;
  *(_OWORD *)(v20 + 1256) = 0u;
  *(unsigned char *)(v20 + 1272) = 0;
  *(_DWORD *)(v20 + 1276) = 255;
  *(_WORD *)(v20 + 1296) = 0;
  *(void *)(v20 + 1288) = 0;
  *(void *)(v20 + 1280) = 0;
  sub_10084CBBC(v20 + 1304);
  *(_DWORD *)(v20 + 2544) = 0;
  *(void *)(v20 + 2600) = 0;
  *(_OWORD *)(v20 + 2552) = 0u;
  *(_OWORD *)(v20 + 2568) = 0u;
  *(_OWORD *)(v20 + 2584) = 0u;
  *(_DWORD *)(v20 + 2608) = 1065353216;
  *(_WORD *)(v20 + 2616) = 0;
  *(unsigned char *)(v20 + 2618) = 0;
  sub_100134750(&__p, "#GnssController state machine");
  *(void *)buf = v20;
  operator new();
}

void sub_100834D1C()
{
}

void sub_100834D3C()
{
}

void sub_100834D44()
{
}

void sub_100834D4C()
{
}

void sub_100834D54()
{
}

void sub_100834D5C()
{
}

void sub_100834D64()
{
}

void sub_100834D6C()
{
}

void sub_100834D74()
{
}

void sub_100834DB0()
{
}

void sub_100834DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t *a21,uint64_t *a22,uint64_t *a23,uint64_t *a24,uint64_t *a25,uint64_t *a26,uint64_t *a27,uint64_t *a28,uint64_t *a29,uint64_t *a30,uint64_t *a31,uint64_t *a32,uint64_t **a33,uint64_t *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t *a45,uint64_t *a46,uint64_t *a47,uint64_t *a48,uint64_t **a49,void **a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t *a56,uint64_t *a57,uint64_t *a58,uint64_t *a59,uint64_t *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  uint64_t v69 = v65[383];
  v65[383] = 0;
  if (v69) {
    operator delete();
  }
  uint64_t v70 = *a21;
  *a21 = 0;
  if (v70) {
    operator delete();
  }
  uint64_t v71 = (std::__shared_weak_count *)v65[380];
  if (v71) {
    std::__shared_weak_count::__release_weak(v71);
  }
  unsigned int v72 = (std::__shared_weak_count *)v65[378];
  if (v72) {
    sub_1000DB0A0(v72);
  }
  uint64_t v73 = v65[345];
  v65[345] = 0;
  if (v73) {
    (*(void (**)(uint64_t))(*(void *)v73 + 8))(v73);
  }
  sub_1008504CC(v67);
  sub_10085044C(a64);
  uint64_t v74 = v65[321];
  v65[321] = 0;
  if (v74) {
    (*(void (**)(uint64_t))(*(void *)v74 + 8))(v74);
  }
  uint64_t v75 = v65[320];
  v65[320] = 0;
  if (v75) {
    (*(void (**)(uint64_t))(*(void *)v75 + 8))(v75);
  }
  sub_100718968(a57, 0);
  sub_10083788C(a19);
  id v76 = v65 + 153;
  uint64_t v77 = v65[157];
  v65[157] = 0;
  if (v77) {
    operator delete();
  }
  sub_1008503FC(a65, 0);
  sub_1008503AC(a45, 0);
  sub_10085035C(a46, 0);
  uint64_t v78 = *v76;
  uint64_t *v76 = 0;
  if (v78) {
    sub_10045F2A8((uint64_t)(v65 + 153), v78);
  }
  uint64_t v79 = v65[152];
  v65[152] = 0;
  if (v79) {
    (*(void (**)(uint64_t))(*(void *)v79 + 8))(v79);
  }
  sub_10085030C(a56, 0);
  uint64_t v80 = v65[150];
  v65[150] = 0;
  if (v80) {
    (*(void (**)(uint64_t))(*(void *)v80 + 8))(v80);
  }
  uint64_t v81 = v65[149];
  v65[149] = 0;
  if (v81) {
    operator delete();
  }
  sub_1008502BC(a47, 0);
  sub_10085026C(a48, 0);
  sub_10085021C(a59, 0);
  sub_1008501CC(a50, 0);
  sub_10085016C(a24, 0);
  sub_1008500E8(v66);
  uint64_t v82 = v65[139];
  v65[139] = 0;
  if (v82) {
    operator delete();
  }
  sub_100850098(a25, 0);
  sub_100850048(a58, 0);
  sub_10084FFF8(a33, 0);
  sub_10084FFA8(a32, 0);
  sub_10084FF58(a34, 0);
  sub_10084FF08(a22, 0);
  __int16 v83 = *a49;
  *a49 = 0;
  if (v83) {
    sub_10084FE84((uint64_t)a49, v83);
  }
  sub_10084FE34(a60, 0);
  sub_10084FDE4(v65 + 128, 0);
  __int16 v84 = (std::__shared_weak_count *)v65[127];
  if (v84) {
    sub_1000DB0A0(v84);
  }
  sub_10084FDE4(a26, 0);
  double v85 = (std::__shared_weak_count *)v65[124];
  if (v85) {
    sub_1000DB0A0(v85);
  }
  sub_10084FDE4(a27, 0);
  __int16 v86 = (std::__shared_weak_count *)v65[121];
  if (v86) {
    sub_1000DB0A0(v86);
  }
  sub_10084FDE4(a28, 0);
  double v87 = (std::__shared_weak_count *)v65[118];
  if (v87) {
    sub_1000DB0A0(v87);
  }
  sub_10084FDE4(a29, 0);
  __int16 v88 = (std::__shared_weak_count *)v65[115];
  if (v88) {
    sub_1000DB0A0(v88);
  }
  sub_10084FDE4(a30, 0);
  unint64_t v89 = (std::__shared_weak_count *)v65[112];
  if (v89) {
    sub_1000DB0A0(v89);
  }
  sub_10084FDE4(a31, 0);
  __int16 v90 = (std::__shared_weak_count *)v65[109];
  if (v90) {
    sub_1000DB0A0(v90);
  }
  uint64_t v91 = v65[106];
  v65[106] = 0;
  if (v91) {
    ((void (*)(void))v65[107])();
  }
  uint64_t v92 = v65[104];
  v65[104] = 0;
  if (v92) {
    ((void (*)(void))v65[105])();
  }
  sub_10084FD94(a23, 0);
  sub_10068280C(v65 + 91);
  sub_10068280C(v65 + 87);
  sub_10068280C(v65 + 81);
  sub_10068280C(v65 + 77);
  sub_10084FD10(a55);
  sub_10084FC8C(a44);
  sub_1007189B8(a13);
  sub_10068280C(a14);
  sub_10084FB00(a15);
  sub_10084FC08(a16);
  sub_10084FB84(a17);
  sub_10084FB00(a18);
  sub_10071874C((uint64_t)(v65 + 35));
  uint64_t v93 = *v65;
  uint64_t *v65 = 0;
  if (v93) {
    (*(void (**)(uint64_t))(*(void *)v93 + 8))(v93);
  }
  _Unwind_Resume(a1);
}

void sub_10083523C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t **sub_100835258(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  int v20 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    unint64_t v4 = a4;
    int v5 = a3;
    unsigned int v7 = a2;
    uint64_t v6 = a1;
    if (qword_1024193D0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_101A707D4(qword_1024193D0 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
LABEL_3:
  float v8 = qword_1024193D8;
  os_log_type_t v9 = *(unsigned char *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v9))
  {
    float v10 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      float v10 = (void *)*v10;
    }
    if (v7 > 2) {
      uint64_t v11 = "StateUnknown";
    }
    else {
      uint64_t v11 = (&off_1022CCDC0)[v7];
    }
    sub_100134750(__p, v11);
    if (SBYTE3(v25) >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = *(unsigned char **)__p;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = v10;
    __int16 v27 = 1024;
    unsigned int v28 = v7;
    __int16 v29 = 2080;
    unint64_t v30 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v25) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v14 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      uint64_t v14 = (void *)*v14;
    }
    if (v7 > 2) {
      uint64_t v15 = "StateUnknown";
    }
    else {
      uint64_t v15 = (&off_1022CCDC0)[v7];
    }
    sub_100134750(v18, v15);
    if (v19 >= 0) {
      uint64_t v16 = v18;
    }
    else {
      uint64_t v16 = (void **)v18[0];
    }
    *(_DWORD *)long long __p = 136315650;
    *(void *)&__p[4] = v14;
    __int16 v22 = 1024;
    unsigned int v23 = v7;
    __int16 v24 = 2080;
    float v25 = v16;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLGnssController>::setStateHandler(State, StateHandler) [T = CLGnssController]", "%s\n", v17);
    if (v17 != buf) {
      free(v17);
    }
  }
  *(void *)buf = &v20;
  id result = sub_1000C5658((uint64_t **)(v6 + 8), &v20, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

uint64_t sub_100835560(uint64_t *a1, int a2)
{
  switch(a2)
  {
    case 2:
    case 7:
    case 9:
    case 11:
    case 13:
      goto LABEL_2;
    case 4:
      uint64_t v4 = *a1;
      if (*a1) {
        (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
      }
      return 0;
    case 5:
      sub_100837FD4((uint64_t)a1);
LABEL_2:
      return sub_100838060((uint64_t)a1);
    case 15:
      sub_100838224((uint64_t)a1);
      return 0;
    case 16:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      int v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning,CLGnssController,Unexpected Debounce Timeout event in Idle state", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        uint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssController::State CLGnssController::handler_Idle(CLGnssController::Event)", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
      return 0;
    default:
      return 0;
  }
}

uint64_t sub_1008357E0(unsigned __int8 *a1, int a2)
{
  switch(a2)
  {
    case 0:
      sub_100838798(a1);
      sub_1008388C8((uint64_t)a1);
      *((void *)a1 + 96) = [[CLOSTransaction alloc] initWithDescription:"com.apple.locationd.gnss.on"];
      uint64_t v6 = *((void *)a1 + 148);
      if (v6) {
        sub_101891AF4(v6);
      }
      *((_WORD *)a1 + 1384) = 0;
      *((double *)a1 + 347) = sub_10016C458();
      sub_10084F794((uint64_t)v22, (uint64_t)(a1 + 616));
      sub_1008389D4((uint64_t)a1, (uint64_t)v22);
      sub_10068280C(v22);
      unsigned int v7 = (int *)*((void *)a1 + 382);
      if (v7) {
        sub_100838C30(v7);
      }
      sub_100838FA8(a1);
      a1[2618] = 0;
      goto LABEL_69;
    case 1:
      sub_100838FA8(a1);
      if (*((void *)a1 + 116))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        float v8 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#rti,reverting to nominal download rates on session exit", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
          }
          uint64_t v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssController::State CLGnssController::handler_Running(CLGnssController::Event)", "%s\n", v15);
          if (v15 != (char *)buf) {
            free(v15);
          }
        }
        sub_1018A8828(*((double **)a1 + 116), 0);
      }
      if (*((void *)a1 + 110))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        os_log_type_t v9 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "#ee,reverting to nominal download rates on session exit", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
          }
          uint64_t v16 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssController::State CLGnssController::handler_Running(CLGnssController::Event)", "%s\n", v16);
          if (v16 != (char *)buf) {
            free(v16);
          }
        }
        sub_1018A78F4(*((double **)a1 + 110), 0);
      }
      if (*((void *)a1 + 113))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        float v10 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#rte,reverting to nominal download rates on session exit", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
          }
          uint64_t v17 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssController::State CLGnssController::handler_Running(CLGnssController::Event)", "%s\n", v17);
          if (v17 != (char *)buf) {
            free(v17);
          }
        }
        sub_1018A81DC(*((double **)a1 + 113), 0, 0);
      }
      if (*((void *)a1 + 125))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        uint64_t v11 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#rof,reverting to nominal download rates on session exit", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
          }
          uint64_t v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssController::State CLGnssController::handler_Running(CLGnssController::Event)", "%s\n", v18);
          if (v18 != (char *)buf) {
            free(v18);
          }
        }
        sub_1018A81DC(*((double **)a1 + 125), 0, 1);
      }
      sub_1008388C8((uint64_t)a1);
      sub_10084F794((uint64_t)v20, (uint64_t)(a1 + 648));
      sub_100839168(a1, (uint64_t)v20);
      sub_10068280C(v20);
      uint64_t v12 = (void *)*((void *)a1 + 96);
      if (v12)
      {

        *((void *)a1 + 96) = 0;
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        uint64_t v13 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "os transaction already nil", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
          }
          char v19 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "CLGnssController::State CLGnssController::handler_Running(CLGnssController::Event)", "%s\n", v19);
          if (v19 != (char *)buf) {
            free(v19);
          }
        }
      }
      sub_100839464(a1);
      if (a1[2618] && *(void *)a1) {
        (*(void (**)(void))(**(void **)a1 + 32))(*(void *)a1);
      }
      goto LABEL_69;
    case 2:
    case 5:
    case 7:
    case 9:
    case 11:
    case 13:
      int v3 = sub_100838060((uint64_t)a1);
      if (!v3)
      {
        if (!a1[800])
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
          }
          int v5 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#GnssController,debounce timer not running when expected to be running", buf, 2u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
            }
            uint64_t v14 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "CLGnssController::State CLGnssController::handler_Running(CLGnssController::Event)", "%s\n", v14);
            if (v14 != (char *)buf) {
              free(v14);
            }
          }
          sub_100839590((uint64_t)a1);
        }
        goto LABEL_69;
      }
      if (v3 == 1)
      {
        sub_1008388C8((uint64_t)a1);
        goto LABEL_69;
      }
      return 2;
    case 3:
    case 12:
    case 14:
      uint64_t result = sub_100838060((uint64_t)a1);
      if (result) {
        return result;
      }
      if (sub_1008396D8((uint64_t)a1, 1) > 0.0)
      {
        sub_100839590((uint64_t)a1);
        goto LABEL_69;
      }
LABEL_8:
      uint64_t result = 0;
      break;
    case 4:
      if ((sub_10010145C() & 1) != 0 || (*((_DWORD *)a1 + 150) & 0xFFFFFFFE) != 0xA)
      {
        sub_100839590((uint64_t)a1);
        if (*(void *)a1) {
          (*(void (**)(void))(**(void **)a1 + 32))(*(void *)a1);
        }
LABEL_69:
        uint64_t result = 1;
      }
      else
      {
        uint64_t result = 0;
        a1[2618] = 1;
      }
      break;
    case 6:
    case 8:
    case 10:
    case 16:
      goto LABEL_8;
    case 15:
      sub_100838224((uint64_t)a1);
      goto LABEL_69;
    case 17:
      return sub_100838060((uint64_t)a1);
    default:
      goto LABEL_69;
  }
  return result;
}

void sub_10083620C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10068280C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10083627C(void *a1, int a2)
{
  uint64_t v2 = 2;
  switch(a2)
  {
    case 0:
      sub_100839D48((uint64_t)a1);
      return v2;
    case 1:
      sub_100839DC0(a1);
      return v2;
    case 4:
    case 6:
    case 8:
    case 10:
      return 0;
    case 5:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      uint64_t v4 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning,CLGnssController,Unexpected device connect event in NilrOnly state", buf, 2u);
      }
      uint64_t v2 = 2;
      if (!sub_10013D1A0(115, 2)) {
        return v2;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_44;
      }
      goto LABEL_47;
    case 7:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      int v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning,CLGnssController,Unexpected Ap Wake event in NilrOnly state", buf, 2u);
      }
      uint64_t v2 = 2;
      if (!sub_10013D1A0(115, 2)) {
        return v2;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_44;
      }
      goto LABEL_47;
    case 11:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      uint64_t v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning,CLGnssController,Unexpected Emergency start in NilrOnly state", buf, 2u);
      }
      uint64_t v2 = 2;
      if (!sub_10013D1A0(115, 2)) {
        return v2;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_44;
      }
      goto LABEL_47;
    case 13:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      unsigned int v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning,CLGnssController,Unexpected Nilr Begin event in NilrOnly state", buf, 2u);
      }
      uint64_t v2 = 2;
      if (!sub_10013D1A0(115, 2)) {
        return v2;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_44;
      }
      goto LABEL_47;
    case 14:
    case 17:
      return sub_100838060((uint64_t)a1);
    case 15:
      sub_100838224((uint64_t)a1);
      return v2;
    case 16:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      float v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning,CLGnssController,Unexpected Debounce Timeout event in NilrOnly state", buf, 2u);
      }
      uint64_t v2 = 2;
      if (!sub_10013D1A0(115, 2)) {
        return v2;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_44;
      }
LABEL_47:
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
LABEL_44:
      os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssController::State CLGnssController::handler_NilrOnly(CLGnssController::Event)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
      return 2;
    default:
      return v2;
  }
}

uint64_t sub_100836844(uint64_t result, int a2)
{
  uint64_t v3 = result;
  if (*(_DWORD *)(result + 600) != a2 || !*(void *)(result + 672) || !*(void *)(result + 640))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v4 = (int *)(v3 + 600);
    int v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v6 = *v4;
      *(_DWORD *)buf = 67240448;
      int v9 = v6;
      __int16 v10 = 1026;
      int v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "OperatingModeFrom,%{public}d,OperatingModeTo,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      unsigned int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::updateOperatingMode(CLLocationProvider_Type::OperatingMode)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    *(void *)(v3 + 680) = *(void *)v4;
    *(_WORD *)(v3 + 688) = *(_WORD *)(v3 + 608);
    sub_10084E014((void *)(v3 + 696), v3 + 616);
    sub_10084E014((void *)(v3 + 728), v3 + 648);
    sub_10083AFF8((void *)v3, a2);
    return sub_100839F84(v3 + 2624, 15);
  }
  return result;
}

void sub_100836A7C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 792), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CB2A8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    float v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssController::onClientManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CB2A8);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssController::onClientManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100844B58((void *)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100836C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_100836C58(uint64_t a1)
{
  uint64_t v2 = 0;
  v6[0] = kCTDaemonReadyNotification;
  v6[1] = kCTConnectionInvalidatedNotification;
  v6[2] = @"kCLTelephonyServiceDisconnectedNotification";
  v6[3] = @"kHandsetInfoNotification";
  v6[4] = @"kCLTelephonyServiceConnectedNotification";
  v6[5] = @"kCellRefreshNotification";
  v6[6] = @"kSuplInitPayloadNotification";
  v6[7] = @"kSimStatusChangeNotification";
  v6[8] = @"kCLCellularTransmitStateNotification";
  v6[9] = @"kCellInfoNotification";
  v6[10] = @"kUplinkFreqBwNotification";
  v6[11] = @"kSubscriberMccAndMncNotification";
  v6[12] = @"kDataStatusNotification";
  v6[13] = @"kSubscriptionChangeNotification";
  v6[14] = @"kPrefDataSimChangedNotification";
  v6[15] = @"kTandemCapabilityNotification";
  v6[16] = @"kAltAccountConfiguredNotification";
  v6[17] = @"kAtLeastOneVoiceCallInProgress";
  v6[18] = @"kNoVoiceCallInProgress";
  do
  {
    uint64_t v3 = *(void *)(a1 + 2560);
    sub_1000B0164(&v5, v6[v2]);
    id result = [*(id *)(v3 + 16) register:*(void *)(v3 + 8) forNotification:sub_1000F1244(&v5) registrationInfo:0];
    ++v2;
  }
  while (v2 != 19);
  return result;
}

void sub_100836E0C(uint64_t a1)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a1 + 792), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CB2A8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v2 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssController::sendGnssBandChangeNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CB2A8);
    }
    uint64_t v3 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      char v11 = "";
      __int16 v12 = 2082;
      int v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssController::sendGnssBandChangeNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  id v4 = [*(id *)(a1 + 792) silo];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_10084CEAC;
  v5[3] = &unk_1022A3020;
  v5[4] = a1;
  [v4 sync:v5];
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_100837000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state, char a15)
{
  if (a15) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100837020(void *a1, uint64_t a2)
{
  sub_1008527DC((uint64_t)v4, a2);
  sub_100851734(v4, a1);
  sub_10084FC8C(v4);
  return a1;
}

void *sub_100837094(void *a1, uint64_t a2)
{
  sub_100851A80((uint64_t)v4, a2);
  sub_100851B18(v4, a1);
  sub_10084FD10(v4);
  return a1;
}

void sub_100837108(uint64_t *a1)
{
  int v46 = sub_10084A0FC();
  sub_1000C7F88(buf);
  BOOL v47 = 0;
  int v2 = sub_1000D2988(*(uint64_t *)buf, "GnssForceEnableGps", &v47);
  BOOL v3 = v47;
  if (*(void *)v49) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v49);
  }
  if (v3) {
    int v4 = v2;
  }
  else {
    int v4 = 0;
  }
  int v45 = v4;
  sub_1000C7F88(buf);
  BOOL v47 = 0;
  unsigned __int8 v5 = sub_1000D2988(*(uint64_t *)buf, "GnssForceEnableBeidou", &v47);
  BOOL v6 = v47;
  if (*(void *)v49) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v49);
  }
  if ((v5 & v6) != 0) {
    int v7 = 4;
  }
  else {
    int v7 = 0;
  }
  int v44 = v7;
  sub_1000C7F88(buf);
  BOOL v47 = 0;
  unsigned __int8 v8 = sub_1000D2988(*(uint64_t *)buf, "GnssForceEnableGalileo", &v47);
  BOOL v9 = v47;
  if (*(void *)v49) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v49);
  }
  if ((v8 & v9) != 0) {
    int v10 = 8;
  }
  else {
    int v10 = 0;
  }
  int v43 = v10;
  sub_1000C7F88(buf);
  BOOL v47 = 0;
  unsigned __int8 v11 = sub_1000D2988(*(uint64_t *)buf, "GnssForceEnableGlonass", &v47);
  BOOL v12 = v47;
  if (*(void *)v49) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v49);
  }
  if ((v11 & v12) != 0) {
    int v13 = 2;
  }
  else {
    int v13 = 0;
  }
  sub_1000C7F88(buf);
  BOOL v47 = 0;
  unsigned __int8 v14 = sub_1000D2988(*(uint64_t *)buf, "GnssForceEnableQzss", &v47);
  BOOL v15 = v47;
  if (*(void *)v49) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v49);
  }
  if ((v14 & v15) != 0) {
    int v16 = 16;
  }
  else {
    int v16 = 0;
  }
  sub_1000C7F88(buf);
  BOOL v47 = 0;
  unsigned __int8 v17 = sub_1000D2988(*(uint64_t *)buf, "GnssForceEnableNavic", &v47);
  BOOL v18 = v47;
  if (*(void *)v49) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v49);
  }
  if ((v17 & v18) != 0) {
    int v19 = 32;
  }
  else {
    int v19 = 0;
  }
  sub_1000C7F88(buf);
  BOOL v47 = 0;
  int v20 = sub_1000D2988(*(uint64_t *)buf, "GnssForceDisableGps", &v47);
  BOOL v21 = v47;
  if (*(void *)v49) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v49);
  }
  if (v21) {
    int v22 = v20;
  }
  else {
    int v22 = 0;
  }
  sub_1000C7F88(buf);
  BOOL v47 = 0;
  unsigned __int8 v23 = sub_1000D2988(*(uint64_t *)buf, "GnssForceDisableBeidou", &v47);
  BOOL v24 = v47;
  if (*(void *)v49) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v49);
  }
  if ((v23 & v24) != 0) {
    int v25 = 4;
  }
  else {
    int v25 = 0;
  }
  sub_1000C7F88(buf);
  BOOL v47 = 0;
  unsigned __int8 v26 = sub_1000D2988(*(uint64_t *)buf, "GnssForceDisableGalileo", &v47);
  BOOL v27 = v47;
  if (*(void *)v49) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v49);
  }
  if ((v26 & v27) != 0) {
    int v28 = 8;
  }
  else {
    int v28 = 0;
  }
  sub_1000C7F88(buf);
  BOOL v47 = 0;
  unsigned __int8 v29 = sub_1000D2988(*(uint64_t *)buf, "GnssForceDisableGlonass", &v47);
  BOOL v30 = v47;
  if (*(void *)v49) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v49);
  }
  if ((v29 & v30) != 0) {
    int v31 = 2;
  }
  else {
    int v31 = 0;
  }
  sub_1000C7F88(buf);
  BOOL v47 = 0;
  unsigned __int8 v32 = sub_1000D2988(*(uint64_t *)buf, "GnssForceDisableQzss", &v47);
  BOOL v33 = v47;
  if (*(void *)v49) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v49);
  }
  if ((v32 & v33) != 0) {
    int v34 = 16;
  }
  else {
    int v34 = 0;
  }
  sub_1000C7F88(buf);
  BOOL v47 = 0;
  unsigned __int8 v35 = sub_1000D2988(*(uint64_t *)buf, "GnssForceDisableNavic", &v47);
  int v36 = v25 | v22 | v28 | v31 | v34;
  BOOL v37 = v47;
  if (*(void *)v49) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v49);
  }
  if ((v35 & v37) != 0) {
    int v38 = 32;
  }
  else {
    int v38 = 0;
  }
  int v39 = v36 | v38;
  *((_DWORD *)a1 + 316) = (v39 | v46) & ~(v44 | v45 | v43 | v13 | v16 | v19);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  float v40 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v41 = *((_DWORD *)a1 + 316);
    *(_DWORD *)buf = 68290051;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)float v49 = 2082;
    *(void *)&v49[2] = "";
    __int16 v50 = 1025;
    int v51 = v46;
    __int16 v52 = 1025;
    int v53 = v44 | v45 | v43 | v13 | v16 | v19;
    __int16 v54 = 1025;
    int v55 = v39;
    __int16 v56 = 1025;
    int v57 = v41;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"setDefaultBlockedGnssConstellationSetting\", \"platformDefaultBlockedConstellations\":0x%{private}04X, \"forceEnabledConstellations\":0x%{private}04X, \"forceBlockedConstellations\":0x%{private}04X, \"defaultBlockedConstellations\":0x%{private}04X}", buf, 0x2Au);
  }
  uint64_t v42 = *a1;
  if (*a1)
  {
    *(_DWORD *)(v42 + 1280) = *((_DWORD *)a1 + 316);
    if (*((unsigned char *)a1 + 1271)) {
      *(unsigned char *)(v42 + 1288) = 1;
    }
  }
}

void sub_100837618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100837664(void *a1, uint64_t *a2)
{
  sub_100852B64((uint64_t *)&v6, a2);
  BOOL v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    sub_1000DB0A0(v3);
  }
  return a1;
}

void sub_1008376B0(uint64_t a1, _DWORD *a2, char *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 792), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CB2A8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unsigned __int8 v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssController::onDaemonStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CB2A8);
    }
    BOOL v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      BOOL v15 = "";
      __int16 v16 = 2082;
      unsigned __int8 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssController::onDaemonStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100849FD0((void *)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10083786C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10083788C(uint64_t a1)
{
  if (*(char *)(a1 + 1199) < 0) {
    operator delete(*(void **)(a1 + 1176));
  }
  if (*(char *)(a1 + 1175) < 0) {
    operator delete(*(void **)(a1 + 1152));
  }
  if (*(char *)(a1 + 1007) < 0) {
    operator delete(*(void **)(a1 + 984));
  }
  if (*(char *)(a1 + 983) < 0) {
    operator delete(*(void **)(a1 + 960));
  }
  return a1;
}

void sub_1008378F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

uint64_t *sub_100837904(uint64_t *a1)
{
  [*(id *)(a1[321] + 16) unregister:*(void *)(a1[321] + 8) forNotification:4];
  [*(id *)(a1[321] + 16) unregister:*(void *)(a1[321] + 8) forNotification:0];
  sub_101899088((id *)a1[146]);
  uint64_t v2 = a1[345];
  if (v2)
  {
    [*(id *)(v2 + 16) unregister:*(void *)(v2 + 8) forNotification:15];
    uint64_t v3 = a1[345];
    a1[345] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  long long v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#GnssController,deconstructed", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    BOOL v30 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssController::~CLGnssController()", "%s\n", v30);
    if (v30 != (char *)buf) {
      free(v30);
    }
  }
  uint64_t v5 = a1[383];
  a1[383] = 0;
  if (v5) {
    operator delete();
  }
  uint64_t v6 = a1[382];
  a1[382] = 0;
  if (v6) {
    operator delete();
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[380];
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  unsigned __int8 v8 = (std::__shared_weak_count *)a1[378];
  if (v8) {
    sub_1000DB0A0(v8);
  }
  uint64_t v9 = a1[345];
  a1[345] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  sub_1008504CC((uint64_t)(a1 + 328));
  sub_10085044C((uint64_t)(a1 + 322));
  uint64_t v10 = a1[321];
  a1[321] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = a1[320];
  a1[320] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  sub_100718968(a1 + 319, 0);
  if (*((char *)a1 + 2503) < 0) {
    operator delete((void *)a1[310]);
  }
  if (*((char *)a1 + 2479) < 0) {
    operator delete((void *)a1[307]);
  }
  if (*((char *)a1 + 2311) < 0) {
    operator delete((void *)a1[286]);
  }
  if (*((char *)a1 + 2287) < 0) {
    operator delete((void *)a1[283]);
  }
  uint64_t v12 = a1[157];
  a1[157] = 0;
  if (v12) {
    operator delete();
  }
  sub_1008503FC(a1 + 156, 0);
  sub_1008503AC(a1 + 155, 0);
  sub_10085035C(a1 + 154, 0);
  uint64_t v13 = a1[153];
  a1[153] = 0;
  if (v13) {
    sub_10045F2A8((uint64_t)(a1 + 153), v13);
  }
  uint64_t v14 = a1[152];
  a1[152] = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  sub_10085030C(a1 + 151, 0);
  uint64_t v15 = a1[150];
  a1[150] = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = a1[149];
  a1[149] = 0;
  if (v16) {
    operator delete();
  }
  sub_1008502BC(a1 + 148, 0);
  sub_10085026C(a1 + 147, 0);
  sub_10085021C(a1 + 146, 0);
  sub_1008501CC((void **)a1 + 145, 0);
  sub_10085016C(a1 + 144, 0);
  sub_1008500E8(a1 + 140);
  uint64_t v17 = a1[139];
  a1[139] = 0;
  if (v17) {
    operator delete();
  }
  sub_100850098(a1 + 138, 0);
  sub_100850048(a1 + 137, 0);
  sub_10084FFF8((uint64_t **)a1 + 136, 0);
  sub_10084FFA8(a1 + 135, 0);
  sub_10084FF58(a1 + 134, 0);
  sub_10084FF08(a1 + 133, 0);
  __int16 v18 = (uint64_t *)a1[132];
  a1[132] = 0;
  if (v18) {
    sub_10084FE84((uint64_t)(a1 + 132), v18);
  }
  sub_10084FE34(a1 + 131, 0);
  sub_10084FDE4(a1 + 128, 0);
  uint64_t v19 = (std::__shared_weak_count *)a1[127];
  if (v19) {
    sub_1000DB0A0(v19);
  }
  sub_10084FDE4(a1 + 125, 0);
  int v20 = (std::__shared_weak_count *)a1[124];
  if (v20) {
    sub_1000DB0A0(v20);
  }
  sub_10084FDE4(a1 + 122, 0);
  BOOL v21 = (std::__shared_weak_count *)a1[121];
  if (v21) {
    sub_1000DB0A0(v21);
  }
  sub_10084FDE4(a1 + 119, 0);
  int v22 = (std::__shared_weak_count *)a1[118];
  if (v22) {
    sub_1000DB0A0(v22);
  }
  sub_10084FDE4(a1 + 116, 0);
  unsigned __int8 v23 = (std::__shared_weak_count *)a1[115];
  if (v23) {
    sub_1000DB0A0(v23);
  }
  sub_10084FDE4(a1 + 113, 0);
  BOOL v24 = (std::__shared_weak_count *)a1[112];
  if (v24) {
    sub_1000DB0A0(v24);
  }
  sub_10084FDE4(a1 + 110, 0);
  int v25 = (std::__shared_weak_count *)a1[109];
  if (v25) {
    sub_1000DB0A0(v25);
  }
  uint64_t v26 = a1[106];
  a1[106] = 0;
  if (v26) {
    ((void (*)(void))a1[107])();
  }
  uint64_t v27 = a1[104];
  a1[104] = 0;
  if (v27) {
    ((void (*)(void))a1[105])();
  }
  sub_10084FD94(a1 + 95, 0);
  sub_10068280C(a1 + 91);
  sub_10068280C(a1 + 87);
  sub_10068280C(a1 + 81);
  sub_10068280C(a1 + 77);
  sub_10084FD10(a1 + 70);
  sub_10084FC8C(a1 + 66);
  sub_1007189B8(a1 + 62);
  sub_10068280C(a1 + 58);
  sub_10084FB00(a1 + 54);
  sub_10084FC08(a1 + 50);
  sub_10084FB84(a1 + 46);
  sub_10084FB00(a1 + 42);
  sub_10071874C((uint64_t)(a1 + 35));
  int v28 = (void *)*a1;
  *a1 = 0;
  if (v28) {
    (*(void (**)(void *))(*v28 + 8))(v28);
  }
  return a1;
}

void sub_100837F74(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_100837F90(uint64_t a1, int a2)
{
  id result = *(void **)(a1 + 2552);
  if (result)
  {
    if (a2) {
      return sub_10099EE34(result);
    }
    else {
      return sub_10099EFF4(result);
    }
  }
  return result;
}

void *sub_100837FA8@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0x11) {
    uint64_t v2 = "EventUnknown";
  }
  else {
    uint64_t v2 = (&off_1022CCD30)[a1];
  }
  return sub_100134750(a2, v2);
}

void sub_100837FD4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 776))
  {
    if (sub_10073FAC4())
    {
      current_queue = dispatch_get_current_queue();
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10083BBB4;
      block[3] = &unk_1022A3020;
      block[4] = a1;
      dispatch_async(current_queue, block);
    }
  }
}

uint64_t sub_100838060(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 8);
    int v4 = *(unsigned __int8 *)(a1 + 1272);
    int v5 = *(unsigned __int8 *)(a1 + 1297);
    int v6 = *(unsigned __int8 *)(a1 + 2547);
    int v7 = *(unsigned __int8 *)(a1 + 1270);
    int v8 = *(unsigned __int8 *)(a1 + 776);
    v11[0] = 68290562;
    v11[1] = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    __int16 v14 = 1026;
    int v15 = v3;
    __int16 v16 = 1026;
    int v17 = v4;
    __int16 v18 = 1026;
    int v19 = v5;
    __int16 v20 = 1026;
    int v21 = v6;
    __int16 v22 = 1026;
    int v23 = v7;
    __int16 v24 = 1026;
    int v25 = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"expectedState\", \"fDeviceReady\":%{public}hhd, \"fPreventSessionsDueToPendingApSleep\":%{public}hhd, \"fNilrActive\":%{public}hhd, \"fNilrLockoutStatus\":%{public}hhd, \"fIsConformanceMode\":%{public}hhd, \"fHasClient\":%{public}hhd}", (uint8_t *)v11, 0x36u);
  }
  if (!*(unsigned char *)(a1 + 8) || *(unsigned char *)(a1 + 1272) || *(_DWORD *)(a1 + 780) != 1) {
    return 0;
  }
  if ((sub_10073CBFC() & 1) == 0 && *(unsigned char *)(a1 + 1297) && !*(unsigned char *)(a1 + 2547)) {
    return 2;
  }
  if (sub_10073CBFC()) {
    int v9 = sub_10073C62C() ^ 1;
  }
  else {
    LOBYTE(v9) = 1;
  }
  if (!*(unsigned char *)(a1 + 1270))
  {
    if (*(unsigned char *)(a1 + 776) || sub_100D33CF4(a1 + 1276)) {
      return 1;
    }
    if (!*(unsigned char *)(a1 + 1270)) {
      LOBYTE(v9) = 1;
    }
    if (v9) {
      return 0;
    }
    return *(unsigned char *)(a1 + 1297) != 0;
  }
  if ((v9 & 1) == 0) {
    return *(unsigned char *)(a1 + 1297) != 0;
  }
  return 0;
}

uint64_t sub_100838224(uint64_t a1)
{
  if (*(void *)(a1 + 768))
  {
    if ((*(unsigned int (**)(void))(**(void **)a1 + 40))())
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      uint64_t v2 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGnssController::applyDeviceOperatingContext,device restart initiated", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::applyDeviceOperatingContext()", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      sub_10084F794((uint64_t)v14, a1 + 728);
      sub_100839168((void *)a1, (uint64_t)v14);
      sub_10068280C(v14);
      sub_10084F794((uint64_t)v13, a1 + 616);
      sub_1008389D4(a1, (uint64_t)v13);
      sub_10068280C(v13);
    }
    else
    {
      int v5 = *(_DWORD *)(a1 + 684);
      int v6 = *(_DWORD *)(a1 + 604);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      int v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        BOOL v16 = v5 != v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLGnssController::applyDeviceOperatingContext,device restart not initiated,assistance restart needed,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        __int16 v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::applyDeviceOperatingContext()", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
      if (v5 != v6)
      {
        uint64_t v8 = *(void *)(a1 + 752);
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v8 + 48))(v8);
        }
        uint64_t v9 = *(void *)(a1 + 640);
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 48))(v9);
        }
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CLGnssController::applyDeviceOperatingContext invoked when gps is not running ", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::applyDeviceOperatingContext()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  uint64_t result = *(void *)a1;
  if (*(void *)a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 312))(result, a1 + 604);
  }
  return result;
}

void sub_100838770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10068280C(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100838798(unsigned __int8 *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = a1[801];
    v5[0] = 68289794;
    v5[1] = 0;
    __int16 v6 = 2082;
    int v7 = "";
    __int16 v8 = 1026;
    int v9 = 1;
    __int16 v10 = 1026;
    int v11 = v3;
    __int16 v12 = 1026;
    int v13 = 1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssConnect\", \"connect\":%{public}hhd, \"fEngaged\":%{public}hhd, \"result\":%{public}hhd}", (uint8_t *)v5, 0x24u);
  }
  a1[801] = 1;
  return (*(uint64_t (**)(void))(**(void **)a1 + 48))();
}

void sub_1008388C8(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289282;
    v4[1] = 0;
    __int16 v5 = 2082;
    __int16 v6 = "";
    __int16 v7 = 1026;
    int v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssStopTimer\", \"run\":%{public}hhd}", (uint8_t *)v4, 0x18u);
  }
  sub_100847910(a1 + 2624, 16);
  *(unsigned char *)(a1 + 800) = 0;
  uint64_t v3 = *(void *)(a1 + 1184);
  if (v3) {
    sub_101895780(v3, 3u, 0);
  }
}

uint64_t sub_1008389D4(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(void *)&v22[0] = 68289282;
    WORD4(v22[0]) = 2082;
    *(void *)((char *)v22 + 10) = "";
    WORD1(v22[1]) = 2082;
    *(void *)((char *)&v22[1] + 4) = "deviceStart";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", (uint8_t *)v22, 0x1Cu);
  }
  sub_100D6750C(*(void *)a1 + 8);
  __int16 v5 = *(unsigned char **)a1;
  v5[1096] = *(unsigned char *)(a1 + 2545);
  (*(void (**)(unsigned char *, uint64_t))(*(void *)v5 + 16))(v5, a1 + 604);
  uint64_t v6 = *(void *)(a1 + 1184);
  if (v6) {
    sub_101895780(v6, 4u, 1);
  }
  *(void *)BOOL v30 = 0;
  *(_OWORD *)&v30[16] = 0u;
  *(_OWORD *)&v28[16] = 0u;
  *(void *)int v28 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  memset(v22, 0, sizeof(v22));
  DWORD2(v24) = 1;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v28[8] = _Q1;
  long long v29 = _Q1;
  *(_OWORD *)&v30[8] = _Q1;
  long long v31 = 0u;
  memset(v32, 0, sizeof(v32));
  uint64_t v33 = 0;
  uint64_t v34 = 1065353216;
  long long v35 = 0x100000005uLL;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  long long v12 = v23;
  long long v13 = v24;
  long long v14 = v26;
  *(_OWORD *)(a1 + 128) = v25;
  *(_OWORD *)(a1 + 144) = v14;
  *(_OWORD *)(a1 + 96) = v12;
  *(_OWORD *)(a1 + 112) = v13;
  long long v15 = v27;
  long long v16 = *(_OWORD *)v28;
  long long v17 = v29;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)&v28[16];
  *(_OWORD *)(a1 + 208) = v17;
  *(_OWORD *)(a1 + 160) = v15;
  *(_OWORD *)(a1 + 176) = v16;
  long long v18 = *(_OWORD *)v30;
  long long v19 = *(_OWORD *)&v30[16];
  long long v20 = v31;
  *(void *)(a1 + 272) = *(void *)&v32[0];
  *(_OWORD *)(a1 + 240) = v19;
  *(_OWORD *)(a1 + 256) = v20;
  *(_OWORD *)(a1 + 224) = v18;
  sub_10084E2F4(a1 + 280, (uint64_t *)v32 + 1);
  *(_OWORD *)(a1 + 320) = v35;
  sub_10071874C((uint64_t)v32 + 8);
  uint64_t result = *(void *)(a2 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
  }
  return result;
}

void sub_100838C30(int *a1)
{
  time_t v16 = 0;
  time(&v16);
  uint64_t v2 = localtime(&v16);
  if (v2->tm_yday != *a1)
  {
    uint64_t v3 = v2;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *a1;
      int tm_yday = v3->tm_yday;
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)int v21 = v5;
      *(_WORD *)&v21[4] = 1026;
      *(_DWORD *)&v21[6] = tm_yday;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#raven,resetRuntime,startYearDay,old,%{public}d,new,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      int v13 = *a1;
      int v14 = v3->tm_yday;
      int v17 = 67240448;
      *(_DWORD *)long long v18 = v13;
      *(_WORD *)&v18[4] = 1026;
      *(_DWORD *)&v18[6] = v14;
      long long v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::RavenBudgetController::tryResetRuntime()", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    *a1 = v3->tm_yday;
    *((void *)a1 + 1) = 0;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  __int16 v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *((void *)a1 + 1);
    int v9 = a1[4];
    *(_DWORD *)buf = 134349312;
    *(void *)int v21 = v8;
    *(_WORD *)&v21[8] = 1026;
    int v22 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#raven,todayRuntime,%{public}.1f,budget,%{public}d,sec", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v10 = *((void *)a1 + 1);
    int v11 = a1[4];
    int v17 = 134349312;
    *(void *)long long v18 = v10;
    *(_WORD *)&v18[8] = 1026;
    int v19 = v11;
    long long v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::RavenBudgetController::tryResetRuntime()", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
}

void sub_100838FA8(void *a1)
{
  uint64_t v2 = a1[382];
  if (v2) {
    sub_10083FF90(v2);
  }
  uint64_t v3 = a1[377];
  if (v3)
  {
    sub_100CDD3B4(v3);
    int v4 = (std::__shared_weak_count *)a1[378];
    a1[377] = 0;
    a1[378] = 0;
    if (v4) {
      sub_1000DB0A0(v4);
    }
  }
  a1[381] = 0xBFF0000000000000;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#raven,deconstructRavenController", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::deconstructRavenController()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_100839168(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 48))(v3);
  }
  (*(void (**)(void))(*(void *)*a1 + 24))();
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    int v13 = "";
    __int16 v14 = 2082;
    long long v15 = "deviceStop";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v5 = a1[61];
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 48))(v5);
  }
  if (a1[148])
  {
    uint64_t v6 = a1[137];
    if (v6)
    {
      sub_1018473C0(v6, (float *)(*a1 + 844));
      sub_1018473CC(a1[137], (float *)(*a1 + 848));
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      __int16 v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#gnssawd fGnssInterference == nullptr", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        int v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssController::stopDevice(std::function<void ()>)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
    }
    sub_10188AC20(a1[148], *a1 + 8, (int *)(*a1 + 1224));
    uint64_t v8 = a1[148];
    if (v8) {
      sub_101895780(v8, 4u, 0);
    }
  }
}

uint64_t sub_100839464(unsigned __int8 *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = a1[801];
    v5[0] = 68289794;
    v5[1] = 0;
    __int16 v6 = 2082;
    __int16 v7 = "";
    __int16 v8 = 1026;
    int v9 = 0;
    __int16 v10 = 1026;
    int v11 = v3;
    __int16 v12 = 1026;
    int v13 = 1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssConnect\", \"connect\":%{public}hhd, \"fEngaged\":%{public}hhd, \"result\":%{public}hhd}", (uint8_t *)v5, 0x24u);
  }
  a1[801] = 0;
  return (*(uint64_t (**)(void))(**(void **)a1 + 56))();
}

void sub_100839590(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 800))
  {
    double v2 = sub_1008396D8(a1, 0);
    sub_100846BDC(a1);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      v5[0] = 68289538;
      v5[1] = 0;
      __int16 v6 = 2082;
      __int16 v7 = "";
      __int16 v8 = 1026;
      int v9 = 1;
      __int16 v10 = 2050;
      double v11 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssStopTimer\", \"run\":%{public}hhd, \"debounce\":\"%{public}f\"}", (uint8_t *)v5, 0x22u);
    }
    sub_100846E24(a1 + 2624, 16, v2);
    *(unsigned char *)(a1 + 800) = 1;
    uint64_t v4 = *(void *)(a1 + 1184);
    if (v4) {
      sub_101895780(v4, 3u, 1);
    }
  }
}

double sub_1008396D8(uint64_t a1, int a2)
{
  double v4 = sub_1007401C0();
  unsigned int v5 = *(_DWORD *)(a1 + 600) & 0xFFFFFFFE;
  double v6 = sub_10016C458() - *(double *)(a1 + 2776);
  BOOL v7 = !*(unsigned char *)(a1 + 1269) && !*(unsigned char *)(a1 + 784) && *(unsigned char *)(a1 + 2792) != 0;
  if (*(unsigned char *)(a1 + 80)) {
    int v8 = v7;
  }
  else {
    int v8 = 1;
  }
  if (v6 > 1.0) {
    int v9 = v8;
  }
  else {
    int v9 = 0;
  }
  if (*(unsigned char *)(a1 + 1270)) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v5 == 10;
  }
  if (!v10 && v9 == 0)
  {
    if (v6 <= 1.0) {
      int v19 = v8;
    }
    else {
      int v19 = 0;
    }
    if (v19 == 1)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      long long v20 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v21 = *(unsigned char *)(a1 + 80) == 0;
        *(_DWORD *)buf = 67240704;
        *(_DWORD *)long long v31 = v21;
        *(_WORD *)&v31[4] = 1026;
        *(_DWORD *)&v31[6] = v7;
        *(_WORD *)unsigned __int8 v32 = 1026;
        *(_DWORD *)&_OWORD v32[2] = 1;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "CLGnssController,min debounce,reason,noFix,%{public}d,lowBenefit,%{public}d,sessLength,%{public}d", buf, 0x14u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        int v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "double CLGnssController::computeDebounceDurationSeconds(const BOOL) const", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      double v4 = *(double *)(a1 + 3072);
    }
    if (sub_1007402D0())
    {
      double v22 = *(double *)(a1 + 3072);
      if (*(unsigned char *)(a1 + 80))
      {
        if (!(sub_1003BFEDC(*(double *)(a1 + 88), *(double *)(a1 + 96)) ? v19 : 1)) {
          double v22 = 30.0;
        }
      }
      if (*(unsigned char *)(a1 + 176) && *(double *)(a1 + 184) + *(double *)(a1 + 192) * -2.0 > 50.0) {
        double v22 = 120.0;
      }
      if (v22 >= (double)*(int *)(a1 + 804)) {
        double v22 = (double)*(int *)(a1 + 804);
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      long long v24 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v25 = *(_DWORD *)(a1 + 804);
        *(_DWORD *)buf = 134349312;
        *(double *)long long v31 = v22;
        *(_WORD *)&v31[8] = 1026;
        *(_DWORD *)unsigned __int8 v32 = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "CLGnssController,extended debounce,%{public}f,numFixesSinceFirst,%{public}d", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        long long v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "double CLGnssController::computeDebounceDurationSeconds(const BOOL) const", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
      }
      if (v4 < v22) {
        double v4 = v22;
      }
    }
    if (a2)
    {
      if (v19) {
        BOOL v16 = v4 <= *(double *)(a1 + 3072);
      }
      else {
        BOOL v16 = 0;
      }
      uint64_t v15 = a1;
      double v17 = v6;
      int v18 = v16;
      goto LABEL_61;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    __int16 v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *(unsigned __int8 *)(a1 + 1270);
      BOOL v14 = *(unsigned char *)(a1 + 80) == 0;
      *(_DWORD *)buf = 67240960;
      *(_DWORD *)long long v31 = v13;
      *(_WORD *)&v31[4] = 1026;
      *(_DWORD *)&v31[6] = v5 == 10;
      *(_WORD *)unsigned __int8 v32 = 1026;
      *(_DWORD *)&_OWORD v32[2] = v14;
      __int16 v33 = 1026;
      BOOL v34 = v7;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "CLGnssController,skip debounce,reason,conformance,%{public}d,background,%{public}d,noFix,%{public}d,lowBenefit,%{public}d", buf, 0x1Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      long long v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "double CLGnssController::computeDebounceDurationSeconds(const BOOL) const", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
    double v4 = 0.0;
    if (a2 && !*(unsigned char *)(a1 + 1270) && v5 != 10)
    {
      uint64_t v15 = a1;
      BOOL v16 = v8;
      double v17 = v6;
      int v18 = 0;
LABEL_61:
      sub_10084B048(v15, v16, v18, v17);
    }
  }
  return v4;
}

void sub_100839D48(uint64_t a1)
{
  double v2 = *(uint64_t **)(a1 + 760);
  if (v2 && !*(unsigned char *)(a1 + 2617)) {
    sub_10184F87C(v2);
  }
  sub_10083BCAC(a1);
  int v3 = *(unsigned char **)(a1 + 1056);
  if (v3) {
    sub_101411494(v3);
  }
  uint64_t v4 = *(void *)(a1 + 1096);
  if (v4) {
    sub_101846B68(v4);
  }
  unsigned int v5 = *(char **)(a1 + 1048);
  if (v5)
  {
    sub_100F38C98(v5);
  }
}

uint64_t sub_100839DC0(void *a1)
{
  sub_10083BD78((uint64_t)a1);
  uint64_t v2 = a1[131];
  if (v2) {
    sub_100F38870(v2);
  }
  uint64_t v3 = a1[137];
  if (v3) {
    sub_101846D04(v3);
  }
  uint64_t result = a1[132];
  if (result)
  {
    return sub_1014117F0();
  }
  return result;
}

BOOL sub_100839E20(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v4 = *(void *)(a2 + 24);
    if (!v4) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void))(*(void *)v4 + 48))(v4, *(void *)a1);
  }
  return v2 != 0;
}

uint64_t sub_100839E84(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289282;
    v4[1] = 0;
    __int16 v5 = 2082;
    double v6 = "";
    __int16 v7 = 2082;
    int v8 = "clientStart";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", (uint8_t *)v4, 0x1Cu);
  }
  *(unsigned char *)(a1 + 776) = 1;
  return sub_100839F84(a1 + 2624, 2);
}

uint64_t sub_100839F84(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 88);
  unsigned int v88 = *(_DWORD *)(a1 + 4);
  if (!*(void *)(a1 + 32))
  {
    sub_101A70954();
    goto LABEL_159;
  }
  uint64_t v2 = a1;
  double v6 = &qword_102419000;
  if (!*(unsigned char *)(a1 + 48))
  {
    sub_101A70AC8(qword_1024193D0 == -1);
    goto LABEL_159;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  unint64_t v4 = (unint64_t)&qword_102419000;
  int v8 = qword_1024193D8;
  LODWORD(v3) = *(unsigned __int8 *)(v2 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, *(os_log_type_t *)(v2 + 120)))
  {
    int v9 = (void *)(v2 + 96);
    if (*(char *)(v2 + 119) < 0) {
      int v9 = (void *)*v9;
    }
    uint64_t v10 = *(int *)(v2 + 4);
    if (v10 > 2) {
      double v11 = "StateUnknown";
    }
    else {
      double v11 = (&off_1022CCDC0)[v10];
    }
    sub_100134750(__p, v11);
    int v12 = SHIBYTE(v92);
    int v13 = *(unsigned char **)__p;
    __int16 v5 = (void **)v99;
    sub_100837FA8(a2, v99);
    BOOL v14 = __p;
    if (v12 < 0) {
      BOOL v14 = v13;
    }
    if (v102 >= 0) {
      uint64_t v15 = v99;
    }
    else {
      uint64_t v15 = *(unsigned char **)v99;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = v9;
    __int16 v95 = 2080;
    __int16 v96 = v14;
    __int16 v97 = 2080;
    char v98 = v15;
    _os_log_impl((void *)&_mh_execute_header, v8, (os_log_type_t)v3, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v102 < 0) {
      operator delete(*(void **)v99);
    }
    if (SHIBYTE(v92) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v59 = (void *)(v2 + 96);
    if (*(char *)(v2 + 119) < 0) {
      uint64_t v59 = (void *)*v59;
    }
    uint64_t v60 = *(int *)(v2 + 4);
    if (v60 > 2) {
      uint64_t v61 = "StateUnknown";
    }
    else {
      uint64_t v61 = (&off_1022CCDC0)[v60];
    }
    LODWORD(v3) = *(unsigned __int8 *)(v2 + 120);
    sub_100134750(v99, v61);
    int v62 = v102;
    int v63 = *(unsigned char **)v99;
    __int16 v5 = v86;
    sub_100837FA8(a2, v86);
    unint64_t v64 = v99;
    if (v62 < 0) {
      unint64_t v64 = v63;
    }
    if (v87 >= 0) {
      unint64_t v65 = v86;
    }
    else {
      unint64_t v65 = (void **)v86[0];
    }
    *(_DWORD *)long long __p = 136315650;
    *(void *)&__p[4] = v59;
    __int16 v90 = 2080;
    uint64_t v91 = v64;
    __int16 v92 = 2080;
    uint64_t v93 = v65;
    int v66 = (char *)_os_log_send_and_compose_impl();
    if (v87 < 0) {
      operator delete(v86[0]);
    }
    if (v102 < 0) {
      operator delete(*(void **)v99);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLGnssController>::handleEvent(Event) [T = CLGnssController]", "%s\n", v66);
    if (v66 != buf) {
      free(v66);
    }
  }
  uint64_t v16 = *(void *)(v2 + 16);
  if (!v16) {
    goto LABEL_31;
  }
  double v17 = (uint64_t **)(v2 + 8);
  int v18 = *(_DWORD *)(v2 + 4);
  uint64_t v19 = v2 + 16;
  do
  {
    int v20 = *(_DWORD *)(v16 + 32);
    BOOL v21 = v20 < v18;
    if (v20 >= v18) {
      double v22 = (uint64_t *)v16;
    }
    else {
      double v22 = (uint64_t *)(v16 + 8);
    }
    if (!v21) {
      uint64_t v19 = v16;
    }
    uint64_t v16 = *v22;
  }
  while (*v22);
  if (v19 == v2 + 16 || v18 < *(_DWORD *)(v19 + 32))
  {
LABEL_31:
    sub_101A70C48();
    goto LABEL_159;
  }
  long long v23 = *(uint64_t (**)(void *, uint64_t))(v19 + 40);
  uint64_t v24 = *(void *)(v19 + 48);
  int v25 = (void *)(*(void *)(v2 + 32) + (v24 >> 1));
  if (v24) {
    long long v23 = *(uint64_t (**)(void *, uint64_t))(*v25 + v23);
  }
  uint64_t v26 = v23(v25, a2);
  uint64_t v3 = v26;
  int v85 = v26;
  if (a2 <= 1 && v26 != v88)
  {
    sub_101A710A4();
    while (1)
    {
LABEL_159:
      while (1)
      {
        __break(1u);
LABEL_160:
        unsigned int v72 = "StateUnknown";
LABEL_161:
        sub_100134750(v99, v72);
        int v75 = v102;
        id v76 = *(unsigned char **)v99;
        sub_100134750(v86, "Exit");
        uint64_t v77 = v99;
        if (v75 < 0) {
          uint64_t v77 = v76;
        }
        if (v87 >= 0) {
          uint64_t v78 = v86;
        }
        else {
          uint64_t v78 = (void **)v86[0];
        }
        *(_DWORD *)long long __p = 136315650;
        *(void *)&__p[4] = v5;
        __int16 v90 = 2080;
        uint64_t v91 = v77;
        __int16 v92 = 2080;
        uint64_t v93 = v78;
        uint64_t v79 = (char *)_os_log_send_and_compose_impl();
        if (v87 < 0) {
          operator delete(v86[0]);
        }
        if (v102 < 0) {
          operator delete(*(void **)v99);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLGnssController>::handleEvent(Event) [T = CLGnssController]", "%s\n", v79);
        double v17 = v84;
        if (v79 != buf) {
          free(v79);
        }
LABEL_78:
        uint64_t v40 = *(void *)(v2 + 32);
        *(void *)buf = &v88;
        int v41 = sub_1000C5658(v17, (int *)&v88, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        uint64_t v42 = v41[5];
        uint64_t v43 = (uint64_t)v41[6];
        int v44 = (void *)(v40 + (v43 >> 1));
        if (v43) {
          uint64_t v42 = *(uint64_t **)(*v44 + v42);
        }
        int v45 = ((uint64_t (*)(void *, uint64_t))v42)(v44, 1);
        if (v45 == v88) {
          break;
        }
        sub_101A70F30();
      }
      *(_DWORD *)(v2 + 4) = v3;
      if (v6[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      int v46 = *(NSObject **)(v4 + 984);
      os_log_type_t v47 = *(unsigned char *)(v2 + 120);
      if (os_log_type_enabled(v46, v47))
      {
        __int16 v5 = (void **)(v2 + 96);
        if (*(char *)(v2 + 119) < 0) {
          __int16 v5 = (void **)*v5;
        }
        if (v3 > 2) {
          float v48 = "StateUnknown";
        }
        else {
          float v48 = (&off_1022CCDC0)[(int)v3];
        }
        sub_100134750(__p, v48);
        int v49 = SHIBYTE(v92);
        __int16 v50 = *(unsigned char **)__p;
        sub_100134750(v99, "Enter");
        int v51 = __p;
        if (v49 < 0) {
          int v51 = v50;
        }
        if (v102 >= 0) {
          __int16 v52 = v99;
        }
        else {
          __int16 v52 = *(unsigned char **)v99;
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = v5;
        __int16 v95 = 2080;
        __int16 v96 = v51;
        __int16 v97 = 2080;
        char v98 = v52;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "%snewState,%s,event,%s", buf, 0x20u);
        if (v102 < 0) {
          operator delete(*(void **)v99);
        }
        if (SHIBYTE(v92) < 0) {
          operator delete(*(void **)__p);
        }
        double v17 = v84;
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v6[122] != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        uint64_t v73 = (void *)(v2 + 96);
        if (*(char *)(v2 + 119) < 0) {
          uint64_t v73 = (void *)*v73;
        }
        if (v3 > 2) {
          uint64_t v74 = "StateUnknown";
        }
        else {
          uint64_t v74 = (&off_1022CCDC0)[(int)v3];
        }
        sub_100134750(v99, v74);
        unint64_t v4 = v102;
        uint64_t v80 = *(unsigned char **)v99;
        sub_100134750(v86, "Enter");
        uint64_t v81 = v99;
        if ((v4 & 0x80000000) != 0) {
          uint64_t v81 = v80;
        }
        if (v87 >= 0) {
          uint64_t v82 = v86;
        }
        else {
          uint64_t v82 = (void **)v86[0];
        }
        *(_DWORD *)long long __p = 136315650;
        *(void *)&__p[4] = v73;
        __int16 v90 = 2080;
        uint64_t v91 = v81;
        __int16 v92 = 2080;
        uint64_t v93 = v82;
        __int16 v83 = (char *)_os_log_send_and_compose_impl();
        if (v87 < 0) {
          operator delete(v86[0]);
        }
        if (v102 < 0) {
          operator delete(*(void **)v99);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLGnssController>::handleEvent(Event) [T = CLGnssController]", "%s\n", v83);
        if (v83 != buf) {
          free(v83);
        }
      }
      uint64_t v53 = *(void *)(v2 + 32);
      *(void *)buf = &v85;
      __int16 v54 = sub_1000C5658(v17, &v85, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      int v55 = v54[5];
      uint64_t v56 = (uint64_t)v54[6];
      int v57 = (void *)(v53 + (v56 >> 1));
      if (v56) {
        int v55 = *(uint64_t **)(*v57 + v55);
      }
      uint64_t v3 = ((uint64_t (*)(void *, void))v55)(v57, 0);
      if (v3 == v85) {
        break;
      }
      sub_101A70DBC();
    }
    goto LABEL_103;
  }
  if (*(_DWORD *)(v2 + 88) >= 2u)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    long long v27 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v28 = (void *)(v2 + 96);
      if (*(char *)(v2 + 119) < 0) {
        int v28 = (void *)*v28;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      id v68 = (void *)(v2 + 96);
      if (*(char *)(v2 + 119) < 0) {
        id v68 = (void *)*v68;
      }
      *(_DWORD *)long long __p = 136315138;
      *(void *)&__p[4] = v68;
      uint64_t v69 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "State CLStateMachine<CLGnssController>::handleEvent(Event) [T = CLGnssController]", "%s\n", v69);
      if (v69 != buf) {
        free(v69);
      }
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  long long v29 = qword_1024193D8;
  os_log_type_t v30 = *(unsigned char *)(v2 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v30))
  {
    __int16 v5 = (void **)(v2 + 96);
    if (*(char *)(v2 + 119) < 0) {
      __int16 v5 = (void **)*v5;
    }
    if (v3 > 2) {
      long long v31 = "StateUnknown";
    }
    else {
      long long v31 = (&off_1022CCDC0)[(int)v3];
    }
    sub_100134750(buf, v31);
    if (v97 >= 0) {
      unsigned __int8 v32 = buf;
    }
    else {
      unsigned __int8 v32 = *(unsigned char **)buf;
    }
    *(_DWORD *)long long __p = 136315394;
    *(void *)&__p[4] = v5;
    __int16 v90 = 2080;
    uint64_t v91 = v32;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v97) < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    __int16 v5 = (void **)(v2 + 96);
    if (*(char *)(v2 + 119) < 0) {
      __int16 v5 = (void **)*v5;
    }
    if (v3 > 2) {
      uint64_t v67 = "StateUnknown";
    }
    else {
      uint64_t v67 = (&off_1022CCDC0)[(int)v3];
    }
    sub_100134750(__p, v67);
    if (v92 >= 0) {
      uint64_t v70 = __p;
    }
    else {
      uint64_t v70 = *(unsigned char **)__p;
    }
    *(_DWORD *)uint64_t v99 = 136315394;
    *(void *)&v99[4] = v5;
    __int16 v100 = 2080;
    uint64_t v101 = v70;
    uint64_t v71 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v92) < 0) {
      operator delete(*(void **)__p);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLGnssController>::handleEvent(Event) [T = CLGnssController]", "%s\n", v71);
    if (v71 != buf) {
      free(v71);
    }
  }
  if (v3 != v88)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    __int16 v33 = qword_1024193D8;
    os_log_type_t v34 = *(unsigned char *)(v2 + 120);
    __int16 v84 = (uint64_t **)(v2 + 8);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v34))
    {
      __int16 v5 = (void **)(v2 + 96);
      if (*(char *)(v2 + 119) < 0) {
        __int16 v5 = (void **)*v5;
      }
      if (v88 > 2) {
        long long v35 = "StateUnknown";
      }
      else {
        long long v35 = (&off_1022CCDC0)[v88];
      }
      sub_100134750(__p, v35);
      int v36 = SHIBYTE(v92);
      BOOL v37 = *(unsigned char **)__p;
      sub_100134750(v99, "Exit");
      int v38 = __p;
      if (v36 < 0) {
        int v38 = v37;
      }
      if (v102 >= 0) {
        int v39 = v99;
      }
      else {
        int v39 = *(unsigned char **)v99;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v5;
      __int16 v95 = 2080;
      __int16 v96 = v38;
      __int16 v97 = 2080;
      char v98 = v39;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%soldState,%s,event,%s", buf, 0x20u);
      if (v102 < 0) {
        operator delete(*(void **)v99);
      }
      if (SHIBYTE(v92) < 0) {
        operator delete(*(void **)__p);
      }
      unint64_t v4 = (unint64_t)&qword_102419000;
      double v17 = (uint64_t **)(v2 + 8);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      __int16 v5 = (void **)(v2 + 96);
      if (*(char *)(v2 + 119) < 0) {
        __int16 v5 = (void **)*v5;
      }
      if (v88 <= 2)
      {
        unsigned int v72 = (&off_1022CCDC0)[v88];
        goto LABEL_161;
      }
      goto LABEL_160;
    }
    goto LABEL_78;
  }
LABEL_103:
  --*(_DWORD *)(v2 + 88);
  return v3;
}

void sub_10083AD74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 105) < 0) {
    operator delete(*(void **)(v22 - 128));
  }
  _Unwind_Resume(exception_object);
}

void sub_10083ADD4(uint64_t a1)
{
  *(unsigned char *)(a1 + 776) = 0;
  sub_100839F84(a1 + 2624, 3);
  uint64_t v2 = *(void *)(a1 + 488);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    v4[0] = 68289282;
    v4[1] = 0;
    __int16 v5 = 2082;
    double v6 = "";
    __int16 v7 = 2082;
    int v8 = "clientStop";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", (uint8_t *)v4, 0x1Cu);
  }
}

uint64_t sub_10083AEFC(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289282;
    v4[1] = 0;
    __int16 v5 = 2082;
    double v6 = "";
    __int16 v7 = 2082;
    int v8 = "shutdown";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", (uint8_t *)v4, 0x1Cu);
  }
  *(unsigned char *)(a1 + 776) = 0;
  return sub_100839F84(a1 + 2624, 4);
}

void *sub_10083AFF8(void *result, int a2)
{
  uint64_t v2 = result;
  *((_DWORD *)result + 150) = a2;
  if (a2 != 11)
  {
    if (a2 == 10)
    {
      uint64_t result = sub_10083BAF4((uint64_t)result);
      int v3 = 1;
      goto LABEL_6;
    }
    if (a2) {
      return result;
    }
  }
  uint64_t result = sub_10083BA34((uint64_t)result);
  int v3 = 0;
LABEL_6:
  *((_DWORD *)v2 + 151) = v3;
  return result;
}

uint64_t sub_10083B050(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGnssController::handleDeviceDisconnect,disconnected", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    unint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::handleDeviceDisconnect()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  *(unsigned char *)(a1 + 8) = 0;
  return sub_100839F84(a1 + 2624, 6);
}

uint64_t sub_10083B1F4(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGnssController::handleDeviceConnect,connected", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    unint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::handleDeviceConnect()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  *(unsigned char *)(a1 + 8) = 1;
  return sub_100839F84(a1 + 2624, 5);
}

uint64_t sub_10083B39C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLGnssController::handleApWake", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    unint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::handleApWake()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  *(unsigned char *)(a1 + 1272) = 0;
  return sub_100839F84(a1 + 2624, 7);
}

uint64_t sub_10083B540(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLGnssController::handleApSleep", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    unint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::handleApSleep()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  *(unsigned char *)(a1 + 1272) = 1;
  return sub_100839F84(a1 + 2624, 8);
}

uint64_t sub_10083B6E8(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGnssController::handleNilrBegin", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    unint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::handleNilrBegin()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  *(unsigned char *)(a1 + 1297) = 1;
  return sub_100839F84(a1 + 2624, 13);
}

uint64_t sub_10083B890(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGnssController::handleNilrEnd", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    unint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::handleNilrEnd()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  *(unsigned char *)(a1 + 1297) = 0;
  return sub_100839F84(a1 + 2624, 14);
}

void *sub_10083BA34(uint64_t a1)
{
  int v3 = off_1022CC9F8;
  uint64_t v4 = a1;
  __int16 v5 = &v3;
  sub_10084E088(&v3, (void *)(a1 + 616));
  sub_10068280C(&v3);
  int v3 = off_1022CCA78;
  uint64_t v4 = a1;
  __int16 v5 = &v3;
  sub_10084E088(&v3, (void *)(a1 + 648));
  return sub_10068280C(&v3);
}

void *sub_10083BAF4(uint64_t a1)
{
  int v3 = off_1022CCAF8;
  uint64_t v4 = a1;
  __int16 v5 = &v3;
  sub_10084E088(&v3, (void *)(a1 + 616));
  sub_10068280C(&v3);
  int v3 = off_1022CCB78;
  uint64_t v4 = a1;
  __int16 v5 = &v3;
  sub_10084E088(&v3, (void *)(a1 + 648));
  return sub_10068280C(&v3);
}

void sub_10083BBB4(uint64_t a1)
{
}

void sub_10083BBBC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 1056);
  if (v2) {
    sub_101410A1C(v2);
  }
  uint64_t v3 = *(void *)(a1 + 1048);
  if (v3)
  {
    sub_100F3828C(v3);
  }
}

uint64_t sub_10083BC0C(uint64_t a1)
{
  sub_10083BCAC(a1);
  uint64_t v2 = *(unsigned char **)(a1 + 1056);
  if (v2) {
    sub_101411494(v2);
  }
  uint64_t v3 = *(void *)(a1 + 1096);
  if (v3) {
    sub_101846B68(v3);
  }
  uint64_t v4 = *(char **)(a1 + 1048);
  if (v4) {
    sub_100F38C98(v4);
  }
  __int16 v5 = *(unsigned char **)(a1 + 760);
  if (v5) {
    sub_10184F818(v5, *(unsigned char *)(a1 + 2617));
  }
  uint64_t v6 = *(void *)(a1 + 1208);
  if (v6) {
    sub_10187240C(v6);
  }
  uint64_t v7 = *(void *)(a1 + 1160);
  if (v7) {
    sub_10192B1CC(v7);
  }
  uint64_t v8 = *(void *)(a1 + 1248);
  if (v8) {
    sub_10100FDB0(v8);
  }
  uint64_t result = *(void *)(a1 + 1256);
  if (result)
  {
    return sub_100A31904(result);
  }
  return result;
}

void sub_10083BCAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 1232);
  if (v2) {
    sub_100E15024(v2);
  }
  uint64_t v3 = *(void *)(a1 + 1240);
  if (v3) {
    sub_101272008(v3);
  }

  sub_1008460A0((_DWORD *)a1);
}

void sub_10083BCF8(void *a1)
{
  uint64_t v2 = a1[151];
  if (v2) {
    sub_1018725D0(v2);
  }
  uint64_t v3 = (uint64_t *)a1[95];
  if (v3) {
    sub_10184F87C(v3);
  }
  uint64_t v4 = a1[131];
  if (v4) {
    sub_100F38870(v4);
  }
  uint64_t v5 = a1[137];
  if (v5) {
    sub_101846D04(v5);
  }
  if (a1[132]) {
    sub_1014117F0();
  }
  uint64_t v6 = a1[156];
  if (v6)
  {
    sub_10100FEE0(v6);
  }
}

void sub_10083BD78(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 1232);
  if (v2) {
    sub_100E14E2C(v2);
  }
  uint64_t v3 = *(void *)(a1 + 1240);
  if (v3) {
    sub_101271F10(v3);
  }

  sub_1008460A0((_DWORD *)a1);
}

void sub_10083BDC4(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = (uint64_t)a1 + 1276;
  BOOL v5 = sub_100D33CF4((uint64_t)a1 + 1276);
  BOOL v6 = sub_100D33CF4((uint64_t)a2);
  int v20 = *((unsigned __int8 *)a1 + 2544);
  *((unsigned char *)a1 + 2544) = sub_100D33C94((uint64_t)a2);
  *((unsigned char *)a1 + 2546) = sub_100D33CD4((uint64_t)a2);
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022CB788);
  }
  uint64_t v7 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *((unsigned __int8 *)a1 + 2544);
    uint64_t buf = 68289538;
    __int16 v31 = 2082;
    unsigned __int8 v32 = "";
    __int16 v33 = 1026;
    *(_DWORD *)os_log_type_t v34 = v20;
    *(_WORD *)&v34[4] = 1026;
    *(_DWORD *)&v34[6] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#thumper, Updating emergency state\", \"wasInWifiEmergency\":%{public}d, \"fInWifiEmergency\":%{public}d}", (uint8_t *)&buf, 0x1Eu);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022CB788);
    }
  }
  int v9 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100D335B8(a2, &__p);
    uint64_t v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    uint64_t buf = 68289794;
    __int16 v31 = 2082;
    unsigned __int8 v32 = "";
    __int16 v33 = 2082;
    *(void *)os_log_type_t v34 = v10;
    *(_WORD *)&v34[8] = 1026;
    BOOL v35 = v5;
    __int16 v36 = 1026;
    BOOL v37 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"state\":%{public, location:escape_only}s, \"wasInEmergency\":%{public}hhd, \"inEmergencyNow\":%{public}hhd}", (uint8_t *)&buf, 0x28u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (!sub_100D33CD4(v4) && sub_100D33CD4((uint64_t)a2))
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022CB788);
    }
    double v11 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = *((unsigned __int8 *)a1 + 1269);
      int v13 = *((unsigned __int8 *)a1 + 1270);
      uint64_t buf = 68289538;
      __int16 v31 = 2082;
      unsigned __int8 v32 = "";
      __int16 v33 = 1026;
      *(_DWORD *)os_log_type_t v34 = v12;
      *(_WORD *)&v34[4] = 1026;
      *(_DWORD *)&v34[6] = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmgContext\", \"SimulationMode\":%{public}d, \"ConformanceMode\":%{public}d}", (uint8_t *)&buf, 0x1Eu);
    }
    uint64_t v14 = a1[147];
    if (v14) {
      sub_101870FFC(v14);
    }
    uint64_t v15 = a1[148];
    if (v15) {
      sub_1018917E4(v15);
    }
  }
  long long v16 = *(_OWORD *)a2;
  *(_DWORD *)(v4 + 16) = a2[4];
  *(_OWORD *)uint64_t v4 = v16;
  uint64_t v17 = a1[131];
  if (v17)
  {
    long long v27 = *(_OWORD *)a2;
    int v28 = a2[4];
    sub_100F3EFD4(v17, (uint64_t)&v27);
  }
  if (v5 || !v6)
  {
    uint64_t v18 = *a1;
    if (!v5 || v6)
    {
      long long v21 = *(_OWORD *)a2;
      int v22 = a2[4];
      (*(void (**)(uint64_t, long long *))(*(void *)v18 + 320))(v18, &v21);
    }
    else
    {
      long long v23 = *(_OWORD *)a2;
      int v24 = a2[4];
      (*(void (**)(uint64_t, long long *))(*(void *)v18 + 320))(v18, &v23);
      sub_100839F84((uint64_t)(a1 + 328), 12);
      *((unsigned char *)a1 + 2545) = 0;
    }
  }
  else
  {
    sub_100839F84((uint64_t)(a1 + 328), 11);
    uint64_t v19 = *a1;
    long long v25 = *(_OWORD *)a2;
    int v26 = a2[4];
    (*(void (**)(uint64_t, long long *))(*(void *)v19 + 320))(v19, &v25);
    *(unsigned char *)(*a1 + 1096) = 1;
    *((unsigned char *)a1 + 2545) = 1;
  }
  if (v20 && !*((unsigned char *)a1 + 2544) && *((_DWORD *)a1 + 348) == 3 && *((unsigned char *)a1 + 1344))
  {
    if (a1[147])
    {
      sub_10192B6A8((uint64_t)(a1 + 163));
      sub_1018703DC(a1[147], (uint64_t)(a1 + 163));
      sub_10192C5D4((uint64_t)(a1 + 163));
    }
  }
}

void sub_10083C24C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t)(a1 + 322);
  if (sub_10011853C(a1 + 322, (int *)a2))
  {
    *(void *)uint64_t buf = a2;
    uint64_t v7 = sub_1008567B8(v6, (int *)a2, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    sub_10083C6B4((uint64_t)(v7 + 3), (uint64_t *)a2);
    *((unsigned char *)a1 + 1296) = *(unsigned char *)(a2 + 4);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    int v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v9 = *((unsigned __int8 *)a1 + 1296);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v23 = 2082;
      int v24 = "";
      __int16 v25 = 1026;
      int v26 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Emergency Settings\", \"HELO state\":%{public}hhd}", buf, 0x18u);
    }
    uint64_t v10 = a1[131];
    if (v10) {
      sub_100F40394(v10, *(unsigned __int8 *)(a2 + 4));
    }
    if (sub_10016CCBC())
    {
      char v11 = *((unsigned char *)a1 + 2616);
      *(void *)uint64_t buf = a2;
      *((unsigned char *)sub_1008567B8(v6, (int *)a2, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 29) = v11 ^ 1;
      char v12 = *((unsigned char *)a1 + 2616);
      *(void *)uint64_t buf = a2;
      *((unsigned char *)sub_1008567B8(v6, (int *)a2, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 128) = v12;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      int v13 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v14 = *(_DWORD *)a2;
        *(void *)uint64_t buf = a2;
        int v15 = *((unsigned __int8 *)sub_1008567B8(v6, (int *)a2, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 29);
        *(void *)uint64_t buf = a2;
        int v16 = *((unsigned __int8 *)sub_1008567B8(v6, (int *)a2, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 128);
        *(_DWORD *)uint64_t buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v23 = 2082;
        int v24 = "";
        __int16 v25 = 1026;
        int v26 = v14;
        __int16 v27 = 1026;
        int v28 = v15;
        __int16 v29 = 1026;
        int v30 = v16;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Emergency Settings\", \"sim\":%{public}d, \"enableEarlyReturnDuringEmergencyMode\":%{public}hhd, \"configureVerticalUncertainty\":%{public}hhd}", buf, 0x24u);
      }
    }
    uint64_t v17 = *a1;
    *(void *)uint64_t buf = a2;
    uint64_t v18 = sub_1008567B8(v6, (int *)a2, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 3;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v17 + 328))(v17, v18, a3);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v19 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v20 = *(_DWORD *)a2;
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#Warning, Unexpected SimInstance,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      long long v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
}

uint64_t sub_10083C6B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  long long v6 = *((_OWORD *)a2 + 5);
  long long v5 = *((_OWORD *)a2 + 6);
  long long v7 = *((_OWORD *)a2 + 4);
  *(void *)(a1 + 112) = a2[14];
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v5;
  *(_OWORD *)(a1 + 64) = v7;
  long long v8 = *((_OWORD *)a2 + 1);
  long long v9 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 16) = v8;
  sub_10084E420(a1 + 120, (uint64_t)(a2 + 15));
  std::string::operator=((std::string *)(a1 + 944), (const std::string *)(a2 + 118));
  std::string::operator=((std::string *)(a1 + 968), (const std::string *)(a2 + 121));
  uint64_t v10 = a2[124];
  *(_DWORD *)(a1 + 1000) = *((_DWORD *)a2 + 250);
  *(void *)(a1 + 992) = v10;
  uint64_t v11 = a2[132];
  long long v12 = *((_OWORD *)a2 + 65);
  long long v13 = *((_OWORD *)a2 + 64);
  *(_OWORD *)(a1 + 1008) = *((_OWORD *)a2 + 63);
  *(_OWORD *)(a1 + 1024) = v13;
  *(_OWORD *)(a1 + 1040) = v12;
  *(void *)(a1 + 1056) = v11;
  *(unsigned char *)(a1 + 1064) = *((unsigned char *)a2 + 1064);
  std::string::operator=((std::string *)(a1 + 1072), (const std::string *)(a2 + 134));
  long long v14 = *(_OWORD *)((char *)a2 + 1108);
  *(_OWORD *)(a1 + 1096) = *(_OWORD *)(a2 + 137);
  *(_OWORD *)(a1 + 1108) = v14;
  if ((uint64_t *)a1 == a2)
  {
    *(unsigned char *)(a1 + 1152) = *((unsigned char *)a2 + 1152);
    std::string::operator=((std::string *)(a1 + 1160), (const std::string *)(a2 + 145));
    long long v16 = *(_OWORD *)((char *)a2 + 1196);
    *(_OWORD *)(a1 + 1184) = *((_OWORD *)a2 + 74);
    *(_OWORD *)(a1 + 1196) = v16;
  }
  else
  {
    sub_10084EAEC(a1 + 1128, (std::string *)a2[141], (long long *)a2[142], 0xAAAAAAAAAAAAAAABLL * ((a2[142] - a2[141]) >> 4));
    *(unsigned char *)(a1 + 1152) = *((unsigned char *)a2 + 1152);
    std::string::operator=((std::string *)(a1 + 1160), (const std::string *)(a2 + 145));
    long long v15 = *((_OWORD *)a2 + 74);
    *(_OWORD *)(a1 + 1196) = *(_OWORD *)((char *)a2 + 1196);
    *(_OWORD *)(a1 + 1184) = v15;
    sub_10084EAEC(a1 + 1216, (std::string *)a2[152], (long long *)a2[153], 0xAAAAAAAAAAAAAAABLL * ((a2[153] - a2[152]) >> 4));
  }
  std::string::operator=((std::string *)(a1 + 1240), (const std::string *)(a2 + 155));
  std::string::operator=((std::string *)(a1 + 1264), (const std::string *)(a2 + 158));
  std::string::operator=((std::string *)(a1 + 1288), (const std::string *)(a2 + 161));
  std::string::operator=((std::string *)(a1 + 1312), (const std::string *)(a2 + 164));
  return a1;
}

uint64_t sub_10083C870(unsigned char *a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    __int16 v7 = 2082;
    long long v8 = "";
    __int16 v9 = 1026;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"NILR lockout status\", \"locked\":%{public}hhd}", (uint8_t *)v6, 0x18u);
  }
  a1[2547] = a2;
  (*(void (**)(void, uint64_t))(**(void **)a1 + 336))(*(void *)a1, a2);
  return sub_100839F84((uint64_t)(a1 + 2624), 17);
}

void sub_10083C9A8(id *a1, uint64_t a2)
{
  *((unsigned char *)*a1 + 1288) = sub_10184E9E0(*(double *)(a2 + 4), *(double *)(a2 + 12));
  *((unsigned char *)*a1 + 1289) = sub_1003BFEDC(*(double *)(a2 + 4), *(double *)(a2 + 12)) != 0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *((unsigned __int8 *)*a1 + 1288);
    int v6 = *(unsigned __int8 *)(a2 + 816);
    v7[0] = 68290307;
    v7[1] = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    __int16 v10 = 2082;
    uint64_t v11 = "Injecting position assistance to GNSS platform";
    __int16 v12 = 1040;
    int v13 = 156;
    __int16 v14 = 2097;
    uint64_t v15 = a2;
    __int16 v16 = 1025;
    int v17 = v5;
    __int16 v18 = 1026;
    int v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"location\":%{private, location:CLClientLocation}.*P, \"isIndia\":%{private}hhd, \"isCPI\":%{public}hhd}", (uint8_t *)v7, 0x38u);
  }
  (*(void (**)(id, uint64_t))(*(void *)*a1 + 216))(*a1, a2);
  sub_1018E9A68((uint64_t)(a1 + 350), a2, *(unsigned char *)(a2 + 768), (uint64_t)[objc_msgSend(objc_msgSend(a1[99], "silo"), "queue")]);
}

void sub_10083CB64(void *a1, double a2, double a3, double a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  __int16 v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    v10[0] = 68289794;
    v10[1] = 0;
    __int16 v11 = 2082;
    __int16 v12 = "";
    __int16 v13 = 2082;
    __int16 v14 = "Injecting time assistance to GNSS platform";
    __int16 v15 = 2050;
    double v16 = a2;
    __int16 v17 = 2050;
    double v18 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"time\":\"%{public}f\", \"timeunc\":\"%{public}f\"}", (uint8_t *)v10, 0x30u);
  }
  (*(void (**)(double, double, double))(*(void *)*a1 + 144))(a2, a3, a4);
  uint64_t v9 = a1[151];
  if (v9) {
    sub_101873AB8(v9, a2, a3, a4);
  }
}

void sub_10083CCCC(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 0xFFFF;
  *(void *)(a4 + 12) = 0;
  *(void *)(a4 + 4) = 0;
  *(_OWORD *)(a4 + 20) = xmmword_101D1C320;
  *(void *)(a4 + 36) = 0xBFF0000000000000;
  *(void *)(a4 + 44) = 0xBFF0000000000000;
  *(void *)(a4 + 52) = 0xBFF0000000000000;
  *(void *)(a4 + 60) = 0xBFF0000000000000;
  *(void *)(a4 + 68) = 0xBFF0000000000000;
  *(void *)(a4 + 76) = 0xBFF0000000000000;
  *(_DWORD *)(a4 + 84) = 0;
  *(void *)(a4 + 96) = 0;
  *(void *)(a4 + 104) = 0;
  *(void *)(a4 + 88) = 0xBFF0000000000000;
  *(_DWORD *)(a4 + 112) = 0;
  *(void *)(a4 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a4 + 124) = 0x7FFFFFFF;
  *(void *)(a4 + 136) = 0;
  *(void *)(a4 + 144) = 0;
  *(unsigned char *)(a4 + 152) = 0;
  *(void *)(a4 + 128) = 0;
  sub_1000DBC34(a4 + 160);
  *(void *)(a4 + 76) = *(void *)(a1 + 8);
  *(_OWORD *)(a4 + 4) = *(_OWORD *)(a1 + 56);
  double v8 = *(double *)(a1 + 80);
  *(double *)(a4 + 28) = *(double *)(a1 + 72) - v8;
  *(_DWORD *)(a4 + 132) = 1;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a4 + 44) = _Q1;
  if (*(unsigned char *)(a1 + 144)) {
    *(_OWORD *)(a4 + 44) = *(_OWORD *)(a1 + 152);
  }
  *(_OWORD *)(a4 + 60) = _Q1;
  if (*(unsigned char *)(a1 + 168)) {
    *(_OWORD *)(a4 + 60) = *(_OWORD *)(a1 + 176);
  }
  double v14 = *(double *)(a1 + 96);
  uint64_t v15 = *(void *)(a1 + 104);
  *(double *)(a4 + 20) = v14;
  *(void *)(a4 + 36) = v15;
  *(void *)(a4 + 88) = 0x4020000000000000;
  if (v14 < 149.0) {
    int v16 = 1;
  }
  else {
    int v16 = 9;
  }
  *(_DWORD *)(a4 + 96) = v16;
  if (v14 >= 149.0) {
    int v17 = 72;
  }
  else {
    int v17 = 90;
  }
  *(_DWORD *)(a4 + 84) = v17;
  int v18 = *(_DWORD *)(a1 + 140);
  if ((v18 - 3) < 2)
  {
    int v19 = 75;
  }
  else if ((v18 - 1) > 1)
  {
    if (v14 >= 149.0) {
      int v19 = 50;
    }
    else {
      int v19 = 75;
    }
  }
  else
  {
    *(_DWORD *)(a4 + 84) = 68;
    int v19 = 25;
  }
  *(_DWORD *)(a4 + 128) = v19;
  *(_OWORD *)(a4 + 184) = *(_OWORD *)(a1 + 16);
  *(void *)(a4 + 504) = *(void *)(a1 + 32);
  *(float32x2_t *)(a4 + 200) = vcvt_f32_f64(*(float64x2_t *)(a1 + 112));
  float v20 = *(double *)(a1 + 128);
  *(float *)(a4 + 208) = v20;
  *(_DWORD *)(a4 + 472) = *(_DWORD *)(a1 + 88);
  float v21 = v8;
  *(float *)(a4 + 476) = v21;
  if (*(_DWORD *)(a1 + 292) == 3) {
    char v22 = 1;
  }
  else {
    char v22 = a3;
  }
  *(unsigned char *)(a4 + 672) = v22;
  if (*(unsigned char *)(a1 + 216))
  {
    *(_OWORD *)(a4 + 160) = *(_OWORD *)(a1 + 224);
    *(void *)(a4 + 176) = *(void *)(a1 + 240);
  }
  if (a2)
  {
    sub_100D6837C(a1 + 248, &v27);
    long long v23 = v27;
    long long v27 = 0uLL;
    int v24 = *(std::__shared_weak_count **)(a4 + 688);
    *(_OWORD *)(a4 + 680) = v23;
    if (v24)
    {
      sub_1000DB0A0(v24);
      if (*((void *)&v27 + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v27 + 1));
      }
    }
  }
  uint64_t v25 = *(int *)(a1 + 288);
  if (v25 > 4) {
    int v26 = 0;
  }
  else {
    int v26 = dword_101D505D4[v25];
  }
  *(_DWORD *)(a4 + 696) = v26;
}

void sub_10083CF00(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 688);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10083CF18(uint64_t a1, double a2)
{
  *(double *)(a1 + 2784) = a2;
  long long v20 = 0u;
  long long v19 = 0u;
  memset(v17, 0, sizeof(v17));
  char v18 = 0;
  int v21 = 1;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  char v25 = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  long long v26 = _Q1;
  char v27 = 0;
  long long v28 = _Q1;
  char v29 = 0;
  long long v30 = _Q1;
  char v31 = 0;
  uint64_t v34 = 0;
  memset(v33, 0, sizeof(v33));
  long long v32 = 0u;
  int v35 = 1065353216;
  uint64_t v36 = 0x100000005;
  uint64_t v37 = 0;
  uint64_t v8 = *(void *)(a1 + 1048);
  if (v8) {
    sub_100F39DE0(v8, (uint64_t)v17);
  }
  unint64_t v9 = *(void *)(a1 + 1072);
  if (v9) {
    sub_100A2E0AC(v9, (uint64_t)v17);
  }
  uint64_t v10 = *(void *)(a1 + 1056);
  if (v10) {
    sub_101411C94(v10, (uint64_t)v17);
  }
  uint64_t v11 = *(void *)(a1 + 1088);
  if (v11) {
    sub_10077A2AC(v11);
  }
  uint64_t v12 = *(void *)(a1 + 1160);
  if (v12) {
    sub_10192B1D4(v12, (uint64_t)v17);
  }
  uint64_t v13 = *(void *)(a1 + 1240);
  if (v13) {
    sub_101271A90(v13, (uint64_t)v17);
  }
  uint64_t v14 = *(void *)(a1 + 1184);
  if (v14) {
    sub_10188D31C(v14, *(void *)a1 + 8);
  }
  uint64_t v15 = *(void *)(a1 + 1208);
  if (v15) {
    sub_101872774(v15);
  }
  return sub_10071874C((uint64_t)v33 + 8);
}

void sub_10083D040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
}

void sub_10083D058(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 768))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    int v55 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "Gnss not running", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    *(_WORD *)__int16 v124 = 0;
    uint64_t v56 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::handleLocationResponse(std::optional<GNSS::PerEpochData> &&)", "%s\n", v56);
LABEL_68:
    if (v56 != (char *)buf) {
      free(v56);
    }
    return;
  }
  double v4 = sub_10016C458();
  double v123 = v4;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v6 = *(unsigned __int8 *)(a2 + 304);
    *(_DWORD *)uint64_t buf = 67240448;
    *(_DWORD *)double v146 = v6;
    *(_WORD *)&v146[4] = 2050;
    *(double *)&v146[6] = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "validFix,%{public}d,machCont,%{public}.3lf", buf, 0x12u);
  }
  uint64_t v7 = sub_10013D1A0(115, 2);
  if (v7)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    int v105 = *(unsigned __int8 *)(a2 + 304);
    *(_DWORD *)__int16 v124 = 67240448;
    *(_DWORD *)&v124[4] = v105;
    *(_WORD *)&v124[8] = 2050;
    *(double *)&v124[10] = v123;
    __int16 v106 = (char *)_os_log_send_and_compose_impl();
    uint64_t v7 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::handleLocationResponse(std::optional<GNSS::PerEpochData> &&)", "%s\n", v106);
    if (v106 != (char *)buf) {
      free(v106);
    }
  }
  uint64_t v8 = *(void *)(a1 + 1048);
  if (v8)
  {
    int v9 = *(_DWORD *)(a1 + 824);
    *(void *)(v8 + 11664) = *(void *)(a1 + 816);
    *(_DWORD *)(v8 + 11556) = v9;
  }
  if (!*(unsigned char *)(a2 + 304))
  {
    sub_10083E1C4(v7, 0);
    if (vabdd_f64(v123, *(double *)(a1 + 2784)) >= 0.75)
    {
      sub_10083CF18(a1, v123);
      uint64_t v57 = *(void *)(a1 + 3016);
      if (!v57) {
        goto LABEL_76;
      }
      if (!sub_100CEA9C8(v57) || (uint64_t v59 = sub_10083E3A0(a1, &v123), (v59 & 1) != 0))
      {
        uint64_t v57 = *(void *)(a1 + 3016);
        if (v57)
        {
          uint64_t v57 = sub_100CEA9C8(v57);
          if (v57) {
            return;
          }
        }
LABEL_76:
        sub_10083E1C4(v57, 1);
        return;
      }
      sub_10083E1C4(v59, 1);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      __int16 v104 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 134217984;
        *(double *)double v146 = v123;
        _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_INFO, "#Raven,no yield now,%.3lf", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_170;
      }
    }
    else
    {
      uint64_t v57 = *(void *)(a1 + 3016);
      if (!v57) {
        goto LABEL_76;
      }
      if (!sub_100CEA9C8(v57) || (uint64_t v58 = sub_10083E3A0(a1, &v123), (v58 & 1) != 0))
      {
        uint64_t v57 = *(void *)(a1 + 3016);
        if (v57)
        {
          uint64_t v57 = sub_100CEA9C8(v57);
          if (v57) {
            return;
          }
        }
        goto LABEL_76;
      }
      sub_10083E1C4(v58, 1);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      double v103 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 134217984;
        *(double *)double v146 = v123;
        _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_INFO, "#Raven,no yield now,%.3lf", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_170;
      }
    }
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
LABEL_170:
    *(_DWORD *)__int16 v124 = 134217984;
    *(double *)&v124[4] = v123;
    uint64_t v56 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::handleLocationResponse(std::optional<GNSS::PerEpochData> &&)", "%s\n", v56);
    goto LABEL_68;
  }
  uint64_t v10 = (_DWORD *)(a2 + 288);
  if (*(_DWORD *)(a2 + 288) == 5 && vabdd_f64(v123, *(double *)(a1 + 816)) < 1.9) {
    *uint64_t v10 = *(_DWORD *)(a1 + 824);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v11 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    double v12 = *(float *)(a2 + 44);
    uint64_t v13 = *(void *)a2;
    uint64_t v14 = *(void *)(a2 + 8);
    uint64_t v15 = *(void *)(a2 + 16);
    uint64_t v16 = *(void *)(a2 + 24);
    uint64_t v17 = *(void *)(a2 + 32);
    int v18 = *(_DWORD *)(a2 + 40);
    int v19 = *(unsigned __int8 *)(a2 + 48);
    uint64_t v21 = *(void *)(a2 + 56);
    uint64_t v20 = *(void *)(a2 + 64);
    uint64_t v23 = *(void *)(a2 + 72);
    uint64_t v22 = *(void *)(a2 + 80);
    int v24 = *(_DWORD *)(a2 + 88);
    uint64_t v26 = *(void *)(a2 + 96);
    uint64_t v25 = *(void *)(a2 + 104);
    uint64_t v28 = *(void *)(a2 + 112);
    uint64_t v27 = *(void *)(a2 + 120);
    uint64_t v29 = *(void *)(a2 + 128);
    int v30 = *(_DWORD *)(a2 + 140);
    int v31 = *(unsigned __int8 *)(a2 + 144);
    uint64_t v33 = *(void *)(a2 + 152);
    uint64_t v32 = *(void *)(a2 + 160);
    int v34 = *(unsigned __int8 *)(a2 + 168);
    uint64_t v108 = *(void *)(a2 + 176);
    uint64_t v109 = *(void *)(a2 + 184);
    int v110 = *(_DWORD *)(a2 + 292);
    int v111 = *(_DWORD *)(a2 + 288);
    *(_DWORD *)uint64_t buf = 68296195;
    *(_DWORD *)double v146 = 0;
    *(_WORD *)&v146[4] = 2082;
    *(void *)&v146[6] = "";
    __int16 v147 = 2082;
    unint64_t v148 = "PerEpochData";
    __int16 v149 = 2050;
    uint64_t v150 = v13;
    __int16 v151 = 2050;
    double v152 = v12;
    __int16 v153 = 2050;
    uint64_t v154 = v14;
    __int16 v155 = 2050;
    uint64_t v156 = v15;
    __int16 v157 = 2050;
    uint64_t v158 = v16;
    __int16 v159 = 2050;
    uint64_t v160 = v17;
    __int16 v161 = 1026;
    int v162 = v18;
    __int16 v163 = 1026;
    int v164 = v19;
    __int16 v165 = 2049;
    uint64_t v166 = v21;
    __int16 v167 = 2049;
    uint64_t v168 = v20;
    __int16 v169 = 2049;
    uint64_t v170 = v23;
    uint64_t v10 = (_DWORD *)(a2 + 288);
    __int16 v171 = 2050;
    uint64_t v172 = v22;
    __int16 v173 = 1026;
    int v174 = v24;
    __int16 v175 = 2050;
    uint64_t v176 = v26;
    __int16 v177 = 2050;
    uint64_t v178 = v25;
    __int16 v179 = 2050;
    uint64_t v180 = v28;
    __int16 v181 = 2050;
    uint64_t v182 = v27;
    __int16 v183 = 2050;
    uint64_t v184 = v29;
    __int16 v185 = 1026;
    int v186 = v30;
    __int16 v187 = 1026;
    int v188 = v31;
    __int16 v189 = 2050;
    uint64_t v190 = v33;
    __int16 v191 = 2050;
    uint64_t v192 = v32;
    __int16 v193 = 1026;
    int v194 = v34;
    __int16 v195 = 2050;
    uint64_t v196 = v108;
    __int16 v197 = 2050;
    uint64_t v198 = v109;
    __int16 v199 = 1026;
    int v200 = v110;
    __int16 v201 = 1026;
    int v202 = v111;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"gpsNs\":%{public}lld, \"gpsTimeUncMs\":\"%{public}f\", \"cfTime\":\"%{public}f\", \"cfTimeGps\":\"%{public}f\", \"machTime\":\"%{public}f\", \"machContinuousTime\":\"%{public}f\", \"leapSeconds\":%{public}d, \"posValid\":%{public}hhd, \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"altitude\":\"%{private}f\", \"undulation\":\"%{public}f\", \"undulationModel\":%{public}d, \"hunc\":\"%{public}f\", \"vunc\":\"%{public}f\", \"semiMaj\":\"%{public}f\", \"semiMin\":\"%{public}f\", \"semiMajAz\":\"%{public}f\", \"reliability\":%{public}d, \"speedValid\":%{public}hhd, \"speed\":\"%{public}f\", \"speedUnc\":\"%{public}f\", \"courseValid\":%{public}hhd, \"course\":\"%{public}f\", \"courseUnc\":\"%{public}f\", \"imag\":%{public}d, \"gnssContent\":%{public}d}", buf, 0x10Au);
  }
  if (*(void *)(a1 + 1208))
  {
    int v35 = sub_1018E874C(a1 + 2800, (double *)(a2 + 56), (double *)(a2 + 64));
    sub_101872C54(*(void *)(a1 + 1208), a2, *(void *)a1 + 8, v35);
    if (*(_DWORD *)(a2 + 292) == 3 && !*(unsigned char *)(a1 + 1271))
    {
      sub_10083CF18(a1, v123);
      sub_1000DB3D4((uint64_t)v124);
      sub_10083CCCC(a2, 0, 0, (uint64_t)v112);
      long long v129 = v112[6];
      long long v130 = v112[7];
      v131[0] = v113[0];
      *(_OWORD *)((char *)v131 + 12) = *(_OWORD *)((char *)v113 + 12);
      long long v125 = v112[2];
      long long v126 = v112[3];
      long long v127 = v112[4];
      long long v128 = v112[5];
      *(_OWORD *)__int16 v124 = v112[0];
      *(_OWORD *)&v124[16] = v112[1];
      memcpy(v132, v114, 0x201uLL);
      uint64_t v77 = v115;
      uint64_t v78 = v116;
      if (v116) {
        atomic_fetch_add_explicit(&v116->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v132[65] = v77;
      uint64_t v79 = v133;
      long long v133 = v78;
      if (v79) {
        sub_1000DB0A0(v79);
      }
      long long v138 = v121;
      v139[0] = *(_OWORD *)v122;
      *(void *)((char *)v139 + 13) = *(void *)&v122[13];
      long long v134 = v117;
      long long v135 = v118;
      long long v136 = v119;
      long long v137 = v120;
      *(double *)&v132[43] = v123;
      if (*(void *)(a1 + 520))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        uint64_t v80 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_INFO, "Notifying al to WiFi harvester", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
          }
          double v107 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::handleLocationResponse(std::optional<GNSS::PerEpochData> &&)", "%s\n", v107);
          if (v107 != (char *)buf) {
            free(v107);
          }
        }
        sub_10083E474(a1 + 496);
      }
      if (v116) {
        sub_1000DB0A0(v116);
      }

      if (v143) {
        sub_1000DB0A0(v143);
      }
      if (v142 < 0) {
        operator delete(__p);
      }
      if (v140) {
        sub_1000DB0A0(v140);
      }
      uint64_t v81 = v133;
      if (v133) {
        goto LABEL_162;
      }
      return;
    }
  }
  uint64_t v36 = *(void **)(a1 + 760);
  if (v36) {
    sub_10184F9D0(v36, a2);
  }
  uint64_t v37 = *(unsigned char **)(a1 + 1256);
  if (v37) {
    sub_100A31548(v37, a2);
  }
  unsigned int v38 = *(unsigned __int8 *)(a1 + 80);
  if (*(unsigned char *)(a1 + 80)) {
    unsigned int v38 = *(_DWORD *)(a1 + 804) + 1;
  }
  *(_DWORD *)(a1 + 804) = v38;
  if (*(unsigned char *)(a2 + 144) && *(double *)(a2 + 152) > 0.0) {
    *(double *)(a1 + 808) = v123;
  }
  if (v38 <= 9 && *(double *)(a2 + 184) > 90.0)
  {
    *(unsigned char *)(a2 + 168) = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(a2 + 176) = _Q0;
  }
  if (*(double *)(a1 + 808) + 30.0 < v123)
  {
    double v43 = *(double *)(a2 + 184);
    if (v43 <= 0.0 || v43 >= 45.0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      int v44 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)double v146 = 0;
        *(_WORD *)&v146[4] = 2082;
        *(void *)&v146[6] = "";
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Course invalidated due to extended static period\"}", buf, 0x12u);
      }
      *(unsigned char *)(a2 + 168) = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)(a2 + 176) = _Q0;
    }
  }
  uint64_t v46 = *(void *)(a1 + 1216);
  if (v46 && *(unsigned char *)(a2 + 144))
  {
    float v47 = *(double *)(a2 + 152);
    *(float *)uint64_t buf = v47;
    float v48 = *(double *)(a2 + 160);
    *(float *)__int16 v124 = v48;
    sub_100EDA360(v46, (float *)buf, (float *)v124, (double *)(a2 + 8), 1);
    *(double *)(a2 + 152) = v49;
  }
  uint64_t v50 = *(void *)(a1 + 1072);
  if (v50)
  {
    if (*(unsigned char *)(a1 + 80))
    {
      if (*(unsigned char *)(a2 + 48))
      {
        if (sub_100A2E530(v50, a2))
        {
          *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 88);
          *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 104);
          *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 120);
          *(void *)(a2 + 152) = 0;
          if (*(unsigned char *)(a1 + 200))
          {
            *(unsigned char *)(a2 + 168) = 1;
            *(_OWORD *)(a2 + 176) = *(_OWORD *)(a1 + 208);
          }
        }
      }
    }
  }
  uint64_t v51 = *(void *)(a1 + 1072);
  if (v51)
  {
    if (*(unsigned char *)(a2 + 144))
    {
      if (sub_100A310C0(v51, *(double *)(a2 + 152), *(double *)(a2 + 160)))
      {
        *(void *)(a2 + 152) = 0;
        if (*(unsigned char *)(a1 + 200))
        {
          *(unsigned char *)(a2 + 168) = 1;
          *(_OWORD *)(a2 + 176) = *(_OWORD *)(a1 + 208);
        }
      }
    }
  }
  uint64_t v52 = *(void *)(a1 + 1112);
  if (v52)
  {
    sub_1001B1A40(v52, *(_DWORD *)(a2 + 88), *(double *)(a2 + 80), *(double *)(a2 + 8));
    sub_1001862F4(*(void *)(a1 + 1112), (void *)(a2 + 80), (int *)(a2 + 88), *(double *)(a2 + 8));
  }
  uint64_t v53 = *(void *)(a1 + 2552);
  if (v53)
  {
    uint64_t v54 = *(void *)(a1 + 1072);
    if (v54) {
      sub_100A31134(v54, (uint64_t)buf);
    }
    else {
      CLMotionActivity::getInit((uint64_t *)buf, 0);
    }
    sub_10099E240(v53, a2, (uint64_t)buf);
  }
  sub_10083CCCC(a2, 1, *(unsigned char *)(a1 + 1269), (uint64_t)buf);
  uint64_t v60 = *(void *)(a1 + 1184);
  if (v60)
  {
    sub_10188E488(v60, *(void *)a1 + 8, (void *)(a2 + 56), (void *)(a2 + 64), (void *)(a2 + 72), (double *)(a2 + 96), (double *)(a2 + 104));
    if ((sub_10015F760() & 1) == 0) {
      sub_10188F660(*(void *)(a1 + 1184), a2 + 248);
    }
  }
  uint64_t v61 = *(void *)(a1 + 1104);
  if (v61) {
    sub_1018DB888(v61, (long long *)buf, *(unsigned __int8 *)(a1 + 2546));
  }
  unint64_t v62 = *(void *)(a1 + 1072);
  if (v62) {
    sub_100A2E0AC(v62, a2);
  }
  uint64_t v63 = *(void *)(a1 + 1088);
  if (v63) {
    sub_10077A2AC(v63);
  }
  uint64_t v64 = *(void *)(a1 + 1048);
  if (v64) {
    sub_100F39DE0(v64, a2);
  }
  uint64_t v65 = *(void *)(a1 + 1160);
  if (v65) {
    sub_10192B1D4(v65, a2);
  }
  uint64_t v66 = *(void *)(a1 + 1240);
  if (v66) {
    sub_101271A90(v66, a2);
  }
  *(double *)(a1 + 2784) = v123;
  sub_10083E4C4((unsigned char *)a1, a2);
  sub_10083EC4C(v67, (uint64_t)buf, 0);
  uint64_t v68 = *(void *)(a1 + 1248);
  if (v68) {
    BOOL v69 = !sub_10100F11C(v68, v123);
  }
  else {
    BOOL v69 = 0;
  }
  if (*(void *)(a1 + 360))
  {
    if (*(void *)(a1 + 3016)) {
      BOOL v70 = 0;
    }
    else {
      BOOL v70 = *(void *)(a1 + 768) != 0;
    }
    uint64_t v71 = *(unsigned __int8 **)(a1 + 3064);
    if (v71) {
      BOOL v72 = *v71 != 0;
    }
    else {
      BOOL v72 = 1;
    }
    uint64_t v73 = *(void *)(a1 + 3056);
    if (!v73) {
      goto LABEL_112;
    }
    if (*(unsigned char *)(v73 + 32))
    {
      double v74 = *(double *)(v73 + 24);
      if (v74 > v123)
      {
LABEL_112:
        BOOL v75 = 1;
LABEL_142:
        int v83 = !v70 || !v72 || !v75;
        if ((*(_DWORD *)(a1 + 600) & 0xFFFFFFFE) == 0xA) {
          int v83 = 1;
        }
        if ((v83 | v69))
        {
          if (v69 && v72) {
            sub_100838FA8((void *)a1);
          }
        }
        else
        {
          sub_10083EF8C((double *)a1, v123);
        }
        uint64_t v84 = sub_10083F614(a1, &v203);
        if ((v84 & 1) == 0)
        {
          sub_10083EC4C(v84, (uint64_t)buf, 1);
          uint64_t v85 = *(void *)(a1 + 1200);
          if (v85 && !*(unsigned char *)(a1 + 784)) {
            sub_1018CE944(v85, (double *)buf);
          }
          uint64_t v86 = *(void *)(a1 + 360);
          if (!v86) {
            sub_10015E48C();
          }
          (*(void (**)(uint64_t, uint8_t *))(*(void *)v86 + 48))(v86, buf);
        }
        goto LABEL_154;
      }
      double v76 = v123 + *(double *)(v73 + 8) - v74;
    }
    else
    {
      double v76 = *(double *)(v73 + 8);
    }
    BOOL v75 = v76 <= (double)*(int *)(v73 + 16) && *(unsigned char *)(v73 + 20) != 0;
    goto LABEL_142;
  }
LABEL_154:
  uint64_t v87 = *(void *)(a1 + 456);
  if (v87) {
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v87 + 48))(v87, buf);
  }
  uint64_t v88 = *(void *)(a1 + 1232);
  if (v88)
  {
    uint64_t v89 = *(void *)(a1 + 1248);
    if (v89)
    {
      BOOL v90 = sub_10100F374(v89, v123);
      sub_100E14C64(v88, !v90);
    }
  }
  long long v91 = *(_OWORD *)a2;
  long long v92 = *(_OWORD *)(a2 + 16);
  long long v93 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 80) = v93;
  *(_OWORD *)(a1 + 32) = v91;
  *(_OWORD *)(a1 + 48) = v92;
  long long v94 = *(_OWORD *)(a2 + 64);
  long long v95 = *(_OWORD *)(a2 + 80);
  long long v96 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 144) = v96;
  *(_OWORD *)(a1 + 96) = v94;
  *(_OWORD *)(a1 + 112) = v95;
  long long v97 = *(_OWORD *)(a2 + 128);
  long long v98 = *(_OWORD *)(a2 + 144);
  long long v99 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 208) = v99;
  *(_OWORD *)(a1 + 160) = v97;
  *(_OWORD *)(a1 + 176) = v98;
  long long v100 = *(_OWORD *)(a2 + 192);
  long long v101 = *(_OWORD *)(a2 + 208);
  long long v102 = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 272) = *(void *)(a2 + 240);
  *(_OWORD *)(a1 + 240) = v101;
  *(_OWORD *)(a1 + 256) = v102;
  *(_OWORD *)(a1 + 224) = v100;
  if (a1 + 32 != a2)
  {
    *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 280);
    sub_10084EEAC((void *)(a1 + 280), *(uint64_t **)(a2 + 264), 0);
  }
  *(_OWORD *)(a1 + 320) = *(_OWORD *)v10;
  uint64_t v81 = v204;
  if (v204) {
LABEL_162:
  }
    sub_1000DB0A0(v81);
}

void sub_10083E160(_Unwind_Exception *a1)
{
  if (STACK[0x2E8]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2E8]);
  }
  sub_100458658((uint64_t)&STACK[0x360]);
  _Unwind_Resume(a1);
}

void sub_10083E1C4(uint64_t a1, int a2)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022CB7A8);
  }
  uint64_t v3 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    double v4 = "Vendor";
    if (a2) {
      double v4 = "";
    }
    *(_DWORD *)uint64_t buf = 136446210;
    uint64_t v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "@ClxGps%{public}s, Fix, 0, ll, N/A", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022CB7A8);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::logLocationEmpty(BOOL)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

uint64_t sub_10083E3A0(uint64_t a1, double *a2)
{
  __asm { FMOV            V0.2D, #-1.0 }
  sub_1000DBC34(&v11);
  uint64_t v9 = sub_10083F614(a1, a2);
  if (v12) {
    sub_1000DB0A0(v12);
  }
  return v9;
}

void sub_10083E45C(_Unwind_Exception *a1)
{
  if (STACK[0x2B0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2B0]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10083E474(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    sub_10015E48C();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void sub_10083E4C4(unsigned char *a1, uint64_t a2)
{
  uint64_t v50 = 0;
  sub_1004BD8CC((int *)&v50 + 1, &v50, *(double *)(a2 + 16));
  sub_100134750(&v49, "TTF");
  if (!a1[2769])
  {
    if (fabs(*(double *)(a2 + 96)) < 30.0) {
      *(_OWORD *)(*(void *)a1 + 1184) = *(_OWORD *)(a2 + 56);
    }
    a1[2769] = 1;
  }
  if (a1[2768])
  {
    long double v4 = -1.0;
    if (a1[80])
    {
      double v5 = *(double *)(a2 + 8) - *((double *)a1 + 5);
      int v6 = (double *)*((void *)a1 + 149);
      if (v6) {
        long double v4 = sub_1000F1648(v6, *(double *)(a2 + 56), *(double *)(a2 + 64), *((double *)a1 + 11), *((double *)a1 + 12), *(double *)(a2 + 72));
      }
    }
    else
    {
      double v5 = 0.0;
    }
  }
  else
  {
    a1[2768] = 1;
    double v7 = sub_10016C458();
    double v8 = *((double *)a1 + 347);
    std::string::assign(&v49, "TTFF");
    double v5 = v7 - v8;
    *(_DWORD *)(*(void *)a1 + 208) = (int)v5;
    long double v4 = -1.0;
  }
  if (qword_102419650 != -1) {
    dispatch_once(&qword_102419650, &stru_1022CB7C8);
  }
  uint64_t v9 = qword_102419658;
  if (os_log_type_enabled((os_log_t)qword_102419658, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *(void *)(a2 + 56);
    uint64_t v11 = *(void *)(a2 + 64);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v12 = &v49;
    }
    else {
      double v12 = (std::string *)v49.__r_.__value_.__r.__words[0];
    }
    double v13 = *(double *)(a2 + 80);
    double v14 = *(double *)(a2 + 72) - v13;
    uint64_t v15 = *(void *)(a2 + 96);
    uint64_t v16 = *(void *)(a2 + 104);
    uint64_t v17 = *(void *)(a2 + 152);
    uint64_t v18 = *(void *)(a2 + 160);
    uint64_t v19 = *(void *)(a2 + 176);
    uint64_t v20 = *(void *)(a2 + 184);
    uint64_t v21 = *(void *)(a2 + 112);
    uint64_t v22 = *(void *)(a2 + 120);
    uint64_t v23 = *(void *)(a2 + 128);
    double v24 = *(float *)(a2 + 44);
    uint64_t v26 = *(void *)(a2 + 200);
    uint64_t v25 = *(void *)(a2 + 208);
    int v27 = *(_DWORD *)(a2 + 292);
    *(_DWORD *)uint64_t buf = 136324354;
    uint64_t v115 = "CL-GPSsa";
    *(_WORD *)__int16 v116 = 1024;
    *(_DWORD *)&v116[2] = 1;
    __int16 v117 = 2048;
    uint64_t v118 = v10;
    __int16 v119 = 2048;
    uint64_t v120 = v11;
    __int16 v121 = 2048;
    uint64_t v122 = v15;
    __int16 v123 = 2080;
    __int16 v124 = v12;
    __int16 v125 = 2048;
    double v126 = v5;
    __int16 v127 = 2048;
    uint64_t v128 = v17;
    __int16 v129 = 2048;
    uint64_t v130 = v19;
    __int16 v131 = 2048;
    double v132 = v14;
    __int16 v133 = 2048;
    uint64_t v134 = v16;
    __int16 v135 = 2048;
    long double v136 = v4;
    __int16 v137 = 1024;
    int v138 = HIDWORD(v50);
    __int16 v139 = 1024;
    int v140 = v50;
    __int16 v141 = 2048;
    double v142 = v13;
    __int16 v143 = 2048;
    uint64_t v144 = v18;
    __int16 v145 = 2048;
    uint64_t v146 = v20;
    *(_WORD *)__int16 v147 = 2048;
    *(void *)&v147[2] = v21;
    *(_WORD *)&v147[10] = 2048;
    *(void *)&v147[12] = v22;
    __int16 v148 = 2048;
    *(void *)__int16 v149 = v23;
    *(_WORD *)&v149[8] = 2048;
    unint64_t v150 = 0xBFF0000000000000;
    __int16 v151 = 2048;
    unint64_t v152 = 0xBFF0000000000000;
    __int16 v153 = 2048;
    unint64_t v154 = 0xBFF0000000000000;
    __int16 v155 = 1024;
    int v156 = -1;
    __int16 v157 = 1024;
    int v158 = -1;
    __int16 v159 = 1024;
    int v160 = -1;
    __int16 v161 = 1024;
    int v162 = -1;
    __int16 v163 = 1024;
    int v164 = -1;
    __int16 v165 = 2048;
    double v166 = v24;
    __int16 v167 = 1024;
    int v168 = -1;
    __int16 v169 = 1024;
    int v170 = -1;
    __int16 v171 = 2048;
    unint64_t v172 = 0xBFF0000000000000;
    __int16 v173 = 1024;
    int v174 = -1;
    __int16 v175 = 1024;
    int v176 = 75;
    __int16 v177 = 2048;
    uint64_t v178 = v26;
    __int16 v179 = 2048;
    uint64_t v180 = v25;
    __int16 v181 = 1024;
    int v182 = v27;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,%s,%.2lf,Speed,%.3lf,Course,%.4lf,Altitude,%.3lf,VerticalAccuracy,%.3lf,Distance,%.3lf,Week,%u,TowMs,%u,Undulation,%.3f,SpeedAccuracy,%.3lf,CourseAccuracy,%.4lf,A,%.3f,B,%.3f,AZ,%.4f,HDOP,%.1f,VDOP,%.1f,ODOM,%.3f,LP,%d,SA,%d,R,%d,VTOW,%d,CTOW,%d,TUNC,%.3f,NS,%d,MS,%d,AgeOfPowerMode,%.1lf,SQI,%d,integrity,%d,VerticalSpeed,%.3lf,VerticalSpeedAccuracy,%.3lf,imag,%d", buf, 0x140u);
  }
  uint64_t v28 = sub_10013D1A0(117, 2);
  if (v28)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419650 != -1) {
      dispatch_once(&qword_102419650, &stru_1022CB7C8);
    }
    uint64_t v30 = *(void *)(a2 + 56);
    uint64_t v31 = *(void *)(a2 + 64);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v32 = &v49;
    }
    else {
      uint64_t v32 = (std::string *)v49.__r_.__value_.__r.__words[0];
    }
    double v33 = *(double *)(a2 + 80);
    double v34 = *(double *)(a2 + 72) - v33;
    uint64_t v35 = *(void *)(a2 + 96);
    uint64_t v36 = *(void *)(a2 + 104);
    uint64_t v37 = *(void *)(a2 + 152);
    uint64_t v38 = *(void *)(a2 + 160);
    uint64_t v39 = *(void *)(a2 + 176);
    uint64_t v40 = *(void *)(a2 + 184);
    uint64_t v41 = *(void *)(a2 + 112);
    uint64_t v42 = *(void *)(a2 + 120);
    uint64_t v43 = *(void *)(a2 + 128);
    double v44 = *(float *)(a2 + 44);
    uint64_t v46 = *(void *)(a2 + 200);
    uint64_t v45 = *(void *)(a2 + 208);
    int v47 = *(_DWORD *)(a2 + 292);
    *(_DWORD *)uint64_t v51 = 136324354;
    *(void *)uint64_t v52 = "CL-GPSsa";
    *(_WORD *)&v52[8] = 1024;
    *(_DWORD *)&v52[10] = 1;
    __int16 v53 = 2048;
    *(void *)uint64_t v54 = v30;
    *(_WORD *)&v54[8] = 2048;
    uint64_t v55 = v31;
    *(_WORD *)uint64_t v56 = 2048;
    *(void *)&v56[2] = v35;
    __int16 v57 = 2080;
    *(void *)uint64_t v58 = v32;
    *(_WORD *)&v58[8] = 2048;
    double v59 = v5;
    *(_WORD *)uint64_t v60 = 2048;
    *(void *)&v60[2] = v37;
    __int16 v61 = 2048;
    *(void *)unint64_t v62 = v39;
    *(_WORD *)&v62[8] = 2048;
    *(double *)uint64_t v63 = v34;
    *(_WORD *)&v63[8] = 2048;
    *(void *)uint64_t v64 = v36;
    *(_WORD *)&v64[8] = 2048;
    long double v65 = v4;
    LOWORD(v66) = 1024;
    *(_DWORD *)((char *)&v66 + 2) = HIDWORD(v50);
    HIWORD(v66) = 1024;
    int v67 = v50;
    __int16 v68 = 2048;
    double v69 = v33;
    __int16 v70 = 2048;
    uint64_t v71 = v38;
    __int16 v72 = 2048;
    uint64_t v73 = v40;
    __int16 v74 = 2048;
    uint64_t v75 = v41;
    __int16 v76 = 2048;
    uint64_t v77 = v42;
    __int16 v78 = 2048;
    uint64_t v79 = v43;
    __int16 v80 = 2048;
    unint64_t v81 = 0xBFF0000000000000;
    __int16 v82 = 2048;
    unint64_t v83 = 0xBFF0000000000000;
    __int16 v84 = 2048;
    unint64_t v85 = 0xBFF0000000000000;
    __int16 v86 = 1024;
    int v87 = -1;
    __int16 v88 = 1024;
    int v89 = -1;
    __int16 v90 = 1024;
    int v91 = -1;
    __int16 v92 = 1024;
    int v93 = -1;
    __int16 v94 = 1024;
    int v95 = -1;
    __int16 v96 = 2048;
    double v97 = v44;
    __int16 v98 = 1024;
    int v99 = -1;
    __int16 v100 = 1024;
    int v101 = -1;
    __int16 v102 = 2048;
    unint64_t v103 = 0xBFF0000000000000;
    __int16 v104 = 1024;
    int v105 = -1;
    __int16 v106 = 1024;
    int v107 = 75;
    __int16 v108 = 2048;
    uint64_t v109 = v46;
    __int16 v110 = 2048;
    uint64_t v111 = v45;
    __int16 v112 = 1024;
    int v113 = v47;
    float v48 = (char *)_os_log_send_and_compose_impl();
    uint64_t v28 = sub_1004BA5E4("LOCATION", 1, 0, 2, "void CLGnssController::logGPS(const GNSS::PerEpochData &)", "%s\n", v48);
    if (v48 != (char *)buf) {
      free(v48);
    }
  }
  *(_DWORD *)uint64_t buf = 0;
  CLMotionActivity::getInit((uint64_t *)((char *)&v115 + 4), (CLMotionActivity *)v28);
  BYTE6(v144) = 0;
  *(_DWORD *)((char *)&v144 + 2) = 0;
  *(void *)&v149[2] = 0;
  LODWORD(v146) = 0;
  memset(v147, 0, 17);
  sub_100841B04(a1, buf);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v29 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t v51 = 68293122;
    *(_WORD *)&v52[4] = 2082;
    *(_DWORD *)uint64_t v52 = 0;
    *(void *)&v52[6] = "";
    __int16 v53 = 1026;
    *(_DWORD *)uint64_t v54 = *(_DWORD *)buf;
    *(_WORD *)&v54[4] = 1026;
    *(_DWORD *)&v54[6] = HIDWORD(v115);
    LOWORD(v55) = 1026;
    *(_DWORD *)((char *)&v55 + 2) = *(_DWORD *)v116;
    HIWORD(v55) = 1026;
    *(_DWORD *)uint64_t v56 = v118;
    *(_WORD *)&v56[4] = 1026;
    *(_DWORD *)&v56[6] = HIDWORD(v118);
    __int16 v57 = 1026;
    *(_DWORD *)uint64_t v58 = BYTE3(v144);
    *(_WORD *)&v58[4] = 1026;
    *(_DWORD *)&v58[6] = BYTE4(v144);
    LOWORD(v59) = 1026;
    *(_DWORD *)((char *)&v59 + 2) = BYTE5(v144);
    HIWORD(v59) = 1026;
    *(_DWORD *)uint64_t v60 = v146;
    *(_WORD *)&v60[4] = 1026;
    *(_DWORD *)&v60[6] = BYTE1(v146);
    __int16 v61 = 1026;
    *(_DWORD *)unint64_t v62 = BYTE2(v146);
    *(_WORD *)&v62[4] = 1026;
    *(_DWORD *)&v62[6] = BYTE3(v146);
    *(_WORD *)uint64_t v63 = 2050;
    *(void *)&v63[2] = *(void *)v147;
    *(_WORD *)uint64_t v64 = 2050;
    *(void *)&v64[2] = *(void *)&v147[8];
    LOWORD(v65) = 1026;
    *(_DWORD *)((char *)&v65 + 2) = v147[16];
    HIWORD(v65) = 2050;
    uint64_t v66 = *(void *)&v149[2];
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"PerEpoch\", \"signalEnvironment\":%{public}d, \"motionState\":%{public}d, \"motionConfidence\":%{public}d, \"mountedState\":%{public}d, \"mountedConfidence\":%{public}d, \"isRecentlyStepping\":%{public}d, \"isFullDutyCycleNeeded\":%{public}d, \"allowGnssIns\":%{public}d, \"wasAccelSent\":%{public}d, \"wasGyroSent\":%{public}d, \"wasPressureSent\":%{public}d, \"wasDemSent\":%{public}d, \"demAlt\":\"%{public}f\", \"demAltUnc\":\"%{public}f\", \"wasMapDotSent\":%{public}d, \"mapDot\":\"%{public}f\"}", v51, 0x7Eu);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
}

void sub_10083EC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10083EC4C(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022CB7A8);
  }
  double v5 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a2 + 4);
    double v7 = "Vendor";
    uint64_t v8 = *(void *)(a2 + 12);
    uint64_t v9 = *(void *)(a2 + 20);
    if (a3) {
      double v7 = "";
    }
    uint64_t v10 = *(void *)(a2 + 44);
    uint64_t v11 = *(void *)(a2 + 60);
    int v12 = *(unsigned __int8 *)(a2 + 672);
    uint64_t v13 = *(void *)(a2 + 28);
    uint64_t v14 = *(void *)(a2 + 36);
    uint64_t v15 = *(void *)(a2 + 144);
    uint64_t v16 = *(void *)(a2 + 52);
    uint64_t v17 = *(void *)(a2 + 68);
    uint64_t v18 = *(void *)(a2 + 76);
    int v19 = *(unsigned __int8 *)(a2 + 796);
    *(_DWORD *)uint64_t buf = 136449539;
    uint64_t v22 = v7;
    __int16 v23 = 2049;
    uint64_t v24 = v6;
    __int16 v25 = 2049;
    uint64_t v26 = v8;
    __int16 v27 = 2050;
    uint64_t v28 = v9;
    __int16 v29 = 2049;
    uint64_t v30 = v10;
    __int16 v31 = 2049;
    uint64_t v32 = v11;
    __int16 v33 = 1026;
    int v34 = v12;
    __int16 v35 = 2049;
    uint64_t v36 = v13;
    __int16 v37 = 2050;
    uint64_t v38 = v14;
    __int16 v39 = 2049;
    uint64_t v40 = v15;
    __int16 v41 = 2050;
    uint64_t v42 = v16;
    __int16 v43 = 2050;
    uint64_t v44 = v17;
    __int16 v45 = 2050;
    uint64_t v46 = v18;
    __int16 v47 = 1026;
    int v48 = v19;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "@ClxGps%{public}s, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, speed, %{private}.1f, course, %{private}.1f, imag, %{public}d, alt, %{private}.1f, altunc, %{public}.1f, ellipsoidalAlt, %{private}.1f, speedUnc, %{public}.1f, courseUnc, %{public}.1f, timestamp, %{public}.3f, isGnssLocationService, %{public}d", buf, 0x86u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022CB7A8);
    }
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::logLocation(const GNSS::DaemonLocation &, BOOL)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
}

void sub_10083EF8C(double *a1, double a2)
{
  if (*((void *)a1 + 377))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *((void *)a1 + 377);
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "constructRavenCtrl,fRavenController,exists,%{public}p,abort", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_16:
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::constructRavenController(const CFTimeInterval)", "%s\n", v9);
        if (v9 != buf) {
          free(v9);
        }
        return;
      }
LABEL_53:
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      goto LABEL_16;
    }
  }
  else
  {
    double v6 = a1[381];
    if (v6 >= 0.0)
    {
      if (v6 < a2)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        uint64_t v10 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = *((void *)a1 + 381);
          *(_DWORD *)uint64_t buf = 134349312;
          *(double *)&uint8_t buf[4] = a2;
          *(_WORD *)&unsigned char buf[12] = 2050;
          *(void *)&unsigned char buf[14] = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "constructRavenCtrl,start,now,%{public}.3f,toEnable,%{public}.3f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
          }
          uint64_t v21 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::constructRavenController(const CFTimeInterval)", "%s\n", v21);
          if (v21 != buf) {
            free(v21);
          }
        }
        sub_100CDBEF0(buf);
        uint64_t v13 = *(void *)buf;
        uint64_t v12 = *(void *)&buf[8];
        *(void *)uint64_t buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        *((void *)a1 + 377) = v13;
        uint64_t v14 = (std::__shared_weak_count *)*((void *)a1 + 378);
        *((void *)a1 + 378) = v12;
        if (v14)
        {
          sub_1000DB0A0(v14);
          if (*(void *)&buf[8]) {
            sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
          }
          uint64_t v12 = *((void *)a1 + 378);
        }
        uint64_t v15 = *((void *)a1 + 377);
        if (v12) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 16), 1uLL, memory_order_relaxed);
        }
        *((void *)a1 + 379) = v15;
        uint64_t v16 = (std::__shared_weak_count *)*((void *)a1 + 380);
        *((void *)a1 + 380) = v12;
        if (v16) {
          std::__shared_weak_count::__release_weak(v16);
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        uint64_t v17 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v18 = *((void *)a1 + 377);
          *(_DWORD *)uint64_t buf = 134349056;
          *(void *)&uint8_t buf[4] = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "constructRavenCtrl,finish,%{public}p", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
          }
          uint64_t v22 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::constructRavenController(const CFTimeInterval)", "%s\n", v22);
          if (v22 != buf) {
            free(v22);
          }
        }
        uint64_t v19 = *((void *)a1 + 377);
        if (v19)
        {
          sub_100CDD67C(v19);
          if (*(void *)a1) {
            (*(void (**)(void))(**(void **)a1 + 256))(*(void *)a1);
          }
          uint64_t v20 = *((void *)a1 + 382);
          if (v20)
          {
            *(double *)(v20 + 24) = a2;
            *(unsigned char *)(v20 + 32) = 1;
          }
        }
        else
        {
          a1[381] = 1.79769313e308;
        }
        sub_10083FD9C((uint64_t *)a1);
      }
    }
    else
    {
      a1[381] = a2 + 10.0;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      double v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *((void *)a1 + 381);
        *(_DWORD *)uint64_t buf = 134349312;
        *(double *)&uint8_t buf[4] = a2;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&unsigned char buf[14] = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "constructRavenCtrl,deferred,now,%{public}.3f,toEnable,%{public}.3f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_16;
        }
        goto LABEL_53;
      }
    }
  }
}

uint64_t sub_10083F614(uint64_t a1, double *a2)
{
  if (*(unsigned char *)(a1 + 784)) {
    return 0;
  }
  if (!*(void *)(a1 + 360)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 3016);
  if (!v5 || !sub_100CEA9C8(v5)) {
    return 0;
  }
  sub_1000DB3D4((uint64_t)v33);
  if (sub_100CEAA08(*(void *)(a1 + 3016)))
  {
    sub_100CEDE98(*(void *)(a1 + 3016));
    sub_100CEDA0C(*(void *)(a1 + 3016));
  }
  uint64_t v2 = sub_100CEC4DC(*(void *)(a1 + 3016));
  if (v2)
  {
    *(void *)&v65[12] = 0;
    *(void *)&v65[4] = 0;
    *(_OWORD *)&v65[20] = xmmword_101D1C320;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v65[36] = _Q0;
    *(_OWORD *)&v65[52] = _Q0;
    *(_OWORD *)&v65[68] = _Q0;
    *(_DWORD *)long double v65 = 0xFFFF;
    *(_DWORD *)&v65[84] = 0;
    *(void *)&v65[88] = 0xBFF0000000000000;
    long long v66 = 0uLL;
    *(void *)((char *)&v67 + 4) = 0xBFF0000000000000;
    LODWORD(v67) = 0;
    HIDWORD(v67) = 0x7FFFFFFF;
    memset(v68, 0, 25);
    sub_1000DBC34(&v69);
    long long v66 = v33[6];
    long long v67 = v33[7];
    *(_OWORD *)__int16 v68 = v34[0];
    *(_OWORD *)&v68[12] = *(_OWORD *)((char *)v34 + 12);
    *(_OWORD *)&v65[32] = v33[2];
    *(_OWORD *)&v65[48] = v33[3];
    *(_OWORD *)&v65[64] = v33[4];
    *(_OWORD *)&v65[80] = v33[5];
    *(_OWORD *)long double v65 = v33[0];
    *(_OWORD *)&v65[16] = v33[1];
    memcpy(v12, v35, 0x201uLL);
    uint64_t v13 = v36;
    uint64_t v14 = v37;
    if (v37) {
      atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v72 = v13;
    uint64_t v15 = v73;
    uint64_t v73 = v14;
    if (v15) {
      sub_1000DB0A0(v15);
    }
    long long v78 = v42;
    v79[0] = v43[0];
    *(void *)((char *)v79 + 13) = *(void *)((char *)v43 + 13);
    long long v74 = v38;
    long long v75 = v39;
    long long v76 = v40;
    long long v77 = v41;
    sub_100CEDE98(*(void *)(a1 + 3016));
    sub_100CEDA0C(*(void *)(a1 + 3016));
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      double v17 = *a2;
      *(_DWORD *)uint64_t buf = 134218752;
      double v58 = v71;
      __int16 v59 = 2048;
      double v60 = v17;
      __int16 v61 = 2048;
      uint64_t v62 = *(void *)&v65[76];
      __int16 v63 = 2048;
      uint64_t v64 = v70;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#Raven,yield at,%.3lf,requested,%.3lf,deviceTimeOfFix,%.3lf,trueTimeOfFix,%.3lf", buf, 0x2Au);
    }
    uint64_t v18 = sub_10013D1A0(115, 2);
    if (v18)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      double v30 = *a2;
      int v49 = 134218752;
      double v50 = v71;
      __int16 v51 = 2048;
      double v52 = v30;
      __int16 v53 = 2048;
      uint64_t v54 = *(void *)&v65[76];
      __int16 v55 = 2048;
      uint64_t v56 = v70;
      __int16 v31 = (char *)_os_log_send_and_compose_impl();
      uint64_t v18 = sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssController::yieldRavenSolution(const CFTimeInterval &, const GNSS::DaemonLocation &)", "%s\n", v31);
      if (v31 != (char *)buf) {
        free(v31);
      }
    }
    sub_10083EC4C(v18, (uint64_t)v65, 1);
    uint64_t v19 = *(void *)(a1 + 1200);
    if (v19) {
      sub_1018CE944(v19, (double *)v65);
    }
    uint64_t v20 = *(void *)(a1 + 360);
    if (!v20) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v20 + 48))(v20, v65);
    uint64_t v21 = *(void *)(a1 + 2552);
    if (v21) {
      sub_10099F75C(v21, (uint64_t)v65);
    }
    if (v73) {
      sub_1000DB0A0(v73);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v22 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      double v23 = *a2;
      *(_DWORD *)uint64_t buf = 134217984;
      double v58 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "#Raven,no yield at,%.3lf", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      double v28 = *a2;
      *(_DWORD *)long double v65 = 134217984;
      *(double *)&v65[4] = v28;
      __int16 v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssController::yieldRavenSolution(const CFTimeInterval &, const GNSS::DaemonLocation &)", "%s\n", v29);
      if (v29 != (char *)buf) {
        free(v29);
      }
    }
  }
  uint64_t v24 = *(void *)(a1 + 3056);
  if (v24)
  {
    if (!*(unsigned char *)(v24 + 32))
    {
      double v26 = *(double *)(v24 + 8);
      goto LABEL_36;
    }
    double v25 = *(double *)(v24 + 24);
    if (v25 <= *a2)
    {
      double v26 = *a2 + *(double *)(v24 + 8) - v25;
LABEL_36:
      if (!*(unsigned char *)(v24 + 20) || v26 > (double)*(int *)(v24 + 16))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        __int16 v27 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#raven,overDailyBudget,stop", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
          }
          *(_WORD *)long double v65 = 0;
          uint64_t v32 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssController::yieldRavenSolution(const CFTimeInterval &, const GNSS::DaemonLocation &)", "%s\n", v32);
          if (v32 != (char *)buf) {
            free(v32);
          }
        }
        sub_100838FA8((void *)a1);
      }
    }
  }

  if (v47) {
    sub_1000DB0A0(v47);
  }
  if (v46 < 0) {
    operator delete(__p);
  }
  if (v44) {
    sub_1000DB0A0(v44);
  }
  if (v37) {
    sub_1000DB0A0(v37);
  }
  return v2;
}

void sub_10083FD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10083FD9C(uint64_t *a1)
{
  uint64_t v1 = a1[123];
  if (v1)
  {
    unint64_t v10 = 0xBFF0000000000000;
    sub_10187926C(v1 + 24, (double *)&v10, &__p);
    if (a1[377])
    {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        uint64_t v4 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v12 = 2082;
          uint64_t v13 = "";
          __int16 v14 = 2082;
          uint64_t v15 = "#rof,injectRavenOrbitFile";
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
        }
        sub_100CE706C(a1[377]);
      }
    }
    uint64_t v5 = *a1;
    if (*a1)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v6 = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v7 = a1[123];
      uint64_t v8 = (char *)(v7 + 24);
      if (*(char *)(v7 + 47) < 0) {
        uint64_t v8 = *(char **)v8;
      }
      sub_100134750(buf, v8);
      sub_10188E6C0(v5 + 8, (const char *)buf, v6 == 0, 4, (double *)&v10);
      if (SBYTE3(v15) < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_10083FF50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10083FF90(uint64_t a1)
{
  double v2 = sub_10016C458();
  if (*(unsigned char *)(a1 + 32))
  {
    double v3 = *(double *)(a1 + 24);
    if (v2 > v3) {
      *(double *)(a1 + 8) = v2 - v3 + *(double *)(a1 + 8);
    }
    *(unsigned char *)(a1 + 32) = 0;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *(_DWORD *)uint64_t buf = 134349056;
    uint64_t v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#raven,runtime,%{public}.1f,sec", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    std::string::size_type v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::RavenBudgetController::stopSession()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_100840170(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 1248);
  if (v4) {
    sub_10100F668(v4, a2);
  }
  uint64_t v5 = *(unsigned char **)(a1 + 1256);
  if (v5) {
    sub_100A3137C(v5, a2);
  }
  if (*(void *)(a2 + 112) == 19)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    std::string::size_type v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a2 + 16);
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "handleHkWorkoutCallback,swimming,ignored,event,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_76:
        uint64_t v25 = *(void *)(a2 + 16);
        v28[0] = 67240192;
        v28[1] = v25;
        double v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::handleHkWorkoutCallback(const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
        return;
      }
LABEL_82:
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      goto LABEL_76;
    }
    return;
  }
  uint64_t v8 = *(void *)(a2 + 16);
  if (v8 == 1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "handleHkWorkoutCallback,Stopped", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      LOWORD(v28[0]) = 0;
      uint64_t v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::handleHkWorkoutCallback(const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
    if (**(unsigned char **)(a1 + 3064))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      __int16 v12 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "handleHkWorkoutCallback,deconstructRavenController", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        LOWORD(v28[0]) = 0;
        __int16 v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::handleHkWorkoutCallback(const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
      }
      sub_100838FA8((void *)a1);
    }
    int v10 = 0;
    goto LABEL_34;
  }
  if (!v8)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "handleHkWorkoutCallback,Started", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      LOWORD(v28[0]) = 0;
      double v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::handleHkWorkoutCallback(const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    int v10 = 1;
LABEL_34:
    **(unsigned char **)(a1 + 3064) = v10;
    uint64_t v13 = *(double **)(a1 + 928);
    if (v13)
    {
      sub_1018A8828(v13, v10);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      __int16 v14 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)double v30 = 2082;
        *(void *)&v30[2] = "";
        __int16 v31 = 2082;
        uint64_t v32 = "#rti,updateRtiDownloadRateOnWorkoutOrFocusedNav";
        __int16 v33 = 1026;
        int v34 = v10;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"isHkWorkoutSession\":%{public}hhd}", buf, 0x22u);
      }
    }
    if (*(void *)(a1 + 904))
    {
      sub_1000C7F88(buf);
      LOBYTE(v28[0]) = 0;
      char v15 = sub_1000D2988(*(uint64_t *)buf, "EnableRteUpdateOnHkWorkoutSession", (BOOL *)v28);
      if (LOBYTE(v28[0])) {
        char v16 = 0;
      }
      else {
        char v16 = v15;
      }
      if (*(void *)v30) {
        sub_1000DB0A0(*(std::__shared_weak_count **)v30);
      }
      if ((v16 & 1) == 0)
      {
        sub_1018A81DC(*(double **)(a1 + 904), v10, 0);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        double v17 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)double v30 = 2082;
          *(void *)&v30[2] = "";
          __int16 v31 = 2082;
          uint64_t v32 = "#rte,updateRteRofFileDownloadRateOnWorkoutOrFocusedNav";
          __int16 v33 = 1026;
          int v34 = v10;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"isHkWorkoutSession\":%{public}hhd}", buf, 0x22u);
        }
      }
    }
    if (*(void *)(a1 + 1000))
    {
      sub_1000C7F88(buf);
      LOBYTE(v28[0]) = 0;
      char v18 = sub_1000D2988(*(uint64_t *)buf, "EnableRteUpdateOnHkWorkoutSession", (BOOL *)v28);
      if (LOBYTE(v28[0])) {
        char v19 = 0;
      }
      else {
        char v19 = v18;
      }
      if (*(void *)v30) {
        sub_1000DB0A0(*(std::__shared_weak_count **)v30);
      }
      if ((v19 & 1) == 0)
      {
        sub_1018A81DC(*(double **)(a1 + 1000), v10, 1);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        uint64_t v20 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)double v30 = 2082;
          *(void *)&v30[2] = "";
          __int16 v31 = 2082;
          uint64_t v32 = "#rof,updateRteRofFileDownloadRateOnWorkoutOrFocusedNav";
          __int16 v33 = 1026;
          int v34 = v10;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"isHkWorkoutSession\":%{public}hhd}", buf, 0x22u);
        }
      }
    }
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v21 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v22 = *(void *)(a2 + 16);
    *(_DWORD *)uint64_t buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "handleHkWorkoutCallback,Unhandled,eventType,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_76;
    }
    goto LABEL_82;
  }
}

void sub_100840AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100840B20(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGnssController::handleSleep,treat as a device disconnect event", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::handleSleep(CLGnssDeviceFacade::SleepLock)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  *(unsigned char *)(a1 + 8) = 0;
  return sub_100839F84(a1 + 2624, 6);
}

uint64_t sub_100840CC4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 816) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 824) = sub_1018749A0(a2 + 40);
  sub_100D67960(*(void *)a1 + 8, a2);
  uint64_t v4 = *(_DWORD **)(a1 + 1184);
  if (v4) {
    sub_101890890(v4, a2);
  }
  uint64_t result = *(void *)(a1 + 392);
  if (result)
  {
    std::string::size_type v6 = *(uint64_t (**)(void))(*(void *)result + 48);
    return v6();
  }
  return result;
}

void sub_100840D64(uint64_t *a1, uint64_t *a2)
{
  if (*a2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v14 = 0;
      __int16 v15 = 2082;
      char v16 = "";
      __int16 v17 = 2082;
      char v18 = "injectassistancefile";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    uint64_t v5 = *a1;
    uint64_t v6 = *a2;
    if (*(char *)(*a2 + 47) < 0)
    {
      sub_1000DC48C(__p, *(void **)(v6 + 24), *(void *)(v6 + 32));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(v6 + 24);
      uint64_t v11 = *(void *)(v6 + 40);
    }
    (*(void (**)(uint64_t, void **))(*(void *)v5 + 72))(v5, __p);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v9 = a1[148];
    if (v9) {
      sub_101892EF0(v9, 2);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "assistanceFile,null,invalid parameter", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      __int16 v12 = 0;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssController::handleAssistanceFileUpdated(std::shared_ptr<CLGnssAssistanceFile>)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_100841008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10084102C(uint64_t *a1, uint64_t *a2)
{
  if (*a2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v14 = 0;
      __int16 v15 = 2082;
      char v16 = "";
      __int16 v17 = 2082;
      char v18 = "injectRealTimeEphemerisFile";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    uint64_t v5 = *a1;
    uint64_t v6 = *a2;
    if (*(char *)(*a2 + 47) < 0)
    {
      sub_1000DC48C(__p, *(void **)(v6 + 24), *(void *)(v6 + 32));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(v6 + 24);
      uint64_t v11 = *(void *)(v6 + 40);
    }
    (*(void (**)(uint64_t, void **))(*(void *)v5 + 160))(v5, __p);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v9 = a1[148];
    if (v9) {
      sub_101892EF0(v9, 1);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "rteFile,null,invalid parameter", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      __int16 v12 = 0;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssController::handleAssistanceRteUpdated(std::shared_ptr<CLGnssAssistanceFile>)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_1008412D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008412F4(uint64_t *a1, void *a2)
{
  if (*a2)
  {
    sub_10083FD9C(a1);
    uint64_t v3 = a1[148];
    if (v3)
    {
      sub_101892EF0(v3, 4);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "#rof,null,invalid file parameter", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssController::handleAssistanceRavenOrbitFileUpdated(std::shared_ptr<CLGnssAssistanceFile>)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

void sub_1008414D4(uint64_t *a1, uint64_t *a2)
{
  if (*a2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v14 = 0;
      __int16 v15 = 2082;
      char v16 = "";
      __int16 v17 = 2082;
      char v18 = "injectrtifile";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    uint64_t v5 = *a1;
    uint64_t v6 = *a2;
    if (*(char *)(*a2 + 47) < 0)
    {
      sub_1000DC48C(__p, *(void **)(v6 + 24), *(void *)(v6 + 32));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(v6 + 24);
      uint64_t v11 = *(void *)(v6 + 40);
    }
    (*(void (**)(uint64_t, void **))(*(void *)v5 + 176))(v5, __p);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v9 = a1[148];
    if (v9) {
      sub_101892EF0(v9, 3);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "rtiFile,null,invalid parameter", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      __int16 v12 = 0;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssController::handleAssistanceRtiUpdated(std::shared_ptr<CLGnssAssistanceFile>)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_100841778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10084179C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289282;
    v4[1] = 0;
    __int16 v5 = 2082;
    uint64_t v6 = "";
    __int16 v7 = 2082;
    uint64_t v8 = "injectapcfile";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", (uint8_t *)v4, 0x1Cu);
  }
  return (*(uint64_t (**)(void))(**(void **)a1 + 192))();
}

void sub_1008418B0(void *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289282;
    v4[1] = 0;
    __int16 v5 = 2082;
    uint64_t v6 = "";
    __int16 v7 = 2082;
    uint64_t v8 = "injectbroadcastephemerisfile";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", (uint8_t *)v4, 0x1Cu);
  }
  (*(void (**)(void))(*(void *)*a1 + 208))();
  uint64_t v3 = a1[148];
  if (v3) {
    sub_101892EF0(v3, 1);
  }
}

uint64_t sub_1008419D4(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    __int16 v9 = 2082;
    int v10 = "handleMeasurementFeatures";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", (uint8_t *)v6, 0x1Cu);
  }
  uint64_t result = *(void *)(a1 + 552);
  if (result)
  {
    if (!*(unsigned char *)(a1 + 592)) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 48))(result, a2);
    }
  }
  return result;
}

void sub_100841B04(void *a1, _DWORD *a2)
{
  uint64_t v4 = a1[136];
  if (v4) {
    sub_10077A4B8(v4, a2);
  }
  uint64_t v5 = a1[134];
  if (v5) {
    sub_100A2D998(v5, (uint64_t)a2);
  }
  uint64_t v6 = a1[138];
  if (v6) {
    sub_1018DB82C(v6, (uint64_t)a2, 1.0);
  }
  uint64_t v7 = a1[144];
  if (v7) {
    sub_10192DF4C(v7, (uint64_t)a2, 1.0);
  }
  uint64_t v8 = a1[133];
  if (v8)
  {
    sub_100B93E30(v8, (uint64_t)a2, 1.0);
  }
}

void sub_100841B9C(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v3 = (const char *)a2;
  switch(a2)
  {
    case 0u:
      if (*((_DWORD *)a3 + 20) == 1)
      {
        uint64_t v5 = *a3;
        uint64_t v6 = a3[1];
        uint64_t v7 = a3[2];
        uint64_t v8 = a3[3];
        uint64_t v10 = a3[4];
        uint64_t v9 = a3[5];
        uint64_t v11 = a3[6];
        uint64_t v25 = a3[7];
        long long v26 = *((_OWORD *)a3 + 4);
        int v24 = *((_DWORD *)a3 + 21);
        uint64_t v27 = a3[11];
        uint64_t v12 = a3[12];
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        uint64_t v13 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 68291843;
          int v36 = 0;
          __int16 v37 = 2082;
          long long v38 = "";
          __int16 v39 = 2082;
          long long v40 = "DOT";
          __int16 v41 = 2050;
          uint64_t v42 = v5;
          __int16 v43 = 2049;
          uint64_t v44 = v8;
          __int16 v45 = 2049;
          uint64_t v46 = v10;
          __int16 v47 = 2050;
          uint64_t v48 = v11;
          __int16 v49 = 2050;
          uint64_t v50 = v25;
          __int16 v51 = 2050;
          uint64_t v52 = v26;
          __int16 v53 = 2049;
          uint64_t v54 = v6;
          __int16 v55 = 2049;
          uint64_t v56 = v7;
          __int16 v57 = 2050;
          uint64_t v58 = v9;
          __int16 v59 = 2050;
          uint64_t v60 = v27;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"timestamp\":\"%{public}f\", \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"directionOfTravel\":\"%{public}f\", \"directionOfTravelUnc\":\"%{public}f\", \"roadWidth\":\"%{public}f\", \"startLatitude\":\"%{private}.08f\", \"startLongitude\":\"%{private}.08f\", \"lengthOfLinearSegment\":\"%{public}f\", \"machtime\":\"%{public}f\"}", buf, 0x80u);
        }
        uint64_t v14 = *a1;
        v29[0] = v5;
        v29[1] = v6;
        v29[2] = v7;
        v29[3] = v8;
        v29[4] = v10;
        v29[5] = v9;
        v29[6] = v11;
        v29[7] = v25;
        long long v30 = v26;
        int v31 = 1;
        int v32 = v24;
        uint64_t v33 = v27;
        uint64_t v34 = v12;
        (*(void (**)(uint64_t, void *))(*(void *)v14 + 80))(v14, v29);
      }
      break;
    case 1u:
      uint64_t v15 = *a3;
      uint64_t v16 = a3[1];
      uint64_t v17 = a3[2];
      uint64_t v18 = a3[3];
      uint64_t v19 = a3[4];
      uint64_t v20 = a3[5];
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      uint64_t v21 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 68290819;
        int v36 = 0;
        __int16 v37 = 2082;
        long long v38 = "";
        __int16 v39 = 2082;
        long long v40 = "MMP";
        __int16 v41 = 2050;
        uint64_t v42 = v15;
        __int16 v43 = 2049;
        uint64_t v44 = v16;
        __int16 v45 = 2049;
        uint64_t v46 = v17;
        __int16 v47 = 2050;
        uint64_t v48 = v18;
        __int16 v49 = 2050;
        uint64_t v50 = v19;
        __int16 v51 = 2050;
        uint64_t v52 = v20;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"timestamp\":\"%{public}f\", \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"uncEllipseSemiMajor\":\"%{public}f\", \"uncEllipseSemiMinor\":\"%{public}f\", \"uncEllipseAzimuth\":\"%{public}f\"}", buf, 0x58u);
      }
      uint64_t v22 = *a1;
      v28[0] = v15;
      v28[1] = v16;
      v28[2] = v17;
      v28[3] = v18;
      _DWORD v28[4] = v19;
      v28[5] = v20;
      (*(void (**)(uint64_t, void *))(*(void *)v22 + 88))(v22, v28);
      break;
    case 2u:
    case 3u:
    case 6u:
      return;
    default:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      double v23 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 68289282;
        int v36 = 0;
        __int16 v37 = 2082;
        long long v38 = "";
        __int16 v39 = 2050;
        long long v40 = v3;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Warning Unsupported notification\", \"notification\":%{public, location:CLGpsAssistant_Type::Notification}lld}", buf, 0x1Cu);
      }
      break;
  }
}

void sub_100841FC0(void *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 12) == 1) {
    int v4 = 1;
  }
  else {
    int v4 = 2;
  }
  *(_DWORD *)(*a1 + 352) = v4;
  uint64_t v5 = (void *)a1[138];
  if (v5)
  {
    long long v6 = *(_OWORD *)(a2 + 112);
    v34[6] = *(_OWORD *)(a2 + 96);
    v34[7] = v6;
    uint64_t v35 = *(void *)(a2 + 128);
    long long v7 = *(_OWORD *)(a2 + 48);
    _OWORD v34[2] = *(_OWORD *)(a2 + 32);
    v34[3] = v7;
    long long v8 = *(_OWORD *)(a2 + 80);
    v34[4] = *(_OWORD *)(a2 + 64);
    v34[5] = v8;
    long long v9 = *(_OWORD *)(a2 + 16);
    v34[0] = *(_OWORD *)a2;
    v34[1] = v9;
    sub_1018DC374(v5, (unsigned int *)v34);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v10 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v37 = 0;
    __int16 v38 = 2082;
    __int16 v39 = "";
    __int16 v40 = 2082;
    __int16 v41 = "injectassistancemotion";
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v11 = *a1;
  long long v12 = *(_OWORD *)(a2 + 48);
  _OWORD v32[2] = *(_OWORD *)(a2 + 32);
  v32[3] = v12;
  uint64_t v33 = *(void *)(a2 + 128);
  long long v13 = *(_OWORD *)(a2 + 112);
  unsigned char v32[6] = *(_OWORD *)(a2 + 96);
  v32[7] = v13;
  long long v14 = *(_OWORD *)(a2 + 80);
  v32[4] = *(_OWORD *)(a2 + 64);
  v32[5] = v14;
  long long v15 = *(_OWORD *)(a2 + 16);
  v32[0] = *(_OWORD *)a2;
  v32[1] = v15;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v11 + 96))(v11, v32);
  uint64_t v16 = (unsigned char *)a1[144];
  if (v16)
  {
    long long v17 = *(_OWORD *)(a2 + 112);
    long long v29 = *(_OWORD *)(a2 + 96);
    long long v30 = v17;
    uint64_t v31 = *(void *)(a2 + 128);
    long long v18 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v27.isStanding = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v27.isVehicleConnected = v18;
    long long v19 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)&v27.vehicleType = *(_OWORD *)(a2 + 64);
    long long v28 = v19;
    long long v20 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&v27.type = *(_OWORD *)a2;
    *(_OWORD *)&v27.mountedConfidence = v20;
    *uint64_t v16 = CLMotionActivity::isMounted(&v27);
    if (*(unsigned char *)(a2 + 139))
    {
      if (!*((unsigned char *)a1 + 1268))
      {
        sub_100842618(a1 + 104, (uint64_t)sub_100842BEC, (uint64_t)[(id)a1[99] silo], (uint64_t)a1, 100.0, 10.0);
        sub_100842DC8(a1 + 106, (uint64_t)sub_10084339C, (uint64_t)[(id)a1[99] silo], (uint64_t)a1, 100.0, 10.0);
        *(void *)(a1[144] + 56) = 0x3F847AE147AE147BLL;
        *((unsigned char *)a1 + 1268) = 1;
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        uint64_t v21 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "GPSSENSOR,startIns", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 == -1)
          {
LABEL_43:
            long long v26 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::handleAssistanceMotion(GNSS::Context)", "%s\n", v26);
            if (v26 != (char *)buf) {
              free(v26);
            }
            goto LABEL_26;
          }
LABEL_47:
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
          goto LABEL_43;
        }
      }
    }
    else if (*((unsigned char *)a1 + 1268))
    {
      sub_100843578(a1 + 104);
      sub_10084372C(a1 + 106);
      *((unsigned char *)a1 + 1268) = 0;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      uint64_t v22 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "GPSSENSOR,stopIns", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_43;
        }
        goto LABEL_47;
      }
    }
  }
LABEL_26:
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247E590, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247E590))
  {
    byte_10247E588 = sub_10010145C();
    __cxa_guard_release(&qword_10247E590);
  }
  if (byte_10247E588 || sub_100119A30())
  {
    BOOL v23 = !*(unsigned char *)(a2 + 138) && (!sub_100119A30() || !*((unsigned char *)a1 + 608)) && byte_10247E588 != 0;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    int v24 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v37 = 0;
      __int16 v38 = 2082;
      __int16 v39 = "";
      __int16 v40 = 2082;
      __int16 v41 = "sendAllowGnssDwellDutyCycling";
      __int16 v42 = 1026;
      BOOL v43 = v23;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"allow\":%{public}hhd}", buf, 0x22u);
    }
    (*(void (**)(void, BOOL))(*(void *)*a1 + 264))(*a1, v23);
  }
  uint64_t v25 = a1[154];
  if (v25) {
    sub_100E13120(v25, (int *)a2);
  }
}

void sub_1008425F8(_Unwind_Exception *a1)
{
}

BOOL sub_100842618(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  if (*a1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134350080;
      double v21 = a5;
      __int16 v22 = 2050;
      double v23 = a6;
      __int16 v24 = 2050;
      uint64_t v25 = a2;
      __int16 v26 = 2050;
      uint64_t v27 = a3;
      __int16 v28 = 2050;
      uint64_t v29 = a4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,GNSS_SEN,StartingSensorWhenAlreadyRunning,StoppingExisting,SampleRate,%{public}lf,ReportRate,%{public}lf,Callback,%{public}p,silo,%{public}p,context,%{public}p", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      long long v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssSensorAdapter<CLAccelerometer, 0>::start(double, double, DataHandler, CLSilo *, void *) [SensorType = CLAccelerometer, notification = 0]", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
  }
  if ((*(void *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    goto LABEL_22;
  }
  BOOL v12 = (*(void *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
  BOOL v13 = ((*(void *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
  if (a5 >= 0.0)
  {
    BOOL v13 = 0;
    BOOL v12 = 0;
  }
  if ((*(void *)&a5 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
    BOOL v12 = 1;
  }
  int v14 = (*(void *)&a5 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v12;
  if ((*(void *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000) {
    int v14 = 1;
  }
  if (a6 > a5 || ((v14 | v13) & 1) != 0 || a6 <= 0.0)
  {
LABEL_22:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    long long v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134349312;
      double v21 = a5;
      __int16 v22 = 2050;
      double v23 = a6;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "GNSS_SEN,InvalidParameters,sampleRate,%{public}lf,reportRate,%{public}lf", buf, 0x16u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_36:
        long long v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGnssSensorAdapter<CLAccelerometer, 0>::start(double, double, DataHandler, CLSilo *, void *) [SensorType = CLAccelerometer, notification = 0]", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
        return 0;
      }
LABEL_43:
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      goto LABEL_36;
    }
  }
  else
  {
    if (sub_1009EC0A8()) {
      operator new();
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    long long v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "GNSS_SEN,Could not get the sensor controller", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_36;
      }
      goto LABEL_43;
    }
  }
  return result;
}

void sub_100842BB0(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100842BEC(double *a1, unsigned int a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 792), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CB2A8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    long long v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssController::setAccelData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CB2A8);
    }
    long long v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      BOOL v13 = "";
      __int16 v14 = 2082;
      long long v15 = "activity";
      __int16 v16 = 2050;
      uint64_t v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssController::setAccelData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v9 = 0;
  }
  sub_100843A70(a3, a1, a2);
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_100842DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100842DC8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  if (*a1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    int v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134350080;
      double v21 = a5;
      __int16 v22 = 2050;
      double v23 = a6;
      __int16 v24 = 2050;
      uint64_t v25 = a2;
      __int16 v26 = 2050;
      uint64_t v27 = a3;
      __int16 v28 = 2050;
      uint64_t v29 = a4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,GNSS_SEN,StartingSensorWhenAlreadyRunning,StoppingExisting,SampleRate,%{public}lf,ReportRate,%{public}lf,Callback,%{public}p,silo,%{public}p,context,%{public}p", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      long long v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssSensorAdapter<CLGyro, 0>::start(double, double, DataHandler, CLSilo *, void *) [SensorType = CLGyro, notification = 0]", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
  }
  if ((*(void *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    goto LABEL_22;
  }
  BOOL v12 = (*(void *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
  BOOL v13 = ((*(void *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
  if (a5 >= 0.0)
  {
    BOOL v13 = 0;
    BOOL v12 = 0;
  }
  if ((*(void *)&a5 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
    BOOL v12 = 1;
  }
  int v14 = (*(void *)&a5 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v12;
  if ((*(void *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000) {
    int v14 = 1;
  }
  if (a6 > a5 || ((v14 | v13) & 1) != 0 || a6 <= 0.0)
  {
LABEL_22:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    long long v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134349312;
      double v21 = a5;
      __int16 v22 = 2050;
      double v23 = a6;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "GNSS_SEN,InvalidParameters,sampleRate,%{public}lf,reportRate,%{public}lf", buf, 0x16u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_36:
        long long v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGnssSensorAdapter<CLGyro, 0>::start(double, double, DataHandler, CLSilo *, void *) [SensorType = CLGyro, notification = 0]", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
        return 0;
      }
LABEL_43:
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      goto LABEL_36;
    }
  }
  else
  {
    if (sub_100A08A84()) {
      operator new();
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "GNSS_SEN,Could not get the sensor controller", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_36;
      }
      goto LABEL_43;
    }
  }
  return result;
}

void sub_100843360(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10084339C(double *a1, unsigned int a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 792), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CB2A8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    long long v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssController::setGyroData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CB2A8);
    }
    long long v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      BOOL v13 = "";
      __int16 v14 = 2082;
      long long v15 = "activity";
      __int16 v16 = 2050;
      uint64_t v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssController::setGyroData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v9 = 0;
  }
  sub_1008442E4(a3, a1, a2);
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_100843558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100843578(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    *a1 = 0;
    ((void (*)(uint64_t))a1[1])(v1);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    double v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "GNSS_SEN,Tried stopping when not running", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssSensorAdapter<CLAccelerometer, 0>::stop() [SensorType = CLAccelerometer, notification = 0]", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

void sub_100843720(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_10084372C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    *a1 = 0;
    ((void (*)(uint64_t))a1[1])(v1);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    double v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "GNSS_SEN,Tried stopping when not running", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssSensorAdapter<CLGyro, 0>::stop() [SensorType = CLGyro, notification = 0]", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

void sub_1008438D4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1008438E0(void *a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    v11[0] = 68289282;
    v11[1] = 0;
    __int16 v12 = 2082;
    BOOL v13 = "";
    __int16 v14 = 1026;
    int v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"handleassistancesignalenv\":%{public}d}", (uint8_t *)v11, 0x18u);
  }
  uint64_t v5 = a1[131];
  if (v5) {
    sub_100F39FDC(v5, a2);
  }
  uint64_t v6 = a1[134];
  if (v6) {
    sub_100A2EFAC(v6, a2);
  }
  (*(void (**)(void, uint64_t))(*(void *)*a1 + 120))(*a1, a2);
  uint64_t v7 = a1[147];
  if (v7) {
    sub_101871240(v7, a2);
  }
  uint64_t v8 = a1[154];
  if (v8) {
    sub_100E12CA0(v8, a2);
  }
  sub_100D67B60(*a1 + 8, a2);
  uint64_t v9 = a1[319];
  if (v9) {
    sub_10099FA30(v9, a2);
  }
  uint64_t v10 = a1[156];
  if (v10) {
    sub_10100F578(v10, a2);
  }
}

void sub_100843A70(uint64_t a1, double *a2, unsigned int a3)
{
  if (a3 - 101 > 0xFFFFFF9B)
  {
    if (sub_100843F44(a2, a3, (uint64_t *)(a1 + 1224)))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      uint64_t v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        double v9 = *a2;
        LODWORD(buf) = 134349056;
        *(double *)((char *)&buf + 4) = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning,CLAccelerometer has sample before sleep,sampleTime,%{public}.6lf", (uint8_t *)&buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::setAccelData(const CLAccelerometer::Sample *, unsigned int)", "%s\n", v5);
        goto LABEL_19;
      }
    }
    else if (*(void *)(a1 + 1152))
    {
      long long buf = 0uLL;
      uint64_t v27 = 0;
      sub_1007F0828((void **)&buf, a3);
      uint64_t v10 = 0;
      int v11 = (char *)*((void *)&buf + 1);
      do
      {
        __int16 v12 = &a2[3 * v10];
        uint64_t v13 = *(void *)v12;
        int v15 = *((_DWORD *)v12 + 2);
        int v14 = *((_DWORD *)v12 + 3);
        int v16 = *((_DWORD *)v12 + 4);
        if (v11 >= v27)
        {
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v11[-buf] >> 3);
          unint64_t v18 = v17 + 1;
          if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_1001D7FD4();
          }
          if (0x5555555555555556 * ((uint64_t)&v27[-buf] >> 3) > v18) {
            unint64_t v18 = 0x5555555555555556 * ((uint64_t)&v27[-buf] >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v27[-buf] >> 3) >= 0x555555555555555) {
            unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v19 = v18;
          }
          if (v19) {
            long long v20 = (char *)sub_1000DA5D8((uint64_t)&v27, v19);
          }
          else {
            long long v20 = 0;
          }
          double v21 = &v20[24 * v17];
          *(void *)double v21 = v13;
          v21[8] = 1;
          *((_DWORD *)v21 + 3) = v15;
          *((_DWORD *)v21 + 4) = v14;
          *((_DWORD *)v21 + 5) = v16;
          __int16 v22 = (char *)*((void *)&buf + 1);
          double v23 = (char *)buf;
          __int16 v24 = v21;
          if (*((void *)&buf + 1) != (void)buf)
          {
            do
            {
              long long v25 = *(_OWORD *)(v22 - 24);
              *((void *)v24 - 1) = *((void *)v22 - 1);
              *(_OWORD *)(v24 - 24) = v25;
              v24 -= 24;
              v22 -= 24;
            }
            while (v22 != v23);
            __int16 v22 = (char *)buf;
          }
          int v11 = v21 + 24;
          *(void *)&long long buf = v24;
          *((void *)&buf + 1) = v21 + 24;
          uint64_t v27 = &v20[24 * v19];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          *(void *)int v11 = v13;
          v11[8] = 1;
          *((_DWORD *)v11 + 3) = v15;
          *((_DWORD *)v11 + 4) = v14;
          *((_DWORD *)v11 + 5) = v16;
          v11 += 24;
        }
        *((void *)&buf + 1) = v11;
        ++v10;
      }
      while (v10 != a3);
      sub_10192F03C(*(void *)(a1 + 1152), (uint64_t)&buf);
      if ((void)buf)
      {
        *((void *)&buf + 1) = buf;
        operator delete((void *)buf);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 67240192;
      DWORD1(buf) = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "numsamples,%{public}u", (uint8_t *)&buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssController::setAccelData(const CLAccelerometer::Sample *, unsigned int)", "%s\n", v5);
LABEL_19:
      if (v5 != (char *)&buf) {
        free(v5);
      }
    }
  }
}

void sub_100843F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100843F44(double *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  if (!*a3) {
    operator new();
  }
  char v16 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  if (!sub_100B00638(v5, (uint64_t)&v14))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning,failed to get last wake up time", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    LOWORD(v17) = 0;
    double v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL HaveSensorSampleBeforeSleep(const T *, unsigned int, std::unique_ptr<CLUtils::LiveTimeConverter> &) [T = CLAccelerometer::Sample]", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
    return 0;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v6 = a2;
  while (*a1 >= *((double *)&v15 + 1))
  {
    a1 += 3;
    if (!--v6) {
      return 0;
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v10 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    double v11 = *a1;
    *(_DWORD *)long long buf = 134349312;
    double v22 = v11;
    __int16 v23 = 2050;
    uint64_t v24 = *((void *)&v15 + 1);
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning,Sensor sample is before sleep,sampleTime,%{public}.6lf,wakeTime,%{public}.6lf", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    double v12 = *a1;
    int v17 = 134349312;
    double v18 = v12;
    __int16 v19 = 2050;
    uint64_t v20 = *((void *)&v15 + 1);
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL HaveSensorSampleBeforeSleep(const T *, unsigned int, std::unique_ptr<CLUtils::LiveTimeConverter> &) [T = CLAccelerometer::Sample]", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  return 1;
}

void sub_1008442E4(uint64_t a1, double *a2, unsigned int a3)
{
  if (a3 - 101 > 0xFFFFFF9B)
  {
    if (sub_1008447B8(a2, a3, (uint64_t *)(a1 + 1224)))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      uint64_t v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        double v9 = *a2;
        LODWORD(buf) = 134349056;
        *(double *)((char *)&buf + 4) = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning,CLGyro has sample before sleep,sampleTime,%{public}.6lf", (uint8_t *)&buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::setGyroData(const CLGyro::Sample *, unsigned int)", "%s\n", v5);
        goto LABEL_19;
      }
    }
    else if (*(void *)(a1 + 1152))
    {
      long long buf = 0uLL;
      uint64_t v27 = 0;
      sub_1007F0828((void **)&buf, a3);
      uint64_t v10 = 0;
      double v11 = (char *)*((void *)&buf + 1);
      do
      {
        double v12 = &a2[3 * v10];
        uint64_t v13 = *(void *)v12;
        int v15 = *((_DWORD *)v12 + 2);
        int v14 = *((_DWORD *)v12 + 3);
        int v16 = *((_DWORD *)v12 + 4);
        if (v11 >= v27)
        {
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v11[-buf] >> 3);
          unint64_t v18 = v17 + 1;
          if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_1001D7FD4();
          }
          if (0x5555555555555556 * ((uint64_t)&v27[-buf] >> 3) > v18) {
            unint64_t v18 = 0x5555555555555556 * ((uint64_t)&v27[-buf] >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v27[-buf] >> 3) >= 0x555555555555555) {
            unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v19 = v18;
          }
          if (v19) {
            uint64_t v20 = (char *)sub_1000DA5D8((uint64_t)&v27, v19);
          }
          else {
            uint64_t v20 = 0;
          }
          double v21 = &v20[24 * v17];
          *(void *)double v21 = v13;
          v21[8] = 2;
          *((_DWORD *)v21 + 3) = v15;
          *((_DWORD *)v21 + 4) = v14;
          *((_DWORD *)v21 + 5) = v16;
          double v22 = (char *)*((void *)&buf + 1);
          __int16 v23 = (char *)buf;
          uint64_t v24 = v21;
          if (*((void *)&buf + 1) != (void)buf)
          {
            do
            {
              long long v25 = *(_OWORD *)(v22 - 24);
              *((void *)v24 - 1) = *((void *)v22 - 1);
              *(_OWORD *)(v24 - 24) = v25;
              v24 -= 24;
              v22 -= 24;
            }
            while (v22 != v23);
            double v22 = (char *)buf;
          }
          double v11 = v21 + 24;
          *(void *)&long long buf = v24;
          *((void *)&buf + 1) = v21 + 24;
          uint64_t v27 = &v20[24 * v19];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          *(void *)double v11 = v13;
          v11[8] = 2;
          *((_DWORD *)v11 + 3) = v15;
          *((_DWORD *)v11 + 4) = v14;
          *((_DWORD *)v11 + 5) = v16;
          v11 += 24;
        }
        *((void *)&buf + 1) = v11;
        ++v10;
      }
      while (v10 != a3);
      sub_10192F03C(*(void *)(a1 + 1152), (uint64_t)&buf);
      if ((void)buf)
      {
        *((void *)&buf + 1) = buf;
        operator delete((void *)buf);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 67240192;
      DWORD1(buf) = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "numsamples,%{public}u", (uint8_t *)&buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssController::setGyroData(const CLGyro::Sample *, unsigned int)", "%s\n", v5);
LABEL_19:
      if (v5 != (char *)&buf) {
        free(v5);
      }
    }
  }
}

void sub_10084478C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1008447B8(double *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  if (!*a3) {
    operator new();
  }
  char v16 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  if (!sub_100B00638(v5, (uint64_t)&v14))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning,failed to get last wake up time", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    LOWORD(v17) = 0;
    double v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL HaveSensorSampleBeforeSleep(const T *, unsigned int, std::unique_ptr<CLUtils::LiveTimeConverter> &) [T = CLGyro::Sample]", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
    return 0;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v6 = a2;
  while (*a1 >= *((double *)&v15 + 1))
  {
    a1 += 3;
    if (!--v6) {
      return 0;
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v10 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    double v11 = *a1;
    *(_DWORD *)long long buf = 134349312;
    double v22 = v11;
    __int16 v23 = 2050;
    uint64_t v24 = *((void *)&v15 + 1);
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning,Sensor sample is before sleep,sampleTime,%{public}.6lf,wakeTime,%{public}.6lf", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    double v12 = *a1;
    int v17 = 134349312;
    double v18 = v12;
    __int16 v19 = 2050;
    uint64_t v20 = *((void *)&v15 + 1);
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL HaveSensorSampleBeforeSleep(const T *, unsigned int, std::unique_ptr<CLUtils::LiveTimeConverter> &) [T = CLGyro::Sample]", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  return 1;
}

void sub_100844B58(void *a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *a3;
    *(_DWORD *)long long buf = 67240192;
    int v14 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Settings Notification,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    double v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  if (*a3)
  {
    if (*a3 == 4)
    {
      sub_100844E90(a1, *(_DWORD *)(a4 + 188));
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      double v9 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = *a3;
        *(_DWORD *)long long buf = 67240192;
        int v14 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,unhandled notification,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        double v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
    }
  }
  else
  {
    sub_100844EB8(a1);
  }
}

void sub_100844E90(void *a1, int a2)
{
  if (*((_DWORD *)a1 + 195) != a2)
  {
    *((_DWORD *)a1 + 195) = a2;
    if (a2)
    {
      if (a2 == 1) {
        sub_100844FD4(a1);
      }
    }
    else
    {
      sub_1008452AC(a1);
    }
  }
}

uint64_t sub_100844EB8(void *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289282;
    v4[1] = 0;
    __int16 v5 = 2082;
    uint64_t v6 = "";
    __int16 v7 = 2082;
    int v8 = "resetprivacyinfo";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", (uint8_t *)v4, 0x1Cu);
  }
  return (*(uint64_t (**)(void))(*(void *)*a1 + 296))(*a1);
}

void sub_100844FD4(void *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v13 = 0;
    __int16 v14 = 2082;
    long long v15 = "";
    __int16 v16 = 2082;
    int v17 = "enablelocationservice";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  (*(void (**)(void))(*(void *)*a1 + 280))(*a1);
  sub_100839F84((uint64_t)(a1 + 328), 9);
  if (*((unsigned char *)a1 + 1269))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning,fIsSimulatorMode,1,cannot trigger assistance download", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::enableLocationService()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    uint64_t v5 = a1[110];
    if (v5) {
      sub_1018A5A34(v5, 1);
    }
    uint64_t v6 = a1[113];
    if (v6) {
      sub_1018A5A34(v6, 1);
    }
    uint64_t v7 = a1[125];
    if (v7) {
      sub_1018A5A34(v7, 1);
    }
    uint64_t v8 = a1[116];
    if (v8) {
      sub_1018A5A34(v8, 1);
    }
    uint64_t v9 = a1[119];
    if (v9) {
      sub_1018A5A34(v9, 1);
    }
    uint64_t v10 = a1[122];
    if (v10) {
      sub_1018A5A34(v10, 1);
    }
    uint64_t v11 = a1[128];
    if (v11) {
      sub_1018A5A34(v11, 1);
    }
  }
}

uint64_t sub_1008452AC(void *a1)
{
  sub_100839F84((uint64_t)(a1 + 328), 10);
  uint64_t v2 = a1[131];
  if (v2) {
    sub_100F410A4(v2);
  }
  sub_1018E8334();
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    __int16 v6 = 2082;
    uint64_t v7 = "";
    __int16 v8 = 2082;
    uint64_t v9 = "disablelocationservice";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", (uint8_t *)v5, 0x1Cu);
  }
  return (*(uint64_t (**)(void))(*(void *)*a1 + 288))(*a1);
}

void sub_1008453E8(void *a1)
{
  if (*a1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289282;
      int v6 = 0;
      __int16 v7 = 2082;
      __int16 v8 = "";
      __int16 v9 = 2082;
      uint64_t v10 = "resetcontrolplanestatus";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    (*(void (**)(void))(*(void *)*a1 + 344))(*a1);
  }
  else
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022CB788);
    }
    uint64_t v3 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "NilrDbg,device not created yet", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_1022CB788);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssController::resetControlPlaneStatus()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_100845648(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 1328) = *(_OWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 1344) = 1;
  *(int8x16_t *)(a1 + 1352) = vextq_s8(*(int8x16_t *)(a2 + 20), *(int8x16_t *)(a2 + 20), 8uLL);
  *(void *)(a1 + 1368) = *(void *)(a2 + 36);
  *(_DWORD *)(a1 + 1392) = 3;
  *(_DWORD *)(a1 + 1452) = 0;
  *(_DWORD *)(a1 + 1400) = 12;
  int v4 = *(_DWORD *)(a2 + 96);
  int v5 = v4 == 10;
  BOOL v6 = (v4 & 0xFFFFFFF7) == 1;
  if (v4 == 11 || v4 == 4) {
    int v8 = 2;
  }
  else {
    int v8 = 0;
  }
  *(_DWORD *)(a1 + 1384) |= (v5 << 6) | v6 | v8;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022CB788);
  }
  __int16 v9 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *(void *)(a2 + 4);
    uint64_t v11 = *(void *)(a2 + 12);
    uint64_t v12 = *(void *)(a2 + 28);
    uint64_t v13 = *(void *)(a2 + 20);
    int v14 = *(_DWORD *)(a1 + 1384);
    v15[0] = 68290307;
    v15[1] = 0;
    __int16 v16 = 2082;
    int v17 = "";
    __int16 v18 = 2049;
    uint64_t v19 = v10;
    __int16 v20 = 2049;
    uint64_t v21 = v11;
    __int16 v22 = 2049;
    uint64_t v23 = v12;
    __int16 v24 = 2049;
    uint64_t v25 = v13;
    __int16 v26 = 1025;
    int v27 = v14;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#awd #thumper location log\", \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"alt\":\"%{private}f\", \"accuracy\":\"%{private}f\", \"source\":%{private}u}", (uint8_t *)v15, 0x40u);
  }
}

void sub_1008457EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 1184);
  if (v2) {
    sub_1018918D0(v2, a2);
  }
}

double sub_1008457FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 1048);
  if (v2) {
    *(void *)&double result = sub_100F40D90(v2, a2).n128_u64[0];
  }
  return result;
}

uint64_t sub_10084580C(void *a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 68289282;
    int v10 = 0;
    __int16 v11 = 2082;
    uint64_t v12 = "";
    __int16 v13 = 2082;
    int v14 = "controlplanestatusreport";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*a1) {
    return (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 352))(*a1, a2);
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_1022CB788);
  }
  BOOL v6 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "NilrDbg,device not created yet", buf, 2u);
  }
  BOOL v7 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v7)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_1022CB788);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGnssController::getControlPlaneStatusReport(CLGnssControlPlaneStatusReport &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
    return 0;
  }
  return result;
}

uint64_t sub_100845A7C(uint64_t a1, int **a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gnssband,build band vector", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v46 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssController::getActiveGnssBands(std::vector<CLGnssBandData> &)", "%s\n", v46);
    if (v46 != (char *)buf) {
      free(v46);
    }
  }
  int v5 = *a2;
  a2[1] = *a2;
  if (*(void *)(a1 + 768))
  {
    int v6 = *(_DWORD *)(a1 + 12);
    int v7 = *(_DWORD *)(a1 + 16);
    int v8 = v7 | 1;
    int v10 = a2 + 2;
    __int16 v9 = a2[2];
    if (v5 >= v9)
    {
      unint64_t v13 = (char *)v9 - (char *)v5;
      unint64_t v14 = ((char *)v9 - (char *)v5) >> 1;
      if (v14 <= 1) {
        unint64_t v14 = 1;
      }
      if (v13 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      __int16 v16 = (int *)sub_10017EA34((uint64_t)(a2 + 2), v15);
      int v17 = *a2;
      __int16 v18 = a2[1];
      __int16 v9 = &v16[v19];
      *__int16 v16 = v8;
      __int16 v11 = v16 + 1;
      while (v18 != v17)
      {
        int v20 = *--v18;
        *--__int16 v16 = v20;
      }
      *a2 = v16;
      a2[1] = v11;
      a2[2] = v9;
      if (v17)
      {
        operator delete(v17);
        __int16 v9 = *v10;
      }
    }
    else
    {
      *int v5 = v8;
      __int16 v11 = v5 + 1;
    }
    int v21 = v7 | 4;
    a2[1] = v11;
    if (v11 >= v9)
    {
      uint64_t v23 = *a2;
      uint64_t v24 = v11 - *a2;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 62) {
        sub_1001D7FD4();
      }
      uint64_t v26 = (char *)v9 - (char *)v23;
      if (v26 >> 1 > v25) {
        unint64_t v25 = v26 >> 1;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        __int16 v28 = (char *)sub_10017EA34((uint64_t)(a2 + 2), v27);
        uint64_t v23 = *a2;
        __int16 v11 = a2[1];
      }
      else
      {
        __int16 v28 = 0;
      }
      uint64_t v29 = (int *)&v28[4 * v24];
      __int16 v9 = (int *)&v28[4 * v27];
      *uint64_t v29 = v21;
      __int16 v22 = v29 + 1;
      while (v11 != v23)
      {
        int v30 = *--v11;
        *--uint64_t v29 = v30;
      }
      *a2 = v29;
      a2[1] = v22;
      a2[2] = v9;
      if (v23)
      {
        operator delete(v23);
        __int16 v9 = *v10;
      }
    }
    else
    {
      int *v11 = v21;
      __int16 v22 = v11 + 1;
    }
    int v31 = v6 | 2;
    a2[1] = v22;
    if (v22 >= v9)
    {
      uint64_t v33 = *a2;
      uint64_t v34 = v22 - *a2;
      unint64_t v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 62) {
        sub_1001D7FD4();
      }
      uint64_t v36 = (char *)v9 - (char *)v33;
      if (v36 >> 1 > v35) {
        unint64_t v35 = v36 >> 1;
      }
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v35;
      }
      if (v37)
      {
        __int16 v38 = (char *)sub_10017EA34((uint64_t)(a2 + 2), v37);
        uint64_t v33 = *a2;
        __int16 v22 = a2[1];
      }
      else
      {
        __int16 v38 = 0;
      }
      __int16 v39 = (int *)&v38[4 * v34];
      __int16 v40 = &v38[4 * v37];
      *__int16 v39 = v31;
      int v32 = v39 + 1;
      while (v22 != v33)
      {
        int v41 = *--v22;
        *--__int16 v39 = v41;
      }
      *a2 = v39;
      a2[1] = v32;
      a2[2] = (int *)v40;
      if (v33) {
        operator delete(v33);
      }
    }
    else
    {
      *__int16 v22 = v31;
      int v32 = v22 + 1;
    }
    a2[1] = v32;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    __int16 v42 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v44 = *(_DWORD *)(a1 + 12);
      int v43 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)long long buf = 67109376;
      int v49 = v43;
      __int16 v50 = 1024;
      int v51 = v44;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#gnssband,getActiveGnssBands,L1,%d,L5,%d", buf, 0xEu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_69:
      __int16 v47 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssController::getActiveGnssBands(std::vector<CLGnssBandData> &)", "%s\n", v47);
      if (v47 != (char *)buf) {
        free(v47);
      }
      return 1;
    }
LABEL_73:
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    goto LABEL_69;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v12 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#gnssband,getActiveGnssBands,no active bands", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_69;
    }
    goto LABEL_73;
  }
  return 1;
}

void sub_1008460A0(_DWORD *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = a1[3];
    *(_DWORD *)long long buf = 67240192;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLGC,updateGnssBandStatus,L5,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::updateGnssBandStatus()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (*(void *)a1)
  {
    if (sub_100743AA0())
    {
      switch(sub_100846360((uint64_t)a1))
      {
        case 0u:
          int v4 = *(void (**)(void))(**(void **)a1 + 248);
          goto LABEL_14;
        case 1u:
          int v4 = *(void (**)(void))(**(void **)a1 + 248);
          goto LABEL_14;
        case 2u:
          int v4 = *(void (**)(void))(**(void **)a1 + 248);
          goto LABEL_14;
        case 3u:
          goto LABEL_10;
        default:
          break;
      }
    }
    else
    {
LABEL_10:
      int v4 = *(void (**)(void))(**(void **)a1 + 248);
LABEL_14:
      v4();
    }
  }
  sub_100846518((uint64_t)a1);
}

uint64_t sub_100846360(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 2752);
    *(_DWORD *)long long buf = 67109120;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#clgda,getGnssBandAtBasebandCausesL1InterferenceModeAssertion,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "const GNSS::BasebandCausesL1InterferenceModeGnssBand CLGnssController::getGnssBandAtBasebandCausesL1InterferenceModeAssertion() const", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return *(unsigned int *)(a1 + 2752);
}

void sub_100846518(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gnssband,signalGnssBandChange", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::signalGnssBandChange()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 24));
  int v3 = (__CFRunLoop *)sub_1001C2710();
  CFRunLoopWakeUp(v3);
}

void sub_1008466BC(_DWORD *a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67240192;
    int v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLGC,L5Context,Update,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::handleGnssBandL5Update(const CLGnssBandUseType)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  a1[3] = a2;
  sub_1008460A0(a1);
}

void sub_100846878(_DWORD *a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67240192;
    int v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLGC,L1Context,Update,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::handleGnssBandL1Update(const CLGnssBandUseType)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  a1[4] = a2;
  sub_1008460A0(a1);
}

void sub_100846A34()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  unsigned int v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#gnssband,sendGnssBandChangeNotification", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::sendGnssBandChangeNotification()", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CLGnssBandsChangedNotification, 0, 0, 0);
}

uint64_t sub_100846BDC(uint64_t a1)
{
  uint64_t result = sub_1007402D0();
  if (result && *(unsigned char *)(a1 + 80))
  {
    uint64_t result = sub_1003BFEDC(*(double *)(a1 + 88), *(double *)(a1 + 96));
    int v3 = result;
    BOOL v8 = result != 0;
    if (*(void *)a1) {
      *(unsigned char *)(*(void *)a1 + 1289) = result != 0;
    }
    if (*(unsigned char *)(a1 + 1269))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      int v4 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67240192;
        BOOL v12 = v3 != 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#cspb,storing in region as,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        int v9 = 67240192;
        BOOL v10 = v3 != 0;
        int v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::updateDeviceForChinaRegion()", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      uint64_t v5 = sub_1000A6958();
      sub_1000EA238(v5, "GnssSimulatorModeForRegionWithMoreBds", &v8);
      uint64_t v6 = *(void *)sub_1000A6958();
      return (*(uint64_t (**)(void))(v6 + 944))();
    }
  }
  return result;
}

void sub_100846E24(uint64_t a1, signed int a2, double a3)
{
  unsigned int v41 = a2;
  int v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    int v32 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v33 = (void *)*v33;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      unint64_t v37 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        unint64_t v37 = (void *)*v37;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v37;
      __int16 v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLGnssController>::setTimeoutEvent(Event, double) [T = CLGnssController]", "%s\n", v38);
      if (v38 != buf) {
        free(v38);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v34 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&unsigned char buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
    }
    unint64_t v35 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)long long buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&unsigned char buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
    }
    uint64_t v36 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&unsigned char buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      BOOL v8 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        BOOL v8 = (void *)*v8;
      }
      sub_100837FA8(a2, __p);
      if (v49 >= 0) {
        int v9 = __p;
      }
      else {
        int v9 = *(unsigned char **)__p;
      }
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&unsigned char buf[14] = v9;
      *(_WORD *)&unsigned char buf[22] = 2050;
      *(double *)&unsigned char buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v49) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      BOOL v10 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        BOOL v10 = (void *)*v10;
      }
      sub_100837FA8(a2, v42);
      if (v45 >= 0) {
        __int16 v11 = v42;
      }
      else {
        __int16 v11 = *(unsigned char **)v42;
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = v10;
      __int16 v47 = 2082;
      uint64_t v48 = v11;
      __int16 v49 = 2050;
      double v50 = a3;
      BOOL v12 = (char *)_os_log_send_and_compose_impl();
      if (v45 < 0) {
        operator delete(*(void **)v42);
      }
LABEL_79:
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLGnssController>::setTimeoutEvent(Event, double) [T = CLGnssController]", "%s\n", v12);
LABEL_80:
      if (v12 != buf) {
        free(v12);
      }
      return;
    }
    return;
  }
  uint64_t v13 = *(void *)(a1 + 64);
  if (v13)
  {
    uint64_t v14 = a1 + 64;
    do
    {
      signed int v15 = *(_DWORD *)(v13 + 32);
      BOOL v16 = v15 < a2;
      if (v15 >= a2) {
        int v17 = (uint64_t *)v13;
      }
      else {
        int v17 = (uint64_t *)(v13 + 8);
      }
      if (!v16) {
        uint64_t v14 = v13;
      }
      uint64_t v13 = *v17;
    }
    while (*v17);
    if (v14 != a1 + 64 && *(_DWORD *)(v14 + 32) <= a2)
    {
      __int16 v18 = *(NSObject **)(v14 + 40);
      if (v18)
      {
LABEL_37:
        dispatch_time_t v20 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v18, v20, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        int v21 = qword_1024193D8;
        os_log_type_t v22 = *(unsigned char *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1024193D8, v22))
        {
          uint64_t v23 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            uint64_t v23 = (void *)*v23;
          }
          sub_100837FA8(v41, __p);
          if (v49 >= 0) {
            uint64_t v24 = __p;
          }
          else {
            uint64_t v24 = *(unsigned char **)__p;
          }
          *(_DWORD *)long long buf = 136315650;
          *(void *)&uint8_t buf[4] = v23;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&unsigned char buf[14] = v24;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(double *)&unsigned char buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v49) < 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
          }
          unint64_t v25 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            unint64_t v25 = (void *)*v25;
          }
          sub_100837FA8(v41, v42);
          if (v45 >= 0) {
            uint64_t v26 = v42;
          }
          else {
            uint64_t v26 = *(unsigned char **)v42;
          }
          *(_DWORD *)std::string __p = 136315650;
          *(void *)&__p[4] = v25;
          __int16 v47 = 2080;
          uint64_t v48 = v26;
          __int16 v49 = 2048;
          double v50 = a3;
          BOOL v12 = (char *)_os_log_send_and_compose_impl();
          if (v45 < 0) {
            operator delete(*(void **)v42);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLGnssController>::setTimeoutEvent(Event, double) [T = CLGnssController]", "%s\n", v12);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  uint64_t v19 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v19)
  {
    __int16 v18 = v19;
    *(void *)long long buf = &v41;
    sub_1000FEE0C((uint64_t **)(a1 + 56), (int *)&v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5] = v19;
    dispatch_source_set_timer(v18, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100857860;
    handler[3] = &unk_1022B2410;
    handler[4] = a1;
    unsigned int v40 = v41;
    dispatch_source_set_event_handler(v18, handler);
    dispatch_resume(v18);
    goto LABEL_37;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  unint64_t v27 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    __int16 v28 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      __int16 v28 = (void *)*v28;
    }
    sub_100837FA8(a2, buf);
    if (buf[23] >= 0) {
      uint64_t v29 = buf;
    }
    else {
      uint64_t v29 = *(unsigned char **)buf;
    }
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v28;
    __int16 v47 = 2082;
    uint64_t v48 = v29;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    int v30 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v30 = (void *)*v30;
    }
    sub_100837FA8(a2, __p);
    if (v49 >= 0) {
      int v31 = __p;
    }
    else {
      int v31 = *(unsigned char **)__p;
    }
    *(_DWORD *)__int16 v42 = 136315394;
    *(void *)&v42[4] = v30;
    __int16 v43 = 2082;
    int v44 = v31;
    BOOL v12 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v49) < 0) {
      operator delete(*(void **)__p);
    }
    goto LABEL_79;
  }
}

void sub_100847910(uint64_t a1, signed int a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    goto LABEL_33;
  }
  uint64_t v5 = a1 + 64;
  do
  {
    signed int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      BOOL v8 = (uint64_t *)v4;
    }
    else {
      BOOL v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (int v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    BOOL v10 = qword_1024193D8;
    os_log_type_t v11 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v11))
    {
      BOOL v12 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        BOOL v12 = (void *)*v12;
      }
      sub_100837FA8(a2, __p);
      if (v31 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v23 = 2080;
      uint64_t v24 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      uint64_t v14 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v14 = (void *)*v14;
      }
      sub_100837FA8(a2, buf);
      if (v25 >= 0) {
        signed int v15 = buf;
      }
      else {
        signed int v15 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      unint64_t v27 = v14;
      __int16 v28 = 2080;
      uint64_t v29 = v15;
      BOOL v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
LABEL_54:
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLGnssController>::cancelTimeoutEvent(Event) [T = CLGnssController]", "%s\n", v16);
      if (v16 != (char *)__p) {
        free(v16);
      }
    }
  }
  else
  {
LABEL_33:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    int v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v18 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        __int16 v18 = (void *)*v18;
      }
      sub_100837FA8(a2, __p);
      if (v31 >= 0) {
        uint64_t v19 = __p;
      }
      else {
        uint64_t v19 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v18;
      __int16 v23 = 2080;
      uint64_t v24 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      dispatch_time_t v20 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        dispatch_time_t v20 = (void *)*v20;
      }
      sub_100837FA8(a2, buf);
      if (v25 >= 0) {
        int v21 = buf;
      }
      else {
        int v21 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      unint64_t v27 = v20;
      __int16 v28 = 2080;
      uint64_t v29 = v21;
      BOOL v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_54;
    }
  }
}

void sub_100847DA4(void *a1, uint64_t a2)
{
  *((unsigned char *)a1 + 784) = a2;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67240192;
    int v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLGC,isAirborne,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::updateAirborneActivity(const BOOL)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (*a1) {
    (*(void (**)(void, uint64_t))(*(void *)*a1 + 272))(*a1, a2);
  }
  uint64_t v5 = a1[138];
  if (v5) {
    sub_1018DC568(v5, a2);
  }
  uint64_t v6 = a1[134];
  if (v6) {
    sub_100A311C4(v6, a2);
  }
  uint64_t v7 = a1[136];
  if (v7) {
    sub_10077A714(v7, a2);
  }
  uint64_t v8 = a1[131];
  if (v8) {
    sub_100F40EE4(v8, a2);
  }
  uint64_t v9 = a1[144];
  if (v9) {
    sub_10192FB1C(v9, a2);
  }
}

void sub_100847FE0(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 1269);
    int v4 = *(unsigned __int8 *)(a1 + 1270);
    *(_DWORD *)long long buf = 67109376;
    int v9 = v3;
    __int16 v10 = 1024;
    int v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGnssController::handleOTADeleteRequest,fIsSimulatorMode,%d,fIsConformanceMode,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::handleOTADeleteRequest()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (*(unsigned char *)(a1 + 1269) || *(unsigned char *)(a1 + 1270))
  {
    if (*(void *)(a1 + 768))
    {
      *(void *)(a1 + 680) = *(void *)(a1 + 600);
      *(_WORD *)(a1 + 688) = *(_WORD *)(a1 + 608);
      sub_10084E014((void *)(a1 + 696), a1 + 616);
      sub_10084E014((void *)(a1 + 728), a1 + 648);
      *(unsigned char *)(a1 + 609) = 1;
      sub_100839F84(a1 + 2624, 15);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLGnssController::handleOTADeleteRequest,simulator/conformance mode not enabled,do nothing", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::handleOTADeleteRequest()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

uint64_t sub_100848334(uint64_t a1, int a2)
{
  int v4 = sub_100846360(a1);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    int v9 = a2;
    __int16 v10 = 1024;
    int v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#clgda,handleGnssDisablementAssertRsp,status,%d,band,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::handleGnssDisablementAssertRsp(const BOOL)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return sub_10084851C(a1 + 560, v4, a2);
}

uint64_t sub_10084851C(uint64_t a1, int a2, char a3)
{
  int v6 = a2;
  char v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *, char *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

void sub_100848578(void *a1, int a2)
{
  uint64_t v4 = a1[154];
  if (v4) {
    sub_100E14A9C(v4, a2);
  }
  char v5 = (double *)a1[116];
  if (v5)
  {
    sub_1018A8828(v5, a2);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v17 = 2082;
      *(void *)&v17[2] = "";
      __int16 v18 = 2082;
      uint64_t v19 = "#rti,updateRtiDownloadRateOnWorkoutOrFocusedNav";
      __int16 v20 = 1026;
      int v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"isFitnessSession\":%{public}hhd}", buf, 0x22u);
    }
  }
  uint64_t v7 = (double *)a1[110];
  if (v7)
  {
    sub_1018A78F4(v7, a2);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v17 = 2082;
      *(void *)&v17[2] = "";
      __int16 v18 = 2082;
      uint64_t v19 = "#ee,updateEeFileDownloadRateOnWorkoutOrFocusedNav";
      __int16 v20 = 1026;
      int v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"isFitnessSession\":%{public}hhd}", buf, 0x22u);
    }
  }
  sub_1000C7F88(buf);
  BOOL v15 = 0;
  char v9 = sub_1000D2988(*(uint64_t *)buf, "EnableRteUpdateOnFitnessSession", &v15);
  if (v15) {
    char v10 = 0;
  }
  else {
    char v10 = v9;
  }
  if (*(void *)v17) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v17);
  }
  if ((v10 & 1) == 0)
  {
    int v11 = (double *)a1[113];
    if (v11)
    {
      sub_1018A81DC(v11, a2, 0);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      int v12 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)int v17 = 2082;
        *(void *)&v17[2] = "";
        __int16 v18 = 2082;
        uint64_t v19 = "#rte,updateRteRofFileDownloadRateOnWorkoutOrFocusedNav";
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"isFitnessSession\":%{public}hhd}", buf, 0x22u);
      }
    }
    uint64_t v13 = (double *)a1[125];
    if (v13)
    {
      sub_1018A81DC(v13, a2, 1);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      uint64_t v14 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)int v17 = 2082;
        *(void *)&v17[2] = "";
        __int16 v18 = 2082;
        uint64_t v19 = "#rof,updateRteRofFileDownloadRateOnWorkoutOrFocusedNav";
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"isFitnessSession\":%{public}hhd}", buf, 0x22u);
      }
    }
  }
}

void sub_1008488F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100848910(void *a1, int a2)
{
  uint64_t v4 = a1[154];
  if (v4) {
    sub_100E148D4(v4, a2);
  }
  char v5 = (double *)a1[116];
  if (v5)
  {
    sub_1018A8828(v5, a2);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v17 = 2082;
      *(void *)&v17[2] = "";
      __int16 v18 = 2082;
      uint64_t v19 = "#rti,updateRtiDownloadRateOnWorkoutOrFocusedNav";
      __int16 v20 = 1026;
      int v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"isTbtSession\":%{public}hhd}", buf, 0x22u);
    }
  }
  uint64_t v7 = (double *)a1[110];
  if (v7)
  {
    sub_1018A78F4(v7, a2);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v17 = 2082;
      *(void *)&v17[2] = "";
      __int16 v18 = 2082;
      uint64_t v19 = "#ee,updateEeFileDownloadRateOnWorkoutOrFocusedNav";
      __int16 v20 = 1026;
      int v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"isTbtSession\":%{public}hhd}", buf, 0x22u);
    }
  }
  sub_1000C7F88(buf);
  BOOL v15 = 0;
  char v9 = sub_1000D2988(*(uint64_t *)buf, "EnableRteUpdateOnTbtSession", &v15);
  if (v15) {
    char v10 = 0;
  }
  else {
    char v10 = v9;
  }
  if (*(void *)v17) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v17);
  }
  if ((v10 & 1) == 0)
  {
    int v11 = (double *)a1[113];
    if (v11)
    {
      sub_1018A81DC(v11, a2, 0);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      int v12 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)int v17 = 2082;
        *(void *)&v17[2] = "";
        __int16 v18 = 2082;
        uint64_t v19 = "#rte,updateRteRofFileDownloadRateOnWorkoutOrFocusedNav";
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"isTbtSession\":%{public}hhd}", buf, 0x22u);
      }
    }
    uint64_t v13 = (double *)a1[125];
    if (v13)
    {
      sub_1018A81DC(v13, a2, 1);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      uint64_t v14 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)int v17 = 2082;
        *(void *)&v17[2] = "";
        __int16 v18 = 2082;
        uint64_t v19 = "#rof,updateRteRofFileDownloadRateOnWorkoutOrFocusedNav";
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"isTbtSession\":%{public}hhd}", buf, 0x22u);
      }
    }
  }
}

void sub_100848C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100848CA8(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 1232);
  if (v2) {
    sub_100E132F8(v2, a2);
  }
}

void sub_100848CB8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(unsigned char *)(a1 + 2617))
    {
      sub_100849098(a1, 0);
      *(unsigned char *)(a1 + 592) = 1;
    }
    if (sub_100743AA0() && (a2 & 1) != 0)
    {
      int v4 = 3;
      goto LABEL_13;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 592))
    {
      *(unsigned char *)(a1 + 592) = 0;
      sub_100849098(a1, 1);
    }
    sub_100743AA0();
  }
  if (sub_100743AA0() | a2 ^ 1) {
    int v4 = 3;
  }
  else {
    int v4 = 0;
  }
LABEL_13:
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  char v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(a1 + 2752);
    int v7 = *(unsigned __int8 *)(a1 + 592);
    *(_DWORD *)long long buf = 67109632;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v4;
    __int16 v16 = 1026;
    int v17 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#clgda,gnss,setAnyClientRegisteredForBasebandCausesL1Interference,curBand,%d,reqBand,%d,fIsBBL1InterferenceModePausedFrequencyAssertion,%{public}d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    char v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::setAnyClientRegisteredForBasebandCausesL1Interference(const BOOL)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  uint64_t v8 = *(void *)a1;
  if (*(void *)a1)
  {
    if (v4 != *(_DWORD *)(a1 + 2752))
    {
      *(_DWORD *)(a1 + 2752) = v4;
      sub_1008460A0((_DWORD *)a1);
      uint64_t v8 = *(void *)a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 360))(v8, a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    char v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#clgda,gnss,setAnyClientRegisteredForBasebandCausesL1Interference,device does not exist", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::setAnyClientRegisteredForBasebandCausesL1Interference(const BOOL)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

void sub_100849098(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tt,gnss,setAnyClientRegisteredWithBasebandTimeFreqTransferAssert,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    char v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::setAnyClientRegisteredWithBasebandTimeFreqTransferAssert(const BOOL)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (*(unsigned __int8 *)(a1 + 2617) != a2
    && *(void *)(a1 + 760)
    && *(void *)(a1 + 768)
    && (sub_10073C798() || sub_10073C6AC()))
  {
    sub_10184F87C(*(uint64_t **)(a1 + 760));
    sub_10184F818(*(unsigned char **)(a1 + 760), a2);
  }
  *(unsigned char *)(a1 + 2617) = a2;
  if ((a2 & 1) == 0) {
    *(unsigned char *)(a1 + 592) = 0;
  }
}

BOOL sub_100849294(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 3016);
  return v2 && sub_100CEDF40(v2, a2);
}

uint64_t sub_1008492C4(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 2552);
  if (result) {
    return sub_10099F74C(result, a2);
  }
  return result;
}

uint64_t sub_1008492D4(uint64_t *a1, char a2)
{
  uint64_t v4 = a1[138];
  if (v4) {
    sub_1018DCCD4(v4, a2);
  }

  return sub_100849320(a1, a2);
}

uint64_t sub_100849320(uint64_t *a1, char a2)
{
  *((unsigned char *)a1 + 2616) = a2;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *((unsigned __int8 *)a1 + 2616);
    *(_DWORD *)long long buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v24 = 2082;
    char v25 = "";
    __int16 v26 = 1026;
    int v27 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"issueEmergencySettingsUpdate\", \"isInDEMDeweightArea\":%{public}hhd}", buf, 0x18u);
  }
  char v5 = *((unsigned char *)a1 + 2616);
  uint64_t v6 = (uint64_t)(a1 + 322);
  int v22 = 0;
  *(void *)long long buf = &v22;
  *((unsigned char *)sub_1008567B8((uint64_t)(a1 + 322), &v22, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 29) = v5 ^ 1;
  char v7 = *((unsigned char *)a1 + 2616);
  int v22 = 0;
  *(void *)long long buf = &v22;
  *((unsigned char *)sub_1008567B8((uint64_t)(a1 + 322), &v22, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 128) = v7;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v22 = 0;
    *(void *)long long buf = &v22;
    int v9 = *((unsigned __int8 *)sub_1008567B8((uint64_t)(a1 + 322), &v22, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 29);
    int v21 = 0;
    *(void *)long long buf = &v21;
    int v10 = *((unsigned __int8 *)sub_1008567B8((uint64_t)(a1 + 322), &v21, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 128);
    *(_DWORD *)long long buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v24 = 2082;
    char v25 = "";
    __int16 v26 = 1026;
    int v27 = 0;
    __int16 v28 = 1026;
    int v29 = v9;
    __int16 v30 = 1026;
    int v31 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Update Emergency Settings\", \"sim\":%{public}d, \"enableEarlyReturnDuringEmergencyMode\":%{public}hhd, \"configureVerticalUncertainty\":%{public}hhd}", buf, 0x24u);
  }
  uint64_t v11 = *a1;
  int v22 = 0;
  *(void *)long long buf = &v22;
  int v12 = sub_1008567B8((uint64_t)(a1 + 322), &v22, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v11 + 328))(v11, v12, 5);
  uint64_t result = sub_1000FFBA8();
  if (result)
  {
    char v14 = *((unsigned char *)a1 + 2616);
    int v22 = 1;
    *(void *)long long buf = &v22;
    *((unsigned char *)sub_1008567B8((uint64_t)(a1 + 322), &v22, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 29) = v14 ^ 1;
    char v15 = *((unsigned char *)a1 + 2616);
    int v22 = 1;
    *(void *)long long buf = &v22;
    *((unsigned char *)sub_1008567B8((uint64_t)(a1 + 322), &v22, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 128) = v15;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    __int16 v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v22 = 1;
      *(void *)long long buf = &v22;
      int v17 = *((unsigned __int8 *)sub_1008567B8((uint64_t)(a1 + 322), &v22, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 29);
      int v21 = 1;
      *(void *)long long buf = &v21;
      int v18 = *((unsigned __int8 *)sub_1008567B8((uint64_t)(a1 + 322), &v21, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 128);
      *(_DWORD *)long long buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v24 = 2082;
      char v25 = "";
      __int16 v26 = 1026;
      int v27 = 1;
      __int16 v28 = 1026;
      int v29 = v17;
      __int16 v30 = 1026;
      int v31 = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Update Emergency Settings\", \"sim\":%{public}d, \"enableEarlyReturnDuringEmergencyMode\":%{public}hhd, \"configureVerticalUncertainty\":%{public}hhd}", buf, 0x24u);
    }
    uint64_t v19 = *a1;
    int v22 = 1;
    *(void *)long long buf = &v22;
    __int16 v20 = sub_1008567B8(v6, &v22, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 3;
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v19 + 328))(v19, v20, 5);
  }
  return result;
}

void sub_1008497C4(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a2 + 4);
    uint64_t v6 = *(void *)(a2 + 12);
    *(_DWORD *)long long buf = 134283777;
    uint64_t v10 = v5;
    __int16 v11 = 2049;
    uint64_t v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "forwardRelayedLocation location,lat,%{private}+.6f,lon,%{private}.6f>", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::forwardRelayedLocation(const CLDaemonLocation &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  uint64_t v7 = *(void *)(a1 + 1048);
  if (v7) {
    sub_100F3ED28(v7, (_OWORD *)a2);
  }
}

void sub_1008499AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 2552);
  if (v2) {
    sub_10099FA20(v2, a2);
  }
}

void sub_1008499BC(_DWORD *a1, uint64_t a2)
{
  buf[0] = 0;
  unsigned __int8 v4 = sub_1000D2988(a2, "IsBeidouDisabled", (BOOL *)buf);
  if ((v4 & (buf[0] != 0)) != 0) {
    int v5 = 4;
  }
  else {
    int v5 = 0;
  }
  buf[0] = 0;
  unsigned __int8 v6 = sub_1000D2988(a2, "IsGalileoDisabled", (BOOL *)buf);
  if ((v6 & (buf[0] != 0)) != 0) {
    int v7 = 8;
  }
  else {
    int v7 = 0;
  }
  int v8 = v7 | v5;
  buf[0] = 0;
  unsigned __int8 v9 = sub_1000D2988(a2, "IsGlonassDisabled", (BOOL *)buf);
  if ((v9 & (buf[0] != 0)) != 0) {
    int v10 = 2;
  }
  else {
    int v10 = 0;
  }
  buf[0] = 0;
  int v11 = sub_1000D2988(a2, "IsGpsDisabled", (BOOL *)buf);
  if (buf[0]) {
    int v12 = v11;
  }
  else {
    int v12 = 0;
  }
  int v13 = v8 | v10 | v12;
  buf[0] = 0;
  unsigned __int8 v14 = sub_1000D2988(a2, "IsQzssDisabled", (BOOL *)buf);
  if ((v14 & (buf[0] != 0)) != 0) {
    int v15 = 16;
  }
  else {
    int v15 = 0;
  }
  buf[0] = 0;
  unsigned __int8 v16 = sub_1000D2988(a2, "IsNavicDisabled", (BOOL *)buf);
  if ((v16 & (buf[0] != 0)) != 0) {
    int v17 = 32;
  }
  else {
    int v17 = 0;
  }
  int v18 = v13 | v15 | v17;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v19 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67240192;
    int v22 = v18;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#GnssConstControl,setGnssConstellationSettingsFromMobileAssets,0x%{public}x", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    __int16 v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::setGnssConstellationSettingsFromMobileAssets(const CLNameValuePair &)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  if (*(void *)a1) {
    *(_DWORD *)(*(void *)a1 + 1280) = a1[316] | v18;
  }
}

uint64_t *sub_100849CC0(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result)
  {
    *(void *)(v2 + 1304) = a2;
    *(unsigned char *)(v2 + 1312) = 1;
  }
  return result;
}

void sub_100849CD8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 1024))
  {
    unsigned __int16 v3 = sub_1018E924C(a1 + 2800, a2);
    if (v3 >= 0x100u)
    {
      if ((_BYTE)v3)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        unsigned __int8 v4 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "knownACFileConfig,force download by MA", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
          }
          unsigned __int8 v6 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::setGnssKnownACSettingsFromMobileAssets(const CLNameValuePair &)", "%s\n", v6);
          if (v6 != (char *)buf) {
            free(v6);
          }
        }
        sub_1018A5A34(*(void *)(a1 + 1024), 1);
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        int v5 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "knownACFileConfig,stop download by MA", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
          }
          int v7 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::setGnssKnownACSettingsFromMobileAssets(const CLNameValuePair &)", "%s\n", v7);
          if (v7 != (char *)buf) {
            free(v7);
          }
        }
        sub_1018A6294(*(void *)(a1 + 1024));
      }
    }
  }
}

void sub_100849FD0(void *a1, uint64_t a2, _DWORD *a3, char *a4)
{
  if (*a3 == 15)
  {
    uint64_t v6 = a1[154];
    if (v6) {
      sub_100E134C0(v6, *a4);
    }
    int v7 = (unsigned char *)a1[156];
    if (v7) {
      sub_10100FCC0(v7, *a4);
    }
    uint64_t v8 = a1[138];
    if (v8) {
      sub_1018DC72C(v8, *a4);
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    unsigned __int8 v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v10 = *a4;
      v11[0] = 68289282;
      v11[1] = 0;
      __int16 v12 = 2082;
      int v13 = "";
      __int16 v14 = 1026;
      int v15 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onDaemonStatusNotification\", \"isBatterySaverModeEnabled\":%{public}hhd}", (uint8_t *)v11, 0x18u);
    }
  }
}

uint64_t sub_10084A0FC()
{
  if (sub_10015F760()) {
    int v0 = 0;
  }
  else {
    int v0 = 2;
  }
  if (sub_10015F760()) {
    int v1 = 0;
  }
  else {
    int v1 = 16;
  }
  int v2 = v1 | v0;
  if (sub_10015F760()) {
    int v3 = 0;
  }
  else {
    int v3 = 8;
  }
  if (sub_100740ABC()) {
    int v4 = 0;
  }
  else {
    int v4 = 4;
  }
  int v5 = v2 | v3 | v4;
  if (sub_100740B14()) {
    int v6 = 0;
  }
  else {
    int v6 = 32;
  }
  return v5 | v6;
}

void sub_10084A178(uint64_t a1)
{
  if (*(void *)(a1 + 2552)) {
    sub_10099FBE4();
  }
}

void sub_10084A188(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67240192;
    int v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#timingadvance,isTimingAdvanceFeatureEnabled,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::isTimingAdvanceFeatureEnabled(const BOOL)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (*(void *)a1) {
    *(unsigned char *)(*(void *)a1 + 1290) = a2;
  }
}

void sub_10084A344(uint64_t *a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "GnssAssistanceFileSettings,MA-OTA,received notification", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    LOWORD(v20.__r_.__value_.__l.__data_) = 0;
    __int16 v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::setGnssAssistanceFileSettingsFromMobileAssets(const CLNameValuePair &)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  sub_10084AA68(a1 + 113, a2, "EnableGnssAssistanceRte");
  sub_10084AA68(a1 + 122, a2, "EnableGnssAssistanceBce");
  sub_10084AA68(a1 + 125, a2, "EnableGnssAssistanceRof");
  sub_10084AA68(a1 + 119, a2, "EnableGnssAssistanceApc");
  if (a1[116])
  {
    sub_100134750(&v20, "ConfigureGnssAssistanceRti");
    sub_1000E9354(v19);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v5 = &v20;
    }
    else {
      int v5 = (std::string *)v20.__r_.__value_.__r.__words[0];
    }
    if (sub_100012960(a2, (const char *)v5, v19))
    {
      double v17 = 0.0;
      double v18 = 0.0;
      sub_1018A85CC(a1[116], &v18, &v17, 0);
      std::string::assign(&v20, "UpdateRateCellSeconds");
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v6 = &v20;
      }
      else {
        int v6 = (std::string *)v20.__r_.__value_.__r.__words[0];
      }
      if (sub_1000A699C((uint64_t)v19, (const char *)v6, &v18))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        int v7 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134349056;
          double v24 = v18;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "GnssAssistanceFileSettings,MA-OTA,obtained RTI config rate,updateRateCellSec,%{public}.2f", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
          }
          int v21 = 134349056;
          double v22 = v18;
          int v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::setGnssAssistanceFileSettingsFromMobileAssets(const CLNameValuePair &)", "%s\n", v15);
          if (v15 != (char *)buf) {
            free(v15);
          }
        }
      }
      std::string::assign(&v20, "UpdateRateWifiSeconds");
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v8 = &v20;
      }
      else {
        uint64_t v8 = (std::string *)v20.__r_.__value_.__r.__words[0];
      }
      if (sub_1000A699C((uint64_t)v19, (const char *)v8, &v17))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        unsigned __int8 v9 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134349056;
          double v24 = v17;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "GnssAssistanceFileSettings,MA-OTA,obtained RTI config rate,updateRateWifiSec,%{public}.2f", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
          }
          int v21 = 134349056;
          double v22 = v17;
          unsigned __int8 v16 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::setGnssAssistanceFileSettingsFromMobileAssets(const CLNameValuePair &)", "%s\n", v16);
          if (v16 != (char *)buf) {
            free(v16);
          }
        }
      }
      sub_1018A917C(a1[116], v18, v17);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      int v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        int v11 = &v20;
        if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v11 = (std::string *)v20.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)long long buf = 136446210;
        double v24 = *(double *)&v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "GnssAssistanceFileSettings,MA-OTA,missing key,%{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        int v13 = &v20;
        if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v13 = (std::string *)v20.__r_.__value_.__r.__words[0];
        }
        int v21 = 136446210;
        double v22 = *(double *)&v13;
        __int16 v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::setGnssAssistanceFileSettingsFromMobileAssets(const CLNameValuePair &)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
    }
    sub_10013F3C4(v19);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
}

void sub_10084AA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10084AA68(uint64_t *a1, uint64_t a2, const char *a3)
{
  if (*a1)
  {
    char v7 = 1;
    if ((sub_1000D2988(a2, a3, (BOOL *)&v7) & 1) == 0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      int v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136446466;
        int v13 = a3;
        __int16 v14 = 1026;
        int v15 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "GnssAssistanceFileSettings,MA-OTA,missing key,%{public}s,doEnable,%{public}d", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        int v8 = 136446466;
        unsigned __int8 v9 = a3;
        __int16 v10 = 1026;
        int v11 = v7;
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "auto CLGnssController::setGnssAssistanceFileSettingsFromMobileAssets(const CLNameValuePair &)::(anonymous class)::operator()(std::unique_ptr<CLGnssAssistanceFileDownloader> &, const CLNameValuePair &, const char *const) const", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
    }
    sub_1018A8B8C(*a1, v7);
  }
}

void sub_10084AC6C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2)
  {
    if (*(_DWORD *)a2 == 1 && (uint64_t v4 = *(int *)(a2 + 8), v4 < 3)) {
      unsigned int v5 = dword_101D505E8[v4];
    }
    else {
      unsigned int v5 = 0;
    }
  }
  else
  {
    unsigned int v5 = 1;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(unsigned __int8 *)(a2 + 4);
    *(_DWORD *)long long buf = 67240448;
    unsigned int v11 = v5;
    __int16 v12 = 1026;
    int v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "feedRhythmicGnssStatus,eventType,%{public}d,eventStatus,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    unsigned __int8 v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::feedRhythmicGnssStatus(const CLLocationProvider_Type::CLRhythmicGnssStatusUpdate &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  uint64_t v8 = *(void *)(a1 + 1184);
  if (v8) {
    sub_101895780(v8, v5, *(unsigned __int8 *)(a2 + 4));
  }
}

void sub_10084AE90(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 2792) = a2;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 2792);
    *(_DWORD *)long long buf = 67240192;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "GnssDebounceUserBenefitLow,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    unsigned int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::setGnssDebounceUserBenefitLow(const BOOL)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_10084B048(uint64_t a1, int a2, int a3, double a4)
{
  if (!*(void *)(a1 + 1184)) {
    return;
  }
  if (sub_100119964())
  {
    int v8 = sub_10016CCBC();
    if (v8)
    {
      double v9 = 24.0;
      if (!a2)
      {
LABEL_18:
        unsigned int v11 = *(double **)(a1 + 1184);
        sub_101895CE8(v11, v9, a4);
        return;
      }
    }
    if (!a2) {
      return;
    }
  }
  else
  {
    int v8 = 0;
    if (!a2) {
      return;
    }
  }
  if ((sub_10073C990() & 1) != 0 || (double v10 = 0.0, sub_10073C750()))
  {
    if (sub_10016CCBC()) {
      double v10 = 6.0;
    }
    else {
      double v10 = 0.0;
    }
  }
  double v9 = 30.0;
  if (!v8) {
    double v9 = v10;
  }
  if (a3) {
    double v9 = v9 - *(double *)(a1 + 3072);
  }
  if (v9 > 0.0) {
    goto LABEL_18;
  }
}

uint64_t sub_10084B12C(uint64_t a1)
{
  memset(&v49, 0, sizeof(v49));
  sub_1000C7F88(buf);
  BOOL v2 = sub_1004D1284((uint64_t)buf[0].__r_.__value_.__l.__data_, "GnssKnownACFileUrl", &v49);
  if (buf[0].__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_);
  }
  if (v2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v4 = &v49;
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v4 = (std::string *)v49.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "knownACFile,user defined url %s", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      uint64_t v36 = &v49;
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v36 = (std::string *)v49.__r_.__value_.__r.__words[0];
      }
      LODWORD(v54[0]) = 136315138;
      *(void **)((char *)v54 + 4) = v36;
      unint64_t v37 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssController::didKnownACSourceUrlChange()", "%s\n", (const char *)v37);
      if (v37 != buf) {
        free(v37);
      }
    }
    std::string::size_type size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v49.__r_.__value_.__l.__size_;
    }
    if (!size)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      int v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "knownACFile,using on device file", (uint8_t *)buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        LOWORD(v54[0]) = 0;
        int v44 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssController::didKnownACSourceUrlChange()", "%s\n", (const char *)v44);
        if (v44 != buf) {
          free(v44);
        }
      }
      int v7 = *(std::__shared_weak_count **)(a1 + 1016);
      *(_OWORD *)(a1 + 1008) = 0u;
      if (v7) {
        sub_1000DB0A0(v7);
      }
      sub_1018E7114(a1 + 2800);
LABEL_41:
      uint64_t v18 = 0;
      goto LABEL_94;
    }
  }
  else
  {
    int v8 = (void *)GEOURLString();
    double v9 = v8;
    if (!v8 || ![v8 length])
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      double v17 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "knownACFile, URL is nil or empty", (uint8_t *)buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        LOWORD(v54[0]) = 0;
        __int16 v38 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGnssController::didKnownACSourceUrlChange()", "%s\n", (const char *)v38);
        if (v38 != buf) {
          free(v38);
        }
      }
      goto LABEL_41;
    }
    std::string::assign(&v49, (const std::string::value_type *)[v9 UTF8String]);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    double v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v11 = &v49;
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unsigned int v11 = (std::string *)v49.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "knownACFile,source url is %s", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      __int16 v42 = &v49;
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        __int16 v42 = (std::string *)v49.__r_.__value_.__r.__words[0];
      }
      LODWORD(v54[0]) = 136315138;
      *(void **)((char *)v54 + 4) = v42;
      __int16 v43 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssController::didKnownACSourceUrlChange()", "%s\n", (const char *)v43);
      if (v43 != buf) {
        free(v43);
      }
    }
  }
  __int16 v12 = (char *)sub_1000A6958();
  sub_1000A5670(v12, (uint64_t)buf);
  int v13 = std::string::append(buf, "ligl.bin");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  std::string::size_type v55 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v54 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  int v15 = *(long long **)(a1 + 1008);
  if (!v15)
  {
    sub_100857870((long long *)&v49, (long long *)v54, buf);
    long long v19 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = 0uLL;
    std::string v20 = *(std::__shared_weak_count **)(a1 + 1016);
    *(_OWORD *)(a1 + 1008) = v19;
    if (v20)
    {
      sub_1000DB0A0(v20);
      if (buf[0].__r_.__value_.__l.__size_) {
        sub_1000DB0A0((std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_);
      }
    }
    uint64_t v18 = 1;
    goto LABEL_92;
  }
  if (*((char *)v15 + 23) < 0)
  {
    sub_1000DC48C(__p, *(void **)v15, *((void *)v15 + 1));
  }
  else
  {
    long long v16 = *v15;
    uint64_t v48 = *((void *)v15 + 2);
    *(_OWORD *)std::string __p = v16;
  }
  uint64_t v21 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v22 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v22 = v49.__r_.__value_.__l.__size_;
  }
  __int16 v23 = (void *)HIBYTE(v48);
  if (v48 < 0) {
    __int16 v23 = __p[1];
  }
  if ((void *)v22 != v23)
  {
LABEL_63:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    __int16 v26 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v27 = __p;
      if (v48 < 0) {
        int v27 = (void **)__p[0];
      }
      __int16 v28 = &v49;
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        __int16 v28 = (std::string *)v49.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v28;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "knownACFile,url changed from, %s,to, %s", (uint8_t *)buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      __int16 v39 = __p;
      if (v48 < 0) {
        __int16 v39 = (void **)__p[0];
      }
      unsigned int v40 = &v49;
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unsigned int v40 = (std::string *)v49.__r_.__value_.__r.__words[0];
      }
      int v50 = 136315394;
      double v51 = *(double *)&v39;
      __int16 v52 = 2080;
      __int16 v53 = v40;
      unsigned int v41 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssController::didKnownACSourceUrlChange()", "%s\n", (const char *)v41);
      if (v41 != buf) {
        free(v41);
      }
    }
    double Current = CFAbsoluteTimeGetCurrent();
    if (vabdd_f64(Current, *(double *)(a1 + 1032)) >= 86400.0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      int v32 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 134217984;
        *(double *)((char *)buf[0].__r_.__value_.__r.__words + 4) = Current;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "knownACFile,first url change at,%.1f", (uint8_t *)buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        int v50 = 134217984;
        double v51 = Current;
        char v45 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssController::didKnownACSourceUrlChange()", "%s\n", (const char *)v45);
        if (v45 != buf) {
          free(v45);
        }
      }
      *(double *)(a1 + 1032) = Current;
      *(_DWORD *)(a1 + 1040) = 1;
    }
    else
    {
      unsigned int v30 = *(_DWORD *)(a1 + 1040) + 1;
      *(_DWORD *)(a1 + 1040) = v30;
      if (v30 >= 3)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        int v31 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "knownACFile,url change limit hit", (uint8_t *)buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
          }
          LOWORD(v50) = 0;
          uint64_t v46 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssController::didKnownACSourceUrlChange()", "%s\n", (const char *)v46);
          if (v46 != buf) {
            free(v46);
          }
        }
        goto LABEL_79;
      }
    }
    sub_100857870((long long *)&v49, (long long *)v54, buf);
    long long v33 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
    *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v34 = *(std::__shared_weak_count **)(a1 + 1016);
    *(_OWORD *)(a1 + 1008) = v33;
    if (v34)
    {
      sub_1000DB0A0(v34);
      if (buf[0].__r_.__value_.__l.__size_) {
        sub_1000DB0A0((std::__shared_weak_count *)buf[0].__r_.__value_.__l.__size_);
      }
    }
    uint64_t v18 = 1;
    goto LABEL_90;
  }
  if (v48 >= 0) {
    double v24 = __p;
  }
  else {
    double v24 = (void **)__p[0];
  }
  if ((*((unsigned char *)&v49.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v49.__r_.__value_.__l.__data_, v24, v49.__r_.__value_.__l.__size_)) {
      goto LABEL_63;
    }
  }
  else if (*((unsigned char *)&v49.__r_.__value_.__s + 23))
  {
    char v25 = &v49;
    while (v25->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v24)
    {
      char v25 = (std::string *)((char *)v25 + 1);
      double v24 = (void **)((char *)v24 + 1);
      if (!--v21) {
        goto LABEL_79;
      }
    }
    goto LABEL_63;
  }
LABEL_79:
  uint64_t v18 = 0;
LABEL_90:
  if (SHIBYTE(v48) < 0) {
    operator delete(__p[0]);
  }
LABEL_92:
  if (SHIBYTE(v55) < 0) {
    operator delete(v54[0]);
  }
LABEL_94:
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  return v18;
}

void sub_10084BD7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_10084BE24(uint64_t a1)
{
  if (*(void *)(a1 + 1008))
  {
    sub_1000C7F88(buf);
    uint64_t v8 = 0;
    sub_1000A699C(*(uint64_t *)buf, "GnssKnownACUpdateRateCellSeconds", &v8);
    if (*(void *)v10) {
      sub_1000DB0A0(*(std::__shared_weak_count **)v10);
    }
    sub_1000C7F88(buf);
    uint64_t v8 = 0;
    sub_1000A699C(*(uint64_t *)buf, "GnssKnownACUpdateRateWiFiSeconds", &v8);
    if (*(void *)v10) {
      sub_1000DB0A0(*(std::__shared_weak_count **)v10);
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    BOOL v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v3 = *(uint64_t **)(a1 + 1008);
      int v4 = v3;
      if (*((char *)v3 + 23) < 0) {
        int v4 = (uint64_t *)*v3;
      }
      unsigned int v5 = v3 + 3;
      if (*((char *)v3 + 47) < 0) {
        unsigned int v5 = (void *)*v5;
      }
      *(_DWORD *)long long buf = 68289795;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)double v10 = 2082;
      *(void *)&_DWORD v10[2] = "";
      __int16 v11 = 2082;
      __int16 v12 = "knownACFile";
      __int16 v13 = 2081;
      long long v14 = v4;
      __int16 v15 = 2081;
      long long v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"source\":%{private, location:escape_only}s, \"destination\":%{private, location:escape_only}s}", buf, 0x30u);
    }
    operator new();
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "knownACFile, exiting as KnownAC file ptr is null", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    LOWORD(v8) = 0;
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssController::modifyKnownACDownloader()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void sub_10084C1B8(uint64_t a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  sub_1008530E0((uint64_t *)va);
  if (a4) {
    sub_1000DB0A0(a4);
  }
  operator delete();
}

uint64_t sub_10084C210(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    if (*(char *)(v3 + 47) < 0)
    {
      if (!*(void *)(v3 + 32)) {
        goto LABEL_23;
      }
    }
    else if (!*(unsigned char *)(v3 + 47))
    {
      goto LABEL_23;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    unsigned int v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (void *)(*a2 + 24);
      if (*(char *)(*a2 + 47) < 0) {
        int v6 = (void *)*v6;
      }
      *(_DWORD *)long long buf = 136446210;
      long long v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "file,%{public}s,ClassD", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      __int16 v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssController::actOnKnownACDownload(std::shared_ptr<CLGnssAssistanceFile> &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    int v7 = (const char *)(*a2 + 24);
    if (*(char *)(*a2 + 47) < 0) {
      int v7 = *(const char **)v7;
    }
    if (!sub_1004BF004(v7, 4))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      uint64_t v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        double v9 = (void *)(*a2 + 24);
        if (*(char *)(*a2 + 47) < 0) {
          double v9 = (void *)*v9;
        }
        *(_DWORD *)long long buf = 136446210;
        long long v14 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning,cannot set protection class,assistance file,%{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        __int16 v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssController::actOnKnownACDownload(std::shared_ptr<CLGnssAssistanceFile> &)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
    }
  }
LABEL_23:
  sub_1018E7114(a1 + 2800);
  return sub_10084B12C(a1);
}

void sub_10084C5AC(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = sub_1009EC0A8();
    if (v2)
    {
      sub_1009D26C4(v2, 0, a1);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      unsigned int v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "GNSS_SEN,Could not get the sensor to deregister from", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static void CLGnssSensorAdapter<CLAccelerometer, 0>::DispatcherDeleter(Dispatcher *) [SensorType = CLAccelerometer, notification = 0]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 8))(a1);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "GNSS_SEN,Invalid dispatcher passed to Deleter", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static void CLGnssSensorAdapter<CLAccelerometer, 0>::DispatcherDeleter(Dispatcher *) [SensorType = CLAccelerometer, notification = 0]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_10084C8B4(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = sub_100A08A84();
    if (v2)
    {
      sub_1009D26C4(v2, 0, a1);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      unsigned int v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "GNSS_SEN,Could not get the sensor to deregister from", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static void CLGnssSensorAdapter<CLGyro, 0>::DispatcherDeleter(Dispatcher *) [SensorType = CLGyro, notification = 0]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 8))(a1);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "GNSS_SEN,Invalid dispatcher passed to Deleter", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static void CLGnssSensorAdapter<CLGyro, 0>::DispatcherDeleter(Dispatcher *) [SensorType = CLGyro, notification = 0]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

uint64_t sub_10084CBBC(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(unsigned char *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = xmmword_101D1C570;
  *(_OWORD *)(a1 + 64) = _Q0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 100) = -1;
  *(void *)(a1 + 108) = -1;
  *(_OWORD *)(a1 + 120) = _Q0;
  *(_DWORD *)(a1 + 136) = 0;
  __asm { FMOV            V1.2S, #-1.0 }
  *(void *)(a1 + 140) = _D1;
  *(_DWORD *)(a1 + 148) = 26;
  *(_WORD *)(a1 + 152) = 0;
  *(void *)(a1 + 156) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 188) = 4;
  *(void *)(a1 + 200) = -1;
  *(_OWORD *)(a1 + 248) = _Q0;
  *(_OWORD *)(a1 + 384) = xmmword_101D82F18;
  *(_OWORD *)(a1 + 400) = xmmword_101D82F28;
  *(_OWORD *)(a1 + 416) = xmmword_101D82F38;
  *(_OWORD *)(a1 + 428) = *(long long *)((char *)&xmmword_101D82F38 + 12);
  *(_OWORD *)(a1 + 320) = xmmword_101D82ED8;
  *(_OWORD *)(a1 + 336) = xmmword_101D82EE8;
  *(_OWORD *)(a1 + 352) = xmmword_101D82EF8;
  *(_OWORD *)(a1 + 368) = xmmword_101D82F08;
  *(_OWORD *)(a1 + 288) = xmmword_101D82EB8;
  *(_OWORD *)(a1 + 304) = xmmword_101D82EC8;
  *(_OWORD *)(a1 + 540) = xmmword_101D82F18;
  *(_OWORD *)(a1 + 556) = xmmword_101D82F28;
  *(_OWORD *)(a1 + 572) = xmmword_101D82F38;
  *(_OWORD *)(a1 + 476) = xmmword_101D82ED8;
  *(_OWORD *)(a1 + 492) = xmmword_101D82EE8;
  *(_OWORD *)(a1 + 508) = xmmword_101D82EF8;
  *(_OWORD *)(a1 + 524) = xmmword_101D82F08;
  *(_OWORD *)(a1 + 444) = xmmword_101D82EB8;
  *(_OWORD *)(a1 + 460) = xmmword_101D82EC8;
  *(_OWORD *)(a1 + 712) = xmmword_101D82F28;
  *(_OWORD *)(a1 + 728) = xmmword_101D82F38;
  *(_OWORD *)(a1 + 740) = *(long long *)((char *)&xmmword_101D82F38 + 12);
  *(_OWORD *)(a1 + 648) = xmmword_101D82EE8;
  *(_OWORD *)(a1 + 664) = xmmword_101D82EF8;
  *(_OWORD *)(a1 + 680) = xmmword_101D82F08;
  *(_OWORD *)(a1 + 696) = xmmword_101D82F18;
  *(_OWORD *)(a1 + 584) = *(long long *)((char *)&xmmword_101D82F38 + 12);
  *(_OWORD *)(a1 + 600) = xmmword_101D82EB8;
  *(_OWORD *)(a1 + 616) = xmmword_101D82EC8;
  *(_OWORD *)(a1 + 632) = xmmword_101D82ED8;
  *(_OWORD *)(a1 + 852) = xmmword_101D82F18;
  *(_OWORD *)(a1 + 868) = xmmword_101D82F28;
  *(_OWORD *)(a1 + 884) = xmmword_101D82F38;
  *(_OWORD *)(a1 + 788) = xmmword_101D82ED8;
  *(_OWORD *)(a1 + 804) = xmmword_101D82EE8;
  *(_DWORD *)(a1 + 164) = -1;
  *(_WORD *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 170) = 0;
  *(void *)(a1 + 176) = -1;
  *(unsigned char *)(a1 + 184) = 0;
  *(_WORD *)(a1 + 196) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 212) = 0;
  *(void *)(a1 + 238) = 0;
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 264) = 0xBFF0000000000000;
  *(void *)(a1 + 272) = 0xBFF0000000000000;
  *(void *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 820) = xmmword_101D82EF8;
  *(_OWORD *)(a1 + 836) = xmmword_101D82F08;
  *(_OWORD *)(a1 + 756) = xmmword_101D82EB8;
  *(_OWORD *)(a1 + 772) = xmmword_101D82EC8;
  *(void *)(a1 + 933) = 0;
  *(void *)(a1 + 928) = 0;
  *(_OWORD *)(a1 + 896) = *(long long *)((char *)&xmmword_101D82F38 + 12);
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 944) = xmmword_101D47CB0;
  sub_100134750((void *)(a1 + 960), "");
  sub_100134750((void *)(a1 + 984), "");
  *(_DWORD *)(a1 + 1016) = 0;
  *(void *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(void *)(a1 + 1040) = 0xBFF0000000000000;
  *(void *)&long long v8 = -1;
  *((void *)&v8 + 1) = -1;
  *(void *)(a1 + 1048) = -1;
  *(_DWORD *)(a1 + 1056) = -1;
  *(void *)(a1 + 1060) = 0;
  *(void *)(a1 + 1065) = 0;
  *(_DWORD *)(a1 + 1076) = -1;
  *(void *)(a1 + 1080) = 0;
  *(_DWORD *)(a1 + 1087) = 0;
  *(_OWORD *)(a1 + 1092) = 0u;
  *(_OWORD *)(a1 + 1108) = 0u;
  *(_OWORD *)(a1 + 1124) = 0u;
  *(void *)(a1 + 1140) = 0;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(void *)(a1 + 1232) = -1;
  *(_OWORD *)(a1 + 1216) = v8;
  *(_OWORD *)(a1 + 1200) = v8;
  return a1;
}

void sub_10084CE30(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 983) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_10084CE4C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10084CE7C(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10084CEB0(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_10084CEE4()
{
}

void *sub_10084CEF8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CB318;
  result[1] = v3;
  return result;
}

uint64_t sub_10084CF40(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CB318;
  a2[1] = v2;
  return result;
}

uint64_t sub_10084CF6C(uint64_t a1)
{
  return sub_10083B050(*(void *)(a1 + 8));
}

uint64_t sub_10084CF74(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10084CFB4()
{
}

void sub_10084CFC4()
{
}

void *sub_10084CFD8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CB398;
  result[1] = v3;
  return result;
}

uint64_t sub_10084D020(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CB398;
  a2[1] = v2;
  return result;
}

uint64_t sub_10084D04C(uint64_t a1)
{
  return sub_10083B1F4(*(void *)(a1 + 8));
}

uint64_t sub_10084D054(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10084D094()
{
}

void sub_10084D0A4()
{
}

void *sub_10084D0B8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CB418;
  result[1] = v3;
  return result;
}

uint64_t sub_10084D100(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CB418;
  a2[1] = v2;
  return result;
}

uint64_t sub_10084D12C(uint64_t a1)
{
  return sub_10083B540(*(void *)(a1 + 8));
}

uint64_t sub_10084D134(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10084D174()
{
}

void sub_10084D184()
{
}

void *sub_10084D198(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CB498;
  result[1] = v3;
  return result;
}

uint64_t sub_10084D1E0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CB498;
  a2[1] = v2;
  return result;
}

uint64_t sub_10084D20C(uint64_t a1)
{
  return sub_10083B39C(*(void *)(a1 + 8));
}

uint64_t sub_10084D214(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10084D254()
{
}

void sub_10084D264()
{
}

void *sub_10084D278(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CB518;
  result[1] = v3;
  return result;
}

uint64_t sub_10084D2C0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CB518;
  a2[1] = v2;
  return result;
}

uint64_t sub_10084D2EC(uint64_t a1)
{
  return sub_10083B6E8(*(void *)(a1 + 8));
}

uint64_t sub_10084D2F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10084D334()
{
}

void sub_10084D344()
{
}

void *sub_10084D358(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CB598;
  result[1] = v3;
  return result;
}

uint64_t sub_10084D3A0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CB598;
  a2[1] = v2;
  return result;
}

uint64_t sub_10084D3CC(uint64_t a1)
{
  return sub_10083B890(*(void *)(a1 + 8));
}

uint64_t sub_10084D3D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10084D414()
{
}

void sub_10084D424()
{
}

void *sub_10084D438(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CB618;
  result[1] = v3;
  return result;
}

uint64_t sub_10084D480(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CB618;
  a2[1] = v2;
  return result;
}

void sub_10084D4AC(uint64_t a1)
{
}

uint64_t sub_10084D4B4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10084D4F4()
{
}

void sub_10084D504()
{
}

void *sub_10084D518(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CB698;
  result[1] = v3;
  return result;
}

uint64_t sub_10084D560(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CB698;
  a2[1] = v2;
  return result;
}

uint64_t sub_10084D58C(uint64_t a1)
{
  return sub_100848334(*(void *)(a1 + 8), 1);
}

uint64_t sub_10084D598(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10084D5D8()
{
}

void sub_10084D5E8()
{
}

void *sub_10084D5FC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CB718;
  result[1] = v3;
  return result;
}

uint64_t sub_10084D644(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CB718;
  a2[1] = v2;
  return result;
}

uint64_t sub_10084D670(uint64_t a1)
{
  return sub_100848334(*(void *)(a1 + 8), 0);
}

uint64_t sub_10084D67C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10084D6BC()
{
}

double sub_10084D6C8(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  *(_DWORD *)a1 = *a2;
  uint64_t v3 = *a3;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a3 + 8);
  *(void *)(a1 + 8) = v3;
  long long v5 = *((_OWORD *)a3 + 5);
  long long v4 = *((_OWORD *)a3 + 6);
  uint64_t v6 = a3[14];
  *(_OWORD *)(a1 + 72) = *((_OWORD *)a3 + 4);
  *(void *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v4;
  *(_OWORD *)(a1 + 88) = v5;
  long long v7 = *((_OWORD *)a3 + 1);
  long long v8 = *((_OWORD *)a3 + 2);
  *(_OWORD *)(a1 + 56) = *((_OWORD *)a3 + 3);
  *(_OWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 24) = v7;
  long long v9 = *(_OWORD *)(a3 + 15);
  *(void *)(a1 + 144) = a3[17];
  *(_OWORD *)(a1 + 128) = v9;
  double result = 0.0;
  *((_OWORD *)a3 + 8) = 0u;
  a3[15] = 0;
  *(void *)(a1 + 152) = a3[18];
  long long v11 = *(_OWORD *)(a3 + 19);
  *(void *)(a1 + 176) = a3[21];
  *(_OWORD *)(a1 + 160) = v11;
  *((_OWORD *)a3 + 10) = 0u;
  a3[19] = 0;
  long long v12 = *((_OWORD *)a3 + 11);
  *(_OWORD *)(a1 + 200) = *((_OWORD *)a3 + 12);
  *(_OWORD *)(a1 + 184) = v12;
  long long v13 = *((_OWORD *)a3 + 13);
  *(void *)(a1 + 232) = a3[28];
  *(_OWORD *)(a1 + 216) = v13;
  *(_OWORD *)(a3 + 27) = 0u;
  a3[26] = 0;
  *(unsigned char *)(a1 + 240) = *((unsigned char *)a3 + 232);
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 248) = *((_OWORD *)a3 + 15);
  *(void *)(a1 + 264) = a3[32];
  a3[32] = 0;
  *((_OWORD *)a3 + 15) = 0u;
  *(_DWORD *)(a1 + 272) = *((_DWORD *)a3 + 66);
  __int16 v14 = *((_WORD *)a3 + 136);
  *(unsigned char *)(a1 + 282) = *((unsigned char *)a3 + 274);
  *(_WORD *)(a1 + 280) = v14;
  long long v15 = *(_OWORD *)(a3 + 35);
  *(void *)(a1 + 304) = a3[37];
  *(_OWORD *)(a1 + 288) = v15;
  a3[35] = 0;
  *((_OWORD *)a3 + 18) = 0u;
  long long v16 = *((_OWORD *)a3 + 19);
  *(void *)(a1 + 328) = a3[40];
  *(_OWORD *)(a1 + 312) = v16;
  *(_OWORD *)(a3 + 39) = 0u;
  a3[38] = 0;
  long long v17 = *(_OWORD *)(a3 + 41);
  *(void *)(a1 + 352) = a3[43];
  *(_OWORD *)(a1 + 336) = v17;
  a3[43] = 0;
  *(_OWORD *)(a3 + 41) = 0u;
  long long v18 = *((_OWORD *)a3 + 22);
  *(void *)(a1 + 376) = a3[46];
  *(_OWORD *)(a1 + 360) = v18;
  long long v19 = *(_OWORD *)(a3 + 47);
  *(void *)(a1 + 400) = a3[49];
  *(_OWORD *)(a1 + 384) = v19;
  a3[49] = 0;
  *(_OWORD *)(a3 + 47) = 0u;
  *(_WORD *)(a1 + 408) = *((_WORD *)a3 + 200);
  *(void *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a3 + 51);
  *(void *)(a1 + 432) = a3[53];
  a3[53] = 0;
  *(_OWORD *)(a3 + 51) = 0u;
  long long v20 = *((_OWORD *)a3 + 33);
  long long v22 = *((_OWORD *)a3 + 30);
  long long v21 = *((_OWORD *)a3 + 31);
  *(_OWORD *)(a1 + 520) = *((_OWORD *)a3 + 32);
  *(_OWORD *)(a1 + 536) = v20;
  *(_OWORD *)(a1 + 488) = v22;
  *(_OWORD *)(a1 + 504) = v21;
  long long v24 = *((_OWORD *)a3 + 35);
  long long v23 = *((_OWORD *)a3 + 36);
  long long v25 = *((_OWORD *)a3 + 34);
  *(_OWORD *)(a1 + 596) = *(_OWORD *)((char *)a3 + 588);
  *(_OWORD *)(a1 + 568) = v24;
  *(_OWORD *)(a1 + 584) = v23;
  *(_OWORD *)(a1 + 552) = v25;
  long long v26 = *((_OWORD *)a3 + 27);
  long long v27 = *((_OWORD *)a3 + 29);
  *(_OWORD *)(a1 + 456) = *((_OWORD *)a3 + 28);
  *(_OWORD *)(a1 + 472) = v27;
  *(_OWORD *)(a1 + 440) = v26;
  __int16 v28 = *((_WORD *)a3 + 304);
  *(unsigned char *)(a1 + 618) = *((unsigned char *)a3 + 610);
  *(_WORD *)(a1 + 616) = v28;
  long long v29 = *(_OWORD *)(a3 + 77);
  *(void *)(a1 + 640) = a3[79];
  *(_OWORD *)(a1 + 624) = v29;
  a3[77] = 0;
  *((_OWORD *)a3 + 39) = 0u;
  long long v30 = *((_OWORD *)a3 + 40);
  *(void *)(a1 + 664) = a3[82];
  *(_OWORD *)(a1 + 648) = v30;
  *(_OWORD *)(a3 + 81) = 0u;
  a3[80] = 0;
  long long v31 = *(_OWORD *)(a3 + 83);
  *(void *)(a1 + 688) = a3[85];
  *(_OWORD *)(a1 + 672) = v31;
  a3[85] = 0;
  *(_OWORD *)(a3 + 83) = 0u;
  long long v32 = *((_OWORD *)a3 + 43);
  *(void *)(a1 + 712) = a3[88];
  *(_OWORD *)(a1 + 696) = v32;
  long long v33 = *(_OWORD *)(a3 + 89);
  *(void *)(a1 + 736) = a3[91];
  *(_OWORD *)(a1 + 720) = v33;
  a3[91] = 0;
  *(_OWORD *)(a3 + 89) = 0u;
  *(_WORD *)(a1 + 744) = *((_WORD *)a3 + 368);
  *(void *)(a1 + 752) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 752) = *(_OWORD *)(a3 + 93);
  *(void *)(a1 + 768) = a3[95];
  a3[95] = 0;
  *(_OWORD *)(a3 + 93) = 0u;
  long long v34 = *((_OWORD *)a3 + 54);
  long long v36 = *((_OWORD *)a3 + 51);
  long long v35 = *((_OWORD *)a3 + 52);
  *(_OWORD *)(a1 + 856) = *((_OWORD *)a3 + 53);
  *(_OWORD *)(a1 + 872) = v34;
  *(_OWORD *)(a1 + 824) = v36;
  *(_OWORD *)(a1 + 840) = v35;
  long long v38 = *((_OWORD *)a3 + 56);
  long long v37 = *((_OWORD *)a3 + 57);
  long long v39 = *((_OWORD *)a3 + 55);
  *(_OWORD *)(a1 + 932) = *(_OWORD *)((char *)a3 + 924);
  *(_OWORD *)(a1 + 904) = v38;
  *(_OWORD *)(a1 + 920) = v37;
  *(_OWORD *)(a1 + 888) = v39;
  long long v40 = *((_OWORD *)a3 + 48);
  long long v41 = *((_OWORD *)a3 + 50);
  *(_OWORD *)(a1 + 792) = *((_OWORD *)a3 + 49);
  *(_OWORD *)(a1 + 808) = v41;
  *(_OWORD *)(a1 + 776) = v40;
  long long v42 = *((_OWORD *)a3 + 59);
  *(void *)(a1 + 968) = a3[120];
  *(_OWORD *)(a1 + 952) = v42;
  *(_OWORD *)(a3 + 119) = 0u;
  a3[118] = 0;
  long long v43 = *(_OWORD *)(a3 + 121);
  *(void *)(a1 + 992) = a3[123];
  *(_OWORD *)(a1 + 976) = v43;
  *((_OWORD *)a3 + 61) = 0u;
  a3[121] = 0;
  uint64_t v44 = a3[124];
  *(_DWORD *)(a1 + 1008) = *((_DWORD *)a3 + 250);
  *(void *)(a1 + 1000) = v44;
  long long v45 = *((_OWORD *)a3 + 63);
  long long v46 = *((_OWORD *)a3 + 64);
  long long v47 = *((_OWORD *)a3 + 65);
  *(void *)(a1 + 1064) = a3[132];
  *(_OWORD *)(a1 + 1048) = v47;
  *(_OWORD *)(a1 + 1016) = v45;
  *(_OWORD *)(a1 + 1032) = v46;
  *(unsigned char *)(a1 + 1072) = *((unsigned char *)a3 + 1064);
  long long v48 = *((_OWORD *)a3 + 67);
  *(void *)(a1 + 1096) = a3[136];
  *(_OWORD *)(a1 + 1080) = v48;
  *(_OWORD *)(a3 + 135) = 0u;
  a3[134] = 0;
  long long v49 = *(_OWORD *)(a3 + 137);
  *(_OWORD *)(a1 + 1116) = *(_OWORD *)((char *)a3 + 1108);
  *(_OWORD *)(a1 + 1104) = v49;
  *(void *)(a1 + 1136) = 0;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1136) = *(_OWORD *)(a3 + 141);
  *(void *)(a1 + 1152) = a3[143];
  a3[143] = 0;
  *(_OWORD *)(a3 + 141) = 0u;
  *(unsigned char *)(a1 + 1160) = *((unsigned char *)a3 + 1152);
  long long v50 = *(_OWORD *)(a3 + 145);
  *(void *)(a1 + 1184) = a3[147];
  *(_OWORD *)(a1 + 1168) = v50;
  *((_OWORD *)a3 + 73) = 0u;
  a3[145] = 0;
  long long v51 = *((_OWORD *)a3 + 74);
  *(_OWORD *)(a1 + 1204) = *(_OWORD *)((char *)a3 + 1196);
  *(_OWORD *)(a1 + 1192) = v51;
  *(void *)(a1 + 1224) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1224) = *((_OWORD *)a3 + 76);
  *(void *)(a1 + 1240) = a3[154];
  a3[154] = 0;
  *((_OWORD *)a3 + 76) = 0u;
  long long v52 = *(_OWORD *)(a3 + 155);
  *(void *)(a1 + 1264) = a3[157];
  *(_OWORD *)(a1 + 1248) = v52;
  a3[155] = 0;
  *((_OWORD *)a3 + 78) = 0u;
  long long v53 = *((_OWORD *)a3 + 79);
  *(void *)(a1 + 1288) = a3[160];
  *(_OWORD *)(a1 + 1272) = v53;
  *(_OWORD *)(a3 + 159) = 0u;
  a3[158] = 0;
  long long v54 = *(_OWORD *)(a3 + 161);
  *(void *)(a1 + 1312) = a3[163];
  *(_OWORD *)(a1 + 1296) = v54;
  a3[163] = 0;
  *(_OWORD *)(a3 + 161) = 0u;
  long long v55 = *((_OWORD *)a3 + 82);
  *(void *)(a1 + 1336) = a3[166];
  *(_OWORD *)(a1 + 1320) = v55;
  a3[166] = 0;
  *((_OWORD *)a3 + 82) = 0u;
  return result;
}

__n128 sub_10084DB0C(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 28) = 0;
  *(void *)(a1 + 44) = 0;
  *(void *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(void *)(a1 + 56) = 0x402E000000000000;
  *(unsigned char *)(a1 + 64) = 1;
  *(_OWORD *)(a1 + 72) = xmmword_101D47C70;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 112) = 1;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 6;
  *(unsigned char *)(a1 + 154) = 1;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 232) = xmmword_101D47C80;
  *(void *)(a1 + 248) = 0x4024000000000000;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(_WORD *)(a1 + 280) = 1;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  *(_WORD *)(a1 + 312) = 257;
  *(_WORD *)(a1 + 324) = 0;
  *(unsigned char *)(a1 + 328) = 1;
  *(_DWORD *)(a1 + 332) = -115;
  *(void *)(a1 + 336) = 0x4000000000000000;
  *(void *)(a1 + 344) = 0x3E800000005;
  *(_WORD *)(a1 + 352) = 0;
  *(_WORD *)(a1 + 364) = 257;
  *(unsigned char *)(a1 + 368) = 1;
  *(_WORD *)(a1 + 372) = 257;
  *(void *)(a1 + 376) = 0x32000000018;
  *(_WORD *)(a1 + 384) = 0;
  *(_WORD *)(a1 + 388) = 0;
  *(void *)(a1 + 392) = 0x6400000005;
  *(_WORD *)(a1 + 400) = 256;
  *(_WORD *)(a1 + 404) = 0;
  *(void *)(a1 + 408) = -1;
  *(_WORD *)(a1 + 416) = 257;
  *(unsigned char *)(a1 + 420) = 1;
  *(_WORD *)(a1 + 424) = 0;
  *(_WORD *)(a1 + 436) = 257;
  *(_WORD *)(a1 + 440) = 0;
  *(_WORD *)(a1 + 452) = 257;
  *(_WORD *)(a1 + 456) = 0;
  *(_WORD *)(a1 + 468) = 257;
  *(void *)(a1 + 472) = 0x6400000002;
  *(_DWORD *)(a1 + 480) = 100;
  *(_WORD *)(a1 + 488) = 256;
  *(unsigned char *)(a1 + 490) = 1;
  *(void *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(void *)(a1 + 568) = 0x3FF0000000000000;
  __asm { FMOV            V0.2D, #10.0 }
  *(__n128 *)(a1 + 576) = result;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 600) = 0;
  *(_WORD *)(a1 + 616) = 1;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 632) = 0;
  *(_WORD *)(a1 + 648) = 257;
  *(_WORD *)(a1 + 660) = 0;
  *(unsigned char *)(a1 + 664) = 1;
  *(_DWORD *)(a1 + 668) = -115;
  *(void *)(a1 + 672) = 0x4000000000000000;
  *(void *)(a1 + 680) = 0x3E800000005;
  *(_WORD *)(a1 + 688) = 0;
  *(_WORD *)(a1 + 700) = 257;
  *(unsigned char *)(a1 + 704) = 1;
  *(_WORD *)(a1 + 708) = 257;
  *(void *)(a1 + 712) = 0x32000000018;
  *(_WORD *)(a1 + 720) = 0;
  *(_WORD *)(a1 + 724) = 0;
  *(void *)(a1 + 728) = 0x6400000005;
  *(_WORD *)(a1 + 736) = 256;
  *(_WORD *)(a1 + 740) = 0;
  *(void *)(a1 + 744) = -1;
  *(_WORD *)(a1 + 752) = 257;
  *(unsigned char *)(a1 + 756) = 1;
  *(_WORD *)(a1 + 760) = 0;
  *(_WORD *)(a1 + 772) = 257;
  *(_WORD *)(a1 + 776) = 0;
  *(_WORD *)(a1 + 788) = 257;
  *(_WORD *)(a1 + 792) = 0;
  *(_WORD *)(a1 + 804) = 257;
  *(void *)(a1 + 808) = 0x6400000002;
  *(_DWORD *)(a1 + 816) = 100;
  *(_WORD *)(a1 + 152) = 256;
  *(void *)(a1 + 316) = 0x32000000018;
  *(void *)(a1 + 356) = -1;
  *(void *)(a1 + 428) = -1;
  *(void *)(a1 + 444) = -1;
  *(void *)(a1 + 460) = -1;
  *(void *)(a1 + 652) = 0x32000000018;
  *(void *)(a1 + 692) = -1;
  *(void *)(a1 + 764) = -1;
  *(void *)(a1 + 780) = -1;
  *(void *)(a1 + 796) = -1;
  return result;
}

uint64_t sub_10084DD34(uint64_t a1)
{
  if (*(char *)(a1 + 1335) < 0) {
    operator delete(*(void **)(a1 + 1312));
  }
  if (*(char *)(a1 + 1311) < 0) {
    operator delete(*(void **)(a1 + 1288));
  }
  if (*(char *)(a1 + 1287) < 0) {
    operator delete(*(void **)(a1 + 1264));
  }
  if (*(char *)(a1 + 1263) < 0) {
    operator delete(*(void **)(a1 + 1240));
  }
  uint64_t v3 = (void **)(a1 + 1216);
  sub_100340F40(&v3);
  if (*(char *)(a1 + 1183) < 0) {
    operator delete(*(void **)(a1 + 1160));
  }
  uint64_t v3 = (void **)(a1 + 1128);
  sub_100340F40(&v3);
  if (*(char *)(a1 + 1095) < 0) {
    operator delete(*(void **)(a1 + 1072));
  }
  if (*(char *)(a1 + 991) < 0) {
    operator delete(*(void **)(a1 + 968));
  }
  if (*(char *)(a1 + 967) < 0) {
    operator delete(*(void **)(a1 + 944));
  }
  sub_10084DE08(a1 + 120);
  return a1;
}

uint64_t sub_10084DE08(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 624);
  sub_10084DF14(&v3);
  if (*(char *)(a1 + 615) < 0) {
    operator delete(*(void **)(a1 + 592));
  }
  if (*(char *)(a1 + 567) < 0) {
    operator delete(*(void **)(a1 + 544));
  }
  if (*(char *)(a1 + 543) < 0) {
    operator delete(*(void **)(a1 + 520));
  }
  if (*(char *)(a1 + 519) < 0) {
    operator delete(*(void **)(a1 + 496));
  }
  uint64_t v3 = (void **)(a1 + 288);
  sub_10084DF14(&v3);
  if (*(char *)(a1 + 279) < 0) {
    operator delete(*(void **)(a1 + 256));
  }
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*(void **)(a1 + 184));
  }
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*(void **)(a1 + 160));
  }
  uint64_t v3 = (void **)(a1 + 120);
  sub_1000A7B4C(&v3);
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10084DF14(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        sub_10084DFAC((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10084DFAC(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 79) < 0) {
    operator delete(*(void **)(a2 + 56));
  }
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void *sub_10084E014(void *a1, uint64_t a2)
{
  sub_10084F794((uint64_t)v4, a2);
  sub_10084E088(v4, a1);
  sub_10068280C(v4);
  return a1;
}

void *sub_10084E088(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    long long v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10084E2E8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_10084E2F4(uint64_t a1, uint64_t *a2)
{
  sub_10084E398(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  long long v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  long long v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *long long v7 = 0;
    v7[1] = 0;
  }
}

void sub_10084E398(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_100718788(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void sub_10084E3F0(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t sub_10084E420(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
  long long v4 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v4;
  std::string::operator=((std::string *)(a1 + 88), (const std::string *)(a2 + 88));
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  if (a1 != a2) {
    sub_1019EF7A8(a1 + 120, *(std::string **)(a2 + 120), *(long long **)(a2 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 128) - *(void *)(a2 + 120)) >> 3));
  }
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  __int16 v5 = *(_WORD *)(a2 + 152);
  *(unsigned char *)(a1 + 154) = *(unsigned char *)(a2 + 154);
  *(_WORD *)(a1 + 152) = v5;
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  std::string::operator=((std::string *)(a1 + 184), (const std::string *)(a2 + 184));
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  uint64_t v6 = *(void *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(void *)(a1 + 248) = v6;
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  *(_WORD *)(a1 + 280) = *(_WORD *)(a2 + 280);
  if (a1 != a2) {
    sub_10084E650(a1 + 288, *(std::string **)(a2 + 288), *(long long **)(a2 + 296), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 296) - *(void *)(a2 + 288)) >> 4));
  }
  long long v7 = *(_OWORD *)(a2 + 312);
  long long v8 = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 344) = v8;
  *(_OWORD *)(a1 + 312) = v7;
  long long v9 = *(_OWORD *)(a2 + 360);
  long long v10 = *(_OWORD *)(a2 + 376);
  long long v11 = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 408) = v11;
  *(_OWORD *)(a1 + 360) = v9;
  *(_OWORD *)(a1 + 376) = v10;
  long long v12 = *(_OWORD *)(a2 + 424);
  long long v13 = *(_OWORD *)(a2 + 440);
  long long v14 = *(_OWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 468) = *(_OWORD *)(a2 + 468);
  *(_OWORD *)(a1 + 440) = v13;
  *(_OWORD *)(a1 + 456) = v14;
  *(_OWORD *)(a1 + 424) = v12;
  __int16 v15 = *(_WORD *)(a2 + 488);
  *(unsigned char *)(a1 + 490) = *(unsigned char *)(a2 + 490);
  *(_WORD *)(a1 + 488) = v15;
  std::string::operator=((std::string *)(a1 + 496), (const std::string *)(a2 + 496));
  std::string::operator=((std::string *)(a1 + 520), (const std::string *)(a2 + 520));
  std::string::operator=((std::string *)(a1 + 544), (const std::string *)(a2 + 544));
  uint64_t v16 = *(void *)(a2 + 584);
  *(_OWORD *)(a1 + 568) = *(_OWORD *)(a2 + 568);
  *(void *)(a1 + 584) = v16;
  std::string::operator=((std::string *)(a1 + 592), (const std::string *)(a2 + 592));
  *(_WORD *)(a1 + 616) = *(_WORD *)(a2 + 616);
  if (a1 != a2) {
    sub_10084E650(a1 + 624, *(std::string **)(a2 + 624), *(long long **)(a2 + 632), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 632) - *(void *)(a2 + 624)) >> 4));
  }
  long long v17 = *(_OWORD *)(a2 + 648);
  long long v18 = *(_OWORD *)(a2 + 680);
  *(_OWORD *)(a1 + 664) = *(_OWORD *)(a2 + 664);
  *(_OWORD *)(a1 + 680) = v18;
  *(_OWORD *)(a1 + 648) = v17;
  long long v19 = *(_OWORD *)(a2 + 696);
  long long v20 = *(_OWORD *)(a2 + 712);
  long long v21 = *(_OWORD *)(a2 + 744);
  *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 744) = v21;
  *(_OWORD *)(a1 + 696) = v19;
  *(_OWORD *)(a1 + 712) = v20;
  long long v22 = *(_OWORD *)(a2 + 760);
  long long v23 = *(_OWORD *)(a2 + 776);
  long long v24 = *(_OWORD *)(a2 + 792);
  *(_OWORD *)(a1 + 804) = *(_OWORD *)(a2 + 804);
  *(_OWORD *)(a1 + 776) = v23;
  *(_OWORD *)(a1 + 792) = v24;
  *(_OWORD *)(a1 + 760) = v22;
  return a1;
}

void sub_10084E650(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  long long v9 = *(std::string **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    sub_10084E7D4((void **)a1);
    if (a4 > 0x333333333333333) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0x999999999999999ALL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0x199999999999999) {
      unint64_t v11 = 0x333333333333333;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_1002F3410((void *)a1, v11);
    long long v12 = sub_10084E844(v8, (long long *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4) < a4)
  {
    long long v13 = (std::string *)((char *)__str + 16 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4));
    sub_10084EA68((int)&v17, __str, v13, v9);
    long long v12 = sub_10084E844(v8, (long long *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_10084EA68((int)&v18, __str, (std::string *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 80;
      sub_10084DFAC(v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_10084E7C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10084E7CC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10084E7D4(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    long long v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 80;
        sub_10084DFAC((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      long long v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_10084E844(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  long long v4 = __dst;
  unint64_t v11 = __dst;
  long long v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  _OWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    int v7 = a1;
    do
    {
      sub_10084E8F0(v7, v4, v6);
      v6 += 5;
      long long v4 = v12 + 80;
      v12 += 80;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_10084E9DC((uint64_t)v9);
  return v4;
}

void sub_10084E8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned char *sub_10084E8F0(int a1, char *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    *((void *)__dst + 2) = *((void *)a3 + 2);
    *(_OWORD *)__dst = v5;
  }
  if (*((char *)a3 + 47) < 0)
  {
    sub_1000DC48C(__dst + 24, *((void **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a3 + 24);
    *((void *)__dst + 5) = *((void *)a3 + 5);
    *(_OWORD *)(__dst + 24) = v6;
  }
  __dst[48] = *((unsigned char *)a3 + 48);
  __n128 result = __dst + 56;
  if (*((char *)a3 + 79) < 0) {
    return sub_1000DC48C(result, *((void **)a3 + 7), *((void *)a3 + 8));
  }
  long long v8 = *(long long *)((char *)a3 + 56);
  *((void *)__dst + 9) = *((void *)a3 + 9);
  *(_OWORD *)__n128 result = v8;
  return result;
}

void sub_10084E9A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10084E9DC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10084EA14((uint64_t *)a1);
  }
  return a1;
}

void sub_10084EA14(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 80;
      sub_10084DFAC(v5, v3);
    }
    while (v3 != v4);
  }
}

std::string *sub_10084EA68(int a1, std::string *__str, std::string *a3, std::string *this)
{
  uint64_t v5 = __str;
  if (__str == a3) {
    return __str;
  }
  long long v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    std::string::operator=(this + 1, v5 + 1);
    this[2].__r_.__value_.__s.__data_[0] = v5[2].__r_.__value_.__s.__data_[0];
    std::string::operator=((std::string *)((char *)this + 56), (std::string *)((char *)v5 + 56));
    this = (std::string *)((char *)this + 80);
    uint64_t v5 = (std::string *)((char *)v5 + 80);
  }
  while (v5 != v6);
  return v6;
}

void sub_10084EAEC(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  long long v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    sub_100341210((void **)a1);
    if (a4 > 0x555555555555555) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_100018218((void *)a1, v11);
    long long v12 = sub_10084EC70(v8, (long long *)__str, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4) < a4)
  {
    long long v13 = (std::string *)((char *)__str + 16 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4));
    sub_10084EE3C((int)&v17, __str, v13, v9);
    long long v12 = sub_10084EC70(v8, (long long *)v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_10084EE3C((int)&v18, __str, (std::string *)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 48;
      sub_10028B738(v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_10084EC60(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10084EC68(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_10084EC70(uint64_t a1, long long *a2, long long *a3, void *__dst)
{
  uint64_t v4 = __dst;
  unint64_t v11 = __dst;
  long long v12 = (char *)__dst;
  v9[0] = a1;
  v9[1] = &v11;
  _OWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    int v7 = a1;
    do
    {
      sub_10084ED1C(v7, v4, v6);
      v6 += 3;
      uint64_t v4 = v12 + 48;
      v12 += 48;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_10084EDB0((uint64_t)v9);
  return v4;
}

void sub_10084ED08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned char *sub_10084ED1C(int a1, void *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    __dst[2] = *((void *)a3 + 2);
    *(_OWORD *)__dst = v5;
  }
  __n128 result = __dst + 3;
  if (*((char *)a3 + 47) < 0) {
    return sub_1000DC48C(result, *((void **)a3 + 3), *((void *)a3 + 4));
  }
  long long v7 = *(long long *)((char *)a3 + 24);
  __dst[5] = *((void *)a3 + 5);
  *(_OWORD *)__n128 result = v7;
  return result;
}

void sub_10084ED94(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10084EDB0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10084EDE8((uint64_t *)a1);
  }
  return a1;
}

void sub_10084EDE8(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 48;
      sub_10028B738(v5, v3);
    }
    while (v3 != v4);
  }
}

std::string *sub_10084EE3C(int a1, std::string *__str, std::string *a3, std::string *this)
{
  uint64_t v5 = __str;
  if (__str == a3) {
    return __str;
  }
  long long v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    std::string::operator=(this + 1, v5 + 1);
    this += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

void sub_10084EEAC(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v8 = (uint64_t *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      char v10 = v8;
    }
    else
    {
      do
      {
        unint64_t v11 = *((unsigned int *)v4 + 4);
        *((_DWORD *)v8 + 4) = v11;
        if (v8 != v4)
        {
          *((_DWORD *)v8 + 14) = *((_DWORD *)v4 + 14);
          sub_10084EFE0(v8 + 3, (uint64_t *)v4[5], 0);
          unint64_t v11 = *((unsigned int *)v8 + 4);
        }
        char v10 = (uint64_t *)*v8;
        v8[1] = v11;
        long long v12 = (void *)sub_100324B5C((uint64_t)a1, v11, (_DWORD *)v8 + 4);
        sub_1000D8A74(a1, v8, v12);
        uint64_t v4 = (uint64_t *)*v4;
        if (!v10) {
          break;
        }
        uint64_t v8 = v10;
      }
      while (v4 != a3);
    }
    sub_100718788((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    sub_10084F178(a1, (_DWORD *)v4 + 4);
    uint64_t v4 = (uint64_t *)*v4;
  }
}

void sub_10084EFB0(void *a1)
{
  __cxa_begin_catch(a1);
  sub_100718788(v1, v2);
  __cxa_rethrow();
}

void sub_10084EFCC(_Unwind_Exception *a1)
{
}

void sub_10084EFE0(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  uint64_t v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      unint64_t v9 = *((int *)a2 + 4);
      *((_DWORD *)v8 + 4) = v9;
      long long v10 = *(_OWORD *)((char *)a2 + 20);
      *((_OWORD *)v8 + 2) = *((_OWORD *)a2 + 2);
      *(_OWORD *)((char *)v8 + 20) = v10;
      unint64_t v11 = (uint64_t *)*v8;
      v8[1] = v9;
      long long v12 = (void *)sub_100324B5C((uint64_t)a1, v9, (_DWORD *)v8 + 4);
      sub_1000D8A74(a1, v8, v12);
      a2 = (uint64_t *)*a2;
      uint64_t v8 = v11;
      if (!v11) {
        goto LABEL_9;
      }
    }
    do
    {
      long long v13 = (uint64_t *)*v8;
      operator delete(v8);
      uint64_t v8 = v13;
    }
    while (v13);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      sub_10084F0FC(a1, (_OWORD *)a2 + 1);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_10084F0C8(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_10084F0E8(_Unwind_Exception *a1)
{
}

int *sub_10084F0FC(void *a1, _OWORD *a2)
{
  uint64_t v4 = (int *)operator new(0x30uLL);
  long long v5 = a2[1];
  *((_OWORD *)v4 + 1) = *a2;
  *((_OWORD *)v4 + 2) = v5;
  unint64_t v6 = v4[4];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = v6;
  long long v7 = (void *)sub_100324B5C((uint64_t)a1, v6, v4 + 4);
  sub_1000D8A74(a1, v4, v7);
  return v4;
}

void sub_10084F164(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10084F178(void *a1, _DWORD *a2)
{
  sub_10084F1FC((uint64_t)a1, a2, (uint64_t)v8);
  uint64_t v3 = (void *)v8[0];
  long long v5 = (_DWORD *)(v8[0] + 16);
  unint64_t v4 = *(unsigned int *)(v8[0] + 16);
  *(void *)(v8[0] + 8) = v4;
  unint64_t v6 = (void *)sub_100324B5C((uint64_t)a1, v4, v5);
  sub_1000D8A74(a1, v3, v6);
  v8[0] = 0;
  sub_10084F514((uint64_t)v8, 0);
  return v3;
}

void sub_10084F1E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10084F514((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_10084F1FC@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  unint64_t v6 = operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *unint64_t v6 = 0;
  v6[1] = 0;
  *((_DWORD *)v6 + 4) = *a2;
  uint64_t result = sub_10084F280((uint64_t)(v6 + 3), (uint64_t)(a2 + 2));
  *(unsigned char *)(a3 + 16) = 1;
  v6[1] = *((unsigned int *)v6 + 4);
  return result;
}

void sub_10084F268(_Unwind_Exception *a1)
{
  sub_10084F514(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_10084F280(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100100330(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(int **)(a2 + 16); i; uint64_t i = *(int **)i)
    sub_10084F2F8(a1, i + 4, (_OWORD *)i + 1);
  return a1;
}

void sub_10084F2E0(_Unwind_Exception *a1)
{
  sub_1000D7D80(v1);
  _Unwind_Resume(a1);
}

void *sub_10084F2F8(uint64_t a1, int *a2, _OWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      long long v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          long long v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  long long v10 = operator new(0x30uLL);
  *long long v10 = 0;
  v10[1] = v6;
  long long v12 = a3[1];
  *((_OWORD *)v10 + 1) = *a3;
  *((_OWORD *)v10 + 2) = v12;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100100330(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  long long v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *long long v10 = *v20;
LABEL_38:
    *long long v20 = v10;
    goto LABEL_39;
  }
  *long long v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v21 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    long long v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_10084F500(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10084F514(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1000D7D80((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }
}

void sub_10084F56C(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10084F59C(id a1)
{
  qword_102419658 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Location_deprecated");
}

uint64_t sub_10084F5CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10084F664(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10084F6FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10084F794(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10084F82C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10084F8C8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10084F904(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10084F948(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *a3;
  uint64_t v10 = a3[1];
  *(void *)(a1 + 40) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  unint64_t v11 = (void **)(a1 + 96);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 2;
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8)) {
      goto LABEL_5;
    }
LABEL_20:
    sub_101A71218(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, v22, v23, v24, v25,
      v26,
      v27,
      v28,
      v29,
      v30);
    uint64_t result = abort_report_np();
    __break(1u);
    return result;
  }
  if (!*(unsigned char *)(a2 + 23)) {
    goto LABEL_20;
  }
LABEL_5:
  if (*(char *)(a2 + 23) >= 0) {
    size_t v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v12 = *(void *)(a2 + 8);
  }
  sub_1001110E4((uint64_t)&v20, v12 + 1);
  if (v21 >= 0) {
    float v13 = &v20;
  }
  else {
    float v13 = (long long *)v20;
  }
  if (v12)
  {
    if (*(char *)(a2 + 23) >= 0) {
      float v14 = (const void *)a2;
    }
    else {
      float v14 = *(const void **)a2;
    }
    memmove(v13, v14, v12);
  }
  *(_WORD *)((char *)v13 + v12) = 44;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v11);
  }
  *(_OWORD *)unint64_t v11 = v20;
  *(void *)(a1 + 112) = v21;
  return a1;
}

void sub_10084FABC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  sub_1000F5BB0(v3, *(void **)(v1 + 64));
  unint64_t v7 = *(std::__shared_weak_count **)(v1 + 40);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  sub_1000F5BB0(v2, *v4);
  _Unwind_Resume(a1);
}

void *sub_10084FB00(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10084FB84(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10084FC08(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10084FC8C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10084FD10(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_10084FD94(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10184F814();
    operator delete();
  }
  return result;
}

uint64_t sub_10084FDE4(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1018A6474();
    operator delete();
  }
  return result;
}

uint64_t sub_10084FE34(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100F38288();
    operator delete();
  }
  return result;
}

void sub_10084FE84(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    sub_100854D00(a2 + 3);
    uint64_t v3 = *a2;
    *a2 = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    operator delete();
  }
}

uint64_t sub_10084FF08(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100B93A70();
    operator delete();
  }
  return result;
}

uint64_t sub_10084FF58(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100A2C9B0();
    operator delete();
  }
  return result;
}

uint64_t sub_10084FFA8(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10151D14C();
    operator delete();
  }
  return result;
}

uint64_t *sub_10084FFF8(uint64_t **a1, uint64_t *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100779F58(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100850048(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101846B64();
    operator delete();
  }
  return result;
}

uint64_t sub_100850098(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1018DB540();
    operator delete();
  }
  return result;
}

void *sub_1008500E8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_10085016C(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  uint64_t *result = a2;
  if (v2)
  {
    sub_1008508E4((void *)(v2 + 72));
    operator delete();
  }
  return result;
}

void *sub_1008501CC(void **a1, void *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100854EAC(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10085021C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101898C78();
    operator delete();
  }
  return result;
}

uint64_t sub_10085026C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10186E2FC(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1008502BC(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101888040();
    operator delete();
  }
  return result;
}

uint64_t sub_10085030C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101872408();
    operator delete();
  }
  return result;
}

uint64_t sub_10085035C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100E12C9C();
    operator delete();
  }
  return result;
}

uint64_t sub_1008503AC(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101271A8C();
    operator delete();
  }
  return result;
}

uint64_t sub_1008503FC(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10100F118();
    operator delete();
  }
  return result;
}

uint64_t sub_10085044C(uint64_t a1)
{
  sub_100850488(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100850488(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_10084DD34((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_1008504CC(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  sub_10085053C(*(void **)(a1 + 56), (void *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  sub_1000F5BB0(v2, *(void **)(a1 + 64));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000F5BB0(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

uint64_t sub_10085053C(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      sub_100847910(a3, *((_DWORD *)v5 + 8));
      unint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          unint64_t v7 = v6;
          unint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

void sub_1008505C0()
{
}

void *sub_1008505D4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CB858;
  result[1] = v3;
  return result;
}

uint64_t sub_10085061C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CB858;
  a2[1] = v2;
  return result;
}

BOOL sub_100850648(uint64_t a1, uint64_t a2)
{
  sub_1008507E0((uint64_t)v6, a2);
  uint64_t v3 = *(void *)(a1 + 8);
  sub_100850748((uint64_t)v7, (uint64_t)v6);
  BOOL v4 = sub_100839E20(v3, (uint64_t)v7);
  sub_100850860(v7);
  sub_100850860(v6);
  return v4;
}

void sub_1008506D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_100850860((uint64_t *)va1);
  sub_100850860((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1008506FC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085073C()
{
}

uint64_t sub_100850748(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1008507E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *sub_100850860(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1008508E4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10085096C()
{
}

void *sub_100850980(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CB8E8;
  result[1] = v3;
  return result;
}

uint64_t sub_1008509C8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CB8E8;
  a2[1] = v2;
  return result;
}

void sub_1008509F4(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)a2;
  long long v6 = v2;
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v3 + 12)) {
    uint64_t v7 = v6;
  }
  sub_100D67AB4(*(void *)v3 + 8, (uint64_t)&v5);
  uint64_t v4 = *(void **)(v3 + 1168);
  v8[0] = v5;
  v8[1] = v6;
  uint64_t v9 = v7;
  sub_101899244(v4, v8);
}

uint64_t sub_100850A68(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100850AA8()
{
}

void *sub_100850AB4(void *a1)
{
  long long v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100850B38(void *a1)
{
  long long v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100850BC0()
{
}

void *sub_100850BD4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CB978;
  result[1] = v3;
  return result;
}

uint64_t sub_100850C1C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CB978;
  a2[1] = v2;
  return result;
}

void sub_100850C48(uint64_t a1, uint64_t a2)
{
  memcpy(__dst, (const void *)a2, sizeof(__dst));
  long long v14 = *(_OWORD *)(a2 + 960);
  uint64_t v15 = *(void *)(a2 + 976);
  *(_OWORD *)(a2 + 960) = 0u;
  *(void *)(a2 + 976) = 0;
  long long v16 = *(_OWORD *)(a2 + 984);
  uint64_t v17 = *(void *)(a2 + 1000);
  *(_OWORD *)(a2 + 984) = 0u;
  *(void *)(a2 + 1000) = 0;
  *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)(a2 + 1132);
  v25[0] = *(_OWORD *)(a2 + 1120);
  long long v24 = *(_OWORD *)(a2 + 1104);
  long long v23 = *(_OWORD *)(a2 + 1088);
  long long v22 = *(_OWORD *)(a2 + 1072);
  long long v21 = *(_OWORD *)(a2 + 1056);
  long long v20 = *(_OWORD *)(a2 + 1040);
  long long v4 = *(_OWORD *)(a2 + 1008);
  long long v19 = *(_OWORD *)(a2 + 1024);
  long long v18 = v4;
  long long v26 = *(_OWORD *)(a2 + 1152);
  uint64_t v27 = *(void *)(a2 + 1168);
  long long v5 = *(_OWORD *)(a2 + 1176);
  *(void *)(a2 + 1176) = 0;
  *(void *)(a2 + 1168) = 0;
  *(_OWORD *)(a2 + 1152) = 0u;
  long long __p = v5;
  uint64_t v29 = *(void *)(a2 + 1192);
  *(void *)(a2 + 1192) = 0;
  *(void *)(a2 + 1184) = 0;
  long long v30 = *(_OWORD *)(a2 + 1200);
  long long v31 = *(_OWORD *)(a2 + 1216);
  uint64_t v32 = *(void *)(a2 + 1232);
  uint64_t v6 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    LOWORD(v70) = 2082;
    *(void *)((char *)&v70 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#awd,fEmergencyAWD CB\"}", buf, 0x12u);
  }
  long long v66 = xmmword_101D82F18;
  long long v67 = xmmword_101D82F28;
  memset(v68, 0, 28);
  long long v62 = xmmword_101D82ED8;
  long long v63 = xmmword_101D82EE8;
  long long v64 = xmmword_101D82EF8;
  long long v65 = xmmword_101D82F08;
  long long v60 = xmmword_101D82EB8;
  long long v61 = xmmword_101D82EC8;
  long long v57 = xmmword_101D82F18;
  long long v58 = xmmword_101D82F28;
  memset(v59, 0, 28);
  long long v53 = xmmword_101D82ED8;
  long long v54 = xmmword_101D82EE8;
  long long v55 = xmmword_101D82EF8;
  long long v56 = xmmword_101D82F08;
  long long v51 = xmmword_101D82EB8;
  long long v52 = xmmword_101D82EC8;
  long long v48 = xmmword_101D82F18;
  long long v49 = xmmword_101D82F28;
  memset(v50, 0, 28);
  long long v44 = xmmword_101D82ED8;
  long long v45 = xmmword_101D82EE8;
  long long v46 = xmmword_101D82EF8;
  long long v47 = xmmword_101D82F08;
  long long v42 = xmmword_101D82EB8;
  long long v43 = xmmword_101D82EC8;
  long long v39 = xmmword_101D82F18;
  long long v40 = xmmword_101D82F28;
  memset(v41, 0, 28);
  long long v35 = xmmword_101D82ED8;
  long long v36 = xmmword_101D82EE8;
  long long v37 = xmmword_101D82EF8;
  long long v38 = xmmword_101D82F08;
  long long v33 = xmmword_101D82EB8;
  long long v34 = xmmword_101D82EC8;
  uint64_t v8 = *(void *)(v6 + 1048);
  if (v8)
  {
    sub_100F41980(v8, buf);
    long long v66 = v76;
    long long v67 = v77;
    v68[0] = *(_OWORD *)v78;
    *(_OWORD *)((char *)v68 + 12) = *(_OWORD *)&v78[3];
    long long v62 = v72;
    long long v63 = v73;
    long long v64 = v74;
    long long v65 = v75;
    long long v60 = v70;
    long long v61 = v71;
    long long v57 = *(_OWORD *)&v78[31];
    long long v58 = *(_OWORD *)&v78[35];
    v59[0] = *(_OWORD *)v79;
    *(_OWORD *)((char *)v59 + 12) = *(_OWORD *)&v79[3];
    long long v53 = *(_OWORD *)&v78[15];
    long long v54 = *(_OWORD *)&v78[19];
    long long v55 = *(_OWORD *)&v78[23];
    long long v56 = *(_OWORD *)&v78[27];
    long long v51 = *(_OWORD *)&v78[7];
    long long v52 = *(_OWORD *)&v78[11];
    long long v48 = *(_OWORD *)&v79[31];
    long long v49 = *(_OWORD *)&v79[35];
    v50[0] = *(_OWORD *)v80;
    *(_OWORD *)((char *)v50 + 12) = *(_OWORD *)&v80[3];
    long long v44 = *(_OWORD *)&v79[15];
    long long v45 = *(_OWORD *)&v79[19];
    long long v46 = *(_OWORD *)&v79[23];
    long long v47 = *(_OWORD *)&v79[27];
    unsigned int v9 = buf[0];
    unint64_t v10 = *(void *)buf & 0xFFFFFFFF00000000;
    long long v42 = *(_OWORD *)&v79[7];
    long long v43 = *(_OWORD *)&v79[11];
    long long v39 = *(_OWORD *)&v80[31];
    long long v40 = *(_OWORD *)&v80[35];
    v41[0] = *(_OWORD *)v81;
    *(_OWORD *)((char *)v41 + 12) = *(_OWORD *)&v81[12];
    long long v35 = *(_OWORD *)&v80[15];
    long long v36 = *(_OWORD *)&v80[19];
    long long v37 = *(_OWORD *)&v80[23];
    long long v38 = *(_OWORD *)&v80[27];
    uint64_t v11 = *(_DWORD *)buf & 0xFFFF00;
    uint64_t v12 = *(void *)buf >> 24;
    long long v33 = *(_OWORD *)&v80[7];
    long long v34 = *(_OWORD *)&v80[11];
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v10 = 0;
    LOBYTE(v12) = 0;
    unsigned int v9 = 0;
  }
  *((void *)&__dst[17] + 1) = v10 | ((unint64_t)v12 << 24) | v11 | v9;
  *(_OWORD *)((char *)&__dst[26] + 12) = *(_OWORD *)((char *)v68 + 12);
  unsigned char __dst[24] = v66;
  __dst[25] = v67;
  __dst[20] = v62;
  __dst[21] = v63;
  __dst[22] = v64;
  __dst[23] = v65;
  __dst[18] = v60;
  __dst[19] = v61;
  *(_OWORD *)((char *)&__dst[33] + 12) = v57;
  *(_OWORD *)((char *)&__dst[34] + 12) = v58;
  *(_OWORD *)((char *)&__dst[35] + 12) = v59[0];
  *(_OWORD *)((char *)&__dst[29] + 12) = v53;
  *(_OWORD *)((char *)&__dst[30] + 12) = v54;
  *(_OWORD *)((char *)&__dst[31] + 12) = v55;
  *(_OWORD *)((char *)&__dst[32] + 12) = v56;
  *(_OWORD *)((char *)&__dst[27] + 12) = v51;
  *(_OWORD *)((char *)&__dst[28] + 12) = v52;
  *(_OWORD *)((char *)&__dst[44] + 8) = v49;
  *(_OWORD *)((char *)&__dst[45] + 8) = v50[0];
  *(_OWORD *)((char *)&__dst[46] + 4) = *(_OWORD *)((char *)v50 + 12);
  *(_OWORD *)((char *)&__dst[40] + 8) = v45;
  *(_OWORD *)((char *)&__dst[41] + 8) = v46;
  *(_OWORD *)((char *)&__dst[42] + 8) = v47;
  *(_OWORD *)((char *)&__dst[43] + 8) = v48;
  *(_OWORD *)((char *)&__dst[36] + 8) = *(_OWORD *)((char *)v59 + 12);
  *(_OWORD *)((char *)&__dst[37] + 8) = v42;
  *(_OWORD *)((char *)&__dst[38] + 8) = v43;
  *(_OWORD *)((char *)&__dst[39] + 8) = v44;
  *(_OWORD *)((char *)&__dst[53] + 4) = v39;
  *(_OWORD *)((char *)&__dst[54] + 4) = v40;
  *(_OWORD *)((char *)&__dst[55] + 4) = v41[0];
  *(_OWORD *)((char *)&__dst[49] + 4) = v35;
  *(_OWORD *)((char *)&__dst[50] + 4) = v36;
  *(_OWORD *)((char *)&__dst[51] + 4) = v37;
  *(_OWORD *)((char *)&__dst[52] + 4) = v38;
  *(_OWORD *)((char *)&__dst[47] + 4) = v33;
  *(_OWORD *)((char *)&__dst[48] + 4) = v34;
  __dst[26] = v68[0];
  __dst[56] = *(_OWORD *)((char *)v41 + 12);
  if (sub_10073C750())
  {
    BYTE8(__dst[9]) = *(unsigned char *)(v6 + 1296);
    if (v9) {
      BYTE9(__dst[9]) = v12;
    }
  }
  sub_1018703DC(*(void *)(v6 + 1176), (uint64_t)__dst);
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete((void *)v26);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)v16);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)v14);
  }
}

void sub_100851200(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (SLOBYTE(STACK[0x4B7]) < 0) {
    operator delete((void *)STACK[0x4A0]);
  }
  sub_101A71378(va, v4, v2, v3);
  _Unwind_Resume(a1);
}

uint64_t sub_100851238(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100851278()
{
}

void *sub_100851284(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    long long v4 = (void *)result[3];
    long long v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1008514E4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1008514F4()
{
}

void *sub_100851508()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_1022CBA08;
  return result;
}

void sub_100851540(uint64_t a1, void *a2)
{
  *a2 = off_1022CBA08;
}

void sub_100851568(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 960);
  int v3 = *(char *)(a2 + 983);
  long long v4 = *(void **)(a2 + 984);
  *(_OWORD *)(a2 + 960) = 0u;
  *(_OWORD *)(a2 + 976) = 0u;
  int v5 = *(char *)(a2 + 1007);
  *(_OWORD *)(a2 + 992) = 0u;
  uint64_t v6 = *(void **)(a2 + 1152);
  int v7 = *(char *)(a2 + 1175);
  *(void *)(a2 + 1152) = 0;
  *(_OWORD *)(a2 + 1160) = 0u;
  uint64_t v8 = *(void **)(a2 + 1176);
  int v9 = *(char *)(a2 + 1199);
  *(void *)(a2 + 1192) = 0;
  *(_OWORD *)(a2 + 1176) = 0u;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  unint64_t v10 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v11[0] = 68289026;
    v11[1] = 0;
    __int16 v12 = 2082;
    float v13 = "";
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#awd,#Warning, Emergency AWD is disabled in simulator/conformance mode\"}", (uint8_t *)v11, 0x12u);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_5:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(v8);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v6);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v3 & 0x80000000) == 0) {
      return;
    }
LABEL_13:
    operator delete(v2);
    return;
  }
LABEL_12:
  operator delete(v4);
  if (v3 < 0) {
    goto LABEL_13;
  }
}

uint64_t sub_1008516E8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100851728()
{
}

void *sub_100851734(void *result, void *a2)
{
  if (a2 != result)
  {
    int v3 = result;
    long long v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100851994(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1008519A4()
{
}

void *sub_1008519B8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CBA88;
  result[1] = v3;
  return result;
}

uint64_t sub_100851A00(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CBA88;
  a2[1] = v2;
  return result;
}

uint64_t sub_100851A2C(uint64_t a1, uint64_t a2)
{
  return sub_1008419D4(*(void *)(a1 + 8), a2);
}

uint64_t sub_100851A34(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100851A74()
{
}

uint64_t sub_100851A80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100851B18(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    long long v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100851D78(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_100851D84(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  long long v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 40 * a3;
    do
    {
      sub_100851E08((uint64_t **)a1, v4, a2, a2);
      a2 += 10;
      v6 -= 40;
    }
    while (v6);
  }
  return a1;
}

void sub_100851DF0(_Unwind_Exception *a1)
{
  sub_100851F6C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100851E08(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t v6 = sub_1002CF4AC(a1, a2, &v12, &v11, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    sub_100851EA0((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000EDF90(a1, (uint64_t)v12, v8, v10[0]);
    int v7 = v10[0];
    v10[0] = 0;
    sub_100851F14((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t sub_100851EA0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  v6[8] = *a2;
  uint64_t result = sub_10084F794((uint64_t)(v6 + 10), (uint64_t)(a2 + 2));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_100851EFC(_Unwind_Exception *a1)
{
  sub_100851F14(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100851F14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10068280C(v2 + 5);
    }
    operator delete(v2);
  }
}

void sub_100851F6C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100851F6C(a1, *a2);
    sub_100851F6C(a1, a2[1]);
    sub_10068280C(a2 + 5);
    operator delete(a2);
  }
}

void sub_100851FCC()
{
}

void *sub_100851FE0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CBB18;
  result[1] = v3;
  return result;
}

uint64_t sub_100852028(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CBB18;
  a2[1] = v2;
  return result;
}

void sub_100852054(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10085205C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085209C()
{
}

void *sub_1008520A8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100852130()
{
}

void *sub_100852144(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CBBA8;
  result[1] = v3;
  return result;
}

uint64_t sub_10085218C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CBBA8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1008521B8(uint64_t a1, uint64_t a2)
{
  return sub_100840CC4(*(void *)(a1 + 8), a2);
}

uint64_t sub_1008521C0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100852200()
{
}

void sub_100852210()
{
}

void *sub_100852224(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CBC38;
  result[1] = v3;
  return result;
}

uint64_t sub_10085226C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CBC38;
  a2[1] = v2;
  return result;
}

void sub_100852298(uint64_t a1, int *a2)
{
  uint64_t v2 = *(double **)(*(void *)(a1 + 8) + 880);
  if (v2) {
    sub_1018A6FE0(v2, *a2);
  }
}

uint64_t sub_1008522B0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1008522F0()
{
}

void *sub_1008522FC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100852384()
{
}

void *sub_100852398(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CBCC8;
  result[1] = v3;
  return result;
}

uint64_t sub_1008523E0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CBCC8;
  a2[1] = v2;
  return result;
}

void sub_10085240C(uint64_t a1, void *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100840B20(v3);
  if (v2)
  {
    sub_1000DB0A0(v2);
    sub_1000DB0A0(v2);
  }
}

void sub_100852474(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    sub_1000DB0A0(v1);
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100852494(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1008524D4()
{
}

void *sub_1008524E0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100852564(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1008525FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_100852698()
{
}

void *sub_1008526AC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CBD58;
  result[1] = v3;
  return result;
}

uint64_t sub_1008526F4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CBD58;
  a2[1] = v2;
  return result;
}

uint64_t sub_100852720(uint64_t result, int *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (*(void *)(v2 + 424)) {
    return sub_100852788(v2 + 400, *a2);
  }
  return result;
}

uint64_t sub_10085273C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085277C()
{
}

uint64_t sub_100852788(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_1008527DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_100852878()
{
}

void *sub_10085288C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CBDE8;
  result[1] = v3;
  return result;
}

uint64_t sub_1008528D4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CBDE8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100852900(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100852940()
{
}

void *sub_10085294C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1008529D4()
{
}

void *sub_1008529E8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CBE78;
  result[1] = v3;
  return result;
}

uint64_t sub_100852A30(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CBE78;
  a2[1] = v2;
  return result;
}

__n128 sub_100852A5C(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[7];
  v7[6] = a2[6];
  v7[7] = v2;
  v7[8] = a2[8];
  long long v3 = a2[3];
  _DWORD v7[2] = a2[2];
  void v7[3] = v3;
  long long v4 = a2[5];
  void v7[4] = a2[4];
  v7[5] = v4;
  long long v5 = a2[1];
  v7[0] = *a2;
  v7[1] = v5;
  sub_100841FC0(*(void **)(a1 + 8), (uint64_t)v7);
  return result;
}

uint64_t sub_100852AAC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100852AEC()
{
}

void sub_100852AF8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 47) < 0) {
      operator delete(*(void **)(a2 + 24));
    }
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    operator delete();
  }
}

uint64_t *sub_100852B64(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  void *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void sub_100852BE4(uint64_t a1)
{
}

uint64_t sub_100852BEC(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void sub_100852C34()
{
}

void *sub_100852C48(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CBF68;
  result[1] = v3;
  return result;
}

uint64_t sub_100852C90(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CBF68;
  a2[1] = v2;
  return result;
}

void sub_100852CBC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  long long v4 = *(uint64_t **)(a1 + 8);
  if (v3)
  {
    if (*(char *)(v3 + 47) < 0)
    {
      if (!*(void *)(v3 + 32)) {
        goto LABEL_23;
      }
    }
    else if (!*(unsigned char *)(v3 + 47))
    {
      goto LABEL_23;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    long long v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (const char *)(v3 + 24);
      if (*(char *)(v3 + 47) < 0) {
        uint64_t v6 = *(const char **)v6;
      }
      *(_DWORD *)long long buf = 136446210;
      long long v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "file,%{public}s,ClassD", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      uint64_t v11 = (const char **)(v3 + 24);
      if (*(char *)(v3 + 47) < 0) {
        uint64_t v11 = (const char **)*v11;
      }
      int v15 = 136446210;
      long long v16 = v11;
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLGnssController::CLGnssController(id<CLIntersiloUniverse>, LocationObserverCallback, MeasurementObserverCallback, DpoCallback, VendorLocationCallback, BasebandTimeTransferObserverCallback, RhythmicBatchedLocationCallback, BasebandCausesL1InterferenceModeAssertionCallback, OnGnssStopCallback, KnownACGnssLocationCallback)::(anonymous class)::operator()(std::shared_ptr<CLGnssAssistanceFile>) const", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    int v7 = (const char **)(v3 + 24);
    uint64_t v8 = (const char *)(v3 + 24);
    if (*(char *)(v3 + 47) < 0) {
      uint64_t v8 = *v7;
    }
    if (!sub_1004BF004(v8, 4))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      int v9 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v10 = (const char *)(v3 + 24);
        if (*(char *)(v3 + 47) < 0) {
          unint64_t v10 = *v7;
        }
        *(_DWORD *)long long buf = 136446210;
        long long v18 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,cannot set protection class,assistance file,%{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        if (*(char *)(v3 + 47) < 0) {
          int v7 = (const char **)*v7;
        }
        int v15 = 136446210;
        long long v16 = v7;
        float v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "auto CLGnssController::CLGnssController(id<CLIntersiloUniverse>, LocationObserverCallback, MeasurementObserverCallback, DpoCallback, VendorLocationCallback, BasebandTimeTransferObserverCallback, RhythmicBatchedLocationCallback, BasebandCausesL1InterferenceModeAssertionCallback, OnGnssStopCallback, KnownACGnssLocationCallback)::(anonymous class)::operator()(std::shared_ptr<CLGnssAssistanceFile>) const", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
LABEL_23:
  v14[0] = v3;
  v14[1] = (uint64_t)v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100840D64(v4, v14);
  if (v2)
  {
    sub_1000DB0A0(v2);
    sub_1000DB0A0(v2);
  }
}

void sub_100853068(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100853094(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1008530D4()
{
}

void *sub_1008530E0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100853168()
{
}

void *sub_10085317C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CBFF8;
  result[1] = v3;
  return result;
}

uint64_t sub_1008531C4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CBFF8;
  a2[1] = v2;
  return result;
}

void sub_1008531F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  long long v4 = *(uint64_t **)(a1 + 8);
  if (v3)
  {
    if (*(char *)(v3 + 47) < 0)
    {
      if (!*(void *)(v3 + 32)) {
        goto LABEL_23;
      }
    }
    else if (!*(unsigned char *)(v3 + 47))
    {
      goto LABEL_23;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    long long v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (const char *)(v3 + 24);
      if (*(char *)(v3 + 47) < 0) {
        uint64_t v6 = *(const char **)v6;
      }
      *(_DWORD *)long long buf = 136446210;
      long long v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "file,%{public}s,ClassD", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      uint64_t v11 = (const char **)(v3 + 24);
      if (*(char *)(v3 + 47) < 0) {
        uint64_t v11 = (const char **)*v11;
      }
      int v15 = 136446210;
      long long v16 = v11;
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLGnssController::CLGnssController(id<CLIntersiloUniverse>, LocationObserverCallback, MeasurementObserverCallback, DpoCallback, VendorLocationCallback, BasebandTimeTransferObserverCallback, RhythmicBatchedLocationCallback, BasebandCausesL1InterferenceModeAssertionCallback, OnGnssStopCallback, KnownACGnssLocationCallback)::(anonymous class)::operator()(std::shared_ptr<CLGnssAssistanceFile>) const", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    int v7 = (const char **)(v3 + 24);
    uint64_t v8 = (const char *)(v3 + 24);
    if (*(char *)(v3 + 47) < 0) {
      uint64_t v8 = *v7;
    }
    if (!sub_1004BF004(v8, 4))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      int v9 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v10 = (const char *)(v3 + 24);
        if (*(char *)(v3 + 47) < 0) {
          unint64_t v10 = *v7;
        }
        *(_DWORD *)long long buf = 136446210;
        long long v18 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,cannot set protection class for assistance file,%{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        if (*(char *)(v3 + 47) < 0) {
          int v7 = (const char **)*v7;
        }
        int v15 = 136446210;
        long long v16 = v7;
        float v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "auto CLGnssController::CLGnssController(id<CLIntersiloUniverse>, LocationObserverCallback, MeasurementObserverCallback, DpoCallback, VendorLocationCallback, BasebandTimeTransferObserverCallback, RhythmicBatchedLocationCallback, BasebandCausesL1InterferenceModeAssertionCallback, OnGnssStopCallback, KnownACGnssLocationCallback)::(anonymous class)::operator()(std::shared_ptr<CLGnssAssistanceFile>) const", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
LABEL_23:
  v14[0] = v3;
  v14[1] = (uint64_t)v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_10084102C(v4, v14);
  if (v2)
  {
    sub_1000DB0A0(v2);
    sub_1000DB0A0(v2);
  }
}

void sub_10085359C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008535C8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100853608()
{
}

uint64_t sub_100853614@<X0>(long long *a1@<X1>, long long *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x48uLL);
  uint64_t result = sub_100853678((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_100853664(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100853678(uint64_t a1, long long *a2, long long *a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1022CC078;
  sub_100340A70((char *)(a1 + 24), a2, a3);
  return a1;
}

void sub_1008536C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1008536D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022CC078;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1008536F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022CC078;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100853748(uint64_t a1)
{
  sub_10028B738((uint64_t)&v1, a1 + 24);
}

void sub_100853778()
{
}

void *sub_10085378C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CC0C8;
  result[1] = v3;
  return result;
}

uint64_t sub_1008537D4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CC0C8;
  a2[1] = v2;
  return result;
}

void sub_100853800(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  long long v4 = *(uint64_t **)(a1 + 8);
  if (v3)
  {
    if (*(char *)(v3 + 47) < 0)
    {
      if (!*(void *)(v3 + 32)) {
        goto LABEL_23;
      }
    }
    else if (!*(unsigned char *)(v3 + 47))
    {
      goto LABEL_23;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    long long v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (const char *)(v3 + 24);
      if (*(char *)(v3 + 47) < 0) {
        uint64_t v6 = *(const char **)v6;
      }
      *(_DWORD *)long long buf = 136446210;
      long long v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "file,%{public}s,ClassD", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      uint64_t v11 = (const char **)(v3 + 24);
      if (*(char *)(v3 + 47) < 0) {
        uint64_t v11 = (const char **)*v11;
      }
      int v15 = 136446210;
      long long v16 = v11;
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLGnssController::CLGnssController(id<CLIntersiloUniverse>, LocationObserverCallback, MeasurementObserverCallback, DpoCallback, VendorLocationCallback, BasebandTimeTransferObserverCallback, RhythmicBatchedLocationCallback, BasebandCausesL1InterferenceModeAssertionCallback, OnGnssStopCallback, KnownACGnssLocationCallback)::(anonymous class)::operator()(std::shared_ptr<CLGnssAssistanceFile>) const", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    int v7 = (const char **)(v3 + 24);
    uint64_t v8 = (const char *)(v3 + 24);
    if (*(char *)(v3 + 47) < 0) {
      uint64_t v8 = *v7;
    }
    if (!sub_1004BF004(v8, 4))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      int v9 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v10 = (const char *)(v3 + 24);
        if (*(char *)(v3 + 47) < 0) {
          unint64_t v10 = *v7;
        }
        *(_DWORD *)long long buf = 136446210;
        long long v18 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,cannot set protection class for assistance file,%{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        if (*(char *)(v3 + 47) < 0) {
          int v7 = (const char **)*v7;
        }
        int v15 = 136446210;
        long long v16 = v7;
        float v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "auto CLGnssController::CLGnssController(id<CLIntersiloUniverse>, LocationObserverCallback, MeasurementObserverCallback, DpoCallback, VendorLocationCallback, BasebandTimeTransferObserverCallback, RhythmicBatchedLocationCallback, BasebandCausesL1InterferenceModeAssertionCallback, OnGnssStopCallback, KnownACGnssLocationCallback)::(anonymous class)::operator()(std::shared_ptr<CLGnssAssistanceFile>) const", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
LABEL_23:
  v14[0] = v3;
  v14[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1008412F4(v4, v14);
  if (v2)
  {
    sub_1000DB0A0(v2);
    sub_1000DB0A0(v2);
  }
}

void sub_100853BAC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100853BD8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100853C18()
{
}

void sub_100853C28()
{
}

void *sub_100853C3C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CC148;
  result[1] = v3;
  return result;
}

uint64_t sub_100853C84(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CC148;
  a2[1] = v2;
  return result;
}

void sub_100853CB0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  long long v4 = *(uint64_t **)(a1 + 8);
  if (v3)
  {
    if (*(char *)(v3 + 47) < 0)
    {
      if (!*(void *)(v3 + 32)) {
        goto LABEL_23;
      }
    }
    else if (!*(unsigned char *)(v3 + 47))
    {
      goto LABEL_23;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    long long v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (const char *)(v3 + 24);
      if (*(char *)(v3 + 47) < 0) {
        uint64_t v6 = *(const char **)v6;
      }
      *(_DWORD *)long long buf = 136446210;
      long long v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "file,%{public}s,ClassD", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      uint64_t v11 = (const char **)(v3 + 24);
      if (*(char *)(v3 + 47) < 0) {
        uint64_t v11 = (const char **)*v11;
      }
      int v15 = 136446210;
      long long v16 = v11;
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLGnssController::CLGnssController(id<CLIntersiloUniverse>, LocationObserverCallback, MeasurementObserverCallback, DpoCallback, VendorLocationCallback, BasebandTimeTransferObserverCallback, RhythmicBatchedLocationCallback, BasebandCausesL1InterferenceModeAssertionCallback, OnGnssStopCallback, KnownACGnssLocationCallback)::(anonymous class)::operator()(std::shared_ptr<CLGnssAssistanceFile>) const", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    int v7 = (const char **)(v3 + 24);
    uint64_t v8 = (const char *)(v3 + 24);
    if (*(char *)(v3 + 47) < 0) {
      uint64_t v8 = *v7;
    }
    if (!sub_1004BF004(v8, 4))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      int v9 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v10 = (const char *)(v3 + 24);
        if (*(char *)(v3 + 47) < 0) {
          unint64_t v10 = *v7;
        }
        *(_DWORD *)long long buf = 136446210;
        long long v18 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,cannot set protection class for assistance file,%{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
        }
        if (*(char *)(v3 + 47) < 0) {
          int v7 = (const char **)*v7;
        }
        int v15 = 136446210;
        long long v16 = v7;
        float v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "auto CLGnssController::CLGnssController(id<CLIntersiloUniverse>, LocationObserverCallback, MeasurementObserverCallback, DpoCallback, VendorLocationCallback, BasebandTimeTransferObserverCallback, RhythmicBatchedLocationCallback, BasebandCausesL1InterferenceModeAssertionCallback, OnGnssStopCallback, KnownACGnssLocationCallback)::(anonymous class)::operator()(std::shared_ptr<CLGnssAssistanceFile>) const", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
LABEL_23:
  v14[0] = v3;
  v14[1] = (uint64_t)v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1008414D4(v4, v14);
  if (v2)
  {
    sub_1000DB0A0(v2);
    sub_1000DB0A0(v2);
  }
}

void sub_10085405C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100854088(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1008540C8()
{
}

void sub_1008540D8()
{
}

void *sub_1008540EC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CC1C8;
  result[1] = v3;
  return result;
}

uint64_t sub_100854134(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CC1C8;
  a2[1] = v2;
  return result;
}

void sub_100854160(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v3) {
    goto LABEL_23;
  }
  if (*(char *)(v3 + 47) < 0)
  {
    if (!*(void *)(v3 + 32)) {
      goto LABEL_23;
    }
  }
  else if (!*(unsigned char *)(v3 + 47))
  {
    goto LABEL_23;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  long long v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (const char *)(v3 + 24);
    if (*(char *)(v3 + 47) < 0) {
      uint64_t v6 = *(const char **)v6;
    }
    *(_DWORD *)long long buf = 136446210;
    long long v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "file,%{public}s,ClassD", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLGnssController::CLGnssController(id<CLIntersiloUniverse>, LocationObserverCallback, MeasurementObserverCallback, DpoCallback, VendorLocationCallback, BasebandTimeTransferObserverCallback, RhythmicBatchedLocationCallback, BasebandCausesL1InterferenceModeAssertionCallback, OnGnssStopCallback, KnownACGnssLocationCallback)::(anonymous class)::operator()(std::shared_ptr<CLGnssAssistanceFile>) const", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  int v7 = (const char **)(v3 + 24);
  uint64_t v8 = (const char *)(v3 + 24);
  if (*(char *)(v3 + 47) < 0) {
    uint64_t v8 = *v7;
  }
  if (!sub_1004BF004(v8, 4))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    int v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v10 = (const char *)(v3 + 24);
      if (*(char *)(v3 + 47) < 0) {
        unint64_t v10 = *v7;
      }
      *(_DWORD *)long long buf = 136446210;
      long long v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,cannot set protection class for assistance file,%{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLGnssController::CLGnssController(id<CLIntersiloUniverse>, LocationObserverCallback, MeasurementObserverCallback, DpoCallback, VendorLocationCallback, BasebandTimeTransferObserverCallback, RhythmicBatchedLocationCallback, BasebandCausesL1InterferenceModeAssertionCallback, OnGnssStopCallback, KnownACGnssLocationCallback)::(anonymous class)::operator()(std::shared_ptr<CLGnssAssistanceFile>) const", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
LABEL_23:
  sub_10084179C(v4);
  if (v2) {
    sub_1000DB0A0(v2);
  }
}

void sub_1008544EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100854504(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100854544()
{
}

void sub_100854554()
{
}

void *sub_100854568(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CC248;
  result[1] = v3;
  return result;
}

uint64_t sub_1008545B0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CC248;
  a2[1] = v2;
  return result;
}

void sub_1008545DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v4 = *(void **)(a1 + 8);
  if (!v3) {
    goto LABEL_23;
  }
  if (*(char *)(v3 + 47) < 0)
  {
    if (!*(void *)(v3 + 32)) {
      goto LABEL_23;
    }
  }
  else if (!*(unsigned char *)(v3 + 47))
  {
    goto LABEL_23;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  long long v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (const char *)(v3 + 24);
    if (*(char *)(v3 + 47) < 0) {
      uint64_t v6 = *(const char **)v6;
    }
    *(_DWORD *)long long buf = 136446210;
    long long v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "file,%{public}s,ClassD", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLGnssController::CLGnssController(id<CLIntersiloUniverse>, LocationObserverCallback, MeasurementObserverCallback, DpoCallback, VendorLocationCallback, BasebandTimeTransferObserverCallback, RhythmicBatchedLocationCallback, BasebandCausesL1InterferenceModeAssertionCallback, OnGnssStopCallback, KnownACGnssLocationCallback)::(anonymous class)::operator()(std::shared_ptr<CLGnssAssistanceFile>) const", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  int v7 = (const char **)(v3 + 24);
  uint64_t v8 = (const char *)(v3 + 24);
  if (*(char *)(v3 + 47) < 0) {
    uint64_t v8 = *v7;
  }
  if (!sub_1004BF004(v8, 4))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    int v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v10 = (const char *)(v3 + 24);
      if (*(char *)(v3 + 47) < 0) {
        unint64_t v10 = *v7;
      }
      *(_DWORD *)long long buf = 136446210;
      long long v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,cannot set protection class,assistance file,%{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLGnssController::CLGnssController(id<CLIntersiloUniverse>, LocationObserverCallback, MeasurementObserverCallback, DpoCallback, VendorLocationCallback, BasebandTimeTransferObserverCallback, RhythmicBatchedLocationCallback, BasebandCausesL1InterferenceModeAssertionCallback, OnGnssStopCallback, KnownACGnssLocationCallback)::(anonymous class)::operator()(std::shared_ptr<CLGnssAssistanceFile>) const", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
LABEL_23:
  sub_1008418B0(v4);
  if (v2) {
    sub_1000DB0A0(v2);
  }
}

void sub_100854968(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100854980(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1008549C0()
{
}

void sub_1008549D0()
{
}

void *sub_1008549E4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CC2C8;
  result[1] = v3;
  return result;
}

uint64_t sub_100854A2C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CC2C8;
  a2[1] = v2;
  return result;
}

void sub_100854A58(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100854A60(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100854AA0()
{
}

void sub_100854AB0()
{
}

void *sub_100854AC4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CC358;
  result[1] = v3;
  return result;
}

uint64_t sub_100854B0C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CC358;
  a2[1] = v2;
  return result;
}

uint64_t sub_100854B38(uint64_t a1, char *a2)
{
  return sub_1008492D4(*(uint64_t **)(a1 + 8), *a2);
}

uint64_t sub_100854B44(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100854B84()
{
}

void *sub_100854B90(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100854C18()
{
}

void *sub_100854C2C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CC3D8;
  result[1] = v3;
  return result;
}

uint64_t sub_100854C74(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CC3D8;
  a2[1] = v2;
  return result;
}

void sub_100854CA0(uint64_t a1, double *a2, double *a3, double *a4)
{
}

uint64_t sub_100854CB4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100854CF4()
{
}

void *sub_100854D00(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100854D88()
{
}

void *sub_100854D9C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CC468;
  result[1] = v3;
  return result;
}

uint64_t sub_100854DE4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CC468;
  a2[1] = v2;
  return result;
}

__n128 sub_100854E10(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[7];
  v7[6] = a2[6];
  v7[7] = v2;
  v7[8] = a2[8];
  long long v3 = a2[3];
  _DWORD v7[2] = a2[2];
  void v7[3] = v3;
  long long v4 = a2[5];
  void v7[4] = a2[4];
  v7[5] = v4;
  long long v5 = a2[1];
  v7[0] = *a2;
  v7[1] = v5;
  sub_100841FC0(*(void **)(a1 + 8), (uint64_t)v7);
  return result;
}

uint64_t sub_100854E60(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100854EA0()
{
}

void *sub_100854EAC(void *a1)
{
  long long v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100854F34()
{
}

void *sub_100854F48(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CC4E8;
  result[1] = v3;
  return result;
}

uint64_t sub_100854F90(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CC4E8;
  a2[1] = v2;
  return result;
}

void sub_100854FBC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100854FC4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100855004()
{
}

void *sub_100855010(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100855098()
{
}

void *sub_1008550AC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CC578;
  result[1] = v3;
  return result;
}

uint64_t sub_1008550F4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CC578;
  a2[1] = v2;
  return result;
}

void sub_100855120(uint64_t a1, unsigned int *a2)
{
}

uint64_t sub_10085512C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085516C()
{
}

void sub_10085517C()
{
}

void *sub_100855190(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CC608;
  result[1] = v3;
  return result;
}

uint64_t sub_1008551D8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CC608;
  a2[1] = v2;
  return result;
}

uint64_t sub_100855204(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  long long v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    __int16 v9 = 2082;
    unint64_t v10 = "injectassistancepedometerspeed";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", (uint8_t *)v6, 0x1Cu);
  }
  return (*(uint64_t (**)(void, uint64_t))(*(void *)*v3 + 104))(*v3, a2);
}

uint64_t sub_100855328(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100855368()
{
}

void *sub_100855374(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1008553FC()
{
}

void *sub_100855410(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CC698;
  result[1] = v3;
  return result;
}

uint64_t sub_100855458(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CC698;
  a2[1] = v2;
  return result;
}

uint64_t sub_100855484(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
  }
  long long v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    __int16 v9 = 2082;
    unint64_t v10 = "injectassistancepedometerspeedconstraint";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", (uint8_t *)v6, 0x1Cu);
  }
  return (*(uint64_t (**)(void, uint64_t))(*(void *)*v3 + 112))(*v3, a2);
}

uint64_t sub_1008555A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1008555E8()
{
}

void *sub_1008555F4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100855678(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100855710(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1008557AC()
{
}

void *sub_1008557C0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CC728;
  result[1] = v3;
  return result;
}

uint64_t sub_100855808(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CC728;
  a2[1] = v2;
  return result;
}

uint64_t sub_100855834(uint64_t a1, double *a2, double *a3, int *a4)
{
  uint64_t result = *(void *)(*(void *)(a1 + 8) + 1112);
  if (result) {
    return sub_1001B1A40(result, *a4, *a2, *a3);
  }
  return result;
}

uint64_t sub_100855858(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100855898()
{
}

void sub_1008558A8()
{
}

void *sub_1008558BC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CC7B8;
  result[1] = v3;
  return result;
}

uint64_t sub_100855904(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CC7B8;
  a2[1] = v2;
  return result;
}

void sub_100855930(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 112);
  v12[6] = *(_OWORD *)(a2 + 96);
  v12[7] = v4;
  v13[0] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)v13 + 12) = *(_OWORD *)(a2 + 140);
  long long v5 = *(_OWORD *)(a2 + 48);
  v12[2] = *(_OWORD *)(a2 + 32);
  v12[3] = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  v12[4] = *(_OWORD *)(a2 + 64);
  v12[5] = v6;
  long long v7 = *(_OWORD *)(a2 + 16);
  v12[0] = *(_OWORD *)a2;
  v12[1] = v7;
  memcpy(v14, (const void *)(a2 + 160), sizeof(v14));
  uint64_t v15 = *(void *)(a2 + 680);
  uint64_t v8 = *(std::__shared_weak_count **)(a2 + 688);
  long long v16 = v8;
  *(_OWORD *)(a2 + 680) = 0u;
  long long v9 = *(_OWORD *)(a2 + 776);
  long long v21 = *(_OWORD *)(a2 + 760);
  *(_OWORD *)long long v22 = v9;
  *(void *)&v22[13] = *(void *)(a2 + 789);
  long long v10 = *(_OWORD *)(a2 + 712);
  long long v17 = *(_OWORD *)(a2 + 696);
  long long v18 = v10;
  long long v11 = *(_OWORD *)(a2 + 744);
  long long v19 = *(_OWORD *)(a2 + 728);
  long long v20 = v11;
  if (*(void *)(*(void *)(a1 + 8) + 1048))
  {
    sub_100F3EC3C(*(void *)(*(void *)(a1 + 8) + 1048), v12);
    uint64_t v8 = v16;
  }
  if (v8) {
    sub_1000DB0A0(v8);
  }
}

void sub_100855A0C(_Unwind_Exception *a1)
{
  if (STACK[0x2B0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2B0]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100855A24(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100855A64()
{
}

void *sub_100855A70(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100855AF4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100855B7C()
{
}

void *sub_100855B90(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CC848;
  result[1] = v3;
  return result;
}

uint64_t sub_100855BD8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CC848;
  a2[1] = v2;
  return result;
}

void sub_100855C04(uint64_t a1, unsigned int *a2, void *__src)
{
  unsigned int v4 = *a2;
  memcpy(__dst, __src, sizeof(__dst));
  sub_100841B9C(*(uint64_t **)(a1 + 8), v4, __dst);
}

uint64_t sub_100855C58(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100855C98()
{
}

void *sub_100855CA4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100855D2C()
{
}

void *sub_100855D40(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CC8D8;
  result[1] = v3;
  return result;
}

uint64_t sub_100855D88(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CC8D8;
  a2[1] = v2;
  return result;
}

void sub_100855DB4(uint64_t a1, int *a2, int **a3)
{
  int v3 = *a2;
  unsigned int v4 = *(_DWORD **)(a1 + 8);
  if (*(void *)v4)
  {
    *(_DWORD *)(*(void *)v4 + 472) = v3;
    long long v5 = *a3;
    long long v6 = a3[1];
    if (*a3 != v6)
    {
      do
      {
        int v7 = *v5++;
        int v10 = v7;
        uint64_t v8 = (uint64_t **)(*(void *)v4 + 64);
        long long v11 = &v10;
        long long v9 = sub_1000FEE0C(v8, &v10, (uint64_t)&unk_101D0B290, &v11);
        void v9[5] = (uint64_t *)((char *)v9[5] + 1);
      }
      while (v5 != v6);
    }
  }
  sub_1008466BC(v4, v3);
}

uint64_t sub_100855E5C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100855E9C()
{
}

void *sub_100855EA8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100855F30()
{
}

void *sub_100855F44(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CC968;
  result[1] = v3;
  return result;
}

uint64_t sub_100855F8C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CC968;
  a2[1] = v2;
  return result;
}

void sub_100855FB8(uint64_t a1, int *a2)
{
}

uint64_t sub_100855FC4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100856004()
{
}

void *sub_100856010(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_100856094(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    long long v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (*((_DWORD *)i + 4) == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = a1 + 16;
  float v13 = operator new(0x550uLL);
  v23[0] = v13;
  v23[1] = a1 + 16;
  *float v13 = 0;
  v13[1] = v6;
  sub_1008562EC((uint64_t)(v13 + 2), a3);
  char v24 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_100100330(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  long long v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *(void *)v23[0] = *v20;
    *long long v20 = v23[0];
  }
  else
  {
    *(void *)v23[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v23[0];
    *(void *)(*(void *)a1 + 8 * v3) = v12;
    if (*(void *)v23[0])
    {
      unint64_t v21 = *(void *)(*(void *)v23[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7) {
          v21 %= v7;
        }
      }
      else
      {
        v21 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v23[0];
    }
  }
  uint64_t i = (uint64_t *)v23[0];
  v23[0] = 0;
  ++*(void *)(a1 + 24);
  sub_100856760((uint64_t)v23, 0);
  return i;
}

void sub_1008562D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100856760((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double sub_1008562EC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v2 = a2 + 8;
  char v4 = *(unsigned char *)(v2 + 8);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  long long v6 = *(_OWORD *)(v2 + 80);
  long long v5 = *(_OWORD *)(v2 + 96);
  uint64_t v7 = *(void *)(v2 + 112);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(v2 + 64);
  *(void *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 88) = v6;
  long long v8 = *(_OWORD *)(v2 + 16);
  long long v9 = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(a1 + 40) = v9;
  *(_OWORD *)(a1 + 24) = v8;
  long long v10 = *(_OWORD *)(v2 + 120);
  *(void *)(a1 + 144) = *(void *)(v2 + 136);
  *(_OWORD *)(a1 + 128) = v10;
  double result = 0.0;
  *(_OWORD *)(v2 + 128) = 0u;
  *(void *)(v2 + 120) = 0;
  *(void *)(a1 + 152) = *(void *)(v2 + 144);
  long long v12 = *(_OWORD *)(v2 + 152);
  *(void *)(a1 + 176) = *(void *)(v2 + 168);
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(v2 + 160) = 0u;
  *(void *)(v2 + 152) = 0;
  long long v13 = *(_OWORD *)(v2 + 176);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(v2 + 192);
  *(_OWORD *)(a1 + 184) = v13;
  long long v14 = *(_OWORD *)(v2 + 208);
  *(void *)(a1 + 232) = *(void *)(v2 + 224);
  *(_OWORD *)(a1 + 216) = v14;
  *(_OWORD *)(v2 + 216) = 0u;
  *(void *)(v2 + 208) = 0;
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(v2 + 232);
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(v2 + 240);
  *(void *)(a1 + 264) = *(void *)(v2 + 256);
  *(void *)(v2 + 256) = 0;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(v2 + 264);
  __int16 v15 = *(_WORD *)(v2 + 272);
  *(unsigned char *)(a1 + 282) = *(unsigned char *)(v2 + 274);
  *(_WORD *)(a1 + 280) = v15;
  long long v16 = *(_OWORD *)(v2 + 280);
  *(void *)(a1 + 304) = *(void *)(v2 + 296);
  *(_OWORD *)(a1 + 288) = v16;
  *(void *)(v2 + 280) = 0;
  *(_OWORD *)(v2 + 288) = 0u;
  long long v17 = *(_OWORD *)(v2 + 304);
  *(void *)(a1 + 328) = *(void *)(v2 + 320);
  *(_OWORD *)(a1 + 312) = v17;
  *(_OWORD *)(v2 + 312) = 0u;
  *(void *)(v2 + 304) = 0;
  long long v18 = *(_OWORD *)(v2 + 328);
  *(void *)(a1 + 352) = *(void *)(v2 + 344);
  *(_OWORD *)(a1 + 336) = v18;
  *(void *)(v2 + 344) = 0;
  *(_OWORD *)(v2 + 328) = 0u;
  long long v19 = *(_OWORD *)(v2 + 352);
  *(void *)(a1 + 376) = *(void *)(v2 + 368);
  *(_OWORD *)(a1 + 360) = v19;
  long long v20 = *(_OWORD *)(v2 + 376);
  *(void *)(a1 + 400) = *(void *)(v2 + 392);
  *(_OWORD *)(a1 + 384) = v20;
  *(void *)(v2 + 392) = 0;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_WORD *)(a1 + 408) = *(_WORD *)(v2 + 400);
  *(void *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(v2 + 408);
  *(void *)(a1 + 432) = *(void *)(v2 + 424);
  *(void *)(v2 + 424) = 0;
  *(_OWORD *)(v2 + 408) = 0u;
  long long v21 = *(_OWORD *)(v2 + 528);
  long long v23 = *(_OWORD *)(v2 + 480);
  long long v22 = *(_OWORD *)(v2 + 496);
  *(_OWORD *)(a1 + 520) = *(_OWORD *)(v2 + 512);
  *(_OWORD *)(a1 + 536) = v21;
  *(_OWORD *)(a1 + 488) = v23;
  *(_OWORD *)(a1 + 504) = v22;
  long long v25 = *(_OWORD *)(v2 + 560);
  long long v24 = *(_OWORD *)(v2 + 576);
  long long v26 = *(_OWORD *)(v2 + 544);
  *(_OWORD *)(a1 + 596) = *(_OWORD *)(v2 + 588);
  *(_OWORD *)(a1 + 568) = v25;
  *(_OWORD *)(a1 + 584) = v24;
  *(_OWORD *)(a1 + 552) = v26;
  long long v27 = *(_OWORD *)(v2 + 432);
  long long v28 = *(_OWORD *)(v2 + 464);
  *(_OWORD *)(a1 + 456) = *(_OWORD *)(v2 + 448);
  *(_OWORD *)(a1 + 472) = v28;
  *(_OWORD *)(a1 + 440) = v27;
  __int16 v29 = *(_WORD *)(v2 + 608);
  *(unsigned char *)(a1 + 618) = *(unsigned char *)(v2 + 610);
  *(_WORD *)(a1 + 616) = v29;
  long long v30 = *(_OWORD *)(v2 + 616);
  *(void *)(a1 + 640) = *(void *)(v2 + 632);
  *(_OWORD *)(a1 + 624) = v30;
  *(void *)(v2 + 616) = 0;
  *(_OWORD *)(v2 + 624) = 0u;
  long long v31 = *(_OWORD *)(v2 + 640);
  *(void *)(a1 + 664) = *(void *)(v2 + 656);
  *(_OWORD *)(a1 + 648) = v31;
  *(_OWORD *)(v2 + 648) = 0u;
  *(void *)(v2 + 640) = 0;
  long long v32 = *(_OWORD *)(v2 + 664);
  *(void *)(a1 + 688) = *(void *)(v2 + 680);
  *(_OWORD *)(a1 + 672) = v32;
  *(void *)(v2 + 680) = 0;
  *(_OWORD *)(v2 + 664) = 0u;
  long long v33 = *(_OWORD *)(v2 + 688);
  *(void *)(a1 + 712) = *(void *)(v2 + 704);
  *(_OWORD *)(a1 + 696) = v33;
  long long v34 = *(_OWORD *)(v2 + 712);
  *(void *)(a1 + 736) = *(void *)(v2 + 728);
  *(_OWORD *)(a1 + 720) = v34;
  *(void *)(v2 + 728) = 0;
  *(_OWORD *)(v2 + 712) = 0u;
  *(_WORD *)(a1 + 744) = *(_WORD *)(v2 + 736);
  *(void *)(a1 + 752) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 752) = *(_OWORD *)(v2 + 744);
  *(void *)(a1 + 768) = *(void *)(v2 + 760);
  *(void *)(v2 + 760) = 0;
  *(_OWORD *)(v2 + 744) = 0u;
  long long v35 = *(_OWORD *)(v2 + 864);
  long long v37 = *(_OWORD *)(v2 + 816);
  long long v36 = *(_OWORD *)(v2 + 832);
  *(_OWORD *)(a1 + 856) = *(_OWORD *)(v2 + 848);
  *(_OWORD *)(a1 + 872) = v35;
  *(_OWORD *)(a1 + 824) = v37;
  *(_OWORD *)(a1 + 840) = v36;
  long long v39 = *(_OWORD *)(v2 + 896);
  long long v38 = *(_OWORD *)(v2 + 912);
  long long v40 = *(_OWORD *)(v2 + 880);
  *(_OWORD *)(a1 + 932) = *(_OWORD *)(v2 + 924);
  *(_OWORD *)(a1 + 904) = v39;
  *(_OWORD *)(a1 + 920) = v38;
  *(_OWORD *)(a1 + 888) = v40;
  long long v41 = *(_OWORD *)(v2 + 768);
  long long v42 = *(_OWORD *)(v2 + 800);
  *(_OWORD *)(a1 + 792) = *(_OWORD *)(v2 + 784);
  *(_OWORD *)(a1 + 808) = v42;
  *(_OWORD *)(a1 + 776) = v41;
  long long v43 = *(_OWORD *)(v2 + 944);
  *(void *)(a1 + 968) = *(void *)(v2 + 960);
  *(_OWORD *)(a1 + 952) = v43;
  *(_OWORD *)(v2 + 952) = 0u;
  *(void *)(v2 + 944) = 0;
  long long v44 = *(_OWORD *)(v2 + 968);
  *(void *)(a1 + 992) = *(void *)(v2 + 984);
  *(_OWORD *)(a1 + 976) = v44;
  *(_OWORD *)(v2 + 976) = 0u;
  *(void *)(v2 + 968) = 0;
  uint64_t v45 = *(void *)(v2 + 992);
  *(_DWORD *)(a1 + 1008) = *(_DWORD *)(v2 + 1000);
  *(void *)(a1 + 1000) = v45;
  long long v46 = *(_OWORD *)(v2 + 1008);
  long long v47 = *(_OWORD *)(v2 + 1024);
  long long v48 = *(_OWORD *)(v2 + 1040);
  *(void *)(a1 + 1064) = *(void *)(v2 + 1056);
  *(_OWORD *)(a1 + 1048) = v48;
  *(_OWORD *)(a1 + 1016) = v46;
  *(_OWORD *)(a1 + 1032) = v47;
  *(unsigned char *)(a1 + 1072) = *(unsigned char *)(v2 + 1064);
  long long v49 = *(_OWORD *)(v2 + 1072);
  *(void *)(a1 + 1096) = *(void *)(v2 + 1088);
  *(_OWORD *)(a1 + 1080) = v49;
  *(_OWORD *)(v2 + 1080) = 0u;
  *(void *)(v2 + 1072) = 0;
  long long v50 = *(_OWORD *)(v2 + 1096);
  *(_OWORD *)(a1 + 1116) = *(_OWORD *)(v2 + 1108);
  *(_OWORD *)(a1 + 1104) = v50;
  *(void *)(a1 + 1136) = 0;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1136) = *(_OWORD *)(v2 + 1128);
  *(void *)(a1 + 1152) = *(void *)(v2 + 1144);
  *(void *)(v2 + 1144) = 0;
  *(_OWORD *)(v2 + 1128) = 0u;
  *(unsigned char *)(a1 + 1160) = *(unsigned char *)(v2 + 1152);
  long long v51 = *(_OWORD *)(v2 + 1160);
  *(void *)(a1 + 1184) = *(void *)(v2 + 1176);
  *(_OWORD *)(a1 + 1168) = v51;
  *(_OWORD *)(v2 + 1168) = 0u;
  *(void *)(v2 + 1160) = 0;
  long long v52 = *(_OWORD *)(v2 + 1184);
  *(_OWORD *)(a1 + 1204) = *(_OWORD *)(v2 + 1196);
  *(_OWORD *)(a1 + 1192) = v52;
  *(void *)(a1 + 1224) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(void *)(a1 + 1224) = *(void *)(v2 + 1216);
  *(void *)(a1 + 1232) = *(void *)(v2 + 1224);
  *(void *)(a1 + 1240) = *(void *)(v2 + 1232);
  *(void *)(v2 + 1232) = 0;
  *(_OWORD *)(v2 + 1216) = 0u;
  long long v53 = *(_OWORD *)(v2 + 1240);
  *(void *)(a1 + 1264) = *(void *)(v2 + 1256);
  *(_OWORD *)(a1 + 1248) = v53;
  *(void *)(v2 + 1240) = 0;
  *(_OWORD *)(v2 + 1248) = 0u;
  long long v54 = *(_OWORD *)(v2 + 1264);
  *(void *)(a1 + 1288) = *(void *)(v2 + 1280);
  *(_OWORD *)(a1 + 1272) = v54;
  *(_OWORD *)(v2 + 1272) = 0u;
  *(void *)(v2 + 1264) = 0;
  long long v55 = *(_OWORD *)(v2 + 1288);
  *(void *)(a1 + 1312) = *(void *)(v2 + 1304);
  *(_OWORD *)(a1 + 1296) = v55;
  *(void *)(v2 + 1304) = 0;
  *(_OWORD *)(v2 + 1288) = 0u;
  long long v56 = *(_OWORD *)(v2 + 1312);
  *(void *)(a1 + 1336) = *(void *)(v2 + 1328);
  *(_OWORD *)(a1 + 1320) = v56;
  *(void *)(v2 + 1328) = 0;
  *(_OWORD *)(v2 + 1312) = 0u;
  return result;
}

void sub_100856760(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10084DD34((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }
}

uint64_t *sub_1008567B8(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    long long v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = a1 + 16;
  long long v14 = operator new(0x550uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *long long v14 = 0;
  v14[1] = v7;
  sub_100856A10((uint64_t)(v14 + 2), *a4);
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100100330(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  long long v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    void *v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  uint64_t i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  sub_100856760((uint64_t)v24, 0);
  return i;
}

void sub_1008569F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100856760((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100856A10(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = (_OWORD *)(a1 + 1020);
  *(_DWORD *)a1 = *a2;
  bzero((void *)(a1 + 16), 0x530uLL);
  *(_DWORD *)(a1 + 8) = 255;
  *(_DWORD *)(a1 + 12) = 257;
  *(void *)&long long v4 = 0x100000001;
  *((void *)&v4 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 28) = v4;
  *(void *)(a1 + 52) = 0;
  *(void *)(a1 + 44) = 0;
  *(void *)(a1 + 57) = 0;
  *(_OWORD *)(a1 + 76) = v4;
  *(void *)(a1 + 100) = 0;
  *(void *)(a1 + 92) = 0;
  *(void *)(a1 + 105) = 0;
  *(void *)(a1 + 120) = 0x401C000000000000;
  sub_10084DB0C(a1 + 128);
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_WORD *)(a1 + 1000) = 7275;
  *(void *)(a1 + 1004) = 0;
  *(_WORD *)(a1 + 1016) = 256;
  *uint64_t v3 = xmmword_101D47C90;
  *(void *)(a1 + 1036) = 0x93A80018B8200;
  *(_WORD *)(a1 + 1044) = 256;
  *(_OWORD *)((char *)v3 + 28) = xmmword_101D47C90;
  *(void *)(a1 + 1064) = 0x93A80018B8200;
  *(unsigned char *)(a1 + 1072) = 0;
  *(void *)(a1 + 1080) = 0;
  *(void *)(a1 + 1096) = 0;
  *(void *)(a1 + 1088) = 0;
  *(_OWORD *)(a1 + 1104) = xmmword_101D47CA0;
  *(void *)(a1 + 1120) = 0xE1000015180;
  *(_DWORD *)(a1 + 1128) = 5184000;
  *(void *)(a1 + 1176) = 0;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 1184) = 0;
  *(void *)(a1 + 1152) = 0;
  *(void *)(a1 + 1136) = 0;
  *(void *)(a1 + 1144) = 0;
  *(unsigned char *)(a1 + 1160) = 0;
  *(_OWORD *)((char *)v3 + 172) = xmmword_101D47CA0;
  *(void *)(a1 + 1208) = 0xE1000015180;
  *(_DWORD *)(a1 + 1216) = 5184000;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(void *)(a1 + 1336) = 0;
  return a1;
}

void sub_100856B78()
{
}

void *sub_100856B8C(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CC9F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100856BD4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CC9F8;
  a2[1] = v2;
  return result;
}

id sub_100856C00(uint64_t a1)
{
  char v1 = *(void **)(a1 + 8);
  sub_10083BC0C((uint64_t)v1);
  uint64_t v2 = v1[134];
  if (v2) {
    sub_100A2CBC8(v2);
  }
  uint64_t v3 = v1[135];
  if (v3) {
    sub_10151DE2C(v3);
  }
  uint64_t v4 = v1[138];
  if (v4) {
    sub_1018DB544(v4);
  }
  long long v5 = (void *)v1[133];
  if (v5) {
    sub_100B93A74(v5);
  }
  id result = (id)v1[136];
  if (result)
  {
    return sub_100779F5C((uint64_t)result);
  }
  return result;
}

uint64_t sub_100856C7C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100856CBC()
{
}

void sub_100856CCC()
{
}

void *sub_100856CE0(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CCA78;
  result[1] = v3;
  return result;
}

uint64_t sub_100856D28(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CCA78;
  a2[1] = v2;
  return result;
}

void sub_100856D54(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  sub_10083BD78(v1);
  uint64_t v2 = *(_DWORD **)(v1 + 1088);
  if (v2) {
    sub_10077A104(v2);
  }
  uint64_t v3 = *(unsigned char **)(v1 + 1064);
  if (v3) {
    sub_100B93C54(v3);
  }
  uint64_t v4 = *(void *)(v1 + 1104);
  if (v4) {
    sub_1018DB2F8(v4);
  }
  uint64_t v5 = *(void *)(v1 + 1080);
  if (v5) {
    sub_10151DB68(v5);
  }
  uint64_t v6 = *(void *)(v1 + 1072);
  if (v6) {
    sub_100A2D31C(v6);
  }
  if (*(void *)(v1 + 1152) && *(unsigned char *)(v1 + 1268))
  {
    sub_10084372C((uint64_t *)(v1 + 848));
    sub_100843578((uint64_t *)(v1 + 832));
    *(unsigned char *)(v1 + 1268) = 0;
  }

  sub_10083BCF8((void *)v1);
}

uint64_t sub_100856DF0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100856E30()
{
}

void sub_100856E40()
{
}

void *sub_100856E54(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CCAF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100856E9C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CCAF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_100856EC8(uint64_t a1)
{
  return sub_10083BC0C(*(void *)(a1 + 8));
}

uint64_t sub_100856ED0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100856F10()
{
}

void sub_100856F20()
{
}

void *sub_100856F34(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CCB78;
  result[1] = v3;
  return result;
}

uint64_t sub_100856F7C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CCB78;
  a2[1] = v2;
  return result;
}

void sub_100856FA8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  sub_10083BD78((uint64_t)v1);

  sub_10083BCF8(v1);
}

uint64_t sub_100856FE4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100857024()
{
}

void sub_100857030(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = off_10234BF80;
  *a1 = off_1022CCBF8;
  a1[1] = 0;
  id v8 = a2;
  a1[5] = 0;
  a1[2] = v8;
  a1[3] = a3;
  a1[4] = a5;
  a1[6] = 0;
  operator new[]();
}

void sub_1008571C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  sub_1019D78CC(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_1008571E8(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_1008571FC(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100857218(uint64_t a1)
{
  sub_100857338(a1);

  operator delete();
}

__n128 sub_100857250(uint64_t a1, uint64_t a2, __n128 *a3)
{
  uint64_t v3 = (__n128 *)(*(void *)(a1 + 56) + 24 * *(unsigned int *)(a1 + 64));
  __n128 result = *a3;
  v3[1].n128_u64[0] = a3[1].n128_u64[0];
  *uint64_t v3 = result;
  unsigned int v5 = *(_DWORD *)(a1 + 68);
  unsigned int v6 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v6;
  if (v6 >= v5)
  {
    uint64_t v8 = *(void *)(a1 + 24);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v11 = *(void **)(a1 + 16);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1008573D0;
    v12[3] = &unk_1022CCC40;
    v12[4] = v9;
    v12[5] = v8;
    unsigned int v13 = v6;
    v12[6] = v10;
    v12[7] = v7;
    [v11 async:v12];
    operator new[]();
  }
  return result;
}

uint64_t sub_100857338(uint64_t a1)
{
  *(void *)a1 = off_1022CCBF8;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  if (*(void *)(a1 + 56)) {
    operator delete[]();
  }

  return sub_1019D78CC(a1);
}

uint64_t sub_1008573D0(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16))()) {
    (*(void (**)(void, void, void))(a1 + 40))(*(void *)(a1 + 48), *(unsigned int *)(a1 + 64), *(void *)(a1 + 56));
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    operator delete[]();
  }
  return result;
}

void sub_100857448(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = off_10234BF80;
  *a1 = off_1022CCC70;
  a1[1] = 0;
  id v8 = a2;
  a1[5] = 0;
  a1[2] = v8;
  a1[3] = a3;
  a1[4] = a5;
  a1[6] = 0;
  operator new[]();
}

void sub_1008575D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  sub_1019D78CC(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100857600(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100857614(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100857630(uint64_t a1)
{
  sub_100857750(a1);

  operator delete();
}

__n128 sub_100857668(uint64_t a1, uint64_t a2, __n128 *a3)
{
  uint64_t v3 = (__n128 *)(*(void *)(a1 + 56) + 24 * *(unsigned int *)(a1 + 64));
  __n128 result = *a3;
  v3[1].n128_u64[0] = a3[1].n128_u64[0];
  *uint64_t v3 = result;
  unsigned int v5 = *(_DWORD *)(a1 + 68);
  unsigned int v6 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v6;
  if (v6 >= v5)
  {
    uint64_t v8 = *(void *)(a1 + 24);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v11 = *(void **)(a1 + 16);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1008577E8;
    v12[3] = &unk_1022CCC40;
    v12[4] = v9;
    v12[5] = v8;
    unsigned int v13 = v6;
    v12[6] = v10;
    v12[7] = v7;
    [v11 async:v12];
    operator new[]();
  }
  return result;
}

uint64_t sub_100857750(uint64_t a1)
{
  *(void *)a1 = off_1022CCC70;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  if (*(void *)(a1 + 56)) {
    operator delete[]();
  }

  return sub_1019D78CC(a1);
}

uint64_t sub_1008577E8(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16))()) {
    (*(void (**)(void, void, void))(a1 + 40))(*(void *)(a1 + 48), *(unsigned int *)(a1 + 64), *(void *)(a1 + 56));
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    operator delete[]();
  }
  return result;
}

uint64_t sub_100857860(uint64_t a1)
{
  return sub_100839F84(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t sub_100857870@<X0>(long long *a1@<X1>, long long *a2@<X2>, void *a3@<X8>)
{
  unsigned int v6 = (char *)operator new(0x48uLL);
  uint64_t result = sub_100853678((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_1008578C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1008578D8()
{
}

void *sub_1008578EC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1022CCCC0;
  result[1] = v3;
  return result;
}

uint64_t sub_100857934(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022CCCC0;
  a2[1] = v2;
  return result;
}

void sub_100857960(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  v6[0] = *a2;
  v6[1] = (uint64_t)v2;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  if (sub_10084C210(v3, v6))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "knownACFile,calling modifyKnownACDownloader as source url has changed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022CB2C8);
      }
      __int16 v7 = 0;
      unsigned int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLGnssController::modifyKnownACDownloader()::(anonymous class)::operator()(std::shared_ptr<CLGnssAssistanceFile>) const", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    sub_10084BE24(v3);
  }
  if (v2) {
    sub_1000DB0A0(v2);
  }
}

void sub_100857B24(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100857B3C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100857B7C()
{
}

BOOL sub_100857B88()
{
  uint64_t v1 = qword_1024193D8;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

BOOL sub_100857BA8()
{
  uint64_t v2 = *(NSObject **)(v0 + 984);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

BOOL sub_100857BC4()
{
  uint64_t v2 = *(NSObject **)(v0 + 984);
  return os_signpost_enabled(v2);
}

BOOL sub_100857BDC()
{
  uint64_t v1 = qword_1024193D8;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

BOOL sub_100857BFC()
{
  uint64_t v1 = qword_1024193D8;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

void sub_100857C44()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_100857CC4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_100857D54(_Unwind_Exception *a1)
{
}

void sub_100857D6C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_100857E24(_Unwind_Exception *a1)
{
}

void sub_100857E3C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *uint64_t v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_100857EE4(_Unwind_Exception *a1)
{
}

void sub_100857EFC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D47CE0;
      v0[3] = unk_101D47CF0;
      v0[4] = xmmword_101D47D00;
      v0[0] = xmmword_101D47CC0;
      v0[1] = unk_101D47CD0;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_100857FDC(_Unwind_Exception *a1)
{
}

uint64_t sub_100857FF4()
{
  sub_100134750(qword_10247E558, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247E558, (void *)&_mh_execute_header);
  sub_100134750(qword_10247E570, "GnssController");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247E570, (void *)&_mh_execute_header);
}

void sub_100858AC4(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void *sub_100858AF4(void *a1, int a2)
{
  sub_100134750(__p, "");
  sub_100858C54((uint64_t)a1, "SmoothedGaitMetricsHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_1022CCE08;
  a1[9] = off_1022CCED0;
  a1[44] = off_1022CCF20;
  sub_100F03BA0(a1 + 45, 0, 0);
  sub_100F03BA0(a1 + 47, 0, 0);
  sub_100F03BA0(a1 + 49, 0, 0);
  sub_100F03BA0(a1 + 51, 0, 0);
  (*(void (**)(void *))(*a1 + 112))(a1);
  return a1;
}

void sub_100858C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100858C54(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 8));
  *unint64_t v12 = off_1022ADB08;
  *(void *)a1 = off_1022CD1D8;
  *(void *)(a1 + 72) = off_1022CD280;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_1022CD1D8;
  *(void *)(a1 + 72) = off_1022CD280;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 272) = 12000;
  *(void *)(a1 + 280) = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 288));
  *(void *)(a1 + 288) = off_1022ADB08;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_10085907C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  *a11 = v29;
  sub_1003BE1F8(v30);
  sub_10080DBC4(v28);
  sub_1011F8AE0(v27);
  *char v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_100859114()
{
}

void *sub_10085911C(void *a1)
{
  *a1 = off_1022CD1D8;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_1022CD280;
  a1[35] = off_1022ADAD8;
  sub_1003BE1F8(a1 + 36);
  sub_10080DBC4(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022ADAD8;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_1008591E0(uint64_t a1)
{
  return sub_10085911C((void *)(a1 - 72));
}

void *sub_1008591E8(uint64_t a1)
{
  return sub_10085911C((void *)(a1 - 352));
}

void sub_1008591F0(void *a1)
{
  sub_10085911C(a1);

  operator delete();
}

void sub_100859228(uint64_t a1)
{
  sub_10085911C((void *)(a1 - 72));

  operator delete();
}

void sub_100859264(uint64_t a1)
{
  sub_10085911C((void *)(a1 - 352));

  operator delete();
}

uint64_t sub_1008592A0(uint64_t *a1)
{
  uint64_t result = sub_10014C3C0(a1[10]);
  if (result)
  {
    sub_100859350((uint64_t)a1);
    sub_100859564((uint64_t)a1);
    sub_1005F7B0C(a1[10], "SmoothedGaitMetricsHistory", (const char **)&off_1022CCFC8, (const std::string::value_type **)&off_10241DCB0, 0);
    a1[45] = sub_100601D1C(a1[10], (uint64_t)"DELETE FROM SmoothedGaitMetricsHistory WHERE startTime < ?");
    a1[46] = v3;
    a1[47] = sub_100601D1C(a1[10], (uint64_t)"SELECT * from SmoothedGaitMetricsHistory ORDER BY startTime ASC");
    a1[48] = v4;
    a1[49] = sub_100601D1C(a1[10], (uint64_t)"SELECT COUNT(*) FROM SmoothedGaitMetricsHistory");
    a1[50] = v5;
    uint64_t result = sub_100601D1C(a1[10], (uint64_t)"INSERT INTO SmoothedGaitMetricsHistory (startTime, walkingSpeed, stepLength, cycleTime, distance, doubleSupportPercentage, asymmetryProbability, numGaitMetrics \t\t\t\t) VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
    a1[51] = result;
    a1[52] = v6;
  }
  return result;
}

uint64_t sub_100859350(uint64_t a1)
{
  uint64_t result = sub_1005F93E4(*(void *)(a1 + 80), "SmoothedGaitMetricsHistory");
  if (result)
  {
    uint64_t v3 = "numGaitMetrics";
    int v4 = 5;
    __int16 v5 = 0;
    char v6 = 0;
    char v7 = 0;
    sub_1005FEC4C(*(void *)(a1 + 80), "SmoothedGaitMetricsHistory", (uint64_t)"numGaitMetrics", (uint64_t)&v3);
  }
  return result;
}

uint64_t sub_100859564(uint64_t a1)
{
  uint64_t result = sub_1005F93E4(*(void *)(a1 + 80), "SmoothedGaitMetricsHistory");
  if (result)
  {
    uint64_t v3 = "numGaitMetrics";
    int v4 = 5;
    __int16 v5 = 0;
    char v6 = 0;
    char v7 = 0;
    sub_1005FEC4C(*(void *)(a1 + 80), "SmoothedGaitMetricsHistory", (uint64_t)"numGaitMetrics", (uint64_t)&v3);
  }
  return result;
}

void sub_100859A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a19);
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
  }
  sub_101A129A8((uint64_t)&a57);
  _Unwind_Resume(a1);
}

uint64_t sub_100859AB0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_100082068((void *)(a1 + 408), &v17);
    if (v17)
    {
      __int16 v5 = (sqlite3_stmt *)sub_10014D19C(v17);
      if (sub_100055D58(v5, 1, *(double *)(a2 + 8)))
      {
        char v6 = (sqlite3_stmt *)sub_10014D19C(v17);
        if (sub_100055D58(v6, 2, *(float *)(a2 + 16)))
        {
          char v7 = (sqlite3_stmt *)sub_10014D19C(v17);
          if (sub_100055D58(v7, 3, *(float *)(a2 + 24)))
          {
            uint64_t v8 = (sqlite3_stmt *)sub_10014D19C(v17);
            if (sub_100055D58(v8, 4, *(float *)(a2 + 36)))
            {
              uint64_t v9 = (sqlite3_stmt *)sub_10014D19C(v17);
              if (sub_100055D58(v9, 5, *(float *)(a2 + 32)))
              {
                uint64_t v10 = (sqlite3_stmt *)sub_10014D19C(v17);
                if (sub_100055D58(v10, 6, *(float *)(a2 + 20)))
                {
                  uint64_t v11 = (sqlite3_stmt *)sub_10014D19C(v17);
                  if (sub_100055D58(v11, 7, *(float *)(a2 + 28)))
                  {
                    unint64_t v12 = (sqlite3_stmt *)sub_10014D19C(v17);
                    if (sub_100055B20(v12, 8, *(_DWORD *)(a2 + 40)))
                    {
                      uint64_t v13 = *(void *)(a1 + 80);
                      long long v14 = (sqlite3_stmt *)sub_10014D19C(v17);
                      sub_10001FEB0(v13, v14);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022CD1A8);
      }
      float v15 = qword_1024191F8;
      if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[SmoothedGaitMetricsRecorderDb] Invalid SQL statement", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022CD1A8);
        }
        uint64_t v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLMobility::SmoothedGaitMetricsRecorderDb::insertRecordUL(const SmoothedGaitMetrics &, BOOL)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
    }
    uint64_t result = v17;
    uint64_t v17 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_100859D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100859DC8@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[111] < 0) {
    return (char *)sub_1000DC48C((unsigned char *)a2, *((void **)result + 11), *((void *)result + 12));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 88);
  *(void *)(a2 + 16) = *((void *)result + 13);
  return result;
}

char *sub_100859DF4@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[39] < 0) {
    return (char *)sub_1000DC48C((unsigned char *)a2, *((void **)result + 2), *((void *)result + 3));
  }
  *(_OWORD *)a2 = *((_OWORD *)result + 1);
  *(void *)(a2 + 16) = *((void *)result + 4);
  return result;
}

uint64_t sub_100859E20(uint64_t a1, void *a2)
{
  if (!sub_1005F9734(*(void *)(a1 + 80), (char *)a2))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022CD2C0);
    }
    int v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022CD2C0);
      }
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      size_t v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", (const char *)v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    memset(__p, 0, 24);
    sub_100134750(buf, (char *)a2);
    __int16 v5 = std::string::append(buf, "AutoIncr");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t v22 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long v21 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_100134750(buf, (char *)a2);
    char v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_10002B640(*(void *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v8 = HIBYTE(__p[2]);
    }
    else {
      size_t v8 = (size_t)__p[1];
    }
    uint64_t v9 = buf;
    sub_1001110E4((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v22 >= 0) {
      uint64_t v11 = v21;
    }
    else {
      uint64_t v11 = (void **)v21[0];
    }
    if (v22 >= 0) {
      std::string::size_type v12 = HIBYTE(v22);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v21[1];
    }
    uint64_t v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    long long v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v14;
    __p[1] = v23.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v23.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      char v15 = HIBYTE(__p[2]);
      long long v14 = __p[0];
    }
    if (v15 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)v14;
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)v16);
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = *(void *)(v17 + 88);
  }
  sub_10003CC68(v17, v18);
  return 0;
}

void sub_10085B04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10085B3AC(void *a1)
{
  uint64_t v2 = a1 + 9;
  if (sub_100082064(a1 + 9))
  {
    if (sub_100082064(v2))
    {
      sub_10010F274((uint64_t)buf);
      uint64_t v3 = sub_100132EFC(&v15, (uint64_t)"SELECT * FROM ", 14);
      (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
      if ((v13 & 0x80u) == 0) {
        int v4 = __p;
      }
      else {
        int v4 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v5 = v13;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      long long v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
      sub_100132EFC(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY startTime ASC", 62);
      if ((char)v13 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v7 = a1[10];
      std::stringbuf::str();
      if ((v13 & 0x80u) == 0) {
        size_t v8 = __p;
      }
      else {
        size_t v8 = (void **)__p[0];
      }
      sub_10014D518(v7, (uint64_t)v8);
    }
    return 100;
  }
  else
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022CD1A8);
    }
    uint64_t v9 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SmoothedGaitMetricsHistory not accessible", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_1022CD1A8);
      }
      LOWORD(__p[0]) = 0;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CMError CLMobility::SmoothedGaitMetricsRecorderDb::querySmoothedGaitMetricsInTimeRange(CFAbsoluteTime, CFAbsoluteTime, std::vector<SmoothedGaitMetrics> &) const", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    return 109;
  }
}

void sub_10085B918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_10085B994(uint64_t *a1, uint64_t a2)
{
  int v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  sub_10085BA08(a1, a2);
  return 0;
}

uint64_t sub_10085B9F4(uint64_t a1)
{
  return sub_10085B3AC((void *)(a1 - 352));
}

uint64_t sub_10085B9FC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_10085BA08(a2, a3);
}

uint64_t sub_10085BA08(uint64_t *a1, uint64_t a2)
{
  int v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v4, 0);
  int v5 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v5, 1);
  long long v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v7 = sqlite3_column_double(v6, 2);
  *(float *)(a2 + 16) = v7;
  size_t v8 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v9 = sqlite3_column_double(v8, 3);
  *(float *)(a2 + 24) = v9;
  uint64_t v10 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v11 = sqlite3_column_double(v10, 4);
  *(float *)(a2 + 36) = v11;
  std::string::size_type v12 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v13 = sqlite3_column_double(v12, 5);
  *(float *)(a2 + 32) = v13;
  long long v14 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v15 = sqlite3_column_double(v14, 6);
  *(float *)(a2 + 20) = v15;
  uint64_t v16 = (sqlite3_stmt *)sub_10014D19C(*a1);
  float v17 = sqlite3_column_double(v16, 7);
  *(float *)(a2 + 28) = v17;
  uint64_t v18 = (sqlite3_stmt *)sub_10014D19C(*a1);
  uint64_t result = sqlite3_column_int(v18, 8);
  *(_DWORD *)(a2 + 40) = result;
  return result;
}

uint64_t sub_10085BAF8(void *a1, _OWORD *a2)
{
  int v5 = a1 + 14;
  uint64_t v4 = a1[14];
  long long v6 = a1 + 9;
  uint64_t v18 = a1 + 14;
  (*(void (**)(void *))(v4 + 16))(a1 + 14);
  __int16 v19 = 256;
  if (sub_100082064(v6))
  {
    LODWORD(v17[0]) = 0;
    memset((char *)v17 + 8, 0, 36);
    int v7 = (*(uint64_t (**)(void *, _OWORD *))(*a1 + 104))(a1, v17);
    switch(v7)
    {
      case 0:
        long long v13 = v17[1];
        *a2 = v17[0];
        a2[1] = v13;
        *(_OWORD *)((char *)a2 + 28) = *(_OWORD *)((char *)&v17[1] + 12);
LABEL_32:
        uint64_t v10 = 100;
        goto LABEL_33;
      case 1:
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022CD1A8);
        }
        float v11 = qword_1024191F8;
        if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[SmoothedGaitMetricsHistory] Most recent smoothed gait metrics: No recent records in database", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_32;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022CD1A8);
        }
        std::string::size_type v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual CMError CLMobility::SmoothedGaitMetricsRecorderDb::mostRecentSmoothedGaitMetrics(SmoothedGaitMetrics &) const", "%s\n", v12);
        goto LABEL_40;
      case 2:
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022CD1A8);
        }
        size_t v8 = qword_1024191F8;
        if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[SmoothedGaitMetricsHistory] Most recent smoothed gait metrics: Query error", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_32;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 == -1) {
          goto LABEL_39;
        }
        break;
      default:
        if (qword_1024191F0 != -1) {
          dispatch_once(&qword_1024191F0, &stru_1022CD1A8);
        }
        long long v14 = qword_1024191F8;
        if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[SmoothedGaitMetricsHistory] Most recent smoothed gait metrics: unexpected return type", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_32;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024191F0 == -1) {
          goto LABEL_39;
        }
        break;
    }
    dispatch_once(&qword_1024191F0, &stru_1022CD1A8);
LABEL_39:
    std::string::size_type v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual CMError CLMobility::SmoothedGaitMetricsRecorderDb::mostRecentSmoothedGaitMetrics(SmoothedGaitMetrics &) const", "%s\n", v12);
LABEL_40:
    if (v12 != (char *)buf) {
      free(v12);
    }
    goto LABEL_32;
  }
  if (qword_1024191F0 != -1) {
    dispatch_once(&qword_1024191F0, &stru_1022CD1A8);
  }
  float v9 = qword_1024191F8;
  if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "[SmoothedGaitMetricsHistory] Database inaccessible, unable to query", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_1022CD1A8);
    }
    LOWORD(v17[0]) = 0;
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CMError CLMobility::SmoothedGaitMetricsRecorderDb::mostRecentSmoothedGaitMetrics(SmoothedGaitMetrics &) const", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  uint64_t v10 = 109;
LABEL_33:
  (*(void (**)(void *))(*v5 + 24))(v5);
  return v10;
}

void sub_10085C0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10085C118(uint64_t a1, _OWORD *a2)
{
  return sub_10085BAF8((void *)(a1 - 352), a2);
}

uint64_t sub_10085C120(void *a1, uint64_t a2)
{
  return sub_10085C128(a1, a2, 0);
}

uint64_t sub_10085C128(void *a1, uint64_t a2, uint64_t a3)
{
  long long v6 = a1 + 14;
  (*(void (**)(void *))(a1[14] + 16))(a1 + 14);
  (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, a3);
  return (*(uint64_t (**)(void *))(*v6 + 24))(v6);
}

void sub_10085C1F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10085C208(uint64_t a1, uint64_t a2)
{
  return sub_10085C128((void *)(a1 - 352), a2, 0);
}

uint64_t sub_10085C214(uint64_t *a1, uint64_t a2)
{
  if (*(double *)(*(void *)(a2 + 8) - 16) != 1.79769313e308 || !sub_100082064(a1 + 9)) {
    return -1;
  }
  sub_10002B640(a1[10]);
  double Current = CFAbsoluteTimeGetCurrent();
  sub_100082068(a1 + 45, &v13);
  int v5 = (sqlite3_stmt *)sub_10014D19C(v13);
  if (sub_100055D58(v5, 1, Current - *(double *)(*(void *)(a2 + 8) - 24)))
  {
    uint64_t v6 = a1[10];
    int v7 = (sqlite3_stmt *)sub_10014D19C(v13);
    sub_10001FEB0(v6, v7);
    uint64_t v8 = (*(int (**)(uint64_t *))(*a1 + 152))(a1);
  }
  else
  {
    uint64_t v8 = -1;
  }
  sub_100028FB4(a1[10]);
  uint64_t v9 = a1[10];
  if (*(uint64_t *)(v9 + 88) <= 0) {
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v10 = *(void *)(v9 + 88);
  }
  sub_10003CC68(v9, v10);
  uint64_t v11 = v13;
  uint64_t v13 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  return v8;
}

void sub_10085C350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10085C36C(uint64_t a1, uint64_t a2)
{
  return sub_10085C214((uint64_t *)(a1 - 72), a2);
}

uint64_t sub_10085C374(uint64_t a1, char **a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    a2[1] = *a2;
    sub_100082068((void *)(a1 + 376), &v22);
    sub_10002B640(*(void *)(a1 + 80));
    *(_DWORD *)long long v21 = 0;
    memset(&v21[8], 0, 36);
    while (!sub_10085B994(&v22, (uint64_t)v21))
    {
      int v5 = a2[1];
      unint64_t v6 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v6)
      {
        unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a2) >> 4);
        unint64_t v10 = v9 + 1;
        if (v9 + 1 > 0x555555555555555) {
          sub_1001D7FD4();
        }
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)*a2) >> 4);
        if (2 * v11 > v10) {
          unint64_t v10 = 2 * v11;
        }
        if (v11 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v12 = 0x555555555555555;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12) {
          uint64_t v13 = (char *)sub_10014F86C((uint64_t)(a2 + 2), v12);
        }
        else {
          uint64_t v13 = 0;
        }
        long long v14 = &v13[48 * v9];
        long long v15 = *(_OWORD *)&v21[16];
        *(_OWORD *)long long v14 = *(_OWORD *)v21;
        *((_OWORD *)v14 + 1) = v15;
        *((_OWORD *)v14 + 2) = *(_OWORD *)&v21[32];
        float v17 = *a2;
        uint64_t v16 = a2[1];
        uint64_t v18 = v14;
        if (v16 != *a2)
        {
          do
          {
            long long v19 = *((_OWORD *)v16 - 3);
            long long v20 = *((_OWORD *)v16 - 2);
            *(_OWORD *)(v18 - 20) = *(_OWORD *)(v16 - 20);
            *((_OWORD *)v18 - 3) = v19;
            *((_OWORD *)v18 - 2) = v20;
            v18 -= 48;
            v16 -= 48;
          }
          while (v16 != v17);
          uint64_t v16 = *a2;
        }
        uint64_t v8 = v14 + 48;
        *a2 = v18;
        a2[1] = v14 + 48;
        a2[2] = &v13[48 * v12];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        long long v7 = *(_OWORD *)&v21[16];
        *(_OWORD *)int v5 = *(_OWORD *)v21;
        *((_OWORD *)v5 + 1) = v7;
        *((_OWORD *)v5 + 2) = *(_OWORD *)&v21[32];
        uint64_t v8 = v5 + 48;
      }
      a2[1] = v8;
    }
    sub_100028FB4(*(void *)(a1 + 80));
    uint64_t result = v22;
    uint64_t v22 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_10085C54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10085C590(uint64_t a1)
{
  if (!sub_100082064(a1 + 72)) {
    return 0xFFFFFFFFLL;
  }
  sub_100082068((void *)(a1 + 392), &v8);
  uint64_t v3 = (sqlite3_stmt *)sub_10014D19C(v8);
  int v4 = sqlite3_step(v3);
  if (v4 == 100)
  {
    int v5 = (sqlite3_stmt *)sub_10014D19C(v8);
    uint64_t v1 = sqlite3_column_int(v5, 0);
  }
  uint64_t v6 = v8;
  uint64_t v8 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (v4 != 100) {
    return 0xFFFFFFFFLL;
  }
  return v1;
}

void sub_10085C63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10085C67C(uint64_t a1)
{
  return sub_10085C590(a1 - 72);
}

uint64_t sub_10085C684(void *a1)
{
  uint64_t v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17[0]) < 0)
  {
    unint64_t v10 = v16[1];
    operator delete(v16[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v16);
        int v4 = sub_100132EFC(v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0) {
          int v5 = __p;
        }
        else {
          int v5 = (void **)__p[0];
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v6 = v14;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        long long v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((v14 & 0x80u) == 0) {
          unint64_t v9 = __p;
        }
        else {
          unint64_t v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17[0]))
  {
    goto LABEL_3;
  }
  sub_101A715A8(v3);
  uint64_t v15 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v16
  v17[0] = v11;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_10085CAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_10085CB50(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_10085EA9C(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022CD2C0);
  }
  int v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)long long buf = 68289282;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)&void v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022CD2C0);
    }
    long long v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)long long buf = 134349056;
      *(void *)uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022CD2C0);
      }
      unint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_10085D2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_10085D2FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 28) = *(_OWORD *)(a3 + 28);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

id *sub_10085D310(uint64_t a1, long long *a2, char a3)
{
  v33[0] = (id)os_transaction_create();
  v33[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v33);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  int v29 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  int v32 = 0;
  int v6 = (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 104))(a1, &v29);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022CD2C0);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022CD2C0);
        }
        LOWORD(v34) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *((double *)a2 + 1);
    double v8 = *(double *)&v30;
    double v9 = v7 - *(double *)&v30;
    if (v7 - *(double *)&v30 < 0.0) {
      double v9 = -(v7 - *(double *)&v30);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022CD2C0);
      }
      unint64_t v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *((void *)a2 + 1);
        *(_DWORD *)long long buf = 134349312;
        double v39 = *(double *)&v30;
        __int16 v40 = 2050;
        uint64_t v41 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022CD2C0);
        }
        uint64_t v23 = *((void *)a2 + 1);
        int v34 = 134349312;
        double v35 = *(double *)&v30;
        __int16 v36 = 2050;
        uint64_t v37 = v23;
        long long v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
      CLWriteStackshot();
      double v7 = *((double *)a2 + 1);
      double v8 = *(double *)&v30;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022CD2C0);
        }
        unint64_t v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *((double *)a2 + 1);
          *(_DWORD *)long long buf = 134217984;
          double v39 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_1022CD2C0);
          }
          double v25 = *((double *)a2 + 1);
          int v34 = 134217984;
          double v35 = v25;
          long long v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v26);
          if (v26 != (char *)buf) {
            free(v26);
          }
        }
        (*(void (**)(uint64_t, long long *))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v28 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_1022CD2C0);
        double v17 = v28;
      }
      double v18 = v16 - v17;
      long long v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134217984;
        double v39 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_1022CD2C0);
        }
        int v34 = 134217984;
        double v35 = v18;
        uint64_t v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMobility::SmoothedGaitMetrics, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMobility::SmoothedGaitMetrics, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, int *, uint64_t, long long *))(*(void *)a1 + 144))(a1, &v29, a1 + 224, a2);
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *a2;
  long long v21 = a2[1];
  *(_OWORD *)(a1 + 252) = *(long long *)((char *)a2 + 28);
  *(_OWORD *)(a1 + 224) = v20;
  *(_OWORD *)(a1 + 240) = v21;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v33);
}

void sub_10085DB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10085DB58(void *a1, uint64_t a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101A71718(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  unint64_t v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_10085DECC(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A71888(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    long long v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      int v5 = __p;
    }
    else {
      int v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_10085E1F8(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A719F8(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      long long v4 = __p;
    }
    else {
      long long v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

uint64_t sub_10085E51C(uint64_t a1)
{
  return sub_10085CB50(a1 - 72);
}

void sub_10085E524(id a1)
{
  qword_1024191F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

uint64_t sub_10085E554(void *a1, void *a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A71B68(v4);
    sub_1001D7FD4();
  }
  uint64_t v12 = v15[1];
  operator delete(v15[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v15);
    uint64_t v6 = sub_100132EFC(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_10085E95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  sub_101A129A8((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_10085E9DC(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_10085EA0C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_10085EA9C(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_10085EB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10085EB38(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_10085EC18(id a1)
{
  qword_10247E598 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLBacklightStateNotifierSilo"];
}

uint64_t sub_10085ECD8(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10085F30C;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_10247E5A8 != -1) {
    dispatch_once(&qword_10247E5A8, block);
  }
  return qword_10248A3C0;
}

void sub_10085F07C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10085F0B0(uint64_t a1, int a2, long long *a3, uint64_t a4)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C(&__dst, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long __dst = *a3;
    uint64_t v17 = *((void *)a3 + 2);
  }
  if (*(char *)(a4 + 23) < 0)
  {
    sub_1000DC48C(v14, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)unsigned __int8 v14 = *(_OWORD *)a4;
    uint64_t v15 = *(void *)(a4 + 16);
  }
  int v7 = *(void **)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  long long v8[2] = sub_10085F764;
  void v8[3] = &unk_1022CD400;
  v8[4] = a1;
  int v13 = a2;
  if (SHIBYTE(v17) < 0)
  {
    sub_1000DC48C(&v9, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    long long v9 = __dst;
    uint64_t v10 = v17;
  }
  if (SHIBYTE(v15) < 0)
  {
    sub_1000DC48C(&__p, v14[0], (unint64_t)v14[1]);
  }
  else
  {
    long long __p = *(_OWORD *)v14;
    uint64_t v12 = v15;
  }
  [v7 async:v8];
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete((void *)v9);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_10085F228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (*(char *)(v32 - 41) < 0) {
    operator delete(*(void **)(v32 - 64));
  }
  _Unwind_Resume(exception_object);
}

void sub_10085F30C()
{
}

void sub_10085F358()
{
}

uint64_t sub_10085F37C(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)sub_10085F470(a1, "CLBacklightStateNotifier", a2);
  *uint64_t v3 = off_1022CD330;
  v3[14] = 0;
  *(void *)(a1 + 112) = [[CLBacklightStateNotifierAdapter alloc] initWithCLBacklightStateNotifier:a1];
  unsigned __int8 v4 = [[+[BLSBacklight sharedBacklight](BLSBacklight, "sharedBacklight") isAlwaysOnEnabled];
  uint64_t v5 = *(void **)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10085F9A4;
  void v7[3] = &unk_1022BBA18;
  void v7[4] = a1;
  unsigned __int8 v8 = v4;
  [v5 async:v7];
  return a1;
}

void sub_10085F45C(_Unwind_Exception *a1)
{
  sub_10085F51C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10085F470(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1022CD508;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_10085F500(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10085F51C(uint64_t a1)
{
  *(void *)a1 = off_1022CD508;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_10085F5A0(uint64_t a1)
{
  *(void *)a1 = off_1022CD330;
  *(unsigned char *)(a1 + 108) = 1;

  *(void *)(a1 + 112) = 0;

  return sub_10085F51C(a1);
}

void sub_10085F60C(uint64_t a1)
{
  sub_10085F5A0(a1);

  operator delete();
}

void sub_10085F644(uint64_t a1)
{
  *(unsigned char *)(a1 + 108) = 1;

  *(void *)(a1 + 112) = 0;
}

void *sub_10085F678@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_10085F6F4(uint64_t a1)
{
  return 1;
}

uint64_t sub_10085F72C(uint64_t a1)
{
  return 1;
}

void sub_10085F764(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = 0;
  if (sub_1001072EC(v2, &v3, 1))
  {
    int v9 = 0;
    int v3 = *(_DWORD *)(a1 + 88);
    if (*(char *)(a1 + 63) < 0)
    {
      sub_1000DC48C(&v4, *(void **)(a1 + 40), *(void *)(a1 + 48));
    }
    else
    {
      long long v4 = *(_OWORD *)(a1 + 40);
      uint64_t v5 = *(void *)(a1 + 56);
    }
    if (*(char *)(a1 + 87) < 0)
    {
      sub_1000DC48C(&__p, *(void **)(a1 + 64), *(void *)(a1 + 72));
    }
    else
    {
      long long __p = *(_OWORD *)(a1 + 64);
      uint64_t v7 = *(void *)(a1 + 80);
    }
    char v8 = 0;
    (*(void (**)(uint64_t, int *, int *, uint64_t, uint64_t, void))(*(void *)v2 + 152))(v2, &v9, &v3, 1, 0xFFFFFFFFLL, 0);
    if (SHIBYTE(v7) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v5) < 0) {
      operator delete((void *)v4);
    }
  }
}

void sub_10085F87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_10085F8A8(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 40), *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  uint64_t result = (unsigned char *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0) {
    return sub_1000DC48C(result, *(void **)(a2 + 64), *(void *)(a2 + 72));
  }
  long long v6 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)uint64_t result = v6;
  return result;
}

void sub_10085F930(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 63) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10085F94C(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 40);
    operator delete(v2);
  }
}

void sub_10085F9A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(_DWORD *)long long buf = 1;
  if (sub_1001072EC(v2, (int *)buf, 1))
  {
    if (qword_102418FC0 != -1) {
      dispatch_once(&qword_102418FC0, &stru_1022CD4D8);
    }
    int v3 = qword_102418FC8;
    if (os_log_type_enabled((os_log_t)qword_102418FC8, OS_LOG_TYPE_INFO))
    {
      int v4 = *(unsigned __int8 *)(a1 + 40);
      *(_DWORD *)long long buf = 67109120;
      int v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLBacklightState, didChangeAlwaysOnEnabled, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FC0 != -1) {
        dispatch_once(&qword_102418FC0, &stru_1022CD4D8);
      }
      int v5 = *(unsigned __int8 *)(a1 + 40);
      v7[0] = 67109120;
      v7[1] = v5;
      long long v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBacklightStateNotifier::notifyClientsAlwaysOnEnabled(BOOL)_block_invoke", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    v7[0] = 1;
    *(_DWORD *)long long buf = 0;
    *(_OWORD *)uint64_t v10 = 0u;
    *(_OWORD *)long long __p = 0u;
    long long v12 = 0u;
    char v13 = *(unsigned char *)(a1 + 40);
    (*(void (**)(uint64_t, _DWORD *, uint8_t *, uint64_t, uint64_t, void))(*(void *)v2 + 152))(v2, v7, buf, 1, 0xFFFFFFFFLL, 0);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[1]);
    }
    if (SHIBYTE(__p[0]) < 0) {
      operator delete(v10[0]);
    }
  }
}

void sub_10085FBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100703F54((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10085FC14(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &off_1022CD658;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    long long v12 = a3;
  }
  else {
    long long v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(a4, "vendor") proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:objc_msgSend(a4, "silo")];
  return a1;
}

void sub_10085FCF8()
{
}

void sub_10085FDB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_10085FDF0(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        int v9 = (uint64_t *)v4;
      }
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)long long buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022CD4B8);
      }
      uint64_t v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        uint64_t v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v11 = (void *)*v11;
        }
        *(_DWORD *)long long buf = 136446466;
        long long v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022CD4B8);
        }
        long long v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          long long v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        uint64_t v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLBacklightStateNotifier_Type::Notification, CLBacklightStateNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLBacklightStateNotifier_Type::Notification, NotificationData_T = CLBacklightStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_100860080(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_100860134(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_10086017C(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_1008601C4(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_10086020C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_10241DDE0);
}

BOOL sub_100860238(uint64_t a1, int a2, int *a3, char *a4)
{
  int v40 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v39 = v10;
      int v16 = *a3;
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          uint64_t v23 = (uint64_t *)v17;
        }
        else {
          uint64_t v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (!v24) {
        goto LABEL_42;
      }
      uint64_t v25 = a1 + 64;
      do
      {
        int v26 = *(_DWORD *)(v24 + 32);
        BOOL v27 = v26 < v16;
        if (v26 >= v16) {
          double v28 = (uint64_t *)v24;
        }
        else {
          double v28 = (uint64_t *)(v24 + 8);
        }
        if (!v27) {
          uint64_t v25 = v24;
        }
        uint64_t v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(void *)uint64_t v41 = v25;
        uint64_t v34 = *(void *)(v25 + 56);
        char v35 = *a4;
        *(void *)long long buf = &v40;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v35;
        *(_DWORD *)long long buf = 0;
        *(_OWORD *)&uint8_t buf[8] = 0u;
        *(_OWORD *)long long __p = 0u;
        long long v46 = 0u;
        char v47 = 0;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_100862A14();
        }
        if (SHIBYTE(v46) < 0) {
          operator delete(__p[1]);
        }
        if (SHIBYTE(__p[0]) < 0) {
          operator delete(*(void **)&buf[8]);
        }
        if (v34) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        *(void *)uint64_t v41 = a1 + 64;
        char v29 = byte_10241DDE1;
        int v38 = v16;
        *(void *)long long buf = &v38;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v29;
        int v38 = *a3;
        *(void *)long long buf = &v38;
        long long v30 = sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        long long v31 = (std::__shared_weak_count *)v30[9];
        v30[8] = 0;
        v30[9] = 0;
        if (v31) {
          sub_1000DB0A0(v31);
        }
        char v32 = *a4;
        int v38 = *a3;
        *(void *)long long buf = &v38;
        long long v33 = sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)long long buf = &v40;
        *((unsigned char *)sub_1000EB1B8(v33 + 5, &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v20 == v18)
      {
        *(_DWORD *)long long buf = *a3;
        sub_1000EDED4((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CD4B8);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v15 = (void *)*v15;
    }
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CD4B8);
    }
    __int16 v36 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      __int16 v36 = (void *)*v36;
    }
    *(_DWORD *)uint64_t v41 = 136446466;
    *(void *)&v41[4] = v36;
    __int16 v42 = 1026;
    int v43 = a2;
    uint64_t v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBacklightStateNotifier_Type::Notification, CLBacklightStateNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLBacklightStateNotifier_Type::Notification, NotificationData_T = CLBacklightStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v37 != buf) {
      free(v37);
    }
    return 0;
  }
  return result;
}

void sub_100860710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_100703F54((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100860730(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        int v21 = (uint64_t *)v15;
      }
      else {
        int v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CD4B8);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022CD4B8);
      }
      BOOL v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBacklightStateNotifier_Type::Notification, CLBacklightStateNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLBacklightStateNotifier_Type::Notification, NotificationData_T = CLBacklightStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1008609B4(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            BOOL v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                BOOL v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022CD4B8);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                BOOL v27 = a1 + 8;
                if (a1[31] < 0) {
                  BOOL v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  double v28 = __p;
                }
                else {
                  double v28 = (void **)__p[0];
                }
                *(_DWORD *)long long buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                char v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022CD4B8);
                }
                char v29 = a1 + 8;
                if (a1[31] < 0) {
                  char v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  long long v30 = buf;
                }
                else {
                  long long v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                int v38 = v29;
                __int16 v39 = 2082;
                int v40 = v30;
                long long v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBacklightStateNotifier_Type::Notification, CLBacklightStateNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLBacklightStateNotifier_Type::Notification, NotificationData_T = CLBacklightStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100860D88(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v7 = *a2;
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 32);
    BOOL v10 = v9 < v7;
    if (v9 >= v7) {
      int v11 = (uint64_t *)v4;
    }
    else {
      int v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3) {
    return 0;
  }
  if (v7 < *(_DWORD *)(v8 + 32)) {
    return 0;
  }
  uint64_t v12 = *(void *)(v8 + 64);
  if (!v12) {
    return 0;
  }
  *(_DWORD *)a3 = *(_DWORD *)v12;
  std::string::operator=((std::string *)(a3 + 8), (const std::string *)(v12 + 8));
  std::string::operator=((std::string *)(a3 + 32), (const std::string *)(v12 + 32));
  *(unsigned char *)(a3 + 56) = *(unsigned char *)(v12 + 56);
  return 1;
}

uint64_t sub_100860E24(uint64_t a1, int *a2, uint64_t a3)
{
  sub_100862268(a3, &v10);
  int v9 = *a2;
  int v11 = &v9;
  uint64_t v5 = sub_10044715C((uint64_t **)(a1 + 56), &v9, (uint64_t)&unk_101D0B290, &v11);
  long long v6 = v10;
  long long v10 = 0uLL;
  int v7 = (std::__shared_weak_count *)v5[9];
  *((_OWORD *)v5 + 4) = v6;
  if (v7)
  {
    sub_1000DB0A0(v7);
    if (*((void *)&v10 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  return 1;
}

void sub_100860EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100860ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v7 = 0u;
  char v8 = 0;
  (*(void (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, &v4, a3, a4, 0);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v5[0]);
  }
}

void sub_100860F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100860F74(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  char v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CD4B8);
  }
  int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    long long v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)long long buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    __int16 v23 = 2082;
    BOOL v24 = v10;
    __int16 v25 = 2050;
    int v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    BOOL v27 = v28;
    memset(v28, 0, sizeof(v28));
    char v29 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v27);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v26) {
      sub_1000DB0A0(v26);
    }
    sub_1000F5BB0((uint64_t)&buf[8], *(void **)&buf[16]);
    if (v29) {
      sub_1000DB0A0(v29);
    }
    sub_1000F5BB0((uint64_t)&v27, v28[0]);
  }
  if (!a4)
  {
    uint64_t v20 = (std::__shared_weak_count *)v14[9];
    v14[8] = 0;
    v14[9] = 0;
    if (!v20) {
      goto LABEL_29;
    }
LABEL_28:
    sub_1000DB0A0(v20);
    goto LABEL_29;
  }
  sub_100862268(a3, buf);
  long long v18 = *(_OWORD *)buf;
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  int v19 = (std::__shared_weak_count *)v14[9];
  *((_OWORD *)v14 + 4) = v18;
  if (v19)
  {
    sub_1000DB0A0(v19);
    uint64_t v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      goto LABEL_28;
    }
  }
LABEL_29:
  if (v14[7]) {
    sub_100861C28();
  }
  os_activity_scope_leave(&state);
}

void sub_100861544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100861590(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CD4B8);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)long long buf = 136315138;
      BOOL v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022CD4B8);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLBacklightStateNotifier_Type::Notification, CLBacklightStateNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLBacklightStateNotifier_Type::Notification, NotificationData_T = CLBacklightStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CD4B8);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      long long v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        long long v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)long long buf = 136315394;
      BOOL v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022CD4B8);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLBacklightStateNotifier_Type::Notification, CLBacklightStateNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLBacklightStateNotifier_Type::Notification, NotificationData_T = CLBacklightStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    char v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022CD4B8);
            }
            long long v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)long long buf = 136315650;
              BOOL v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022CD4B8);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLBacklightStateNotifier_Type::Notification, CLBacklightStateNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLBacklightStateNotifier_Type::Notification, NotificationData_T = CLBacklightStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        long long v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            long long v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            char v8 = v19;
          }
          while (!v16);
        }
        char v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_100861B40(uint64_t a1)
{
  sub_1008629A4(a1);

  operator delete();
}

id sub_100861B78(uint64_t a1, int a2, void *a3)
{
  id result = sub_100862554(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_100861BC8(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100861BF8(id a1)
{
  qword_102418FC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Eclipse");
}

void sub_100861C28()
{
}

void sub_100861D44()
{
  if (*(char *)(v0 + 31) < 0) {
    operator delete(*v1);
  }
  operator delete();
}

void sub_100861D80(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      int v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          int v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        long long v49 = v9;
        id v13 = sub_100862554(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                BOOL v22 = (uint64_t *)v17;
              }
              else {
                BOOL v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              long long v48 = v19;
              sub_100862170(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              char v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  char v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              long long v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                char v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    char v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  int v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      int v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      char v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              long long v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022CD4B8);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)long long buf = 136446466;
                long long v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022CD4B8);
                }
                uint64_t v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  uint64_t v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                long long v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                char v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLBacklightStateNotifier_Type::Notification, CLBacklightStateNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLBacklightStateNotifier_Type::Notification, NotificationData_T = CLBacklightStateNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_100862170(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_100862554(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    id result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4];
    }
  }
  return result;
}

void *sub_100862268@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x58uLL);
  id result = sub_1008622C4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1008622B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1008622C4(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022CD5E8;
  sub_1008623D4((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_100862320(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100862334(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022CD5E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100862354(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022CD5E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1008623A8(uint64_t a1)
{
  sub_100862488((uint64_t)&v1, a1 + 24);
}

unsigned char *sub_1008623D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  uint64_t v5 = (unsigned char *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    sub_1000DC48C(v5, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    *(void *)(a2 + 24) = *(void *)(a3 + 24);
    *(_OWORD *)uint64_t v5 = v6;
  }
  id result = (unsigned char *)(a2 + 32);
  if (*(char *)(a3 + 55) < 0)
  {
    id result = sub_1000DC48C(result, *(void **)(a3 + 32), *(void *)(a3 + 40));
  }
  else
  {
    long long v8 = *(_OWORD *)(a3 + 32);
    *(void *)(a2 + 48) = *(void *)(a3 + 48);
    *(_OWORD *)id result = v8;
  }
  *(unsigned char *)(a2 + 56) = *(unsigned char *)(a3 + 56);
  return result;
}

void sub_10086246C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100862488(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 8);
    operator delete(v3);
  }
}

uint64_t sub_1008624E0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

id sub_100862554(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_1008625B4(a1);
}

id sub_1008625B4(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022CD628);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D50815 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        long long v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLBacklightStateNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022CD628);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D50815 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022CD628);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_100862974(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_1008629A4(uint64_t a1)
{
  *(void *)a1 = &off_1022CD658;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_100862A14()
{
}

void sub_100862B30()
{
  if (*(char *)(v0 + 31) < 0) {
    operator delete(*v1);
  }
  operator delete();
}

uint64_t sub_100862B6C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

uint64_t sub_100862BE0()
{
  uint64_t result = sub_10074157C();
  if ((result & 0x10) != 0) {
    operator new();
  }
  return result;
}

void sub_100862C2C()
{
}

uint64_t sub_100862C50()
{
  if (qword_10247E5B0 != -1) {
    dispatch_once(&qword_10247E5B0, &stru_1022CD670);
  }
  return qword_10248A3C8;
}

void sub_100862C98(uint64_t a1)
{
}

void sub_100862F48()
{
}

void sub_100863028(uint64_t a1, int *a2, _OWORD *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CD708);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPressure::onBias", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CD708);
    }
    __int16 v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPressure::onBias\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10086345C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008631E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100863204(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CD708);
  }
  BOOL v7 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    char v12 = 1;
    __int16 v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPressure::onMotionStateObserverNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CD708);
    }
    uint64_t v10 = qword_102419588;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)long long buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPressure::onMotionStateObserverNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  sub_100864248(v7, v8, a2, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008633BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008633DC(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10082C27C(result);
    operator delete();
  }
  return result;
}

void sub_10086342C(uint64_t a1, _OWORD *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = 0;
  sub_10086345C(v2, (uint64_t)a2, &v3, a2);
}

void sub_10086345C(uint64_t a1, uint64_t a2, int *a3, _OWORD *a4)
{
  if (qword_102419090 != -1) {
    dispatch_once(&qword_102419090, &stru_1022CD728);
  }
  BOOL v7 = qword_102419098;
  if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Received Bias Notification", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022CD728);
    }
    LOWORD(v16) = 0;
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressure::onBias(int, const CLPressureBias_Type::Notification &, const CLPressureBias_Type::NotificationData &)", "%s\n", v13);
    if (v13 != buf) {
      free(v13);
    }
  }
  if (*a3)
  {
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022CD748);
    }
    uint64_t v8 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_ERROR))
    {
      int v9 = *a3;
      *(_DWORD *)long long buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Unexpected pressure bias notification.notification,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_1022CD748);
      }
      int v10 = *a3;
      int v16 = 67240192;
      int v17 = v10;
      char v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLPressure::onBias(int, const CLPressureBias_Type::Notification &, const CLPressureBias_Type::NotificationData &)", "%s\n", v11);
      if (v11 != buf) {
        free(v11);
      }
    }
  }
  else
  {
    *(_OWORD *)long long buf = *a4;
    *(_OWORD *)&buf[13] = *(_OWORD *)((char *)a4 + 13);
    uint64_t v12 = sub_1000D3E78();
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    int v14[2] = sub_1008638D0;
    v14[3] = &unk_1022CB1A0;
    void v14[4] = a1;
    v15[0] = *(_OWORD *)buf;
    *(_OWORD *)((char *)v15 + 13) = *(_OWORD *)&buf[13];
    sub_1009E8F7C(v12, (uint64_t)v14);
  }
}

void *sub_1008637CC(void *a1)
{
  *a1 = off_1022CD6A0;
  uint64_t v2 = a1[17];
  a1[17] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = (std::__shared_weak_count *)a1[16];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  uint64_t v4 = a1[6];
  a1[6] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_1008633DC(a1 + 5, 0);

  return sub_1009D1DE4(a1);
}

void sub_100863898(void *a1)
{
  sub_1008637CC(a1);

  operator delete();
}

uint64_t sub_1008638D0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  long long v2 = *(_OWORD *)(result + 40);
  *(_OWORD *)(v1 + 89) = *(_OWORD *)(result + 53);
  *(_OWORD *)(v1 + 76) = v2;
  if (*(float *)(result + 52) != 3.4028e38 || *(float *)(result + 44) != 0.0 || *(float *)(result + 48) != 0.0) {
    *(unsigned char *)(v1 + 57) = 1;
  }
  return result;
}

uint64_t sub_100863920(uint64_t a1, float *a2)
{
  uint64_t result = *(void *)(a1 + 120);
  if (result)
  {
    uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, const __CFString *))(*(void *)result + 24))(result, @"AppleVoltageDictionary");
    id v5 = [v4 objectForKeyedSubscript:@"PRESSURE_TEMP"];
    [v5 floatValue];
    *a2 = v6 / 100.0;

    return v5 != 0;
  }
  return result;
}

double sub_1008639B0(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  if (a2 > 1)
  {
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022CD748);
    }
    int v9 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 67240192;
      LODWORD(v14) = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Unrecognized pressure notification %{public}d", buf, 8u);
    }
    double v7 = 0.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_1022CD748);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CFTimeInterval CLPressure::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  else
  {
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022CD748);
    }
    id v5 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *a3;
      *(_DWORD *)long long buf = 134349056;
      uint64_t v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Setting pressure data update interval to %{public}f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_1022CD748);
      }
      char v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFTimeInterval CLPressure::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    return sub_100863CD4(a1);
  }
  return v7;
}

double sub_100863CD4(uint64_t a1)
{
  int v2 = 0;
  char v3 = 1;
  double v4 = 0.0;
  do
  {
    char v5 = v3;
    double v6 = sub_1009D3328(a1, v2);
    if (v4 == 0.0 || (v6 > 0.0 ? (BOOL v7 = v6 < v4) : (BOOL v7 = 0), v7)) {
      double v4 = v6;
    }
    char v3 = 0;
    int v2 = 1;
  }
  while ((v5 & 1) != 0);
  *(void *)(a1 + 64) = 0;
  if (*(void *)(a1 + 40))
  {
    double v8 = sub_1009D3328(a1, 1);
    uint64_t v9 = *(void *)(a1 + 40);
    if (v8 == 0.0) {
      sub_10082C7FC(v9);
    }
    else {
      sub_10082C280(v9);
    }
  }
  if (*(void *)(a1 + 48))
  {
    double v10 = sub_1009D3328(a1, 1);
    uint64_t v11 = *(void *)(a1 + 48);
    uint64_t v13 = *(void *)(v11 + 8);
    uint64_t v12 = *(void **)(v11 + 16);
    if (v10 == 0.0) {
      [v12 unregister:v13 forNotification:0];
    }
    else {
      [v12 register:v13 forNotification:0 registrationInfo:0];
    }
  }
  if (!*(void *)(a1 + 120) && (sub_10074157C() & 0x10) != 0)
  {
    uint64_t v14 = (uint64_t *)sub_100A26784();
    uint64_t v21 = 0x3100000020;
    char v22 = 0;
    sub_101A46D60(v14, (uint64_t)&v21, (uint64_t *)buf);
    long long v15 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    int v16 = *(std::__shared_weak_count **)(a1 + 128);
    *(_OWORD *)(a1 + 120) = v15;
    if (v16)
    {
      sub_1000DB0A0(v16);
      if (*(void *)&buf[8]) {
        sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
      }
    }
    sub_100A2932C(*(uint64_t **)(a1 + 120), (uint64_t)sub_100863FBC, a1);
  }
  sub_100A29D64(*(void *)(a1 + 120), v4);
  uint64_t v17 = sub_100A29E04(*(void *)(a1 + 120), v4);
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_1022CD748);
  }
  __int16 v18 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 134349056;
    *(void *)&uint8_t buf[4] = v17;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Setting pressure batch interval to: %{public}ld us", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022CD748);
    }
    int v23 = 134349056;
    uint64_t v24 = v17;
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval CLPressure::setPressureUpdateInterval()", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  return v4;
}

void sub_100863FBC(uint64_t a1)
{
  if (IOHIDEventGetType() == 31)
  {
    IOHIDEventGetFloatValue();
    *(float *)&double v2 = v2;
    LODWORD(v5) = LODWORD(v2);
    unint64_t TimeStamp = IOHIDEventGetTimeStamp();
    double v4 = sub_1000D3D90(TimeStamp);
    sub_100864458(a1, &v5, &v4);
  }
}

void sub_10086402C(uint64_t a1, int a2)
{
  if (sub_1007414F8())
  {
    uint64_t v9 = 0x3FA0E5604189374CLL;
    if (a2) {
      double v4 = &v9;
    }
    else {
      double v4 = (uint64_t *)&unk_101D50858;
    }
    sub_101A1F180(buf, "PressureTempMaxUpdateInterval", v4, 0);
    *(void *)(a1 + 112) = *(void *)&v13[4];
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022CD748);
    }
    uint64_t v5 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_INFO))
    {
      double v6 = *(double *)(a1 + 112) * 1000.0;
      *(_DWORD *)long long buf = 134349056;
      *(double *)uint64_t v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Temperature update interval set to %{public}f ms", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_1022CD748);
      }
      double v7 = *(double *)(a1 + 112) * 1000.0;
      int v10 = 134349056;
      double v11 = v7;
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressure::setFastTemperatureUpdateInterval(BOOL)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_100864248(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (sub_1007414F8() && !*a3)
  {
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022CD748);
    }
    double v6 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(unsigned int *)(a4 + 8);
      *(_DWORD *)long long buf = 134349056;
      uint64_t v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Notified of workout event type %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_1022CD748);
      }
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressure::onMotionStateObserverNotification(int, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    if (qword_10247E5B0 != -1) {
      dispatch_once(&qword_10247E5B0, &stru_1022CD670);
    }
    if (qword_10248A3C8) {
      sub_10086402C(qword_10248A3C8, *(_DWORD *)(a4 + 8) != 0);
    }
  }
}

void sub_100864458(uint64_t a1, uint64_t *a2, double *a3)
{
  if (sub_1009D3328(a1, 0) != 0.0 || sub_1009D3328(a1, 1) != 0.0)
  {
    double v6 = *a3;
    double v19 = *a3;
    uint64_t v7 = *a2;
    uint64_t v20 = *a2;
    double v8 = *(double *)(a1 + 64);
    if (v8 == 0.0 || v6 - v8 > *(double *)(a1 + 112))
    {
      int v9 = sub_100863920(a1, (float *)(a1 + 72));
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_1022CD748);
      }
      uint64_t v10 = qword_1024190D8;
      if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v32) = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Pressure Temperature=%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190D0 != -1) {
          dispatch_once(&qword_1024190D0, &stru_1022CD748);
        }
        int v21 = 67109120;
        LODWORD(v22) = v9;
        __int16 v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressure::onPressureData(const CLMotionTypePressure &, const CLMotionTypeTimestamp &)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
      *(double *)(a1 + 64) = *a3;
    }
    int v11 = *(_DWORD *)(a1 + 72);
    HIDWORD(v20) = v11;
    if (*(unsigned char *)(a1 + 56))
    {
      sub_10170140C(buf);
      sub_101724C98((uint64_t)buf);
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      v43 |= 1u;
      CFAbsoluteTime v41 = Current;
      sub_101797388(v42);
      uint64_t v13 = *(void *)(v42 + 8);
      *(unsigned char *)(v13 + 24) |= 1u;
      *(double *)(v13 + 8) = v6;
      uint64_t v14 = *(void *)(v42 + 8);
      *(unsigned char *)(v14 + 24) |= 2u;
      *(_DWORD *)(v14 + 16) = v7;
      uint64_t v15 = *(void *)(v42 + 8);
      *(unsigned char *)(v15 + 24) |= 4u;
      *(_DWORD *)(v15 + 20) = v11;
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022CD768);
      }
      if (qword_10248AF90) {
        sub_1019E5150(qword_10248AF90, (uint64_t)buf);
      }
      sub_101706914((PB::Base *)buf);
    }
    if (sub_1009D3328(a1, 0) != 0.0) {
      sub_1000E7BA0(a1, 0, (uint64_t)&v19, 16);
    }
    if (*(unsigned char *)(a1 + 57)) {
      *(float *)&uint64_t v20 = *(float *)&v20
    }
                     + (float)((float)-(float)(*(float *)(a1 + 84)
                                             - (float)(*(float *)(a1 + 80)
                                                     * fminf(*(float *)(a1 + 88), *((float *)&v20 + 1))))
                             / -1000.0);
    if (sub_1009D3328(a1, 1) != 0.0) {
      sub_1000E7BA0(a1, 1, (uint64_t)&v19, 16);
    }
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022CD728);
    }
    int v16 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136316162;
      int v32 = "Pressure";
      __int16 v33 = 2048;
      double v34 = *(float *)&v20;
      __int16 v35 = 2048;
      double v36 = *((float *)&v20 + 1);
      __int16 v37 = 2048;
      double v38 = v19;
      __int16 v39 = 2048;
      double v40 = *(float *)&v7;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Type,%s,pressure,%.6f,temperature,%.3f,timestamp,%f,rawPressure,%.6f", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022CD728);
      }
      int v21 = 136316162;
      char v22 = "Pressure";
      __int16 v23 = 2048;
      double v24 = *(float *)&v20;
      __int16 v25 = 2048;
      double v26 = *((float *)&v20 + 1);
      __int16 v27 = 2048;
      double v28 = v19;
      __int16 v29 = 2048;
      double v30 = *(float *)&v7;
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressure::onPressureData(const CLMotionTypePressure &, const CLMotionTypeTimestamp &)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
}

void sub_1008649A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1008649C8(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1008649F8(id a1)
{
  qword_102419098 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Sensors");
}

void sub_100864A28(id a1)
{
  qword_1024190D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

uint64_t sub_100864A5C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247E5C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247E5C0))
  {
    __cxa_atexit((void (*)(void *))sub_10045E944, &qword_10247E5B8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10247E5C0);
  }
  uint64_t result = qword_10247E5B8;
  if (!qword_10247E5B8) {
    operator new();
  }
  return result;
}

uint64_t sub_100864B20(unint64_t a1, _DWORD *a2)
{
  unint64_t v3 = a1;
  if (a1 >= 3)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    double v4 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      unint64_t v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CLVPC,fromCLARSessionState,Received unhandled ar session state: %lu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromCLARSessionState(const _CLARSessionState, CLP::LogEntry::Vision::ARSessionState &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    LODWORD(v3) = -1;
  }
  *a2 = v3;
  return 1;
}

void sub_100864CE4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_100864CF0(void *a1, uint64_t a2)
{
  if (!a1)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    uint64_t v42 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __str = 134283521;
      *(void *)&__str[4] = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "CLVPC,fromCLVIOEstimation,Invalid input pointer,estimation,%{private}p", __str, 0xCu);
    }
    uint64_t result = sub_10013D1A0(115, 0);
    if (!result) {
      return result;
    }
    bzero(__str, 0x65CuLL);
    if (qword_102419420 == -1)
    {
LABEL_44:
      *(_DWORD *)__int16 v52 = 134283521;
      *(void *)&v52[4] = 0;
      BOOL v44 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromCLVIOEstimation(const _CLVIOEstimation *const, CLP::LogEntry::Vision::VIOEstimation *)", "%s\n", v44);
      if (v44 != __str) {
        free(v44);
      }
      return 0;
    }
LABEL_47:
    dispatch_once(&qword_102419420, &stru_1022CD788);
    goto LABEL_44;
  }
  if (a2)
  {
    int v51 = 0;
    sub_1008654EC([a1 trackingState], &v51);
    int v4 = v51;
    if (!sub_100B673A0(v51)) {
      __assert_rtn("set_tracking_state", "CLPVisionEvent.pb.h", 3498, "::CLP::LogEntry::Vision::VIOTrackingState_IsValid(value)");
    }
    int v5 = *(_DWORD *)(a2 + 88);
    *(_DWORD *)(a2 + 80) = v4;
    *(_DWORD *)(a2 + 88) = v5 | 3;
    uint64_t v6 = *(void *)(a2 + 8);
    if (!v6) {
      operator new();
    }
    [a1 originTimestamp];
    BOOL v8 = sub_1008656BC(v6, v7);
    *(_DWORD *)(a2 + 88) |= 4u;
    uint64_t v9 = *(void *)(a2 + 16);
    if (!v9) {
      operator new();
    }
    [a1 timestamp];
    BOOL v11 = sub_1008656BC(v9, v10);
    [a1 inertialStateInfo];
    *(_DWORD *)(a2 + 88) |= 8u;
    uint64_t v13 = *(uint32x4_t **)(a2 + 24);
    if (!v13) {
      operator new();
    }
    __int32 v14 = v13[4].i32[0];
    v13->i64[1] = *(void *)v52;
    v12.i32[0] = *(_DWORD *)&v52[8];
    uint32x4_t v15 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v12));
    v13[1] = v15;
    v15.i32[0] = v53;
    _OWORD v13[2] = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v15.i8));
    __int32 v16 = v55;
    v13[3].i32[0] = v54;
    v13[3].i32[1] = v16;
    __int32 v17 = v56;
    v13[4].i32[0] = v14 | 0xFFF;
    v13[3].i32[2] = v17;
    if ([a1 inertialState])
    {
      sub_1002E9328(__str, [objc_msgSend(objc_msgSend(a1, "inertialState"), "bytes"), (size_t)objc_msgSend(objc_msgSend(a1, "inertialState"), "length")];
      *(_DWORD *)(a2 + 88) |= 0x10u;
      __int16 v18 = *(std::string **)(a2 + 32);
      if (v18 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v18, (const std::string *)__str);
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
    }
    [a1 inertialCovarianceInfo];
    *(_DWORD *)(a2 + 88) |= 0x20u;
    uint64_t v20 = *(uint32x4_t **)(a2 + 40);
    if (!v20) {
      operator new();
    }
    __int32 v21 = v20[4].i32[0];
    v20->i64[1] = v45;
    v19.i32[0] = v46;
    uint32x4_t v22 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v19));
    v20[1] = v22;
    v22.i32[0] = v47;
    _OWORD v20[2] = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v22.i8));
    v20[3].i32[0] = v48;
    v20[3].i32[1] = v49;
    v20[4].i32[0] = v21 | 0xFFF;
    v20[3].i32[2] = v50;
    if ([a1 inertialCovariance])
    {
      sub_1002E9328(__str, [objc_msgSend(objc_msgSend(a1, "inertialCovariance"), "bytes"), (size_t)objc_msgSend(objc_msgSend(a1, "inertialCovariance"), "length")]);
      *(_DWORD *)(a2 + 88) |= 0x40u;
      __int16 v23 = *(std::string **)(a2 + 48);
      if (v23 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v23, (const std::string *)__str);
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
    }
    *(_DWORD *)(a2 + 88) |= 0x80u;
    double v24 = *(int **)(a2 + 56);
    if (!v24) {
      operator new();
    }
    [a1 cameraPose];
    *(_OWORD *)std::string __str = v25;
    *(_OWORD *)&__str[16] = v26;
    long long v58 = v27;
    long long v59 = v28;
    int v29 = sub_100865CBC((uint64_t)__str, v24);
    *(_DWORD *)(a2 + 88) |= 0x100u;
    double v30 = *(int **)(a2 + 64);
    if (!v30) {
      operator new();
    }
    [a1 cameraIntrinsics];
    *(_DWORD *)&__str[8] = v31;
    *(_DWORD *)&__str[24] = v32;
    *(void *)std::string __str = v33;
    *(void *)&__str[16] = v34;
    DWORD2(v58) = v35;
    *(void *)&long long v58 = v36;
    unsigned int v37 = sub_100866094((uint64_t)__str, v30);
    [a1 cameraImageResolution];
    *(_DWORD *)(a2 + 88) |= 0x200u;
    uint64_t v40 = *(void *)(a2 + 72);
    if (!v40) {
      operator new();
    }
    *(_DWORD *)(v40 + 28) |= 3u;
    uint64_t result = (v8 && v11) & v29 & v37;
    *(void *)(v40 + 8) = v38;
    *(void *)(v40 + 16) = v39;
    return result;
  }
  if (qword_102419420 != -1) {
    dispatch_once(&qword_102419420, &stru_1022CD788);
  }
  char v43 = qword_102419428;
  if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string __str = 134283521;
    *(void *)&__str[4] = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "CLVPC,fromCLVIOEstimation,Invalid output pointer,pEstimationMsg,%{private}p", __str, 0xCu);
  }
  uint64_t result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(__str, 0x65CuLL);
    if (qword_102419420 == -1) {
      goto LABEL_44;
    }
    goto LABEL_47;
  }
  return result;
}

void sub_100865444(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008654EC(unsigned int a1, int *a2)
{
  int v3 = a1;
  if (a1 >= 5)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    int v4 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      int v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CLVPC,fromCV3DVIOTrackingState,Received unhandled vio tracking state: %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromCV3DVIOTrackingState(const CV3DVIOTrackingState, CLP::LogEntry::Vision::VIOTrackingState &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    int v3 = -1;
  }
  *a2 = v3;
  return 1;
}

void sub_1008656B0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

BOOL sub_1008656BC(uint64_t a1, double a2)
{
  double v20 = a2;
  if (a1)
  {
    *(_DWORD *)(a1 + 36) |= 2u;
    *(double *)(a1 + 16) = a2;
    if (a2 >= 0.0 && (*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      v21[0] = 0.0;
      uint64_t v9 = sub_100864A5C();
      BOOL v10 = sub_100B01790(v9, &v20, v21);
      if (v10)
      {
        double v11 = v21[0];
        *(_DWORD *)(a1 + 36) |= 1u;
        *(double *)(a1 + 8) = v11;
      }
      else
      {
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1022CD788);
        }
        uint8x8_t v12 = qword_102419428;
        if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLVPC,fromMachAbsoluteTime,convertMachAbsoluteToCFAbsolute_RealTime failed", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419420 != -1) {
            dispatch_once(&qword_102419420, &stru_1022CD788);
          }
          LOWORD(v19) = 0;
          __int32 v17 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromMachAbsoluteTime(const CFTimeInterval, CLP::LogEntry::Vision::TimeStamp *)", "%s\n", v17);
          if (v17 != (char *)buf) {
            free(v17);
          }
        }
      }
      uint64_t v19 = 0;
      uint64_t v13 = sub_100864A5C();
      BOOL v14 = sub_100B01398(v13, &v20, (double *)&v19);
      if (v14)
      {
        uint64_t v15 = v19;
        *(_DWORD *)(a1 + 36) |= 4u;
        *(void *)(a1 + 24) = v15;
      }
      else
      {
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1022CD788);
        }
        __int32 v16 = qword_102419428;
        if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLVPC,fromMachAbsoluteTime,convertMachAbsoluteToMachContinuous_RealTime failed", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419420 != -1) {
            dispatch_once(&qword_102419420, &stru_1022CD788);
          }
          __int16 v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromMachAbsoluteTime(const CFTimeInterval, CLP::LogEntry::Vision::TimeStamp *)", "%s\n", v18);
          if (v18 != (char *)buf) {
            free(v18);
          }
        }
      }
      return v10 && v14;
    }
    else
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      int v5 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134349056;
        double v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLVPC,fromMachAbsoluteTime,Invalid input value,machAbsoluteTime,%{public}.3lf", buf, 0xCu);
      }
      BOOL result = sub_10013D1A0(115, 0);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1022CD788);
        }
        LODWORD(v21[0]) = 134349056;
        *(double *)((char *)v21 + 4) = v20;
        double v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromMachAbsoluteTime(const CFTimeInterval, CLP::LogEntry::Vision::TimeStamp *)", "%s\n", v7);
LABEL_22:
        if (v7 != (char *)buf) {
          free(v7);
        }
        return 0;
      }
    }
  }
  else
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    int v8 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134283521;
      double v23 = 0.0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLVPC,fromMachAbsoluteTime,Invalid output pointer,pTimeStampMsg,%{private}p", buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      LODWORD(v21[0]) = 134283521;
      *(double *)((char *)v21 + 4) = 0.0;
      double v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromMachAbsoluteTime(const CFTimeInterval, CLP::LogEntry::Vision::TimeStamp *)", "%s\n", v7);
      goto LABEL_22;
    }
  }
  return result;
}

void sub_100865CB0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_100865CBC(uint64_t a1, int *a2)
{
  if (a2)
  {
    int v4 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2);
    sub_10026DEDC((uint64_t)(a2 + 2));
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4, 4);
    uint64_t v5 = 0;
    LODWORD(v6) = 1;
    do
    {
      int v7 = a2[5];
      uint64_t v8 = a2[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a2[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4, v7 + 1);
          int v7 = a2[5];
        }
        a2[5] = v7 + 1;
        sub_10086B3E4();
      }
      uint64_t v9 = *((void *)a2 + 1);
      a2[4] = v8 + 1;
      BOOL v10 = sub_10086AEE0(a1, *(void *)(v9 + 8 * v8));
      BOOL v11 = v10;
      if (!v10)
      {
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1022CD788);
        }
        uint8x8_t v12 = qword_102419428;
        if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 67240192;
          LODWORD(v18) = v5;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLVPC,fromSimdFloat4x4,fromSimdFloat4(matrix.columns[%{public}d]) failed", buf, 8u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419420 != -1) {
            dispatch_once(&qword_102419420, &stru_1022CD788);
          }
          uint64_t v13 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromSimdFloat4x4(const simd_float4x4 &, CLP::LogEntry::Vision::simd_floatMxN *)", "%s\n", v13);
          if (v13 != (char *)buf) {
            free(v13);
          }
        }
      }
      uint64_t v6 = v6 & v11;
      ++v5;
      a1 += 16;
    }
    while (v5 != 4);
  }
  else
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    BOOL v14 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134283521;
      uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLVPC,fromSimdFloat4x4,Invalid output pointer,pMatrixMsg,%{private}p", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      __int32 v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromSimdFloat4x4(const simd_float4x4 &, CLP::LogEntry::Vision::simd_floatMxN *)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    return 0;
  }
  return v6;
}

void sub_100866084(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100866094(uint64_t a1, int *a2)
{
  if (a2)
  {
    int v4 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2);
    sub_10026DEDC((uint64_t)(a2 + 2));
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4, 3);
    uint64_t v5 = 0;
    LODWORD(v6) = 1;
    do
    {
      int v7 = a2[5];
      uint64_t v8 = a2[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a2[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4, v7 + 1);
          int v7 = a2[5];
        }
        a2[5] = v7 + 1;
        sub_10086B3E4();
      }
      uint64_t v9 = *((void *)a2 + 1);
      a2[4] = v8 + 1;
      BOOL v10 = sub_10086ACA8(a1, *(void *)(v9 + 8 * v8));
      BOOL v11 = v10;
      if (!v10)
      {
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1022CD788);
        }
        uint8x8_t v12 = qword_102419428;
        if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 67240192;
          LODWORD(v18) = v5;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLVPC,fromSimdFloat3x3,fromSimdFloat3(matrix.columns[%{public}d]) failed", buf, 8u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419420 != -1) {
            dispatch_once(&qword_102419420, &stru_1022CD788);
          }
          uint64_t v13 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromSimdFloat3x3(const simd_float3x3 &, CLP::LogEntry::Vision::simd_floatMxN *)", "%s\n", v13);
          if (v13 != (char *)buf) {
            free(v13);
          }
        }
      }
      uint64_t v6 = v6 & v11;
      ++v5;
      a1 += 16;
    }
    while (v5 != 3);
  }
  else
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    BOOL v14 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134283521;
      uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLVPC,fromSimdFloat3x3,Invalid output pointer,pMatrixMsg,%{private}p", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      __int32 v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromSimdFloat3x3(const simd_float3x3 &, CLP::LogEntry::Vision::simd_floatMxN *)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    return 0;
  }
  return v6;
}

void sub_10086645C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10086646C(void *a1, uint64_t a2)
{
  if (!a1)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    uint64_t v15 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134283521;
      uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLVPC,fromCLVLLocalizationResult,Invalid input pointer,localizationResult,%{private}p", buf, 0xCu);
    }
    uint64_t result = sub_10013D1A0(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419420 == -1)
    {
LABEL_26:
      __int32 v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromCLVLLocalizationResult(const _CLVLLocalizationResult *const, CLP::LogEntry::Vision::VLLocalizationResult *)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
      return 0;
    }
LABEL_29:
    dispatch_once(&qword_102419420, &stru_1022CD788);
    goto LABEL_26;
  }
  if (a2)
  {
    *(_DWORD *)(a2 + 56) |= 1u;
    uint64_t v4 = *(void *)(a2 + 8);
    if (!v4) {
      operator new();
    }
    [a1 timestamp];
    BOOL v6 = sub_1008656BC(v4, v5);
    *(_DWORD *)(a2 + 56) |= 2u;
    uint64_t v7 = *(void *)(a2 + 16);
    if (!v7) {
      operator new();
    }
    [a1 location];
    BOOL v8 = sub_10086695C((uint64_t)buf, v7);
    *(_DWORD *)(a2 + 56) |= 4u;
    uint64_t v9 = *(int **)(a2 + 24);
    if (!v9) {
      operator new();
    }
    [a1 transform];
    int v10 = sub_100866BBC((uint64_t)buf, v9);
    *(_DWORD *)(a2 + 56) |= 8u;
    BOOL v11 = *(int **)(a2 + 32);
    if (!v11) {
      operator new();
    }
    [a1 covariance];
    unsigned int v12 = sub_100866F94((uint64_t)buf, v11);
    [a1 confidence];
    uint64_t result = (v6 && v8) & v10 & v12;
    *(_DWORD *)(a2 + 56) |= 0x10u;
    *(_DWORD *)(a2 + 48) = v14;
    return result;
  }
  if (qword_102419420 != -1) {
    dispatch_once(&qword_102419420, &stru_1022CD788);
  }
  __int32 v16 = qword_102419428;
  if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134283521;
    uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLVPC,fromCLVLLocalizationResult,Invalid output pointer,pLocalizationResultMsg,%{private}p", buf, 0xCu);
  }
  uint64_t result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419420 == -1) {
      goto LABEL_26;
    }
    goto LABEL_29;
  }
  return result;
}

void sub_1008668D8(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10086695C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(_DWORD *)(a2 + 28) |= 1u;
    uint64_t v4 = *(void *)(a2 + 8);
    if (!v4) {
      operator new();
    }
    BOOL result = sub_10086784C((_OWORD *)a1, v4);
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)(a2 + 28) |= 2u;
    *(void *)(a2 + 16) = v6;
  }
  else
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    uint64_t v7 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134283521;
      uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLVPC,fromVLLocation,Invalid output pointer,pLocationMsg,%{private}p", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      BOOL v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromVLLocation(const VLLocation &, CLP::LogEntry::Vision::VLLocation *)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    return 0;
  }
  return result;
}

void sub_100866B80(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100866BBC(uint64_t a1, int *a2)
{
  if (a2)
  {
    uint64_t v4 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2);
    sub_10026DEDC((uint64_t)(a2 + 2));
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4, 4);
    uint64_t v5 = 0;
    LODWORD(v6) = 1;
    do
    {
      int v7 = a2[5];
      uint64_t v8 = a2[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a2[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4, v7 + 1);
          int v7 = a2[5];
        }
        a2[5] = v7 + 1;
        sub_10086B448();
      }
      uint64_t v9 = *((void *)a2 + 1);
      a2[4] = v8 + 1;
      BOOL v10 = sub_10086B118(a1, *(void *)(v9 + 8 * v8));
      BOOL v11 = v10;
      if (!v10)
      {
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1022CD788);
        }
        unsigned int v12 = qword_102419428;
        if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 67240192;
          LODWORD(v18) = v5;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLVPC,fromSimdDouble4x4,fromSimdDouble4(matrix.columns[%{public}d]) failed", buf, 8u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419420 != -1) {
            dispatch_once(&qword_102419420, &stru_1022CD788);
          }
          uint64_t v13 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromSimdDouble4x4(const simd_double4x4 &, CLP::LogEntry::Vision::simd_doubleMxN *)", "%s\n", v13);
          if (v13 != (char *)buf) {
            free(v13);
          }
        }
      }
      uint64_t v6 = v6 & v11;
      ++v5;
      a1 += 32;
    }
    while (v5 != 4);
  }
  else
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    int v14 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134283521;
      uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLVPC,fromSimdDouble4x4,Invalid output pointer,pMatrixMsg,%{private}p", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      __int32 v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromSimdDouble4x4(const simd_double4x4 &, CLP::LogEntry::Vision::simd_doubleMxN *)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    return 0;
  }
  return v6;
}

void sub_100866F84(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100866F94(uint64_t a1, int *a2)
{
  if (a2)
  {
    uint64_t v4 = (wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 2);
    sub_10026DEDC((uint64_t)(a2 + 2));
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4, 6);
    uint64_t v5 = 0;
    LODWORD(v6) = 1;
    do
    {
      int v7 = a2[5];
      uint64_t v8 = a2[4];
      if ((int)v8 >= v7)
      {
        if (v7 == a2[6])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4, v7 + 1);
          int v7 = a2[5];
        }
        a2[5] = v7 + 1;
        sub_10086B380();
      }
      uint64_t v9 = *((void *)a2 + 1);
      a2[4] = v8 + 1;
      BOOL v10 = sub_100867A90(a1, *(void *)(v9 + 8 * v8));
      BOOL v11 = v10;
      if (!v10)
      {
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1022CD788);
        }
        unsigned int v12 = qword_102419428;
        if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 67240192;
          LODWORD(v18) = v5;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLVPC,fromVLMatrixf6x6,fromVLVectorf6(matrix.v[%{public}d]) failed", buf, 8u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419420 != -1) {
            dispatch_once(&qword_102419420, &stru_1022CD788);
          }
          uint64_t v13 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromVLMatrixf6x6(const VLMatrixf6x6 &, CLP::LogEntry::Vision::VLMatrixfMxN *)", "%s\n", v13);
          if (v13 != (char *)buf) {
            free(v13);
          }
        }
      }
      uint64_t v6 = v6 & v11;
      ++v5;
      a1 += 24;
    }
    while (v5 != 6);
  }
  else
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    int v14 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134283521;
      uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLVPC,fromVLMatrixf6x6,Invalid output pointer,pMatrixMsg,%{private}p", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      __int32 v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromVLMatrixf6x6(const VLMatrixf6x6 &, CLP::LogEntry::Vision::VLMatrixfMxN *)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    return 0;
  }
  return v6;
}

void sub_10086735C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10086736C(void *a1, uint64_t a2)
{
  if (sub_10086646C(a1, a2))
  {
    if ([a1 debugInfo])
    {
      *(_DWORD *)(a2 + 56) |= 0x20u;
      uint64_t v4 = *(void *)(a2 + 40);
      if (!v4) {
        operator new();
      }
      id v5 = [a1 debugInfo];
      return sub_1008675D4(v5, v4);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    int v7 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLVPC,fromCLVLLocalizationResultForHarvest,Failed in VL estimate conversion", buf, 2u);
    }
    uint64_t result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromCLVLLocalizationResultForHarvest(const _CLVLLocalizationResult *const, CLP::LogEntry::Vision::VLLocalizationResult *)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
      return 0;
    }
  }
  return result;
}

void sub_100867598(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008675D4(void *a1, uint64_t a2)
{
  if (a1)
  {
    if ([a1 maps488Details])
    {
      *(_DWORD *)(a2 + 20) |= 1u;
      uint64_t v4 = *(void *)(a2 + 8);
      if (!v4) {
        operator new();
      }
      id v5 = [a1 maps488Details];
      return sub_100867CC4(v5, v4);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    int v7 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134283521;
      uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CLVPC,fromVLLocalizationDebugInfo,Invalid input pointer,debugInfo,%{private}p", buf, 0xCu);
    }
    uint64_t result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromVLLocalizationDebugInfo(const _CLVLLocalizationDebugInfo *const, CLP::LogEntry::Vision::VLLocalizationDebugInfo *)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
      return 0;
    }
  }
  return result;
}

void sub_100867810(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10086784C(_OWORD *a1, uint64_t a2)
{
  if (a2)
  {
    *(_DWORD *)(a2 + 16) = 0;
    sub_10026DE30(a2 + 8, 3);
    int v4 = 0;
    int v5 = *(_DWORD *)(a2 + 16);
    do
    {
      long long v6 = a1[1];
      v12[0] = *a1;
      v12[1] = v6;
      uint64_t v7 = *((void *)v12 + (v4 & 3));
      if (v5 == *(_DWORD *)(a2 + 20))
      {
        sub_10026DE30(a2 + 8, v5 + 1);
        int v5 = *(_DWORD *)(a2 + 16);
      }
      uint64_t v8 = *(void *)(a2 + 8);
      *(_DWORD *)(a2 + 16) = v5 + 1;
      *(void *)(v8 + 8 * v5) = v7;
      ++v4;
      ++v5;
    }
    while (v4 != 3);
  }
  else
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    uint64_t v9 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134283521;
      uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLVPC,fromSimdDouble3,Invalid output pointer,pVectorMsg,%{private}p", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      int v13 = 134283521;
      uint64_t v14 = 0;
      BOOL v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromSimdDouble3(const simd_double3 &, CLP::LogEntry::Vision::simd_doubleM *)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  return a2 != 0;
}

void sub_100867A80(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100867A90(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(_DWORD *)(a2 + 16) = 0;
    sub_100221DFC(a2 + 8, 6);
    uint64_t v4 = 0;
    int v5 = *(_DWORD *)(a2 + 16);
    do
    {
      int v6 = *(_DWORD *)(a1 + v4);
      if (v5 == *(_DWORD *)(a2 + 20))
      {
        sub_100221DFC(a2 + 8, v5 + 1);
        int v5 = *(_DWORD *)(a2 + 16);
      }
      uint64_t v7 = *(void *)(a2 + 8);
      *(_DWORD *)(a2 + 16) = v5 + 1;
      *(_DWORD *)(v7 + 4 * v5) = v6;
      v4 += 4;
      ++v5;
    }
    while (v4 != 24);
  }
  else
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    uint64_t v8 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134283521;
      uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLVPC,fromVLVectorf6,Invalid output pointer,pVectorMsg,%{private}p", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromVLVectorf6(const float (&)[6], CLP::LogEntry::Vision::VLVectorfM *)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return a2 != 0;
}

void sub_100867CB4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100867CC4(void *a1, uint64_t a2)
{
  if (a1)
  {
    int v3 = a1;
    id v4 = [a1 inliersCount];
    *(_DWORD *)(a2 + 276) |= 1u;
    *(void *)(a2 + 8) = v4;
    *(_DWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 40) = 0;
    *(_DWORD *)(a2 + 56) = 0;
    int v5 = &qword_102419000;
    __int16 v121 = v3;
    if (![v3 inliersCount]
      || [v3 points2D] && objc_msgSend(v3, "points3D") && objc_msgSend(v3, "inlierIndices"))
    {
      int v6 = (char *)[v3 points2D];
      uint64_t v7 = [v3 points3D];
      uint64_t v8 = (int *)[v3 inlierIndices];
      int v9 = [v3 inliersCount];
      sub_100221DFC(a2 + 16, 2 * v9);
      sub_10026DE30(a2 + 32, 3 * v9);
      sub_100221DFC(a2 + 48, v9);
      if (v9 < 1)
      {
        int v115 = 1;
      }
      else
      {
        uint64_t v10 = 0;
        BOOL v11 = (int *)(v6 + 4);
        uint64_t v12 = 3 * v9;
        do
        {
          int v13 = *(v11 - 1);
          int v14 = *(_DWORD *)(a2 + 24);
          int v15 = *(_DWORD *)(a2 + 28);
          if (v14 == v15)
          {
            sub_100221DFC(a2 + 16, v14 + 1);
            int v14 = *(_DWORD *)(a2 + 24);
            int v15 = *(_DWORD *)(a2 + 28);
          }
          uint64_t v16 = *(void *)(a2 + 16);
          int v17 = v14 + 1;
          *(_DWORD *)(a2 + 24) = v14 + 1;
          *(_DWORD *)(v16 + 4 * v14) = v13;
          int v18 = *v11;
          if (v14 + 1 == v15)
          {
            sub_100221DFC(a2 + 16, v14 + 2);
            int v17 = *(_DWORD *)(a2 + 24);
            uint64_t v16 = *(void *)(a2 + 16);
          }
          *(_DWORD *)(a2 + 24) = v17 + 1;
          *(_DWORD *)(v16 + 4 * v17) = v18;
          uint64_t v19 = v7[v10];
          int v21 = *(_DWORD *)(a2 + 40);
          int v20 = *(_DWORD *)(a2 + 44);
          if (v21 == v20)
          {
            sub_10026DE30(a2 + 32, v21 + 1);
            int v21 = *(_DWORD *)(a2 + 40);
            int v20 = *(_DWORD *)(a2 + 44);
          }
          uint64_t v22 = *(void *)(a2 + 32);
          int v23 = v21 + 1;
          *(_DWORD *)(a2 + 40) = v21 + 1;
          *(void *)(v22 + 8 * v21) = v19;
          uint64_t v24 = v7[(v10 + 1)];
          if (v21 + 1 == v20)
          {
            sub_10026DE30(a2 + 32, v21 + 2);
            uint64_t v22 = *(void *)(a2 + 32);
            int v23 = *(_DWORD *)(a2 + 40);
            int v20 = *(_DWORD *)(a2 + 44);
          }
          int v25 = v23 + 1;
          *(_DWORD *)(a2 + 40) = v23 + 1;
          *(void *)(v22 + 8 * v23) = v24;
          uint64_t v26 = v7[(v10 + 2)];
          if (v23 + 1 == v20)
          {
            sub_10026DE30(a2 + 32, v23 + 2);
            int v25 = *(_DWORD *)(a2 + 40);
            uint64_t v22 = *(void *)(a2 + 32);
          }
          *(_DWORD *)(a2 + 40) = v25 + 1;
          *(void *)(v22 + 8 * v25) = v26;
          int v27 = *v8;
          int v28 = *(_DWORD *)(a2 + 56);
          if (v28 == *(_DWORD *)(a2 + 60))
          {
            sub_100221DFC(a2 + 48, v28 + 1);
            int v28 = *(_DWORD *)(a2 + 56);
          }
          uint64_t v29 = *(void *)(a2 + 48);
          *(_DWORD *)(a2 + 56) = v28 + 1;
          *(_DWORD *)(v29 + 4 * v28) = v27;
          v10 += 3;
          v11 += 2;
          ++v8;
          int v3 = v121;
        }
        while (v12 != v10);
        int v115 = 1;
        int v5 = &qword_102419000;
      }
    }
    else
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      uint64_t v33 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "CLVPC,fromVLLocalizationMaps488Details,Invalid inliers", (uint8_t *)buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1022CD788);
        }
        int v113 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromVLLocalizationMaps488Details(const _CLVLLocalizationMaps488Details *const, CLP::LogEntry::Vision::VLLocalizationMaps488Details *)", "%s\n", (const char *)v113);
        if (v113 != buf) {
          free(v113);
        }
      }
      int v115 = 0;
    }
    uint64_t v34 = (char *)[v3 slamOrigin];
    *(_DWORD *)(a2 + 72) = 0;
    sub_10026DE30(a2 + 64, 6);
    uint64_t v35 = 0;
    int v36 = *(_DWORD *)(a2 + 72);
    do
    {
      uint64_t v37 = *(void *)&v34[v35];
      if (v36 == *(_DWORD *)(a2 + 76))
      {
        sub_10026DE30(a2 + 64, v36 + 1);
        int v36 = *(_DWORD *)(a2 + 72);
      }
      uint64_t v38 = *(void *)(a2 + 64);
      *(_DWORD *)(a2 + 72) = v36 + 1;
      *(void *)(v38 + 8 * v36) = v37;
      v35 += 8;
      ++v36;
    }
    while (v35 != 48);
    id v39 = [v3 slamTracksCount];
    *(_DWORD *)(a2 + 276) |= 0x20u;
    *(void *)(a2 + 80) = v39;
    id v40 = [v3 descriptorDimension];
    *(_DWORD *)(a2 + 276) |= 0x80u;
    *(void *)(a2 + 104) = v40;
    *(_DWORD *)(a2 + 96) = 0;
    uint64_t v41 = *(void *)(a2 + 112);
    if ((_UNKNOWN *)v41 != &wireless_diagnostics::google::protobuf::internal::kEmptyString)
    {
      if (*(char *)(v41 + 23) < 0)
      {
        **(unsigned char **)uint64_t v41 = 0;
        *(void *)(v41 + 8) = 0;
      }
      else
      {
        *(unsigned char *)uint64_t v41 = 0;
        *(unsigned char *)(v41 + 23) = 0;
      }
    }
    *(_DWORD *)(a2 + 276) &= ~0x100u;
    *(_DWORD *)(a2 + 128) = 0;
    *(_DWORD *)(a2 + 144) = 0;
    *(_DWORD *)(a2 + 160) = 0;
    if (![v3 slamTracksCount]
      || [v3 slamTracks]
      && (![v3 descriptorDimension] || objc_msgSend(v3, "slamTrackDescriptors"))
      && [v3 slamTrackObservations]
      && (![v3 totalObservationsCount] || objc_msgSend(v3, "slamTracks2D"))
      && (![v3 totalObservationsCount] || objc_msgSend(v3, "slamTrackImageIndices")))
    {
      uint64_t v42 = (char *)[v3 slamTracks];
      char v43 = (__int16 *)[v3 slamTrackObservations];
      LODWORD(v44) = [v3 slamTracksCount];
      sub_100221DFC(a2 + 88, 3 * v44);
      sub_100221DFC(a2 + 120, v44);
      if ((int)v44 >= 1)
      {
        uint64_t v44 = v44;
        uint64_t v45 = (int *)(v42 + 8);
        do
        {
          int v46 = *(v45 - 2);
          int v48 = *(_DWORD *)(a2 + 96);
          int v47 = *(_DWORD *)(a2 + 100);
          if (v48 == v47)
          {
            sub_100221DFC(a2 + 88, v48 + 1);
            int v48 = *(_DWORD *)(a2 + 96);
            int v47 = *(_DWORD *)(a2 + 100);
          }
          uint64_t v49 = *(void *)(a2 + 88);
          int v50 = v48 + 1;
          *(_DWORD *)(a2 + 96) = v48 + 1;
          *(_DWORD *)(v49 + 4 * v48) = v46;
          int v51 = *(v45 - 1);
          if (v48 + 1 == v47)
          {
            sub_100221DFC(a2 + 88, v48 + 2);
            uint64_t v49 = *(void *)(a2 + 88);
            int v50 = *(_DWORD *)(a2 + 96);
            int v47 = *(_DWORD *)(a2 + 100);
          }
          int v52 = v50 + 1;
          *(_DWORD *)(a2 + 96) = v50 + 1;
          *(_DWORD *)(v49 + 4 * v50) = v51;
          int v53 = *v45;
          if (v50 + 1 == v47)
          {
            sub_100221DFC(a2 + 88, v50 + 2);
            int v52 = *(_DWORD *)(a2 + 96);
            uint64_t v49 = *(void *)(a2 + 88);
          }
          *(_DWORD *)(a2 + 96) = v52 + 1;
          *(_DWORD *)(v49 + 4 * v52) = v53;
          int v54 = *v43;
          int v55 = *(_DWORD *)(a2 + 128);
          if (v55 == *(_DWORD *)(a2 + 132))
          {
            sub_100221DFC(a2 + 120, v55 + 1);
            int v55 = *(_DWORD *)(a2 + 128);
          }
          uint64_t v56 = *(void *)(a2 + 120);
          *(_DWORD *)(a2 + 128) = v55 + 1;
          *(_DWORD *)(v56 + 4 * v55) = v54;
          v45 += 3;
          ++v43;
          --v44;
        }
        while (v44);
      }
      id v57 = [v3 descriptorDimension];
      id v58 = [v3 slamTracksCount];
      id v59 = [v3 slamTrackDescriptors];
      if (v59)
      {
        sub_1002E9328(buf, v59, (void)v58 * (void)v57);
        *(_DWORD *)(a2 + 276) |= 0x100u;
        long long v60 = *(std::string **)(a2 + 112);
        if (v60 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        std::string::operator=(v60, buf);
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf[0].__r_.__value_.__l.__data_);
        }
      }
      long long v61 = (char *)[v3 slamTracks2D];
      long long v62 = (__int16 *)[v3 slamTrackImageIndices];
      LODWORD(v63) = [v3 totalObservationsCount];
      sub_100221DFC(a2 + 136, 2 * v63);
      sub_100221DFC(a2 + 152, v63);
      if ((int)v63 >= 1)
      {
        uint64_t v63 = v63;
        long long v64 = (int *)(v61 + 4);
        do
        {
          int v65 = *(v64 - 1);
          int v66 = *(_DWORD *)(a2 + 144);
          int v67 = *(_DWORD *)(a2 + 148);
          if (v66 == v67)
          {
            sub_100221DFC(a2 + 136, v66 + 1);
            int v66 = *(_DWORD *)(a2 + 144);
            int v67 = *(_DWORD *)(a2 + 148);
          }
          uint64_t v68 = *(void *)(a2 + 136);
          int v69 = v66 + 1;
          *(_DWORD *)(a2 + 144) = v66 + 1;
          *(_DWORD *)(v68 + 4 * v66) = v65;
          int v70 = *v64;
          if (v66 + 1 == v67)
          {
            sub_100221DFC(a2 + 136, v66 + 2);
            int v69 = *(_DWORD *)(a2 + 144);
            uint64_t v68 = *(void *)(a2 + 136);
          }
          *(_DWORD *)(a2 + 144) = v69 + 1;
          *(_DWORD *)(v68 + 4 * v69) = v70;
          int v71 = *v62;
          int v72 = *(_DWORD *)(a2 + 160);
          if (v72 == *(_DWORD *)(a2 + 164))
          {
            sub_100221DFC(a2 + 152, v72 + 1);
            int v72 = *(_DWORD *)(a2 + 160);
          }
          uint64_t v73 = *(void *)(a2 + 152);
          *(_DWORD *)(a2 + 160) = v72 + 1;
          *(_DWORD *)(v73 + 4 * v72) = v71;
          v64 += 2;
          ++v62;
          --v63;
        }
        while (v63);
      }
      int v74 = 1;
    }
    else
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      long long v75 = v5[133];
      if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "CLVPC,fromVLLocalizationMaps488Details,Invalid slamTracks", (uint8_t *)buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1022CD788);
        }
        __int16 v112 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromVLLocalizationMaps488Details(const _CLVLLocalizationMaps488Details *const, CLP::LogEntry::Vision::VLLocalizationMaps488Details *)", "%s\n", (const char *)v112);
        if (v112 != buf) {
          free(v112);
        }
      }
      int v74 = 0;
    }
    id v76 = [v3 frameCount];
    *(_DWORD *)(a2 + 276) |= 0x1000u;
    *(void *)(a2 + 168) = v76;
    *(_DWORD *)(a2 + 184) = 0;
    *(_DWORD *)(a2 + 200) = 0;
    *(_DWORD *)(a2 + 216) = 0;
    *(_DWORD *)(a2 + 232) = 0;
    if (![v3 frameCount]
      || [v3 perFrameVioStatusCodes]
      && [v3 perFrameVioPoses]
      && [v3 perFrameCalibrationMatrices]
      && [v3 perFrameDistortion])
    {
      uint64_t v120 = [v3 perFrameVioStatusCodes];
      __int16 v119 = (char *)[v3 perFrameVioPoses];
      uint64_t v118 = (char *)[v3 perFrameCalibrationMatrices];
      long long v77 = [v3 perFrameDistortion];
      int v78 = [v3 frameCount];
      sub_100221DFC(a2 + 176, v78);
      sub_100221DFC(a2 + 192, 12 * v78);
      sub_100221DFC(a2 + 208, 9 * v78);
      uint64_t v117 = a2 + 224;
      sub_100221DFC(a2 + 224, 2 * v78);
      if (v78 < 1)
      {
        int v99 = 1;
      }
      else
      {
        int v114 = v74;
        unsigned int v79 = 0;
        int v80 = 0;
        uint64_t v81 = 0;
        uint64_t v116 = v78;
        do
        {
          int v82 = v120[v81];
          int v83 = *(_DWORD *)(a2 + 184);
          if (v83 == *(_DWORD *)(a2 + 188))
          {
            sub_100221DFC(a2 + 176, v83 + 1);
            int v83 = *(_DWORD *)(a2 + 184);
          }
          uint64_t v84 = 0;
          uint64_t v85 = *(void *)(a2 + 176);
          *(_DWORD *)(a2 + 184) = v83 + 1;
          *(_DWORD *)(v85 + 4 * v83) = v82;
          int v86 = *(_DWORD *)(a2 + 200);
          do
          {
            int v87 = *(_DWORD *)&v119[16 * (v80 & 0x3FFFFFFF) + v84];
            if (v86 == *(_DWORD *)(a2 + 204))
            {
              sub_100221DFC(a2 + 192, v86 + 1);
              int v86 = *(_DWORD *)(a2 + 200);
            }
            uint64_t v88 = *(void *)(a2 + 192);
            *(_DWORD *)(a2 + 200) = v86 + 1;
            *(_DWORD *)(v88 + 4 * v86) = v87;
            v84 += 4;
            ++v86;
          }
          while (v84 != 48);
          uint64_t v89 = 0;
          int v90 = *(_DWORD *)(a2 + 216);
          int v3 = v121;
          do
          {
            int v91 = *(_DWORD *)&v118[4 * v79 + v89];
            if (v90 == *(_DWORD *)(a2 + 220))
            {
              sub_100221DFC(a2 + 208, v90 + 1);
              int v90 = *(_DWORD *)(a2 + 216);
            }
            uint64_t v92 = *(void *)(a2 + 208);
            *(_DWORD *)(a2 + 216) = v90 + 1;
            *(_DWORD *)(v92 + 4 * v90) = v91;
            v89 += 4;
            ++v90;
          }
          while (v89 != 36);
          int v93 = v77[2 * v81];
          int v94 = *(_DWORD *)(a2 + 232);
          int v95 = *(_DWORD *)(a2 + 236);
          if (v94 == v95)
          {
            sub_100221DFC(v117, v94 + 1);
            int v94 = *(_DWORD *)(a2 + 232);
            int v95 = *(_DWORD *)(a2 + 236);
          }
          uint64_t v96 = *(void *)(a2 + 224);
          int v97 = v94 + 1;
          *(_DWORD *)(a2 + 232) = v94 + 1;
          *(_DWORD *)(v96 + 4 * v94) = v93;
          int v98 = *(_DWORD *)((char *)v77 + ((8 * v81) | 4));
          if (v94 + 1 == v95)
          {
            sub_100221DFC(v117, v94 + 2);
            int v97 = *(_DWORD *)(a2 + 232);
            uint64_t v96 = *(void *)(a2 + 224);
          }
          *(_DWORD *)(a2 + 232) = v97 + 1;
          *(_DWORD *)(v96 + 4 * v97) = v98;
          ++v81;
          v80 += 3;
          v79 += 9;
        }
        while (v81 != v116);
        int v99 = 1;
        int v74 = v114;
      }
    }
    else
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      __int16 v100 = v5[133];
      if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_ERROR, "CLVPC,fromVLLocalizationMaps488Details,Invalid frames", (uint8_t *)buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1022CD788);
        }
        uint64_t v111 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromVLLocalizationMaps488Details(const _CLVLLocalizationMaps488Details *const, CLP::LogEntry::Vision::VLLocalizationMaps488Details *)", "%s\n", (const char *)v111);
        if (v111 != buf) {
          free(v111);
        }
      }
      int v99 = 0;
    }
    int v101 = (char *)[v3 resultPoseRotation];
    *(_DWORD *)(a2 + 248) = 0;
    sub_10026DE30(a2 + 240, 9);
    uint64_t v102 = 0;
    int v103 = *(_DWORD *)(a2 + 248);
    do
    {
      uint64_t v104 = *(void *)&v101[v102];
      if (v103 == *(_DWORD *)(a2 + 252))
      {
        sub_10026DE30(a2 + 240, v103 + 1);
        int v103 = *(_DWORD *)(a2 + 248);
      }
      uint64_t v105 = *(void *)(a2 + 240);
      *(_DWORD *)(a2 + 248) = v103 + 1;
      *(void *)(v105 + 8 * v103) = v104;
      v102 += 8;
      ++v103;
    }
    while (v102 != 72);
    __int16 v106 = (char *)[v3 resultPoseTranslation];
    *(_DWORD *)(a2 + 264) = 0;
    sub_10026DE30(a2 + 256, 3);
    uint64_t v107 = 0;
    int v108 = *(_DWORD *)(a2 + 264);
    do
    {
      uint64_t v109 = *(void *)&v106[v107];
      if (v108 == *(_DWORD *)(a2 + 268))
      {
        sub_10026DE30(a2 + 256, v108 + 1);
        int v108 = *(_DWORD *)(a2 + 264);
      }
      uint64_t v110 = *(void *)(a2 + 256);
      *(_DWORD *)(a2 + 264) = v108 + 1;
      *(void *)(v110 + 8 * v108) = v109;
      v107 += 8;
      ++v108;
    }
    while (v107 != 24);
    return v115 & v74 & v99;
  }
  else
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    double v30 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 134283521;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "CLVPC,fromVLLocalizationMaps488Details,Invalid input pointer,maps488Details,%{private}p", (uint8_t *)buf, 0xCu);
    }
    uint64_t result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      int v32 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromVLLocalizationMaps488Details(const _CLVLLocalizationMaps488Details *const, CLP::LogEntry::Vision::VLLocalizationMaps488Details *)", "%s\n", (const char *)v32);
      if (v32 != buf) {
        free(v32);
      }
      return 0;
    }
  }
  return result;
}

void sub_100868B98(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_100868BE8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(_DWORD *)long long buf = 0;
    sub_100869048(*(_DWORD *)a1, buf);
    int v4 = *(_DWORD *)buf;
    if (sub_10016D80C(*(unsigned int *)buf))
    {
      int v5 = *(_DWORD *)(a2 + 152);
      *(_DWORD *)(a2 + 48) = v4;
      *(_DWORD *)(a2 + 152) = v5 | 3;
      uint64_t v6 = *(void *)(a2 + 8);
      if (!v6) {
        operator new();
      }
      BOOL v7 = sub_100869224((_OWORD *)(a1 + 4), v6);
      int v8 = *(_DWORD *)(a2 + 152);
      *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 20);
      *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 36);
      *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 52);
      *(_DWORD *)(a2 + 152) = v8 | 0x3FC;
      *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 68);
      *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 84);
      uint64_t v9 = *(void *)(a1 + 88);
      *(_DWORD *)(a2 + 152) = v8 | 0xFFC;
      *(void *)(a2 + 88) = v9;
      unsigned int v29 = 0;
      sub_100869400(*(_DWORD *)(a1 + 96), &v29);
      unsigned int v10 = v29;
      if (sub_10016D634(v29))
      {
        int v11 = *(_DWORD *)(a2 + 152);
        *(_DWORD *)(a2 + 104) = v10;
        *(_DWORD *)(a2 + 152) = v11 | 0x3000;
        uint64_t v12 = *(void *)(a2 + 96);
        if (!v12) {
          operator new();
        }
        BOOL v13 = sub_100869224((_OWORD *)(a1 + 100), v12);
        uint64_t v14 = *(void *)(a1 + 116);
        int v15 = *(_DWORD *)(a2 + 152);
        *(_DWORD *)(a2 + 152) = v15 | 0x4000;
        *(void *)(a2 + 112) = v14;
        int v16 = *(_DWORD *)(a1 + 124);
        *(_DWORD *)(a2 + 152) = v15 | 0xC000;
        *(_DWORD *)(a2 + 108) = v16;
        int v28 = 0;
        sub_1008695D0(*(_DWORD *)(a1 + 128), &v28);
        int v17 = v28;
        if (sub_10016D828(v28))
        {
          *(_DWORD *)(a2 + 152) |= 0x10000u;
          *(_DWORD *)(a2 + 120) = v17;
          unsigned int v27 = 0;
          sub_1008697C4(*(_DWORD *)(a1 + 132), &v27);
          unsigned int v18 = v27;
          if (sub_10016E644(v27))
          {
            *(_DWORD *)(a2 + 152) |= 0x20000u;
            *(_DWORD *)(a2 + 124) = v18;
            unsigned int v26 = 0;
            sub_1008697C4(*(_DWORD *)(a1 + 136), &v26);
            unsigned int v19 = v26;
            if (sub_10016E644(v26))
            {
              uint64_t result = v7 & v13;
              *(_DWORD *)(a2 + 152) |= 0x40000u;
              *(_DWORD *)(a2 + 128) = v19;
              return result;
            }
            uint64_t v22 = "::CLP::LogEntry::PrivateData::ClientLocationReferenceFrameType_IsValid(value)";
            int v23 = 14797;
            uint64_t v24 = "set_raw_reference_frame";
          }
          else
          {
            uint64_t v22 = "::CLP::LogEntry::PrivateData::ClientLocationReferenceFrameType_IsValid(value)";
            int v23 = 14774;
            uint64_t v24 = "set_reference_frame";
          }
        }
        else
        {
          uint64_t v22 = "::CLP::LogEntry::PrivateData::DaemonLocation_LocationIntegrityType_IsValid(value)";
          int v23 = 14751;
          uint64_t v24 = "set_integrity";
        }
      }
      else
      {
        uint64_t v22 = "::CLP::LogEntry::PrivateData::LocationType_IsValid(value)";
        int v23 = 14642;
        uint64_t v24 = "set_type";
      }
    }
    else
    {
      uint64_t v22 = "::CLP::LogEntry::PrivateData::DaemonLocation_ClientLocationSuitabilityType_IsValid(value)";
      int v23 = 14357;
      uint64_t v24 = "set_suitability";
    }
    __assert_rtn(v24, "CLPPrivateDataShared.pb.h", v23, v22);
  }
  if (qword_102419420 != -1) {
    dispatch_once(&qword_102419420, &stru_1022CD788);
  }
  int v21 = qword_102419428;
  if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134283521;
    uint64_t v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "CLVPC,fromCLDaemonLocation,Invalid output pointer, pLocationMsg,%{private}p", buf, 0xCu);
  }
  uint64_t result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    unsigned int v29 = 134283521;
    uint64_t v30 = 0;
    int v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromCLDaemonLocation(const CLDaemonLocation &, CLP::LogEntry::PrivateData::DaemonLocation *)", "%s\n", v25);
    if (v25 != (char *)buf) {
      free(v25);
    }
    return 0;
  }
  return result;
}

void sub_100868FFC(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100869048(int a1, _DWORD *a2)
{
  int v3 = a1;
  if ((a1 - 1) >= 2 && a1 != 0xFFFF)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    int v5 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67109120;
      int v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLVPC,fromCLClientLocationSuitability,Received unhandled location suitability: %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      BOOL v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLVisionProtobufConverter::fromCLClientLocationSuitability(const CLClientLocationSuitability, CLP::LogEntry::PrivateData::DaemonLocation_ClientLocationSuitabilityType &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    int v3 = 0;
  }
  *a2 = v3;
  return 1;
}

void sub_100869218(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

BOOL sub_100869224(_OWORD *a1, uint64_t a2)
{
  if (a2)
  {
    *(_DWORD *)(a2 + 28) |= 3u;
    *(_OWORD *)(a2 + 8) = *a1;
  }
  else
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    int v3 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134283521;
      uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "CLVPC,fromCLClientLocationCoordinate,Invalid output pointer,pCoordinateMsg,%{private}p", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromCLClientLocationCoordinate(const CLClientLocationCoordinate &, CLP::LogEntry::PrivateData::ClientLocationCoordinate *)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return a2 != 0;
}

void sub_1008693F4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_100869400(unsigned int a1, unsigned int *a2)
{
  unsigned int v3 = a1;
  if (a1 >= 0xE)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    int v4 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      unsigned int v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CLVPC,fromCLLocationType,Received unhandled location type: %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromCLLocationType(const CLLocationType, CLP::LogEntry::PrivateData::LocationType &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    unsigned int v3 = 0;
  }
  *a2 = v3;
  return 1;
}

void sub_1008695C4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_1008695D0(int a1, int *a2)
{
  int v3 = a1;
  if (((a1 - 25) > 0x32 || ((1 << (a1 - 25)) & 0x4000002000001) == 0) && a1)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    int v4 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67109120;
      int v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLVPC,fromCLLocationIntegrity,Received unhandled location integrity: %u", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLVisionProtobufConverter::fromCLLocationIntegrity(const CLLocationIntegrity, CLP::LogEntry::PrivateData::DaemonLocation_LocationIntegrityType &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    int v3 = -1;
  }
  *a2 = v3;
  return 1;
}

void sub_1008697B8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_1008697C4(unsigned int a1, unsigned int *a2)
{
  unsigned int v3 = a1;
  if (a1 >= 3)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    int v4 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67109120;
      unsigned int v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLVPC,fromCLClientLocationReferenceFrame,Received unhandled location reference frame: %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLVisionProtobufConverter::fromCLClientLocationReferenceFrame(const CLClientLocationReferenceFrame, CLP::LogEntry::PrivateData::ClientLocationReferenceFrameType &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    unsigned int v3 = 0;
  }
  *a2 = v3;
  return 1;
}

void sub_100869988(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_100869994(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v4 = *(_DWORD *)(a2 + 364);
    *(_OWORD *)(a2 + 8) = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 16);
    *(void *)(a2 + 40) = *(void *)(a1 + 32);
    *(void *)(a2 + 48) = *(void *)(a1 + 40);
    *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 48);
    char v5 = *(unsigned char *)(a1 + 52);
    *(_DWORD *)(a2 + 364) = v4 | 0x1FF;
    *(unsigned char *)(a2 + 112) = v5;
    *(_DWORD *)long long buf = 0;
    sub_100869F4C(*(_DWORD *)(a1 + 56), buf);
    int v6 = *(_DWORD *)buf;
    if (sub_100165F14(*(unsigned int *)buf))
    {
      int v7 = *(_DWORD *)(a2 + 364);
      *(_DWORD *)(a2 + 60) = v6;
      *(_DWORD *)(a2 + 364) = v7 | 0x600;
      uint64_t v8 = *(void *)(a2 + 64);
      if (!v8) {
        operator new();
      }
      BOOL v9 = sub_100869224((_OWORD *)(a1 + 64), v8);
      uint64_t v10 = *(void *)(a1 + 80);
      int v11 = *(_DWORD *)(a2 + 364);
      *(_DWORD *)(a2 + 364) = v11 | 0x800;
      *(void *)(a2 + 72) = v10;
      int v12 = *(_DWORD *)(a1 + 88);
      *(_DWORD *)(a2 + 364) = v11 | 0x1800;
      *(_DWORD *)(a2 + 80) = v12;
      *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 92);
      *(unsigned char *)(a2 + 113) = *(unsigned char *)(a1 + 96);
      *(_DWORD *)(a2 + 364) = v11 | 0x807800;
      uint64_t v13 = *(void *)(a2 + 136);
      if (!v13) {
        operator new();
      }
      BOOL v14 = sub_10086A120(a1 + 104, v13);
      *(_DWORD *)(a2 + 364) |= 0x8000u;
      uint64_t v15 = *(void *)(a2 + 88);
      if (!v15) {
        operator new();
      }
      *(_DWORD *)(v15 + 28) |= 3u;
      *(_OWORD *)(v15 + 8) = *(_OWORD *)(a1 + 296);
      int v34 = 0;
      sub_10086A304(*(_DWORD *)(a1 + 312), &v34);
      int v16 = v34;
      if (sub_10016E674(v34))
      {
        int v17 = *(_DWORD *)(a2 + 364);
        *(_DWORD *)(a2 + 96) = v16;
        *(_DWORD *)(a2 + 100) = *(_DWORD *)(a1 + 316);
        *(_DWORD *)(a2 + 364) = v17 | 0x70000;
        uint64_t v18 = *(void *)(a2 + 104);
        if (!v18) {
          operator new();
        }
        BOOL v19 = sub_100869224((_OWORD *)(a1 + 320), v18);
        *(_DWORD *)(a2 + 364) |= 0x180000u;
        *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 336);
        unsigned int v33 = 0;
        sub_10086A4D8(*(_DWORD *)(a1 + 352), &v33);
        unsigned int v20 = v33;
        if (sub_10016E644(v33))
        {
          *(_DWORD *)(a2 + 116) = v20;
          *(unsigned char *)(a2 + 114) = *(unsigned char *)(a1 + 356);
          *(_OWORD *)(a2 + 144) = *(_OWORD *)(a1 + 360);
          *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 376);
          *(_OWORD *)(a2 + 176) = *(_OWORD *)(a1 + 496);
          *(unsigned char *)(a2 + 115) = *(unsigned char *)(a1 + 512);
          *(void *)(a2 + 192) = *(void *)(a1 + 392);
          *(void *)(a2 + 200) = *(void *)(a1 + 416);
          *(unsigned char *)(a2 + 276) = *(unsigned char *)(a1 + 424);
          *(int8x8_t *)(a2 + 364) = vorr_s8(*(int8x8_t *)(a2 + 364), (int8x8_t)0x7FF600000);
          uint64_t v21 = *(void *)(a2 + 208);
          if (!v21) {
            operator new();
          }
          BOOL v22 = sub_100869224((_OWORD *)(a1 + 432), v21);
          uint64_t v23 = *(void *)(a1 + 448);
          *(_DWORD *)(a2 + 368) |= 8u;
          *(void *)(a2 + 216) = v23;
          unsigned int v32 = 0;
          sub_1008697C4(*(_DWORD *)(a1 + 456), &v32);
          unsigned int v24 = v32;
          if (sub_10016E644(v32))
          {
            uint64_t result = (v9 && v14 && v19) & v22;
            int v26 = *(_DWORD *)(a2 + 368);
            *(_DWORD *)(a2 + 272) = v24;
            *(_DWORD *)(a2 + 368) = v26 | 0x70;
            *(_OWORD *)(a2 + 224) = *(_OWORD *)(a1 + 480);
            return result;
          }
          int v28 = "::CLP::LogEntry::PrivateData::ClientLocationReferenceFrameType_IsValid(value)";
          int v29 = 16200;
          uint64_t v30 = "set_fused_reference_frame";
        }
        else
        {
          int v28 = "::CLP::LogEntry::PrivateData::DaemonLocationPrivate_ClientLocationOriginDeviceType_IsValid(value)";
          int v29 = 15829;
          uint64_t v30 = "set_origin_device";
        }
      }
      else
      {
        int v28 = "::CLP::LogEntry::PrivateData::DaemonLocationPrivate_UndulationModelType_IsValid(value)";
        int v29 = 15698;
        uint64_t v30 = "set_undulation_model";
      }
    }
    else
    {
      int v28 = "::CLP::LogEntry::PrivateData::DaemonLocationPrivate_MatchQualityType_IsValid(value)";
      int v29 = 15503;
      uint64_t v30 = "set_match_quality";
    }
    __assert_rtn(v30, "CLPPrivateDataShared.pb.h", v29, v28);
  }
  if (qword_102419420 != -1) {
    dispatch_once(&qword_102419420, &stru_1022CD788);
  }
  unsigned int v27 = qword_102419428;
  if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134283521;
    uint64_t v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "CLVPC,fromCLDaemonLocationPrivate,Invalid output pointer,pLocationPrivateMsg,%{private}p", buf, 0xCu);
  }
  uint64_t result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    int v34 = 134283521;
    uint64_t v35 = 0;
    int v31 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromCLDaemonLocationPrivate(const CLDaemonLocationPrivate &, CLP::LogEntry::PrivateData::DaemonLocationPrivate *)", "%s\n", v31);
    if (v31 != (char *)buf) {
      free(v31);
    }
    return 0;
  }
  return result;
}

void sub_100869ED4(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100869F4C(int a1, _DWORD *a2)
{
  int v3 = a1;
  if ((a1 - 1) >= 3)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    int v4 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67109120;
      int v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLVPC,fromCLClientLocationMatchQuality,Received unhandled match quality: %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLVisionProtobufConverter::fromCLClientLocationMatchQuality(const CLClientLocationMatchQuality, CLP::LogEntry::PrivateData::DaemonLocationPrivate_MatchQualityType &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    int v3 = 0;
  }
  *a2 = v3;
  return 1;
}

void sub_10086A114(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

BOOL sub_10086A120(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v3 = *(_DWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 8) = *(_OWORD *)a1;
    *(_WORD *)(a2 + 24) = *(_WORD *)(a1 + 16);
    *(_DWORD *)(a2 + 32) = v3 | 0xF;
  }
  else
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    int v4 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134283521;
      uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CLVPC,fromCLMapMatcherData,Invalid output pointer,pMapMatcherDataMsg,%{private}p", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromCLMapMatcherData(const CLMapMatcherData &, CLP::LogEntry::PrivateData::MapMatcherData *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return a2 != 0;
}

void sub_10086A2F8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_10086A304(int a1, int *a2)
{
  int v3 = a1;
  if ((a1 + 1) >= 4)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    int v4 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      int v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CLVPC,fromCLUndulationModelType,Received unhandled undulation model type: %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromCLUndulationModelType(const CLUndulationModelType, CLP::LogEntry::PrivateData::DaemonLocationPrivate_UndulationModelType &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    int v3 = -1;
  }
  *a2 = v3;
  return 1;
}

void sub_10086A4CC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_10086A4D8(unsigned int a1, unsigned int *a2)
{
  unsigned int v3 = a1;
  if (a1 >= 3)
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    int v4 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67109120;
      unsigned int v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLVPC,fromCLClientLocationOriginDevice,Received unhandled location origin device: %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLVisionProtobufConverter::fromCLClientLocationOriginDevice(const CLClientLocationOriginDevice, CLP::LogEntry::PrivateData::DaemonLocationPrivate_ClientLocationOriginDeviceType &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    unsigned int v3 = 0;
  }
  *a2 = v3;
  return 1;
}

void sub_10086A69C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

BOOL sub_10086A6A8(uint64_t a1, double a2)
{
  double v20 = a2;
  if (a1)
  {
    *(_DWORD *)(a1 + 44) |= 2u;
    *(double *)(a1 + 16) = a2;
    if (a2 >= 0.0 && (*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      v21[0] = 0.0;
      uint64_t v9 = sub_100864A5C();
      BOOL v10 = sub_100B01790(v9, &v20, v21);
      if (v10)
      {
        double v11 = v21[0];
        *(_DWORD *)(a1 + 44) |= 1u;
        *(double *)(a1 + 8) = v11;
      }
      else
      {
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1022CD788);
        }
        int v12 = qword_102419428;
        if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLVPC,fromMachAbsoluteTime,convertMachAbsoluteToCFAbsolute_RealTime failed", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419420 != -1) {
            dispatch_once(&qword_102419420, &stru_1022CD788);
          }
          LOWORD(v19) = 0;
          int v17 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromMachAbsoluteTime(const CFTimeInterval, CLP::LogEntry::LogEntry_TimeStamp *)", "%s\n", v17);
          if (v17 != (char *)buf) {
            free(v17);
          }
        }
      }
      uint64_t v19 = 0;
      uint64_t v13 = sub_100864A5C();
      BOOL v14 = sub_100B01398(v13, &v20, (double *)&v19);
      if (v14)
      {
        uint64_t v15 = v19;
        *(_DWORD *)(a1 + 44) |= 4u;
        *(void *)(a1 + 24) = v15;
      }
      else
      {
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1022CD788);
        }
        int v16 = qword_102419428;
        if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLVPC,fromMachAbsoluteTime,convertMachAbsoluteToMachContinuous_RealTime failed", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419420 != -1) {
            dispatch_once(&qword_102419420, &stru_1022CD788);
          }
          uint64_t v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromMachAbsoluteTime(const CFTimeInterval, CLP::LogEntry::LogEntry_TimeStamp *)", "%s\n", v18);
          if (v18 != (char *)buf) {
            free(v18);
          }
        }
      }
      return v10 && v14;
    }
    else
    {
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      char v5 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134349056;
        double v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "CLVPC,fromMachAbsoluteTime,Invalid input value,machAbsoluteTime,%{public}.3lf", buf, 0xCu);
      }
      BOOL result = sub_10013D1A0(115, 0);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_1022CD788);
        }
        LODWORD(v21[0]) = 134349056;
        *(double *)((char *)v21 + 4) = v20;
        int v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromMachAbsoluteTime(const CFTimeInterval, CLP::LogEntry::LogEntry_TimeStamp *)", "%s\n", v7);
LABEL_22:
        if (v7 != (char *)buf) {
          free(v7);
        }
        return 0;
      }
    }
  }
  else
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    unsigned int v8 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134283521;
      double v23 = 0.0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLVPC,fromMachAbsoluteTime,Invalid output pointer,pTimeStampMsg,%{private}p", buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      LODWORD(v21[0]) = 134283521;
      *(double *)((char *)v21 + 4) = 0.0;
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromMachAbsoluteTime(const CFTimeInterval, CLP::LogEntry::LogEntry_TimeStamp *)", "%s\n", v7);
      goto LABEL_22;
    }
  }
  return result;
}

void sub_10086AC9C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

BOOL sub_10086ACA8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(_DWORD *)(a2 + 16) = 0;
    sub_100221DFC(a2 + 8, 3);
    int v4 = 0;
    int v5 = *(_DWORD *)(a2 + 16);
    do
    {
      int v6 = *(_DWORD *)(a1 + 4 * (v4 & 3));
      if (v5 == *(_DWORD *)(a2 + 20))
      {
        sub_100221DFC(a2 + 8, v5 + 1);
        int v5 = *(_DWORD *)(a2 + 16);
      }
      uint64_t v7 = *(void *)(a2 + 8);
      *(_DWORD *)(a2 + 16) = v5 + 1;
      *(_DWORD *)(v7 + 4 * v5) = v6;
      ++v4;
      ++v5;
    }
    while (v4 != 3);
  }
  else
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    unsigned int v8 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134283521;
      uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLVPC,fromSimdFloat3,Invalid output pointer,pVectorMsg,%{private}p", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      BOOL v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromSimdFloat3(const simd_float3 &, CLP::LogEntry::Vision::simd_floatM *)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return a2 != 0;
}

void sub_10086AED0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10086AEE0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(_DWORD *)(a2 + 16) = 0;
    sub_100221DFC(a2 + 8, 4);
    int v4 = 0;
    int v5 = *(_DWORD *)(a2 + 16);
    do
    {
      int v6 = *(_DWORD *)(a1 + 4 * (v4 & 3));
      if (v5 == *(_DWORD *)(a2 + 20))
      {
        sub_100221DFC(a2 + 8, v5 + 1);
        int v5 = *(_DWORD *)(a2 + 16);
      }
      uint64_t v7 = *(void *)(a2 + 8);
      *(_DWORD *)(a2 + 16) = v5 + 1;
      *(_DWORD *)(v7 + 4 * v5) = v6;
      ++v4;
      ++v5;
    }
    while (v4 != 4);
  }
  else
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    unsigned int v8 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134283521;
      uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLVPC,fromSimdFloat4,Invalid output pointer,pVectorMsg,%{private}p", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      BOOL v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromSimdFloat4(const simd_float4 &, CLP::LogEntry::Vision::simd_floatM *)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return a2 != 0;
}

void sub_10086B108(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10086B118(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(_DWORD *)(a2 + 16) = 0;
    sub_10026DE30(a2 + 8, 4);
    int v4 = 0;
    int v5 = *(_DWORD *)(a2 + 16);
    do
    {
      uint64_t v6 = *(void *)(a1 + 8 * (v4 & 3));
      if (v5 == *(_DWORD *)(a2 + 20))
      {
        sub_10026DE30(a2 + 8, v5 + 1);
        int v5 = *(_DWORD *)(a2 + 16);
      }
      uint64_t v7 = *(void *)(a2 + 8);
      *(_DWORD *)(a2 + 16) = v5 + 1;
      *(void *)(v7 + 8 * v5) = v6;
      ++v4;
      ++v5;
    }
    while (v4 != 4);
  }
  else
  {
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_1022CD788);
    }
    unsigned int v8 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134283521;
      uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLVPC,fromSimdDouble4,Invalid output pointer,pVectorMsg,%{private}p", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_1022CD788);
      }
      BOOL v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLVisionProtobufConverter::fromSimdDouble4(const simd_double4 &, CLP::LogEntry::Vision::simd_doubleM *)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return a2 != 0;
}

void sub_10086B340(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10086B350(id a1)
{
  qword_102419428 = (uint64_t)os_log_create("com.apple.locationd.Position", "Vision");
}

void sub_10086B380()
{
}

void sub_10086B3C0()
{
}

void sub_10086B3E4()
{
}

void sub_10086B424()
{
}

void sub_10086B448()
{
}

void sub_10086B488()
{
}

void sub_10086B55C(id a1)
{
  qword_10247E5E0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLPredictedWalkDistanceServiceWatchSilo"];
}

void sub_10086BA98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  operator delete();
}

id sub_10086BAF8(uint64_t a1, void *a2)
{
  long long v2 = *(_OWORD *)(a1 + 80);
  void v6[4] = *(_OWORD *)(a1 + 64);
  v6[5] = v2;
  v6[6] = *(_OWORD *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 112);
  long long v3 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v3;
  long long v4 = *(_OWORD *)(a1 + 48);
  uint64_t v6[2] = *(_OWORD *)(a1 + 32);
  void v6[3] = v4;
  return [a2 onAddBout:v6];
}

id sub_10086BB48(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onUserInfoUpdate:a2 data:a3];
}

id sub_10086BE78(uint64_t a1, uint64_t a2)
{
  return sub_1005E26F4(120.0, a2, 21, *(void **)(a1 + 32), 300, 0, 0, 0, 0, 0);
}

void sub_10086C310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1000DB0A0(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10086C328(uint64_t a1)
{
  if (qword_102419200 != -1) {
    dispatch_once(&qword_102419200, &stru_1022CD7C8);
  }
  long long v2 = qword_102419208;
  if (os_log_type_enabled((os_log_t)qword_102419208, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating bout records", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419200 != -1) {
      dispatch_once(&qword_102419200, &stru_1022CD7C8);
    }
    long long v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLPredictedWalkDistanceServiceWatch setUpAggregationOnTimer]_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return sub_1003A919C(*(void *)(*(void *)(a1 + 32) + 56));
}

void sub_10086C648(id a1)
{
  qword_102419208 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PredictedWalkDistance");
}

void sub_10086C678(uint64_t a1, void *a2)
{
  if (a2)
  {
    long long v3 = (void *)a2[41];
    if (v3)
    {
      a2[42] = v3;
      operator delete(v3);
    }
    sub_1003B2350(a2 + 27);
    long long v4 = (void *)a2[24];
    if (v4)
    {
      a2[25] = v4;
      operator delete(v4);
    }
    int v5 = (std::__shared_weak_count *)a2[1];
    if (v5) {
      sub_1000DB0A0(v5);
    }
    operator delete();
  }
}

uint64_t sub_10086C6F8()
{
  sub_100134750(qword_10247E5C8, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247E5C8, (void *)&_mh_execute_header);
}

void sub_10086C7C4(uint64_t a1, void *a2)
{
  id v4 = objc_alloc((Class)CMAbsoluteAltitudeData);
  [a2 altitude];
  double v6 = v5;
  [a2 accuracy];
  double v8 = v7;
  [a2 precision];
  double v10 = v9;
  id v11 = [a2 statusInfo];
  [a2 timestamp];
  id v13 = [v4 initWithAltitude:v11 accuracy:v6 precision:v8 status:v10 timestamp:v12];
  uint64_t v14 = CMAbsoluteAltitudeKey;
  id v15 = v13;
  +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
  sub_10086F2B8(a1);
}

void sub_10086CAC4(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  double v5 = (void *)sub_100054C14(a1, a2, a3, a4, a5);
  *double v5 = off_1022CD7F8;
  v5[6] = 0;
  v5[7] = 0;
  v5[8] = 0;
  sub_1004A1714();
}

void sub_10086CC2C(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  uint64_t *v2 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_100029A7C(v1);
  _Unwind_Resume(a1);
}

void sub_10086CC74(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CD8C8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    double v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLElevationSubscription::onOdometerUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CD8C8);
    }
    double v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      id v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLElevationSubscription::onOdometerUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10086E790(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10086CE30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10086CE54(uint64_t a1)
{
  *(void *)a1 = off_1022CD7F8;

  [*(id *)(a1 + 64) setValid:0];
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  [*(id *)(a1 + 72) invalidate];

  *(void *)(a1 + 72) = 0;
  uint64_t v3 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return sub_100029A7C(a1);
}

void sub_10086CF3C(uint64_t a1)
{
  sub_10086CE54(a1);

  operator delete();
}

void *sub_10086CF74@<X0>(uint64_t a1@<X8>)
{
  v10[0] = off_1022CD918;
  v10[1] = sub_10086D2AC;
  _DWORD v10[2] = 0;
  v10[3] = v10;
  sub_100134750(v11, "kCLConnectionMessageSignificantElevationUpdate");
  sub_10086F39C((uint64_t)&v12, (uint64_t)v10);
  uint64_t v7 = off_1022CD918;
  v8[0] = sub_10086D6B4;
  v8[1] = 0;
  double v9 = &v7;
  sub_100134750(v13, "kCLConnectionMessageFilteredElevationUpdate");
  sub_10086F39C((uint64_t)&v14, (uint64_t)&v7);
  v6[0] = off_1022CD9C8;
  v6[1] = sub_10086DACC;
  uint64_t v6[2] = 0;
  void v6[3] = v6;
  sub_100134750(v15, "kCLConnectionMessageSignificantElevationDeltaQuery");
  sub_10086F39C((uint64_t)&v16, (uint64_t)v6);
  v5[0] = off_1022CD918;
  v5[1] = sub_10086DEA0;
  _DWORD v5[2] = 0;
  v5[3] = v5;
  sub_100134750(v17, "kCLConnectionMessageAbsoluteAltitudeUpdate");
  sub_10086F39C((uint64_t)&v18, (uint64_t)v5);
  v4[0] = off_1022CD9C8;
  v4[1] = sub_10086E2A0;
  _DWORD v4[2] = 0;
  v4[3] = v4;
  sub_100134750(v19, "kCLConnectionMessageElevationProfileQuery");
  sub_10086F39C((uint64_t)&v20, (uint64_t)v4);
  sub_10086FA0C(a1, (unsigned __int8 *)v11, 5);
  uint64_t v2 = 35;
  do
  {
    sub_10086F7F4(&v10[v2]);
    if (SHIBYTE((&v9)[v2]) < 0) {
      operator delete((void *)v8[v2]);
    }
    v2 -= 7;
  }
  while (v2 * 8);
  sub_10086F7F4(v4);
  sub_10086F7F4(v5);
  sub_10086F7F4(v6);
  sub_10086F7F4(&v7);
  return sub_10086F7F4(v10);
}

void sub_10086D1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  for (uint64_t i = 224; i != -56; i -= 56)
    sub_10086E754((uint64_t)(&a29 + i));
  sub_10086F7F4(&a9);
  sub_10086F7F4(&a13);
  sub_10086F7F4(&a17);
  sub_10086F7F4(&a21);
  sub_10086F7F4(&a25);
  _Unwind_Resume(a1);
}

void sub_10086D2AC(uint64_t a1, int a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_1022CD8E8);
  }
  double v5 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)long long buf = 138412802;
    *(void *)&uint8_t buf[4] = v6;
    __int16 v23 = 2048;
    uint64_t v24 = a1;
    __int16 v25 = 1024;
    int v26 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "SignificantElevation subscription changed, %@, %p, %d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022CD8E8);
    }
    uint64_t v11 = *(void *)(a1 + 24);
    unsigned int v16 = 138412802;
    uint64_t v17 = v11;
    __int16 v18 = 2048;
    uint64_t v19 = a1;
    __int16 v20 = 1024;
    int v21 = a2;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLElevationSubscription::handleRequestSignificantElevationUpdate(BOOL, const CLNameValuePair &)", "%s\n", v12);
    if (v12 != buf) {
      free(v12);
    }
  }
  unsigned int v16 = 0;
  if (sub_10086E9BC(a1, (int *)&v16))
  {
    sub_10009C834(a1);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v9 = *(void *)(v7 + 8);
    double v8 = *(void **)(v7 + 16);
    if (a2) {
      [v8 register:v9 forNotification:6 registrationInfo:0];
    }
    else {
      [v8 unregister:v9 forNotification:6];
    }
  }
  else
  {
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022CD8E8);
    }
    double v10 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Failed to subscribe to significant elevation updates.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_1022CD8E8);
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLElevationSubscription::handleRequestSignificantElevationUpdate(BOOL, const CLNameValuePair &)", "%s\n", v13);
      if (v13 != buf) {
        free(v13);
      }
    }
    uint64_t v14 = CMErrorMessage;
    id v15 = +[NSNumber numberWithUnsignedInt:v16];
    *(void *)long long buf = +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
    sub_10086EA98(a1);
  }
}

void sub_10086D674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10086D6B4(uint64_t a1, int a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (!sub_1004A0150(*(void *)(a1 + 8)) || (sub_10074157C() & 0x10) == 0)
  {
    uint64_t v14 = CMErrorMessage;
    id v15 = &off_102392B10;
    *(void *)long long buf = +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
    sub_10086EB2C(a1);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022CD8E8);
    }
    double v5 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Failed to subscribe to filtered elevation updates.", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_8;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022CD8E8);
    }
LABEL_22:
    double v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLElevationSubscription::handleRequestFilteredElevationUpdate(BOOL, const CLNameValuePair &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
    goto LABEL_8;
  }
  if (sub_1010A4D14(a1))
  {
    sub_10009C834(a1);
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(v6 + 8);
    uint64_t v7 = *(void **)(v6 + 16);
    if (a2)
    {
      [v7 register:v8 forNotification:3 registrationInfo:0];
      [*(id *)(*(void *)(a1 + 48) + 16) register:*(void *)(*(void *)(a1 + 48) + 8) forNotification:7 registrationInfo:0];
    }
    else
    {
      [v7 unregister:v8 forNotification:3];
      [*(id *)(*(void *)(a1 + 48) + 16) unregister:*(void *)(*(void *)(a1 + 48) + 8) forNotification:7];
    }
    goto LABEL_8;
  }
  uint64_t v11 = CMErrorMessage;
  uint64_t v12 = &off_102392B28;
  *(void *)long long buf = +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1];
  sub_10086EB2C(a1);
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_1022CD8E8);
  }
  uint64_t v9 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning Not authorized for filtered elevation updates.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022CD8E8);
    }
    goto LABEL_22;
  }
LABEL_8:
}

void sub_10086DA80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10086DACC(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  unsigned int v20 = 0;
  if (sub_10086E9BC(a1, (int *)&v20))
  {
    uint64_t v5 = objc_opt_class();
    uint64_t v6 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, objc_opt_class(), 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v6);
    uint64_t v8 = DictionaryOfClasses;
    if (DictionaryOfClasses
      && (uint64_t v9 = CMSignificantElevationKeyQueryTimeRange,
          [DictionaryOfClasses objectForKeyedSubscript:CMSignificantElevationKeyQueryTimeRange]))
    {
      sub_1000E1294((uint64_t *)buf, (uint64_t)"CLDaemonClient.OdometerNotifier.SignificantElevationDeltaQuery", 0);
      id v10 = [v8 objectForKeyedSubscript:v9];
      uint64_t v11 = *(void **)(*(void *)(a1 + 48) + 16);
      id v12 = [v10 startDate];
      id v13 = [v10 endDate];
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3321888768;
      v17[2] = sub_10086EBC0;
      void v17[3] = &unk_1022CD818;
      uint64_t v14 = *(std::__shared_weak_count **)(a2 + 8);
      v17[4] = *(void *)a2;
      __int16 v18 = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      [v11 querySignificantElevationDeltaFromDate:v12 toDate:v13 withReply:v17];
      if (v18) {
        sub_1000DB0A0(v18);
      }
      sub_1000E1098(buf);
    }
    else
    {
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_1022CD8E8);
      }
      id v15 = qword_1024190D8;
      if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Programmer error: Wrong parameters were passed.", (uint8_t *)buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190D0 != -1) {
          dispatch_once(&qword_1024190D0, &stru_1022CD8E8);
        }
        __int16 v19 = 0;
        unsigned int v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLElevationSubscription::handleMessageSignificantElevationDeltaQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      uint64_t v21 = CMErrorMessage;
      BOOL v22 = &off_102392B40;
      +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    uint64_t v24 = CMErrorMessage;
    __int16 v25 = +[NSNumber numberWithUnsignedInt:v20];
    +[NSDictionary dictionaryWithObjects:&v25 forKeys:&v24 count:1];
    CLConnectionMessage::sendReply();
  }
}

void sub_10086DE44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10086DEA0(void *a1, int a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_1022CD8E8);
  }
  uint64_t v5 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = a1[3];
    *(_DWORD *)long long buf = 138412802;
    *(void *)&uint8_t buf[4] = v6;
    __int16 v22 = 2048;
    __int16 v23 = a1;
    __int16 v24 = 1024;
    int v25 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "AbsoluteAltitude subscription changed, %@, %p, %d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022CD8E8);
    }
    uint64_t v10 = a1[3];
    unsigned int v15 = 138412802;
    uint64_t v16 = v10;
    __int16 v17 = 2048;
    __int16 v18 = a1;
    __int16 v19 = 1024;
    int v20 = a2;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLElevationSubscription::handleRequestAbsoluteAltitudeUpdate(BOOL, const CLNameValuePair &)", "%s\n", v11);
    if (v11 != buf) {
      free(v11);
    }
  }
  unsigned int v15 = 0;
  if (sub_10086EEE0((uint64_t)a1, &v15))
  {
    sub_10009C834((uint64_t)a1);
    uint64_t v7 = (void *)a1[7];
    uint64_t v8 = a1[8];
    if (a2)
    {
      [v7 registerClient:v8 forNotification:1];
      sub_10086F1A4((uint64_t)a1);
    }
    else
    {
      [v7 unregisterClient:v8 forNotification:1];
    }
  }
  else
  {
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022CD8E8);
    }
    uint64_t v9 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning Failed to subscribe to absolute altitude updates.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_1022CD8E8);
      }
      id v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLElevationSubscription::handleRequestAbsoluteAltitudeUpdate(BOOL, const CLNameValuePair &)", "%s\n", v12);
      if (v12 != buf) {
        free(v12);
      }
    }
    uint64_t v13 = CMErrorMessage;
    uint64_t v14 = +[NSNumber numberWithUnsignedInt:v15];
    *(void *)long long buf = +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
    sub_10086F110((uint64_t)a1);
  }
}

void sub_10086E268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10086E2A0(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init((Class)NSAutoreleasePool);
  unsigned int v26 = 0;
  if (sub_10086E9BC(a1, (int *)&v26))
  {
    CFDictionaryRef Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
    uint64_t v6 = Dictionary;
    if (Dictionary
      && (id v7 = [Dictionary objectForKeyedSubscript:CMElevationProfileKeyQueryStartTime]) != 0
      && (id v8 = [v6 objectForKeyedSubscript:CMElevationProfileKeyQueryEndTime]) != 0
      && (uint64_t v9 = CMElevationProfileKeyQueryFromRecordId,
          [v6 objectForKeyedSubscript:CMElevationProfileKeyQueryFromRecordId])
      && (uint64_t v10 = CMElevationProfileKeyQueryBatchSize,
          [v6 objectForKeyedSubscript:CMElevationProfileKeyQueryBatchSize]))
    {
      [v7 doubleValue];
      double v12 = v11;
      [v8 doubleValue];
      double v14 = v13;
      if (v12 <= v13)
      {
        id v16 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceReferenceDate:v12];
        id v17 = [objc_alloc((Class)NSDate) initWithTimeIntervalSinceReferenceDate:v14];
        id v18 = [v6 objectForKeyedSubscript:v9];
        id v19 = [v6 objectForKeyedSubscript:v10];
        sub_1000E1294((uint64_t *)buf, (uint64_t)"CLDaemonClient.ElevationProfileQuery", 0);
        int v20 = *(void **)(a1 + 56);
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3321888768;
        void v23[2] = sub_10086EC8C;
        v23[3] = &unk_1022CD848;
        uint64_t v21 = *(std::__shared_weak_count **)(a2 + 8);
        v23[4] = *(void *)a2;
        __int16 v24 = v21;
        if (v21) {
          atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        [v20 queryElevationsFromDate:v16 toDate:v17 withBatchSize:v19 fromRecordId:v18 withReply:v23];

        if (v24) {
          sub_1000DB0A0(v24);
        }
        sub_1000E1098(buf);
      }
      else
      {
        uint64_t v27 = CMErrorMessage;
        int v28 = &off_102392B40;
        +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
        CLConnectionMessage::sendReply();
      }
    }
    else
    {
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_1022CD8E8);
      }
      unsigned int v15 = qword_1024190D8;
      if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Programmer error: Wrong parameters were passed.", (uint8_t *)buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190D0 != -1) {
          dispatch_once(&qword_1024190D0, &stru_1022CD8E8);
        }
        __int16 v25 = 0;
        __int16 v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLElevationSubscription::handleMessageElevationProfileQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      uint64_t v29 = CMErrorMessage;
      uint64_t v30 = &off_102392B40;
      +[NSDictionary dictionaryWithObjects:&v30 forKeys:&v29 count:1];
      CLConnectionMessage::sendReply();
    }
  }
  else
  {
    uint64_t v32 = CMErrorMessage;
    unsigned int v33 = +[NSNumber numberWithUnsignedInt:v26];
    +[NSDictionary dictionaryWithObjects:&v33 forKeys:&v32 count:1];
    CLConnectionMessage::sendReply();
  }
}

void sub_10086E6E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10086E754(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10086E790(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v5 = *a3;
  if (*a3 == 3 || v5 == 7)
  {
    id v7 = [objc_alloc((Class)CMSignificantElevationSample) initWithFilteredElevation:a4];
    uint64_t v9 = CMFilteredElevationKeySample;
    id v10 = v7;
    +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];

    sub_10086E938(a1);
  }
  else if (v5 == 6)
  {
    id v8 = [objc_alloc((Class)CMSignificantElevationSample) initWithSignificantElevation:a4];
    uint64_t v11 = CMSignificantElevationKeySample;
    id v12 = v8;
    +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1];

    sub_10086E8B4(a1);
  }
}

void sub_10086E8B4(uint64_t a1)
{
  sub_1000E9420(&off_1022CDA38, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_10086E920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10086E938(uint64_t a1)
{
  sub_1000E9420(&off_1022CDA40, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_10086E9A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10086E9BC(uint64_t a1, int *a2)
{
  if (sub_1010A4D14(a1))
  {
    sub_100103240();
    if (sub_10010145C())
    {
      sub_100134750(&__p, "com.apple.locationd.natalimetry");
      char v4 = sub_1010A4BAC(a1);
      char v5 = v4;
      if (v9 < 0)
      {
        operator delete(__p);
        if ((v5 & 1) == 0)
        {
LABEL_13:
          int v6 = 110;
          goto LABEL_14;
        }
      }
      else if ((v4 & 1) == 0)
      {
        goto LABEL_13;
      }
    }
    else if ((sub_10074157C() & 0x10) == 0)
    {
LABEL_12:
      int v6 = 109;
      goto LABEL_14;
    }
    if (sub_1004A0150(*(void *)(a1 + 8))) {
      return 1;
    }
    goto LABEL_12;
  }
  int v6 = 111;
LABEL_14:
  uint64_t result = 0;
  *a2 = v6;
  return result;
}

void sub_10086EA7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10086EA98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_10048C758(&off_1022CDA38, &v2);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v1 + 24))(v1, &v2, 0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_10086EB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10086EB2C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_10048C758(&off_1022CDA40, &v2);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v1 + 24))(v1, &v2, 0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_10086EBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10086EBC0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = CMSignificantElevationKeySample;
    uint64_t v4 = a2;
    +[NSDictionary dictionaryWithObjects:&v4 forKeys:&v3 count:1];
  }
  else
  {
    uint64_t v5 = CMErrorMessage;
    int v6 = &off_102392B10;
    +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
  }
  return CLConnectionMessage::sendReply();
}

void sub_10086EC8C(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  if (a2)
  {
    id v5 = objc_alloc_init((Class)NSMutableArray);
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v6 = [a2 countByEnumeratingWithState:&v23 objects:v29 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v24;
      do
      {
        char v9 = 0;
        do
        {
          if (*(void *)v24 != v8) {
            objc_enumerationMutation(a2);
          }
          id v10 = *(void **)(*((void *)&v23 + 1) + 8 * (void)v9);
          id v11 = objc_alloc((Class)CMAbsoluteAltitudeData);
          [v10 altitude];
          double v13 = v12;
          [v10 accuracy];
          double v15 = v14;
          [v10 precision];
          double v17 = v16;
          id v18 = [v10 statusInfo];
          [v10 timestamp];
          id v20 = [v11 initWithAltitude:v18 accuracy:v13 precision:v15 status:v17 timestamp:v19];
          [v5 addObject:v20];

          char v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        id v7 = [a2 countByEnumeratingWithState:&v23 objects:v29 count:16];
      }
      while (v7);
    }
    v28[0] = v5;
    v27[0] = CMElevationProfileKeyAltitudeArray;
    v27[1] = CMElevationProfileKeyLastBatch;
    v28[1] = +[NSNumber numberWithBool:a3];
    v27[2] = CMElevationProfileKeyQueryFromRecordId;
    v28[2] = +[NSNumber numberWithInt:a4];
    +[NSDictionary dictionaryWithObjects:v28 forKeys:v27 count:3];
    CLConnectionMessage::sendReply();
  }
  else
  {
    uint64_t v30 = CMErrorMessage;
    int v31 = &off_102392B10;
    +[NSDictionary dictionaryWithObjects:&v31 forKeys:&v30 count:1];
    CLConnectionMessage::sendReply();
  }
}

uint64_t sub_10086EEE0(uint64_t a1, _DWORD *a2)
{
  int v4 = sub_1010A4D14(a1);
  sub_100134750(__p, "com.apple.locationd.absolute_altimeter");
  unsigned int v5 = sub_1010A4BAC(a1);
  if (v12 < 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v6 = v4 | v5;
  if ((v6 & 1) == 0)
  {
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022CD8E8);
    }
    id v7 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 24);
      *(_DWORD *)long long __p = 138543362;
      *(void *)&__p[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@ is not entitled for motion updates", __p, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_1022CD8E8);
      }
      id v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLElevationSubscription::isQualifiedForAbsoluteAltitude(CMError &)", "%s\n", v10);
      if (v10 != __p) {
        free(v10);
      }
    }
    *a2 = 111;
  }
  return v6;
}

void sub_10086F0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10086F110(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_10048C758(&off_1022CDA48, &v2);
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v1 + 24))(v1, &v2, 0);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_10086F18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

id sub_10086F1A4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 72) arrayForKey:@"ElevationThresholds" defaultValue:0];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id result = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (result)
  {
    id v4 = result;
    uint64_t v5 = *(void *)v9;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v8 + 1) + 8 * (void)v6) floatValue];
        [*(id *)(a1 + 56) registerClient:*(void *)(a1 + 64) forElevationThreshold:1.79769313e308, v7];
        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id result = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      id v4 = result;
    }
    while (result);
  }
  return result;
}

void sub_10086F2B8(uint64_t a1)
{
  sub_1000E9420(&off_1022CDA48, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_10086F324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10086F33C(id a1)
{
  qword_1024191E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_10086F36C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_10086F39C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_10086F41C(id a1)
{
  qword_1024190D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

__n128 sub_10086F44C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1022CD918;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10086F498(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022CD918;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10086F4C8(uint64_t a1, uint64_t a2, long long *a3)
{
}

uint64_t sub_10086F4D0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10086F510()
{
}

void sub_10086F51C(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_10086F578(a1, a2, (CLConnectionMessage **)&v3);
  if (*((void *)&v3 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_10086F560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10086F578(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  uint64_t v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  CFDictionaryRef DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_10013FA80((int)v15, DictionaryOfClasses);
  BOOL v14 = 0;
  if (sub_1000D2988((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14))
  {
    long long v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    long long v10 = (void *)(a2 + (v9 >> 1));
    if (v9) {
      long long v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022CD988);
    }
    long long v11 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      double v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022CD988);
      }
    }
    char v12 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      *(_DWORD *)long long buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      double v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10013F3C4(v15);
}

void sub_10086F7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_10086F7C4(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void *sub_10086F7F4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

__n128 sub_10086F878(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1022CD9C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10086F8C4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022CD9C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10086F8F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_10086F8FC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10086F93C()
{
}

void sub_10086F948(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  float v7 = (void *)(a2 + (v6 >> 1));
  if (v6) {
    uint64_t v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v5(v7, &v8);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_10086F9E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10086FA0C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_10086FA88(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_10086FA74(_Unwind_Exception *a1)
{
  sub_10086FF3C(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10086FA88(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  float v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    double v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_10086FD0C(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  __int16 v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *__int16 v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_10086FE94((uint64_t)v25, 0);
  return i;
}

void sub_10086FCF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10086FE94((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_10086FD0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  __n128 result = sub_10086FD84(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_10086FD6C(_Unwind_Exception *a1)
{
  sub_10086FE94(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_10086FD84(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_10086FDFC((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_10086FDE0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10086FDFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10086FE94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10086FEEC((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_10086FEEC(uint64_t a1)
{
  sub_10086F7F4((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_10086FF3C(uint64_t a1)
{
  sub_10086FF78(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10086FF78(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_10086FEEC((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_10087006C(id a1)
{
  qword_10247E5F0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLWatchOrientationSettingsNotifierSilo"];
}

uint64_t sub_10087012C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100870BEC;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_10247E610 != -1) {
    dispatch_once(&qword_10247E610, block);
  }
  return qword_10248A3D0;
}

void sub_100870390(id a1)
{
  if (sub_10010145C()) {
    byte_10247E600 = 1;
  }
}

const void *sub_1008703BC(const void *a1, void *a2)
{
  uint64_t v3 = (void *)sub_1008705A4((uint64_t)a1, "CLWatchOrientationSettingsNotifier", a2);
  *uint64_t v3 = off_1022CDAA0;
  sub_100870650((uint64_t)v3);
  sub_100870AE0(a1);
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022CDC18);
  }
  long long v4 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Watch Orientation,Orientation Notifier Instantiated", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022CDC18);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLWatchOrientationSettingsNotifier::CLWatchOrientationSettingsNotifier(id<CLIntersiloUniverse>)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return a1;
}

void sub_10087058C(_Unwind_Exception *a1)
{
  sub_100870B68(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1008705A4(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1022CDC48;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_100870634(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100870650(uint64_t a1)
{
  char v17 = 0;
  int v2 = sub_1004BDE6C(@"invertUI", @"com.apple.nano", &v17);
  if (v17)
  {
    BOOL v3 = v2 == 0;
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022CDC18);
    }
    long long v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Watch Orientation,Crown orientation setting key is invalid, defaulting to crown on right (not inverted)", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022CDC18);
      }
      LOWORD(v18) = 0;
      unint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWatchOrientationSettingsNotifier::queryOrientationSettings()", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    BOOL v3 = 1;
  }
  *(_DWORD *)(a1 + 116) = v3;
  char v17 = 0;
  int v5 = sub_1004BDE6C(@"wornOnRightArm", @"com.apple.nano", &v17);
  if (v17)
  {
    BOOL v6 = v5 != 0;
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022CDC18);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Watch Orientation,Wrist orientation setting key is invalid, defaulting to left wrist", buf, 2u);
    }
    BOOL v8 = sub_10013D1A0(115, 0);
    BOOL v6 = 0;
    if (v8)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022CDC18);
      }
      LOWORD(v18) = 0;
      float v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWatchOrientationSettingsNotifier::queryOrientationSettings()", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
      BOOL v6 = 0;
    }
  }
  *(_DWORD *)(a1 + 112) = v6;
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022CDC18);
  }
  unint64_t v9 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *(_DWORD *)(a1 + 112);
    int v10 = *(_DWORD *)(a1 + 116);
    *(_DWORD *)long long buf = 67240448;
    int v23 = v10;
    __int16 v24 = 1026;
    int v25 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Watch Orientation,crown,%{public}d,wrist,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022CDC18);
    }
    int v13 = *(_DWORD *)(a1 + 112);
    int v12 = *(_DWORD *)(a1 + 116);
    int v18 = 67240448;
    int v19 = v12;
    __int16 v20 = 1026;
    int v21 = v13;
    BOOL v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWatchOrientationSettingsNotifier::queryOrientationSettings()", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
}

void sub_100870AE0(const void *a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_1008713CC, @"com.apple.nano.invertUIChangedNotification", 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_1008713CC, @"com.apple.nano.wristOrientationChangedNotification", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

uint64_t sub_100870B68(uint64_t a1)
{
  *(void *)a1 = off_1022CDC48;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_100870BEC()
{
}

void sub_100870C38()
{
}

uint64_t sub_100870C5C(unsigned char *a1)
{
  *(void *)a1 = off_1022CDAA0;
  sub_100870CF0(a1);

  return sub_100870B68((uint64_t)a1);
}

void sub_100870CB8(unsigned char *a1)
{
  sub_100870C5C(a1);

  operator delete();
}

void sub_100870CF0(unsigned char *a1)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022CDC18);
  }
  int v2 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Watch Orientation,Orientation Notifier is shutting down.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022CDC18);
    }
    BOOL v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLWatchOrientationSettingsNotifier::shutdown()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_100870E94(a1);
  a1[108] = 1;
}

void sub_100870E94(const void *a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, @"com.apple.nano.invertUIChangedNotification", 0);

  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, @"com.apple.nano.wristOrientationChangedNotification", 0);
}

void *sub_100870EF4@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_100870F70(void *a1, int *a2)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022CDC18);
  }
  long long v4 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    v12[0] = *a2;
    int v5 = v12[0];
    int v6 = sub_1001072EC((uint64_t)a1, v12, 1);
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v5;
    LOWORD(v16) = 1024;
    *(_DWORD *)((char *)&v16 + 2) = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Watch Orientation,Added client for %d, count %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022CDC18);
    }
    int v8 = *a2;
    int v11 = v8;
    int v9 = sub_1001072EC((uint64_t)a1, &v11, 1);
    v12[0] = 67109376;
    v12[1] = v8;
    __int16 v13 = 1024;
    int v14 = v9;
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLWatchOrientationSettingsNotifier::registerForNotificationInternal(const CLWatchOrientationSettingsNotifier_Type::Notification &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  *(void *)long long buf = a1[14];
  uint64_t v16 = 0;
  v12[0] = 0;
  (*(void (**)(void *, int *, uint8_t *, uint64_t, uint64_t, void))(*a1 + 152))(a1, v12, buf, 1, 0xFFFFFFFFLL, 0);
  return 1;
}

uint64_t sub_1008711C4(uint64_t a1, int *a2)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_1022CDC18);
  }
  long long v4 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    v12[0] = *a2;
    int v5 = v12[0];
    int v6 = sub_1001072EC(a1, v12, 1);
    *(_DWORD *)long long buf = 67109376;
    int v16 = v5;
    __int16 v17 = 1024;
    int v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Watch Orientation,Removed client for %d, count %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022CDC18);
    }
    int v8 = *a2;
    int v11 = v8;
    int v9 = sub_1001072EC(a1, &v11, 1);
    v12[0] = 67109376;
    v12[1] = v8;
    __int16 v13 = 1024;
    int v14 = v9;
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLWatchOrientationSettingsNotifier::unregisterForNotificationInternal(const CLWatchOrientationSettingsNotifier_Type::Notification &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  return 1;
}

void sub_1008713CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CDBF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    int v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWatchOrientationSettingsNotifier::onOrientationSettingsChanged", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CDBF8);
    }
    int v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      int v19 = "";
      __int16 v20 = 2082;
      int v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWatchOrientationSettingsNotifier::onOrientationSettingsChanged\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  _OWORD v13[2] = sub_10087357C;
  void v13[3] = &unk_1022ACFE0;
  void v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_1008715E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100871608()
{
}

void sub_1008716C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_100871700(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_1022CDD98;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    id v12 = a3;
  }
  else {
    id v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:objc_msgSend(a4, "silo")];
  return a1;
}

void sub_1008717E4(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        int v9 = (uint64_t *)v4;
      }
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)long long buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022CDBF8);
      }
      int v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        int v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v11 = (void *)*v11;
        }
        *(_DWORD *)long long buf = 136446466;
        int v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022CDBF8);
        }
        id v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          id v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        char v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_100871A74(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_100871B28(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_100871B70(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_100871BB8(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_100871C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_10241DF68);
}

uint64_t sub_100871C2C(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)uint64_t v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          __int16 v24 = (uint64_t *)v18;
        }
        else {
          __int16 v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          uint64_t v29 = (uint64_t *)v25;
        }
        else {
          uint64_t v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)long long buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        memset(buf, 0, 32);
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, uint8_t *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_100874190();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_10241DF69;
        int v39 = v17;
        *(void *)long long buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)long long buf = &v39;
        int v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        uint64_t v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)long long buf = &v39;
        int v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)long long buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)long long buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CDBF8);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    char v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      char v15 = (void *)*v15;
    }
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CDBF8);
    }
    uint64_t v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v37 = (void *)*v37;
    }
    *(_DWORD *)uint64_t v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    uint64_t v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_1008720D4(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CDBF8);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)long long buf = 136446466;
      __int16 v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022CDBF8);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_100872358(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022CDBF8);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)long long buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022CDBF8);
                }
                uint64_t v29 = a1 + 8;
                if (a1[31] < 0) {
                  uint64_t v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                uint64_t v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                int v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_10087272C(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  int v11 = *(_OWORD **)(v7 + 64);
  if (!v11) {
    return 0;
  }
  long long v12 = v11[1];
  *a3 = *v11;
  a3[1] = v12;
  return 1;
}

uint64_t sub_10087278C(uint64_t a1, int *a2, _OWORD *a3)
{
  int v6 = (char *)operator new(0x38uLL);
  long long v7 = a3[1];
  *(_OWORD *)(v6 + 24) = *a3;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = off_1022CDD28;
  *(_OWORD *)(v6 + 40) = v7;
  int v11 = *a2;
  long long v12 = &v11;
  int v8 = sub_10044715C((uint64_t **)(a1 + 56), &v11, (uint64_t)&unk_101D0B290, &v12);
  BOOL v9 = (std::__shared_weak_count *)v8[9];
  v8[8] = (uint64_t *)(v6 + 24);
  v8[9] = (uint64_t *)v6;
  if (v9) {
    sub_1000DB0A0(v9);
  }
  return 1;
}

void sub_100872844(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100872858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_1008728B0(uint64_t a1, unsigned int *a2, _OWORD *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CDBF8);
  }
  BOOL v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    BOOL v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      BOOL v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)long long buf = 68289794;
    int v23 = 0;
    __int16 v24 = 2082;
    *(void *)__int16 v25 = "";
    *(_WORD *)&v25[8] = 2082;
    *(void *)&v25[10] = "activity";
    __int16 v26 = 2082;
    int v27 = v10;
    __int16 v28 = 2050;
    uint64_t v29 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    char v30 = v31;
    memset(v31, 0, sizeof(v31));
    int v32 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v30);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v29) {
      sub_1000DB0A0(v29);
    }
    sub_1000F5BB0((uint64_t)&v24, *(void **)&v25[6]);
    if (v32) {
      sub_1000DB0A0(v32);
    }
    sub_1000F5BB0((uint64_t)&v30, v31[0]);
  }
  if (a4)
  {
    BOOL v18 = (char *)operator new(0x38uLL);
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = 0;
    *(void *)BOOL v18 = off_1022CDD28;
    long long v19 = a3[1];
    *(_OWORD *)(v18 + 24) = *a3;
    *(_OWORD *)(v18 + 40) = v19;
    uint64_t v20 = (std::__shared_weak_count *)v14[9];
    v14[8] = (uint64_t *)(v18 + 24);
    v14[9] = (uint64_t *)v18;
    if (!v20) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v20 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v20) {
LABEL_27:
  }
    sub_1000DB0A0(v20);
LABEL_28:
  if (v14[7]) {
    sub_1008735F8();
  }
  os_activity_scope_leave(&state);
}

void sub_100872E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_100872EE4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CDBF8);
    }
    int v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)long long buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022CDBF8);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData>::listClients() [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CDBF8);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)long long buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022CDBF8);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData>::listClients() [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    int v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        BOOL v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022CDBF8);
            }
            BOOL v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)long long buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022CDBF8);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData>::listClients() [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                BOOL v9 = v15;
              }
              while (!v16);
            }
            BOOL v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            long long v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            long long v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            int v8 = v19;
          }
          while (!v16);
        }
        int v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_100873494(uint64_t a1)
{
  sub_100874120(a1);

  operator delete();
}

id sub_1008734CC(uint64_t a1, int a2, void *a3)
{
  id result = sub_100873C28(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_10087351C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10087354C(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_10087357C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  sub_100870650((uint64_t)v1);
  v4[0] = v1[14];
  memset(&v4[1], 0, 24);
  int v3 = 0;
  return (*(uint64_t (**)(void *, int *, void *, uint64_t, uint64_t, void))(*v1 + 152))(v1, &v3, v4, 1, 0xFFFFFFFFLL, 0);
}

void sub_1008735F8()
{
}

void sub_1008736A4(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      BOOL v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          BOOL v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v49 = v9;
        id v13 = sub_100873C28(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            long long v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                long long v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              int v48 = v19;
              sub_100873A94(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              uint64_t v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  uint64_t v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              int v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022CDBF8);
              }
              __int16 v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)long long buf = 136446466;
                int v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022CDBF8);
                }
                uint64_t v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  uint64_t v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                int v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                int v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_100873A94(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_100873C28(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    id result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4 v13];
    }
  }
  return result;
}

void sub_100873B8C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022CDD28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100873BAC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022CDD28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100873C08(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_100873C28(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_100873CC4(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_100873E80(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_100873CC4(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_100874068((uint64_t)&v8, a1);
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1022CDD68);
    }
    uint64_t v3 = qword_102418F98;
    if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)long long buf = 134218498;
    id v10 = v2;
    __int16 v11 = 2048;
    uint64_t v12 = 0;
    __int16 v13 = 2080;
    unint64_t v14 = 0x8000000101D50DDALL & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v4 = v3;
    os_log_type_t v5 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1022CDD68);
    }
    uint64_t v7 = qword_102418F98;
    if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT)) {
      return 0;
    }
    *(_DWORD *)long long buf = 134218498;
    id v10 = v2;
    __int16 v11 = 2048;
    uint64_t v12 = 0;
    __int16 v13 = 2080;
    unint64_t v14 = 0x8000000101D50DDALL & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v4 = v7;
    os_log_type_t v5 = OS_LOG_TYPE_FAULT;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  return 0;
}

id sub_100873E80(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022CDD68);
      }
      uint64_t v3 = qword_102418F98;
      if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      int v8 = 134218498;
      id v9 = v2;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      __int16 v12 = 2080;
      unint64_t v13 = 0x8000000101D50DDALL & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v4 = v3;
      os_log_type_t v5 = OS_LOG_TYPE_ERROR;
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022CDD68);
      }
      uint64_t v7 = qword_102418F98;
      if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT)) {
        return 0;
      }
      int v8 = 134218498;
      id v9 = v2;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      __int16 v12 = 2080;
      unint64_t v13 = 0x8000000101D50DDALL & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v4 = v7;
      os_log_type_t v5 = OS_LOG_TYPE_FAULT;
    }
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", (uint8_t *)&v8, 0x20u);
    return 0;
  }

  return [a1 cppObjectPtr];
}

id sub_100874068(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_102392B58))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)32) {
      sub_101A72000();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes")]];
  }

  return [a2 cppObjectPtr];
}

void sub_1008740F0(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_100874120(uint64_t a1)
{
  *(void *)a1 = off_1022CDD98;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_100874190()
{
}

uint64_t sub_10087423C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

uint64_t sub_10087425C(uint64_t a1)
{
  *(void *)a1 = off_1022CDDC0;
  *(unsigned char *)(a1 + 13) = 1;
  id v2 = (BOOL *)(a1 + 13);
  *(_DWORD *)(a1 + 8) = 1065353216;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a1 + 16) = _D0;
  int v8 = (float *)(a1 + 16);
  sub_1008A0670(a1 + 24, 2065, 0);
  uint64_t v9 = sub_1000D3E78();
  sub_10006B564(v9, buf);
  __int16 v10 = (unsigned char *)(a1 + 12);
  char v11 = sub_1000D2988(*(uint64_t *)buf, "EnableStepperLoadCal", (BOOL *)(a1 + 12));
  if (v23) {
    sub_1000DB0A0(v23);
  }
  if ((v11 & 1) == 0) {
    *__int16 v10 = 0;
  }
  uint64_t v12 = sub_1000D3E78();
  sub_10006B564(v12, buf);
  sub_1000D2988(*(uint64_t *)buf, "EnableStepperHRModel", v2);
  if (v23) {
    sub_1000DB0A0(v23);
  }
  uint64_t v13 = sub_1000D3E78();
  sub_10006B564(v13, buf);
  sub_1004D11B0(*(uint64_t *)buf, "StairModelMetsScale", v8);
  if (v23) {
    sub_1000DB0A0(v23);
  }
  uint64_t v14 = sub_1000D3E78();
  sub_10006B564(v14, buf);
  sub_1004D11B0(*(uint64_t *)buf, "StepperVO2MaxScalingFactor", (float *)(a1 + 20));
  if (v23) {
    sub_1000DB0A0(v23);
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022CDE00);
  }
  int v15 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    int v16 = *v10;
    BOOL v17 = *v2;
    double v18 = *v8;
    double v19 = *(float *)(a1 + 20);
    *(_DWORD *)long long buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = v16;
    LOWORD(v23) = 1024;
    *(_DWORD *)((char *)&v23 + 2) = v17;
    HIWORD(v23) = 2048;
    double v24 = v18;
    __int16 v25 = 2048;
    double v26 = v19;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Stair Climbing, load calibration, %d, HR mode, %d, mets scaling factor, %f, VO2max scaling factor, %f", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022CDE00);
    }
    BOOL v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLNatalieStairClimbingModel::CLNatalieStairClimbingModel()", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
  return a1;
}

void sub_1008745A8(_Unwind_Exception *a1)
{
  sub_1008745F0(v1);
  _Unwind_Resume(a1);
}

void *sub_1008745F0(void *a1)
{
  id v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[12];
  if (v3)
  {
    a1[13] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[9];
  if (v4)
  {
    a1[10] = v4;
    operator delete(v4);
  }
  os_log_type_t v5 = (std::__shared_weak_count *)a1[8];
  if (v5) {
    sub_1000DB0A0(v5);
  }
  int v6 = (void *)a1[3];
  if (v6)
  {
    a1[4] = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_100874664(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 48) + 48))(*(void *)(a3 + 48));
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void, unsigned char *, double))(**(void **)(a3 + 48) + 24))(*(void *)(a3 + 48), v6, a1);
    if (v6[208]) {
      return sub_10046B90C(*(void *)(a3 + 8), *(double *)(*(void *)(a3 + 8) + 104), *(double *)(*(void *)(a3 + 8) + 112));
    }
  }
  return result;
}

uint64_t sub_100874734(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 48))();
}

void sub_10087475C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v6 = *(float *)(a2 + 1368);
  float v7 = *(float *)(a2 + 1372);
  float v8 = *(float *)(a2 + 1376);
  float v9 = *(float *)(a2 + 1380);
  float v10 = *(float *)(a2 + 304);
  double v11 = *(double *)(a2 + 128);
  unsigned __int8 v40 = 0;
  float v12 = (float)(fmaxf(v10, 0.0) * 4.5665) + 2.9705;
  if (v10 <= 0.0) {
    float v13 = 2.1;
  }
  else {
    float v13 = v12;
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022CDE00);
  }
  uint64_t v14 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    double v15 = *(double *)(a2 + 600);
    *(_DWORD *)long long buf = 134218752;
    double v54 = v11;
    __int16 v55 = 2048;
    double v56 = v10;
    __int16 v57 = 2048;
    double v58 = v13;
    __int16 v59 = 2048;
    double v60 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Stair Climbing, Work Rate Model, timestamp, %f, step frequency, %f, WRMETS, %f, sinceLastGood, %f", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022CDE00);
    }
    double v32 = *(double *)(a2 + 600);
    int v41 = 134218752;
    double v42 = v11;
    __int16 v43 = 2048;
    double v44 = v10;
    __int16 v45 = 2048;
    double v46 = v13;
    __int16 v47 = 2048;
    double v48 = v32;
    uint64_t v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieStairClimbingModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v33);
    if (v33 != (char *)buf) {
      free(v33);
    }
  }
  if (*(unsigned char *)(a1 + 13) && sub_1001860C8(a2) && *(double *)(a2 + 600) < *(double *)a2)
  {
    float v16 = *(double *)(a2 + 560);
    double v17 = v16;
    double v18 = v8;
    double v19 = v9;
    float v20 = (v19 - v16) / (v19 - v18);
    float v21 = v6 * sub_101141BD8(v20, v7);
    float v22 = *(float *)(a1 + 20);
    if (qword_102418FF0 != -1)
    {
      float v39 = *(float *)(a1 + 20);
      dispatch_once(&qword_102418FF0, &stru_1022CDE00);
      float v22 = v39;
    }
    float v23 = v21 * v22;
    double v24 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134219264;
      double v54 = v11;
      __int16 v55 = 2048;
      double v56 = v17;
      __int16 v57 = 2048;
      double v58 = v19;
      __int16 v59 = 2048;
      double v60 = v18;
      __int16 v61 = 2048;
      double v62 = v6;
      __int16 v63 = 2048;
      double v64 = v23;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Stair Climbing, HR Rate Model, timestamp, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, METS, %f", buf, 0x3Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022CDE00);
      }
      int v41 = 134219264;
      double v42 = v11;
      __int16 v43 = 2048;
      double v44 = v17;
      __int16 v45 = 2048;
      double v46 = v19;
      __int16 v47 = 2048;
      double v48 = v18;
      __int16 v49 = 2048;
      double v50 = v6;
      __int16 v51 = 2048;
      double v52 = v23;
      uint64_t v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieStairClimbingModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v36);
      if (v36 != (char *)buf) {
        free(v36);
      }
    }
    if (*(unsigned char *)(a1 + 12))
    {
      sub_1008A0674((char *)(a1 + 24), a2, &v40, v11, v23, v13);
      *(_DWORD *)(a1 + 8) = v25;
    }
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022CDE00);
    }
    double v26 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      double v27 = *(float *)(a1 + 8);
      *(_DWORD *)long long buf = 134219008;
      double v54 = v11;
      __int16 v55 = 2048;
      double v56 = v23;
      __int16 v57 = 2048;
      double v58 = v13;
      __int16 v59 = 2048;
      double v60 = v27;
      __int16 v61 = 1024;
      LODWORD(v62) = v40;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "Stair Climbing, timestamp, %f, HRMETs, %f, WRMETs, %f, calibrationValue, %f, loadCalStatus, %d", buf, 0x30u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022CDE00);
      }
      double v37 = *(float *)(a1 + 8);
      int v41 = 134219008;
      double v42 = v11;
      __int16 v43 = 2048;
      double v44 = v23;
      __int16 v45 = 2048;
      double v46 = v13;
      __int16 v47 = 2048;
      double v48 = v37;
      __int16 v49 = 1024;
      LODWORD(v50) = v40;
      BOOL v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieStairClimbingModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v38);
      if (v38 != (char *)buf) {
        free(v38);
      }
    }
    int v28 = 1;
    float v29 = v23;
  }
  else
  {
    int v28 = 0;
    float v23 = v13 * *(float *)(a1 + 8);
    float v29 = 0.0;
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022CDE00);
  }
  int v30 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    double v31 = *(float *)(a1 + 16);
    *(_DWORD *)long long buf = 134218496;
    double v54 = v11;
    __int16 v55 = 2048;
    double v56 = v23;
    __int16 v57 = 2048;
    double v58 = v31;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "Stair Climbing, timestamp, %f, finalMETS, %f, fMetsScaling, %f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022CDE00);
    }
    double v34 = *(float *)(a1 + 16);
    int v41 = 134218496;
    double v42 = v11;
    __int16 v43 = 2048;
    double v44 = v23;
    __int16 v45 = 2048;
    double v46 = v34;
    uint64_t v35 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieStairClimbingModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v35);
    if (v35 != (char *)buf) {
      free(v35);
    }
  }
  *(float *)a3 = v29;
  *(float *)(a3 + 4) = v13;
  *(_DWORD *)(a3 + 8) = 0;
  *(float *)(a3 + 12) = v13;
  *(_DWORD *)(a3 + 16) = 0;
  *(float *)(a3 + 20) = v23 * *(float *)(a1 + 16);
  *(_DWORD *)(a3 + 24) = v28;
  *(_DWORD *)(a3 + 28) = 0;
  *(void *)(a3 + 32) = 0xA00000003;
}

void *sub_100874F84(void *a1)
{
  *a1 = off_1022CDDC0;
  id v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  os_log_type_t v5 = (std::__shared_weak_count *)a1[11];
  if (v5) {
    sub_1000DB0A0(v5);
  }
  float v6 = (void *)a1[6];
  if (v6)
  {
    a1[7] = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_100875010(void *a1)
{
  *a1 = off_1022CDDC0;
  id v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  os_log_type_t v5 = (std::__shared_weak_count *)a1[11];
  if (v5) {
    sub_1000DB0A0(v5);
  }
  float v6 = (void *)a1[6];
  if (v6)
  {
    a1[7] = v6;
    operator delete(v6);
  }

  operator delete();
}

void sub_1008750BC(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_1008750EC(int a1)
{
  if (a1) {
    operator new();
  }
  operator new();
}

void sub_1008751C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  operator delete();
}

void *sub_100875214(void *result, uint64_t a2)
{
  void *result = off_1022CDE30;
  result[1] = a2;
  return result;
}

void sub_100875234(uint64_t a1, uint64_t a2)
{
  id v3 = [[[*(id *)(a1 + 8) vendor] proxyForService:@"CLClientManager"];
  id v4 = [v3 syncgetNonSystemLocationClientKey];
  if (v4)
  {
    sub_100134750(buf, (char *)[v4 UTF8String]);
    os_log_type_t v5 = (void **)(a2 + 48);
    if (*(char *)(a2 + 71) < 0) {
      operator delete(*v5);
    }
    *(_OWORD *)os_log_type_t v5 = *(_OWORD *)buf;
    *(void *)(a2 + 64) = v18;
  }
  else
  {
    std::string::assign((std::string *)(a2 + 48), "");
  }
  id v6 = [v3 syncgetLocationClientKeys];
  if ([v6 count])
  {
    id v14 = 0;
    float v7 = +[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", [v6 allObjects], 1, &v14);
    if (v14)
    {
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022CDE88);
      }
      float v8 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = [[objc_msgSend(v14, "description") UTF8String];
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#warning: error serializing json data, error, %s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022CDE88);
        }
        id v10 = [[objc_msgSend(v14, "description") UTF8String];
        int v15 = 136315138;
        id v16 = v10;
        double v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLPolicyTripExternal::applyBundleId(CLTracksHarvestDataType::HarvestData &)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
    }
    else
    {
      id v12 = [objc_alloc((Class)NSString) initWithData:v7 encoding:4];
      float v13 = v12;
      if (v12)
      {
        std::string::assign((std::string *)(a2 + 72), (const std::string::value_type *)[v12 UTF8String]);
      }
    }
  }
  else
  {
    std::string::assign((std::string *)(a2 + 72), "");
  }
}

uint64_t sub_1008754F4()
{
  return 0;
}

__n128 sub_1008754FC@<Q0>(uint64_t a1@<X8>)
{
  CLMotionActivity::init(&v6);
  long long v2 = v9;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v2;
  *(void *)(a1 + 128) = v10;
  long long v3 = *(_OWORD *)&v6.isVehicleConnected;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v6.isStanding;
  *(_OWORD *)(a1 + 48) = v3;
  long long v4 = v7;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)&v6.vehicleType;
  *(_OWORD *)(a1 + 80) = v4;
  __n128 result = *(__n128 *)&v6.mountedConfidence;
  *(_OWORD *)a1 = *(_OWORD *)&v6.type;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

id sub_100875564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = [objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor", 0, 0, 0), "proxyForService:", @"CLTelephonyService") syncgetServingCells:&v5 addNeighborCells:a3];
  CLMotionActivity v6 = (void **)&v5;
  sub_1000FA7C8(&v6);
  return v3;
}

void sub_1008755CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_1000FA7C8(&a12);
  _Unwind_Resume(a1);
}

void sub_1008755E8(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

id sub_100876C40(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022CDEE8);
  }
  long long v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#diagnosticManager Interruption handler called", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022CDEE8);
    }
    long long v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLDiagnosticManager listener:shouldAcceptNewConnection:]_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }

  return [*(id *)(a1 + 32) setConnection:0];
}

id sub_100876DEC(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022CDEE8);
  }
  long long v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#diagnosticManager Invalidation handler called", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022CDEE8);
    }
    long long v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLDiagnosticManager listener:shouldAcceptNewConnection:]_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }

  return [*(id *)(a1 + 32) setConnection:0];
}

void sub_10087732C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10087739C(id a1)
{
  sub_100134750(v3, "mobile");
  sub_10053B3A0((uint64_t *)v3, __p);
  if (v6 >= 0) {
    uint64_t v1 = __p;
  }
  else {
    uint64_t v1 = (void **)__p[0];
  }
  long long v2 = +[NSString stringWithUTF8String:v1];
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  qword_10247E618 = (uint64_t)[objc_alloc((Class)NSURL) initWithString:-[NSString stringByAppendingPathComponent:](v2, "stringByAppendingPathComponent:", [&off_102397B30 componentsJoinedByString:@"/"])];
}

void sub_100877468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_100877510(id a1)
{
  uint64_t v1 = objc_opt_new();
  qword_10247E628 = (uint64_t)v1;

  [v1 setDateFormat:@"yyyy-MM-dd_HH-mm-ss"];
}

void sub_1008775C0(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1008775F0(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

uint64_t *sub_100877620(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  *((_DWORD *)a1 + 2) = 0;
  *(uint64_t *)((char *)a1 + 12) = 0x500000000;
  a1[5] = 0x400000000;
  if (!a2 || *(unsigned __int8 *)(a2 + 16) >= 5u)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CDF48);
    }
    char v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      uint64_t v5 = *a1;
      int v6 = *(unsigned __int8 *)(*a1 + 16);
      *(_DWORD *)long long buf = 134218496;
      uint64_t v9 = v5;
      __int16 v10 = 1024;
      int v11 = v6;
      __int16 v12 = 1024;
      int v13 = 4;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Assertion failed: (fIirFilterParams != __null) && (fIirFilterParams->filterOrder <= kMaxFilterOrder), file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMIirFilter.cpp, line 17,IirFilterParams,%p,filterOrder,%d,maxFilterOrder,%d.", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022CDF48);
      }
      long long v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CMIirFilter::CMIirFilter(const CMIirFilterParams *)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  *((_DWORD *)a1 + 3) = 0;
  *((_DWORD *)a1 + 10) = 0;
  return a1;
}

uint64_t sub_10087784C(uint64_t result)
{
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

unsigned __int16 *sub_10087785C(unsigned __int16 *result, float a2)
{
  long long v2 = result;
  char v4 = result + 6;
  uint64_t v3 = result[6];
  uint64_t v5 = result[7];
  unint64_t v6 = *((unsigned int *)result + 4);
  if (v3 + v5 >= v6) {
    uint64_t v7 = *((unsigned int *)result + 4);
  }
  else {
    uint64_t v7 = 0;
  }
  *(float *)&v4[2 * (v3 + v5 - v7) + 4] = a2;
  if (v6 <= v5)
  {
    unint64_t v8 = v3 + 1;
    if (v8 < v6) {
      LOWORD(v6) = 0;
    }
    *char v4 = v8 - v6;
  }
  else
  {
    result[7] = v5 + 1;
    uint64_t v5 = (unsigned __int16)(v5 + 1);
  }
  unsigned int v9 = *(unsigned __int8 *)(*(void *)result + 16);
  uint64_t v10 = result[21];
  if (v10 >= v9)
  {
    unsigned __int8 v14 = 0;
    *((_DWORD *)result + 2) = 0;
    do
    {
      uint64_t v15 = v14;
      int v16 = v14;
      float v17 = *(float *)(**(void **)v2 + 4 * v14);
      float v18 = *((float *)v2 + 2) + (float)(v17 * *(float *)sub_1004182C4(v4, v5 + ~(unint64_t)v14));
      *((float *)v2 + 2) = v18;
      if (v16)
      {
        float v19 = *(float *)(*(void *)(*(void *)v2 + 8) + 4 * v15);
        float v18 = *((float *)v2 + 2) - (float)(v19 * *(float *)sub_1004182C4(v2 + 20, v10 - v15));
        *((float *)v2 + 2) = v18;
      }
      unsigned __int8 v14 = v15 + 1;
    }
    while (v9 >= (v15 + 1));
    *((float *)v2 + 2) = v18 / **(float **)(*(void *)v2 + 8);
    return sub_100877A00(v2 + 20, (_DWORD *)v2 + 2);
  }
  else
  {
    uint64_t v11 = result[20];
    unint64_t v12 = *((unsigned int *)result + 11);
    if (v11 + v10 >= v12) {
      uint64_t v13 = *((unsigned int *)result + 11);
    }
    else {
      uint64_t v13 = 0;
    }
    *(float *)&result[2 * (v11 + v10 - v13) + 24] = a2;
    if (v12 <= v10)
    {
      unint64_t v20 = v11 + 1;
      if (v20 < v12) {
        LOWORD(v12) = 0;
      }
      result[20] = v20 - v12;
    }
    else
    {
      result[21] = v10 + 1;
    }
    *((float *)result + 2) = a2;
  }
  return result;
}

unsigned __int16 *sub_100877A00(unsigned __int16 *result, _DWORD *a2)
{
  uint64_t v2 = result[1];
  unint64_t v3 = *((unsigned int *)result + 1);
  uint64_t v4 = *result;
  if (v4 + v2 >= v3) {
    uint64_t v5 = *((unsigned int *)result + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  *(_DWORD *)&result[2 * (v4 + v2 - v5) + 4] = *a2;
  if (v3 <= v2)
  {
    if (v4 + 1 < v3) {
      LOWORD(v3) = 0;
    }
    void *result = v4 + 1 - v3;
  }
  else
  {
    result[1] = v2 + 1;
  }
  return result;
}

void sub_100877A54(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100877A84(void *a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_10247E680, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(qword_10247E680))
  {
    __cxa_atexit((void (*)(void *))sub_100877B6C, &xmmword_10247E670, (void *)&_mh_execute_header);
    __cxa_guard_release(qword_10247E680);
  }
  if (!(void)xmmword_10247E670 || !sub_10064E538(xmmword_10247E670))
  {
    sub_10087B158((unsigned __int8 *)&qword_10247E640, &v5);
    long long v2 = v5;
    long long v5 = 0uLL;
    unint64_t v3 = (std::__shared_weak_count *)*((void *)&xmmword_10247E670 + 1);
    xmmword_10247E670 = v2;
    if (v3)
    {
      sub_1000DB0A0(v3);
      if (*((void *)&v5 + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v5 + 1));
      }
    }
  }
  uint64_t v4 = *((void *)&xmmword_10247E670 + 1);
  *a1 = xmmword_10247E670;
  a1[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
}

uint64_t sub_100877B6C(uint64_t a1)
{
  long long v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

void sub_100877B9C(void *a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247E6A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247E6A0))
  {
    __cxa_atexit((void (*)(void *))sub_100877B6C, &xmmword_10247E690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10247E6A0);
  }
  if (!(void)xmmword_10247E690 || !sub_10064E538(xmmword_10247E690))
  {
    sub_10087B158((unsigned __int8 *)&qword_10247E658, &v5);
    long long v2 = v5;
    long long v5 = 0uLL;
    unint64_t v3 = (std::__shared_weak_count *)*((void *)&xmmword_10247E690 + 1);
    xmmword_10247E690 = v2;
    if (v3)
    {
      sub_1000DB0A0(v3);
      if (*((void *)&v5 + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v5 + 1));
      }
    }
  }
  uint64_t v4 = *((void *)&xmmword_10247E690 + 1);
  *a1 = xmmword_10247E690;
  a1[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
}

uint64_t sub_100877C84(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v4 = a2;
  if ((char)a2[23] < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)a2;
    uint64_t v23 = *((void *)a2 + 2);
  }
  float v17 = (void *)(&_mh_execute_header + 2);
  __int16 v18 = 256;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C(&__p, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long __p = *a3;
    uint64_t v20 = *((void *)a3 + 2);
  }
  uint64_t v21 = 0;
  sub_1010FCFC8(a1, (long long *)__dst, (uint64_t *)&v17, -1.0);
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(__dst[0]);
  }
  *(void *)a1 = off_1022CDF78;
  sub_100134750(&v17, "ff:ff:ff:ff:ff:ff");
  *(void *)(a1 + 256) = sub_100B38F04((uint64_t)&v17);
  if (SBYTE7(__p) < 0) {
    operator delete(v17);
  }
  sub_101171D90(a1 + 264);
  sub_100B57D9C(a1 + 304);
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  sub_100134750((void *)(a1 + 376), "UnknownHarvest");
  uint64_t v6 = v4[23];
  size_t v7 = *((void *)v4 + 1);
  if ((v6 & 0x80u) == 0) {
    uint64_t v8 = v4[23];
  }
  else {
    uint64_t v8 = *((void *)v4 + 1);
  }
  uint64_t v9 = qword_10247E648;
  if (byte_10247E657 >= 0) {
    uint64_t v9 = byte_10247E657;
  }
  if (v8 != v9) {
    goto LABEL_29;
  }
  if (byte_10247E657 >= 0) {
    uint64_t v10 = &qword_10247E640;
  }
  else {
    uint64_t v10 = (uint64_t *)qword_10247E640;
  }
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v4, v10, *((void *)v4 + 1))) {
      goto LABEL_29;
    }
LABEL_41:
    uint64_t v11 = "GpsHarvest";
LABEL_44:
    std::string::assign((std::string *)(a1 + 376), v11);
    goto LABEL_45;
  }
  if (!v4[23]) {
    goto LABEL_41;
  }
  uint64_t v11 = "GpsHarvest";
  unint64_t v12 = v4;
  uint64_t v13 = v4[23];
  while (*v12 == *(unsigned __int8 *)v10)
  {
    ++v12;
    uint64_t v10 = (uint64_t *)((char *)v10 + 1);
    if (!--v13) {
      goto LABEL_44;
    }
  }
LABEL_29:
  uint64_t v14 = qword_10247E660;
  if (byte_10247E66F >= 0) {
    uint64_t v14 = byte_10247E66F;
  }
  if (v8 != v14) {
    goto LABEL_45;
  }
  if (byte_10247E66F >= 0) {
    uint64_t v15 = &qword_10247E658;
  }
  else {
    uint64_t v15 = (uint64_t *)qword_10247E658;
  }
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v4, v15, v7)) {
      goto LABEL_45;
    }
    goto LABEL_43;
  }
  if (!v6)
  {
LABEL_43:
    uint64_t v11 = "WifiHarvest";
    goto LABEL_44;
  }
  uint64_t v11 = "WifiHarvest";
  while (*v4 == *(unsigned __int8 *)v15)
  {
    ++v4;
    uint64_t v15 = (uint64_t *)((char *)v15 + 1);
    if (!--v6) {
      goto LABEL_44;
    }
  }
LABEL_45:
  sub_100B57DD0(a1 + 304, (const std::string *)(a1 + 376));
  return a1;
}

void sub_100877F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100877FB4(uint64_t a1)
{
  *(void *)a1 = off_102311890;
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }

  return sub_10064DF48(a1);
}

void *sub_100878014@<X0>(long long *a1@<X0>, void *a2@<X8>)
{
  return sub_10087B338((unsigned __int8 *)&qword_10247E640, a1, a2);
}

void *sub_100878044@<X0>(long long *a1@<X0>, void *a2@<X8>)
{
  return sub_10087B338((unsigned __int8 *)&qword_10247E658, a1, a2);
}

uint64_t sub_100878074(uint64_t a1)
{
  sub_1010FF158(a1, (uint64_t)v41);
  long long v2 = sub_1014122A8();
  unint64_t v3 = v42;
  if (v42)
  {
    int v30 = *((_DWORD *)v2 + 2);
    do
    {
      uint64_t v4 = v3[3];
      unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3[4] - v4) >> 6);
      BOOL v6 = v5 > v30;
      unint64_t v7 = v5 - v30;
      if (v6)
      {
        uint64_t v8 = v4 + 192 * v7;
        long long v9 = *(_OWORD *)(v8 + 24);
        long long v33 = *(_OWORD *)(v8 + 8);
        long long v34 = v9;
        long long v10 = *(_OWORD *)(v8 + 40);
        long long v11 = *(_OWORD *)(v8 + 56);
        long long v12 = *(_OWORD *)(v8 + 88);
        *(_OWORD *)double v37 = *(_OWORD *)(v8 + 72);
        *(_OWORD *)&v37[16] = v12;
        long long v35 = v10;
        long long v36 = v11;
        long long v13 = *(_OWORD *)(v8 + 104);
        long long v14 = *(_OWORD *)(v8 + 120);
        long long v15 = *(_OWORD *)(v8 + 136);
        *(_OWORD *)((char *)v40 + 12) = *(_OWORD *)(v8 + 148);
        long long v39 = v14;
        v40[0] = v15;
        long long v38 = v13;
        double Current = CFAbsoluteTimeGetCurrent();
        double v17 = *(double *)&v37[12];
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_1022CDFA8);
        }
        double v18 = Current - v17;
        float v19 = off_1024195E8;
        if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
        {
          std::operator+<char>();
          int v20 = SHIBYTE(v46);
          uint64_t v21 = *(unsigned char **)v43;
          sub_100B39278(&__p);
          float v22 = v43;
          if (v20 < 0) {
            float v22 = v21;
          }
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)long long buf = 136315906;
          __int16 v51 = v22;
          __int16 v52 = 2048;
          double v53 = v18;
          __int16 v54 = 2080;
          __int16 v55 = p_p;
          __int16 v56 = 1024;
          int v57 = v30;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "%s, deleting samples older than %.1f(s) for mac %s to keep maximum %d samples", buf, 0x26u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v46) < 0) {
            operator delete(*(void **)v43);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024195E0 != -1) {
            dispatch_once(&qword_1024195E0, &stru_1022CDFA8);
          }
          std::operator+<char>();
          int v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          std::string::size_type v25 = __p.__r_.__value_.__r.__words[0];
          sub_100B39278(&v31);
          double v26 = &__p;
          if (v24 < 0) {
            double v26 = (std::string *)v25;
          }
          double v27 = &v31;
          if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            double v27 = (std::string *)v31.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)__int16 v43 = 136315906;
          *(void *)&v43[4] = v26;
          __int16 v44 = 2048;
          double v45 = v18;
          __int16 v46 = 2080;
          __int16 v47 = v27;
          __int16 v48 = 1024;
          int v49 = v30;
          int v28 = (char *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v31.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiAssociatedApHarvestDatabase::deleteOldSamplesBeyondThresholdForEachAssociatedAp()", "%s\n", v28);
          if (v28 != (char *)buf) {
            free(v28);
          }
        }
        sub_1010FDC14(a1);
      }
      unint64_t v3 = (void *)*v3;
    }
    while (v3);
  }
  return sub_10087B3F8((uint64_t)v41);
}

void sub_100878450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
}

uint64_t sub_1008784AC(uint64_t a1)
{
  sub_1010FF158(a1, (uint64_t)v28);
  unint64_t v2 = *((int *)sub_1014122A8() + 3);
  if (v28[3] > v2)
  {
    sub_10087B480((uint64_t)v24, (uint64_t)v28);
    if (v26)
    {
      unint64_t v3 = v25;
      uint64_t v4 = (void *)*v25;
      if (*v25)
      {
        do
        {
          if (*(double *)(v4[4] - 108) < *(double *)(v3[4] - 108)) {
            unint64_t v3 = v4;
          }
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      uint64_t v5 = v3[2];
    }
    else
    {
      sub_100134750(__p, "ff:ff:ff:ff:ff:ff");
      uint64_t v5 = sub_100B38F04((uint64_t)__p);
      if (SHIBYTE(v41) < 0) {
        operator delete(*(void **)__p);
      }
    }
    uint64_t v27 = v5;
    sub_10087B3F8((uint64_t)v24);
    BOOL v6 = sub_100878920(v28, &v27);
    double Current = CFAbsoluteTimeGetCurrent();
    uint64_t v8 = sub_10087B05C(v28, &v27);
    if (!v8) {
      sub_10000EDDC("unordered_map::at: key not found");
    }
    double v9 = *(double *)(v8[4] - 108);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022CDFA8);
    }
    double v10 = Current - v9;
    long long v11 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
    {
      std::operator+<char>();
      int v12 = SHIBYTE(v32);
      long long v13 = *(unsigned char **)v29;
      sub_100B39278(&v23);
      long long v14 = v29;
      if (v12 < 0) {
        long long v14 = v13;
      }
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v15 = &v23;
      }
      else {
        long long v15 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string __p = 136316162;
      *(void *)&__p[4] = v14;
      __int16 v39 = 2048;
      unsigned __int8 v40 = v6;
      __int16 v41 = 2080;
      double v42 = v15;
      __int16 v43 = 2048;
      double v44 = v10;
      __int16 v45 = 1024;
      int v46 = v2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s, deleting all %zu samples for mac %s that was last harvested %.1f(s) ago to keep maximum %d distinct APs", __p, 0x30u);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v32) < 0) {
        operator delete(*(void **)v29);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022CDFA8);
      }
      std::operator+<char>();
      int v17 = SHIBYTE(v23.__r_.__value_.__r.__words[2]);
      std::string::size_type v18 = v23.__r_.__value_.__r.__words[0];
      sub_100B39278(&v22);
      float v19 = &v23;
      if (v17 < 0) {
        float v19 = (std::string *)v18;
      }
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v20 = &v22;
      }
      else {
        int v20 = (std::string *)v22.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)float v29 = 136316162;
      *(void *)&v29[4] = v19;
      __int16 v30 = 2048;
      std::string v31 = v6;
      __int16 v32 = 2080;
      long long v33 = v20;
      __int16 v34 = 2048;
      double v35 = v10;
      __int16 v36 = 1024;
      int v37 = v2;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiAssociatedApHarvestDatabase::deleteAssociatedApThatHasNotBeenHarvestedForTheLongestTimeIfNecessary()", "%s\n", v21);
      if (v21 != __p) {
        free(v21);
      }
    }
    sub_1010FE0D4(a1);
  }
  return sub_10087B3F8((uint64_t)v28);
}

void sub_100878894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
}

void *sub_100878920(void *a1, void *a2)
{
  __n128 result = sub_10087B05C(a1, a2);
  if (result)
  {
    uint64_t v5 = sub_10087B05C(a1, a2);
    if (!v5) {
      sub_10000EDDC("unordered_map::at: key not found");
    }
    return (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[4] - v5[3]) >> 6));
  }
  return result;
}

void sub_100878980(uint64_t a1, void *a2, void *a3)
{
  if (sub_10087B05C(a2, a3))
  {
    double v6 = sub_10016C458();
    if (v6 - *(double *)(a1 + 368) >= 600.0)
    {
      *(double *)(a1 + 368) = v6;
      unint64_t v7 = sub_10087B05C(a2, a3);
      if (!v7) {
        sub_10000EDDC("unordered_map::at: key not found");
      }
      uint64_t v8 = v7;
      if (v7[4] != v7[3])
      {
        unint64_t v9 = 0;
        double v10 = &qword_102419000;
        long long v11 = &qword_102419000;
        do
        {
          if (v10[188] != -1) {
            dispatch_once(&qword_1024195E0, &stru_1022CDFA8);
          }
          int v12 = v11[189];
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            std::operator+<char>();
            long long v13 = v11;
            long long v14 = v10;
            int v15 = SHIBYTE(v35);
            int v16 = *(unsigned char **)v32;
            uint64_t v18 = v8[3];
            uint64_t v17 = v8[4];
            sub_100F66A1C(v18 + 192 * v9);
            float v19 = v32;
            if (v15 < 0) {
              float v19 = v16;
            }
            *(_DWORD *)long long buf = 136315907;
            unsigned __int8 v40 = v19;
            int v20 = __p;
            if (v31 < 0) {
              int v20 = (void **)__p[0];
            }
            __int16 v41 = 2048;
            unint64_t v42 = v9 + 1;
            __int16 v43 = 2048;
            unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 6);
            __int16 v45 = 2081;
            int v46 = v20;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%s, harvest sample %zu / %zu, %{private}s", buf, 0x2Au);
            if (v31 < 0) {
              operator delete(__p[0]);
            }
            double v10 = v14;
            if (SHIBYTE(v35) < 0) {
              operator delete(*(void **)v32);
            }
            long long v11 = v13;
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (v10[188] != -1) {
              dispatch_once(&qword_1024195E0, &stru_1022CDFA8);
            }
            std::operator+<char>();
            int v21 = v31;
            std::string v22 = (void **)__p[0];
            uint64_t v24 = v8[3];
            uint64_t v23 = v8[4];
            sub_100F66A1C(v24 + 192 * v9);
            std::string::size_type v25 = __p;
            if (v21 < 0) {
              std::string::size_type v25 = v22;
            }
            *(_DWORD *)__int16 v32 = 136315907;
            ++v9;
            *(void *)&v32[4] = v25;
            uint64_t v26 = &v28;
            if (v29 < 0) {
              uint64_t v26 = v28;
            }
            __int16 v33 = 2048;
            unint64_t v34 = v9;
            __int16 v35 = 2048;
            unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v24) >> 6);
            __int16 v37 = 2081;
            long long v38 = v26;
            uint64_t v27 = (char *)_os_log_send_and_compose_impl();
            if (v29 < 0) {
              operator delete(v28);
            }
            if (v31 < 0) {
              operator delete(__p[0]);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiAssociatedApHarvestDatabase::logAllHarvestSamplesOfCurrentAssociatedApIfPossible(const std::unordered_map<CLMacAddress, std::vector<CLWifiHarvestDatabaseEntry>> &, const CLMacAddress &)", "%s\n", v27);
            if (v27 != (char *)buf) {
              free(v27);
            }
          }
          else
          {
            ++v9;
          }
        }
        while (v9 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8[4] - v8[3]) >> 6));
      }
    }
  }
}

void sub_100878D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100878D64(uint64_t a1, void *a2)
{
  if (sub_10064E538(a1))
  {
    double v4 = sub_10016C458();
    if (v4 - *(double *)(a1 + 360) >= 10.0)
    {
      *(double *)(a1 + 360) = v4;
      sub_1010FF158(a1, (uint64_t)&v83);
      uint64_t v5 = v85;
      if (v85)
      {
        unint64_t v6 = 0;
        do
        {
          v6 -= 0x5555555555555555 * ((uint64_t)(v5[4] - v5[3]) >> 6);
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        unint64_t v6 = 0;
      }
      unint64_t v11 = v86;
      sub_10087B480((uint64_t)v58, (uint64_t)&v83);
      if (v60)
      {
        int v12 = v59;
        long long v13 = (void *)*v59;
        if (*v59)
        {
          do
          {
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[4] - v12[3]) >> 6) < 0xAAAAAAAAAAAAAAABLL
                                                                          * ((uint64_t)(v13[4] - v13[3]) >> 6))
              int v12 = v13;
            long long v13 = (void *)*v13;
          }
          while (v13);
        }
        uint64_t v14 = v12[2];
      }
      else
      {
        sub_100134750(__p, "ff:ff:ff:ff:ff:ff");
        uint64_t v14 = sub_100B38F04((uint64_t)__p);
        if (SHIBYTE(v90) < 0) {
          operator delete(*(void **)__p);
        }
      }
      uint64_t v61 = v14;
      sub_10087B3F8((uint64_t)v58);
      int v15 = sub_100878920(&v83, &v61);
      sub_10087B480((uint64_t)v54, (uint64_t)&v83);
      if (v56)
      {
        int v16 = v55;
        uint64_t v17 = (void *)*v55;
        if (*v55)
        {
          do
          {
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17[4] - v17[3]) >> 6) < 0xAAAAAAAAAAAAAAABLL
                                                                          * ((uint64_t)(v16[4] - v16[3]) >> 6))
              int v16 = v17;
            uint64_t v17 = (void *)*v17;
          }
          while (v17);
        }
        uint64_t v18 = v16[2];
      }
      else
      {
        sub_100134750(__p, "ff:ff:ff:ff:ff:ff");
        uint64_t v18 = sub_100B38F04((uint64_t)__p);
        if (SHIBYTE(v90) < 0) {
          operator delete(*(void **)__p);
        }
      }
      uint64_t v57 = v18;
      sub_10087B3F8((uint64_t)v54);
      float v19 = sub_100878920(&v83, &v57);
      int v20 = sub_100878920(&v83, a2);
      double v21 = -1.0;
      if (sub_10087B05C(&v83, a2))
      {
        std::string v22 = sub_10087B05C(&v83, a2);
        if (!v22) {
          sub_10000EDDC("unordered_map::at: key not found");
        }
        uint64_t v23 = v22[3];
        if (v23 != v22[4]) {
          double v21 = (CFAbsoluteTimeGetCurrent() - *(double *)(v23 + 84)) / 3600.0;
        }
      }
      double v24 = -1.0;
      if (sub_10087B05C(&v83, a2))
      {
        std::string::size_type v25 = sub_10087B05C(&v83, a2);
        if (!v25) {
          sub_10000EDDC("unordered_map::at: key not found");
        }
        uint64_t v26 = v25[4];
        if (v25[3] != v26) {
          double v24 = CFAbsoluteTimeGetCurrent() - *(double *)(v26 - 108);
        }
      }
      double v53 = v24;
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022CDFA8);
      }
      uint64_t v27 = off_1024195E8;
      if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
      {
        int v28 = buf;
        std::operator+<char>();
        unint64_t v44 = v20;
        int v46 = v19;
        __int16 v48 = a2;
        if (v65 < 0) {
          int v28 = *(unsigned char **)buf;
        }
        sub_100B39278(&v52);
        char v29 = v15;
        if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          __int16 v30 = &v52;
        }
        else {
          __int16 v30 = (std::string *)v52.__r_.__value_.__r.__words[0];
        }
        sub_100B39278(&v51);
        int v31 = SHIBYTE(v51.__r_.__value_.__r.__words[2]);
        std::string::size_type v32 = v51.__r_.__value_.__r.__words[0];
        sub_100B39278(&v50);
        __int16 v33 = &v51;
        if (v31 < 0) {
          __int16 v33 = (std::string *)v32;
        }
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v34 = &v50;
        }
        else {
          unint64_t v34 = (std::string *)v50.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string __p = 136317699;
        *(void *)&__p[4] = v28;
        __int16 v88 = 2049;
        unint64_t v89 = v11;
        __int16 v90 = 2049;
        unint64_t v91 = v6;
        __int16 v92 = 2049;
        int v15 = v29;
        int v93 = v29;
        __int16 v94 = 2080;
        int v95 = v30;
        __int16 v96 = 2049;
        int v20 = v44;
        float v19 = v46;
        int v97 = v46;
        __int16 v98 = 2080;
        int v99 = v33;
        __int16 v100 = 2081;
        int v101 = v34;
        __int16 v102 = 2049;
        int v103 = v44;
        __int16 v104 = 2049;
        double v105 = v21;
        __int16 v106 = 2049;
        double v107 = v24;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "%s, %{private}zu APs, %{private}zu total samples, max samples: %{private}zu (%s), min samples: %{private}zu (%s), current associated AP %{private}s has %{private}zu samples and oldest sample age of %{private}.1f hours, latest sample age of %{private}.1f seconds", __p, 0x70u);
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v50.__r_.__value_.__l.__data_);
        }
        a2 = v48;
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v51.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v52.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v65) < 0) {
          operator delete(*(void **)buf);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_1022CDFA8);
        }
        __int16 v35 = &v52;
        std::operator+<char>();
        __int16 v47 = v19;
        __int16 v45 = v20;
        if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          __int16 v35 = (std::string *)v52.__r_.__value_.__r.__words[0];
        }
        unint64_t v36 = &v51;
        sub_100B39278(&v51);
        __int16 v37 = v15;
        unint64_t v38 = v11;
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v36 = (std::string *)v51.__r_.__value_.__r.__words[0];
        }
        sub_100B39278(&v50);
        int v39 = SHIBYTE(v50.__r_.__value_.__r.__words[2]);
        std::string::size_type v40 = v50.__r_.__value_.__r.__words[0];
        sub_100B39278(&v49);
        __int16 v41 = &v50;
        if (v39 < 0) {
          __int16 v41 = (std::string *)v40;
        }
        unint64_t v42 = &v49;
        if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v42 = (std::string *)v49.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)long long buf = 136317699;
        *(void *)&uint8_t buf[4] = v35;
        __int16 v63 = 2049;
        unint64_t v11 = v38;
        unint64_t v64 = v38;
        __int16 v65 = 2049;
        unint64_t v66 = v6;
        __int16 v67 = 2049;
        uint64_t v68 = v37;
        __int16 v69 = 2080;
        int v70 = v36;
        __int16 v71 = 2049;
        int v72 = v47;
        __int16 v73 = 2080;
        int v74 = v41;
        __int16 v75 = 2081;
        id v76 = v42;
        __int16 v77 = 2049;
        int v78 = v45;
        __int16 v79 = 2049;
        double v80 = v21;
        __int16 v81 = 2049;
        double v82 = v24;
        __int16 v43 = (char *)_os_log_send_and_compose_impl();
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v49.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v50.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v51.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v52.__r_.__value_.__l.__data_);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiAssociatedApHarvestDatabase::logDatabaseInfoAndSubmitMetricsIfPossible(const CLMacAddress &)", "%s\n", v43);
        if (v43 != __p) {
          free(v43);
        }
      }
      sub_100B57DD8(a1 + 304, v11, v6, &v53, v21);
      sub_100878980(a1, &v83, a2);
      sub_10087B3F8((uint64_t)&v83);
    }
  }
  else
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022CDFA8);
    }
    unint64_t v7 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
    {
      std::operator+<char>();
      uint64_t v8 = v90 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%s, #warning, could not log database info as it is invalid", buf, 0xCu);
      if (SHIBYTE(v90) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022CDFA8);
      }
      std::operator+<char>();
      if (v65 >= 0) {
        unint64_t v9 = buf;
      }
      else {
        unint64_t v9 = *(unsigned char **)buf;
      }
      int v83 = 136315138;
      uint64_t v84 = v9;
      double v10 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v65) < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiAssociatedApHarvestDatabase::logDatabaseInfoAndSubmitMetricsIfPossible(const CLMacAddress &)", "%s\n", v10);
      if (v10 != __p) {
        free(v10);
      }
    }
  }
}

void sub_100879618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

uint64_t sub_100879730(uint64_t a1, uint64_t *a2)
{
  uint64_t v75 = *a2;
  if (sub_10064E538(a1))
  {
    sub_1010FEA4C(a1, &v84);
    unint64_t v4 = *((int *)sub_1014122A8() + 2);
    std::string::size_type v5 = v84.__r_.__value_.__r.__words[0];
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v84.__r_.__value_.__l.__size_ - v84.__r_.__value_.__r.__words[0]) >> 6) >= v4)
    {
      if (v84.__r_.__value_.__r.__words[0] != v84.__r_.__value_.__l.__size_
        && v84.__r_.__value_.__r.__words[0] + 192 != v84.__r_.__value_.__l.__size_)
      {
        int v20 = (double *)(v84.__r_.__value_.__r.__words[0] + 276);
        do
        {
          double v21 = (char *)v20 - 84;
          std::string v22 = v20 + 24;
          double v24 = *v20;
          uint64_t v23 = (char *)v20 + 108;
          if (*(double *)(v5 + 84) < v24) {
            std::string::size_type v5 = (std::string::size_type)v21;
          }
          BOOL v25 = v23 == (char *)v84.__r_.__value_.__l.__size_;
          int v20 = v22;
        }
        while (!v25);
      }
      double v26 = *(double *)((char *)a2 + 84) - *(double *)(v5 + 84);
      double v27 = *((double *)sub_1014122A8() + 4);
      if (v26 >= v27)
      {
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_1022CDFA8);
        }
        std::string v51 = off_1024195E8;
        if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
        {
          std::operator+<char>();
          sub_100B39278(&__p);
          std::string v52 = v76;
          if (v76[23] < 0) {
            std::string v52 = *(unsigned char **)v76;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)long long buf = 136315906;
          *(void *)&uint8_t buf[4] = v52;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&unsigned char buf[14] = p_p;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(double *)&unsigned char buf[24] = v26;
          *(_WORD *)unint64_t v86 = 2048;
          *(double *)&v86[2] = v27;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "%s, will harvest for associated AP %s as timelapse %.1lf >= threshold %.1lf", buf, 0x2Au);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if ((v76[23] & 0x80000000) != 0) {
            operator delete(*(void **)v76);
          }
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_89;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_1022CDFA8);
        }
        std::operator+<char>();
        int v65 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        std::string::size_type v66 = __p.__r_.__value_.__r.__words[0];
        sub_100B39278(&v74);
        __int16 v67 = &__p;
        if (v65 < 0) {
          __int16 v67 = (std::string *)v66;
        }
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v68 = &v74;
        }
        else {
          uint64_t v68 = (std::string *)v74.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)id v76 = 136315906;
        *(void *)&v76[4] = v67;
        *(_WORD *)&v76[12] = 2080;
        *(void *)&v76[14] = v68;
        *(_WORD *)&v76[22] = 2048;
        *(double *)&v76[24] = v26;
        *(_WORD *)__int16 v77 = 2048;
        *(double *)&_OWORD v77[2] = v27;
        long long v13 = (char *)_os_log_send_and_compose_impl();
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v74.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v28 = *(_OWORD *)(v5 + 24);
        *(_OWORD *)long long buf = *(_OWORD *)(v5 + 8);
        *(_OWORD *)&uint8_t buf[16] = v28;
        long long v29 = *(_OWORD *)(v5 + 40);
        long long v30 = *(_OWORD *)(v5 + 56);
        long long v31 = *(_OWORD *)(v5 + 88);
        long long v87 = *(_OWORD *)(v5 + 72);
        long long v88 = v31;
        *(_OWORD *)unint64_t v86 = v29;
        *(_OWORD *)&v86[16] = v30;
        long long v32 = *(_OWORD *)(v5 + 104);
        long long v33 = *(_OWORD *)(v5 + 120);
        long long v34 = *(_OWORD *)(v5 + 136);
        *(_OWORD *)((char *)v91 + 12) = *(_OWORD *)(v5 + 148);
        long long v90 = v33;
        v91[0] = v34;
        long long v89 = v32;
        long long v35 = *(_OWORD *)(a2 + 15);
        long long v80 = *(_OWORD *)(a2 + 13);
        long long v81 = v35;
        v82[0] = *(_OWORD *)(a2 + 17);
        *(_OWORD *)((char *)v82 + 12) = *(_OWORD *)((char *)a2 + 148);
        long long v36 = *(_OWORD *)(a2 + 7);
        *(_OWORD *)__int16 v77 = *(_OWORD *)(a2 + 5);
        *(_OWORD *)&v77[16] = v36;
        long long v37 = *(_OWORD *)(a2 + 11);
        long long v78 = *(_OWORD *)(a2 + 9);
        long long v79 = v37;
        long long v38 = *(_OWORD *)(a2 + 3);
        *(_OWORD *)id v76 = *(_OWORD *)(a2 + 1);
        *(_OWORD *)&v76[16] = v38;
        sub_1000F1268((double *)(a1 + 264), (uint64_t)buf, (uint64_t)v76);
        double v40 = v39;
        double v41 = *((double *)sub_10141300C() + 10);
        if (v40 <= v41)
        {
          if (qword_1024195E0 != -1) {
            dispatch_once(&qword_1024195E0, &stru_1022CDFA8);
          }
          __int16 v55 = off_1024195E8;
          if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
          {
            std::operator+<char>();
            int v56 = v76[23];
            uint64_t v57 = *(unsigned char **)v76;
            sub_100B39278(&__p);
            double v58 = v76;
            if (v56 < 0) {
              double v58 = v57;
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              __int16 v59 = &__p;
            }
            else {
              __int16 v59 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)long long buf = 136316162;
            *(void *)&uint8_t buf[4] = v58;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&unsigned char buf[14] = v59;
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(void *)&unsigned char buf[24] = 0xAAAAAAAAAAAAAAABLL
                                * ((uint64_t)(v84.__r_.__value_.__l.__size_ - v84.__r_.__value_.__r.__words[0]) >> 6);
            *(_WORD *)unint64_t v86 = 2048;
            *(double *)&v86[2] = v26;
            *(_WORD *)&v86[10] = 2048;
            *(double *)&v86[12] = v40;
            _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "%s, will not harvest for associated AP %s as it has %lu samples, timelapse %.1lf, distance %.1lf", buf, 0x34u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if ((v76[23] & 0x80000000) != 0) {
              operator delete(*(void **)v76);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024195E0 != -1) {
              dispatch_once(&qword_1024195E0, &stru_1022CDFA8);
            }
            std::operator+<char>();
            int v69 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            std::string::size_type v70 = __p.__r_.__value_.__r.__words[0];
            sub_100B39278(&v74);
            __int16 v71 = &__p;
            if (v69 < 0) {
              __int16 v71 = (std::string *)v70;
            }
            if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v72 = &v74;
            }
            else {
              int v72 = (std::string *)v74.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)id v76 = 136316162;
            *(void *)&v76[4] = v71;
            *(_WORD *)&v76[12] = 2080;
            *(void *)&v76[14] = v72;
            *(_WORD *)&v76[22] = 2048;
            *(void *)&v76[24] = 0xAAAAAAAAAAAAAAABLL
                                * ((uint64_t)(v84.__r_.__value_.__l.__size_ - v84.__r_.__value_.__r.__words[0]) >> 6);
            *(_WORD *)__int16 v77 = 2048;
            *(double *)&_OWORD v77[2] = v26;
            *(_WORD *)&v77[10] = 2048;
            *(double *)&v77[12] = v40;
            __int16 v73 = (char *)_os_log_send_and_compose_impl();
            if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v74.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiAssociatedApHarvestDatabase::shouldAddHarvestSample(const CLWifiHarvestDatabaseEntry &)", "%s\n", v73);
            if (v73 != buf) {
              free(v73);
            }
          }
          uint64_t v19 = 0;
          goto LABEL_90;
        }
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_1022CDFA8);
        }
        unint64_t v42 = off_1024195E8;
        if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
        {
          std::operator+<char>();
          int v43 = v76[23];
          unint64_t v44 = *(unsigned char **)v76;
          sub_100B39278(&__p);
          __int16 v45 = v76;
          if (v43 < 0) {
            __int16 v45 = v44;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v46 = &__p;
          }
          else {
            int v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)long long buf = 136315906;
          *(void *)&uint8_t buf[4] = v45;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&unsigned char buf[14] = v46;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(double *)&unsigned char buf[24] = v40;
          *(_WORD *)unint64_t v86 = 2048;
          *(double *)&v86[2] = v41;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "%s, will harvest for associated AP %s as distance %.1lf greater than threshold %.1lf", buf, 0x2Au);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if ((v76[23] & 0x80000000) != 0) {
            operator delete(*(void **)v76);
          }
        }
        if (!sub_10013D1A0(115, 2))
        {
LABEL_89:
          uint64_t v19 = 1;
LABEL_90:
          if (v84.__r_.__value_.__r.__words[0])
          {
            v84.__r_.__value_.__l.__size_ = v84.__r_.__value_.__r.__words[0];
            operator delete(v84.__r_.__value_.__l.__data_);
          }
          return v19;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024195E0 != -1) {
          dispatch_once(&qword_1024195E0, &stru_1022CDFA8);
        }
        std::operator+<char>();
        int v47 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        std::string::size_type v48 = __p.__r_.__value_.__r.__words[0];
        sub_100B39278(&v74);
        std::string v49 = &__p;
        if (v47 < 0) {
          std::string v49 = (std::string *)v48;
        }
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v50 = &v74;
        }
        else {
          std::string v50 = (std::string *)v74.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)id v76 = 136315906;
        *(void *)&v76[4] = v49;
        *(_WORD *)&v76[12] = 2080;
        *(void *)&v76[14] = v50;
        *(_WORD *)&v76[22] = 2048;
        *(double *)&v76[24] = v40;
        *(_WORD *)__int16 v77 = 2048;
        *(double *)&_OWORD v77[2] = v41;
        long long v13 = (char *)_os_log_send_and_compose_impl();
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v74.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    else
    {
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022CDFA8);
      }
      unint64_t v6 = off_1024195E8;
      if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
      {
        std::operator+<char>();
        sub_100B39278(&__p);
        unint64_t v7 = v76;
        if (v76[23] < 0) {
          unint64_t v7 = *(unsigned char **)v76;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v8 = &__p;
        }
        else {
          uint64_t v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)long long buf = 136315906;
        *(void *)&uint8_t buf[4] = v7;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&unsigned char buf[14] = v8;
        *(_WORD *)&unsigned char buf[22] = 2048;
        *(void *)&unsigned char buf[24] = 0xAAAAAAAAAAAAAAABLL
                            * ((uint64_t)(v84.__r_.__value_.__l.__size_ - v84.__r_.__value_.__r.__words[0]) >> 6);
        *(_WORD *)unint64_t v86 = 1024;
        *(_DWORD *)&v86[2] = v4;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s, will harvest for associated AP %s as it has %lu samples, less than threshold %d", buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if ((v76[23] & 0x80000000) != 0) {
          operator delete(*(void **)v76);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_89;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022CDFA8);
      }
      std::operator+<char>();
      int v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v10 = __p.__r_.__value_.__r.__words[0];
      sub_100B39278(&v74);
      unint64_t v11 = &__p;
      if (v9 < 0) {
        unint64_t v11 = (std::string *)v10;
      }
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v12 = &v74;
      }
      else {
        int v12 = (std::string *)v74.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)id v76 = 136315906;
      *(void *)&v76[4] = v11;
      *(_WORD *)&v76[12] = 2080;
      *(void *)&v76[14] = v12;
      *(_WORD *)&v76[22] = 2048;
      *(void *)&v76[24] = 0xAAAAAAAAAAAAAAABLL
                          * ((uint64_t)(v84.__r_.__value_.__l.__size_ - v84.__r_.__value_.__r.__words[0]) >> 6);
      *(_WORD *)__int16 v77 = 1024;
      *(_DWORD *)&_OWORD v77[2] = v4;
      long long v13 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v74.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiAssociatedApHarvestDatabase::shouldAddHarvestSample(const CLWifiHarvestDatabaseEntry &)", "%s\n", v13);
    if (v13 != buf) {
      free(v13);
    }
    goto LABEL_89;
  }
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022CDFA8);
  }
  uint64_t v14 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
  {
    std::operator+<char>();
    int v15 = buf[23];
    int v16 = *(unsigned char **)buf;
    sub_100B39278((std::string *)v76);
    uint64_t v17 = buf;
    if (v15 < 0) {
      uint64_t v17 = v16;
    }
    if (v76[23] >= 0) {
      uint64_t v18 = v76;
    }
    else {
      uint64_t v18 = *(unsigned char **)v76;
    }
    LODWORD(v84.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v84.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
    WORD2(v84.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v84.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v18;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%s, #warning, will not harvest for associated AP %s as database is invalid", (uint8_t *)&v84, 0x16u);
    if ((v76[23] & 0x80000000) != 0) {
      operator delete(*(void **)v76);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022CDFA8);
    }
    std::operator+<char>();
    int v60 = v76[23];
    uint64_t v61 = *(unsigned char **)v76;
    sub_100B39278(&v84);
    double v62 = v76;
    if (v60 < 0) {
      double v62 = v61;
    }
    if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v63 = &v84;
    }
    else {
      __int16 v63 = (std::string *)v84.__r_.__value_.__r.__words[0];
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v62;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v63;
    unint64_t v64 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v84.__r_.__value_.__l.__data_);
    }
    if ((v76[23] & 0x80000000) != 0) {
      operator delete(*(void **)v76);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiAssociatedApHarvestDatabase::shouldAddHarvestSample(const CLWifiHarvestDatabaseEntry &)", "%s\n", v64);
    if (v64 != buf) {
      free(v64);
    }
  }
  return 0;
}

void sub_10087A500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10087A5CC(uint64_t a1, uint64_t *a2)
{
  if (sub_100879730(a1, a2))
  {
    return sub_10087A90C(a1, a2);
  }
  else
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022CDFA8);
    }
    std::string::size_type v5 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
    {
      std::operator+<char>();
      sub_100F66A1C((uint64_t)a2);
      unint64_t v6 = v23;
      if (v24 < 0) {
        unint64_t v6 = (void **)v23[0];
      }
      if (v14 >= 0) {
        unint64_t v7 = __p;
      }
      else {
        unint64_t v7 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136315395;
      *(void *)&uint8_t buf[4] = v6;
      __int16 v16 = 2081;
      uint64_t v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%s, skip adding associated AP harvest sample: %{private}s", buf, 0x16u);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if (v24 < 0) {
        operator delete(v23[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v23, 0x65CuLL);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022CDFA8);
      }
      std::operator+<char>();
      int v8 = v14;
      int v9 = (void **)__p[0];
      sub_100F66A1C((uint64_t)a2);
      std::string::size_type v10 = __p;
      if (v8 < 0) {
        std::string::size_type v10 = v9;
      }
      if (v18 >= 0) {
        unint64_t v11 = buf;
      }
      else {
        unint64_t v11 = *(unsigned char **)buf;
      }
      int v19 = 136315395;
      int v20 = v10;
      __int16 v21 = 2081;
      std::string v22 = v11;
      int v12 = (char *)_os_log_send_and_compose_impl();
      if (v18 < 0) {
        operator delete(*(void **)buf);
      }
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiAssociatedApHarvestDatabase::addHarvestSampleIfNecessary(const CLWifiHarvestDatabaseEntry &)", "%s\n", v12);
      if (v12 != (char *)v23) {
        free(v12);
      }
    }
    return 0;
  }
}

void sub_10087A8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10087A90C(uint64_t a1, void *a2)
{
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1022CDFA8);
  }
  unint64_t v4 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
  {
    std::operator+<char>();
    sub_100F66A1C((uint64_t)a2);
    std::string::size_type v5 = __p;
    if (v36 < 0) {
      std::string::size_type v5 = (void **)__p[0];
    }
    if (v40 >= 0) {
      unint64_t v6 = v37;
    }
    else {
      unint64_t v6 = *(const char **)v37;
    }
    *(_DWORD *)long long buf = 136315395;
    *(void *)&uint8_t buf[4] = v5;
    __int16 v28 = 2081;
    long long v29 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s, adding associated AP harvest sample: %{private}s", buf, 0x16u);
    if (v40 < 0) {
      operator delete(*(void **)v37);
    }
    if (v36 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022CDFA8);
    }
    std::operator+<char>();
    int v16 = v40;
    uint64_t v17 = *(unsigned char **)v37;
    sub_100F66A1C((uint64_t)a2);
    char v18 = v37;
    if (v16 < 0) {
      char v18 = v17;
    }
    if (v30 >= 0) {
      int v19 = buf;
    }
    else {
      int v19 = *(unsigned char **)buf;
    }
    int v31 = 136315395;
    long long v32 = v18;
    __int16 v33 = 2081;
    long long v34 = v19;
    int v20 = (char *)_os_log_send_and_compose_impl();
    if (v30 < 0) {
      operator delete(*(void **)buf);
    }
    if (v40 < 0) {
      operator delete(*(void **)v37);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiAssociatedApHarvestDatabase::addHarvestSample(const CLWifiHarvestDatabaseEntry &)", "%s\n", v20);
    if (v20 != (char *)__p) {
      free(v20);
    }
  }
  *(void *)(a1 + 256) = *a2;
  uint64_t v7 = sub_1010FD268(a1);
  if (v7)
  {
    int v8 = sub_1014122A8();
    __p[0] = COERCE_VOID_(sub_101412DFC(v8));
    sub_10064E5D0(a1, (uint64_t)__p);
    sub_100878074(a1);
    sub_1008784AC(a1);
  }
  else
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1022CDFA8);
    }
    int v9 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
    {
      std::operator+<char>();
      int v10 = v36;
      unint64_t v11 = (void **)__p[0];
      BOOL v12 = sub_10064E538(a1);
      long long v13 = __p;
      char v14 = "invalid";
      if (v10 < 0) {
        long long v13 = v11;
      }
      if (v12) {
        char v14 = "valid";
      }
      *(_DWORD *)long long v37 = 136315394;
      *(void *)&v37[4] = v13;
      __int16 v38 = 2080;
      double v39 = v14;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%s, #warning, could not insert associated AP harvest sample into %s database!", v37, 0x16u);
      if (v36 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1022CDFA8);
      }
      std::operator+<char>();
      int v21 = v40;
      std::string v22 = *(unsigned char **)v37;
      BOOL v23 = sub_10064E538(a1);
      char v24 = v37;
      BOOL v25 = "invalid";
      if (v21 < 0) {
        char v24 = v22;
      }
      if (v23) {
        BOOL v25 = "valid";
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v24;
      __int16 v28 = 2080;
      long long v29 = v25;
      double v26 = (char *)_os_log_send_and_compose_impl();
      if (v40 < 0) {
        operator delete(*(void **)v37);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiAssociatedApHarvestDatabase::addHarvestSample(const CLWifiHarvestDatabaseEntry &)", "%s\n", v26);
      if (v26 != (char *)__p) {
        free(v26);
      }
    }
  }
  return v7;
}

void sub_10087AE14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (*(char *)(v24 - 89) < 0) {
    operator delete(*(void **)(v24 - 112));
  }
  _Unwind_Resume(exception_object);
}

void sub_10087AE54(uint64_t a1, uint64_t *a2)
{
  if (sub_10087A5CC(a1, a2))
  {
    uint64_t v4 = *a2;
    sub_1010FEA4C(a1, __p);
    uint64_t v4 = *a2;
    sub_100D39BE0(__p, (uint64_t)&v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_10087AEC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10087AEE0(uint64_t a1)
{
  *(void *)a1 = off_1022CDF78;
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*(void **)(a1 + 376));
  }
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*(void **)(a1 + 336));
  }
  *(void *)a1 = off_102311890;
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }

  return sub_10064DF48(a1);
}

void sub_10087AF7C(uint64_t a1)
{
  *(void *)a1 = off_1022CDF78;
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*(void **)(a1 + 376));
  }
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*(void **)(a1 + 336));
  }
  *(void *)a1 = off_102311890;
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  sub_10064DF48(a1);

  operator delete();
}

void sub_10087B02C(id a1)
{
  off_1024195E8 = os_log_create("com.apple.locationd.Utility", "Database");
}

void *sub_10087B05C(void *a1, void *a2)
{
  unint64_t v4 = sub_1000D8908((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  int v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = (void *)*v10;
  if (*v10)
  {
    do
    {
      unint64_t v12 = v11[1];
      if (v6 == v12)
      {
        if (sub_100B39178(v11 + 2, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(void *)&v5) {
            v12 %= *(void *)&v5;
          }
        }
        else
        {
          v12 &= *(void *)&v5 - 1;
        }
        if (v12 != v9) {
          return 0;
        }
      }
      unint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

void *sub_10087B158@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x1A8uLL);
  __n128 result = sub_10087B1B4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10087B1A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10087B1B4(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022CDFD8;
  sub_10087B2C0((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_10087B210(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10087B224(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022CDFD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10087B244(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022CDFD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10087B298(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_10087B2C0(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  sub_100134750(__p, "");
  sub_100877C84(a2, a3, (long long *)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_10087B31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10087B338@<X0>(unsigned __int8 *a1@<X1>, long long *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0x1A8uLL);
  __n128 result = sub_10087B39C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_10087B388(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10087B39C(void *a1, unsigned __int8 *a2, long long *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022CDFD8;
  sub_100877C84((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_10087B3E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10087B3F8(uint64_t a1)
{
  sub_10087B434(a1, *(void **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_10087B434(int a1, void *__p)
{
  if (__p)
  {
    unint64_t v2 = __p;
    do
    {
      unint64_t v3 = (void *)*v2;
      char v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_10087B480(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100100330(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_10087B4F8(a1, i + 2, i + 2);
  return a1;
}

void sub_10087B4E0(_Unwind_Exception *a1)
{
  sub_10087B3F8(v1);
  _Unwind_Resume(a1);
}

void *sub_10087B4F8(uint64_t a1, void *a2, void *a3)
{
  unint64_t v7 = sub_1000D8908((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      long long v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            if (sub_100B39178(v13 + 2, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          long long v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  sub_10087B764(a1, v8, a3, (uint64_t)&v24);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100100330(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  int v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t v24 = *v21;
    void *v21 = v24;
  }
  else
  {
    *uint64_t v24 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v24)
    {
      unint64_t v22 = *(void *)(*v24 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9) {
          v22 %= v9;
        }
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24;
    }
  }
  long long v13 = v24;
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_10087B740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_10087B810((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10087B764@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (const void *)a3[1];
  void v8[2] = *a3;
  void v8[3] = 0;
  v8[4] = 0;
  void v8[5] = 0;
  __n128 result = sub_10079DC90(v8 + 3, v9, a3[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[2] - (void)v9) >> 6));
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_10087B7F4(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_10087B810(v3, v2);
  _Unwind_Resume(a1);
}

void sub_10087B810(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_10087B870()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_10087B928(_Unwind_Exception *a1)
{
}

void sub_10087B940()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *uint64_t v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_10087B9E8(_Unwind_Exception *a1)
{
}

uint64_t sub_10087BA00()
{
  sub_100134750(&qword_10247E640, "WifiAssociatedApHarvestTable");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247E640, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247E658, "WifiAssociatedApWifiHarvestTable");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247E658, (void *)&_mh_execute_header);
}

double sub_10087BA98(void *a1)
{
  uint64_t v1 = sub_100D6A5FC(a1);
  void *v1 = off_1022CE028;
  *((_OWORD *)v1 + 1) = 0u;
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  *((_OWORD *)v1 + 4) = 0u;
  *(_OWORD *)((char *)v1 + 76) = 0u;
  *(void *)((char *)v1 + 92) = 1065353216;
  *((_DWORD *)v1 + 25) = 0;
  *((_WORD *)v1 + 54) = 0;
  *((unsigned char *)v1 + 110) = 0;
  *(void *)&double result = 0x1E00000000;
  v1[14] = 0x1E00000000;
  *((unsigned char *)v1 + 152) = 1;
  v1[21] = 0x1E00000000;
  *((_DWORD *)v1 + 41) = 1031798784;
  return result;
}

void sub_10087BB18(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 74);
  if (v3)
  {
    *(_DWORD *)(a1 + 16) = *(_DWORD *)a2;
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 20);
    *(void *)(a1 + 40) = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 48);
    uint64_t v4 = *(unsigned int *)(a2 + 64);
    *(void *)(a1 + 76) = v4;
    *(_DWORD *)(a1 + 86) = *(_DWORD *)(a2 + 68);
    *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 72) != 0;
    int v5 = *(unsigned __int8 *)(a2 + 73);
    uint64_t v6 = *(void *)(a2 + 56);
    *(_DWORD *)(a1 + 112) = 0;
    uint64_t v7 = (unsigned __int16 *)(a1 + 112);
    *(unsigned char *)(a1 + 85) = v5 != 0;
    *(void *)(a1 + 68) = v6;
    *(unsigned char *)(a1 + 110) = v3;
    if ((v4 - 1) <= 0x1C) {
      sub_10087BC08(v7, v4);
    }
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
  }
  *(unsigned char *)(a1 + 90) = v8;
}

void sub_10087BC08(unsigned __int16 *a1, uint64_t a2)
{
  if (a1[1] || *a1)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CE088);
    }
    uint64_t v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v5 = a1[1];
      int v6 = *a1;
      *(_DWORD *)long long buf = 67109376;
      int v9 = v5;
      __int16 v10 = 1024;
      int v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Assertion failed: fHeadAndSize.fSize == 0 && fHeadAndSize.fHead == 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 78,size,%u,head,%u.", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022CE088);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CMQueue<BOOL>::setCapacity(size_t) [T = BOOL]", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  if (a2) {
    *((_DWORD *)a1 + 1) = a2;
  }
}

void sub_10087BDF8(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022CE088);
  }
  unint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(_DWORD *)(a1 + 52);
    int v4 = *(_DWORD *)(a1 + 56);
    int v5 = *(_DWORD *)(a1 + 60);
    int v6 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)long long buf = 67109888;
    *(_DWORD *)char v30 = v3;
    *(_WORD *)&v30[4] = 1024;
    *(_DWORD *)&v30[6] = v4;
    LOWORD(v31) = 1024;
    *(_DWORD *)((char *)&v31 + 2) = v5;
    HIWORD(v31) = 1024;
    *(_DWORD *)long long v32 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "configuration: low band = [%d %d] high band [%d %d]", buf, 0x1Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CE088);
    }
    BOOL v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CMOnBodyDetector::printParameters() const", "%s\n", v25);
    if (v25 != (char *)buf) {
      free(v25);
    }
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022CE088);
  }
  uint64_t v7 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    double v8 = *(float *)(a1 + 40);
    double v9 = *(float *)(a1 + 44);
    double v10 = *(float *)(a1 + 48);
    *(_DWORD *)long long buf = 134218496;
    *(double *)char v30 = v8;
    *(_WORD *)&v30[8] = 2048;
    double v31 = v9;
    *(_WORD *)long long v32 = 2048;
    *(double *)&_OWORD v32[2] = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "configuration: classifierMinLowPower = %f, classifierMaxLowPower = %f, classifierMaxHighPower = %f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CE088);
    }
    double v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CMOnBodyDetector::printParameters() const", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022CE088);
  }
  int v11 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    double v12 = *(float *)(a1 + 16);
    double v13 = *(float *)(a1 + 20);
    double v14 = *(float *)(a1 + 24);
    double v15 = *(float *)(a1 + 28);
    double v16 = *(float *)(a1 + 32);
    double v17 = *(float *)(a1 + 36);
    *(_DWORD *)long long buf = 134219264;
    *(double *)char v30 = v12;
    *(_WORD *)&v30[8] = 2048;
    double v31 = v13;
    *(_WORD *)long long v32 = 2048;
    *(double *)&_OWORD v32[2] = v14;
    __int16 v33 = 2048;
    *(double *)long long v34 = v15;
    *(_WORD *)&_OWORD v34[8] = 2048;
    *(double *)long long v35 = v16;
    *(_WORD *)&v35[8] = 2048;
    double v36 = v17;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "configuration: theta = [%.2f %.2f %.2f %.2f %.2f %.2f]", buf, 0x3Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CE088);
    }
    double v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CMOnBodyDetector::printParameters() const", "%s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022CE088);
  }
  unint64_t v18 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    double v19 = *(float *)(a1 + 68);
    double v20 = *(double *)(a1 + 76);
    double v21 = *(float *)(a1 + 86);
    int v22 = *(unsigned __int8 *)(a1 + 84);
    int v23 = *(unsigned __int8 *)(a1 + 85);
    double v24 = *(float *)(a1 + 72);
    *(_DWORD *)long long buf = 134219264;
    *(double *)char v30 = v19;
    *(_WORD *)&v30[8] = 2048;
    double v31 = v20;
    *(_WORD *)long long v32 = 2048;
    *(double *)&_OWORD v32[2] = v21;
    __int16 v33 = 1024;
    *(_DWORD *)long long v34 = v22;
    *(_WORD *)&v34[4] = 1024;
    *(_DWORD *)&v34[6] = v23;
    *(_WORD *)long long v35 = 2048;
    *(double *)&v35[2] = v24;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "configuration: oddsThreshold = %f, medianFilterSize = %zu, confidenceThreshold = %f, useHysteresis = %d, useAngleOverride = %d, angleMetricThreshold = %f", buf, 0x36u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CE088);
    }
    __int16 v28 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CMOnBodyDetector::printParameters() const", "%s\n", v28);
    if (v28 != (char *)buf) {
      free(v28);
    }
  }
}

uint64_t sub_10087C534(uint64_t result)
{
  *(_DWORD *)(result + 92) = 1065353216;
  *(_WORD *)(result + 108) = 0;
  *(_DWORD *)(result + 112) = 0;
  return result;
}

void sub_10087C548(uint64_t a1, float a2, float a3)
{
  float v3 = a2 * 100.0;
  if ((float)(a2 * 100.0) <= (float)(*(float *)(a1 + 44) * 100.0) && v3 >= (float)(*(float *)(a1 + 40) * 100.0))
  {
    float v5 = a3 * 100.0;
    if (!sub_100EB6EC4(*(unsigned __int8 *)(a1 + 110)) || v5 <= (float)(*(float *)(a1 + 48) * 100.0)) {
      expf((float)((float)((float)((float)(*(float *)(a1 + 16) + (float)(*(float *)(a1 + 20) * v3))+ (float)(*(float *)(a1 + 24) * v5))+ (float)((float)(v3 * *(float *)(a1 + 28)) * v5))+ (float)((float)(v3 * *(float *)(a1 + 32)) * v3))+ (float)((float)(v5 * *(float *)(a1 + 36)) * v5));
    }
  }
}

uint64_t sub_10087C610(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 90))
  {
    uint64_t v4 = 0;
    uint64_t v3 = 3;
    return v3 | (v4 << 32);
  }
  if (*(unsigned char *)(a1 + 91))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CE088);
    }
    unint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Accel saturation detected, forcing OnBody.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022CE088);
      }
      double v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLOnBodyNotifier_Type::CLOnBodyDetectionResult CMOnBodyDetector::detect()", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
      uint64_t v4 = 1;
      uint64_t v3 = 1;
    }
    else
    {
      uint64_t v3 = 1;
      uint64_t v4 = 1;
    }
    return v3 | (v4 << 32);
  }
  sub_10087C548(a1, *(float *)(a1 + 96), *(float *)(a1 + 100));
  *(_DWORD *)(a1 + 92) = v5;
  if (*(unsigned char *)(a1 + 85))
  {
    sub_100877A00((unsigned __int16 *)(a1 + 168), (_DWORD *)(a1 + 104));
    *(unsigned char *)(a1 + 152) = 1;
  }
  uint64_t v6 = *(unsigned __int16 *)(a1 + 112);
  unint64_t v7 = *(unsigned __int16 *)(a1 + 114);
  unint64_t v8 = *(unsigned int *)(a1 + 116);
  if (*(_WORD *)(a1 + 114) && v8 == v7)
  {
    __int16 v9 = v6 + 1;
    if (v6 + 1 >= v7) {
      __int16 v10 = *(_WORD *)(a1 + 114);
    }
    else {
      __int16 v10 = 0;
    }
    LOWORD(v6) = v9 - v10;
    *(_WORD *)(a1 + 112) = v6;
    LOWORD(v11) = v7 - 1;
    *(_WORD *)(a1 + 114) = v7 - 1;
    LODWORD(v7) = (unsigned __int16)(v7 - 1);
  }
  else
  {
    LOWORD(v11) = *(_WORD *)(a1 + 114);
  }
  unint64_t v12 = (unsigned __int16)v6 + (unint64_t)(unsigned __int16)v11;
  if (v12 >= v8) {
    unint64_t v13 = v8;
  }
  else {
    unint64_t v13 = 0;
  }
  *(unsigned char *)(a1 + v12 - v13 + 120) = *(float *)(a1 + 92) > *(float *)(a1 + 68);
  if (v8 <= v7)
  {
    if ((unint64_t)(unsigned __int16)v6 + 1 < v8) {
      LOWORD(v8) = 0;
    }
    *(_WORD *)(a1 + 112) = v6 + 1 - v8;
  }
  else
  {
    LOWORD(v11) = v11 + 1;
    *(_WORD *)(a1 + 114) = v11;
  }
  unsigned int v14 = *(unsigned __int16 *)(a1 + 108);
  BOOL v15 = (unsigned __int16)v11 <= v14;
  if ((unsigned __int16)v11 > v14)
  {
    *(_WORD *)(a1 + 108) = v14 + 1;
    int v18 = *(unsigned __int8 *)(a1 + 84);
    uint64_t v3 = 3;
    goto LABEL_43;
  }
  if ((_WORD)v11)
  {
    unint64_t v16 = 0;
    unsigned int v17 = 0;
    do
    {
      v17 += *(unsigned __int8 *)sub_10087CDD0((unsigned __int16 *)(a1 + 112), v16++);
      unint64_t v11 = *(unsigned __int16 *)(a1 + 114);
    }
    while (v16 < v11);
    if (*(unsigned char *)(a1 + 84))
    {
      int v18 = 1;
      if (!v17)
      {
LABEL_40:
        uint64_t v3 = 0;
        BOOL v15 = 0;
        float v20 = 1.0 - *(float *)(a1 + 92);
        if (!v18) {
          goto LABEL_49;
        }
        goto LABEL_44;
      }
      goto LABEL_42;
    }
    uint64_t v19 = *(unsigned __int16 *)(a1 + 114);
  }
  else
  {
    LOWORD(v11) = *(unsigned __int8 *)(a1 + 84);
    if (*(unsigned char *)(a1 + 84))
    {
      LOWORD(v11) = 0;
      int v18 = 1;
      goto LABEL_40;
    }
    uint64_t v19 = 0;
    unsigned int v17 = 0;
  }
  int v18 = 0;
  if (v17 < (unint64_t)(v19 + 1) >> 1) {
    goto LABEL_40;
  }
LABEL_42:
  uint64_t v3 = 1;
LABEL_43:
  float v20 = *(float *)(a1 + 92);
  if (!v18)
  {
LABEL_49:
    uint64_t v4 = v20 > *(float *)(a1 + 86);
    goto LABEL_50;
  }
LABEL_44:
  if (*(unsigned char *)sub_10087CDD0((unsigned __int16 *)(a1 + 112), (unsigned __int16)v11 - 1)) {
    BOOL v21 = 0;
  }
  else {
    BOOL v21 = v15;
  }
  if (!v21) {
    goto LABEL_49;
  }
  uint64_t v4 = 0;
LABEL_50:
  char v22 = !v15;
  if (!*(unsigned char *)(a1 + 85)) {
    char v22 = 1;
  }
  if ((v22 & 1) == 0)
  {
    if (*(unsigned char *)(a1 + 152)) {
      sub_1004184F0(a1 + 152);
    }
    float v23 = *(float *)(a1 + 156);
    float v24 = *(float *)(a1 + 72);
    if (v23 > v24) {
      uint64_t v4 = 1;
    }
    else {
      uint64_t v4 = v4;
    }
    uint64_t v3 = v23 <= v24;
  }
  return v3 | (v4 << 32);
}

float sub_10087C9EC(unsigned __int16 *a1)
{
  unint64_t v1 = 0;
  unint64_t v2 = 0;
  int v3 = 0;
  int v25 = 256;
  int v22 = 1031798784;
  uint64_t v4 = a1 + 538;
  int v5 = a1 + 1062;
  uint64_t v6 = a1 + 14;
  do
  {
    float v7 = *(float *)sub_1004182C4(v4, v1);
    unint64_t v8 = (float *)sub_1004182C4(v5, v1);
    float v9 = sqrtf((float)(v7 * v7) + (float)(*v8 * *v8));
    __int16 v10 = (float *)sub_1004182C4(v6, v1);
    float v11 = atan2f(*v10, v9);
    unint64_t v12 = v2 + (unsigned __int16)v3;
    if (v12 >= 0x100) {
      uint64_t v13 = -256;
    }
    else {
      uint64_t v13 = 0;
    }
    *(float *)&v26[v13 + v12] = v11;
    if ((unsigned __int16)v3 >= 0xFFu) {
      int v14 = -256;
    }
    else {
      int v14 = 0;
    }
    int v15 = v3 + v14;
    if (v2 > 0xFF) {
      int v3 = v15 + 1;
    }
    else {
      ++v2;
    }
    ++v1;
  }
  while (v1 != 256);
  __int16 v24 = v2;
  __int16 v23 = v3;
  v19[0] = 1;
  sub_1004184F0((uint64_t)v19);
  float v16 = v21;
  if (v19[0]) {
    sub_1004184F0((uint64_t)v19);
  }
  float v17 = v20;
  if (v20 <= 0.0) {
    float v17 = -v20;
  }
  return sqrtf(v16) / v17;
}

BOOL sub_10087CB68(unsigned __int16 *a1)
{
  unint64_t v1 = 0;
  unsigned int v2 = 0;
  int v3 = a1 + 14;
  uint64_t v4 = a1 + 538;
  int v5 = a1 + 1062;
  do
  {
    uint64_t v6 = (float *)sub_1004182C4(v3, v1);
    float v7 = *v6 * *v6;
    unint64_t v8 = (float *)sub_1004182C4(v4, v1);
    float v9 = v7 + (float)(*v8 * *v8);
    __int16 v10 = (float *)sub_1004182C4(v5, v1);
    if (sqrtf(v9 + (float)(*v10 * *v10)) > 10.0) {
      ++v2;
    }
    ++v1;
  }
  while (v1 != 256);
  return v2 > 0xE6;
}

void sub_10087CC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(_DWORD *)(a2 + 8) == 100)
  {
    *(unsigned char *)(a1 + 91) = sub_10087CB68((unsigned __int16 *)a2);
    unsigned int v10 = *(_DWORD *)(a1 + 52);
    unsigned int v11 = *(_DWORD *)(a1 + 56);
    int v12 = *(unsigned __int8 *)(a1 + 110);
    float v13 = 0.0;
    float v14 = 0.0;
    if (v10 <= v11)
    {
      int v15 = (float *)(a4 + 4 * (int)v10);
      float v16 = (float *)(a6 + 4 * (int)v10);
      do
      {
        float v17 = *v16;
        if (v12 == 18) {
          float v17 = v17 - *v15;
        }
        float v14 = v14 + v17;
        ++v15;
        ++v10;
        ++v16;
      }
      while (v11 >= v10);
    }
    *(float *)(a1 + 96) = v14;
    unsigned int v18 = *(_DWORD *)(a1 + 60);
    unsigned int v19 = *(_DWORD *)(a1 + 64);
    if (v18 <= v19)
    {
      float v20 = (float *)(a4 + 4 * (int)v18);
      float v21 = 0.0;
      int v22 = (float *)(a6 + 4 * (int)v18);
      do
      {
        float v23 = *v22;
        if (v12 == 18) {
          float v23 = v23 - *v20;
        }
        float v21 = v21 + v23;
        ++v20;
        ++v18;
        ++v22;
      }
      while (v19 >= v18);
      float v13 = v21 * 0.125;
    }
    *(float *)(a1 + 96) = v14 * 0.125;
    *(float *)(a1 + 100) = v13;
    *(float *)(a1 + 104) = sub_10087C9EC((unsigned __int16 *)a2);
  }
}

void *sub_10087CD20(void *a1)
{
  *a1 = off_1022CE028;
  return sub_100D6A628(a1);
}

void sub_10087CD40(void *a1)
{
  *a1 = off_1022CE028;
  sub_100D6A628(a1);

  operator delete();
}

BOOL sub_10087CD94(uint64_t a1, int a2)
{
  return a2 == 100;
}

void sub_10087CDA0(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_10087CDD0(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CE088);
    }
    float v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)long long buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022CE088);
      }
      float v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const T &CMQueue<BOOL>::operator[](const size_t) const [T = BOOL]", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)a1 + v4 - v5 + 8;
}

uint64_t sub_10087CFCC(uint64_t a1, uint64_t a2, int a3, char a4, char a5)
{
  uint64_t v9 = sub_100538CA8(a1, a3);
  *(void *)uint64_t v9 = off_1022CE0B8;
  *(void *)(v9 + 200) = off_1022CE120;
  sub_100E16F9C(v9 + 200, *(unsigned __int8 *)(v9 + 8), a5);
  *(void *)a1 = off_1022CE0B8;
  *(void *)(a1 + 200) = off_1022CE120;
  *(unsigned char *)(a1 + 274) = a4;
  *(unsigned char *)(a1 + 275) = 0;
  *(void *)(a1 + 280) = 0;
  uint64_t v10 = sub_100A08A84();
  double v12 = sub_100A09AFC(v10, (double *)(a1 + 24));
  sub_100B06E80(a1 + 288, &v12, a1 + 16, a2);
  return a1;
}

void sub_10087D0B0(_Unwind_Exception *a1)
{
  sub_1005395A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10087D0D8(void *a1)
{
  *a1 = off_1022CE0B8;
  unsigned int v2 = a1 + 25;
  a1[25] = off_1022CE120;
  sub_100E17364((uint64_t)(a1 + 25));
  sub_100E17034(v2);
  sub_100E1709C(v2);
  sub_100B06F10(a1 + 36);
  sub_100E16FDC(v2);

  return sub_1005395A0((uint64_t)a1);
}

uint64_t sub_10087D178(uint64_t a1)
{
  return sub_10087D0D8((void *)(a1 - 200));
}

void sub_10087D180(void *a1)
{
  sub_10087D0D8(a1);

  operator delete();
}

void sub_10087D1B8(uint64_t a1)
{
  sub_10087D0D8((void *)(a1 - 200));

  operator delete();
}

uint64_t sub_10087D1F4(uint64_t a1)
{
  uint64_t v2 = a1 + 288;
  sub_100B06F54(a1 + 288);
  if (*(unsigned char *)(a1 + 274))
  {
    sub_100E17398(a1 + 200);
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v5 = 0xBFF0000000000000;
    double v4 = sub_1000D3E50();
    sub_100B0889C(v2, (double *)&v7, (double *)&v6, (double *)&v5, &v4);
  }
  sub_100E171B4(a1 + 200);
  sub_100E172D8(a1 + 200);
  uint64_t v7 = 2;
  uint64_t result = sub_10053A1D0(a1, &v7);
  *(unsigned char *)(a1 + 275) = 0;
  *(void *)(a1 + 280) = 0;
  return result;
}

void *sub_10087D2A0(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 200);
  sub_100E17364(a1 + 200);
  sub_100E17034(v1);

  return sub_100E1709C(v1);
}

void sub_10087D2E4(uint64_t a1, int a2)
{
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022CE188);
  }
  double v4 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109120;
    int v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Application state changed, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022CE188);
    }
    unint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionServiceLegacy::applicationStateChanged(BOOL)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  *(unsigned char *)(a1 + 275) = a2 ^ 1;
}

void sub_10087D49C(uint64_t a1, uint64_t a2)
{
  float v4 = *(float *)(a2 + 12);
  *(double *)long long buf = *(float *)(a2 + 8);
  uint64_t v5 = a1 + 304;
  uint64_t v6 = a1 + 288;
  double v22 = v4;
  v28[0] = *(float *)(a2 + 16);
  sub_100B07064(a1 + 288, (float64x2_t *)buf, (uint64_t)&v22, v28, (void *)a2);
  v7.i64[0] = *(void *)(a1 + 464);
  if (*(double *)v7.i64 <= 0.0)
  {
    float32x2_t v8 = 0;
    float v9 = 0.0;
  }
  else
  {
    sub_100B07F84((double *)buf, (double *)v5);
    float32x4_t v7 = (float32x4_t)vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 472)), *(float64x2_t *)buf);
    float32x2_t v8 = vcvt_f32_f64((float64x2_t)v7);
    *(double *)v7.i64 = *(float *)(a1 + 480) - v30;
    float v9 = *(double *)v7.i64;
  }
  int v10 = *(_DWORD *)(a1 + 452);
  *(_OWORD *)float v23 = 0uLL;
  double v22 = -1.0;
  uint64_t v11 = *(void *)(v5 + 140);
  sub_100B9BEAC((float32x4_t *)v23, v7);
  memset(&v23[4], 0, 36);
  *(_OWORD *)&v23[13] = xmmword_101D1F280;
  uint64_t v24 = 0x1FF00000000;
  int v25 = 0;
  char v26 = 0;
  uint64_t v27 = 0;
  double v22 = *(double *)a2;
  float32x4_t v12 = *(float32x4_t *)(v5 + 16);
  *(float32x4_t *)long long buf = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v5), (float64x2_t)v12);
  sub_100B9BEAC((float32x4_t *)buf, v12);
  *(_OWORD *)float v23 = *(_OWORD *)buf;
  *(float32x2_t *)&v23[4] = v8;
  *(float *)&v23[6] = v9;
  *(void *)&v23[7] = v11;
  v23[9] = v10;
  WORD2(v24) = 511;
  *(_OWORD *)&v23[10] = xmmword_101D1F290;
  v23[14] = -1082130432;
  __int16 v13 = HIWORD(v24) & 0xFFE7;
  if (*(unsigned char *)(a1 + 252)) {
    __int16 v13 = HIWORD(v24) & 0xFFE7 | 0x10;
  }
  HIWORD(v24) = v13;
  if (sub_100B06F4C(v6)) {
    __int16 v14 = 256;
  }
  else {
    __int16 v14 = 0;
  }
  HIWORD(v24) = HIWORD(v24) & 0xFEFF | v14;
  int v25 = 3;
  uint64_t v27 = 0;
  char v26 = *(unsigned char *)(a2 + 22);
  double v15 = *(double *)a2;
  double v16 = *(double *)(a1 + 280);
  if (v16 != 0.0)
  {
    double v17 = v15 - v16;
    if (v15 - v16 > 0.100000001)
    {
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022CE188);
      }
      unsigned int v18 = qword_102419088;
      if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134217984;
        *(double *)&uint8_t buf[4] = v17;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Large time gap, %lf", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022CE188);
        }
        LODWORD(v28[0]) = 134217984;
        *(double *)((char *)v28 + 4) = v17;
        float v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionServiceLegacy::feedGyroData(const CLGyro::Sample *)", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
      if (*(unsigned char *)(a1 + 275))
      {
        if (qword_102419080 != -1) {
          dispatch_once(&qword_102419080, &stru_1022CE188);
        }
        unsigned int v19 = qword_102419088;
        if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Reset while backgrounded", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419080 != -1) {
            dispatch_once(&qword_102419080, &stru_1022CE188);
          }
          LOWORD(v28[0]) = 0;
          float v21 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSensorFusionServiceLegacy::feedGyroData(const CLGyro::Sample *)", "%s\n", v21);
          if (v21 != (char *)buf) {
            free(v21);
          }
        }
        sub_100B06F54(v6);
      }
    }
  }
  *(double *)(a1 + 280) = v15;
  sub_10053987C(a1, (uint64_t)&v22);
}

void sub_10087D950(uint64_t a1, uint64_t a2)
{
}

double sub_10087D958(uint64_t a1, float32x2_t *a2, float *a3)
{
  return sub_100B07B6C(a1 + 288, a2, a3);
}

double sub_10087D960(uint64_t a1, float32x2_t *a2, float *a3)
{
  return sub_100B07B6C(a1 + 88, a2, a3);
}

void sub_10087D968(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a2 + 12);
  double v5 = *(float *)(a2 + 8);
  double v3 = *(float *)(a2 + 16);
  double v4 = v2;
  sub_100B0889C(a1 + 288, &v5, &v4, &v3, (void *)a2);
}

void sub_10087D9B8(uint64_t a1, uint64_t a2)
{
}

void sub_10087D9C0(id a1)
{
  qword_102419088 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_10087D9F0(uint64_t a1)
{
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_1022CE1A8);
  }
  float v2 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Unregistering for ALS", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_1022CE1A8);
    }
    double v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAmbientLightCollector::CLAmbientLightCollectorImpl::unregisterForAmbientLight()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  double v3 = *(void **)(a1 + 24);
  if (v3)
  {
    [v3 unregisterNotificationForKeys:&off_102397B60];
    [*(id *)(a1 + 24) registerNotificationBlock:0];

    *(void *)(a1 + 24) = 0;
  }
}

void sub_10087DBB0(uint64_t a1)
{
  if (qword_1024194F0 != -1) {
    dispatch_once(&qword_1024194F0, &stru_1022CE1A8);
  }
  float v2 = qword_1024194F8;
  if (os_log_type_enabled((os_log_t)qword_1024194F8, OS_LOG_TYPE_INFO))
  {
    BOOL v3 = *(void *)(a1 + 24) != 0;
    *(_DWORD *)long long buf = 67109120;
    BOOL v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Registering for ALS, hasExistingRegistration, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194F0 != -1) {
      dispatch_once(&qword_1024194F0, &stru_1022CE1A8);
    }
    BOOL v5 = *(void *)(a1 + 24) != 0;
    int v8 = 67109120;
    BOOL v9 = v5;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAmbientLightCollector::CLAmbientLightCollectorImpl::registerForAmbientLight(BOOL)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (!*(void *)(a1 + 24))
  {
    id v4 = objc_alloc_init((Class)BrightnessSystemClient);
    *(void *)(a1 + 24) = v4;
    if (v4)
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      _DWORD v7[2] = sub_100027D3C;
      void v7[3] = &unk_1022C2520;
      _DWORD v7[4] = a1;
      [v4 registerNotificationBlock:v7 forProperties:&off_102397B48];
      [*(id *)(a1 + 24) setProperty:(id)CFMakeCollectable(kCFBooleanTrue) forKey:@"ActivateALS"];
    }
  }
}

void sub_10087DE14()
{
}

uint64_t *sub_10087DE70(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    sub_10087DEEC((uint64_t)a1, v2);
  }
  return a1;
}

void sub_10087DEA8(uint64_t *a1)
{
}

void sub_10087DEB4(uint64_t *a1)
{
}

void sub_10087DEBC(id a1)
{
  qword_1024194F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

void sub_10087DEEC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10087D9F0(a2);
    operator delete();
  }
}

CFTypeRef sub_10087DF4C(int a1, char *name, uint64_t a3)
{
  CFDictionaryRef v4 = IOServiceNameMatching(name);
  if (!v4) {
    return 0;
  }
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v4);
  if (!MatchingService) {
    return 0;
  }
  io_object_t v6 = MatchingService;
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(MatchingService, (CFStringRef)+[NSString stringWithUTF8String:a3], kCFAllocatorDefault, 0);
  IOObjectRelease(v6);
  return CFProperty;
}

const void *sub_10087DFD8(int a1)
{
  CFTypeRef v1 = sub_10087DF4C(a1, "compass", (uint64_t)"compass-calibration");
  if (!v1)
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
    }
    BOOL v5 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Invalid cpas data.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
      }
      float32x4_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CFDataRef CLMagnetometerCoexistenceLocal::copyCompassCalibrationData()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    return 0;
  }
  uint64_t v2 = v1;
  CFTypeID v3 = CFGetTypeID(v1);
  if (v3 != CFDataGetTypeID())
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
    }
    CFDictionaryRef v4 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "The cpas data is not a CFData type.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
      }
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CFDataRef CLMagnetometerCoexistenceLocal::copyCompassCalibrationData()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    CFRelease(v2);
    return 0;
  }
  return v2;
}

BOOL sub_10087E2DC(int a1)
{
  CFDataRef v1 = (const __CFData *)sub_10087DFD8(a1);
  if (v1)
  {
    CFDataRef v2 = v1;
    BytePtr = CFDataGetBytePtr(v1);
    if (!BytePtr)
    {
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
      }
      __int16 v14 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Cpas pointer is NULL.", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_51;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
      }
      double v15 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()", "%s\n");
      goto LABEL_94;
    }
    CFDictionaryRef v4 = (UInt8 *)BytePtr;
    CFIndex Length = CFDataGetLength(v2);
    if (Length < 2) {
      goto LABEL_46;
    }
    CFIndex v6 = Length;
    int v7 = sub_1002F71BC(v4);
    if (v7 == 5 && v6 == 76)
    {
      unint64_t v16 = 5;
    }
    else
    {
      int v9 = v7;
      if (v7 != 6 || v6 != 76)
      {
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
        }
        BOOL v11 = qword_1024190A8;
        if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          LODWORD(v40) = v9;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Unexpected cpas version: %u.", buf, 8u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_51;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 == -1) {
          goto LABEL_93;
        }
LABEL_105:
        dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
LABEL_93:
        double v15 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()", "%s\n");
LABEL_94:
        if (v15 != buf) {
          free(v15);
        }
LABEL_51:
        CFDataRef v18 = 0;
LABEL_52:
        BOOL v13 = 0;
        CFDataRef v22 = v2;
        goto LABEL_53;
      }
      unint64_t v16 = 8;
    }
    CFDataRef v17 = CFDataCreate(kCFAllocatorDefault, v4 + 2, v16);
    if (!v17)
    {
LABEL_46:
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
      }
      long long v29 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "Original serial number data is NULL.", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_51;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 == -1) {
        goto LABEL_93;
      }
      goto LABEL_105;
    }
    CFDataRef v18 = v17;
    unsigned int v19 = CFDataGetBytePtr(v17);
    if (!v19)
    {
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
      }
      long long v32 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "Original serial number pointer is NULL.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
        }
        __int16 v33 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()", "%s\n", v33);
        if (v33 != (char *)buf) {
          free(v33);
        }
      }
      goto LABEL_52;
    }
    float v20 = v19;
    CFDataRef v21 = (const __CFData *)sub_10087DF4C((int)v19, "AppleH4CamIn", (uint64_t)"BackCameraSerialNumber");
    CFDataRef v22 = v21;
    if (!v21 || (CFTypeID v23 = CFGetTypeID(v21), v23 != CFDataGetTypeID()))
    {
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
      }
      double v31 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "Invalid back camera serial number data.", buf, 2u);
      }
      BOOL v13 = 0;
      if (!sub_10013D1A0(115, 0))
      {
LABEL_62:
        CFRelease(v2);
        if (!v22)
        {
LABEL_54:
          if (v18) {
            CFRelease(v18);
          }
          return v13;
        }
LABEL_53:
        CFRelease(v22);
        goto LABEL_54;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
      }
      __int16 v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()", "%s\n", v38);
      if (v38 != (char *)buf) {
        free(v38);
      }
LABEL_100:
      BOOL v13 = 0;
      goto LABEL_62;
    }
    if (CFDataGetLength(v22) == v16)
    {
      uint64_t v24 = CFDataGetBytePtr(v22);
      if (v24)
      {
        if (*v20 == *v24)
        {
          uint64_t v25 = 1;
          do
          {
            unint64_t v26 = v25;
            if (v16 == v25) {
              break;
            }
            int v27 = v20[v25];
            int v28 = v24[v25++];
          }
          while (v27 == v28);
          BOOL v13 = v26 >= v16;
          goto LABEL_62;
        }
        goto LABEL_100;
      }
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
      }
      double v36 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "Current serial number data is NULL.", buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_87;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
      }
      long long v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()", "%s\n", v35);
      if (v35 == (char *)buf)
      {
LABEL_87:
        CFRelease(v2);
        BOOL v13 = 0;
        goto LABEL_53;
      }
    }
    else
    {
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
      }
      long long v34 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 134218240;
        CFIndex v40 = CFDataGetLength(v22);
        __int16 v41 = 2048;
        unint64_t v42 = v16;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "Incorrect back camera serial number length. Actual length %ld. Expected length %lu.", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_87;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
      }
      CFDataGetLength(v22);
      long long v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()", "%s\n", v35);
      if (v35 == (char *)buf) {
        goto LABEL_87;
      }
    }
    free(v35);
    goto LABEL_87;
  }
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
  }
  float32x4_t v12 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Cpas data is NULL.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
    }
    long long v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()", "%s\n", v37);
    if (v37 != (char *)buf) {
      free(v37);
    }
  }
  return 0;
}

NSNumber *sub_10087EE38(int a1)
{
  CFNumberRef v1 = (const __CFNumber *)sub_10087DF4C(a1, "AppleH4CamIn", (uint64_t)"BackCameraModuleFocusActuatorID");
  CFNumberRef v2 = v1;
  int valuePtr = -1;
  if (v1 && (CFTypeID v3 = CFGetTypeID(v1), v3 == CFNumberGetTypeID()))
  {
    if (CFNumberGetType(v2) == kCFNumberSInt32Type)
    {
      if (!CFNumberGetValue(v2, kCFNumberSInt32Type, &valuePtr)) {
        int valuePtr = -1;
      }
    }
    else
    {
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
      }
      BOOL v5 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 67109376;
        int Type = CFNumberGetType(v2);
        __int16 v16 = 1024;
        int v17 = 3;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "VCM actuator ID data type %d does not match expected type %d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
        }
        int v10 = 67109376;
        int v11 = CFNumberGetType(v2);
        __int16 v12 = 1024;
        int v13 = 3;
        int v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "NSNumber *CLMagnetometerCoexistenceLocal::cameraVcmId()", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
    }
  }
  else
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
    }
    CFDictionaryRef v4 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Bailing while checking VCM actuator ID.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
      }
      LOWORD(v10) = 0;
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSNumber *CLMagnetometerCoexistenceLocal::cameraVcmId()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    if (!v2) {
      return 0;
    }
  }
  CFRelease(v2);
  if (valuePtr != -1) {
    return +[NSNumber numberWithInt:](NSNumber, "numberWithInt:");
  }
  return 0;
}

id sub_10087F1E0(int a1)
{
  CFDataRef v1 = (const __CFData *)sub_10087DFD8(a1);
  if (v1)
  {
    CFDataRef v2 = v1;
    BytePtr = CFDataGetBytePtr(v1);
    if (BytePtr)
    {
      CFDictionaryRef v4 = (unsigned __int8 *)BytePtr;
      CFIndex Length = CFDataGetLength(v2);
      if (Length >= 2)
      {
        CFIndex v6 = Length;
        int v7 = sub_1002F71BC(v4);
        id v8 = [(__CFData *)v2 mutableCopy];
        id v9 = v8;
        if (v8)
        {
          if (v7 == 5 && v6 == 76)
          {
            uint64_t v12 = 5;
          }
          else
          {
            if (v7 != 6 || v6 != 76) {
              goto LABEL_27;
            }
            uint64_t v12 = 8;
          }
          [v8 resetBytesInRange:2, v12];
        }
LABEL_27:
        CFRelease(v2);
        return v9;
      }
    }
    else
    {
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
      }
      __int16 v14 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning CPAS pointer is NULL.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
        }
        int v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "NSData *CLMagnetometerCoexistenceLocal::sanitizedCompassCalibrationData()", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
    }
    id v9 = 0;
    goto LABEL_27;
  }
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
  }
  int v13 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning CPAS data is NULL.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022CE1C8);
    }
    __int16 v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "NSData *CLMagnetometerCoexistenceLocal::sanitizedCompassCalibrationData()", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  return 0;
}

void sub_10087F564(id a1)
{
  qword_1024190A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_10087F644(id a1)
{
  qword_10247E6A8 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLLocationCorrectiveCompensatorSilo"];
}

uint64_t sub_10087FAA0(uint64_t a1, void *a2, uint64_t a3)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022CE230);
  }
  CFIndex v6 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = [objc_msgSend(a2, "coarseMetadata") dictionaryRepresentation];
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#compensation GeoLocation coarseMetaData: %@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022CE230);
    }
    *(_DWORD *)__int16 v41 = 138412290;
    *(void *)unint64_t v42 = [objc_msgSend(a2, "coarseMetadata") dictionaryRepresentation];
    __int16 v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLLocationCorrectiveCompensator snapLocation:withReply:]_block_invoke", "%s\n", v33);
    if (v33 != buf) {
      free(v33);
    }
  }
  uint64_t v38 = 0;
  int v7 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", [a2 coarseMetadata], 1, &v38);
  if (v38)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022CE230);
    }
    id v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v38;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#compensation GeoLocation coarseMetaData encoding failed, error, %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CE230);
      }
      *(_DWORD *)__int16 v41 = 138412290;
      *(void *)unint64_t v42 = v38;
      long long v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLLocationCorrectiveCompensator snapLocation:withReply:]_block_invoke", "%s\n", v34);
      if (v34 != buf) {
        free(v34);
      }
    }
  }
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&buf[44] = _Q0;
  *(_OWORD *)&buf[60] = _Q0;
  *(_DWORD *)long long buf = 0xFFFF;
  *(_DWORD *)&buf[84] = 0;
  *(void *)&buf[88] = 0xBFF0000000000000;
  *(void *)&v56[20] = 0xBFF0000000000000;
  *(_DWORD *)int v56 = 0;
  *(_DWORD *)&v56[28] = 0x7FFFFFFF;
  memset(v57, 0, 25);
  [objc_msgSend(a2, "latLng") lat];
  *(void *)&uint8_t buf[4] = v14;
  [objc_msgSend(a2, "latLng") lng];
  *(void *)&unsigned char buf[12] = v15;
  [objc_msgSend(a2, "latLng") lat];
  *(void *)&v56[4] = v16;
  [objc_msgSend(a2, "latLng") lng];
  *(void *)&v56[12] = v17;
  [a2 timestamp];
  *(void *)&buf[76] = v18;
  *(double *)&unsigned char buf[28] = (double)(int)[a2 altitude];
  [a2 horizontalAccuracy];
  *(void *)&buf[20] = v19;
  [a2 verticalAccuracy];
  *(void *)&buf[36] = v20;
  unsigned int v21 = [a2 referenceFrame];
  if (v21 <= 2) {
    *(_DWORD *)&v57[4] = v21;
  }
  [a2 speed];
  *(void *)&buf[44] = v22;
  [a2 course];
  if (v23 < 360.0)
  {
    [a2 course];
    if (v24 >= 0.0)
    {
      [a2 course];
      *(void *)&buf[60] = v25;
    }
  }
  sub_101171D90((uint64_t)v37);
  sub_1000F1268(v37, a1 + 40, (uint64_t)buf);
  double v27 = v26;
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022CE230);
  }
  int v28 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int16 v41 = 68290563;
    *(_DWORD *)unint64_t v42 = 0;
    *(_WORD *)&v42[4] = 2082;
    *(void *)&v42[6] = "";
    __int16 v43 = 1040;
    int v44 = 156;
    __int16 v45 = 2097;
    uint64_t v46 = a1 + 40;
    __int16 v47 = 1040;
    int v48 = 156;
    __int16 v49 = 2097;
    std::string v50 = buf;
    __int16 v51 = 2050;
    double v52 = v27;
    __int16 v53 = 2050;
    uint64_t v54 = a3;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Location #compensation Snapping\", \"Input\":%{private, location:CLClientLocation}.*P, \"Output\":%{private, location:CLClientLocation}.*P, \"distance\":\"%{public}f\", \"GeoResultCode\":%{public}ld}", v41, 0x46u);
  }
  v39[0] = @"Distance";
  long long v29 = +[NSNumber numberWithDouble:v27];
  v39[1] = @"GeoResultCode";
  v40[0] = v29;
  v40[1] = +[NSNumber numberWithInteger:a3];
  +[NSDictionary dictionaryWithObjects:v40 forKeys:v39 count:2];
  AnalyticsSendEvent();
  uint64_t v30 = *(void *)(a1 + 32);
  id v31 = objc_alloc((Class)CLLocation);
  v35[6] = *(_OWORD *)v56;
  v35[7] = *(_OWORD *)&v56[16];
  v36[0] = *(_OWORD *)v57;
  *(_OWORD *)((char *)v36 + 12) = *(_OWORD *)&v57[12];
  v35[2] = *(_OWORD *)&buf[32];
  v35[3] = *(_OWORD *)&buf[48];
  v35[4] = *(_OWORD *)&buf[64];
  v35[5] = *(_OWORD *)&buf[80];
  v35[0] = *(_OWORD *)buf;
  v35[1] = *(_OWORD *)&buf[16];
  return (*(uint64_t (**)(uint64_t, id, BOOL, NSData *))(v30 + 16))(v30, [v31 initWithClientLocation:v35], ((a3 - 1) & 0xFFFFFFFFFFFFFFFDLL) == 0, v7);
}

void sub_1008800C8(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_1008805FC(unsigned char *a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        LODWORD(v6) = 0;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v6) = 0;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((unsigned __int16)(v6 >> 3))
    {
      case 1u:
        a1[48] |= 1u;
        unint64_t v13 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v13 <= 0xFFFFFFFFFFFFFFF7 && v13 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v14 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v13);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v13 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v14 = 0;
        }
        uint64_t v20 = 8;
        goto LABEL_43;
      case 2u:
        a1[48] |= 2u;
        unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v16 <= 0xFFFFFFFFFFFFFFF7 && v16 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v14 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v14 = 0;
        }
        uint64_t v20 = 16;
        goto LABEL_43;
      case 3u:
        a1[48] |= 4u;
        unint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 <= 0xFFFFFFFFFFFFFFF7 && v17 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v14 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v14 = 0;
        }
        uint64_t v20 = 24;
        goto LABEL_43;
      case 4u:
        a1[48] |= 8u;
        unint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v18 <= 0xFFFFFFFFFFFFFFF7 && v18 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v14 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v14 = 0;
        }
        uint64_t v20 = 32;
LABEL_43:
        *(void *)&a1[v20] = v14;
        goto LABEL_44;
      case 5u:
        uint64_t v19 = objc_alloc_init(TRANSITPbRegionPreloadTile);
        [a1 addTiles:v19];

        if PBReaderPlaceMark() && (sub_1004B9AB4((uint64_t)v19, a2))
        {
          PBReaderRecallMark();
LABEL_44:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_44;
    }
  }
}

_OWORD *sub_100881364(_OWORD *a1, uint64_t a2)
{
  a1[1] = 0u;
  *a1 = 0u;
  sub_100881954((uint64_t)(a1 + 2), a2);
  return a1;
}

void sub_1008813A8(_Unwind_Exception *a1)
{
  uint64_t v5 = v1[3];
  v1[3] = 0;
  if (v5) {
    operator delete();
  }
  sub_101A72184(v3, v2, v1);
  _Unwind_Resume(a1);
}

BOOL sub_1008813E8(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t v2 = 1;
      if (!*a1) {
        operator new();
      }
      return v2;
    case 1:
      if (!a1[1]) {
        operator new();
      }
      return *a1 || a1[1] || a1[2] || a1[3] != 0;
    case 2:
      if (!a1[2]) {
        operator new();
      }
      return *a1 || a1[1] || a1[2] || a1[3] != 0;
    case 3:
      if (!a1[3]) {
        operator new();
      }
      return *a1 || a1[1] || a1[2] || a1[3] != 0;
    default:
      return *a1 || a1[1] || a1[2] || a1[3] != 0;
  }
}

void sub_10088164C()
{
}

BOOL sub_10088169C(uint64_t *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t v3 = *a1;
      *a1 = 0;
      if (v3) {
        goto LABEL_9;
      }
      goto LABEL_11;
    case 1:
      uint64_t v4 = a1[1];
      a1[1] = 0;
      if (v4) {
        goto LABEL_9;
      }
      break;
    case 2:
      uint64_t v5 = a1[2];
      a1[2] = 0;
      if (v5) {
        goto LABEL_9;
      }
      break;
    case 3:
      uint64_t v6 = a1[3];
      a1[3] = 0;
      if (v6) {
LABEL_9:
      }
        operator delete();
      return result;
    default:
      break;
  }
  if (*a1) {
    return 1;
  }
LABEL_11:
  if (a1[1] || a1[2]) {
    return 1;
  }
  return a1[3] != 0;
}

uint64_t sub_10088179C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)result;
  int v4 = 0;
  uint64_t v5 = result + 32;
  uint64_t v6 = (int *)(result + 64);
  uint64_t v7 = result + 72;
  do
  {
    switch(v4)
    {
      case 0:
        BOOL result = *v3;
        if (!*v3) {
          goto LABEL_13;
        }
        BOOL result = sub_100F33DCC(result, a2, (uint64_t)&v10);
        if (!result) {
          goto LABEL_13;
        }
        uint64_t v8 = v5;
        int v9 = 0;
        break;
      case 1:
        BOOL result = v3[1];
        if (!result) {
          goto LABEL_13;
        }
        BOOL result = sub_1004E2140(result, a2, v6, v7, (uint64_t)&v10);
        if (!result) {
          goto LABEL_13;
        }
        uint64_t v8 = v5;
        int v9 = 1;
        break;
      case 2:
        BOOL result = v3[2];
        if (!result) {
          goto LABEL_13;
        }
        BOOL result = sub_10082BA6C(result, a2, v6, (uint64_t)&v10);
        if (!result) {
          goto LABEL_13;
        }
        uint64_t v8 = v5;
        int v9 = 2;
        break;
      case 3:
        BOOL result = v3[3];
        if (result)
        {
          BOOL result = sub_100763360(result, a2, (uint64_t)&v10);
          if (result) {
            return sub_100881900(v5, 3);
          }
        }
        return result;
      default:
        goto LABEL_13;
    }
    BOOL result = sub_100881900(v8, v9);
LABEL_13:
    ++v4;
  }
  while (v4 != 4);
  return result;
}

uint64_t sub_100881900(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_100881954(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1008819EC(void *result)
{
  if (result)
  {
    id v1 = [[objc_msgSend(result, "lastPathComponent") componentsSeparatedByString:@"-"];
    if ((unint64_t)[v1 count] >= 3)
    {
      [v1 objectAtIndex:1].doubleValue
      uint64_t v3 = v2;
      [v1 objectAtIndex:2] intValue];
      return (void *)v3;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *sub_100881A78(void *a1)
{
  id v1 = [a1 path];

  return sub_1008819EC(v1);
}

NSString *sub_100881AA0(uint64_t a1, uint64_t a2)
{
  return +[NSString stringWithFormat:@"secondary-%f-%zu", a1, a2];
}

id sub_100881AD8(void *a1)
{
  id v2 = objc_alloc_init((Class)NSMutableData);
  [v2 setLength:20];
  CC_SHA1([a1 bytes], (CC_LONG)[a1 length], (unsigned __int8 *)[v2 mutableBytes]);

  return v2;
}

uint64_t sub_100881B5C(void *a1)
{
  uint64_t v2 = open_dprotected_np((const char *)[a1 UTF8String], 521, 2, 0, 416);
  if (v2 == -1)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022CE250);
    }
    uint64_t v3 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = __error();
      uint64_t v5 = strerror(*v4);
      *(_DWORD *)long long buf = 68289539;
      int v8 = 0;
      __int16 v9 = 2082;
      long long v10 = "";
      __int16 v11 = 2082;
      uint64_t v12 = v5;
      __int16 v13 = 2113;
      uint64_t v14 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning open failed\", \"errno\":%{public, location:escape_only}s, \"path\":%{private, location:escape_only}@}", buf, 0x26u);
    }
  }
  return v2;
}

uint64_t sub_100881C8C(void *a1)
{
  uint64_t v2 = open((const char *)[a1 UTF8String], 0);
  if (v2 == -1)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022CE250);
    }
    uint64_t v3 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = __error();
      uint64_t v5 = strerror(*v4);
      v7[0] = 68289539;
      v7[1] = 0;
      __int16 v8 = 2082;
      __int16 v9 = "";
      __int16 v10 = 2082;
      __int16 v11 = v5;
      __int16 v12 = 2113;
      __int16 v13 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning open failed\", \"errno\":%{public, location:escape_only}s, \"path\":%{private, location:escape_only}@}", (uint8_t *)v7, 0x26u);
    }
  }
  return v2;
}

BOOL sub_100881DAC(void *a1, void *a2, int a3)
{
  uint64_t v6 = sub_100881B5C(a1);
  uint64_t v7 = sub_100881C8C(a2);
  if (v6 == -1 || (int v8 = v7, v7 == -1))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022CE250);
    }
    uint64_t v14 = qword_102419568;
    uint64_t v10 = 0;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 68289539;
      int v19 = 0;
      __int16 v20 = 2082;
      unsigned int v21 = "";
      __int16 v22 = 2113;
      double v23 = a1;
      __int16 v24 = 2113;
      uint64_t v25 = a2;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning failed to concatenate files\", \"leading\":%{private, location:escape_only}@, \"trailing\":%{private, location:escape_only}@}", buf, 0x26u);
      return 0;
    }
  }
  else
  {
    id v9 = [objc_alloc((Class)NSData) _cl_initWithFileDescriptor:v7];
    uint64_t v10 = 1;
    id v11 = [objc_alloc((Class)NSFileHandle) initWithFileDescriptor:v6 closeOnDealloc:1];
    [v11 writeData:v9];

    close(v8);
    if (a3
      && [+[NSFileManager defaultManager] fileExistsAtPath:a2])
    {
      unint64_t v17 = 0;
      [+[NSFileManager defaultManager] removeItemAtPath:a2 error:&v17];
      if (v17)
      {
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022CE250);
        }
        __int16 v12 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 68289539;
          int v19 = 0;
          __int16 v20 = 2082;
          unsigned int v21 = "";
          __int16 v22 = 2113;
          double v23 = a2;
          __int16 v24 = 2113;
          uint64_t v25 = v17;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"failed to remove fs item\", \"path\":%{private, location:escape_only}@, \"error\":%{private, location:escape_only}@}", buf, 0x26u);
          if (qword_102419560 != -1) {
            dispatch_once(&qword_102419560, &stru_1022CE250);
          }
        }
        __int16 v13 = qword_102419568;
        if (os_signpost_enabled((os_log_t)qword_102419568))
        {
          *(_DWORD *)long long buf = 68289539;
          int v19 = 0;
          __int16 v20 = 2082;
          unsigned int v21 = "";
          __int16 v22 = 2113;
          double v23 = a2;
          __int16 v24 = 2113;
          uint64_t v25 = v17;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "failed to remove fs item", "{\"msg%{public}.0s\":\"failed to remove fs item\", \"path\":%{private, location:escape_only}@, \"error\":%{private, location:escape_only}@}", buf, 0x26u);
        }
      }
      else
      {
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022CE250);
        }
        uint64_t v15 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 68289283;
          int v19 = 0;
          __int16 v20 = 2082;
          unsigned int v21 = "";
          __int16 v22 = 2113;
          double v23 = a2;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"removed fs item\", \"path\":%{private, location:escape_only}@}", buf, 0x1Cu);
        }
      }
      return v17 == 0;
    }
  }
  return v10;
}

void sub_100882154(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_100882188(uint64_t a1, uint64_t a2)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022CE270);
  }
  uint64_t v3 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Fence: CLFenceSettingsOta - Updating settings via OTA.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022CE270);
    }
    LOWORD(v22[0]) = 0;
    id v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSettingsOta::updateSettings(const CLNameValuePair &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  sub_101142AB8();
  sub_1000E9354(v22);
  if (sub_100012960(a2, "Geofence", v22))
  {
    sub_1000E9354(v21);
    if (sub_100012960((uint64_t)v22, "GeofenceClassifier", v21))
    {
      v19[0] = 0;
      if (sub_1000D2988((uint64_t)v21, "usePreciseFencesForAll", v19)) {
        byte_1024760C0 = v19[0];
      }
      if (sub_1000D2988((uint64_t)v21, "usePreciseFencesForHelperFence", v19)) {
        byte_1024760C1 = v19[0];
      }
      if (sub_1000D2988((uint64_t)v21, "useVisitEventsForSignificationMonitoring", v19)) {
        byte_1024760C2 = v19[0];
      }
      *(void *)long long buf = 0;
      if (sub_1000A699C((uint64_t)v21, "fenceEffectiveMinimumRadiusHighAccuracy", buf)) {
        qword_1024760C8 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "fenceEffectiveMinimumRadiusHighAccuracyUrban", buf)) {
        qword_1024760D0 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "fenceEffectiveMinimumRadiusNormalAccuracy", buf)) {
        qword_1024760D8 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "helperFenceRadiusScaleFactor", buf)) {
        qword_1024760E0 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "maxRadiusForLocationType", buf)) {
        qword_1024760E8 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "maxRadiusForEnvironmentType", buf)) {
        qword_1024760F0 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "largeFenceExitRadiusOffset", buf)) {
        qword_1024760F8 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "largeFenceEntryRadiusOffset", buf)) {
        qword_102476100 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "unknownFineMediumFenceExitRadiusOffset", buf)) {
        qword_102476108 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "fineMediumFenceExitRadiusOffsetForCellWifiOn", buf)) {
        qword_102476110 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "fineMediumFenceExitRadiusOffsetForCellWifiOff", buf)) {
        qword_102476118 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "fineMediumFenceExitRadiusOffsetForLacWifiOn", buf)) {
        qword_102476120 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "fineMediumFenceExitRadiusOffsetForLacWifiOff", buf)) {
        qword_102476128 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "fineMediumFenceExitRadiusOffsetOnCoarse", buf)) {
        qword_102476130 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "fineMediumFenceEntryRadiusScaleFactorOnCoarse", buf)) {
        qword_102476138 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "fineMediumFenceExitRadiusOffsetWifi", buf)) {
        qword_102476140 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "fineMediumFenceGpsExitRadiusOffsetWifiOn", buf)) {
        qword_102476148 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "fineMediumFenceGpsExitRadiusOffsetWifiOff", buf)) {
        qword_102476150 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "fineMediumPreciseFenceGpsExitRadiusOffsetWifiOn", buf)) {
        qword_102476158 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "fineMediumPreciseFenceGpsExitRadiusOffsetWifiOff", buf)) {
        qword_102476160 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "fineMediumFenceExitAccurateLocationUncFactor", buf)) {
        qword_102476168 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "fineMediumFenceEntryAccurateLocationUncFactor", buf)) {
        qword_102476170 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "fineMediumFenceExitInaccurateLocationUncFactor", buf)) {
        qword_102476178 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "fineMediumFenceEntryInaccurateLocationUncFactor", buf)) {
        qword_102476180 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "loiFenceRadiusChangeThreshold", buf)) {
        qword_102476188 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "loiFenceDistanceChangeThreshold", buf)) {
        qword_102476190 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "locationSignificantChangeMinInterval", buf)) {
        qword_102476198 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "locationSignificantChangeMinDistance", buf)) {
        qword_1024761A0 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "locationSignificantChangeLowAccuracyThreshold", buf)) {
        qword_1024761A8 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "accurateLocationThreshold", buf)) {
        qword_1024761B0 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "accurateGpsLocationPaddingThreshold", buf)) {
        qword_1024761B8 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "gpsHAccMultiplicationFactor", buf)) {
        qword_1024761C0 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "pipelineHAccMultiplicationFactor", buf)) {
        qword_1024761C8 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "cellHAccMultiplicationFactor", buf)) {
        qword_1024761D0 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "locationSessionStartWindowSec", buf)) {
        qword_1024761D8 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "locationSessionIntervalFromLastLocationSec", buf)) {
        qword_1024761E0 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "minWifiUnc", buf)) {
        qword_1024761E8 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "minGpsUnc", buf)) {
        qword_1024761F0 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "maxHorizontalAccuracy", buf)) {
        qword_1024761F8 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "cellTypeMinimumHorizontalAccuracy", buf)) {
        qword_102476200 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "circularEmergencyFenceOffset", buf)) {
        qword_102476208 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "polygonalEntryLocationAccuracyThreshold", buf)) {
        qword_102476218 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "polygonalEntryLocationAccuracyScaleFactor", buf)) {
        qword_102476220 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "polygonalExitLocationAccuracyScaleFactor", buf)) {
        qword_102476228 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "polygonalExitHysteresisBuffer", buf)) {
        qword_102476230 = *(void *)buf;
      }
      if (sub_1000D2988((uint64_t)v21, "useMiLo", v19)) {
        byte_102476238 = v19[0];
      }
      if (sub_1000D2988((uint64_t)v21, "collectMiLoHomeLoiMetricsForInternalUsers", v19)) {
        byte_102476239 = v19[0];
      }
      if (sub_1000D2988((uint64_t)v21, "collectMiLoHomeLoiMetricsForAllUsers", v19)) {
        byte_10247623A = v19[0];
      }
      if (sub_1000A699C((uint64_t)v21, "maxMiLoAge", buf)) {
        qword_102476240 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "homeLoiProbabilityThreshold", buf)) {
        qword_102476248 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "maxWaitTimeToReceiveMiLoEventUpdate", buf)) {
        qword_102476250 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v21, "maxGpsHomeLoiExitTimeDiff", buf)) {
        qword_102476258 = *(void *)buf;
      }
      if (sub_1000D2988((uint64_t)v21, "collectGpsOpportunisticallyForMiLoMetrics", v19)) {
        byte_102476260 = v19[0];
      }
      if (sub_1000D2988((uint64_t)v21, "inflateGpsUncertaintyOnExitForSignalStrength", v19)) {
        byte_102476261 = v19[0];
      }
      LODWORD(v20[0]) = 0;
      if (sub_10006EF84((uint64_t)v21, "gnssConvergenceShortCount", v20)) {
        dword_102476264 = v20[0];
      }
      if (sub_10006EF84((uint64_t)v21, "gnssConvergenceLongCount", v20)) {
        dword_102476268 = v20[0];
      }
    }
    else
    {
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022CE270);
      }
      uint64_t v6 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Fence: CLFenceSettingsOta - \"Geofence::GeofenceClassifier\" not available", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022CE270);
        }
        LOWORD(v20[0]) = 0;
        __int16 v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSettingsOta::updateSettings(const CLNameValuePair &)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
    }
    sub_1000E9354(v20);
    if (sub_100012960((uint64_t)v22, "GeofenceEPNO", v20))
    {
      *(_DWORD *)int v19 = 0;
      *(void *)long long buf = 0;
      v18[0] = 0;
      if (sub_1004D0870((uint64_t)v20, "numTiles", v19)) {
        dword_102476270 = *(_DWORD *)v19;
      }
      if (sub_1000A699C((uint64_t)v20, "radiusFactorEntryThreshold", buf)) {
        qword_102476278 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v20, "radiusFactor", buf)) {
        qword_102476280 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v20, "maxRadius", buf)) {
        qword_102476288 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v20, "minRadius", buf)) {
        qword_102476290 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v20, "currentlySeenReachThreshold", buf)) {
        qword_102476298 = *(void *)buf;
      }
      if (sub_1000D2988((uint64_t)v20, "throttleEpnoWakes", v18)) {
        byte_1024762A0 = v18[0];
      }
    }
    else
    {
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022CE270);
      }
      uint64_t v7 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Fence: CLFenceSettingsOta - \"Geofence::GeofenceEPNO\" not available", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022CE270);
        }
        *(_WORD *)int v19 = 0;
        __int16 v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSettingsOta::updateSettings(const CLNameValuePair &)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
    sub_1000E9354(v19);
    if (sub_100012960((uint64_t)v22, "GeofenceGpsUncertaintyInflation", v19))
    {
      v16[0] = 0;
      if (sub_1000D2988((uint64_t)v19, "inflateGpsLocationsIfSignalStrengthNotReported", v16)) {
        byte_1024762A8 = v16[0];
      }
      *(_DWORD *)unint64_t v18 = 0;
      if (sub_10006EF84((uint64_t)v19, "minimumNumberOfTrackedSignalsStrong", v18)) {
        dword_1024762B0 = *(_DWORD *)v18;
      }
      if (sub_10006EF84((uint64_t)v19, "minimumNumberOfTrackedSignals", v18)) {
        dword_1024762AC = *(_DWORD *)v18;
      }
      *(void *)long long buf = 0;
      if (sub_1000A699C((uint64_t)v19, "signalStrengthStrong", buf)) {
        qword_1024762B8 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v19, "horizontalAccuracyForWeakSignals", buf)) {
        qword_1024762C0 = *(void *)buf;
      }
    }
    else
    {
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022CE270);
      }
      int v8 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Fence: CLFenceSettingsOta - \"Geofence::GeofenceGpsUncertaintyInflation\" not available", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022CE270);
        }
        *(_WORD *)unint64_t v18 = 0;
        uint64_t v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSettingsOta::updateSettings(const CLNameValuePair &)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
    }
    sub_1000E9354(v18);
    if (sub_100012960((uint64_t)v22, "GeofenceFastEntry", v18))
    {
      char v17 = 0;
      *(void *)long long buf = 0;
      *(_DWORD *)unint64_t v16 = 0;
      if (sub_1000D2988((uint64_t)v18, "enabled", (BOOL *)&v17)) {
        byte_1024762C8 = v17;
      }
      if (sub_1000A699C((uint64_t)v18, "convergenceTimerIntervalNearMax", buf)) {
        qword_1024762D0 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v18, "convergenceTimerIntervalNearMin", buf)) {
        qword_1024762D8 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v18, "convergenceTimerIntervalAdjacent", buf)) {
        qword_1024762E0 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v18, "convergenceStateDistanceThresholdNear", buf)) {
        qword_1024762E8 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v18, "convergenceStateDistanceThresholdAdjacent", buf)) {
        qword_1024762F0 = *(void *)buf;
      }
      if (sub_10006EF84((uint64_t)v18, "maximumLocationBufferSize", v16)) {
        dword_1024762F8 = *(_DWORD *)v16;
      }
      if (sub_10006EF84((uint64_t)v18, "converganceAttemptsPerWindow", v16)) {
        dword_1024762FC = *(_DWORD *)v16;
      }
      if (sub_1000A699C((uint64_t)v18, "convergenceBudgetWindow", buf)) {
        qword_102476300 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v18, "convergenceAttemptMaxDuration", buf)) {
        qword_102476308 = *(void *)buf;
      }
      if (sub_1000A699C((uint64_t)v18, "convergenceAttemptMaxGNSSDuration", buf)) {
        qword_102476310 = *(void *)buf;
      }
    }
    else
    {
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022CE270);
      }
      id v9 = qword_1024193C8;
      if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Fence: CLFenceSettingsOta - \"Geofence::GeofenceFastEntry\" not available", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193C0 != -1) {
          dispatch_once(&qword_1024193C0, &stru_1022CE270);
        }
        *(_WORD *)unint64_t v16 = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSettingsOta::updateSettings(const CLNameValuePair &)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
    }
    sub_10013F3C4(v18);
    sub_10013F3C4(v19);
    sub_10013F3C4(v20);
    sub_10013F3C4(v21);
  }
  else
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022CE270);
    }
    int v4 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: CLFenceSettingsOta - \"Geofence\" not available", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_1022CE270);
      }
      LOWORD(v21[0]) = 0;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFenceSettingsOta::updateSettings(const CLNameValuePair &)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return sub_10013F3C4(v22);
}

void sub_10088382C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va4, a5);
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v15 = va_arg(va4, void);
  uint64_t v17 = va_arg(va4, void);
  sub_10013F3C4((uint64_t *)va);
  sub_10013F3C4((uint64_t *)va1);
  sub_10013F3C4((uint64_t *)va2);
  sub_10013F3C4((uint64_t *)va3);
  sub_10013F3C4(va4);
  _Unwind_Resume(a1);
}

void sub_1008838CC(id a1)
{
  qword_1024193C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_100883B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100883B30(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 8) hasChanges];
  if (result)
  {
    uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 8);
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8) + 40;
    return _[v3 save:v4];
  }
  return result;
}

void sub_100883C7C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_100883C94(void *a1)
{
  id v2 = [objc_alloc((Class)NSFetchRequest) initWithEntityName:a1[4]];
  [v2 setPredicate:[NSCompoundPredicate andPredicateWithSubpredicates:a1[5]]];
  id v3 = [objc_alloc((Class)NSBatchDeleteRequest) initWithFetchRequest:v2];
  [*(id *)(a1[6] + 8) executeRequest:v3 error:*(void *)(a1[7] + 8) + 40];
}

void sub_100883EA0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100883ECC(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSFetchRequest);
  [v2 setEntity:[NSEntityDescription entityForName:inManagedObjectContext:](NSEntityDescription, "entityForName:inManagedObjectContext:", *(void *)(a1 + 32), *(void *)(*(void *)(a1 + 40) + 8))];
  [v2 setPredicate:[NSCompoundPredicate andPredicateWithSubpredicates:*(void *)(a1 + 48)]];
  id v3 = [*(id *)(*(void *)(a1 + 40) + 8) executeFetchRequest:v2 error:*(void *)(*(void *)(a1 + 56) + 8) + 40];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _OWORD v5[2] = sub_100883FB8;
  v5[3] = &unk_1022CE2E8;
  long long v4 = *(_OWORD *)(a1 + 64);
  long long v6 = *(_OWORD *)(a1 + 32);
  long long v7 = v4;
  [v3 enumerateObjectsUsingBlock:v5];
}

id sub_100883FB8(uint64_t a1, void *a2)
{
  long long v4 = +[NSString stringWithFormat:@"managedObject of class %@ must respond to convert selector", NSClassFromString(*(NSString **)(a1 + 32))];
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    [+[NSAssertionHandler currentHandler] handleFailureInMethod:*(void *)(a1 + 56) object:*(void *)(a1 + 40) file:@"CLStore.m" lineNumber:102 description:v4];
  }
  id result = [a2 performSelector:"convert"];
  if (result)
  {
    id v6 = result;
    long long v7 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    return [v7 addObject:v6];
  }
  return result;
}

void sub_1008841B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

id sub_1008841D8(void *a1)
{
  id v2 = +[NSFetchRequest fetchRequestWithEntityName:a1[4]];
  [(NSFetchRequest *)v2 setPredicate:+[NSCompoundPredicate andPredicateWithSubpredicates:a1[5]]];
  id result = [*(id *)(a1[6] + 8) countForFetchRequest:v2 error:*(void *)(a1[8] + 8) + 40];
  *(void *)(*(void *)(a1[7] + 8) + 24) = result;
  return result;
}

void sub_100884310(id a1)
{
  qword_10247E6B8 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLLocationStreamerSilo"];
}

void sub_100884388(id a1)
{
  if (objc_opt_class())
  {
    sub_100103240();
    if (sub_1007414F8())
    {
      sub_100103240();
      if (sub_100106424()) {
        byte_10247E6C8 = 1;
      }
    }
  }
}

void sub_1008849B0()
{
  if (*(char *)(v0 - 89) < 0) {
    operator delete(*(void **)(v0 - 112));
  }
  operator delete();
}

id sub_1008849FC(uint64_t a1)
{
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_1022CE398);
  }
  id v2 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    id v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Stop timer fired\"}", (uint8_t *)v4, 0x12u);
  }
  return [*(id *)(a1 + 32) stopLocation];
}

id sub_100884AE0(uint64_t a1)
{
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_1022CE398);
  }
  id v2 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    id v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Motion alarm stop timer fired\"}", (uint8_t *)v4, 0x12u);
  }
  return [*(id *)(a1 + 32) stopMotionAlarm];
}

id sub_100884BC4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onLocationNotification:a2 withData:a3];
}

id sub_100884BD4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onMotionStateNotification:a2 withData:a3];
}

id sub_100884BE4(uint64_t a1)
{
  if (qword_102419540 != -1) {
    dispatch_once(&qword_102419540, &stru_1022CE398);
  }
  id v2 = qword_102419548;
  if (os_log_type_enabled((os_log_t)qword_102419548, OS_LOG_TYPE_INFO))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    id v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Repeating motion state\"}", (uint8_t *)v4, 0x12u);
  }
  return [*(id *)(a1 + 32) sendMotionState];
}

id sub_100884CC8(uint64_t a1)
{
  [*(id *)(a1 + 32) sendAliveAgainMessage];
  [objc_msgSend(*(id *)(a1 + 32), "aliveAgainThrottleTimer") invalidate];
  id v2 = *(void **)(a1 + 32);

  return [v2 setAliveAgainThrottleTimer:0];
}

uint64_t *sub_100884E1C(uint64_t **a1, uint64_t *a2)
{
  id result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1008873D0(result);
    operator delete();
  }
  return result;
}

void sub_1008859E8(uint64_t a1)
{
}

void sub_100885AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void sub_100886864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008872C0(id a1)
{
  qword_102419548 = (uint64_t)os_log_create("com.apple.locationd.Core", "Streaming");
}

uint64_t sub_1008872F0(uint64_t a1, long long *a2, void *a3, uint64_t a4, double a5)
{
  *(void *)a1 = 0;
  id v9 = [a3 newTimer];
  *(void *)(a1 + 8) = v9;
  *(double *)(a1 + 16) = a5;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 24), *(void **)a2, *((void *)a2 + 1));
    id v9 = *(id *)(a1 + 8);
  }
  else
  {
    long long v10 = *a2;
    *(void *)(a1 + 40) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 24) = v10;
  }
  [v9 setHandler:a4];
  return a1;
}

void sub_10088737C(_Unwind_Exception *exception_object)
{
  if (*((char *)v1 + 47) < 0) {
    operator delete(*v2);
  }
  uint64_t v4 = *v1;
  uint64_t *v1 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1008873D0(uint64_t *a1)
{
  [(id)a1[1] invalidate];

  if (*((char *)a1 + 47) < 0) {
    operator delete((void *)a1[3]);
  }
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_100887448()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D50F4C;
      v0[3] = unk_101D50F5C;
      v0[4] = xmmword_101D50F6C;
      v0[0] = xmmword_101D50F2C;
      v0[1] = unk_101D50F3C;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_100887528(_Unwind_Exception *a1)
{
}

double sub_100887540()
{
  double result = 30.0;
  qword_10247E6D8 = 0x403E000000000000;
  return result;
}

uint64_t sub_100887558()
{
  return AnalyticsSendEventLazy();
}

NSDictionary *sub_1008875CC(uint64_t a1)
{
  v5[0] = @"boutType";
  v6[0] = +[NSNumber numberWithInt:*(unsigned __int8 *)(*(void *)(a1 + 32) + 1)];
  v5[1] = @"duration";
  *(float *)&double v2 = (float)*(unint64_t *)(*(void *)(a1 + 32) + 2);
  v6[1] = +[NSNumber numberWithFloat:v2];
  _OWORD v5[2] = @"timeSinceLastBout";
  *(float *)&double v3 = (float)*(unint64_t *)(*(void *)(a1 + 32) + 10);
  uint64_t v6[2] = +[NSNumber numberWithFloat:v3];
  return +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:3];
}

uint64_t sub_1008876A4(uint64_t a1)
{
  double v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100887788(id a1)
{
  qword_10247E6E0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLCorrectiveCompensatedLocationProviderSilo"];
}

uint64_t sub_100887848(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100887E10;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_10247E6F0 != -1) {
    dispatch_once(&qword_10247E6F0, block);
  }
  return qword_10248A3F0;
}

id sub_100887AE4(id *a1, uint64_t a2)
{
  *(void *)&v16[4] = 0;
  *(void *)&v16[12] = 0;
  *(_OWORD *)&v16[20] = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v16[36] = _Q0;
  *(_OWORD *)&v16[52] = _Q0;
  *(_OWORD *)&v16[68] = _Q0;
  *(_DWORD *)unint64_t v16 = 0xFFFF;
  *(_DWORD *)&v16[84] = 0;
  *(void *)&v16[88] = 0xBFF0000000000000;
  long long v17 = 0uLL;
  *(void *)((char *)&v18 + 4) = 0xBFF0000000000000;
  LODWORD(v18) = 0;
  HIDWORD(v18) = 0x7FFFFFFF;
  memset(v19, 0, 25);
  if ((*((unsigned int (**)(id *, unsigned char *))*a1 + 29))(a1, v16)
    && sub_1000E6DB4((uint64_t)v16)
    && (double v9 = *(double *)&v16[20], *(double *)&v16[20] > 0.0))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022CE620);
    }
    long long v10 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      uint64_t buf = 68289539;
      __int16 v21 = 2082;
      __int16 v22 = "";
      __int16 v23 = 1040;
      int v24 = 156;
      __int16 v25 = 2097;
      double v26 = v16;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#cclp passing cached location to reply\", \"location\":%{private, location:CLClientLocation}.*P}", (uint8_t *)&buf, 0x22u);
    }
    v14[6] = v17;
    v14[7] = v18;
    v15[0] = *(_OWORD *)v19;
    *(_OWORD *)((char *)v15 + 12) = *(_OWORD *)&v19[12];
    int v14[2] = *(_OWORD *)&v16[32];
    v14[3] = *(_OWORD *)&v16[48];
    void v14[4] = *(_OWORD *)&v16[64];
    void v14[5] = *(_OWORD *)&v16[80];
    v14[0] = *(_OWORD *)v16;
    v14[1] = *(_OWORD *)&v16[16];
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(a2 + 16))(a2, 1, v14);
  }
  else
  {
    id v12 = [objc_msgSend(a1[4], "vendor", v9) proxyForService:@"CLLocationController" forClient:@"CLCorrectiveCompensatedLocationProvider"];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    _OWORD v13[2] = sub_100889BFC;
    void v13[3] = &unk_1022CE550;
    void v13[4] = a2;
    v13[5] = a1;
    return [v12 fetchLocationWithReply:v13];
  }
}

uint64_t sub_100887D4C(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  long long v4 = a3[7];
  long long v16 = a3[6];
  long long v17 = v4;
  v18[0] = a3[8];
  *(_OWORD *)((char *)v18 + 12) = *(long long *)((char *)a3 + 140);
  long long v5 = a3[3];
  long long v12 = a3[2];
  long long v13 = v5;
  long long v6 = a3[5];
  long long v14 = a3[4];
  long long v15 = v6;
  long long v7 = a3[1];
  long long v10 = *a3;
  long long v11 = v7;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _OWORD v9[2] = sub_10088C11C;
  void v9[3] = &unk_1022C1CA0;
  return (*(uint64_t (**)(uint64_t, uint64_t, id))(v3 + 16))(v3, a2, [v9 copy]);
}

void sub_100887E10()
{
}

void sub_100887E5C()
{
}

void sub_100887E80(uint64_t a1, void *a2)
{
  *(void *)sub_1006B766C(a1, "correctiveCompensated", a2) = off_1022CE410;
  id v3 = [objc_alloc((Class)CLSettingsMirror) initInUniverse:*(void *)(a1 + 32)];
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = v3;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = [objc_msgSend(*(id *)(a1 + 32), "silo") newTimer];
  [*(id *)(a1 + 32) silo] newTimer];
  [*(id *)(a1 + 32) silo] newTimer];
  __asm { FMOV            V0.2D, #-1.0 }
  long long v11 = _Q0;
  *(_OWORD *)(a1 + 168) = _Q0;
  *(unsigned char *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 202) = 0;
  *(void *)(a1 + 208) = off_1022B6DB8;
  double v9 = operator new(0x20uLL);
  v9[1] = 0;
  _OWORD v9[2] = 0;
  void *v9 = off_1022B6DF0;
  *((_DWORD *)v9 + 6) = 31337;
  *(void *)(a1 + 216) = v9 + 3;
  *(void *)(a1 + 224) = v9;
  *(void *)(a1 + 208) = off_1022C7F70;
  *(void *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 0xFFFF;
  *(void *)(a1 + 252) = 0;
  *(void *)(a1 + 244) = 0;
  *(_OWORD *)(a1 + 260) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 276) = v11;
  *(_OWORD *)(a1 + 292) = v11;
  *(_OWORD *)(a1 + 308) = v11;
  *(_DWORD *)(a1 + 324) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 328) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 352) = 0;
  *(void *)(a1 + 356) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 364) = 0x7FFFFFFF;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 368) = 0;
  *(unsigned char *)(a1 + 392) = 0;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  int v12[2] = sub_10088835C;
  v12[3] = &unk_1022C94A8;
  v12[4] = a1;
  [*(id *)(a1 + 120) setSettingsChangeHandler:v12];
  sub_100888364(a1);
  id v10 = [[[*(id *)(a1 + 32) vendor] proxyForService:@"CLLocationCorrectiveCompensator"];
  *(void *)(a1 + 192) = v10;
  [v10 registerDelegate:sub_1000C86C4(a1 + 208) inSilo:[*(id *)(a1 + 32) silo]];
  *(unsigned char *)(a1 + 200) = 0;
  sub_1009C3FBC();
}

void sub_1008882C0(_Unwind_Exception *a1)
{
  sub_100789878(v2);
  uint64_t v5 = *(void *)(v1 + 136);
  *(void *)(v1 + 136) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *v3;
  *id v3 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_1006B7BEC(v1);
  _Unwind_Resume(a1);
}

void sub_10088835C(uint64_t a1)
{
}

void sub_100888364(uint64_t a1)
{
  double v2 = *(double *)(a1 + 168);
  [*(id *)(a1 + 120) doubleForKey:@"CCLP.CorrectiveCompensationInterval" defaultValue:900.0];
  *(void *)(a1 + 168) = v3;
  double v4 = *(double *)(a1 + 176);
  [*(id *)(a1 + 120) doubleForKey:@"CCLP.ApparentCorrectiveCompensationInterval" defaultValue:1.79769313e308];
  *(void *)(a1 + 176) = v5;
  *(unsigned char *)(a1 + 184) = [*(id *)(a1 + 120) BOOLForKey:@"CCLP.CorrectiveCompensationClaimsOriginalAccuracy" defaultValue:0];
  *(unsigned char *)(a1 + 201) = [*(id *)(a1 + 120) BOOLForKey:@"CCLP.ClockAlignmentTestModeEnabled" defaultValue:0];
  *(unsigned char *)(a1 + 204) = [*(id *)(a1 + 120) BOOLForKey:@"CCLP.EnableClockAlignment" defaultValue:0];
  if (*(unsigned char *)(a1 + 201)) {
    *(void *)(a1 + 168) = 0x405E000000000000;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022CE620);
  }
  uint64_t v6 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 168);
    uint64_t v8 = *(void *)(a1 + 176);
    int v9 = *(unsigned __int8 *)(a1 + 184);
    int v10 = *(unsigned __int8 *)(a1 + 201);
    int v11 = *(unsigned __int8 *)(a1 + 204);
    uint64_t v12 = 0x4059000000000000;
    if (!*(unsigned char *)(a1 + 201)) {
      uint64_t v12 = 0x4088600000000000;
    }
    uint64_t v13 = 0x4064000000000000;
    if (!*(unsigned char *)(a1 + 201)) {
      uint64_t v13 = 0x4092C00000000000;
    }
    *(_DWORD *)uint64_t buf = 68290818;
    __int16 v25 = 2082;
    int v24 = 0;
    double v26 = "";
    __int16 v27 = 2050;
    uint64_t v28 = v7;
    __int16 v29 = 2050;
    uint64_t v30 = v8;
    __int16 v31 = 1026;
    int v32 = v9;
    __int16 v33 = 1026;
    int v34 = v10;
    __int16 v35 = 1026;
    int v36 = v11;
    __int16 v37 = 2050;
    uint64_t v38 = v12;
    __int16 v39 = 2050;
    uint64_t v40 = v13;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Update #compensation #settings for CCLP\", \"CorrectiveCompensationInterval\":\"%{public}f\", \"ApparentCorrectiveCompensationInterval\":\"%{public}f\", \"CorrectiveCompensationClaimsOriginalAccuracy\":%{public}hhd, \"ClockAlignmentTestModeEnabled\":%{public}hhd, \"EnableClockAlignment\":%{public}hhd, \"CorrectiveCompensationIntervalLowerBound\":\"%{public}f\", \"CorrectiveCompensationIntervalUpperBound\":\"%{public}f\"}", buf, 0x4Cu);
  }
  if (*(double *)(a1 + 168) != v2)
  {
    [*(id *)(a1 + 144) nextFireDelay];
    if (v14 != 1.79769313e308)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CE620);
      }
      long long v15 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#cclp CorrectiveCompensationInterval changed. Reset CompensationTimer.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022CE620);
        }
        __int16 v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::refreshSettings()", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
      [*(id *)(a1 + 144) setNextFireDelay:0.0];
    }
  }
  double v16 = *(double *)(a1 + 176);
  if (v16 != v4)
  {
    if (v16 > *(double *)(a1 + 168))
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CE620);
      }
      long long v17 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#warning #cclp ApparentCorrectiveCompensationInterval greater than CorrectiveCompensationInterval", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022CE620);
        }
        __int16 v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::refreshSettings()", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      *(void *)(a1 + 176) = 0x7FEFFFFFFFFFFFFFLL;
    }
    [*(id *)(a1 + 144) nextFireDelay];
    if (v18 != 1.79769313e308)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CE620);
      }
      int v19 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#cclp ApparentCorrectiveCompensationInterval changed. Reset ApparentCompensationTimer.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022CE620);
        }
        __int16 v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::refreshSettings()", "%s\n", v21);
        if (v21 != (char *)buf) {
          free(v21);
        }
      }
      [*(id *)(a1 + 152) setNextFireDelay:0.0];
    }
  }
}

void sub_100888950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CE600);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCorrectiveCompensatedLocationProvider::onSimulationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CE600);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      __int16 v16 = 2082;
      long long v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCorrectiveCompensatedLocationProvider::onSimulationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10088B250(a4, v6, v7, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100888B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100888B24(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CE600);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCorrectiveCompensatedLocationProvider::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CE600);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      __int16 v16 = 2082;
      long long v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCorrectiveCompensatedLocationProvider::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10088B09C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100888CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_100888D00(uint64_t a1)
{
  return sub_100888D08(*(void *)(a1 + 32));
}

id sub_100888D08(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022CE620);
  }
  double v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    [*(id *)(a1 + 40) currentLatchedAbsoluteTimestamp];
    *(_DWORD *)uint64_t buf = 134217984;
    uint64_t v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#cclp CompensationTimer fired at : %f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022CE620);
    }
    [*(id *)(a1 + 40) currentLatchedAbsoluteTimestamp];
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::onCompensationTimer()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  id result = [*(id *)(a1 + 144) setNextFireDelay:1.79769313e308];
  uint64_t v5 = (unsigned int *)qword_10248A3D8;
  uint64_t v6 = qword_10248A3E0;
  while (v5 != (unsigned int *)v6)
  {
    *(_DWORD *)uint64_t buf = *v5;
    if (sub_1001072EC(a1, (int *)buf, 1))
    {
      id result = [*(id *)(*(void *)(a1 + 128) + 16) register:*(void *)(*(void *)(a1 + 128) + 8) forNotification:*v5 registrationInfo:0];
      char v7 = 1;
    }
    else
    {
      (*(void (**)(uint64_t, unsigned int *))(*(void *)a1 + 120))(a1, v5);
      id result = [*(id *)(*(void *)(a1 + 128) + 16) unregister:*(void *)(*(void *)(a1 + 128) + 8) forNotification:*v5];
      char v7 = 0;
    }
    *(unsigned char *)(a1 + 203) = v7;
    ++v5;
  }
  return result;
}

void sub_100888F70(uint64_t a1)
{
}

void sub_100888F78(uint64_t a1)
{
  sub_1000DB3D4((uint64_t)v5);
  LODWORD(buf) = 0;
  if ((*(uint64_t (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)a1 + 128))(a1, &buf, v5))
  {
    [*(id *)(a1 + 40) currentLatchedAbsoluteTimestamp];
    uint64_t v6 = v2;
    double v7 = *(double *)(a1 + 168) * 1.33333333;
    LODWORD(buf) = 0;
    sub_1000EE180((char *)a1, (int *)&buf, (uint64_t)v5, 1, 0xFFFFFFFFLL, 0);
    double v3 = *(double *)(a1 + 176);
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022CE620);
    }
    double v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      uint64_t buf = 68289026;
      __int16 v15 = 2082;
      __int16 v16 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#cclp ceasing apparent #compensation rate increase monitoring due to no cached message\"}", (uint8_t *)&buf, 0x12u);
    }
    double v3 = 1.79769313e308;
  }
  [*(id *)(a1 + 152) setNextFireDelay:v3];

  if (v12) {
    sub_1000DB0A0(v12);
  }
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v8) {
    sub_1000DB0A0(v8);
  }
}

void sub_100889130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100458658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10088915C(uint64_t a1)
{
}

void sub_100889164(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022CE620);
  }
  uint64_t v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289539;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 1040;
    *(_DWORD *)&buf[20] = 156;
    *(_WORD *)&unsigned char buf[24] = 2097;
    *(void *)&buf[26] = a1 + 240;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#cclp UpdateLastReceivedLocationTimer fired. Using location\", \"location\":%{private, location:CLClientLocation}.*P}", buf, 0x22u);
  }
  [*(id *)(a1 + 160) setNextFireDelay:1.79769313e308];
  if (sub_1000E6DB4(a1 + 240))
  {
    sub_1000DB3D4((uint64_t)buf);
    long long v3 = *(_OWORD *)(a1 + 352);
    long long v20 = *(_OWORD *)(a1 + 336);
    long long v21 = v3;
    v22[0] = *(_OWORD *)(a1 + 368);
    *(_OWORD *)((char *)v22 + 12) = *(_OWORD *)(a1 + 380);
    long long v4 = *(_OWORD *)(a1 + 288);
    *(_OWORD *)&unsigned char buf[32] = *(_OWORD *)(a1 + 272);
    long long v17 = v4;
    long long v5 = *(_OWORD *)(a1 + 320);
    long long v18 = *(_OWORD *)(a1 + 304);
    long long v19 = v5;
    long long v6 = *(_OWORD *)(a1 + 256);
    *(_OWORD *)uint64_t buf = *(_OWORD *)(a1 + 240);
    *(_OWORD *)&uint8_t buf[16] = v6;
    *(_DWORD *)(a1 + 240) = 0xFFFF;
    *(void *)(a1 + 244) = 0;
    *(void *)(a1 + 252) = 0;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)(a1 + 260) = xmmword_101D1C320;
    *(_OWORD *)(a1 + 276) = _Q1;
    *(_OWORD *)(a1 + 292) = _Q1;
    *(_OWORD *)(a1 + 308) = _Q1;
    *(_DWORD *)(a1 + 324) = 0;
    *(_DWORD *)(a1 + 352) = 0;
    *(void *)(a1 + 328) = 0xBFF0000000000000;
    *(void *)(a1 + 336) = 0;
    *(void *)(a1 + 344) = 0;
    *(void *)(a1 + 356) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 364) = 0x7FFFFFFF;
    *(void *)(a1 + 376) = 0;
    *(void *)(a1 + 384) = 0;
    *(void *)(a1 + 368) = 0;
    *(unsigned char *)(a1 + 392) = 0;
    v15[0] = 0;
    sub_10088B09C(a1, v12, v15, (uint64_t)buf);

    if (v27) {
      sub_1000DB0A0(v27);
    }
    if (v26 < 0) {
      operator delete(__p);
    }
    if (v24) {
      sub_1000DB0A0(v24);
    }
    if (v23) {
      sub_1000DB0A0(v23);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022CE620);
    }
    id v13 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#cclp #warning UpdateLastReceivedLocationTimer handler early return. LastReceivedLocation is invalid.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CE620);
      }
      LOWORD(v15[0]) = 0;
      __int16 v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::onUpdateLastReceivedLocationTimer()", "%s\n", v14);
      if (v14 != buf) {
        free(v14);
      }
    }
  }
}

void sub_100889498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008894C4(uint64_t a1)
{
  *(void *)(a1 + 160) = 0;
  [*(id *)(a1 + 152) invalidate];

  *(void *)(a1 + 152) = 0;
  [*(id *)(a1 + 144) invalidate];

  *(void *)(a1 + 144) = 0;
  [*(id *)(a1 + 120) invalidate];

  *(void *)(a1 + 120) = 0;
}

BOOL sub_100889544(uint64_t a1, int a2, unsigned int *a3, long long *a4)
{
  v17[0] = a2;
  double v7 = (_DWORD *)qword_10248A3D8;
  if (qword_10248A3D8 != qword_10248A3E0)
  {
    while (*v7 != *a3)
    {
      if (++v7 == (_DWORD *)qword_10248A3E0)
      {
        double v7 = (_DWORD *)qword_10248A3E0;
        break;
      }
    }
  }
  if (v7 == (_DWORD *)qword_10248A3E0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022CE620);
    }
    uint64_t v12 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      id v13 = sub_10008A168(*a3);
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "#cclp registering for un-supported notification: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CE620);
      }
      __int16 v15 = sub_10008A168(*a3);
      v17[1] = 136315138;
      long long v18 = v15;
      __int16 v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLCorrectiveCompensatedLocationProvider::registerForNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)", "%s\n", v16);
      if (v16 != buf) {
        free(v16);
      }
    }
    return 0;
  }
  else
  {
    BOOL v8 = sub_1000AD0C8(a1, a2, (int *)a3, a4);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022CE620);
    }
    int v9 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)uint64_t buf = v17;
      id v10 = [[sub_10008A098((uint64_t **)(a1 + 80), v17, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[8] description];
      char v11 = sub_10008A168(*a3);
      *(_DWORD *)uint64_t buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      __int16 v20 = 2050;
      uint64_t v21 = a2;
      __int16 v22 = 2114;
      id v23 = v10;
      __int16 v24 = 2082;
      __int16 v25 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cclp registration\", \"client-id\":%{public}ld, \"client\":%{public, location:escape_only}@, \"notification\":%{public, location:escape_only}s}", buf, 0x30u);
    }
  }
  return v8;
}

uint64_t sub_100889854(uint64_t a1, unsigned int *a2)
{
  sub_1000B015C();
  [*(id *)(a1 + 144) nextFireDelay];
  if (v4 == 1.79769313e308)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022CE620);
    }
    double v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v8 = sub_10008A168(*a2);
      int v10 = 68289282;
      int v11 = 0;
      __int16 v12 = 2082;
      id v13 = "";
      __int16 v14 = 2082;
      __int16 v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cclp registering to FLC\", \"notification\":%{public, location:escape_only}s}", (uint8_t *)&v10, 0x1Cu);
    }
    [*(id *)(*(void *)(a1 + 128) + 16) register:*(void *)(*(void *)(a1 + 128) + 8) forNotification:*a2 registrationInfo:0];
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022CE620);
    }
    long long v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      long long v6 = sub_10008A168(*a2);
      int v10 = 68289282;
      int v11 = 0;
      __int16 v12 = 2082;
      id v13 = "";
      __int16 v14 = 2082;
      __int16 v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cclp skip registering to FLC - timer locked(no need to source location from FLC)\", \"notification\":%{public, location:escape_only}s}", (uint8_t *)&v10, 0x1Cu);
    }
  }
  return 1;
}

uint64_t sub_100889A14(uint64_t a1, unsigned int *a2)
{
  sub_1006B7E64(a1);
  [*(id *)(a1 + 144) nextFireDelay];
  if (v4 == 1.79769313e308)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022CE620);
    }
    double v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v8 = sub_10008A168(*a2);
      int v10 = 68289282;
      int v11 = 0;
      __int16 v12 = 2082;
      id v13 = "";
      __int16 v14 = 2082;
      __int16 v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cclp unregistering from FLC\", \"notification\":%{public, location:escape_only}s}", (uint8_t *)&v10, 0x1Cu);
    }
    (*(void (**)(uint64_t, unsigned int *))(*(void *)a1 + 120))(a1, a2);
    [*(id *)(*(void *)(a1 + 128) + 16) unregister:*(void *)(*(void *)(a1 + 128) + 8) forNotification:*a2];
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022CE620);
    }
    long long v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      long long v6 = sub_10008A168(*a2);
      int v10 = 68289282;
      int v11 = 0;
      __int16 v12 = 2082;
      id v13 = "";
      __int16 v14 = 2082;
      __int16 v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cclp skip unregistering from FLC - timer locked(will get unsubcribed after receiving snapped result)\", \"notification\":%{public, location:escape_only}s}", (uint8_t *)&v10, 0x1Cu);
    }
  }
  return 1;
}

void sub_100889BFC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  (*(void (**)(long long *__return_ptr, uint64_t))(a3 + 16))(&v9, a3);
  if (a2 && sub_1000E6DB4((uint64_t)&v9) && *(double *)((char *)&v10 + 4) >= 0.0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022CE620);
    }
    long long v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&unsigned char buf[18] = 1040;
      *(_DWORD *)&buf[20] = 156;
      *(_WORD *)&unsigned char buf[24] = 2097;
      *(void *)&buf[26] = &v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#cclp perform snapping on location by LC\", \"location\":%{private, location:CLClientLocation}.*P}", buf, 0x22u);
    }
    sub_1000DB3D4((uint64_t)buf);
    long long v22 = v15;
    long long v23 = v16;
    v24[0] = *(_OWORD *)v17;
    *(_OWORD *)((char *)v24 + 12) = *(_OWORD *)&v17[12];
    *(_OWORD *)&unsigned char buf[32] = v11;
    long long v19 = v12;
    long long v20 = v13;
    long long v21 = v14;
    *(_OWORD *)uint64_t buf = v9;
    *(_OWORD *)&uint8_t buf[16] = v10;
    sub_100889F88(v5);

    if (v29) {
      sub_1000DB0A0(v29);
    }
    if (v28 < 0) {
      operator delete(__p);
    }
    if (v26) {
      sub_1000DB0A0(v26);
    }
    if (v25) {
      sub_1000DB0A0(v25);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022CE620);
    }
    double v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#warning #cclp LocationController has no location", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CE620);
      }
      BOOL v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::fetchCorrectiveCompensatedLocation(void (^)(BOOL, CLDaemonLocation))_block_invoke", "%s\n", v8);
      if (v8 != buf) {
        free(v8);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_100889F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100889F88(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  long long v6 = v5;
  BOOL v8 = v7;
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022CE620);
  }
  long long v9 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
  {
    long long v10 = sub_10008A168(*v6);
    *(_DWORD *)uint64_t buf = 136315138;
    int v60 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "#cclp try performLocationSnapping - Notification: %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022CE620);
    }
    int v44 = sub_10008A168(*v6);
    int v57 = 136315138;
    double v58 = v44;
    __int16 v45 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::performLocationSnapping(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void (^)(BOOL, CLDaemonLocation))", "%s\n", v45);
    if (v45 != (char *)buf) {
      free(v45);
    }
  }
  long long v11 = (_DWORD *)qword_10248A3D8;
  if (qword_10248A3D8 != qword_10248A3E0)
  {
    while (*v11 != *v6)
    {
      if (++v11 == (_DWORD *)qword_10248A3E0)
      {
        long long v11 = (_DWORD *)qword_10248A3E0;
        break;
      }
    }
  }
  if (v11 == (_DWORD *)qword_10248A3E0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022CE620);
    }
    long long v17 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      long long v18 = sub_10008A168(*v6);
      *(_DWORD *)uint64_t buf = 136315138;
      int v60 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "#cclp received location notification for un-supported notification: %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CE620);
      }
      uint64_t v46 = sub_10008A168(*v6);
      int v57 = 136315138;
      double v58 = v46;
      long long v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLCorrectiveCompensatedLocationProvider::performLocationSnapping(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void (^)(BOOL, CLDaemonLocation))", "%s\n", v16);
      goto LABEL_74;
    }
  }
  else
  {
    [v8[18] nextFireDelay];
    if (v12 == 1.79769313e308)
    {
      [v8[20] nextFireDelay];
      if (v19 == 1.79769313e308)
      {
        if (*v6 == 9)
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022CE620);
          }
          __int16 v29 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "#cclp skip performLocationSnapping location-unavailable", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022CE620);
            }
            LOWORD(v57) = 0;
            __int16 v49 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::performLocationSnapping(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void (^)(BOOL, CLDaemonLocation))", "%s\n", v49);
            if (v49 != (char *)buf) {
              free(v49);
            }
          }
          *(_DWORD *)uint64_t buf = 9;
          (*((void (**)(id *, uint8_t *, uint64_t, uint64_t, uint64_t, void))*v8 + 19))(v8, buf, v4, 1, 0xFFFFFFFFLL, 0);
        }
        else if (sub_1000E6DB4(v4))
        {
          sub_1000DB3D4((uint64_t)&v57);
          *(_DWORD *)uint64_t buf = 0;
          char v30 = (*((uint64_t (**)(id *, uint8_t *, int *))*v8 + 16))(v8, buf, &v57);
          if (*((unsigned char *)v8 + 200))
          {
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022CE620);
            }
            __int16 v31 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "#cclp skip performLocationSnapping already in-progres", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022CE620);
              }
              __int16 v56 = 0;
              int v32 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::performLocationSnapping(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void (^)(BOOL, CLDaemonLocation))", "%s\n", v32);
              if (v32 != (char *)buf) {
                free(v32);
              }
            }
          }
          else
          {
            char v34 = v30;
            uint64_t v35 = *(void *)(v4 + 20);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022CE620);
            }
            int v36 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "#cclp dispatching call to CitySnapper", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022CE620);
              }
              __int16 v56 = 0;
              std::string v50 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::performLocationSnapping(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void (^)(BOOL, CLDaemonLocation))", "%s\n", v50);
              if (v50 != (char *)buf) {
                free(v50);
              }
            }
            *((unsigned char *)v8 + 200) = 1;
            id v37 = v8[24];
            id v38 = objc_alloc((Class)CLLocation);
            long long v39 = *(_OWORD *)(v4 + 112);
            v54[6] = *(_OWORD *)(v4 + 96);
            v54[7] = v39;
            v55[0] = *(_OWORD *)(v4 + 128);
            *(_OWORD *)((char *)v55 + 12) = *(_OWORD *)(v4 + 140);
            long long v40 = *(_OWORD *)(v4 + 48);
            v54[2] = *(_OWORD *)(v4 + 32);
            v54[3] = v40;
            long long v41 = *(_OWORD *)(v4 + 80);
            v54[4] = *(_OWORD *)(v4 + 64);
            v54[5] = v41;
            long long v42 = *(_OWORD *)(v4 + 16);
            v54[0] = *(_OWORD *)v4;
            v54[1] = v42;
            id v43 = [v38 initWithClientLocation:v54];
            v51[0] = _NSConcreteStackBlock;
            v51[1] = 3321888768;
            v51[2] = sub_10088B5D4;
            v51[3] = &unk_1022CE578;
            v51[5] = v8;
            sub_1000EF97C((uint64_t)v52, (uint64_t)&v57);
            char v53 = v34;
            v52[191] = v35;
            uint8_t v51[4] = v2;
            [v37 snapLocation:v43 withReply:v51];
            sub_100458658((uint64_t)v52);
          }
          sub_100458658((uint64_t)&v57);
        }
        else
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022CE620);
          }
          __int16 v33 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#cclp skip snapping #warning invalid location.", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022CE620);
            }
            LOWORD(v57) = 0;
            long long v16 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::performLocationSnapping(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void (^)(BOOL, CLDaemonLocation))", "%s\n", v16);
            goto LABEL_74;
          }
        }
      }
      else
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022CE620);
        }
        long long v20 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          long long v21 = sub_10008A168(*v6);
          *(_DWORD *)uint64_t buf = 136315138;
          int v60 = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#cclp skip notification: %s. UpdateLastReceivedLocationTimer scheduled", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022CE620);
          }
          __int16 v47 = sub_10008A168(*v6);
          int v57 = 136315138;
          double v58 = v47;
          int v48 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::performLocationSnapping(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void (^)(BOOL, CLDaemonLocation))", "%s\n", v48);
          if (v48 != (char *)buf) {
            free(v48);
          }
        }
        if (*v6 != 9)
        {
          long long v22 = *(_OWORD *)(v4 + 16);
          *((_OWORD *)v8 + 15) = *(_OWORD *)v4;
          *((_OWORD *)v8 + 16) = v22;
          long long v23 = *(_OWORD *)(v4 + 32);
          long long v24 = *(_OWORD *)(v4 + 48);
          long long v25 = *(_OWORD *)(v4 + 80);
          *((_OWORD *)v8 + 19) = *(_OWORD *)(v4 + 64);
          *((_OWORD *)v8 + 20) = v25;
          *((_OWORD *)v8 + 17) = v23;
          *((_OWORD *)v8 + 18) = v24;
          long long v26 = *(_OWORD *)(v4 + 96);
          long long v27 = *(_OWORD *)(v4 + 112);
          long long v28 = *(_OWORD *)(v4 + 128);
          *(_OWORD *)((char *)v8 + 380) = *(_OWORD *)(v4 + 140);
          *((_OWORD *)v8 + 22) = v27;
          *((_OWORD *)v8 + 23) = v28;
          *((_OWORD *)v8 + 21) = v26;
        }
      }
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CE620);
      }
      long long v13 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        long long v14 = sub_10008A168(*v6);
        *(_DWORD *)uint64_t buf = 136315138;
        int v60 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#cclp skip notification: %s. CompensationTimer scheduled", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022CE620);
        }
        long long v15 = sub_10008A168(*v6);
        int v57 = 136315138;
        double v58 = v15;
        long long v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::performLocationSnapping(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void (^)(BOOL, CLDaemonLocation))", "%s\n", v16);
LABEL_74:
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
    }
  }
}

void sub_10088AC44(_Unwind_Exception *a1)
{
}

double sub_10088AC80(uint64_t a1)
{
  double v1 = *(double *)(a1 + 168);
  if (*(unsigned char *)(a1 + 204))
  {
    int v3 = *(unsigned __int8 *)(a1 + 201);
    if (v1 != 900.0)
    {
      if (!*(unsigned char *)(a1 + 201))
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022CE620);
        }
        long long v14 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#cclp: Clock Alignment disabled. Either TestMode should be enabled or CompensationInterval should be 15m. Check #compensation #settings", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419530 == -1) {
            goto LABEL_38;
          }
          goto LABEL_40;
        }
        return v1;
      }
      int v3 = 1;
    }
    if (v3) {
      double v4 = 100.0;
    }
    else {
      double v4 = 780.0;
    }
    [*(id *)(a1 + 40) currentLatchedAbsoluteTimestamp];
    int v6 = (int)v5;
    double v7 = *(double *)(a1 + 168);
    int v8 = v6 % (int)v7;
    if (v8 <= (int)(v1 - v4))
    {
      double v12 = v7 - (double)v8;
      if (v4 >= v12) {
        double v1 = v4;
      }
      else {
        double v1 = v12;
      }
    }
    else
    {
      double v9 = 160.0;
      if (!v3) {
        double v9 = 1200.0;
      }
      double v10 = -((double)v8 - v7 * 2.0);
      if (v10 >= v9) {
        double v1 = v9;
      }
      else {
        double v1 = v10;
      }
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022CE620);
    }
    long long v13 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      double v18 = v1;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#cclp: next fire delay: %f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 == -1)
      {
LABEL_38:
        long long v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CFTimeInterval CLCorrectiveCompensatedLocationProvider::computeNextFireDelayToMaximizeAlignment()", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
        return v1;
      }
LABEL_40:
      dispatch_once(&qword_102419530, &stru_1022CE620);
      goto LABEL_38;
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022CE620);
    }
    long long v11 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#cclp: Clock Alignment disabled by default settings. Using default CC interval", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 == -1) {
        goto LABEL_38;
      }
      goto LABEL_40;
    }
  }
  return v1;
}

void sub_10088B09C(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022CE620);
  }
  double v7 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = sub_10008A168(*a3);
    v9[0] = 68289795;
    v9[1] = 0;
    __int16 v10 = 2082;
    long long v11 = "";
    __int16 v12 = 2082;
    long long v13 = v8;
    __int16 v14 = 1040;
    int v15 = 156;
    __int16 v16 = 2097;
    uint64_t v17 = a4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cclp onLocationNotification\", \"Notification\":%{public, location:escape_only}s, \"location\":%{private, location:CLClientLocation}.*P}", (uint8_t *)v9, 0x2Cu);
  }
  sub_100889F88(a1);
}

void sub_10088B1C8(uint64_t a1, int *a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  [*(id *)(a1 + 144) nextFireDelay];
  if (v12 != 1.79769313e308) {
    sub_101A723B8();
  }

  sub_1000EE180((char *)a1, a2, a3, a4, a5, a6);
}

void sub_10088B250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022CE620);
  }
  int v6 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    if (*(unsigned char *)(a4 + 824)) {
      double v7 = "enabled";
    }
    else {
      double v7 = "disabled";
    }
    *(_DWORD *)uint64_t buf = 136315138;
    int v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#cclp Simulation %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022CE620);
    }
    double v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::onSimulationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  [*(id *)(a1 + 144) nextFireDelay];
  if (v8 == 1.79769313e308 && !*(unsigned char *)(a1 + 203))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022CE620);
    }
    long long v11 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#cclp CompensationTimer not scheduled and not subscribed to FLC", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CE620);
      }
      long long v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::onSimulationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  else
  {
    double v9 = 3.0;
    if (!*(unsigned char *)(a4 + 824)) {
      double v9 = 4.0;
    }
    [*(id *)(a1 + 160) setNextFireDelay:v9];
    [*(id *)(a1 + 144) nextFireDelay];
    if (v10 != 1.79769313e308)
    {
      *(unsigned char *)(a1 + 202) = *(unsigned char *)(a4 + 824);
      [*(id *)(a1 + 144) setNextFireDelay:0.0];
    }
  }
}

void sub_10088B5D4(uint64_t a1, void *a2, int a3, void *a4)
{
  uint64_t v7 = *(void *)(a1 + 40);
  if (a2)
  {
    [a2 clientLocation];
  }
  else
  {
    memset(v53, 0, 28);
    long long v52 = 0u;
    long long v51 = 0u;
    long long v50 = 0u;
    long long v49 = 0u;
    long long v48 = 0u;
    memset(buf, 0, sizeof(buf));
  }
  long long v42 = v51;
  long long v43 = v52;
  v44[0] = v53[0];
  *(_OWORD *)((char *)v44 + 12) = *(_OWORD *)((char *)v53 + 12);
  long long v39 = *(_OWORD *)&buf[32];
  long long v40 = v48;
  *(_OWORD *)long long v41 = v49;
  *(_OWORD *)&unsigned char v41[16] = v50;
  long long v37 = *(_OWORD *)buf;
  long long v38 = *(_OWORD *)&buf[16];
  *(unsigned char *)(v7 + 200) = 0;
  [*(id *)(v7 + 40) currentLatchedAbsoluteTimestamp];
  double v9 = v8;
  double v10 = *(double *)(a1 + 124);
  double v11 = *(double *)(v7 + 168);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022CE620);
  }
  double v12 = vabdd_f64(v9, v10);
  double v13 = v11 * 1.33333333;
  __int16 v14 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = *(unsigned __int8 *)(a1 + 1584);
    *(_DWORD *)uint64_t buf = 68290563;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 1026;
    *(_DWORD *)&buf[20] = a3;
    *(_WORD *)&unsigned char buf[24] = 2050;
    *(double *)&buf[26] = v12;
    *(_WORD *)&buf[34] = 1026;
    *(_DWORD *)&buf[36] = v12 < v13;
    *(_WORD *)&buf[40] = 1026;
    *(_DWORD *)&buf[42] = v15;
    *(_WORD *)&buf[46] = 1040;
    LODWORD(v48) = 156;
    WORD2(v48) = 2097;
    *(void *)((char *)&v48 + 6) = &v37;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cclp snapLocation reply\", \"permanent\":%{public}hhd, \"cacheAge\":\"%{public}f\", \"cacheAgeLessThanExtendedInterval\":%{public}hhd, \"hasCachedLocation\":%{public}hhd, \"location\":%{private, location:CLClientLocation}.*P}", buf, 0x3Eu);
  }
  if ((a3 & 1) != 0 || !*(unsigned char *)(a1 + 1584) || v12 >= v13)
  {
    LODWORD(v42) = 12;
    *(double *)&v41[24] = vabdd_f64(v9, *(double *)&v41[12]) + *(double *)(v7 + 168) * 1.33333333;
    if (*(unsigned char *)(v7 + 184)) {
      *(void *)((char *)&v38 + 4) = *(void *)(a1 + 1576);
    }
    sub_1000DB3D4((uint64_t)v29);
    v29[6] = v42;
    v29[7] = v43;
    v30[0] = v44[0];
    *(_OWORD *)((char *)v30 + 12) = *(_OWORD *)((char *)v44 + 12);
    v29[2] = v39;
    v29[3] = v40;
    v29[4] = *(_OWORD *)v41;
    v29[5] = *(_OWORD *)&v41[16];
    v29[0] = v37;
    v29[1] = v38;
    if (a4)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CE620);
      }
      __int16 v16 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#cclp Encoded coarse meta data available", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022CE620);
        }
        LOWORD(v45) = 0;
        long long v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::performLocationSnapping(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void (^)(BOOL, CLDaemonLocation))_block_invoke", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
      }
      sub_10088BEFC(&v36, a4);
    }
    if (*(void *)(a1 + 32))
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CE620);
      }
      uint64_t v17 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "#cclp delivering compensated location to reply block", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022CE620);
        }
        LOWORD(v45) = 0;
        long long v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::performLocationSnapping(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void (^)(BOOL, CLDaemonLocation))_block_invoke", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
    *(_DWORD *)uint64_t buf = 0;
    (*(void (**)(uint64_t, uint8_t *, _OWORD *, uint64_t, uint64_t, void))(*(void *)v7 + 152))(v7, buf, v29, 1, 0xFFFFFFFFLL, 0);
    [*(id *)(v7 + 152) setNextFireDelay:*(double *)(v7 + 176)];
    double v18 = (unsigned int *)qword_10248A3D8;
    uint64_t v19 = qword_10248A3E0;
    while (v18 != (unsigned int *)v19)
      [*(id *)(*(void *)(v7 + 128) + 16) unregister:*(void *)(*(void *)(v7 + 128) + 8) forNotification:*v18++];
    *(unsigned char *)(v7 + 203) = 0;
    if (*(unsigned char *)(v7 + 202))
    {
      *(unsigned char *)(v7 + 202) = 0;
      double v20 = (float)((float)rand() * 4.6566e-10);
      double v21 = *(double *)(v7 + 168);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CE620);
      }
      double v22 = v20 * v21 + 1.0;
      long long v23 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 134217984;
        *(double *)&uint8_t buf[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#cclp Simulation started. Random next fire delay: %f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022CE620);
        }
        int v45 = 134217984;
        double v46 = v22;
        long long v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::performLocationSnapping(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void (^)(BOOL, CLDaemonLocation))_block_invoke", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
    }
    else
    {
      double v22 = sub_10088AC80(v7);
    }
    [*(id *)(v7 + 144) setNextFireDelay:v22];

    if (v35) {
      sub_1000DB0A0(v35);
    }
    if (v34 < 0) {
      operator delete(__p);
    }
    if (v32) {
      sub_1000DB0A0(v32);
    }
    if (v31) {
      sub_1000DB0A0(v31);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022CE620);
    }
    long long v25 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "#cclp snapLocation expecting a improved location", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022CE620);
      }
      LOWORD(v29[0]) = 0;
      long long v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCorrectiveCompensatedLocationProvider::performLocationSnapping(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void (^)(BOOL, CLDaemonLocation))_block_invoke", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
  }
}

void sub_10088BEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_10088BEFC(void **a1, void *a2)
{
  id v3 = a2;
  double v4 = *a1;
  *a1 = v3;
}

void sub_10088BF30(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10088BF40(void *a1)
{
  *a1 = off_1022CE410;
  sub_100789878((uint64_t)(a1 + 26));
  uint64_t v2 = a1[17];
  a1[17] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[16];
  a1[16] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return sub_1006B7BEC(a1);
}

void sub_10088BFF4(void *a1)
{
  *a1 = off_1022CE410;
  sub_100789878((uint64_t)(a1 + 26));
  uint64_t v2 = a1[17];
  a1[17] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[16];
  a1[16] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_1006B7BEC(a1);

  operator delete();
}

void sub_10088C0BC(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10088C0EC(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

__n128 sub_10088C11C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 112) = v2;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 140) = *(_OWORD *)(a1 + 172);
  long long v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = v3;
  long long v4 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = v4;
  __n128 result = *(__n128 *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 48);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v6;
  return result;
}

uint64_t sub_10088C150()
{
  qword_10248A3D8 = 0;
  qword_10248A3E0 = 0;
  qword_10248A3E8 = 0;
  uint64_t v0 = operator new(0x20uLL);
  qword_10248A3E0 = (uint64_t)(v0 + 2);
  qword_10248A3E8 = (uint64_t)(v0 + 2);
  *uint64_t v0 = xmmword_101D50F90;
  v0[1] = unk_101D50FA0;
  qword_10248A3D8 = (uint64_t)v0;

  return __cxa_atexit((void (*)(void *))sub_1008876A4, &qword_10248A3D8, (void *)&_mh_execute_header);
}

void sub_10088C218(id a1)
{
  sub_100103240();
  BOOL v1 = 1;
  if ((sub_10010145C() & 1) == 0)
  {
    sub_100103240();
    if ((sub_10073D06C() & 1) == 0)
    {
      sub_100103240();
      if ((sub_1001073D0() & 2) != 0) {
        BOOL v1 = 0;
      }
    }
  }
  byte_10247E710 = v1;
}

void sub_10088C314(id a1)
{
  qword_10247E720 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLCachedLocationControllerSilo"];
}

uint64_t sub_10088C3DC(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10088C7D8;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_10247E730 != -1) {
    dispatch_once(&qword_10247E730, block);
  }
  return qword_10248A3F8;
}

void sub_10088C5FC()
{
}

void sub_10088C6B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_10088C6F4(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_1022CE8F8;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    double v12 = a3;
  }
  else {
    double v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(a4, "vendor") proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:[a4 silo]];
  return a1;
}

void sub_10088C7D8()
{
}

void sub_10088C824()
{
}

void sub_10088C848(uint64_t a1, void *a2)
{
  *(void *)a1 = off_1022CE8A0;
  sub_10088CE60(a1 + 8, "CachedLocationController", a2);
  *(void *)a1 = off_1022CE6B8;
  *(void *)(a1 + 8) = off_1022CE710;
  sub_100ECEB98(a1 + 120, "Traffic", *(void *)(a1 + 40));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0x4072C00000000000;
  *(_DWORD *)(a1 + 360) = 0;
  sub_100AC2A84(a1 + 368, *(void *)(a1 + 40));
  sub_10153D320((void *)(a1 + 552), *(void *)(a1 + 40));
  sub_10103E8D4(a1 + 568, a1 + 552);
  *(void *)(a1 + 792) = [objc_msgSend(*(id *)(a1 + 40), "vendor") proxyForService:@"CLClientAuthorizationCache"];
  id v4 = [*(id *)(a1 + 48) newTimer];
  *(void *)(a1 + 336) = v4;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  uint64_t v6[2] = sub_10088CF0C;
  void v6[3] = &unk_1022A3020;
  void v6[4] = a1;
  [v4 setHandler:v6];
  id v5 = [[CLRouteListener alloc] initInUniverse:a2 withDelegate:a1];
  *(void *)(a1 + 544) = v5;
  [v5 enable];
  sub_1007E0344();
}

void sub_10088CD6C(_Unwind_Exception *a1)
{
  sub_100AC2AE0(v4);
  uint64_t v7 = *(void *)(v2 + 328);
  *(void *)(v2 + 328) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(v2 + 320);
  *(void *)(v2 + 320) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *v5;
  *id v5 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  sub_100C0AB60(v3);
  sub_10088D0BC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10088CE60(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1022CE920;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_10088CEF0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_10088CF0C(uint64_t a1)
{
}

void sub_10088CF14(uint64_t a1)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022CE8C8);
  }
  uint64_t v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLC: Debounce timer fired, stopping", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022CE8C8);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCachedLocationController::onTransitDebounceTimer()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_10088D3A0(a1, 0, 1.79769313e308);
}

uint64_t sub_10088D0BC(uint64_t a1)
{
  *(void *)a1 = off_1022CE920;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void *sub_10088D140(void *a1)
{
  *a1 = off_1022CE6B8;
  uint64_t v2 = (uint64_t)(a1 + 1);
  a1[1] = off_1022CE710;
  sub_10088D2D0((uint64_t)a1);
  sub_100AC2AE0(a1 + 46);
  uint64_t v3 = a1[41];
  a1[41] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[40];
  a1[40] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[39];
  a1[39] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_100C0AB60((uint64_t)(a1 + 15));
  sub_10088D0BC(v2);
  return a1;
}

void *sub_10088D254(uint64_t a1)
{
  return sub_10088D140((void *)(a1 - 8));
}

void sub_10088D25C(void *a1)
{
  sub_10088D140(a1);

  operator delete();
}

void sub_10088D294(uint64_t a1)
{
  sub_10088D140((void *)(a1 - 8));

  operator delete();
}

void sub_10088D2D0(uint64_t a1)
{
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 352) = 0x4072C00000000000;
  [*(id *)(*(void *)(a1 + 312) + 16) unregister:*(void *)(*(void *)(a1 + 312) + 8) forNotification:4];
  [*(id *)(*(void *)(a1 + 312) + 16) unregister:*(void *)(*(void *)(a1 + 312) + 8) forNotification:14];
  [*(id *)(*(void *)(a1 + 320) + 16) unregister:*(void *)(*(void *)(a1 + 320) + 8) forNotification:4];
  [*(id *)(*(void *)(a1 + 320) + 16) unregister:*(void *)(*(void *)(a1 + 320) + 8) forNotification:2];
  [*(id *)(*(void *)(a1 + 328) + 16) unregister:*(void *)(*(void *)(a1 + 328) + 8) forNotification:4];
  [*(id *)(*(void *)(a1 + 328) + 16) unregister:*(void *)(*(void *)(a1 + 328) + 8) forNotification:1];
  [*(id *)(a1 + 544) disable];

  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 792) = 0;
}

void sub_10088D3A0(uint64_t a1, uint64_t a2, double a3)
{
  int v6 = *(_DWORD *)(a1 + 344);
  double v7 = *(double *)(a1 + 352);
  *(double *)(a1 + 352) = a3;
  if (v7 != a3)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022CE8C8);
    }
    uint64_t v8 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      double v9 = -1.0;
      if (a3 != 1.79769313e308) {
        double v9 = a3;
      }
      *(_DWORD *)uint64_t buf = 134283521;
      *(double *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLC: Debounce changed to %{private}lf [s]", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022CE8C8);
      }
      double v30 = -1.0;
      if (a3 != 1.79769313e308) {
        double v30 = a3;
      }
      *(_DWORD *)__int16 v47 = 134283521;
      *(double *)&v47[4] = v30;
      __int16 v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCachedLocationController::setStateAndUpdateDebounceTimout(CLCachedLocationController_Type::CachedLocationState, CFTimeInterval)", "%s\n", v31);
      if (v31 != (char *)buf) {
        free(v31);
      }
    }
    if (a2 == 1) {
      [*(id *)(a1 + 336) setNextFireDelay:*(double *)(a1 + 352)];
    }
  }
  if (v6 == a2)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022CE8C8);
    }
    double v10 = qword_102419388;
    BOOL v11 = os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG);
    if (v11)
    {
      sub_10088DBE8(v11, *(unsigned int *)(a1 + 344), buf);
      if (v53 >= 0) {
        double v12 = buf;
      }
      else {
        double v12 = *(uint8_t **)buf;
      }
      double v13 = *(double *)(a1 + 352);
      if (v13 == 1.79769313e308) {
        double v13 = -1.0;
      }
      *(_DWORD *)__int16 v47 = 136380931;
      *(void *)&v47[4] = v12;
      __int16 v48 = 2049;
      double v49 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLC: Already in state %{private}s, %{private}lf", v47, 0x16u);
      if (SHIBYTE(v53) < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022CE8C8);
      }
      sub_10088DBE8(v14, *(unsigned int *)(a1 + 344), v47);
      if (v50 >= 0) {
        int v15 = v47;
      }
      else {
        int v15 = *(unsigned char **)v47;
      }
      double v16 = *(double *)(a1 + 352);
      if (v16 == 1.79769313e308) {
        double v16 = -1.0;
      }
      *(_DWORD *)long long v39 = 136380931;
      *(void *)&v39[4] = v15;
      __int16 v40 = 2049;
      double v41 = v16;
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      if (v50 < 0) {
        operator delete(*(void **)v47);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCachedLocationController::setStateAndUpdateDebounceTimout(CLCachedLocationController_Type::CachedLocationState, CFTimeInterval)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022CE8C8);
    }
    double v18 = qword_102419388;
    BOOL v19 = os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG);
    if (v19)
    {
      double v20 = sub_10088DBE8(v19, *(unsigned int *)(a1 + 344), buf);
      int v21 = SHIBYTE(v53);
      double v22 = *(uint8_t **)buf;
      sub_10088DBE8((uint64_t)v20, a2, v47);
      long long v23 = buf;
      if (v21 < 0) {
        long long v23 = v22;
      }
      if (v50 >= 0) {
        long long v24 = v47;
      }
      else {
        long long v24 = *(unsigned char **)v47;
      }
      *(_DWORD *)long long v39 = 136380931;
      *(void *)&v39[4] = v23;
      __int16 v40 = 2081;
      double v41 = *(double *)&v24;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLC: Cached Location changed state from %{private}s to %{private}s", v39, 0x16u);
      if (v50 < 0) {
        operator delete(*(void **)v47);
      }
      if (SHIBYTE(v53) < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022CE8C8);
      }
      __int16 v33 = sub_10088DBE8(v32, *(unsigned int *)(a1 + 344), v47);
      int v34 = v50;
      uint64_t v35 = *(unsigned char **)v47;
      sub_10088DBE8((uint64_t)v33, a2, v39);
      int v36 = v47;
      if (v34 < 0) {
        int v36 = v35;
      }
      if (v42 >= 0) {
        long long v37 = v39;
      }
      else {
        long long v37 = *(unsigned char **)v39;
      }
      int v43 = 136380931;
      int v44 = v36;
      __int16 v45 = 2081;
      double v46 = v37;
      long long v38 = (char *)_os_log_send_and_compose_impl();
      if (v42 < 0) {
        operator delete(*(void **)v39);
      }
      if (v50 < 0) {
        operator delete(*(void **)v47);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCachedLocationController::setStateAndUpdateDebounceTimout(CLCachedLocationController_Type::CachedLocationState, CFTimeInterval)", "%s\n", v38);
      if (v38 != (char *)buf) {
        free(v38);
      }
    }
    *(_DWORD *)(a1 + 344) = a2;
    if (a2 == 1)
    {
      sub_100AC2AE4((int *)(a1 + 368), 1);
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)uint64_t buf = _Q0;
      int v53 = 0;
      int v54 = 0;
      __int16 v52 = 0;
      sub_10012F770();
    }
    [*(id *)(a1 + 336) setNextFireDelay:1.79769313e308];
    [*(id *)(*(void *)(a1 + 312) + 16) unregister:*(void *)(*(void *)(a1 + 312) + 8) forNotification:22];
    sub_100AC2AE4((int *)(a1 + 368), 0);
    *(_DWORD *)uint64_t buf = *(_DWORD *)(a1 + 344);
    *(_DWORD *)__int16 v47 = 1;
    (*(void (**)(uint64_t, unsigned char *, uint8_t *, void, uint64_t, void))(*(void *)(a1 + 8) + 152))(a1 + 8, v47, buf, 0, 0xFFFFFFFFLL, 0);
  }
}

void sub_10088DA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10088DAC8(uint64_t a1)
{
}

void *sub_10088DAD0@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

void *sub_10088DB4C@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_10088DBC8()
{
  return 1;
}

uint64_t sub_10088DBD0()
{
  return 1;
}

uint64_t sub_10088DBD8()
{
  return 1;
}

uint64_t sub_10088DBE0()
{
  return 1;
}

void *sub_10088DBE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a2)
  {
    if (a2 != 1)
    {
      uint64_t v6 = sub_101A726C8(a1, a2);
      return (void *)sub_10088DC2C(v6, v7);
    }
    uint64_t v4 = "Active";
  }
  else
  {
    uint64_t v4 = "Off";
  }
  return sub_100134750(a3, v4);
}

uint64_t sub_10088DC2C(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 348) != a2)
  {
    *(_DWORD *)(result + 348) = a2;
    int v3 = a2;
    int v2 = 2;
    return (*(uint64_t (**)(void))(*(void *)(result + 8) + 152))();
  }
  return result;
}

void sub_10088DC9C(uint64_t a1, double a2)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022CE8C8);
  }
  uint64_t v4 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLC: Received start route", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022CE8C8);
    }
    LOWORD(v12[0]) = 0;
    BOOL v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCachedLocationController::onStartTransitRoute(CFTimeInterval, const CLClientLocationCoordinate &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  double v5 = a2 * 1.5;
  if (a2 * 1.5 < a2 + 600.0) {
    double v5 = a2 + 600.0;
  }
  sub_10088D3A0(a1, 1, v5);
  sub_10088DC2C(a1, 1);
  *(_DWORD *)uint64_t buf = 0xFFFF;
  uint64_t v15 = 0;
  uint64_t v14 = 0;
  long long v16 = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v17 = _Q0;
  long long v18 = _Q0;
  long long v19 = _Q0;
  int v20 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  unint64_t v21 = 0xBFF0000000000000;
  int v24 = 0;
  unint64_t v25 = 0xBFF0000000000000;
  int v26 = 0x7FFFFFFF;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  char v30 = 0;
  v12[0] = CFAbsoluteTimeGetCurrent();
  sub_10103E8D8((void *)(a1 + 568), (uint64_t)buf, v12);
}

uint64_t sub_10088DEE4(uint64_t a1)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022CE8C8);
  }
  int v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLC: Received end route", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022CE8C8);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCachedLocationController::onEndTransitRoute()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_10088D3A0(a1, 0, 1.79769313e308);
  return sub_10088DC2C(a1, 0);
}

id sub_10088E098(uint64_t a1, uint64_t a2)
{
  id v3 = [[[*(id *)(a1 + 40) vendor] proxyForService:@"CLAccessoryLocationProvider"];

  return _[v3 syncSetNavigationStateChange:a2];
}

void sub_10088E0E0(uint64_t a1, int a2)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022CE8C8);
  }
  uint64_t v4 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 360);
    *(_DWORD *)uint64_t buf = 67240448;
    int v11 = a2;
    __int16 v12 = 1026;
    int v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLC: Suspend for exception, %{public}#x, oldExceptions %{public}#x", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022CE8C8);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCachedLocationController::suspendForException(CLCachedLocationController::CacheException)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  int v6 = *(_DWORD *)(a1 + 360);
  if (v6)
  {
    *(_DWORD *)(a1 + 360) = v6 | a2;
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022CE8C8);
    }
    int v7 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLC: Suspend", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022CE8C8);
      }
      double v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCachedLocationController::suspendForException(CLCachedLocationController::CacheException)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    *(_DWORD *)(a1 + 360) |= a2;
    sub_10088D3A0(a1, 0, 1.79769313e308);
    [*(id *)(a1 + 544) disable];
  }
}

void sub_10088E41C(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 360))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022CE8C8);
    }
    uint64_t v4 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(_DWORD *)(a1 + 360);
      *(_DWORD *)uint64_t buf = 67240448;
      int v11 = a2;
      __int16 v12 = 1026;
      int v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLC: Resume for exception, %{public}#x, oldExceptions %{public}#x", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022CE8C8);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCachedLocationController::resumeForException(CacheException)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    BOOL v6 = (*(_DWORD *)(a1 + 360) & ~a2) == 0;
    *(_DWORD *)(a1 + 360) &= ~a2;
    if (v6)
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022CE8C8);
      }
      int v7 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLC: Resume", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022CE8C8);
        }
        double v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLCachedLocationController::resumeForException(CacheException)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      [*(id *)(a1 + 544) enable];
      [*(id *)(a1 + 544) notifyFromLastInfo];
    }
  }
}

void sub_10088E744(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        double v9 = (uint64_t *)v4;
      }
      else {
        double v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)uint64_t buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022CE870);
      }
      double v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        int v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v11 = (void *)*v11;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        long long v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022CE870);
        }
        __int16 v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          __int16 v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        uint64_t v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_10088E9D4(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_10088EA88(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_10088EAD0(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_10088EB18(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_10088EB60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_10241E3F0);
}

uint64_t sub_10088EB8C(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        int v13 = (uint64_t *)v7;
      }
      else {
        int v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)char v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          int v24 = (uint64_t *)v18;
        }
        else {
          int v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          uint64_t v29 = (uint64_t *)v25;
        }
        else {
          uint64_t v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)uint64_t buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        *(_DWORD *)uint64_t buf = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_1008913AC();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_10241E3F1;
        int v39 = v17;
        *(void *)uint64_t buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)uint64_t buf = &v39;
        __int16 v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        uint64_t v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)uint64_t buf = &v39;
        int v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)uint64_t buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)uint64_t buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CE870);
  }
  uint64_t v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v15 = (void *)*v15;
    }
    *(_DWORD *)uint64_t buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v46 = 1026;
    int v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CE870);
    }
    long long v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v37 = (void *)*v37;
    }
    *(_DWORD *)char v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    long long v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_10088F030(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CE870);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      int v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022CE870);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_10088F2B4(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        int v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            int v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022CE870);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022CE870);
                }
                uint64_t v29 = a1 + 8;
                if (a1[31] < 0) {
                  uint64_t v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                long long v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                __int16 v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_10088F688(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v6 = operator new(0x20uLL);
  v6[1] = 0;
  uint64_t v6[2] = 0;
  *((_DWORD *)v6 + 6) = *a3;
  *uint64_t v6 = off_1022CEA00;
  int v10 = *a2;
  int v11 = &v10;
  int v7 = sub_10044715C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101D0B290, &v11);
  BOOL v8 = (std::__shared_weak_count *)v7[9];
  v7[8] = v6 + 3;
  _OWORD v7[9] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return 1;
}

void sub_10088F73C(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10088F750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, &v5, a3, a4, 0);
}

void sub_10088F7A4(uint64_t a1, unsigned int *a2, _DWORD *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  BOOL v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CE870);
  }
  int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)uint64_t buf = 68289794;
    int v22 = 0;
    __int16 v23 = 2082;
    *(void *)BOOL v24 = "";
    *(_WORD *)&v24[8] = 2082;
    *(void *)&v24[10] = "activity";
    __int16 v25 = 2082;
    int v26 = v10;
    __int16 v27 = 2050;
    BOOL v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    uint64_t v29 = v30;
    memset(v30, 0, sizeof(v30));
    __int16 v31 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v29);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v28) {
      sub_1000DB0A0(v28);
    }
    sub_1000F5BB0((uint64_t)&v23, *(void **)&v24[6]);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v29, v30[0]);
  }
  if (a4)
  {
    BOOL v18 = operator new(0x20uLL);
    v18[1] = 0;
    _OWORD v18[2] = 0;
    *BOOL v18 = off_1022CEA00;
    *((_DWORD *)v18 + 6) = *a3;
    int v19 = (std::__shared_weak_count *)v14[9];
    _OWORD v14[8] = v18 + 3;
    v14[9] = v18;
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v19 = (std::__shared_weak_count *)v14[9];
  _OWORD v14[8] = 0;
  v14[9] = 0;
  if (v19) {
LABEL_27:
  }
    sub_1000DB0A0(v19);
LABEL_28:
  if (v14[7]) {
    sub_1008904DC();
  }
  os_activity_scope_leave(&state);
}

void sub_10088FD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_10088FDD4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CE870);
    }
    int v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v3 = (void *)*v3;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022CE870);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::listClients() [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CE870);
    }
    int v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022CE870);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::listClients() [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    BOOL v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022CE870);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)uint64_t buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022CE870);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::listClients() [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            BOOL v8 = v19;
          }
          while (!v16);
        }
        BOOL v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_100890384(uint64_t a1)
{
  sub_10089046C(a1);

  operator delete();
}

void sub_1008903BC(uint64_t a1, int a2, void *a3)
{
  sub_100890B0C(a3);
  if (v5)
  {
    int v6 = a2;
    (*(void (**)(void, int *, uint64_t, void))(a1 + 24))(0, &v6, v5, *(void *)(a1 + 32));
  }
}

void sub_10089040C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10089043C(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_10089046C(uint64_t a1)
{
  *(void *)a1 = off_1022CE8F8;
  int v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_1008904DC()
{
}

void sub_100890588(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      int v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          int v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        double v49 = v9;
        sub_100890B0C(a3);
        (*(void (**)(void *, int *, uint64_t, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              __int16 v48 = v19;
              sub_100890978(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              uint64_t v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  uint64_t v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              double v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              __int16 v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022CE870);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)uint64_t buf = 136446466;
                __int16 v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022CE870);
                }
                __int16 v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                long long v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                int v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_100890978(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v14) = *(_DWORD *)(*(void *)a3 + 32);
    sub_100890B0C(a4);
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)a3 + 80;
    int v12 = (uint64_t **)(*(void *)a3 + 40);
    int v15 = (int *)(*(void *)a2 + 32);
    uint64_t v13 = sub_1000EB1B8(v12, v15, (uint64_t)&unk_101D0B290, &v15);
    BOOL result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v14, v10, v11, v13 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v14];
    }
  }
  return result;
}

void sub_100890A70(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022CEA00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100890A90(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022CEA00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100890AEC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

void sub_100890B0C(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    sub_100890BA8(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      sub_100890F34(a1);
    }
  }
}

void sub_100890BA8(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2)
  {
    sub_1008912F4((uint64_t)&v6, a1);
    return;
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1022CEA40);
    }
    int v3 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v14 = v2;
      __int16 v15 = 2048;
      uint64_t v16 = 0;
      __int16 v17 = 2080;
      unint64_t v18 = 0x8000000101D51221 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_18:
        int v7 = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D51221 & 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLCachedLocationController_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
        return;
      }
LABEL_20:
      dispatch_once(&qword_102418F90, &stru_1022CEA40);
      goto LABEL_18;
    }
  }
  else
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_1022CEA40);
    }
    uint64_t v4 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v14 = v2;
      __int16 v15 = 2048;
      uint64_t v16 = 0;
      __int16 v17 = 2080;
      unint64_t v18 = 0x8000000101D51221 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_18;
      }
      goto LABEL_20;
    }
  }
}

id sub_100890F34(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022CEA40);
      }
      int v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D51221 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        char v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLCachedLocationController_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022CEA40);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D51221 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022CEA40);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_1008912F4(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_102392B70))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)4)
    {
      int v3 = (void *)sub_101A72844();
      sub_10089137C(v3);
      return;
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  [a2 cppObjectPtr];
}

void sub_10089137C(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_1008913AC()
{
}

uint64_t sub_100891458(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

void sub_100891478()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_1008914F8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_100891588(_Unwind_Exception *a1)
{
}

uint64_t sub_1008915A0()
{
  sub_100134750(&qword_10247E6F8, "com.apple.locationd.bundle-/System/Library/LocationBundles/Traffic.bundle");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247E6F8, (void *)&_mh_execute_header);
}

NSDictionary *sub_100891600()
{
  v10[0] = @"/System/Library/PrivateFrameworks/BulletinBoard.framework";
  v9[0] = @"/System/Library/LocationBundles/AppSuggestions.bundle";
  v9[1] = @"/System/Library/LocationBundles/CalendarLocation.bundle";
  _DWORD v9[2] = @"/System/Library/LocationBundles/DestinationdLocationBundleiOS.bundle";
  void v9[3] = @"/System/Library/LocationBundles/DoNotDisturb.bundle";
  void v9[4] = @"/System/Library/LocationBundles/ExposureNotificationBundle.bundle";
  void v9[5] = @"/System/Library/LocationBundles/MapsAnnouncements.bundle";
  v9[6] = @"/System/Library/LocationBundles/NavdLocationBundleiOS.bundle";
  v9[7] = @"/System/Library/LocationBundles/Oos.bundle";
  v9[8] = @"/System/Library/LocationBundles/PassbookRelevancy.bundle";
  v9[9] = @"/System/Library/LocationBundles/RemindersAlerts.bundle";
  v9[10] = @"/System/Library/LocationBundles/SafetyAlerts.bundle";
  v9[11] = @"/System/Library/LocationBundles/ShortcutsLocation.bundle";
  v9[12] = @"/System/Library/LocationBundles/Wea.bundle";
  v11[0] = +[NSArray arrayWithObjects:v9 count:13];
  v10[1] = @"/System/Library/LocationBundles/Traffic.bundle";
  v8[0] = @"/System/Library/LocationBundles/IonosphereHarvest.bundle";
  v8[1] = @"/System/Library/LocationBundles/AltimeterHarvest.bundle";
  void v8[2] = @"/System/Library/LocationBundles/GeocorrectionDLocationBundle.bundle";
  void v8[3] = @"/System/Library/LocationBundles/TraceHarvest.bundle";
  v11[1] = +[NSArray arrayWithObjects:v8 count:4];
  _DWORD v10[2] = @"/System/Library/PrivateFrameworks/MobileWiFi.framework";
  v7[0] = @"/System/Library/LocationBundles/UWBRegulatory.bundle";
  v7[1] = @"/System/Library/LocationBundles/WRMLinkSelection.bundle";
  _DWORD v7[2] = @"/System/Library/PrivateFrameworks/NetworkServiceProxy.framework";
  _DWORD v11[2] = +[NSArray arrayWithObjects:v7 count:3];
  v10[3] = @"/System/Library/LocationBundles/SystemCustomization.bundle";
  v6[0] = @"/System/Library/PrivateFrameworks/ChronoCore.framework";
  v6[1] = @"/System/Library/LocationBundles/CountryTracker.bundle";
  uint64_t v6[2] = @"/System/Library/PrivateFrameworks/ClockPoster.framework";
  void v6[3] = @"/System/Library/ExtensionKit/Extensions/MercuryPosterExtension.appex";
  void v6[4] = @"/System/Library/LocationBundles/WebContentFilterEligibility.bundle";
  void v11[3] = +[NSArray arrayWithObjects:v6 count:5];
  void v10[4] = @"/System/Library/PrivateFrameworks/CoreParsec.framework";
  CFStringRef v5 = @"/System/Library/LocationBundles/eSIMTravelBuddy.bundle";
  v11[4] = +[NSArray arrayWithObjects:&v5 count:1];
  v10[5] = @"/System/Library/PrivateFrameworks/HomeKitDaemon.framework";
  CFStringRef v4 = @"/System/Library/LocationBundles/CarPlayHomeLocation.bundle";
  v11[5] = +[NSArray arrayWithObjects:&v4 count:1];
  v10[6] = @"/System/Library/PrivateFrameworks/DeviceManagement.framework";
  CFStringRef v3 = @"/System/Library/PrivateFrameworks/MDM.framework";
  v11[6] = +[NSArray arrayWithObjects:&v3 count:1];
  v10[7] = @"/System/Library/PrivateFrameworks/FMF.framework";
  CFStringRef v2 = @"/System/Library/LocationBundles/SafetyMonitorLocationBundle.bundle";
  v11[7] = +[NSArray arrayWithObjects:&v2 count:1];
  v10[8] = @"/System/Library/LocationBundles/Routine.bundle";
  v1[0] = @"/System/Library/LocationBundles/Milod.bundle";
  v1[1] = @"/System/Library/LocationBundles/FedMobility.bundle";
  v11[8] = +[NSArray arrayWithObjects:v1 count:2];
  return +[NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:9];
}

NSArray *sub_100891970()
{
  v1[0] = @"/System/Library/LocationBundles/PassbookMerchantLookup.bundle";
  v1[1] = @"/System/Library/Frameworks/CoreTelephony.framework";
  void v1[2] = @"/System/Library/LocationBundles/CompassCalibration.bundle";
  v1[3] = @"/System/Library/LocationBundles/Emergency SOS.bundle";
  v1[4] = @"/System/Library/PrivateFrameworks/WirelessDiagnostics.framework";
  v1[5] = @"/System/Library/LocationBundles/MotionCalibration.bundle";
  char v1[6] = @"/System/Library/LocationBundles/TimeZone.bundle";
  v1[7] = @"/System/Library/PrivateFrameworks/FindMyDevice.framework";
  v1[8] = @"/System/Library/LocationBundles/WifiCalling.bundle";
  v1[9] = @"/System/Library/LocationBundles/Bifrost.bundle";
  v1[10] = @"/System/Library/LocationBundles/ClipServicesLocation.bundle";
  v1[11] = @"/System/Library/LocationBundles/AppGenius.bundle";
  return +[NSArray arrayWithObjects:v1 count:12];
}

NSArray *sub_100891A74()
{
  v1[0] = @"/System/Library/Frameworks/CoreWLAN.framework";
  v1[1] = @"/System/Library/LocationBundles/CarbonAnalytics.bundle";
  void v1[2] = @"/System/Library/LocationBundles/NanoCompassAlerts.bundle";
  return +[NSArray arrayWithObjects:v1 count:3];
}

void sub_100891BAC(id a1)
{
  qword_10247E738 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLTileDownloadSchedulingServiceSilo"];
}

void sub_10089226C(void *a1, uint64_t a2)
{
  xpc_dictionary_set_string(a1, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
  xpc_dictionary_set_BOOL(a1, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  xpc_dictionary_set_BOOL(a1, XPC_ACTIVITY_PREVENT_DEVICE_SLEEP, 1);
  BOOL v4 = a2 == 2;
  if (a2 == 2) {
    uint64_t v5 = 60;
  }
  else {
    uint64_t v5 = 30;
  }
  xpc_dictionary_set_BOOL(a1, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, v4);
  xpc_dictionary_set_string(a1, XPC_ACTIVITY_NETWORK_TRANSFER_DIRECTION, XPC_ACTIVITY_NETWORK_TRANSFER_DIRECTION_DOWNLOAD);
  xpc_dictionary_set_uint64(a1, XPC_ACTIVITY_GRACE_PERIOD, v5);
  char v6 = (const char *)XPC_ACTIVITY_REQUIRES_CLASS_C;

  xpc_dictionary_set_BOOL(a1, v6, 1);
}

void sub_10089236C(uint64_t a1, xpc_activity_t activity)
{
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022CEA80);
  }
  uint64_t v5 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    LODWORD(v16) = state;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#tiledownloadscheduler, callback, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022CEA80);
    }
    int v13 = 67240192;
    LODWORD(v14) = state;
    __int16 v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLTileDownloadSchedulingService scheduleDownloadsWithWifiConnectivity]_block_invoke", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (state == 2)
  {
    id v6 = [[objc_msgSend(*(id *)(a1 + 32), "universe") silo];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    CFAbsoluteTime v12[2] = sub_1008926FC;
    v12[3] = &unk_10229FED8;
    v12[4] = *(void *)(a1 + 32);
    [v6 async:v12];
    if (!xpc_activity_set_state(activity, 5))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022CEA80);
      }
      int v7 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
      {
        xpc_activity_state_t v8 = xpc_activity_get_state(activity);
        *(_DWORD *)uint64_t buf = 134349056;
        xpc_activity_state_t v16 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "#tiledownloadscheduler, failed to mark activity as done. current state, %{public}ld", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022CEA80);
        }
        xpc_activity_state_t v10 = xpc_activity_get_state(activity);
        int v13 = 134349056;
        xpc_activity_state_t v14 = v10;
        __int16 v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "-[CLTileDownloadSchedulingService scheduleDownloadsWithWifiConnectivity]_block_invoke", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
    }
  }
}

id sub_1008926FC(uint64_t a1)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022CEA80);
  }
  CFStringRef v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    id v3 = [[objc_msgSend(*(id *)(a1 + 32), "clients") count];
    *(_DWORD *)uint64_t buf = 134349056;
    id v19 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#tiledownloadscheduler, run, wifi connectivity, client count, %{public}ld", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022CEA80);
    }
    id v9 = [[objc_msgSend(*(id *)(a1 + 32), "clients") count];
    int v16 = 134349056;
    id v17 = v9;
    xpc_activity_state_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLTileDownloadSchedulingService scheduleDownloadsWithWifiConnectivity]_block_invoke", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  [*(id *)(a1 + 32) setHasRegisteredForWifiConnectivity:0];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v4 = [*(id *)(a1 + 32) clients];
  id result = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (result)
  {
    id v6 = result;
    uint64_t v7 = *(void *)v12;
    do
    {
      xpc_activity_state_t v8 = 0;
      do
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        [*(id *)(*((void *)&v11 + 1) + 8 * (void)v8) onScheduledTileDownloadWithReachabilityRequirement:2];
        xpc_activity_state_t v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id result = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      id v6 = result;
    }
    while (result);
  }
  return result;
}

void sub_100892A1C(uint64_t a1, xpc_activity_t activity)
{
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022CEA80);
  }
  uint64_t v5 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    LODWORD(v16) = state;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#tiledownloadscheduler, callback, %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022CEA80);
    }
    int v13 = 67240192;
    LODWORD(v14) = state;
    id v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLTileDownloadSchedulingService scheduleDownloadsWithCellularConnectivity]_block_invoke", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (state == 2)
  {
    id v6 = [[objc_msgSend(*(id *)(a1 + 32), "universe") silo];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    CFAbsoluteTime v12[2] = sub_100892DAC;
    v12[3] = &unk_10229FED8;
    v12[4] = *(void *)(a1 + 32);
    [v6 async:v12];
    if (!xpc_activity_set_state(activity, 5))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022CEA80);
      }
      uint64_t v7 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
      {
        xpc_activity_state_t v8 = xpc_activity_get_state(activity);
        *(_DWORD *)uint64_t buf = 134349056;
        xpc_activity_state_t v16 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "#tiledownloadscheduler, failed to mark activity as done. current state, %{public}ld", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_1022CEA80);
        }
        xpc_activity_state_t v10 = xpc_activity_get_state(activity);
        int v13 = 134349056;
        xpc_activity_state_t v14 = v10;
        long long v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "-[CLTileDownloadSchedulingService scheduleDownloadsWithCellularConnectivity]_block_invoke", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
    }
  }
}

id sub_100892DAC(uint64_t a1)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022CEA80);
  }
  CFStringRef v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    id v3 = [[*(id *)(a1 + 32) clients] count];
    *(_DWORD *)uint64_t buf = 134349056;
    id v19 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#tiledownloadscheduler, run, cellular connectivity, client count, %{public}ld", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022CEA80);
    }
    id v9 = [[objc_msgSend(*(id *)(a1 + 32), "clients") count];
    int v16 = 134349056;
    id v17 = v9;
    xpc_activity_state_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLTileDownloadSchedulingService scheduleDownloadsWithCellularConnectivity]_block_invoke", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  [*(id *)(a1 + 32) setHasRegisteredForCellularConnectivity:0];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v4 = [*(id *)(a1 + 32) clients];
  id result = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (result)
  {
    id v6 = result;
    uint64_t v7 = *(void *)v12;
    do
    {
      xpc_activity_state_t v8 = 0;
      do
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        [*(id *)(*((void *)&v11 + 1) + 8 * (void)v8) onScheduledTileDownloadWithReachabilityRequirement:1];
        xpc_activity_state_t v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id result = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      id v6 = result;
    }
    while (result);
  }
  return result;
}

void sub_10089309C(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

BOOL sub_1008930CC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 52) != 0;
}

BOOL sub_1008930EC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 52) == 0;
}

uint64_t sub_100893104(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

BOOL sub_100893110(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int16 *)(a1 + 22);
  if (*(unsigned __int16 *)(a1 + 22) <= 3u) {
    int v3 = 3;
  }
  else {
    int v3 = *(unsigned __int16 *)(a1 + 22);
  }
  if (v3 - 3 >= v2)
  {
    unsigned int v4 = 0;
    if (!*(unsigned char *)(a1 + 84)) {
      return 0;
    }
  }
  else
  {
    unsigned int v4 = 0;
    unint64_t v5 = v2 - 1;
    do
    {
      if (*(float *)sub_1004182C4((unsigned __int16 *)(a1 + 20), v5) <= 18.0) {
        ++v4;
      }
      unsigned int v6 = *(unsigned __int16 *)(a1 + 22);
      if (v6 <= 3) {
        unsigned int v6 = 3;
      }
      --v5;
    }
    while ((int)v5 + 2 > (int)(v6 - 2));
    if (!*(unsigned char *)(a1 + 84))
    {
      if (v4 >= 3) {
        return *(unsigned char *)(a1 + 64) == 0;
      }
      return 0;
    }
  }

  return sub_10089320C(a1, v4);
}

BOOL sub_10089320C(uint64_t a1, unsigned int a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (*(_WORD *)(a1 + 22)
    && *(float *)sub_1004182C4((unsigned __int16 *)(a1 + 20), *(unsigned __int16 *)(a1 + 22) - 1) > *(float *)(a1 + 80))
  {
    *(void *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  }
  BOOL v5 = 0;
  if (a2 >= 3 && !*(unsigned char *)(a1 + 64))
  {
    double v6 = *(double *)(a1 + 72);
    BOOL v5 = Current > v6;
    if (Current > v6)
    {
      if (Current - v6 <= 180.0) {
        return 0;
      }
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_1022CEB90);
      }
      uint64_t v7 = qword_1024190D8;
      if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 72);
        *(_DWORD *)uint64_t buf = 134218240;
        double v12 = Current;
        __int16 v13 = 2048;
        uint64_t v14 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "pressure quality check for good wet barometer mitigation should be applied,now,%f,lastUnknownToGoodSatifiedTimestamp,%f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190D0 != -1) {
          dispatch_once(&qword_1024190D0, &stru_1022CEB90);
        }
        xpc_activity_state_t v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPressureQualityController::checkForGoodWetBarometerMitigationShouldBeApplied(const int) const", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
      double Current = 1.79769313e308;
    }
    *(double *)(a1 + 72) = Current;
  }
  return v5;
}

BOOL sub_100893468(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int16 *)(a1 + 22);
  if (*(unsigned __int16 *)(a1 + 22) <= 1u) {
    unsigned int v2 = 1;
  }
  else {
    unsigned int v2 = *(unsigned __int16 *)(a1 + 22);
  }
  if (v2 > v1) {
    return 0;
  }
  int v5 = 0;
  double v6 = (unsigned __int16 *)(a1 + 20);
  unint64_t v7 = v1 - 1;
  do
  {
    if (*(float *)sub_1004182C4(v6, v7) >= 275.0) {
      ++v5;
    }
    int v8 = *(unsigned __int16 *)(a1 + 22);
    if (v8 <= 1) {
      int v8 = 1;
    }
    --v7;
  }
  while ((int)v7 + 2 > v8);
  return v5 != 0;
}

BOOL sub_100893504(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int16 *)(a1 + 22);
  if (*(unsigned __int16 *)(a1 + 22) <= 5u) {
    int v2 = 5;
  }
  else {
    int v2 = *(unsigned __int16 *)(a1 + 22);
  }
  if (v2 - 5 >= v1) {
    return 0;
  }
  unsigned int v4 = 0;
  int v5 = (unsigned __int16 *)(a1 + 20);
  unint64_t v6 = v1 - 1;
  do
  {
    if (*(float *)sub_1004182C4(v5, v6) < 275.0) {
      ++v4;
    }
    unsigned int v7 = *(unsigned __int16 *)(a1 + 22);
    if (v7 <= 5) {
      unsigned int v7 = 5;
    }
    --v6;
  }
  while ((int)v6 + 2 > (int)(v7 - 4));
  return v4 > 2;
}

BOOL sub_1008935B4(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int16 *)(a1 + 22);
  if (*(unsigned __int16 *)(a1 + 22) <= 5u) {
    int v2 = 5;
  }
  else {
    int v2 = *(unsigned __int16 *)(a1 + 22);
  }
  if (v2 - 5 >= v1) {
    return 0;
  }
  unsigned int v4 = 0;
  int v5 = (unsigned __int16 *)(a1 + 20);
  unint64_t v6 = v1 - 1;
  do
  {
    int v7 = *(float *)sub_1004182C4(v5, v6) > *(float *)(a1 + 80) && *(float *)sub_1004182C4(v5, v6) < 275.0;
    v4 += v7;
    unsigned int v8 = *(unsigned __int16 *)(a1 + 22);
    if (v8 <= 5) {
      unsigned int v8 = 5;
    }
    --v6;
  }
  while ((int)v6 + 2 > (int)(v8 - 4));
  return v4 > 2;
}

void sub_10089368C(uint64_t a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 56) = -1082130432;
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_1022CEB90);
  }
  int v3 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *(unsigned __int8 *)(a1 + 60);
    int v5 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)uint64_t buf = 134218496;
    CFAbsoluteTime v8 = Current;
    __int16 v9 = 1024;
    int v10 = v4;
    __int16 v11 = 1024;
    int v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "pressure quality state reset,timestamp,%f,old,%d,new,%d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022CEB90);
    }
    unint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureQualityController::reset(const EInWorkout *)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  *(unsigned char *)(a1 + 60) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
}

uint64_t sub_10089389C(uint64_t a1)
{
  *(void *)a1 = &unk_1022CEAA0;
  *(void *)(a1 + 8) = 10;
  *(_WORD *)(a1 + 16) = 512;
  *(void *)(a1 + 20) = 0x500000000;
  *(void *)(a1 + 48) = 3212836864;
  *(_DWORD *)(a1 + 56) = -1082130432;
  *(unsigned char *)(a1 + 60) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0x7FEFFFFFFFFFFFFFLL;
  int v2 = sub_1007432FC();
  *(unsigned char *)(a1 + 84) = v2;
  float v3 = 54.0;
  if (v2) {
    float v3 = 35.0;
  }
  *(float *)(a1 + 80) = v3;
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_1022CEB90);
  }
  int v4 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 84);
    double v6 = *(float *)(a1 + 80);
    *(_DWORD *)uint64_t buf = 67109376;
    int v10 = v5;
    __int16 v11 = 2048;
    double v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "init pressure quality controller,deviceModelRequiresWetBarometerMitigation,%d,unknownFromGoodThreshold,%f", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022CEB90);
    }
    CFAbsoluteTime v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLPressureQualityController::CLPressureQualityController()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return a1;
}

uint64_t sub_100893AE8(uint64_t result, int a2, int a3, float a4)
{
  if (a4 != -1.0 && a3 != 0)
  {
    BOOL v5 = a4 <= 18.0 && a2 <= 0;
    if (!v5 || a3 == 6)
    {
      uint64_t v7 = *(unsigned __int16 *)(result + 20);
      uint64_t v8 = *(unsigned __int16 *)(result + 22);
      unint64_t v9 = *(unsigned int *)(result + 24);
      if (v7 + v8 >= v9) {
        uint64_t v10 = *(unsigned int *)(result + 24);
      }
      else {
        uint64_t v10 = 0;
      }
      *(float *)(result + 20 + 4 * (v7 + v8 - v10) + 8) = a4;
      if (v9 <= v8)
      {
        unint64_t v11 = v7 + 1;
        if (v11 < v9) {
          LOWORD(v9) = 0;
        }
        *(_WORD *)(result + 20) = v11 - v9;
      }
      else
      {
        *(_WORD *)(result + 22) = v8 + 1;
      }
    }
  }
  return result;
}

uint64_t sub_100893B60(uint64_t a1, int a2, int a3, __int16 a4, float a5)
{
  *(_DWORD *)(a1 + 52) = a3;
  *(float *)(a1 + 48) = a5;
  uint64_t result = sub_1001A34E0(a1, 1, (uint64_t)&v12);
  if (a3)
  {
    uint64_t result = sub_100893AE8(a1, a2, a3, a5);
    *(unsigned char *)(a1 + 64) |= (a4 & 0x1000) != 0;
    if (*(_WORD *)(a1 + 22)) {
      return sub_1001A34E0(a1, 0, (uint64_t)&v11);
    }
  }
  return result;
}

void sub_100893BFC(id a1)
{
  qword_1024190D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

void sub_100893C2C(uint64_t a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 48);
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_1022CEB90);
  }
  float v3 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *(unsigned __int8 *)(a1 + 60);
    int v5 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)uint64_t buf = 134218496;
    CFAbsoluteTime v8 = Current;
    __int16 v9 = 1024;
    int v10 = v4;
    __int16 v11 = 1024;
    int v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "pressure quality state transition,timestamp,%f,old,%d,new,%d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022CEB90);
    }
    double v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureQualityController::setResult(const T *) [T = CLPressureQualityController::EInWorkout]", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a1 + 16);
}

void sub_100893E34(uint64_t a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 48);
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_1022CEB90);
  }
  float v3 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *(unsigned __int8 *)(a1 + 60);
    int v5 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)uint64_t buf = 134218496;
    CFAbsoluteTime v8 = Current;
    __int16 v9 = 1024;
    int v10 = v4;
    __int16 v11 = 1024;
    int v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "pressure quality state transition,timestamp,%f,old,%d,new,%d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022CEB90);
    }
    double v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLPressureQualityController::setResult(const T *) [T = CLPressureQualityController::ETransition]", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a1 + 16);
}

void sub_100894530(id a1)
{
  if (qword_1024194B0 != -1) {
    dispatch_once(&qword_1024194B0, &stru_1022CEC18);
  }
  uint64_t v1 = qword_1024194B8;
  if (os_log_type_enabled((os_log_t)qword_1024194B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "xpc interruption handler", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194B0 != -1) {
      dispatch_once(&qword_1024194B0, &stru_1022CEC18);
    }
    int v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGatheringXPCServer listener:shouldAcceptNewConnection:]_block_invoke", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
}

void sub_1008946B8(id a1)
{
  if (qword_1024194B0 != -1) {
    dispatch_once(&qword_1024194B0, &stru_1022CEC18);
  }
  uint64_t v1 = qword_1024194B8;
  if (os_log_type_enabled((os_log_t)qword_1024194B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "xpc invalidation handler", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194B0 != -1) {
      dispatch_once(&qword_1024194B0, &stru_1022CEC18);
    }
    int v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGatheringXPCServer listener:shouldAcceptNewConnection:]_block_invoke", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
}

uint64_t sub_100894A2C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 32) fetchAllBleAdvertisements];
  if (qword_1024194B0 != -1) {
    dispatch_once(&qword_1024194B0, &stru_1022CEC18);
  }
  float v3 = qword_1024194B8;
  if (os_log_type_enabled((os_log_t)qword_1024194B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 134217984;
    id v7 = [v2 count];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "fetch'd %zu advertisements from volatile store", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194B0 != -1) {
      dispatch_once(&qword_1024194B0, &stru_1022CEC18);
    }
    [v2 count];
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGatheringXPCServer fetchAdvertisementsWithCompletion:]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_100894E00(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 32) fetchAllBleAdvertisements];
  double v10 = 0.0;
  uint64_t v11 = 0;
  [*(id *)(*(void *)(a1 + 32) + 32) fetchFromStatisticsNumberOfAdvs:&v11 accumulatedTime:&v10];
  if (qword_1024194B0 != -1) {
    dispatch_once(&qword_1024194B0, &stru_1022CEC18);
  }
  float v3 = qword_1024194B8;
  if (os_log_type_enabled((os_log_t)qword_1024194B8, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = [v2 count];
    *(_DWORD *)uint64_t buf = 134218496;
    id v21 = v4;
    __int16 v22 = 2048;
    uint64_t v23 = v11;
    __int16 v24 = 2048;
    double v25 = v10;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "fetch'd %zu advertisements from volatile store, N %zu, T %.1f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024194B0 != -1) {
      dispatch_once(&qword_1024194B0, &stru_1022CEC18);
    }
    id v8 = [v2 count];
    int v14 = 134218496;
    id v15 = v8;
    __int16 v16 = 2048;
    uint64_t v17 = v11;
    __int16 v18 = 2048;
    double v19 = v10;
    __int16 v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLGatheringXPCServer fetchAdvertisementsDetailedWithCompletion:]_block_invoke", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  v5.n128_f64[0] = v10;
  if (v10 == 0.0 && v11 != 0)
  {
    NSErrorUserInfoKey v12 = NSLocalizedDescriptionKey;
    CFStringRef v13 = @"received advertisements without scanning?";
    +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1, v10));
    v5.n128_f64[0] = v10;
  }
  return (*(uint64_t (**)(__n128))(*(void *)(a1 + 40) + 16))(v5);
}

uint64_t sub_1008952F0(void *a1)
{
  if ([*(id *)(a1[4] + 24) getEnablementStatus])
  {
    [*(id *)(a1[4] + 24) stop];
    [*(id *)(a1[4] + 40) overrideWithConfiguration:a1[6]];
    [*(id *)(a1[4] + 24) run];
    id v2 = *(uint64_t (**)(void))(a1[5] + 16);
    return v2();
  }
  else
  {
    NSErrorUserInfoKey v4 = NSLocalizedDescriptionKey;
    CFStringRef v5 = @"CLGatheringBluetoothClient disabled";
    +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1]);
    return (*(uint64_t (**)(void))(a1[5] + 16))();
  }
}

void sub_10089543C(id a1)
{
  qword_1024194B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gathering");
}

long double sub_1008954E0(uint64_t a1, float64x2_t *a2)
{
  if (qword_102418FA0 != -1) {
    dispatch_once(&qword_102418FA0, &stru_1022CEC58);
  }
  float v3 = qword_102418FA8;
  if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEFAULT))
  {
    float64_t v5 = a2->f64[0];
    float64_t v4 = a2->f64[1];
    float64_t v6 = a2[1].f64[0];
    float64_t v7 = a2[1].f64[1];
    *(_DWORD *)uint64_t buf = 134284289;
    float64_t v14 = v4;
    __int16 v15 = 2049;
    float64_t v16 = v5;
    __int16 v17 = 2049;
    float64_t v18 = v6;
    __int16 v19 = 2049;
    float64_t v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CLMobility::SteadinessModelBalance::Features,intermediateBoutsAsymmetryPercentageMedian,%{private}.3f,intermediateBoutsAsymmetryPercentageCv,%{private}.3f,intermediateBoutsDoubleSupportPercentageMedian,%{private}.3f,intermediateBoutsDoubleSupportPercentageStd,%{private}.3f", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_1022CEC58);
    }
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "double CLMobility::SteadinessModelBalance::runSteadinessModel(const Features &) const", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  float64x2_t v8 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*a2, v8), (int32x4_t)vceqq_f64(a2[1], v8)))) & 1) == 0) {
    return sub_100A1CA78(a2);
  }
  if (qword_102418FA0 != -1) {
    dispatch_once(&qword_102418FA0, &stru_1022CEC58);
  }
  __int16 v9 = qword_102418FA8;
  if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Rejection: CLMobilitySteadinessModelBalance missing required feature inputs", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_1022CEC58);
    }
    NSErrorUserInfoKey v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "double CLMobility::SteadinessModelBalance::runSteadinessModel(const Features &) const", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  return -INFINITY;
}

double sub_100895838(double a1, uint64_t a2, uint64_t *a3)
{
  int v46 = 0;
  int v47 = 0;
  uint64_t v48 = 0;
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  *(void *)uint64_t buf = &v46;
  if (v4 == v5)
  {
    std::string __p = 0;
    BOOL v44 = 0;
    __int16 v45 = 0;
    int v40 = 0;
    BOOL v41 = 0;
    char v42 = 0;
  }
  else
  {
    double v6 = a1 + -2419200.0;
    do
    {
      double v7 = *(double *)(v4 + 8);
      if (v7 < a1 && v7 >= v6) {
        sub_100708E0C((void ***)buf, (_OWORD *)v4);
      }
      v4 += 224;
    }
    while (v4 != v5);
    __int16 v9 = (double *)v46;
    double v10 = v47;
    std::string __p = 0;
    BOOL v44 = 0;
    __int16 v45 = 0;
    int v40 = 0;
    BOOL v41 = 0;
    char v42 = 0;
    if (v46 != v47)
    {
      do
      {
        double v11 = v9[2] - v9[1];
        if (v11 <= 600.0 && v11 > 60.0)
        {
          int v13 = *((_DWORD *)v9 + 13);
          if (v13) {
            int v14 = 42;
          }
          else {
            int v14 = -1;
          }
          if ((v14 & *((_DWORD *)v9 + 49)) == 0)
          {
            __int16 v15 = v44;
            if (v44 >= v45)
            {
              __int16 v17 = (char *)__p;
              uint64_t v18 = (v44 - (unsigned char *)__p) >> 3;
              unint64_t v19 = v18 + 1;
              if ((unint64_t)(v18 + 1) >> 61) {
                goto LABEL_75;
              }
              uint64_t v20 = v45 - (unsigned char *)__p;
              if ((v45 - (unsigned char *)__p) >> 2 > v19) {
                unint64_t v19 = v20 >> 2;
              }
              if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v21 = v19;
              }
              if (v21)
              {
                __int16 v22 = (char *)sub_1000DA54C((uint64_t)&v45, v21);
                __int16 v17 = (char *)__p;
                __int16 v15 = v44;
              }
              else
              {
                __int16 v22 = 0;
              }
              uint64_t v23 = &v22[8 * v18];
              *(double *)uint64_t v23 = v9[15];
              float64_t v16 = v23 + 8;
              while (v15 != v17)
              {
                uint64_t v24 = *((void *)v15 - 1);
                v15 -= 8;
                *((void *)v23 - 1) = v24;
                v23 -= 8;
              }
              std::string __p = v23;
              BOOL v44 = v16;
              __int16 v45 = &v22[8 * v21];
              if (v17) {
                operator delete(v17);
              }
            }
            else
            {
              *(double *)BOOL v44 = v9[15];
              float64_t v16 = v15 + 8;
            }
            BOOL v44 = v16;
            int v13 = *((_DWORD *)v9 + 13);
          }
          if (v13) {
            int v25 = 42;
          }
          else {
            int v25 = -1;
          }
          if ((v25 & *((_DWORD *)v9 + 51)) == 0)
          {
            int v26 = v41;
            if (v41 >= v42)
            {
              int v28 = (char *)v40;
              uint64_t v29 = (v41 - (unsigned char *)v40) >> 3;
              unint64_t v30 = v29 + 1;
              if ((unint64_t)(v29 + 1) >> 61) {
LABEL_75:
              }
                sub_1001D7FD4();
              uint64_t v31 = v42 - (unsigned char *)v40;
              if ((v42 - (unsigned char *)v40) >> 2 > v30) {
                unint64_t v30 = v31 >> 2;
              }
              if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v32 = v30;
              }
              if (v32)
              {
                uint64_t v33 = (char *)sub_1000DA54C((uint64_t)&v42, v32);
                int v28 = (char *)v40;
                int v26 = v41;
              }
              else
              {
                uint64_t v33 = 0;
              }
              uint64_t v34 = &v33[8 * v29];
              *(double *)uint64_t v34 = v9[17];
              uint64_t v27 = v34 + 8;
              while (v26 != v28)
              {
                uint64_t v35 = *((void *)v26 - 1);
                v26 -= 8;
                *((void *)v34 - 1) = v35;
                v34 -= 8;
              }
              int v40 = v34;
              BOOL v41 = v27;
              char v42 = &v33[8 * v32];
              if (v28) {
                operator delete(v28);
              }
            }
            else
            {
              *(double *)BOOL v41 = v9[17];
              uint64_t v27 = v26 + 8;
            }
            BOOL v41 = v27;
          }
        }
        v9 += 28;
      }
      while (v9 != v10);
    }
  }
  if (qword_102418FA0 != -1) {
    dispatch_once(&qword_102418FA0, &stru_1022CEC58);
  }
  uint64_t v36 = qword_102418FA8;
  if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134349824;
    *(double *)&uint8_t buf[4] = a1;
    __int16 v58 = 2050;
    uint64_t v59 = 0x6DB6DB6DB6DB6DB7 * (((char *)v47 - (unsigned char *)v46) >> 5);
    __int16 v60 = 2050;
    uint64_t v61 = (v44 - (unsigned char *)__p) >> 3;
    __int16 v62 = 2050;
    uint64_t v63 = (v41 - (unsigned char *)v40) >> 3;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "SteadinessModelBalance::extractFeatures,classificationTime,%{public}.2f,numBouts,%{public}lu,doubleSupportPercentages,%{public}lu,asymmetryPercentages,%{public}lu", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_1022CEC58);
    }
    int v49 = 134349824;
    double v50 = a1;
    __int16 v51 = 2050;
    uint64_t v52 = 0x6DB6DB6DB6DB6DB7 * (((char *)v47 - (unsigned char *)v46) >> 5);
    __int16 v53 = 2050;
    uint64_t v54 = (v44 - (unsigned char *)__p) >> 3;
    __int16 v55 = 2050;
    uint64_t v56 = (v41 - (unsigned char *)v40) >> 3;
    __int16 v39 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "Features CLMobility::SteadinessModelBalance::extractFeatures(CFAbsoluteTime, const std::vector<BoutMetrics> &) const", "%s\n", v39);
    if (v39 != buf) {
      free(v39);
    }
  }
  sub_1011370E4((uint64_t *)&v40);
  double v37 = sub_101136EBC((double **)&v40);
  sub_1011370E4((uint64_t *)&__p);
  sub_101136E08((double **)&__p);
  if (v40)
  {
    BOOL v41 = (char *)v40;
    operator delete(v40);
  }
  if (__p)
  {
    BOOL v44 = (char *)__p;
    operator delete(__p);
  }
  if (v46)
  {
    int v47 = (double *)v46;
    operator delete(v46);
  }
  return v37;
}

void sub_100895D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_100895DC8(id a1)
{
  qword_102418FA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

uint64_t sub_100895DF8()
{
  uint64_t result = qword_10248A400;
  if (qword_10248A400) {
    return (*(uint64_t (**)(void))(*(void *)qword_10248A400 + 8))();
  }
  return result;
}

void sub_100895E2C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_10247E748 & 1) == 0)
  {
    byte_10247E748 = 1;
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPPrivateDataCapture.pb.cc", a4);
    sub_1003DAD90(v4, v5, v6, v7);
    sub_100E18714(v8, v9, v10, v11);
    sub_100A13E00(v12, v13, v14, v15);
    sub_101421230(v16, v17, v18, v19);
    sub_100629CC8(v20, v21, v22, v23);
    sub_1017B9D2C(v24, v25, v26, v27);
    sub_100C39D24(v28, v29, v30, v31);
    sub_100FCBE50(v32, v33, v34, v35);
    sub_100AF95DC(v36, v37, v38, v39);
    sub_101498350(v40, v41, v42, v43);
    sub_1012C0D88(v44, v45, v46, v47);
    sub_1009B8564(v48, v49, v50, v51);
    sub_100F12A20(v52, v53, v54, v55);
    operator new();
  }
}

uint64_t sub_100895F74(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v5 = sub_1003DF19C((uint64_t)a1, a2, a3, a4);
  a1[1] = v5;
  uint64_t v9 = sub_1003E024C(v5, v6, v7, v8);
  a1[2] = v9;
  uint64_t v13 = sub_1003E122C(v9, v10, v11, v12);
  a1[3] = v13;
  uint64_t v17 = sub_1003E91D0(v13, v14, v15, v16);
  a1[4] = v17;
  uint64_t v21 = sub_1003EC7DC(v17, v18, v19, v20);
  a1[5] = v21;
  uint64_t v25 = sub_1003EDA84(v21, v22, v23, v24);
  a1[6] = v25;
  uint64_t v29 = sub_1003F17DC(v25, v26, v27, v28);
  a1[7] = v29;
  uint64_t v33 = sub_1003F207C(v29, v30, v31, v32);
  a1[8] = v33;
  uint64_t v37 = sub_1003F26A8(v33, v34, v35, v36);
  a1[9] = v37;
  uint64_t v41 = sub_1003F4080(v37, v38, v39, v40);
  a1[10] = v41;
  uint64_t v45 = sub_1003FB164(v41, v42, v43, v44);
  a1[11] = v45;
  uint64_t v49 = sub_1003FC318(v45, v46, v47, v48);
  a1[12] = v49;
  uint64_t v53 = sub_100E37898(v49, v50, v51, v52);
  a1[13] = v53;
  uint64_t v57 = sub_1003FD9D4(v53, v54, v55, v56);
  a1[14] = v57;
  uint64_t v61 = sub_1003FE1D4(v57, v58, v59, v60);
  a1[15] = v61;
  uint64_t v65 = sub_1004018E8(v61, v62, v63, v64);
  a1[16] = v65;
  uint64_t v69 = sub_100403F10(v65, v66, v67, v68);
  a1[17] = v69;
  uint64_t v73 = sub_1003E91D0(v69, v70, v71, v72);
  a1[18] = v73;
  uint64_t v77 = sub_1004069C8(v73, v74, v75, v76);
  a1[19] = v77;
  uint64_t v81 = sub_100408A90(v77, v78, v79, v80);
  a1[20] = v81;
  uint64_t v85 = sub_1003F554C(v81, v82, v83, v84);
  a1[21] = v85;
  uint64_t v89 = sub_10040AF3C(v85, v86, v87, v88);
  a1[22] = v89;
  uint64_t v93 = sub_1003F6EE8(v89, v90, v91, v92);
  a1[23] = v93;
  uint64_t v97 = sub_1003F8EB8(v93, v94, v95, v96);
  a1[24] = v97;
  uint64_t v101 = sub_1003F8090(v97, v98, v99, v100);
  a1[25] = v101;
  uint64_t v105 = sub_1004049CC(v101, v102, v103, v104);
  a1[26] = v105;
  uint64_t v109 = sub_100407810(v105, v106, v107, v108);
  a1[27] = v109;
  uint64_t v113 = sub_10040BE88(v109, v110, v111, v112);
  a1[28] = v113;
  uint64_t v117 = sub_10040DF28(v113, v114, v115, v116);
  a1[29] = v117;
  uint64_t v121 = sub_1004114F8(v117, v118, v119, v120);
  a1[30] = v121;
  uint64_t v125 = sub_100413020(v121, v122, v123, v124);
  a1[31] = v125;
  uint64_t v129 = sub_1003EFD40(v125, v126, v127, v128);
  a1[32] = v129;
  uint64_t v133 = sub_1004147EC(v129, v130, v131, v132);
  a1[33] = v133;
  uint64_t v137 = sub_10149DF40(v133, v134, v135, v136);
  a1[34] = v137;
  uint64_t v141 = sub_100415784(v137, v138, v139, v140);
  a1[35] = v141;
  uint64_t v145 = sub_100FE91B8(v141, v142, v143, v144);
  a1[36] = v145;
  uint64_t v149 = sub_100A14310(v145, v146, v147, v148);
  a1[37] = v149;
  uint64_t v153 = sub_100C3A1E4(v149, v150, v151, v152);
  a1[38] = v153;
  uint64_t v157 = sub_1017BA174(v153, v154, v155, v156);
  a1[39] = v157;
  uint64_t v161 = sub_100AF99B0(v157, v158, v159, v160);
  a1[40] = v161;
  uint64_t v165 = sub_1012C1C24(v161, v162, v163, v164);
  a1[41] = v165;
  uint64_t v169 = sub_10062A210(v165, v166, v167, v168);
  a1[42] = v169;
  uint64_t v173 = sub_101421950(v169, v170, v171, v172);
  a1[43] = v173;
  uint64_t v177 = sub_100F27EC4(v173, v174, v175, v176);
  a1[44] = v177;
  uint64_t v181 = sub_1009BACB8(v177, v178, v179, v180);
  a1[45] = v181;
  uint64_t v185 = sub_1009BB400(v181, v182, v183, v184);
  a1[46] = v185;
  uint64_t v189 = sub_1009BBCC4(v185, v186, v187, v188);
  a1[47] = v189;
  uint64_t v193 = sub_1009BC584(v189, v190, v191, v192);
  a1[48] = v193;
  uint64_t v197 = sub_1009BCCB8(v193, v194, v195, v196);
  a1[49] = v197;
  uint64_t v201 = sub_1009BDC00(v197, v198, v199, v200);
  a1[50] = v201;
  uint64_t v205 = sub_1009BE430(v201, v202, v203, v204);
  a1[51] = v205;
  uint64_t v209 = sub_1009BECE0(v205, v206, v207, v208);
  a1[52] = v209;
  uint64_t v213 = sub_1009BF980(v209, v210, v211, v212);
  a1[53] = v213;
  uint64_t v217 = sub_1009C01C8(v213, v214, v215, v216);
  a1[54] = v217;
  uint64_t v221 = sub_1009C0994(v217, v218, v219, v220);
  a1[55] = v221;
  uint64_t v225 = sub_1009C0FC0(v221, v222, v223, v224);
  a1[56] = v225;
  uint64_t v229 = sub_1009C16A0(v225, v226, v227, v228);
  a1[57] = v229;
  uint64_t v233 = sub_1009C1E34(v229, v230, v231, v232);
  a1[58] = v233;
  uint64_t result = sub_1009C24DC(v233, v234, v235, v236);
  a1[59] = result;
  return result;
}

void sub_10089616C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v125);
  }
  unsigned int v4 = *(_DWORD *)(a2 + 488);
  if ((_BYTE)v4)
  {
    if (v4)
    {
      *(_DWORD *)(a1 + 488) |= 1u;
      uint64_t v5 = *(void *)(a1 + 8);
      if (!v5) {
        operator new();
      }
      uint64_t v6 = *(void *)(a2 + 8);
      if (!v6) {
        uint64_t v6 = *(void *)(qword_10248A400 + 8);
      }
      sub_1003DEED8(v5, v6);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 2) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 2u;
      uint64_t v7 = *(void *)(a1 + 16);
      if (!v7) {
        operator new();
      }
      uint64_t v8 = *(void *)(a2 + 16);
      if (!v8) {
        uint64_t v8 = *(void *)(qword_10248A400 + 16);
      }
      sub_1003DFF88(v7, v8);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 4) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 4u;
      uint64_t v9 = *(void *)(a1 + 24);
      if (!v9) {
        operator new();
      }
      uint64_t v10 = *(void *)(a2 + 24);
      if (!v10) {
        uint64_t v10 = *(void *)(qword_10248A400 + 24);
      }
      sub_1003E0F6C(v9, v10);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 8) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 8u;
      uint64_t v11 = *(void *)(a1 + 32);
      if (!v11) {
        operator new();
      }
      uint64_t v12 = *(void *)(a2 + 32);
      if (!v12) {
        uint64_t v12 = *(void *)(qword_10248A400 + 32);
      }
      sub_1003E8BB8(v11, v12);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 0x10) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x10u;
      uint64_t v13 = *(void *)(a1 + 40);
      if (!v13) {
        operator new();
      }
      uint64_t v14 = *(void *)(a2 + 40);
      if (!v14) {
        uint64_t v14 = *(void *)(qword_10248A400 + 40);
      }
      sub_1003EC4D4(v13, v14);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 0x20) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x20u;
      uint64_t v15 = *(void *)(a1 + 48);
      if (!v15) {
        operator new();
      }
      uint64_t v16 = *(void *)(a2 + 48);
      if (!v16) {
        uint64_t v16 = *(void *)(qword_10248A400 + 48);
      }
      sub_1003ED784(v15, v16);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 0x40) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x40u;
      uint64_t v17 = *(void *)(a1 + 56);
      if (!v17) {
        operator new();
      }
      uint64_t v18 = *(void *)(a2 + 56);
      if (!v18) {
        uint64_t v18 = *(void *)(qword_10248A400 + 56);
      }
      sub_1003F14D4(v17, v18);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 0x80) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x80u;
      uint64_t v19 = *(void *)(a1 + 64);
      if (!v19) {
        operator new();
      }
      uint64_t v20 = *(void *)(a2 + 64);
      if (!v20) {
        uint64_t v20 = *(void *)(qword_10248A400 + 64);
      }
      sub_1003F1EB4(v19, v20);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
  }
  if ((v4 & 0xFF00) != 0)
  {
    if ((v4 & 0x100) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x100u;
      uint64_t v21 = *(void *)(a1 + 72);
      if (!v21) {
        operator new();
      }
      uint64_t v22 = *(void *)(a2 + 72);
      if (!v22) {
        uint64_t v22 = *(void *)(qword_10248A400 + 72);
      }
      sub_1003F2418(v21, v22);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 0x200) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x200u;
      uint64_t v23 = *(void *)(a1 + 80);
      if (!v23) {
        operator new();
      }
      uint64_t v24 = *(void *)(a2 + 80);
      if (!v24) {
        uint64_t v24 = *(void *)(qword_10248A400 + 80);
      }
      sub_1003F3D70(v23, v24);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 0x400) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x400u;
      uint64_t v25 = *(void *)(a1 + 88);
      if (!v25) {
        operator new();
      }
      uint64_t v26 = *(void *)(a2 + 88);
      if (!v26) {
        uint64_t v26 = *(void *)(qword_10248A400 + 88);
      }
      sub_1003FAC7C(v25, v26);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 0x800) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x800u;
      uint64_t v27 = *(void *)(a1 + 96);
      if (!v27) {
        operator new();
      }
      uint64_t v28 = *(void *)(a2 + 96);
      if (!v28) {
        uint64_t v28 = *(void *)(qword_10248A400 + 96);
      }
      sub_1003FC0D8(v27, v28);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 0x1000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x1000u;
      uint64_t v29 = *(void *)(a1 + 104);
      if (!v29) {
        operator new();
      }
      uint64_t v30 = *(void *)(a2 + 104);
      if (!v30) {
        uint64_t v30 = *(void *)(qword_10248A400 + 104);
      }
      sub_100E37154(v29, v30);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 0x2000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x2000u;
      uint64_t v31 = *(void *)(a1 + 112);
      if (!v31) {
        operator new();
      }
      uint64_t v32 = *(void *)(a2 + 112);
      if (!v32) {
        uint64_t v32 = *(void *)(qword_10248A400 + 112);
      }
      sub_1003FD710(v31, v32);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 0x4000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x4000u;
      uint64_t v33 = *(void *)(a1 + 120);
      if (!v33) {
        operator new();
      }
      uint64_t v34 = *(void *)(a2 + 120);
      if (!v34) {
        uint64_t v34 = *(void *)(qword_10248A400 + 120);
      }
      sub_1003FE00C(v33, v34);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 0x8000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x8000u;
      uint64_t v35 = *(void *)(a1 + 128);
      if (!v35) {
        operator new();
      }
      uint64_t v36 = *(void *)(a2 + 128);
      if (!v36) {
        uint64_t v36 = *(void *)(qword_10248A400 + 128);
      }
      sub_1004015BC(v35, v36);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
  }
  if ((v4 & 0xFF0000) != 0)
  {
    if ((v4 & 0x10000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x10000u;
      uint64_t v37 = *(void *)(a1 + 136);
      if (!v37) {
        operator new();
      }
      uint64_t v38 = *(void *)(a2 + 136);
      if (!v38) {
        uint64_t v38 = *(void *)(qword_10248A400 + 136);
      }
      sub_100403BBC(v37, v38);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 0x20000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x20000u;
      uint64_t v39 = *(void *)(a1 + 144);
      if (!v39) {
        operator new();
      }
      uint64_t v40 = *(void *)(a2 + 144);
      if (!v40) {
        uint64_t v40 = *(void *)(qword_10248A400 + 144);
      }
      sub_1003E8BB8(v39, v40);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 0x40000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x40000u;
      uint64_t v41 = *(void *)(a1 + 152);
      if (!v41) {
        operator new();
      }
      uint64_t v42 = *(void *)(a2 + 152);
      if (!v42) {
        uint64_t v42 = *(void *)(qword_10248A400 + 152);
      }
      sub_100406584(v41, v42);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 0x80000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x80000u;
      uint64_t v43 = *(void *)(a1 + 160);
      if (!v43) {
        operator new();
      }
      uint64_t v44 = *(void *)(a2 + 160);
      if (!v44) {
        uint64_t v44 = *(void *)(qword_10248A400 + 160);
      }
      sub_1004088BC(v43, v44);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 0x100000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x100000u;
      uint64_t v45 = *(void *)(a1 + 168);
      if (!v45) {
        operator new();
      }
      uint64_t v46 = *(void *)(a2 + 168);
      if (!v46) {
        uint64_t v46 = *(void *)(qword_10248A400 + 168);
      }
      sub_1003F5248(v45, v46);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 0x200000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x200000u;
      uint64_t v47 = *(void *)(a1 + 176);
      if (!v47) {
        operator new();
      }
      uint64_t v48 = *(void *)(a2 + 176);
      if (!v48) {
        uint64_t v48 = *(void *)(qword_10248A400 + 176);
      }
      sub_10040AA94(v47, v48);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 0x400000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x400000u;
      uint64_t v49 = *(void *)(a1 + 184);
      if (!v49) {
        operator new();
      }
      uint64_t v50 = *(void *)(a2 + 184);
      if (!v50) {
        uint64_t v50 = *(void *)(qword_10248A400 + 184);
      }
      sub_1003F6BD4(v49, v50);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 0x800000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x800000u;
      uint64_t v51 = *(void *)(a1 + 192);
      if (!v51) {
        operator new();
      }
      uint64_t v52 = *(void *)(a2 + 192);
      if (!v52) {
        uint64_t v52 = *(void *)(qword_10248A400 + 192);
      }
      sub_1003F8A90(v51, v52);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
  }
  if (HIBYTE(v4))
  {
    if ((v4 & 0x1000000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x1000000u;
      uint64_t v53 = *(void *)(a1 + 200);
      if (!v53) {
        operator new();
      }
      uint64_t v54 = *(void *)(a2 + 200);
      if (!v54) {
        uint64_t v54 = *(void *)(qword_10248A400 + 200);
      }
      sub_1003F7C7C(v53, v54);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 0x2000000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x2000000u;
      uint64_t v55 = *(void *)(a1 + 208);
      if (!v55) {
        operator new();
      }
      uint64_t v56 = *(void *)(a2 + 208);
      if (!v56) {
        uint64_t v56 = *(void *)(qword_10248A400 + 208);
      }
      sub_100404704(v55, v56);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 0x4000000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x4000000u;
      uint64_t v57 = *(void *)(a1 + 216);
      if (!v57) {
        operator new();
      }
      uint64_t v58 = *(void *)(a2 + 216);
      if (!v58) {
        uint64_t v58 = *(void *)(qword_10248A400 + 216);
      }
      sub_100407540(v57, v58);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 0x8000000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x8000000u;
      uint64_t v59 = *(void *)(a1 + 224);
      if (!v59) {
        operator new();
      }
      uint64_t v60 = *(void *)(a2 + 224);
      if (!v60) {
        uint64_t v60 = *(void *)(qword_10248A400 + 224);
      }
      sub_10040BD14(v59, v60);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 0x10000000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x10000000u;
      uint64_t v61 = *(void *)(a1 + 232);
      if (!v61) {
        operator new();
      }
      uint64_t v62 = *(void *)(a2 + 232);
      if (!v62) {
        uint64_t v62 = *(void *)(qword_10248A400 + 232);
      }
      sub_10040DB20(v61, v62);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 0x20000000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x20000000u;
      uint64_t v63 = *(void *)(a1 + 240);
      if (!v63) {
        operator new();
      }
      uint64_t v64 = *(void *)(a2 + 240);
      if (!v64) {
        uint64_t v64 = *(void *)(qword_10248A400 + 240);
      }
      sub_100411204(v63, v64);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 0x40000000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x40000000u;
      uint64_t v65 = *(void *)(a1 + 248);
      if (!v65) {
        operator new();
      }
      uint64_t v66 = *(void *)(a2 + 248);
      if (!v66) {
        uint64_t v66 = *(void *)(qword_10248A400 + 248);
      }
      sub_100412C80(v65, v66);
      unsigned int v4 = *(_DWORD *)(a2 + 488);
    }
    if ((v4 & 0x80000000) != 0)
    {
      *(_DWORD *)(a1 + 488) |= 0x80000000;
      uint64_t v67 = *(void *)(a1 + 256);
      if (!v67) {
        operator new();
      }
      uint64_t v68 = *(void *)(a2 + 256);
      if (!v68) {
        uint64_t v68 = *(void *)(qword_10248A400 + 256);
      }
      sub_1003EFA3C(v67, v68);
    }
  }
  unsigned int v69 = *(_DWORD *)(a2 + 492);
  if ((_BYTE)v69)
  {
    if (v69)
    {
      *(_DWORD *)(a1 + 492) |= 1u;
      uint64_t v70 = *(void *)(a1 + 264);
      if (!v70) {
        operator new();
      }
      uint64_t v71 = *(void *)(a2 + 264);
      if (!v71) {
        uint64_t v71 = *(void *)(qword_10248A400 + 264);
      }
      sub_100414248(v70, v71);
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
    if ((v69 & 2) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 2u;
      uint64_t v72 = *(void *)(a1 + 272);
      if (!v72) {
        operator new();
      }
      uint64_t v73 = *(void *)(a2 + 272);
      if (!v73) {
        uint64_t v73 = *(void *)(qword_10248A400 + 272);
      }
      sub_10149DAA0(v72, v73);
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
    if ((v69 & 4) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 4u;
      uint64_t v74 = *(void *)(a1 + 280);
      if (!v74) {
        operator new();
      }
      uint64_t v75 = *(void *)(a2 + 280);
      if (!v75) {
        uint64_t v75 = *(void *)(qword_10248A400 + 280);
      }
      sub_1004155C0(v74, v75);
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
    if ((v69 & 8) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 8u;
      uint64_t v76 = *(void *)(a1 + 288);
      if (!v76) {
        operator new();
      }
      uint64_t v77 = *(void *)(a2 + 288);
      if (!v77) {
        uint64_t v77 = *(void *)(qword_10248A400 + 288);
      }
      sub_100FE8CC4(v76, v77);
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
    if ((v69 & 0x10) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x10u;
      uint64_t v78 = *(void *)(a1 + 296);
      if (!v78) {
        operator new();
      }
      uint64_t v79 = *(void *)(a2 + 296);
      if (!v79) {
        uint64_t v79 = *(void *)(qword_10248A400 + 296);
      }
      sub_100A14020(v78, v79);
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
    if ((v69 & 0x20) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x20u;
      uint64_t v80 = *(void *)(a1 + 304);
      if (!v80) {
        operator new();
      }
      uint64_t v81 = *(void *)(a2 + 304);
      if (!v81) {
        uint64_t v81 = *(void *)(qword_10248A400 + 304);
      }
      sub_100C39E38(v80, v81);
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
    if ((v69 & 0x40) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x40u;
      uint64_t v82 = *(void *)(a1 + 312);
      if (!v82) {
        operator new();
      }
      uint64_t v83 = *(void *)(a2 + 312);
      if (!v83) {
        uint64_t v83 = *(void *)(qword_10248A400 + 312);
      }
      sub_1017B9F9C(v82, v83);
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
    if ((v69 & 0x80) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x80u;
      uint64_t v84 = *(void *)(a1 + 320);
      if (!v84) {
        operator new();
      }
      uint64_t v85 = *(void *)(a2 + 320);
      if (!v85) {
        uint64_t v85 = *(void *)(qword_10248A400 + 320);
      }
      sub_100AF97E8(v84, v85);
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
  }
  if ((v69 & 0xFF00) != 0)
  {
    if ((v69 & 0x100) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x100u;
      uint64_t v86 = *(void *)(a1 + 328);
      if (!v86) {
        operator new();
      }
      uint64_t v87 = *(void *)(a2 + 328);
      if (!v87) {
        uint64_t v87 = *(void *)(qword_10248A400 + 328);
      }
      sub_1012C14A4(v86, v87);
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
    if ((v69 & 0x200) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x200u;
      uint64_t v88 = *(void *)(a1 + 336);
      if (!v88) {
        operator new();
      }
      uint64_t v89 = *(void *)(a2 + 336);
      if (!v89) {
        uint64_t v89 = *(void *)(qword_10248A400 + 336);
      }
      sub_10062A040(v88, v89);
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
    if ((v69 & 0x400) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x400u;
      uint64_t v90 = *(void *)(a1 + 344);
      if (!v90) {
        operator new();
      }
      uint64_t v91 = *(void *)(a2 + 344);
      if (!v91) {
        uint64_t v91 = *(void *)(qword_10248A400 + 344);
      }
      sub_1014215A4(v90, v91);
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
    if ((v69 & 0x800) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x800u;
      uint64_t v92 = *(void *)(a1 + 352);
      if (!v92) {
        operator new();
      }
      uint64_t v93 = *(void *)(a2 + 352);
      if (!v93) {
        uint64_t v93 = *(void *)(qword_10248A400 + 352);
      }
      sub_100F2740C(v92, v93);
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
    if ((v69 & 0x1000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x1000u;
      uint64_t v94 = *(void *)(a1 + 360);
      if (!v94) {
        operator new();
      }
      uint64_t v95 = *(void *)(a2 + 360);
      if (!v95) {
        uint64_t v95 = *(void *)(qword_10248A400 + 360);
      }
      sub_1009BAAB8(v94, v95);
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
    if ((v69 & 0x2000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x2000u;
      uint64_t v96 = *(void *)(a1 + 368);
      if (!v96) {
        operator new();
      }
      uint64_t v97 = *(void *)(a2 + 368);
      if (!v97) {
        uint64_t v97 = *(void *)(qword_10248A400 + 368);
      }
      sub_1009BB1A4(v96, v97);
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
    if ((v69 & 0x4000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x4000u;
      uint64_t v98 = *(void *)(a1 + 376);
      if (!v98) {
        operator new();
      }
      uint64_t v99 = *(void *)(a2 + 376);
      if (!v99) {
        uint64_t v99 = *(void *)(qword_10248A400 + 376);
      }
      sub_1009BBB04(v98, v99);
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
    if ((v69 & 0x8000) != 0)
    {
      unsigned int v100 = *(_DWORD *)(a2 + 480);
      if (!sub_10016E644(v100)) {
        sub_101A729C0();
      }
      *(_DWORD *)(a1 + 492) |= 0x8000u;
      *(_DWORD *)(a1 + 480) = v100;
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
  }
  if ((v69 & 0xFF0000) != 0)
  {
    if ((v69 & 0x10000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x10000u;
      uint64_t v101 = *(void *)(a1 + 384);
      if (!v101) {
        operator new();
      }
      uint64_t v102 = *(void *)(a2 + 384);
      if (!v102) {
        uint64_t v102 = *(void *)(qword_10248A400 + 384);
      }
      sub_1009BC378(v101, v102);
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
    if ((v69 & 0x20000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x20000u;
      uint64_t v103 = *(void *)(a1 + 392);
      if (!v103) {
        operator new();
      }
      uint64_t v104 = *(void *)(a2 + 392);
      if (!v104) {
        uint64_t v104 = *(void *)(qword_10248A400 + 392);
      }
      sub_1009BCAAC(v103, v104);
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
    if ((v69 & 0x40000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x40000u;
      uint64_t v105 = *(void *)(a1 + 400);
      if (!v105) {
        operator new();
      }
      uint64_t v106 = *(void *)(a2 + 400);
      if (!v106) {
        uint64_t v106 = *(void *)(qword_10248A400 + 400);
      }
      sub_1009BD90C(v105, v106);
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
    if ((v69 & 0x80000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x80000u;
      uint64_t v107 = *(void *)(a1 + 408);
      if (!v107) {
        operator new();
      }
      uint64_t v108 = *(void *)(a2 + 408);
      if (!v108) {
        uint64_t v108 = *(void *)(qword_10248A400 + 408);
      }
      sub_1009BE1EC(v107, v108);
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
    if ((v69 & 0x100000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x100000u;
      uint64_t v109 = *(void *)(a1 + 416);
      if (!v109) {
        operator new();
      }
      uint64_t v110 = *(void *)(a2 + 416);
      if (!v110) {
        uint64_t v110 = *(void *)(qword_10248A400 + 416);
      }
      sub_1009BEACC(v109, v110);
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
    if ((v69 & 0x200000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x200000u;
      uint64_t v111 = *(void *)(a1 + 424);
      if (!v111) {
        operator new();
      }
      uint64_t v112 = *(void *)(a2 + 424);
      if (!v112) {
        uint64_t v112 = *(void *)(qword_10248A400 + 424);
      }
      sub_1009BF768(v111, v112);
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
    if ((v69 & 0x400000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x400000u;
      uint64_t v113 = *(_DWORD **)(a1 + 432);
      if (!v113) {
        operator new();
      }
      uint64_t v114 = *(void *)(a2 + 432);
      if (!v114) {
        uint64_t v114 = *(void *)(qword_10248A400 + 432);
      }
      sub_1009BFF40(v113, v114);
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
    if ((v69 & 0x800000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x800000u;
      uint64_t v115 = *(void *)(a1 + 440);
      if (!v115) {
        operator new();
      }
      uint64_t v116 = *(void *)(a2 + 440);
      if (!v116) {
        uint64_t v116 = *(void *)(qword_10248A400 + 440);
      }
      sub_1009C07D8(v115, v116);
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
  }
  if (HIBYTE(v69))
  {
    if ((v69 & 0x1000000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x1000000u;
      uint64_t v117 = *(void *)(a1 + 448);
      if (!v117) {
        operator new();
      }
      uint64_t v118 = *(void *)(a2 + 448);
      if (!v118) {
        uint64_t v118 = *(void *)(qword_10248A400 + 448);
      }
      sub_1009C0DD4(v117, v118);
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
    if ((v69 & 0x2000000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x2000000u;
      uint64_t v119 = *(void *)(a1 + 456);
      if (!v119) {
        operator new();
      }
      uint64_t v120 = *(void *)(a2 + 456);
      if (!v120) {
        uint64_t v120 = *(void *)(qword_10248A400 + 456);
      }
      sub_1009C1494(v119, v120);
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
    if ((v69 & 0x4000000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x4000000u;
      uint64_t v121 = *(void *)(a1 + 464);
      if (!v121) {
        operator new();
      }
      uint64_t v122 = *(void *)(a2 + 464);
      if (!v122) {
        uint64_t v122 = *(void *)(qword_10248A400 + 464);
      }
      sub_1009C1C4C(v121, v122);
      unsigned int v69 = *(_DWORD *)(a2 + 492);
    }
    if ((v69 & 0x8000000) != 0)
    {
      *(_DWORD *)(a1 + 492) |= 0x8000000u;
      uint64_t v123 = *(void *)(a1 + 472);
      if (!v123) {
        operator new();
      }
      uint64_t v124 = *(void *)(a2 + 472);
      if (!v124) {
        uint64_t v124 = *(void *)(qword_10248A400 + 472);
      }
      sub_1009C22A8(v123, v124);
    }
  }
}

void sub_100897784()
{
}

void sub_100897AD0(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  JUMPOUT(0x100897AC8);
}

void sub_100897AE4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022CEC88;
  sub_10016788C(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

uint64_t sub_100897B38(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248A400;
  if (!qword_10248A400)
  {
    sub_100895E2C(0, a2, a3, a4);
    return qword_10248A400;
  }
  return result;
}

void sub_100897B68()
{
}

uint64_t sub_100897C18(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(_DWORD *)(result + 488);
  if ((_BYTE)v2)
  {
    if (v2)
    {
      uint64_t result = *(void *)(result + 8);
      if (result)
      {
        uint64_t result = sub_1003DF220(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 2) != 0)
    {
      uint64_t result = *(void *)(v1 + 16);
      if (result)
      {
        uint64_t result = sub_1003E02D0(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 4) != 0)
    {
      uint64_t result = *(void *)(v1 + 24);
      if (result)
      {
        uint64_t result = sub_1003E12B0(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 8) != 0)
    {
      uint64_t result = *(void *)(v1 + 32);
      if (result)
      {
        uint64_t result = sub_1003E9264(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      uint64_t result = *(void *)(v1 + 40);
      if (result)
      {
        uint64_t result = sub_1003EC85C(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x20) != 0)
    {
      uint64_t result = *(void *)(v1 + 48);
      if (result)
      {
        uint64_t result = sub_1003EDB04(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x40) != 0)
    {
      uint64_t result = *(void *)(v1 + 56);
      if (result)
      {
        uint64_t result = sub_1003F185C(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x80) != 0)
    {
      uint64_t result = *(void *)(v1 + 64);
      if (result)
      {
        uint64_t result = sub_1003F20F8(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
  }
  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      uint64_t result = *(void *)(v1 + 72);
      if (result)
      {
        uint64_t result = sub_1003F2730(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x200) != 0)
    {
      uint64_t result = *(void *)(v1 + 80);
      if (result)
      {
        uint64_t result = sub_1003F4100(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x400) != 0)
    {
      uint64_t result = *(void *)(v1 + 88);
      if (result)
      {
        uint64_t result = sub_1003FB1F4(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x800) != 0)
    {
      uint64_t result = *(void *)(v1 + 96);
      if (result)
      {
        uint64_t result = sub_1003FC3A0(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x1000) != 0)
    {
      uint64_t result = *(void *)(v1 + 104);
      if (result)
      {
        uint64_t result = sub_100E3793C(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x2000) != 0)
    {
      uint64_t result = *(void *)(v1 + 112);
      if (result)
      {
        uint64_t result = sub_1003FDA58(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x4000) != 0)
    {
      uint64_t result = *(void *)(v1 + 120);
      if (result)
      {
        uint64_t result = sub_1003FE250(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x8000) != 0)
    {
      uint64_t result = *(void *)(v1 + 128);
      if (result)
      {
        uint64_t result = sub_100401968(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
  }
  if ((v2 & 0xFF0000) != 0)
  {
    if ((v2 & 0x10000) != 0)
    {
      uint64_t result = *(void *)(v1 + 136);
      if (result)
      {
        uint64_t result = sub_100403F94(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x20000) != 0)
    {
      uint64_t result = *(void *)(v1 + 144);
      if (result)
      {
        uint64_t result = sub_1003E9264(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x40000) != 0)
    {
      uint64_t result = *(void *)(v1 + 152);
      if (result)
      {
        uint64_t result = sub_100406A54(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x80000) != 0)
    {
      uint64_t result = *(void *)(v1 + 160);
      if (result)
      {
        uint64_t result = sub_100408B0C(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x100000) != 0)
    {
      uint64_t result = *(void *)(v1 + 168);
      if (result)
      {
        uint64_t result = sub_1003F55CC(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x200000) != 0)
    {
      uint64_t result = *(void *)(v1 + 176);
      if (result)
      {
        uint64_t result = sub_10040AFC8(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x400000) != 0)
    {
      uint64_t result = *(void *)(v1 + 184);
      if (result)
      {
        uint64_t result = sub_1003F6F68(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x800000) != 0)
    {
      uint64_t result = *(void *)(v1 + 192);
      if (result)
      {
        uint64_t result = sub_1003F8F4C(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
  }
  if (HIBYTE(v2))
  {
    if ((v2 & 0x1000000) != 0)
    {
      uint64_t result = *(void *)(v1 + 200);
      if (result)
      {
        uint64_t result = sub_1003F811C(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x2000000) != 0)
    {
      uint64_t result = *(void *)(v1 + 208);
      if (result)
      {
        uint64_t result = sub_100404A50(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x4000000) != 0)
    {
      uint64_t result = *(void *)(v1 + 216);
      if (result)
      {
        uint64_t result = sub_100407894(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x8000000) != 0)
    {
      uint64_t result = *(void *)(v1 + 224);
      if (result)
      {
        uint64_t result = sub_10040BF0C(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x10000000) != 0)
    {
      uint64_t result = *(void *)(v1 + 232);
      if (result)
      {
        uint64_t result = sub_10040DFB4(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x20000000) != 0)
    {
      uint64_t result = *(void *)(v1 + 240);
      if (result)
      {
        uint64_t result = sub_100411580(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x40000000) != 0)
    {
      uint64_t result = *(void *)(v1 + 248);
      if (result)
      {
        uint64_t result = sub_1004130A8(result);
        unsigned int v2 = *(_DWORD *)(v1 + 488);
      }
    }
    if ((v2 & 0x80000000) != 0)
    {
      uint64_t result = *(void *)(v1 + 256);
      if (result) {
        uint64_t result = sub_1003EFDC0(result);
      }
    }
  }
  unsigned int v3 = *(_DWORD *)(v1 + 492);
  if ((_BYTE)v3)
  {
    if (v3)
    {
      uint64_t result = *(void *)(v1 + 264);
      if (result)
      {
        uint64_t result = sub_100414878(result);
        unsigned int v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 2) != 0)
    {
      uint64_t result = *(void *)(v1 + 272);
      if (result)
      {
        uint64_t result = sub_10149DFD4(result);
        unsigned int v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 4) != 0)
    {
      uint64_t result = *(void *)(v1 + 280);
      if (result)
      {
        uint64_t result = sub_100415814(result);
        unsigned int v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 8) != 0)
    {
      uint64_t result = *(void *)(v1 + 288);
      if (result)
      {
        uint64_t result = sub_100FE9244(result);
        unsigned int v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x10) != 0)
    {
      uint64_t result = *(void *)(v1 + 296);
      if (result)
      {
        uint64_t result = sub_100A1438C(result);
        unsigned int v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x20) != 0)
    {
      uint64_t result = *(void *)(v1 + 304);
      if (result)
      {
        uint64_t result = sub_100C3A26C(result);
        unsigned int v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x40) != 0)
    {
      uint64_t result = *(void *)(v1 + 312);
      if (result)
      {
        uint64_t result = sub_1017BA1F0(result);
        unsigned int v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x80) != 0)
    {
      uint64_t result = *(void *)(v1 + 320);
      if (result)
      {
        uint64_t result = sub_100AF9A2C(result);
        unsigned int v3 = *(_DWORD *)(v1 + 492);
      }
    }
  }
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      uint64_t result = *(void *)(v1 + 328);
      if (result)
      {
        uint64_t result = sub_1012C1CB4(result);
        unsigned int v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x200) != 0)
    {
      uint64_t result = *(void *)(v1 + 336);
      if (result)
      {
        uint64_t result = sub_10062A28C(result);
        unsigned int v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x400) != 0)
    {
      uint64_t result = *(void *)(v1 + 344);
      if (result)
      {
        uint64_t result = sub_1014219D8(result);
        unsigned int v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x800) != 0)
    {
      uint64_t result = *(void *)(v1 + 352);
      if (result)
      {
        uint64_t result = sub_100F27F70(result);
        unsigned int v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x1000) != 0)
    {
      uint64_t result = *(void *)(v1 + 360);
      if (result)
      {
        uint64_t result = sub_1009BAD38(result);
        unsigned int v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x2000) != 0)
    {
      uint64_t result = *(void *)(v1 + 368);
      if (result)
      {
        uint64_t result = sub_1009BB480(result);
        unsigned int v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x4000) != 0)
    {
      uint64_t result = *(void *)(v1 + 376);
      if (result)
      {
        uint64_t result = sub_1009BBD50(result);
        unsigned int v3 = *(_DWORD *)(v1 + 492);
      }
    }
    *(_DWORD *)(v1 + 480) = 0;
  }
  if ((v3 & 0xFF0000) != 0)
  {
    if ((v3 & 0x10000) != 0)
    {
      uint64_t result = *(void *)(v1 + 384);
      if (result)
      {
        uint64_t result = sub_1009BC604(result);
        unsigned int v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x20000) != 0)
    {
      uint64_t result = *(void *)(v1 + 392);
      if (result)
      {
        uint64_t result = sub_1009BCD38(result);
        unsigned int v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x40000) != 0)
    {
      uint64_t result = *(void *)(v1 + 400);
      if (result)
      {
        uint64_t result = sub_1009BDC7C(result);
        unsigned int v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x80000) != 0)
    {
      uint64_t result = *(void *)(v1 + 408);
      if (result)
      {
        uint64_t result = sub_1009BE4B0(result);
        unsigned int v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x100000) != 0)
    {
      uint64_t result = *(void *)(v1 + 416);
      if (result)
      {
        uint64_t result = sub_1009BED6C(result);
        unsigned int v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x200000) != 0)
    {
      uint64_t result = *(void *)(v1 + 424);
      if (result)
      {
        uint64_t result = sub_1009BF9FC(result);
        unsigned int v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x400000) != 0)
    {
      uint64_t result = *(void *)(v1 + 432);
      if (result)
      {
        uint64_t result = sub_1009C0254(result);
        unsigned int v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x800000) != 0)
    {
      uint64_t result = *(void *)(v1 + 440);
      if (result)
      {
        uint64_t result = sub_1009C0A1C(result);
        unsigned int v3 = *(_DWORD *)(v1 + 492);
      }
    }
  }
  if (HIBYTE(v3))
  {
    if ((v3 & 0x1000000) != 0)
    {
      uint64_t result = *(void *)(v1 + 448);
      if (result)
      {
        uint64_t result = sub_1009C104C(result);
        unsigned int v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x2000000) != 0)
    {
      uint64_t result = *(void *)(v1 + 456);
      if (result)
      {
        uint64_t result = sub_1009C172C(result);
        unsigned int v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x4000000) != 0)
    {
      uint64_t result = *(void *)(v1 + 464);
      if (result)
      {
        uint64_t result = sub_1009C1EBC(result);
        unsigned int v3 = *(_DWORD *)(v1 + 492);
      }
    }
    if ((v3 & 0x8000000) != 0)
    {
      uint64_t result = *(void *)(v1 + 472);
      if (result) {
        uint64_t result = sub_1009C2558(result);
      }
    }
  }
  *(void *)(v1 + 488) = 0;
  return result;
}

uint64_t sub_10089811C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  uint64_t v6 = (unint64_t *)((char *)this + 16);
  while (1)
  {
    uint64_t v7 = (char *)*v5;
    if (*v5 < *v6 && (*v7 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v7;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v7 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_7;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_7:
    unsigned int v9 = TagFallback >> 3;
    switch(TagFallback >> 3)
    {
      case 1u:
        int v10 = TagFallback & 7;
        if (v10 != 2) {
          goto LABEL_135;
        }
        *(_DWORD *)(a1 + 488) |= 1u;
        uint64_t v11 = *(void *)(a1 + 8);
        if (!v11) {
          operator new();
        }
        unsigned int v547 = 0;
        uint64_t v12 = (char *)*v5;
        if (*v5 >= *v6 || *v12 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v12;
          *uint64_t v5 = (unint64_t)(v12 + 1);
        }
        int v15 = *((_DWORD *)this + 14);
        int v16 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v15 + 1;
        if (v15 >= v16) {
          return 0;
        }
        int v17 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1003DF270(v11, this, v18) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v17);
        int v19 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v19, 1);
        int v21 = v19 - 1;
        if (v21 < 0 == v20) {
          *((_DWORD *)this + 14) = v21;
        }
        uint64_t v22 = (unsigned char *)*v5;
        if (*v5 >= *v6 || *v22 != 18) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v22 + 1);
        goto LABEL_147;
      case 2u:
        int v10 = TagFallback & 7;
        if (v10 != 2) {
          goto LABEL_135;
        }
LABEL_147:
        *(_DWORD *)(a1 + 488) |= 2u;
        uint64_t v23 = *(void *)(a1 + 16);
        if (!v23) {
          operator new();
        }
        unsigned int v547 = 0;
        uint64_t v24 = (char *)*v5;
        if (*v5 >= *v6 || *v24 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v24;
          *uint64_t v5 = (unint64_t)(v24 + 1);
        }
        int v25 = *((_DWORD *)this + 14);
        int v26 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v25 + 1;
        if (v25 >= v26) {
          return 0;
        }
        int v27 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1003E0320(v23, this, v28) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v27);
        int v29 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v29, 1);
        int v30 = v29 - 1;
        if (v30 < 0 == v20) {
          *((_DWORD *)this + 14) = v30;
        }
        uint64_t v31 = (unsigned char *)*v5;
        if (*v5 >= *v6 || *v31 != 26) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v31 + 1);
LABEL_161:
        *(_DWORD *)(a1 + 488) |= 4u;
        uint64_t v32 = *(void *)(a1 + 24);
        if (!v32) {
          operator new();
        }
        unsigned int v547 = 0;
        uint64_t v33 = (char *)*v5;
        if (*v5 >= *v6 || *v33 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v33;
          *uint64_t v5 = (unint64_t)(v33 + 1);
        }
        int v34 = *((_DWORD *)this + 14);
        int v35 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v34 + 1;
        if (v34 >= v35) {
          return 0;
        }
        int v36 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1003E1300(v32, this, v37) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v36);
        int v38 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v38, 1);
        int v39 = v38 - 1;
        if (v39 < 0 == v20) {
          *((_DWORD *)this + 14) = v39;
        }
        uint64_t v40 = (unsigned char *)*v5;
        if (*v5 >= *v6 || *v40 != 34) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v40 + 1);
LABEL_175:
        *(_DWORD *)(a1 + 488) |= 8u;
        uint64_t v41 = *(void *)(a1 + 32);
        if (!v41) {
          operator new();
        }
        unsigned int v547 = 0;
        uint64_t v42 = (char *)*v5;
        if (*v5 >= *v6 || *v42 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v42;
          *uint64_t v5 = (unint64_t)(v42 + 1);
        }
        int v43 = *((_DWORD *)this + 14);
        int v44 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v43 + 1;
        if (v43 >= v44) {
          return 0;
        }
        int v45 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1003E939C(v41, this, v46) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v45);
        int v47 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v47, 1);
        int v48 = v47 - 1;
        if (v48 < 0 == v20) {
          *((_DWORD *)this + 14) = v48;
        }
        uint64_t v49 = (unsigned char *)*v5;
        if (*v5 >= *v6 || *v49 != 42) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v49 + 1);
LABEL_189:
        *(_DWORD *)(a1 + 488) |= 0x10u;
        uint64_t v50 = *(void *)(a1 + 40);
        if (!v50) {
          operator new();
        }
        unsigned int v547 = 0;
        uint64_t v51 = (char *)*v5;
        if (*v5 >= *v6 || *v51 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v51;
          *uint64_t v5 = (unint64_t)(v51 + 1);
        }
        int v52 = *((_DWORD *)this + 14);
        int v53 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v52 + 1;
        if (v52 >= v53) {
          return 0;
        }
        int v54 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1003EC8C0(v50, this, v55) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v54);
        int v56 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v56, 1);
        int v57 = v56 - 1;
        if (v57 < 0 == v20) {
          *((_DWORD *)this + 14) = v57;
        }
        uint64_t v58 = (unsigned char *)*v5;
        if (*v5 >= *v6 || *v58 != 50) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v58 + 1);
LABEL_203:
        *(_DWORD *)(a1 + 488) |= 0x20u;
        uint64_t v59 = *(void *)(a1 + 48);
        if (!v59) {
          operator new();
        }
        unsigned int v547 = 0;
        uint64_t v60 = (char *)*v5;
        if (*v5 >= *v6 || *v60 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v60;
          *uint64_t v5 = (unint64_t)(v60 + 1);
        }
        int v61 = *((_DWORD *)this + 14);
        int v62 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v61 + 1;
        if (v61 >= v62) {
          return 0;
        }
        int v63 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1003EDB68(v59, this, v64) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v63);
        int v65 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v65, 1);
        int v66 = v65 - 1;
        if (v66 < 0 == v20) {
          *((_DWORD *)this + 14) = v66;
        }
        uint64_t v67 = (unsigned char *)*v5;
        if (*v5 >= *v6 || *v67 != 58) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v67 + 1);
LABEL_217:
        *(_DWORD *)(a1 + 488) |= 0x40u;
        uint64_t v68 = *(void *)(a1 + 56);
        if (!v68) {
          operator new();
        }
        unsigned int v547 = 0;
        unsigned int v69 = (char *)*v5;
        if (*v5 >= *v6 || *v69 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v69;
          *uint64_t v5 = (unint64_t)(v69 + 1);
        }
        int v70 = *((_DWORD *)this + 14);
        int v71 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v70 + 1;
        if (v70 >= v71) {
          return 0;
        }
        int v72 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1003F18CC(v68, this, v73) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v72);
        int v74 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v74, 1);
        int v75 = v74 - 1;
        if (v75 < 0 == v20) {
          *((_DWORD *)this + 14) = v75;
        }
        uint64_t v76 = (unsigned char *)*v5;
        if (*v5 >= *v6 || *v76 != 66) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v76 + 1);
LABEL_231:
        *(_DWORD *)(a1 + 488) |= 0x80u;
        uint64_t v77 = *(void *)(a1 + 64);
        if (!v77) {
          operator new();
        }
        unsigned int v547 = 0;
        uint64_t v78 = (char *)*v5;
        if (*v5 >= *v6 || *v78 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v78;
          *uint64_t v5 = (unint64_t)(v78 + 1);
        }
        int v79 = *((_DWORD *)this + 14);
        int v80 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v79 + 1;
        if (v79 >= v80) {
          return 0;
        }
        int v81 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1003F2124(v77, this, v82) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v81);
        int v83 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v83, 1);
        int v84 = v83 - 1;
        if (v84 < 0 == v20) {
          *((_DWORD *)this + 14) = v84;
        }
        uint64_t v85 = (unsigned char *)*v5;
        if (*v5 >= *v6 || *v85 != 74) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v85 + 1);
LABEL_245:
        *(_DWORD *)(a1 + 488) |= 0x100u;
        uint64_t v86 = *(void *)(a1 + 72);
        if (!v86) {
          operator new();
        }
        unsigned int v547 = 0;
        uint64_t v87 = (char *)*v5;
        if (*v5 >= *v6 || *v87 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v87;
          *uint64_t v5 = (unint64_t)(v87 + 1);
        }
        int v88 = *((_DWORD *)this + 14);
        int v89 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v88 + 1;
        if (v88 >= v89) {
          return 0;
        }
        int v90 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1003F2768(v86, this, v91) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v90);
        int v92 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v92, 1);
        int v93 = v92 - 1;
        if (v93 < 0 == v20) {
          *((_DWORD *)this + 14) = v93;
        }
        uint64_t v94 = (unsigned char *)*v5;
        if (*v5 >= *v6 || *v94 != 82) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v94 + 1);
LABEL_259:
        *(_DWORD *)(a1 + 488) |= 0x200u;
        uint64_t v95 = *(void *)(a1 + 80);
        if (!v95) {
          operator new();
        }
        unsigned int v547 = 0;
        uint64_t v96 = (char *)*v5;
        if (*v5 >= *v6 || *v96 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v96;
          *uint64_t v5 = (unint64_t)(v96 + 1);
        }
        int v97 = *((_DWORD *)this + 14);
        int v98 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v97 + 1;
        if (v97 >= v98) {
          return 0;
        }
        int v99 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1003F4164(v95, this, v100) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v99);
        int v101 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v101, 1);
        int v102 = v101 - 1;
        if (v102 < 0 == v20) {
          *((_DWORD *)this + 14) = v102;
        }
        uint64_t v103 = (unsigned char *)*v5;
        if (*v5 >= *v6 || *v103 != 90) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v103 + 1);
LABEL_273:
        *(_DWORD *)(a1 + 488) |= 0x400u;
        uint64_t v104 = *(void *)(a1 + 88);
        if (!v104) {
          operator new();
        }
        unsigned int v547 = 0;
        uint64_t v105 = (char *)*v5;
        if (*v5 >= *v6 || *v105 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v105;
          *uint64_t v5 = (unint64_t)(v105 + 1);
        }
        int v106 = *((_DWORD *)this + 14);
        int v107 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v106 + 1;
        if (v106 >= v107) {
          return 0;
        }
        int v108 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1003FB2A0(v104, this, v109) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v108);
        int v110 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v110, 1);
        int v111 = v110 - 1;
        if (v111 < 0 == v20) {
          *((_DWORD *)this + 14) = v111;
        }
        uint64_t v112 = (unsigned char *)*v5;
        if (*v5 >= *v6 || *v112 != 98) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v112 + 1);
LABEL_287:
        *(_DWORD *)(a1 + 488) |= 0x800u;
        uint64_t v113 = *(void *)(a1 + 96);
        if (!v113) {
          operator new();
        }
        unsigned int v547 = 0;
        uint64_t v114 = (char *)*v5;
        if (*v5 >= *v6 || *v114 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v114;
          *uint64_t v5 = (unint64_t)(v114 + 1);
        }
        int v115 = *((_DWORD *)this + 14);
        int v116 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v115 + 1;
        if (v115 >= v116) {
          return 0;
        }
        int v117 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1003FC3DC(v113, this, v118) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v117);
        int v119 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v119, 1);
        int v120 = v119 - 1;
        if (v120 < 0 == v20) {
          *((_DWORD *)this + 14) = v120;
        }
        uint64_t v121 = (unsigned char *)*v5;
        if (*v5 >= *v6 || *v121 != 106) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v121 + 1);
LABEL_301:
        *(_DWORD *)(a1 + 488) |= 0x1000u;
        uint64_t v122 = *(void *)(a1 + 104);
        if (!v122) {
          operator new();
        }
        unsigned int v547 = 0;
        uint64_t v123 = (char *)*v5;
        if (*v5 >= *v6 || *v123 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v123;
          *uint64_t v5 = (unint64_t)(v123 + 1);
        }
        int v124 = *((_DWORD *)this + 14);
        int v125 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v124 + 1;
        if (v124 >= v125) {
          return 0;
        }
        int v126 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100E37A08(v122, this, v127) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v126);
        int v128 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v128, 1);
        int v129 = v128 - 1;
        if (v129 < 0 == v20) {
          *((_DWORD *)this + 14) = v129;
        }
        uint64_t v130 = (unsigned char *)*v5;
        if (*v5 >= *v6 || *v130 != 114) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v130 + 1);
LABEL_315:
        *(_DWORD *)(a1 + 488) |= 0x2000u;
        uint64_t v131 = *(void *)(a1 + 112);
        if (!v131) {
          operator new();
        }
        unsigned int v547 = 0;
        double v132 = (char *)*v5;
        if (*v5 >= *v6 || *v132 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v132;
          *uint64_t v5 = (unint64_t)(v132 + 1);
        }
        int v133 = *((_DWORD *)this + 14);
        int v134 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v133 + 1;
        if (v133 >= v134) {
          return 0;
        }
        int v135 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1003FDAA8(v131, this, v136) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v135);
        int v137 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v137, 1);
        int v138 = v137 - 1;
        if (v138 < 0 == v20) {
          *((_DWORD *)this + 14) = v138;
        }
        uint64_t v139 = (unsigned char *)*v5;
        if (*v5 >= *v6 || *v139 != 122) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v139 + 1);
LABEL_329:
        *(_DWORD *)(a1 + 488) |= 0x4000u;
        uint64_t v140 = *(void *)(a1 + 120);
        if (!v140) {
          operator new();
        }
        unsigned int v547 = 0;
        uint64_t v141 = (char *)*v5;
        if (*v5 >= *v6 || *v141 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v141;
          *uint64_t v5 = (unint64_t)(v141 + 1);
        }
        int v142 = *((_DWORD *)this + 14);
        int v143 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v142 + 1;
        if (v142 >= v143) {
          return 0;
        }
        int v144 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1003FE27C(v140, this, v145) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v144);
        int v146 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v146, 1);
        int v147 = v146 - 1;
        if (v147 < 0 == v20) {
          *((_DWORD *)this + 14) = v147;
        }
        __int16 v148 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v148 != 130 || v148[1] != 1) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v148 + 2);
LABEL_344:
        *(_DWORD *)(a1 + 488) |= 0x8000u;
        uint64_t v149 = *(void *)(a1 + 128);
        if (!v149) {
          operator new();
        }
        unsigned int v547 = 0;
        uint64_t v150 = (char *)*v5;
        if (*v5 >= *v6 || *v150 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v150;
          *uint64_t v5 = (unint64_t)(v150 + 1);
        }
        int v151 = *((_DWORD *)this + 14);
        int v152 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v151 + 1;
        if (v151 >= v152) {
          return 0;
        }
        int v153 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1004019CC(v149, this, v154) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v153);
        int v155 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v155, 1);
        int v156 = v155 - 1;
        if (v156 < 0 == v20) {
          *((_DWORD *)this + 14) = v156;
        }
        uint64_t v157 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v157 != 138 || v157[1] != 1) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v157 + 2);
LABEL_359:
        *(_DWORD *)(a1 + 488) |= 0x10000u;
        uint64_t v158 = *(void *)(a1 + 136);
        if (!v158) {
          operator new();
        }
        unsigned int v547 = 0;
        uint64_t v159 = (char *)*v5;
        if (*v5 >= *v6 || *v159 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v159;
          *uint64_t v5 = (unint64_t)(v159 + 1);
        }
        int v160 = *((_DWORD *)this + 14);
        int v161 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v160 + 1;
        if (v160 >= v161) {
          return 0;
        }
        int v162 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100403FFC(v158, this, v163) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v162);
        int v164 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v164, 1);
        int v165 = v164 - 1;
        if (v165 < 0 == v20) {
          *((_DWORD *)this + 14) = v165;
        }
        uint64_t v166 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v166 != 146 || v166[1] != 1) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v166 + 2);
LABEL_374:
        *(_DWORD *)(a1 + 488) |= 0x20000u;
        uint64_t v167 = *(void *)(a1 + 144);
        if (!v167) {
          operator new();
        }
        unsigned int v547 = 0;
        int v168 = (char *)*v5;
        if (*v5 >= *v6 || *v168 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v168;
          *uint64_t v5 = (unint64_t)(v168 + 1);
        }
        int v169 = *((_DWORD *)this + 14);
        int v170 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v169 + 1;
        if (v169 >= v170) {
          return 0;
        }
        int v171 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1003E939C(v167, this, v172) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v171);
        int v173 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v173, 1);
        int v174 = v173 - 1;
        if (v174 < 0 == v20) {
          *((_DWORD *)this + 14) = v174;
        }
        uint64_t v175 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v175 != 154 || v175[1] != 1) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v175 + 2);
LABEL_389:
        *(_DWORD *)(a1 + 488) |= 0x40000u;
        uint64_t v176 = *(void *)(a1 + 152);
        if (!v176) {
          operator new();
        }
        unsigned int v547 = 0;
        uint64_t v177 = (char *)*v5;
        if (*v5 >= *v6 || *v177 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v177;
          *uint64_t v5 = (unint64_t)(v177 + 1);
        }
        int v178 = *((_DWORD *)this + 14);
        int v179 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v178 + 1;
        if (v178 >= v179) {
          return 0;
        }
        int v180 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100406AE4(v176, this, v181) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v180);
        int v182 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v182, 1);
        int v183 = v182 - 1;
        if (v183 < 0 == v20) {
          *((_DWORD *)this + 14) = v183;
        }
        uint64_t v184 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v184 != 162 || v184[1] != 1) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v184 + 2);
LABEL_404:
        *(_DWORD *)(a1 + 488) |= 0x80000u;
        uint64_t v185 = *(void *)(a1 + 160);
        if (!v185) {
          operator new();
        }
        unsigned int v547 = 0;
        uint64_t v186 = (char *)*v5;
        if (*v5 >= *v6 || *v186 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v186;
          *uint64_t v5 = (unint64_t)(v186 + 1);
        }
        int v187 = *((_DWORD *)this + 14);
        int v188 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v187 + 1;
        if (v187 >= v188) {
          return 0;
        }
        int v189 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100408B44(v185, this, v190) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v189);
        int v191 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v191, 1);
        int v192 = v191 - 1;
        if (v192 < 0 == v20) {
          *((_DWORD *)this + 14) = v192;
        }
        uint64_t v193 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v193 != 170 || v193[1] != 1) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v193 + 2);
LABEL_419:
        *(_DWORD *)(a1 + 488) |= 0x100000u;
        uint64_t v194 = *(void *)(a1 + 168);
        if (!v194) {
          operator new();
        }
        unsigned int v547 = 0;
        uint64_t v195 = (char *)*v5;
        if (*v5 >= *v6 || *v195 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v195;
          *uint64_t v5 = (unint64_t)(v195 + 1);
        }
        int v196 = *((_DWORD *)this + 14);
        int v197 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v196 + 1;
        if (v196 >= v197) {
          return 0;
        }
        int v198 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1003F5630(v194, this, v199) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v198);
        int v200 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v200, 1);
        int v201 = v200 - 1;
        if (v201 < 0 == v20) {
          *((_DWORD *)this + 14) = v201;
        }
        uint64_t v202 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v202 != 178 || v202[1] != 1) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v202 + 2);
LABEL_434:
        *(_DWORD *)(a1 + 488) |= 0x200000u;
        uint64_t v203 = *(void *)(a1 + 176);
        if (!v203) {
          operator new();
        }
        unsigned int v547 = 0;
        long long v204 = (char *)*v5;
        if (*v5 >= *v6 || *v204 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v204;
          *uint64_t v5 = (unint64_t)(v204 + 1);
        }
        int v205 = *((_DWORD *)this + 14);
        int v206 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v205 + 1;
        if (v205 >= v206) {
          return 0;
        }
        int v207 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_10040B064(v203, this, v208) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v207);
        int v209 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v209, 1);
        int v210 = v209 - 1;
        if (v210 < 0 == v20) {
          *((_DWORD *)this + 14) = v210;
        }
        uint64_t v211 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v211 != 186 || v211[1] != 1) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v211 + 2);
LABEL_449:
        *(_DWORD *)(a1 + 488) |= 0x400000u;
        uint64_t v212 = *(void *)(a1 + 184);
        if (!v212) {
          operator new();
        }
        unsigned int v547 = 0;
        uint64_t v213 = (char *)*v5;
        if (*v5 >= *v6 || *v213 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v213;
          *uint64_t v5 = (unint64_t)(v213 + 1);
        }
        int v214 = *((_DWORD *)this + 14);
        int v215 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v214 + 1;
        if (v214 >= v215) {
          return 0;
        }
        int v216 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1003F6FCC(v212, this, v217) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v216);
        int v218 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v218, 1);
        int v219 = v218 - 1;
        if (v219 < 0 == v20) {
          *((_DWORD *)this + 14) = v219;
        }
        long long v220 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v220 != 194 || v220[1] != 1) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v220 + 2);
LABEL_464:
        *(_DWORD *)(a1 + 488) |= 0x800000u;
        uint64_t v221 = *(void *)(a1 + 192);
        if (!v221) {
          operator new();
        }
        unsigned int v547 = 0;
        uint64_t v222 = (char *)*v5;
        if (*v5 >= *v6 || *v222 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v222;
          *uint64_t v5 = (unint64_t)(v222 + 1);
        }
        int v223 = *((_DWORD *)this + 14);
        int v224 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v223 + 1;
        if (v223 >= v224) {
          return 0;
        }
        int v225 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1003F8FC8(v221, this, v226) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v225);
        int v227 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v227, 1);
        int v228 = v227 - 1;
        if (v228 < 0 == v20) {
          *((_DWORD *)this + 14) = v228;
        }
        uint64_t v229 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v229 != 202 || v229[1] != 1) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v229 + 2);
LABEL_479:
        *(_DWORD *)(a1 + 488) |= 0x1000000u;
        uint64_t v230 = *(void *)(a1 + 200);
        if (!v230) {
          operator new();
        }
        unsigned int v547 = 0;
        uint64_t v231 = (char *)*v5;
        if (*v5 >= *v6 || *v231 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v231;
          *uint64_t v5 = (unint64_t)(v231 + 1);
        }
        int v232 = *((_DWORD *)this + 14);
        int v233 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v232 + 1;
        if (v232 >= v233) {
          return 0;
        }
        int v234 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1003F8198(v230, this, v235) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v234);
        int v236 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v236, 1);
        int v237 = v236 - 1;
        if (v237 < 0 == v20) {
          *((_DWORD *)this + 14) = v237;
        }
        char v238 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v238 != 210 || v238[1] != 1) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v238 + 2);
LABEL_494:
        *(_DWORD *)(a1 + 488) |= 0x2000000u;
        uint64_t v239 = *(void *)(a1 + 208);
        if (!v239) {
          operator new();
        }
        unsigned int v547 = 0;
        dispatch_time_t v240 = (char *)*v5;
        if (*v5 >= *v6 || *v240 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v240;
          *uint64_t v5 = (unint64_t)(v240 + 1);
        }
        int v241 = *((_DWORD *)this + 14);
        int v242 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v241 + 1;
        if (v241 >= v242) {
          return 0;
        }
        int v243 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100404AA0(v239, this, v244) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v243);
        int v245 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v245, 1);
        int v246 = v245 - 1;
        if (v246 < 0 == v20) {
          *((_DWORD *)this + 14) = v246;
        }
        uint64_t v247 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v247 != 218 || v247[1] != 1) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v247 + 2);
LABEL_509:
        *(_DWORD *)(a1 + 488) |= 0x4000000u;
        uint64_t v248 = *(void *)(a1 + 216);
        if (!v248) {
          operator new();
        }
        unsigned int v547 = 0;
        __int16 v249 = (char *)*v5;
        if (*v5 >= *v6 || *v249 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v249;
          *uint64_t v5 = (unint64_t)(v249 + 1);
        }
        int v250 = *((_DWORD *)this + 14);
        int v251 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v250 + 1;
        if (v250 >= v251) {
          return 0;
        }
        int v252 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1004078E4(v248, this, v253) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v252);
        int v254 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v254, 1);
        int v255 = v254 - 1;
        if (v255 < 0 == v20) {
          *((_DWORD *)this + 14) = v255;
        }
        uint64_t v256 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v256 != 226 || v256[1] != 1) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v256 + 2);
LABEL_524:
        *(_DWORD *)(a1 + 488) |= 0x8000000u;
        uint64_t v257 = *(void *)(a1 + 224);
        if (!v257) {
          operator new();
        }
        unsigned int v547 = 0;
        int v258 = (char *)*v5;
        if (*v5 >= *v6 || *v258 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v258;
          *uint64_t v5 = (unint64_t)(v258 + 1);
        }
        int v259 = *((_DWORD *)this + 14);
        int v260 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v259 + 1;
        if (v259 >= v260) {
          return 0;
        }
        int v261 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_10040BF40(v257, this, v262) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v261);
        int v263 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v263, 1);
        int v264 = v263 - 1;
        if (v264 < 0 == v20) {
          *((_DWORD *)this + 14) = v264;
        }
        id v265 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v265 != 234 || v265[1] != 1) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v265 + 2);
LABEL_539:
        *(_DWORD *)(a1 + 488) |= 0x10000000u;
        uint64_t v266 = *(void *)(a1 + 232);
        if (!v266) {
          operator new();
        }
        unsigned int v547 = 0;
        float v267 = (char *)*v5;
        if (*v5 >= *v6 || *v267 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v267;
          *uint64_t v5 = (unint64_t)(v267 + 1);
        }
        int v268 = *((_DWORD *)this + 14);
        int v269 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v268 + 1;
        if (v268 >= v269) {
          return 0;
        }
        int v270 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_10040E02C(v266, this, v271) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v270);
        int v272 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v272, 1);
        int v273 = v272 - 1;
        if (v273 < 0 == v20) {
          *((_DWORD *)this + 14) = v273;
        }
        int v274 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v274 != 242 || v274[1] != 1) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v274 + 2);
LABEL_554:
        *(_DWORD *)(a1 + 488) |= 0x20000000u;
        uint64_t v275 = *(void *)(a1 + 240);
        if (!v275) {
          operator new();
        }
        unsigned int v547 = 0;
        unint64_t v276 = (char *)*v5;
        if (*v5 >= *v6 || *v276 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v276;
          *uint64_t v5 = (unint64_t)(v276 + 1);
        }
        int v277 = *((_DWORD *)this + 14);
        int v278 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v277 + 1;
        if (v277 >= v278) {
          return 0;
        }
        int v279 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1004115D8(v275, this, v280) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v279);
        int v281 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v281, 1);
        int v282 = v281 - 1;
        if (v282 < 0 == v20) {
          *((_DWORD *)this + 14) = v282;
        }
        double v283 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v283 != 250 || v283[1] != 1) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v283 + 2);
LABEL_569:
        *(_DWORD *)(a1 + 488) |= 0x40000000u;
        uint64_t v284 = *(void *)(a1 + 248);
        if (!v284) {
          operator new();
        }
        unsigned int v547 = 0;
        double v285 = (char *)*v5;
        if (*v5 >= *v6 || *v285 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v285;
          *uint64_t v5 = (unint64_t)(v285 + 1);
        }
        int v286 = *((_DWORD *)this + 14);
        int v287 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v286 + 1;
        if (v286 >= v287) {
          return 0;
        }
        int v288 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_10041312C(v284, this, v289) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v288);
        int v290 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v290, 1);
        int v291 = v290 - 1;
        if (v291 < 0 == v20) {
          *((_DWORD *)this + 14) = v291;
        }
        double v292 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v292 != 130 || v292[1] != 2) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v292 + 2);
LABEL_584:
        *(_DWORD *)(a1 + 488) |= 0x80000000;
        uint64_t v293 = *(void *)(a1 + 256);
        if (!v293) {
          operator new();
        }
        unsigned int v547 = 0;
        unint64_t v294 = (char *)*v5;
        if (*v5 >= *v6 || *v294 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v294;
          *uint64_t v5 = (unint64_t)(v294 + 1);
        }
        int v295 = *((_DWORD *)this + 14);
        int v296 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v295 + 1;
        if (v295 >= v296) {
          return 0;
        }
        int v297 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1003EFE24(v293, this, v298) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v297);
        int v299 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v299, 1);
        int v300 = v299 - 1;
        if (v300 < 0 == v20) {
          *((_DWORD *)this + 14) = v300;
        }
        float v301 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v301 != 138 || v301[1] != 2) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v301 + 2);
LABEL_599:
        *(_DWORD *)(a1 + 492) |= 1u;
        uint64_t v302 = *(void *)(a1 + 264);
        if (!v302) {
          operator new();
        }
        unsigned int v547 = 0;
        v303 = (char *)*v5;
        if (*v5 >= *v6 || *v303 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v303;
          *uint64_t v5 = (unint64_t)(v303 + 1);
        }
        int v304 = *((_DWORD *)this + 14);
        int v305 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v304 + 1;
        if (v304 >= v305) {
          return 0;
        }
        int v306 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100414968(v302, this, v307) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v306);
        int v308 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v308, 1);
        int v309 = v308 - 1;
        if (v309 < 0 == v20) {
          *((_DWORD *)this + 14) = v309;
        }
        v310 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v310 != 146 || v310[1] != 2) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v310 + 2);
LABEL_614:
        *(_DWORD *)(a1 + 492) |= 2u;
        uint64_t v311 = *(void *)(a1 + 272);
        if (!v311) {
          operator new();
        }
        unsigned int v547 = 0;
        dispatch_semaphore_t v312 = (char *)*v5;
        if (*v5 >= *v6 || *v312 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v312;
          *uint64_t v5 = (unint64_t)(v312 + 1);
        }
        int v313 = *((_DWORD *)this + 14);
        int v314 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v313 + 1;
        if (v313 >= v314) {
          return 0;
        }
        int v315 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_10149E040(v311, this, v316) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v315);
        int v317 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v317, 1);
        int v318 = v317 - 1;
        if (v318 < 0 == v20) {
          *((_DWORD *)this + 14) = v318;
        }
        unsigned int v319 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v319 != 154 || v319[1] != 2) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v319 + 2);
LABEL_629:
        *(_DWORD *)(a1 + 492) |= 4u;
        uint64_t v320 = *(void *)(a1 + 280);
        if (!v320) {
          operator new();
        }
        unsigned int v547 = 0;
        float v321 = (char *)*v5;
        if (*v5 >= *v6 || *v321 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v321;
          *uint64_t v5 = (unint64_t)(v321 + 1);
        }
        int v322 = *((_DWORD *)this + 14);
        int v323 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v322 + 1;
        if (v322 >= v323) {
          return 0;
        }
        int v324 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100415838(v320, this, v325) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v324);
        int v326 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v326, 1);
        int v327 = v326 - 1;
        if (v327 < 0 == v20) {
          *((_DWORD *)this + 14) = v327;
        }
        uint64_t v328 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v328 != 226 || v328[1] != 62) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v328 + 2);
LABEL_644:
        *(_DWORD *)(a1 + 492) |= 8u;
        uint64_t v329 = *(void *)(a1 + 288);
        if (!v329) {
          operator new();
        }
        unsigned int v547 = 0;
        long long v330 = (char *)*v5;
        if (*v5 >= *v6 || *v330 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v330;
          *uint64_t v5 = (unint64_t)(v330 + 1);
        }
        int v331 = *((_DWORD *)this + 14);
        int v332 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v331 + 1;
        if (v331 >= v332) {
          return 0;
        }
        int v333 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100FE92F4(v329, this, v334) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v333);
        int v335 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v335, 1);
        int v336 = v335 - 1;
        if (v336 < 0 == v20) {
          *((_DWORD *)this + 14) = v336;
        }
        __int16 v337 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v337 != 242 || v337[1] != 62) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v337 + 2);
LABEL_659:
        *(_DWORD *)(a1 + 492) |= 0x10u;
        uint64_t v338 = *(void *)(a1 + 296);
        if (!v338) {
          operator new();
        }
        unsigned int v547 = 0;
        __int16 v339 = (char *)*v5;
        if (*v5 >= *v6 || *v339 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v339;
          *uint64_t v5 = (unint64_t)(v339 + 1);
        }
        int v340 = *((_DWORD *)this + 14);
        int v341 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v340 + 1;
        if (v340 >= v341) {
          return 0;
        }
        int v342 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100A14488(v338, this, v343) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v342);
        int v344 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v344, 1);
        int v345 = v344 - 1;
        if (v345 < 0 == v20) {
          *((_DWORD *)this + 14) = v345;
        }
        uint64_t v346 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v346 != 250 || v346[1] != 62) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v346 + 2);
LABEL_674:
        *(_DWORD *)(a1 + 492) |= 0x20u;
        uint64_t v347 = *(void *)(a1 + 304);
        if (!v347) {
          operator new();
        }
        unsigned int v547 = 0;
        long long v348 = (char *)*v5;
        if (*v5 >= *v6 || *v348 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v348;
          *uint64_t v5 = (unint64_t)(v348 + 1);
        }
        int v349 = *((_DWORD *)this + 14);
        int v350 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v349 + 1;
        if (v349 >= v350) {
          return 0;
        }
        int v351 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100C3A2D8(v347, this, v352) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v351);
        int v353 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v353, 1);
        int v354 = v353 - 1;
        if (v354 < 0 == v20) {
          *((_DWORD *)this + 14) = v354;
        }
        double v355 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v355 != 130 || v355[1] != 63) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v355 + 2);
LABEL_689:
        *(_DWORD *)(a1 + 492) |= 0x40u;
        uint64_t v356 = *(void *)(a1 + 312);
        if (!v356) {
          operator new();
        }
        unsigned int v547 = 0;
        double v357 = (char *)*v5;
        if (*v5 >= *v6 || *v357 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v357;
          *uint64_t v5 = (unint64_t)(v357 + 1);
        }
        int v358 = *((_DWORD *)this + 14);
        int v359 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v358 + 1;
        if (v358 >= v359) {
          return 0;
        }
        int v360 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1017BA2A0(v356, this, v361) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v360);
        int v362 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v362, 1);
        int v363 = v362 - 1;
        if (v363 < 0 == v20) {
          *((_DWORD *)this + 14) = v363;
        }
        double v364 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v364 != 146 || v364[1] != 63) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v364 + 2);
LABEL_704:
        *(_DWORD *)(a1 + 492) |= 0x80u;
        uint64_t v365 = *(void *)(a1 + 320);
        if (!v365) {
          operator new();
        }
        unsigned int v547 = 0;
        v366 = (char *)*v5;
        if (*v5 >= *v6 || *v366 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v366;
          *uint64_t v5 = (unint64_t)(v366 + 1);
        }
        int v367 = *((_DWORD *)this + 14);
        int v368 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v367 + 1;
        if (v367 >= v368) {
          return 0;
        }
        int v369 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100AF9ABC(v365, this, v370) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v369);
        int v371 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v371, 1);
        int v372 = v371 - 1;
        if (v372 < 0 == v20) {
          *((_DWORD *)this + 14) = v372;
        }
        v373 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v373 != 162 || v373[1] != 63) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v373 + 2);
LABEL_719:
        *(_DWORD *)(a1 + 492) |= 0x100u;
        uint64_t v374 = *(void *)(a1 + 328);
        if (!v374) {
          operator new();
        }
        unsigned int v547 = 0;
        float v375 = (char *)*v5;
        if (*v5 >= *v6 || *v375 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v375;
          *uint64_t v5 = (unint64_t)(v375 + 1);
        }
        int v376 = *((_DWORD *)this + 14);
        int v377 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v376 + 1;
        if (v376 >= v377) {
          return 0;
        }
        int v378 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1012C1FE4(v374, this, v379) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v378);
        int v380 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v380, 1);
        int v381 = v380 - 1;
        if (v381 < 0 == v20) {
          *((_DWORD *)this + 14) = v381;
        }
        double v382 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v382 != 178 || v382[1] != 63) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v382 + 2);
LABEL_734:
        *(_DWORD *)(a1 + 492) |= 0x200u;
        uint64_t v383 = *(void *)(a1 + 336);
        if (!v383) {
          operator new();
        }
        unsigned int v547 = 0;
        double v384 = (char *)*v5;
        if (*v5 >= *v6 || *v384 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v384;
          *uint64_t v5 = (unint64_t)(v384 + 1);
        }
        int v385 = *((_DWORD *)this + 14);
        int v386 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v385 + 1;
        if (v385 >= v386) {
          return 0;
        }
        int v387 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_10062A328(v383, this, v388) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v387);
        int v389 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v389, 1);
        int v390 = v389 - 1;
        if (v390 < 0 == v20) {
          *((_DWORD *)this + 14) = v390;
        }
        double v391 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v391 != 194 || v391[1] != 63) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v391 + 2);
LABEL_749:
        *(_DWORD *)(a1 + 492) |= 0x400u;
        uint64_t v392 = *(void *)(a1 + 344);
        if (!v392) {
          operator new();
        }
        unsigned int v547 = 0;
        double v393 = (char *)*v5;
        if (*v5 >= *v6 || *v393 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v393;
          *uint64_t v5 = (unint64_t)(v393 + 1);
        }
        int v394 = *((_DWORD *)this + 14);
        int v395 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v394 + 1;
        if (v394 >= v395) {
          return 0;
        }
        int v396 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_101421B3C(v392, this, v397) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v396);
        int v398 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v398, 1);
        int v399 = v398 - 1;
        if (v399 < 0 == v20) {
          *((_DWORD *)this + 14) = v399;
        }
        double v400 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v400 != 202 || v400[1] != 63) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v400 + 2);
LABEL_764:
        *(_DWORD *)(a1 + 492) |= 0x800u;
        uint64_t v401 = *(void *)(a1 + 352);
        if (!v401) {
          operator new();
        }
        unsigned int v547 = 0;
        long long v402 = (char *)*v5;
        if (*v5 >= *v6 || *v402 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v402;
          *uint64_t v5 = (unint64_t)(v402 + 1);
        }
        int v403 = *((_DWORD *)this + 14);
        int v404 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v403 + 1;
        if (v403 >= v404) {
          return 0;
        }
        int v405 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_100F28178(v401, this, v406) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v405);
        int v407 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v407, 1);
        int v408 = v407 - 1;
        if (v408 < 0 == v20) {
          *((_DWORD *)this + 14) = v408;
        }
        v409 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v409 != 130 || v409[1] != 125) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v409 + 2);
LABEL_779:
        *(_DWORD *)(a1 + 492) |= 0x1000u;
        uint64_t v410 = *(void *)(a1 + 360);
        if (!v410) {
          operator new();
        }
        unsigned int v547 = 0;
        v411 = (char *)*v5;
        if (*v5 >= *v6 || *v411 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v411;
          *uint64_t v5 = (unint64_t)(v411 + 1);
        }
        int v412 = *((_DWORD *)this + 14);
        int v413 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v412 + 1;
        if (v412 >= v413) {
          return 0;
        }
        int v414 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009BAD78(v410, this, v415) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v414);
        int v416 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v416, 1);
        int v417 = v416 - 1;
        if (v417 < 0 == v20) {
          *((_DWORD *)this + 14) = v417;
        }
        long long v418 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v418 != 138 || v418[1] != 125) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v418 + 2);
LABEL_794:
        *(_DWORD *)(a1 + 492) |= 0x2000u;
        uint64_t v419 = *(void *)(a1 + 368);
        if (!v419) {
          operator new();
        }
        unsigned int v547 = 0;
        long long v420 = (char *)*v5;
        if (*v5 >= *v6 || *v420 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v420;
          *uint64_t v5 = (unint64_t)(v420 + 1);
        }
        int v421 = *((_DWORD *)this + 14);
        int v422 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v421 + 1;
        if (v421 >= v422) {
          return 0;
        }
        int v423 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009BB4C4(v419, this, v424) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v423);
        int v425 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v425, 1);
        int v426 = v425 - 1;
        if (v426 < 0 == v20) {
          *((_DWORD *)this + 14) = v426;
        }
        v427 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v427 != 146 || v427[1] != 125) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v427 + 2);
LABEL_809:
        *(_DWORD *)(a1 + 492) |= 0x4000u;
        uint64_t v428 = *(void *)(a1 + 376);
        if (!v428) {
          operator new();
        }
        unsigned int v547 = 0;
        v429 = (char *)*v5;
        if (*v5 >= *v6 || *v429 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v429;
          *uint64_t v5 = (unint64_t)(v429 + 1);
        }
        int v430 = *((_DWORD *)this + 14);
        int v431 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v430 + 1;
        if (v430 >= v431) {
          return 0;
        }
        int v432 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009BBD70(v428, this, v433) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v432);
        int v434 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v434, 1);
        int v435 = v434 - 1;
        if (v435 < 0 == v20) {
          *((_DWORD *)this + 14) = v435;
        }
        unint64_t v14 = *v6;
        v436 = (unsigned __int8 *)*v5;
        if ((int)(*v6 - *v5) <= 1 || *v436 != 152 || v436[1] != 125) {
          continue;
        }
        uint64_t v13 = (char *)(v436 + 2);
        *uint64_t v5 = (unint64_t)v13;
LABEL_824:
        unsigned int v547 = 0;
        if ((unint64_t)v13 >= v14 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547);
          if (!result) {
            return result;
          }
          unsigned int v437 = v547;
        }
        else
        {
          unsigned int v437 = *v13;
          *uint64_t v5 = (unint64_t)(v13 + 1);
        }
        if (sub_10016E644(v437))
        {
          if (!sub_10016E644(v437)) {
            sub_101A729C0();
          }
          *(_DWORD *)(a1 + 492) |= 0x8000u;
          *(_DWORD *)(a1 + 480) = v437;
        }
        v439 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) < 2 || *v439 != 162 || v439[1] != 125) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v439 + 2);
LABEL_836:
        *(_DWORD *)(a1 + 492) |= 0x10000u;
        uint64_t v440 = *(void *)(a1 + 384);
        if (!v440) {
          operator new();
        }
        unsigned int v547 = 0;
        v441 = (char *)*v5;
        if (*v5 >= *v6 || *v441 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v441;
          *uint64_t v5 = (unint64_t)(v441 + 1);
        }
        int v442 = *((_DWORD *)this + 14);
        int v443 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v442 + 1;
        if (v442 >= v443) {
          return 0;
        }
        int v444 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009BC644(v440, this, v445) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v444);
        int v446 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v446, 1);
        int v447 = v446 - 1;
        if (v447 < 0 == v20) {
          *((_DWORD *)this + 14) = v447;
        }
        v448 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v448 != 170 || v448[1] != 125) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v448 + 2);
LABEL_851:
        *(_DWORD *)(a1 + 492) |= 0x20000u;
        uint64_t v449 = *(void *)(a1 + 392);
        if (!v449) {
          operator new();
        }
        unsigned int v547 = 0;
        v450 = (char *)*v5;
        if (*v5 >= *v6 || *v450 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v450;
          *uint64_t v5 = (unint64_t)(v450 + 1);
        }
        int v451 = *((_DWORD *)this + 14);
        int v452 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v451 + 1;
        if (v451 >= v452) {
          return 0;
        }
        int v453 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009BCD78(v449, this, v454) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v453);
        int v455 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v455, 1);
        int v456 = v455 - 1;
        if (v456 < 0 == v20) {
          *((_DWORD *)this + 14) = v456;
        }
        v457 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v457 != 178 || v457[1] != 125) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v457 + 2);
LABEL_866:
        *(_DWORD *)(a1 + 492) |= 0x40000u;
        uint64_t v458 = *(void *)(a1 + 400);
        if (!v458) {
          operator new();
        }
        unsigned int v547 = 0;
        v459 = (char *)*v5;
        if (*v5 >= *v6 || *v459 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v459;
          *uint64_t v5 = (unint64_t)(v459 + 1);
        }
        int v460 = *((_DWORD *)this + 14);
        int v461 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v460 + 1;
        if (v460 >= v461) {
          return 0;
        }
        int v462 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009BDCCC(v458, this, v463) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v462);
        int v464 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v464, 1);
        int v465 = v464 - 1;
        if (v465 < 0 == v20) {
          *((_DWORD *)this + 14) = v465;
        }
        v466 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v466 != 186 || v466[1] != 125) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v466 + 2);
LABEL_881:
        *(_DWORD *)(a1 + 492) |= 0x80000u;
        uint64_t v467 = *(void *)(a1 + 408);
        if (!v467) {
          operator new();
        }
        unsigned int v547 = 0;
        v468 = (char *)*v5;
        if (*v5 >= *v6 || *v468 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v468;
          *uint64_t v5 = (unint64_t)(v468 + 1);
        }
        int v469 = *((_DWORD *)this + 14);
        int v470 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v469 + 1;
        if (v469 >= v470) {
          return 0;
        }
        int v471 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009BE4F4(v467, this, v472) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v471);
        int v473 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v473, 1);
        int v474 = v473 - 1;
        if (v474 < 0 == v20) {
          *((_DWORD *)this + 14) = v474;
        }
        v475 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v475 != 194 || v475[1] != 125) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v475 + 2);
LABEL_896:
        *(_DWORD *)(a1 + 492) |= 0x100000u;
        uint64_t v476 = *(void *)(a1 + 416);
        if (!v476) {
          operator new();
        }
        unsigned int v547 = 0;
        v477 = (char *)*v5;
        if (*v5 >= *v6 || *v477 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v477;
          *uint64_t v5 = (unint64_t)(v477 + 1);
        }
        int v478 = *((_DWORD *)this + 14);
        int v479 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v478 + 1;
        if (v478 >= v479) {
          return 0;
        }
        int v480 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009BEDC0(v476, this, v481) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v480);
        int v482 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v482, 1);
        int v483 = v482 - 1;
        if (v483 < 0 == v20) {
          *((_DWORD *)this + 14) = v483;
        }
        v484 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v484 != 202 || v484[1] != 125) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v484 + 2);
LABEL_911:
        *(_DWORD *)(a1 + 492) |= 0x200000u;
        uint64_t v485 = *(void *)(a1 + 424);
        if (!v485) {
          operator new();
        }
        unsigned int v547 = 0;
        v486 = (char *)*v5;
        if (*v5 >= *v6 || *v486 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v486;
          *uint64_t v5 = (unint64_t)(v486 + 1);
        }
        int v487 = *((_DWORD *)this + 14);
        int v488 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v487 + 1;
        if (v487 >= v488) {
          return 0;
        }
        int v489 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009BFA30(v485, this, v490) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v489);
        int v491 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v491, 1);
        int v492 = v491 - 1;
        if (v492 < 0 == v20) {
          *((_DWORD *)this + 14) = v492;
        }
        v493 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v493 != 210 || v493[1] != 125) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v493 + 2);
LABEL_926:
        *(_DWORD *)(a1 + 492) |= 0x400000u;
        v494 = *(int **)(a1 + 432);
        if (!v494) {
          operator new();
        }
        unsigned int v547 = 0;
        v495 = (char *)*v5;
        if (*v5 >= *v6 || *v495 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v495;
          *uint64_t v5 = (unint64_t)(v495 + 1);
        }
        int v496 = *((_DWORD *)this + 14);
        int v497 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v496 + 1;
        if (v496 >= v497) {
          return 0;
        }
        int v498 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009C0288(v494, this, v499) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v498);
        int v500 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v500, 1);
        int v501 = v500 - 1;
        if (v501 < 0 == v20) {
          *((_DWORD *)this + 14) = v501;
        }
        v502 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v502 != 218 || v502[1] != 125) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v502 + 2);
LABEL_941:
        *(_DWORD *)(a1 + 492) |= 0x800000u;
        uint64_t v503 = *(void *)(a1 + 440);
        if (!v503) {
          operator new();
        }
        unsigned int v547 = 0;
        v504 = (char *)*v5;
        if (*v5 >= *v6 || *v504 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v504;
          *uint64_t v5 = (unint64_t)(v504 + 1);
        }
        int v505 = *((_DWORD *)this + 14);
        int v506 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v505 + 1;
        if (v505 >= v506) {
          return 0;
        }
        int v507 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009C0A68(v503, this, v508) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v507);
        int v509 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v509, 1);
        int v510 = v509 - 1;
        if (v510 < 0 == v20) {
          *((_DWORD *)this + 14) = v510;
        }
        v511 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v511 != 226 || v511[1] != 125) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v511 + 2);
LABEL_956:
        *(_DWORD *)(a1 + 492) |= 0x1000000u;
        uint64_t v512 = *(void *)(a1 + 448);
        if (!v512) {
          operator new();
        }
        unsigned int v547 = 0;
        v513 = (char *)*v5;
        if (*v5 >= *v6 || *v513 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v513;
          *uint64_t v5 = (unint64_t)(v513 + 1);
        }
        int v514 = *((_DWORD *)this + 14);
        int v515 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v514 + 1;
        if (v514 >= v515) {
          return 0;
        }
        int v516 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009C109C(v512, this, v517) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v516);
        int v518 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v518, 1);
        int v519 = v518 - 1;
        if (v519 < 0 == v20) {
          *((_DWORD *)this + 14) = v519;
        }
        v520 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v520 != 234 || v520[1] != 125) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v520 + 2);
LABEL_971:
        *(_DWORD *)(a1 + 492) |= 0x2000000u;
        uint64_t v521 = *(void *)(a1 + 456);
        if (!v521) {
          operator new();
        }
        unsigned int v547 = 0;
        v522 = (char *)*v5;
        if (*v5 >= *v6 || *v522 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v522;
          *uint64_t v5 = (unint64_t)(v522 + 1);
        }
        int v523 = *((_DWORD *)this + 14);
        int v524 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v523 + 1;
        if (v523 >= v524) {
          return 0;
        }
        int v525 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009C177C(v521, this, v526) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v525);
        int v527 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v527, 1);
        int v528 = v527 - 1;
        if (v528 < 0 == v20) {
          *((_DWORD *)this + 14) = v528;
        }
        v529 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v529 != 242 || v529[1] != 125) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v529 + 2);
LABEL_986:
        *(_DWORD *)(a1 + 492) |= 0x4000000u;
        uint64_t v530 = *(void *)(a1 + 464);
        if (!v530) {
          operator new();
        }
        unsigned int v547 = 0;
        v531 = (char *)*v5;
        if (*v5 >= *v6 || *v531 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v531;
          *uint64_t v5 = (unint64_t)(v531 + 1);
        }
        int v532 = *((_DWORD *)this + 14);
        int v533 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v532 + 1;
        if (v532 >= v533) {
          return 0;
        }
        int v534 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009C1F40(v530, this, v535) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v534);
        int v536 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v536, 1);
        int v537 = v536 - 1;
        if (v537 < 0 == v20) {
          *((_DWORD *)this + 14) = v537;
        }
        v538 = (unsigned __int8 *)*v5;
        if ((int)(*(_DWORD *)v6 - *v5) <= 1 || *v538 != 250 || v538[1] != 125) {
          continue;
        }
        *uint64_t v5 = (unint64_t)(v538 + 2);
LABEL_1001:
        *(_DWORD *)(a1 + 492) |= 0x8000000u;
        uint64_t v539 = *(void *)(a1 + 472);
        if (!v539) {
          operator new();
        }
        unsigned int v547 = 0;
        v540 = (char *)*v5;
        if (*v5 >= *v6 || *v540 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v547))return 0; {
        }
          }
        else
        {
          unsigned int v547 = *v540;
          *uint64_t v5 = (unint64_t)(v540 + 1);
        }
        int v541 = *((_DWORD *)this + 14);
        int v542 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v541 + 1;
        if (v541 >= v542) {
          return 0;
        }
        int v543 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v547);
        if (!sub_1009C2598(v539, this, v544) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v543);
        int v545 = *((_DWORD *)this + 14);
        BOOL v20 = __OFSUB__(v545, 1);
        int v546 = v545 - 1;
        if (v546 < 0 == v20) {
          *((_DWORD *)this + 14) = v546;
        }
        if (*v5 == *v6 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
        break;
      case 3u:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_161;
        }
        goto LABEL_135;
      case 4u:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_175;
        }
        goto LABEL_135;
      case 5u:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_189;
        }
        goto LABEL_135;
      case 6u:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_203;
        }
        goto LABEL_135;
      case 7u:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_217;
        }
        goto LABEL_135;
      case 8u:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_231;
        }
        goto LABEL_135;
      case 9u:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_245;
        }
        goto LABEL_135;
      case 0xAu:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_259;
        }
        goto LABEL_135;
      case 0xBu:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_273;
        }
        goto LABEL_135;
      case 0xCu:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_287;
        }
        goto LABEL_135;
      case 0xDu:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_301;
        }
        goto LABEL_135;
      case 0xEu:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_315;
        }
        goto LABEL_135;
      case 0xFu:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_329;
        }
        goto LABEL_135;
      case 0x10u:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_344;
        }
        goto LABEL_135;
      case 0x11u:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_359;
        }
        goto LABEL_135;
      case 0x12u:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_374;
        }
        goto LABEL_135;
      case 0x13u:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_389;
        }
        goto LABEL_135;
      case 0x14u:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_404;
        }
        goto LABEL_135;
      case 0x15u:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_419;
        }
        goto LABEL_135;
      case 0x16u:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_434;
        }
        goto LABEL_135;
      case 0x17u:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_449;
        }
        goto LABEL_135;
      case 0x18u:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_464;
        }
        goto LABEL_135;
      case 0x19u:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_479;
        }
        goto LABEL_135;
      case 0x1Au:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_494;
        }
        goto LABEL_135;
      case 0x1Bu:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_509;
        }
        goto LABEL_135;
      case 0x1Cu:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_524;
        }
        goto LABEL_135;
      case 0x1Du:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_539;
        }
        goto LABEL_135;
      case 0x1Eu:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_554;
        }
        goto LABEL_135;
      case 0x1Fu:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_569;
        }
        goto LABEL_135;
      case 0x20u:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_584;
        }
        goto LABEL_135;
      case 0x21u:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_599;
        }
        goto LABEL_135;
      case 0x22u:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_614;
        }
        goto LABEL_135;
      case 0x23u:
        int v10 = TagFallback & 7;
        if (v10 == 2) {
          goto LABEL_629;
        }
LABEL_135:
        if (v10 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
      default:
        switch(v9)
        {
          case 0x7D0u:
            int v10 = TagFallback & 7;
            if (v10 == 2) {
              goto LABEL_779;
            }
            goto LABEL_135;
          case 0x7D1u:
            int v10 = TagFallback & 7;
            if (v10 == 2) {
              goto LABEL_794;
            }
            goto LABEL_135;
          case 0x7D2u:
            int v10 = TagFallback & 7;
            if (v10 == 2) {
              goto LABEL_809;
            }
            goto LABEL_135;
          case 0x7D3u:
            int v10 = TagFallback & 7;
            if ((TagFallback & 7) != 0) {
              goto LABEL_135;
            }
            uint64_t v13 = (char *)*v5;
            unint64_t v14 = *v6;
            break;
          case 0x7D4u:
            int v10 = TagFallback & 7;
            if (v10 == 2) {
              goto LABEL_836;
            }
            goto LABEL_135;
          case 0x7D5u:
            int v10 = TagFallback & 7;
            if (v10 == 2) {
              goto LABEL_851;
            }
            goto LABEL_135;
          case 0x7D6u:
            int v10 = TagFallback & 7;
            if (v10 == 2) {
              goto LABEL_866;
            }
            goto LABEL_135;
          case 0x7D7u:
            int v10 = TagFallback & 7;
            if (v10 == 2) {
              goto LABEL_881;
            }
            goto LABEL_135;
          case 0x7D8u:
            int v10 = TagFallback & 7;
            if (v10 == 2) {
              goto LABEL_896;
            }
            goto LABEL_135;
          case 0x7D9u:
            int v10 = TagFallback & 7;
            if (v10 == 2) {
              goto LABEL_911;
            }
            goto LABEL_135;
          case 0x7DAu:
            int v10 = TagFallback & 7;
            if (v10 == 2) {
              goto LABEL_926;
            }
            goto LABEL_135;
          case 0x7DBu:
            int v10 = TagFallback & 7;
            if (v10 == 2) {
              goto LABEL_941;
            }
            goto LABEL_135;
          case 0x7DCu:
            int v10 = TagFallback & 7;
            if (v10 == 2) {
              goto LABEL_956;
            }
            goto LABEL_135;
          case 0x7DDu:
            int v10 = TagFallback & 7;
            if (v10 == 2) {
              goto LABEL_971;
            }
            goto LABEL_135;
          case 0x7DEu:
            int v10 = TagFallback & 7;
            if (v10 == 2) {
              goto LABEL_986;
            }
            goto LABEL_135;
          case 0x7DFu:
            int v10 = TagFallback & 7;
            if (v10 == 2) {
              goto LABEL_1001;
            }
            goto LABEL_135;
          default:
            switch(v9)
            {
              case 0x3ECu:
                int v10 = TagFallback & 7;
                if (v10 == 2) {
                  goto LABEL_644;
                }
                goto LABEL_135;
              case 0x3EEu:
                int v10 = TagFallback & 7;
                if (v10 == 2) {
                  goto LABEL_659;
                }
                goto LABEL_135;
              case 0x3EFu:
                int v10 = TagFallback & 7;
                if (v10 == 2) {
                  goto LABEL_674;
                }
                goto LABEL_135;
              case 0x3F0u:
                int v10 = TagFallback & 7;
                if (v10 == 2) {
                  goto LABEL_689;
                }
                goto LABEL_135;
              case 0x3F2u:
                int v10 = TagFallback & 7;
                if (v10 == 2) {
                  goto LABEL_704;
                }
                goto LABEL_135;
              case 0x3F4u:
                int v10 = TagFallback & 7;
                if (v10 == 2) {
                  goto LABEL_719;
                }
                goto LABEL_135;
              case 0x3F6u:
                int v10 = TagFallback & 7;
                if (v10 == 2) {
                  goto LABEL_734;
                }
                goto LABEL_135;
              case 0x3F8u:
                int v10 = TagFallback & 7;
                if (v10 == 2) {
                  goto LABEL_749;
                }
                goto LABEL_135;
              case 0x3F9u:
                int v10 = TagFallback & 7;
                if (v10 == 2) {
                  goto LABEL_764;
                }
                goto LABEL_135;
              default:
                int v10 = TagFallback & 7;
                goto LABEL_135;
            }
        }
        goto LABEL_824;
    }
  }
}

void sub_10089C1BC()
{
}

void sub_10089C60C(uint64_t a1, void *lpsrc)
{
  sub_10089616C(a1, (uint64_t)lpsrc);
}

uint64_t sub_10089C694()
{
  return 1;
}

void *sub_10089C69C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "CLP.LogEntry.PrivateData.PrivateDataCapture");
}

double sub_10089C7F4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = a2;
  *(void *)a1 = off_1022CED18;
  *(void *)(a1 + 8) = off_1022CEDC0;
  *(void *)(a1 + 296) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  return result;
}

void *sub_10089C850(void *a1)
{
  *a1 = off_1022CED18;
  unsigned int v2 = a1 + 1;
  a1[1] = off_1022CEDC0;
  uint64_t v3 = a1[37];
  a1[37] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[36];
  a1[36] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[35];
  a1[35] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_10089C948(v2);
  return a1;
}

void *sub_10089C948(void *a1)
{
  *a1 = off_1022CEE40;
  sub_10100E7A0((uint64_t)a1);
  uint64_t v2 = a1[30];
  a1[30] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void *sub_10089C9C4(uint64_t a1)
{
  return sub_10089C850((void *)(a1 - 8));
}

void sub_10089C9CC(void *a1)
{
  sub_10089C850(a1);

  operator delete();
}

void sub_10089CA04(uint64_t a1)
{
  sub_10089C850((void *)(a1 - 8));

  operator delete();
}

void sub_10089CA40(uint64_t a1, uint64_t a2)
{
  sub_1000C7F88(&v3);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 160))(a2, &v3);
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_10089CAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

id sub_10089CAC0(uint64_t a1)
{
  id v1 = [[objc_msgSend(*(id *)(a1 + 256), "vendor") proxyForService:@"CLClientManager"];

  return [v1 syncgetLocationClientKeys];
}

void sub_10089CAF8()
{
}

void sub_10089D1B8()
{
}

void sub_10089D1E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 256), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CEE58);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterTraceExternal::onStepCountNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CEE58);
    }
    unsigned int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterTraceExternal::onStepCountNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a4 + 304) + 32))(*(void *)(a4 + 304), a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10089D3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10089D3F4(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 256), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022CEE58);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterTraceExternal::onCompass", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022CEE58);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      char v11 = "";
      __int16 v12 = 2082;
      int v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterTraceExternal::onCompass\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  (*(void (**)(void, uint64_t))(**(void **)(a2 + 304) + 16))(*(void *)(a2 + 304), a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_10089D5C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10089D5E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 280);
  *(void *)(a1 + 280) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 296);
  *(void *)(a1 + 296) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 288);
  *(void *)(a1 + 288) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  MapsFeature_RemoveDelegateListenerForAllKeys();
  [*(id *)(a1 + 272) deregisterForVisionNotifications:*(void *)(a1 + 264)];

  [*(id *)(a1 + 320) unregisterForUpdates:*(void *)(a1 + 312)];
  *(void *)(a1 + 320) = 0;
  uint64_t v5 = *(void **)(a1 + 312);
}

id sub_10089D6E0(uint64_t a1, unsigned int *a2)
{
  return [*(id *)(*(void *)(a1 + 280) + 16) register:*(void *)(*(void *)(a1 + 280) + 8) forNotification:*a2 registrationInfo:0];
}

id sub_10089D6F4(uint64_t a1, unsigned int *a2)
{
  return [*(id *)(*(void *)(a1 + 280) + 16) unregister:*(void *)(*(void *)(a1 + 280) + 8) forNotification:*a2];
}

uint64_t sub_10089D704(uint64_t a1, int a2)
{
  uint64_t result = sub_1000D2E34(0);
  if (result && *(void *)(a1 + 296))
  {
    uint64_t v5 = sub_1000D2E34(0);
    uint64_t v6 = *(void *)(a1 + 296);
    return sub_1009D1EC4(v5, a2, v6, -1.0);
  }
  return result;
}

void sub_10089D76C(uint64_t a1, int a2)
{
  if (sub_1000D2E34(0) && *(void *)(a1 + 296))
  {
    uint64_t v4 = sub_1000D2E34(0);
    uint64_t v5 = *(void *)(a1 + 296);
    sub_1009D26C4(v4, a2, v5);
  }
}

uint64_t sub_10089D7D0(uint64_t result, int a2)
{
  if (*(void *)(result + 288))
  {
    uint64_t v3 = result;
    uint64_t v4 = sub_100A68CE8();
    uint64_t v5 = *(void *)(v3 + 288);
    return sub_1009D1EC4(v4, a2, v5, -1.0);
  }
  return result;
}

void sub_10089D828(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 288))
  {
    uint64_t v4 = sub_100A68CE8();
    uint64_t v5 = *(void *)(a1 + 288);
    sub_1009D26C4(v4, a2, v5);
  }
}

void sub_10089D87C(uint64_t a1, double a2)
{
  uint64_t v3 = a1 + 8;
  id v4 = [*(id *)(a1 + 256) silo];

  sub_10100E3B0(v3, v4, a2);
}

void sub_10089D8CC(uint64_t a1)
{
}

id sub_10089D8D4(uint64_t a1)
{
  return [*(id *)(a1 + 320) registerForUpdates:*(void *)(a1 + 312)];
}

id sub_10089D8E0(uint64_t a1)
{
  return [*(id *)(a1 + 320) unregisterForUpdates:*(void *)(a1 + 312)];
}

uint64_t sub_10089D8EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_101069FA0();
  long long v4 = *((_OWORD *)v2 + 1);
  long long v3 = *((_OWORD *)v2 + 2);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *((_OWORD *)v2 + 6);
  long long v7 = *((_OWORD *)v2 + 3);
  long long v6 = *((_OWORD *)v2 + 4);
  *(_OWORD *)(a1 + 80) = *((_OWORD *)v2 + 5);
  *(_OWORD *)(a1 + 96) = v5;
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 64) = v6;
  sub_10017F25C(a1 + 112, (uint64_t)(v2 + 28));
  sub_10017F25C(a1 + 152, (uint64_t)(v2 + 38));
  uint64_t result = sub_10017F25C(a1 + 192, (uint64_t)(v2 + 48));
  *(_WORD *)(a1 + 232) = *((_WORD *)v2 + 116);
  return result;
}

void sub_10089D970(_Unwind_Exception *a1)
{
  sub_1000D7D80(v2);
  sub_1000D7D80(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10089D994(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 304) + 40))();
}

void sub_10089D9BC(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10089D9EC(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void *sub_10089DA1C(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    int v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_100100330(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t i = *v19;
LABEL_38:
    *uint64_t v19 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_10089DC24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10089DC38(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void *sub_10089DC68(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_10234BF80;
  id v9 = a5;
  *a1 = off_1022CEEC8;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  int v14[2] = 0x2020000000;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_10089DDF0;
  aBlock[3] = &unk_1022B6BE8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  CFAbsoluteTime v12[2] = sub_10089DE04;
  v12[3] = &unk_1022B6C10;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_10089DDC8(_Unwind_Exception *a1)
{
  sub_1019D78CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10089DDF0(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_10089DE04(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_10089DE20(uint64_t a1)
{
  sub_10089E138(a1);

  operator delete();
}

id sub_10089DE58(void *a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0x70) {
    size_t v8 = 112;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(__dst, __src, v8);
  if (a4 >= 0x71)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022CEE98);
    }
    id v9 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 136315906;
      unint64_t v35 = 0x8000000101D51333 & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v36 = 2048;
      uint64_t v37 = 112;
      __int16 v38 = 2048;
      unint64_t v39 = a4;
      __int16 v40 = 1024;
      int v41 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022CEE98);
      }
      int v26 = 136315906;
      unint64_t v27 = 0x8000000101D51333 & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v28 = 2048;
      uint64_t v29 = 112;
      __int16 v30 = 2048;
      unint64_t v31 = a4;
      __int16 v32 = 1024;
      int v33 = a2;
      char v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLCompass_Type::Sample>::dispatchData(int, const void *, size_t) [T = CLCompass_Type::Sample]", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  float v13 = (void *)a1[4];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10089E1B4;
  v16[3] = &unk_1022CEF10;
  v16[4] = v12;
  void v16[5] = v11;
  long long v21 = __dst[4];
  long long v22 = __dst[5];
  long long v23 = __dst[6];
  long long v17 = __dst[0];
  long long v18 = __dst[1];
  long long v20 = __dst[3];
  long long v19 = __dst[2];
  uint64_t v24 = v10;
  return [v13 async:v16];
}

uint64_t sub_10089E138(uint64_t a1)
{
  *(void *)a1 = off_1022CEEC8;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1019D78CC(a1);
}

uint64_t sub_10089E1B4(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1[4] + 16))();
  if (result)
  {
    unint64_t v3 = (uint64_t (*)(void *, uint64_t))a1[5];
    uint64_t v4 = a1[20];
    return v3(a1 + 6, v4);
  }
  return result;
}

uint64_t sub_10089E210()
{
  sub_100134750(qword_10247E750, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247E750, (void *)&_mh_execute_header);
}

void sub_10089E598(id a1)
{
  if ((sub_1001073D0() & 0x100) != 0) {
    byte_10247E768 = 1;
  }
}

void sub_10089E674(id a1)
{
  qword_10247E778 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLFenceAnalyticsManagerSilo"];
}

uint64_t sub_10089EA88(uint64_t a1, unsigned int *a2, long long *a3, void *a4)
{
  uint64_t v5 = *a2;
  sub_10089FBB8(v7, a3);
  [a4 onMonitorNotification:v5 data:v7];
  return sub_1001111C8((uint64_t)v7);
}

void sub_10089EAE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001111C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10089ECE0(uint64_t a1)
{
  dispatch_assert_queue_V2((dispatch_queue_t)[*(id *)(a1 + 32) queue]);
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  uint64_t v2 = *(void **)(a1 + 40);
}

uint64_t sub_10089EE10(uint64_t a1, uint64_t a2)
{
  dispatch_assert_queue_V2((dispatch_queue_t)[*(id *)(a1 + 32) queue]);
  id v4 = [[-[CLFenceAnalyticsMotionActivityHistogram initActivityHistogramWithActivities:dateInterval:]([CLFenceAnalyticsMotionActivityHistogram alloc], "initActivityHistogramWithActivities:dateInterval:", a2, *(void *)(a1 + 40)) binsSortedByInterval];
  uint64_t v5 = *(void *)(a1 + 48);
  id v6 = [[objc_msgSend(v4, "firstObject") motionActivityType];
  unint64_t v7 = *(uint64_t (**)(uint64_t, id))(v5 + 16);

  return v7(v5, v6);
}

void sub_10089F0DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100488394((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10089F224(uint64_t a1)
{
  dispatch_assert_queue_V2((dispatch_queue_t)[*(id *)(a1 + 32) queue]);
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

uint64_t sub_10089F6E0(uint64_t a1, long long *a2)
{
  dispatch_assert_queue_V2((dispatch_queue_t)[*(id *)(a1 + 32) queue]);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v8 = *((void *)a2 + 2);
  long long v7 = *a2;
  return (*(uint64_t (**)(uint64_t, long long *, uint64_t))(v4 + 16))(v4, &v7, v5);
}

void sub_10089FB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1001111C8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_10089FBB8(char *a1, long long *a2)
{
  uint64_t v4 = sub_10048AEC0(a1, a2);
  sub_10048AEC0(v4 + 248, (long long *)((char *)a2 + 248));
  memcpy(a1 + 496, a2 + 31, 0x458uLL);
  return a1;
}

void sub_10089FC00(_Unwind_Exception *a1)
{
  unint64_t v3 = *(void **)(v1 + 224);
  if (v3)
  {
    *(void *)(v1 + 232) = v3;
    operator delete(v3);
  }

  sub_101A729EC(v1);
  _Unwind_Resume(a1);
}

void sub_10089FD4C(id a1)
{
  qword_1024193C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void *sub_10089FD7C@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x2E8uLL);
  uint64_t result = sub_10089FDD8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10089FDC4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10089FDD8(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022CF040;
  sub_1015775C8(a1 + 3, *a2);
  return a1;
}

void sub_10089FE24(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10089FE38(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022CF040;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10089FE58(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022CF040;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10089FEAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void sub_10089FED4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_10089FF54()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_10089FFE4(_Unwind_Exception *a1)
{
}

void sub_10089FFFC(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1065353216;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  operator new();
}

void sub_1008A00C0(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object)
{
  char v15 = (void *)v9[15];
  if (v15)
  {
    v9[16] = v15;
    operator delete(v15);
  }
  sub_101A72A64(v11, v10, v9, a1, a2, (uint64_t)&exception_object);
  unint64_t v16 = exception_object;
  long long v17 = *v12;
  if (*v12)
  {
    void v9[4] = v17;
    operator delete(v17);
  }
  _Unwind_Resume(v16);
}

void sub_1008A0138(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022CF080);
  }
  double v3 = Current + -1814400.0;
  uint64_t v4 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134217984;
    *(double *)long long v19 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Workload Calibrator, DB Delete Records Before, expirationTime, %f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022CF080);
    }
    LODWORD(__p[0]) = 134217984;
    *(void **)((char *)__p + 4) = *(void **)&v3;
    BOOL v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkloadCalibrator::bootstrapCalibrationValueFromDb()", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  sub_1014F2864(*(void *)(a1 + 56), v3);
  memset(__p, 0, 24);
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022CF080);
  }
  uint64_t v5 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)uint64_t buf = 67109376;
    LODWORD(v19[0]) = v6;
    WORD2(v19[0]) = 2048;
    *(void *)((char *)v19 + 6) = 0x3FE0000000000000;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Workload Calibrator, DB Get All Records By Activity Type And Maximum Standard Deviation, activityType, %u, standardDeviation, %f", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022CF080);
    }
    char v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkloadCalibrator::bootstrapCalibrationValueFromDb()", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  sub_1014F2434(*(void **)(a1 + 56), (uint64_t)__p, *(_DWORD *)(a1 + 20), 0.5);
  uint64_t v8 = __p[1];
  long long v7 = __p[0];
  if (__p[0] != __p[1])
  {
    double v9 = *(double *)(a1 + 8);
    float v10 = 0.0;
    uint64_t v11 = (char *)__p[0];
    do
    {
      float v10 = v10 + *((float *)v11 + 2);
      if (*((double *)v11 + 3) > v9) {
        double v9 = *((double *)v11 + 3);
      }
      v11 += 32;
    }
    while (v11 != __p[1]);
    *(double *)(a1 + 8) = v9;
    *(float *)(a1 + 16) = v10 / (float)(unint64_t)((v8 - v7) >> 5);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022CF080);
    }
    uint64_t v12 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      double v13 = *(float *)(a1 + 16);
      *(_DWORD *)uint64_t buf = 134217984;
      *(double *)long long v19 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Workload Calibrator, Bootstraping Calibration, Value, %f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022CF080);
      }
      unint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkloadCalibrator::bootstrapCalibrationValueFromDb()", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    long long v7 = __p[0];
  }
  if (v7)
  {
    __p[1] = v7;
    operator delete(v7);
  }
}

void sub_1008A0640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008A0674(char *a1, uint64_t a2, unsigned char *a3, double a4, float a5, float a6)
{
  uint64_t v6 = (uint64_t)a1;
  *a3 = 0;
  if (!a2) {
    return;
  }
  unint64_t v12 = *((void *)a1 + 14);
  double v13 = (char **)(a1 + 96);
  BOOL v14 = (float *)*((void *)a1 + 13);
  if ((unint64_t)v14 >= v12)
  {
    a1 = *v13;
    uint64_t v16 = ((char *)v14 - *v13) >> 2;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 62) {
      sub_1001D7FD4();
    }
    uint64_t v18 = v12 - (void)a1;
    if (v18 >> 1 > v17) {
      unint64_t v17 = v18 >> 1;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      long long v20 = (char *)sub_10017EA34(v6 + 112, v19);
      a1 = *(char **)(v6 + 96);
      BOOL v14 = *(float **)(v6 + 104);
    }
    else
    {
      long long v20 = 0;
    }
    long long v21 = (float *)&v20[4 * v16];
    long long v22 = &v20[4 * v19];
    float *v21 = a5;
    char v15 = v21 + 1;
    while (v14 != (float *)a1)
    {
      int v23 = *((_DWORD *)v14-- - 1);
      *((_DWORD *)v21-- - 1) = v23;
    }
    *(void *)(v6 + 96) = v21;
    *(void *)(v6 + 104) = v15;
    *(void *)(v6 + 112) = v22;
    if (a1) {
      operator delete(a1);
    }
  }
  else
  {
    *BOOL v14 = a5;
    char v15 = v14 + 1;
  }
  unint64_t v24 = *(void *)(v6 + 136);
  *(void *)(v6 + 104) = v15;
  int v25 = (char **)(v6 + 120);
  int v26 = *(float **)(v6 + 128);
  if ((unint64_t)v26 >= v24)
  {
    a1 = *v25;
    uint64_t v28 = ((char *)v26 - *v25) >> 2;
    unint64_t v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 62) {
      sub_1001D7FD4();
    }
    uint64_t v30 = v24 - (void)a1;
    if (v30 >> 1 > v29) {
      unint64_t v29 = v30 >> 1;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v29;
    }
    if (v31)
    {
      __int16 v32 = (char *)sub_10017EA34(v6 + 136, v31);
      a1 = *(char **)(v6 + 120);
      int v26 = *(float **)(v6 + 128);
    }
    else
    {
      __int16 v32 = 0;
    }
    int v33 = (float *)&v32[4 * v28];
    int v34 = &v32[4 * v31];
    float *v33 = a6;
    unint64_t v27 = v33 + 1;
    while (v26 != (float *)a1)
    {
      int v35 = *((_DWORD *)v26-- - 1);
      *((_DWORD *)v33-- - 1) = v35;
    }
    *(void *)(v6 + 120) = v33;
    *(void *)(v6 + 128) = v27;
    *(void *)(v6 + 136) = v34;
    if (a1) {
      operator delete(a1);
    }
  }
  else
  {
    *int v26 = a6;
    unint64_t v27 = v26 + 1;
  }
  *(void *)(v6 + 128) = v27;
  float v36 = sub_1008A0BA8((uint64_t)a1, (float **)(v6 + 96));
  float v38 = sub_1008A0BA8(v37, (float **)(v6 + 120));
  if (v38 < 4.0 || v38 >= 6.0)
  {
    if (v38 < 6.0 || v38 >= 11.0)
    {
      float v40 = 1.0;
      if (v38 < 11.0 || v38 > 20.0) {
        goto LABEL_45;
      }
      float v39 = 4.2658;
    }
    else
    {
      float v39 = 4.4668;
    }
  }
  else
  {
    float v39 = 4.7863;
  }
  float v40 = v39 / v38;
LABEL_45:
  int v41 = *(_DWORD *)(a2 + 552);
  int v42 = *(_DWORD *)(a2 + 556);
  if (!sub_1001860C8(a2)) {
    goto LABEL_66;
  }
  BOOL v43 = v42 == 2 || v41 == 4;
  BOOL v44 = v43;
  if (v38 < 4.0 || v38 > 20.0 || !v44 || v36 < 4.5 || v36 > 20.0) {
    goto LABEL_66;
  }
  if ((float)(v36 / v38) > (float)(10.715 / v38) || (float)(v36 / v38) < v40) {
    goto LABEL_66;
  }
  int v46 = *(_DWORD *)(v6 + 48);
  if (v46 == 1)
  {
    sub_1008A0DFC((void *)v6, a4, v36, v38);
    goto LABEL_65;
  }
  if (!v46)
  {
    sub_1008A0C5C(v6, v36, v38);
LABEL_65:
    *a3 = 1;
    *(CFAbsoluteTime *)(v6 + 8) = CFAbsoluteTimeGetCurrent();
  }
LABEL_66:
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022CF080);
  }
  int v47 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    float v48 = *(float *)(v6 + 16);
    *(_DWORD *)uint64_t buf = 134219008;
    double v51 = a4;
    __int16 v52 = 2048;
    double v53 = v36;
    __int16 v54 = 2048;
    double v55 = v38;
    __int16 v56 = 2048;
    double v57 = v48;
    __int16 v58 = 2048;
    double v59 = (float)(v38 * v48);
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "WorkloadCalibration, timestamp, %f, HRMETs, %f, WRMETs, %f, calibrationValue, %f, calibratedMets, %f", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022CF080);
    }
    uint64_t v49 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "float CLWorkloadCalibrator::computeCalibrationValue(const CLNatalieModelInput *, const CFAbsoluteTime, const float, const float, BOOL &)", "%s\n", v49);
    if (v49 != (char *)buf) {
      free(v49);
    }
  }
}

float sub_1008A0BA8(uint64_t a1, float **a2)
{
  float v2 = 0.0;
  if (a2)
  {
    uint64_t v5 = *a2;
    uint64_t v4 = a2[1];
    if ((unint64_t)((char *)v4 - (char *)*a2) >= 0x11 && v5 != v4 - 4)
    {
      if (v4 == v4 - 4)
      {
        uint64_t v6 = *a2;
      }
      else
      {
        memmove(v5, v4 - 4, 0x10uLL);
        uint64_t v6 = *a2;
      }
      uint64_t v4 = v5 + 4;
      a2[1] = v5 + 4;
      uint64_t v5 = v6;
    }
    if (v5 != v4)
    {
      float v7 = 0.0;
      uint64_t v8 = v5;
      do
      {
        float v9 = *v8++;
        float v7 = v7 + v9;
      }
      while (v8 != v4);
      return v7 / (float)(unint64_t)(v4 - v5);
    }
  }
  return v2;
}

void sub_1008A0C5C(uint64_t a1, float a2, float a3)
{
  uint64_t v6 = a1 + 40;
  unint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = (float **)(a1 + 24);
  float v9 = *(float **)(a1 + 32);
  if ((unint64_t)v9 >= v7)
  {
    uint64_t v11 = *v8;
    uint64_t v12 = ((char *)v9 - (char *)*v8) >> 3;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61) {
      sub_1001D7FD4();
    }
    uint64_t v14 = v7 - (void)v11;
    if (v14 >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      uint64_t v16 = (char *)sub_1000DA54C(v6, v15);
      uint64_t v11 = *(float **)(a1 + 24);
      float v9 = *(float **)(a1 + 32);
    }
    else
    {
      uint64_t v16 = 0;
    }
    unint64_t v17 = (float *)&v16[8 * v12];
    uint64_t v18 = &v16[8 * v15];
    *unint64_t v17 = a3;
    v17[1] = a2;
    float v10 = v17 + 2;
    if (v9 != v11)
    {
      do
      {
        uint64_t v19 = *((void *)v9 - 1);
        v9 -= 2;
        *((void *)v17 - 1) = v19;
        v17 -= 2;
      }
      while (v9 != v11);
      uint64_t v11 = *v8;
    }
    *(void *)(a1 + 24) = v17;
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = v18;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    float *v9 = a3;
    v9[1] = a2;
    float v10 = v9 + 2;
  }
  *(void *)(a1 + 32) = v10;
  long long v20 = *(char **)(a1 + 24);
  unint64_t v21 = (char *)v10 - v20;
  if ((unint64_t)((char *)v10 - v20) >= 0x31)
  {
    sub_1008A0FB8((uint64_t)v8, v20, (char *)v10 - 48);
    unint64_t v21 = *(void *)(a1 + 32) - *(void *)(a1 + 24);
  }
  if (v21 >= 0x19)
  {
    float v22 = sub_100563C48(v8, 30);
    *(float *)(a1 + 16) = v22;
    sub_1003AD508((double *)(a1 + 144), v22);
    int v23 = *(_DWORD *)(a1 + 144);
    double v24 = 0.0;
    BOOL v25 = __OFSUB__(v23, 1);
    int v26 = v23 - 1;
    if (v26 < 0 != v25)
    {
      float v27 = 0.0;
    }
    else
    {
      float v27 = *(double *)(a1 + 160);
      if (v26) {
        double v24 = *(double *)(a1 + 176) / (double)v26;
      }
    }
    float v28 = sqrt(v24);
    sub_1008A1008(a1, v27, v28);
  }
}

void sub_1008A0DFC(void *a1, double a2, float a3, float a4)
{
  float v9 = (double *)a1[9];
  float v10 = (double *)a1[10];
  uint64_t v11 = (double **)(a1 + 9);
  uint64_t v12 = v9;
  if (v9 != v10)
  {
    uint64_t v12 = v10;
    if (a2 - *(v10 - 2) > 120.0)
    {
      a1[10] = v9;
      uint64_t v12 = v9;
    }
  }
  unint64_t v13 = a1[11];
  if ((unint64_t)v12 >= v13)
  {
    uint64_t v15 = ((char *)v12 - (char *)v9) >> 4;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v17 = v13 - (void)v9;
    if (v17 >> 3 > v16) {
      unint64_t v16 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      uint64_t v19 = (char *)sub_1000C571C((uint64_t)(a1 + 11), v18);
      float v9 = (double *)a1[9];
      uint64_t v12 = (double *)a1[10];
    }
    else
    {
      uint64_t v19 = 0;
    }
    long long v20 = (float *)&v19[16 * v15];
    *(double *)long long v20 = a2;
    unint64_t v21 = &v19[16 * v18];
    void v20[2] = a3;
    v20[3] = a4;
    uint64_t v14 = (double *)(v20 + 4);
    if (v12 != v9)
    {
      do
      {
        *((_OWORD *)v20 - 1) = *((_OWORD *)v12 - 1);
        v20 -= 4;
        v12 -= 2;
      }
      while (v12 != v9);
      float v9 = *v11;
    }
    a1[9] = v20;
    a1[10] = v14;
    a1[11] = v21;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *uint64_t v12 = a2;
    uint64_t v14 = v12 + 2;
    *((float *)v12 + 2) = a3;
    *((float *)v12 + 3) = a4;
  }
  a1[10] = v14;
  uint64_t v22 = a1[9];
  if ((unint64_t)v14 - v22 >= 0x41 && sub_1008A1578((uint64_t)a1) > 30.0)
  {
    sub_1008A1664(v23, v11, 8);
    float v25 = v24;
    sub_1008A1664(v26, v11, 12);
    a1[10] = v22;
    sub_1008A0C5C((uint64_t)a1, v25, v27);
  }
}

char *sub_1008A0FB8(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3)
  {
    double v3 = *(char **)(a1 + 8);
    uint64_t v4 = a2;
    if (a3 != v3)
    {
      uint64_t v5 = 8 * ((a3 - a2) >> 3);
      uint64_t v4 = a2;
      do
      {
        int v6 = *(_DWORD *)&v4[v5 + 4];
        *(_DWORD *)uint64_t v4 = *(_DWORD *)&v4[v5];
        *((_DWORD *)v4 + 1) = v6;
        v4 += 8;
      }
      while (&v4[v5] != v3);
    }
    *(void *)(a1 + 8) = v4;
  }
  return a2;
}

uint64_t sub_1008A1008(uint64_t a1, float a2, float a3)
{
  double v6 = *(double *)a1;
  if (*(double *)a1 == 0.0)
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    *(CFAbsoluteTime *)a1 = Current;
    uint64_t v19 = 0;
    int v8 = *(_DWORD *)(a1 + 20);
    HIDWORD(v19) = v8;
    float v20 = a2;
    float v21 = a3;
    uint64_t v9 = *(void *)(a1 + 8);
    CFAbsoluteTime v22 = Current;
    uint64_t v23 = v9;
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022CF080);
    }
    float v10 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109888;
      *(_DWORD *)unint64_t v31 = v8;
      *(_WORD *)&v31[4] = 2048;
      *(double *)&v31[6] = a2;
      __int16 v32 = 2048;
      double v33 = a3;
      __int16 v34 = 2048;
      CFAbsoluteTime v35 = Current;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Workload Calibrator, DB Insert, activityType, %u, valueAverage, %f, standardDeviation, %f, entry.startTime, %f", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022CF080);
      }
      int v24 = 67109888;
      *(_DWORD *)float v25 = v8;
      *(_WORD *)&v25[4] = 2048;
      *(double *)&v25[6] = a2;
      __int16 v26 = 2048;
      double v27 = a3;
      __int16 v28 = 2048;
      CFAbsoluteTime v29 = Current;
      unint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkloadCalibrator::persistCalibration(const float, const float)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    sub_1014F341C(*(void *)(a1 + 56), (uint64_t)&v19);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022CF0A0);
    }
    uint64_t v11 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134218240;
      *(void *)unint64_t v31 = 5;
      *(_WORD *)&v31[8] = 1024;
      *(_DWORD *)&unsigned char v31[10] = HIDWORD(v19);
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Workload Calibrator, DB Delete Keep Last N, kMaximumDbHistorySize, %lu, activityType, %u", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022CF0A0);
      }
      int v24 = 134218240;
      *(void *)float v25 = 5;
      *(_WORD *)&v25[8] = 1024;
      *(_DWORD *)&v25[10] = HIDWORD(v19);
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkloadCalibrator::persistCalibration(const float, const float)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    return sub_1014F352C(*(void *)(a1 + 56), 5, SHIDWORD(v19));
  }
  else
  {
    uint64_t v19 = 0;
    int v13 = *(_DWORD *)(a1 + 20);
    HIDWORD(v19) = v13;
    float v20 = a2;
    float v21 = a3;
    uint64_t v14 = *(void *)(a1 + 8);
    CFAbsoluteTime v22 = v6;
    uint64_t v23 = v14;
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022CF080);
    }
    uint64_t v15 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109888;
      *(_DWORD *)unint64_t v31 = v13;
      *(_WORD *)&v31[4] = 2048;
      *(double *)&v31[6] = a2;
      __int16 v32 = 2048;
      double v33 = a3;
      __int16 v34 = 2048;
      CFAbsoluteTime v35 = v6;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Workload Calibrator, DB Update, activityType, %u, valueAverage, %f, standardDeviation, %f, entry.startTime, %f", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022CF080);
      }
      int v24 = 67109888;
      *(_DWORD *)float v25 = v13;
      *(_WORD *)&v25[4] = 2048;
      *(double *)&v25[6] = a2;
      __int16 v26 = 2048;
      double v27 = a3;
      __int16 v28 = 2048;
      CFAbsoluteTime v29 = v6;
      unint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkloadCalibrator::persistCalibration(const float, const float)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    return sub_1014F3628(*(void *)(a1 + 56), (uint64_t)&v19);
  }
}

double sub_1008A1578(uint64_t a1)
{
  float v2 = *(double **)(a1 + 72);
  uint64_t v1 = *(double **)(a1 + 80);
  double v3 = v2 + 2;
  if (v2 == v1 || v3 == v1)
  {
    uint64_t v5 = *(double **)(a1 + 72);
    double v3 = v5;
  }
  else
  {
    double v7 = v2[2];
    if (v7 >= *v2) {
      uint64_t v5 = *(double **)(a1 + 72);
    }
    else {
      uint64_t v5 = v2 + 2;
    }
    if (v7 < *v2) {
      double v3 = *(double **)(a1 + 72);
    }
    int v8 = v2 + 4;
    if (v2 + 4 != v1)
    {
      if (v7 >= *v2) {
        double v7 = *v2;
      }
      while (1)
      {
        uint64_t v9 = v8;
        float v10 = v8 + 2;
        if (v10 == v1) {
          break;
        }
        double v11 = v9[2];
        double v12 = *v9;
        if (v11 >= *v9)
        {
          int v13 = v2 + 6;
          if (v12 < v7)
          {
            double v7 = *v9;
            uint64_t v5 = v9;
          }
          if (v11 >= *v3) {
            double v3 = v13;
          }
        }
        else
        {
          double v7 = *v5;
          if (v11 < *v5)
          {
            double v7 = v9[2];
            uint64_t v5 = v10;
          }
          if (v12 >= *v3) {
            double v3 = v9;
          }
        }
        int v8 = v9 + 4;
        float v2 = v9;
        if (v9 + 4 == v1) {
          return *v3 - *v5;
        }
      }
      if (*v9 >= *v5)
      {
        if (*v9 >= *v3) {
          double v3 = v9;
        }
      }
      else
      {
        uint64_t v5 = v9;
      }
    }
  }
  return *v3 - *v5;
}

void sub_1008A1664(uint64_t a1, double **a2, uint64_t a3)
{
  float v3 = 0.0;
  if (a2)
  {
    if (a3 != -1)
    {
      uint64_t v5 = *a2;
      uint64_t v4 = a2[1];
      if (*a2 != v4)
      {
        double v6 = a2[1];
        do
        {
          double v7 = v5;
          if (v6 != v4) {
            float v3 = v3 + (float)((float)(*(float *)((char *)v6 + a3) + *(float *)((char *)v5 + a3)) * 0.5) * (*v5 - *v6);
          }
          v5 += 2;
          double v6 = v7;
        }
        while (v7 + 2 != v4);
      }
    }
  }
}

void sub_1008A16D4(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_1008A1704(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1008A1734(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1008A179C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A61910(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008A17B4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t sub_1008A17E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1008A1828(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1008A9B9C((uint64_t)v5, a3);
  sub_100EF567C(a1, a2, (uint64_t)v5);
  sub_100681F74(v5);
  *a1 = off_1022CF148;
  sub_1013F040C((uint64_t)(a1 + 6));
  sub_1008A905C((uint64_t)(a1 + 57));
}

void sub_1008A2F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void **a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17, uint64_t a18, uint64_t *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t *a23,uint64_t a24)
{
  sub_100681F74(a12);
  float v25 = *a13;
  if (*a13)
  {
    *(void *)(a24 + 3600) = v25;
    operator delete(v25);
  }
  sub_1008A9C84(a17, 0);
  uint64_t v26 = *a19;
  *a19 = 0;
  if (v26) {
    operator delete();
  }
  sub_1008A9C34(a16, 0);
  nullsub_41(a14, v27);
  sub_100DEE0E0(a15);
  uint64_t v28 = *(void *)(a24 + 3200);
  *(void *)(a24 + 3200) = 0;
  if (v28) {
    (*(void (**)(void))(a24 + 3208))();
  }
  sub_101A72AD8(a23, a18);
  sub_1013F04FC(a11);
  *(void *)a24 = off_102302A90;
  sub_100681F74((void *)(a24 + 16));
  _Unwind_Resume(a1);
}

void sub_1008A31E4(uint64_t a1)
{
}

void sub_1008A31EC(uint64_t a1)
{
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1022CF448);
  }
  float v2 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLMM,onMapMatcherStopped,timer triggered", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022CF448);
    }
    double v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerFusion::onMapMatcherStopped()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  float v3 = *(void **)(a1 + 3144);
  if (v3)
  {
    sub_1008A8D6C(v3, 1);
    sub_1008A8D6C(*(void **)(a1 + 3144), 0);
    GEOResetGeoCodecsAllocator();
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022CF448);
    }
    uint64_t v4 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLMM,onMapMatcherStopped,road and building tiles cleared from process memory", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022CF448);
      }
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerFusion::onMapMatcherStopped()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  uint64_t v5 = *(void **)(a1 + 3640);
  if (v5) {
    [v5 setNextFireDelay:1.79769313e308];
  }
  if (*(void *)(a1 + 3648))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022CF448);
    }
    double v6 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLMM,Releasing mapmatcher collection OS transaction", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022CF448);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLocationControllerFusion::onMapMatcherStopped()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }

    *(void *)(a1 + 3648) = 0;
  }
}

uint64_t sub_1008A3618()
{
  sub_1000C7F88(buf);
  uint64_t v0 = *(void *)buf;
  LODWORD(v1) = sub_100740F54();
  LOBYTE(v5[0]) = 0;
  if (sub_1000D2988(v0, "EnableTrackRun", (BOOL *)v5)) {
    uint64_t v1 = LOBYTE(v5[0]) != 0;
  }
  else {
    uint64_t v1 = v1;
  }
  if (v7) {
    sub_1000DB0A0(v7);
  }
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_1022CF428);
  }
  float v2 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#cltr,EnableTrackRun,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022CF428);
    }
    v5[0] = 67240192;
    v5[1] = v1;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLLocationControllerFusion::isTrackRunEnabled()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return v1;
}

void sub_1008A3814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

BOOL sub_1008A3838(uint64_t a1, uint64_t a2)
{
  return sub_100009E8C(a1 + 48, a2);
}

uint64_t sub_1008A3840(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 3155)) {
    *(unsigned char *)(a1 + 3155) = 0;
  }
  if (!*(void *)(a1 + 3184)) {
    *(void *)(a1 + 3184) = objc_alloc_init(CLNanoRegistry);
  }
  sub_100103240();
  if (sub_10016CCBC()) {
    __int16 v2 = (unsigned __int16)[*(id *)(a1 + 3184) isAFire6OrOlderWatchPaired] ^ 1;
  }
  else {
    __int16 v2 = 0;
  }
  *(_WORD *)(a1 + 3154) = v2 | 0x100;
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_1022CF428);
  }
  float v3 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 3155)) {
      int v4 = *(unsigned __int8 *)(a1 + 3154);
    }
    else {
      int v4 = 1;
    }
    *(_DWORD *)uint64_t buf = 67240192;
    int v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#cltr,fIsPhoneThatDoesNotNeedTrackRunProcessing,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022CF428);
    }
    double v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationControllerFusion::feedPairingStateChanged(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
}

id sub_1008A3A90(uint64_t a1)
{
  id v2 = +[RDEstimate currentEstimates];
  float v3 = v2;
  if (!v2) {
    goto LABEL_45;
  }
  uint64_t v4 = *(void *)(a1 + 3192);
  id v5 = [v2 count];
  id v6 = v5;
  obunint64_t j = v3;
  if (v4)
  {
    id v7 = [*(id *)(a1 + 3192) count];
    int v8 = v3;
    id v9 = v7;
    BOOL v10 = v6 == v7;
    if ([v8 count])
    {
      float v3 = obj;
      goto LABEL_7;
    }
    BOOL v31 = v6 == v9;
    float v3 = obj;
    if (v31) {
      goto LABEL_54;
    }
LABEL_45:
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022CF428);
    }
    uint64_t v30 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#cltr,country code list has changed. Clearing the supported region flag.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_1022CF428);
      }
      LOWORD(v49) = 0;
      __int16 v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationControllerFusion::feedRegulatoryDomainUpdateNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v34);
      if (v34 != (char *)buf) {
        free(v34);
      }
    }
    if (*(unsigned char *)(a1 + 3153)) {
      *(unsigned char *)(a1 + 3153) = 0;
    }
    goto LABEL_59;
  }
  if (!v5) {
    goto LABEL_45;
  }
  BOOL v10 = 0;
LABEL_7:
  uint64_t v36 = a1;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id v39 = [v3 countByEnumeratingWithState:&v44 objects:v53 count:16];
  if (v39)
  {
    p_cache = CLAvengerScannerClientController.cache;
    uint64_t v38 = *(void *)v45;
    do
    {
      double v12 = 0;
      do
      {
        if (*(void *)v45 != v38) {
          objc_enumerationMutation(obj);
        }
        int v13 = *(void **)(*((void *)&v44 + 1) + 8 * (void)v12);
        if (p_cache[502] != (void *)-1) {
          dispatch_once(&qword_102418FB0, &stru_1022CF428);
        }
        uint64_t v14 = qword_102418FB8;
        if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
        {
          id v15 = [v13 countryCode];
          *(_DWORD *)uint64_t buf = 138477827;
          id v52 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#cltr,currentCountryCode,%{private}@", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (p_cache[502] != (void *)-1) {
            dispatch_once(&qword_102418FB0, &stru_1022CF428);
          }
          id v25 = [v13 countryCode];
          int v49 = 138477827;
          id v50 = v25;
          uint64_t v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationControllerFusion::feedRegulatoryDomainUpdateNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v26);
          if (v26 != (char *)buf) {
            free(v26);
          }
        }
        if (v10)
        {
          long long v42 = 0u;
          long long v43 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          unint64_t v16 = *(void **)(v36 + 3192);
          id v17 = [v16 countByEnumeratingWithState:&v40 objects:v48 count:16];
          if (v17)
          {
            id v18 = v17;
            uint64_t v19 = *(void *)v41;
            while (2)
            {
              float v20 = p_cache;
              for (uint64_t i = 0; i != v18; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v41 != v19) {
                  objc_enumerationMutation(v16);
                }
                CFAbsoluteTime v22 = *(void **)(*((void *)&v40 + 1) + 8 * i);
                if (objc_msgSend(objc_msgSend(v13, "countryCode"), "isEqualToString:", objc_msgSend(v22, "countryCode")))
                {
                  p_cache = v20;
                  if (v20[502] != (void *)-1) {
                    dispatch_once(&qword_102418FB0, &stru_1022CF428);
                  }
                  uint64_t v23 = qword_102418FB8;
                  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
                  {
                    id v24 = [v22 countryCode];
                    *(_DWORD *)uint64_t buf = 138477827;
                    id v52 = v24;
                    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#cltr,matching country found,%{private}@", buf, 0xCu);
                  }
                  if (sub_10013D1A0(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (v20[502] != (void *)-1) {
                      dispatch_once(&qword_102418FB0, &stru_1022CF428);
                    }
                    id v27 = [v22 countryCode];
                    int v49 = 138477827;
                    id v50 = v27;
                    uint64_t v28 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationControllerFusion::feedRegulatoryDomainUpdateNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v28);
                    if (v28 != (char *)buf) {
                      free(v28);
                    }
                  }
                  BOOL v10 = 1;
                  goto LABEL_33;
                }
              }
              id v18 = [v16 countByEnumeratingWithState:&v40 objects:v48 count:16];
              BOOL v10 = 0;
              p_cache = v20;
              if (v18) {
                continue;
              }
              break;
            }
          }
        }
LABEL_33:
        double v12 = (char *)v12 + 1;
      }
      while (v12 != v39);
      float v3 = obj;
      id v29 = [obj countByEnumeratingWithState:&v44 objects:v53 count:16];
      id v39 = v29;
    }
    while (v29);
  }
  a1 = v36;
  if (!v10) {
    goto LABEL_45;
  }
LABEL_54:
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_1022CF428);
  }
  __int16 v32 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#cltr,country code list is the same. Not clearing the supported region flag.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022CF428);
    }
    LOWORD(v49) = 0;
    CFAbsoluteTime v35 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLLocationControllerFusion::feedRegulatoryDomainUpdateNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v35);
    if (v35 != (char *)buf) {
      free(v35);
    }
  }
LABEL_59:

  id result = v3;
  *(void *)(a1 + 3192) = result;
  return result;
}